
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000201f4  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b49c  08040494  08040494  00030494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0805b930  0805b930  0004b930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0805b938  0805b938  0004b938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0805b940  0805b940  0004b940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  0805b948  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003688  24000168  0805bab0  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240037f0  0805bab0  000537f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   000582ed  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076a1  00000000  00000000  000a8483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003b50  00000000  00000000  000afb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000038e8  00000000  00000000  000b3678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045507  00000000  00000000  000b6f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003c46a  00000000  00000000  000fc467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b40  00000000  00000000  001388d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002cd411  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010f88  00000000  00000000  002cd464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0804047c 	.word	0x0804047c

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0804047c 	.word	0x0804047c

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802069c:	461a      	mov	r2, r3
 802069e:	2300      	movs	r3, #0
 80206a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	assert(spiHandle);
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d105      	bne.n	80206b6 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x32>
 80206aa:	4b05      	ldr	r3, [pc, #20]	; (80206c0 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x3c>)
 80206ac:	4a05      	ldr	r2, [pc, #20]	; (80206c4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x40>)
 80206ae:	210c      	movs	r1, #12
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x44>)
 80206b2:	f01e fe8f 	bl	803f3d4 <__assert_func>
}
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4618      	mov	r0, r3
 80206ba:	3708      	adds	r7, #8
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}
 80206c0:	08040494 	.word	0x08040494
 80206c4:	080404a0 	.word	0x080404a0
 80206c8:	080404cc 	.word	0x080404cc

080206cc <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206cc:	b590      	push	{r4, r7, lr}
 80206ce:	b08b      	sub	sp, #44	; 0x2c
 80206d0:	af04      	add	r7, sp, #16
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80206d8:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206de:	230c      	movs	r3, #12
 80206e0:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fac5 	bl	8020c7c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	9302      	str	r3, [sp, #8]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9301      	str	r3, [sp, #4]
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	4b99      	ldr	r3, [pc, #612]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x298>)
 8020700:	4a99      	ldr	r2, [pc, #612]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x29c>)
 8020702:	499a      	ldr	r1, [pc, #616]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2a0>)
 8020704:	2001      	movs	r0, #1
 8020706:	f00a fe2c 	bl	802b362 <bhy2_init>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	bf14      	ite	ne
 8020710:	2301      	movne	r3, #1
 8020712:	2300      	moveq	r3, #0
 8020714:	b2db      	uxtb	r3, r3
 8020716:	2b00      	cmp	r3, #0
 8020718:	d001      	beq.n	802071e <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802071a:	2301      	movs	r3, #1
 802071c:	e11d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4618      	mov	r0, r3
 8020722:	f00a fe06 	bl	802b332 <bhy2_soft_reset>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2301      	movne	r3, #1
 802072e:	2300      	moveq	r3, #0
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d001      	beq.n	802073a <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 8020736:	2302      	movs	r3, #2
 8020738:	e10f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802073a:	68fa      	ldr	r2, [r7, #12]
 802073c:	f107 0316 	add.w	r3, r7, #22
 8020740:	4611      	mov	r1, r2
 8020742:	4618      	mov	r0, r3
 8020744:	f00a fce1 	bl	802b10a <bhy2_get_product_id>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	bf14      	ite	ne
 802074e:	2301      	movne	r3, #1
 8020750:	2300      	moveq	r3, #0
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 8020758:	2303      	movs	r3, #3
 802075a:	e0fe      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 802075c:	7dbb      	ldrb	r3, [r7, #22]
 802075e:	2b89      	cmp	r3, #137	; 0x89
 8020760:	d001      	beq.n	8020766 <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020762:	2304      	movs	r3, #4
 8020764:	e0f9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8020766:	7cfb      	ldrb	r3, [r7, #19]
 8020768:	68fa      	ldr	r2, [r7, #12]
 802076a:	4611      	mov	r1, r2
 802076c:	4618      	mov	r0, r3
 802076e:	f00a fd73 	bl	802b258 <bhy2_set_host_interrupt_ctrl>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	bf14      	ite	ne
 8020778:	2301      	movne	r3, #1
 802077a:	2300      	moveq	r3, #0
 802077c:	b2db      	uxtb	r3, r3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020782:	2305      	movs	r3, #5
 8020784:	e0e9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	f107 0313 	add.w	r3, r7, #19
 802078c:	4611      	mov	r1, r2
 802078e:	4618      	mov	r0, r3
 8020790:	f00a fd7e 	bl	802b290 <bhy2_get_host_interrupt_ctrl>
 8020794:	4603      	mov	r3, r0
 8020796:	2b00      	cmp	r3, #0
 8020798:	bf14      	ite	ne
 802079a:	2301      	movne	r3, #1
 802079c:	2300      	moveq	r3, #0
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 80207a4:	2306      	movs	r3, #6
 80207a6:	e0d8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	7dfb      	ldrb	r3, [r7, #23]
 80207ac:	4611      	mov	r1, r2
 80207ae:	4618      	mov	r0, r3
 80207b0:	f00a fda3 	bl	802b2fa <bhy2_set_host_intf_ctrl>
 80207b4:	4603      	mov	r3, r0
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	bf14      	ite	ne
 80207ba:	2301      	movne	r3, #1
 80207bc:	2300      	moveq	r3, #0
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d001      	beq.n	80207c8 <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207c4:	2307      	movs	r3, #7
 80207c6:	e0c8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	f107 0312 	add.w	r3, r7, #18
 80207ce:	4611      	mov	r1, r2
 80207d0:	4618      	mov	r0, r3
 80207d2:	f00a fcce 	bl	802b172 <bhy2_get_boot_status>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207e6:	2308      	movs	r3, #8
 80207e8:	e0b7      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207ea:	7cbb      	ldrb	r3, [r7, #18]
 80207ec:	f003 0310 	and.w	r3, r3, #16
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d101      	bne.n	80207f8 <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207f4:	2309      	movs	r3, #9
 80207f6:	e0b0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	461a      	mov	r2, r3
 80207fc:	495c      	ldr	r1, [pc, #368]	; (8020970 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207fe:	485d      	ldr	r0, [pc, #372]	; (8020974 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 8020800:	f00a fcf3 	bl	802b1ea <bhy2_upload_firmware_to_ram>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	bf14      	ite	ne
 802080a:	2301      	movne	r3, #1
 802080c:	2300      	moveq	r3, #0
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d001      	beq.n	8020818 <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020814:	2309      	movs	r3, #9
 8020816:	e0a0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	f107 0311 	add.w	r3, r7, #17
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f00a fe85 	bl	802b530 <bhy2_get_error_value>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf14      	ite	ne
 802082c:	2301      	movne	r3, #1
 802082e:	2300      	moveq	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d001      	beq.n	802083a <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 8020836:	230a      	movs	r3, #10
 8020838:	e08f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802083a:	7c7b      	ldrb	r3, [r7, #17]
 802083c:	2b00      	cmp	r3, #0
 802083e:	d001      	beq.n	8020844 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020840:	230b      	movs	r3, #11
 8020842:	e08a      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	4618      	mov	r0, r3
 8020848:	f00a fcee 	bl	802b228 <bhy2_boot_from_ram>
 802084c:	4603      	mov	r3, r0
 802084e:	2b00      	cmp	r3, #0
 8020850:	bf14      	ite	ne
 8020852:	2301      	movne	r3, #1
 8020854:	2300      	moveq	r3, #0
 8020856:	b2db      	uxtb	r3, r3
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 802085c:	230c      	movs	r3, #12
 802085e:	e07c      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020860:	68fa      	ldr	r2, [r7, #12]
 8020862:	f107 0311 	add.w	r3, r7, #17
 8020866:	4611      	mov	r1, r2
 8020868:	4618      	mov	r0, r3
 802086a:	f00a fe61 	bl	802b530 <bhy2_get_error_value>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	bf14      	ite	ne
 8020874:	2301      	movne	r3, #1
 8020876:	2300      	moveq	r3, #0
 8020878:	b2db      	uxtb	r3, r3
 802087a:	2b00      	cmp	r3, #0
 802087c:	d001      	beq.n	8020882 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 802087e:	230d      	movs	r3, #13
 8020880:	e06b      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020882:	7c7b      	ldrb	r3, [r7, #17]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 8020888:	230e      	movs	r3, #14
 802088a:	e066      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 802088c:	68fa      	ldr	r2, [r7, #12]
 802088e:	f107 0314 	add.w	r3, r7, #20
 8020892:	4611      	mov	r1, r2
 8020894:	4618      	mov	r0, r3
 8020896:	f00a fc52 	bl	802b13e <bhy2_get_kernel_version>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 80208aa:	230f      	movs	r3, #15
 80208ac:	e055      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208ae:	8abb      	ldrh	r3, [r7, #20]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d101      	bne.n	80208b8 <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208b4:	2310      	movs	r3, #16
 80208b6:	e050      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	f241 123c 	movw	r2, #4412	; 0x113c
 80208be:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	492d      	ldr	r1, [pc, #180]	; (8020978 <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208c4:	2025      	movs	r0, #37	; 0x25
 80208c6:	f00a fd76 	bl	802b3b6 <bhy2_register_fifo_parse_callback>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	bf14      	ite	ne
 80208d0:	2301      	movne	r3, #1
 80208d2:	2300      	moveq	r3, #0
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208da:	2311      	movs	r3, #17
 80208dc:	e03d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 f9a4 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208ea:	4604      	mov	r4, r0
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208f2:	4618      	mov	r0, r3
 80208f4:	f000 f9aa 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208f8:	4601      	mov	r1, r0
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4620      	mov	r0, r4
 8020900:	f00a fab1 	bl	802ae66 <bhy2_get_and_process_fifo>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	bf14      	ite	ne
 802090a:	2301      	movne	r3, #1
 802090c:	2300      	moveq	r3, #0
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	d001      	beq.n	8020918 <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020914:	2312      	movs	r3, #18
 8020916:	e020      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f00a fd7a 	bl	802b414 <bhy2_update_virtual_sensor_list>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	bf14      	ite	ne
 8020926:	2301      	movne	r3, #1
 8020928:	2300      	moveq	r3, #0
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020930:	2310      	movs	r3, #16
 8020932:	e012      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	461a      	mov	r2, r3
 8020938:	6879      	ldr	r1, [r7, #4]
 802093a:	ed97 0a02 	vldr	s0, [r7, #8]
 802093e:	2025      	movs	r0, #37	; 0x25
 8020940:	f00a fbc2 	bl	802b0c8 <bhy2_set_virt_sensor_cfg>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	bf14      	ite	ne
 802094a:	2301      	movne	r3, #1
 802094c:	2300      	moveq	r3, #0
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020954:	2311      	movs	r3, #17
 8020956:	e000      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 8020958:	2300      	movs	r3, #0
}
 802095a:	4618      	mov	r0, r3
 802095c:	371c      	adds	r7, #28
 802095e:	46bd      	mov	sp, r7
 8020960:	bd90      	pop	{r4, r7, pc}
 8020962:	bf00      	nop
 8020964:	08020e4d 	.word	0x08020e4d
 8020968:	08020dc9 	.word	0x08020dc9
 802096c:	08020d4d 	.word	0x08020d4d
 8020970:	0001a66c 	.word	0x0001a66c
 8020974:	080411a4 	.word	0x080411a4
 8020978:	08020a31 	.word	0x08020a31

0802097c <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 802097c:	b590      	push	{r4, r7, lr}
 802097e:	b085      	sub	sp, #20
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020984:	2300      	movs	r3, #0
 8020986:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	f107 030f 	add.w	r3, r7, #15
 802098e:	4611      	mov	r1, r2
 8020990:	4618      	mov	r0, r3
 8020992:	f00a fc98 	bl	802b2c6 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 8020996:	7bfb      	ldrb	r3, [r7, #15]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d028      	beq.n	80209ee <_ZN10BHYWrapper4PollEv+0x72>
		assert(
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f945 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80209a8:	4604      	mov	r4, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 f94b 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209b6:	4601      	mov	r1, r0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	461a      	mov	r2, r3
 80209bc:	4620      	mov	r0, r4
 80209be:	f00a fa52 	bl	802ae66 <bhy2_get_and_process_fifo>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d005      	beq.n	80209d4 <_ZN10BHYWrapper4PollEv+0x58>
 80209c8:	4b0b      	ldr	r3, [pc, #44]	; (80209f8 <_ZN10BHYWrapper4PollEv+0x7c>)
 80209ca:	4a0c      	ldr	r2, [pc, #48]	; (80209fc <_ZN10BHYWrapper4PollEv+0x80>)
 80209cc:	2166      	movs	r1, #102	; 0x66
 80209ce:	480c      	ldr	r0, [pc, #48]	; (8020a00 <_ZN10BHYWrapper4PollEv+0x84>)
 80209d0:	f01e fd00 	bl	803f3d4 <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		frameSeq++;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80209de:	3301      	adds	r3, #1
 80209e0:	687a      	ldr	r2, [r7, #4]
 80209e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80209e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		return true;
 80209ea:	2301      	movs	r3, #1
 80209ec:	e000      	b.n	80209f0 <_ZN10BHYWrapper4PollEv+0x74>
	}

	return false;
 80209ee:	2300      	movs	r3, #0
}
 80209f0:	4618      	mov	r0, r3
 80209f2:	3714      	adds	r7, #20
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd90      	pop	{r4, r7, pc}
 80209f8:	080404e8 	.word	0x080404e8
 80209fc:	0804053c 	.word	0x0804053c
 8020a00:	080404cc 	.word	0x080404cc

08020a04 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 8020a04:	b4b0      	push	{r4, r5, r7}
 8020a06:	b083      	sub	sp, #12
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a16:	4615      	mov	r5, r2
 8020a18:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8020a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a20:	6823      	ldr	r3, [r4, #0]
 8020a22:	602b      	str	r3, [r5, #0]
}
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	370c      	adds	r7, #12
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bcb0      	pop	{r4, r5, r7}
 8020a2c:	4770      	bx	lr
	...

08020a30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a34:	b08e      	sub	sp, #56	; 0x38
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	60f8      	str	r0, [r7, #12]
 8020a3a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d105      	bne.n	8020a52 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a46:	4b40      	ldr	r3, [pc, #256]	; (8020b48 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a48:	4a40      	ldr	r2, [pc, #256]	; (8020b4c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a4a:	2178      	movs	r1, #120	; 0x78
 8020a4c:	4840      	ldr	r0, [pc, #256]	; (8020b50 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a4e:	f01e fcc1 	bl	803f3d4 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a54:	3308      	adds	r3, #8
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	789b      	ldrb	r3, [r3, #2]
 8020a60:	2b0b      	cmp	r3, #11
 8020a62:	d167      	bne.n	8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f107 0214 	add.w	r2, r7, #20
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f00b fee5 	bl	802c83e <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	781a      	ldrb	r2, [r3, #0]
 8020a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a7a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	689b      	ldr	r3, [r3, #8]
 8020a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	f04f 0a00 	mov.w	sl, #0
 8020a8c:	f04f 0b00 	mov.w	fp, #0
 8020a90:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a94:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a98:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a9c:	4652      	mov	r2, sl
 8020a9e:	465b      	mov	r3, fp
 8020aa0:	ebb2 0800 	subs.w	r8, r2, r0
 8020aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8020aa8:	f04f 0200 	mov.w	r2, #0
 8020aac:	f04f 0300 	mov.w	r3, #0
 8020ab0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020ab4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020ab8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020abc:	ebb2 0408 	subs.w	r4, r2, r8
 8020ac0:	eb63 0509 	sbc.w	r5, r3, r9
 8020ac4:	f04f 0200 	mov.w	r2, #0
 8020ac8:	f04f 0300 	mov.w	r3, #0
 8020acc:	00eb      	lsls	r3, r5, #3
 8020ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ad2:	00e2      	lsls	r2, r4, #3
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	461d      	mov	r5, r3
 8020ad8:	1823      	adds	r3, r4, r0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	eb45 0301 	adc.w	r3, r5, r1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ae6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020aee:	a314      	add	r3, pc, #80	; (adr r3, 8020b40 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7ff fc44 	bl	8020380 <__aeabi_uldivmod>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afe:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020b00:	6a3a      	ldr	r2, [r7, #32]
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	4913      	ldr	r1, [pc, #76]	; (8020b54 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020b08:	fb01 f303 	mul.w	r3, r1, r3
 8020b0c:	1ad2      	subs	r2, r2, r3
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020b12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b18:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b20:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b28:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b30:	80da      	strh	r2, [r3, #6]
 8020b32:	e000      	b.n	8020b36 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b34:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b36:	3738      	adds	r7, #56	; 0x38
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b3e:	bf00      	nop
 8020b40:	3b9aca00 	.word	0x3b9aca00
 8020b44:	00000000 	.word	0x00000000
 8020b48:	08040554 	.word	0x08040554
 8020b4c:	0804055c 	.word	0x0804055c
 8020b50:	080404cc 	.word	0x080404cc
 8020b54:	3b9aca00 	.word	0x3b9aca00

08020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b086      	sub	sp, #24
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b64:	68bb      	ldr	r3, [r7, #8]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d105      	bne.n	8020b76 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b6a:	4b26      	ldr	r3, [pc, #152]	; (8020c04 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b6c:	4a26      	ldr	r2, [pc, #152]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b6e:	2191      	movs	r1, #145	; 0x91
 8020b70:	4826      	ldr	r0, [pc, #152]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b72:	f01e fc2f 	bl	803f3d4 <__assert_func>
	assert(size);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d105      	bne.n	8020b88 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b7c:	4b24      	ldr	r3, [pc, #144]	; (8020c10 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b7e:	4a22      	ldr	r2, [pc, #136]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b80:	2192      	movs	r1, #146	; 0x92
 8020b82:	4822      	ldr	r0, [pc, #136]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b84:	f01e fc26 	bl	803f3d4 <__assert_func>

	uint8_t *ptr = dest;
 8020b88:	68bb      	ldr	r3, [r7, #8]
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	3302      	adds	r3, #2
 8020bba:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bc6:	697b      	ldr	r3, [r7, #20]
 8020bc8:	3302      	adds	r3, #2
 8020bca:	617b      	str	r3, [r7, #20]
	/*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	689a      	ldr	r2, [r3, #8]
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	68da      	ldr	r2, [r3, #12]
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020be2:	697b      	ldr	r3, [r7, #20]
 8020be4:	3304      	adds	r3, #4
 8020be6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	7c1a      	ldrb	r2, [r3, #16]
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2211      	movs	r2, #17
 8020bfa:	701a      	strb	r2, [r3, #0]
}
 8020bfc:	bf00      	nop
 8020bfe:	3718      	adds	r7, #24
 8020c00:	46bd      	mov	sp, r7
 8020c02:	bd80      	pop	{r7, pc}
 8020c04:	080405a8 	.word	0x080405a8
 8020c08:	080405b0 	.word	0x080405b0
 8020c0c:	080404cc 	.word	0x080404cc
 8020c10:	080405ec 	.word	0x080405ec

08020c14 <_ZNK10BHYWrapper6GetSeqEv>:

size_t BHYWrapper::GetSeq() const {
 8020c14:	b480      	push	{r7}
 8020c16:	b083      	sub	sp, #12
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
	return frameSeq;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020c22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 8020c26:	4618      	mov	r0, r3
 8020c28:	370c      	adds	r7, #12
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c30:	4770      	bx	lr

08020c32 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020c32:	b580      	push	{r7, lr}
 8020c34:	b082      	sub	sp, #8
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	f000 f811 	bl	8020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c42:	4603      	mov	r3, r0
 8020c44:	4618      	mov	r0, r3
 8020c46:	3708      	adds	r7, #8
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}

08020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c4c:	b480      	push	{r7}
 8020c4e:	b083      	sub	sp, #12
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
 8020c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c58:	4618      	mov	r0, r3
 8020c5a:	370c      	adds	r7, #12
 8020c5c:	46bd      	mov	sp, r7
 8020c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c62:	4770      	bx	lr

08020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c64:	b480      	push	{r7}
 8020c66:	b083      	sub	sp, #12
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	4618      	mov	r0, r3
 8020c70:	370c      	adds	r7, #12
 8020c72:	46bd      	mov	sp, r7
 8020c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c78:	4770      	bx	lr
	...

08020c7c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c7c:	b480      	push	{r7}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c84:	4a04      	ldr	r2, [pc, #16]	; (8020c98 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	6013      	str	r3, [r2, #0]
}
 8020c8a:	bf00      	nop
 8020c8c:	370c      	adds	r7, #12
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop
 8020c98:	24000184 	.word	0x24000184

08020c9c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b082      	sub	sp, #8
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020ca8:	4b11      	ldr	r3, [pc, #68]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	887a      	ldrh	r2, [r7, #2]
 8020cae:	6879      	ldr	r1, [r7, #4]
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f015 ff25 	bl	8036b00 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cb6:	4b0e      	ldr	r3, [pc, #56]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f016 fdae 	bl	803781c <HAL_SPI_GetState>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	bf14      	ite	ne
 8020cc6:	2301      	movne	r3, #1
 8020cc8:	2300      	moveq	r3, #0
 8020cca:	b2db      	uxtb	r3, r3
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d000      	beq.n	8020cd2 <_Z11spiTransmitPht+0x36>
 8020cd0:	e7f1      	b.n	8020cb6 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cd2:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	bf0c      	ite	eq
 8020cde:	2301      	moveq	r3, #1
 8020ce0:	2300      	movne	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	b25b      	sxtb	r3, r3
  }
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3708      	adds	r7, #8
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	24000184 	.word	0x24000184

08020cf4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cf4:	b580      	push	{r7, lr}
 8020cf6:	b082      	sub	sp, #8
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	460b      	mov	r3, r1
 8020cfe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020d00:	4b11      	ldr	r3, [pc, #68]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	887a      	ldrh	r2, [r7, #2]
 8020d06:	6879      	ldr	r1, [r7, #4]
 8020d08:	4618      	mov	r0, r3
 8020d0a:	f016 f843 	bl	8036d94 <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020d0e:	4b0e      	ldr	r3, [pc, #56]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	4618      	mov	r0, r3
 8020d14:	f016 fd82 	bl	803781c <HAL_SPI_GetState>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b01      	cmp	r3, #1
 8020d1c:	bf14      	ite	ne
 8020d1e:	2301      	movne	r3, #1
 8020d20:	2300      	moveq	r3, #0
 8020d22:	b2db      	uxtb	r3, r3
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d000      	beq.n	8020d2a <_Z9spiReceivPht+0x36>
 8020d28:	e7f1      	b.n	8020d0e <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020d2a:	4b07      	ldr	r3, [pc, #28]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	b25b      	sxtb	r3, r3
  }
 8020d3e:	4618      	mov	r0, r3
 8020d40:	3708      	adds	r7, #8
 8020d42:	46bd      	mov	sp, r7
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	24000184 	.word	0x24000184

08020d4c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b084      	sub	sp, #16
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	60b9      	str	r1, [r7, #8]
 8020d54:	607a      	str	r2, [r7, #4]
 8020d56:	603b      	str	r3, [r7, #0]
 8020d58:	4603      	mov	r3, r0
 8020d5a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d5c:	4b19      	ldr	r3, [pc, #100]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d62:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d64:	f107 030f 	add.w	r3, r7, #15
 8020d68:	2101      	movs	r1, #1
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f7ff ff96 	bl	8020c9c <_Z11spiTransmitPht>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	bf0c      	ite	eq
 8020d76:	2301      	moveq	r3, #1
 8020d78:	2300      	movne	r3, #0
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d002      	beq.n	8020d86 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d80:	f06f 0301 	mvn.w	r3, #1
 8020d84:	e019      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	b29b      	uxth	r3, r3
 8020d8a:	4619      	mov	r1, r3
 8020d8c:	68b8      	ldr	r0, [r7, #8]
 8020d8e:	f7ff ffb1 	bl	8020cf4 <_Z9spiReceivPht>
 8020d92:	4603      	mov	r3, r0
 8020d94:	2b00      	cmp	r3, #0
 8020d96:	bf14      	ite	ne
 8020d98:	2301      	movne	r3, #1
 8020d9a:	2300      	moveq	r3, #0
 8020d9c:	b2db      	uxtb	r3, r3
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d005      	beq.n	8020dae <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020da2:	4b08      	ldr	r3, [pc, #32]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020da8:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020daa:	2300      	movs	r3, #0
 8020dac:	e005      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dae:	4b05      	ldr	r3, [pc, #20]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020db4:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020db6:	f06f 0301 	mvn.w	r3, #1
  }
 8020dba:	4618      	mov	r0, r3
 8020dbc:	3710      	adds	r7, #16
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	58021000 	.word	0x58021000

08020dc8 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b084      	sub	sp, #16
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	60b9      	str	r1, [r7, #8]
 8020dd0:	607a      	str	r2, [r7, #4]
 8020dd2:	603b      	str	r3, [r7, #0]
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	2b40      	cmp	r3, #64	; 0x40
 8020ddc:	d902      	bls.n	8020de4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020dde:	f06f 0303 	mvn.w	r3, #3
 8020de2:	e028      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020de4:	4a16      	ldr	r2, [pc, #88]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020de6:	7bfb      	ldrb	r3, [r7, #15]
 8020de8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020dea:	4b16      	ldr	r3, [pc, #88]	; (8020e44 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dec:	687a      	ldr	r2, [r7, #4]
 8020dee:	68b9      	ldr	r1, [r7, #8]
 8020df0:	4618      	mov	r0, r3
 8020df2:	f01e fb59 	bl	803f4a8 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020df6:	4b14      	ldr	r3, [pc, #80]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dfc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	3301      	adds	r3, #1
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	4619      	mov	r1, r3
 8020e08:	480d      	ldr	r0, [pc, #52]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020e0a:	f7ff ff47 	bl	8020c9c <_Z11spiTransmitPht>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	bf14      	ite	ne
 8020e14:	2301      	movne	r3, #1
 8020e16:	2300      	moveq	r3, #0
 8020e18:	b2db      	uxtb	r3, r3
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d005      	beq.n	8020e2a <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e1e:	4b0a      	ldr	r3, [pc, #40]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e24:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020e26:	2300      	movs	r3, #0
 8020e28:	e005      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e30:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020e36:	4618      	mov	r0, r3
 8020e38:	3710      	adds	r7, #16
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	24000188 	.word	0x24000188
 8020e44:	24000189 	.word	0x24000189
 8020e48:	58021000 	.word	0x58021000

08020e4c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e4c:	b580      	push	{r7, lr}
 8020e4e:	b082      	sub	sp, #8
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	6078      	str	r0, [r7, #4]
 8020e54:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e5c:	d308      	bcc.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a0b      	ldr	r2, [pc, #44]	; (8020e90 <_Z13bhy2_delay_usmPv+0x44>)
 8020e62:	fba2 2303 	umull	r2, r3, r2, r3
 8020e66:	099b      	lsrs	r3, r3, #6
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f00d fa45 	bl	802e2f8 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e6e:	e00b      	b.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	1e5a      	subs	r2, r3, #1
 8020e74:	607a      	str	r2, [r7, #4]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	bf14      	ite	ne
 8020e7a:	2301      	movne	r3, #1
 8020e7c:	2300      	moveq	r3, #0
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d001      	beq.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e84:	bf00      	nop
    while( us-- ) {
 8020e86:	e7f3      	b.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e88:	bf00      	nop
 8020e8a:	3708      	adds	r7, #8
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}
 8020e90:	10624dd3 	.word	0x10624dd3

08020e94 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	bfb8      	it	lt
 8020ea2:	425b      	neglt	r3, r3
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	370c      	adds	r7, #12
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr

08020eb0 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	4618      	mov	r0, r3
 8020ebc:	370c      	adds	r7, #12
 8020ebe:	46bd      	mov	sp, r7
 8020ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec4:	4770      	bx	lr

08020ec6 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020ec6:	b480      	push	{r7}
 8020ec8:	b083      	sub	sp, #12
 8020eca:	af00      	add	r7, sp, #0
 8020ecc:	6078      	str	r0, [r7, #4]
 8020ece:	6039      	str	r1, [r7, #0]
 8020ed0:	683b      	ldr	r3, [r7, #0]
 8020ed2:	4618      	mov	r0, r3
 8020ed4:	370c      	adds	r7, #12
 8020ed6:	46bd      	mov	sp, r7
 8020ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020edc:	4770      	bx	lr

08020ede <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020ede:	b480      	push	{r7}
 8020ee0:	b083      	sub	sp, #12
 8020ee2:	af00      	add	r7, sp, #0
 8020ee4:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020eec:	d205      	bcs.n	8020efa <_ZSt16__deque_buf_sizej+0x1c>
 8020eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ef8:	e000      	b.n	8020efc <_ZSt16__deque_buf_sizej+0x1e>
 8020efa:	2301      	movs	r3, #1
 8020efc:	4618      	mov	r0, r3
 8020efe:	370c      	adds	r7, #12
 8020f00:	46bd      	mov	sp, r7
 8020f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f06:	4770      	bx	lr

08020f08 <_ZN11QueueSender11MessageMode9SerializeEh>:
		static constexpr Type Sync = 0;
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;
		static constexpr Type SetPeriod = 3;

		static uint8_t Serialize(Type mode) {
 8020f08:	b480      	push	{r7}
 8020f0a:	b083      	sub	sp, #12
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	4603      	mov	r3, r0
 8020f10:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020f12:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f14:	4618      	mov	r0, r3
 8020f16:	370c      	adds	r7, #12
 8020f18:	46bd      	mov	sp, r7
 8020f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f1e:	4770      	bx	lr

08020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020f20:	b480      	push	{r7}
 8020f22:	b083      	sub	sp, #12
 8020f24:	af00      	add	r7, sp, #0
 8020f26:	4603      	mov	r3, r0
 8020f28:	71fb      	strb	r3, [r7, #7]
			return val;
 8020f2a:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f2c:	4618      	mov	r0, r3
 8020f2e:	370c      	adds	r7, #12
 8020f30:	46bd      	mov	sp, r7
 8020f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f36:	4770      	bx	lr

08020f38 <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type Timeout = 1;
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;
		static constexpr Type BadPeriod = 4;

		static uint8_t Serialize(Type error) {
 8020f38:	b480      	push	{r7}
 8020f3a:	b083      	sub	sp, #12
 8020f3c:	af00      	add	r7, sp, #0
 8020f3e:	4603      	mov	r3, r0
 8020f40:	71fb      	strb	r3, [r7, #7]
			return error;
 8020f42:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f44:	4618      	mov	r0, r3
 8020f46:	370c      	adds	r7, #12
 8020f48:	46bd      	mov	sp, r7
 8020f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f4e:	4770      	bx	lr

08020f50 <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020f50:	b580      	push	{r7, lr}
 8020f52:	b082      	sub	sp, #8
 8020f54:	af00      	add	r7, sp, #0
 8020f56:	6078      	str	r0, [r7, #4]
 8020f58:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020f5a:	683b      	ldr	r3, [r7, #0]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d105      	bne.n	8020f6c <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f60:	4b13      	ldr	r3, [pc, #76]	; (8020fb0 <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f62:	4a14      	ldr	r2, [pc, #80]	; (8020fb4 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f64:	216f      	movs	r1, #111	; 0x6f
 8020f66:	4814      	ldr	r0, [pc, #80]	; (8020fb8 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f68:	f01e fa34 	bl	803f3d4 <__assert_func>
			assert(*ptr);
 8020f6c:	683b      	ldr	r3, [r7, #0]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d105      	bne.n	8020f80 <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f74:	4b11      	ldr	r3, [pc, #68]	; (8020fbc <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f76:	4a0f      	ldr	r2, [pc, #60]	; (8020fb4 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f78:	2170      	movs	r1, #112	; 0x70
 8020f7a:	480f      	ldr	r0, [pc, #60]	; (8020fb8 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f7c:	f01e fa2a 	bl	803f3d4 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	687a      	ldr	r2, [r7, #4]
 8020f86:	8812      	ldrh	r2, [r2, #0]
 8020f88:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	1c9a      	adds	r2, r3, #2
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f94:	683b      	ldr	r3, [r7, #0]
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	687a      	ldr	r2, [r7, #4]
 8020f9a:	8852      	ldrh	r2, [r2, #2]
 8020f9c:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f9e:	683b      	ldr	r3, [r7, #0]
 8020fa0:	681b      	ldr	r3, [r3, #0]
 8020fa2:	1c9a      	adds	r2, r3, #2
 8020fa4:	683b      	ldr	r3, [r7, #0]
 8020fa6:	601a      	str	r2, [r3, #0]
		}
 8020fa8:	bf00      	nop
 8020faa:	3708      	adds	r7, #8
 8020fac:	46bd      	mov	sp, r7
 8020fae:	bd80      	pop	{r7, pc}
 8020fb0:	080405f4 	.word	0x080405f4
 8020fb4:	080405f8 	.word	0x080405f8
 8020fb8:	08040628 	.word	0x08040628
 8020fbc:	08040644 	.word	0x08040644

08020fc0 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8020fc0:	b580      	push	{r7, lr}
 8020fc2:	b082      	sub	sp, #8
 8020fc4:	af00      	add	r7, sp, #0
 8020fc6:	6078      	str	r0, [r7, #4]
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	4618      	mov	r0, r3
 8020fcc:	f002 fa9c 	bl	8023508 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8020fd0:	687b      	ldr	r3, [r7, #4]
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	3708      	adds	r7, #8
 8020fd6:	46bd      	mov	sp, r7
 8020fd8:	bd80      	pop	{r7, pc}

08020fda <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8020fda:	b580      	push	{r7, lr}
 8020fdc:	b082      	sub	sp, #8
 8020fde:	af00      	add	r7, sp, #0
 8020fe0:	6078      	str	r0, [r7, #4]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	4618      	mov	r0, r3
 8020fe6:	f002 fb08 	bl	80235fa <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	4618      	mov	r0, r3
 8020fee:	3708      	adds	r7, #8
 8020ff0:	46bd      	mov	sp, r7
 8020ff2:	bd80      	pop	{r7, pc}

08020ff4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	b082      	sub	sp, #8
 8020ff8:	af00      	add	r7, sp, #0
 8020ffa:	6078      	str	r0, [r7, #4]
 8020ffc:	6878      	ldr	r0, [r7, #4]
 8020ffe:	f002 fb31 	bl	8023664 <_ZNSaIhED1Ev>
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	4618      	mov	r0, r3
 8021006:	3708      	adds	r7, #8
 8021008:	46bd      	mov	sp, r7
 802100a:	bd80      	pop	{r7, pc}

0802100c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 802100c:	b580      	push	{r7, lr}
 802100e:	b082      	sub	sp, #8
 8021010:	af00      	add	r7, sp, #0
 8021012:	6078      	str	r0, [r7, #4]
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	4618      	mov	r0, r3
 8021018:	f002 fb14 	bl	8023644 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 802101c:	687b      	ldr	r3, [r7, #4]
 802101e:	4618      	mov	r0, r3
 8021020:	3708      	adds	r7, #8
 8021022:	46bd      	mov	sp, r7
 8021024:	bd80      	pop	{r7, pc}

08021026 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8021026:	b580      	push	{r7, lr}
 8021028:	b082      	sub	sp, #8
 802102a:	af00      	add	r7, sp, #0
 802102c:	6078      	str	r0, [r7, #4]
 802102e:	687b      	ldr	r3, [r7, #4]
 8021030:	4618      	mov	r0, r3
 8021032:	f7ff ffeb 	bl	802100c <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	4618      	mov	r0, r3
 802103a:	3708      	adds	r7, #8
 802103c:	46bd      	mov	sp, r7
 802103e:	bd80      	pop	{r7, pc}

08021040 <_ZN7RequestC1Ev>:
struct Request {
 8021040:	b580      	push	{r7, lr}
 8021042:	b082      	sub	sp, #8
 8021044:	af00      	add	r7, sp, #0
 8021046:	6078      	str	r0, [r7, #4]
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	4618      	mov	r0, r3
 802104c:	f7ff ffeb 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	4618      	mov	r0, r3
 8021054:	3708      	adds	r7, #8
 8021056:	46bd      	mov	sp, r7
 8021058:	bd80      	pop	{r7, pc}

0802105a <_ZN7RequestD1Ev>:
 802105a:	b580      	push	{r7, lr}
 802105c:	b082      	sub	sp, #8
 802105e:	af00      	add	r7, sp, #0
 8021060:	6078      	str	r0, [r7, #4]
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	4618      	mov	r0, r3
 8021066:	f002 fb21 	bl	80236ac <_ZNSt6vectorIhSaIhEED1Ev>
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	4618      	mov	r0, r3
 802106e:	3708      	adds	r7, #8
 8021070:	46bd      	mov	sp, r7
 8021072:	bd80      	pop	{r7, pc}

08021074 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS, uint8_t sendPeriod) :
 8021074:	b580      	push	{r7, lr}
 8021076:	b084      	sub	sp, #16
 8021078:	af00      	add	r7, sp, #0
 802107a:	60f8      	str	r0, [r7, #12]
 802107c:	60b9      	str	r1, [r7, #8]
 802107e:	607a      	str	r2, [r7, #4]
 8021080:	70fb      	strb	r3, [r7, #3]
			UartHandle { uart }, TimeoutS { timeoutS }, SendPeriod { sendPeriod } {
 8021082:	68fb      	ldr	r3, [r7, #12]
 8021084:	4618      	mov	r0, r3
 8021086:	f7ff ff9b 	bl	8020fc0 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 802108a:	68fb      	ldr	r3, [r7, #12]
 802108c:	3328      	adds	r3, #40	; 0x28
 802108e:	4618      	mov	r0, r3
 8021090:	f002 fa9f 	bl	80235d2 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8021094:	68fb      	ldr	r3, [r7, #12]
 8021096:	3350      	adds	r3, #80	; 0x50
 8021098:	4618      	mov	r0, r3
 802109a:	f7ff ffd1 	bl	8021040 <_ZN7RequestC1Ev>
 802109e:	68fb      	ldr	r3, [r7, #12]
 80210a0:	2200      	movs	r2, #0
 80210a2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80210a6:	68fb      	ldr	r3, [r7, #12]
 80210a8:	2200      	movs	r2, #0
 80210aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80210ae:	68fb      	ldr	r3, [r7, #12]
 80210b0:	3368      	adds	r3, #104	; 0x68
 80210b2:	4618      	mov	r0, r3
 80210b4:	f7ff ffb7 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 80210b8:	68fb      	ldr	r3, [r7, #12]
 80210ba:	68ba      	ldr	r2, [r7, #8]
 80210bc:	675a      	str	r2, [r3, #116]	; 0x74
 80210be:	68fb      	ldr	r3, [r7, #12]
 80210c0:	687a      	ldr	r2, [r7, #4]
 80210c2:	679a      	str	r2, [r3, #120]	; 0x78
 80210c4:	68fb      	ldr	r3, [r7, #12]
 80210c6:	78fa      	ldrb	r2, [r7, #3]
 80210c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80210cc:	68fb      	ldr	r3, [r7, #12]
 80210ce:	2200      	movs	r2, #0
 80210d0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 80210d4:	68fb      	ldr	r3, [r7, #12]
 80210d6:	2201      	movs	r2, #1
 80210d8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80210dc:	68fb      	ldr	r3, [r7, #12]
 80210de:	2200      	movs	r2, #0
 80210e0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		assert(uart != NULL);
 80210e4:	68bb      	ldr	r3, [r7, #8]
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	d105      	bne.n	80210f6 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x82>
 80210ea:	4b05      	ldr	r3, [pc, #20]	; (8021100 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x8c>)
 80210ec:	4a05      	ldr	r2, [pc, #20]	; (8021104 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x90>)
 80210ee:	217f      	movs	r1, #127	; 0x7f
 80210f0:	4805      	ldr	r0, [pc, #20]	; (8021108 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x94>)
 80210f2:	f01e f96f 	bl	803f3d4 <__assert_func>
	}
 80210f6:	68fb      	ldr	r3, [r7, #12]
 80210f8:	4618      	mov	r0, r3
 80210fa:	3710      	adds	r7, #16
 80210fc:	46bd      	mov	sp, r7
 80210fe:	bd80      	pop	{r7, pc}
 8021100:	0804064c 	.word	0x0804064c
 8021104:	0804065c 	.word	0x0804065c
 8021108:	08040628 	.word	0x08040628

0802110c <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 802110c:	b480      	push	{r7}
 802110e:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8021110:	2301      	movs	r3, #1
 8021112:	4618      	mov	r0, r3
 8021114:	46bd      	mov	sp, r7
 8021116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802111a:	4770      	bx	lr

0802111c <_ZN7RequestaSEOS_>:
struct Request {
 802111c:	b580      	push	{r7, lr}
 802111e:	b082      	sub	sp, #8
 8021120:	af00      	add	r7, sp, #0
 8021122:	6078      	str	r0, [r7, #4]
 8021124:	6039      	str	r1, [r7, #0]
 8021126:	687b      	ldr	r3, [r7, #4]
 8021128:	683a      	ldr	r2, [r7, #0]
 802112a:	4611      	mov	r1, r2
 802112c:	4618      	mov	r0, r3
 802112e:	f002 fb0e 	bl	802374e <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8021132:	683b      	ldr	r3, [r7, #0]
 8021134:	68da      	ldr	r2, [r3, #12]
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	60da      	str	r2, [r3, #12]
 802113a:	683b      	ldr	r3, [r7, #0]
 802113c:	7c1a      	ldrb	r2, [r3, #16]
 802113e:	687b      	ldr	r3, [r7, #4]
 8021140:	741a      	strb	r2, [r3, #16]
 8021142:	683b      	ldr	r3, [r7, #0]
 8021144:	7c5a      	ldrb	r2, [r3, #17]
 8021146:	687b      	ldr	r3, [r7, #4]
 8021148:	745a      	strb	r2, [r3, #17]
 802114a:	687b      	ldr	r3, [r7, #4]
 802114c:	4618      	mov	r0, r3
 802114e:	3708      	adds	r7, #8
 8021150:	46bd      	mov	sp, r7
 8021152:	bd80      	pop	{r7, pc}

08021154 <_ZN8ResponceD1Ev>:
struct Responce {
 8021154:	b580      	push	{r7, lr}
 8021156:	b082      	sub	sp, #8
 8021158:	af00      	add	r7, sp, #0
 802115a:	6078      	str	r0, [r7, #4]
 802115c:	687b      	ldr	r3, [r7, #4]
 802115e:	4618      	mov	r0, r3
 8021160:	f002 faa4 	bl	80236ac <_ZNSt6vectorIhSaIhEED1Ev>
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	4618      	mov	r0, r3
 8021168:	3708      	adds	r7, #8
 802116a:	46bd      	mov	sp, r7
 802116c:	bd80      	pop	{r7, pc}
	...

08021170 <_ZN11QueueSender10AddRequestEO7Request>:

	void AddRequest(Request &&request) {
 8021170:	b590      	push	{r4, r7, lr}
 8021172:	b08b      	sub	sp, #44	; 0x2c
 8021174:	af00      	add	r7, sp, #0
 8021176:	6078      	str	r0, [r7, #4]
 8021178:	6039      	str	r1, [r7, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 802117a:	683b      	ldr	r3, [r7, #0]
 802117c:	7c1b      	ldrb	r3, [r3, #16]
 802117e:	4618      	mov	r0, r3
 8021180:	f7ff fece 	bl	8020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021184:	4603      	mov	r3, r0
 8021186:	2b03      	cmp	r3, #3
 8021188:	d858      	bhi.n	802123c <_ZN11QueueSender10AddRequestEO7Request+0xcc>
 802118a:	a201      	add	r2, pc, #4	; (adr r2, 8021190 <_ZN11QueueSender10AddRequestEO7Request+0x20>)
 802118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021190:	080211b5 	.word	0x080211b5
 8021194:	080211a1 	.word	0x080211a1
 8021198:	080211e5 	.word	0x080211e5
 802119c:	0802120f 	.word	0x0802120f
		case MessageMode::Async:
			Requests.emplace_back(std::move(request));
 80211a0:	687c      	ldr	r4, [r7, #4]
 80211a2:	6838      	ldr	r0, [r7, #0]
 80211a4:	f002 fa9d 	bl	80236e2 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80211a8:	4603      	mov	r3, r0
 80211aa:	4619      	mov	r1, r3
 80211ac:	4620      	mov	r0, r4
 80211ae:	f002 faa3 	bl	80236f8 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 80211b2:	e043      	b.n	802123c <_ZN11QueueSender10AddRequestEO7Request+0xcc>
		case MessageMode::Sync:
			if (!HasPriorityRequest) {
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80211ba:	f083 0301 	eor.w	r3, r3, #1
 80211be:	b2db      	uxtb	r3, r3
 80211c0:	2b00      	cmp	r3, #0
 80211c2:	d03a      	beq.n	802123a <_ZN11QueueSender10AddRequestEO7Request+0xca>
				PriorityRequest = std::move(request);
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80211ca:	6838      	ldr	r0, [r7, #0]
 80211cc:	f002 fa89 	bl	80236e2 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80211d0:	4603      	mov	r3, r0
 80211d2:	4619      	mov	r1, r3
 80211d4:	4620      	mov	r0, r4
 80211d6:	f7ff ffa1 	bl	802111c <_ZN7RequestaSEOS_>
				HasPriorityRequest = true;
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	2201      	movs	r2, #1
 80211de:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			}
			break;
 80211e2:	e02a      	b.n	802123a <_ZN11QueueSender10AddRequestEO7Request+0xca>

		case MessageMode::Info:
			Responces.emplace(CreateInfoResponce());
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80211ea:	f107 0308 	add.w	r3, r7, #8
 80211ee:	6879      	ldr	r1, [r7, #4]
 80211f0:	4618      	mov	r0, r3
 80211f2:	f000 fb2d 	bl	8021850 <_ZNK11QueueSender18CreateInfoResponceEv>
 80211f6:	f107 0308 	add.w	r3, r7, #8
 80211fa:	4619      	mov	r1, r3
 80211fc:	4620      	mov	r0, r4
 80211fe:	f002 fabb 	bl	8023778 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 8021202:	f107 0308 	add.w	r3, r7, #8
 8021206:	4618      	mov	r0, r3
 8021208:	f7ff ffa4 	bl	8021154 <_ZN8ResponceD1Ev>
			break;
 802120c:	e016      	b.n	802123c <_ZN11QueueSender10AddRequestEO7Request+0xcc>
		case MessageMode::SetPeriod:
			Responces.emplace(ProcessSetPeriodRequest(request));
 802120e:	687b      	ldr	r3, [r7, #4]
 8021210:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8021214:	f107 0318 	add.w	r3, r7, #24
 8021218:	683a      	ldr	r2, [r7, #0]
 802121a:	6879      	ldr	r1, [r7, #4]
 802121c:	4618      	mov	r0, r3
 802121e:	f000 fb4f 	bl	80218c0 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>
 8021222:	f107 0318 	add.w	r3, r7, #24
 8021226:	4619      	mov	r1, r3
 8021228:	4620      	mov	r0, r4
 802122a:	f002 faa5 	bl	8023778 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
 802122e:	f107 0318 	add.w	r3, r7, #24
 8021232:	4618      	mov	r0, r3
 8021234:	f7ff ff8e 	bl	8021154 <_ZN8ResponceD1Ev>
			break;
 8021238:	e000      	b.n	802123c <_ZN11QueueSender10AddRequestEO7Request+0xcc>
			break;
 802123a:	bf00      	nop
		}
	}
 802123c:	bf00      	nop
 802123e:	372c      	adds	r7, #44	; 0x2c
 8021240:	46bd      	mov	sp, r7
 8021242:	bd90      	pop	{r4, r7, pc}

08021244 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 8021244:	b580      	push	{r7, lr}
 8021246:	b082      	sub	sp, #8
 8021248:	af00      	add	r7, sp, #0
 802124a:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	3328      	adds	r3, #40	; 0x28
 8021250:	4618      	mov	r0, r3
 8021252:	f002 faa3 	bl	802379c <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 8021256:	4603      	mov	r3, r0
 8021258:	f083 0301 	eor.w	r3, r3, #1
 802125c:	b2db      	uxtb	r3, r3
	}
 802125e:	4618      	mov	r0, r3
 8021260:	3708      	adds	r7, #8
 8021262:	46bd      	mov	sp, r7
 8021264:	bd80      	pop	{r7, pc}

08021266 <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 8021266:	b480      	push	{r7}
 8021268:	b083      	sub	sp, #12
 802126a:	af00      	add	r7, sp, #0
 802126c:	6078      	str	r0, [r7, #4]
		SendTick = (SendTick + 1) % SendPeriod;
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8021274:	3301      	adds	r3, #1
 8021276:	687a      	ldr	r2, [r7, #4]
 8021278:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 802127c:	fb93 f1f2 	sdiv	r1, r3, r2
 8021280:	fb01 f202 	mul.w	r2, r1, r2
 8021284:	1a9b      	subs	r3, r3, r2
 8021286:	b2da      	uxtb	r2, r3
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		if (SendTick != 0) return;
 802128e:	687b      	ldr	r3, [r7, #4]
 8021290:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8021294:	2b00      	cmp	r3, #0
 8021296:	d104      	bne.n	80212a2 <_ZN11QueueSender9TickTimerEv+0x3c>

		TimerReady = true;
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	2201      	movs	r2, #1
 802129c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80212a0:	e000      	b.n	80212a4 <_ZN11QueueSender9TickTimerEv+0x3e>
		if (SendTick != 0) return;
 80212a2:	bf00      	nop
	}
 80212a4:	370c      	adds	r7, #12
 80212a6:	46bd      	mov	sp, r7
 80212a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ac:	4770      	bx	lr
	...

080212b0 <_ZN11QueueSender13SetSendPeriodEh>:

	void SetSendPeriod(uint8_t periodMs) {
 80212b0:	b580      	push	{r7, lr}
 80212b2:	b082      	sub	sp, #8
 80212b4:	af00      	add	r7, sp, #0
 80212b6:	6078      	str	r0, [r7, #4]
 80212b8:	460b      	mov	r3, r1
 80212ba:	70fb      	strb	r3, [r7, #3]
		assert(periodMs);
 80212bc:	78fb      	ldrb	r3, [r7, #3]
 80212be:	2b00      	cmp	r3, #0
 80212c0:	d105      	bne.n	80212ce <_ZN11QueueSender13SetSendPeriodEh+0x1e>
 80212c2:	4b07      	ldr	r3, [pc, #28]	; (80212e0 <_ZN11QueueSender13SetSendPeriodEh+0x30>)
 80212c4:	4a07      	ldr	r2, [pc, #28]	; (80212e4 <_ZN11QueueSender13SetSendPeriodEh+0x34>)
 80212c6:	21a3      	movs	r1, #163	; 0xa3
 80212c8:	4807      	ldr	r0, [pc, #28]	; (80212e8 <_ZN11QueueSender13SetSendPeriodEh+0x38>)
 80212ca:	f01e f883 	bl	803f3d4 <__assert_func>
		SendPeriod = periodMs;
 80212ce:	687b      	ldr	r3, [r7, #4]
 80212d0:	78fa      	ldrb	r2, [r7, #3]
 80212d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	}
 80212d6:	bf00      	nop
 80212d8:	3708      	adds	r7, #8
 80212da:	46bd      	mov	sp, r7
 80212dc:	bd80      	pop	{r7, pc}
 80212de:	bf00      	nop
 80212e0:	0804069c 	.word	0x0804069c
 80212e4:	080406a8 	.word	0x080406a8
 80212e8:	08040628 	.word	0x08040628

080212ec <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 80212ec:	b580      	push	{r7, lr}
 80212ee:	b082      	sub	sp, #8
 80212f0:	af00      	add	r7, sp, #0
 80212f2:	6078      	str	r0, [r7, #4]
 80212f4:	6039      	str	r1, [r7, #0]
 80212f6:	687b      	ldr	r3, [r7, #4]
 80212f8:	683a      	ldr	r2, [r7, #0]
 80212fa:	4611      	mov	r1, r2
 80212fc:	4618      	mov	r0, r3
 80212fe:	f002 fa72 	bl	80237e6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	4618      	mov	r0, r3
 8021306:	3708      	adds	r7, #8
 8021308:	46bd      	mov	sp, r7
 802130a:	bd80      	pop	{r7, pc}

0802130c <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 802130c:	b580      	push	{r7, lr}
 802130e:	b082      	sub	sp, #8
 8021310:	af00      	add	r7, sp, #0
 8021312:	6078      	str	r0, [r7, #4]
 8021314:	6039      	str	r1, [r7, #0]
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	683a      	ldr	r2, [r7, #0]
 802131a:	4611      	mov	r1, r2
 802131c:	4618      	mov	r0, r3
 802131e:	f7ff ffe5 	bl	80212ec <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	4618      	mov	r0, r3
 8021326:	3708      	adds	r7, #8
 8021328:	46bd      	mov	sp, r7
 802132a:	bd80      	pop	{r7, pc}

0802132c <_ZN8ResponceC1EOS_>:
struct Responce {
 802132c:	b580      	push	{r7, lr}
 802132e:	b082      	sub	sp, #8
 8021330:	af00      	add	r7, sp, #0
 8021332:	6078      	str	r0, [r7, #4]
 8021334:	6039      	str	r1, [r7, #0]
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	683a      	ldr	r2, [r7, #0]
 802133a:	4611      	mov	r1, r2
 802133c:	4618      	mov	r0, r3
 802133e:	f7ff ffe5 	bl	802130c <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8021342:	683b      	ldr	r3, [r7, #0]
 8021344:	7b1a      	ldrb	r2, [r3, #12]
 8021346:	687b      	ldr	r3, [r7, #4]
 8021348:	731a      	strb	r2, [r3, #12]
 802134a:	683b      	ldr	r3, [r7, #0]
 802134c:	7b5a      	ldrb	r2, [r3, #13]
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	735a      	strb	r2, [r3, #13]
 8021352:	683b      	ldr	r3, [r7, #0]
 8021354:	7b9a      	ldrb	r2, [r3, #14]
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	739a      	strb	r2, [r3, #14]
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	4618      	mov	r0, r3
 802135e:	3708      	adds	r7, #8
 8021360:	46bd      	mov	sp, r7
 8021362:	bd80      	pop	{r7, pc}

08021364 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8021364:	b580      	push	{r7, lr}
 8021366:	b082      	sub	sp, #8
 8021368:	af00      	add	r7, sp, #0
 802136a:	6078      	str	r0, [r7, #4]
 802136c:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 802136e:	6838      	ldr	r0, [r7, #0]
 8021370:	f7ff ff68 	bl	8021244 <_ZNK11QueueSender11HasResponceEv>
 8021374:	4603      	mov	r3, r0
 8021376:	2b00      	cmp	r3, #0
 8021378:	d105      	bne.n	8021386 <_ZN11QueueSender11GetResponceEv+0x22>
 802137a:	4b0f      	ldr	r3, [pc, #60]	; (80213b8 <_ZN11QueueSender11GetResponceEv+0x54>)
 802137c:	4a0f      	ldr	r2, [pc, #60]	; (80213bc <_ZN11QueueSender11GetResponceEv+0x58>)
 802137e:	21a8      	movs	r1, #168	; 0xa8
 8021380:	480f      	ldr	r0, [pc, #60]	; (80213c0 <_ZN11QueueSender11GetResponceEv+0x5c>)
 8021382:	f01e f827 	bl	803f3d4 <__assert_func>
		Responce responce = std::move(Responces.front());
 8021386:	683b      	ldr	r3, [r7, #0]
 8021388:	3328      	adds	r3, #40	; 0x28
 802138a:	4618      	mov	r0, r3
 802138c:	f002 fa13 	bl	80237b6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 8021390:	4603      	mov	r3, r0
 8021392:	4618      	mov	r0, r3
 8021394:	f002 fa1c 	bl	80237d0 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 8021398:	4603      	mov	r3, r0
 802139a:	4619      	mov	r1, r3
 802139c:	6878      	ldr	r0, [r7, #4]
 802139e:	f7ff ffc5 	bl	802132c <_ZN8ResponceC1EOS_>
		Responces.pop();
 80213a2:	683b      	ldr	r3, [r7, #0]
 80213a4:	3328      	adds	r3, #40	; 0x28
 80213a6:	4618      	mov	r0, r3
 80213a8:	f002 fa38 	bl	802381c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 80213ac:	bf00      	nop
	}
 80213ae:	6878      	ldr	r0, [r7, #4]
 80213b0:	3708      	adds	r7, #8
 80213b2:	46bd      	mov	sp, r7
 80213b4:	bd80      	pop	{r7, pc}
 80213b6:	bf00      	nop
 80213b8:	080406d4 	.word	0x080406d4
 80213bc:	080406e4 	.word	0x080406e4
 80213c0:	08040628 	.word	0x08040628

080213c4 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 80213c4:	b5b0      	push	{r4, r5, r7, lr}
 80213c6:	b08e      	sub	sp, #56	; 0x38
 80213c8:	af02      	add	r7, sp, #8
 80213ca:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80213cc:	b672      	cpsid	i
}
 80213ce:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 80213d0:	687b      	ldr	r3, [r7, #4]
 80213d2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	f000 8096 	beq.w	8021508 <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80213e2:	f083 0301 	eor.w	r3, r3, #1
 80213e6:	b2db      	uxtb	r3, r3
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	f000 808d 	beq.w	8021508 <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
 80213ee:	687b      	ldr	r3, [r7, #4]
 80213f0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	f000 8087 	beq.w	8021508 <_ZN11QueueSender22ProcessPriorityRequestEv+0x144>
			HasPriorityRequest = false;
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	2200      	movs	r2, #0
 80213fe:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			WaitResponce = true;
 8021402:	687b      	ldr	r3, [r7, #4]
 8021404:	2201      	movs	r2, #1
 8021406:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 802140a:	b662      	cpsie	i
}
 802140c:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 802140e:	687b      	ldr	r3, [r7, #4]
 8021410:	3350      	adds	r3, #80	; 0x50
 8021412:	62fb      	str	r3, [r7, #44]	; 0x2c
			auto &data = request.Data;
 8021414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021416:	62bb      	str	r3, [r7, #40]	; 0x28

			assert(
 8021418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802141a:	7c1b      	ldrb	r3, [r3, #16]
 802141c:	4618      	mov	r0, r3
 802141e:	f7ff fd7f 	bl	8020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021422:	4603      	mov	r3, r0
 8021424:	2b00      	cmp	r3, #0
 8021426:	d005      	beq.n	8021434 <_ZN11QueueSender22ProcessPriorityRequestEv+0x70>
 8021428:	4b3a      	ldr	r3, [pc, #232]	; (8021514 <_ZN11QueueSender22ProcessPriorityRequestEv+0x150>)
 802142a:	4a3b      	ldr	r2, [pc, #236]	; (8021518 <_ZN11QueueSender22ProcessPriorityRequestEv+0x154>)
 802142c:	21b8      	movs	r1, #184	; 0xb8
 802142e:	483b      	ldr	r0, [pc, #236]	; (802151c <_ZN11QueueSender22ProcessPriorityRequestEv+0x158>)
 8021430:	f01d ffd0 	bl	803f3d4 <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 8021434:	b672      	cpsid	i
}
 8021436:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	2200      	movs	r2, #0
 802143c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  __ASM volatile ("cpsie i" : : : "memory");
 8021440:	b662      	cpsie	i
}
 8021442:	bf00      	nop
			__enable_irq();
			assert(
 8021444:	687b      	ldr	r3, [r7, #4]
 8021446:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8021448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802144a:	f002 f9f3 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 802144e:	4605      	mov	r5, r0
 8021450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021452:	f002 f9fe 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021456:	4603      	mov	r3, r0
 8021458:	b29b      	uxth	r3, r3
 802145a:	461a      	mov	r2, r3
 802145c:	4629      	mov	r1, r5
 802145e:	4620      	mov	r0, r4
 8021460:	f017 f98c 	bl	803877c <HAL_UART_Transmit_IT>
 8021464:	4603      	mov	r3, r0
 8021466:	2b00      	cmp	r3, #0
 8021468:	d005      	beq.n	8021476 <_ZN11QueueSender22ProcessPriorityRequestEv+0xb2>
 802146a:	4b2d      	ldr	r3, [pc, #180]	; (8021520 <_ZN11QueueSender22ProcessPriorityRequestEv+0x15c>)
 802146c:	4a2a      	ldr	r2, [pc, #168]	; (8021518 <_ZN11QueueSender22ProcessPriorityRequestEv+0x154>)
 802146e:	21be      	movs	r1, #190	; 0xbe
 8021470:	482a      	ldr	r0, [pc, #168]	; (802151c <_ZN11QueueSender22ProcessPriorityRequestEv+0x158>)
 8021472:	f01d ffaf 	bl	803f3d4 <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(), data.size())
							== HAL_OK);

			while (!TransmitComplete)
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 802147c:	2b00      	cmp	r3, #0
 802147e:	d100      	bne.n	8021482 <_ZN11QueueSender22ProcessPriorityRequestEv+0xbe>
 8021480:	e7f9      	b.n	8021476 <_ZN11QueueSender22ProcessPriorityRequestEv+0xb2>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 8021482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021484:	68db      	ldr	r3, [r3, #12]
 8021486:	b2db      	uxtb	r3, r3
 8021488:	4619      	mov	r1, r3
 802148a:	6878      	ldr	r0, [r7, #4]
 802148c:	f000 f90a 	bl	80216a4 <_ZN11QueueSender7ReceiveEh>
 8021490:	4603      	mov	r3, r0
 8021492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (error == ErrorCode::NACK) {
 8021496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802149a:	2b02      	cmp	r3, #2
 802149c:	d115      	bne.n	80214ca <_ZN11QueueSender22ProcessPriorityRequestEv+0x106>
				uint32_t delayMS = 5;
 802149e:	2305      	movs	r3, #5
 80214a0:	623b      	str	r3, [r7, #32]
				HAL_Delay(delayMS);
 80214a2:	6a38      	ldr	r0, [r7, #32]
 80214a4:	f00c ff28 	bl	802e2f8 <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80214ac:	f107 010f 	add.w	r1, r7, #15
 80214b0:	2300      	movs	r3, #0
 80214b2:	2201      	movs	r2, #1
 80214b4:	f017 f88e 	bl	80385d4 <HAL_UART_Receive>
 80214b8:	4603      	mov	r3, r0
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	bf0c      	ite	eq
 80214be:	2301      	moveq	r3, #1
 80214c0:	2300      	movne	r3, #0
 80214c2:	b2db      	uxtb	r3, r3
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	d000      	beq.n	80214ca <_ZN11QueueSender22ProcessPriorityRequestEv+0x106>
 80214c8:	e7ee      	b.n	80214a8 <_ZN11QueueSender22ProcessPriorityRequestEv+0xe4>
					;
			}

			Responces.emplace(
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	f103 0428 	add.w	r4, r3, #40	; 0x28
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 80214d0:	687b      	ldr	r3, [r7, #4]
 80214d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80214d6:	f107 0010 	add.w	r0, r7, #16
 80214da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80214de:	9300      	str	r3, [sp, #0]
 80214e0:	2300      	movs	r3, #0
 80214e2:	6879      	ldr	r1, [r7, #4]
 80214e4:	f000 f98d 	bl	8021802 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
			Responces.emplace(
 80214e8:	f107 0310 	add.w	r3, r7, #16
 80214ec:	4619      	mov	r1, r3
 80214ee:	4620      	mov	r0, r4
 80214f0:	f002 f942 	bl	8023778 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
					CreateResponce(CurrentResponceBuffer, MessageMode::Sync,
 80214f4:	f107 0310 	add.w	r3, r7, #16
 80214f8:	4618      	mov	r0, r3
 80214fa:	f7ff fe2b 	bl	8021154 <_ZN8ResponceD1Ev>
							error));

			WaitResponce = false;
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	2200      	movs	r2, #0
 8021502:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8021506:	e001      	b.n	802150c <_ZN11QueueSender22ProcessPriorityRequestEv+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
 8021508:	b662      	cpsie	i
}
 802150a:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 802150c:	bf00      	nop
 802150e:	3730      	adds	r7, #48	; 0x30
 8021510:	46bd      	mov	sp, r7
 8021512:	bdb0      	pop	{r4, r5, r7, pc}
 8021514:	08040708 	.word	0x08040708
 8021518:	08040748 	.word	0x08040748
 802151c:	08040628 	.word	0x08040628
 8021520:	08040774 	.word	0x08040774

08021524 <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 8021524:	b5b0      	push	{r4, r5, r7, lr}
 8021526:	b08c      	sub	sp, #48	; 0x30
 8021528:	af00      	add	r7, sp, #0
 802152a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 802152c:	b672      	cpsid	i
}
 802152e:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.empty() && !WaitResponce
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
				&& TransmitComplete) {
 8021536:	2b00      	cmp	r3, #0
 8021538:	d018      	beq.n	802156c <_ZN11QueueSender15ProcessRequestsEv+0x48>
		if (TimerReady && !Requests.empty() && !WaitResponce
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	4618      	mov	r0, r3
 802153e:	f002 f997 	bl	8023870 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8021542:	4603      	mov	r3, r0
 8021544:	f083 0301 	eor.w	r3, r3, #1
 8021548:	b2db      	uxtb	r3, r3
 802154a:	2b00      	cmp	r3, #0
 802154c:	d00e      	beq.n	802156c <_ZN11QueueSender15ProcessRequestsEv+0x48>
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8021554:	f083 0301 	eor.w	r3, r3, #1
 8021558:	b2db      	uxtb	r3, r3
 802155a:	2b00      	cmp	r3, #0
 802155c:	d006      	beq.n	802156c <_ZN11QueueSender15ProcessRequestsEv+0x48>
				&& TransmitComplete) {
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8021564:	2b00      	cmp	r3, #0
 8021566:	d001      	beq.n	802156c <_ZN11QueueSender15ProcessRequestsEv+0x48>
 8021568:	2301      	movs	r3, #1
 802156a:	e000      	b.n	802156e <_ZN11QueueSender15ProcessRequestsEv+0x4a>
 802156c:	2300      	movs	r3, #0
		if (TimerReady && !Requests.empty() && !WaitResponce
 802156e:	2b00      	cmp	r3, #0
 8021570:	f000 8089 	beq.w	8021686 <_ZN11QueueSender15ProcessRequestsEv+0x162>

			WaitResponce = true;
 8021574:	687b      	ldr	r3, [r7, #4]
 8021576:	2201      	movs	r2, #1
 8021578:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  __ASM volatile ("cpsie i" : : : "memory");
 802157c:	b662      	cpsie	i
}
 802157e:	bf00      	nop
			__enable_irq();

			auto &request = Requests.front();
 8021580:	687b      	ldr	r3, [r7, #4]
 8021582:	4618      	mov	r0, r3
 8021584:	f002 f986 	bl	8023894 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8021588:	62b8      	str	r0, [r7, #40]	; 0x28
			auto &data = request.Data;
 802158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802158c:	627b      	str	r3, [r7, #36]	; 0x24

			assert(
 802158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021590:	7c1b      	ldrb	r3, [r3, #16]
 8021592:	4618      	mov	r0, r3
 8021594:	f7ff fcc4 	bl	8020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021598:	4603      	mov	r3, r0
 802159a:	2b01      	cmp	r3, #1
 802159c:	d005      	beq.n	80215aa <_ZN11QueueSender15ProcessRequestsEv+0x86>
 802159e:	4b3d      	ldr	r3, [pc, #244]	; (8021694 <_ZN11QueueSender15ProcessRequestsEv+0x170>)
 80215a0:	4a3d      	ldr	r2, [pc, #244]	; (8021698 <_ZN11QueueSender15ProcessRequestsEv+0x174>)
 80215a2:	21e5      	movs	r1, #229	; 0xe5
 80215a4:	483d      	ldr	r0, [pc, #244]	; (802169c <_ZN11QueueSender15ProcessRequestsEv+0x178>)
 80215a6:	f01d ff15 	bl	803f3d4 <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 80215aa:	2305      	movs	r3, #5
 80215ac:	623b      	str	r3, [r7, #32]
			const uint32_t delayMS = 5;
 80215ae:	2305      	movs	r3, #5
 80215b0:	61fb      	str	r3, [r7, #28]
			size_t i = 0;
 80215b2:	2300      	movs	r3, #0
 80215b4:	62fb      	str	r3, [r7, #44]	; 0x2c

			while (i++ < nAttempts) {
 80215b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215b8:	1c5a      	adds	r2, r3, #1
 80215ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80215bc:	2b04      	cmp	r3, #4
 80215be:	bf94      	ite	ls
 80215c0:	2301      	movls	r3, #1
 80215c2:	2300      	movhi	r3, #0
 80215c4:	b2db      	uxtb	r3, r3
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d046      	beq.n	8021658 <_ZN11QueueSender15ProcessRequestsEv+0x134>

				TransmitComplete = false;
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	2200      	movs	r2, #0
 80215ce:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

				assert(
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 80215d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80215d8:	f002 f92c 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 80215dc:	4605      	mov	r5, r0
 80215de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80215e0:	f002 f937 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80215e4:	4603      	mov	r3, r0
 80215e6:	b29b      	uxth	r3, r3
 80215e8:	461a      	mov	r2, r3
 80215ea:	4629      	mov	r1, r5
 80215ec:	4620      	mov	r0, r4
 80215ee:	f017 f8c5 	bl	803877c <HAL_UART_Transmit_IT>
 80215f2:	4603      	mov	r3, r0
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	d005      	beq.n	8021604 <_ZN11QueueSender15ProcessRequestsEv+0xe0>
 80215f8:	4b29      	ldr	r3, [pc, #164]	; (80216a0 <_ZN11QueueSender15ProcessRequestsEv+0x17c>)
 80215fa:	4a27      	ldr	r2, [pc, #156]	; (8021698 <_ZN11QueueSender15ProcessRequestsEv+0x174>)
 80215fc:	21f1      	movs	r1, #241	; 0xf1
 80215fe:	4827      	ldr	r0, [pc, #156]	; (802169c <_ZN11QueueSender15ProcessRequestsEv+0x178>)
 8021600:	f01d fee8 	bl	803f3d4 <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data.data(),
								data.size()) == HAL_OK);

				while (!TransmitComplete)
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 802160a:	2b00      	cmp	r3, #0
 802160c:	d100      	bne.n	8021610 <_ZN11QueueSender15ProcessRequestsEv+0xec>
 802160e:	e7f9      	b.n	8021604 <_ZN11QueueSender15ProcessRequestsEv+0xe0>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 8021610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021612:	68db      	ldr	r3, [r3, #12]
 8021614:	b2db      	uxtb	r3, r3
 8021616:	4619      	mov	r1, r3
 8021618:	6878      	ldr	r0, [r7, #4]
 802161a:	f000 f843 	bl	80216a4 <_ZN11QueueSender7ReceiveEh>
 802161e:	4603      	mov	r3, r0
 8021620:	76fb      	strb	r3, [r7, #27]
				if (error == ErrorCode::Success)
 8021622:	7efb      	ldrb	r3, [r7, #27]
 8021624:	2b00      	cmp	r3, #0
 8021626:	d016      	beq.n	8021656 <_ZN11QueueSender15ProcessRequestsEv+0x132>
					break;
				HAL_Delay(delayMS);
 8021628:	2005      	movs	r0, #5
 802162a:	f00c fe65 	bl	802e2f8 <HAL_Delay>
				if (error == ErrorCode::NACK) {
 802162e:	7efb      	ldrb	r3, [r7, #27]
 8021630:	2b02      	cmp	r3, #2
 8021632:	d1c0      	bne.n	80215b6 <_ZN11QueueSender15ProcessRequestsEv+0x92>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8021638:	f107 010f 	add.w	r1, r7, #15
 802163c:	2300      	movs	r3, #0
 802163e:	2201      	movs	r2, #1
 8021640:	f016 ffc8 	bl	80385d4 <HAL_UART_Receive>
 8021644:	4603      	mov	r3, r0
 8021646:	2b00      	cmp	r3, #0
 8021648:	bf0c      	ite	eq
 802164a:	2301      	moveq	r3, #1
 802164c:	2300      	movne	r3, #0
 802164e:	b2db      	uxtb	r3, r3
 8021650:	2b00      	cmp	r3, #0
 8021652:	d0b0      	beq.n	80215b6 <_ZN11QueueSender15ProcessRequestsEv+0x92>
 8021654:	e7ee      	b.n	8021634 <_ZN11QueueSender15ProcessRequestsEv+0x110>
					break;
 8021656:	bf00      	nop
						;
				}
			}

			auto cap = Requests.max_size();
 8021658:	687b      	ldr	r3, [r7, #4]
 802165a:	4618      	mov	r0, r3
 802165c:	f002 f92e 	bl	80238bc <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8021660:	6178      	str	r0, [r7, #20]
			auto sz = Requests.size();
 8021662:	687b      	ldr	r3, [r7, #4]
 8021664:	4618      	mov	r0, r3
 8021666:	f002 f93a 	bl	80238de <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 802166a:	6138      	str	r0, [r7, #16]

			Requests.pop_front();
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	4618      	mov	r0, r3
 8021670:	f002 f947 	bl	8023902 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
			WaitResponce = false;
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	2200      	movs	r2, #0
 8021678:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			TimerReady = false;
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	2200      	movs	r2, #0
 8021680:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		} else {
			__enable_irq();
		}
	}
 8021684:	e001      	b.n	802168a <_ZN11QueueSender15ProcessRequestsEv+0x166>
  __ASM volatile ("cpsie i" : : : "memory");
 8021686:	b662      	cpsie	i
}
 8021688:	bf00      	nop
 802168a:	bf00      	nop
 802168c:	3730      	adds	r7, #48	; 0x30
 802168e:	46bd      	mov	sp, r7
 8021690:	bdb0      	pop	{r4, r5, r7, pc}
 8021692:	bf00      	nop
 8021694:	080407bc 	.word	0x080407bc
 8021698:	08040800 	.word	0x08040800
 802169c:	08040628 	.word	0x08040628
 80216a0:	08040774 	.word	0x08040774

080216a4 <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 80216a4:	b590      	push	{r4, r7, lr}
 80216a6:	b085      	sub	sp, #20
 80216a8:	af00      	add	r7, sp, #0
 80216aa:	6078      	str	r0, [r7, #4]
 80216ac:	460b      	mov	r3, r1
 80216ae:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 80216b0:	78fb      	ldrb	r3, [r7, #3]
 80216b2:	2b03      	cmp	r3, #3
 80216b4:	d806      	bhi.n	80216c4 <_ZN11QueueSender7ReceiveEh+0x20>
 80216b6:	4b2f      	ldr	r3, [pc, #188]	; (8021774 <_ZN11QueueSender7ReceiveEh+0xd0>)
 80216b8:	4a2f      	ldr	r2, [pc, #188]	; (8021778 <_ZN11QueueSender7ReceiveEh+0xd4>)
 80216ba:	f240 110f 	movw	r1, #271	; 0x10f
 80216be:	482f      	ldr	r0, [pc, #188]	; (802177c <_ZN11QueueSender7ReceiveEh+0xd8>)
 80216c0:	f01d fe88 	bl	803f3d4 <__assert_func>
		CurrentResponceBuffer.resize(size);
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	3368      	adds	r3, #104	; 0x68
 80216c8:	78fa      	ldrb	r2, [r7, #3]
 80216ca:	4611      	mov	r1, r2
 80216cc:	4618      	mov	r0, r3
 80216ce:	f002 f93c 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 80216d6:	687b      	ldr	r3, [r7, #4]
 80216d8:	3368      	adds	r3, #104	; 0x68
 80216da:	4618      	mov	r0, r3
 80216dc:	f002 f8aa 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 80216e0:	4601      	mov	r1, r0
				TimeoutS);
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 80216e6:	2204      	movs	r2, #4
 80216e8:	4620      	mov	r0, r4
 80216ea:	f016 ff73 	bl	80385d4 <HAL_UART_Receive>
 80216ee:	4603      	mov	r3, r0
 80216f0:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 80216f2:	7bfb      	ldrb	r3, [r7, #15]
 80216f4:	2b03      	cmp	r3, #3
 80216f6:	d101      	bne.n	80216fc <_ZN11QueueSender7ReceiveEh+0x58>
			return ErrorCode::Timeout;
 80216f8:	2301      	movs	r3, #1
 80216fa:	e037      	b.n	802176c <_ZN11QueueSender7ReceiveEh+0xc8>

		if (IsNack(CurrentResponceBuffer.data()))
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	3368      	adds	r3, #104	; 0x68
 8021700:	4618      	mov	r0, r3
 8021702:	f002 f897 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021706:	4603      	mov	r3, r0
 8021708:	4619      	mov	r1, r3
 802170a:	6878      	ldr	r0, [r7, #4]
 802170c:	f000 f838 	bl	8021780 <_ZN11QueueSender6IsNackEPKh>
 8021710:	4603      	mov	r3, r0
 8021712:	2b00      	cmp	r3, #0
 8021714:	d001      	beq.n	802171a <_ZN11QueueSender7ReceiveEh+0x76>
			return ErrorCode::NACK;
 8021716:	2302      	movs	r3, #2
 8021718:	e028      	b.n	802176c <_ZN11QueueSender7ReceiveEh+0xc8>

		if (ret != HAL_OK)
 802171a:	7bfb      	ldrb	r3, [r7, #15]
 802171c:	2b00      	cmp	r3, #0
 802171e:	d001      	beq.n	8021724 <_ZN11QueueSender7ReceiveEh+0x80>
			return ErrorCode::Unknown;
 8021720:	2303      	movs	r3, #3
 8021722:	e023      	b.n	802176c <_ZN11QueueSender7ReceiveEh+0xc8>

		if (size == 4)
 8021724:	78fb      	ldrb	r3, [r7, #3]
 8021726:	2b04      	cmp	r3, #4
 8021728:	d101      	bne.n	802172e <_ZN11QueueSender7ReceiveEh+0x8a>
			return ErrorCode::Success;
 802172a:	2300      	movs	r3, #0
 802172c:	e01e      	b.n	802176c <_ZN11QueueSender7ReceiveEh+0xc8>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	3368      	adds	r3, #104	; 0x68
 8021736:	4618      	mov	r0, r3
 8021738:	f002 f87c 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 802173c:	4603      	mov	r3, r0
 802173e:	1d19      	adds	r1, r3, #4
 8021740:	78fb      	ldrb	r3, [r7, #3]
 8021742:	b29b      	uxth	r3, r3
 8021744:	3b04      	subs	r3, #4
 8021746:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 802174c:	4620      	mov	r0, r4
 802174e:	f016 ff41 	bl	80385d4 <HAL_UART_Receive>
 8021752:	4603      	mov	r3, r0
 8021754:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 8021756:	7bfb      	ldrb	r3, [r7, #15]
 8021758:	2b03      	cmp	r3, #3
 802175a:	d101      	bne.n	8021760 <_ZN11QueueSender7ReceiveEh+0xbc>
			return ErrorCode::Timeout;
 802175c:	2301      	movs	r3, #1
 802175e:	e005      	b.n	802176c <_ZN11QueueSender7ReceiveEh+0xc8>

		if (ret != HAL_OK)
 8021760:	7bfb      	ldrb	r3, [r7, #15]
 8021762:	2b00      	cmp	r3, #0
 8021764:	d001      	beq.n	802176a <_ZN11QueueSender7ReceiveEh+0xc6>
			return ErrorCode::Unknown;
 8021766:	2303      	movs	r3, #3
 8021768:	e000      	b.n	802176c <_ZN11QueueSender7ReceiveEh+0xc8>

		return ErrorCode::Success;
 802176a:	2300      	movs	r3, #0
	}
 802176c:	4618      	mov	r0, r3
 802176e:	3714      	adds	r7, #20
 8021770:	46bd      	mov	sp, r7
 8021772:	bd90      	pop	{r4, r7, pc}
 8021774:	08040824 	.word	0x08040824
 8021778:	08040830 	.word	0x08040830
 802177c:	08040628 	.word	0x08040628

08021780 <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 8021780:	b580      	push	{r7, lr}
 8021782:	b084      	sub	sp, #16
 8021784:	af00      	add	r7, sp, #0
 8021786:	6078      	str	r0, [r7, #4]
 8021788:	6039      	str	r1, [r7, #0]
		assert(data);
 802178a:	683b      	ldr	r3, [r7, #0]
 802178c:	2b00      	cmp	r3, #0
 802178e:	d106      	bne.n	802179e <_ZN11QueueSender6IsNackEPKh+0x1e>
 8021790:	4b11      	ldr	r3, [pc, #68]	; (80217d8 <_ZN11QueueSender6IsNackEPKh+0x58>)
 8021792:	4a12      	ldr	r2, [pc, #72]	; (80217dc <_ZN11QueueSender6IsNackEPKh+0x5c>)
 8021794:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8021798:	4811      	ldr	r0, [pc, #68]	; (80217e0 <_ZN11QueueSender6IsNackEPKh+0x60>)
 802179a:	f01d fe1b 	bl	803f3d4 <__assert_func>
		uint8_t kondoNACK[4] = { 0x4, 0xFE, 0x15, 0x17 };
 802179e:	4b11      	ldr	r3, [pc, #68]	; (80217e4 <_ZN11QueueSender6IsNackEPKh+0x64>)
 80217a0:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < 4; ++i)
 80217a2:	2300      	movs	r3, #0
 80217a4:	60fb      	str	r3, [r7, #12]
 80217a6:	68fb      	ldr	r3, [r7, #12]
 80217a8:	2b03      	cmp	r3, #3
 80217aa:	dc10      	bgt.n	80217ce <_ZN11QueueSender6IsNackEPKh+0x4e>
			if (data[i] != kondoNACK[i])
 80217ac:	68fb      	ldr	r3, [r7, #12]
 80217ae:	683a      	ldr	r2, [r7, #0]
 80217b0:	4413      	add	r3, r2
 80217b2:	781a      	ldrb	r2, [r3, #0]
 80217b4:	f107 0108 	add.w	r1, r7, #8
 80217b8:	68fb      	ldr	r3, [r7, #12]
 80217ba:	440b      	add	r3, r1
 80217bc:	781b      	ldrb	r3, [r3, #0]
 80217be:	429a      	cmp	r2, r3
 80217c0:	d001      	beq.n	80217c6 <_ZN11QueueSender6IsNackEPKh+0x46>
				return false;
 80217c2:	2300      	movs	r3, #0
 80217c4:	e004      	b.n	80217d0 <_ZN11QueueSender6IsNackEPKh+0x50>
		for (int i = 0; i < 4; ++i)
 80217c6:	68fb      	ldr	r3, [r7, #12]
 80217c8:	3301      	adds	r3, #1
 80217ca:	60fb      	str	r3, [r7, #12]
 80217cc:	e7eb      	b.n	80217a6 <_ZN11QueueSender6IsNackEPKh+0x26>

		return true;
 80217ce:	2301      	movs	r3, #1
	}
 80217d0:	4618      	mov	r0, r3
 80217d2:	3710      	adds	r7, #16
 80217d4:	46bd      	mov	sp, r7
 80217d6:	bd80      	pop	{r7, pc}
 80217d8:	0804086c 	.word	0x0804086c
 80217dc:	08040874 	.word	0x08040874
 80217e0:	08040628 	.word	0x08040628
 80217e4:	1715fe04 	.word	0x1715fe04

080217e8 <_ZN8ResponceC1Ev>:
struct Responce {
 80217e8:	b580      	push	{r7, lr}
 80217ea:	b082      	sub	sp, #8
 80217ec:	af00      	add	r7, sp, #0
 80217ee:	6078      	str	r0, [r7, #4]
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	4618      	mov	r0, r3
 80217f4:	f7ff fc17 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 80217f8:	687b      	ldr	r3, [r7, #4]
 80217fa:	4618      	mov	r0, r3
 80217fc:	3708      	adds	r7, #8
 80217fe:	46bd      	mov	sp, r7
 8021800:	bd80      	pop	{r7, pc}

08021802 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>:

	Responce CreateResponce(const std::vector<uint8_t> &data,
 8021802:	b580      	push	{r7, lr}
 8021804:	b084      	sub	sp, #16
 8021806:	af00      	add	r7, sp, #0
 8021808:	60f8      	str	r0, [r7, #12]
 802180a:	60b9      	str	r1, [r7, #8]
 802180c:	607a      	str	r2, [r7, #4]
 802180e:	70fb      	strb	r3, [r7, #3]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
 8021810:	68f8      	ldr	r0, [r7, #12]
 8021812:	f7ff ffe9 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.Data = data;
 8021816:	68fb      	ldr	r3, [r7, #12]
 8021818:	6879      	ldr	r1, [r7, #4]
 802181a:	4618      	mov	r0, r3
 802181c:	f002 f8d1 	bl	80239c2 <_ZNSt6vectorIhSaIhEEaSERKS1_>
		responce.PeripheryID = Periphery::Body;
 8021820:	68fb      	ldr	r3, [r7, #12]
 8021822:	2200      	movs	r2, #0
 8021824:	731a      	strb	r2, [r3, #12]
		responce.Error = ErrorCode::Serialize(error);
 8021826:	7e3b      	ldrb	r3, [r7, #24]
 8021828:	4618      	mov	r0, r3
 802182a:	f7ff fb85 	bl	8020f38 <_ZN11QueueSender9ErrorCode9SerializeEh>
 802182e:	4603      	mov	r3, r0
 8021830:	461a      	mov	r2, r3
 8021832:	68fb      	ldr	r3, [r7, #12]
 8021834:	739a      	strb	r2, [r3, #14]
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 8021836:	78fb      	ldrb	r3, [r7, #3]
 8021838:	4618      	mov	r0, r3
 802183a:	f7ff fb65 	bl	8020f08 <_ZN11QueueSender11MessageMode9SerializeEh>
 802183e:	4603      	mov	r3, r0
 8021840:	461a      	mov	r2, r3
 8021842:	68fb      	ldr	r3, [r7, #12]
 8021844:	735a      	strb	r2, [r3, #13]
		return responce;
 8021846:	bf00      	nop
	}
 8021848:	68f8      	ldr	r0, [r7, #12]
 802184a:	3710      	adds	r7, #16
 802184c:	46bd      	mov	sp, r7
 802184e:	bd80      	pop	{r7, pc}

08021850 <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 8021850:	b580      	push	{r7, lr}
 8021852:	b08a      	sub	sp, #40	; 0x28
 8021854:	af02      	add	r7, sp, #8
 8021856:	6078      	str	r0, [r7, #4]
 8021858:	6039      	str	r1, [r7, #0]
		std::vector<uint8_t> data;
 802185a:	f107 0310 	add.w	r3, r7, #16
 802185e:	4618      	mov	r0, r3
 8021860:	f7ff fbe1 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
		data.resize(Info::Size);
 8021864:	f107 0310 	add.w	r3, r7, #16
 8021868:	2104      	movs	r1, #4
 802186a:	4618      	mov	r0, r3
 802186c:	f002 f86d 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = data.data();
 8021870:	f107 0310 	add.w	r3, r7, #16
 8021874:	4618      	mov	r0, r3
 8021876:	f001 ffdd 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 802187a:	4603      	mov	r3, r0
 802187c:	60fb      	str	r3, [r7, #12]
		GetInfo().SerializeTo(&ptr);
 802187e:	6838      	ldr	r0, [r7, #0]
 8021880:	f000 f89a 	bl	80219b8 <_ZNK11QueueSender7GetInfoEv>
 8021884:	4603      	mov	r3, r0
 8021886:	61fb      	str	r3, [r7, #28]
 8021888:	f107 020c 	add.w	r2, r7, #12
 802188c:	f107 031c 	add.w	r3, r7, #28
 8021890:	4611      	mov	r1, r2
 8021892:	4618      	mov	r0, r3
 8021894:	f7ff fb5c 	bl	8020f50 <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 8021898:	6878      	ldr	r0, [r7, #4]
 802189a:	f107 0210 	add.w	r2, r7, #16
 802189e:	2300      	movs	r3, #0
 80218a0:	9300      	str	r3, [sp, #0]
 80218a2:	2302      	movs	r3, #2
 80218a4:	6839      	ldr	r1, [r7, #0]
 80218a6:	f7ff ffac 	bl	8021802 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
		std::vector<uint8_t> data;
 80218aa:	f107 0310 	add.w	r3, r7, #16
 80218ae:	4618      	mov	r0, r3
 80218b0:	f001 fefc 	bl	80236ac <_ZNSt6vectorIhSaIhEED1Ev>
		return CreateResponce(data, MessageMode::Info, ErrorCode::Success);
 80218b4:	bf00      	nop
	}
 80218b6:	6878      	ldr	r0, [r7, #4]
 80218b8:	3720      	adds	r7, #32
 80218ba:	46bd      	mov	sp, r7
 80218bc:	bd80      	pop	{r7, pc}
	...

080218c0 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>:

	Responce ProcessSetPeriodRequest(const Request &request) {
 80218c0:	b580      	push	{r7, lr}
 80218c2:	b08e      	sub	sp, #56	; 0x38
 80218c4:	af02      	add	r7, sp, #8
 80218c6:	60f8      	str	r0, [r7, #12]
 80218c8:	60b9      	str	r1, [r7, #8]
 80218ca:	607a      	str	r2, [r7, #4]
		assert(MessageMode::Deserialize(request.MetaInfo) == MessageMode::SetPeriod);
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	7c1b      	ldrb	r3, [r3, #16]
 80218d0:	4618      	mov	r0, r3
 80218d2:	f7ff fb25 	bl	8020f20 <_ZN11QueueSender11MessageMode11DeserializeEh>
 80218d6:	4603      	mov	r3, r0
 80218d8:	2b03      	cmp	r3, #3
 80218da:	d006      	beq.n	80218ea <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x2a>
 80218dc:	4b27      	ldr	r3, [pc, #156]	; (802197c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xbc>)
 80218de:	4a28      	ldr	r2, [pc, #160]	; (8021980 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xc0>)
 80218e0:	f240 114d 	movw	r1, #333	; 0x14d
 80218e4:	4827      	ldr	r0, [pc, #156]	; (8021984 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xc4>)
 80218e6:	f01d fd75 	bl	803f3d4 <__assert_func>
		std::vector<uint8_t> data = {0};
 80218ea:	2300      	movs	r3, #0
 80218ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80218f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80218f4:	623b      	str	r3, [r7, #32]
 80218f6:	2301      	movs	r3, #1
 80218f8:	627b      	str	r3, [r7, #36]	; 0x24
 80218fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80218fe:	4618      	mov	r0, r3
 8021900:	f002 f94e 	bl	8023ba0 <_ZNSaIhEC1Ev>
 8021904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8021908:	f107 0014 	add.w	r0, r7, #20
 802190c:	f107 0220 	add.w	r2, r7, #32
 8021910:	ca06      	ldmia	r2, {r1, r2}
 8021912:	f002 f951 	bl	8023bb8 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8021916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802191a:	4618      	mov	r0, r3
 802191c:	f001 fea2 	bl	8023664 <_ZNSaIhED1Ev>

		uint8_t newPeriod = request.Data[0];
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	2100      	movs	r1, #0
 8021924:	4618      	mov	r0, r3
 8021926:	f002 f968 	bl	8023bfa <_ZNKSt6vectorIhSaIhEEixEj>
 802192a:	4603      	mov	r3, r0
 802192c:	781b      	ldrb	r3, [r3, #0]
 802192e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		ErrorCode::Type error = ErrorCode::Success;
 8021932:	2300      	movs	r3, #0
 8021934:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (newPeriod == 0)
 8021938:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802193c:	2b00      	cmp	r3, #0
 802193e:	d103      	bne.n	8021948 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x88>
			error = ErrorCode::BadPeriod;
 8021940:	2304      	movs	r3, #4
 8021942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8021946:	e005      	b.n	8021954 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x94>
		else
			SetSendPeriod(newPeriod);
 8021948:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 802194c:	4619      	mov	r1, r3
 802194e:	68b8      	ldr	r0, [r7, #8]
 8021950:	f7ff fcae 	bl	80212b0 <_ZN11QueueSender13SetSendPeriodEh>

		return CreateResponce(data, MessageMode::SetPeriod, error);
 8021954:	68f8      	ldr	r0, [r7, #12]
 8021956:	f107 0214 	add.w	r2, r7, #20
 802195a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802195e:	9300      	str	r3, [sp, #0]
 8021960:	2303      	movs	r3, #3
 8021962:	68b9      	ldr	r1, [r7, #8]
 8021964:	f7ff ff4d 	bl	8021802 <_ZNK11QueueSender14CreateResponceERKSt6vectorIhSaIhEEhh>
		std::vector<uint8_t> data = {0};
 8021968:	f107 0314 	add.w	r3, r7, #20
 802196c:	4618      	mov	r0, r3
 802196e:	f001 fe9d 	bl	80236ac <_ZNSt6vectorIhSaIhEED1Ev>
		return CreateResponce(data, MessageMode::SetPeriod, error);
 8021972:	bf00      	nop
	}
 8021974:	68f8      	ldr	r0, [r7, #12]
 8021976:	3730      	adds	r7, #48	; 0x30
 8021978:	46bd      	mov	sp, r7
 802197a:	bd80      	pop	{r7, pc}
 802197c:	080408a0 	.word	0x080408a0
 8021980:	080408e8 	.word	0x080408e8
 8021984:	08040628 	.word	0x08040628

08021988 <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 8021988:	b480      	push	{r7}
 802198a:	b083      	sub	sp, #12
 802198c:	af00      	add	r7, sp, #0
 802198e:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 8021990:	bf00      	nop
 8021992:	370c      	adds	r7, #12
 8021994:	46bd      	mov	sp, r7
 8021996:	f85d 7b04 	ldr.w	r7, [sp], #4
 802199a:	4770      	bx	lr

0802199c <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 802199c:	b480      	push	{r7}
 802199e:	b083      	sub	sp, #12
 80219a0:	af00      	add	r7, sp, #0
 80219a2:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	2201      	movs	r2, #1
 80219a8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	}
 80219ac:	bf00      	nop
 80219ae:	370c      	adds	r7, #12
 80219b0:	46bd      	mov	sp, r7
 80219b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b6:	4770      	bx	lr

080219b8 <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 80219b8:	b580      	push	{r7, lr}
 80219ba:	b084      	sub	sp, #16
 80219bc:	af00      	add	r7, sp, #0
 80219be:	6078      	str	r0, [r7, #4]
		return {Requests.size(), Responces.size()};
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	4618      	mov	r0, r3
 80219c4:	f001 ff8b 	bl	80238de <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 80219c8:	4603      	mov	r3, r0
 80219ca:	b29b      	uxth	r3, r3
 80219cc:	81bb      	strh	r3, [r7, #12]
 80219ce:	687b      	ldr	r3, [r7, #4]
 80219d0:	3328      	adds	r3, #40	; 0x28
 80219d2:	4618      	mov	r0, r3
 80219d4:	f002 f920 	bl	8023c18 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>
 80219d8:	4603      	mov	r3, r0
 80219da:	b29b      	uxth	r3, r3
 80219dc:	81fb      	strh	r3, [r7, #14]
 80219de:	2300      	movs	r3, #0
 80219e0:	89ba      	ldrh	r2, [r7, #12]
 80219e2:	f362 030f 	bfi	r3, r2, #0, #16
 80219e6:	89fa      	ldrh	r2, [r7, #14]
 80219e8:	f362 431f 	bfi	r3, r2, #16, #16
	}
 80219ec:	4618      	mov	r0, r3
 80219ee:	3710      	adds	r7, #16
 80219f0:	46bd      	mov	sp, r7
 80219f2:	bd80      	pop	{r7, pc}

080219f4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 80219f4:	b580      	push	{r7, lr}
 80219f6:	b082      	sub	sp, #8
 80219f8:	af00      	add	r7, sp, #0
 80219fa:	6078      	str	r0, [r7, #4]
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	4618      	mov	r0, r3
 8021a00:	f001 fdb5 	bl	802356e <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	4618      	mov	r0, r3
 8021a08:	3708      	adds	r7, #8
 8021a0a:	46bd      	mov	sp, r7
 8021a0c:	bd80      	pop	{r7, pc}
	...

08021a10 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021a10:	b580      	push	{r7, lr}
 8021a12:	b084      	sub	sp, #16
 8021a14:	af00      	add	r7, sp, #0
 8021a16:	60f8      	str	r0, [r7, #12]
 8021a18:	60b9      	str	r1, [r7, #8]
 8021a1a:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021a1c:	68fb      	ldr	r3, [r7, #12]
 8021a1e:	4618      	mov	r0, r3
 8021a20:	f002 f907 	bl	8023c32 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8021a24:	68fb      	ldr	r3, [r7, #12]
 8021a26:	3334      	adds	r3, #52	; 0x34
 8021a28:	4618      	mov	r0, r3
 8021a2a:	f7ff fb09 	bl	8021040 <_ZN7RequestC1Ev>
 8021a2e:	68fb      	ldr	r3, [r7, #12]
 8021a30:	3348      	adds	r3, #72	; 0x48
 8021a32:	4618      	mov	r0, r3
 8021a34:	f7ff faf7 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8021a38:	68fb      	ldr	r3, [r7, #12]
 8021a3a:	68ba      	ldr	r2, [r7, #8]
 8021a3c:	655a      	str	r2, [r3, #84]	; 0x54
 8021a3e:	68fb      	ldr	r3, [r7, #12]
 8021a40:	687a      	ldr	r2, [r7, #4]
 8021a42:	659a      	str	r2, [r3, #88]	; 0x58
 8021a44:	68fb      	ldr	r3, [r7, #12]
 8021a46:	2201      	movs	r2, #1
 8021a48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		assert(uart != NULL);
 8021a4c:	68bb      	ldr	r3, [r7, #8]
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d106      	bne.n	8021a60 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>
 8021a52:	4b06      	ldr	r3, [pc, #24]	; (8021a6c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x5c>)
 8021a54:	4a06      	ldr	r2, [pc, #24]	; (8021a70 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x60>)
 8021a56:	f44f 71c3 	mov.w	r1, #390	; 0x186
 8021a5a:	4806      	ldr	r0, [pc, #24]	; (8021a74 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x64>)
 8021a5c:	f01d fcba 	bl	803f3d4 <__assert_func>
	}
 8021a60:	68fb      	ldr	r3, [r7, #12]
 8021a62:	4618      	mov	r0, r3
 8021a64:	3710      	adds	r7, #16
 8021a66:	46bd      	mov	sp, r7
 8021a68:	bd80      	pop	{r7, pc}
 8021a6a:	bf00      	nop
 8021a6c:	0804064c 	.word	0x0804064c
 8021a70:	08040928 	.word	0x08040928
 8021a74:	08040628 	.word	0x08040628

08021a78 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8021a78:	b580      	push	{r7, lr}
 8021a7a:	b082      	sub	sp, #8
 8021a7c:	af00      	add	r7, sp, #0
 8021a7e:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021a80:	687b      	ldr	r3, [r7, #4]
 8021a82:	2200      	movs	r2, #0
 8021a84:	631a      	str	r2, [r3, #48]	; 0x30
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 8021a86:	687b      	ldr	r3, [r7, #4]
 8021a88:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021a8a:	687b      	ldr	r3, [r7, #4]
 8021a8c:	3328      	adds	r3, #40	; 0x28
 8021a8e:	2201      	movs	r2, #1
 8021a90:	4619      	mov	r1, r3
 8021a92:	f016 ff1b 	bl	80388cc <HAL_UART_Receive_IT>
 8021a96:	4603      	mov	r3, r0
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	d006      	beq.n	8021aaa <_ZN13HeadInterface14ResetReadStateEv+0x32>
 8021a9c:	4b05      	ldr	r3, [pc, #20]	; (8021ab4 <_ZN13HeadInterface14ResetReadStateEv+0x3c>)
 8021a9e:	4a06      	ldr	r2, [pc, #24]	; (8021ab8 <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 8021aa0:	f240 118b 	movw	r1, #395	; 0x18b
 8021aa4:	4805      	ldr	r0, [pc, #20]	; (8021abc <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 8021aa6:	f01d fc95 	bl	803f3d4 <__assert_func>
	}
 8021aaa:	bf00      	nop
 8021aac:	3708      	adds	r7, #8
 8021aae:	46bd      	mov	sp, r7
 8021ab0:	bd80      	pop	{r7, pc}
 8021ab2:	bf00      	nop
 8021ab4:	08040964 	.word	0x08040964
 8021ab8:	080409a0 	.word	0x080409a0
 8021abc:	08040628 	.word	0x08040628

08021ac0 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8021ac0:	b580      	push	{r7, lr}
 8021ac2:	b082      	sub	sp, #8
 8021ac4:	af00      	add	r7, sp, #0
 8021ac6:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	4618      	mov	r0, r3
 8021acc:	f002 f8c5 	bl	8023c5a <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 8021ad0:	4603      	mov	r3, r0
 8021ad2:	f083 0301 	eor.w	r3, r3, #1
 8021ad6:	b2db      	uxtb	r3, r3
	}
 8021ad8:	4618      	mov	r0, r3
 8021ada:	3708      	adds	r7, #8
 8021adc:	46bd      	mov	sp, r7
 8021ade:	bd80      	pop	{r7, pc}

08021ae0 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8021ae0:	b590      	push	{r4, r7, lr}
 8021ae2:	b097      	sub	sp, #92	; 0x5c
 8021ae4:	af00      	add	r7, sp, #0
 8021ae6:	6078      	str	r0, [r7, #4]
 8021ae8:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8021aea:	687b      	ldr	r3, [r7, #4]
 8021aec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d100      	bne.n	8021af6 <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021af4:	e7f9      	b.n	8021aea <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		size_t size = responce.Data.size() + 3 + 3;
 8021af6:	683b      	ldr	r3, [r7, #0]
 8021af8:	4618      	mov	r0, r3
 8021afa:	f001 feaa 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021afe:	4603      	mov	r3, r0
 8021b00:	3306      	adds	r3, #6
 8021b02:	657b      	str	r3, [r7, #84]	; 0x54
		CurrentResponceBuffer.resize(size);
 8021b04:	687b      	ldr	r3, [r7, #4]
 8021b06:	3348      	adds	r3, #72	; 0x48
 8021b08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8021b0a:	4618      	mov	r0, r3
 8021b0c:	f001 ff1d 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	3348      	adds	r3, #72	; 0x48
 8021b14:	4618      	mov	r0, r3
 8021b16:	f001 fe8d 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021b1a:	6538      	str	r0, [r7, #80]	; 0x50

		*(ptr++) = SOM1Val;
 8021b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b1e:	1c5a      	adds	r2, r3, #1
 8021b20:	653a      	str	r2, [r7, #80]	; 0x50
 8021b22:	22ff      	movs	r2, #255	; 0xff
 8021b24:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b28:	1c5a      	adds	r2, r3, #1
 8021b2a:	653a      	str	r2, [r7, #80]	; 0x50
 8021b2c:	22aa      	movs	r2, #170	; 0xaa
 8021b2e:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8021b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b32:	1c5a      	adds	r2, r3, #1
 8021b34:	653a      	str	r2, [r7, #80]	; 0x50
 8021b36:	683a      	ldr	r2, [r7, #0]
 8021b38:	7b12      	ldrb	r2, [r2, #12]
 8021b3a:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8021b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b3e:	1c5a      	adds	r2, r3, #1
 8021b40:	653a      	str	r2, [r7, #80]	; 0x50
 8021b42:	683a      	ldr	r2, [r7, #0]
 8021b44:	7b52      	ldrb	r2, [r2, #13]
 8021b46:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8021b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b4a:	1c5a      	adds	r2, r3, #1
 8021b4c:	653a      	str	r2, [r7, #80]	; 0x50
 8021b4e:	683a      	ldr	r2, [r7, #0]
 8021b50:	7b92      	ldrb	r2, [r2, #14]
 8021b52:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 8021b54:	683b      	ldr	r3, [r7, #0]
 8021b56:	4618      	mov	r0, r3
 8021b58:	f002 f88c 	bl	8023c74 <_ZNKSt6vectorIhSaIhEE4dataEv>
 8021b5c:	4604      	mov	r4, r0
 8021b5e:	683b      	ldr	r3, [r7, #0]
 8021b60:	4618      	mov	r0, r3
 8021b62:	f001 fe76 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021b66:	4603      	mov	r3, r0
 8021b68:	461a      	mov	r2, r3
 8021b6a:	4621      	mov	r1, r4
 8021b6c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8021b6e:	f01d fc9b 	bl	803f4a8 <memcpy>

		ptr += responce.Data.size();
 8021b72:	683b      	ldr	r3, [r7, #0]
 8021b74:	4618      	mov	r0, r3
 8021b76:	f001 fe6c 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021b7a:	4602      	mov	r2, r0
 8021b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b7e:	4413      	add	r3, r2
 8021b80:	653b      	str	r3, [r7, #80]	; 0x50

		*ptr = SOM3Val;
 8021b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021b84:	22af      	movs	r2, #175	; 0xaf
 8021b86:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 8021b88:	687b      	ldr	r3, [r7, #4]
 8021b8a:	2200      	movs	r2, #0
 8021b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

		size_t sz = CurrentResponceBuffer.size();
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	3348      	adds	r3, #72	; 0x48
 8021b94:	4618      	mov	r0, r3
 8021b96:	f001 fe5c 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8021b9a:	64f8      	str	r0, [r7, #76]	; 0x4c

		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	3348      	adds	r3, #72	; 0x48
 8021ba0:	4618      	mov	r0, r3
 8021ba2:	f001 fe47 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021ba6:	4601      	mov	r1, r0
 8021ba8:	f107 030c 	add.w	r3, r7, #12
 8021bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021bae:	4618      	mov	r0, r3
 8021bb0:	f01d fc7a 	bl	803f4a8 <memcpy>

		assert(
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8021bb8:	687b      	ldr	r3, [r7, #4]
 8021bba:	3348      	adds	r3, #72	; 0x48
 8021bbc:	4618      	mov	r0, r3
 8021bbe:	f001 fe39 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021bc2:	4601      	mov	r1, r0
 8021bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021bc6:	b29b      	uxth	r3, r3
 8021bc8:	461a      	mov	r2, r3
 8021bca:	4620      	mov	r0, r4
 8021bcc:	f016 fdd6 	bl	803877c <HAL_UART_Transmit_IT>
 8021bd0:	4603      	mov	r3, r0
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	d006      	beq.n	8021be4 <_ZN13HeadInterface4SendERK8Responce+0x104>
 8021bd6:	4b05      	ldr	r3, [pc, #20]	; (8021bec <_ZN13HeadInterface4SendERK8Responce+0x10c>)
 8021bd8:	4a05      	ldr	r2, [pc, #20]	; (8021bf0 <_ZN13HeadInterface4SendERK8Responce+0x110>)
 8021bda:	f240 11b1 	movw	r1, #433	; 0x1b1
 8021bde:	4805      	ldr	r0, [pc, #20]	; (8021bf4 <_ZN13HeadInterface4SendERK8Responce+0x114>)
 8021be0:	f01d fbf8 	bl	803f3d4 <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 8021be4:	bf00      	nop
 8021be6:	375c      	adds	r7, #92	; 0x5c
 8021be8:	46bd      	mov	sp, r7
 8021bea:	bd90      	pop	{r4, r7, pc}
 8021bec:	080409c8 	.word	0x080409c8
 8021bf0:	08040a18 	.word	0x08040a18
 8021bf4:	08040628 	.word	0x08040628

08021bf8 <_ZN7RequestC1EOS_>:
struct Request {
 8021bf8:	b580      	push	{r7, lr}
 8021bfa:	b082      	sub	sp, #8
 8021bfc:	af00      	add	r7, sp, #0
 8021bfe:	6078      	str	r0, [r7, #4]
 8021c00:	6039      	str	r1, [r7, #0]
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	683a      	ldr	r2, [r7, #0]
 8021c06:	4611      	mov	r1, r2
 8021c08:	4618      	mov	r0, r3
 8021c0a:	f7ff fb7f 	bl	802130c <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8021c0e:	683b      	ldr	r3, [r7, #0]
 8021c10:	68da      	ldr	r2, [r3, #12]
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	60da      	str	r2, [r3, #12]
 8021c16:	683b      	ldr	r3, [r7, #0]
 8021c18:	7c1a      	ldrb	r2, [r3, #16]
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	741a      	strb	r2, [r3, #16]
 8021c1e:	683b      	ldr	r3, [r7, #0]
 8021c20:	7c5a      	ldrb	r2, [r3, #17]
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	745a      	strb	r2, [r3, #17]
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	4618      	mov	r0, r3
 8021c2a:	3708      	adds	r7, #8
 8021c2c:	46bd      	mov	sp, r7
 8021c2e:	bd80      	pop	{r7, pc}

08021c30 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021c30:	b580      	push	{r7, lr}
 8021c32:	b084      	sub	sp, #16
 8021c34:	af00      	add	r7, sp, #0
 8021c36:	6078      	str	r0, [r7, #4]
 8021c38:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021c3a:	6838      	ldr	r0, [r7, #0]
 8021c3c:	f7ff ff40 	bl	8021ac0 <_ZNK13HeadInterface10HasRequestEv>
 8021c40:	4603      	mov	r3, r0
 8021c42:	2b00      	cmp	r3, #0
 8021c44:	d106      	bne.n	8021c54 <_ZN13HeadInterface10GetRequestEv+0x24>
 8021c46:	4b11      	ldr	r3, [pc, #68]	; (8021c8c <_ZN13HeadInterface10GetRequestEv+0x5c>)
 8021c48:	4a11      	ldr	r2, [pc, #68]	; (8021c90 <_ZN13HeadInterface10GetRequestEv+0x60>)
 8021c4a:	f240 11b7 	movw	r1, #439	; 0x1b7
 8021c4e:	4811      	ldr	r0, [pc, #68]	; (8021c94 <_ZN13HeadInterface10GetRequestEv+0x64>)
 8021c50:	f01d fbc0 	bl	803f3d4 <__assert_func>
		Request request = std::move(Requests.front());
 8021c54:	683b      	ldr	r3, [r7, #0]
 8021c56:	4618      	mov	r0, r3
 8021c58:	f002 f81b 	bl	8023c92 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 8021c5c:	4603      	mov	r3, r0
 8021c5e:	4618      	mov	r0, r3
 8021c60:	f001 fd3f 	bl	80236e2 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021c64:	4603      	mov	r3, r0
 8021c66:	4619      	mov	r1, r3
 8021c68:	6878      	ldr	r0, [r7, #4]
 8021c6a:	f7ff ffc5 	bl	8021bf8 <_ZN7RequestC1EOS_>
		//auto cap = Requests.max_size();
		auto sz = Requests.size();
 8021c6e:	683b      	ldr	r3, [r7, #0]
 8021c70:	4618      	mov	r0, r3
 8021c72:	f002 f81b 	bl	8023cac <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4sizeEv>
 8021c76:	60f8      	str	r0, [r7, #12]

		Requests.pop();
 8021c78:	683b      	ldr	r3, [r7, #0]
 8021c7a:	4618      	mov	r0, r3
 8021c7c:	f002 f823 	bl	8023cc6 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 8021c80:	bf00      	nop
	}
 8021c82:	6878      	ldr	r0, [r7, #4]
 8021c84:	3710      	adds	r7, #16
 8021c86:	46bd      	mov	sp, r7
 8021c88:	bd80      	pop	{r7, pc}
 8021c8a:	bf00      	nop
 8021c8c:	08040a44 	.word	0x08040a44
 8021c90:	08040a54 	.word	0x08040a54
 8021c94:	08040628 	.word	0x08040628

08021c98 <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021c98:	b480      	push	{r7}
 8021c9a:	b083      	sub	sp, #12
 8021c9c:	af00      	add	r7, sp, #0
 8021c9e:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	2201      	movs	r2, #1
 8021ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
 8021ca8:	bf00      	nop
 8021caa:	370c      	adds	r7, #12
 8021cac:	46bd      	mov	sp, r7
 8021cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cb2:	4770      	bx	lr

08021cb4 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021cb4:	b590      	push	{r4, r7, lr}
 8021cb6:	b089      	sub	sp, #36	; 0x24
 8021cb8:	af00      	add	r7, sp, #0
 8021cba:	6078      	str	r0, [r7, #4]
		switch (CurrentState) {
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021cc0:	2b07      	cmp	r3, #7
 8021cc2:	f200 80d6 	bhi.w	8021e72 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1be>
 8021cc6:	a201      	add	r2, pc, #4	; (adr r2, 8021ccc <_ZN13HeadInterface19ProcessRecievedDataEv+0x18>)
 8021cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ccc:	08021ced 	.word	0x08021ced
 8021cd0:	08021d17 	.word	0x08021d17
 8021cd4:	08021d41 	.word	0x08021d41
 8021cd8:	08021d65 	.word	0x08021d65
 8021cdc:	08021d9b 	.word	0x08021d9b
 8021ce0:	08021dbf 	.word	0x08021dbf
 8021ce4:	08021df1 	.word	0x08021df1
 8021ce8:	08021e09 	.word	0x08021e09
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021cf2:	2bff      	cmp	r3, #255	; 0xff
 8021cf4:	d10b      	bne.n	8021d0e <_ZN13HeadInterface19ProcessRecievedDataEv+0x5a>
				CurrentState = ReadState::SOM2;
 8021cf6:	687b      	ldr	r3, [r7, #4]
 8021cf8:	2201      	movs	r2, #1
 8021cfa:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021cfc:	687b      	ldr	r3, [r7, #4]
 8021cfe:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	3328      	adds	r3, #40	; 0x28
 8021d04:	2201      	movs	r2, #1
 8021d06:	4619      	mov	r1, r3
 8021d08:	f016 fde0 	bl	80388cc <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021d0c:	e0b5      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8021d0e:	6878      	ldr	r0, [r7, #4]
 8021d10:	f7ff feb2 	bl	8021a78 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021d14:	e0b1      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021d16:	687b      	ldr	r3, [r7, #4]
 8021d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021d1c:	2baa      	cmp	r3, #170	; 0xaa
 8021d1e:	d10b      	bne.n	8021d38 <_ZN13HeadInterface19ProcessRecievedDataEv+0x84>
				CurrentState = ReadState::PERIPHERY_ID;
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	2202      	movs	r2, #2
 8021d24:	631a      	str	r2, [r3, #48]	; 0x30
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021d2a:	687b      	ldr	r3, [r7, #4]
 8021d2c:	3328      	adds	r3, #40	; 0x28
 8021d2e:	2201      	movs	r2, #1
 8021d30:	4619      	mov	r1, r3
 8021d32:	f016 fdcb 	bl	80388cc <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021d36:	e0a0      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
				ResetReadState();
 8021d38:	6878      	ldr	r0, [r7, #4]
 8021d3a:	f7ff fe9d 	bl	8021a78 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021d3e:	e09c      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			CurrentState = ReadState::REQUEST_SIZE;
 8021d4c:	687b      	ldr	r3, [r7, #4]
 8021d4e:	2203      	movs	r2, #3
 8021d50:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	3328      	adds	r3, #40	; 0x28
 8021d5a:	2201      	movs	r2, #1
 8021d5c:	4619      	mov	r1, r3
 8021d5e:	f016 fdb5 	bl	80388cc <HAL_UART_Receive_IT>
			break;
 8021d62:	e08a      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::REQUEST_SIZE: {
			RequestSize = CurrentValue;
 8021d64:	687b      	ldr	r3, [r7, #4]
 8021d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021d6a:	461a      	mov	r2, r3
 8021d6c:	687b      	ldr	r3, [r7, #4]
 8021d6e:	62da      	str	r2, [r3, #44]	; 0x2c
			CurrentRequest.Data.resize(RequestSize);
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8021d76:	687b      	ldr	r3, [r7, #4]
 8021d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d7a:	4619      	mov	r1, r3
 8021d7c:	4610      	mov	r0, r2
 8021d7e:	f001 fde4 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>
			CurrentState = ReadState::RESPONCE_SIZE;
 8021d82:	687b      	ldr	r3, [r7, #4]
 8021d84:	2204      	movs	r2, #4
 8021d86:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021d8c:	687b      	ldr	r3, [r7, #4]
 8021d8e:	3328      	adds	r3, #40	; 0x28
 8021d90:	2201      	movs	r2, #1
 8021d92:	4619      	mov	r1, r3
 8021d94:	f016 fd9a 	bl	80388cc <HAL_UART_Receive_IT>
			break;
 8021d98:	e06f      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021da0:	461a      	mov	r2, r3
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	641a      	str	r2, [r3, #64]	; 0x40
			CurrentState = ReadState::META;
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	2205      	movs	r2, #5
 8021daa:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	3328      	adds	r3, #40	; 0x28
 8021db4:	2201      	movs	r2, #1
 8021db6:	4619      	mov	r1, r3
 8021db8:	f016 fd88 	bl	80388cc <HAL_UART_Receive_IT>
			break;
 8021dbc:	e05d      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8021dbe:	687b      	ldr	r3, [r7, #4]
 8021dc0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			CurrentState = ReadState::DATA;
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	2206      	movs	r2, #6
 8021dce:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021dd0:	687b      	ldr	r3, [r7, #4]
 8021dd2:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8021dd4:	687b      	ldr	r3, [r7, #4]
 8021dd6:	3334      	adds	r3, #52	; 0x34
 8021dd8:	4618      	mov	r0, r3
 8021dda:	f001 fd2b 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 8021dde:	4601      	mov	r1, r0
					RequestSize);
 8021de0:	687b      	ldr	r3, [r7, #4]
 8021de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021de4:	b29b      	uxth	r3, r3
 8021de6:	461a      	mov	r2, r3
 8021de8:	4620      	mov	r0, r4
 8021dea:	f016 fd6f 	bl	80388cc <HAL_UART_Receive_IT>
			break;
 8021dee:	e044      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8021df0:	687b      	ldr	r3, [r7, #4]
 8021df2:	2207      	movs	r2, #7
 8021df4:	631a      	str	r2, [r3, #48]	; 0x30
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8021dfa:	687b      	ldr	r3, [r7, #4]
 8021dfc:	3328      	adds	r3, #40	; 0x28
 8021dfe:	2201      	movs	r2, #1
 8021e00:	4619      	mov	r1, r3
 8021e02:	f016 fd63 	bl	80388cc <HAL_UART_Receive_IT>
			break;
 8021e06:	e038      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 8021e08:	687b      	ldr	r3, [r7, #4]
 8021e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8021e0e:	2baf      	cmp	r3, #175	; 0xaf
 8021e10:	d12b      	bne.n	8021e6a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b6>
				Requests.emplace(std::move(CurrentRequest));
 8021e12:	687c      	ldr	r4, [r7, #4]
 8021e14:	687b      	ldr	r3, [r7, #4]
 8021e16:	3334      	adds	r3, #52	; 0x34
 8021e18:	4618      	mov	r0, r3
 8021e1a:	f001 fc62 	bl	80236e2 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8021e1e:	4603      	mov	r3, r0
 8021e20:	4619      	mov	r1, r3
 8021e22:	4620      	mov	r0, r4
 8021e24:	f001 ff5b 	bl	8023cde <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>
				CurrentRequest = { };
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8021e2e:	f107 030c 	add.w	r3, r7, #12
 8021e32:	2200      	movs	r2, #0
 8021e34:	601a      	str	r2, [r3, #0]
 8021e36:	605a      	str	r2, [r3, #4]
 8021e38:	609a      	str	r2, [r3, #8]
 8021e3a:	60da      	str	r2, [r3, #12]
 8021e3c:	611a      	str	r2, [r3, #16]
 8021e3e:	2300      	movs	r3, #0
 8021e40:	60fb      	str	r3, [r7, #12]
 8021e42:	2300      	movs	r3, #0
 8021e44:	613b      	str	r3, [r7, #16]
 8021e46:	2300      	movs	r3, #0
 8021e48:	617b      	str	r3, [r7, #20]
 8021e4a:	f107 030c 	add.w	r3, r7, #12
 8021e4e:	4618      	mov	r0, r3
 8021e50:	f7ff f8e9 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8021e54:	f107 030c 	add.w	r3, r7, #12
 8021e58:	4619      	mov	r1, r3
 8021e5a:	4620      	mov	r0, r4
 8021e5c:	f7ff f95e 	bl	802111c <_ZN7RequestaSEOS_>
 8021e60:	f107 030c 	add.w	r3, r7, #12
 8021e64:	4618      	mov	r0, r3
 8021e66:	f7ff f8f8 	bl	802105a <_ZN7RequestD1Ev>
			}
			ResetReadState();
 8021e6a:	6878      	ldr	r0, [r7, #4]
 8021e6c:	f7ff fe04 	bl	8021a78 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021e70:	e003      	b.n	8021e7a <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c6>
		}
		default:
			ResetReadState();
 8021e72:	6878      	ldr	r0, [r7, #4]
 8021e74:	f7ff fe00 	bl	8021a78 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 8021e78:	bf00      	nop
 8021e7a:	bf00      	nop
 8021e7c:	3724      	adds	r7, #36	; 0x24
 8021e7e:	46bd      	mov	sp, r7
 8021e80:	bd90      	pop	{r4, r7, pc}
 8021e82:	bf00      	nop

08021e84 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8021e84:	b580      	push	{r7, lr}
 8021e86:	b082      	sub	sp, #8
 8021e88:	af00      	add	r7, sp, #0
 8021e8a:	6078      	str	r0, [r7, #4]
 8021e8c:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8021e8e:	683b      	ldr	r3, [r7, #0]
 8021e90:	2b00      	cmp	r3, #0
 8021e92:	d106      	bne.n	8021ea2 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8021e94:	4b19      	ldr	r3, [pc, #100]	; (8021efc <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 8021e96:	4a1a      	ldr	r2, [pc, #104]	; (8021f00 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021e98:	f240 2113 	movw	r1, #531	; 0x213
 8021e9c:	4819      	ldr	r0, [pc, #100]	; (8021f04 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021e9e:	f01d fa99 	bl	803f3d4 <__assert_func>
			assert(*ptr);
 8021ea2:	683b      	ldr	r3, [r7, #0]
 8021ea4:	681b      	ldr	r3, [r3, #0]
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d106      	bne.n	8021eb8 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 8021eaa:	4b17      	ldr	r3, [pc, #92]	; (8021f08 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8021eac:	4a14      	ldr	r2, [pc, #80]	; (8021f00 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8021eae:	f44f 7105 	mov.w	r1, #532	; 0x214
 8021eb2:	4814      	ldr	r0, [pc, #80]	; (8021f04 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8021eb4:	f01d fa8e 	bl	803f3d4 <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 8021eb8:	683b      	ldr	r3, [r7, #0]
 8021eba:	681b      	ldr	r3, [r3, #0]
 8021ebc:	687a      	ldr	r2, [r7, #4]
 8021ebe:	8812      	ldrh	r2, [r2, #0]
 8021ec0:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021ec2:	683b      	ldr	r3, [r7, #0]
 8021ec4:	681b      	ldr	r3, [r3, #0]
 8021ec6:	1c9a      	adds	r2, r3, #2
 8021ec8:	683b      	ldr	r3, [r7, #0]
 8021eca:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 8021ecc:	683b      	ldr	r3, [r7, #0]
 8021ece:	681b      	ldr	r3, [r3, #0]
 8021ed0:	687a      	ldr	r2, [r7, #4]
 8021ed2:	8852      	ldrh	r2, [r2, #2]
 8021ed4:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021ed6:	683b      	ldr	r3, [r7, #0]
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	1c9a      	adds	r2, r3, #2
 8021edc:	683b      	ldr	r3, [r7, #0]
 8021ede:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 8021ee0:	683b      	ldr	r3, [r7, #0]
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	687a      	ldr	r2, [r7, #4]
 8021ee6:	8892      	ldrh	r2, [r2, #4]
 8021ee8:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8021eea:	683b      	ldr	r3, [r7, #0]
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	1c9a      	adds	r2, r3, #2
 8021ef0:	683b      	ldr	r3, [r7, #0]
 8021ef2:	601a      	str	r2, [r3, #0]
		}
 8021ef4:	bf00      	nop
 8021ef6:	3708      	adds	r7, #8
 8021ef8:	46bd      	mov	sp, r7
 8021efa:	bd80      	pop	{r7, pc}
 8021efc:	080405f4 	.word	0x080405f4
 8021f00:	08040a78 	.word	0x08040a78
 8021f04:	08040628 	.word	0x08040628
 8021f08:	08040644 	.word	0x08040644

08021f0c <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 8021f0c:	b580      	push	{r7, lr}
 8021f0e:	b084      	sub	sp, #16
 8021f10:	af00      	add	r7, sp, #0
 8021f12:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 8021f14:	6878      	ldr	r0, [r7, #4]
 8021f16:	2300      	movs	r3, #0
 8021f18:	60bb      	str	r3, [r7, #8]
 8021f1a:	2300      	movs	r3, #0
 8021f1c:	60fb      	str	r3, [r7, #12]
 8021f1e:	f107 0308 	add.w	r3, r7, #8
 8021f22:	e893 0006 	ldmia.w	r3, {r1, r2}
 8021f26:	f001 feec 	bl	8023d02 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 8021f2a:	687b      	ldr	r3, [r7, #4]
 8021f2c:	2200      	movs	r2, #0
 8021f2e:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021f30:	bf00      	nop
 8021f32:	3710      	adds	r7, #16
 8021f34:	46bd      	mov	sp, r7
 8021f36:	bd80      	pop	{r7, pc}

08021f38 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 8021f38:	b580      	push	{r7, lr}
 8021f3a:	b082      	sub	sp, #8
 8021f3c:	af00      	add	r7, sp, #0
 8021f3e:	6078      	str	r0, [r7, #4]
 8021f40:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8021f42:	687b      	ldr	r3, [r7, #4]
 8021f44:	6839      	ldr	r1, [r7, #0]
 8021f46:	4618      	mov	r0, r3
 8021f48:	f001 fef6 	bl	8023d38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	4618      	mov	r0, r3
 8021f50:	f001 ff14 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021f54:	4602      	mov	r2, r0
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021f5a:	429a      	cmp	r2, r3
 8021f5c:	bf8c      	ite	hi
 8021f5e:	2301      	movhi	r3, #1
 8021f60:	2300      	movls	r3, #0
 8021f62:	b2db      	uxtb	r3, r3
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d002      	beq.n	8021f6e <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 8021f68:	6878      	ldr	r0, [r7, #4]
 8021f6a:	f000 f804 	bl	8021f76 <_ZN17IMUFrameContainer6RemoveEv>
	}
 8021f6e:	bf00      	nop
 8021f70:	3708      	adds	r7, #8
 8021f72:	46bd      	mov	sp, r7
 8021f74:	bd80      	pop	{r7, pc}

08021f76 <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 8021f76:	b580      	push	{r7, lr}
 8021f78:	b082      	sub	sp, #8
 8021f7a:	af00      	add	r7, sp, #0
 8021f7c:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 8021f7e:	687b      	ldr	r3, [r7, #4]
 8021f80:	4618      	mov	r0, r3
 8021f82:	f001 ff0d 	bl	8023da0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021f8a:	1c5a      	adds	r2, r3, #1
 8021f8c:	687b      	ldr	r3, [r7, #4]
 8021f8e:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8021f90:	bf00      	nop
 8021f92:	3708      	adds	r7, #8
 8021f94:	46bd      	mov	sp, r7
 8021f96:	bd80      	pop	{r7, pc}

08021f98 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8021f98:	b5b0      	push	{r4, r5, r7, lr}
 8021f9a:	b08a      	sub	sp, #40	; 0x28
 8021f9c:	af00      	add	r7, sp, #0
 8021f9e:	60f8      	str	r0, [r7, #12]
 8021fa0:	60b9      	str	r1, [r7, #8]
 8021fa2:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8021fa4:	68fb      	ldr	r3, [r7, #12]
 8021fa6:	4618      	mov	r0, r3
 8021fa8:	f001 ff1d 	bl	8023de6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8021fac:	4603      	mov	r3, r0
 8021fae:	2b00      	cmp	r3, #0
 8021fb0:	d001      	beq.n	8021fb6 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8021fb2:	2300      	movs	r3, #0
 8021fb4:	e038      	b.n	8022028 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 8021fb6:	68fb      	ldr	r3, [r7, #12]
 8021fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021fba:	68ba      	ldr	r2, [r7, #8]
 8021fbc:	429a      	cmp	r2, r3
 8021fbe:	d30b      	bcc.n	8021fd8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 8021fc0:	68fb      	ldr	r3, [r7, #12]
 8021fc2:	4618      	mov	r0, r3
 8021fc4:	f001 feda 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021fc8:	4602      	mov	r2, r0
 8021fca:	68fb      	ldr	r3, [r7, #12]
 8021fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021fce:	4413      	add	r3, r2
 8021fd0:	3b01      	subs	r3, #1
 8021fd2:	68ba      	ldr	r2, [r7, #8]
 8021fd4:	429a      	cmp	r2, r3
 8021fd6:	d901      	bls.n	8021fdc <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 8021fd8:	2301      	movs	r3, #1
 8021fda:	e000      	b.n	8021fde <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 8021fdc:	2300      	movs	r3, #0
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d001      	beq.n	8021fe6 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 8021fe2:	2300      	movs	r3, #0
 8021fe4:	e020      	b.n	8022028 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 8021fe6:	68fc      	ldr	r4, [r7, #12]
 8021fe8:	68fb      	ldr	r3, [r7, #12]
 8021fea:	4618      	mov	r0, r3
 8021fec:	f001 fec6 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8021ff0:	4601      	mov	r1, r0
 8021ff2:	68fb      	ldr	r3, [r7, #12]
 8021ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021ff6:	68bb      	ldr	r3, [r7, #8]
 8021ff8:	1ad3      	subs	r3, r2, r3
 8021ffa:	440b      	add	r3, r1
 8021ffc:	3b01      	subs	r3, #1
 8021ffe:	4619      	mov	r1, r3
 8022000:	4620      	mov	r0, r4
 8022002:	f001 ff02 	bl	8023e0a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022006:	4603      	mov	r3, r0
 8022008:	f107 0414 	add.w	r4, r7, #20
 802200c:	461d      	mov	r5, r3
 802200e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022012:	682b      	ldr	r3, [r5, #0]
 8022014:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	461d      	mov	r5, r3
 802201a:	f107 0414 	add.w	r4, r7, #20
 802201e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8022022:	6823      	ldr	r3, [r4, #0]
 8022024:	602b      	str	r3, [r5, #0]
		return true;
 8022026:	2301      	movs	r3, #1
	}
 8022028:	4618      	mov	r0, r3
 802202a:	3728      	adds	r7, #40	; 0x28
 802202c:	46bd      	mov	sp, r7
 802202e:	bdb0      	pop	{r4, r5, r7, pc}

08022030 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8022030:	b580      	push	{r7, lr}
 8022032:	b082      	sub	sp, #8
 8022034:	af00      	add	r7, sp, #0
 8022036:	6078      	str	r0, [r7, #4]
 8022038:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 802203a:	683b      	ldr	r3, [r7, #0]
 802203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802203e:	b29a      	uxth	r2, r3
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	801a      	strh	r2, [r3, #0]
 8022044:	683b      	ldr	r3, [r7, #0]
 8022046:	4618      	mov	r0, r3
 8022048:	f001 fe98 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 802204c:	4603      	mov	r3, r0
 802204e:	b29a      	uxth	r2, r3
 8022050:	687b      	ldr	r3, [r7, #4]
 8022052:	805a      	strh	r2, [r3, #2]
 8022054:	683b      	ldr	r3, [r7, #0]
 8022056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022058:	b29a      	uxth	r2, r3
 802205a:	687b      	ldr	r3, [r7, #4]
 802205c:	809a      	strh	r2, [r3, #4]
	}
 802205e:	6878      	ldr	r0, [r7, #4]
 8022060:	3708      	adds	r7, #8
 8022062:	46bd      	mov	sp, r7
 8022064:	bd80      	pop	{r7, pc}

08022066 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>:

	std::queue<size_t> StrobeQueue;
	size_t CurrentSeq = 0;

public:
	void ProcessStrobe(const BHYWrapper &IMU) {
 8022066:	b580      	push	{r7, lr}
 8022068:	b086      	sub	sp, #24
 802206a:	af00      	add	r7, sp, #0
 802206c:	6078      	str	r0, [r7, #4]
 802206e:	6039      	str	r1, [r7, #0]
		uint32_t currentTime = HAL_GetTick();
 8022070:	f00c f936 	bl	802e2e0 <HAL_GetTick>
 8022074:	6178      	str	r0, [r7, #20]

		switch (State) {
 8022076:	687b      	ldr	r3, [r7, #4]
 8022078:	689b      	ldr	r3, [r3, #8]
 802207a:	2b00      	cmp	r3, #0
 802207c:	d04e      	beq.n	802211c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xb6>
 802207e:	2b01      	cmp	r3, #1
 8022080:	d154      	bne.n	802212c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		case PulseState::Down: {
			State = PulseState::Up;
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	2200      	movs	r2, #0
 8022086:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	685b      	ldr	r3, [r3, #4]
 802208c:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	697a      	ldr	r2, [r7, #20]
 8022092:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	681b      	ldr	r3, [r3, #0]
 8022098:	2b00      	cmp	r3, #0
 802209a:	d046      	beq.n	802212a <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
 802209c:	687b      	ldr	r3, [r7, #4]
 802209e:	685b      	ldr	r3, [r3, #4]
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	d042      	beq.n	802212a <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
				return;

			uint32_t duration = currentTime - startTime;
 80220a4:	697a      	ldr	r2, [r7, #20]
 80220a6:	693b      	ldr	r3, [r7, #16]
 80220a8:	1ad3      	subs	r3, r2, r3
 80220aa:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80220b2:	68fb      	ldr	r3, [r7, #12]
 80220b4:	ee07 3a90 	vmov	s15, r3
 80220b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80220bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 80220c6:	687b      	ldr	r3, [r7, #4]
 80220c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80220cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80220d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80220d4:	687b      	ldr	r3, [r7, #4]
 80220d6:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration))
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	691b      	ldr	r3, [r3, #16]
 80220de:	68fa      	ldr	r2, [r7, #12]
 80220e0:	1ad3      	subs	r3, r2, r3
 80220e2:	4618      	mov	r0, r3
 80220e4:	f7fe fed6 	bl	8020e94 <_ZSt3absl>
 80220e8:	4602      	mov	r2, r0
					< long(DurationThreshold))
 80220ea:	687b      	ldr	r3, [r7, #4]
 80220ec:	68db      	ldr	r3, [r3, #12]
 80220ee:	429a      	cmp	r2, r3
 80220f0:	bfb4      	ite	lt
 80220f2:	2301      	movlt	r3, #1
 80220f4:	2300      	movge	r3, #0
 80220f6:	b2db      	uxtb	r3, r3
			if (std::abs(long(duration - TargetDuration))
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	d008      	beq.n	802210e <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xa8>
				StrobeQueue.push(CurrentSeq);
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	f103 0218 	add.w	r2, r3, #24
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	3340      	adds	r3, #64	; 0x40
 8022106:	4619      	mov	r1, r3
 8022108:	4610      	mov	r0, r2
 802210a:	f001 fe8f 	bl	8023e2c <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU.GetSeq();
 802210e:	6838      	ldr	r0, [r7, #0]
 8022110:	f7fe fd80 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 8022114:	4602      	mov	r2, r0
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 802211a:	e007      	b.n	802212c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		}
		case PulseState::Up:
			State = PulseState::Down;
 802211c:	687b      	ldr	r3, [r7, #4]
 802211e:	2201      	movs	r2, #1
 8022120:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 8022122:	687b      	ldr	r3, [r7, #4]
 8022124:	697a      	ldr	r2, [r7, #20]
 8022126:	601a      	str	r2, [r3, #0]
			break;
 8022128:	e000      	b.n	802212c <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
				return;
 802212a:	bf00      	nop
		}
	}
 802212c:	3718      	adds	r7, #24
 802212e:	46bd      	mov	sp, r7
 8022130:	bd80      	pop	{r7, pc}

08022132 <_ZN20StrobeDurationFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 8022132:	b480      	push	{r7}
 8022134:	b083      	sub	sp, #12
 8022136:	af00      	add	r7, sp, #0
 8022138:	6078      	str	r0, [r7, #4]
 802213a:	460b      	mov	r3, r1
 802213c:	70fb      	strb	r3, [r7, #3]
 802213e:	4613      	mov	r3, r2
 8022140:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 8022142:	78fa      	ldrb	r2, [r7, #3]
 8022144:	687b      	ldr	r3, [r7, #4]
 8022146:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 8022148:	78ba      	ldrb	r2, [r7, #2]
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	60da      	str	r2, [r3, #12]
	}
 802214e:	bf00      	nop
 8022150:	370c      	adds	r7, #12
 8022152:	46bd      	mov	sp, r7
 8022154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022158:	4770      	bx	lr

0802215a <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 802215a:	b480      	push	{r7}
 802215c:	b083      	sub	sp, #12
 802215e:	af00      	add	r7, sp, #0
 8022160:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	695b      	ldr	r3, [r3, #20]
 8022166:	ee07 3a90 	vmov	s15, r3
	}
 802216a:	eeb0 0a67 	vmov.f32	s0, s15
 802216e:	370c      	adds	r7, #12
 8022170:	46bd      	mov	sp, r7
 8022172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022176:	4770      	bx	lr

08022178 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>:

	void ResetStrobeDuration() {
 8022178:	b480      	push	{r7}
 802217a:	b083      	sub	sp, #12
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
		StrobeDuration = 1;
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022186:	615a      	str	r2, [r3, #20]
	}
 8022188:	bf00      	nop
 802218a:	370c      	adds	r7, #12
 802218c:	46bd      	mov	sp, r7
 802218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022192:	4770      	bx	lr

08022194 <_ZNK20StrobeDurationFilter9GetStrobeEv>:

	size_t GetStrobe() const {
 8022194:	b580      	push	{r7, lr}
 8022196:	b082      	sub	sp, #8
 8022198:	af00      	add	r7, sp, #0
 802219a:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 802219c:	6878      	ldr	r0, [r7, #4]
 802219e:	f000 f81b 	bl	80221d8 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 80221a2:	4603      	mov	r3, r0
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	d106      	bne.n	80221b6 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x22>
 80221a8:	4b08      	ldr	r3, [pc, #32]	; (80221cc <_ZNK20StrobeDurationFilter9GetStrobeEv+0x38>)
 80221aa:	4a09      	ldr	r2, [pc, #36]	; (80221d0 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x3c>)
 80221ac:	f44f 7123 	mov.w	r1, #652	; 0x28c
 80221b0:	4808      	ldr	r0, [pc, #32]	; (80221d4 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x40>)
 80221b2:	f01d f90f 	bl	803f3d4 <__assert_func>
		return StrobeQueue.front();
 80221b6:	687b      	ldr	r3, [r7, #4]
 80221b8:	3318      	adds	r3, #24
 80221ba:	4618      	mov	r0, r3
 80221bc:	f001 fe44 	bl	8023e48 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 80221c0:	4603      	mov	r3, r0
 80221c2:	681b      	ldr	r3, [r3, #0]
	}
 80221c4:	4618      	mov	r0, r3
 80221c6:	3708      	adds	r7, #8
 80221c8:	46bd      	mov	sp, r7
 80221ca:	bd80      	pop	{r7, pc}
 80221cc:	08040ab0 	.word	0x08040ab0
 80221d0:	08040abc 	.word	0x08040abc
 80221d4:	08040628 	.word	0x08040628

080221d8 <_ZNK20StrobeDurationFilter9HasStrobeEv>:

	bool HasStrobe() const {
 80221d8:	b580      	push	{r7, lr}
 80221da:	b082      	sub	sp, #8
 80221dc:	af00      	add	r7, sp, #0
 80221de:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 80221e0:	687b      	ldr	r3, [r7, #4]
 80221e2:	3318      	adds	r3, #24
 80221e4:	4618      	mov	r0, r3
 80221e6:	f001 fe3c 	bl	8023e62 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 80221ea:	4603      	mov	r3, r0
 80221ec:	f083 0301 	eor.w	r3, r3, #1
 80221f0:	b2db      	uxtb	r3, r3
	}
 80221f2:	4618      	mov	r0, r3
 80221f4:	3708      	adds	r7, #8
 80221f6:	46bd      	mov	sp, r7
 80221f8:	bd80      	pop	{r7, pc}

080221fa <_ZN20StrobeDurationFilter9PopStrobeEv>:

	void PopStrobe() {
 80221fa:	b580      	push	{r7, lr}
 80221fc:	b082      	sub	sp, #8
 80221fe:	af00      	add	r7, sp, #0
 8022200:	6078      	str	r0, [r7, #4]
		StrobeQueue.pop();
 8022202:	687b      	ldr	r3, [r7, #4]
 8022204:	3318      	adds	r3, #24
 8022206:	4618      	mov	r0, r3
 8022208:	f001 fe38 	bl	8023e7c <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
	}
 802220c:	bf00      	nop
 802220e:	3708      	adds	r7, #8
 8022210:	46bd      	mov	sp, r7
 8022212:	bd80      	pop	{r7, pc}

08022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type Reset = 3;
		static constexpr Type SetOffset = 4;
		static constexpr Type StrobeWidth = 5;
		static constexpr Type ConfigureFilter = 6;

		static uint8_t Serialize(Type mode) {
 8022214:	b480      	push	{r7}
 8022216:	b083      	sub	sp, #12
 8022218:	af00      	add	r7, sp, #0
 802221a:	4603      	mov	r3, r0
 802221c:	71fb      	strb	r3, [r7, #7]
			return mode;
 802221e:	79fb      	ldrb	r3, [r7, #7]
		}
 8022220:	4618      	mov	r0, r3
 8022222:	370c      	adds	r7, #12
 8022224:	46bd      	mov	sp, r7
 8022226:	f85d 7b04 	ldr.w	r7, [sp], #4
 802222a:	4770      	bx	lr

0802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 802222c:	b480      	push	{r7}
 802222e:	b083      	sub	sp, #12
 8022230:	af00      	add	r7, sp, #0
 8022232:	4603      	mov	r3, r0
 8022234:	71fb      	strb	r3, [r7, #7]
			return meta;
 8022236:	79fb      	ldrb	r3, [r7, #7]
		}
 8022238:	4618      	mov	r0, r3
 802223a:	370c      	adds	r7, #12
 802223c:	46bd      	mov	sp, r7
 802223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022242:	4770      	bx	lr

08022244 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type BadRequest = 3;
		static constexpr Type BadOffset = 4;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8022244:	b580      	push	{r7, lr}
 8022246:	b08c      	sub	sp, #48	; 0x30
 8022248:	af00      	add	r7, sp, #0
 802224a:	60f8      	str	r0, [r7, #12]
 802224c:	60b9      	str	r1, [r7, #8]
 802224e:	607a      	str	r2, [r7, #4]
 8022250:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	7c1b      	ldrb	r3, [r3, #16]
 8022256:	4618      	mov	r0, r3
 8022258:	f7ff ffe8 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802225c:	4603      	mov	r3, r0
 802225e:	2b00      	cmp	r3, #0
 8022260:	d006      	beq.n	8022270 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2c>
 8022262:	4b2c      	ldr	r3, [pc, #176]	; (8022314 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd0>)
 8022264:	4a2c      	ldr	r2, [pc, #176]	; (8022318 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd4>)
 8022266:	f240 21b9 	movw	r1, #697	; 0x2b9
 802226a:	482c      	ldr	r0, [pc, #176]	; (802231c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xd8>)
 802226c:	f01d f8b2 	bl	803f3d4 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
 8022270:	68f8      	ldr	r0, [r7, #12]
 8022272:	f7ff fab9 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8022276:	68fb      	ldr	r3, [r7, #12]
 8022278:	2201      	movs	r2, #1
 802227a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 802227c:	2000      	movs	r0, #0
 802227e:	f7ff ffc9 	bl	8022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022282:	4603      	mov	r3, r0
 8022284:	461a      	mov	r2, r3
 8022286:	68fb      	ldr	r3, [r7, #12]
 8022288:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 802228a:	68fb      	ldr	r3, [r7, #12]
 802228c:	2111      	movs	r1, #17
 802228e:	4618      	mov	r0, r3
 8022290:	f001 fb5b 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8022294:	687b      	ldr	r3, [r7, #4]
 8022296:	4618      	mov	r0, r3
 8022298:	f001 fadb 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802229c:	4603      	mov	r3, r0
 802229e:	2b02      	cmp	r3, #2
 80222a0:	bf14      	ite	ne
 80222a2:	2301      	movne	r3, #1
 80222a4:	2300      	moveq	r3, #0
 80222a6:	b2db      	uxtb	r3, r3
 80222a8:	2b00      	cmp	r3, #0
 80222aa:	d003      	beq.n	80222b4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x70>
			responce.Error = ErrorCodes::BadRequest;
 80222ac:	68fb      	ldr	r3, [r7, #12]
 80222ae:	2203      	movs	r2, #3
 80222b0:	739a      	strb	r2, [r3, #14]
			return responce;
 80222b2:	e02b      	b.n	802230c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	4618      	mov	r0, r3
 80222b8:	f001 fcdc 	bl	8023c74 <_ZNKSt6vectorIhSaIhEE4dataEv>
 80222bc:	4603      	mov	r3, r0
 80222be:	881b      	ldrh	r3, [r3, #0]
 80222c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 80222c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80222c4:	f107 0218 	add.w	r2, r7, #24
 80222c8:	4619      	mov	r1, r3
 80222ca:	6838      	ldr	r0, [r7, #0]
 80222cc:	f7ff fe64 	bl	8021f98 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 80222d0:	4603      	mov	r3, r0
 80222d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 80222d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80222da:	f083 0301 	eor.w	r3, r3, #1
 80222de:	b2db      	uxtb	r3, r3
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	d003      	beq.n	80222ec <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xa8>
			responce.Error = ErrorCodes::FrameUnavailable;
 80222e4:	68fb      	ldr	r3, [r7, #12]
 80222e6:	2201      	movs	r2, #1
 80222e8:	739a      	strb	r2, [r3, #14]
			return responce;
 80222ea:	e00f      	b.n	802230c <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 80222ec:	68fb      	ldr	r3, [r7, #12]
 80222ee:	4618      	mov	r0, r3
 80222f0:	f001 faa0 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 80222f4:	4601      	mov	r1, r0
 80222f6:	f107 0217 	add.w	r2, r7, #23
 80222fa:	f107 0318 	add.w	r3, r7, #24
 80222fe:	4618      	mov	r0, r3
 8022300:	f7fe fc2a 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 8022304:	68fb      	ldr	r3, [r7, #12]
 8022306:	2200      	movs	r2, #0
 8022308:	739a      	strb	r2, [r3, #14]

		return responce;
 802230a:	bf00      	nop
	}
 802230c:	68f8      	ldr	r0, [r7, #12]
 802230e:	3730      	adds	r7, #48	; 0x30
 8022310:	46bd      	mov	sp, r7
 8022312:	bd80      	pop	{r7, pc}
 8022314:	08040aec 	.word	0x08040aec
 8022318:	08040b34 	.word	0x08040b34
 802231c:	08040628 	.word	0x08040628

08022320 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 8022320:	b580      	push	{r7, lr}
 8022322:	b088      	sub	sp, #32
 8022324:	af00      	add	r7, sp, #0
 8022326:	60f8      	str	r0, [r7, #12]
 8022328:	60b9      	str	r1, [r7, #8]
 802232a:	607a      	str	r2, [r7, #4]
 802232c:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	7c1b      	ldrb	r3, [r3, #16]
 8022332:	4618      	mov	r0, r3
 8022334:	f7ff ff7a 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022338:	4603      	mov	r3, r0
 802233a:	2b01      	cmp	r3, #1
 802233c:	d006      	beq.n	802234c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2c>
 802233e:	4b22      	ldr	r3, [pc, #136]	; (80223c8 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa8>)
 8022340:	4a22      	ldr	r2, [pc, #136]	; (80223cc <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xac>)
 8022342:	f240 21db 	movw	r1, #731	; 0x2db
 8022346:	4822      	ldr	r0, [pc, #136]	; (80223d0 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xb0>)
 8022348:	f01d f844 	bl	803f3d4 <__assert_func>

		Responce responce;
 802234c:	68f8      	ldr	r0, [r7, #12]
 802234e:	f7ff fa4b 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8022352:	68fb      	ldr	r3, [r7, #12]
 8022354:	2201      	movs	r2, #1
 8022356:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 8022358:	2001      	movs	r0, #1
 802235a:	f7ff ff5b 	bl	8022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802235e:	4603      	mov	r3, r0
 8022360:	461a      	mov	r2, r3
 8022362:	68fb      	ldr	r3, [r7, #12]
 8022364:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(IMUFrameContainer::Info::Size);
 8022366:	68fb      	ldr	r3, [r7, #12]
 8022368:	2106      	movs	r1, #6
 802236a:	4618      	mov	r0, r3
 802236c:	f001 faed 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	4618      	mov	r0, r3
 8022374:	f001 fa6d 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022378:	4603      	mov	r3, r0
 802237a:	2b01      	cmp	r3, #1
 802237c:	bf14      	ite	ne
 802237e:	2301      	movne	r3, #1
 8022380:	2300      	moveq	r3, #0
 8022382:	b2db      	uxtb	r3, r3
 8022384:	2b00      	cmp	r3, #0
 8022386:	d003      	beq.n	8022390 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x70>
			responce.Error = ErrorCodes::BadRequest;
 8022388:	68fb      	ldr	r3, [r7, #12]
 802238a:	2203      	movs	r2, #3
 802238c:	739a      	strb	r2, [r3, #14]
			return responce;
 802238e:	e017      	b.n	80223c0 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa0>
		}

		uint8_t *ptr = responce.Data.data();
 8022390:	68fb      	ldr	r3, [r7, #12]
 8022392:	4618      	mov	r0, r3
 8022394:	f001 fa4e 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 8022398:	4603      	mov	r3, r0
 802239a:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 802239c:	f107 0314 	add.w	r3, r7, #20
 80223a0:	6839      	ldr	r1, [r7, #0]
 80223a2:	4618      	mov	r0, r3
 80223a4:	f7ff fe44 	bl	8022030 <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 80223a8:	f107 021c 	add.w	r2, r7, #28
 80223ac:	f107 0314 	add.w	r3, r7, #20
 80223b0:	4611      	mov	r1, r2
 80223b2:	4618      	mov	r0, r3
 80223b4:	f7ff fd66 	bl	8021e84 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 80223b8:	68fb      	ldr	r3, [r7, #12]
 80223ba:	2200      	movs	r2, #0
 80223bc:	739a      	strb	r2, [r3, #14]

		return responce;
 80223be:	bf00      	nop
	}
 80223c0:	68f8      	ldr	r0, [r7, #12]
 80223c2:	3720      	adds	r7, #32
 80223c4:	46bd      	mov	sp, r7
 80223c6:	bd80      	pop	{r7, pc}
 80223c8:	08040b88 	.word	0x08040b88
 80223cc:	08040bc8 	.word	0x08040bc8
 80223d0:	08040628 	.word	0x08040628

080223d4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 80223d4:	b580      	push	{r7, lr}
 80223d6:	b08a      	sub	sp, #40	; 0x28
 80223d8:	af00      	add	r7, sp, #0
 80223da:	60f8      	str	r0, [r7, #12]
 80223dc:	60b9      	str	r1, [r7, #8]
 80223de:	607a      	str	r2, [r7, #4]
 80223e0:	603b      	str	r3, [r7, #0]
		assert(
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	7c1b      	ldrb	r3, [r3, #16]
 80223e6:	4618      	mov	r0, r3
 80223e8:	f7ff ff20 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80223ec:	4603      	mov	r3, r0
 80223ee:	2b02      	cmp	r3, #2
 80223f0:	d006      	beq.n	8022400 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2c>
 80223f2:	4b21      	ldr	r3, [pc, #132]	; (8022478 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa4>)
 80223f4:	4a21      	ldr	r2, [pc, #132]	; (802247c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa8>)
 80223f6:	f240 21f2 	movw	r1, #754	; 0x2f2
 80223fa:	4821      	ldr	r0, [pc, #132]	; (8022480 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xac>)
 80223fc:	f01c ffea 	bl	803f3d4 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
 8022400:	68f8      	ldr	r0, [r7, #12]
 8022402:	f7ff f9f1 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8022406:	68fb      	ldr	r3, [r7, #12]
 8022408:	2201      	movs	r2, #1
 802240a:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 802240c:	2002      	movs	r0, #2
 802240e:	f7ff ff01 	bl	8022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022412:	4603      	mov	r3, r0
 8022414:	461a      	mov	r2, r3
 8022416:	68fb      	ldr	r3, [r7, #12]
 8022418:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(BHYWrapper::BHYFrame::Size);
 802241a:	68fb      	ldr	r3, [r7, #12]
 802241c:	2111      	movs	r1, #17
 802241e:	4618      	mov	r0, r3
 8022420:	f001 fa93 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	4618      	mov	r0, r3
 8022428:	f001 fa13 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802242c:	4603      	mov	r3, r0
 802242e:	2b01      	cmp	r3, #1
 8022430:	bf14      	ite	ne
 8022432:	2301      	movne	r3, #1
 8022434:	2300      	moveq	r3, #0
 8022436:	b2db      	uxtb	r3, r3
 8022438:	2b00      	cmp	r3, #0
 802243a:	d003      	beq.n	8022444 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x70>
			responce.Error = ErrorCodes::BadRequest;
 802243c:	68fb      	ldr	r3, [r7, #12]
 802243e:	2203      	movs	r2, #3
 8022440:	739a      	strb	r2, [r3, #14]
			return responce;
 8022442:	e015      	b.n	8022470 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x9c>
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8022444:	f107 0314 	add.w	r3, r7, #20
 8022448:	6839      	ldr	r1, [r7, #0]
 802244a:	4618      	mov	r0, r3
 802244c:	f7fe fada 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 8022450:	68fb      	ldr	r3, [r7, #12]
 8022452:	4618      	mov	r0, r3
 8022454:	f001 f9ee 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 8022458:	4601      	mov	r1, r0
 802245a:	f107 0213 	add.w	r2, r7, #19
 802245e:	f107 0314 	add.w	r3, r7, #20
 8022462:	4618      	mov	r0, r3
 8022464:	f7fe fb78 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 8022468:	68fb      	ldr	r3, [r7, #12]
 802246a:	2200      	movs	r2, #0
 802246c:	739a      	strb	r2, [r3, #14]

		return responce;
 802246e:	bf00      	nop
	}
 8022470:	68f8      	ldr	r0, [r7, #12]
 8022472:	3728      	adds	r7, #40	; 0x28
 8022474:	46bd      	mov	sp, r7
 8022476:	bd80      	pop	{r7, pc}
 8022478:	08040c18 	.word	0x08040c18
 802247c:	08040c60 	.word	0x08040c60
 8022480:	08040628 	.word	0x08040628

08022484 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>:

	Responce DoReset(const Request &request, IMUFrameContainer &container,
 8022484:	b580      	push	{r7, lr}
 8022486:	b084      	sub	sp, #16
 8022488:	af00      	add	r7, sp, #0
 802248a:	60f8      	str	r0, [r7, #12]
 802248c:	60b9      	str	r1, [r7, #8]
 802248e:	607a      	str	r2, [r7, #4]
 8022490:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	7c1b      	ldrb	r3, [r3, #16]
 8022496:	4618      	mov	r0, r3
 8022498:	f7ff fec8 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802249c:	4603      	mov	r3, r0
 802249e:	2b03      	cmp	r3, #3
 80224a0:	d006      	beq.n	80224b0 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x2c>
 80224a2:	4b1b      	ldr	r3, [pc, #108]	; (8022510 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x8c>)
 80224a4:	4a1b      	ldr	r2, [pc, #108]	; (8022514 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x90>)
 80224a6:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80224aa:	481b      	ldr	r0, [pc, #108]	; (8022518 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x94>)
 80224ac:	f01c ff92 	bl	803f3d4 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
 80224b0:	68f8      	ldr	r0, [r7, #12]
 80224b2:	f7ff f999 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 80224b6:	68fb      	ldr	r3, [r7, #12]
 80224b8:	2201      	movs	r2, #1
 80224ba:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 80224bc:	2003      	movs	r0, #3
 80224be:	f7ff fea9 	bl	8022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80224c2:	4603      	mov	r3, r0
 80224c4:	461a      	mov	r2, r3
 80224c6:	68fb      	ldr	r3, [r7, #12]
 80224c8:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	2101      	movs	r1, #1
 80224ce:	4618      	mov	r0, r3
 80224d0:	f001 fa3b 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	4618      	mov	r0, r3
 80224d8:	f001 f9bb 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80224dc:	4603      	mov	r3, r0
 80224de:	2b01      	cmp	r3, #1
 80224e0:	bf14      	ite	ne
 80224e2:	2301      	movne	r3, #1
 80224e4:	2300      	moveq	r3, #0
 80224e6:	b2db      	uxtb	r3, r3
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	d003      	beq.n	80224f4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x70>
			responce.Error = ErrorCodes::BadRequest;
 80224ec:	68fb      	ldr	r3, [r7, #12]
 80224ee:	2203      	movs	r2, #3
 80224f0:	739a      	strb	r2, [r3, #14]
			return responce;
 80224f2:	e009      	b.n	8022508 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x84>
		}

		container.Reset();
 80224f4:	6838      	ldr	r0, [r7, #0]
 80224f6:	f7ff fd09 	bl	8021f0c <_ZN17IMUFrameContainer5ResetEv>
		sFilter.ResetStrobeDuration();
 80224fa:	69b8      	ldr	r0, [r7, #24]
 80224fc:	f7ff fe3c 	bl	8022178 <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>

		responce.Error = ErrorCodes::Success;
 8022500:	68fb      	ldr	r3, [r7, #12]
 8022502:	2200      	movs	r2, #0
 8022504:	739a      	strb	r2, [r3, #14]

		return responce;
 8022506:	bf00      	nop
	}
 8022508:	68f8      	ldr	r0, [r7, #12]
 802250a:	3710      	adds	r7, #16
 802250c:	46bd      	mov	sp, r7
 802250e:	bd80      	pop	{r7, pc}
 8022510:	08040cb0 	.word	0x08040cb0
 8022514:	08040cf4 	.word	0x08040cf4
 8022518:	08040628 	.word	0x08040628

0802251c <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>:

	Responce SetOffset(const Request &request, size_t &strobeOffset) {
 802251c:	b580      	push	{r7, lr}
 802251e:	b086      	sub	sp, #24
 8022520:	af00      	add	r7, sp, #0
 8022522:	60f8      	str	r0, [r7, #12]
 8022524:	60b9      	str	r1, [r7, #8]
 8022526:	607a      	str	r2, [r7, #4]
 8022528:	603b      	str	r3, [r7, #0]
		assert(
 802252a:	687b      	ldr	r3, [r7, #4]
 802252c:	7c1b      	ldrb	r3, [r3, #16]
 802252e:	4618      	mov	r0, r3
 8022530:	f7ff fe7c 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022534:	4603      	mov	r3, r0
 8022536:	2b04      	cmp	r3, #4
 8022538:	d006      	beq.n	8022548 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x2c>
 802253a:	4b1e      	ldr	r3, [pc, #120]	; (80225b4 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x98>)
 802253c:	4a1e      	ldr	r2, [pc, #120]	; (80225b8 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x9c>)
 802253e:	f240 3123 	movw	r1, #803	; 0x323
 8022542:	481e      	ldr	r0, [pc, #120]	; (80225bc <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0xa0>)
 8022544:	f01c ff46 	bl	803f3d4 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::SetOffset);

		Responce responce;
 8022548:	68f8      	ldr	r0, [r7, #12]
 802254a:	f7ff f94d 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 802254e:	68fb      	ldr	r3, [r7, #12]
 8022550:	2201      	movs	r2, #1
 8022552:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::SetOffset);
 8022554:	2004      	movs	r0, #4
 8022556:	f7ff fe5d 	bl	8022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802255a:	4603      	mov	r3, r0
 802255c:	461a      	mov	r2, r3
 802255e:	68fb      	ldr	r3, [r7, #12]
 8022560:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 8022562:	68fb      	ldr	r3, [r7, #12]
 8022564:	2101      	movs	r1, #1
 8022566:	4618      	mov	r0, r3
 8022568:	f001 f9ef 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	4618      	mov	r0, r3
 8022570:	f001 f96f 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022574:	4603      	mov	r3, r0
 8022576:	2b01      	cmp	r3, #1
 8022578:	bf14      	ite	ne
 802257a:	2301      	movne	r3, #1
 802257c:	2300      	moveq	r3, #0
 802257e:	b2db      	uxtb	r3, r3
 8022580:	2b00      	cmp	r3, #0
 8022582:	d003      	beq.n	802258c <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x70>
			responce.Error = ErrorCodes::BadRequest;
 8022584:	68fb      	ldr	r3, [r7, #12]
 8022586:	2203      	movs	r2, #3
 8022588:	739a      	strb	r2, [r3, #14]
			return responce;
 802258a:	e00e      	b.n	80225aa <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x8e>
		}

		uint8_t newOffset = request.Data[0];
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	2100      	movs	r1, #0
 8022590:	4618      	mov	r0, r3
 8022592:	f001 fb32 	bl	8023bfa <_ZNKSt6vectorIhSaIhEEixEj>
 8022596:	4603      	mov	r3, r0
 8022598:	781b      	ldrb	r3, [r3, #0]
 802259a:	75fb      	strb	r3, [r7, #23]

		strobeOffset = newOffset;
 802259c:	7dfa      	ldrb	r2, [r7, #23]
 802259e:	683b      	ldr	r3, [r7, #0]
 80225a0:	601a      	str	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 80225a2:	68fb      	ldr	r3, [r7, #12]
 80225a4:	2200      	movs	r2, #0
 80225a6:	739a      	strb	r2, [r3, #14]

		return responce;
 80225a8:	bf00      	nop
	}
 80225aa:	68f8      	ldr	r0, [r7, #12]
 80225ac:	3718      	adds	r7, #24
 80225ae:	46bd      	mov	sp, r7
 80225b0:	bd80      	pop	{r7, pc}
 80225b2:	bf00      	nop
 80225b4:	08040d54 	.word	0x08040d54
 80225b8:	08040d9c 	.word	0x08040d9c
 80225bc:	08040628 	.word	0x08040628

080225c0 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>:

	Responce ConfigureFilter(const Request &request,
 80225c0:	b580      	push	{r7, lr}
 80225c2:	b086      	sub	sp, #24
 80225c4:	af00      	add	r7, sp, #0
 80225c6:	60f8      	str	r0, [r7, #12]
 80225c8:	60b9      	str	r1, [r7, #8]
 80225ca:	607a      	str	r2, [r7, #4]
 80225cc:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	7c1b      	ldrb	r3, [r3, #16]
 80225d2:	4618      	mov	r0, r3
 80225d4:	f7ff fe2a 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80225d8:	4603      	mov	r3, r0
 80225da:	2b06      	cmp	r3, #6
 80225dc:	d006      	beq.n	80225ec <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x2c>
 80225de:	4b23      	ldr	r3, [pc, #140]	; (802266c <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xac>)
 80225e0:	4a23      	ldr	r2, [pc, #140]	; (8022670 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xb0>)
 80225e2:	f240 313b 	movw	r1, #827	; 0x33b
 80225e6:	4823      	ldr	r0, [pc, #140]	; (8022674 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xb4>)
 80225e8:	f01c fef4 	bl	803f3d4 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::ConfigureFilter);

		Responce responce;
 80225ec:	68f8      	ldr	r0, [r7, #12]
 80225ee:	f7ff f8fb 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 80225f2:	68fb      	ldr	r3, [r7, #12]
 80225f4:	2201      	movs	r2, #1
 80225f6:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(
 80225f8:	2006      	movs	r0, #6
 80225fa:	f7ff fe0b 	bl	8022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80225fe:	4603      	mov	r3, r0
 8022600:	461a      	mov	r2, r3
 8022602:	68fb      	ldr	r3, [r7, #12]
 8022604:	735a      	strb	r2, [r3, #13]
				RequestMode::ConfigureFilter);
		responce.Data.resize(1);
 8022606:	68fb      	ldr	r3, [r7, #12]
 8022608:	2101      	movs	r1, #1
 802260a:	4618      	mov	r0, r3
 802260c:	f001 f99d 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 2) {
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	4618      	mov	r0, r3
 8022614:	f001 f91d 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8022618:	4603      	mov	r3, r0
 802261a:	2b02      	cmp	r3, #2
 802261c:	bf14      	ite	ne
 802261e:	2301      	movne	r3, #1
 8022620:	2300      	moveq	r3, #0
 8022622:	b2db      	uxtb	r3, r3
 8022624:	2b00      	cmp	r3, #0
 8022626:	d003      	beq.n	8022630 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x70>
			responce.Error = ErrorCodes::BadRequest;
 8022628:	68fb      	ldr	r3, [r7, #12]
 802262a:	2203      	movs	r2, #3
 802262c:	739a      	strb	r2, [r3, #14]
			return responce;
 802262e:	e019      	b.n	8022664 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa4>
		}

		uint8_t targetDuration = request.Data[0];
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	2100      	movs	r1, #0
 8022634:	4618      	mov	r0, r3
 8022636:	f001 fae0 	bl	8023bfa <_ZNKSt6vectorIhSaIhEEixEj>
 802263a:	4603      	mov	r3, r0
 802263c:	781b      	ldrb	r3, [r3, #0]
 802263e:	75fb      	strb	r3, [r7, #23]
		uint8_t durationThreshold = request.Data[1];
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	2101      	movs	r1, #1
 8022644:	4618      	mov	r0, r3
 8022646:	f001 fad8 	bl	8023bfa <_ZNKSt6vectorIhSaIhEEixEj>
 802264a:	4603      	mov	r3, r0
 802264c:	781b      	ldrb	r3, [r3, #0]
 802264e:	75bb      	strb	r3, [r7, #22]

		sFilter.Configure(targetDuration, durationThreshold);
 8022650:	7dba      	ldrb	r2, [r7, #22]
 8022652:	7dfb      	ldrb	r3, [r7, #23]
 8022654:	4619      	mov	r1, r3
 8022656:	6838      	ldr	r0, [r7, #0]
 8022658:	f7ff fd6b 	bl	8022132 <_ZN20StrobeDurationFilter9ConfigureEhh>
		responce.Error = ErrorCodes::Success;
 802265c:	68fb      	ldr	r3, [r7, #12]
 802265e:	2200      	movs	r2, #0
 8022660:	739a      	strb	r2, [r3, #14]

		return responce;
 8022662:	bf00      	nop
	}
 8022664:	68f8      	ldr	r0, [r7, #12]
 8022666:	3718      	adds	r7, #24
 8022668:	46bd      	mov	sp, r7
 802266a:	bd80      	pop	{r7, pc}
 802266c:	08040ddc 	.word	0x08040ddc
 8022670:	08040e28 	.word	0x08040e28
 8022674:	08040628 	.word	0x08040628

08022678 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>:

	Responce StrobeWidth(const Request &request,
 8022678:	b580      	push	{r7, lr}
 802267a:	b088      	sub	sp, #32
 802267c:	af00      	add	r7, sp, #0
 802267e:	6178      	str	r0, [r7, #20]
 8022680:	6139      	str	r1, [r7, #16]
 8022682:	60fa      	str	r2, [r7, #12]
 8022684:	60bb      	str	r3, [r7, #8]
			const StrobeDurationFilter &sFilter) {
		assert(
 8022686:	68fb      	ldr	r3, [r7, #12]
 8022688:	7c1b      	ldrb	r3, [r3, #16]
 802268a:	4618      	mov	r0, r3
 802268c:	f7ff fdce 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022690:	4603      	mov	r3, r0
 8022692:	2b05      	cmp	r3, #5
 8022694:	d006      	beq.n	80226a4 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x2c>
 8022696:	4b2d      	ldr	r3, [pc, #180]	; (802274c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd4>)
 8022698:	4a2d      	ldr	r2, [pc, #180]	; (8022750 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd8>)
 802269a:	f240 3155 	movw	r1, #853	; 0x355
 802269e:	482d      	ldr	r0, [pc, #180]	; (8022754 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xdc>)
 80226a0:	f01c fe98 	bl	803f3d4 <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::StrobeWidth);

		Responce responce;
 80226a4:	6978      	ldr	r0, [r7, #20]
 80226a6:	f7ff f89f 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 80226aa:	697b      	ldr	r3, [r7, #20]
 80226ac:	2201      	movs	r2, #1
 80226ae:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(RequestMode::StrobeWidth);
 80226b0:	2005      	movs	r0, #5
 80226b2:	f7ff fdaf 	bl	8022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80226b6:	4603      	mov	r3, r0
 80226b8:	461a      	mov	r2, r3
 80226ba:	697b      	ldr	r3, [r7, #20]
 80226bc:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(1);
 80226be:	697b      	ldr	r3, [r7, #20]
 80226c0:	2101      	movs	r1, #1
 80226c2:	4618      	mov	r0, r3
 80226c4:	f001 f941 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		if (request.Data.size() != 1) {
 80226c8:	68fb      	ldr	r3, [r7, #12]
 80226ca:	4618      	mov	r0, r3
 80226cc:	f001 f8c1 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80226d0:	4603      	mov	r3, r0
 80226d2:	2b01      	cmp	r3, #1
 80226d4:	bf14      	ite	ne
 80226d6:	2301      	movne	r3, #1
 80226d8:	2300      	moveq	r3, #0
 80226da:	b2db      	uxtb	r3, r3
 80226dc:	2b00      	cmp	r3, #0
 80226de:	d003      	beq.n	80226e8 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x70>
			responce.Error = ErrorCodes::BadRequest;
 80226e0:	697b      	ldr	r3, [r7, #20]
 80226e2:	2203      	movs	r2, #3
 80226e4:	739a      	strb	r2, [r3, #14]
			return responce;
 80226e6:	e02c      	b.n	8022742 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xca>
		}

		float strobeWidth = sFilter.GetStrobeDuration();
 80226e8:	68b8      	ldr	r0, [r7, #8]
 80226ea:	f7ff fd36 	bl	802215a <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>
 80226ee:	ed87 0a07 	vstr	s0, [r7, #28]

		if (strobeWidth < 0)
 80226f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80226f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80226fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226fe:	d502      	bpl.n	8022706 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x8e>
			strobeWidth = 0;
 8022700:	f04f 0300 	mov.w	r3, #0
 8022704:	61fb      	str	r3, [r7, #28]
		if (strobeWidth > 255)
 8022706:	edd7 7a07 	vldr	s15, [r7, #28]
 802270a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8022758 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xe0>
 802270e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022716:	dd01      	ble.n	802271c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xa4>
			strobeWidth = 255;
 8022718:	4b10      	ldr	r3, [pc, #64]	; (802275c <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xe4>)
 802271a:	61fb      	str	r3, [r7, #28]

		responce.Data[0] = static_cast<uint8_t>(strobeWidth);
 802271c:	697b      	ldr	r3, [r7, #20]
 802271e:	2100      	movs	r1, #0
 8022720:	4618      	mov	r0, r3
 8022722:	f001 fbb7 	bl	8023e94 <_ZNSt6vectorIhSaIhEEixEj>
 8022726:	4603      	mov	r3, r0
 8022728:	edd7 7a07 	vldr	s15, [r7, #28]
 802272c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022730:	edc7 7a01 	vstr	s15, [r7, #4]
 8022734:	793a      	ldrb	r2, [r7, #4]
 8022736:	b2d2      	uxtb	r2, r2
 8022738:	701a      	strb	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 802273a:	697b      	ldr	r3, [r7, #20]
 802273c:	2200      	movs	r2, #0
 802273e:	739a      	strb	r2, [r3, #14]

		return responce;
 8022740:	bf00      	nop
	}
 8022742:	6978      	ldr	r0, [r7, #20]
 8022744:	3720      	adds	r7, #32
 8022746:	46bd      	mov	sp, r7
 8022748:	bd80      	pop	{r7, pc}
 802274a:	bf00      	nop
 802274c:	08040e7c 	.word	0x08040e7c
 8022750:	08040ec4 	.word	0x08040ec4
 8022754:	08040628 	.word	0x08040628
 8022758:	437f0000 	.word	0x437f0000
 802275c:	437f0000 	.word	0x437f0000

08022760 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>:

	Responce UnknownModeResponce(const Request &request) {
 8022760:	b580      	push	{r7, lr}
 8022762:	b084      	sub	sp, #16
 8022764:	af00      	add	r7, sp, #0
 8022766:	60f8      	str	r0, [r7, #12]
 8022768:	60b9      	str	r1, [r7, #8]
 802276a:	607a      	str	r2, [r7, #4]
		Responce responce;
 802276c:	68f8      	ldr	r0, [r7, #12]
 802276e:	f7ff f83b 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 8022772:	68fb      	ldr	r3, [r7, #12]
 8022774:	2201      	movs	r2, #1
 8022776:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = RequestMode::Serialize(
				RequestMode::Deserialize(request.MetaInfo));
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	7c1b      	ldrb	r3, [r3, #16]
		responce.MetaInfo = RequestMode::Serialize(
 802277c:	4618      	mov	r0, r3
 802277e:	f7ff fd55 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022782:	4603      	mov	r3, r0
 8022784:	4618      	mov	r0, r3
 8022786:	f7ff fd45 	bl	8022214 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802278a:	4603      	mov	r3, r0
 802278c:	461a      	mov	r2, r3
 802278e:	68fb      	ldr	r3, [r7, #12]
 8022790:	735a      	strb	r2, [r3, #13]
		responce.Data.resize(request.ResponceSize);
 8022792:	68fa      	ldr	r2, [r7, #12]
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	68db      	ldr	r3, [r3, #12]
 8022798:	4619      	mov	r1, r3
 802279a:	4610      	mov	r0, r2
 802279c:	f001 f8d5 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>
		responce.Error = ErrorCodes::UnknownMode;
 80227a0:	68fb      	ldr	r3, [r7, #12]
 80227a2:	2202      	movs	r2, #2
 80227a4:	739a      	strb	r2, [r3, #14]
		return responce;
 80227a6:	bf00      	nop
	}
 80227a8:	68f8      	ldr	r0, [r7, #12]
 80227aa:	3710      	adds	r7, #16
 80227ac:	46bd      	mov	sp, r7
 80227ae:	bd80      	pop	{r7, pc}

080227b0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 80227b0:	b580      	push	{r7, lr}
 80227b2:	b086      	sub	sp, #24
 80227b4:	af02      	add	r7, sp, #8
 80227b6:	60f8      	str	r0, [r7, #12]
 80227b8:	60b9      	str	r1, [r7, #8]
 80227ba:	607a      	str	r2, [r7, #4]
 80227bc:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU, size_t &strobeOffset,
			StrobeDurationFilter &sFilter) {
		assert(request.PeripheryID == Periphery::Imu);
 80227be:	687b      	ldr	r3, [r7, #4]
 80227c0:	7c5b      	ldrb	r3, [r3, #17]
 80227c2:	2b01      	cmp	r3, #1
 80227c4:	d006      	beq.n	80227d4 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x24>
 80227c6:	4b2f      	ldr	r3, [pc, #188]	; (8022884 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd4>)
 80227c8:	4a2f      	ldr	r2, [pc, #188]	; (8022888 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd8>)
 80227ca:	f240 317e 	movw	r1, #894	; 0x37e
 80227ce:	482f      	ldr	r0, [pc, #188]	; (802288c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xdc>)
 80227d0:	f01c fe00 	bl	803f3d4 <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	7c1b      	ldrb	r3, [r3, #16]
 80227d8:	4618      	mov	r0, r3
 80227da:	f7ff fd27 	bl	802222c <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80227de:	4603      	mov	r3, r0
 80227e0:	2b06      	cmp	r3, #6
 80227e2:	d844      	bhi.n	802286e <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xbe>
 80227e4:	a201      	add	r2, pc, #4	; (adr r2, 80227ec <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x3c>)
 80227e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80227ea:	bf00      	nop
 80227ec:	08022809 	.word	0x08022809
 80227f0:	08022817 	.word	0x08022817
 80227f4:	08022825 	.word	0x08022825
 80227f8:	08022833 	.word	0x08022833
 80227fc:	08022845 	.word	0x08022845
 8022800:	08022853 	.word	0x08022853
 8022804:	08022861 	.word	0x08022861
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8022808:	68f8      	ldr	r0, [r7, #12]
 802280a:	683b      	ldr	r3, [r7, #0]
 802280c:	687a      	ldr	r2, [r7, #4]
 802280e:	68b9      	ldr	r1, [r7, #8]
 8022810:	f7ff fd18 	bl	8022244 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 8022814:	e031      	b.n	802287a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::Info:
			return GetInfo(request, container);
 8022816:	68f8      	ldr	r0, [r7, #12]
 8022818:	683b      	ldr	r3, [r7, #0]
 802281a:	687a      	ldr	r2, [r7, #4]
 802281c:	68b9      	ldr	r1, [r7, #8]
 802281e:	f7ff fd7f 	bl	8022320 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 8022822:	e02a      	b.n	802287a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 8022824:	68f8      	ldr	r0, [r7, #12]
 8022826:	69bb      	ldr	r3, [r7, #24]
 8022828:	687a      	ldr	r2, [r7, #4]
 802282a:	68b9      	ldr	r1, [r7, #8]
 802282c:	f7ff fdd2 	bl	80223d4 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 8022830:	e023      	b.n	802287a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::Reset:
			return DoReset(request, container, sFilter);
 8022832:	68f8      	ldr	r0, [r7, #12]
 8022834:	6a3b      	ldr	r3, [r7, #32]
 8022836:	9300      	str	r3, [sp, #0]
 8022838:	683b      	ldr	r3, [r7, #0]
 802283a:	687a      	ldr	r2, [r7, #4]
 802283c:	68b9      	ldr	r1, [r7, #8]
 802283e:	f7ff fe21 	bl	8022484 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>
 8022842:	e01a      	b.n	802287a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::SetOffset:
			return SetOffset(request, strobeOffset);
 8022844:	68f8      	ldr	r0, [r7, #12]
 8022846:	69fb      	ldr	r3, [r7, #28]
 8022848:	687a      	ldr	r2, [r7, #4]
 802284a:	68b9      	ldr	r1, [r7, #8]
 802284c:	f7ff fe66 	bl	802251c <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>
 8022850:	e013      	b.n	802287a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::StrobeWidth:
			return StrobeWidth(request, sFilter);
 8022852:	68f8      	ldr	r0, [r7, #12]
 8022854:	6a3b      	ldr	r3, [r7, #32]
 8022856:	687a      	ldr	r2, [r7, #4]
 8022858:	68b9      	ldr	r1, [r7, #8]
 802285a:	f7ff ff0d 	bl	8022678 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>
 802285e:	e00c      	b.n	802287a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		case RequestMode::ConfigureFilter:
			return ConfigureFilter(request, sFilter);
 8022860:	68f8      	ldr	r0, [r7, #12]
 8022862:	6a3b      	ldr	r3, [r7, #32]
 8022864:	687a      	ldr	r2, [r7, #4]
 8022866:	68b9      	ldr	r1, [r7, #8]
 8022868:	f7ff feaa 	bl	80225c0 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>
 802286c:	e005      	b.n	802287a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xca>
		default:
			return UnknownModeResponce(request);
 802286e:	68fb      	ldr	r3, [r7, #12]
 8022870:	687a      	ldr	r2, [r7, #4]
 8022872:	68b9      	ldr	r1, [r7, #8]
 8022874:	4618      	mov	r0, r3
 8022876:	f7ff ff73 	bl	8022760 <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>
		}
	}
 802287a:	68f8      	ldr	r0, [r7, #12]
 802287c:	3710      	adds	r7, #16
 802287e:	46bd      	mov	sp, r7
 8022880:	bd80      	pop	{r7, pc}
 8022882:	bf00      	nop
 8022884:	08040f1c 	.word	0x08040f1c
 8022888:	08040f44 	.word	0x08040f44
 802288c:	08040628 	.word	0x08040628

08022890 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>:
	std::deque<BHYWrapper::BHYFrame> Queue;
	size_t MaxSize = 800 / 5;
	size_t FirstSeq = 0;

public:
	void Add(const BHYWrapper::BHYFrame &frame, size_t seq) {
 8022890:	b580      	push	{r7, lr}
 8022892:	b084      	sub	sp, #16
 8022894:	af00      	add	r7, sp, #0
 8022896:	60f8      	str	r0, [r7, #12]
 8022898:	60b9      	str	r1, [r7, #8]
 802289a:	607a      	str	r2, [r7, #4]
		if (Queue.empty()) {
 802289c:	68fb      	ldr	r3, [r7, #12]
 802289e:	4618      	mov	r0, r3
 80228a0:	f001 faa1 	bl	8023de6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 80228a4:	4603      	mov	r3, r0
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d002      	beq.n	80228b0 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x20>
			FirstSeq = seq;
 80228aa:	68fb      	ldr	r3, [r7, #12]
 80228ac:	687a      	ldr	r2, [r7, #4]
 80228ae:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		Queue.push_front(frame);
 80228b0:	68fb      	ldr	r3, [r7, #12]
 80228b2:	68b9      	ldr	r1, [r7, #8]
 80228b4:	4618      	mov	r0, r3
 80228b6:	f001 fa3f 	bl	8023d38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>

		if (Queue.size() > MaxSize) {
 80228ba:	68fb      	ldr	r3, [r7, #12]
 80228bc:	4618      	mov	r0, r3
 80228be:	f001 fa5d 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80228c2:	4602      	mov	r2, r0
 80228c4:	68fb      	ldr	r3, [r7, #12]
 80228c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80228c8:	429a      	cmp	r2, r3
 80228ca:	bf8c      	ite	hi
 80228cc:	2301      	movhi	r3, #1
 80228ce:	2300      	movls	r3, #0
 80228d0:	b2db      	uxtb	r3, r3
 80228d2:	2b00      	cmp	r3, #0
 80228d4:	d008      	beq.n	80228e8 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x58>
			Queue.pop_back();
 80228d6:	68fb      	ldr	r3, [r7, #12]
 80228d8:	4618      	mov	r0, r3
 80228da:	f001 fa61 	bl	8023da0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
			FirstSeq++;
 80228de:	68fb      	ldr	r3, [r7, #12]
 80228e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80228e2:	1c5a      	adds	r2, r3, #1
 80228e4:	68fb      	ldr	r3, [r7, #12]
 80228e6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
 80228e8:	bf00      	nop
 80228ea:	3710      	adds	r7, #16
 80228ec:	46bd      	mov	sp, r7
 80228ee:	bd80      	pop	{r7, pc}

080228f0 <_ZNK12IMUFrameMemo3HasEj>:

	bool Has(size_t seq) const {
 80228f0:	b590      	push	{r4, r7, lr}
 80228f2:	b083      	sub	sp, #12
 80228f4:	af00      	add	r7, sp, #0
 80228f6:	6078      	str	r0, [r7, #4]
 80228f8:	6039      	str	r1, [r7, #0]
		if (Queue.empty())
 80228fa:	687b      	ldr	r3, [r7, #4]
 80228fc:	4618      	mov	r0, r3
 80228fe:	f001 fa72 	bl	8023de6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022902:	4603      	mov	r3, r0
 8022904:	2b00      	cmp	r3, #0
 8022906:	d001      	beq.n	802290c <_ZNK12IMUFrameMemo3HasEj+0x1c>
			return false;
 8022908:	2300      	movs	r3, #0
 802290a:	e012      	b.n	8022932 <_ZNK12IMUFrameMemo3HasEj+0x42>

		if (seq < FirstSeq + Queue.size())
 802290c:	687b      	ldr	r3, [r7, #4]
 802290e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	4618      	mov	r0, r3
 8022914:	f001 fa32 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022918:	4603      	mov	r3, r0
 802291a:	4423      	add	r3, r4
 802291c:	683a      	ldr	r2, [r7, #0]
 802291e:	429a      	cmp	r2, r3
 8022920:	bf34      	ite	cc
 8022922:	2301      	movcc	r3, #1
 8022924:	2300      	movcs	r3, #0
 8022926:	b2db      	uxtb	r3, r3
 8022928:	2b00      	cmp	r3, #0
 802292a:	d001      	beq.n	8022930 <_ZNK12IMUFrameMemo3HasEj+0x40>
			return true;
 802292c:	2301      	movs	r3, #1
 802292e:	e000      	b.n	8022932 <_ZNK12IMUFrameMemo3HasEj+0x42>

		return false;
 8022930:	2300      	movs	r3, #0
	}
 8022932:	4618      	mov	r0, r3
 8022934:	370c      	adds	r7, #12
 8022936:	46bd      	mov	sp, r7
 8022938:	bd90      	pop	{r4, r7, pc}
	...

0802293c <_ZNK12IMUFrameMemo3GetEj>:

	BHYWrapper::BHYFrame Get(size_t seq) const {
 802293c:	b5b0      	push	{r4, r5, r7, lr}
 802293e:	b084      	sub	sp, #16
 8022940:	af00      	add	r7, sp, #0
 8022942:	60f8      	str	r0, [r7, #12]
 8022944:	60b9      	str	r1, [r7, #8]
 8022946:	607a      	str	r2, [r7, #4]
		assert(Has(seq));
 8022948:	6879      	ldr	r1, [r7, #4]
 802294a:	68b8      	ldr	r0, [r7, #8]
 802294c:	f7ff ffd0 	bl	80228f0 <_ZNK12IMUFrameMemo3HasEj>
 8022950:	4603      	mov	r3, r0
 8022952:	2b00      	cmp	r3, #0
 8022954:	d106      	bne.n	8022964 <_ZNK12IMUFrameMemo3GetEj+0x28>
 8022956:	4b1a      	ldr	r3, [pc, #104]	; (80229c0 <_ZNK12IMUFrameMemo3GetEj+0x84>)
 8022958:	4a1a      	ldr	r2, [pc, #104]	; (80229c4 <_ZNK12IMUFrameMemo3GetEj+0x88>)
 802295a:	f240 31b3 	movw	r1, #947	; 0x3b3
 802295e:	481a      	ldr	r0, [pc, #104]	; (80229c8 <_ZNK12IMUFrameMemo3GetEj+0x8c>)
 8022960:	f01c fd38 	bl	803f3d4 <__assert_func>

		if (seq < FirstSeq) {
 8022964:	68bb      	ldr	r3, [r7, #8]
 8022966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022968:	687a      	ldr	r2, [r7, #4]
 802296a:	429a      	cmp	r2, r3
 802296c:	d20c      	bcs.n	8022988 <_ZNK12IMUFrameMemo3GetEj+0x4c>
			return Queue.front();
 802296e:	68bb      	ldr	r3, [r7, #8]
 8022970:	4618      	mov	r0, r3
 8022972:	f001 fa9e 	bl	8023eb2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>
 8022976:	4602      	mov	r2, r0
 8022978:	68fb      	ldr	r3, [r7, #12]
 802297a:	461c      	mov	r4, r3
 802297c:	4615      	mov	r5, r2
 802297e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022982:	682b      	ldr	r3, [r5, #0]
 8022984:	6023      	str	r3, [r4, #0]
 8022986:	e017      	b.n	80229b8 <_ZNK12IMUFrameMemo3GetEj+0x7c>
		}

		return Queue[(Queue.size() - 1) - (seq - FirstSeq)];
 8022988:	68bc      	ldr	r4, [r7, #8]
 802298a:	68bb      	ldr	r3, [r7, #8]
 802298c:	4618      	mov	r0, r3
 802298e:	f001 f9f5 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022992:	4601      	mov	r1, r0
 8022994:	68bb      	ldr	r3, [r7, #8]
 8022996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	1ad3      	subs	r3, r2, r3
 802299c:	440b      	add	r3, r1
 802299e:	3b01      	subs	r3, #1
 80229a0:	4619      	mov	r1, r3
 80229a2:	4620      	mov	r0, r4
 80229a4:	f001 fa31 	bl	8023e0a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 80229a8:	4602      	mov	r2, r0
 80229aa:	68fb      	ldr	r3, [r7, #12]
 80229ac:	461c      	mov	r4, r3
 80229ae:	4615      	mov	r5, r2
 80229b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80229b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80229b4:	682b      	ldr	r3, [r5, #0]
 80229b6:	6023      	str	r3, [r4, #0]
	}
 80229b8:	68f8      	ldr	r0, [r7, #12]
 80229ba:	3710      	adds	r7, #16
 80229bc:	46bd      	mov	sp, r7
 80229be:	bdb0      	pop	{r4, r5, r7, pc}
 80229c0:	08040fc0 	.word	0x08040fc0
 80229c4:	08040fcc 	.word	0x08040fcc
 80229c8:	08040628 	.word	0x08040628

080229cc <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 80229cc:	b580      	push	{r7, lr}
 80229ce:	b082      	sub	sp, #8
 80229d0:	af00      	add	r7, sp, #0
 80229d2:	6078      	str	r0, [r7, #4]
 80229d4:	6039      	str	r1, [r7, #0]
			assert(ptr);
 80229d6:	683b      	ldr	r3, [r7, #0]
 80229d8:	2b00      	cmp	r3, #0
 80229da:	d106      	bne.n	80229ea <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 80229dc:	4b14      	ldr	r3, [pc, #80]	; (8022a30 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 80229de:	4a15      	ldr	r2, [pc, #84]	; (8022a34 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 80229e0:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 80229e4:	4814      	ldr	r0, [pc, #80]	; (8022a38 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 80229e6:	f01c fcf5 	bl	803f3d4 <__assert_func>
			assert(*ptr);
 80229ea:	683b      	ldr	r3, [r7, #0]
 80229ec:	681b      	ldr	r3, [r3, #0]
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d106      	bne.n	8022a00 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 80229f2:	4b12      	ldr	r3, [pc, #72]	; (8022a3c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 80229f4:	4a0f      	ldr	r2, [pc, #60]	; (8022a34 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 80229f6:	f240 31c5 	movw	r1, #965	; 0x3c5
 80229fa:	480f      	ldr	r0, [pc, #60]	; (8022a38 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 80229fc:	f01c fcea 	bl	803f3d4 <__assert_func>

			**ptr = Major;
 8022a00:	683b      	ldr	r3, [r7, #0]
 8022a02:	681b      	ldr	r3, [r3, #0]
 8022a04:	687a      	ldr	r2, [r7, #4]
 8022a06:	7812      	ldrb	r2, [r2, #0]
 8022a08:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022a0a:	683b      	ldr	r3, [r7, #0]
 8022a0c:	681b      	ldr	r3, [r3, #0]
 8022a0e:	1c5a      	adds	r2, r3, #1
 8022a10:	683b      	ldr	r3, [r7, #0]
 8022a12:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 8022a14:	683b      	ldr	r3, [r7, #0]
 8022a16:	681b      	ldr	r3, [r3, #0]
 8022a18:	687a      	ldr	r2, [r7, #4]
 8022a1a:	7852      	ldrb	r2, [r2, #1]
 8022a1c:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022a1e:	683b      	ldr	r3, [r7, #0]
 8022a20:	681b      	ldr	r3, [r3, #0]
 8022a22:	1c5a      	adds	r2, r3, #1
 8022a24:	683b      	ldr	r3, [r7, #0]
 8022a26:	601a      	str	r2, [r3, #0]
		}
 8022a28:	bf00      	nop
 8022a2a:	3708      	adds	r7, #8
 8022a2c:	46bd      	mov	sp, r7
 8022a2e:	bd80      	pop	{r7, pc}
 8022a30:	080405f4 	.word	0x080405f4
 8022a34:	08041004 	.word	0x08041004
 8022a38:	08040628 	.word	0x08040628
 8022a3c:	08040644 	.word	0x08040644

08022a40 <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

public:
	AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 8022a40:	b480      	push	{r7}
 8022a42:	b083      	sub	sp, #12
 8022a44:	af00      	add	r7, sp, #0
 8022a46:	6078      	str	r0, [r7, #4]
 8022a48:	460b      	mov	r3, r1
 8022a4a:	70fb      	strb	r3, [r7, #3]
 8022a4c:	4613      	mov	r3, r2
 8022a4e:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	78fa      	ldrb	r2, [r7, #3]
 8022a54:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	78ba      	ldrb	r2, [r7, #2]
 8022a5a:	705a      	strb	r2, [r3, #1]
	}
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	4618      	mov	r0, r3
 8022a60:	370c      	adds	r7, #12
 8022a62:	46bd      	mov	sp, r7
 8022a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a68:	4770      	bx	lr
	...

08022a6c <_ZN18AcknowledgeHandler6HandleERK7Request>:

	Responce Handle(const Request &request) {
 8022a6c:	b580      	push	{r7, lr}
 8022a6e:	b086      	sub	sp, #24
 8022a70:	af00      	add	r7, sp, #0
 8022a72:	60f8      	str	r0, [r7, #12]
 8022a74:	60b9      	str	r1, [r7, #8]
 8022a76:	607a      	str	r2, [r7, #4]
		assert(request.PeripheryID == Periphery::Ack);
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	7c5b      	ldrb	r3, [r3, #17]
 8022a7c:	2b02      	cmp	r3, #2
 8022a7e:	d006      	beq.n	8022a8e <_ZN18AcknowledgeHandler6HandleERK7Request+0x22>
 8022a80:	4b14      	ldr	r3, [pc, #80]	; (8022ad4 <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 8022a82:	4a15      	ldr	r2, [pc, #84]	; (8022ad8 <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 8022a84:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8022a88:	4814      	ldr	r0, [pc, #80]	; (8022adc <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 8022a8a:	f01c fca3 	bl	803f3d4 <__assert_func>

		Responce responce;
 8022a8e:	68f8      	ldr	r0, [r7, #12]
 8022a90:	f7fe feaa 	bl	80217e8 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Ack;
 8022a94:	68fb      	ldr	r3, [r7, #12]
 8022a96:	2202      	movs	r2, #2
 8022a98:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = 0;
 8022a9a:	68fb      	ldr	r3, [r7, #12]
 8022a9c:	2200      	movs	r2, #0
 8022a9e:	735a      	strb	r2, [r3, #13]
		responce.Error = 0;
 8022aa0:	68fb      	ldr	r3, [r7, #12]
 8022aa2:	2200      	movs	r2, #0
 8022aa4:	739a      	strb	r2, [r3, #14]
		responce.Data.resize(2);
 8022aa6:	68fb      	ldr	r3, [r7, #12]
 8022aa8:	2102      	movs	r1, #2
 8022aaa:	4618      	mov	r0, r3
 8022aac:	f000 ff4d 	bl	802394a <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = responce.Data.data();
 8022ab0:	68fb      	ldr	r3, [r7, #12]
 8022ab2:	4618      	mov	r0, r3
 8022ab4:	f000 febe 	bl	8023834 <_ZNSt6vectorIhSaIhEE4dataEv>
 8022ab8:	4603      	mov	r3, r0
 8022aba:	617b      	str	r3, [r7, #20]
		CurrentVersion.SerializeTo(&ptr);
 8022abc:	68bb      	ldr	r3, [r7, #8]
 8022abe:	f107 0214 	add.w	r2, r7, #20
 8022ac2:	4611      	mov	r1, r2
 8022ac4:	4618      	mov	r0, r3
 8022ac6:	f7ff ff81 	bl	80229cc <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

		return responce;
 8022aca:	bf00      	nop
	}
 8022acc:	68f8      	ldr	r0, [r7, #12]
 8022ace:	3718      	adds	r7, #24
 8022ad0:	46bd      	mov	sp, r7
 8022ad2:	bd80      	pop	{r7, pc}
 8022ad4:	08041040 	.word	0x08041040
 8022ad8:	08041068 	.word	0x08041068
 8022adc:	08040628 	.word	0x08040628

08022ae0 <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 8022ae0:	b580      	push	{r7, lr}
 8022ae2:	b082      	sub	sp, #8
 8022ae4:	af00      	add	r7, sp, #0
 8022ae6:	6078      	str	r0, [r7, #4]
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	3348      	adds	r3, #72	; 0x48
 8022aec:	4618      	mov	r0, r3
 8022aee:	f000 fddd 	bl	80236ac <_ZNSt6vectorIhSaIhEED1Ev>
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	3334      	adds	r3, #52	; 0x34
 8022af6:	4618      	mov	r0, r3
 8022af8:	f7fe faaf 	bl	802105a <_ZN7RequestD1Ev>
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	4618      	mov	r0, r3
 8022b00:	f7fe ff78 	bl	80219f4 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	4618      	mov	r0, r3
 8022b08:	3708      	adds	r7, #8
 8022b0a:	46bd      	mov	sp, r7
 8022b0c:	bd80      	pop	{r7, pc}

08022b0e <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 8022b0e:	b580      	push	{r7, lr}
 8022b10:	b082      	sub	sp, #8
 8022b12:	af00      	add	r7, sp, #0
 8022b14:	6078      	str	r0, [r7, #4]
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	3368      	adds	r3, #104	; 0x68
 8022b1a:	4618      	mov	r0, r3
 8022b1c:	f000 fdc6 	bl	80236ac <_ZNSt6vectorIhSaIhEED1Ev>
 8022b20:	687b      	ldr	r3, [r7, #4]
 8022b22:	3350      	adds	r3, #80	; 0x50
 8022b24:	4618      	mov	r0, r3
 8022b26:	f7fe fa98 	bl	802105a <_ZN7RequestD1Ev>
 8022b2a:	687b      	ldr	r3, [r7, #4]
 8022b2c:	3328      	adds	r3, #40	; 0x28
 8022b2e:	4618      	mov	r0, r3
 8022b30:	f7fe fa53 	bl	8020fda <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8022b34:	687b      	ldr	r3, [r7, #4]
 8022b36:	4618      	mov	r0, r3
 8022b38:	f000 fd19 	bl	802356e <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 8022b3c:	687b      	ldr	r3, [r7, #4]
 8022b3e:	4618      	mov	r0, r3
 8022b40:	3708      	adds	r7, #8
 8022b42:	46bd      	mov	sp, r7
 8022b44:	bd80      	pop	{r7, pc}

08022b46 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
 8022b46:	b580      	push	{r7, lr}
 8022b48:	b082      	sub	sp, #8
 8022b4a:	af00      	add	r7, sp, #0
 8022b4c:	6078      	str	r0, [r7, #4]
 8022b4e:	687b      	ldr	r3, [r7, #4]
 8022b50:	4618      	mov	r0, r3
 8022b52:	f001 f9ce 	bl	8023ef2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	4618      	mov	r0, r3
 8022b5a:	3708      	adds	r7, #8
 8022b5c:	46bd      	mov	sp, r7
 8022b5e:	bd80      	pop	{r7, pc}

08022b60 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8022b60:	b580      	push	{r7, lr}
 8022b62:	b082      	sub	sp, #8
 8022b64:	af00      	add	r7, sp, #0
 8022b66:	6078      	str	r0, [r7, #4]
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	4618      	mov	r0, r3
 8022b6c:	f7ff ffeb 	bl	8022b46 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	2200      	movs	r2, #0
 8022b74:	629a      	str	r2, [r3, #40]	; 0x28
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8022b7e:	687b      	ldr	r3, [r7, #4]
 8022b80:	4618      	mov	r0, r3
 8022b82:	3708      	adds	r7, #8
 8022b84:	46bd      	mov	sp, r7
 8022b86:	bd80      	pop	{r7, pc}

08022b88 <_ZN17IMUFrameContainerD1Ev>:
 8022b88:	b580      	push	{r7, lr}
 8022b8a:	b082      	sub	sp, #8
 8022b8c:	af00      	add	r7, sp, #0
 8022b8e:	6078      	str	r0, [r7, #4]
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	4618      	mov	r0, r3
 8022b94:	f001 f9e0 	bl	8023f58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	4618      	mov	r0, r3
 8022b9c:	3708      	adds	r7, #8
 8022b9e:	46bd      	mov	sp, r7
 8022ba0:	bd80      	pop	{r7, pc}

08022ba2 <_ZN12IMUFrameMemoC1Ev>:
class IMUFrameMemo {
 8022ba2:	b580      	push	{r7, lr}
 8022ba4:	b082      	sub	sp, #8
 8022ba6:	af00      	add	r7, sp, #0
 8022ba8:	6078      	str	r0, [r7, #4]
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	4618      	mov	r0, r3
 8022bae:	f7ff ffca 	bl	8022b46 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	22a0      	movs	r2, #160	; 0xa0
 8022bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	2200      	movs	r2, #0
 8022bbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	4618      	mov	r0, r3
 8022bc2:	3708      	adds	r7, #8
 8022bc4:	46bd      	mov	sp, r7
 8022bc6:	bd80      	pop	{r7, pc}

08022bc8 <_ZN12IMUFrameMemoD1Ev>:
 8022bc8:	b580      	push	{r7, lr}
 8022bca:	b082      	sub	sp, #8
 8022bcc:	af00      	add	r7, sp, #0
 8022bce:	6078      	str	r0, [r7, #4]
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	4618      	mov	r0, r3
 8022bd4:	f001 f9c0 	bl	8023f58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022bd8:	687b      	ldr	r3, [r7, #4]
 8022bda:	4618      	mov	r0, r3
 8022bdc:	3708      	adds	r7, #8
 8022bde:	46bd      	mov	sp, r7
 8022be0:	bd80      	pop	{r7, pc}

08022be2 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
 8022be2:	b580      	push	{r7, lr}
 8022be4:	b082      	sub	sp, #8
 8022be6:	af00      	add	r7, sp, #0
 8022be8:	6078      	str	r0, [r7, #4]
 8022bea:	687b      	ldr	r3, [r7, #4]
 8022bec:	4618      	mov	r0, r3
 8022bee:	f001 f9f9 	bl	8023fe4 <_ZNSt5dequeIjSaIjEED1Ev>
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	4618      	mov	r0, r3
 8022bf6:	3708      	adds	r7, #8
 8022bf8:	46bd      	mov	sp, r7
 8022bfa:	bd80      	pop	{r7, pc}

08022bfc <_ZN20StrobeDurationFilterC1Ev>:
class StrobeDurationFilter {
 8022bfc:	b580      	push	{r7, lr}
 8022bfe:	b082      	sub	sp, #8
 8022c00:	af00      	add	r7, sp, #0
 8022c02:	6078      	str	r0, [r7, #4]
 8022c04:	687b      	ldr	r3, [r7, #4]
 8022c06:	2200      	movs	r2, #0
 8022c08:	601a      	str	r2, [r3, #0]
 8022c0a:	687b      	ldr	r3, [r7, #4]
 8022c0c:	2200      	movs	r2, #0
 8022c0e:	605a      	str	r2, [r3, #4]
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	2201      	movs	r2, #1
 8022c14:	609a      	str	r2, [r3, #8]
 8022c16:	687b      	ldr	r3, [r7, #4]
 8022c18:	2200      	movs	r2, #0
 8022c1a:	60da      	str	r2, [r3, #12]
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	2200      	movs	r2, #0
 8022c20:	611a      	str	r2, [r3, #16]
 8022c22:	687b      	ldr	r3, [r7, #4]
 8022c24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022c28:	615a      	str	r2, [r3, #20]
 8022c2a:	687b      	ldr	r3, [r7, #4]
 8022c2c:	3318      	adds	r3, #24
 8022c2e:	4618      	mov	r0, r3
 8022c30:	f001 f9c4 	bl	8023fbc <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	2200      	movs	r2, #0
 8022c38:	641a      	str	r2, [r3, #64]	; 0x40
 8022c3a:	687b      	ldr	r3, [r7, #4]
 8022c3c:	4618      	mov	r0, r3
 8022c3e:	3708      	adds	r7, #8
 8022c40:	46bd      	mov	sp, r7
 8022c42:	bd80      	pop	{r7, pc}

08022c44 <_ZN20StrobeDurationFilterD1Ev>:
 8022c44:	b580      	push	{r7, lr}
 8022c46:	b082      	sub	sp, #8
 8022c48:	af00      	add	r7, sp, #0
 8022c4a:	6078      	str	r0, [r7, #4]
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	3318      	adds	r3, #24
 8022c50:	4618      	mov	r0, r3
 8022c52:	f7ff ffc6 	bl	8022be2 <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022c56:	687b      	ldr	r3, [r7, #4]
 8022c58:	4618      	mov	r0, r3
 8022c5a:	3708      	adds	r7, #8
 8022c5c:	46bd      	mov	sp, r7
 8022c5e:	bd80      	pop	{r7, pc}

08022c60 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	StrobeDurationFilter StrobeFilter;
	size_t StrobeOffset;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8022c60:	b084      	sub	sp, #16
 8022c62:	b580      	push	{r7, lr}
 8022c64:	b082      	sub	sp, #8
 8022c66:	af00      	add	r7, sp, #0
 8022c68:	6078      	str	r0, [r7, #4]
 8022c6a:	f107 0014 	add.w	r0, r7, #20
 8022c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout, conf.BodyPeriod }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor }, StrobeOffset {
					conf.StrobeOffset } {
 8022c72:	687b      	ldr	r3, [r7, #4]
 8022c74:	6979      	ldr	r1, [r7, #20]
 8022c76:	69fa      	ldr	r2, [r7, #28]
 8022c78:	4618      	mov	r0, r3
 8022c7a:	f7fe fec9 	bl	8021a10 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	3360      	adds	r3, #96	; 0x60
 8022c82:	69b9      	ldr	r1, [r7, #24]
 8022c84:	69fa      	ldr	r2, [r7, #28]
 8022c86:	4618      	mov	r0, r3
 8022c88:	f7fe fec2 	bl	8021a10 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	33c0      	adds	r3, #192	; 0xc0
 8022c90:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8022c94:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8022c98:	4618      	mov	r0, r3
 8022c9a:	f7ff fed1 	bl	8022a40 <_ZN18AcknowledgeHandlerC1Ehh>
 8022c9e:	687b      	ldr	r3, [r7, #4]
 8022ca0:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8022ca4:	6a39      	ldr	r1, [r7, #32]
 8022ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022ca8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022cac:	f7fe f9e2 	bl	8021074 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022cb6:	2230      	movs	r2, #48	; 0x30
 8022cb8:	2100      	movs	r1, #0
 8022cba:	4618      	mov	r0, r3
 8022cbc:	f01c fc1c 	bl	803f4f8 <memset>
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022cc6:	4618      	mov	r0, r3
 8022cc8:	f7ff ff4a 	bl	8022b60 <_ZN17IMUFrameContainerC1Ev>
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8022cd2:	4618      	mov	r0, r3
 8022cd4:	f7ff ff65 	bl	8022ba2 <_ZN12IMUFrameMemoC1Ev>
 8022cd8:	687b      	ldr	r3, [r7, #4]
 8022cda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8022cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022ce0:	4611      	mov	r1, r2
 8022ce2:	4618      	mov	r0, r3
 8022ce4:	f7fd fcce 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022ce8:	687a      	ldr	r2, [r7, #4]
 8022cea:	f241 3304 	movw	r3, #4868	; 0x1304
 8022cee:	4413      	add	r3, r2
 8022cf0:	4618      	mov	r0, r3
 8022cf2:	f7ff ff83 	bl	8022bfc <_ZN20StrobeDurationFilterC1Ev>
 8022cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022cf8:	687a      	ldr	r2, [r7, #4]
 8022cfa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8022cfe:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022d08:	2200      	movs	r2, #0
 8022d0a:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
	}
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	4618      	mov	r0, r3
 8022d12:	3708      	adds	r7, #8
 8022d14:	46bd      	mov	sp, r7
 8022d16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022d1a:	b004      	add	sp, #16
 8022d1c:	4770      	bx	lr

08022d1e <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022d1e:	b580      	push	{r7, lr}
 8022d20:	b082      	sub	sp, #8
 8022d22:	af00      	add	r7, sp, #0
 8022d24:	6078      	str	r0, [r7, #4]
 8022d26:	687b      	ldr	r3, [r7, #4]
 8022d28:	4618      	mov	r0, r3
 8022d2a:	f000 ff82 	bl	8023c32 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8022d2e:	687b      	ldr	r3, [r7, #4]
 8022d30:	3334      	adds	r3, #52	; 0x34
 8022d32:	4618      	mov	r0, r3
 8022d34:	f7fe f984 	bl	8021040 <_ZN7RequestC1Ev>
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	3348      	adds	r3, #72	; 0x48
 8022d3c:	4618      	mov	r0, r3
 8022d3e:	f7fe f972 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8022d42:	687b      	ldr	r3, [r7, #4]
 8022d44:	2201      	movs	r2, #1
 8022d46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8022d4a:	687b      	ldr	r3, [r7, #4]
 8022d4c:	4618      	mov	r0, r3
 8022d4e:	3708      	adds	r7, #8
 8022d50:	46bd      	mov	sp, r7
 8022d52:	bd80      	pop	{r7, pc}

08022d54 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022d54:	b580      	push	{r7, lr}
 8022d56:	b082      	sub	sp, #8
 8022d58:	af00      	add	r7, sp, #0
 8022d5a:	6078      	str	r0, [r7, #4]
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	4618      	mov	r0, r3
 8022d60:	f7fe f92e 	bl	8020fc0 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8022d64:	687b      	ldr	r3, [r7, #4]
 8022d66:	3328      	adds	r3, #40	; 0x28
 8022d68:	4618      	mov	r0, r3
 8022d6a:	f000 fc32 	bl	80235d2 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8022d6e:	687b      	ldr	r3, [r7, #4]
 8022d70:	3350      	adds	r3, #80	; 0x50
 8022d72:	4618      	mov	r0, r3
 8022d74:	f7fe f964 	bl	8021040 <_ZN7RequestC1Ev>
 8022d78:	687b      	ldr	r3, [r7, #4]
 8022d7a:	2200      	movs	r2, #0
 8022d7c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	2200      	movs	r2, #0
 8022d84:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	3368      	adds	r3, #104	; 0x68
 8022d8c:	4618      	mov	r0, r3
 8022d8e:	f7fe f94a 	bl	8021026 <_ZNSt6vectorIhSaIhEEC1Ev>
 8022d92:	687b      	ldr	r3, [r7, #4]
 8022d94:	2201      	movs	r2, #1
 8022d96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8022d9a:	687b      	ldr	r3, [r7, #4]
 8022d9c:	2200      	movs	r2, #0
 8022d9e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8022da2:	687b      	ldr	r3, [r7, #4]
 8022da4:	2201      	movs	r2, #1
 8022da6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8022daa:	687b      	ldr	r3, [r7, #4]
 8022dac:	2200      	movs	r2, #0
 8022dae:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	4618      	mov	r0, r3
 8022db6:	3708      	adds	r7, #8
 8022db8:	46bd      	mov	sp, r7
 8022dba:	bd80      	pop	{r7, pc}

08022dbc <_ZN10BHYWrapperC1Ev>:

		void SerializeTo(uint8_t* dest, uint8_t* size);
	};

	BHYWrapper(SPI_HandleTypeDef *spiHandle);
	BHYWrapper() = default;
 8022dbc:	b480      	push	{r7}
 8022dbe:	b083      	sub	sp, #12
 8022dc0:	af00      	add	r7, sp, #0
 8022dc2:	6078      	str	r0, [r7, #4]
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022dca:	461a      	mov	r2, r3
 8022dcc:	2300      	movs	r3, #0
 8022dce:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8022dd2:	687b      	ldr	r3, [r7, #4]
 8022dd4:	4618      	mov	r0, r3
 8022dd6:	370c      	adds	r7, #12
 8022dd8:	46bd      	mov	sp, r7
 8022dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dde:	4770      	bx	lr

08022de0 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8022de0:	b580      	push	{r7, lr}
 8022de2:	b082      	sub	sp, #8
 8022de4:	af00      	add	r7, sp, #0
 8022de6:	6078      	str	r0, [r7, #4]
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	4618      	mov	r0, r3
 8022dec:	f7ff ff97 	bl	8022d1e <_ZN13HeadInterfaceC1Ev>
 8022df0:	687b      	ldr	r3, [r7, #4]
 8022df2:	3360      	adds	r3, #96	; 0x60
 8022df4:	4618      	mov	r0, r3
 8022df6:	f7ff ff92 	bl	8022d1e <_ZN13HeadInterfaceC1Ev>
 8022dfa:	687b      	ldr	r3, [r7, #4]
 8022dfc:	33c0      	adds	r3, #192	; 0xc0
 8022dfe:	2200      	movs	r2, #0
 8022e00:	2100      	movs	r1, #0
 8022e02:	4618      	mov	r0, r3
 8022e04:	f7ff fe1c 	bl	8022a40 <_ZN18AcknowledgeHandlerC1Ehh>
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	33c4      	adds	r3, #196	; 0xc4
 8022e0c:	4618      	mov	r0, r3
 8022e0e:	f7ff ffa1 	bl	8022d54 <_ZN11QueueSenderC1Ev>
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022e18:	4618      	mov	r0, r3
 8022e1a:	f7ff fea1 	bl	8022b60 <_ZN17IMUFrameContainerC1Ev>
 8022e1e:	687b      	ldr	r3, [r7, #4]
 8022e20:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8022e24:	4618      	mov	r0, r3
 8022e26:	f7ff febc 	bl	8022ba2 <_ZN12IMUFrameMemoC1Ev>
 8022e2a:	687b      	ldr	r3, [r7, #4]
 8022e2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8022e30:	4618      	mov	r0, r3
 8022e32:	f7ff ffc3 	bl	8022dbc <_ZN10BHYWrapperC1Ev>
 8022e36:	687a      	ldr	r2, [r7, #4]
 8022e38:	f241 3304 	movw	r3, #4868	; 0x1304
 8022e3c:	4413      	add	r3, r2
 8022e3e:	4618      	mov	r0, r3
 8022e40:	f7ff fedc 	bl	8022bfc <_ZN20StrobeDurationFilterC1Ev>
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022e4a:	2200      	movs	r2, #0
 8022e4c:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
 8022e50:	687b      	ldr	r3, [r7, #4]
 8022e52:	4618      	mov	r0, r3
 8022e54:	3708      	adds	r7, #8
 8022e56:	46bd      	mov	sp, r7
 8022e58:	bd80      	pop	{r7, pc}

08022e5a <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022e5a:	b580      	push	{r7, lr}
 8022e5c:	b082      	sub	sp, #8
 8022e5e:	af00      	add	r7, sp, #0
 8022e60:	6078      	str	r0, [r7, #4]
 8022e62:	687a      	ldr	r2, [r7, #4]
 8022e64:	f241 3304 	movw	r3, #4868	; 0x1304
 8022e68:	4413      	add	r3, r2
 8022e6a:	4618      	mov	r0, r3
 8022e6c:	f7ff feea 	bl	8022c44 <_ZN20StrobeDurationFilterD1Ev>
 8022e70:	687b      	ldr	r3, [r7, #4]
 8022e72:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8022e76:	4618      	mov	r0, r3
 8022e78:	f7ff fea6 	bl	8022bc8 <_ZN12IMUFrameMemoD1Ev>
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8022e82:	4618      	mov	r0, r3
 8022e84:	f7ff fe80 	bl	8022b88 <_ZN17IMUFrameContainerD1Ev>
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	33c4      	adds	r3, #196	; 0xc4
 8022e8c:	4618      	mov	r0, r3
 8022e8e:	f7ff fe3e 	bl	8022b0e <_ZN11QueueSenderD1Ev>
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	3360      	adds	r3, #96	; 0x60
 8022e96:	4618      	mov	r0, r3
 8022e98:	f7ff fe22 	bl	8022ae0 <_ZN13HeadInterfaceD1Ev>
 8022e9c:	687b      	ldr	r3, [r7, #4]
 8022e9e:	4618      	mov	r0, r3
 8022ea0:	f7ff fe1e 	bl	8022ae0 <_ZN13HeadInterfaceD1Ev>
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	4618      	mov	r0, r3
 8022ea8:	3708      	adds	r7, #8
 8022eaa:	46bd      	mov	sp, r7
 8022eac:	bd80      	pop	{r7, pc}

08022eae <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8022eae:	b580      	push	{r7, lr}
 8022eb0:	b082      	sub	sp, #8
 8022eb2:	af00      	add	r7, sp, #0
 8022eb4:	6078      	str	r0, [r7, #4]
 8022eb6:	6039      	str	r1, [r7, #0]
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	683a      	ldr	r2, [r7, #0]
 8022ebc:	4611      	mov	r1, r2
 8022ebe:	4618      	mov	r0, r3
 8022ec0:	f001 f8b5 	bl	802402e <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8022ec4:	687b      	ldr	r3, [r7, #4]
 8022ec6:	4618      	mov	r0, r3
 8022ec8:	3708      	adds	r7, #8
 8022eca:	46bd      	mov	sp, r7
 8022ecc:	bd80      	pop	{r7, pc}

08022ece <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 8022ece:	b580      	push	{r7, lr}
 8022ed0:	b082      	sub	sp, #8
 8022ed2:	af00      	add	r7, sp, #0
 8022ed4:	6078      	str	r0, [r7, #4]
 8022ed6:	6039      	str	r1, [r7, #0]
 8022ed8:	687b      	ldr	r3, [r7, #4]
 8022eda:	683a      	ldr	r2, [r7, #0]
 8022edc:	4611      	mov	r1, r2
 8022ede:	4618      	mov	r0, r3
 8022ee0:	f7ff ffe5 	bl	8022eae <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8022ee4:	683b      	ldr	r3, [r7, #0]
 8022ee6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8022eea:	687b      	ldr	r3, [r7, #4]
 8022eec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8022ef0:	683b      	ldr	r3, [r7, #0]
 8022ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022ef4:	687b      	ldr	r3, [r7, #4]
 8022ef6:	62da      	str	r2, [r3, #44]	; 0x2c
 8022ef8:	683b      	ldr	r3, [r7, #0]
 8022efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	631a      	str	r2, [r3, #48]	; 0x30
 8022f00:	687b      	ldr	r3, [r7, #4]
 8022f02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8022f06:	683b      	ldr	r3, [r7, #0]
 8022f08:	3334      	adds	r3, #52	; 0x34
 8022f0a:	4619      	mov	r1, r3
 8022f0c:	4610      	mov	r0, r2
 8022f0e:	f7fe f905 	bl	802111c <_ZN7RequestaSEOS_>
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8022f18:	683b      	ldr	r3, [r7, #0]
 8022f1a:	3348      	adds	r3, #72	; 0x48
 8022f1c:	4619      	mov	r1, r3
 8022f1e:	4610      	mov	r0, r2
 8022f20:	f000 fc15 	bl	802374e <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8022f24:	683b      	ldr	r3, [r7, #0]
 8022f26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	655a      	str	r2, [r3, #84]	; 0x54
 8022f2c:	683b      	ldr	r3, [r7, #0]
 8022f2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	659a      	str	r2, [r3, #88]	; 0x58
 8022f34:	683b      	ldr	r3, [r7, #0]
 8022f36:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8022f40:	687b      	ldr	r3, [r7, #4]
 8022f42:	4618      	mov	r0, r3
 8022f44:	3708      	adds	r7, #8
 8022f46:	46bd      	mov	sp, r7
 8022f48:	bd80      	pop	{r7, pc}

08022f4a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 8022f4a:	b580      	push	{r7, lr}
 8022f4c:	b082      	sub	sp, #8
 8022f4e:	af00      	add	r7, sp, #0
 8022f50:	6078      	str	r0, [r7, #4]
 8022f52:	6039      	str	r1, [r7, #0]
 8022f54:	687b      	ldr	r3, [r7, #4]
 8022f56:	683a      	ldr	r2, [r7, #0]
 8022f58:	4611      	mov	r1, r2
 8022f5a:	4618      	mov	r0, r3
 8022f5c:	f001 f87a 	bl	8024054 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	4618      	mov	r0, r3
 8022f64:	3708      	adds	r7, #8
 8022f66:	46bd      	mov	sp, r7
 8022f68:	bd80      	pop	{r7, pc}

08022f6a <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 8022f6a:	b580      	push	{r7, lr}
 8022f6c:	b082      	sub	sp, #8
 8022f6e:	af00      	add	r7, sp, #0
 8022f70:	6078      	str	r0, [r7, #4]
 8022f72:	6039      	str	r1, [r7, #0]
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	683a      	ldr	r2, [r7, #0]
 8022f78:	4611      	mov	r1, r2
 8022f7a:	4618      	mov	r0, r3
 8022f7c:	f001 f857 	bl	802402e <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8022f86:	683b      	ldr	r3, [r7, #0]
 8022f88:	3328      	adds	r3, #40	; 0x28
 8022f8a:	4619      	mov	r1, r3
 8022f8c:	4610      	mov	r0, r2
 8022f8e:	f7ff ffdc 	bl	8022f4a <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8022f92:	687b      	ldr	r3, [r7, #4]
 8022f94:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8022f98:	683b      	ldr	r3, [r7, #0]
 8022f9a:	3350      	adds	r3, #80	; 0x50
 8022f9c:	4619      	mov	r1, r3
 8022f9e:	4610      	mov	r0, r2
 8022fa0:	f7fe f8bc 	bl	802111c <_ZN7RequestaSEOS_>
 8022fa4:	683b      	ldr	r3, [r7, #0]
 8022fa6:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8022faa:	687b      	ldr	r3, [r7, #4]
 8022fac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8022fb0:	683b      	ldr	r3, [r7, #0]
 8022fb2:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8022fc2:	683b      	ldr	r3, [r7, #0]
 8022fc4:	3368      	adds	r3, #104	; 0x68
 8022fc6:	4619      	mov	r1, r3
 8022fc8:	4610      	mov	r0, r2
 8022fca:	f000 fbc0 	bl	802374e <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8022fce:	683b      	ldr	r3, [r7, #0]
 8022fd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8022fd2:	687b      	ldr	r3, [r7, #4]
 8022fd4:	675a      	str	r2, [r3, #116]	; 0x74
 8022fd6:	683b      	ldr	r3, [r7, #0]
 8022fd8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8022fda:	687b      	ldr	r3, [r7, #4]
 8022fdc:	679a      	str	r2, [r3, #120]	; 0x78
 8022fde:	683b      	ldr	r3, [r7, #0]
 8022fe0:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8022fea:	683b      	ldr	r3, [r7, #0]
 8022fec:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8022ff0:	687b      	ldr	r3, [r7, #4]
 8022ff2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8022ff6:	683b      	ldr	r3, [r7, #0]
 8022ff8:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8022ffc:	687b      	ldr	r3, [r7, #4]
 8022ffe:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8023002:	683b      	ldr	r3, [r7, #0]
 8023004:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 802300e:	687b      	ldr	r3, [r7, #4]
 8023010:	4618      	mov	r0, r3
 8023012:	3708      	adds	r7, #8
 8023014:	46bd      	mov	sp, r7
 8023016:	bd80      	pop	{r7, pc}

08023018 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8023018:	b580      	push	{r7, lr}
 802301a:	b082      	sub	sp, #8
 802301c:	af00      	add	r7, sp, #0
 802301e:	6078      	str	r0, [r7, #4]
 8023020:	6039      	str	r1, [r7, #0]
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	683a      	ldr	r2, [r7, #0]
 8023026:	4611      	mov	r1, r2
 8023028:	4618      	mov	r0, r3
 802302a:	f001 f826 	bl	802407a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 802302e:	683b      	ldr	r3, [r7, #0]
 8023030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	629a      	str	r2, [r3, #40]	; 0x28
 8023036:	683b      	ldr	r3, [r7, #0]
 8023038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	62da      	str	r2, [r3, #44]	; 0x2c
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	4618      	mov	r0, r3
 8023042:	3708      	adds	r7, #8
 8023044:	46bd      	mov	sp, r7
 8023046:	bd80      	pop	{r7, pc}

08023048 <_ZN12IMUFrameMemoaSEOS_>:
class IMUFrameMemo {
 8023048:	b580      	push	{r7, lr}
 802304a:	b082      	sub	sp, #8
 802304c:	af00      	add	r7, sp, #0
 802304e:	6078      	str	r0, [r7, #4]
 8023050:	6039      	str	r1, [r7, #0]
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	683a      	ldr	r2, [r7, #0]
 8023056:	4611      	mov	r1, r2
 8023058:	4618      	mov	r0, r3
 802305a:	f001 f80e 	bl	802407a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 802305e:	683b      	ldr	r3, [r7, #0]
 8023060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	629a      	str	r2, [r3, #40]	; 0x28
 8023066:	683b      	ldr	r3, [r7, #0]
 8023068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802306a:	687b      	ldr	r3, [r7, #4]
 802306c:	62da      	str	r2, [r3, #44]	; 0x2c
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	4618      	mov	r0, r3
 8023072:	3708      	adds	r7, #8
 8023074:	46bd      	mov	sp, r7
 8023076:	bd80      	pop	{r7, pc}

08023078 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>:
 8023078:	b580      	push	{r7, lr}
 802307a:	b082      	sub	sp, #8
 802307c:	af00      	add	r7, sp, #0
 802307e:	6078      	str	r0, [r7, #4]
 8023080:	6039      	str	r1, [r7, #0]
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	683a      	ldr	r2, [r7, #0]
 8023086:	4611      	mov	r1, r2
 8023088:	4618      	mov	r0, r3
 802308a:	f001 f809 	bl	80240a0 <_ZNSt5dequeIjSaIjEEaSEOS1_>
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	4618      	mov	r0, r3
 8023092:	3708      	adds	r7, #8
 8023094:	46bd      	mov	sp, r7
 8023096:	bd80      	pop	{r7, pc}

08023098 <_ZN20StrobeDurationFilteraSEOS_>:
class StrobeDurationFilter {
 8023098:	b580      	push	{r7, lr}
 802309a:	b082      	sub	sp, #8
 802309c:	af00      	add	r7, sp, #0
 802309e:	6078      	str	r0, [r7, #4]
 80230a0:	6039      	str	r1, [r7, #0]
 80230a2:	683b      	ldr	r3, [r7, #0]
 80230a4:	681a      	ldr	r2, [r3, #0]
 80230a6:	687b      	ldr	r3, [r7, #4]
 80230a8:	601a      	str	r2, [r3, #0]
 80230aa:	683b      	ldr	r3, [r7, #0]
 80230ac:	685a      	ldr	r2, [r3, #4]
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	605a      	str	r2, [r3, #4]
 80230b2:	683b      	ldr	r3, [r7, #0]
 80230b4:	689a      	ldr	r2, [r3, #8]
 80230b6:	687b      	ldr	r3, [r7, #4]
 80230b8:	609a      	str	r2, [r3, #8]
 80230ba:	683b      	ldr	r3, [r7, #0]
 80230bc:	68da      	ldr	r2, [r3, #12]
 80230be:	687b      	ldr	r3, [r7, #4]
 80230c0:	60da      	str	r2, [r3, #12]
 80230c2:	683b      	ldr	r3, [r7, #0]
 80230c4:	691a      	ldr	r2, [r3, #16]
 80230c6:	687b      	ldr	r3, [r7, #4]
 80230c8:	611a      	str	r2, [r3, #16]
 80230ca:	683b      	ldr	r3, [r7, #0]
 80230cc:	695a      	ldr	r2, [r3, #20]
 80230ce:	687b      	ldr	r3, [r7, #4]
 80230d0:	615a      	str	r2, [r3, #20]
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	f103 0218 	add.w	r2, r3, #24
 80230d8:	683b      	ldr	r3, [r7, #0]
 80230da:	3318      	adds	r3, #24
 80230dc:	4619      	mov	r1, r3
 80230de:	4610      	mov	r0, r2
 80230e0:	f7ff ffca 	bl	8023078 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 80230e4:	683b      	ldr	r3, [r7, #0]
 80230e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80230e8:	687b      	ldr	r3, [r7, #4]
 80230ea:	641a      	str	r2, [r3, #64]	; 0x40
 80230ec:	687b      	ldr	r3, [r7, #4]
 80230ee:	4618      	mov	r0, r3
 80230f0:	3708      	adds	r7, #8
 80230f2:	46bd      	mov	sp, r7
 80230f4:	bd80      	pop	{r7, pc}

080230f6 <_ZN18MotherboardContextaSEOS_>:
 80230f6:	b580      	push	{r7, lr}
 80230f8:	b082      	sub	sp, #8
 80230fa:	af00      	add	r7, sp, #0
 80230fc:	6078      	str	r0, [r7, #4]
 80230fe:	6039      	str	r1, [r7, #0]
 8023100:	687b      	ldr	r3, [r7, #4]
 8023102:	683a      	ldr	r2, [r7, #0]
 8023104:	4611      	mov	r1, r2
 8023106:	4618      	mov	r0, r3
 8023108:	f7ff fee1 	bl	8022ece <_ZN13HeadInterfaceaSEOS_>
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8023112:	683b      	ldr	r3, [r7, #0]
 8023114:	3360      	adds	r3, #96	; 0x60
 8023116:	4619      	mov	r1, r3
 8023118:	4610      	mov	r0, r2
 802311a:	f7ff fed8 	bl	8022ece <_ZN13HeadInterfaceaSEOS_>
 802311e:	687b      	ldr	r3, [r7, #4]
 8023120:	683a      	ldr	r2, [r7, #0]
 8023122:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8023126:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8023130:	683b      	ldr	r3, [r7, #0]
 8023132:	33c4      	adds	r3, #196	; 0xc4
 8023134:	4619      	mov	r1, r3
 8023136:	4610      	mov	r0, r2
 8023138:	f7ff ff17 	bl	8022f6a <_ZN11QueueSenderaSEOS_>
 802313c:	687b      	ldr	r3, [r7, #4]
 802313e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8023142:	683b      	ldr	r3, [r7, #0]
 8023144:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8023148:	4619      	mov	r1, r3
 802314a:	4610      	mov	r0, r2
 802314c:	f7ff ff64 	bl	8023018 <_ZN17IMUFrameContaineraSEOS_>
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 8023156:	683b      	ldr	r3, [r7, #0]
 8023158:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 802315c:	4619      	mov	r1, r3
 802315e:	4610      	mov	r0, r2
 8023160:	f7ff ff72 	bl	8023048 <_ZN12IMUFrameMemoaSEOS_>
 8023164:	687a      	ldr	r2, [r7, #4]
 8023166:	683b      	ldr	r3, [r7, #0]
 8023168:	f502 70d4 	add.w	r0, r2, #424	; 0x1a8
 802316c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8023170:	f241 1254 	movw	r2, #4436	; 0x1154
 8023174:	4619      	mov	r1, r3
 8023176:	f01c f997 	bl	803f4a8 <memcpy>
 802317a:	687a      	ldr	r2, [r7, #4]
 802317c:	f241 3304 	movw	r3, #4868	; 0x1304
 8023180:	4413      	add	r3, r2
 8023182:	6839      	ldr	r1, [r7, #0]
 8023184:	f241 3204 	movw	r2, #4868	; 0x1304
 8023188:	440a      	add	r2, r1
 802318a:	4611      	mov	r1, r2
 802318c:	4618      	mov	r0, r3
 802318e:	f7ff ff83 	bl	8023098 <_ZN20StrobeDurationFilteraSEOS_>
 8023192:	683b      	ldr	r3, [r7, #0]
 8023194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023198:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 802319c:	687a      	ldr	r2, [r7, #4]
 802319e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80231a2:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
 80231a6:	683b      	ldr	r3, [r7, #0]
 80231a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80231ac:	f893 234c 	ldrb.w	r2, [r3, #844]	; 0x34c
 80231b0:	687b      	ldr	r3, [r7, #4]
 80231b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80231b6:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	4618      	mov	r0, r3
 80231be:	3708      	adds	r7, #8
 80231c0:	46bd      	mov	sp, r7
 80231c2:	bd80      	pop	{r7, pc}

080231c4 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 80231c4:	b084      	sub	sp, #16
 80231c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80231c8:	f5ad 5d9b 	sub.w	sp, sp, #4960	; 0x1360
 80231cc:	b083      	sub	sp, #12
 80231ce:	af06      	add	r7, sp, #24
 80231d0:	f241 3468 	movw	r4, #4968	; 0x1368
 80231d4:	443c      	add	r4, r7
 80231d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 80231da:	4e1f      	ldr	r6, [pc, #124]	; (8023258 <MotherboardInit+0x94>)
 80231dc:	f241 3350 	movw	r3, #4944	; 0x1350
 80231e0:	4433      	add	r3, r6
 80231e2:	19de      	adds	r6, r3, r7
 80231e4:	466d      	mov	r5, sp
 80231e6:	f241 3474 	movw	r4, #4980	; 0x1374
 80231ea:	443c      	add	r4, r7
 80231ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80231ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80231f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80231f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80231f8:	f241 3368 	movw	r3, #4968	; 0x1368
 80231fc:	443b      	add	r3, r7
 80231fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8023200:	4630      	mov	r0, r6
 8023202:	f7ff fd2d 	bl	8022c60 <_ZN18MotherboardContextC1E17MotherboardConfig>
 8023206:	4b14      	ldr	r3, [pc, #80]	; (8023258 <MotherboardInit+0x94>)
 8023208:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 802320c:	f103 0310 	add.w	r3, r3, #16
 8023210:	443b      	add	r3, r7
 8023212:	4619      	mov	r1, r3
 8023214:	4811      	ldr	r0, [pc, #68]	; (802325c <MotherboardInit+0x98>)
 8023216:	f7ff ff6e 	bl	80230f6 <_ZN18MotherboardContextaSEOS_>
 802321a:	4b0f      	ldr	r3, [pc, #60]	; (8023258 <MotherboardInit+0x94>)
 802321c:	f503 539a 	add.w	r3, r3, #4928	; 0x1340
 8023220:	f103 0310 	add.w	r3, r3, #16
 8023224:	443b      	add	r3, r7
 8023226:	4618      	mov	r0, r3
 8023228:	f7ff fe17 	bl	8022e5a <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 802322c:	480b      	ldr	r0, [pc, #44]	; (802325c <MotherboardInit+0x98>)
 802322e:	f7fe fc23 	bl	8021a78 <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 8023232:	480b      	ldr	r0, [pc, #44]	; (8023260 <MotherboardInit+0x9c>)
 8023234:	f7fe fc20 	bl	8021a78 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 8023238:	2100      	movs	r1, #0
 802323a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8023264 <MotherboardInit+0xa0>
 802323e:	480a      	ldr	r0, [pc, #40]	; (8023268 <MotherboardInit+0xa4>)
 8023240:	f7fd fa44 	bl	80206cc <_ZN10BHYWrapper4InitEfm>
 8023244:	4603      	mov	r3, r0
}
 8023246:	4618      	mov	r0, r3
 8023248:	f507 579a 	add.w	r7, r7, #4928	; 0x1340
 802324c:	3714      	adds	r7, #20
 802324e:	46bd      	mov	sp, r7
 8023250:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023254:	b004      	add	sp, #16
 8023256:	4770      	bx	lr
 8023258:	ffffecb0 	.word	0xffffecb0
 802325c:	240001d0 	.word	0x240001d0
 8023260:	24000230 	.word	0x24000230
 8023264:	44480000 	.word	0x44480000
 8023268:	24000378 	.word	0x24000378

0802326c <MotherboardTick>:

int MotherboardTick() {
 802326c:	b580      	push	{r7, lr}
 802326e:	b0a0      	sub	sp, #128	; 0x80
 8023270:	af04      	add	r7, sp, #16
	if (mbctx.StrobeFilter.HasStrobe()) {
 8023272:	4860      	ldr	r0, [pc, #384]	; (80233f4 <MotherboardTick+0x188>)
 8023274:	f7fe ffb0 	bl	80221d8 <_ZNK20StrobeDurationFilter9HasStrobeEv>
 8023278:	4603      	mov	r3, r0
 802327a:	2b00      	cmp	r3, #0
 802327c:	d021      	beq.n	80232c2 <MotherboardTick+0x56>
		size_t targetSeq = mbctx.StrobeFilter.GetStrobe() + mbctx.StrobeOffset;
 802327e:	485d      	ldr	r0, [pc, #372]	; (80233f4 <MotherboardTick+0x188>)
 8023280:	f7fe ff88 	bl	8022194 <_ZNK20StrobeDurationFilter9GetStrobeEv>
 8023284:	4602      	mov	r2, r0
 8023286:	4b5c      	ldr	r3, [pc, #368]	; (80233f8 <MotherboardTick+0x18c>)
 8023288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802328c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8023290:	4413      	add	r3, r2
 8023292:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (mbctx.FrameMemo.Has(targetSeq)) {
 8023294:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8023296:	4859      	ldr	r0, [pc, #356]	; (80233fc <MotherboardTick+0x190>)
 8023298:	f7ff fb2a 	bl	80228f0 <_ZNK12IMUFrameMemo3HasEj>
 802329c:	4603      	mov	r3, r0
 802329e:	2b00      	cmp	r3, #0
 80232a0:	d00f      	beq.n	80232c2 <MotherboardTick+0x56>
			mbctx.FrameContainer.Add(mbctx.FrameMemo.Get(targetSeq));
 80232a2:	f107 0314 	add.w	r3, r7, #20
 80232a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80232a8:	4954      	ldr	r1, [pc, #336]	; (80233fc <MotherboardTick+0x190>)
 80232aa:	4618      	mov	r0, r3
 80232ac:	f7ff fb46 	bl	802293c <_ZNK12IMUFrameMemo3GetEj>
 80232b0:	f107 0314 	add.w	r3, r7, #20
 80232b4:	4619      	mov	r1, r3
 80232b6:	4852      	ldr	r0, [pc, #328]	; (8023400 <MotherboardTick+0x194>)
 80232b8:	f7fe fe3e 	bl	8021f38 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
			mbctx.StrobeFilter.PopStrobe();
 80232bc:	484d      	ldr	r0, [pc, #308]	; (80233f4 <MotherboardTick+0x188>)
 80232be:	f7fe ff9c 	bl	80221fa <_ZN20StrobeDurationFilter9PopStrobeEv>
		}
	}

	if (mbctx.UpdateIMU && mbctx.IMU.Poll()) {
 80232c2:	4b4d      	ldr	r3, [pc, #308]	; (80233f8 <MotherboardTick+0x18c>)
 80232c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80232c8:	f893 334c 	ldrb.w	r3, [r3, #844]	; 0x34c
 80232cc:	2b00      	cmp	r3, #0
 80232ce:	d007      	beq.n	80232e0 <MotherboardTick+0x74>
 80232d0:	484c      	ldr	r0, [pc, #304]	; (8023404 <MotherboardTick+0x198>)
 80232d2:	f7fd fb53 	bl	802097c <_ZN10BHYWrapper4PollEv>
 80232d6:	4603      	mov	r3, r0
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d001      	beq.n	80232e0 <MotherboardTick+0x74>
 80232dc:	2301      	movs	r3, #1
 80232de:	e000      	b.n	80232e2 <MotherboardTick+0x76>
 80232e0:	2300      	movs	r3, #0
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d015      	beq.n	8023312 <MotherboardTick+0xa6>
		mbctx.FrameMemo.Add(mbctx.IMU.GetFrame(), mbctx.IMU.GetSeq());
 80232e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80232ea:	4946      	ldr	r1, [pc, #280]	; (8023404 <MotherboardTick+0x198>)
 80232ec:	4618      	mov	r0, r3
 80232ee:	f7fd fb89 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 80232f2:	4844      	ldr	r0, [pc, #272]	; (8023404 <MotherboardTick+0x198>)
 80232f4:	f7fd fc8e 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 80232f8:	4602      	mov	r2, r0
 80232fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80232fe:	4619      	mov	r1, r3
 8023300:	483e      	ldr	r0, [pc, #248]	; (80233fc <MotherboardTick+0x190>)
 8023302:	f7ff fac5 	bl	8022890 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>
		mbctx.UpdateIMU = false;
 8023306:	4b3c      	ldr	r3, [pc, #240]	; (80233f8 <MotherboardTick+0x18c>)
 8023308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802330c:	2200      	movs	r2, #0
 802330e:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
	}

	if (mbctx.HeadService.HasRequest()) {
 8023312:	4839      	ldr	r0, [pc, #228]	; (80233f8 <MotherboardTick+0x18c>)
 8023314:	f7fe fbd4 	bl	8021ac0 <_ZNK13HeadInterface10HasRequestEv>
 8023318:	4603      	mov	r3, r0
 802331a:	2b00      	cmp	r3, #0
 802331c:	d048      	beq.n	80233b0 <MotherboardTick+0x144>
		Request request = mbctx.HeadService.GetRequest();
 802331e:	463b      	mov	r3, r7
 8023320:	4935      	ldr	r1, [pc, #212]	; (80233f8 <MotherboardTick+0x18c>)
 8023322:	4618      	mov	r0, r3
 8023324:	f7fe fc84 	bl	8021c30 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 8023328:	7c7b      	ldrb	r3, [r7, #17]
 802332a:	2b02      	cmp	r3, #2
 802332c:	d006      	beq.n	802333c <MotherboardTick+0xd0>
 802332e:	2b02      	cmp	r3, #2
 8023330:	dc3a      	bgt.n	80233a8 <MotherboardTick+0x13c>
 8023332:	2b00      	cmp	r3, #0
 8023334:	d015      	beq.n	8023362 <MotherboardTick+0xf6>
 8023336:	2b01      	cmp	r3, #1
 8023338:	d01d      	beq.n	8023376 <MotherboardTick+0x10a>
 802333a:	e035      	b.n	80233a8 <MotherboardTick+0x13c>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 802333c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8023340:	463a      	mov	r2, r7
 8023342:	4931      	ldr	r1, [pc, #196]	; (8023408 <MotherboardTick+0x19c>)
 8023344:	4618      	mov	r0, r3
 8023346:	f7ff fb91 	bl	8022a6c <_ZN18AcknowledgeHandler6HandleERK7Request>
 802334a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802334e:	4619      	mov	r1, r3
 8023350:	4829      	ldr	r0, [pc, #164]	; (80233f8 <MotherboardTick+0x18c>)
 8023352:	f7fe fbc5 	bl	8021ae0 <_ZN13HeadInterface4SendERK8Responce>
 8023356:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802335a:	4618      	mov	r0, r3
 802335c:	f7fd fefa 	bl	8021154 <_ZN8ResponceD1Ev>
			break;
 8023360:	e022      	b.n	80233a8 <MotherboardTick+0x13c>

		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 8023362:	463b      	mov	r3, r7
 8023364:	4618      	mov	r0, r3
 8023366:	f000 f9bc 	bl	80236e2 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 802336a:	4603      	mov	r3, r0
 802336c:	4619      	mov	r1, r3
 802336e:	4827      	ldr	r0, [pc, #156]	; (802340c <MotherboardTick+0x1a0>)
 8023370:	f7fd fefe 	bl	8021170 <_ZN11QueueSender10AddRequestEO7Request>
			break;
 8023374:	e018      	b.n	80233a8 <MotherboardTick+0x13c>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
 8023376:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 802337a:	463a      	mov	r2, r7
 802337c:	4b1d      	ldr	r3, [pc, #116]	; (80233f4 <MotherboardTick+0x188>)
 802337e:	9302      	str	r3, [sp, #8]
 8023380:	4b23      	ldr	r3, [pc, #140]	; (8023410 <MotherboardTick+0x1a4>)
 8023382:	9301      	str	r3, [sp, #4]
 8023384:	4b1f      	ldr	r3, [pc, #124]	; (8023404 <MotherboardTick+0x198>)
 8023386:	9300      	str	r3, [sp, #0]
 8023388:	4b1d      	ldr	r3, [pc, #116]	; (8023400 <MotherboardTick+0x194>)
 802338a:	4922      	ldr	r1, [pc, #136]	; (8023414 <MotherboardTick+0x1a8>)
 802338c:	f7ff fa10 	bl	80227b0 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>
			mbctx.HeadService.Send(
 8023390:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8023394:	4619      	mov	r1, r3
 8023396:	4818      	ldr	r0, [pc, #96]	; (80233f8 <MotherboardTick+0x18c>)
 8023398:	f7fe fba2 	bl	8021ae0 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
 802339c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80233a0:	4618      	mov	r0, r3
 80233a2:	f7fd fed7 	bl	8021154 <_ZN8ResponceD1Ev>
							mbctx.IMU, mbctx.StrobeOffset, mbctx.StrobeFilter));
			break;
 80233a6:	bf00      	nop
		Request request = mbctx.HeadService.GetRequest();
 80233a8:	463b      	mov	r3, r7
 80233aa:	4618      	mov	r0, r3
 80233ac:	f7fd fe55 	bl	802105a <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 80233b0:	4816      	ldr	r0, [pc, #88]	; (802340c <MotherboardTick+0x1a0>)
 80233b2:	f7fd ff47 	bl	8021244 <_ZNK11QueueSender11HasResponceEv>
 80233b6:	4603      	mov	r3, r0
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	d010      	beq.n	80233de <MotherboardTick+0x172>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 80233bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80233c0:	4912      	ldr	r1, [pc, #72]	; (802340c <MotherboardTick+0x1a0>)
 80233c2:	4618      	mov	r0, r3
 80233c4:	f7fd ffce 	bl	8021364 <_ZN11QueueSender11GetResponceEv>
 80233c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80233cc:	4619      	mov	r1, r3
 80233ce:	480a      	ldr	r0, [pc, #40]	; (80233f8 <MotherboardTick+0x18c>)
 80233d0:	f7fe fb86 	bl	8021ae0 <_ZN13HeadInterface4SendERK8Responce>
 80233d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80233d8:	4618      	mov	r0, r3
 80233da:	f7fd febb 	bl	8021154 <_ZN8ResponceD1Ev>
	}

	mbctx.Body.ProcessPriorityRequest();
 80233de:	480b      	ldr	r0, [pc, #44]	; (802340c <MotherboardTick+0x1a0>)
 80233e0:	f7fd fff0 	bl	80213c4 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 80233e4:	4809      	ldr	r0, [pc, #36]	; (802340c <MotherboardTick+0x1a0>)
 80233e6:	f7fe f89d 	bl	8021524 <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 80233ea:	2300      	movs	r3, #0
}
 80233ec:	4618      	mov	r0, r3
 80233ee:	3770      	adds	r7, #112	; 0x70
 80233f0:	46bd      	mov	sp, r7
 80233f2:	bd80      	pop	{r7, pc}
 80233f4:	240014d4 	.word	0x240014d4
 80233f8:	240001d0 	.word	0x240001d0
 80233fc:	24000344 	.word	0x24000344
 8023400:	24000314 	.word	0x24000314
 8023404:	24000378 	.word	0x24000378
 8023408:	24000290 	.word	0x24000290
 802340c:	24000294 	.word	0x24000294
 8023410:	24001518 	.word	0x24001518
 8023414:	240014d0 	.word	0x240014d0

08023418 <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8023418:	b580      	push	{r7, lr}
 802341a:	af00      	add	r7, sp, #0
	static bool firstEntry = true;
	if (firstEntry) {
 802341c:	4b06      	ldr	r3, [pc, #24]	; (8023438 <MotherboardOnStrobe+0x20>)
 802341e:	781b      	ldrb	r3, [r3, #0]
 8023420:	2b00      	cmp	r3, #0
 8023422:	d003      	beq.n	802342c <MotherboardOnStrobe+0x14>
		firstEntry = false;
 8023424:	4b04      	ldr	r3, [pc, #16]	; (8023438 <MotherboardOnStrobe+0x20>)
 8023426:	2200      	movs	r2, #0
 8023428:	701a      	strb	r2, [r3, #0]
		return;
 802342a:	e003      	b.n	8023434 <MotherboardOnStrobe+0x1c>
	}

	mbctx.StrobeFilter.ProcessStrobe(mbctx.IMU);
 802342c:	4903      	ldr	r1, [pc, #12]	; (802343c <MotherboardOnStrobe+0x24>)
 802342e:	4804      	ldr	r0, [pc, #16]	; (8023440 <MotherboardOnStrobe+0x28>)
 8023430:	f7fe fe19 	bl	8022066 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>
}
 8023434:	bd80      	pop	{r7, pc}
 8023436:	bf00      	nop
 8023438:	24000000 	.word	0x24000000
 802343c:	24000378 	.word	0x24000378
 8023440:	240014d4 	.word	0x240014d4

08023444 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 8023444:	b580      	push	{r7, lr}
 8023446:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 8023448:	4802      	ldr	r0, [pc, #8]	; (8023454 <MotherboardOnBodyRecieveComplete+0x10>)
 802344a:	f7fe fa9d 	bl	8021988 <_ZN11QueueSender16ProcessResponcesEv>
}
 802344e:	bf00      	nop
 8023450:	bd80      	pop	{r7, pc}
 8023452:	bf00      	nop
 8023454:	24000294 	.word	0x24000294

08023458 <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 8023458:	b580      	push	{r7, lr}
 802345a:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 802345c:	4802      	ldr	r0, [pc, #8]	; (8023468 <MotherboardOnHeadServiceRecieveComplete+0x10>)
 802345e:	f7fe fc29 	bl	8021cb4 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 8023462:	bf00      	nop
 8023464:	bd80      	pop	{r7, pc}
 8023466:	bf00      	nop
 8023468:	240001d0 	.word	0x240001d0

0802346c <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 802346c:	b580      	push	{r7, lr}
 802346e:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 8023470:	4802      	ldr	r0, [pc, #8]	; (802347c <MotherboardOnHeadStreamRecieveComplete+0x10>)
 8023472:	f7fe fc1f 	bl	8021cb4 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 8023476:	bf00      	nop
 8023478:	bd80      	pop	{r7, pc}
 802347a:	bf00      	nop
 802347c:	24000230 	.word	0x24000230

08023480 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 8023480:	b580      	push	{r7, lr}
 8023482:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 8023484:	4802      	ldr	r0, [pc, #8]	; (8023490 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 8023486:	f7fe fc07 	bl	8021c98 <_ZN13HeadInterface14FinishTransmitEv>
}
 802348a:	bf00      	nop
 802348c:	bd80      	pop	{r7, pc}
 802348e:	bf00      	nop
 8023490:	240001d0 	.word	0x240001d0

08023494 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 8023494:	b580      	push	{r7, lr}
 8023496:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 8023498:	4802      	ldr	r0, [pc, #8]	; (80234a4 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 802349a:	f7fe fbfd 	bl	8021c98 <_ZN13HeadInterface14FinishTransmitEv>
}
 802349e:	bf00      	nop
 80234a0:	bd80      	pop	{r7, pc}
 80234a2:	bf00      	nop
 80234a4:	24000230 	.word	0x24000230

080234a8 <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 80234a8:	b580      	push	{r7, lr}
 80234aa:	af00      	add	r7, sp, #0
	mbctx.Body.FinishTransmit();
 80234ac:	4802      	ldr	r0, [pc, #8]	; (80234b8 <MotherboardOnBodyTransmitComplete+0x10>)
 80234ae:	f7fe fa75 	bl	802199c <_ZN11QueueSender14FinishTransmitEv>
}
 80234b2:	bf00      	nop
 80234b4:	bd80      	pop	{r7, pc}
 80234b6:	bf00      	nop
 80234b8:	24000294 	.word	0x24000294

080234bc <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 80234bc:	b580      	push	{r7, lr}
 80234be:	af00      	add	r7, sp, #0
	mbctx.Body.TickTimer();
 80234c0:	4802      	ldr	r0, [pc, #8]	; (80234cc <MotherboardOnBodyTimerTick+0x10>)
 80234c2:	f7fd fed0 	bl	8021266 <_ZN11QueueSender9TickTimerEv>
}
 80234c6:	bf00      	nop
 80234c8:	bd80      	pop	{r7, pc}
 80234ca:	bf00      	nop
 80234cc:	24000294 	.word	0x24000294

080234d0 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 80234d0:	b480      	push	{r7}
 80234d2:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 80234d4:	4b05      	ldr	r3, [pc, #20]	; (80234ec <MotherboardOnImuTimerTick+0x1c>)
 80234d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80234da:	2201      	movs	r2, #1
 80234dc:	f883 234c 	strb.w	r2, [r3, #844]	; 0x34c
}
 80234e0:	bf00      	nop
 80234e2:	46bd      	mov	sp, r7
 80234e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234e8:	4770      	bx	lr
 80234ea:	bf00      	nop
 80234ec:	240001d0 	.word	0x240001d0

080234f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80234f0:	b580      	push	{r7, lr}
 80234f2:	b082      	sub	sp, #8
 80234f4:	af00      	add	r7, sp, #0
 80234f6:	6078      	str	r0, [r7, #4]
 80234f8:	6878      	ldr	r0, [r7, #4]
 80234fa:	f000 fdf4 	bl	80240e6 <_ZNSaI7RequestED1Ev>
 80234fe:	687b      	ldr	r3, [r7, #4]
 8023500:	4618      	mov	r0, r3
 8023502:	3708      	adds	r7, #8
 8023504:	46bd      	mov	sp, r7
 8023506:	bd80      	pop	{r7, pc}

08023508 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8023508:	b580      	push	{r7, lr}
 802350a:	b082      	sub	sp, #8
 802350c:	af00      	add	r7, sp, #0
 802350e:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	4618      	mov	r0, r3
 8023514:	f000 fdd7 	bl	80240c6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023518:	2100      	movs	r1, #0
 802351a:	6878      	ldr	r0, [r7, #4]
 802351c:	f000 fdef 	bl	80240fe <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 8023520:	687b      	ldr	r3, [r7, #4]
 8023522:	4618      	mov	r0, r3
 8023524:	3708      	adds	r7, #8
 8023526:	46bd      	mov	sp, r7
 8023528:	bd80      	pop	{r7, pc}

0802352a <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 802352a:	b580      	push	{r7, lr}
 802352c:	b082      	sub	sp, #8
 802352e:	af00      	add	r7, sp, #0
 8023530:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023532:	687b      	ldr	r3, [r7, #4]
 8023534:	681b      	ldr	r3, [r3, #0]
 8023536:	2b00      	cmp	r3, #0
 8023538:	d010      	beq.n	802355c <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023542:	3304      	adds	r3, #4
 8023544:	461a      	mov	r2, r3
 8023546:	6878      	ldr	r0, [r7, #4]
 8023548:	f000 fe3f 	bl	80241ca <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	6819      	ldr	r1, [r3, #0]
 8023550:	687b      	ldr	r3, [r7, #4]
 8023552:	685b      	ldr	r3, [r3, #4]
 8023554:	461a      	mov	r2, r3
 8023556:	6878      	ldr	r0, [r7, #4]
 8023558:	f000 fe51 	bl	80241fe <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 802355c:	687b      	ldr	r3, [r7, #4]
 802355e:	4618      	mov	r0, r3
 8023560:	f7ff ffc6 	bl	80234f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 8023564:	687b      	ldr	r3, [r7, #4]
 8023566:	4618      	mov	r0, r3
 8023568:	3708      	adds	r7, #8
 802356a:	46bd      	mov	sp, r7
 802356c:	bd80      	pop	{r7, pc}

0802356e <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 802356e:	b580      	push	{r7, lr}
 8023570:	b08a      	sub	sp, #40	; 0x28
 8023572:	af00      	add	r7, sp, #0
 8023574:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023576:	f107 0308 	add.w	r3, r7, #8
 802357a:	6879      	ldr	r1, [r7, #4]
 802357c:	4618      	mov	r0, r3
 802357e:	f000 fe5a 	bl	8024236 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8023582:	f107 0318 	add.w	r3, r7, #24
 8023586:	6879      	ldr	r1, [r7, #4]
 8023588:	4618      	mov	r0, r3
 802358a:	f000 fe63 	bl	8024254 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	4618      	mov	r0, r3
 8023592:	f000 fe6e 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8023596:	4603      	mov	r3, r0
 8023598:	f107 0218 	add.w	r2, r7, #24
 802359c:	f107 0108 	add.w	r1, r7, #8
 80235a0:	6878      	ldr	r0, [r7, #4]
 80235a2:	f000 fe8d 	bl	80242c0 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 80235a6:	687b      	ldr	r3, [r7, #4]
 80235a8:	4618      	mov	r0, r3
 80235aa:	f7ff ffbe 	bl	802352a <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	4618      	mov	r0, r3
 80235b2:	3728      	adds	r7, #40	; 0x28
 80235b4:	46bd      	mov	sp, r7
 80235b6:	bd80      	pop	{r7, pc}

080235b8 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 80235b8:	b580      	push	{r7, lr}
 80235ba:	b082      	sub	sp, #8
 80235bc:	af00      	add	r7, sp, #0
 80235be:	6078      	str	r0, [r7, #4]
 80235c0:	687b      	ldr	r3, [r7, #4]
 80235c2:	4618      	mov	r0, r3
 80235c4:	f000 fea7 	bl	8024316 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	4618      	mov	r0, r3
 80235cc:	3708      	adds	r7, #8
 80235ce:	46bd      	mov	sp, r7
 80235d0:	bd80      	pop	{r7, pc}

080235d2 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 80235d2:	b580      	push	{r7, lr}
 80235d4:	b082      	sub	sp, #8
 80235d6:	af00      	add	r7, sp, #0
 80235d8:	6078      	str	r0, [r7, #4]
	: c() { }
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	4618      	mov	r0, r3
 80235de:	2328      	movs	r3, #40	; 0x28
 80235e0:	461a      	mov	r2, r3
 80235e2:	2100      	movs	r1, #0
 80235e4:	f01b ff88 	bl	803f4f8 <memset>
 80235e8:	687b      	ldr	r3, [r7, #4]
 80235ea:	4618      	mov	r0, r3
 80235ec:	f7ff ffe4 	bl	80235b8 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 80235f0:	687b      	ldr	r3, [r7, #4]
 80235f2:	4618      	mov	r0, r3
 80235f4:	3708      	adds	r7, #8
 80235f6:	46bd      	mov	sp, r7
 80235f8:	bd80      	pop	{r7, pc}

080235fa <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 80235fa:	b580      	push	{r7, lr}
 80235fc:	b08a      	sub	sp, #40	; 0x28
 80235fe:	af00      	add	r7, sp, #0
 8023600:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023602:	f107 0308 	add.w	r3, r7, #8
 8023606:	6879      	ldr	r1, [r7, #4]
 8023608:	4618      	mov	r0, r3
 802360a:	f000 feb7 	bl	802437c <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 802360e:	f107 0318 	add.w	r3, r7, #24
 8023612:	6879      	ldr	r1, [r7, #4]
 8023614:	4618      	mov	r0, r3
 8023616:	f000 fec0 	bl	802439a <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 802361a:	687b      	ldr	r3, [r7, #4]
 802361c:	4618      	mov	r0, r3
 802361e:	f000 fecb 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8023622:	4603      	mov	r3, r0
 8023624:	f107 0218 	add.w	r2, r7, #24
 8023628:	f107 0108 	add.w	r1, r7, #8
 802362c:	6878      	ldr	r0, [r7, #4]
 802362e:	f000 feea 	bl	8024406 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8023632:	687b      	ldr	r3, [r7, #4]
 8023634:	4618      	mov	r0, r3
 8023636:	f000 fe7f 	bl	8024338 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 802363a:	687b      	ldr	r3, [r7, #4]
 802363c:	4618      	mov	r0, r3
 802363e:	3728      	adds	r7, #40	; 0x28
 8023640:	46bd      	mov	sp, r7
 8023642:	bd80      	pop	{r7, pc}

08023644 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8023644:	b580      	push	{r7, lr}
 8023646:	b082      	sub	sp, #8
 8023648:	af00      	add	r7, sp, #0
 802364a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802364c:	6878      	ldr	r0, [r7, #4]
 802364e:	f000 faa7 	bl	8023ba0 <_ZNSaIhEC1Ev>
 8023652:	687b      	ldr	r3, [r7, #4]
 8023654:	4618      	mov	r0, r3
 8023656:	f000 fef5 	bl	8024444 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	4618      	mov	r0, r3
 802365e:	3708      	adds	r7, #8
 8023660:	46bd      	mov	sp, r7
 8023662:	bd80      	pop	{r7, pc}

08023664 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8023664:	b580      	push	{r7, lr}
 8023666:	b082      	sub	sp, #8
 8023668:	af00      	add	r7, sp, #0
 802366a:	6078      	str	r0, [r7, #4]
 802366c:	6878      	ldr	r0, [r7, #4]
 802366e:	f000 fefd 	bl	802446c <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8023672:	687b      	ldr	r3, [r7, #4]
 8023674:	4618      	mov	r0, r3
 8023676:	3708      	adds	r7, #8
 8023678:	46bd      	mov	sp, r7
 802367a:	bd80      	pop	{r7, pc}

0802367c <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 802367c:	b580      	push	{r7, lr}
 802367e:	b082      	sub	sp, #8
 8023680:	af00      	add	r7, sp, #0
 8023682:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	689a      	ldr	r2, [r3, #8]
 802368c:	687b      	ldr	r3, [r7, #4]
 802368e:	681b      	ldr	r3, [r3, #0]
 8023690:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8023692:	461a      	mov	r2, r3
 8023694:	6878      	ldr	r0, [r7, #4]
 8023696:	f000 fef4 	bl	8024482 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	4618      	mov	r0, r3
 802369e:	f7fd fca9 	bl	8020ff4 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80236a2:	687b      	ldr	r3, [r7, #4]
 80236a4:	4618      	mov	r0, r3
 80236a6:	3708      	adds	r7, #8
 80236a8:	46bd      	mov	sp, r7
 80236aa:	bd80      	pop	{r7, pc}

080236ac <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80236ac:	b5b0      	push	{r4, r5, r7, lr}
 80236ae:	b082      	sub	sp, #8
 80236b0:	af00      	add	r7, sp, #0
 80236b2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	681c      	ldr	r4, [r3, #0]
 80236b8:	687b      	ldr	r3, [r7, #4]
 80236ba:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	4618      	mov	r0, r3
 80236c0:	f000 fef2 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80236c4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80236c6:	461a      	mov	r2, r3
 80236c8:	4629      	mov	r1, r5
 80236ca:	4620      	mov	r0, r4
 80236cc:	f000 fef7 	bl	80244be <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80236d0:	687b      	ldr	r3, [r7, #4]
 80236d2:	4618      	mov	r0, r3
 80236d4:	f7ff ffd2 	bl	802367c <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80236d8:	687b      	ldr	r3, [r7, #4]
 80236da:	4618      	mov	r0, r3
 80236dc:	3708      	adds	r7, #8
 80236de:	46bd      	mov	sp, r7
 80236e0:	bdb0      	pop	{r4, r5, r7, pc}

080236e2 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80236e2:	b480      	push	{r7}
 80236e4:	b083      	sub	sp, #12
 80236e6:	af00      	add	r7, sp, #0
 80236e8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80236ea:	687b      	ldr	r3, [r7, #4]
 80236ec:	4618      	mov	r0, r3
 80236ee:	370c      	adds	r7, #12
 80236f0:	46bd      	mov	sp, r7
 80236f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236f6:	4770      	bx	lr

080236f8 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 80236f8:	b5b0      	push	{r4, r5, r7, lr}
 80236fa:	b082      	sub	sp, #8
 80236fc:	af00      	add	r7, sp, #0
 80236fe:	6078      	str	r0, [r7, #4]
 8023700:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8023702:	687b      	ldr	r3, [r7, #4]
 8023704:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	6a1b      	ldr	r3, [r3, #32]
 802370a:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 802370c:	429a      	cmp	r2, r3
 802370e:	d012      	beq.n	8023736 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8023710:	687c      	ldr	r4, [r7, #4]
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	699d      	ldr	r5, [r3, #24]
 8023716:	6838      	ldr	r0, [r7, #0]
 8023718:	f000 fedf 	bl	80244da <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 802371c:	4603      	mov	r3, r0
 802371e:	461a      	mov	r2, r3
 8023720:	4629      	mov	r1, r5
 8023722:	4620      	mov	r0, r4
 8023724:	f000 fee4 	bl	80244f0 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8023728:	687b      	ldr	r3, [r7, #4]
 802372a:	699b      	ldr	r3, [r3, #24]
 802372c:	f103 0214 	add.w	r2, r3, #20
 8023730:	687b      	ldr	r3, [r7, #4]
 8023732:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8023734:	e007      	b.n	8023746 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8023736:	6838      	ldr	r0, [r7, #0]
 8023738:	f000 fecf 	bl	80244da <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 802373c:	4603      	mov	r3, r0
 802373e:	4619      	mov	r1, r3
 8023740:	6878      	ldr	r0, [r7, #4]
 8023742:	f000 fee9 	bl	8024518 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8023746:	bf00      	nop
 8023748:	3708      	adds	r7, #8
 802374a:	46bd      	mov	sp, r7
 802374c:	bdb0      	pop	{r4, r5, r7, pc}

0802374e <_ZNSt6vectorIhSaIhEEaSEOS1_>:
       *  Afterwards @a __x is a valid, but unspecified %vector.
       *
       *  Whether the allocator is moved depends on the allocator traits.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 802374e:	b590      	push	{r4, r7, lr}
 8023750:	b085      	sub	sp, #20
 8023752:	af00      	add	r7, sp, #0
 8023754:	6078      	str	r0, [r7, #4]
 8023756:	6039      	str	r1, [r7, #0]
      {
	constexpr bool __move_storage =
 8023758:	2301      	movs	r3, #1
 802375a:	73fb      	strb	r3, [r7, #15]
	  _Alloc_traits::_S_propagate_on_move_assign()
	  || _Alloc_traits::_S_always_equal();
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 802375c:	6838      	ldr	r0, [r7, #0]
 802375e:	f000 ff1f 	bl	80245a0 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8023762:	4603      	mov	r3, r0
 8023764:	4622      	mov	r2, r4
 8023766:	4619      	mov	r1, r3
 8023768:	6878      	ldr	r0, [r7, #4]
 802376a:	f000 ff24 	bl	80245b6 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 802376e:	687b      	ldr	r3, [r7, #4]
      }
 8023770:	4618      	mov	r0, r3
 8023772:	3714      	adds	r7, #20
 8023774:	46bd      	mov	sp, r7
 8023776:	bd90      	pop	{r4, r7, pc}

08023778 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
	{ return c.emplace_back(std::forward<_Args>(__args)...); }
#else
      template<typename... _Args>
	void
	emplace(_Args&&... __args)
 8023778:	b590      	push	{r4, r7, lr}
 802377a:	b083      	sub	sp, #12
 802377c:	af00      	add	r7, sp, #0
 802377e:	6078      	str	r0, [r7, #4]
 8023780:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8023782:	687c      	ldr	r4, [r7, #4]
 8023784:	6838      	ldr	r0, [r7, #0]
 8023786:	f000 ff54 	bl	8024632 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 802378a:	4603      	mov	r3, r0
 802378c:	4619      	mov	r1, r3
 802378e:	4620      	mov	r0, r4
 8023790:	f000 ff5a 	bl	8024648 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8023794:	bf00      	nop
 8023796:	370c      	adds	r7, #12
 8023798:	46bd      	mov	sp, r7
 802379a:	bd90      	pop	{r4, r7, pc}

0802379c <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 802379c:	b580      	push	{r7, lr}
 802379e:	b082      	sub	sp, #8
 80237a0:	af00      	add	r7, sp, #0
 80237a2:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 80237a4:	687b      	ldr	r3, [r7, #4]
 80237a6:	4618      	mov	r0, r3
 80237a8:	f000 ff79 	bl	802469e <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 80237ac:	4603      	mov	r3, r0
 80237ae:	4618      	mov	r0, r3
 80237b0:	3708      	adds	r7, #8
 80237b2:	46bd      	mov	sp, r7
 80237b4:	bd80      	pop	{r7, pc}

080237b6 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 80237b6:	b580      	push	{r7, lr}
 80237b8:	b082      	sub	sp, #8
 80237ba:	af00      	add	r7, sp, #0
 80237bc:	6078      	str	r0, [r7, #4]
	return c.front();
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	4618      	mov	r0, r3
 80237c2:	f000 ff7e 	bl	80246c2 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 80237c6:	4603      	mov	r3, r0
      }
 80237c8:	4618      	mov	r0, r3
 80237ca:	3708      	adds	r7, #8
 80237cc:	46bd      	mov	sp, r7
 80237ce:	bd80      	pop	{r7, pc}

080237d0 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80237d0:	b480      	push	{r7}
 80237d2:	b083      	sub	sp, #12
 80237d4:	af00      	add	r7, sp, #0
 80237d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80237d8:	687b      	ldr	r3, [r7, #4]
 80237da:	4618      	mov	r0, r3
 80237dc:	370c      	adds	r7, #12
 80237de:	46bd      	mov	sp, r7
 80237e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237e4:	4770      	bx	lr

080237e6 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 80237e6:	b590      	push	{r4, r7, lr}
 80237e8:	b083      	sub	sp, #12
 80237ea:	af00      	add	r7, sp, #0
 80237ec:	6078      	str	r0, [r7, #4]
 80237ee:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 80237f0:	6838      	ldr	r0, [r7, #0]
 80237f2:	f000 ff7a 	bl	80246ea <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 80237f6:	4603      	mov	r3, r0
 80237f8:	4619      	mov	r1, r3
 80237fa:	6878      	ldr	r0, [r7, #4]
 80237fc:	f000 ff80 	bl	8024700 <_ZNSaIhEC1ERKS_>
 8023800:	687c      	ldr	r4, [r7, #4]
 8023802:	6838      	ldr	r0, [r7, #0]
 8023804:	f000 ff71 	bl	80246ea <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8023808:	4603      	mov	r3, r0
 802380a:	4619      	mov	r1, r3
 802380c:	4620      	mov	r0, r4
 802380e:	f000 ff85 	bl	802471c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8023812:	687b      	ldr	r3, [r7, #4]
 8023814:	4618      	mov	r0, r3
 8023816:	370c      	adds	r7, #12
 8023818:	46bd      	mov	sp, r7
 802381a:	bd90      	pop	{r4, r7, pc}

0802381c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 802381c:	b580      	push	{r7, lr}
 802381e:	b082      	sub	sp, #8
 8023820:	af00      	add	r7, sp, #0
 8023822:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8023824:	687b      	ldr	r3, [r7, #4]
 8023826:	4618      	mov	r0, r3
 8023828:	f000 ff9b 	bl	8024762 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 802382c:	bf00      	nop
 802382e:	3708      	adds	r7, #8
 8023830:	46bd      	mov	sp, r7
 8023832:	bd80      	pop	{r7, pc}

08023834 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8023834:	b580      	push	{r7, lr}
 8023836:	b082      	sub	sp, #8
 8023838:	af00      	add	r7, sp, #0
 802383a:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 802383c:	687b      	ldr	r3, [r7, #4]
 802383e:	681b      	ldr	r3, [r3, #0]
 8023840:	4619      	mov	r1, r3
 8023842:	6878      	ldr	r0, [r7, #4]
 8023844:	f000 ffb1 	bl	80247aa <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8023848:	4603      	mov	r3, r0
 802384a:	4618      	mov	r0, r3
 802384c:	3708      	adds	r7, #8
 802384e:	46bd      	mov	sp, r7
 8023850:	bd80      	pop	{r7, pc}

08023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023852:	b480      	push	{r7}
 8023854:	b083      	sub	sp, #12
 8023856:	af00      	add	r7, sp, #0
 8023858:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 802385a:	687b      	ldr	r3, [r7, #4]
 802385c:	685a      	ldr	r2, [r3, #4]
 802385e:	687b      	ldr	r3, [r7, #4]
 8023860:	681b      	ldr	r3, [r3, #0]
 8023862:	1ad3      	subs	r3, r2, r3
 8023864:	4618      	mov	r0, r3
 8023866:	370c      	adds	r7, #12
 8023868:	46bd      	mov	sp, r7
 802386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802386e:	4770      	bx	lr

08023870 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8023870:	b580      	push	{r7, lr}
 8023872:	b082      	sub	sp, #8
 8023874:	af00      	add	r7, sp, #0
 8023876:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	f103 0218 	add.w	r2, r3, #24
 802387e:	687b      	ldr	r3, [r7, #4]
 8023880:	3308      	adds	r3, #8
 8023882:	4619      	mov	r1, r3
 8023884:	4610      	mov	r0, r2
 8023886:	f000 ff9c 	bl	80247c2 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 802388a:	4603      	mov	r3, r0
 802388c:	4618      	mov	r0, r3
 802388e:	3708      	adds	r7, #8
 8023890:	46bd      	mov	sp, r7
 8023892:	bd80      	pop	{r7, pc}

08023894 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8023894:	b580      	push	{r7, lr}
 8023896:	b086      	sub	sp, #24
 8023898:	af00      	add	r7, sp, #0
 802389a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 802389c:	f107 0308 	add.w	r3, r7, #8
 80238a0:	6879      	ldr	r1, [r7, #4]
 80238a2:	4618      	mov	r0, r3
 80238a4:	f000 fcc7 	bl	8024236 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80238a8:	f107 0308 	add.w	r3, r7, #8
 80238ac:	4618      	mov	r0, r3
 80238ae:	f000 ff9c 	bl	80247ea <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 80238b2:	4603      	mov	r3, r0
      }
 80238b4:	4618      	mov	r0, r3
 80238b6:	3718      	adds	r7, #24
 80238b8:	46bd      	mov	sp, r7
 80238ba:	bd80      	pop	{r7, pc}

080238bc <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80238bc:	b580      	push	{r7, lr}
 80238be:	b082      	sub	sp, #8
 80238c0:	af00      	add	r7, sp, #0
 80238c2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	4618      	mov	r0, r3
 80238c8:	f000 ffb5 	bl	8024836 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80238cc:	4603      	mov	r3, r0
 80238ce:	4618      	mov	r0, r3
 80238d0:	f000 ff97 	bl	8024802 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 80238d4:	4603      	mov	r3, r0
 80238d6:	4618      	mov	r0, r3
 80238d8:	3708      	adds	r7, #8
 80238da:	46bd      	mov	sp, r7
 80238dc:	bd80      	pop	{r7, pc}

080238de <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80238de:	b580      	push	{r7, lr}
 80238e0:	b082      	sub	sp, #8
 80238e2:	af00      	add	r7, sp, #0
 80238e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	f103 0218 	add.w	r2, r3, #24
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	3308      	adds	r3, #8
 80238f0:	4619      	mov	r1, r3
 80238f2:	4610      	mov	r0, r2
 80238f4:	f000 ffaa 	bl	802484c <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 80238f8:	4603      	mov	r3, r0
 80238fa:	4618      	mov	r0, r3
 80238fc:	3708      	adds	r7, #8
 80238fe:	46bd      	mov	sp, r7
 8023900:	bd80      	pop	{r7, pc}

08023902 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8023902:	b580      	push	{r7, lr}
 8023904:	b082      	sub	sp, #8
 8023906:	af00      	add	r7, sp, #0
 8023908:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 802390a:	687b      	ldr	r3, [r7, #4]
 802390c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 802390e:	687b      	ldr	r3, [r7, #4]
 8023910:	691b      	ldr	r3, [r3, #16]
 8023912:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 8023914:	429a      	cmp	r2, r3
 8023916:	d011      	beq.n	802393c <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	4618      	mov	r0, r3
 802391c:	f000 fca9 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8023920:	4602      	mov	r2, r0
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	689b      	ldr	r3, [r3, #8]
 8023926:	4619      	mov	r1, r3
 8023928:	4610      	mov	r0, r2
 802392a:	f000 ffbb 	bl	80248a4 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	689b      	ldr	r3, [r3, #8]
 8023932:	f103 0214 	add.w	r2, r3, #20
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 802393a:	e002      	b.n	8023942 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 802393c:	6878      	ldr	r0, [r7, #4]
 802393e:	f000 ffbe 	bl	80248be <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 8023942:	bf00      	nop
 8023944:	3708      	adds	r7, #8
 8023946:	46bd      	mov	sp, r7
 8023948:	bd80      	pop	{r7, pc}

0802394a <_ZNSt6vectorIhSaIhEE6resizeEj>:
      resize(size_type __new_size)
 802394a:	b580      	push	{r7, lr}
 802394c:	b082      	sub	sp, #8
 802394e:	af00      	add	r7, sp, #0
 8023950:	6078      	str	r0, [r7, #4]
 8023952:	6039      	str	r1, [r7, #0]
	if (__new_size > size())
 8023954:	6878      	ldr	r0, [r7, #4]
 8023956:	f7ff ff7c 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 802395a:	4602      	mov	r2, r0
 802395c:	683b      	ldr	r3, [r7, #0]
 802395e:	4293      	cmp	r3, r2
 8023960:	bf8c      	ite	hi
 8023962:	2301      	movhi	r3, #1
 8023964:	2300      	movls	r3, #0
 8023966:	b2db      	uxtb	r3, r3
 8023968:	2b00      	cmp	r3, #0
 802396a:	d00a      	beq.n	8023982 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 802396c:	6878      	ldr	r0, [r7, #4]
 802396e:	f7ff ff70 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023972:	4602      	mov	r2, r0
 8023974:	683b      	ldr	r3, [r7, #0]
 8023976:	1a9b      	subs	r3, r3, r2
 8023978:	4619      	mov	r1, r3
 802397a:	6878      	ldr	r0, [r7, #4]
 802397c:	f000 ffde 	bl	802493c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
      }
 8023980:	e013      	b.n	80239aa <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8023982:	6878      	ldr	r0, [r7, #4]
 8023984:	f7ff ff65 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023988:	4602      	mov	r2, r0
 802398a:	683b      	ldr	r3, [r7, #0]
 802398c:	4293      	cmp	r3, r2
 802398e:	bf34      	ite	cc
 8023990:	2301      	movcc	r3, #1
 8023992:	2300      	movcs	r3, #0
 8023994:	b2db      	uxtb	r3, r3
 8023996:	2b00      	cmp	r3, #0
 8023998:	d007      	beq.n	80239aa <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	681a      	ldr	r2, [r3, #0]
 802399e:	683b      	ldr	r3, [r7, #0]
 80239a0:	4413      	add	r3, r2
 80239a2:	4619      	mov	r1, r3
 80239a4:	6878      	ldr	r0, [r7, #4]
 80239a6:	f001 f881 	bl	8024aac <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 80239aa:	bf00      	nop
 80239ac:	3708      	adds	r7, #8
 80239ae:	46bd      	mov	sp, r7
 80239b0:	bd80      	pop	{r7, pc}

080239b2 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>:
    static constexpr bool _S_propagate_on_copy_assign()
 80239b2:	b480      	push	{r7}
 80239b4:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 80239b6:	2300      	movs	r3, #0
 80239b8:	4618      	mov	r0, r3
 80239ba:	46bd      	mov	sp, r7
 80239bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239c0:	4770      	bx	lr

080239c2 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 80239c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239c4:	b085      	sub	sp, #20
 80239c6:	af00      	add	r7, sp, #0
 80239c8:	6078      	str	r0, [r7, #4]
 80239ca:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 80239cc:	683a      	ldr	r2, [r7, #0]
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	429a      	cmp	r2, r3
 80239d2:	f000 80e0 	beq.w	8023b96 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1d4>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 80239d6:	f7ff ffec 	bl	80239b2 <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE27_S_propagate_on_copy_assignEv>
 80239da:	4603      	mov	r3, r0
 80239dc:	2b00      	cmp	r3, #0
 80239de:	d042      	beq.n	8023a66 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xa4>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 80239e0:	f7fd fb94 	bl	802110c <_ZN9__gnu_cxx14__alloc_traitsISaIhEhE15_S_always_equalEv>
 80239e4:	4603      	mov	r3, r0
 80239e6:	f083 0301 	eor.w	r3, r3, #1
 80239ea:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 80239ec:	2b00      	cmp	r3, #0
 80239ee:	d012      	beq.n	8023a16 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	4618      	mov	r0, r3
 80239f4:	f000 fd58 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80239f8:	4604      	mov	r4, r0
 80239fa:	683b      	ldr	r3, [r7, #0]
 80239fc:	4618      	mov	r0, r3
 80239fe:	f001 f875 	bl	8024aec <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023a02:	4603      	mov	r3, r0
 8023a04:	4619      	mov	r1, r3
 8023a06:	4620      	mov	r0, r4
 8023a08:	f001 f87b 	bl	8024b02 <_ZStneRKSaIhES1_>
 8023a0c:	4603      	mov	r3, r0
 8023a0e:	2b00      	cmp	r3, #0
 8023a10:	d001      	beq.n	8023a16 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x54>
 8023a12:	2301      	movs	r3, #1
 8023a14:	e000      	b.n	8023a18 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x56>
 8023a16:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 8023a18:	2b00      	cmp	r3, #0
 8023a1a:	d016      	beq.n	8023a4a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x88>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 8023a1c:	6878      	ldr	r0, [r7, #4]
 8023a1e:	f001 f87c 	bl	8024b1a <_ZNSt6vectorIhSaIhEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 8023a22:	6878      	ldr	r0, [r7, #4]
 8023a24:	687b      	ldr	r3, [r7, #4]
 8023a26:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 8023a2c:	687b      	ldr	r3, [r7, #4]
 8023a2e:	681b      	ldr	r3, [r3, #0]
 8023a30:	1ad3      	subs	r3, r2, r3
		  _M_deallocate(this->_M_impl._M_start,
 8023a32:	461a      	mov	r2, r3
 8023a34:	f000 fd25 	bl	8024482 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  this->_M_impl._M_start = nullptr;
 8023a38:	687b      	ldr	r3, [r7, #4]
 8023a3a:	2200      	movs	r2, #0
 8023a3c:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	2200      	movs	r2, #0
 8023a42:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	2200      	movs	r2, #0
 8023a48:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	f000 fd2b 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023a52:	4604      	mov	r4, r0
				   __x._M_get_Tp_allocator());
 8023a54:	683b      	ldr	r3, [r7, #0]
 8023a56:	4618      	mov	r0, r3
 8023a58:	f001 f848 	bl	8024aec <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023a5c:	4603      	mov	r3, r0
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 8023a5e:	4619      	mov	r1, r3
 8023a60:	4620      	mov	r0, r4
 8023a62:	f001 f868 	bl	8024b36 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>
	    }
#endif
	  const size_type __xlen = __x.size();
 8023a66:	6838      	ldr	r0, [r7, #0]
 8023a68:	f7ff fef3 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023a6c:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8023a6e:	6878      	ldr	r0, [r7, #4]
 8023a70:	f001 f86f 	bl	8024b52 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8023a74:	4602      	mov	r2, r0
 8023a76:	68fb      	ldr	r3, [r7, #12]
 8023a78:	4293      	cmp	r3, r2
 8023a7a:	bf8c      	ite	hi
 8023a7c:	2301      	movhi	r3, #1
 8023a7e:	2300      	movls	r3, #0
 8023a80:	b2db      	uxtb	r3, r3
 8023a82:	2b00      	cmp	r3, #0
 8023a84:	d030      	beq.n	8023ae8 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x126>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8023a86:	6838      	ldr	r0, [r7, #0]
 8023a88:	f001 f872 	bl	8024b70 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8023a8c:	4604      	mov	r4, r0
 8023a8e:	6838      	ldr	r0, [r7, #0]
 8023a90:	f001 f87e 	bl	8024b90 <_ZNKSt6vectorIhSaIhEE3endEv>
 8023a94:	4603      	mov	r3, r0
 8023a96:	4622      	mov	r2, r4
 8023a98:	68f9      	ldr	r1, [r7, #12]
 8023a9a:	6878      	ldr	r0, [r7, #4]
 8023a9c:	f001 f889 	bl	8024bb2 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8023aa0:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8023aa2:	687b      	ldr	r3, [r7, #4]
 8023aa4:	681c      	ldr	r4, [r3, #0]
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	4618      	mov	r0, r3
 8023aae:	f000 fcfb 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023ab2:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8023ab4:	461a      	mov	r2, r3
 8023ab6:	4629      	mov	r1, r5
 8023ab8:	4620      	mov	r0, r4
 8023aba:	f000 fd00 	bl	80244be <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8023abe:	6878      	ldr	r0, [r7, #4]
 8023ac0:	687b      	ldr	r3, [r7, #4]
 8023ac2:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8023ac4:	687b      	ldr	r3, [r7, #4]
 8023ac6:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8023ac8:	687b      	ldr	r3, [r7, #4]
 8023aca:	681b      	ldr	r3, [r3, #0]
 8023acc:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8023ace:	461a      	mov	r2, r3
 8023ad0:	f000 fcd7 	bl	8024482 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8023ad4:	687b      	ldr	r3, [r7, #4]
 8023ad6:	68ba      	ldr	r2, [r7, #8]
 8023ad8:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	681a      	ldr	r2, [r3, #0]
 8023ade:	68fb      	ldr	r3, [r7, #12]
 8023ae0:	441a      	add	r2, r3
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	609a      	str	r2, [r3, #8]
 8023ae6:	e050      	b.n	8023b8a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else if (size() >= __xlen)
 8023ae8:	6878      	ldr	r0, [r7, #4]
 8023aea:	f7ff feb2 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023aee:	4602      	mov	r2, r0
 8023af0:	68fb      	ldr	r3, [r7, #12]
 8023af2:	4293      	cmp	r3, r2
 8023af4:	bf94      	ite	ls
 8023af6:	2301      	movls	r3, #1
 8023af8:	2300      	movhi	r3, #0
 8023afa:	b2db      	uxtb	r3, r3
 8023afc:	2b00      	cmp	r3, #0
 8023afe:	d020      	beq.n	8023b42 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x180>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8023b00:	6838      	ldr	r0, [r7, #0]
 8023b02:	f001 f835 	bl	8024b70 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8023b06:	4604      	mov	r4, r0
 8023b08:	6838      	ldr	r0, [r7, #0]
 8023b0a:	f001 f841 	bl	8024b90 <_ZNKSt6vectorIhSaIhEE3endEv>
 8023b0e:	4605      	mov	r5, r0
 8023b10:	6878      	ldr	r0, [r7, #4]
 8023b12:	f001 f86a 	bl	8024bea <_ZNSt6vectorIhSaIhEE5beginEv>
 8023b16:	4603      	mov	r3, r0
 8023b18:	461a      	mov	r2, r3
 8023b1a:	4629      	mov	r1, r5
 8023b1c:	4620      	mov	r0, r4
 8023b1e:	f001 f874 	bl	8024c0a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8023b22:	4604      	mov	r4, r0
 8023b24:	6878      	ldr	r0, [r7, #4]
 8023b26:	f001 f888 	bl	8024c3a <_ZNSt6vectorIhSaIhEE3endEv>
 8023b2a:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8023b2c:	687b      	ldr	r3, [r7, #4]
 8023b2e:	4618      	mov	r0, r3
 8023b30:	f000 fcba 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023b34:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8023b36:	461a      	mov	r2, r3
 8023b38:	4629      	mov	r1, r5
 8023b3a:	4620      	mov	r0, r4
 8023b3c:	f001 f88e 	bl	8024c5c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8023b40:	e023      	b.n	8023b8a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x1c8>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8023b42:	683b      	ldr	r3, [r7, #0]
 8023b44:	681d      	ldr	r5, [r3, #0]
 8023b46:	683b      	ldr	r3, [r7, #0]
 8023b48:	681c      	ldr	r4, [r3, #0]
 8023b4a:	6878      	ldr	r0, [r7, #4]
 8023b4c:	f7ff fe81 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023b50:	4603      	mov	r3, r0
 8023b52:	18e1      	adds	r1, r4, r3
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	681b      	ldr	r3, [r3, #0]
 8023b58:	461a      	mov	r2, r3
 8023b5a:	4628      	mov	r0, r5
 8023b5c:	f001 f88c 	bl	8024c78 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8023b60:	683b      	ldr	r3, [r7, #0]
 8023b62:	681c      	ldr	r4, [r3, #0]
 8023b64:	6878      	ldr	r0, [r7, #4]
 8023b66:	f7ff fe74 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8023b6a:	4603      	mov	r3, r0
 8023b6c:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8023b6e:	683b      	ldr	r3, [r7, #0]
 8023b70:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8023b72:	687b      	ldr	r3, [r7, #4]
 8023b74:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8023b76:	687b      	ldr	r3, [r7, #4]
 8023b78:	4618      	mov	r0, r3
 8023b7a:	f000 fc95 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8023b7e:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8023b80:	4632      	mov	r2, r6
 8023b82:	4629      	mov	r1, r5
 8023b84:	4620      	mov	r0, r4
 8023b86:	f001 f88f 	bl	8024ca8 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	681a      	ldr	r2, [r3, #0]
 8023b8e:	68fb      	ldr	r3, [r7, #12]
 8023b90:	441a      	add	r2, r3
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8023b96:	687b      	ldr	r3, [r7, #4]
    }
 8023b98:	4618      	mov	r0, r3
 8023b9a:	3714      	adds	r7, #20
 8023b9c:	46bd      	mov	sp, r7
 8023b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023ba0 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8023ba0:	b580      	push	{r7, lr}
 8023ba2:	b082      	sub	sp, #8
 8023ba4:	af00      	add	r7, sp, #0
 8023ba6:	6078      	str	r0, [r7, #4]
 8023ba8:	6878      	ldr	r0, [r7, #4]
 8023baa:	f001 f88e 	bl	8024cca <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8023bae:	687b      	ldr	r3, [r7, #4]
 8023bb0:	4618      	mov	r0, r3
 8023bb2:	3708      	adds	r7, #8
 8023bb4:	46bd      	mov	sp, r7
 8023bb6:	bd80      	pop	{r7, pc}

08023bb8 <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
      vector(initializer_list<value_type> __l,
 8023bb8:	b5b0      	push	{r4, r5, r7, lr}
 8023bba:	b086      	sub	sp, #24
 8023bbc:	af00      	add	r7, sp, #0
 8023bbe:	60f8      	str	r0, [r7, #12]
 8023bc0:	1d38      	adds	r0, r7, #4
 8023bc2:	e880 0006 	stmia.w	r0, {r1, r2}
 8023bc6:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 8023bc8:	68fb      	ldr	r3, [r7, #12]
 8023bca:	6839      	ldr	r1, [r7, #0]
 8023bcc:	4618      	mov	r0, r3
 8023bce:	f001 f887 	bl	8024ce0 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
	_M_range_initialize(__l.begin(), __l.end(),
 8023bd2:	1d3b      	adds	r3, r7, #4
 8023bd4:	4618      	mov	r0, r3
 8023bd6:	f001 f892 	bl	8024cfe <_ZNKSt16initializer_listIhE5beginEv>
 8023bda:	4604      	mov	r4, r0
 8023bdc:	1d3b      	adds	r3, r7, #4
 8023bde:	4618      	mov	r0, r3
 8023be0:	f001 f899 	bl	8024d16 <_ZNKSt16initializer_listIhE3endEv>
 8023be4:	4602      	mov	r2, r0
 8023be6:	462b      	mov	r3, r5
 8023be8:	4621      	mov	r1, r4
 8023bea:	68f8      	ldr	r0, [r7, #12]
 8023bec:	f001 f8a4 	bl	8024d38 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
      }
 8023bf0:	68fb      	ldr	r3, [r7, #12]
 8023bf2:	4618      	mov	r0, r3
 8023bf4:	3718      	adds	r7, #24
 8023bf6:	46bd      	mov	sp, r7
 8023bf8:	bdb0      	pop	{r4, r5, r7, pc}

08023bfa <_ZNKSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023bfa:	b480      	push	{r7}
 8023bfc:	b083      	sub	sp, #12
 8023bfe:	af00      	add	r7, sp, #0
 8023c00:	6078      	str	r0, [r7, #4]
 8023c02:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	681a      	ldr	r2, [r3, #0]
 8023c08:	683b      	ldr	r3, [r7, #0]
 8023c0a:	4413      	add	r3, r2
      }
 8023c0c:	4618      	mov	r0, r3
 8023c0e:	370c      	adds	r7, #12
 8023c10:	46bd      	mov	sp, r7
 8023c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c16:	4770      	bx	lr

08023c18 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE4sizeEv>:
      size() const
 8023c18:	b580      	push	{r7, lr}
 8023c1a:	b082      	sub	sp, #8
 8023c1c:	af00      	add	r7, sp, #0
 8023c1e:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	4618      	mov	r0, r3
 8023c24:	f001 f8c0 	bl	8024da8 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8023c28:	4603      	mov	r3, r0
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	3708      	adds	r7, #8
 8023c2e:	46bd      	mov	sp, r7
 8023c30:	bd80      	pop	{r7, pc}

08023c32 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 8023c32:	b580      	push	{r7, lr}
 8023c34:	b082      	sub	sp, #8
 8023c36:	af00      	add	r7, sp, #0
 8023c38:	6078      	str	r0, [r7, #4]
	: c() { }
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	4618      	mov	r0, r3
 8023c3e:	2328      	movs	r3, #40	; 0x28
 8023c40:	461a      	mov	r2, r3
 8023c42:	2100      	movs	r1, #0
 8023c44:	f01b fc58 	bl	803f4f8 <memset>
 8023c48:	687b      	ldr	r3, [r7, #4]
 8023c4a:	4618      	mov	r0, r3
 8023c4c:	f7fd f9b8 	bl	8020fc0 <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	4618      	mov	r0, r3
 8023c54:	3708      	adds	r7, #8
 8023c56:	46bd      	mov	sp, r7
 8023c58:	bd80      	pop	{r7, pc}

08023c5a <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8023c5a:	b580      	push	{r7, lr}
 8023c5c:	b082      	sub	sp, #8
 8023c5e:	af00      	add	r7, sp, #0
 8023c60:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	4618      	mov	r0, r3
 8023c66:	f7ff fe03 	bl	8023870 <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8023c6a:	4603      	mov	r3, r0
 8023c6c:	4618      	mov	r0, r3
 8023c6e:	3708      	adds	r7, #8
 8023c70:	46bd      	mov	sp, r7
 8023c72:	bd80      	pop	{r7, pc}

08023c74 <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8023c74:	b580      	push	{r7, lr}
 8023c76:	b082      	sub	sp, #8
 8023c78:	af00      	add	r7, sp, #0
 8023c7a:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8023c7c:	687b      	ldr	r3, [r7, #4]
 8023c7e:	681b      	ldr	r3, [r3, #0]
 8023c80:	4619      	mov	r1, r3
 8023c82:	6878      	ldr	r0, [r7, #4]
 8023c84:	f000 fd91 	bl	80247aa <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8023c88:	4603      	mov	r3, r0
 8023c8a:	4618      	mov	r0, r3
 8023c8c:	3708      	adds	r7, #8
 8023c8e:	46bd      	mov	sp, r7
 8023c90:	bd80      	pop	{r7, pc}

08023c92 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8023c92:	b580      	push	{r7, lr}
 8023c94:	b082      	sub	sp, #8
 8023c96:	af00      	add	r7, sp, #0
 8023c98:	6078      	str	r0, [r7, #4]
	return c.front();
 8023c9a:	687b      	ldr	r3, [r7, #4]
 8023c9c:	4618      	mov	r0, r3
 8023c9e:	f7ff fdf9 	bl	8023894 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8023ca2:	4603      	mov	r3, r0
      }
 8023ca4:	4618      	mov	r0, r3
 8023ca6:	3708      	adds	r7, #8
 8023ca8:	46bd      	mov	sp, r7
 8023caa:	bd80      	pop	{r7, pc}

08023cac <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE4sizeEv>:
      size() const
 8023cac:	b580      	push	{r7, lr}
 8023cae:	b082      	sub	sp, #8
 8023cb0:	af00      	add	r7, sp, #0
 8023cb2:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	4618      	mov	r0, r3
 8023cb8:	f7ff fe11 	bl	80238de <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8023cbc:	4603      	mov	r3, r0
 8023cbe:	4618      	mov	r0, r3
 8023cc0:	3708      	adds	r7, #8
 8023cc2:	46bd      	mov	sp, r7
 8023cc4:	bd80      	pop	{r7, pc}

08023cc6 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8023cc6:	b580      	push	{r7, lr}
 8023cc8:	b082      	sub	sp, #8
 8023cca:	af00      	add	r7, sp, #0
 8023ccc:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8023cce:	687b      	ldr	r3, [r7, #4]
 8023cd0:	4618      	mov	r0, r3
 8023cd2:	f7ff fe16 	bl	8023902 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8023cd6:	bf00      	nop
 8023cd8:	3708      	adds	r7, #8
 8023cda:	46bd      	mov	sp, r7
 8023cdc:	bd80      	pop	{r7, pc}

08023cde <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE7emplaceIJS0_EEEvDpOT_>:
	emplace(_Args&&... __args)
 8023cde:	b590      	push	{r4, r7, lr}
 8023ce0:	b083      	sub	sp, #12
 8023ce2:	af00      	add	r7, sp, #0
 8023ce4:	6078      	str	r0, [r7, #4]
 8023ce6:	6039      	str	r1, [r7, #0]
	{ c.emplace_back(std::forward<_Args>(__args)...); }
 8023ce8:	687c      	ldr	r4, [r7, #4]
 8023cea:	6838      	ldr	r0, [r7, #0]
 8023cec:	f000 fbf5 	bl	80244da <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8023cf0:	4603      	mov	r3, r0
 8023cf2:	4619      	mov	r1, r3
 8023cf4:	4620      	mov	r0, r4
 8023cf6:	f7ff fcff 	bl	80236f8 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8023cfa:	bf00      	nop
 8023cfc:	370c      	adds	r7, #12
 8023cfe:	46bd      	mov	sp, r7
 8023d00:	bd90      	pop	{r4, r7, pc}

08023d02 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
      operator=(initializer_list<value_type> __l)
 8023d02:	b5b0      	push	{r4, r5, r7, lr}
 8023d04:	b086      	sub	sp, #24
 8023d06:	af00      	add	r7, sp, #0
 8023d08:	60f8      	str	r0, [r7, #12]
 8023d0a:	1d3b      	adds	r3, r7, #4
 8023d0c:	e883 0006 	stmia.w	r3, {r1, r2}
	_M_assign_aux(__l.begin(), __l.end(),
 8023d10:	1d3b      	adds	r3, r7, #4
 8023d12:	4618      	mov	r0, r3
 8023d14:	f001 f85a 	bl	8024dcc <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023d18:	4604      	mov	r4, r0
 8023d1a:	1d3b      	adds	r3, r7, #4
 8023d1c:	4618      	mov	r0, r3
 8023d1e:	f001 f861 	bl	8024de4 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 8023d22:	4602      	mov	r2, r0
 8023d24:	462b      	mov	r3, r5
 8023d26:	4621      	mov	r1, r4
 8023d28:	68f8      	ldr	r0, [r7, #12]
 8023d2a:	f001 f870 	bl	8024e0e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
	return *this;
 8023d2e:	68fb      	ldr	r3, [r7, #12]
      }
 8023d30:	4618      	mov	r0, r3
 8023d32:	3718      	adds	r7, #24
 8023d34:	46bd      	mov	sp, r7
 8023d36:	bdb0      	pop	{r4, r5, r7, pc}

08023d38 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
      push_front(const value_type& __x)
 8023d38:	b580      	push	{r7, lr}
 8023d3a:	b082      	sub	sp, #8
 8023d3c:	af00      	add	r7, sp, #0
 8023d3e:	6078      	str	r0, [r7, #4]
 8023d40:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8023d42:	687b      	ldr	r3, [r7, #4]
 8023d44:	689a      	ldr	r2, [r3, #8]
 8023d46:	687b      	ldr	r3, [r7, #4]
 8023d48:	68db      	ldr	r3, [r3, #12]
 8023d4a:	429a      	cmp	r2, r3
 8023d4c:	d00e      	beq.n	8023d6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	    _Alloc_traits::construct(this->_M_impl,
 8023d4e:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8023d50:	687b      	ldr	r3, [r7, #4]
 8023d52:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8023d54:	3b14      	subs	r3, #20
 8023d56:	683a      	ldr	r2, [r7, #0]
 8023d58:	4619      	mov	r1, r3
 8023d5a:	f001 f8bd 	bl	8024ed8 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	689b      	ldr	r3, [r3, #8]
 8023d62:	f1a3 0214 	sub.w	r2, r3, #20
 8023d66:	687b      	ldr	r3, [r7, #4]
 8023d68:	609a      	str	r2, [r3, #8]
      }
 8023d6a:	e003      	b.n	8023d74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8023d6c:	6839      	ldr	r1, [r7, #0]
 8023d6e:	6878      	ldr	r0, [r7, #4]
 8023d70:	f001 f8c6 	bl	8024f00 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8023d74:	bf00      	nop
 8023d76:	3708      	adds	r7, #8
 8023d78:	46bd      	mov	sp, r7
 8023d7a:	bd80      	pop	{r7, pc}

08023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023d7c:	b580      	push	{r7, lr}
 8023d7e:	b082      	sub	sp, #8
 8023d80:	af00      	add	r7, sp, #0
 8023d82:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023d84:	687b      	ldr	r3, [r7, #4]
 8023d86:	f103 0218 	add.w	r2, r3, #24
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	3308      	adds	r3, #8
 8023d8e:	4619      	mov	r1, r3
 8023d90:	4610      	mov	r0, r2
 8023d92:	f001 f8fb 	bl	8024f8c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023d96:	4603      	mov	r3, r0
 8023d98:	4618      	mov	r0, r3
 8023d9a:	3708      	adds	r7, #8
 8023d9c:	46bd      	mov	sp, r7
 8023d9e:	bd80      	pop	{r7, pc}

08023da0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8023da0:	b580      	push	{r7, lr}
 8023da2:	b082      	sub	sp, #8
 8023da4:	af00      	add	r7, sp, #0
 8023da6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8023dac:	687b      	ldr	r3, [r7, #4]
 8023dae:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8023db0:	429a      	cmp	r2, r3
 8023db2:	d011      	beq.n	8023dd8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8023db4:	687b      	ldr	r3, [r7, #4]
 8023db6:	699b      	ldr	r3, [r3, #24]
 8023db8:	f1a3 0214 	sub.w	r2, r3, #20
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023dc0:	687b      	ldr	r3, [r7, #4]
 8023dc2:	4618      	mov	r0, r3
 8023dc4:	f001 f90e 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023dc8:	4602      	mov	r2, r0
 8023dca:	687b      	ldr	r3, [r7, #4]
 8023dcc:	699b      	ldr	r3, [r3, #24]
 8023dce:	4619      	mov	r1, r3
 8023dd0:	4610      	mov	r0, r2
 8023dd2:	f001 f912 	bl	8024ffa <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8023dd6:	e002      	b.n	8023dde <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8023dd8:	6878      	ldr	r0, [r7, #4]
 8023dda:	f001 f91b 	bl	8025014 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 8023dde:	bf00      	nop
 8023de0:	3708      	adds	r7, #8
 8023de2:	46bd      	mov	sp, r7
 8023de4:	bd80      	pop	{r7, pc}

08023de6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8023de6:	b580      	push	{r7, lr}
 8023de8:	b082      	sub	sp, #8
 8023dea:	af00      	add	r7, sp, #0
 8023dec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8023dee:	687b      	ldr	r3, [r7, #4]
 8023df0:	f103 0218 	add.w	r2, r3, #24
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	3308      	adds	r3, #8
 8023df8:	4619      	mov	r1, r3
 8023dfa:	4610      	mov	r0, r2
 8023dfc:	f001 f934 	bl	8025068 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023e00:	4603      	mov	r3, r0
 8023e02:	4618      	mov	r0, r3
 8023e04:	3708      	adds	r7, #8
 8023e06:	46bd      	mov	sp, r7
 8023e08:	bd80      	pop	{r7, pc}

08023e0a <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023e0a:	b580      	push	{r7, lr}
 8023e0c:	b082      	sub	sp, #8
 8023e0e:	af00      	add	r7, sp, #0
 8023e10:	6078      	str	r0, [r7, #4]
 8023e12:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	3308      	adds	r3, #8
 8023e18:	683a      	ldr	r2, [r7, #0]
 8023e1a:	4611      	mov	r1, r2
 8023e1c:	4618      	mov	r0, r3
 8023e1e:	f001 f937 	bl	8025090 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8023e22:	4603      	mov	r3, r0
      }
 8023e24:	4618      	mov	r0, r3
 8023e26:	3708      	adds	r7, #8
 8023e28:	46bd      	mov	sp, r7
 8023e2a:	bd80      	pop	{r7, pc}

08023e2c <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
      push(const value_type& __x)
 8023e2c:	b580      	push	{r7, lr}
 8023e2e:	b082      	sub	sp, #8
 8023e30:	af00      	add	r7, sp, #0
 8023e32:	6078      	str	r0, [r7, #4]
 8023e34:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8023e36:	687b      	ldr	r3, [r7, #4]
 8023e38:	6839      	ldr	r1, [r7, #0]
 8023e3a:	4618      	mov	r0, r3
 8023e3c:	f001 f93e 	bl	80250bc <_ZNSt5dequeIjSaIjEE9push_backERKj>
 8023e40:	bf00      	nop
 8023e42:	3708      	adds	r7, #8
 8023e44:	46bd      	mov	sp, r7
 8023e46:	bd80      	pop	{r7, pc}

08023e48 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front() const
 8023e48:	b580      	push	{r7, lr}
 8023e4a:	b082      	sub	sp, #8
 8023e4c:	af00      	add	r7, sp, #0
 8023e4e:	6078      	str	r0, [r7, #4]
	return c.front();
 8023e50:	687b      	ldr	r3, [r7, #4]
 8023e52:	4618      	mov	r0, r3
 8023e54:	f001 f953 	bl	80250fe <_ZNKSt5dequeIjSaIjEE5frontEv>
 8023e58:	4603      	mov	r3, r0
      }
 8023e5a:	4618      	mov	r0, r3
 8023e5c:	3708      	adds	r7, #8
 8023e5e:	46bd      	mov	sp, r7
 8023e60:	bd80      	pop	{r7, pc}

08023e62 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 8023e62:	b580      	push	{r7, lr}
 8023e64:	b082      	sub	sp, #8
 8023e66:	af00      	add	r7, sp, #0
 8023e68:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8023e6a:	687b      	ldr	r3, [r7, #4]
 8023e6c:	4618      	mov	r0, r3
 8023e6e:	f001 f95a 	bl	8025126 <_ZNKSt5dequeIjSaIjEE5emptyEv>
 8023e72:	4603      	mov	r3, r0
 8023e74:	4618      	mov	r0, r3
 8023e76:	3708      	adds	r7, #8
 8023e78:	46bd      	mov	sp, r7
 8023e7a:	bd80      	pop	{r7, pc}

08023e7c <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
      pop()
 8023e7c:	b580      	push	{r7, lr}
 8023e7e:	b082      	sub	sp, #8
 8023e80:	af00      	add	r7, sp, #0
 8023e82:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	4618      	mov	r0, r3
 8023e88:	f001 f95f 	bl	802514a <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 8023e8c:	bf00      	nop
 8023e8e:	3708      	adds	r7, #8
 8023e90:	46bd      	mov	sp, r7
 8023e92:	bd80      	pop	{r7, pc}

08023e94 <_ZNSt6vectorIhSaIhEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8023e94:	b480      	push	{r7}
 8023e96:	b083      	sub	sp, #12
 8023e98:	af00      	add	r7, sp, #0
 8023e9a:	6078      	str	r0, [r7, #4]
 8023e9c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8023e9e:	687b      	ldr	r3, [r7, #4]
 8023ea0:	681a      	ldr	r2, [r3, #0]
 8023ea2:	683b      	ldr	r3, [r7, #0]
 8023ea4:	4413      	add	r3, r2
      }
 8023ea6:	4618      	mov	r0, r3
 8023ea8:	370c      	adds	r7, #12
 8023eaa:	46bd      	mov	sp, r7
 8023eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eb0:	4770      	bx	lr

08023eb2 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8023eb2:	b580      	push	{r7, lr}
 8023eb4:	b086      	sub	sp, #24
 8023eb6:	af00      	add	r7, sp, #0
 8023eb8:	6078      	str	r0, [r7, #4]
	return *begin();
 8023eba:	f107 0308 	add.w	r3, r7, #8
 8023ebe:	6879      	ldr	r1, [r7, #4]
 8023ec0:	4618      	mov	r0, r3
 8023ec2:	f001 f965 	bl	8025190 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023ec6:	f107 0308 	add.w	r3, r7, #8
 8023eca:	4618      	mov	r0, r3
 8023ecc:	f001 f96f 	bl	80251ae <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>
 8023ed0:	4603      	mov	r3, r0
      }
 8023ed2:	4618      	mov	r0, r3
 8023ed4:	3718      	adds	r7, #24
 8023ed6:	46bd      	mov	sp, r7
 8023ed8:	bd80      	pop	{r7, pc}

08023eda <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8023eda:	b580      	push	{r7, lr}
 8023edc:	b082      	sub	sp, #8
 8023ede:	af00      	add	r7, sp, #0
 8023ee0:	6078      	str	r0, [r7, #4]
 8023ee2:	6878      	ldr	r0, [r7, #4]
 8023ee4:	f001 f97f 	bl	80251e6 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8023ee8:	687b      	ldr	r3, [r7, #4]
 8023eea:	4618      	mov	r0, r3
 8023eec:	3708      	adds	r7, #8
 8023eee:	46bd      	mov	sp, r7
 8023ef0:	bd80      	pop	{r7, pc}

08023ef2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8023ef2:	b580      	push	{r7, lr}
 8023ef4:	b082      	sub	sp, #8
 8023ef6:	af00      	add	r7, sp, #0
 8023ef8:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023efa:	687b      	ldr	r3, [r7, #4]
 8023efc:	4618      	mov	r0, r3
 8023efe:	f001 f962 	bl	80251c6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023f02:	2100      	movs	r1, #0
 8023f04:	6878      	ldr	r0, [r7, #4]
 8023f06:	f001 f97a 	bl	80251fe <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8023f0a:	687b      	ldr	r3, [r7, #4]
 8023f0c:	4618      	mov	r0, r3
 8023f0e:	3708      	adds	r7, #8
 8023f10:	46bd      	mov	sp, r7
 8023f12:	bd80      	pop	{r7, pc}

08023f14 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023f14:	b580      	push	{r7, lr}
 8023f16:	b082      	sub	sp, #8
 8023f18:	af00      	add	r7, sp, #0
 8023f1a:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	681b      	ldr	r3, [r3, #0]
 8023f20:	2b00      	cmp	r3, #0
 8023f22:	d010      	beq.n	8023f46 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023f24:	687b      	ldr	r3, [r7, #4]
 8023f26:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8023f28:	687b      	ldr	r3, [r7, #4]
 8023f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023f2c:	3304      	adds	r3, #4
 8023f2e:	461a      	mov	r2, r3
 8023f30:	6878      	ldr	r0, [r7, #4]
 8023f32:	f001 f9ca 	bl	80252ca <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023f36:	687b      	ldr	r3, [r7, #4]
 8023f38:	6819      	ldr	r1, [r3, #0]
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	685b      	ldr	r3, [r3, #4]
 8023f3e:	461a      	mov	r2, r3
 8023f40:	6878      	ldr	r0, [r7, #4]
 8023f42:	f001 f9dc 	bl	80252fe <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023f46:	687b      	ldr	r3, [r7, #4]
 8023f48:	4618      	mov	r0, r3
 8023f4a:	f7ff ffc6 	bl	8023eda <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	4618      	mov	r0, r3
 8023f52:	3708      	adds	r7, #8
 8023f54:	46bd      	mov	sp, r7
 8023f56:	bd80      	pop	{r7, pc}

08023f58 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8023f58:	b580      	push	{r7, lr}
 8023f5a:	b08a      	sub	sp, #40	; 0x28
 8023f5c:	af00      	add	r7, sp, #0
 8023f5e:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023f60:	f107 0308 	add.w	r3, r7, #8
 8023f64:	6879      	ldr	r1, [r7, #4]
 8023f66:	4618      	mov	r0, r3
 8023f68:	f001 f9e5 	bl	8025336 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023f6c:	f107 0318 	add.w	r3, r7, #24
 8023f70:	6879      	ldr	r1, [r7, #4]
 8023f72:	4618      	mov	r0, r3
 8023f74:	f001 f9ee 	bl	8025354 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023f78:	687b      	ldr	r3, [r7, #4]
 8023f7a:	4618      	mov	r0, r3
 8023f7c:	f001 f832 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023f80:	4603      	mov	r3, r0
 8023f82:	f107 0218 	add.w	r2, r7, #24
 8023f86:	f107 0108 	add.w	r1, r7, #8
 8023f8a:	6878      	ldr	r0, [r7, #4]
 8023f8c:	f001 fa0d 	bl	80253aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023f90:	687b      	ldr	r3, [r7, #4]
 8023f92:	4618      	mov	r0, r3
 8023f94:	f7ff ffbe 	bl	8023f14 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	4618      	mov	r0, r3
 8023f9c:	3728      	adds	r7, #40	; 0x28
 8023f9e:	46bd      	mov	sp, r7
 8023fa0:	bd80      	pop	{r7, pc}

08023fa2 <_ZNSt5dequeIjSaIjEEC1Ev>:
      deque() = default;
 8023fa2:	b580      	push	{r7, lr}
 8023fa4:	b082      	sub	sp, #8
 8023fa6:	af00      	add	r7, sp, #0
 8023fa8:	6078      	str	r0, [r7, #4]
 8023faa:	687b      	ldr	r3, [r7, #4]
 8023fac:	4618      	mov	r0, r3
 8023fae:	f001 fa15 	bl	80253dc <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8023fb2:	687b      	ldr	r3, [r7, #4]
 8023fb4:	4618      	mov	r0, r3
 8023fb6:	3708      	adds	r7, #8
 8023fb8:	46bd      	mov	sp, r7
 8023fba:	bd80      	pop	{r7, pc}

08023fbc <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 8023fbc:	b580      	push	{r7, lr}
 8023fbe:	b082      	sub	sp, #8
 8023fc0:	af00      	add	r7, sp, #0
 8023fc2:	6078      	str	r0, [r7, #4]
	: c() { }
 8023fc4:	687b      	ldr	r3, [r7, #4]
 8023fc6:	4618      	mov	r0, r3
 8023fc8:	2328      	movs	r3, #40	; 0x28
 8023fca:	461a      	mov	r2, r3
 8023fcc:	2100      	movs	r1, #0
 8023fce:	f01b fa93 	bl	803f4f8 <memset>
 8023fd2:	687b      	ldr	r3, [r7, #4]
 8023fd4:	4618      	mov	r0, r3
 8023fd6:	f7ff ffe4 	bl	8023fa2 <_ZNSt5dequeIjSaIjEEC1Ev>
 8023fda:	687b      	ldr	r3, [r7, #4]
 8023fdc:	4618      	mov	r0, r3
 8023fde:	3708      	adds	r7, #8
 8023fe0:	46bd      	mov	sp, r7
 8023fe2:	bd80      	pop	{r7, pc}

08023fe4 <_ZNSt5dequeIjSaIjEED1Ev>:
      ~deque()
 8023fe4:	b580      	push	{r7, lr}
 8023fe6:	b08a      	sub	sp, #40	; 0x28
 8023fe8:	af00      	add	r7, sp, #0
 8023fea:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023fec:	f107 0308 	add.w	r3, r7, #8
 8023ff0:	6879      	ldr	r1, [r7, #4]
 8023ff2:	4618      	mov	r0, r3
 8023ff4:	f001 fa25 	bl	8025442 <_ZNSt5dequeIjSaIjEE5beginEv>
 8023ff8:	f107 0318 	add.w	r3, r7, #24
 8023ffc:	6879      	ldr	r1, [r7, #4]
 8023ffe:	4618      	mov	r0, r3
 8024000:	f001 fa2e 	bl	8025460 <_ZNSt5dequeIjSaIjEE3endEv>
 8024004:	687b      	ldr	r3, [r7, #4]
 8024006:	4618      	mov	r0, r3
 8024008:	f001 fa39 	bl	802547e <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 802400c:	4603      	mov	r3, r0
 802400e:	f107 0218 	add.w	r2, r7, #24
 8024012:	f107 0108 	add.w	r1, r7, #8
 8024016:	6878      	ldr	r0, [r7, #4]
 8024018:	f001 fa58 	bl	80254cc <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 802401c:	687b      	ldr	r3, [r7, #4]
 802401e:	4618      	mov	r0, r3
 8024020:	f001 f9ed 	bl	80253fe <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 8024024:	687b      	ldr	r3, [r7, #4]
 8024026:	4618      	mov	r0, r3
 8024028:	3728      	adds	r7, #40	; 0x28
 802402a:	46bd      	mov	sp, r7
 802402c:	bd80      	pop	{r7, pc}

0802402e <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 802402e:	b590      	push	{r4, r7, lr}
 8024030:	b083      	sub	sp, #12
 8024032:	af00      	add	r7, sp, #0
 8024034:	6078      	str	r0, [r7, #4]
 8024036:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8024038:	6838      	ldr	r0, [r7, #0]
 802403a:	f001 fa54 	bl	80254e6 <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 802403e:	4603      	mov	r3, r0
 8024040:	4622      	mov	r2, r4
 8024042:	4619      	mov	r1, r3
 8024044:	6878      	ldr	r0, [r7, #4]
 8024046:	f001 fa59 	bl	80254fc <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 802404a:	687b      	ldr	r3, [r7, #4]
      }
 802404c:	4618      	mov	r0, r3
 802404e:	370c      	adds	r7, #12
 8024050:	46bd      	mov	sp, r7
 8024052:	bd90      	pop	{r4, r7, pc}

08024054 <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8024054:	b590      	push	{r4, r7, lr}
 8024056:	b083      	sub	sp, #12
 8024058:	af00      	add	r7, sp, #0
 802405a:	6078      	str	r0, [r7, #4]
 802405c:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 802405e:	6838      	ldr	r0, [r7, #0]
 8024060:	f001 fa6d 	bl	802553e <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8024064:	4603      	mov	r3, r0
 8024066:	4622      	mov	r2, r4
 8024068:	4619      	mov	r1, r3
 802406a:	6878      	ldr	r0, [r7, #4]
 802406c:	f001 fa72 	bl	8025554 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8024070:	687b      	ldr	r3, [r7, #4]
      }
 8024072:	4618      	mov	r0, r3
 8024074:	370c      	adds	r7, #12
 8024076:	46bd      	mov	sp, r7
 8024078:	bd90      	pop	{r4, r7, pc}

0802407a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 802407a:	b590      	push	{r4, r7, lr}
 802407c:	b083      	sub	sp, #12
 802407e:	af00      	add	r7, sp, #0
 8024080:	6078      	str	r0, [r7, #4]
 8024082:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8024084:	6838      	ldr	r0, [r7, #0]
 8024086:	f001 fa86 	bl	8025596 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 802408a:	4603      	mov	r3, r0
 802408c:	4622      	mov	r2, r4
 802408e:	4619      	mov	r1, r3
 8024090:	6878      	ldr	r0, [r7, #4]
 8024092:	f001 fa8b 	bl	80255ac <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8024096:	687b      	ldr	r3, [r7, #4]
      }
 8024098:	4618      	mov	r0, r3
 802409a:	370c      	adds	r7, #12
 802409c:	46bd      	mov	sp, r7
 802409e:	bd90      	pop	{r4, r7, pc}

080240a0 <_ZNSt5dequeIjSaIjEEaSEOS1_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 80240a0:	b590      	push	{r4, r7, lr}
 80240a2:	b083      	sub	sp, #12
 80240a4:	af00      	add	r7, sp, #0
 80240a6:	6078      	str	r0, [r7, #4]
 80240a8:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 80240aa:	6838      	ldr	r0, [r7, #0]
 80240ac:	f001 fa9f 	bl	80255ee <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>
 80240b0:	4603      	mov	r3, r0
 80240b2:	4622      	mov	r2, r4
 80240b4:	4619      	mov	r1, r3
 80240b6:	6878      	ldr	r0, [r7, #4]
 80240b8:	f001 faa4 	bl	8025604 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 80240bc:	687b      	ldr	r3, [r7, #4]
      }
 80240be:	4618      	mov	r0, r3
 80240c0:	370c      	adds	r7, #12
 80240c2:	46bd      	mov	sp, r7
 80240c4:	bd90      	pop	{r4, r7, pc}

080240c6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80240c6:	b580      	push	{r7, lr}
 80240c8:	b082      	sub	sp, #8
 80240ca:	af00      	add	r7, sp, #0
 80240cc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80240ce:	6878      	ldr	r0, [r7, #4]
 80240d0:	f001 fab9 	bl	8025646 <_ZNSaI7RequestEC1Ev>
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	4618      	mov	r0, r3
 80240d8:	f001 fac1 	bl	802565e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80240dc:	687b      	ldr	r3, [r7, #4]
 80240de:	4618      	mov	r0, r3
 80240e0:	3708      	adds	r7, #8
 80240e2:	46bd      	mov	sp, r7
 80240e4:	bd80      	pop	{r7, pc}

080240e6 <_ZNSaI7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80240e6:	b580      	push	{r7, lr}
 80240e8:	b082      	sub	sp, #8
 80240ea:	af00      	add	r7, sp, #0
 80240ec:	6078      	str	r0, [r7, #4]
 80240ee:	6878      	ldr	r0, [r7, #4]
 80240f0:	f001 face 	bl	8025690 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	4618      	mov	r0, r3
 80240f8:	3708      	adds	r7, #8
 80240fa:	46bd      	mov	sp, r7
 80240fc:	bd80      	pop	{r7, pc}

080240fe <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80240fe:	b590      	push	{r4, r7, lr}
 8024100:	b089      	sub	sp, #36	; 0x24
 8024102:	af00      	add	r7, sp, #0
 8024104:	6078      	str	r0, [r7, #4]
 8024106:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024108:	2014      	movs	r0, #20
 802410a:	f7fc fee8 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802410e:	4602      	mov	r2, r0
 8024110:	683b      	ldr	r3, [r7, #0]
 8024112:	fbb3 f3f2 	udiv	r3, r3, r2
 8024116:	3301      	adds	r3, #1
 8024118:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802411a:	2308      	movs	r3, #8
 802411c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802411e:	69fb      	ldr	r3, [r7, #28]
 8024120:	3302      	adds	r3, #2
 8024122:	613b      	str	r3, [r7, #16]
 8024124:	f107 0210 	add.w	r2, r7, #16
 8024128:	f107 030c 	add.w	r3, r7, #12
 802412c:	4611      	mov	r1, r2
 802412e:	4618      	mov	r0, r3
 8024130:	f001 fab9 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 8024134:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024136:	681a      	ldr	r2, [r3, #0]
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 802413c:	687b      	ldr	r3, [r7, #4]
 802413e:	685b      	ldr	r3, [r3, #4]
 8024140:	4619      	mov	r1, r3
 8024142:	6878      	ldr	r0, [r7, #4]
 8024144:	f001 fac3 	bl	80256ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8024148:	4602      	mov	r2, r0
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024152:	687b      	ldr	r3, [r7, #4]
 8024154:	6859      	ldr	r1, [r3, #4]
 8024156:	69fb      	ldr	r3, [r7, #28]
 8024158:	1acb      	subs	r3, r1, r3
 802415a:	085b      	lsrs	r3, r3, #1
 802415c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 802415e:	4413      	add	r3, r2
 8024160:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024162:	69fb      	ldr	r3, [r7, #28]
 8024164:	009b      	lsls	r3, r3, #2
 8024166:	69ba      	ldr	r2, [r7, #24]
 8024168:	4413      	add	r3, r2
 802416a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 802416c:	697a      	ldr	r2, [r7, #20]
 802416e:	69b9      	ldr	r1, [r7, #24]
 8024170:	6878      	ldr	r0, [r7, #4]
 8024172:	f001 fac9 	bl	8025708 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8024176:	687b      	ldr	r3, [r7, #4]
 8024178:	3308      	adds	r3, #8
 802417a:	69b9      	ldr	r1, [r7, #24]
 802417c:	4618      	mov	r0, r3
 802417e:	f001 fadd 	bl	802573c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	f103 0218 	add.w	r2, r3, #24
 8024188:	697b      	ldr	r3, [r7, #20]
 802418a:	3b04      	subs	r3, #4
 802418c:	4619      	mov	r1, r3
 802418e:	4610      	mov	r0, r2
 8024190:	f001 fad4 	bl	802573c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024194:	687b      	ldr	r3, [r7, #4]
 8024196:	68da      	ldr	r2, [r3, #12]
 8024198:	687b      	ldr	r3, [r7, #4]
 802419a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802419c:	687b      	ldr	r3, [r7, #4]
 802419e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80241a0:	2014      	movs	r0, #20
 80241a2:	f7fc fe9c 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80241a6:	4602      	mov	r2, r0
 80241a8:	683b      	ldr	r3, [r7, #0]
 80241aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80241ae:	fb01 f202 	mul.w	r2, r1, r2
 80241b2:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 80241b4:	4613      	mov	r3, r2
 80241b6:	009b      	lsls	r3, r3, #2
 80241b8:	4413      	add	r3, r2
 80241ba:	009b      	lsls	r3, r3, #2
 80241bc:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80241be:	687b      	ldr	r3, [r7, #4]
 80241c0:	619a      	str	r2, [r3, #24]
    }
 80241c2:	bf00      	nop
 80241c4:	3724      	adds	r7, #36	; 0x24
 80241c6:	46bd      	mov	sp, r7
 80241c8:	bd90      	pop	{r4, r7, pc}

080241ca <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80241ca:	b580      	push	{r7, lr}
 80241cc:	b086      	sub	sp, #24
 80241ce:	af00      	add	r7, sp, #0
 80241d0:	60f8      	str	r0, [r7, #12]
 80241d2:	60b9      	str	r1, [r7, #8]
 80241d4:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80241d6:	68bb      	ldr	r3, [r7, #8]
 80241d8:	617b      	str	r3, [r7, #20]
 80241da:	697a      	ldr	r2, [r7, #20]
 80241dc:	687b      	ldr	r3, [r7, #4]
 80241de:	429a      	cmp	r2, r3
 80241e0:	d209      	bcs.n	80241f6 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80241e2:	697b      	ldr	r3, [r7, #20]
 80241e4:	681b      	ldr	r3, [r3, #0]
 80241e6:	4619      	mov	r1, r3
 80241e8:	68f8      	ldr	r0, [r7, #12]
 80241ea:	f001 fac3 	bl	8025774 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80241ee:	697b      	ldr	r3, [r7, #20]
 80241f0:	3304      	adds	r3, #4
 80241f2:	617b      	str	r3, [r7, #20]
 80241f4:	e7f1      	b.n	80241da <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80241f6:	bf00      	nop
 80241f8:	3718      	adds	r7, #24
 80241fa:	46bd      	mov	sp, r7
 80241fc:	bd80      	pop	{r7, pc}

080241fe <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80241fe:	b580      	push	{r7, lr}
 8024200:	b086      	sub	sp, #24
 8024202:	af00      	add	r7, sp, #0
 8024204:	60f8      	str	r0, [r7, #12]
 8024206:	60b9      	str	r1, [r7, #8]
 8024208:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802420a:	f107 0314 	add.w	r3, r7, #20
 802420e:	68f9      	ldr	r1, [r7, #12]
 8024210:	4618      	mov	r0, r3
 8024212:	f001 fac2 	bl	802579a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024216:	f107 0314 	add.w	r3, r7, #20
 802421a:	687a      	ldr	r2, [r7, #4]
 802421c:	68b9      	ldr	r1, [r7, #8]
 802421e:	4618      	mov	r0, r3
 8024220:	f001 fad8 	bl	80257d4 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024224:	f107 0314 	add.w	r3, r7, #20
 8024228:	4618      	mov	r0, r3
 802422a:	f001 fac7 	bl	80257bc <_ZNSaIP7RequestED1Ev>
      }
 802422e:	bf00      	nop
 8024230:	3718      	adds	r7, #24
 8024232:	46bd      	mov	sp, r7
 8024234:	bd80      	pop	{r7, pc}

08024236 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024236:	b580      	push	{r7, lr}
 8024238:	b082      	sub	sp, #8
 802423a:	af00      	add	r7, sp, #0
 802423c:	6078      	str	r0, [r7, #4]
 802423e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024240:	683b      	ldr	r3, [r7, #0]
 8024242:	3308      	adds	r3, #8
 8024244:	4619      	mov	r1, r3
 8024246:	6878      	ldr	r0, [r7, #4]
 8024248:	f000 f81e 	bl	8024288 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 802424c:	6878      	ldr	r0, [r7, #4]
 802424e:	3708      	adds	r7, #8
 8024250:	46bd      	mov	sp, r7
 8024252:	bd80      	pop	{r7, pc}

08024254 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8024254:	b580      	push	{r7, lr}
 8024256:	b082      	sub	sp, #8
 8024258:	af00      	add	r7, sp, #0
 802425a:	6078      	str	r0, [r7, #4]
 802425c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 802425e:	683b      	ldr	r3, [r7, #0]
 8024260:	3318      	adds	r3, #24
 8024262:	4619      	mov	r1, r3
 8024264:	6878      	ldr	r0, [r7, #4]
 8024266:	f000 f80f 	bl	8024288 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 802426a:	6878      	ldr	r0, [r7, #4]
 802426c:	3708      	adds	r7, #8
 802426e:	46bd      	mov	sp, r7
 8024270:	bd80      	pop	{r7, pc}

08024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024272:	b480      	push	{r7}
 8024274:	b083      	sub	sp, #12
 8024276:	af00      	add	r7, sp, #0
 8024278:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802427a:	687b      	ldr	r3, [r7, #4]
 802427c:	4618      	mov	r0, r3
 802427e:	370c      	adds	r7, #12
 8024280:	46bd      	mov	sp, r7
 8024282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024286:	4770      	bx	lr

08024288 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8024288:	b480      	push	{r7}
 802428a:	b083      	sub	sp, #12
 802428c:	af00      	add	r7, sp, #0
 802428e:	6078      	str	r0, [r7, #4]
 8024290:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024292:	683b      	ldr	r3, [r7, #0]
 8024294:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024296:	687b      	ldr	r3, [r7, #4]
 8024298:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802429a:	683b      	ldr	r3, [r7, #0]
 802429c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	605a      	str	r2, [r3, #4]
 80242a2:	683b      	ldr	r3, [r7, #0]
 80242a4:	689a      	ldr	r2, [r3, #8]
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	609a      	str	r2, [r3, #8]
 80242aa:	683b      	ldr	r3, [r7, #0]
 80242ac:	68da      	ldr	r2, [r3, #12]
 80242ae:	687b      	ldr	r3, [r7, #4]
 80242b0:	60da      	str	r2, [r3, #12]
 80242b2:	687b      	ldr	r3, [r7, #4]
 80242b4:	4618      	mov	r0, r3
 80242b6:	370c      	adds	r7, #12
 80242b8:	46bd      	mov	sp, r7
 80242ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242be:	4770      	bx	lr

080242c0 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80242c0:	b580      	push	{r7, lr}
 80242c2:	b08c      	sub	sp, #48	; 0x30
 80242c4:	af00      	add	r7, sp, #0
 80242c6:	60f8      	str	r0, [r7, #12]
 80242c8:	60b9      	str	r1, [r7, #8]
 80242ca:	607a      	str	r2, [r7, #4]
 80242cc:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 80242ce:	f107 0310 	add.w	r3, r7, #16
 80242d2:	68b9      	ldr	r1, [r7, #8]
 80242d4:	4618      	mov	r0, r3
 80242d6:	f7ff ffd7 	bl	8024288 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80242da:	f107 0320 	add.w	r3, r7, #32
 80242de:	6879      	ldr	r1, [r7, #4]
 80242e0:	4618      	mov	r0, r3
 80242e2:	f7ff ffd1 	bl	8024288 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80242e6:	f107 0220 	add.w	r2, r7, #32
 80242ea:	f107 0310 	add.w	r3, r7, #16
 80242ee:	4619      	mov	r1, r3
 80242f0:	68f8      	ldr	r0, [r7, #12]
 80242f2:	f001 fa7e 	bl	80257f2 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 80242f6:	bf00      	nop
 80242f8:	3730      	adds	r7, #48	; 0x30
 80242fa:	46bd      	mov	sp, r7
 80242fc:	bd80      	pop	{r7, pc}

080242fe <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80242fe:	b580      	push	{r7, lr}
 8024300:	b082      	sub	sp, #8
 8024302:	af00      	add	r7, sp, #0
 8024304:	6078      	str	r0, [r7, #4]
 8024306:	6878      	ldr	r0, [r7, #4]
 8024308:	f001 fae1 	bl	80258ce <_ZNSaI8ResponceED1Ev>
 802430c:	687b      	ldr	r3, [r7, #4]
 802430e:	4618      	mov	r0, r3
 8024310:	3708      	adds	r7, #8
 8024312:	46bd      	mov	sp, r7
 8024314:	bd80      	pop	{r7, pc}

08024316 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 8024316:	b580      	push	{r7, lr}
 8024318:	b082      	sub	sp, #8
 802431a:	af00      	add	r7, sp, #0
 802431c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 802431e:	687b      	ldr	r3, [r7, #4]
 8024320:	4618      	mov	r0, r3
 8024322:	f001 fac4 	bl	80258ae <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8024326:	2100      	movs	r1, #0
 8024328:	6878      	ldr	r0, [r7, #4]
 802432a:	f001 fadc 	bl	80258e6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 802432e:	687b      	ldr	r3, [r7, #4]
 8024330:	4618      	mov	r0, r3
 8024332:	3708      	adds	r7, #8
 8024334:	46bd      	mov	sp, r7
 8024336:	bd80      	pop	{r7, pc}

08024338 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8024338:	b580      	push	{r7, lr}
 802433a:	b082      	sub	sp, #8
 802433c:	af00      	add	r7, sp, #0
 802433e:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8024340:	687b      	ldr	r3, [r7, #4]
 8024342:	681b      	ldr	r3, [r3, #0]
 8024344:	2b00      	cmp	r3, #0
 8024346:	d010      	beq.n	802436a <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024348:	687b      	ldr	r3, [r7, #4]
 802434a:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 802434c:	687b      	ldr	r3, [r7, #4]
 802434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024350:	3304      	adds	r3, #4
 8024352:	461a      	mov	r2, r3
 8024354:	6878      	ldr	r0, [r7, #4]
 8024356:	f001 fb29 	bl	80259ac <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 802435a:	687b      	ldr	r3, [r7, #4]
 802435c:	6819      	ldr	r1, [r3, #0]
 802435e:	687b      	ldr	r3, [r7, #4]
 8024360:	685b      	ldr	r3, [r3, #4]
 8024362:	461a      	mov	r2, r3
 8024364:	6878      	ldr	r0, [r7, #4]
 8024366:	f001 fb3b 	bl	80259e0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 802436a:	687b      	ldr	r3, [r7, #4]
 802436c:	4618      	mov	r0, r3
 802436e:	f7ff ffc6 	bl	80242fe <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 8024372:	687b      	ldr	r3, [r7, #4]
 8024374:	4618      	mov	r0, r3
 8024376:	3708      	adds	r7, #8
 8024378:	46bd      	mov	sp, r7
 802437a:	bd80      	pop	{r7, pc}

0802437c <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 802437c:	b580      	push	{r7, lr}
 802437e:	b082      	sub	sp, #8
 8024380:	af00      	add	r7, sp, #0
 8024382:	6078      	str	r0, [r7, #4]
 8024384:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024386:	683b      	ldr	r3, [r7, #0]
 8024388:	3308      	adds	r3, #8
 802438a:	4619      	mov	r1, r3
 802438c:	6878      	ldr	r0, [r7, #4]
 802438e:	f000 f81e 	bl	80243ce <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8024392:	6878      	ldr	r0, [r7, #4]
 8024394:	3708      	adds	r7, #8
 8024396:	46bd      	mov	sp, r7
 8024398:	bd80      	pop	{r7, pc}

0802439a <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 802439a:	b580      	push	{r7, lr}
 802439c:	b082      	sub	sp, #8
 802439e:	af00      	add	r7, sp, #0
 80243a0:	6078      	str	r0, [r7, #4]
 80243a2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80243a4:	683b      	ldr	r3, [r7, #0]
 80243a6:	3318      	adds	r3, #24
 80243a8:	4619      	mov	r1, r3
 80243aa:	6878      	ldr	r0, [r7, #4]
 80243ac:	f000 f80f 	bl	80243ce <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80243b0:	6878      	ldr	r0, [r7, #4]
 80243b2:	3708      	adds	r7, #8
 80243b4:	46bd      	mov	sp, r7
 80243b6:	bd80      	pop	{r7, pc}

080243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80243b8:	b480      	push	{r7}
 80243ba:	b083      	sub	sp, #12
 80243bc:	af00      	add	r7, sp, #0
 80243be:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80243c0:	687b      	ldr	r3, [r7, #4]
 80243c2:	4618      	mov	r0, r3
 80243c4:	370c      	adds	r7, #12
 80243c6:	46bd      	mov	sp, r7
 80243c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243cc:	4770      	bx	lr

080243ce <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80243ce:	b480      	push	{r7}
 80243d0:	b083      	sub	sp, #12
 80243d2:	af00      	add	r7, sp, #0
 80243d4:	6078      	str	r0, [r7, #4]
 80243d6:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80243d8:	683b      	ldr	r3, [r7, #0]
 80243da:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80243dc:	687b      	ldr	r3, [r7, #4]
 80243de:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80243e0:	683b      	ldr	r3, [r7, #0]
 80243e2:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80243e4:	687b      	ldr	r3, [r7, #4]
 80243e6:	605a      	str	r2, [r3, #4]
 80243e8:	683b      	ldr	r3, [r7, #0]
 80243ea:	689a      	ldr	r2, [r3, #8]
 80243ec:	687b      	ldr	r3, [r7, #4]
 80243ee:	609a      	str	r2, [r3, #8]
 80243f0:	683b      	ldr	r3, [r7, #0]
 80243f2:	68da      	ldr	r2, [r3, #12]
 80243f4:	687b      	ldr	r3, [r7, #4]
 80243f6:	60da      	str	r2, [r3, #12]
 80243f8:	687b      	ldr	r3, [r7, #4]
 80243fa:	4618      	mov	r0, r3
 80243fc:	370c      	adds	r7, #12
 80243fe:	46bd      	mov	sp, r7
 8024400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024404:	4770      	bx	lr

08024406 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8024406:	b580      	push	{r7, lr}
 8024408:	b08c      	sub	sp, #48	; 0x30
 802440a:	af00      	add	r7, sp, #0
 802440c:	60f8      	str	r0, [r7, #12]
 802440e:	60b9      	str	r1, [r7, #8]
 8024410:	607a      	str	r2, [r7, #4]
 8024412:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 8024414:	f107 0310 	add.w	r3, r7, #16
 8024418:	68b9      	ldr	r1, [r7, #8]
 802441a:	4618      	mov	r0, r3
 802441c:	f7ff ffd7 	bl	80243ce <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8024420:	f107 0320 	add.w	r3, r7, #32
 8024424:	6879      	ldr	r1, [r7, #4]
 8024426:	4618      	mov	r0, r3
 8024428:	f7ff ffd1 	bl	80243ce <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 802442c:	f107 0220 	add.w	r2, r7, #32
 8024430:	f107 0310 	add.w	r3, r7, #16
 8024434:	4619      	mov	r1, r3
 8024436:	68f8      	ldr	r0, [r7, #12]
 8024438:	f001 faee 	bl	8025a18 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 802443c:	bf00      	nop
 802443e:	3730      	adds	r7, #48	; 0x30
 8024440:	46bd      	mov	sp, r7
 8024442:	bd80      	pop	{r7, pc}

08024444 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8024444:	b480      	push	{r7}
 8024446:	b083      	sub	sp, #12
 8024448:	af00      	add	r7, sp, #0
 802444a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	2200      	movs	r2, #0
 8024450:	601a      	str	r2, [r3, #0]
 8024452:	687b      	ldr	r3, [r7, #4]
 8024454:	2200      	movs	r2, #0
 8024456:	605a      	str	r2, [r3, #4]
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	2200      	movs	r2, #0
 802445c:	609a      	str	r2, [r3, #8]
	{ }
 802445e:	687b      	ldr	r3, [r7, #4]
 8024460:	4618      	mov	r0, r3
 8024462:	370c      	adds	r7, #12
 8024464:	46bd      	mov	sp, r7
 8024466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802446a:	4770      	bx	lr

0802446c <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802446c:	b480      	push	{r7}
 802446e:	b083      	sub	sp, #12
 8024470:	af00      	add	r7, sp, #0
 8024472:	6078      	str	r0, [r7, #4]
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	4618      	mov	r0, r3
 8024478:	370c      	adds	r7, #12
 802447a:	46bd      	mov	sp, r7
 802447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024480:	4770      	bx	lr

08024482 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8024482:	b580      	push	{r7, lr}
 8024484:	b084      	sub	sp, #16
 8024486:	af00      	add	r7, sp, #0
 8024488:	60f8      	str	r0, [r7, #12]
 802448a:	60b9      	str	r1, [r7, #8]
 802448c:	607a      	str	r2, [r7, #4]
	if (__p)
 802448e:	68bb      	ldr	r3, [r7, #8]
 8024490:	2b00      	cmp	r3, #0
 8024492:	d005      	beq.n	80244a0 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8024494:	68fb      	ldr	r3, [r7, #12]
 8024496:	687a      	ldr	r2, [r7, #4]
 8024498:	68b9      	ldr	r1, [r7, #8]
 802449a:	4618      	mov	r0, r3
 802449c:	f001 fb17 	bl	8025ace <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 80244a0:	bf00      	nop
 80244a2:	3710      	adds	r7, #16
 80244a4:	46bd      	mov	sp, r7
 80244a6:	bd80      	pop	{r7, pc}

080244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80244a8:	b480      	push	{r7}
 80244aa:	b083      	sub	sp, #12
 80244ac:	af00      	add	r7, sp, #0
 80244ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80244b0:	687b      	ldr	r3, [r7, #4]
 80244b2:	4618      	mov	r0, r3
 80244b4:	370c      	adds	r7, #12
 80244b6:	46bd      	mov	sp, r7
 80244b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244bc:	4770      	bx	lr

080244be <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80244be:	b580      	push	{r7, lr}
 80244c0:	b084      	sub	sp, #16
 80244c2:	af00      	add	r7, sp, #0
 80244c4:	60f8      	str	r0, [r7, #12]
 80244c6:	60b9      	str	r1, [r7, #8]
 80244c8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80244ca:	68b9      	ldr	r1, [r7, #8]
 80244cc:	68f8      	ldr	r0, [r7, #12]
 80244ce:	f001 fb0d 	bl	8025aec <_ZSt8_DestroyIPhEvT_S1_>
    }
 80244d2:	bf00      	nop
 80244d4:	3710      	adds	r7, #16
 80244d6:	46bd      	mov	sp, r7
 80244d8:	bd80      	pop	{r7, pc}

080244da <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80244da:	b480      	push	{r7}
 80244dc:	b083      	sub	sp, #12
 80244de:	af00      	add	r7, sp, #0
 80244e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80244e2:	687b      	ldr	r3, [r7, #4]
 80244e4:	4618      	mov	r0, r3
 80244e6:	370c      	adds	r7, #12
 80244e8:	46bd      	mov	sp, r7
 80244ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244ee:	4770      	bx	lr

080244f0 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80244f0:	b580      	push	{r7, lr}
 80244f2:	b084      	sub	sp, #16
 80244f4:	af00      	add	r7, sp, #0
 80244f6:	60f8      	str	r0, [r7, #12]
 80244f8:	60b9      	str	r1, [r7, #8]
 80244fa:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80244fc:	6878      	ldr	r0, [r7, #4]
 80244fe:	f7ff ffec 	bl	80244da <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8024502:	4603      	mov	r3, r0
 8024504:	461a      	mov	r2, r3
 8024506:	68b9      	ldr	r1, [r7, #8]
 8024508:	68f8      	ldr	r0, [r7, #12]
 802450a:	f001 fafc 	bl	8025b06 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 802450e:	bf00      	nop
 8024510:	3710      	adds	r7, #16
 8024512:	46bd      	mov	sp, r7
 8024514:	bd80      	pop	{r7, pc}
	...

08024518 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8024518:	b5b0      	push	{r4, r5, r7, lr}
 802451a:	b082      	sub	sp, #8
 802451c:	af00      	add	r7, sp, #0
 802451e:	6078      	str	r0, [r7, #4]
 8024520:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8024522:	6878      	ldr	r0, [r7, #4]
 8024524:	f7ff f9db 	bl	80238de <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8024528:	4604      	mov	r4, r0
 802452a:	6878      	ldr	r0, [r7, #4]
 802452c:	f7ff f9c6 	bl	80238bc <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8024530:	4603      	mov	r3, r0
 8024532:	429c      	cmp	r4, r3
 8024534:	bf0c      	ite	eq
 8024536:	2301      	moveq	r3, #1
 8024538:	2300      	movne	r3, #0
 802453a:	b2db      	uxtb	r3, r3
 802453c:	2b00      	cmp	r3, #0
 802453e:	d002      	beq.n	8024546 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8024540:	4816      	ldr	r0, [pc, #88]	; (802459c <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8024542:	f01a ff31 	bl	803f3a8 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8024546:	2101      	movs	r1, #1
 8024548:	6878      	ldr	r0, [r7, #4]
 802454a:	f001 faf4 	bl	8025b36 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 802454e:	687a      	ldr	r2, [r7, #4]
 8024550:	687b      	ldr	r3, [r7, #4]
 8024552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024554:	1d1c      	adds	r4, r3, #4
 8024556:	4610      	mov	r0, r2
 8024558:	f001 fb08 	bl	8025b6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 802455c:	4603      	mov	r3, r0
 802455e:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8024560:	687c      	ldr	r4, [r7, #4]
 8024562:	687b      	ldr	r3, [r7, #4]
 8024564:	699d      	ldr	r5, [r3, #24]
 8024566:	6838      	ldr	r0, [r7, #0]
 8024568:	f7ff ffb7 	bl	80244da <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 802456c:	4603      	mov	r3, r0
 802456e:	461a      	mov	r2, r3
 8024570:	4629      	mov	r1, r5
 8024572:	4620      	mov	r0, r4
 8024574:	f7ff ffbc 	bl	80244f0 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	f103 0218 	add.w	r2, r3, #24
 802457e:	687b      	ldr	r3, [r7, #4]
 8024580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024582:	3304      	adds	r3, #4
 8024584:	4619      	mov	r1, r3
 8024586:	4610      	mov	r0, r2
 8024588:	f001 f8d8 	bl	802573c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 802458c:	687b      	ldr	r3, [r7, #4]
 802458e:	69da      	ldr	r2, [r3, #28]
 8024590:	687b      	ldr	r3, [r7, #4]
 8024592:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8024594:	bf00      	nop
 8024596:	3708      	adds	r7, #8
 8024598:	46bd      	mov	sp, r7
 802459a:	bdb0      	pop	{r4, r5, r7, pc}
 802459c:	0804109c 	.word	0x0804109c

080245a0 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80245a0:	b480      	push	{r7}
 80245a2:	b083      	sub	sp, #12
 80245a4:	af00      	add	r7, sp, #0
 80245a6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80245a8:	687b      	ldr	r3, [r7, #4]
 80245aa:	4618      	mov	r0, r3
 80245ac:	370c      	adds	r7, #12
 80245ae:	46bd      	mov	sp, r7
 80245b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245b4:	4770      	bx	lr

080245b6 <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 80245b6:	b590      	push	{r4, r7, lr}
 80245b8:	b089      	sub	sp, #36	; 0x24
 80245ba:	af00      	add	r7, sp, #0
 80245bc:	60f8      	str	r0, [r7, #12]
 80245be:	60b9      	str	r1, [r7, #8]
 80245c0:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 80245c2:	68fa      	ldr	r2, [r7, #12]
 80245c4:	f107 031c 	add.w	r3, r7, #28
 80245c8:	4611      	mov	r1, r2
 80245ca:	4618      	mov	r0, r3
 80245cc:	f001 fae0 	bl	8025b90 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 80245d0:	f107 021c 	add.w	r2, r7, #28
 80245d4:	f107 0310 	add.w	r3, r7, #16
 80245d8:	4611      	mov	r1, r2
 80245da:	4618      	mov	r0, r3
 80245dc:	f001 fae9 	bl	8025bb2 <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 80245e0:	f107 031c 	add.w	r3, r7, #28
 80245e4:	4618      	mov	r0, r3
 80245e6:	f7ff f83d 	bl	8023664 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 80245ea:	68fb      	ldr	r3, [r7, #12]
 80245ec:	68ba      	ldr	r2, [r7, #8]
 80245ee:	4611      	mov	r1, r2
 80245f0:	4618      	mov	r0, r3
 80245f2:	f001 faed 	bl	8025bd0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 80245f6:	68ba      	ldr	r2, [r7, #8]
 80245f8:	f107 0310 	add.w	r3, r7, #16
 80245fc:	4611      	mov	r1, r2
 80245fe:	4618      	mov	r0, r3
 8024600:	f001 fae6 	bl	8025bd0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8024604:	68fb      	ldr	r3, [r7, #12]
 8024606:	4618      	mov	r0, r3
 8024608:	f7ff ff4e 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802460c:	4604      	mov	r4, r0
 802460e:	68bb      	ldr	r3, [r7, #8]
 8024610:	4618      	mov	r0, r3
 8024612:	f7ff ff49 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024616:	4603      	mov	r3, r0
 8024618:	4619      	mov	r1, r3
 802461a:	4620      	mov	r0, r4
 802461c:	f001 faf6 	bl	8025c0c <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8024620:	f107 0310 	add.w	r3, r7, #16
 8024624:	4618      	mov	r0, r3
 8024626:	f7ff f841 	bl	80236ac <_ZNSt6vectorIhSaIhEED1Ev>
      }
 802462a:	bf00      	nop
 802462c:	3724      	adds	r7, #36	; 0x24
 802462e:	46bd      	mov	sp, r7
 8024630:	bd90      	pop	{r4, r7, pc}

08024632 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8024632:	b480      	push	{r7}
 8024634:	b083      	sub	sp, #12
 8024636:	af00      	add	r7, sp, #0
 8024638:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802463a:	687b      	ldr	r3, [r7, #4]
 802463c:	4618      	mov	r0, r3
 802463e:	370c      	adds	r7, #12
 8024640:	46bd      	mov	sp, r7
 8024642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024646:	4770      	bx	lr

08024648 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024648:	b5b0      	push	{r4, r5, r7, lr}
 802464a:	b082      	sub	sp, #8
 802464c:	af00      	add	r7, sp, #0
 802464e:	6078      	str	r0, [r7, #4]
 8024650:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8024652:	687b      	ldr	r3, [r7, #4]
 8024654:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	6a1b      	ldr	r3, [r3, #32]
 802465a:	3b10      	subs	r3, #16
	if (this->_M_impl._M_finish._M_cur
 802465c:	429a      	cmp	r2, r3
 802465e:	d012      	beq.n	8024686 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	    _Alloc_traits::construct(this->_M_impl,
 8024660:	687c      	ldr	r4, [r7, #4]
 8024662:	687b      	ldr	r3, [r7, #4]
 8024664:	699d      	ldr	r5, [r3, #24]
 8024666:	6838      	ldr	r0, [r7, #0]
 8024668:	f7ff ffe3 	bl	8024632 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 802466c:	4603      	mov	r3, r0
 802466e:	461a      	mov	r2, r3
 8024670:	4629      	mov	r1, r5
 8024672:	4620      	mov	r0, r4
 8024674:	f001 fad8 	bl	8025c28 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	699b      	ldr	r3, [r3, #24]
 802467c:	f103 0210 	add.w	r2, r3, #16
 8024680:	687b      	ldr	r3, [r7, #4]
 8024682:	619a      	str	r2, [r3, #24]
      }
 8024684:	e007      	b.n	8024696 <_ZNSt5dequeI8ResponceSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8024686:	6838      	ldr	r0, [r7, #0]
 8024688:	f7ff ffd3 	bl	8024632 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 802468c:	4603      	mov	r3, r0
 802468e:	4619      	mov	r1, r3
 8024690:	6878      	ldr	r0, [r7, #4]
 8024692:	f001 fadd 	bl	8025c50 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8024696:	bf00      	nop
 8024698:	3708      	adds	r7, #8
 802469a:	46bd      	mov	sp, r7
 802469c:	bdb0      	pop	{r4, r5, r7, pc}

0802469e <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 802469e:	b580      	push	{r7, lr}
 80246a0:	b082      	sub	sp, #8
 80246a2:	af00      	add	r7, sp, #0
 80246a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 80246a6:	687b      	ldr	r3, [r7, #4]
 80246a8:	f103 0218 	add.w	r2, r3, #24
 80246ac:	687b      	ldr	r3, [r7, #4]
 80246ae:	3308      	adds	r3, #8
 80246b0:	4619      	mov	r1, r3
 80246b2:	4610      	mov	r0, r2
 80246b4:	f001 fb10 	bl	8025cd8 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 80246b8:	4603      	mov	r3, r0
 80246ba:	4618      	mov	r0, r3
 80246bc:	3708      	adds	r7, #8
 80246be:	46bd      	mov	sp, r7
 80246c0:	bd80      	pop	{r7, pc}

080246c2 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80246c2:	b580      	push	{r7, lr}
 80246c4:	b086      	sub	sp, #24
 80246c6:	af00      	add	r7, sp, #0
 80246c8:	6078      	str	r0, [r7, #4]
	return *begin();
 80246ca:	f107 0308 	add.w	r3, r7, #8
 80246ce:	6879      	ldr	r1, [r7, #4]
 80246d0:	4618      	mov	r0, r3
 80246d2:	f7ff fe53 	bl	802437c <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80246d6:	f107 0308 	add.w	r3, r7, #8
 80246da:	4618      	mov	r0, r3
 80246dc:	f001 fb10 	bl	8025d00 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 80246e0:	4603      	mov	r3, r0
      }
 80246e2:	4618      	mov	r0, r3
 80246e4:	3718      	adds	r7, #24
 80246e6:	46bd      	mov	sp, r7
 80246e8:	bd80      	pop	{r7, pc}

080246ea <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80246ea:	b480      	push	{r7}
 80246ec:	b083      	sub	sp, #12
 80246ee:	af00      	add	r7, sp, #0
 80246f0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80246f2:	687b      	ldr	r3, [r7, #4]
 80246f4:	4618      	mov	r0, r3
 80246f6:	370c      	adds	r7, #12
 80246f8:	46bd      	mov	sp, r7
 80246fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246fe:	4770      	bx	lr

08024700 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8024700:	b580      	push	{r7, lr}
 8024702:	b082      	sub	sp, #8
 8024704:	af00      	add	r7, sp, #0
 8024706:	6078      	str	r0, [r7, #4]
 8024708:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 802470a:	6839      	ldr	r1, [r7, #0]
 802470c:	6878      	ldr	r0, [r7, #4]
 802470e:	f001 fb03 	bl	8025d18 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8024712:	687b      	ldr	r3, [r7, #4]
 8024714:	4618      	mov	r0, r3
 8024716:	3708      	adds	r7, #8
 8024718:	46bd      	mov	sp, r7
 802471a:	bd80      	pop	{r7, pc}

0802471c <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 802471c:	b480      	push	{r7}
 802471e:	b083      	sub	sp, #12
 8024720:	af00      	add	r7, sp, #0
 8024722:	6078      	str	r0, [r7, #4]
 8024724:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8024726:	683b      	ldr	r3, [r7, #0]
 8024728:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 802472a:	687b      	ldr	r3, [r7, #4]
 802472c:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 802472e:	683b      	ldr	r3, [r7, #0]
 8024730:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8024732:	687b      	ldr	r3, [r7, #4]
 8024734:	605a      	str	r2, [r3, #4]
 8024736:	683b      	ldr	r3, [r7, #0]
 8024738:	689a      	ldr	r2, [r3, #8]
 802473a:	687b      	ldr	r3, [r7, #4]
 802473c:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 802473e:	683b      	ldr	r3, [r7, #0]
 8024740:	2200      	movs	r2, #0
 8024742:	609a      	str	r2, [r3, #8]
 8024744:	683b      	ldr	r3, [r7, #0]
 8024746:	689a      	ldr	r2, [r3, #8]
 8024748:	683b      	ldr	r3, [r7, #0]
 802474a:	605a      	str	r2, [r3, #4]
 802474c:	683b      	ldr	r3, [r7, #0]
 802474e:	685a      	ldr	r2, [r3, #4]
 8024750:	683b      	ldr	r3, [r7, #0]
 8024752:	601a      	str	r2, [r3, #0]
 8024754:	687b      	ldr	r3, [r7, #4]
 8024756:	4618      	mov	r0, r3
 8024758:	370c      	adds	r7, #12
 802475a:	46bd      	mov	sp, r7
 802475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024760:	4770      	bx	lr

08024762 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8024762:	b580      	push	{r7, lr}
 8024764:	b082      	sub	sp, #8
 8024766:	af00      	add	r7, sp, #0
 8024768:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 802476a:	687b      	ldr	r3, [r7, #4]
 802476c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 802476e:	687b      	ldr	r3, [r7, #4]
 8024770:	691b      	ldr	r3, [r3, #16]
 8024772:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8024774:	429a      	cmp	r2, r3
 8024776:	d011      	beq.n	802479c <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024778:	687b      	ldr	r3, [r7, #4]
 802477a:	4618      	mov	r0, r3
 802477c:	f7ff fe1c 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8024780:	4602      	mov	r2, r0
 8024782:	687b      	ldr	r3, [r7, #4]
 8024784:	689b      	ldr	r3, [r3, #8]
 8024786:	4619      	mov	r1, r3
 8024788:	4610      	mov	r0, r2
 802478a:	f001 fad1 	bl	8025d30 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 802478e:	687b      	ldr	r3, [r7, #4]
 8024790:	689b      	ldr	r3, [r3, #8]
 8024792:	f103 0210 	add.w	r2, r3, #16
 8024796:	687b      	ldr	r3, [r7, #4]
 8024798:	609a      	str	r2, [r3, #8]
      }
 802479a:	e002      	b.n	80247a2 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 802479c:	6878      	ldr	r0, [r7, #4]
 802479e:	f001 fad4 	bl	8025d4a <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 80247a2:	bf00      	nop
 80247a4:	3708      	adds	r7, #8
 80247a6:	46bd      	mov	sp, r7
 80247a8:	bd80      	pop	{r7, pc}

080247aa <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 80247aa:	b480      	push	{r7}
 80247ac:	b083      	sub	sp, #12
 80247ae:	af00      	add	r7, sp, #0
 80247b0:	6078      	str	r0, [r7, #4]
 80247b2:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 80247b4:	683b      	ldr	r3, [r7, #0]
 80247b6:	4618      	mov	r0, r3
 80247b8:	370c      	adds	r7, #12
 80247ba:	46bd      	mov	sp, r7
 80247bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247c0:	4770      	bx	lr

080247c2 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80247c2:	b480      	push	{r7}
 80247c4:	b083      	sub	sp, #12
 80247c6:	af00      	add	r7, sp, #0
 80247c8:	6078      	str	r0, [r7, #4]
 80247ca:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80247cc:	687b      	ldr	r3, [r7, #4]
 80247ce:	681a      	ldr	r2, [r3, #0]
 80247d0:	683b      	ldr	r3, [r7, #0]
 80247d2:	681b      	ldr	r3, [r3, #0]
 80247d4:	429a      	cmp	r2, r3
 80247d6:	bf0c      	ite	eq
 80247d8:	2301      	moveq	r3, #1
 80247da:	2300      	movne	r3, #0
 80247dc:	b2db      	uxtb	r3, r3
 80247de:	4618      	mov	r0, r3
 80247e0:	370c      	adds	r7, #12
 80247e2:	46bd      	mov	sp, r7
 80247e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247e8:	4770      	bx	lr

080247ea <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80247ea:	b480      	push	{r7}
 80247ec:	b083      	sub	sp, #12
 80247ee:	af00      	add	r7, sp, #0
 80247f0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	4618      	mov	r0, r3
 80247f8:	370c      	adds	r7, #12
 80247fa:	46bd      	mov	sp, r7
 80247fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024800:	4770      	bx	lr

08024802 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8024802:	b580      	push	{r7, lr}
 8024804:	b084      	sub	sp, #16
 8024806:	af00      	add	r7, sp, #0
 8024808:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 802480a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802480e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8024810:	6878      	ldr	r0, [r7, #4]
 8024812:	f001 fac2 	bl	8025d9a <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 8024816:	4603      	mov	r3, r0
 8024818:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 802481a:	f107 0208 	add.w	r2, r7, #8
 802481e:	f107 030c 	add.w	r3, r7, #12
 8024822:	4611      	mov	r1, r2
 8024824:	4618      	mov	r0, r3
 8024826:	f001 fac4 	bl	8025db2 <_ZSt3minIjERKT_S2_S2_>
 802482a:	4603      	mov	r3, r0
 802482c:	681b      	ldr	r3, [r3, #0]
      }
 802482e:	4618      	mov	r0, r3
 8024830:	3710      	adds	r7, #16
 8024832:	46bd      	mov	sp, r7
 8024834:	bd80      	pop	{r7, pc}

08024836 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8024836:	b480      	push	{r7}
 8024838:	b083      	sub	sp, #12
 802483a:	af00      	add	r7, sp, #0
 802483c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802483e:	687b      	ldr	r3, [r7, #4]
 8024840:	4618      	mov	r0, r3
 8024842:	370c      	adds	r7, #12
 8024844:	46bd      	mov	sp, r7
 8024846:	f85d 7b04 	ldr.w	r7, [sp], #4
 802484a:	4770      	bx	lr

0802484c <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 802484c:	b580      	push	{r7, lr}
 802484e:	b082      	sub	sp, #8
 8024850:	af00      	add	r7, sp, #0
 8024852:	6078      	str	r0, [r7, #4]
 8024854:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8024856:	f001 fac0 	bl	8025dda <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 802485a:	4603      	mov	r3, r0
 802485c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 802485e:	687b      	ldr	r3, [r7, #4]
 8024860:	68da      	ldr	r2, [r3, #12]
 8024862:	683b      	ldr	r3, [r7, #0]
 8024864:	68db      	ldr	r3, [r3, #12]
 8024866:	1ad3      	subs	r3, r2, r3
 8024868:	109b      	asrs	r3, r3, #2
 802486a:	3b01      	subs	r3, #1
 802486c:	fb01 f303 	mul.w	r3, r1, r3
 8024870:	687a      	ldr	r2, [r7, #4]
 8024872:	6811      	ldr	r1, [r2, #0]
 8024874:	687a      	ldr	r2, [r7, #4]
 8024876:	6852      	ldr	r2, [r2, #4]
 8024878:	1a8a      	subs	r2, r1, r2
 802487a:	1092      	asrs	r2, r2, #2
 802487c:	4908      	ldr	r1, [pc, #32]	; (80248a0 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 802487e:	fb01 f202 	mul.w	r2, r1, r2
 8024882:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8024884:	683a      	ldr	r2, [r7, #0]
 8024886:	6891      	ldr	r1, [r2, #8]
 8024888:	683a      	ldr	r2, [r7, #0]
 802488a:	6812      	ldr	r2, [r2, #0]
 802488c:	1a8a      	subs	r2, r1, r2
 802488e:	1092      	asrs	r2, r2, #2
 8024890:	4903      	ldr	r1, [pc, #12]	; (80248a0 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8024892:	fb01 f202 	mul.w	r2, r1, r2
 8024896:	4413      	add	r3, r2
      }
 8024898:	4618      	mov	r0, r3
 802489a:	3708      	adds	r7, #8
 802489c:	46bd      	mov	sp, r7
 802489e:	bd80      	pop	{r7, pc}
 80248a0:	cccccccd 	.word	0xcccccccd

080248a4 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80248a4:	b580      	push	{r7, lr}
 80248a6:	b082      	sub	sp, #8
 80248a8:	af00      	add	r7, sp, #0
 80248aa:	6078      	str	r0, [r7, #4]
 80248ac:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80248ae:	6839      	ldr	r1, [r7, #0]
 80248b0:	6878      	ldr	r0, [r7, #4]
 80248b2:	f001 fa9a 	bl	8025dea <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 80248b6:	bf00      	nop
 80248b8:	3708      	adds	r7, #8
 80248ba:	46bd      	mov	sp, r7
 80248bc:	bd80      	pop	{r7, pc}

080248be <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80248be:	b580      	push	{r7, lr}
 80248c0:	b082      	sub	sp, #8
 80248c2:	af00      	add	r7, sp, #0
 80248c4:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80248c6:	687b      	ldr	r3, [r7, #4]
 80248c8:	4618      	mov	r0, r3
 80248ca:	f7ff fcd2 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80248ce:	4602      	mov	r2, r0
 80248d0:	687b      	ldr	r3, [r7, #4]
 80248d2:	689b      	ldr	r3, [r3, #8]
 80248d4:	4619      	mov	r1, r3
 80248d6:	4610      	mov	r0, r2
 80248d8:	f7ff ffe4 	bl	80248a4 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80248dc:	687a      	ldr	r2, [r7, #4]
 80248de:	687b      	ldr	r3, [r7, #4]
 80248e0:	68db      	ldr	r3, [r3, #12]
 80248e2:	4619      	mov	r1, r3
 80248e4:	4610      	mov	r0, r2
 80248e6:	f000 ff45 	bl	8025774 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80248ea:	687b      	ldr	r3, [r7, #4]
 80248ec:	f103 0208 	add.w	r2, r3, #8
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	695b      	ldr	r3, [r3, #20]
 80248f4:	3304      	adds	r3, #4
 80248f6:	4619      	mov	r1, r3
 80248f8:	4610      	mov	r0, r2
 80248fa:	f000 ff1f 	bl	802573c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	68da      	ldr	r2, [r3, #12]
 8024902:	687b      	ldr	r3, [r7, #4]
 8024904:	609a      	str	r2, [r3, #8]
    }
 8024906:	bf00      	nop
 8024908:	3708      	adds	r7, #8
 802490a:	46bd      	mov	sp, r7
 802490c:	bd80      	pop	{r7, pc}

0802490e <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 802490e:	b580      	push	{r7, lr}
 8024910:	b082      	sub	sp, #8
 8024912:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8024914:	4618      	mov	r0, r3
 8024916:	f000 f805 	bl	8024924 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 802491a:	4603      	mov	r3, r0
      }
 802491c:	4618      	mov	r0, r3
 802491e:	3708      	adds	r7, #8
 8024920:	46bd      	mov	sp, r7
 8024922:	bd80      	pop	{r7, pc}

08024924 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8024924:	b480      	push	{r7}
 8024926:	b083      	sub	sp, #12
 8024928:	af00      	add	r7, sp, #0
 802492a:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 802492c:	2301      	movs	r3, #1
      }
 802492e:	4618      	mov	r0, r3
 8024930:	370c      	adds	r7, #12
 8024932:	46bd      	mov	sp, r7
 8024934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024938:	4770      	bx	lr
	...

0802493c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 802493c:	b5b0      	push	{r4, r5, r7, lr}
 802493e:	b088      	sub	sp, #32
 8024940:	af00      	add	r7, sp, #0
 8024942:	6078      	str	r0, [r7, #4]
 8024944:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8024946:	683b      	ldr	r3, [r7, #0]
 8024948:	2b00      	cmp	r3, #0
 802494a:	f000 80a8 	beq.w	8024a9e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 802494e:	6878      	ldr	r0, [r7, #4]
 8024950:	f7fe ff7f 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8024954:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8024956:	687b      	ldr	r3, [r7, #4]
 8024958:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 802495a:	687b      	ldr	r3, [r7, #4]
 802495c:	685b      	ldr	r3, [r3, #4]
 802495e:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8024960:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 8024962:	6878      	ldr	r0, [r7, #4]
 8024964:	f001 fa4d 	bl	8025e02 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024968:	4602      	mov	r2, r0
 802496a:	69fb      	ldr	r3, [r7, #28]
 802496c:	4293      	cmp	r3, r2
 802496e:	d808      	bhi.n	8024982 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 8024970:	6878      	ldr	r0, [r7, #4]
 8024972:	f001 fa46 	bl	8025e02 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8024976:	4602      	mov	r2, r0
 8024978:	69fb      	ldr	r3, [r7, #28]
 802497a:	1ad3      	subs	r3, r2, r3
 802497c:	69ba      	ldr	r2, [r7, #24]
 802497e:	429a      	cmp	r2, r3
 8024980:	d901      	bls.n	8024986 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 8024982:	2301      	movs	r3, #1
 8024984:	e000      	b.n	8024988 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 8024986:	2300      	movs	r3, #0
 8024988:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 802498a:	69ba      	ldr	r2, [r7, #24]
 802498c:	683b      	ldr	r3, [r7, #0]
 802498e:	429a      	cmp	r2, r3
 8024990:	d30f      	bcc.n	80249b2 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 8024992:	687b      	ldr	r3, [r7, #4]
 8024994:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 8024996:	687b      	ldr	r3, [r7, #4]
 8024998:	4618      	mov	r0, r3
 802499a:	f7ff fd85 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 802499e:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 80249a0:	461a      	mov	r2, r3
 80249a2:	6839      	ldr	r1, [r7, #0]
 80249a4:	4620      	mov	r0, r4
 80249a6:	f001 fa3d 	bl	8025e24 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 80249aa:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 80249b0:	e075      	b.n	8024a9e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 80249b2:	4a3d      	ldr	r2, [pc, #244]	; (8024aa8 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 80249b4:	6839      	ldr	r1, [r7, #0]
 80249b6:	6878      	ldr	r0, [r7, #4]
 80249b8:	f001 fa43 	bl	8025e42 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80249bc:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 80249be:	687b      	ldr	r3, [r7, #4]
 80249c0:	6979      	ldr	r1, [r7, #20]
 80249c2:	4618      	mov	r0, r3
 80249c4:	f001 fa84 	bl	8025ed0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80249c8:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80249ca:	f7ff ffa0 	bl	802490e <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 80249ce:	4603      	mov	r3, r0
 80249d0:	2b00      	cmp	r3, #0
 80249d2:	d01b      	beq.n	8024a0c <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 80249d4:	693a      	ldr	r2, [r7, #16]
 80249d6:	69fb      	ldr	r3, [r7, #28]
 80249d8:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	4618      	mov	r0, r3
 80249de:	f7ff fd63 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80249e2:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80249e4:	461a      	mov	r2, r3
 80249e6:	6839      	ldr	r1, [r7, #0]
 80249e8:	4620      	mov	r0, r4
 80249ea:	f001 fa1b 	bl	8025e24 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80249ee:	687b      	ldr	r3, [r7, #4]
 80249f0:	681c      	ldr	r4, [r3, #0]
 80249f2:	687b      	ldr	r3, [r7, #4]
 80249f4:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 80249f6:	687b      	ldr	r3, [r7, #4]
 80249f8:	4618      	mov	r0, r3
 80249fa:	f7ff fd55 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80249fe:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8024a00:	693a      	ldr	r2, [r7, #16]
 8024a02:	4629      	mov	r1, r5
 8024a04:	4620      	mov	r0, r4
 8024a06:	f001 fa77 	bl	8025ef8 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8024a0a:	e02e      	b.n	8024a6a <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 8024a0c:	2300      	movs	r3, #0
 8024a0e:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 8024a10:	693a      	ldr	r2, [r7, #16]
 8024a12:	69fb      	ldr	r3, [r7, #28]
 8024a14:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8024a16:	687b      	ldr	r3, [r7, #4]
 8024a18:	4618      	mov	r0, r3
 8024a1a:	f7ff fd45 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024a1e:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 8024a20:	461a      	mov	r2, r3
 8024a22:	6839      	ldr	r1, [r7, #0]
 8024a24:	4620      	mov	r0, r4
 8024a26:	f001 f9fd 	bl	8025e24 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 8024a2a:	693a      	ldr	r2, [r7, #16]
 8024a2c:	69fb      	ldr	r3, [r7, #28]
 8024a2e:	4413      	add	r3, r2
 8024a30:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 8024a32:	687b      	ldr	r3, [r7, #4]
 8024a34:	681c      	ldr	r4, [r3, #0]
 8024a36:	687b      	ldr	r3, [r7, #4]
 8024a38:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8024a3a:	687b      	ldr	r3, [r7, #4]
 8024a3c:	4618      	mov	r0, r3
 8024a3e:	f7ff fd33 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024a42:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 8024a44:	693a      	ldr	r2, [r7, #16]
 8024a46:	4629      	mov	r1, r5
 8024a48:	4620      	mov	r0, r4
 8024a4a:	f001 fa69 	bl	8025f20 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8024a4e:	687b      	ldr	r3, [r7, #4]
 8024a50:	681c      	ldr	r4, [r3, #0]
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 8024a56:	687b      	ldr	r3, [r7, #4]
 8024a58:	4618      	mov	r0, r3
 8024a5a:	f7ff fd25 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024a5e:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8024a60:	461a      	mov	r2, r3
 8024a62:	4629      	mov	r1, r5
 8024a64:	4620      	mov	r0, r4
 8024a66:	f7ff fd2a 	bl	80244be <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8024a6a:	6878      	ldr	r0, [r7, #4]
 8024a6c:	687b      	ldr	r3, [r7, #4]
 8024a6e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8024a70:	687b      	ldr	r3, [r7, #4]
 8024a72:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8024a74:	687b      	ldr	r3, [r7, #4]
 8024a76:	681b      	ldr	r3, [r3, #0]
 8024a78:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8024a7a:	461a      	mov	r2, r3
 8024a7c:	f7ff fd01 	bl	8024482 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8024a80:	687b      	ldr	r3, [r7, #4]
 8024a82:	693a      	ldr	r2, [r7, #16]
 8024a84:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8024a86:	69fa      	ldr	r2, [r7, #28]
 8024a88:	683b      	ldr	r3, [r7, #0]
 8024a8a:	4413      	add	r3, r2
 8024a8c:	693a      	ldr	r2, [r7, #16]
 8024a8e:	441a      	add	r2, r3
 8024a90:	687b      	ldr	r3, [r7, #4]
 8024a92:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8024a94:	693a      	ldr	r2, [r7, #16]
 8024a96:	697b      	ldr	r3, [r7, #20]
 8024a98:	441a      	add	r2, r3
 8024a9a:	687b      	ldr	r3, [r7, #4]
 8024a9c:	609a      	str	r2, [r3, #8]
    }
 8024a9e:	bf00      	nop
 8024aa0:	3720      	adds	r7, #32
 8024aa2:	46bd      	mov	sp, r7
 8024aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8024aa6:	bf00      	nop
 8024aa8:	080410cc 	.word	0x080410cc

08024aac <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8024aac:	b590      	push	{r4, r7, lr}
 8024aae:	b085      	sub	sp, #20
 8024ab0:	af00      	add	r7, sp, #0
 8024ab2:	6078      	str	r0, [r7, #4]
 8024ab4:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8024ab6:	687b      	ldr	r3, [r7, #4]
 8024ab8:	685a      	ldr	r2, [r3, #4]
 8024aba:	683b      	ldr	r3, [r7, #0]
 8024abc:	1ad3      	subs	r3, r2, r3
 8024abe:	60fb      	str	r3, [r7, #12]
 8024ac0:	68fb      	ldr	r3, [r7, #12]
 8024ac2:	2b00      	cmp	r3, #0
 8024ac4:	d00e      	beq.n	8024ae4 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8024ac6:	687b      	ldr	r3, [r7, #4]
 8024ac8:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	4618      	mov	r0, r3
 8024ace:	f7ff fceb 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024ad2:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8024ad4:	461a      	mov	r2, r3
 8024ad6:	4621      	mov	r1, r4
 8024ad8:	6838      	ldr	r0, [r7, #0]
 8024ada:	f7ff fcf0 	bl	80244be <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8024ade:	687b      	ldr	r3, [r7, #4]
 8024ae0:	683a      	ldr	r2, [r7, #0]
 8024ae2:	605a      	str	r2, [r3, #4]
      }
 8024ae4:	bf00      	nop
 8024ae6:	3714      	adds	r7, #20
 8024ae8:	46bd      	mov	sp, r7
 8024aea:	bd90      	pop	{r4, r7, pc}

08024aec <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8024aec:	b480      	push	{r7}
 8024aee:	b083      	sub	sp, #12
 8024af0:	af00      	add	r7, sp, #0
 8024af2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	4618      	mov	r0, r3
 8024af8:	370c      	adds	r7, #12
 8024afa:	46bd      	mov	sp, r7
 8024afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b00:	4770      	bx	lr

08024b02 <_ZStneRKSaIhES1_>:
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

#if __cpp_impl_three_way_comparison < 201907L
      friend _GLIBCXX20_CONSTEXPR bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8024b02:	b480      	push	{r7}
 8024b04:	b083      	sub	sp, #12
 8024b06:	af00      	add	r7, sp, #0
 8024b08:	6078      	str	r0, [r7, #4]
 8024b0a:	6039      	str	r1, [r7, #0]
      { return false; }
 8024b0c:	2300      	movs	r3, #0
 8024b0e:	4618      	mov	r0, r3
 8024b10:	370c      	adds	r7, #12
 8024b12:	46bd      	mov	sp, r7
 8024b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b18:	4770      	bx	lr

08024b1a <_ZNSt6vectorIhSaIhEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024b1a:	b580      	push	{r7, lr}
 8024b1c:	b082      	sub	sp, #8
 8024b1e:	af00      	add	r7, sp, #0
 8024b20:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	681b      	ldr	r3, [r3, #0]
 8024b26:	4619      	mov	r1, r3
 8024b28:	6878      	ldr	r0, [r7, #4]
 8024b2a:	f7ff ffbf 	bl	8024aac <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
 8024b2e:	bf00      	nop
 8024b30:	3708      	adds	r7, #8
 8024b32:	46bd      	mov	sp, r7
 8024b34:	bd80      	pop	{r7, pc}

08024b36 <_ZSt15__alloc_on_copyISaIhEEvRT_RKS1_>:
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8024b36:	b580      	push	{r7, lr}
 8024b38:	b082      	sub	sp, #8
 8024b3a:	af00      	add	r7, sp, #0
 8024b3c:	6078      	str	r0, [r7, #4]
 8024b3e:	6039      	str	r1, [r7, #0]
      __do_alloc_on_copy(__one, __two, __pocca());
 8024b40:	461a      	mov	r2, r3
 8024b42:	6839      	ldr	r1, [r7, #0]
 8024b44:	6878      	ldr	r0, [r7, #4]
 8024b46:	f001 fa04 	bl	8025f52 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8024b4a:	bf00      	nop
 8024b4c:	3708      	adds	r7, #8
 8024b4e:	46bd      	mov	sp, r7
 8024b50:	bd80      	pop	{r7, pc}

08024b52 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8024b52:	b480      	push	{r7}
 8024b54:	b083      	sub	sp, #12
 8024b56:	af00      	add	r7, sp, #0
 8024b58:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8024b5a:	687b      	ldr	r3, [r7, #4]
 8024b5c:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8024b5e:	687b      	ldr	r3, [r7, #4]
 8024b60:	681b      	ldr	r3, [r3, #0]
 8024b62:	1ad3      	subs	r3, r2, r3
 8024b64:	4618      	mov	r0, r3
 8024b66:	370c      	adds	r7, #12
 8024b68:	46bd      	mov	sp, r7
 8024b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b6e:	4770      	bx	lr

08024b70 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8024b70:	b580      	push	{r7, lr}
 8024b72:	b084      	sub	sp, #16
 8024b74:	af00      	add	r7, sp, #0
 8024b76:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8024b78:	687a      	ldr	r2, [r7, #4]
 8024b7a:	f107 030c 	add.w	r3, r7, #12
 8024b7e:	4611      	mov	r1, r2
 8024b80:	4618      	mov	r0, r3
 8024b82:	f001 f9f2 	bl	8025f6a <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8024b86:	68fb      	ldr	r3, [r7, #12]
 8024b88:	4618      	mov	r0, r3
 8024b8a:	3710      	adds	r7, #16
 8024b8c:	46bd      	mov	sp, r7
 8024b8e:	bd80      	pop	{r7, pc}

08024b90 <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8024b90:	b580      	push	{r7, lr}
 8024b92:	b084      	sub	sp, #16
 8024b94:	af00      	add	r7, sp, #0
 8024b96:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8024b98:	687b      	ldr	r3, [r7, #4]
 8024b9a:	1d1a      	adds	r2, r3, #4
 8024b9c:	f107 030c 	add.w	r3, r7, #12
 8024ba0:	4611      	mov	r1, r2
 8024ba2:	4618      	mov	r0, r3
 8024ba4:	f001 f9e1 	bl	8025f6a <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8024ba8:	68fb      	ldr	r3, [r7, #12]
 8024baa:	4618      	mov	r0, r3
 8024bac:	3710      	adds	r7, #16
 8024bae:	46bd      	mov	sp, r7
 8024bb0:	bd80      	pop	{r7, pc}

08024bb2 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8024bb2:	b580      	push	{r7, lr}
 8024bb4:	b086      	sub	sp, #24
 8024bb6:	af00      	add	r7, sp, #0
 8024bb8:	60f8      	str	r0, [r7, #12]
 8024bba:	60b9      	str	r1, [r7, #8]
 8024bbc:	607a      	str	r2, [r7, #4]
 8024bbe:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8024bc0:	68fb      	ldr	r3, [r7, #12]
 8024bc2:	68b9      	ldr	r1, [r7, #8]
 8024bc4:	4618      	mov	r0, r3
 8024bc6:	f001 f983 	bl	8025ed0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8024bca:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	4618      	mov	r0, r3
 8024bd0:	f7ff fc6a 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024bd4:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8024bd6:	697a      	ldr	r2, [r7, #20]
 8024bd8:	6839      	ldr	r1, [r7, #0]
 8024bda:	6878      	ldr	r0, [r7, #4]
 8024bdc:	f001 f9d5 	bl	8025f8a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8024be0:	697b      	ldr	r3, [r7, #20]
	}
 8024be2:	4618      	mov	r0, r3
 8024be4:	3718      	adds	r7, #24
 8024be6:	46bd      	mov	sp, r7
 8024be8:	bd80      	pop	{r7, pc}

08024bea <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024bea:	b580      	push	{r7, lr}
 8024bec:	b084      	sub	sp, #16
 8024bee:	af00      	add	r7, sp, #0
 8024bf0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8024bf2:	687a      	ldr	r2, [r7, #4]
 8024bf4:	f107 030c 	add.w	r3, r7, #12
 8024bf8:	4611      	mov	r1, r2
 8024bfa:	4618      	mov	r0, r3
 8024bfc:	f001 f9d6 	bl	8025fac <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8024c00:	68fb      	ldr	r3, [r7, #12]
 8024c02:	4618      	mov	r0, r3
 8024c04:	3710      	adds	r7, #16
 8024c06:	46bd      	mov	sp, r7
 8024c08:	bd80      	pop	{r7, pc}

08024c0a <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8024c0a:	b590      	push	{r4, r7, lr}
 8024c0c:	b085      	sub	sp, #20
 8024c0e:	af00      	add	r7, sp, #0
 8024c10:	60f8      	str	r0, [r7, #12]
 8024c12:	60b9      	str	r1, [r7, #8]
 8024c14:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8024c16:	68f8      	ldr	r0, [r7, #12]
 8024c18:	f001 f9d8 	bl	8025fcc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8024c1c:	4604      	mov	r4, r0
 8024c1e:	68b8      	ldr	r0, [r7, #8]
 8024c20:	f001 f9d4 	bl	8025fcc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8024c24:	4603      	mov	r3, r0
 8024c26:	687a      	ldr	r2, [r7, #4]
 8024c28:	4619      	mov	r1, r3
 8024c2a:	4620      	mov	r0, r4
 8024c2c:	f001 f9d9 	bl	8025fe2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 8024c30:	4603      	mov	r3, r0
    }
 8024c32:	4618      	mov	r0, r3
 8024c34:	3714      	adds	r7, #20
 8024c36:	46bd      	mov	sp, r7
 8024c38:	bd90      	pop	{r4, r7, pc}

08024c3a <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8024c3a:	b580      	push	{r7, lr}
 8024c3c:	b084      	sub	sp, #16
 8024c3e:	af00      	add	r7, sp, #0
 8024c40:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8024c42:	687b      	ldr	r3, [r7, #4]
 8024c44:	1d1a      	adds	r2, r3, #4
 8024c46:	f107 030c 	add.w	r3, r7, #12
 8024c4a:	4611      	mov	r1, r2
 8024c4c:	4618      	mov	r0, r3
 8024c4e:	f001 f9ad 	bl	8025fac <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8024c52:	68fb      	ldr	r3, [r7, #12]
 8024c54:	4618      	mov	r0, r3
 8024c56:	3710      	adds	r7, #16
 8024c58:	46bd      	mov	sp, r7
 8024c5a:	bd80      	pop	{r7, pc}

08024c5c <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8024c5c:	b580      	push	{r7, lr}
 8024c5e:	b084      	sub	sp, #16
 8024c60:	af00      	add	r7, sp, #0
 8024c62:	60f8      	str	r0, [r7, #12]
 8024c64:	60b9      	str	r1, [r7, #8]
 8024c66:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8024c68:	68b9      	ldr	r1, [r7, #8]
 8024c6a:	68f8      	ldr	r0, [r7, #12]
 8024c6c:	f001 f9da 	bl	8026024 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 8024c70:	bf00      	nop
 8024c72:	3710      	adds	r7, #16
 8024c74:	46bd      	mov	sp, r7
 8024c76:	bd80      	pop	{r7, pc}

08024c78 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8024c78:	b590      	push	{r4, r7, lr}
 8024c7a:	b085      	sub	sp, #20
 8024c7c:	af00      	add	r7, sp, #0
 8024c7e:	60f8      	str	r0, [r7, #12]
 8024c80:	60b9      	str	r1, [r7, #8]
 8024c82:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8024c84:	68f8      	ldr	r0, [r7, #12]
 8024c86:	f001 f9da 	bl	802603e <_ZSt12__miter_baseIPhET_S1_>
 8024c8a:	4604      	mov	r4, r0
 8024c8c:	68b8      	ldr	r0, [r7, #8]
 8024c8e:	f001 f9d6 	bl	802603e <_ZSt12__miter_baseIPhET_S1_>
 8024c92:	4603      	mov	r3, r0
 8024c94:	687a      	ldr	r2, [r7, #4]
 8024c96:	4619      	mov	r1, r3
 8024c98:	4620      	mov	r0, r4
 8024c9a:	f001 f9db 	bl	8026054 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8024c9e:	4603      	mov	r3, r0
    }
 8024ca0:	4618      	mov	r0, r3
 8024ca2:	3714      	adds	r7, #20
 8024ca4:	46bd      	mov	sp, r7
 8024ca6:	bd90      	pop	{r4, r7, pc}

08024ca8 <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8024ca8:	b580      	push	{r7, lr}
 8024caa:	b084      	sub	sp, #16
 8024cac:	af00      	add	r7, sp, #0
 8024cae:	60f8      	str	r0, [r7, #12]
 8024cb0:	60b9      	str	r1, [r7, #8]
 8024cb2:	607a      	str	r2, [r7, #4]
 8024cb4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8024cb6:	687a      	ldr	r2, [r7, #4]
 8024cb8:	68b9      	ldr	r1, [r7, #8]
 8024cba:	68f8      	ldr	r0, [r7, #12]
 8024cbc:	f001 f9ed 	bl	802609a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8024cc0:	4603      	mov	r3, r0
 8024cc2:	4618      	mov	r0, r3
 8024cc4:	3710      	adds	r7, #16
 8024cc6:	46bd      	mov	sp, r7
 8024cc8:	bd80      	pop	{r7, pc}

08024cca <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8024cca:	b480      	push	{r7}
 8024ccc:	b083      	sub	sp, #12
 8024cce:	af00      	add	r7, sp, #0
 8024cd0:	6078      	str	r0, [r7, #4]
 8024cd2:	687b      	ldr	r3, [r7, #4]
 8024cd4:	4618      	mov	r0, r3
 8024cd6:	370c      	adds	r7, #12
 8024cd8:	46bd      	mov	sp, r7
 8024cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cde:	4770      	bx	lr

08024ce0 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8024ce0:	b580      	push	{r7, lr}
 8024ce2:	b082      	sub	sp, #8
 8024ce4:	af00      	add	r7, sp, #0
 8024ce6:	6078      	str	r0, [r7, #4]
 8024ce8:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	6839      	ldr	r1, [r7, #0]
 8024cee:	4618      	mov	r0, r3
 8024cf0:	f001 f9e5 	bl	80260be <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8024cf4:	687b      	ldr	r3, [r7, #4]
 8024cf6:	4618      	mov	r0, r3
 8024cf8:	3708      	adds	r7, #8
 8024cfa:	46bd      	mov	sp, r7
 8024cfc:	bd80      	pop	{r7, pc}

08024cfe <_ZNKSt16initializer_listIhE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8024cfe:	b480      	push	{r7}
 8024d00:	b083      	sub	sp, #12
 8024d02:	af00      	add	r7, sp, #0
 8024d04:	6078      	str	r0, [r7, #4]
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	681b      	ldr	r3, [r3, #0]
 8024d0a:	4618      	mov	r0, r3
 8024d0c:	370c      	adds	r7, #12
 8024d0e:	46bd      	mov	sp, r7
 8024d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d14:	4770      	bx	lr

08024d16 <_ZNKSt16initializer_listIhE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8024d16:	b590      	push	{r4, r7, lr}
 8024d18:	b083      	sub	sp, #12
 8024d1a:	af00      	add	r7, sp, #0
 8024d1c:	6078      	str	r0, [r7, #4]
 8024d1e:	6878      	ldr	r0, [r7, #4]
 8024d20:	f7ff ffed 	bl	8024cfe <_ZNKSt16initializer_listIhE5beginEv>
 8024d24:	4604      	mov	r4, r0
 8024d26:	6878      	ldr	r0, [r7, #4]
 8024d28:	f001 f9db 	bl	80260e2 <_ZNKSt16initializer_listIhE4sizeEv>
 8024d2c:	4603      	mov	r3, r0
 8024d2e:	4423      	add	r3, r4
 8024d30:	4618      	mov	r0, r3
 8024d32:	370c      	adds	r7, #12
 8024d34:	46bd      	mov	sp, r7
 8024d36:	bd90      	pop	{r4, r7, pc}

08024d38 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8024d38:	b590      	push	{r4, r7, lr}
 8024d3a:	b087      	sub	sp, #28
 8024d3c:	af00      	add	r7, sp, #0
 8024d3e:	60f8      	str	r0, [r7, #12]
 8024d40:	60b9      	str	r1, [r7, #8]
 8024d42:	607a      	str	r2, [r7, #4]
 8024d44:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8024d46:	6879      	ldr	r1, [r7, #4]
 8024d48:	68b8      	ldr	r0, [r7, #8]
 8024d4a:	f001 f9d6 	bl	80260fa <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8024d4e:	4603      	mov	r3, r0
 8024d50:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8024d52:	68fc      	ldr	r4, [r7, #12]
 8024d54:	68fb      	ldr	r3, [r7, #12]
 8024d56:	4618      	mov	r0, r3
 8024d58:	f7ff fba6 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024d5c:	4603      	mov	r3, r0
 8024d5e:	4619      	mov	r1, r3
 8024d60:	6978      	ldr	r0, [r7, #20]
 8024d62:	f001 f9df 	bl	8026124 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>
 8024d66:	4603      	mov	r3, r0
 8024d68:	4619      	mov	r1, r3
 8024d6a:	4620      	mov	r0, r4
 8024d6c:	f001 f8b0 	bl	8025ed0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8024d70:	4602      	mov	r2, r0
 8024d72:	68fb      	ldr	r3, [r7, #12]
 8024d74:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8024d76:	68fb      	ldr	r3, [r7, #12]
 8024d78:	681a      	ldr	r2, [r3, #0]
 8024d7a:	697b      	ldr	r3, [r7, #20]
 8024d7c:	441a      	add	r2, r3
 8024d7e:	68fb      	ldr	r3, [r7, #12]
 8024d80:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 8024d82:	68fb      	ldr	r3, [r7, #12]
 8024d84:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8024d86:	68fb      	ldr	r3, [r7, #12]
 8024d88:	4618      	mov	r0, r3
 8024d8a:	f7ff fb8d 	bl	80244a8 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8024d8e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8024d90:	4622      	mov	r2, r4
 8024d92:	6879      	ldr	r1, [r7, #4]
 8024d94:	68b8      	ldr	r0, [r7, #8]
 8024d96:	f001 f9ed 	bl	8026174 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>
 8024d9a:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8024d9c:	68fb      	ldr	r3, [r7, #12]
 8024d9e:	605a      	str	r2, [r3, #4]
	}
 8024da0:	bf00      	nop
 8024da2:	371c      	adds	r7, #28
 8024da4:	46bd      	mov	sp, r7
 8024da6:	bd90      	pop	{r4, r7, pc}

08024da8 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8024da8:	b580      	push	{r7, lr}
 8024daa:	b082      	sub	sp, #8
 8024dac:	af00      	add	r7, sp, #0
 8024dae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	f103 0218 	add.w	r2, r3, #24
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	3308      	adds	r3, #8
 8024dba:	4619      	mov	r1, r3
 8024dbc:	4610      	mov	r0, r2
 8024dbe:	f001 f9ea 	bl	8026196 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 8024dc2:	4603      	mov	r3, r0
 8024dc4:	4618      	mov	r0, r3
 8024dc6:	3708      	adds	r7, #8
 8024dc8:	46bd      	mov	sp, r7
 8024dca:	bd80      	pop	{r7, pc}

08024dcc <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8024dcc:	b480      	push	{r7}
 8024dce:	b083      	sub	sp, #12
 8024dd0:	af00      	add	r7, sp, #0
 8024dd2:	6078      	str	r0, [r7, #4]
 8024dd4:	687b      	ldr	r3, [r7, #4]
 8024dd6:	681b      	ldr	r3, [r3, #0]
 8024dd8:	4618      	mov	r0, r3
 8024dda:	370c      	adds	r7, #12
 8024ddc:	46bd      	mov	sp, r7
 8024dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024de2:	4770      	bx	lr

08024de4 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8024de4:	b590      	push	{r4, r7, lr}
 8024de6:	b083      	sub	sp, #12
 8024de8:	af00      	add	r7, sp, #0
 8024dea:	6078      	str	r0, [r7, #4]
 8024dec:	6878      	ldr	r0, [r7, #4]
 8024dee:	f7ff ffed 	bl	8024dcc <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8024df2:	4604      	mov	r4, r0
 8024df4:	6878      	ldr	r0, [r7, #4]
 8024df6:	f001 f9f2 	bl	80261de <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8024dfa:	4602      	mov	r2, r0
 8024dfc:	4613      	mov	r3, r2
 8024dfe:	009b      	lsls	r3, r3, #2
 8024e00:	4413      	add	r3, r2
 8024e02:	009b      	lsls	r3, r3, #2
 8024e04:	4423      	add	r3, r4
 8024e06:	4618      	mov	r0, r3
 8024e08:	370c      	adds	r7, #12
 8024e0a:	46bd      	mov	sp, r7
 8024e0c:	bd90      	pop	{r4, r7, pc}

08024e0e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8024e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e10:	b09f      	sub	sp, #124	; 0x7c
 8024e12:	af02      	add	r7, sp, #8
 8024e14:	60f8      	str	r0, [r7, #12]
 8024e16:	60b9      	str	r1, [r7, #8]
 8024e18:	607a      	str	r2, [r7, #4]
 8024e1a:	703b      	strb	r3, [r7, #0]
	  const size_type __len = std::distance(__first, __last);
 8024e1c:	68bb      	ldr	r3, [r7, #8]
 8024e1e:	6879      	ldr	r1, [r7, #4]
 8024e20:	4618      	mov	r0, r3
 8024e22:	f001 f9e8 	bl	80261f6 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8024e26:	4603      	mov	r3, r0
 8024e28:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8024e2a:	68f8      	ldr	r0, [r7, #12]
 8024e2c:	f7fe ffa6 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024e30:	4602      	mov	r2, r0
 8024e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8024e34:	4293      	cmp	r3, r2
 8024e36:	bf8c      	ite	hi
 8024e38:	2301      	movhi	r3, #1
 8024e3a:	2300      	movls	r3, #0
 8024e3c:	b2db      	uxtb	r3, r3
 8024e3e:	2b00      	cmp	r3, #0
 8024e40:	d031      	beq.n	8024ea6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	      _ForwardIterator __mid = __first;
 8024e42:	68bb      	ldr	r3, [r7, #8]
 8024e44:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8024e46:	68f8      	ldr	r0, [r7, #12]
 8024e48:	f7fe ff98 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024e4c:	4602      	mov	r2, r0
 8024e4e:	f107 0314 	add.w	r3, r7, #20
 8024e52:	4611      	mov	r1, r2
 8024e54:	4618      	mov	r0, r3
 8024e56:	f001 f9e2 	bl	802621e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8024e5a:	68bc      	ldr	r4, [r7, #8]
 8024e5c:	697d      	ldr	r5, [r7, #20]
 8024e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8024e62:	68f9      	ldr	r1, [r7, #12]
 8024e64:	4618      	mov	r0, r3
 8024e66:	f000 fa66 	bl	8025336 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024e6a:	f107 0018 	add.w	r0, r7, #24
 8024e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8024e72:	462a      	mov	r2, r5
 8024e74:	4621      	mov	r1, r4
 8024e76:	f001 f9e5 	bl	8026244 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8024e7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8024e7e:	68f9      	ldr	r1, [r7, #12]
 8024e80:	4618      	mov	r0, r3
 8024e82:	f000 fa67 	bl	8025354 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8024e86:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8024e88:	f107 0308 	add.w	r3, r7, #8
 8024e8c:	4618      	mov	r0, r3
 8024e8e:	f001 f9f9 	bl	8026284 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8024e92:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8024e96:	f88d 6000 	strb.w	r6, [sp]
 8024e9a:	687b      	ldr	r3, [r7, #4]
 8024e9c:	4622      	mov	r2, r4
 8024e9e:	68f8      	ldr	r0, [r7, #12]
 8024ea0:	f001 f9fb 	bl	802629a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	}
 8024ea4:	e014      	b.n	8024ed0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8024ea6:	68bc      	ldr	r4, [r7, #8]
 8024ea8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8024eac:	68f9      	ldr	r1, [r7, #12]
 8024eae:	4618      	mov	r0, r3
 8024eb0:	f000 fa41 	bl	8025336 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024eb4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8024eb8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8024ebc:	687a      	ldr	r2, [r7, #4]
 8024ebe:	4621      	mov	r1, r4
 8024ec0:	f001 f9c0 	bl	8026244 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8024ec4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8024ec8:	4619      	mov	r1, r3
 8024eca:	68f8      	ldr	r0, [r7, #12]
 8024ecc:	f001 fa62 	bl	8026394 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8024ed0:	bf00      	nop
 8024ed2:	3774      	adds	r7, #116	; 0x74
 8024ed4:	46bd      	mov	sp, r7
 8024ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024ed8 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8024ed8:	b580      	push	{r7, lr}
 8024eda:	b084      	sub	sp, #16
 8024edc:	af00      	add	r7, sp, #0
 8024ede:	60f8      	str	r0, [r7, #12]
 8024ee0:	60b9      	str	r1, [r7, #8]
 8024ee2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8024ee4:	6878      	ldr	r0, [r7, #4]
 8024ee6:	f001 fa88 	bl	80263fa <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8024eea:	4603      	mov	r3, r0
 8024eec:	461a      	mov	r2, r3
 8024eee:	68b9      	ldr	r1, [r7, #8]
 8024ef0:	68f8      	ldr	r0, [r7, #12]
 8024ef2:	f001 fa8d 	bl	8026410 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8024ef6:	bf00      	nop
 8024ef8:	3710      	adds	r7, #16
 8024efa:	46bd      	mov	sp, r7
 8024efc:	bd80      	pop	{r7, pc}
	...

08024f00 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024f00:	b5b0      	push	{r4, r5, r7, lr}
 8024f02:	b082      	sub	sp, #8
 8024f04:	af00      	add	r7, sp, #0
 8024f06:	6078      	str	r0, [r7, #4]
 8024f08:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8024f0a:	6878      	ldr	r0, [r7, #4]
 8024f0c:	f7fe ff36 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8024f10:	4604      	mov	r4, r0
 8024f12:	6878      	ldr	r0, [r7, #4]
 8024f14:	f001 fa95 	bl	8026442 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8024f18:	4603      	mov	r3, r0
 8024f1a:	429c      	cmp	r4, r3
 8024f1c:	bf0c      	ite	eq
 8024f1e:	2301      	moveq	r3, #1
 8024f20:	2300      	movne	r3, #0
 8024f22:	b2db      	uxtb	r3, r3
 8024f24:	2b00      	cmp	r3, #0
 8024f26:	d002      	beq.n	8024f2e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8024f28:	4817      	ldr	r0, [pc, #92]	; (8024f88 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8024f2a:	f01a fa3d 	bl	803f3a8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8024f2e:	2101      	movs	r1, #1
 8024f30:	6878      	ldr	r0, [r7, #4]
 8024f32:	f001 fa97 	bl	8026464 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8024f36:	687a      	ldr	r2, [r7, #4]
 8024f38:	687b      	ldr	r3, [r7, #4]
 8024f3a:	695b      	ldr	r3, [r3, #20]
 8024f3c:	1f1c      	subs	r4, r3, #4
 8024f3e:	4610      	mov	r0, r2
 8024f40:	f001 faa8 	bl	8026494 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024f44:	4603      	mov	r3, r0
 8024f46:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8024f48:	687b      	ldr	r3, [r7, #4]
 8024f4a:	f103 0208 	add.w	r2, r3, #8
 8024f4e:	687b      	ldr	r3, [r7, #4]
 8024f50:	695b      	ldr	r3, [r3, #20]
 8024f52:	3b04      	subs	r3, #4
 8024f54:	4619      	mov	r1, r3
 8024f56:	4610      	mov	r0, r2
 8024f58:	f001 faae 	bl	80264b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8024f5c:	687b      	ldr	r3, [r7, #4]
 8024f5e:	691b      	ldr	r3, [r3, #16]
 8024f60:	f1a3 0214 	sub.w	r2, r3, #20
 8024f64:	687b      	ldr	r3, [r7, #4]
 8024f66:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8024f68:	687c      	ldr	r4, [r7, #4]
 8024f6a:	687b      	ldr	r3, [r7, #4]
 8024f6c:	689d      	ldr	r5, [r3, #8]
 8024f6e:	6838      	ldr	r0, [r7, #0]
 8024f70:	f001 fa43 	bl	80263fa <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8024f74:	4603      	mov	r3, r0
 8024f76:	461a      	mov	r2, r3
 8024f78:	4629      	mov	r1, r5
 8024f7a:	4620      	mov	r0, r4
 8024f7c:	f7ff ffac 	bl	8024ed8 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
      }
 8024f80:	bf00      	nop
 8024f82:	3708      	adds	r7, #8
 8024f84:	46bd      	mov	sp, r7
 8024f86:	bdb0      	pop	{r4, r5, r7, pc}
 8024f88:	0804109c 	.word	0x0804109c

08024f8c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024f8c:	b580      	push	{r7, lr}
 8024f8e:	b082      	sub	sp, #8
 8024f90:	af00      	add	r7, sp, #0
 8024f92:	6078      	str	r0, [r7, #4]
 8024f94:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8024f96:	f001 fabe 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8024f9a:	4603      	mov	r3, r0
 8024f9c:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	68da      	ldr	r2, [r3, #12]
 8024fa2:	683b      	ldr	r3, [r7, #0]
 8024fa4:	68db      	ldr	r3, [r3, #12]
 8024fa6:	1ad3      	subs	r3, r2, r3
 8024fa8:	109b      	asrs	r3, r3, #2
 8024faa:	3b01      	subs	r3, #1
 8024fac:	fb01 f303 	mul.w	r3, r1, r3
 8024fb0:	687a      	ldr	r2, [r7, #4]
 8024fb2:	6811      	ldr	r1, [r2, #0]
 8024fb4:	687a      	ldr	r2, [r7, #4]
 8024fb6:	6852      	ldr	r2, [r2, #4]
 8024fb8:	1a8a      	subs	r2, r1, r2
 8024fba:	1092      	asrs	r2, r2, #2
 8024fbc:	4908      	ldr	r1, [pc, #32]	; (8024fe0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024fbe:	fb01 f202 	mul.w	r2, r1, r2
 8024fc2:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8024fc4:	683a      	ldr	r2, [r7, #0]
 8024fc6:	6891      	ldr	r1, [r2, #8]
 8024fc8:	683a      	ldr	r2, [r7, #0]
 8024fca:	6812      	ldr	r2, [r2, #0]
 8024fcc:	1a8a      	subs	r2, r1, r2
 8024fce:	1092      	asrs	r2, r2, #2
 8024fd0:	4903      	ldr	r1, [pc, #12]	; (8024fe0 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024fd2:	fb01 f202 	mul.w	r2, r1, r2
 8024fd6:	4413      	add	r3, r2
      }
 8024fd8:	4618      	mov	r0, r3
 8024fda:	3708      	adds	r7, #8
 8024fdc:	46bd      	mov	sp, r7
 8024fde:	bd80      	pop	{r7, pc}
 8024fe0:	cccccccd 	.word	0xcccccccd

08024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024fe4:	b480      	push	{r7}
 8024fe6:	b083      	sub	sp, #12
 8024fe8:	af00      	add	r7, sp, #0
 8024fea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8024fec:	687b      	ldr	r3, [r7, #4]
 8024fee:	4618      	mov	r0, r3
 8024ff0:	370c      	adds	r7, #12
 8024ff2:	46bd      	mov	sp, r7
 8024ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ff8:	4770      	bx	lr

08024ffa <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024ffa:	b580      	push	{r7, lr}
 8024ffc:	b082      	sub	sp, #8
 8024ffe:	af00      	add	r7, sp, #0
 8025000:	6078      	str	r0, [r7, #4]
 8025002:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8025004:	6839      	ldr	r1, [r7, #0]
 8025006:	6878      	ldr	r0, [r7, #4]
 8025008:	f001 fa8d 	bl	8026526 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
	}
 802500c:	bf00      	nop
 802500e:	3708      	adds	r7, #8
 8025010:	46bd      	mov	sp, r7
 8025012:	bd80      	pop	{r7, pc}

08025014 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:
    void deque<_Tp, _Alloc>::
 8025014:	b580      	push	{r7, lr}
 8025016:	b082      	sub	sp, #8
 8025018:	af00      	add	r7, sp, #0
 802501a:	6078      	str	r0, [r7, #4]
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 802501c:	687a      	ldr	r2, [r7, #4]
 802501e:	687b      	ldr	r3, [r7, #4]
 8025020:	69db      	ldr	r3, [r3, #28]
 8025022:	4619      	mov	r1, r3
 8025024:	4610      	mov	r0, r2
 8025026:	f001 fa63 	bl	80264f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 802502a:	687b      	ldr	r3, [r7, #4]
 802502c:	f103 0218 	add.w	r2, r3, #24
 8025030:	687b      	ldr	r3, [r7, #4]
 8025032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025034:	3b04      	subs	r3, #4
 8025036:	4619      	mov	r1, r3
 8025038:	4610      	mov	r0, r2
 802503a:	f001 fa3d 	bl	80264b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 802503e:	687b      	ldr	r3, [r7, #4]
 8025040:	6a1b      	ldr	r3, [r3, #32]
 8025042:	f1a3 0214 	sub.w	r2, r3, #20
 8025046:	687b      	ldr	r3, [r7, #4]
 8025048:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 802504a:	687b      	ldr	r3, [r7, #4]
 802504c:	4618      	mov	r0, r3
 802504e:	f7ff ffc9 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025052:	4602      	mov	r2, r0
 8025054:	687b      	ldr	r3, [r7, #4]
 8025056:	699b      	ldr	r3, [r3, #24]
 8025058:	4619      	mov	r1, r3
 802505a:	4610      	mov	r0, r2
 802505c:	f7ff ffcd 	bl	8024ffa <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
    }
 8025060:	bf00      	nop
 8025062:	3708      	adds	r7, #8
 8025064:	46bd      	mov	sp, r7
 8025066:	bd80      	pop	{r7, pc}

08025068 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8025068:	b480      	push	{r7}
 802506a:	b083      	sub	sp, #12
 802506c:	af00      	add	r7, sp, #0
 802506e:	6078      	str	r0, [r7, #4]
 8025070:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8025072:	687b      	ldr	r3, [r7, #4]
 8025074:	681a      	ldr	r2, [r3, #0]
 8025076:	683b      	ldr	r3, [r7, #0]
 8025078:	681b      	ldr	r3, [r3, #0]
 802507a:	429a      	cmp	r2, r3
 802507c:	bf0c      	ite	eq
 802507e:	2301      	moveq	r3, #1
 8025080:	2300      	movne	r3, #0
 8025082:	b2db      	uxtb	r3, r3
 8025084:	4618      	mov	r0, r3
 8025086:	370c      	adds	r7, #12
 8025088:	46bd      	mov	sp, r7
 802508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802508e:	4770      	bx	lr

08025090 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8025090:	b580      	push	{r7, lr}
 8025092:	b086      	sub	sp, #24
 8025094:	af00      	add	r7, sp, #0
 8025096:	6078      	str	r0, [r7, #4]
 8025098:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 802509a:	f107 0308 	add.w	r3, r7, #8
 802509e:	683a      	ldr	r2, [r7, #0]
 80250a0:	6879      	ldr	r1, [r7, #4]
 80250a2:	4618      	mov	r0, r3
 80250a4:	f001 fa4a 	bl	802653c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80250a8:	f107 0308 	add.w	r3, r7, #8
 80250ac:	4618      	mov	r0, r3
 80250ae:	f001 fa58 	bl	8026562 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 80250b2:	4603      	mov	r3, r0
 80250b4:	4618      	mov	r0, r3
 80250b6:	3718      	adds	r7, #24
 80250b8:	46bd      	mov	sp, r7
 80250ba:	bd80      	pop	{r7, pc}

080250bc <_ZNSt5dequeIjSaIjEE9push_backERKj>:
      push_back(const value_type& __x)
 80250bc:	b580      	push	{r7, lr}
 80250be:	b082      	sub	sp, #8
 80250c0:	af00      	add	r7, sp, #0
 80250c2:	6078      	str	r0, [r7, #4]
 80250c4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80250ca:	687b      	ldr	r3, [r7, #4]
 80250cc:	6a1b      	ldr	r3, [r3, #32]
 80250ce:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80250d0:	429a      	cmp	r2, r3
 80250d2:	d00c      	beq.n	80250ee <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 80250d4:	6878      	ldr	r0, [r7, #4]
 80250d6:	687b      	ldr	r3, [r7, #4]
 80250d8:	699b      	ldr	r3, [r3, #24]
 80250da:	683a      	ldr	r2, [r7, #0]
 80250dc:	4619      	mov	r1, r3
 80250de:	f001 fa4c 	bl	802657a <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80250e2:	687b      	ldr	r3, [r7, #4]
 80250e4:	699b      	ldr	r3, [r3, #24]
 80250e6:	1d1a      	adds	r2, r3, #4
 80250e8:	687b      	ldr	r3, [r7, #4]
 80250ea:	619a      	str	r2, [r3, #24]
      }
 80250ec:	e003      	b.n	80250f6 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 80250ee:	6839      	ldr	r1, [r7, #0]
 80250f0:	6878      	ldr	r0, [r7, #4]
 80250f2:	f001 fa55 	bl	80265a0 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 80250f6:	bf00      	nop
 80250f8:	3708      	adds	r7, #8
 80250fa:	46bd      	mov	sp, r7
 80250fc:	bd80      	pop	{r7, pc}

080250fe <_ZNKSt5dequeIjSaIjEE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 80250fe:	b580      	push	{r7, lr}
 8025100:	b086      	sub	sp, #24
 8025102:	af00      	add	r7, sp, #0
 8025104:	6078      	str	r0, [r7, #4]
	return *begin();
 8025106:	f107 0308 	add.w	r3, r7, #8
 802510a:	6879      	ldr	r1, [r7, #4]
 802510c:	4618      	mov	r0, r3
 802510e:	f001 fa8b 	bl	8026628 <_ZNKSt5dequeIjSaIjEE5beginEv>
 8025112:	f107 0308 	add.w	r3, r7, #8
 8025116:	4618      	mov	r0, r3
 8025118:	f001 fa95 	bl	8026646 <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>
 802511c:	4603      	mov	r3, r0
      }
 802511e:	4618      	mov	r0, r3
 8025120:	3718      	adds	r7, #24
 8025122:	46bd      	mov	sp, r7
 8025124:	bd80      	pop	{r7, pc}

08025126 <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8025126:	b580      	push	{r7, lr}
 8025128:	b082      	sub	sp, #8
 802512a:	af00      	add	r7, sp, #0
 802512c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 802512e:	687b      	ldr	r3, [r7, #4]
 8025130:	f103 0218 	add.w	r2, r3, #24
 8025134:	687b      	ldr	r3, [r7, #4]
 8025136:	3308      	adds	r3, #8
 8025138:	4619      	mov	r1, r3
 802513a:	4610      	mov	r0, r2
 802513c:	f001 fa8f 	bl	802665e <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 8025140:	4603      	mov	r3, r0
 8025142:	4618      	mov	r0, r3
 8025144:	3708      	adds	r7, #8
 8025146:	46bd      	mov	sp, r7
 8025148:	bd80      	pop	{r7, pc}

0802514a <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 802514a:	b580      	push	{r7, lr}
 802514c:	b082      	sub	sp, #8
 802514e:	af00      	add	r7, sp, #0
 8025150:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8025152:	687b      	ldr	r3, [r7, #4]
 8025154:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8025156:	687b      	ldr	r3, [r7, #4]
 8025158:	691b      	ldr	r3, [r3, #16]
 802515a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 802515c:	429a      	cmp	r2, r3
 802515e:	d010      	beq.n	8025182 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	4618      	mov	r0, r3
 8025164:	f000 f98b 	bl	802547e <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025168:	4602      	mov	r2, r0
 802516a:	687b      	ldr	r3, [r7, #4]
 802516c:	689b      	ldr	r3, [r3, #8]
 802516e:	4619      	mov	r1, r3
 8025170:	4610      	mov	r0, r2
 8025172:	f001 fa88 	bl	8026686 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8025176:	687b      	ldr	r3, [r7, #4]
 8025178:	689b      	ldr	r3, [r3, #8]
 802517a:	1d1a      	adds	r2, r3, #4
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	609a      	str	r2, [r3, #8]
      }
 8025180:	e002      	b.n	8025188 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8025182:	6878      	ldr	r0, [r7, #4]
 8025184:	f001 fa8c 	bl	80266a0 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 8025188:	bf00      	nop
 802518a:	3708      	adds	r7, #8
 802518c:	46bd      	mov	sp, r7
 802518e:	bd80      	pop	{r7, pc}

08025190 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8025190:	b580      	push	{r7, lr}
 8025192:	b082      	sub	sp, #8
 8025194:	af00      	add	r7, sp, #0
 8025196:	6078      	str	r0, [r7, #4]
 8025198:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 802519a:	683b      	ldr	r3, [r7, #0]
 802519c:	3308      	adds	r3, #8
 802519e:	4619      	mov	r1, r3
 80251a0:	6878      	ldr	r0, [r7, #4]
 80251a2:	f001 faa5 	bl	80266f0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>
 80251a6:	6878      	ldr	r0, [r7, #4]
 80251a8:	3708      	adds	r7, #8
 80251aa:	46bd      	mov	sp, r7
 80251ac:	bd80      	pop	{r7, pc}

080251ae <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80251ae:	b480      	push	{r7}
 80251b0:	b083      	sub	sp, #12
 80251b2:	af00      	add	r7, sp, #0
 80251b4:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	681b      	ldr	r3, [r3, #0]
 80251ba:	4618      	mov	r0, r3
 80251bc:	370c      	adds	r7, #12
 80251be:	46bd      	mov	sp, r7
 80251c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251c4:	4770      	bx	lr

080251c6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80251c6:	b580      	push	{r7, lr}
 80251c8:	b082      	sub	sp, #8
 80251ca:	af00      	add	r7, sp, #0
 80251cc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80251ce:	6878      	ldr	r0, [r7, #4]
 80251d0:	f001 faaa 	bl	8026728 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 80251d4:	687b      	ldr	r3, [r7, #4]
 80251d6:	4618      	mov	r0, r3
 80251d8:	f001 fab2 	bl	8026740 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 80251dc:	687b      	ldr	r3, [r7, #4]
 80251de:	4618      	mov	r0, r3
 80251e0:	3708      	adds	r7, #8
 80251e2:	46bd      	mov	sp, r7
 80251e4:	bd80      	pop	{r7, pc}

080251e6 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80251e6:	b580      	push	{r7, lr}
 80251e8:	b082      	sub	sp, #8
 80251ea:	af00      	add	r7, sp, #0
 80251ec:	6078      	str	r0, [r7, #4]
 80251ee:	6878      	ldr	r0, [r7, #4]
 80251f0:	f001 fabf 	bl	8026772 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 80251f4:	687b      	ldr	r3, [r7, #4]
 80251f6:	4618      	mov	r0, r3
 80251f8:	3708      	adds	r7, #8
 80251fa:	46bd      	mov	sp, r7
 80251fc:	bd80      	pop	{r7, pc}

080251fe <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80251fe:	b590      	push	{r4, r7, lr}
 8025200:	b089      	sub	sp, #36	; 0x24
 8025202:	af00      	add	r7, sp, #0
 8025204:	6078      	str	r0, [r7, #4]
 8025206:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8025208:	2014      	movs	r0, #20
 802520a:	f7fb fe68 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802520e:	4602      	mov	r2, r0
 8025210:	683b      	ldr	r3, [r7, #0]
 8025212:	fbb3 f3f2 	udiv	r3, r3, r2
 8025216:	3301      	adds	r3, #1
 8025218:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802521a:	2308      	movs	r3, #8
 802521c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802521e:	69fb      	ldr	r3, [r7, #28]
 8025220:	3302      	adds	r3, #2
 8025222:	613b      	str	r3, [r7, #16]
 8025224:	f107 0210 	add.w	r2, r7, #16
 8025228:	f107 030c 	add.w	r3, r7, #12
 802522c:	4611      	mov	r1, r2
 802522e:	4618      	mov	r0, r3
 8025230:	f000 fa39 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 8025234:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8025236:	681a      	ldr	r2, [r3, #0]
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 802523c:	687b      	ldr	r3, [r7, #4]
 802523e:	685b      	ldr	r3, [r3, #4]
 8025240:	4619      	mov	r1, r3
 8025242:	6878      	ldr	r0, [r7, #4]
 8025244:	f001 faa0 	bl	8026788 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8025248:	4602      	mov	r2, r0
 802524a:	687b      	ldr	r3, [r7, #4]
 802524c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802524e:	687b      	ldr	r3, [r7, #4]
 8025250:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8025252:	687b      	ldr	r3, [r7, #4]
 8025254:	6859      	ldr	r1, [r3, #4]
 8025256:	69fb      	ldr	r3, [r7, #28]
 8025258:	1acb      	subs	r3, r1, r3
 802525a:	085b      	lsrs	r3, r3, #1
 802525c:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 802525e:	4413      	add	r3, r2
 8025260:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8025262:	69fb      	ldr	r3, [r7, #28]
 8025264:	009b      	lsls	r3, r3, #2
 8025266:	69ba      	ldr	r2, [r7, #24]
 8025268:	4413      	add	r3, r2
 802526a:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 802526c:	697a      	ldr	r2, [r7, #20]
 802526e:	69b9      	ldr	r1, [r7, #24]
 8025270:	6878      	ldr	r0, [r7, #4]
 8025272:	f001 faa6 	bl	80267c2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8025276:	687b      	ldr	r3, [r7, #4]
 8025278:	3308      	adds	r3, #8
 802527a:	69b9      	ldr	r1, [r7, #24]
 802527c:	4618      	mov	r0, r3
 802527e:	f001 f91b 	bl	80264b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	f103 0218 	add.w	r2, r3, #24
 8025288:	697b      	ldr	r3, [r7, #20]
 802528a:	3b04      	subs	r3, #4
 802528c:	4619      	mov	r1, r3
 802528e:	4610      	mov	r0, r2
 8025290:	f001 f912 	bl	80264b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	68da      	ldr	r2, [r3, #12]
 8025298:	687b      	ldr	r3, [r7, #4]
 802529a:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80252a0:	2014      	movs	r0, #20
 80252a2:	f7fb fe1c 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80252a6:	4602      	mov	r2, r0
 80252a8:	683b      	ldr	r3, [r7, #0]
 80252aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80252ae:	fb01 f202 	mul.w	r2, r1, r2
 80252b2:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 80252b4:	4613      	mov	r3, r2
 80252b6:	009b      	lsls	r3, r3, #2
 80252b8:	4413      	add	r3, r2
 80252ba:	009b      	lsls	r3, r3, #2
 80252bc:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80252be:	687b      	ldr	r3, [r7, #4]
 80252c0:	619a      	str	r2, [r3, #24]
    }
 80252c2:	bf00      	nop
 80252c4:	3724      	adds	r7, #36	; 0x24
 80252c6:	46bd      	mov	sp, r7
 80252c8:	bd90      	pop	{r4, r7, pc}

080252ca <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80252ca:	b580      	push	{r7, lr}
 80252cc:	b086      	sub	sp, #24
 80252ce:	af00      	add	r7, sp, #0
 80252d0:	60f8      	str	r0, [r7, #12]
 80252d2:	60b9      	str	r1, [r7, #8]
 80252d4:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80252d6:	68bb      	ldr	r3, [r7, #8]
 80252d8:	617b      	str	r3, [r7, #20]
 80252da:	697a      	ldr	r2, [r7, #20]
 80252dc:	687b      	ldr	r3, [r7, #4]
 80252de:	429a      	cmp	r2, r3
 80252e0:	d209      	bcs.n	80252f6 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 80252e2:	697b      	ldr	r3, [r7, #20]
 80252e4:	681b      	ldr	r3, [r3, #0]
 80252e6:	4619      	mov	r1, r3
 80252e8:	68f8      	ldr	r0, [r7, #12]
 80252ea:	f001 f901 	bl	80264f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80252ee:	697b      	ldr	r3, [r7, #20]
 80252f0:	3304      	adds	r3, #4
 80252f2:	617b      	str	r3, [r7, #20]
 80252f4:	e7f1      	b.n	80252da <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 80252f6:	bf00      	nop
 80252f8:	3718      	adds	r7, #24
 80252fa:	46bd      	mov	sp, r7
 80252fc:	bd80      	pop	{r7, pc}

080252fe <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80252fe:	b580      	push	{r7, lr}
 8025300:	b086      	sub	sp, #24
 8025302:	af00      	add	r7, sp, #0
 8025304:	60f8      	str	r0, [r7, #12]
 8025306:	60b9      	str	r1, [r7, #8]
 8025308:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802530a:	f107 0314 	add.w	r3, r7, #20
 802530e:	68f9      	ldr	r1, [r7, #12]
 8025310:	4618      	mov	r0, r3
 8025312:	f001 fa70 	bl	80267f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8025316:	f107 0314 	add.w	r3, r7, #20
 802531a:	687a      	ldr	r2, [r7, #4]
 802531c:	68b9      	ldr	r1, [r7, #8]
 802531e:	4618      	mov	r0, r3
 8025320:	f001 fa86 	bl	8026830 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025324:	f107 0314 	add.w	r3, r7, #20
 8025328:	4618      	mov	r0, r3
 802532a:	f001 fa75 	bl	8026818 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 802532e:	bf00      	nop
 8025330:	3718      	adds	r7, #24
 8025332:	46bd      	mov	sp, r7
 8025334:	bd80      	pop	{r7, pc}

08025336 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8025336:	b580      	push	{r7, lr}
 8025338:	b082      	sub	sp, #8
 802533a:	af00      	add	r7, sp, #0
 802533c:	6078      	str	r0, [r7, #4]
 802533e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8025340:	683b      	ldr	r3, [r7, #0]
 8025342:	3308      	adds	r3, #8
 8025344:	4619      	mov	r1, r3
 8025346:	6878      	ldr	r0, [r7, #4]
 8025348:	f000 f813 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802534c:	6878      	ldr	r0, [r7, #4]
 802534e:	3708      	adds	r7, #8
 8025350:	46bd      	mov	sp, r7
 8025352:	bd80      	pop	{r7, pc}

08025354 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8025354:	b580      	push	{r7, lr}
 8025356:	b082      	sub	sp, #8
 8025358:	af00      	add	r7, sp, #0
 802535a:	6078      	str	r0, [r7, #4]
 802535c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 802535e:	683b      	ldr	r3, [r7, #0]
 8025360:	3318      	adds	r3, #24
 8025362:	4619      	mov	r1, r3
 8025364:	6878      	ldr	r0, [r7, #4]
 8025366:	f000 f804 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802536a:	6878      	ldr	r0, [r7, #4]
 802536c:	3708      	adds	r7, #8
 802536e:	46bd      	mov	sp, r7
 8025370:	bd80      	pop	{r7, pc}

08025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8025372:	b480      	push	{r7}
 8025374:	b083      	sub	sp, #12
 8025376:	af00      	add	r7, sp, #0
 8025378:	6078      	str	r0, [r7, #4]
 802537a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802537c:	683b      	ldr	r3, [r7, #0]
 802537e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025380:	687b      	ldr	r3, [r7, #4]
 8025382:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025384:	683b      	ldr	r3, [r7, #0]
 8025386:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025388:	687b      	ldr	r3, [r7, #4]
 802538a:	605a      	str	r2, [r3, #4]
 802538c:	683b      	ldr	r3, [r7, #0]
 802538e:	689a      	ldr	r2, [r3, #8]
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	609a      	str	r2, [r3, #8]
 8025394:	683b      	ldr	r3, [r7, #0]
 8025396:	68da      	ldr	r2, [r3, #12]
 8025398:	687b      	ldr	r3, [r7, #4]
 802539a:	60da      	str	r2, [r3, #12]
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	4618      	mov	r0, r3
 80253a0:	370c      	adds	r7, #12
 80253a2:	46bd      	mov	sp, r7
 80253a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253a8:	4770      	bx	lr

080253aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
      _M_destroy_data(iterator __first, iterator __last,
 80253aa:	b480      	push	{r7}
 80253ac:	b08d      	sub	sp, #52	; 0x34
 80253ae:	af00      	add	r7, sp, #0
 80253b0:	60f8      	str	r0, [r7, #12]
 80253b2:	60b9      	str	r1, [r7, #8]
 80253b4:	607a      	str	r2, [r7, #4]
 80253b6:	603b      	str	r3, [r7, #0]
      }
 80253b8:	bf00      	nop
 80253ba:	3734      	adds	r7, #52	; 0x34
 80253bc:	46bd      	mov	sp, r7
 80253be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253c2:	4770      	bx	lr

080253c4 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 80253c4:	b580      	push	{r7, lr}
 80253c6:	b082      	sub	sp, #8
 80253c8:	af00      	add	r7, sp, #0
 80253ca:	6078      	str	r0, [r7, #4]
 80253cc:	6878      	ldr	r0, [r7, #4]
 80253ce:	f001 fa4e 	bl	802686e <_ZNSaIjED1Ev>
 80253d2:	687b      	ldr	r3, [r7, #4]
 80253d4:	4618      	mov	r0, r3
 80253d6:	3708      	adds	r7, #8
 80253d8:	46bd      	mov	sp, r7
 80253da:	bd80      	pop	{r7, pc}

080253dc <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 80253dc:	b580      	push	{r7, lr}
 80253de:	b082      	sub	sp, #8
 80253e0:	af00      	add	r7, sp, #0
 80253e2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80253e4:	687b      	ldr	r3, [r7, #4]
 80253e6:	4618      	mov	r0, r3
 80253e8:	f001 fa31 	bl	802684e <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80253ec:	2100      	movs	r1, #0
 80253ee:	6878      	ldr	r0, [r7, #4]
 80253f0:	f001 fa49 	bl	8026886 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 80253f4:	687b      	ldr	r3, [r7, #4]
 80253f6:	4618      	mov	r0, r3
 80253f8:	3708      	adds	r7, #8
 80253fa:	46bd      	mov	sp, r7
 80253fc:	bd80      	pop	{r7, pc}

080253fe <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80253fe:	b580      	push	{r7, lr}
 8025400:	b082      	sub	sp, #8
 8025402:	af00      	add	r7, sp, #0
 8025404:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	681b      	ldr	r3, [r3, #0]
 802540a:	2b00      	cmp	r3, #0
 802540c:	d010      	beq.n	8025430 <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802540e:	687b      	ldr	r3, [r7, #4]
 8025410:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8025416:	3304      	adds	r3, #4
 8025418:	461a      	mov	r2, r3
 802541a:	6878      	ldr	r0, [r7, #4]
 802541c:	f001 fa96 	bl	802694c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8025420:	687b      	ldr	r3, [r7, #4]
 8025422:	6819      	ldr	r1, [r3, #0]
 8025424:	687b      	ldr	r3, [r7, #4]
 8025426:	685b      	ldr	r3, [r3, #4]
 8025428:	461a      	mov	r2, r3
 802542a:	6878      	ldr	r0, [r7, #4]
 802542c:	f001 faa8 	bl	8026980 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	4618      	mov	r0, r3
 8025434:	f7ff ffc6 	bl	80253c4 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 8025438:	687b      	ldr	r3, [r7, #4]
 802543a:	4618      	mov	r0, r3
 802543c:	3708      	adds	r7, #8
 802543e:	46bd      	mov	sp, r7
 8025440:	bd80      	pop	{r7, pc}

08025442 <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8025442:	b580      	push	{r7, lr}
 8025444:	b082      	sub	sp, #8
 8025446:	af00      	add	r7, sp, #0
 8025448:	6078      	str	r0, [r7, #4]
 802544a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 802544c:	683b      	ldr	r3, [r7, #0]
 802544e:	3308      	adds	r3, #8
 8025450:	4619      	mov	r1, r3
 8025452:	6878      	ldr	r0, [r7, #4]
 8025454:	f000 f81e 	bl	8025494 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8025458:	6878      	ldr	r0, [r7, #4]
 802545a:	3708      	adds	r7, #8
 802545c:	46bd      	mov	sp, r7
 802545e:	bd80      	pop	{r7, pc}

08025460 <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8025460:	b580      	push	{r7, lr}
 8025462:	b082      	sub	sp, #8
 8025464:	af00      	add	r7, sp, #0
 8025466:	6078      	str	r0, [r7, #4]
 8025468:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 802546a:	683b      	ldr	r3, [r7, #0]
 802546c:	3318      	adds	r3, #24
 802546e:	4619      	mov	r1, r3
 8025470:	6878      	ldr	r0, [r7, #4]
 8025472:	f000 f80f 	bl	8025494 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8025476:	6878      	ldr	r0, [r7, #4]
 8025478:	3708      	adds	r7, #8
 802547a:	46bd      	mov	sp, r7
 802547c:	bd80      	pop	{r7, pc}

0802547e <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 802547e:	b480      	push	{r7}
 8025480:	b083      	sub	sp, #12
 8025482:	af00      	add	r7, sp, #0
 8025484:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	4618      	mov	r0, r3
 802548a:	370c      	adds	r7, #12
 802548c:	46bd      	mov	sp, r7
 802548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025492:	4770      	bx	lr

08025494 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8025494:	b480      	push	{r7}
 8025496:	b083      	sub	sp, #12
 8025498:	af00      	add	r7, sp, #0
 802549a:	6078      	str	r0, [r7, #4]
 802549c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 802549e:	683b      	ldr	r3, [r7, #0]
 80254a0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80254a2:	687b      	ldr	r3, [r7, #4]
 80254a4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80254a6:	683b      	ldr	r3, [r7, #0]
 80254a8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80254aa:	687b      	ldr	r3, [r7, #4]
 80254ac:	605a      	str	r2, [r3, #4]
 80254ae:	683b      	ldr	r3, [r7, #0]
 80254b0:	689a      	ldr	r2, [r3, #8]
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	609a      	str	r2, [r3, #8]
 80254b6:	683b      	ldr	r3, [r7, #0]
 80254b8:	68da      	ldr	r2, [r3, #12]
 80254ba:	687b      	ldr	r3, [r7, #4]
 80254bc:	60da      	str	r2, [r3, #12]
 80254be:	687b      	ldr	r3, [r7, #4]
 80254c0:	4618      	mov	r0, r3
 80254c2:	370c      	adds	r7, #12
 80254c4:	46bd      	mov	sp, r7
 80254c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254ca:	4770      	bx	lr

080254cc <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 80254cc:	b480      	push	{r7}
 80254ce:	b08d      	sub	sp, #52	; 0x34
 80254d0:	af00      	add	r7, sp, #0
 80254d2:	60f8      	str	r0, [r7, #12]
 80254d4:	60b9      	str	r1, [r7, #8]
 80254d6:	607a      	str	r2, [r7, #4]
 80254d8:	603b      	str	r3, [r7, #0]
      }
 80254da:	bf00      	nop
 80254dc:	3734      	adds	r7, #52	; 0x34
 80254de:	46bd      	mov	sp, r7
 80254e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254e4:	4770      	bx	lr

080254e6 <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80254e6:	b480      	push	{r7}
 80254e8:	b083      	sub	sp, #12
 80254ea:	af00      	add	r7, sp, #0
 80254ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80254ee:	687b      	ldr	r3, [r7, #4]
 80254f0:	4618      	mov	r0, r3
 80254f2:	370c      	adds	r7, #12
 80254f4:	46bd      	mov	sp, r7
 80254f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80254fa:	4770      	bx	lr

080254fc <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80254fc:	b590      	push	{r4, r7, lr}
 80254fe:	b085      	sub	sp, #20
 8025500:	af00      	add	r7, sp, #0
 8025502:	60f8      	str	r0, [r7, #12]
 8025504:	60b9      	str	r1, [r7, #8]
 8025506:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8025508:	68fb      	ldr	r3, [r7, #12]
 802550a:	68ba      	ldr	r2, [r7, #8]
 802550c:	4611      	mov	r1, r2
 802550e:	4618      	mov	r0, r3
 8025510:	f001 fa52 	bl	80269b8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8025514:	68b8      	ldr	r0, [r7, #8]
 8025516:	f001 fa5c 	bl	80269d2 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802551a:	68fb      	ldr	r3, [r7, #12]
 802551c:	4618      	mov	r0, r3
 802551e:	f7fe fea8 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8025522:	4604      	mov	r4, r0
 8025524:	68bb      	ldr	r3, [r7, #8]
 8025526:	4618      	mov	r0, r3
 8025528:	f7fe fea3 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 802552c:	4603      	mov	r3, r0
 802552e:	4619      	mov	r1, r3
 8025530:	4620      	mov	r0, r4
 8025532:	f001 fa62 	bl	80269fa <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 8025536:	bf00      	nop
 8025538:	3714      	adds	r7, #20
 802553a:	46bd      	mov	sp, r7
 802553c:	bd90      	pop	{r4, r7, pc}

0802553e <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 802553e:	b480      	push	{r7}
 8025540:	b083      	sub	sp, #12
 8025542:	af00      	add	r7, sp, #0
 8025544:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8025546:	687b      	ldr	r3, [r7, #4]
 8025548:	4618      	mov	r0, r3
 802554a:	370c      	adds	r7, #12
 802554c:	46bd      	mov	sp, r7
 802554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025552:	4770      	bx	lr

08025554 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8025554:	b590      	push	{r4, r7, lr}
 8025556:	b085      	sub	sp, #20
 8025558:	af00      	add	r7, sp, #0
 802555a:	60f8      	str	r0, [r7, #12]
 802555c:	60b9      	str	r1, [r7, #8]
 802555e:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8025560:	68fb      	ldr	r3, [r7, #12]
 8025562:	68ba      	ldr	r2, [r7, #8]
 8025564:	4611      	mov	r1, r2
 8025566:	4618      	mov	r0, r3
 8025568:	f001 fa55 	bl	8026a16 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 802556c:	68b8      	ldr	r0, [r7, #8]
 802556e:	f001 fa5f 	bl	8026a30 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8025572:	68fb      	ldr	r3, [r7, #12]
 8025574:	4618      	mov	r0, r3
 8025576:	f7fe ff1f 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 802557a:	4604      	mov	r4, r0
 802557c:	68bb      	ldr	r3, [r7, #8]
 802557e:	4618      	mov	r0, r3
 8025580:	f7fe ff1a 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025584:	4603      	mov	r3, r0
 8025586:	4619      	mov	r1, r3
 8025588:	4620      	mov	r0, r4
 802558a:	f001 fa65 	bl	8026a58 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 802558e:	bf00      	nop
 8025590:	3714      	adds	r7, #20
 8025592:	46bd      	mov	sp, r7
 8025594:	bd90      	pop	{r4, r7, pc}

08025596 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8025596:	b480      	push	{r7}
 8025598:	b083      	sub	sp, #12
 802559a:	af00      	add	r7, sp, #0
 802559c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	4618      	mov	r0, r3
 80255a2:	370c      	adds	r7, #12
 80255a4:	46bd      	mov	sp, r7
 80255a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255aa:	4770      	bx	lr

080255ac <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80255ac:	b590      	push	{r4, r7, lr}
 80255ae:	b085      	sub	sp, #20
 80255b0:	af00      	add	r7, sp, #0
 80255b2:	60f8      	str	r0, [r7, #12]
 80255b4:	60b9      	str	r1, [r7, #8]
 80255b6:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80255b8:	68fb      	ldr	r3, [r7, #12]
 80255ba:	68ba      	ldr	r2, [r7, #8]
 80255bc:	4611      	mov	r1, r2
 80255be:	4618      	mov	r0, r3
 80255c0:	f001 fa58 	bl	8026a74 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 80255c4:	68b8      	ldr	r0, [r7, #8]
 80255c6:	f001 fa62 	bl	8026a8e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80255ca:	68fb      	ldr	r3, [r7, #12]
 80255cc:	4618      	mov	r0, r3
 80255ce:	f7ff fd09 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80255d2:	4604      	mov	r4, r0
 80255d4:	68bb      	ldr	r3, [r7, #8]
 80255d6:	4618      	mov	r0, r3
 80255d8:	f7ff fd04 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80255dc:	4603      	mov	r3, r0
 80255de:	4619      	mov	r1, r3
 80255e0:	4620      	mov	r0, r4
 80255e2:	f001 fa68 	bl	8026ab6 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 80255e6:	bf00      	nop
 80255e8:	3714      	adds	r7, #20
 80255ea:	46bd      	mov	sp, r7
 80255ec:	bd90      	pop	{r4, r7, pc}

080255ee <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80255ee:	b480      	push	{r7}
 80255f0:	b083      	sub	sp, #12
 80255f2:	af00      	add	r7, sp, #0
 80255f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80255f6:	687b      	ldr	r3, [r7, #4]
 80255f8:	4618      	mov	r0, r3
 80255fa:	370c      	adds	r7, #12
 80255fc:	46bd      	mov	sp, r7
 80255fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025602:	4770      	bx	lr

08025604 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8025604:	b590      	push	{r4, r7, lr}
 8025606:	b085      	sub	sp, #20
 8025608:	af00      	add	r7, sp, #0
 802560a:	60f8      	str	r0, [r7, #12]
 802560c:	60b9      	str	r1, [r7, #8]
 802560e:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8025610:	68fb      	ldr	r3, [r7, #12]
 8025612:	68ba      	ldr	r2, [r7, #8]
 8025614:	4611      	mov	r1, r2
 8025616:	4618      	mov	r0, r3
 8025618:	f001 fa5b 	bl	8026ad2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 802561c:	68b8      	ldr	r0, [r7, #8]
 802561e:	f001 fa65 	bl	8026aec <_ZNSt5dequeIjSaIjEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8025622:	68fb      	ldr	r3, [r7, #12]
 8025624:	4618      	mov	r0, r3
 8025626:	f7ff ff2a 	bl	802547e <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 802562a:	4604      	mov	r4, r0
 802562c:	68bb      	ldr	r3, [r7, #8]
 802562e:	4618      	mov	r0, r3
 8025630:	f7ff ff25 	bl	802547e <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025634:	4603      	mov	r3, r0
 8025636:	4619      	mov	r1, r3
 8025638:	4620      	mov	r0, r4
 802563a:	f001 fa6b 	bl	8026b14 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>
      }
 802563e:	bf00      	nop
 8025640:	3714      	adds	r7, #20
 8025642:	46bd      	mov	sp, r7
 8025644:	bd90      	pop	{r4, r7, pc}

08025646 <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8025646:	b580      	push	{r7, lr}
 8025648:	b082      	sub	sp, #8
 802564a:	af00      	add	r7, sp, #0
 802564c:	6078      	str	r0, [r7, #4]
 802564e:	6878      	ldr	r0, [r7, #4]
 8025650:	f001 fa6e 	bl	8026b30 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 8025654:	687b      	ldr	r3, [r7, #4]
 8025656:	4618      	mov	r0, r3
 8025658:	3708      	adds	r7, #8
 802565a:	46bd      	mov	sp, r7
 802565c:	bd80      	pop	{r7, pc}

0802565e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 802565e:	b580      	push	{r7, lr}
 8025660:	b082      	sub	sp, #8
 8025662:	af00      	add	r7, sp, #0
 8025664:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8025666:	687b      	ldr	r3, [r7, #4]
 8025668:	2200      	movs	r2, #0
 802566a:	601a      	str	r2, [r3, #0]
 802566c:	687b      	ldr	r3, [r7, #4]
 802566e:	2200      	movs	r2, #0
 8025670:	605a      	str	r2, [r3, #4]
 8025672:	687b      	ldr	r3, [r7, #4]
 8025674:	3308      	adds	r3, #8
 8025676:	4618      	mov	r0, r3
 8025678:	f001 fa65 	bl	8026b46 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 802567c:	687b      	ldr	r3, [r7, #4]
 802567e:	3318      	adds	r3, #24
 8025680:	4618      	mov	r0, r3
 8025682:	f001 fa60 	bl	8026b46 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 8025686:	687b      	ldr	r3, [r7, #4]
 8025688:	4618      	mov	r0, r3
 802568a:	3708      	adds	r7, #8
 802568c:	46bd      	mov	sp, r7
 802568e:	bd80      	pop	{r7, pc}

08025690 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025690:	b480      	push	{r7}
 8025692:	b083      	sub	sp, #12
 8025694:	af00      	add	r7, sp, #0
 8025696:	6078      	str	r0, [r7, #4]
 8025698:	687b      	ldr	r3, [r7, #4]
 802569a:	4618      	mov	r0, r3
 802569c:	370c      	adds	r7, #12
 802569e:	46bd      	mov	sp, r7
 80256a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256a4:	4770      	bx	lr

080256a6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80256a6:	b480      	push	{r7}
 80256a8:	b083      	sub	sp, #12
 80256aa:	af00      	add	r7, sp, #0
 80256ac:	6078      	str	r0, [r7, #4]
 80256ae:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80256b0:	687b      	ldr	r3, [r7, #4]
 80256b2:	681a      	ldr	r2, [r3, #0]
 80256b4:	683b      	ldr	r3, [r7, #0]
 80256b6:	681b      	ldr	r3, [r3, #0]
 80256b8:	429a      	cmp	r2, r3
 80256ba:	d201      	bcs.n	80256c0 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80256bc:	683b      	ldr	r3, [r7, #0]
 80256be:	e000      	b.n	80256c2 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80256c0:	687b      	ldr	r3, [r7, #4]
    }
 80256c2:	4618      	mov	r0, r3
 80256c4:	370c      	adds	r7, #12
 80256c6:	46bd      	mov	sp, r7
 80256c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256cc:	4770      	bx	lr

080256ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80256ce:	b590      	push	{r4, r7, lr}
 80256d0:	b085      	sub	sp, #20
 80256d2:	af00      	add	r7, sp, #0
 80256d4:	6078      	str	r0, [r7, #4]
 80256d6:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80256d8:	f107 030c 	add.w	r3, r7, #12
 80256dc:	6879      	ldr	r1, [r7, #4]
 80256de:	4618      	mov	r0, r3
 80256e0:	f000 f85b 	bl	802579a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80256e4:	f107 030c 	add.w	r3, r7, #12
 80256e8:	6839      	ldr	r1, [r7, #0]
 80256ea:	4618      	mov	r0, r3
 80256ec:	f001 fa42 	bl	8026b74 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 80256f0:	4604      	mov	r4, r0
 80256f2:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80256f4:	f107 030c 	add.w	r3, r7, #12
 80256f8:	4618      	mov	r0, r3
 80256fa:	f000 f85f 	bl	80257bc <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80256fe:	4623      	mov	r3, r4
      }
 8025700:	4618      	mov	r0, r3
 8025702:	3714      	adds	r7, #20
 8025704:	46bd      	mov	sp, r7
 8025706:	bd90      	pop	{r4, r7, pc}

08025708 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8025708:	b580      	push	{r7, lr}
 802570a:	b086      	sub	sp, #24
 802570c:	af00      	add	r7, sp, #0
 802570e:	60f8      	str	r0, [r7, #12]
 8025710:	60b9      	str	r1, [r7, #8]
 8025712:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025714:	68bb      	ldr	r3, [r7, #8]
 8025716:	617b      	str	r3, [r7, #20]
 8025718:	697a      	ldr	r2, [r7, #20]
 802571a:	687b      	ldr	r3, [r7, #4]
 802571c:	429a      	cmp	r2, r3
 802571e:	d209      	bcs.n	8025734 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8025720:	68f8      	ldr	r0, [r7, #12]
 8025722:	f000 fa23 	bl	8025b6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8025726:	4602      	mov	r2, r0
 8025728:	697b      	ldr	r3, [r7, #20]
 802572a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 802572c:	697b      	ldr	r3, [r7, #20]
 802572e:	3304      	adds	r3, #4
 8025730:	617b      	str	r3, [r7, #20]
 8025732:	e7f1      	b.n	8025718 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8025734:	bf00      	nop
 8025736:	3718      	adds	r7, #24
 8025738:	46bd      	mov	sp, r7
 802573a:	bd80      	pop	{r7, pc}

0802573c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 802573c:	b590      	push	{r4, r7, lr}
 802573e:	b083      	sub	sp, #12
 8025740:	af00      	add	r7, sp, #0
 8025742:	6078      	str	r0, [r7, #4]
 8025744:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8025746:	687b      	ldr	r3, [r7, #4]
 8025748:	683a      	ldr	r2, [r7, #0]
 802574a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 802574c:	683b      	ldr	r3, [r7, #0]
 802574e:	681a      	ldr	r2, [r3, #0]
 8025750:	687b      	ldr	r3, [r7, #4]
 8025752:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8025754:	687b      	ldr	r3, [r7, #4]
 8025756:	685c      	ldr	r4, [r3, #4]
 8025758:	f000 fb3f 	bl	8025dda <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 802575c:	4602      	mov	r2, r0
 802575e:	4613      	mov	r3, r2
 8025760:	009b      	lsls	r3, r3, #2
 8025762:	4413      	add	r3, r2
 8025764:	009b      	lsls	r3, r3, #2
 8025766:	18e2      	adds	r2, r4, r3
 8025768:	687b      	ldr	r3, [r7, #4]
 802576a:	609a      	str	r2, [r3, #8]
      }
 802576c:	bf00      	nop
 802576e:	370c      	adds	r7, #12
 8025770:	46bd      	mov	sp, r7
 8025772:	bd90      	pop	{r4, r7, pc}

08025774 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8025774:	b590      	push	{r4, r7, lr}
 8025776:	b083      	sub	sp, #12
 8025778:	af00      	add	r7, sp, #0
 802577a:	6078      	str	r0, [r7, #4]
 802577c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 802577e:	687c      	ldr	r4, [r7, #4]
 8025780:	2014      	movs	r0, #20
 8025782:	f7fb fbac 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8025786:	4603      	mov	r3, r0
 8025788:	461a      	mov	r2, r3
 802578a:	6839      	ldr	r1, [r7, #0]
 802578c:	4620      	mov	r0, r4
 802578e:	f001 fa00 	bl	8026b92 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 8025792:	bf00      	nop
 8025794:	370c      	adds	r7, #12
 8025796:	46bd      	mov	sp, r7
 8025798:	bd90      	pop	{r4, r7, pc}

0802579a <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 802579a:	b580      	push	{r7, lr}
 802579c:	b082      	sub	sp, #8
 802579e:	af00      	add	r7, sp, #0
 80257a0:	6078      	str	r0, [r7, #4]
 80257a2:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80257a4:	6838      	ldr	r0, [r7, #0]
 80257a6:	f7ff f846 	bl	8024836 <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80257aa:	4603      	mov	r3, r0
 80257ac:	4619      	mov	r1, r3
 80257ae:	6878      	ldr	r0, [r7, #4]
 80257b0:	f001 f9fe 	bl	8026bb0 <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 80257b4:	6878      	ldr	r0, [r7, #4]
 80257b6:	3708      	adds	r7, #8
 80257b8:	46bd      	mov	sp, r7
 80257ba:	bd80      	pop	{r7, pc}

080257bc <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80257bc:	b580      	push	{r7, lr}
 80257be:	b082      	sub	sp, #8
 80257c0:	af00      	add	r7, sp, #0
 80257c2:	6078      	str	r0, [r7, #4]
 80257c4:	6878      	ldr	r0, [r7, #4]
 80257c6:	f001 fa00 	bl	8026bca <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 80257ca:	687b      	ldr	r3, [r7, #4]
 80257cc:	4618      	mov	r0, r3
 80257ce:	3708      	adds	r7, #8
 80257d0:	46bd      	mov	sp, r7
 80257d2:	bd80      	pop	{r7, pc}

080257d4 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80257d4:	b580      	push	{r7, lr}
 80257d6:	b084      	sub	sp, #16
 80257d8:	af00      	add	r7, sp, #0
 80257da:	60f8      	str	r0, [r7, #12]
 80257dc:	60b9      	str	r1, [r7, #8]
 80257de:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80257e0:	687a      	ldr	r2, [r7, #4]
 80257e2:	68b9      	ldr	r1, [r7, #8]
 80257e4:	68f8      	ldr	r0, [r7, #12]
 80257e6:	f001 f9fb 	bl	8026be0 <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 80257ea:	bf00      	nop
 80257ec:	3710      	adds	r7, #16
 80257ee:	46bd      	mov	sp, r7
 80257f0:	bd80      	pop	{r7, pc}

080257f2 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 80257f2:	b5b0      	push	{r4, r5, r7, lr}
 80257f4:	b086      	sub	sp, #24
 80257f6:	af00      	add	r7, sp, #0
 80257f8:	60f8      	str	r0, [r7, #12]
 80257fa:	60b9      	str	r1, [r7, #8]
 80257fc:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 80257fe:	68bb      	ldr	r3, [r7, #8]
 8025800:	68db      	ldr	r3, [r3, #12]
 8025802:	3304      	adds	r3, #4
 8025804:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8025806:	687b      	ldr	r3, [r7, #4]
 8025808:	68db      	ldr	r3, [r3, #12]
 802580a:	697a      	ldr	r2, [r7, #20]
 802580c:	429a      	cmp	r2, r3
 802580e:	d219      	bcs.n	8025844 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8025810:	697b      	ldr	r3, [r7, #20]
 8025812:	681d      	ldr	r5, [r3, #0]
 8025814:	697b      	ldr	r3, [r7, #20]
 8025816:	681c      	ldr	r4, [r3, #0]
 8025818:	f001 f9f2 	bl	8026c00 <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 802581c:	4602      	mov	r2, r0
 802581e:	4613      	mov	r3, r2
 8025820:	009b      	lsls	r3, r3, #2
 8025822:	4413      	add	r3, r2
 8025824:	009b      	lsls	r3, r3, #2
 8025826:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8025828:	68fb      	ldr	r3, [r7, #12]
 802582a:	4618      	mov	r0, r3
 802582c:	f7fe fd21 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8025830:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8025832:	461a      	mov	r2, r3
 8025834:	4621      	mov	r1, r4
 8025836:	4628      	mov	r0, r5
 8025838:	f001 f9ea 	bl	8026c10 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 802583c:	697b      	ldr	r3, [r7, #20]
 802583e:	3304      	adds	r3, #4
 8025840:	617b      	str	r3, [r7, #20]
 8025842:	e7e0      	b.n	8025806 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 8025844:	68bb      	ldr	r3, [r7, #8]
 8025846:	68da      	ldr	r2, [r3, #12]
 8025848:	687b      	ldr	r3, [r7, #4]
 802584a:	68db      	ldr	r3, [r3, #12]
 802584c:	429a      	cmp	r2, r3
 802584e:	d01c      	beq.n	802588a <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8025850:	68bb      	ldr	r3, [r7, #8]
 8025852:	681c      	ldr	r4, [r3, #0]
 8025854:	68bb      	ldr	r3, [r7, #8]
 8025856:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8025858:	68fb      	ldr	r3, [r7, #12]
 802585a:	4618      	mov	r0, r3
 802585c:	f7fe fd09 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8025860:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8025862:	461a      	mov	r2, r3
 8025864:	4629      	mov	r1, r5
 8025866:	4620      	mov	r0, r4
 8025868:	f001 f9d2 	bl	8026c10 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 802586c:	687b      	ldr	r3, [r7, #4]
 802586e:	685c      	ldr	r4, [r3, #4]
 8025870:	687b      	ldr	r3, [r7, #4]
 8025872:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8025874:	68fb      	ldr	r3, [r7, #12]
 8025876:	4618      	mov	r0, r3
 8025878:	f7fe fcfb 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 802587c:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 802587e:	461a      	mov	r2, r3
 8025880:	4629      	mov	r1, r5
 8025882:	4620      	mov	r0, r4
 8025884:	f001 f9c4 	bl	8026c10 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 8025888:	e00d      	b.n	80258a6 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 802588a:	68bb      	ldr	r3, [r7, #8]
 802588c:	681c      	ldr	r4, [r3, #0]
 802588e:	687b      	ldr	r3, [r7, #4]
 8025890:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8025892:	68fb      	ldr	r3, [r7, #12]
 8025894:	4618      	mov	r0, r3
 8025896:	f7fe fcec 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 802589a:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 802589c:	461a      	mov	r2, r3
 802589e:	4629      	mov	r1, r5
 80258a0:	4620      	mov	r0, r4
 80258a2:	f001 f9b5 	bl	8026c10 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 80258a6:	bf00      	nop
 80258a8:	3718      	adds	r7, #24
 80258aa:	46bd      	mov	sp, r7
 80258ac:	bdb0      	pop	{r4, r5, r7, pc}

080258ae <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80258ae:	b580      	push	{r7, lr}
 80258b0:	b082      	sub	sp, #8
 80258b2:	af00      	add	r7, sp, #0
 80258b4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80258b6:	6878      	ldr	r0, [r7, #4]
 80258b8:	f001 f9b8 	bl	8026c2c <_ZNSaI8ResponceEC1Ev>
 80258bc:	687b      	ldr	r3, [r7, #4]
 80258be:	4618      	mov	r0, r3
 80258c0:	f001 f9c0 	bl	8026c44 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80258c4:	687b      	ldr	r3, [r7, #4]
 80258c6:	4618      	mov	r0, r3
 80258c8:	3708      	adds	r7, #8
 80258ca:	46bd      	mov	sp, r7
 80258cc:	bd80      	pop	{r7, pc}

080258ce <_ZNSaI8ResponceED1Ev>:
 80258ce:	b580      	push	{r7, lr}
 80258d0:	b082      	sub	sp, #8
 80258d2:	af00      	add	r7, sp, #0
 80258d4:	6078      	str	r0, [r7, #4]
 80258d6:	6878      	ldr	r0, [r7, #4]
 80258d8:	f001 f9cd 	bl	8026c76 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 80258dc:	687b      	ldr	r3, [r7, #4]
 80258de:	4618      	mov	r0, r3
 80258e0:	3708      	adds	r7, #8
 80258e2:	46bd      	mov	sp, r7
 80258e4:	bd80      	pop	{r7, pc}

080258e6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 80258e6:	b590      	push	{r4, r7, lr}
 80258e8:	b089      	sub	sp, #36	; 0x24
 80258ea:	af00      	add	r7, sp, #0
 80258ec:	6078      	str	r0, [r7, #4]
 80258ee:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 80258f0:	2010      	movs	r0, #16
 80258f2:	f7fb faf4 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80258f6:	4602      	mov	r2, r0
 80258f8:	683b      	ldr	r3, [r7, #0]
 80258fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80258fe:	3301      	adds	r3, #1
 8025900:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8025902:	2308      	movs	r3, #8
 8025904:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8025906:	69fb      	ldr	r3, [r7, #28]
 8025908:	3302      	adds	r3, #2
 802590a:	613b      	str	r3, [r7, #16]
 802590c:	f107 0210 	add.w	r2, r7, #16
 8025910:	f107 030c 	add.w	r3, r7, #12
 8025914:	4611      	mov	r1, r2
 8025916:	4618      	mov	r0, r3
 8025918:	f7ff fec5 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 802591c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802591e:	681a      	ldr	r2, [r3, #0]
 8025920:	687b      	ldr	r3, [r7, #4]
 8025922:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8025924:	687b      	ldr	r3, [r7, #4]
 8025926:	685b      	ldr	r3, [r3, #4]
 8025928:	4619      	mov	r1, r3
 802592a:	6878      	ldr	r0, [r7, #4]
 802592c:	f001 f9ae 	bl	8026c8c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8025930:	4602      	mov	r2, r0
 8025932:	687b      	ldr	r3, [r7, #4]
 8025934:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8025936:	687b      	ldr	r3, [r7, #4]
 8025938:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	6859      	ldr	r1, [r3, #4]
 802593e:	69fb      	ldr	r3, [r7, #28]
 8025940:	1acb      	subs	r3, r1, r3
 8025942:	085b      	lsrs	r3, r3, #1
 8025944:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8025946:	4413      	add	r3, r2
 8025948:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 802594a:	69fb      	ldr	r3, [r7, #28]
 802594c:	009b      	lsls	r3, r3, #2
 802594e:	69ba      	ldr	r2, [r7, #24]
 8025950:	4413      	add	r3, r2
 8025952:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8025954:	697a      	ldr	r2, [r7, #20]
 8025956:	69b9      	ldr	r1, [r7, #24]
 8025958:	6878      	ldr	r0, [r7, #4]
 802595a:	f001 f9b4 	bl	8026cc6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 802595e:	687b      	ldr	r3, [r7, #4]
 8025960:	3308      	adds	r3, #8
 8025962:	69b9      	ldr	r1, [r7, #24]
 8025964:	4618      	mov	r0, r3
 8025966:	f001 f9c8 	bl	8026cfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 802596a:	687b      	ldr	r3, [r7, #4]
 802596c:	f103 0218 	add.w	r2, r3, #24
 8025970:	697b      	ldr	r3, [r7, #20]
 8025972:	3b04      	subs	r3, #4
 8025974:	4619      	mov	r1, r3
 8025976:	4610      	mov	r0, r2
 8025978:	f001 f9bf 	bl	8026cfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 802597c:	687b      	ldr	r3, [r7, #4]
 802597e:	68da      	ldr	r2, [r3, #12]
 8025980:	687b      	ldr	r3, [r7, #4]
 8025982:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8025984:	687b      	ldr	r3, [r7, #4]
 8025986:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8025988:	2010      	movs	r0, #16
 802598a:	f7fb faa8 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802598e:	4602      	mov	r2, r0
 8025990:	683b      	ldr	r3, [r7, #0]
 8025992:	fbb3 f1f2 	udiv	r1, r3, r2
 8025996:	fb01 f202 	mul.w	r2, r1, r2
 802599a:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 802599c:	011b      	lsls	r3, r3, #4
 802599e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80259a0:	687b      	ldr	r3, [r7, #4]
 80259a2:	619a      	str	r2, [r3, #24]
    }
 80259a4:	bf00      	nop
 80259a6:	3724      	adds	r7, #36	; 0x24
 80259a8:	46bd      	mov	sp, r7
 80259aa:	bd90      	pop	{r4, r7, pc}

080259ac <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80259ac:	b580      	push	{r7, lr}
 80259ae:	b086      	sub	sp, #24
 80259b0:	af00      	add	r7, sp, #0
 80259b2:	60f8      	str	r0, [r7, #12]
 80259b4:	60b9      	str	r1, [r7, #8]
 80259b6:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80259b8:	68bb      	ldr	r3, [r7, #8]
 80259ba:	617b      	str	r3, [r7, #20]
 80259bc:	697a      	ldr	r2, [r7, #20]
 80259be:	687b      	ldr	r3, [r7, #4]
 80259c0:	429a      	cmp	r2, r3
 80259c2:	d209      	bcs.n	80259d8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80259c4:	697b      	ldr	r3, [r7, #20]
 80259c6:	681b      	ldr	r3, [r3, #0]
 80259c8:	4619      	mov	r1, r3
 80259ca:	68f8      	ldr	r0, [r7, #12]
 80259cc:	f001 f9ae 	bl	8026d2c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80259d0:	697b      	ldr	r3, [r7, #20]
 80259d2:	3304      	adds	r3, #4
 80259d4:	617b      	str	r3, [r7, #20]
 80259d6:	e7f1      	b.n	80259bc <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80259d8:	bf00      	nop
 80259da:	3718      	adds	r7, #24
 80259dc:	46bd      	mov	sp, r7
 80259de:	bd80      	pop	{r7, pc}

080259e0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80259e0:	b580      	push	{r7, lr}
 80259e2:	b086      	sub	sp, #24
 80259e4:	af00      	add	r7, sp, #0
 80259e6:	60f8      	str	r0, [r7, #12]
 80259e8:	60b9      	str	r1, [r7, #8]
 80259ea:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80259ec:	f107 0314 	add.w	r3, r7, #20
 80259f0:	68f9      	ldr	r1, [r7, #12]
 80259f2:	4618      	mov	r0, r3
 80259f4:	f001 f9ad 	bl	8026d52 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80259f8:	f107 0314 	add.w	r3, r7, #20
 80259fc:	687a      	ldr	r2, [r7, #4]
 80259fe:	68b9      	ldr	r1, [r7, #8]
 8025a00:	4618      	mov	r0, r3
 8025a02:	f001 f9c3 	bl	8026d8c <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025a06:	f107 0314 	add.w	r3, r7, #20
 8025a0a:	4618      	mov	r0, r3
 8025a0c:	f001 f9b2 	bl	8026d74 <_ZNSaIP8ResponceED1Ev>
      }
 8025a10:	bf00      	nop
 8025a12:	3718      	adds	r7, #24
 8025a14:	46bd      	mov	sp, r7
 8025a16:	bd80      	pop	{r7, pc}

08025a18 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 8025a18:	b5b0      	push	{r4, r5, r7, lr}
 8025a1a:	b086      	sub	sp, #24
 8025a1c:	af00      	add	r7, sp, #0
 8025a1e:	60f8      	str	r0, [r7, #12]
 8025a20:	60b9      	str	r1, [r7, #8]
 8025a22:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 8025a24:	68bb      	ldr	r3, [r7, #8]
 8025a26:	68db      	ldr	r3, [r3, #12]
 8025a28:	3304      	adds	r3, #4
 8025a2a:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8025a2c:	687b      	ldr	r3, [r7, #4]
 8025a2e:	68db      	ldr	r3, [r3, #12]
 8025a30:	697a      	ldr	r2, [r7, #20]
 8025a32:	429a      	cmp	r2, r3
 8025a34:	d216      	bcs.n	8025a64 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8025a36:	697b      	ldr	r3, [r7, #20]
 8025a38:	681d      	ldr	r5, [r3, #0]
 8025a3a:	697b      	ldr	r3, [r7, #20]
 8025a3c:	681c      	ldr	r4, [r3, #0]
 8025a3e:	f001 f9b4 	bl	8026daa <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 8025a42:	4603      	mov	r3, r0
 8025a44:	011b      	lsls	r3, r3, #4
 8025a46:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 8025a48:	68fb      	ldr	r3, [r7, #12]
 8025a4a:	4618      	mov	r0, r3
 8025a4c:	f7fe fcb4 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025a50:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8025a52:	461a      	mov	r2, r3
 8025a54:	4621      	mov	r1, r4
 8025a56:	4628      	mov	r0, r5
 8025a58:	f001 f9af 	bl	8026dba <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 8025a5c:	697b      	ldr	r3, [r7, #20]
 8025a5e:	3304      	adds	r3, #4
 8025a60:	617b      	str	r3, [r7, #20]
 8025a62:	e7e3      	b.n	8025a2c <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 8025a64:	68bb      	ldr	r3, [r7, #8]
 8025a66:	68da      	ldr	r2, [r3, #12]
 8025a68:	687b      	ldr	r3, [r7, #4]
 8025a6a:	68db      	ldr	r3, [r3, #12]
 8025a6c:	429a      	cmp	r2, r3
 8025a6e:	d01c      	beq.n	8025aaa <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 8025a70:	68bb      	ldr	r3, [r7, #8]
 8025a72:	681c      	ldr	r4, [r3, #0]
 8025a74:	68bb      	ldr	r3, [r7, #8]
 8025a76:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 8025a78:	68fb      	ldr	r3, [r7, #12]
 8025a7a:	4618      	mov	r0, r3
 8025a7c:	f7fe fc9c 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025a80:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8025a82:	461a      	mov	r2, r3
 8025a84:	4629      	mov	r1, r5
 8025a86:	4620      	mov	r0, r4
 8025a88:	f001 f997 	bl	8026dba <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 8025a8c:	687b      	ldr	r3, [r7, #4]
 8025a8e:	685c      	ldr	r4, [r3, #4]
 8025a90:	687b      	ldr	r3, [r7, #4]
 8025a92:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8025a94:	68fb      	ldr	r3, [r7, #12]
 8025a96:	4618      	mov	r0, r3
 8025a98:	f7fe fc8e 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025a9c:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 8025a9e:	461a      	mov	r2, r3
 8025aa0:	4629      	mov	r1, r5
 8025aa2:	4620      	mov	r0, r4
 8025aa4:	f001 f989 	bl	8026dba <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8025aa8:	e00d      	b.n	8025ac6 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8025aaa:	68bb      	ldr	r3, [r7, #8]
 8025aac:	681c      	ldr	r4, [r3, #0]
 8025aae:	687b      	ldr	r3, [r7, #4]
 8025ab0:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 8025ab2:	68fb      	ldr	r3, [r7, #12]
 8025ab4:	4618      	mov	r0, r3
 8025ab6:	f7fe fc7f 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025aba:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 8025abc:	461a      	mov	r2, r3
 8025abe:	4629      	mov	r1, r5
 8025ac0:	4620      	mov	r0, r4
 8025ac2:	f001 f97a 	bl	8026dba <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 8025ac6:	bf00      	nop
 8025ac8:	3718      	adds	r7, #24
 8025aca:	46bd      	mov	sp, r7
 8025acc:	bdb0      	pop	{r4, r5, r7, pc}

08025ace <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025ace:	b580      	push	{r7, lr}
 8025ad0:	b084      	sub	sp, #16
 8025ad2:	af00      	add	r7, sp, #0
 8025ad4:	60f8      	str	r0, [r7, #12]
 8025ad6:	60b9      	str	r1, [r7, #8]
 8025ad8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025ada:	687a      	ldr	r2, [r7, #4]
 8025adc:	68b9      	ldr	r1, [r7, #8]
 8025ade:	68f8      	ldr	r0, [r7, #12]
 8025ae0:	f001 f979 	bl	8026dd6 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8025ae4:	bf00      	nop
 8025ae6:	3710      	adds	r7, #16
 8025ae8:	46bd      	mov	sp, r7
 8025aea:	bd80      	pop	{r7, pc}

08025aec <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8025aec:	b580      	push	{r7, lr}
 8025aee:	b082      	sub	sp, #8
 8025af0:	af00      	add	r7, sp, #0
 8025af2:	6078      	str	r0, [r7, #4]
 8025af4:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8025af6:	6839      	ldr	r1, [r7, #0]
 8025af8:	6878      	ldr	r0, [r7, #4]
 8025afa:	f001 f97a 	bl	8026df2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8025afe:	bf00      	nop
 8025b00:	3708      	adds	r7, #8
 8025b02:	46bd      	mov	sp, r7
 8025b04:	bd80      	pop	{r7, pc}

08025b06 <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8025b06:	b590      	push	{r4, r7, lr}
 8025b08:	b085      	sub	sp, #20
 8025b0a:	af00      	add	r7, sp, #0
 8025b0c:	60f8      	str	r0, [r7, #12]
 8025b0e:	60b9      	str	r1, [r7, #8]
 8025b10:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8025b12:	6878      	ldr	r0, [r7, #4]
 8025b14:	f7fe fce1 	bl	80244da <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8025b18:	4604      	mov	r4, r0
 8025b1a:	68bb      	ldr	r3, [r7, #8]
 8025b1c:	4619      	mov	r1, r3
 8025b1e:	2014      	movs	r0, #20
 8025b20:	f7fb f9d1 	bl	8020ec6 <_ZnwjPv>
 8025b24:	4603      	mov	r3, r0
 8025b26:	4621      	mov	r1, r4
 8025b28:	4618      	mov	r0, r3
 8025b2a:	f7fc f865 	bl	8021bf8 <_ZN7RequestC1EOS_>
 8025b2e:	bf00      	nop
 8025b30:	3714      	adds	r7, #20
 8025b32:	46bd      	mov	sp, r7
 8025b34:	bd90      	pop	{r4, r7, pc}

08025b36 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8025b36:	b580      	push	{r7, lr}
 8025b38:	b082      	sub	sp, #8
 8025b3a:	af00      	add	r7, sp, #0
 8025b3c:	6078      	str	r0, [r7, #4]
 8025b3e:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8025b40:	683b      	ldr	r3, [r7, #0]
 8025b42:	1c5a      	adds	r2, r3, #1
 8025b44:	687b      	ldr	r3, [r7, #4]
 8025b46:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8025b48:	6879      	ldr	r1, [r7, #4]
 8025b4a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8025b4c:	6879      	ldr	r1, [r7, #4]
 8025b4e:	6809      	ldr	r1, [r1, #0]
 8025b50:	1a41      	subs	r1, r0, r1
 8025b52:	1089      	asrs	r1, r1, #2
 8025b54:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8025b56:	429a      	cmp	r2, r3
 8025b58:	d904      	bls.n	8025b64 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8025b5a:	2200      	movs	r2, #0
 8025b5c:	6839      	ldr	r1, [r7, #0]
 8025b5e:	6878      	ldr	r0, [r7, #4]
 8025b60:	f001 f952 	bl	8026e08 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8025b64:	bf00      	nop
 8025b66:	3708      	adds	r7, #8
 8025b68:	46bd      	mov	sp, r7
 8025b6a:	bd80      	pop	{r7, pc}

08025b6c <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8025b6c:	b590      	push	{r4, r7, lr}
 8025b6e:	b083      	sub	sp, #12
 8025b70:	af00      	add	r7, sp, #0
 8025b72:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8025b74:	687c      	ldr	r4, [r7, #4]
 8025b76:	2014      	movs	r0, #20
 8025b78:	f7fb f9b1 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8025b7c:	4603      	mov	r3, r0
 8025b7e:	4619      	mov	r1, r3
 8025b80:	4620      	mov	r0, r4
 8025b82:	f001 f9db 	bl	8026f3c <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 8025b86:	4603      	mov	r3, r0
      }
 8025b88:	4618      	mov	r0, r3
 8025b8a:	370c      	adds	r7, #12
 8025b8c:	46bd      	mov	sp, r7
 8025b8e:	bd90      	pop	{r4, r7, pc}

08025b90 <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 8025b90:	b580      	push	{r7, lr}
 8025b92:	b082      	sub	sp, #8
 8025b94:	af00      	add	r7, sp, #0
 8025b96:	6078      	str	r0, [r7, #4]
 8025b98:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 8025b9a:	6838      	ldr	r0, [r7, #0]
 8025b9c:	f7fe ffa6 	bl	8024aec <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8025ba0:	4603      	mov	r3, r0
 8025ba2:	4619      	mov	r1, r3
 8025ba4:	6878      	ldr	r0, [r7, #4]
 8025ba6:	f7fe fdab 	bl	8024700 <_ZNSaIhEC1ERKS_>
 8025baa:	6878      	ldr	r0, [r7, #4]
 8025bac:	3708      	adds	r7, #8
 8025bae:	46bd      	mov	sp, r7
 8025bb0:	bd80      	pop	{r7, pc}

08025bb2 <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8025bb2:	b580      	push	{r7, lr}
 8025bb4:	b082      	sub	sp, #8
 8025bb6:	af00      	add	r7, sp, #0
 8025bb8:	6078      	str	r0, [r7, #4]
 8025bba:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8025bbc:	687b      	ldr	r3, [r7, #4]
 8025bbe:	6839      	ldr	r1, [r7, #0]
 8025bc0:	4618      	mov	r0, r3
 8025bc2:	f7ff f88d 	bl	8024ce0 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 8025bc6:	687b      	ldr	r3, [r7, #4]
 8025bc8:	4618      	mov	r0, r3
 8025bca:	3708      	adds	r7, #8
 8025bcc:	46bd      	mov	sp, r7
 8025bce:	bd80      	pop	{r7, pc}

08025bd0 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 8025bd0:	b580      	push	{r7, lr}
 8025bd2:	b086      	sub	sp, #24
 8025bd4:	af00      	add	r7, sp, #0
 8025bd6:	6078      	str	r0, [r7, #4]
 8025bd8:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8025bda:	f107 030c 	add.w	r3, r7, #12
 8025bde:	4618      	mov	r0, r3
 8025be0:	f7fe fc30 	bl	8024444 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 8025be4:	f107 030c 	add.w	r3, r7, #12
 8025be8:	6879      	ldr	r1, [r7, #4]
 8025bea:	4618      	mov	r0, r3
 8025bec:	f001 f9b5 	bl	8026f5a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 8025bf0:	6839      	ldr	r1, [r7, #0]
 8025bf2:	6878      	ldr	r0, [r7, #4]
 8025bf4:	f001 f9b1 	bl	8026f5a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8025bf8:	f107 030c 	add.w	r3, r7, #12
 8025bfc:	4619      	mov	r1, r3
 8025bfe:	6838      	ldr	r0, [r7, #0]
 8025c00:	f001 f9ab 	bl	8026f5a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 8025c04:	bf00      	nop
 8025c06:	3718      	adds	r7, #24
 8025c08:	46bd      	mov	sp, r7
 8025c0a:	bd80      	pop	{r7, pc}

08025c0c <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8025c0c:	b580      	push	{r7, lr}
 8025c0e:	b082      	sub	sp, #8
 8025c10:	af00      	add	r7, sp, #0
 8025c12:	6078      	str	r0, [r7, #4]
 8025c14:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8025c16:	461a      	mov	r2, r3
 8025c18:	6839      	ldr	r1, [r7, #0]
 8025c1a:	6878      	ldr	r0, [r7, #4]
 8025c1c:	f001 f9b4 	bl	8026f88 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8025c20:	bf00      	nop
 8025c22:	3708      	adds	r7, #8
 8025c24:	46bd      	mov	sp, r7
 8025c26:	bd80      	pop	{r7, pc}

08025c28 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8025c28:	b580      	push	{r7, lr}
 8025c2a:	b084      	sub	sp, #16
 8025c2c:	af00      	add	r7, sp, #0
 8025c2e:	60f8      	str	r0, [r7, #12]
 8025c30:	60b9      	str	r1, [r7, #8]
 8025c32:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8025c34:	6878      	ldr	r0, [r7, #4]
 8025c36:	f7fe fcfc 	bl	8024632 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8025c3a:	4603      	mov	r3, r0
 8025c3c:	461a      	mov	r2, r3
 8025c3e:	68b9      	ldr	r1, [r7, #8]
 8025c40:	68f8      	ldr	r0, [r7, #12]
 8025c42:	f001 f9ae 	bl	8026fa2 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8025c46:	bf00      	nop
 8025c48:	3710      	adds	r7, #16
 8025c4a:	46bd      	mov	sp, r7
 8025c4c:	bd80      	pop	{r7, pc}
	...

08025c50 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8025c50:	b5b0      	push	{r4, r5, r7, lr}
 8025c52:	b082      	sub	sp, #8
 8025c54:	af00      	add	r7, sp, #0
 8025c56:	6078      	str	r0, [r7, #4]
 8025c58:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8025c5a:	6878      	ldr	r0, [r7, #4]
 8025c5c:	f7ff f8a4 	bl	8024da8 <_ZNKSt5dequeI8ResponceSaIS0_EE4sizeEv>
 8025c60:	4604      	mov	r4, r0
 8025c62:	6878      	ldr	r0, [r7, #4]
 8025c64:	f001 f9b5 	bl	8026fd2 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>
 8025c68:	4603      	mov	r3, r0
 8025c6a:	429c      	cmp	r4, r3
 8025c6c:	bf0c      	ite	eq
 8025c6e:	2301      	moveq	r3, #1
 8025c70:	2300      	movne	r3, #0
 8025c72:	b2db      	uxtb	r3, r3
 8025c74:	2b00      	cmp	r3, #0
 8025c76:	d002      	beq.n	8025c7e <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8025c78:	4816      	ldr	r0, [pc, #88]	; (8025cd4 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 8025c7a:	f019 fb95 	bl	803f3a8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8025c7e:	2101      	movs	r1, #1
 8025c80:	6878      	ldr	r0, [r7, #4]
 8025c82:	f001 f9b7 	bl	8026ff4 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8025c86:	687a      	ldr	r2, [r7, #4]
 8025c88:	687b      	ldr	r3, [r7, #4]
 8025c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c8c:	1d1c      	adds	r4, r3, #4
 8025c8e:	4610      	mov	r0, r2
 8025c90:	f001 f9cb 	bl	802702a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8025c94:	4603      	mov	r3, r0
 8025c96:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8025c98:	687c      	ldr	r4, [r7, #4]
 8025c9a:	687b      	ldr	r3, [r7, #4]
 8025c9c:	699d      	ldr	r5, [r3, #24]
 8025c9e:	6838      	ldr	r0, [r7, #0]
 8025ca0:	f7fe fcc7 	bl	8024632 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8025ca4:	4603      	mov	r3, r0
 8025ca6:	461a      	mov	r2, r3
 8025ca8:	4629      	mov	r1, r5
 8025caa:	4620      	mov	r0, r4
 8025cac:	f7ff ffbc 	bl	8025c28 <_ZNSt16allocator_traitsISaI8ResponceEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8025cb0:	687b      	ldr	r3, [r7, #4]
 8025cb2:	f103 0218 	add.w	r2, r3, #24
 8025cb6:	687b      	ldr	r3, [r7, #4]
 8025cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025cba:	3304      	adds	r3, #4
 8025cbc:	4619      	mov	r1, r3
 8025cbe:	4610      	mov	r0, r2
 8025cc0:	f001 f81b 	bl	8026cfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8025cc4:	687b      	ldr	r3, [r7, #4]
 8025cc6:	69da      	ldr	r2, [r3, #28]
 8025cc8:	687b      	ldr	r3, [r7, #4]
 8025cca:	619a      	str	r2, [r3, #24]
      }
 8025ccc:	bf00      	nop
 8025cce:	3708      	adds	r7, #8
 8025cd0:	46bd      	mov	sp, r7
 8025cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8025cd4:	0804109c 	.word	0x0804109c

08025cd8 <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8025cd8:	b480      	push	{r7}
 8025cda:	b083      	sub	sp, #12
 8025cdc:	af00      	add	r7, sp, #0
 8025cde:	6078      	str	r0, [r7, #4]
 8025ce0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8025ce2:	687b      	ldr	r3, [r7, #4]
 8025ce4:	681a      	ldr	r2, [r3, #0]
 8025ce6:	683b      	ldr	r3, [r7, #0]
 8025ce8:	681b      	ldr	r3, [r3, #0]
 8025cea:	429a      	cmp	r2, r3
 8025cec:	bf0c      	ite	eq
 8025cee:	2301      	moveq	r3, #1
 8025cf0:	2300      	movne	r3, #0
 8025cf2:	b2db      	uxtb	r3, r3
 8025cf4:	4618      	mov	r0, r3
 8025cf6:	370c      	adds	r7, #12
 8025cf8:	46bd      	mov	sp, r7
 8025cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cfe:	4770      	bx	lr

08025d00 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8025d00:	b480      	push	{r7}
 8025d02:	b083      	sub	sp, #12
 8025d04:	af00      	add	r7, sp, #0
 8025d06:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8025d08:	687b      	ldr	r3, [r7, #4]
 8025d0a:	681b      	ldr	r3, [r3, #0]
 8025d0c:	4618      	mov	r0, r3
 8025d0e:	370c      	adds	r7, #12
 8025d10:	46bd      	mov	sp, r7
 8025d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d16:	4770      	bx	lr

08025d18 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8025d18:	b480      	push	{r7}
 8025d1a:	b083      	sub	sp, #12
 8025d1c:	af00      	add	r7, sp, #0
 8025d1e:	6078      	str	r0, [r7, #4]
 8025d20:	6039      	str	r1, [r7, #0]
 8025d22:	687b      	ldr	r3, [r7, #4]
 8025d24:	4618      	mov	r0, r3
 8025d26:	370c      	adds	r7, #12
 8025d28:	46bd      	mov	sp, r7
 8025d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d2e:	4770      	bx	lr

08025d30 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8025d30:	b580      	push	{r7, lr}
 8025d32:	b082      	sub	sp, #8
 8025d34:	af00      	add	r7, sp, #0
 8025d36:	6078      	str	r0, [r7, #4]
 8025d38:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8025d3a:	6839      	ldr	r1, [r7, #0]
 8025d3c:	6878      	ldr	r0, [r7, #4]
 8025d3e:	f001 f986 	bl	802704e <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 8025d42:	bf00      	nop
 8025d44:	3708      	adds	r7, #8
 8025d46:	46bd      	mov	sp, r7
 8025d48:	bd80      	pop	{r7, pc}

08025d4a <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8025d4a:	b580      	push	{r7, lr}
 8025d4c:	b082      	sub	sp, #8
 8025d4e:	af00      	add	r7, sp, #0
 8025d50:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8025d52:	687b      	ldr	r3, [r7, #4]
 8025d54:	4618      	mov	r0, r3
 8025d56:	f7fe fb2f 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8025d5a:	4602      	mov	r2, r0
 8025d5c:	687b      	ldr	r3, [r7, #4]
 8025d5e:	689b      	ldr	r3, [r3, #8]
 8025d60:	4619      	mov	r1, r3
 8025d62:	4610      	mov	r0, r2
 8025d64:	f7ff ffe4 	bl	8025d30 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8025d68:	687a      	ldr	r2, [r7, #4]
 8025d6a:	687b      	ldr	r3, [r7, #4]
 8025d6c:	68db      	ldr	r3, [r3, #12]
 8025d6e:	4619      	mov	r1, r3
 8025d70:	4610      	mov	r0, r2
 8025d72:	f000 ffdb 	bl	8026d2c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8025d76:	687b      	ldr	r3, [r7, #4]
 8025d78:	f103 0208 	add.w	r2, r3, #8
 8025d7c:	687b      	ldr	r3, [r7, #4]
 8025d7e:	695b      	ldr	r3, [r3, #20]
 8025d80:	3304      	adds	r3, #4
 8025d82:	4619      	mov	r1, r3
 8025d84:	4610      	mov	r0, r2
 8025d86:	f000 ffb8 	bl	8026cfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8025d8a:	687b      	ldr	r3, [r7, #4]
 8025d8c:	68da      	ldr	r2, [r3, #12]
 8025d8e:	687b      	ldr	r3, [r7, #4]
 8025d90:	609a      	str	r2, [r3, #8]
    }
 8025d92:	bf00      	nop
 8025d94:	3708      	adds	r7, #8
 8025d96:	46bd      	mov	sp, r7
 8025d98:	bd80      	pop	{r7, pc}

08025d9a <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8025d9a:	b580      	push	{r7, lr}
 8025d9c:	b082      	sub	sp, #8
 8025d9e:	af00      	add	r7, sp, #0
 8025da0:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8025da2:	6878      	ldr	r0, [r7, #4]
 8025da4:	f001 f95f 	bl	8027066 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 8025da8:	4603      	mov	r3, r0
      }
 8025daa:	4618      	mov	r0, r3
 8025dac:	3708      	adds	r7, #8
 8025dae:	46bd      	mov	sp, r7
 8025db0:	bd80      	pop	{r7, pc}

08025db2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8025db2:	b480      	push	{r7}
 8025db4:	b083      	sub	sp, #12
 8025db6:	af00      	add	r7, sp, #0
 8025db8:	6078      	str	r0, [r7, #4]
 8025dba:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8025dbc:	683b      	ldr	r3, [r7, #0]
 8025dbe:	681a      	ldr	r2, [r3, #0]
 8025dc0:	687b      	ldr	r3, [r7, #4]
 8025dc2:	681b      	ldr	r3, [r3, #0]
 8025dc4:	429a      	cmp	r2, r3
 8025dc6:	d201      	bcs.n	8025dcc <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8025dc8:	683b      	ldr	r3, [r7, #0]
 8025dca:	e000      	b.n	8025dce <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8025dcc:	687b      	ldr	r3, [r7, #4]
    }
 8025dce:	4618      	mov	r0, r3
 8025dd0:	370c      	adds	r7, #12
 8025dd2:	46bd      	mov	sp, r7
 8025dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dd8:	4770      	bx	lr

08025dda <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025dda:	b580      	push	{r7, lr}
 8025ddc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025dde:	2014      	movs	r0, #20
 8025de0:	f7fb f87d 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8025de4:	4603      	mov	r3, r0
 8025de6:	4618      	mov	r0, r3
 8025de8:	bd80      	pop	{r7, pc}

08025dea <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8025dea:	b580      	push	{r7, lr}
 8025dec:	b082      	sub	sp, #8
 8025dee:	af00      	add	r7, sp, #0
 8025df0:	6078      	str	r0, [r7, #4]
 8025df2:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8025df4:	6838      	ldr	r0, [r7, #0]
 8025df6:	f7fb f930 	bl	802105a <_ZN7RequestD1Ev>
 8025dfa:	bf00      	nop
 8025dfc:	3708      	adds	r7, #8
 8025dfe:	46bd      	mov	sp, r7
 8025e00:	bd80      	pop	{r7, pc}

08025e02 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025e02:	b580      	push	{r7, lr}
 8025e04:	b082      	sub	sp, #8
 8025e06:	af00      	add	r7, sp, #0
 8025e08:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8025e0a:	687b      	ldr	r3, [r7, #4]
 8025e0c:	4618      	mov	r0, r3
 8025e0e:	f7fe fe6d 	bl	8024aec <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8025e12:	4603      	mov	r3, r0
 8025e14:	4618      	mov	r0, r3
 8025e16:	f001 f932 	bl	802707e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8025e1a:	4603      	mov	r3, r0
 8025e1c:	4618      	mov	r0, r3
 8025e1e:	3708      	adds	r7, #8
 8025e20:	46bd      	mov	sp, r7
 8025e22:	bd80      	pop	{r7, pc}

08025e24 <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8025e24:	b580      	push	{r7, lr}
 8025e26:	b084      	sub	sp, #16
 8025e28:	af00      	add	r7, sp, #0
 8025e2a:	60f8      	str	r0, [r7, #12]
 8025e2c:	60b9      	str	r1, [r7, #8]
 8025e2e:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8025e30:	68b9      	ldr	r1, [r7, #8]
 8025e32:	68f8      	ldr	r0, [r7, #12]
 8025e34:	f001 f93d 	bl	80270b2 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8025e38:	4603      	mov	r3, r0
 8025e3a:	4618      	mov	r0, r3
 8025e3c:	3710      	adds	r7, #16
 8025e3e:	46bd      	mov	sp, r7
 8025e40:	bd80      	pop	{r7, pc}

08025e42 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8025e42:	b590      	push	{r4, r7, lr}
 8025e44:	b087      	sub	sp, #28
 8025e46:	af00      	add	r7, sp, #0
 8025e48:	60f8      	str	r0, [r7, #12]
 8025e4a:	60b9      	str	r1, [r7, #8]
 8025e4c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8025e4e:	68f8      	ldr	r0, [r7, #12]
 8025e50:	f7ff ffd7 	bl	8025e02 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8025e54:	4604      	mov	r4, r0
 8025e56:	68f8      	ldr	r0, [r7, #12]
 8025e58:	f7fd fcfb 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8025e5c:	4603      	mov	r3, r0
 8025e5e:	1ae2      	subs	r2, r4, r3
 8025e60:	68bb      	ldr	r3, [r7, #8]
 8025e62:	429a      	cmp	r2, r3
 8025e64:	bf34      	ite	cc
 8025e66:	2301      	movcc	r3, #1
 8025e68:	2300      	movcs	r3, #0
 8025e6a:	b2db      	uxtb	r3, r3
 8025e6c:	2b00      	cmp	r3, #0
 8025e6e:	d002      	beq.n	8025e76 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8025e70:	6878      	ldr	r0, [r7, #4]
 8025e72:	f019 fa99 	bl	803f3a8 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8025e76:	68f8      	ldr	r0, [r7, #12]
 8025e78:	f7fd fceb 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8025e7c:	4604      	mov	r4, r0
 8025e7e:	68f8      	ldr	r0, [r7, #12]
 8025e80:	f7fd fce7 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8025e84:	4603      	mov	r3, r0
 8025e86:	613b      	str	r3, [r7, #16]
 8025e88:	f107 0208 	add.w	r2, r7, #8
 8025e8c:	f107 0310 	add.w	r3, r7, #16
 8025e90:	4611      	mov	r1, r2
 8025e92:	4618      	mov	r0, r3
 8025e94:	f7ff fc07 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 8025e98:	4603      	mov	r3, r0
 8025e9a:	681b      	ldr	r3, [r3, #0]
 8025e9c:	4423      	add	r3, r4
 8025e9e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8025ea0:	68f8      	ldr	r0, [r7, #12]
 8025ea2:	f7fd fcd6 	bl	8023852 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8025ea6:	4602      	mov	r2, r0
 8025ea8:	697b      	ldr	r3, [r7, #20]
 8025eaa:	4293      	cmp	r3, r2
 8025eac:	d306      	bcc.n	8025ebc <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8025eae:	68f8      	ldr	r0, [r7, #12]
 8025eb0:	f7ff ffa7 	bl	8025e02 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8025eb4:	4602      	mov	r2, r0
 8025eb6:	697b      	ldr	r3, [r7, #20]
 8025eb8:	4293      	cmp	r3, r2
 8025eba:	d904      	bls.n	8025ec6 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8025ebc:	68f8      	ldr	r0, [r7, #12]
 8025ebe:	f7ff ffa0 	bl	8025e02 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8025ec2:	4603      	mov	r3, r0
 8025ec4:	e000      	b.n	8025ec8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8025ec6:	697b      	ldr	r3, [r7, #20]
      }
 8025ec8:	4618      	mov	r0, r3
 8025eca:	371c      	adds	r7, #28
 8025ecc:	46bd      	mov	sp, r7
 8025ece:	bd90      	pop	{r4, r7, pc}

08025ed0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8025ed0:	b580      	push	{r7, lr}
 8025ed2:	b082      	sub	sp, #8
 8025ed4:	af00      	add	r7, sp, #0
 8025ed6:	6078      	str	r0, [r7, #4]
 8025ed8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8025eda:	683b      	ldr	r3, [r7, #0]
 8025edc:	2b00      	cmp	r3, #0
 8025ede:	d006      	beq.n	8025eee <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8025ee0:	687b      	ldr	r3, [r7, #4]
 8025ee2:	6839      	ldr	r1, [r7, #0]
 8025ee4:	4618      	mov	r0, r3
 8025ee6:	f001 f8f4 	bl	80270d2 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8025eea:	4603      	mov	r3, r0
 8025eec:	e000      	b.n	8025ef0 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8025eee:	2300      	movs	r3, #0
      }
 8025ef0:	4618      	mov	r0, r3
 8025ef2:	3708      	adds	r7, #8
 8025ef4:	46bd      	mov	sp, r7
 8025ef6:	bd80      	pop	{r7, pc}

08025ef8 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8025ef8:	b590      	push	{r4, r7, lr}
 8025efa:	b087      	sub	sp, #28
 8025efc:	af02      	add	r7, sp, #8
 8025efe:	60f8      	str	r0, [r7, #12]
 8025f00:	60b9      	str	r1, [r7, #8]
 8025f02:	607a      	str	r2, [r7, #4]
 8025f04:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8025f06:	f88d 4000 	strb.w	r4, [sp]
 8025f0a:	683b      	ldr	r3, [r7, #0]
 8025f0c:	687a      	ldr	r2, [r7, #4]
 8025f0e:	68b9      	ldr	r1, [r7, #8]
 8025f10:	68f8      	ldr	r0, [r7, #12]
 8025f12:	f001 f8ed 	bl	80270f0 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8025f16:	4603      	mov	r3, r0
      }
 8025f18:	4618      	mov	r0, r3
 8025f1a:	3714      	adds	r7, #20
 8025f1c:	46bd      	mov	sp, r7
 8025f1e:	bd90      	pop	{r4, r7, pc}

08025f20 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8025f20:	b590      	push	{r4, r7, lr}
 8025f22:	b085      	sub	sp, #20
 8025f24:	af00      	add	r7, sp, #0
 8025f26:	60f8      	str	r0, [r7, #12]
 8025f28:	60b9      	str	r1, [r7, #8]
 8025f2a:	607a      	str	r2, [r7, #4]
 8025f2c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8025f2e:	68f8      	ldr	r0, [r7, #12]
 8025f30:	f001 f8f0 	bl	8027114 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8025f34:	4604      	mov	r4, r0
 8025f36:	68b8      	ldr	r0, [r7, #8]
 8025f38:	f001 f8ec 	bl	8027114 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8025f3c:	4601      	mov	r1, r0
 8025f3e:	683b      	ldr	r3, [r7, #0]
 8025f40:	687a      	ldr	r2, [r7, #4]
 8025f42:	4620      	mov	r0, r4
 8025f44:	f001 f8f5 	bl	8027132 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 8025f48:	4603      	mov	r3, r0
    }
 8025f4a:	4618      	mov	r0, r3
 8025f4c:	3714      	adds	r7, #20
 8025f4e:	46bd      	mov	sp, r7
 8025f50:	bd90      	pop	{r4, r7, pc}

08025f52 <_ZSt18__do_alloc_on_copyISaIhEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 8025f52:	b480      	push	{r7}
 8025f54:	b085      	sub	sp, #20
 8025f56:	af00      	add	r7, sp, #0
 8025f58:	60f8      	str	r0, [r7, #12]
 8025f5a:	60b9      	str	r1, [r7, #8]
 8025f5c:	713a      	strb	r2, [r7, #4]
    { }
 8025f5e:	bf00      	nop
 8025f60:	3714      	adds	r7, #20
 8025f62:	46bd      	mov	sp, r7
 8025f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f68:	4770      	bx	lr

08025f6a <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8025f6a:	b480      	push	{r7}
 8025f6c:	b083      	sub	sp, #12
 8025f6e:	af00      	add	r7, sp, #0
 8025f70:	6078      	str	r0, [r7, #4]
 8025f72:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8025f74:	683b      	ldr	r3, [r7, #0]
 8025f76:	681a      	ldr	r2, [r3, #0]
 8025f78:	687b      	ldr	r3, [r7, #4]
 8025f7a:	601a      	str	r2, [r3, #0]
 8025f7c:	687b      	ldr	r3, [r7, #4]
 8025f7e:	4618      	mov	r0, r3
 8025f80:	370c      	adds	r7, #12
 8025f82:	46bd      	mov	sp, r7
 8025f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f88:	4770      	bx	lr

08025f8a <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025f8a:	b580      	push	{r7, lr}
 8025f8c:	b084      	sub	sp, #16
 8025f8e:	af00      	add	r7, sp, #0
 8025f90:	60f8      	str	r0, [r7, #12]
 8025f92:	60b9      	str	r1, [r7, #8]
 8025f94:	607a      	str	r2, [r7, #4]
 8025f96:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8025f98:	687a      	ldr	r2, [r7, #4]
 8025f9a:	68b9      	ldr	r1, [r7, #8]
 8025f9c:	68f8      	ldr	r0, [r7, #12]
 8025f9e:	f001 f8d9 	bl	8027154 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8025fa2:	4603      	mov	r3, r0
 8025fa4:	4618      	mov	r0, r3
 8025fa6:	3710      	adds	r7, #16
 8025fa8:	46bd      	mov	sp, r7
 8025faa:	bd80      	pop	{r7, pc}

08025fac <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8025fac:	b480      	push	{r7}
 8025fae:	b083      	sub	sp, #12
 8025fb0:	af00      	add	r7, sp, #0
 8025fb2:	6078      	str	r0, [r7, #4]
 8025fb4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8025fb6:	683b      	ldr	r3, [r7, #0]
 8025fb8:	681a      	ldr	r2, [r3, #0]
 8025fba:	687b      	ldr	r3, [r7, #4]
 8025fbc:	601a      	str	r2, [r3, #0]
 8025fbe:	687b      	ldr	r3, [r7, #4]
 8025fc0:	4618      	mov	r0, r3
 8025fc2:	370c      	adds	r7, #12
 8025fc4:	46bd      	mov	sp, r7
 8025fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fca:	4770      	bx	lr

08025fcc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8025fcc:	b480      	push	{r7}
 8025fce:	b083      	sub	sp, #12
 8025fd0:	af00      	add	r7, sp, #0
 8025fd2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025fd4:	687b      	ldr	r3, [r7, #4]
 8025fd6:	4618      	mov	r0, r3
 8025fd8:	370c      	adds	r7, #12
 8025fda:	46bd      	mov	sp, r7
 8025fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025fe0:	4770      	bx	lr

08025fe2 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8025fe2:	b5b0      	push	{r4, r5, r7, lr}
 8025fe4:	b084      	sub	sp, #16
 8025fe6:	af00      	add	r7, sp, #0
 8025fe8:	60f8      	str	r0, [r7, #12]
 8025fea:	60b9      	str	r1, [r7, #8]
 8025fec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8025fee:	68f8      	ldr	r0, [r7, #12]
 8025ff0:	f001 f8c2 	bl	8027178 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8025ff4:	4604      	mov	r4, r0
 8025ff6:	68b8      	ldr	r0, [r7, #8]
 8025ff8:	f001 f8be 	bl	8027178 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8025ffc:	4605      	mov	r5, r0
 8025ffe:	6878      	ldr	r0, [r7, #4]
 8026000:	f001 f8c8 	bl	8027194 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8026004:	4603      	mov	r3, r0
 8026006:	461a      	mov	r2, r3
 8026008:	4629      	mov	r1, r5
 802600a:	4620      	mov	r0, r4
 802600c:	f001 f8d0 	bl	80271b0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8026010:	4603      	mov	r3, r0
 8026012:	4619      	mov	r1, r3
 8026014:	6878      	ldr	r0, [r7, #4]
 8026016:	f001 f8db 	bl	80271d0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>
 802601a:	4603      	mov	r3, r0
    }
 802601c:	4618      	mov	r0, r3
 802601e:	3710      	adds	r7, #16
 8026020:	46bd      	mov	sp, r7
 8026022:	bdb0      	pop	{r4, r5, r7, pc}

08026024 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8026024:	b580      	push	{r7, lr}
 8026026:	b082      	sub	sp, #8
 8026028:	af00      	add	r7, sp, #0
 802602a:	6078      	str	r0, [r7, #4]
 802602c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 802602e:	6839      	ldr	r1, [r7, #0]
 8026030:	6878      	ldr	r0, [r7, #4]
 8026032:	f001 f8e2 	bl	80271fa <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8026036:	bf00      	nop
 8026038:	3708      	adds	r7, #8
 802603a:	46bd      	mov	sp, r7
 802603c:	bd80      	pop	{r7, pc}

0802603e <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 802603e:	b480      	push	{r7}
 8026040:	b083      	sub	sp, #12
 8026042:	af00      	add	r7, sp, #0
 8026044:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026046:	687b      	ldr	r3, [r7, #4]
 8026048:	4618      	mov	r0, r3
 802604a:	370c      	adds	r7, #12
 802604c:	46bd      	mov	sp, r7
 802604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026052:	4770      	bx	lr

08026054 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026054:	b5b0      	push	{r4, r5, r7, lr}
 8026056:	b084      	sub	sp, #16
 8026058:	af00      	add	r7, sp, #0
 802605a:	60f8      	str	r0, [r7, #12]
 802605c:	60b9      	str	r1, [r7, #8]
 802605e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026060:	68f8      	ldr	r0, [r7, #12]
 8026062:	f001 f8d5 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 8026066:	4604      	mov	r4, r0
 8026068:	68b8      	ldr	r0, [r7, #8]
 802606a:	f001 f8d1 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 802606e:	4605      	mov	r5, r0
 8026070:	687b      	ldr	r3, [r7, #4]
 8026072:	4618      	mov	r0, r3
 8026074:	f001 f8cc 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 8026078:	4603      	mov	r3, r0
 802607a:	461a      	mov	r2, r3
 802607c:	4629      	mov	r1, r5
 802607e:	4620      	mov	r0, r4
 8026080:	f001 f8d1 	bl	8027226 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8026084:	4602      	mov	r2, r0
 8026086:	1d3b      	adds	r3, r7, #4
 8026088:	4611      	mov	r1, r2
 802608a:	4618      	mov	r0, r3
 802608c:	f001 f8db 	bl	8027246 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8026090:	4603      	mov	r3, r0
    }
 8026092:	4618      	mov	r0, r3
 8026094:	3710      	adds	r7, #16
 8026096:	46bd      	mov	sp, r7
 8026098:	bdb0      	pop	{r4, r5, r7, pc}

0802609a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802609a:	b580      	push	{r7, lr}
 802609c:	b086      	sub	sp, #24
 802609e:	af00      	add	r7, sp, #0
 80260a0:	60f8      	str	r0, [r7, #12]
 80260a2:	60b9      	str	r1, [r7, #8]
 80260a4:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80260a6:	2301      	movs	r3, #1
 80260a8:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80260aa:	687a      	ldr	r2, [r7, #4]
 80260ac:	68b9      	ldr	r1, [r7, #8]
 80260ae:	68f8      	ldr	r0, [r7, #12]
 80260b0:	f001 f8d5 	bl	802725e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 80260b4:	4603      	mov	r3, r0
    }
 80260b6:	4618      	mov	r0, r3
 80260b8:	3718      	adds	r7, #24
 80260ba:	46bd      	mov	sp, r7
 80260bc:	bd80      	pop	{r7, pc}

080260be <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80260be:	b580      	push	{r7, lr}
 80260c0:	b082      	sub	sp, #8
 80260c2:	af00      	add	r7, sp, #0
 80260c4:	6078      	str	r0, [r7, #4]
 80260c6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80260c8:	6839      	ldr	r1, [r7, #0]
 80260ca:	6878      	ldr	r0, [r7, #4]
 80260cc:	f7fe fb18 	bl	8024700 <_ZNSaIhEC1ERKS_>
 80260d0:	687b      	ldr	r3, [r7, #4]
 80260d2:	4618      	mov	r0, r3
 80260d4:	f7fe f9b6 	bl	8024444 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 80260d8:	687b      	ldr	r3, [r7, #4]
 80260da:	4618      	mov	r0, r3
 80260dc:	3708      	adds	r7, #8
 80260de:	46bd      	mov	sp, r7
 80260e0:	bd80      	pop	{r7, pc}

080260e2 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 80260e2:	b480      	push	{r7}
 80260e4:	b083      	sub	sp, #12
 80260e6:	af00      	add	r7, sp, #0
 80260e8:	6078      	str	r0, [r7, #4]
 80260ea:	687b      	ldr	r3, [r7, #4]
 80260ec:	685b      	ldr	r3, [r3, #4]
 80260ee:	4618      	mov	r0, r3
 80260f0:	370c      	adds	r7, #12
 80260f2:	46bd      	mov	sp, r7
 80260f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80260f8:	4770      	bx	lr

080260fa <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80260fa:	b5b0      	push	{r4, r5, r7, lr}
 80260fc:	b082      	sub	sp, #8
 80260fe:	af00      	add	r7, sp, #0
 8026100:	6078      	str	r0, [r7, #4]
 8026102:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8026104:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8026106:	1d3b      	adds	r3, r7, #4
 8026108:	4618      	mov	r0, r3
 802610a:	f001 f8b8 	bl	802727e <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 802610e:	462a      	mov	r2, r5
 8026110:	6839      	ldr	r1, [r7, #0]
 8026112:	4620      	mov	r0, r4
 8026114:	f001 f8be 	bl	8027294 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8026118:	4603      	mov	r3, r0
    }
 802611a:	4618      	mov	r0, r3
 802611c:	3708      	adds	r7, #8
 802611e:	46bd      	mov	sp, r7
 8026120:	bdb0      	pop	{r4, r5, r7, pc}
	...

08026124 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8026124:	b590      	push	{r4, r7, lr}
 8026126:	b085      	sub	sp, #20
 8026128:	af00      	add	r7, sp, #0
 802612a:	6078      	str	r0, [r7, #4]
 802612c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 802612e:	f107 030c 	add.w	r3, r7, #12
 8026132:	6839      	ldr	r1, [r7, #0]
 8026134:	4618      	mov	r0, r3
 8026136:	f7fe fae3 	bl	8024700 <_ZNSaIhEC1ERKS_>
 802613a:	f107 030c 	add.w	r3, r7, #12
 802613e:	4618      	mov	r0, r3
 8026140:	f000 ff9d 	bl	802707e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8026144:	4602      	mov	r2, r0
 8026146:	687b      	ldr	r3, [r7, #4]
 8026148:	4293      	cmp	r3, r2
 802614a:	bf8c      	ite	hi
 802614c:	2301      	movhi	r3, #1
 802614e:	2300      	movls	r3, #0
 8026150:	b2dc      	uxtb	r4, r3
 8026152:	f107 030c 	add.w	r3, r7, #12
 8026156:	4618      	mov	r0, r3
 8026158:	f7fd fa84 	bl	8023664 <_ZNSaIhED1Ev>
 802615c:	2c00      	cmp	r4, #0
 802615e:	d002      	beq.n	8026166 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8026160:	4803      	ldr	r0, [pc, #12]	; (8026170 <_ZNSt6vectorIhSaIhEE17_S_check_init_lenEjRKS0_+0x4c>)
 8026162:	f019 f921 	bl	803f3a8 <_ZSt20__throw_length_errorPKc>
	return __n;
 8026166:	687b      	ldr	r3, [r7, #4]
      }
 8026168:	4618      	mov	r0, r3
 802616a:	3714      	adds	r7, #20
 802616c:	46bd      	mov	sp, r7
 802616e:	bd90      	pop	{r4, r7, pc}
 8026170:	080410e8 	.word	0x080410e8

08026174 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8026174:	b580      	push	{r7, lr}
 8026176:	b084      	sub	sp, #16
 8026178:	af00      	add	r7, sp, #0
 802617a:	60f8      	str	r0, [r7, #12]
 802617c:	60b9      	str	r1, [r7, #8]
 802617e:	607a      	str	r2, [r7, #4]
 8026180:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8026182:	687a      	ldr	r2, [r7, #4]
 8026184:	68b9      	ldr	r1, [r7, #8]
 8026186:	68f8      	ldr	r0, [r7, #12]
 8026188:	f001 f893 	bl	80272b2 <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>
 802618c:	4603      	mov	r3, r0
 802618e:	4618      	mov	r0, r3
 8026190:	3710      	adds	r7, #16
 8026192:	46bd      	mov	sp, r7
 8026194:	bd80      	pop	{r7, pc}

08026196 <_ZStmiRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8026196:	b580      	push	{r7, lr}
 8026198:	b082      	sub	sp, #8
 802619a:	af00      	add	r7, sp, #0
 802619c:	6078      	str	r0, [r7, #4]
 802619e:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80261a0:	f001 f899 	bl	80272d6 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 80261a4:	4603      	mov	r3, r0
 80261a6:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80261a8:	687b      	ldr	r3, [r7, #4]
 80261aa:	68da      	ldr	r2, [r3, #12]
 80261ac:	683b      	ldr	r3, [r7, #0]
 80261ae:	68db      	ldr	r3, [r3, #12]
 80261b0:	1ad3      	subs	r3, r2, r3
 80261b2:	109b      	asrs	r3, r3, #2
 80261b4:	3b01      	subs	r3, #1
 80261b6:	fb01 f303 	mul.w	r3, r1, r3
 80261ba:	687a      	ldr	r2, [r7, #4]
 80261bc:	6811      	ldr	r1, [r2, #0]
 80261be:	687a      	ldr	r2, [r7, #4]
 80261c0:	6852      	ldr	r2, [r2, #4]
 80261c2:	1a8a      	subs	r2, r1, r2
 80261c4:	1112      	asrs	r2, r2, #4
 80261c6:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80261c8:	683a      	ldr	r2, [r7, #0]
 80261ca:	6891      	ldr	r1, [r2, #8]
 80261cc:	683a      	ldr	r2, [r7, #0]
 80261ce:	6812      	ldr	r2, [r2, #0]
 80261d0:	1a8a      	subs	r2, r1, r2
 80261d2:	1112      	asrs	r2, r2, #4
 80261d4:	4413      	add	r3, r2
      }
 80261d6:	4618      	mov	r0, r3
 80261d8:	3708      	adds	r7, #8
 80261da:	46bd      	mov	sp, r7
 80261dc:	bd80      	pop	{r7, pc}

080261de <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
 80261de:	b480      	push	{r7}
 80261e0:	b083      	sub	sp, #12
 80261e2:	af00      	add	r7, sp, #0
 80261e4:	6078      	str	r0, [r7, #4]
 80261e6:	687b      	ldr	r3, [r7, #4]
 80261e8:	685b      	ldr	r3, [r3, #4]
 80261ea:	4618      	mov	r0, r3
 80261ec:	370c      	adds	r7, #12
 80261ee:	46bd      	mov	sp, r7
 80261f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261f4:	4770      	bx	lr

080261f6 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
    distance(_InputIterator __first, _InputIterator __last)
 80261f6:	b5b0      	push	{r4, r5, r7, lr}
 80261f8:	b082      	sub	sp, #8
 80261fa:	af00      	add	r7, sp, #0
 80261fc:	6078      	str	r0, [r7, #4]
 80261fe:	6039      	str	r1, [r7, #0]
      return std::__distance(__first, __last,
 8026200:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8026202:	1d3b      	adds	r3, r7, #4
 8026204:	4618      	mov	r0, r3
 8026206:	f000 f83d 	bl	8026284 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 802620a:	462a      	mov	r2, r5
 802620c:	6839      	ldr	r1, [r7, #0]
 802620e:	4620      	mov	r0, r4
 8026210:	f001 f86a 	bl	80272e8 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8026214:	4603      	mov	r3, r0
    }
 8026216:	4618      	mov	r0, r3
 8026218:	3708      	adds	r7, #8
 802621a:	46bd      	mov	sp, r7
 802621c:	bdb0      	pop	{r4, r5, r7, pc}

0802621e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 802621e:	b590      	push	{r4, r7, lr}
 8026220:	b085      	sub	sp, #20
 8026222:	af00      	add	r7, sp, #0
 8026224:	6078      	str	r0, [r7, #4]
 8026226:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8026228:	683b      	ldr	r3, [r7, #0]
 802622a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 802622c:	6878      	ldr	r0, [r7, #4]
 802622e:	f000 f829 	bl	8026284 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8026232:	4622      	mov	r2, r4
 8026234:	68f9      	ldr	r1, [r7, #12]
 8026236:	6878      	ldr	r0, [r7, #4]
 8026238:	f001 f86c 	bl	8027314 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 802623c:	bf00      	nop
 802623e:	3714      	adds	r7, #20
 8026240:	46bd      	mov	sp, r7
 8026242:	bd90      	pop	{r4, r7, pc}

08026244 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 8026244:	b5b0      	push	{r4, r5, r7, lr}
 8026246:	b088      	sub	sp, #32
 8026248:	af00      	add	r7, sp, #0
 802624a:	60f8      	str	r0, [r7, #12]
 802624c:	60b9      	str	r1, [r7, #8]
 802624e:	607a      	str	r2, [r7, #4]
 8026250:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026252:	68b8      	ldr	r0, [r7, #8]
 8026254:	f001 f874 	bl	8027340 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8026258:	4604      	mov	r4, r0
 802625a:	6878      	ldr	r0, [r7, #4]
 802625c:	f001 f870 	bl	8027340 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8026260:	4605      	mov	r5, r0
 8026262:	f107 0310 	add.w	r3, r7, #16
 8026266:	6839      	ldr	r1, [r7, #0]
 8026268:	4618      	mov	r0, r3
 802626a:	f7ff f882 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802626e:	68f8      	ldr	r0, [r7, #12]
 8026270:	f107 0310 	add.w	r3, r7, #16
 8026274:	462a      	mov	r2, r5
 8026276:	4621      	mov	r1, r4
 8026278:	f001 f86d 	bl	8027356 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 802627c:	68f8      	ldr	r0, [r7, #12]
 802627e:	3720      	adds	r7, #32
 8026280:	46bd      	mov	sp, r7
 8026282:	bdb0      	pop	{r4, r5, r7, pc}

08026284 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8026284:	b480      	push	{r7}
 8026286:	b083      	sub	sp, #12
 8026288:	af00      	add	r7, sp, #0
 802628a:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 802628c:	bf00      	nop
 802628e:	4618      	mov	r0, r3
 8026290:	370c      	adds	r7, #12
 8026292:	46bd      	mov	sp, r7
 8026294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026298:	4770      	bx	lr

0802629a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      deque<_Tp, _Alloc>::
 802629a:	b590      	push	{r4, r7, lr}
 802629c:	b0a5      	sub	sp, #148	; 0x94
 802629e:	af02      	add	r7, sp, #8
 80262a0:	60f8      	str	r0, [r7, #12]
 80262a2:	60b9      	str	r1, [r7, #8]
 80262a4:	607a      	str	r2, [r7, #4]
 80262a6:	603b      	str	r3, [r7, #0]
	const size_type __n = std::distance(__first, __last);
 80262a8:	6839      	ldr	r1, [r7, #0]
 80262aa:	6878      	ldr	r0, [r7, #4]
 80262ac:	f7ff ffa3 	bl	80261f6 <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 80262b0:	4603      	mov	r3, r0
 80262b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 80262b6:	68bb      	ldr	r3, [r7, #8]
 80262b8:	681a      	ldr	r2, [r3, #0]
 80262ba:	68fb      	ldr	r3, [r7, #12]
 80262bc:	689b      	ldr	r3, [r3, #8]
 80262be:	429a      	cmp	r2, r3
 80262c0:	d126      	bne.n	8026310 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 80262c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80262c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80262ca:	68f9      	ldr	r1, [r7, #12]
 80262cc:	4618      	mov	r0, r3
 80262ce:	f001 f873 	bl	80273b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
		std::__uninitialized_copy_a(__first, __last, __new_start,
 80262d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80262d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80262da:	4611      	mov	r1, r2
 80262dc:	4618      	mov	r0, r3
 80262de:	f7ff f848 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 80262e2:	68fb      	ldr	r3, [r7, #12]
 80262e4:	4618      	mov	r0, r3
 80262e6:	f7fe fe7d 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80262ea:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 80262ec:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80262f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80262f4:	9200      	str	r2, [sp, #0]
 80262f6:	683a      	ldr	r2, [r7, #0]
 80262f8:	6879      	ldr	r1, [r7, #4]
 80262fa:	f001 f887 	bl	802740c <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 80262fe:	68fb      	ldr	r3, [r7, #12]
 8026300:	f103 0408 	add.w	r4, r3, #8
 8026304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802630a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 802630e:	e03d      	b.n	802638c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8026310:	68bb      	ldr	r3, [r7, #8]
 8026312:	681a      	ldr	r2, [r3, #0]
 8026314:	68fb      	ldr	r3, [r7, #12]
 8026316:	699b      	ldr	r3, [r3, #24]
 8026318:	429a      	cmp	r2, r3
 802631a:	d127      	bne.n	802636c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 802631c:	f107 0314 	add.w	r3, r7, #20
 8026320:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026324:	68f9      	ldr	r1, [r7, #12]
 8026326:	4618      	mov	r0, r3
 8026328:	f001 f888 	bl	802743c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 802632c:	68fb      	ldr	r3, [r7, #12]
 802632e:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 8026332:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026336:	4611      	mov	r1, r2
 8026338:	4618      	mov	r0, r3
 802633a:	f7ff f81a 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 802633e:	68fb      	ldr	r3, [r7, #12]
 8026340:	4618      	mov	r0, r3
 8026342:	f7fe fe4f 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8026346:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 8026348:	f107 0054 	add.w	r0, r7, #84	; 0x54
 802634c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026350:	9200      	str	r2, [sp, #0]
 8026352:	683a      	ldr	r2, [r7, #0]
 8026354:	6879      	ldr	r1, [r7, #4]
 8026356:	f001 f859 	bl	802740c <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 802635a:	68fb      	ldr	r3, [r7, #12]
 802635c:	f103 0418 	add.w	r4, r3, #24
 8026360:	f107 0314 	add.w	r3, r7, #20
 8026364:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8026366:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 802636a:	e00f      	b.n	802638c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 802636c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8026370:	68b9      	ldr	r1, [r7, #8]
 8026372:	4618      	mov	r0, r3
 8026374:	f7fe fffd 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026378:	f107 0174 	add.w	r1, r7, #116	; 0x74
 802637c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026380:	9300      	str	r3, [sp, #0]
 8026382:	683b      	ldr	r3, [r7, #0]
 8026384:	687a      	ldr	r2, [r7, #4]
 8026386:	68f8      	ldr	r0, [r7, #12]
 8026388:	f001 f882 	bl	8027490 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 802638c:	bf00      	nop
 802638e:	378c      	adds	r7, #140	; 0x8c
 8026390:	46bd      	mov	sp, r7
 8026392:	bd90      	pop	{r4, r7, pc}

08026394 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8026394:	b590      	push	{r4, r7, lr}
 8026396:	b08b      	sub	sp, #44	; 0x2c
 8026398:	af00      	add	r7, sp, #0
 802639a:	6078      	str	r0, [r7, #4]
 802639c:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 802639e:	f107 0308 	add.w	r3, r7, #8
 80263a2:	6839      	ldr	r1, [r7, #0]
 80263a4:	4618      	mov	r0, r3
 80263a6:	f7fe ffe4 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80263aa:	f107 0318 	add.w	r3, r7, #24
 80263ae:	6879      	ldr	r1, [r7, #4]
 80263b0:	4618      	mov	r0, r3
 80263b2:	f7fe ffcf 	bl	8025354 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 80263b6:	687b      	ldr	r3, [r7, #4]
 80263b8:	4618      	mov	r0, r3
 80263ba:	f7fe fe13 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80263be:	4603      	mov	r3, r0
 80263c0:	f107 0218 	add.w	r2, r7, #24
 80263c4:	f107 0108 	add.w	r1, r7, #8
 80263c8:	6878      	ldr	r0, [r7, #4]
 80263ca:	f7fe ffee 	bl	80253aa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 80263ce:	6878      	ldr	r0, [r7, #4]
 80263d0:	683b      	ldr	r3, [r7, #0]
 80263d2:	68db      	ldr	r3, [r3, #12]
 80263d4:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80263d6:	687b      	ldr	r3, [r7, #4]
 80263d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80263da:	3304      	adds	r3, #4
 80263dc:	461a      	mov	r2, r3
 80263de:	f7fe ff74 	bl	80252ca <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 80263e2:	687b      	ldr	r3, [r7, #4]
 80263e4:	683a      	ldr	r2, [r7, #0]
 80263e6:	f103 0418 	add.w	r4, r3, #24
 80263ea:	4613      	mov	r3, r2
 80263ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80263ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80263f2:	bf00      	nop
 80263f4:	372c      	adds	r7, #44	; 0x2c
 80263f6:	46bd      	mov	sp, r7
 80263f8:	bd90      	pop	{r4, r7, pc}

080263fa <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80263fa:	b480      	push	{r7}
 80263fc:	b083      	sub	sp, #12
 80263fe:	af00      	add	r7, sp, #0
 8026400:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8026402:	687b      	ldr	r3, [r7, #4]
 8026404:	4618      	mov	r0, r3
 8026406:	370c      	adds	r7, #12
 8026408:	46bd      	mov	sp, r7
 802640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802640e:	4770      	bx	lr

08026410 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8026410:	b5b0      	push	{r4, r5, r7, lr}
 8026412:	b084      	sub	sp, #16
 8026414:	af00      	add	r7, sp, #0
 8026416:	60f8      	str	r0, [r7, #12]
 8026418:	60b9      	str	r1, [r7, #8]
 802641a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 802641c:	6878      	ldr	r0, [r7, #4]
 802641e:	f7ff ffec 	bl	80263fa <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8026422:	4605      	mov	r5, r0
 8026424:	68bb      	ldr	r3, [r7, #8]
 8026426:	4619      	mov	r1, r3
 8026428:	2014      	movs	r0, #20
 802642a:	f7fa fd4c 	bl	8020ec6 <_ZnwjPv>
 802642e:	4603      	mov	r3, r0
 8026430:	461c      	mov	r4, r3
 8026432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026436:	682b      	ldr	r3, [r5, #0]
 8026438:	6023      	str	r3, [r4, #0]
 802643a:	bf00      	nop
 802643c:	3710      	adds	r7, #16
 802643e:	46bd      	mov	sp, r7
 8026440:	bdb0      	pop	{r4, r5, r7, pc}

08026442 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8026442:	b580      	push	{r7, lr}
 8026444:	b082      	sub	sp, #8
 8026446:	af00      	add	r7, sp, #0
 8026448:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 802644a:	687b      	ldr	r3, [r7, #4]
 802644c:	4618      	mov	r0, r3
 802644e:	f001 fb2c 	bl	8027aaa <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8026452:	4603      	mov	r3, r0
 8026454:	4618      	mov	r0, r3
 8026456:	f001 fb0e 	bl	8027a76 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 802645a:	4603      	mov	r3, r0
 802645c:	4618      	mov	r0, r3
 802645e:	3708      	adds	r7, #8
 8026460:	46bd      	mov	sp, r7
 8026462:	bd80      	pop	{r7, pc}

08026464 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 8026464:	b580      	push	{r7, lr}
 8026466:	b082      	sub	sp, #8
 8026468:	af00      	add	r7, sp, #0
 802646a:	6078      	str	r0, [r7, #4]
 802646c:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 802646e:	687b      	ldr	r3, [r7, #4]
 8026470:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 8026472:	687b      	ldr	r3, [r7, #4]
 8026474:	681b      	ldr	r3, [r3, #0]
 8026476:	1ad3      	subs	r3, r2, r3
 8026478:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 802647a:	461a      	mov	r2, r3
 802647c:	683b      	ldr	r3, [r7, #0]
 802647e:	4293      	cmp	r3, r2
 8026480:	d904      	bls.n	802648c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 8026482:	2201      	movs	r2, #1
 8026484:	6839      	ldr	r1, [r7, #0]
 8026486:	6878      	ldr	r0, [r7, #4]
 8026488:	f001 fb1a 	bl	8027ac0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 802648c:	bf00      	nop
 802648e:	3708      	adds	r7, #8
 8026490:	46bd      	mov	sp, r7
 8026492:	bd80      	pop	{r7, pc}

08026494 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8026494:	b590      	push	{r4, r7, lr}
 8026496:	b083      	sub	sp, #12
 8026498:	af00      	add	r7, sp, #0
 802649a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 802649c:	687c      	ldr	r4, [r7, #4]
 802649e:	2014      	movs	r0, #20
 80264a0:	f7fa fd1d 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80264a4:	4603      	mov	r3, r0
 80264a6:	4619      	mov	r1, r3
 80264a8:	4620      	mov	r0, r4
 80264aa:	f001 fba3 	bl	8027bf4 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 80264ae:	4603      	mov	r3, r0
      }
 80264b0:	4618      	mov	r0, r3
 80264b2:	370c      	adds	r7, #12
 80264b4:	46bd      	mov	sp, r7
 80264b6:	bd90      	pop	{r4, r7, pc}

080264b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80264b8:	b590      	push	{r4, r7, lr}
 80264ba:	b083      	sub	sp, #12
 80264bc:	af00      	add	r7, sp, #0
 80264be:	6078      	str	r0, [r7, #4]
 80264c0:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	683a      	ldr	r2, [r7, #0]
 80264c6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80264c8:	683b      	ldr	r3, [r7, #0]
 80264ca:	681a      	ldr	r2, [r3, #0]
 80264cc:	687b      	ldr	r3, [r7, #4]
 80264ce:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80264d0:	687b      	ldr	r3, [r7, #4]
 80264d2:	685c      	ldr	r4, [r3, #4]
 80264d4:	f000 f81f 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80264d8:	4602      	mov	r2, r0
 80264da:	4613      	mov	r3, r2
 80264dc:	009b      	lsls	r3, r3, #2
 80264de:	4413      	add	r3, r2
 80264e0:	009b      	lsls	r3, r3, #2
 80264e2:	18e2      	adds	r2, r4, r3
 80264e4:	687b      	ldr	r3, [r7, #4]
 80264e6:	609a      	str	r2, [r3, #8]
      }
 80264e8:	bf00      	nop
 80264ea:	370c      	adds	r7, #12
 80264ec:	46bd      	mov	sp, r7
 80264ee:	bd90      	pop	{r4, r7, pc}

080264f0 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80264f0:	b590      	push	{r4, r7, lr}
 80264f2:	b083      	sub	sp, #12
 80264f4:	af00      	add	r7, sp, #0
 80264f6:	6078      	str	r0, [r7, #4]
 80264f8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80264fa:	687c      	ldr	r4, [r7, #4]
 80264fc:	2014      	movs	r0, #20
 80264fe:	f7fa fcee 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026502:	4603      	mov	r3, r0
 8026504:	461a      	mov	r2, r3
 8026506:	6839      	ldr	r1, [r7, #0]
 8026508:	4620      	mov	r0, r4
 802650a:	f001 fb82 	bl	8027c12 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 802650e:	bf00      	nop
 8026510:	370c      	adds	r7, #12
 8026512:	46bd      	mov	sp, r7
 8026514:	bd90      	pop	{r4, r7, pc}

08026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8026516:	b580      	push	{r7, lr}
 8026518:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802651a:	2014      	movs	r0, #20
 802651c:	f7fa fcdf 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026520:	4603      	mov	r3, r0
 8026522:	4618      	mov	r0, r3
 8026524:	bd80      	pop	{r7, pc}

08026526 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 8026526:	b480      	push	{r7}
 8026528:	b083      	sub	sp, #12
 802652a:	af00      	add	r7, sp, #0
 802652c:	6078      	str	r0, [r7, #4]
 802652e:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8026530:	bf00      	nop
 8026532:	370c      	adds	r7, #12
 8026534:	46bd      	mov	sp, r7
 8026536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802653a:	4770      	bx	lr

0802653c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 802653c:	b580      	push	{r7, lr}
 802653e:	b084      	sub	sp, #16
 8026540:	af00      	add	r7, sp, #0
 8026542:	60f8      	str	r0, [r7, #12]
 8026544:	60b9      	str	r1, [r7, #8]
 8026546:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8026548:	68b9      	ldr	r1, [r7, #8]
 802654a:	68f8      	ldr	r0, [r7, #12]
 802654c:	f7fe ff11 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 8026550:	6879      	ldr	r1, [r7, #4]
 8026552:	68f8      	ldr	r0, [r7, #12]
 8026554:	f001 fb6c 	bl	8027c30 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 8026558:	bf00      	nop
      }
 802655a:	68f8      	ldr	r0, [r7, #12]
 802655c:	3710      	adds	r7, #16
 802655e:	46bd      	mov	sp, r7
 8026560:	bd80      	pop	{r7, pc}

08026562 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8026562:	b480      	push	{r7}
 8026564:	b083      	sub	sp, #12
 8026566:	af00      	add	r7, sp, #0
 8026568:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 802656a:	687b      	ldr	r3, [r7, #4]
 802656c:	681b      	ldr	r3, [r3, #0]
 802656e:	4618      	mov	r0, r3
 8026570:	370c      	adds	r7, #12
 8026572:	46bd      	mov	sp, r7
 8026574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026578:	4770      	bx	lr

0802657a <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 802657a:	b580      	push	{r7, lr}
 802657c:	b084      	sub	sp, #16
 802657e:	af00      	add	r7, sp, #0
 8026580:	60f8      	str	r0, [r7, #12]
 8026582:	60b9      	str	r1, [r7, #8]
 8026584:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8026586:	6878      	ldr	r0, [r7, #4]
 8026588:	f001 fbb6 	bl	8027cf8 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 802658c:	4603      	mov	r3, r0
 802658e:	461a      	mov	r2, r3
 8026590:	68b9      	ldr	r1, [r7, #8]
 8026592:	68f8      	ldr	r0, [r7, #12]
 8026594:	f001 fbbb 	bl	8027d0e <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 8026598:	bf00      	nop
 802659a:	3710      	adds	r7, #16
 802659c:	46bd      	mov	sp, r7
 802659e:	bd80      	pop	{r7, pc}

080265a0 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80265a0:	b5b0      	push	{r4, r5, r7, lr}
 80265a2:	b082      	sub	sp, #8
 80265a4:	af00      	add	r7, sp, #0
 80265a6:	6078      	str	r0, [r7, #4]
 80265a8:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 80265aa:	6878      	ldr	r0, [r7, #4]
 80265ac:	f001 fbc5 	bl	8027d3a <_ZNKSt5dequeIjSaIjEE4sizeEv>
 80265b0:	4604      	mov	r4, r0
 80265b2:	6878      	ldr	r0, [r7, #4]
 80265b4:	f001 fbd3 	bl	8027d5e <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 80265b8:	4603      	mov	r3, r0
 80265ba:	429c      	cmp	r4, r3
 80265bc:	bf0c      	ite	eq
 80265be:	2301      	moveq	r3, #1
 80265c0:	2300      	movne	r3, #0
 80265c2:	b2db      	uxtb	r3, r3
 80265c4:	2b00      	cmp	r3, #0
 80265c6:	d002      	beq.n	80265ce <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 80265c8:	4816      	ldr	r0, [pc, #88]	; (8026624 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 80265ca:	f018 feed 	bl	803f3a8 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 80265ce:	2101      	movs	r1, #1
 80265d0:	6878      	ldr	r0, [r7, #4]
 80265d2:	f001 fbd5 	bl	8027d80 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80265d6:	687a      	ldr	r2, [r7, #4]
 80265d8:	687b      	ldr	r3, [r7, #4]
 80265da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80265dc:	1d1c      	adds	r4, r3, #4
 80265de:	4610      	mov	r0, r2
 80265e0:	f001 fbe9 	bl	8027db6 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 80265e4:	4603      	mov	r3, r0
 80265e6:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80265e8:	687c      	ldr	r4, [r7, #4]
 80265ea:	687b      	ldr	r3, [r7, #4]
 80265ec:	699d      	ldr	r5, [r3, #24]
 80265ee:	6838      	ldr	r0, [r7, #0]
 80265f0:	f001 fb82 	bl	8027cf8 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 80265f4:	4603      	mov	r3, r0
 80265f6:	461a      	mov	r2, r3
 80265f8:	4629      	mov	r1, r5
 80265fa:	4620      	mov	r0, r4
 80265fc:	f7ff ffbd 	bl	802657a <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8026600:	687b      	ldr	r3, [r7, #4]
 8026602:	f103 0218 	add.w	r2, r3, #24
 8026606:	687b      	ldr	r3, [r7, #4]
 8026608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802660a:	3304      	adds	r3, #4
 802660c:	4619      	mov	r1, r3
 802660e:	4610      	mov	r0, r2
 8026610:	f001 fbe3 	bl	8027dda <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8026614:	687b      	ldr	r3, [r7, #4]
 8026616:	69da      	ldr	r2, [r3, #28]
 8026618:	687b      	ldr	r3, [r7, #4]
 802661a:	619a      	str	r2, [r3, #24]
      }
 802661c:	bf00      	nop
 802661e:	3708      	adds	r7, #8
 8026620:	46bd      	mov	sp, r7
 8026622:	bdb0      	pop	{r4, r5, r7, pc}
 8026624:	0804109c 	.word	0x0804109c

08026628 <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8026628:	b580      	push	{r7, lr}
 802662a:	b082      	sub	sp, #8
 802662c:	af00      	add	r7, sp, #0
 802662e:	6078      	str	r0, [r7, #4]
 8026630:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8026632:	683b      	ldr	r3, [r7, #0]
 8026634:	3308      	adds	r3, #8
 8026636:	4619      	mov	r1, r3
 8026638:	6878      	ldr	r0, [r7, #4]
 802663a:	f001 fbfa 	bl	8027e32 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 802663e:	6878      	ldr	r0, [r7, #4]
 8026640:	3708      	adds	r7, #8
 8026642:	46bd      	mov	sp, r7
 8026644:	bd80      	pop	{r7, pc}

08026646 <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8026646:	b480      	push	{r7}
 8026648:	b083      	sub	sp, #12
 802664a:	af00      	add	r7, sp, #0
 802664c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 802664e:	687b      	ldr	r3, [r7, #4]
 8026650:	681b      	ldr	r3, [r3, #0]
 8026652:	4618      	mov	r0, r3
 8026654:	370c      	adds	r7, #12
 8026656:	46bd      	mov	sp, r7
 8026658:	f85d 7b04 	ldr.w	r7, [sp], #4
 802665c:	4770      	bx	lr

0802665e <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 802665e:	b480      	push	{r7}
 8026660:	b083      	sub	sp, #12
 8026662:	af00      	add	r7, sp, #0
 8026664:	6078      	str	r0, [r7, #4]
 8026666:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8026668:	687b      	ldr	r3, [r7, #4]
 802666a:	681a      	ldr	r2, [r3, #0]
 802666c:	683b      	ldr	r3, [r7, #0]
 802666e:	681b      	ldr	r3, [r3, #0]
 8026670:	429a      	cmp	r2, r3
 8026672:	bf0c      	ite	eq
 8026674:	2301      	moveq	r3, #1
 8026676:	2300      	movne	r3, #0
 8026678:	b2db      	uxtb	r3, r3
 802667a:	4618      	mov	r0, r3
 802667c:	370c      	adds	r7, #12
 802667e:	46bd      	mov	sp, r7
 8026680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026684:	4770      	bx	lr

08026686 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8026686:	b580      	push	{r7, lr}
 8026688:	b082      	sub	sp, #8
 802668a:	af00      	add	r7, sp, #0
 802668c:	6078      	str	r0, [r7, #4]
 802668e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8026690:	6839      	ldr	r1, [r7, #0]
 8026692:	6878      	ldr	r0, [r7, #4]
 8026694:	f001 fbe9 	bl	8027e6a <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 8026698:	bf00      	nop
 802669a:	3708      	adds	r7, #8
 802669c:	46bd      	mov	sp, r7
 802669e:	bd80      	pop	{r7, pc}

080266a0 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 80266a0:	b580      	push	{r7, lr}
 80266a2:	b082      	sub	sp, #8
 80266a4:	af00      	add	r7, sp, #0
 80266a6:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80266a8:	687b      	ldr	r3, [r7, #4]
 80266aa:	4618      	mov	r0, r3
 80266ac:	f7fe fee7 	bl	802547e <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80266b0:	4602      	mov	r2, r0
 80266b2:	687b      	ldr	r3, [r7, #4]
 80266b4:	689b      	ldr	r3, [r3, #8]
 80266b6:	4619      	mov	r1, r3
 80266b8:	4610      	mov	r0, r2
 80266ba:	f7ff ffe4 	bl	8026686 <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80266be:	687a      	ldr	r2, [r7, #4]
 80266c0:	687b      	ldr	r3, [r7, #4]
 80266c2:	68db      	ldr	r3, [r3, #12]
 80266c4:	4619      	mov	r1, r3
 80266c6:	4610      	mov	r0, r2
 80266c8:	f001 fba0 	bl	8027e0c <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80266cc:	687b      	ldr	r3, [r7, #4]
 80266ce:	f103 0208 	add.w	r2, r3, #8
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	695b      	ldr	r3, [r3, #20]
 80266d6:	3304      	adds	r3, #4
 80266d8:	4619      	mov	r1, r3
 80266da:	4610      	mov	r0, r2
 80266dc:	f001 fb7d 	bl	8027dda <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	68da      	ldr	r2, [r3, #12]
 80266e4:	687b      	ldr	r3, [r7, #4]
 80266e6:	609a      	str	r2, [r3, #8]
    }
 80266e8:	bf00      	nop
 80266ea:	3708      	adds	r7, #8
 80266ec:	46bd      	mov	sp, r7
 80266ee:	bd80      	pop	{r7, pc}

080266f0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 80266f0:	b480      	push	{r7}
 80266f2:	b083      	sub	sp, #12
 80266f4:	af00      	add	r7, sp, #0
 80266f6:	6078      	str	r0, [r7, #4]
 80266f8:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80266fa:	683b      	ldr	r3, [r7, #0]
 80266fc:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80266fe:	687b      	ldr	r3, [r7, #4]
 8026700:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8026702:	683b      	ldr	r3, [r7, #0]
 8026704:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8026706:	687b      	ldr	r3, [r7, #4]
 8026708:	605a      	str	r2, [r3, #4]
 802670a:	683b      	ldr	r3, [r7, #0]
 802670c:	689a      	ldr	r2, [r3, #8]
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	609a      	str	r2, [r3, #8]
 8026712:	683b      	ldr	r3, [r7, #0]
 8026714:	68da      	ldr	r2, [r3, #12]
 8026716:	687b      	ldr	r3, [r7, #4]
 8026718:	60da      	str	r2, [r3, #12]
 802671a:	687b      	ldr	r3, [r7, #4]
 802671c:	4618      	mov	r0, r3
 802671e:	370c      	adds	r7, #12
 8026720:	46bd      	mov	sp, r7
 8026722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026726:	4770      	bx	lr

08026728 <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8026728:	b580      	push	{r7, lr}
 802672a:	b082      	sub	sp, #8
 802672c:	af00      	add	r7, sp, #0
 802672e:	6078      	str	r0, [r7, #4]
 8026730:	6878      	ldr	r0, [r7, #4]
 8026732:	f001 fba5 	bl	8027e80 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8026736:	687b      	ldr	r3, [r7, #4]
 8026738:	4618      	mov	r0, r3
 802673a:	3708      	adds	r7, #8
 802673c:	46bd      	mov	sp, r7
 802673e:	bd80      	pop	{r7, pc}

08026740 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8026740:	b580      	push	{r7, lr}
 8026742:	b082      	sub	sp, #8
 8026744:	af00      	add	r7, sp, #0
 8026746:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8026748:	687b      	ldr	r3, [r7, #4]
 802674a:	2200      	movs	r2, #0
 802674c:	601a      	str	r2, [r3, #0]
 802674e:	687b      	ldr	r3, [r7, #4]
 8026750:	2200      	movs	r2, #0
 8026752:	605a      	str	r2, [r3, #4]
 8026754:	687b      	ldr	r3, [r7, #4]
 8026756:	3308      	adds	r3, #8
 8026758:	4618      	mov	r0, r3
 802675a:	f001 fb9c 	bl	8027e96 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 802675e:	687b      	ldr	r3, [r7, #4]
 8026760:	3318      	adds	r3, #24
 8026762:	4618      	mov	r0, r3
 8026764:	f001 fb97 	bl	8027e96 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8026768:	687b      	ldr	r3, [r7, #4]
 802676a:	4618      	mov	r0, r3
 802676c:	3708      	adds	r7, #8
 802676e:	46bd      	mov	sp, r7
 8026770:	bd80      	pop	{r7, pc}

08026772 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026772:	b480      	push	{r7}
 8026774:	b083      	sub	sp, #12
 8026776:	af00      	add	r7, sp, #0
 8026778:	6078      	str	r0, [r7, #4]
 802677a:	687b      	ldr	r3, [r7, #4]
 802677c:	4618      	mov	r0, r3
 802677e:	370c      	adds	r7, #12
 8026780:	46bd      	mov	sp, r7
 8026782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026786:	4770      	bx	lr

08026788 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8026788:	b590      	push	{r4, r7, lr}
 802678a:	b085      	sub	sp, #20
 802678c:	af00      	add	r7, sp, #0
 802678e:	6078      	str	r0, [r7, #4]
 8026790:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026792:	f107 030c 	add.w	r3, r7, #12
 8026796:	6879      	ldr	r1, [r7, #4]
 8026798:	4618      	mov	r0, r3
 802679a:	f000 f82c 	bl	80267f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 802679e:	f107 030c 	add.w	r3, r7, #12
 80267a2:	6839      	ldr	r1, [r7, #0]
 80267a4:	4618      	mov	r0, r3
 80267a6:	f001 fb8d 	bl	8027ec4 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 80267aa:	4604      	mov	r4, r0
 80267ac:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80267ae:	f107 030c 	add.w	r3, r7, #12
 80267b2:	4618      	mov	r0, r3
 80267b4:	f000 f830 	bl	8026818 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80267b8:	4623      	mov	r3, r4
      }
 80267ba:	4618      	mov	r0, r3
 80267bc:	3714      	adds	r7, #20
 80267be:	46bd      	mov	sp, r7
 80267c0:	bd90      	pop	{r4, r7, pc}

080267c2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 80267c2:	b580      	push	{r7, lr}
 80267c4:	b086      	sub	sp, #24
 80267c6:	af00      	add	r7, sp, #0
 80267c8:	60f8      	str	r0, [r7, #12]
 80267ca:	60b9      	str	r1, [r7, #8]
 80267cc:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80267ce:	68bb      	ldr	r3, [r7, #8]
 80267d0:	617b      	str	r3, [r7, #20]
 80267d2:	697a      	ldr	r2, [r7, #20]
 80267d4:	687b      	ldr	r3, [r7, #4]
 80267d6:	429a      	cmp	r2, r3
 80267d8:	d209      	bcs.n	80267ee <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 80267da:	68f8      	ldr	r0, [r7, #12]
 80267dc:	f7ff fe5a 	bl	8026494 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 80267e0:	4602      	mov	r2, r0
 80267e2:	697b      	ldr	r3, [r7, #20]
 80267e4:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80267e6:	697b      	ldr	r3, [r7, #20]
 80267e8:	3304      	adds	r3, #4
 80267ea:	617b      	str	r3, [r7, #20]
 80267ec:	e7f1      	b.n	80267d2 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 80267ee:	bf00      	nop
 80267f0:	3718      	adds	r7, #24
 80267f2:	46bd      	mov	sp, r7
 80267f4:	bd80      	pop	{r7, pc}

080267f6 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80267f6:	b580      	push	{r7, lr}
 80267f8:	b082      	sub	sp, #8
 80267fa:	af00      	add	r7, sp, #0
 80267fc:	6078      	str	r0, [r7, #4]
 80267fe:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8026800:	6838      	ldr	r0, [r7, #0]
 8026802:	f001 f952 	bl	8027aaa <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8026806:	4603      	mov	r3, r0
 8026808:	4619      	mov	r1, r3
 802680a:	6878      	ldr	r0, [r7, #4]
 802680c:	f001 fb69 	bl	8027ee2 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 8026810:	6878      	ldr	r0, [r7, #4]
 8026812:	3708      	adds	r7, #8
 8026814:	46bd      	mov	sp, r7
 8026816:	bd80      	pop	{r7, pc}

08026818 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8026818:	b580      	push	{r7, lr}
 802681a:	b082      	sub	sp, #8
 802681c:	af00      	add	r7, sp, #0
 802681e:	6078      	str	r0, [r7, #4]
 8026820:	6878      	ldr	r0, [r7, #4]
 8026822:	f001 fb6b 	bl	8027efc <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8026826:	687b      	ldr	r3, [r7, #4]
 8026828:	4618      	mov	r0, r3
 802682a:	3708      	adds	r7, #8
 802682c:	46bd      	mov	sp, r7
 802682e:	bd80      	pop	{r7, pc}

08026830 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8026830:	b580      	push	{r7, lr}
 8026832:	b084      	sub	sp, #16
 8026834:	af00      	add	r7, sp, #0
 8026836:	60f8      	str	r0, [r7, #12]
 8026838:	60b9      	str	r1, [r7, #8]
 802683a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802683c:	687a      	ldr	r2, [r7, #4]
 802683e:	68b9      	ldr	r1, [r7, #8]
 8026840:	68f8      	ldr	r0, [r7, #12]
 8026842:	f001 fb66 	bl	8027f12 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8026846:	bf00      	nop
 8026848:	3710      	adds	r7, #16
 802684a:	46bd      	mov	sp, r7
 802684c:	bd80      	pop	{r7, pc}

0802684e <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 802684e:	b580      	push	{r7, lr}
 8026850:	b082      	sub	sp, #8
 8026852:	af00      	add	r7, sp, #0
 8026854:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8026856:	6878      	ldr	r0, [r7, #4]
 8026858:	f001 fb73 	bl	8027f42 <_ZNSaIjEC1Ev>
 802685c:	687b      	ldr	r3, [r7, #4]
 802685e:	4618      	mov	r0, r3
 8026860:	f001 fb7b 	bl	8027f5a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 8026864:	687b      	ldr	r3, [r7, #4]
 8026866:	4618      	mov	r0, r3
 8026868:	3708      	adds	r7, #8
 802686a:	46bd      	mov	sp, r7
 802686c:	bd80      	pop	{r7, pc}

0802686e <_ZNSaIjED1Ev>:
 802686e:	b580      	push	{r7, lr}
 8026870:	b082      	sub	sp, #8
 8026872:	af00      	add	r7, sp, #0
 8026874:	6078      	str	r0, [r7, #4]
 8026876:	6878      	ldr	r0, [r7, #4]
 8026878:	f001 fb88 	bl	8027f8c <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 802687c:	687b      	ldr	r3, [r7, #4]
 802687e:	4618      	mov	r0, r3
 8026880:	3708      	adds	r7, #8
 8026882:	46bd      	mov	sp, r7
 8026884:	bd80      	pop	{r7, pc}

08026886 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8026886:	b590      	push	{r4, r7, lr}
 8026888:	b089      	sub	sp, #36	; 0x24
 802688a:	af00      	add	r7, sp, #0
 802688c:	6078      	str	r0, [r7, #4]
 802688e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8026890:	2004      	movs	r0, #4
 8026892:	f7fa fb24 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026896:	4602      	mov	r2, r0
 8026898:	683b      	ldr	r3, [r7, #0]
 802689a:	fbb3 f3f2 	udiv	r3, r3, r2
 802689e:	3301      	adds	r3, #1
 80268a0:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80268a2:	2308      	movs	r3, #8
 80268a4:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 80268a6:	69fb      	ldr	r3, [r7, #28]
 80268a8:	3302      	adds	r3, #2
 80268aa:	613b      	str	r3, [r7, #16]
 80268ac:	f107 0210 	add.w	r2, r7, #16
 80268b0:	f107 030c 	add.w	r3, r7, #12
 80268b4:	4611      	mov	r1, r2
 80268b6:	4618      	mov	r0, r3
 80268b8:	f7fe fef5 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 80268bc:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80268be:	681a      	ldr	r2, [r3, #0]
 80268c0:	687b      	ldr	r3, [r7, #4]
 80268c2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80268c4:	687b      	ldr	r3, [r7, #4]
 80268c6:	685b      	ldr	r3, [r3, #4]
 80268c8:	4619      	mov	r1, r3
 80268ca:	6878      	ldr	r0, [r7, #4]
 80268cc:	f001 fb69 	bl	8027fa2 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 80268d0:	4602      	mov	r2, r0
 80268d2:	687b      	ldr	r3, [r7, #4]
 80268d4:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80268d6:	687b      	ldr	r3, [r7, #4]
 80268d8:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80268da:	687b      	ldr	r3, [r7, #4]
 80268dc:	6859      	ldr	r1, [r3, #4]
 80268de:	69fb      	ldr	r3, [r7, #28]
 80268e0:	1acb      	subs	r3, r1, r3
 80268e2:	085b      	lsrs	r3, r3, #1
 80268e4:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80268e6:	4413      	add	r3, r2
 80268e8:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80268ea:	69fb      	ldr	r3, [r7, #28]
 80268ec:	009b      	lsls	r3, r3, #2
 80268ee:	69ba      	ldr	r2, [r7, #24]
 80268f0:	4413      	add	r3, r2
 80268f2:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80268f4:	697a      	ldr	r2, [r7, #20]
 80268f6:	69b9      	ldr	r1, [r7, #24]
 80268f8:	6878      	ldr	r0, [r7, #4]
 80268fa:	f001 fb6f 	bl	8027fdc <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	3308      	adds	r3, #8
 8026902:	69b9      	ldr	r1, [r7, #24]
 8026904:	4618      	mov	r0, r3
 8026906:	f001 fa68 	bl	8027dda <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 802690a:	687b      	ldr	r3, [r7, #4]
 802690c:	f103 0218 	add.w	r2, r3, #24
 8026910:	697b      	ldr	r3, [r7, #20]
 8026912:	3b04      	subs	r3, #4
 8026914:	4619      	mov	r1, r3
 8026916:	4610      	mov	r0, r2
 8026918:	f001 fa5f 	bl	8027dda <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 802691c:	687b      	ldr	r3, [r7, #4]
 802691e:	68da      	ldr	r2, [r3, #12]
 8026920:	687b      	ldr	r3, [r7, #4]
 8026922:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8026924:	687b      	ldr	r3, [r7, #4]
 8026926:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8026928:	2004      	movs	r0, #4
 802692a:	f7fa fad8 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802692e:	4602      	mov	r2, r0
 8026930:	683b      	ldr	r3, [r7, #0]
 8026932:	fbb3 f1f2 	udiv	r1, r3, r2
 8026936:	fb01 f202 	mul.w	r2, r1, r2
 802693a:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 802693c:	009b      	lsls	r3, r3, #2
 802693e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8026940:	687b      	ldr	r3, [r7, #4]
 8026942:	619a      	str	r2, [r3, #24]
    }
 8026944:	bf00      	nop
 8026946:	3724      	adds	r7, #36	; 0x24
 8026948:	46bd      	mov	sp, r7
 802694a:	bd90      	pop	{r4, r7, pc}

0802694c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 802694c:	b580      	push	{r7, lr}
 802694e:	b086      	sub	sp, #24
 8026950:	af00      	add	r7, sp, #0
 8026952:	60f8      	str	r0, [r7, #12]
 8026954:	60b9      	str	r1, [r7, #8]
 8026956:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8026958:	68bb      	ldr	r3, [r7, #8]
 802695a:	617b      	str	r3, [r7, #20]
 802695c:	697a      	ldr	r2, [r7, #20]
 802695e:	687b      	ldr	r3, [r7, #4]
 8026960:	429a      	cmp	r2, r3
 8026962:	d209      	bcs.n	8026978 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 8026964:	697b      	ldr	r3, [r7, #20]
 8026966:	681b      	ldr	r3, [r3, #0]
 8026968:	4619      	mov	r1, r3
 802696a:	68f8      	ldr	r0, [r7, #12]
 802696c:	f001 fa4e 	bl	8027e0c <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8026970:	697b      	ldr	r3, [r7, #20]
 8026972:	3304      	adds	r3, #4
 8026974:	617b      	str	r3, [r7, #20]
 8026976:	e7f1      	b.n	802695c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 8026978:	bf00      	nop
 802697a:	3718      	adds	r7, #24
 802697c:	46bd      	mov	sp, r7
 802697e:	bd80      	pop	{r7, pc}

08026980 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8026980:	b580      	push	{r7, lr}
 8026982:	b086      	sub	sp, #24
 8026984:	af00      	add	r7, sp, #0
 8026986:	60f8      	str	r0, [r7, #12]
 8026988:	60b9      	str	r1, [r7, #8]
 802698a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802698c:	f107 0314 	add.w	r3, r7, #20
 8026990:	68f9      	ldr	r1, [r7, #12]
 8026992:	4618      	mov	r0, r3
 8026994:	f001 fb3c 	bl	8028010 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8026998:	f107 0314 	add.w	r3, r7, #20
 802699c:	687a      	ldr	r2, [r7, #4]
 802699e:	68b9      	ldr	r1, [r7, #8]
 80269a0:	4618      	mov	r0, r3
 80269a2:	f001 fb52 	bl	802804a <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80269a6:	f107 0314 	add.w	r3, r7, #20
 80269aa:	4618      	mov	r0, r3
 80269ac:	f001 fb41 	bl	8028032 <_ZNSaIPjED1Ev>
      }
 80269b0:	bf00      	nop
 80269b2:	3718      	adds	r7, #24
 80269b4:	46bd      	mov	sp, r7
 80269b6:	bd80      	pop	{r7, pc}

080269b8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 80269b8:	b580      	push	{r7, lr}
 80269ba:	b082      	sub	sp, #8
 80269bc:	af00      	add	r7, sp, #0
 80269be:	6078      	str	r0, [r7, #4]
 80269c0:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 80269c2:	6839      	ldr	r1, [r7, #0]
 80269c4:	6878      	ldr	r0, [r7, #4]
 80269c6:	f001 fb4f 	bl	8028068 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 80269ca:	bf00      	nop
 80269cc:	3708      	adds	r7, #8
 80269ce:	46bd      	mov	sp, r7
 80269d0:	bd80      	pop	{r7, pc}

080269d2 <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80269d2:	b580      	push	{r7, lr}
 80269d4:	b086      	sub	sp, #24
 80269d6:	af00      	add	r7, sp, #0
 80269d8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 80269da:	f107 0308 	add.w	r3, r7, #8
 80269de:	6879      	ldr	r1, [r7, #4]
 80269e0:	4618      	mov	r0, r3
 80269e2:	f7fd fc28 	bl	8024236 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 80269e6:	f107 0308 	add.w	r3, r7, #8
 80269ea:	4619      	mov	r1, r3
 80269ec:	6878      	ldr	r0, [r7, #4]
 80269ee:	f001 fb6e 	bl	80280ce <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 80269f2:	bf00      	nop
 80269f4:	3718      	adds	r7, #24
 80269f6:	46bd      	mov	sp, r7
 80269f8:	bd80      	pop	{r7, pc}

080269fa <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 80269fa:	b580      	push	{r7, lr}
 80269fc:	b082      	sub	sp, #8
 80269fe:	af00      	add	r7, sp, #0
 8026a00:	6078      	str	r0, [r7, #4]
 8026a02:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8026a04:	461a      	mov	r2, r3
 8026a06:	6839      	ldr	r1, [r7, #0]
 8026a08:	6878      	ldr	r0, [r7, #4]
 8026a0a:	f001 fb93 	bl	8028134 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8026a0e:	bf00      	nop
 8026a10:	3708      	adds	r7, #8
 8026a12:	46bd      	mov	sp, r7
 8026a14:	bd80      	pop	{r7, pc}

08026a16 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8026a16:	b580      	push	{r7, lr}
 8026a18:	b082      	sub	sp, #8
 8026a1a:	af00      	add	r7, sp, #0
 8026a1c:	6078      	str	r0, [r7, #4]
 8026a1e:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8026a20:	6839      	ldr	r1, [r7, #0]
 8026a22:	6878      	ldr	r0, [r7, #4]
 8026a24:	f001 fb93 	bl	802814e <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8026a28:	bf00      	nop
 8026a2a:	3708      	adds	r7, #8
 8026a2c:	46bd      	mov	sp, r7
 8026a2e:	bd80      	pop	{r7, pc}

08026a30 <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8026a30:	b580      	push	{r7, lr}
 8026a32:	b086      	sub	sp, #24
 8026a34:	af00      	add	r7, sp, #0
 8026a36:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8026a38:	f107 0308 	add.w	r3, r7, #8
 8026a3c:	6879      	ldr	r1, [r7, #4]
 8026a3e:	4618      	mov	r0, r3
 8026a40:	f7fd fc9c 	bl	802437c <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8026a44:	f107 0308 	add.w	r3, r7, #8
 8026a48:	4619      	mov	r1, r3
 8026a4a:	6878      	ldr	r0, [r7, #4]
 8026a4c:	f001 fbb2 	bl	80281b4 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8026a50:	bf00      	nop
 8026a52:	3718      	adds	r7, #24
 8026a54:	46bd      	mov	sp, r7
 8026a56:	bd80      	pop	{r7, pc}

08026a58 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8026a58:	b580      	push	{r7, lr}
 8026a5a:	b082      	sub	sp, #8
 8026a5c:	af00      	add	r7, sp, #0
 8026a5e:	6078      	str	r0, [r7, #4]
 8026a60:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8026a62:	461a      	mov	r2, r3
 8026a64:	6839      	ldr	r1, [r7, #0]
 8026a66:	6878      	ldr	r0, [r7, #4]
 8026a68:	f001 fbd7 	bl	802821a <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8026a6c:	bf00      	nop
 8026a6e:	3708      	adds	r7, #8
 8026a70:	46bd      	mov	sp, r7
 8026a72:	bd80      	pop	{r7, pc}

08026a74 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8026a74:	b580      	push	{r7, lr}
 8026a76:	b082      	sub	sp, #8
 8026a78:	af00      	add	r7, sp, #0
 8026a7a:	6078      	str	r0, [r7, #4]
 8026a7c:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8026a7e:	6839      	ldr	r1, [r7, #0]
 8026a80:	6878      	ldr	r0, [r7, #4]
 8026a82:	f001 fbd7 	bl	8028234 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8026a86:	bf00      	nop
 8026a88:	3708      	adds	r7, #8
 8026a8a:	46bd      	mov	sp, r7
 8026a8c:	bd80      	pop	{r7, pc}

08026a8e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8026a8e:	b580      	push	{r7, lr}
 8026a90:	b086      	sub	sp, #24
 8026a92:	af00      	add	r7, sp, #0
 8026a94:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8026a96:	f107 0308 	add.w	r3, r7, #8
 8026a9a:	6879      	ldr	r1, [r7, #4]
 8026a9c:	4618      	mov	r0, r3
 8026a9e:	f7fe fc4a 	bl	8025336 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8026aa2:	f107 0308 	add.w	r3, r7, #8
 8026aa6:	4619      	mov	r1, r3
 8026aa8:	6878      	ldr	r0, [r7, #4]
 8026aaa:	f7ff fc73 	bl	8026394 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8026aae:	bf00      	nop
 8026ab0:	3718      	adds	r7, #24
 8026ab2:	46bd      	mov	sp, r7
 8026ab4:	bd80      	pop	{r7, pc}

08026ab6 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8026ab6:	b580      	push	{r7, lr}
 8026ab8:	b082      	sub	sp, #8
 8026aba:	af00      	add	r7, sp, #0
 8026abc:	6078      	str	r0, [r7, #4]
 8026abe:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8026ac0:	461a      	mov	r2, r3
 8026ac2:	6839      	ldr	r1, [r7, #0]
 8026ac4:	6878      	ldr	r0, [r7, #4]
 8026ac6:	f001 fbe8 	bl	802829a <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
    }
 8026aca:	bf00      	nop
 8026acc:	3708      	adds	r7, #8
 8026ace:	46bd      	mov	sp, r7
 8026ad0:	bd80      	pop	{r7, pc}

08026ad2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8026ad2:	b580      	push	{r7, lr}
 8026ad4:	b082      	sub	sp, #8
 8026ad6:	af00      	add	r7, sp, #0
 8026ad8:	6078      	str	r0, [r7, #4]
 8026ada:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8026adc:	6839      	ldr	r1, [r7, #0]
 8026ade:	6878      	ldr	r0, [r7, #4]
 8026ae0:	f001 fbe8 	bl	80282b4 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8026ae4:	bf00      	nop
 8026ae6:	3708      	adds	r7, #8
 8026ae8:	46bd      	mov	sp, r7
 8026aea:	bd80      	pop	{r7, pc}

08026aec <_ZNSt5dequeIjSaIjEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8026aec:	b580      	push	{r7, lr}
 8026aee:	b086      	sub	sp, #24
 8026af0:	af00      	add	r7, sp, #0
 8026af2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8026af4:	f107 0308 	add.w	r3, r7, #8
 8026af8:	6879      	ldr	r1, [r7, #4]
 8026afa:	4618      	mov	r0, r3
 8026afc:	f7fe fca1 	bl	8025442 <_ZNSt5dequeIjSaIjEE5beginEv>
 8026b00:	f107 0308 	add.w	r3, r7, #8
 8026b04:	4619      	mov	r1, r3
 8026b06:	6878      	ldr	r0, [r7, #4]
 8026b08:	f001 fc07 	bl	802831a <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>
 8026b0c:	bf00      	nop
 8026b0e:	3718      	adds	r7, #24
 8026b10:	46bd      	mov	sp, r7
 8026b12:	bd80      	pop	{r7, pc}

08026b14 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8026b14:	b580      	push	{r7, lr}
 8026b16:	b082      	sub	sp, #8
 8026b18:	af00      	add	r7, sp, #0
 8026b1a:	6078      	str	r0, [r7, #4]
 8026b1c:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8026b1e:	461a      	mov	r2, r3
 8026b20:	6839      	ldr	r1, [r7, #0]
 8026b22:	6878      	ldr	r0, [r7, #4]
 8026b24:	f001 fc2c 	bl	8028380 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8026b28:	bf00      	nop
 8026b2a:	3708      	adds	r7, #8
 8026b2c:	46bd      	mov	sp, r7
 8026b2e:	bd80      	pop	{r7, pc}

08026b30 <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026b30:	b480      	push	{r7}
 8026b32:	b083      	sub	sp, #12
 8026b34:	af00      	add	r7, sp, #0
 8026b36:	6078      	str	r0, [r7, #4]
 8026b38:	687b      	ldr	r3, [r7, #4]
 8026b3a:	4618      	mov	r0, r3
 8026b3c:	370c      	adds	r7, #12
 8026b3e:	46bd      	mov	sp, r7
 8026b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b44:	4770      	bx	lr

08026b46 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8026b46:	b480      	push	{r7}
 8026b48:	b083      	sub	sp, #12
 8026b4a:	af00      	add	r7, sp, #0
 8026b4c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8026b4e:	687b      	ldr	r3, [r7, #4]
 8026b50:	2200      	movs	r2, #0
 8026b52:	601a      	str	r2, [r3, #0]
 8026b54:	687b      	ldr	r3, [r7, #4]
 8026b56:	2200      	movs	r2, #0
 8026b58:	605a      	str	r2, [r3, #4]
 8026b5a:	687b      	ldr	r3, [r7, #4]
 8026b5c:	2200      	movs	r2, #0
 8026b5e:	609a      	str	r2, [r3, #8]
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	2200      	movs	r2, #0
 8026b64:	60da      	str	r2, [r3, #12]
 8026b66:	687b      	ldr	r3, [r7, #4]
 8026b68:	4618      	mov	r0, r3
 8026b6a:	370c      	adds	r7, #12
 8026b6c:	46bd      	mov	sp, r7
 8026b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b72:	4770      	bx	lr

08026b74 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8026b74:	b580      	push	{r7, lr}
 8026b76:	b082      	sub	sp, #8
 8026b78:	af00      	add	r7, sp, #0
 8026b7a:	6078      	str	r0, [r7, #4]
 8026b7c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026b7e:	2200      	movs	r2, #0
 8026b80:	6839      	ldr	r1, [r7, #0]
 8026b82:	6878      	ldr	r0, [r7, #4]
 8026b84:	f001 fc09 	bl	802839a <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 8026b88:	4603      	mov	r3, r0
 8026b8a:	4618      	mov	r0, r3
 8026b8c:	3708      	adds	r7, #8
 8026b8e:	46bd      	mov	sp, r7
 8026b90:	bd80      	pop	{r7, pc}

08026b92 <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8026b92:	b580      	push	{r7, lr}
 8026b94:	b084      	sub	sp, #16
 8026b96:	af00      	add	r7, sp, #0
 8026b98:	60f8      	str	r0, [r7, #12]
 8026b9a:	60b9      	str	r1, [r7, #8]
 8026b9c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8026b9e:	687a      	ldr	r2, [r7, #4]
 8026ba0:	68b9      	ldr	r1, [r7, #8]
 8026ba2:	68f8      	ldr	r0, [r7, #12]
 8026ba4:	f001 fc17 	bl	80283d6 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 8026ba8:	bf00      	nop
 8026baa:	3710      	adds	r7, #16
 8026bac:	46bd      	mov	sp, r7
 8026bae:	bd80      	pop	{r7, pc}

08026bb0 <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8026bb0:	b580      	push	{r7, lr}
 8026bb2:	b082      	sub	sp, #8
 8026bb4:	af00      	add	r7, sp, #0
 8026bb6:	6078      	str	r0, [r7, #4]
 8026bb8:	6039      	str	r1, [r7, #0]
 8026bba:	6878      	ldr	r0, [r7, #4]
 8026bbc:	f001 fc1e 	bl	80283fc <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 8026bc0:	687b      	ldr	r3, [r7, #4]
 8026bc2:	4618      	mov	r0, r3
 8026bc4:	3708      	adds	r7, #8
 8026bc6:	46bd      	mov	sp, r7
 8026bc8:	bd80      	pop	{r7, pc}

08026bca <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026bca:	b480      	push	{r7}
 8026bcc:	b083      	sub	sp, #12
 8026bce:	af00      	add	r7, sp, #0
 8026bd0:	6078      	str	r0, [r7, #4]
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	4618      	mov	r0, r3
 8026bd6:	370c      	adds	r7, #12
 8026bd8:	46bd      	mov	sp, r7
 8026bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bde:	4770      	bx	lr

08026be0 <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8026be0:	b580      	push	{r7, lr}
 8026be2:	b084      	sub	sp, #16
 8026be4:	af00      	add	r7, sp, #0
 8026be6:	60f8      	str	r0, [r7, #12]
 8026be8:	60b9      	str	r1, [r7, #8]
 8026bea:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026bec:	687b      	ldr	r3, [r7, #4]
 8026bee:	009b      	lsls	r3, r3, #2
 8026bf0:	4619      	mov	r1, r3
 8026bf2:	68b8      	ldr	r0, [r7, #8]
 8026bf4:	f018 fbc2 	bl	803f37c <_ZdlPvj>
      }
 8026bf8:	bf00      	nop
 8026bfa:	3710      	adds	r7, #16
 8026bfc:	46bd      	mov	sp, r7
 8026bfe:	bd80      	pop	{r7, pc}

08026c00 <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8026c00:	b580      	push	{r7, lr}
 8026c02:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8026c04:	2014      	movs	r0, #20
 8026c06:	f7fa f96a 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026c0a:	4603      	mov	r3, r0
 8026c0c:	4618      	mov	r0, r3
 8026c0e:	bd80      	pop	{r7, pc}

08026c10 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8026c10:	b580      	push	{r7, lr}
 8026c12:	b084      	sub	sp, #16
 8026c14:	af00      	add	r7, sp, #0
 8026c16:	60f8      	str	r0, [r7, #12]
 8026c18:	60b9      	str	r1, [r7, #8]
 8026c1a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8026c1c:	68b9      	ldr	r1, [r7, #8]
 8026c1e:	68f8      	ldr	r0, [r7, #12]
 8026c20:	f001 fbf7 	bl	8028412 <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 8026c24:	bf00      	nop
 8026c26:	3710      	adds	r7, #16
 8026c28:	46bd      	mov	sp, r7
 8026c2a:	bd80      	pop	{r7, pc}

08026c2c <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8026c2c:	b580      	push	{r7, lr}
 8026c2e:	b082      	sub	sp, #8
 8026c30:	af00      	add	r7, sp, #0
 8026c32:	6078      	str	r0, [r7, #4]
 8026c34:	6878      	ldr	r0, [r7, #4]
 8026c36:	f001 fbf9 	bl	802842c <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 8026c3a:	687b      	ldr	r3, [r7, #4]
 8026c3c:	4618      	mov	r0, r3
 8026c3e:	3708      	adds	r7, #8
 8026c40:	46bd      	mov	sp, r7
 8026c42:	bd80      	pop	{r7, pc}

08026c44 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8026c44:	b580      	push	{r7, lr}
 8026c46:	b082      	sub	sp, #8
 8026c48:	af00      	add	r7, sp, #0
 8026c4a:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8026c4c:	687b      	ldr	r3, [r7, #4]
 8026c4e:	2200      	movs	r2, #0
 8026c50:	601a      	str	r2, [r3, #0]
 8026c52:	687b      	ldr	r3, [r7, #4]
 8026c54:	2200      	movs	r2, #0
 8026c56:	605a      	str	r2, [r3, #4]
 8026c58:	687b      	ldr	r3, [r7, #4]
 8026c5a:	3308      	adds	r3, #8
 8026c5c:	4618      	mov	r0, r3
 8026c5e:	f001 fbf0 	bl	8028442 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 8026c62:	687b      	ldr	r3, [r7, #4]
 8026c64:	3318      	adds	r3, #24
 8026c66:	4618      	mov	r0, r3
 8026c68:	f001 fbeb 	bl	8028442 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 8026c6c:	687b      	ldr	r3, [r7, #4]
 8026c6e:	4618      	mov	r0, r3
 8026c70:	3708      	adds	r7, #8
 8026c72:	46bd      	mov	sp, r7
 8026c74:	bd80      	pop	{r7, pc}

08026c76 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026c76:	b480      	push	{r7}
 8026c78:	b083      	sub	sp, #12
 8026c7a:	af00      	add	r7, sp, #0
 8026c7c:	6078      	str	r0, [r7, #4]
 8026c7e:	687b      	ldr	r3, [r7, #4]
 8026c80:	4618      	mov	r0, r3
 8026c82:	370c      	adds	r7, #12
 8026c84:	46bd      	mov	sp, r7
 8026c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c8a:	4770      	bx	lr

08026c8c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8026c8c:	b590      	push	{r4, r7, lr}
 8026c8e:	b085      	sub	sp, #20
 8026c90:	af00      	add	r7, sp, #0
 8026c92:	6078      	str	r0, [r7, #4]
 8026c94:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026c96:	f107 030c 	add.w	r3, r7, #12
 8026c9a:	6879      	ldr	r1, [r7, #4]
 8026c9c:	4618      	mov	r0, r3
 8026c9e:	f000 f858 	bl	8026d52 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8026ca2:	f107 030c 	add.w	r3, r7, #12
 8026ca6:	6839      	ldr	r1, [r7, #0]
 8026ca8:	4618      	mov	r0, r3
 8026caa:	f001 fbe1 	bl	8028470 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 8026cae:	4604      	mov	r4, r0
 8026cb0:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8026cb2:	f107 030c 	add.w	r3, r7, #12
 8026cb6:	4618      	mov	r0, r3
 8026cb8:	f000 f85c 	bl	8026d74 <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8026cbc:	4623      	mov	r3, r4
      }
 8026cbe:	4618      	mov	r0, r3
 8026cc0:	3714      	adds	r7, #20
 8026cc2:	46bd      	mov	sp, r7
 8026cc4:	bd90      	pop	{r4, r7, pc}

08026cc6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8026cc6:	b580      	push	{r7, lr}
 8026cc8:	b086      	sub	sp, #24
 8026cca:	af00      	add	r7, sp, #0
 8026ccc:	60f8      	str	r0, [r7, #12]
 8026cce:	60b9      	str	r1, [r7, #8]
 8026cd0:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8026cd2:	68bb      	ldr	r3, [r7, #8]
 8026cd4:	617b      	str	r3, [r7, #20]
 8026cd6:	697a      	ldr	r2, [r7, #20]
 8026cd8:	687b      	ldr	r3, [r7, #4]
 8026cda:	429a      	cmp	r2, r3
 8026cdc:	d209      	bcs.n	8026cf2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8026cde:	68f8      	ldr	r0, [r7, #12]
 8026ce0:	f000 f9a3 	bl	802702a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8026ce4:	4602      	mov	r2, r0
 8026ce6:	697b      	ldr	r3, [r7, #20]
 8026ce8:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8026cea:	697b      	ldr	r3, [r7, #20]
 8026cec:	3304      	adds	r3, #4
 8026cee:	617b      	str	r3, [r7, #20]
 8026cf0:	e7f1      	b.n	8026cd6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8026cf2:	bf00      	nop
 8026cf4:	3718      	adds	r7, #24
 8026cf6:	46bd      	mov	sp, r7
 8026cf8:	bd80      	pop	{r7, pc}

08026cfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8026cfa:	b590      	push	{r4, r7, lr}
 8026cfc:	b083      	sub	sp, #12
 8026cfe:	af00      	add	r7, sp, #0
 8026d00:	6078      	str	r0, [r7, #4]
 8026d02:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8026d04:	687b      	ldr	r3, [r7, #4]
 8026d06:	683a      	ldr	r2, [r7, #0]
 8026d08:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8026d0a:	683b      	ldr	r3, [r7, #0]
 8026d0c:	681a      	ldr	r2, [r3, #0]
 8026d0e:	687b      	ldr	r3, [r7, #4]
 8026d10:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8026d12:	687b      	ldr	r3, [r7, #4]
 8026d14:	685c      	ldr	r4, [r3, #4]
 8026d16:	f000 fade 	bl	80272d6 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8026d1a:	4603      	mov	r3, r0
 8026d1c:	011b      	lsls	r3, r3, #4
 8026d1e:	18e2      	adds	r2, r4, r3
 8026d20:	687b      	ldr	r3, [r7, #4]
 8026d22:	609a      	str	r2, [r3, #8]
      }
 8026d24:	bf00      	nop
 8026d26:	370c      	adds	r7, #12
 8026d28:	46bd      	mov	sp, r7
 8026d2a:	bd90      	pop	{r4, r7, pc}

08026d2c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8026d2c:	b590      	push	{r4, r7, lr}
 8026d2e:	b083      	sub	sp, #12
 8026d30:	af00      	add	r7, sp, #0
 8026d32:	6078      	str	r0, [r7, #4]
 8026d34:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8026d36:	687c      	ldr	r4, [r7, #4]
 8026d38:	2010      	movs	r0, #16
 8026d3a:	f7fa f8d0 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026d3e:	4603      	mov	r3, r0
 8026d40:	461a      	mov	r2, r3
 8026d42:	6839      	ldr	r1, [r7, #0]
 8026d44:	4620      	mov	r0, r4
 8026d46:	f001 fba2 	bl	802848e <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 8026d4a:	bf00      	nop
 8026d4c:	370c      	adds	r7, #12
 8026d4e:	46bd      	mov	sp, r7
 8026d50:	bd90      	pop	{r4, r7, pc}

08026d52 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8026d52:	b580      	push	{r7, lr}
 8026d54:	b082      	sub	sp, #8
 8026d56:	af00      	add	r7, sp, #0
 8026d58:	6078      	str	r0, [r7, #4]
 8026d5a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8026d5c:	6838      	ldr	r0, [r7, #0]
 8026d5e:	f001 fba5 	bl	80284ac <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8026d62:	4603      	mov	r3, r0
 8026d64:	4619      	mov	r1, r3
 8026d66:	6878      	ldr	r0, [r7, #4]
 8026d68:	f001 fbab 	bl	80284c2 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 8026d6c:	6878      	ldr	r0, [r7, #4]
 8026d6e:	3708      	adds	r7, #8
 8026d70:	46bd      	mov	sp, r7
 8026d72:	bd80      	pop	{r7, pc}

08026d74 <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8026d74:	b580      	push	{r7, lr}
 8026d76:	b082      	sub	sp, #8
 8026d78:	af00      	add	r7, sp, #0
 8026d7a:	6078      	str	r0, [r7, #4]
 8026d7c:	6878      	ldr	r0, [r7, #4]
 8026d7e:	f001 fbad 	bl	80284dc <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	4618      	mov	r0, r3
 8026d86:	3708      	adds	r7, #8
 8026d88:	46bd      	mov	sp, r7
 8026d8a:	bd80      	pop	{r7, pc}

08026d8c <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8026d8c:	b580      	push	{r7, lr}
 8026d8e:	b084      	sub	sp, #16
 8026d90:	af00      	add	r7, sp, #0
 8026d92:	60f8      	str	r0, [r7, #12]
 8026d94:	60b9      	str	r1, [r7, #8]
 8026d96:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8026d98:	687a      	ldr	r2, [r7, #4]
 8026d9a:	68b9      	ldr	r1, [r7, #8]
 8026d9c:	68f8      	ldr	r0, [r7, #12]
 8026d9e:	f001 fba8 	bl	80284f2 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 8026da2:	bf00      	nop
 8026da4:	3710      	adds	r7, #16
 8026da6:	46bd      	mov	sp, r7
 8026da8:	bd80      	pop	{r7, pc}

08026daa <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8026daa:	b580      	push	{r7, lr}
 8026dac:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8026dae:	2010      	movs	r0, #16
 8026db0:	f7fa f895 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8026db4:	4603      	mov	r3, r0
 8026db6:	4618      	mov	r0, r3
 8026db8:	bd80      	pop	{r7, pc}

08026dba <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8026dba:	b580      	push	{r7, lr}
 8026dbc:	b084      	sub	sp, #16
 8026dbe:	af00      	add	r7, sp, #0
 8026dc0:	60f8      	str	r0, [r7, #12]
 8026dc2:	60b9      	str	r1, [r7, #8]
 8026dc4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8026dc6:	68b9      	ldr	r1, [r7, #8]
 8026dc8:	68f8      	ldr	r0, [r7, #12]
 8026dca:	f001 fba2 	bl	8028512 <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 8026dce:	bf00      	nop
 8026dd0:	3710      	adds	r7, #16
 8026dd2:	46bd      	mov	sp, r7
 8026dd4:	bd80      	pop	{r7, pc}

08026dd6 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8026dd6:	b580      	push	{r7, lr}
 8026dd8:	b084      	sub	sp, #16
 8026dda:	af00      	add	r7, sp, #0
 8026ddc:	60f8      	str	r0, [r7, #12]
 8026dde:	60b9      	str	r1, [r7, #8]
 8026de0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026de2:	6879      	ldr	r1, [r7, #4]
 8026de4:	68b8      	ldr	r0, [r7, #8]
 8026de6:	f018 fac9 	bl	803f37c <_ZdlPvj>
      }
 8026dea:	bf00      	nop
 8026dec:	3710      	adds	r7, #16
 8026dee:	46bd      	mov	sp, r7
 8026df0:	bd80      	pop	{r7, pc}

08026df2 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8026df2:	b480      	push	{r7}
 8026df4:	b083      	sub	sp, #12
 8026df6:	af00      	add	r7, sp, #0
 8026df8:	6078      	str	r0, [r7, #4]
 8026dfa:	6039      	str	r1, [r7, #0]
 8026dfc:	bf00      	nop
 8026dfe:	370c      	adds	r7, #12
 8026e00:	46bd      	mov	sp, r7
 8026e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e06:	4770      	bx	lr

08026e08 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8026e08:	b590      	push	{r4, r7, lr}
 8026e0a:	b08b      	sub	sp, #44	; 0x2c
 8026e0c:	af00      	add	r7, sp, #0
 8026e0e:	60f8      	str	r0, [r7, #12]
 8026e10:	60b9      	str	r1, [r7, #8]
 8026e12:	4613      	mov	r3, r2
 8026e14:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8026e16:	68fb      	ldr	r3, [r7, #12]
 8026e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026e1a:	68fb      	ldr	r3, [r7, #12]
 8026e1c:	695b      	ldr	r3, [r3, #20]
 8026e1e:	1ad3      	subs	r3, r2, r3
 8026e20:	109b      	asrs	r3, r3, #2
 8026e22:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8026e24:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8026e26:	68bb      	ldr	r3, [r7, #8]
 8026e28:	6a3a      	ldr	r2, [r7, #32]
 8026e2a:	4413      	add	r3, r2
 8026e2c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8026e2e:	68fb      	ldr	r3, [r7, #12]
 8026e30:	685a      	ldr	r2, [r3, #4]
 8026e32:	69fb      	ldr	r3, [r7, #28]
 8026e34:	005b      	lsls	r3, r3, #1
 8026e36:	429a      	cmp	r2, r3
 8026e38:	d92d      	bls.n	8026e96 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026e3a:	68fb      	ldr	r3, [r7, #12]
 8026e3c:	681a      	ldr	r2, [r3, #0]
 8026e3e:	68fb      	ldr	r3, [r7, #12]
 8026e40:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8026e42:	69fb      	ldr	r3, [r7, #28]
 8026e44:	1acb      	subs	r3, r1, r3
 8026e46:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026e48:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026e4a:	79fb      	ldrb	r3, [r7, #7]
 8026e4c:	2b00      	cmp	r3, #0
 8026e4e:	d002      	beq.n	8026e56 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8026e50:	68bb      	ldr	r3, [r7, #8]
 8026e52:	009b      	lsls	r3, r3, #2
 8026e54:	e000      	b.n	8026e58 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8026e56:	2300      	movs	r3, #0
 8026e58:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8026e5a:	4413      	add	r3, r2
 8026e5c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8026e5e:	68fb      	ldr	r3, [r7, #12]
 8026e60:	695b      	ldr	r3, [r3, #20]
 8026e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026e64:	429a      	cmp	r2, r3
 8026e66:	d209      	bcs.n	8026e7c <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8026e68:	68fb      	ldr	r3, [r7, #12]
 8026e6a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8026e6c:	68fb      	ldr	r3, [r7, #12]
 8026e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8026e70:	3304      	adds	r3, #4
 8026e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026e74:	4619      	mov	r1, r3
 8026e76:	f001 fb59 	bl	802852c <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 8026e7a:	e048      	b.n	8026f0e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026e7c:	68fb      	ldr	r3, [r7, #12]
 8026e7e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026e80:	68fb      	ldr	r3, [r7, #12]
 8026e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026e84:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8026e86:	6a3b      	ldr	r3, [r7, #32]
 8026e88:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026e8c:	4413      	add	r3, r2
 8026e8e:	461a      	mov	r2, r3
 8026e90:	f001 fb64 	bl	802855c <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 8026e94:	e03b      	b.n	8026f0e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026e96:	68fb      	ldr	r3, [r7, #12]
 8026e98:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8026e9a:	68fb      	ldr	r3, [r7, #12]
 8026e9c:	3304      	adds	r3, #4
 8026e9e:	f107 0208 	add.w	r2, r7, #8
 8026ea2:	4611      	mov	r1, r2
 8026ea4:	4618      	mov	r0, r3
 8026ea6:	f7fe fbfe 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 8026eaa:	4603      	mov	r3, r0
 8026eac:	681b      	ldr	r3, [r3, #0]
 8026eae:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026eb0:	3302      	adds	r3, #2
 8026eb2:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026eb4:	68fb      	ldr	r3, [r7, #12]
 8026eb6:	69b9      	ldr	r1, [r7, #24]
 8026eb8:	4618      	mov	r0, r3
 8026eba:	f7fe fc08 	bl	80256ce <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8026ebe:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026ec0:	69ba      	ldr	r2, [r7, #24]
 8026ec2:	69fb      	ldr	r3, [r7, #28]
 8026ec4:	1ad3      	subs	r3, r2, r3
 8026ec6:	085b      	lsrs	r3, r3, #1
 8026ec8:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8026eca:	79fb      	ldrb	r3, [r7, #7]
 8026ecc:	2b00      	cmp	r3, #0
 8026ece:	d002      	beq.n	8026ed6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8026ed0:	68bb      	ldr	r3, [r7, #8]
 8026ed2:	009b      	lsls	r3, r3, #2
 8026ed4:	e000      	b.n	8026ed8 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8026ed6:	2300      	movs	r3, #0
 8026ed8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026eda:	697a      	ldr	r2, [r7, #20]
 8026edc:	4413      	add	r3, r2
 8026ede:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026ee0:	68fb      	ldr	r3, [r7, #12]
 8026ee2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026ee4:	68fb      	ldr	r3, [r7, #12]
 8026ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026ee8:	3304      	adds	r3, #4
 8026eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026eec:	4619      	mov	r1, r3
 8026eee:	f001 fb1d 	bl	802852c <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026ef2:	68f8      	ldr	r0, [r7, #12]
 8026ef4:	68fb      	ldr	r3, [r7, #12]
 8026ef6:	6819      	ldr	r1, [r3, #0]
 8026ef8:	68fb      	ldr	r3, [r7, #12]
 8026efa:	685b      	ldr	r3, [r3, #4]
 8026efc:	461a      	mov	r2, r3
 8026efe:	f7fd f97e 	bl	80241fe <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8026f02:	68fb      	ldr	r3, [r7, #12]
 8026f04:	697a      	ldr	r2, [r7, #20]
 8026f06:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8026f08:	68fb      	ldr	r3, [r7, #12]
 8026f0a:	69ba      	ldr	r2, [r7, #24]
 8026f0c:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8026f0e:	68fb      	ldr	r3, [r7, #12]
 8026f10:	3308      	adds	r3, #8
 8026f12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026f14:	4618      	mov	r0, r3
 8026f16:	f7fe fc11 	bl	802573c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8026f1a:	68fb      	ldr	r3, [r7, #12]
 8026f1c:	f103 0018 	add.w	r0, r3, #24
 8026f20:	6a3a      	ldr	r2, [r7, #32]
 8026f22:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8026f26:	4413      	add	r3, r2
 8026f28:	009b      	lsls	r3, r3, #2
 8026f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026f2c:	4413      	add	r3, r2
 8026f2e:	4619      	mov	r1, r3
 8026f30:	f7fe fc04 	bl	802573c <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8026f34:	bf00      	nop
 8026f36:	372c      	adds	r7, #44	; 0x2c
 8026f38:	46bd      	mov	sp, r7
 8026f3a:	bd90      	pop	{r4, r7, pc}

08026f3c <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8026f3c:	b580      	push	{r7, lr}
 8026f3e:	b082      	sub	sp, #8
 8026f40:	af00      	add	r7, sp, #0
 8026f42:	6078      	str	r0, [r7, #4]
 8026f44:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8026f46:	2200      	movs	r2, #0
 8026f48:	6839      	ldr	r1, [r7, #0]
 8026f4a:	6878      	ldr	r0, [r7, #4]
 8026f4c:	f001 fb1e 	bl	802858c <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 8026f50:	4603      	mov	r3, r0
 8026f52:	4618      	mov	r0, r3
 8026f54:	3708      	adds	r7, #8
 8026f56:	46bd      	mov	sp, r7
 8026f58:	bd80      	pop	{r7, pc}

08026f5a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 8026f5a:	b480      	push	{r7}
 8026f5c:	b083      	sub	sp, #12
 8026f5e:	af00      	add	r7, sp, #0
 8026f60:	6078      	str	r0, [r7, #4]
 8026f62:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8026f64:	683b      	ldr	r3, [r7, #0]
 8026f66:	681a      	ldr	r2, [r3, #0]
 8026f68:	687b      	ldr	r3, [r7, #4]
 8026f6a:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8026f6c:	683b      	ldr	r3, [r7, #0]
 8026f6e:	685a      	ldr	r2, [r3, #4]
 8026f70:	687b      	ldr	r3, [r7, #4]
 8026f72:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8026f74:	683b      	ldr	r3, [r7, #0]
 8026f76:	689a      	ldr	r2, [r3, #8]
 8026f78:	687b      	ldr	r3, [r7, #4]
 8026f7a:	609a      	str	r2, [r3, #8]
	}
 8026f7c:	bf00      	nop
 8026f7e:	370c      	adds	r7, #12
 8026f80:	46bd      	mov	sp, r7
 8026f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f86:	4770      	bx	lr

08026f88 <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8026f88:	b580      	push	{r7, lr}
 8026f8a:	b084      	sub	sp, #16
 8026f8c:	af00      	add	r7, sp, #0
 8026f8e:	60f8      	str	r0, [r7, #12]
 8026f90:	60b9      	str	r1, [r7, #8]
 8026f92:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8026f94:	68b8      	ldr	r0, [r7, #8]
 8026f96:	f001 fb1a 	bl	80285ce <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 8026f9a:	bf00      	nop
 8026f9c:	3710      	adds	r7, #16
 8026f9e:	46bd      	mov	sp, r7
 8026fa0:	bd80      	pop	{r7, pc}

08026fa2 <_ZN9__gnu_cxx13new_allocatorI8ResponceE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8026fa2:	b590      	push	{r4, r7, lr}
 8026fa4:	b085      	sub	sp, #20
 8026fa6:	af00      	add	r7, sp, #0
 8026fa8:	60f8      	str	r0, [r7, #12]
 8026faa:	60b9      	str	r1, [r7, #8]
 8026fac:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8026fae:	6878      	ldr	r0, [r7, #4]
 8026fb0:	f7fd fb3f 	bl	8024632 <_ZSt7forwardI8ResponceEOT_RNSt16remove_referenceIS1_E4typeE>
 8026fb4:	4604      	mov	r4, r0
 8026fb6:	68bb      	ldr	r3, [r7, #8]
 8026fb8:	4619      	mov	r1, r3
 8026fba:	2010      	movs	r0, #16
 8026fbc:	f7f9 ff83 	bl	8020ec6 <_ZnwjPv>
 8026fc0:	4603      	mov	r3, r0
 8026fc2:	4621      	mov	r1, r4
 8026fc4:	4618      	mov	r0, r3
 8026fc6:	f7fa f9b1 	bl	802132c <_ZN8ResponceC1EOS_>
 8026fca:	bf00      	nop
 8026fcc:	3714      	adds	r7, #20
 8026fce:	46bd      	mov	sp, r7
 8026fd0:	bd90      	pop	{r4, r7, pc}

08026fd2 <_ZNKSt5dequeI8ResponceSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8026fd2:	b580      	push	{r7, lr}
 8026fd4:	b082      	sub	sp, #8
 8026fd6:	af00      	add	r7, sp, #0
 8026fd8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	4618      	mov	r0, r3
 8026fde:	f001 fa65 	bl	80284ac <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8026fe2:	4603      	mov	r3, r0
 8026fe4:	4618      	mov	r0, r3
 8026fe6:	f001 fafd 	bl	80285e4 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>
 8026fea:	4603      	mov	r3, r0
 8026fec:	4618      	mov	r0, r3
 8026fee:	3708      	adds	r7, #8
 8026ff0:	46bd      	mov	sp, r7
 8026ff2:	bd80      	pop	{r7, pc}

08026ff4 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8026ff4:	b580      	push	{r7, lr}
 8026ff6:	b082      	sub	sp, #8
 8026ff8:	af00      	add	r7, sp, #0
 8026ffa:	6078      	str	r0, [r7, #4]
 8026ffc:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026ffe:	683b      	ldr	r3, [r7, #0]
 8027000:	1c5a      	adds	r2, r3, #1
 8027002:	687b      	ldr	r3, [r7, #4]
 8027004:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8027006:	6879      	ldr	r1, [r7, #4]
 8027008:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802700a:	6879      	ldr	r1, [r7, #4]
 802700c:	6809      	ldr	r1, [r1, #0]
 802700e:	1a41      	subs	r1, r0, r1
 8027010:	1089      	asrs	r1, r1, #2
 8027012:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8027014:	429a      	cmp	r2, r3
 8027016:	d904      	bls.n	8027022 <_ZNSt5dequeI8ResponceSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8027018:	2200      	movs	r2, #0
 802701a:	6839      	ldr	r1, [r7, #0]
 802701c:	6878      	ldr	r0, [r7, #4]
 802701e:	f001 fafb 	bl	8028618 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>
      }
 8027022:	bf00      	nop
 8027024:	3708      	adds	r7, #8
 8027026:	46bd      	mov	sp, r7
 8027028:	bd80      	pop	{r7, pc}

0802702a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 802702a:	b590      	push	{r4, r7, lr}
 802702c:	b083      	sub	sp, #12
 802702e:	af00      	add	r7, sp, #0
 8027030:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8027032:	687c      	ldr	r4, [r7, #4]
 8027034:	2010      	movs	r0, #16
 8027036:	f7f9 ff52 	bl	8020ede <_ZSt16__deque_buf_sizej>
 802703a:	4603      	mov	r3, r0
 802703c:	4619      	mov	r1, r3
 802703e:	4620      	mov	r0, r4
 8027040:	f001 fb84 	bl	802874c <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 8027044:	4603      	mov	r3, r0
      }
 8027046:	4618      	mov	r0, r3
 8027048:	370c      	adds	r7, #12
 802704a:	46bd      	mov	sp, r7
 802704c:	bd90      	pop	{r4, r7, pc}

0802704e <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 802704e:	b580      	push	{r7, lr}
 8027050:	b082      	sub	sp, #8
 8027052:	af00      	add	r7, sp, #0
 8027054:	6078      	str	r0, [r7, #4]
 8027056:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8027058:	6838      	ldr	r0, [r7, #0]
 802705a:	f7fa f87b 	bl	8021154 <_ZN8ResponceD1Ev>
 802705e:	bf00      	nop
 8027060:	3708      	adds	r7, #8
 8027062:	46bd      	mov	sp, r7
 8027064:	bd80      	pop	{r7, pc}

08027066 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8027066:	b580      	push	{r7, lr}
 8027068:	b082      	sub	sp, #8
 802706a:	af00      	add	r7, sp, #0
 802706c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 802706e:	6878      	ldr	r0, [r7, #4]
 8027070:	f001 fb7c 	bl	802876c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8027074:	4603      	mov	r3, r0
 8027076:	4618      	mov	r0, r3
 8027078:	3708      	adds	r7, #8
 802707a:	46bd      	mov	sp, r7
 802707c:	bd80      	pop	{r7, pc}

0802707e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 802707e:	b580      	push	{r7, lr}
 8027080:	b084      	sub	sp, #16
 8027082:	af00      	add	r7, sp, #0
 8027084:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8027086:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802708a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 802708c:	6878      	ldr	r0, [r7, #4]
 802708e:	f001 fb7b 	bl	8028788 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8027092:	4603      	mov	r3, r0
 8027094:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8027096:	f107 0208 	add.w	r2, r7, #8
 802709a:	f107 030c 	add.w	r3, r7, #12
 802709e:	4611      	mov	r1, r2
 80270a0:	4618      	mov	r0, r3
 80270a2:	f7fe fe86 	bl	8025db2 <_ZSt3minIjERKT_S2_S2_>
 80270a6:	4603      	mov	r3, r0
 80270a8:	681b      	ldr	r3, [r3, #0]
      }
 80270aa:	4618      	mov	r0, r3
 80270ac:	3710      	adds	r7, #16
 80270ae:	46bd      	mov	sp, r7
 80270b0:	bd80      	pop	{r7, pc}

080270b2 <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 80270b2:	b580      	push	{r7, lr}
 80270b4:	b084      	sub	sp, #16
 80270b6:	af00      	add	r7, sp, #0
 80270b8:	6078      	str	r0, [r7, #4]
 80270ba:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80270bc:	2301      	movs	r3, #1
 80270be:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 80270c0:	6839      	ldr	r1, [r7, #0]
 80270c2:	6878      	ldr	r0, [r7, #4]
 80270c4:	f001 fb6c 	bl	80287a0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 80270c8:	4603      	mov	r3, r0
    }
 80270ca:	4618      	mov	r0, r3
 80270cc:	3710      	adds	r7, #16
 80270ce:	46bd      	mov	sp, r7
 80270d0:	bd80      	pop	{r7, pc}

080270d2 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80270d2:	b580      	push	{r7, lr}
 80270d4:	b082      	sub	sp, #8
 80270d6:	af00      	add	r7, sp, #0
 80270d8:	6078      	str	r0, [r7, #4]
 80270da:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80270dc:	2200      	movs	r2, #0
 80270de:	6839      	ldr	r1, [r7, #0]
 80270e0:	6878      	ldr	r0, [r7, #4]
 80270e2:	f001 fb70 	bl	80287c6 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80270e6:	4603      	mov	r3, r0
 80270e8:	4618      	mov	r0, r3
 80270ea:	3708      	adds	r7, #8
 80270ec:	46bd      	mov	sp, r7
 80270ee:	bd80      	pop	{r7, pc}

080270f0 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80270f0:	b580      	push	{r7, lr}
 80270f2:	b084      	sub	sp, #16
 80270f4:	af00      	add	r7, sp, #0
 80270f6:	60f8      	str	r0, [r7, #12]
 80270f8:	60b9      	str	r1, [r7, #8]
 80270fa:	607a      	str	r2, [r7, #4]
 80270fc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80270fe:	683b      	ldr	r3, [r7, #0]
 8027100:	687a      	ldr	r2, [r7, #4]
 8027102:	68b9      	ldr	r1, [r7, #8]
 8027104:	68f8      	ldr	r0, [r7, #12]
 8027106:	f001 fb7a 	bl	80287fe <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 802710a:	4603      	mov	r3, r0
      }
 802710c:	4618      	mov	r0, r3
 802710e:	3710      	adds	r7, #16
 8027110:	46bd      	mov	sp, r7
 8027112:	bd80      	pop	{r7, pc}

08027114 <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8027114:	b580      	push	{r7, lr}
 8027116:	b084      	sub	sp, #16
 8027118:	af00      	add	r7, sp, #0
 802711a:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 802711c:	f107 030c 	add.w	r3, r7, #12
 8027120:	6879      	ldr	r1, [r7, #4]
 8027122:	4618      	mov	r0, r3
 8027124:	f001 fb88 	bl	8028838 <_ZNSt13move_iteratorIPhEC1ES0_>
 8027128:	68fb      	ldr	r3, [r7, #12]
 802712a:	4618      	mov	r0, r3
 802712c:	3710      	adds	r7, #16
 802712e:	46bd      	mov	sp, r7
 8027130:	bd80      	pop	{r7, pc}

08027132 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8027132:	b580      	push	{r7, lr}
 8027134:	b084      	sub	sp, #16
 8027136:	af00      	add	r7, sp, #0
 8027138:	60f8      	str	r0, [r7, #12]
 802713a:	60b9      	str	r1, [r7, #8]
 802713c:	607a      	str	r2, [r7, #4]
 802713e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8027140:	687a      	ldr	r2, [r7, #4]
 8027142:	68b9      	ldr	r1, [r7, #8]
 8027144:	68f8      	ldr	r0, [r7, #12]
 8027146:	f001 fb89 	bl	802885c <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 802714a:	4603      	mov	r3, r0
 802714c:	4618      	mov	r0, r3
 802714e:	3710      	adds	r7, #16
 8027150:	46bd      	mov	sp, r7
 8027152:	bd80      	pop	{r7, pc}

08027154 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8027154:	b580      	push	{r7, lr}
 8027156:	b086      	sub	sp, #24
 8027158:	af00      	add	r7, sp, #0
 802715a:	60f8      	str	r0, [r7, #12]
 802715c:	60b9      	str	r1, [r7, #8]
 802715e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8027160:	2301      	movs	r3, #1
 8027162:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8027164:	687a      	ldr	r2, [r7, #4]
 8027166:	68b9      	ldr	r1, [r7, #8]
 8027168:	68f8      	ldr	r0, [r7, #12]
 802716a:	f001 fb89 	bl	8028880 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 802716e:	4603      	mov	r3, r0
    }
 8027170:	4618      	mov	r0, r3
 8027172:	3718      	adds	r7, #24
 8027174:	46bd      	mov	sp, r7
 8027176:	bd80      	pop	{r7, pc}

08027178 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8027178:	b580      	push	{r7, lr}
 802717a:	b082      	sub	sp, #8
 802717c:	af00      	add	r7, sp, #0
 802717e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8027180:	1d3b      	adds	r3, r7, #4
 8027182:	4618      	mov	r0, r3
 8027184:	f001 fb8c 	bl	80288a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8027188:	4603      	mov	r3, r0
 802718a:	681b      	ldr	r3, [r3, #0]
 802718c:	4618      	mov	r0, r3
 802718e:	3708      	adds	r7, #8
 8027190:	46bd      	mov	sp, r7
 8027192:	bd80      	pop	{r7, pc}

08027194 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8027194:	b580      	push	{r7, lr}
 8027196:	b082      	sub	sp, #8
 8027198:	af00      	add	r7, sp, #0
 802719a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 802719c:	1d3b      	adds	r3, r7, #4
 802719e:	4618      	mov	r0, r3
 80271a0:	f001 fb89 	bl	80288b6 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80271a4:	4603      	mov	r3, r0
 80271a6:	681b      	ldr	r3, [r3, #0]
 80271a8:	4618      	mov	r0, r3
 80271aa:	3708      	adds	r7, #8
 80271ac:	46bd      	mov	sp, r7
 80271ae:	bd80      	pop	{r7, pc}

080271b0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80271b0:	b580      	push	{r7, lr}
 80271b2:	b084      	sub	sp, #16
 80271b4:	af00      	add	r7, sp, #0
 80271b6:	60f8      	str	r0, [r7, #12]
 80271b8:	60b9      	str	r1, [r7, #8]
 80271ba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80271bc:	687a      	ldr	r2, [r7, #4]
 80271be:	68b9      	ldr	r1, [r7, #8]
 80271c0:	68f8      	ldr	r0, [r7, #12]
 80271c2:	f001 fb83 	bl	80288cc <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 80271c6:	4603      	mov	r3, r0
 80271c8:	4618      	mov	r0, r3
 80271ca:	3710      	adds	r7, #16
 80271cc:	46bd      	mov	sp, r7
 80271ce:	bd80      	pop	{r7, pc}

080271d0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 80271d0:	b580      	push	{r7, lr}
 80271d2:	b082      	sub	sp, #8
 80271d4:	af00      	add	r7, sp, #0
 80271d6:	6078      	str	r0, [r7, #4]
 80271d8:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80271da:	6878      	ldr	r0, [r7, #4]
 80271dc:	f7ff ffda 	bl	8027194 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80271e0:	4602      	mov	r2, r0
 80271e2:	683b      	ldr	r3, [r7, #0]
 80271e4:	1a9a      	subs	r2, r3, r2
 80271e6:	1d3b      	adds	r3, r7, #4
 80271e8:	4611      	mov	r1, r2
 80271ea:	4618      	mov	r0, r3
 80271ec:	f001 fb7e 	bl	80288ec <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>
 80271f0:	4603      	mov	r3, r0
 80271f2:	4618      	mov	r0, r3
 80271f4:	3708      	adds	r7, #8
 80271f6:	46bd      	mov	sp, r7
 80271f8:	bd80      	pop	{r7, pc}

080271fa <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
 80271fa:	b480      	push	{r7}
 80271fc:	b083      	sub	sp, #12
 80271fe:	af00      	add	r7, sp, #0
 8027200:	6078      	str	r0, [r7, #4]
 8027202:	6039      	str	r1, [r7, #0]
 8027204:	bf00      	nop
 8027206:	370c      	adds	r7, #12
 8027208:	46bd      	mov	sp, r7
 802720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802720e:	4770      	bx	lr

08027210 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8027210:	b480      	push	{r7}
 8027212:	b083      	sub	sp, #12
 8027214:	af00      	add	r7, sp, #0
 8027216:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027218:	687b      	ldr	r3, [r7, #4]
 802721a:	4618      	mov	r0, r3
 802721c:	370c      	adds	r7, #12
 802721e:	46bd      	mov	sp, r7
 8027220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027224:	4770      	bx	lr

08027226 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8027226:	b580      	push	{r7, lr}
 8027228:	b084      	sub	sp, #16
 802722a:	af00      	add	r7, sp, #0
 802722c:	60f8      	str	r0, [r7, #12]
 802722e:	60b9      	str	r1, [r7, #8]
 8027230:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8027232:	687a      	ldr	r2, [r7, #4]
 8027234:	68b9      	ldr	r1, [r7, #8]
 8027236:	68f8      	ldr	r0, [r7, #12]
 8027238:	f001 fb6f 	bl	802891a <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 802723c:	4603      	mov	r3, r0
 802723e:	4618      	mov	r0, r3
 8027240:	3710      	adds	r7, #16
 8027242:	46bd      	mov	sp, r7
 8027244:	bd80      	pop	{r7, pc}

08027246 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8027246:	b480      	push	{r7}
 8027248:	b083      	sub	sp, #12
 802724a:	af00      	add	r7, sp, #0
 802724c:	6078      	str	r0, [r7, #4]
 802724e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8027250:	683b      	ldr	r3, [r7, #0]
 8027252:	4618      	mov	r0, r3
 8027254:	370c      	adds	r7, #12
 8027256:	46bd      	mov	sp, r7
 8027258:	f85d 7b04 	ldr.w	r7, [sp], #4
 802725c:	4770      	bx	lr

0802725e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802725e:	b580      	push	{r7, lr}
 8027260:	b084      	sub	sp, #16
 8027262:	af00      	add	r7, sp, #0
 8027264:	60f8      	str	r0, [r7, #12]
 8027266:	60b9      	str	r1, [r7, #8]
 8027268:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 802726a:	687a      	ldr	r2, [r7, #4]
 802726c:	68b9      	ldr	r1, [r7, #8]
 802726e:	68f8      	ldr	r0, [r7, #12]
 8027270:	f7fd fd02 	bl	8024c78 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 8027274:	4603      	mov	r3, r0
 8027276:	4618      	mov	r0, r3
 8027278:	3710      	adds	r7, #16
 802727a:	46bd      	mov	sp, r7
 802727c:	bd80      	pop	{r7, pc}

0802727e <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
    __iterator_category(const _Iter&)
 802727e:	b480      	push	{r7}
 8027280:	b083      	sub	sp, #12
 8027282:	af00      	add	r7, sp, #0
 8027284:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8027286:	bf00      	nop
 8027288:	4618      	mov	r0, r3
 802728a:	370c      	adds	r7, #12
 802728c:	46bd      	mov	sp, r7
 802728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027292:	4770      	bx	lr

08027294 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8027294:	b480      	push	{r7}
 8027296:	b085      	sub	sp, #20
 8027298:	af00      	add	r7, sp, #0
 802729a:	60f8      	str	r0, [r7, #12]
 802729c:	60b9      	str	r1, [r7, #8]
 802729e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80272a0:	68ba      	ldr	r2, [r7, #8]
 80272a2:	68fb      	ldr	r3, [r7, #12]
 80272a4:	1ad3      	subs	r3, r2, r3
    }
 80272a6:	4618      	mov	r0, r3
 80272a8:	3714      	adds	r7, #20
 80272aa:	46bd      	mov	sp, r7
 80272ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272b0:	4770      	bx	lr

080272b2 <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80272b2:	b580      	push	{r7, lr}
 80272b4:	b086      	sub	sp, #24
 80272b6:	af00      	add	r7, sp, #0
 80272b8:	60f8      	str	r0, [r7, #12]
 80272ba:	60b9      	str	r1, [r7, #8]
 80272bc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80272be:	2301      	movs	r3, #1
 80272c0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80272c2:	687a      	ldr	r2, [r7, #4]
 80272c4:	68b9      	ldr	r1, [r7, #8]
 80272c6:	68f8      	ldr	r0, [r7, #12]
 80272c8:	f001 fb37 	bl	802893a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>
 80272cc:	4603      	mov	r3, r0
    }
 80272ce:	4618      	mov	r0, r3
 80272d0:	3718      	adds	r7, #24
 80272d2:	46bd      	mov	sp, r7
 80272d4:	bd80      	pop	{r7, pc}

080272d6 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80272d6:	b580      	push	{r7, lr}
 80272d8:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80272da:	2010      	movs	r0, #16
 80272dc:	f7f9 fdff 	bl	8020ede <_ZSt16__deque_buf_sizej>
 80272e0:	4603      	mov	r3, r0
 80272e2:	4618      	mov	r0, r3
 80272e4:	bd80      	pop	{r7, pc}
	...

080272e8 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80272e8:	b480      	push	{r7}
 80272ea:	b085      	sub	sp, #20
 80272ec:	af00      	add	r7, sp, #0
 80272ee:	60f8      	str	r0, [r7, #12]
 80272f0:	60b9      	str	r1, [r7, #8]
 80272f2:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80272f4:	68ba      	ldr	r2, [r7, #8]
 80272f6:	68fb      	ldr	r3, [r7, #12]
 80272f8:	1ad3      	subs	r3, r2, r3
 80272fa:	109b      	asrs	r3, r3, #2
 80272fc:	4a04      	ldr	r2, [pc, #16]	; (8027310 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 80272fe:	fb02 f303 	mul.w	r3, r2, r3
    }
 8027302:	4618      	mov	r0, r3
 8027304:	3714      	adds	r7, #20
 8027306:	46bd      	mov	sp, r7
 8027308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802730c:	4770      	bx	lr
 802730e:	bf00      	nop
 8027310:	cccccccd 	.word	0xcccccccd

08027314 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8027314:	b480      	push	{r7}
 8027316:	b085      	sub	sp, #20
 8027318:	af00      	add	r7, sp, #0
 802731a:	60f8      	str	r0, [r7, #12]
 802731c:	60b9      	str	r1, [r7, #8]
 802731e:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8027320:	68fb      	ldr	r3, [r7, #12]
 8027322:	6819      	ldr	r1, [r3, #0]
 8027324:	68ba      	ldr	r2, [r7, #8]
 8027326:	4613      	mov	r3, r2
 8027328:	009b      	lsls	r3, r3, #2
 802732a:	4413      	add	r3, r2
 802732c:	009b      	lsls	r3, r3, #2
 802732e:	18ca      	adds	r2, r1, r3
 8027330:	68fb      	ldr	r3, [r7, #12]
 8027332:	601a      	str	r2, [r3, #0]
    }
 8027334:	bf00      	nop
 8027336:	3714      	adds	r7, #20
 8027338:	46bd      	mov	sp, r7
 802733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802733e:	4770      	bx	lr

08027340 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8027340:	b480      	push	{r7}
 8027342:	b083      	sub	sp, #12
 8027344:	af00      	add	r7, sp, #0
 8027346:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027348:	687b      	ldr	r3, [r7, #4]
 802734a:	4618      	mov	r0, r3
 802734c:	370c      	adds	r7, #12
 802734e:	46bd      	mov	sp, r7
 8027350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027354:	4770      	bx	lr

08027356 <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8027356:	b5b0      	push	{r4, r5, r7, lr}
 8027358:	b090      	sub	sp, #64	; 0x40
 802735a:	af00      	add	r7, sp, #0
 802735c:	60f8      	str	r0, [r7, #12]
 802735e:	60b9      	str	r1, [r7, #8]
 8027360:	607a      	str	r2, [r7, #4]
 8027362:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8027364:	68b8      	ldr	r0, [r7, #8]
 8027366:	f001 faf8 	bl	802895a <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 802736a:	4604      	mov	r4, r0
 802736c:	6878      	ldr	r0, [r7, #4]
 802736e:	f001 faf4 	bl	802895a <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8027372:	4605      	mov	r5, r0
 8027374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027378:	6839      	ldr	r1, [r7, #0]
 802737a:	4618      	mov	r0, r3
 802737c:	f7fd fff9 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027380:	f107 0320 	add.w	r3, r7, #32
 8027384:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027388:	4611      	mov	r1, r2
 802738a:	4618      	mov	r0, r3
 802738c:	f001 faf0 	bl	8028970 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027390:	f107 0010 	add.w	r0, r7, #16
 8027394:	f107 0320 	add.w	r3, r7, #32
 8027398:	462a      	mov	r2, r5
 802739a:	4621      	mov	r1, r4
 802739c:	f001 fb0a 	bl	80289b4 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 80273a0:	68fb      	ldr	r3, [r7, #12]
 80273a2:	f107 0210 	add.w	r2, r7, #16
 80273a6:	6839      	ldr	r1, [r7, #0]
 80273a8:	4618      	mov	r0, r3
 80273aa:	f001 fb55 	bl	8028a58 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 80273ae:	68f8      	ldr	r0, [r7, #12]
 80273b0:	3740      	adds	r7, #64	; 0x40
 80273b2:	46bd      	mov	sp, r7
 80273b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080273b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 80273b8:	b580      	push	{r7, lr}
 80273ba:	b086      	sub	sp, #24
 80273bc:	af00      	add	r7, sp, #0
 80273be:	60f8      	str	r0, [r7, #12]
 80273c0:	60b9      	str	r1, [r7, #8]
 80273c2:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 80273c4:	68bb      	ldr	r3, [r7, #8]
 80273c6:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 80273c8:	68bb      	ldr	r3, [r7, #8]
 80273ca:	68db      	ldr	r3, [r3, #12]
 80273cc:	1ad3      	subs	r3, r2, r3
 80273ce:	109b      	asrs	r3, r3, #2
 80273d0:	4a0d      	ldr	r2, [pc, #52]	; (8027408 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 80273d2:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 80273d6:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 80273d8:	687a      	ldr	r2, [r7, #4]
 80273da:	697b      	ldr	r3, [r7, #20]
 80273dc:	429a      	cmp	r2, r3
 80273de:	d906      	bls.n	80273ee <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 80273e0:	687a      	ldr	r2, [r7, #4]
 80273e2:	697b      	ldr	r3, [r7, #20]
 80273e4:	1ad3      	subs	r3, r2, r3
 80273e6:	4619      	mov	r1, r3
 80273e8:	68b8      	ldr	r0, [r7, #8]
 80273ea:	f001 fb43 	bl	8028a74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 80273ee:	68bb      	ldr	r3, [r7, #8]
 80273f0:	f103 0108 	add.w	r1, r3, #8
 80273f4:	687a      	ldr	r2, [r7, #4]
 80273f6:	68fb      	ldr	r3, [r7, #12]
 80273f8:	4618      	mov	r0, r3
 80273fa:	f001 fb81 	bl	8028b00 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 80273fe:	68f8      	ldr	r0, [r7, #12]
 8027400:	3718      	adds	r7, #24
 8027402:	46bd      	mov	sp, r7
 8027404:	bd80      	pop	{r7, pc}
 8027406:	bf00      	nop
 8027408:	cccccccd 	.word	0xcccccccd

0802740c <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802740c:	b580      	push	{r7, lr}
 802740e:	b088      	sub	sp, #32
 8027410:	af00      	add	r7, sp, #0
 8027412:	60f8      	str	r0, [r7, #12]
 8027414:	60b9      	str	r1, [r7, #8]
 8027416:	607a      	str	r2, [r7, #4]
 8027418:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 802741a:	f107 0310 	add.w	r3, r7, #16
 802741e:	6839      	ldr	r1, [r7, #0]
 8027420:	4618      	mov	r0, r3
 8027422:	f7fd ffa6 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027426:	68f8      	ldr	r0, [r7, #12]
 8027428:	f107 0310 	add.w	r3, r7, #16
 802742c:	687a      	ldr	r2, [r7, #4]
 802742e:	68b9      	ldr	r1, [r7, #8]
 8027430:	f001 fb79 	bl	8028b26 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8027434:	68f8      	ldr	r0, [r7, #12]
 8027436:	3720      	adds	r7, #32
 8027438:	46bd      	mov	sp, r7
 802743a:	bd80      	pop	{r7, pc}

0802743c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 802743c:	b580      	push	{r7, lr}
 802743e:	b086      	sub	sp, #24
 8027440:	af00      	add	r7, sp, #0
 8027442:	60f8      	str	r0, [r7, #12]
 8027444:	60b9      	str	r1, [r7, #8]
 8027446:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8027448:	68bb      	ldr	r3, [r7, #8]
 802744a:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 802744c:	68bb      	ldr	r3, [r7, #8]
 802744e:	699b      	ldr	r3, [r3, #24]
 8027450:	1ad3      	subs	r3, r2, r3
 8027452:	109b      	asrs	r3, r3, #2
 8027454:	4a0d      	ldr	r2, [pc, #52]	; (802748c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 8027456:	fb02 f303 	mul.w	r3, r2, r3
 802745a:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 802745c:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 802745e:	687a      	ldr	r2, [r7, #4]
 8027460:	697b      	ldr	r3, [r7, #20]
 8027462:	429a      	cmp	r2, r3
 8027464:	d906      	bls.n	8027474 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 8027466:	687a      	ldr	r2, [r7, #4]
 8027468:	697b      	ldr	r3, [r7, #20]
 802746a:	1ad3      	subs	r3, r2, r3
 802746c:	4619      	mov	r1, r3
 802746e:	68b8      	ldr	r0, [r7, #8]
 8027470:	f001 fb74 	bl	8028b5c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 8027474:	68bb      	ldr	r3, [r7, #8]
 8027476:	f103 0118 	add.w	r1, r3, #24
 802747a:	687a      	ldr	r2, [r7, #4]
 802747c:	68fb      	ldr	r3, [r7, #12]
 802747e:	4618      	mov	r0, r3
 8027480:	f7ff f85c 	bl	802653c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8027484:	68f8      	ldr	r0, [r7, #12]
 8027486:	3718      	adds	r7, #24
 8027488:	46bd      	mov	sp, r7
 802748a:	bd80      	pop	{r7, pc}
 802748c:	cccccccd 	.word	0xcccccccd

08027490 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
      deque<_Tp, _Alloc>::
 8027490:	b5b0      	push	{r4, r5, r7, lr}
 8027492:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8027496:	af04      	add	r7, sp, #16
 8027498:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 802749c:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 80274a0:	6020      	str	r0, [r4, #0]
 80274a2:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 80274a6:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 80274aa:	6001      	str	r1, [r0, #0]
 80274ac:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80274b0:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80274b4:	600a      	str	r2, [r1, #0]
 80274b6:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80274ba:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80274be:	6013      	str	r3, [r2, #0]
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 80274c0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80274c4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	f103 0208 	add.w	r2, r3, #8
 80274ce:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80274d2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80274d6:	4611      	mov	r1, r2
 80274d8:	6818      	ldr	r0, [r3, #0]
 80274da:	f7fd fd57 	bl	8024f8c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 80274de:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 80274e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80274e6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80274ea:	6818      	ldr	r0, [r3, #0]
 80274ec:	f7fc fc46 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80274f0:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 80274f4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80274f8:	085a      	lsrs	r2, r3, #1
 80274fa:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80274fe:	429a      	cmp	r2, r3
 8027500:	f240 8158 	bls.w	80277b4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8027504:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027508:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 802750c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027510:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027514:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027518:	6819      	ldr	r1, [r3, #0]
 802751a:	f7ff ff4d 	bl	80273b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 802751e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027522:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027526:	681b      	ldr	r3, [r3, #0]
 8027528:	f103 0208 	add.w	r2, r3, #8
 802752c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8027530:	4611      	mov	r1, r2
 8027532:	4618      	mov	r0, r3
 8027534:	f7fd ff1d 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8027538:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802753c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027540:	681b      	ldr	r3, [r3, #0]
 8027542:	f103 0108 	add.w	r1, r3, #8
 8027546:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802754a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 802754e:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8027552:	4618      	mov	r0, r3
 8027554:	f7fe fff2 	bl	802653c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8027558:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802755c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027560:	681a      	ldr	r2, [r3, #0]
 8027562:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027566:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 802756a:	4614      	mov	r4, r2
 802756c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802756e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if (__elemsbefore >= difference_type(__n))
 8027572:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8027576:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 802757a:	429a      	cmp	r2, r3
 802757c:	f2c0 8098 	blt.w	80276b0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		    iterator __start_n = (this->_M_impl._M_start
 8027580:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027584:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027588:	681b      	ldr	r3, [r3, #0]
 802758a:	f103 0108 	add.w	r1, r3, #8
 802758e:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027592:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027596:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 802759a:	4618      	mov	r0, r3
 802759c:	f7fe ffce 	bl	802653c <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80275a0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80275a4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80275a8:	681b      	ldr	r3, [r3, #0]
 80275aa:	f103 0208 	add.w	r2, r3, #8
 80275ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80275b2:	4611      	mov	r1, r2
 80275b4:	4618      	mov	r0, r3
 80275b6:	f7fd fedc 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80275ba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80275be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80275c2:	4611      	mov	r1, r2
 80275c4:	4618      	mov	r0, r3
 80275c6:	f7fd fed4 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80275ca:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80275ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80275d2:	4611      	mov	r1, r2
 80275d4:	4618      	mov	r0, r3
 80275d6:	f7fd fecc 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						_M_get_Tp_allocator());
 80275da:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80275de:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80275e2:	681b      	ldr	r3, [r3, #0]
 80275e4:	4618      	mov	r0, r3
 80275e6:	f7fd fcfd 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80275ea:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80275ec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80275f0:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 80275f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80275f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80275fc:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8027600:	9400      	str	r4, [sp, #0]
 8027602:	f001 faef 	bl	8028be4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 8027606:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802760a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802760e:	681b      	ldr	r3, [r3, #0]
 8027610:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027614:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8027618:	f103 0408 	add.w	r4, r3, #8
 802761c:	4613      	mov	r3, r2
 802761e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 8027624:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8027628:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 802762c:	4611      	mov	r1, r2
 802762e:	4618      	mov	r0, r3
 8027630:	f7fd fe9f 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027634:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027638:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802763c:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8027640:	6819      	ldr	r1, [r3, #0]
 8027642:	4610      	mov	r0, r2
 8027644:	f7fd fe95 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027648:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802764c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8027650:	4611      	mov	r1, r2
 8027652:	4618      	mov	r0, r3
 8027654:	f7fd fe8d 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027658:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802765c:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8027660:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8027664:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8027668:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 802766c:	f001 faf3 	bl	8028c56 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8027670:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027674:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027678:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 802767c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027680:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027684:	6819      	ldr	r1, [r3, #0]
 8027686:	f001 fa3b 	bl	8028b00 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802768a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802768e:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8027692:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8027696:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802769a:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 802769e:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80276a2:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80276a6:	6812      	ldr	r2, [r2, #0]
 80276a8:	6809      	ldr	r1, [r1, #0]
 80276aa:	f7fe fdcb 	bl	8026244 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80276ae:	e1dd      	b.n	8027a6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 80276b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80276b4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80276b8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80276bc:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80276c0:	6812      	ldr	r2, [r2, #0]
 80276c2:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 80276c4:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80276c8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80276cc:	1ad2      	subs	r2, r2, r3
 80276ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80276d2:	4611      	mov	r1, r2
 80276d4:	4618      	mov	r0, r3
 80276d6:	f001 faf4 	bl	8028cc2 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 80276da:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80276de:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80276e2:	681b      	ldr	r3, [r3, #0]
 80276e4:	f103 0208 	add.w	r2, r3, #8
 80276e8:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80276ec:	4611      	mov	r1, r2
 80276ee:	4618      	mov	r0, r3
 80276f0:	f7fd fe3f 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80276f4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80276f8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80276fc:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8027700:	6819      	ldr	r1, [r3, #0]
 8027702:	4610      	mov	r0, r2
 8027704:	f7fd fe35 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027708:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802770c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8027710:	681c      	ldr	r4, [r3, #0]
 8027712:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027716:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 802771a:	4611      	mov	r1, r2
 802771c:	4618      	mov	r0, r3
 802771e:	f7fd fe28 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 8027722:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027726:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802772a:	681b      	ldr	r3, [r3, #0]
 802772c:	4618      	mov	r0, r3
 802772e:	f7fd fc59 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8027732:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8027734:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027738:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 802773c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027740:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8027744:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8027748:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 802774c:	9202      	str	r2, [sp, #8]
 802774e:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8027752:	9201      	str	r2, [sp, #4]
 8027754:	9400      	str	r4, [sp, #0]
 8027756:	681b      	ldr	r3, [r3, #0]
 8027758:	462a      	mov	r2, r5
 802775a:	f001 fac5 	bl	8028ce8 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 802775e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027762:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027766:	681b      	ldr	r3, [r3, #0]
 8027768:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802776c:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8027770:	f103 0408 	add.w	r4, r3, #8
 8027774:	4613      	mov	r3, r2
 8027776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 802777c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027780:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8027784:	681c      	ldr	r4, [r3, #0]
 8027786:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802778a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 802778e:	4611      	mov	r1, r2
 8027790:	4618      	mov	r0, r3
 8027792:	f7fd fdee 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027796:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802779a:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 802779e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80277a2:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80277a6:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80277aa:	6812      	ldr	r2, [r2, #0]
 80277ac:	4621      	mov	r1, r4
 80277ae:	f7fe fd49 	bl	8026244 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80277b2:	e15b      	b.n	8027a6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 80277b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80277b8:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 80277bc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80277c0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80277c4:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80277c8:	6819      	ldr	r1, [r3, #0]
 80277ca:	f7ff fe37 	bl	802743c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 80277ce:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80277d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80277d6:	681b      	ldr	r3, [r3, #0]
 80277d8:	f103 0218 	add.w	r2, r3, #24
 80277dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80277e0:	4611      	mov	r1, r2
 80277e2:	4618      	mov	r0, r3
 80277e4:	f7fd fdc5 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 80277e8:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 80277ec:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80277f0:	1ad3      	subs	r3, r2, r3
 80277f2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 80277f6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80277fa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80277fe:	681b      	ldr	r3, [r3, #0]
 8027800:	f103 0118 	add.w	r1, r3, #24
 8027804:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027808:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 802780c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8027810:	4618      	mov	r0, r3
 8027812:	f001 f975 	bl	8028b00 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8027816:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802781a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802781e:	681a      	ldr	r2, [r3, #0]
 8027820:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027824:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8027828:	4614      	mov	r4, r2
 802782a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802782c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8027830:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8027834:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8027838:	429a      	cmp	r2, r3
 802783a:	f340 8096 	ble.w	802796a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 802783e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027842:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027846:	681b      	ldr	r3, [r3, #0]
 8027848:	f103 0118 	add.w	r1, r3, #24
 802784c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8027850:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027854:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8027858:	4618      	mov	r0, r3
 802785a:	f001 f951 	bl	8028b00 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 802785e:	f107 0218 	add.w	r2, r7, #24
 8027862:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8027866:	4611      	mov	r1, r2
 8027868:	4618      	mov	r0, r3
 802786a:	f7fd fd82 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 802786e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027872:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027876:	681b      	ldr	r3, [r3, #0]
 8027878:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 802787c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8027880:	4611      	mov	r1, r2
 8027882:	4618      	mov	r0, r3
 8027884:	f7fd fd75 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8027888:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802788c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027890:	681b      	ldr	r3, [r3, #0]
 8027892:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 8027896:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 802789a:	4611      	mov	r1, r2
 802789c:	4618      	mov	r0, r3
 802789e:	f7fd fd68 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 80278a2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80278a6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80278aa:	681b      	ldr	r3, [r3, #0]
 80278ac:	4618      	mov	r0, r3
 80278ae:	f7fd fb99 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80278b2:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 80278b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80278b8:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80278bc:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80278c0:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 80278c4:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 80278c8:	9400      	str	r4, [sp, #0]
 80278ca:	f001 f98b 	bl	8028be4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 80278ce:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80278d2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80278d6:	681b      	ldr	r3, [r3, #0]
 80278d8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80278dc:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 80278e0:	f103 0418 	add.w	r4, r3, #24
 80278e4:	4613      	mov	r3, r2
 80278e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80278e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 80278ec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80278f0:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80278f4:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 80278f8:	6819      	ldr	r1, [r3, #0]
 80278fa:	4610      	mov	r0, r2
 80278fc:	f7fd fd39 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027900:	f107 0218 	add.w	r2, r7, #24
 8027904:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8027908:	4611      	mov	r1, r2
 802790a:	4618      	mov	r0, r3
 802790c:	f7fd fd31 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027910:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8027914:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8027918:	4611      	mov	r1, r2
 802791a:	4618      	mov	r0, r3
 802791c:	f7fd fd29 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027920:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8027924:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8027928:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 802792c:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8027930:	f001 fa1a 	bl	8028d68 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 8027934:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027938:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802793c:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8027940:	6819      	ldr	r1, [r3, #0]
 8027942:	4610      	mov	r0, r2
 8027944:	f7fd fd15 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027948:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 802794c:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8027950:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027954:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8027958:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 802795c:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8027960:	6812      	ldr	r2, [r2, #0]
 8027962:	6809      	ldr	r1, [r1, #0]
 8027964:	f7fe fc6e 	bl	8026244 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8027968:	e080      	b.n	8027a6c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 802796a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802796e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8027972:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027976:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 802797a:	6812      	ldr	r2, [r2, #0]
 802797c:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 802797e:	f107 0314 	add.w	r3, r7, #20
 8027982:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8027986:	4618      	mov	r0, r3
 8027988:	f001 f99b 	bl	8028cc2 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 802798c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027990:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8027994:	681c      	ldr	r4, [r3, #0]
 8027996:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802799a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802799e:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80279a2:	6819      	ldr	r1, [r3, #0]
 80279a4:	4610      	mov	r0, r2
 80279a6:	f7fd fce4 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80279aa:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80279ae:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80279b2:	681b      	ldr	r3, [r3, #0]
 80279b4:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80279b8:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80279bc:	4611      	mov	r1, r2
 80279be:	4618      	mov	r0, r3
 80279c0:	f7fd fcd7 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80279c4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80279c8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80279cc:	681b      	ldr	r3, [r3, #0]
 80279ce:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80279d2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80279d6:	4611      	mov	r1, r2
 80279d8:	4618      	mov	r0, r3
 80279da:	f7fd fcca 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 80279de:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80279e2:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80279e6:	681b      	ldr	r3, [r3, #0]
 80279e8:	4618      	mov	r0, r3
 80279ea:	f7fd fafb 	bl	8024fe4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80279ee:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80279f0:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 80279f4:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80279f8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80279fc:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8027a00:	9302      	str	r3, [sp, #8]
 8027a02:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8027a06:	9301      	str	r3, [sp, #4]
 8027a08:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8027a0c:	9300      	str	r3, [sp, #0]
 8027a0e:	460b      	mov	r3, r1
 8027a10:	6812      	ldr	r2, [r2, #0]
 8027a12:	4621      	mov	r1, r4
 8027a14:	f001 f9de 	bl	8028dd4 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8027a18:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027a1c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8027a20:	681b      	ldr	r3, [r3, #0]
 8027a22:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027a26:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8027a2a:	f103 0418 	add.w	r4, r3, #24
 8027a2e:	4613      	mov	r3, r2
 8027a30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 8027a36:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027a3a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8027a3e:	681c      	ldr	r4, [r3, #0]
 8027a40:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8027a44:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8027a48:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8027a4c:	6819      	ldr	r1, [r3, #0]
 8027a4e:	4610      	mov	r0, r2
 8027a50:	f7fd fc8f 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027a54:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 8027a58:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027a5c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8027a60:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 8027a64:	4622      	mov	r2, r4
 8027a66:	6809      	ldr	r1, [r1, #0]
 8027a68:	f7fe fbec 	bl	8026244 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8027a6c:	bf00      	nop
 8027a6e:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 8027a72:	46bd      	mov	sp, r7
 8027a74:	bdb0      	pop	{r4, r5, r7, pc}

08027a76 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8027a76:	b580      	push	{r7, lr}
 8027a78:	b084      	sub	sp, #16
 8027a7a:	af00      	add	r7, sp, #0
 8027a7c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8027a7e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8027a82:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8027a84:	6878      	ldr	r0, [r7, #4]
 8027a86:	f001 f9e5 	bl	8028e54 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 8027a8a:	4603      	mov	r3, r0
 8027a8c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8027a8e:	f107 0208 	add.w	r2, r7, #8
 8027a92:	f107 030c 	add.w	r3, r7, #12
 8027a96:	4611      	mov	r1, r2
 8027a98:	4618      	mov	r0, r3
 8027a9a:	f7fe f98a 	bl	8025db2 <_ZSt3minIjERKT_S2_S2_>
 8027a9e:	4603      	mov	r3, r0
 8027aa0:	681b      	ldr	r3, [r3, #0]
      }
 8027aa2:	4618      	mov	r0, r3
 8027aa4:	3710      	adds	r7, #16
 8027aa6:	46bd      	mov	sp, r7
 8027aa8:	bd80      	pop	{r7, pc}

08027aaa <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8027aaa:	b480      	push	{r7}
 8027aac:	b083      	sub	sp, #12
 8027aae:	af00      	add	r7, sp, #0
 8027ab0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8027ab2:	687b      	ldr	r3, [r7, #4]
 8027ab4:	4618      	mov	r0, r3
 8027ab6:	370c      	adds	r7, #12
 8027ab8:	46bd      	mov	sp, r7
 8027aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027abe:	4770      	bx	lr

08027ac0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8027ac0:	b590      	push	{r4, r7, lr}
 8027ac2:	b08b      	sub	sp, #44	; 0x2c
 8027ac4:	af00      	add	r7, sp, #0
 8027ac6:	60f8      	str	r0, [r7, #12]
 8027ac8:	60b9      	str	r1, [r7, #8]
 8027aca:	4613      	mov	r3, r2
 8027acc:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8027ace:	68fb      	ldr	r3, [r7, #12]
 8027ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8027ad2:	68fb      	ldr	r3, [r7, #12]
 8027ad4:	695b      	ldr	r3, [r3, #20]
 8027ad6:	1ad3      	subs	r3, r2, r3
 8027ad8:	109b      	asrs	r3, r3, #2
 8027ada:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8027adc:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8027ade:	68bb      	ldr	r3, [r7, #8]
 8027ae0:	6a3a      	ldr	r2, [r7, #32]
 8027ae2:	4413      	add	r3, r2
 8027ae4:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8027ae6:	68fb      	ldr	r3, [r7, #12]
 8027ae8:	685a      	ldr	r2, [r3, #4]
 8027aea:	69fb      	ldr	r3, [r7, #28]
 8027aec:	005b      	lsls	r3, r3, #1
 8027aee:	429a      	cmp	r2, r3
 8027af0:	d92d      	bls.n	8027b4e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8027af2:	68fb      	ldr	r3, [r7, #12]
 8027af4:	681a      	ldr	r2, [r3, #0]
 8027af6:	68fb      	ldr	r3, [r7, #12]
 8027af8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8027afa:	69fb      	ldr	r3, [r7, #28]
 8027afc:	1acb      	subs	r3, r1, r3
 8027afe:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8027b00:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8027b02:	79fb      	ldrb	r3, [r7, #7]
 8027b04:	2b00      	cmp	r3, #0
 8027b06:	d002      	beq.n	8027b0e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8027b08:	68bb      	ldr	r3, [r7, #8]
 8027b0a:	009b      	lsls	r3, r3, #2
 8027b0c:	e000      	b.n	8027b10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8027b0e:	2300      	movs	r3, #0
 8027b10:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8027b12:	4413      	add	r3, r2
 8027b14:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8027b16:	68fb      	ldr	r3, [r7, #12]
 8027b18:	695b      	ldr	r3, [r3, #20]
 8027b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027b1c:	429a      	cmp	r2, r3
 8027b1e:	d209      	bcs.n	8027b34 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8027b20:	68fb      	ldr	r3, [r7, #12]
 8027b22:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8027b24:	68fb      	ldr	r3, [r7, #12]
 8027b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8027b28:	3304      	adds	r3, #4
 8027b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027b2c:	4619      	mov	r1, r3
 8027b2e:	f001 f99d 	bl	8028e6c <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8027b32:	e048      	b.n	8027bc6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8027b34:	68fb      	ldr	r3, [r7, #12]
 8027b36:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8027b38:	68fb      	ldr	r3, [r7, #12]
 8027b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8027b3c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8027b3e:	6a3b      	ldr	r3, [r7, #32]
 8027b40:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8027b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027b44:	4413      	add	r3, r2
 8027b46:	461a      	mov	r2, r3
 8027b48:	f001 f9a8 	bl	8028e9c <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8027b4c:	e03b      	b.n	8027bc6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8027b4e:	68fb      	ldr	r3, [r7, #12]
 8027b50:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8027b52:	68fb      	ldr	r3, [r7, #12]
 8027b54:	3304      	adds	r3, #4
 8027b56:	f107 0208 	add.w	r2, r7, #8
 8027b5a:	4611      	mov	r1, r2
 8027b5c:	4618      	mov	r0, r3
 8027b5e:	f7fd fda2 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 8027b62:	4603      	mov	r3, r0
 8027b64:	681b      	ldr	r3, [r3, #0]
 8027b66:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8027b68:	3302      	adds	r3, #2
 8027b6a:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8027b6c:	68fb      	ldr	r3, [r7, #12]
 8027b6e:	69b9      	ldr	r1, [r7, #24]
 8027b70:	4618      	mov	r0, r3
 8027b72:	f7fe fe09 	bl	8026788 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8027b76:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8027b78:	69ba      	ldr	r2, [r7, #24]
 8027b7a:	69fb      	ldr	r3, [r7, #28]
 8027b7c:	1ad3      	subs	r3, r2, r3
 8027b7e:	085b      	lsrs	r3, r3, #1
 8027b80:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8027b82:	79fb      	ldrb	r3, [r7, #7]
 8027b84:	2b00      	cmp	r3, #0
 8027b86:	d002      	beq.n	8027b8e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 8027b88:	68bb      	ldr	r3, [r7, #8]
 8027b8a:	009b      	lsls	r3, r3, #2
 8027b8c:	e000      	b.n	8027b90 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 8027b8e:	2300      	movs	r3, #0
 8027b90:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8027b92:	697a      	ldr	r2, [r7, #20]
 8027b94:	4413      	add	r3, r2
 8027b96:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8027b98:	68fb      	ldr	r3, [r7, #12]
 8027b9a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8027b9c:	68fb      	ldr	r3, [r7, #12]
 8027b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8027ba0:	3304      	adds	r3, #4
 8027ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027ba4:	4619      	mov	r1, r3
 8027ba6:	f001 f961 	bl	8028e6c <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8027baa:	68f8      	ldr	r0, [r7, #12]
 8027bac:	68fb      	ldr	r3, [r7, #12]
 8027bae:	6819      	ldr	r1, [r3, #0]
 8027bb0:	68fb      	ldr	r3, [r7, #12]
 8027bb2:	685b      	ldr	r3, [r3, #4]
 8027bb4:	461a      	mov	r2, r3
 8027bb6:	f7fd fba2 	bl	80252fe <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
	  this->_M_impl._M_map = __new_map;
 8027bba:	68fb      	ldr	r3, [r7, #12]
 8027bbc:	697a      	ldr	r2, [r7, #20]
 8027bbe:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8027bc0:	68fb      	ldr	r3, [r7, #12]
 8027bc2:	69ba      	ldr	r2, [r7, #24]
 8027bc4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8027bc6:	68fb      	ldr	r3, [r7, #12]
 8027bc8:	3308      	adds	r3, #8
 8027bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8027bcc:	4618      	mov	r0, r3
 8027bce:	f7fe fc73 	bl	80264b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8027bd2:	68fb      	ldr	r3, [r7, #12]
 8027bd4:	f103 0018 	add.w	r0, r3, #24
 8027bd8:	6a3a      	ldr	r2, [r7, #32]
 8027bda:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8027bde:	4413      	add	r3, r2
 8027be0:	009b      	lsls	r3, r3, #2
 8027be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027be4:	4413      	add	r3, r2
 8027be6:	4619      	mov	r1, r3
 8027be8:	f7fe fc66 	bl	80264b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8027bec:	bf00      	nop
 8027bee:	372c      	adds	r7, #44	; 0x2c
 8027bf0:	46bd      	mov	sp, r7
 8027bf2:	bd90      	pop	{r4, r7, pc}

08027bf4 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8027bf4:	b580      	push	{r7, lr}
 8027bf6:	b082      	sub	sp, #8
 8027bf8:	af00      	add	r7, sp, #0
 8027bfa:	6078      	str	r0, [r7, #4]
 8027bfc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8027bfe:	2200      	movs	r2, #0
 8027c00:	6839      	ldr	r1, [r7, #0]
 8027c02:	6878      	ldr	r0, [r7, #4]
 8027c04:	f001 f962 	bl	8028ecc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8027c08:	4603      	mov	r3, r0
 8027c0a:	4618      	mov	r0, r3
 8027c0c:	3708      	adds	r7, #8
 8027c0e:	46bd      	mov	sp, r7
 8027c10:	bd80      	pop	{r7, pc}

08027c12 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8027c12:	b580      	push	{r7, lr}
 8027c14:	b084      	sub	sp, #16
 8027c16:	af00      	add	r7, sp, #0
 8027c18:	60f8      	str	r0, [r7, #12]
 8027c1a:	60b9      	str	r1, [r7, #8]
 8027c1c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8027c1e:	687a      	ldr	r2, [r7, #4]
 8027c20:	68b9      	ldr	r1, [r7, #8]
 8027c22:	68f8      	ldr	r0, [r7, #12]
 8027c24:	f001 f973 	bl	8028f0e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 8027c28:	bf00      	nop
 8027c2a:	3710      	adds	r7, #16
 8027c2c:	46bd      	mov	sp, r7
 8027c2e:	bd80      	pop	{r7, pc}

08027c30 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8027c30:	b590      	push	{r4, r7, lr}
 8027c32:	b085      	sub	sp, #20
 8027c34:	af00      	add	r7, sp, #0
 8027c36:	6078      	str	r0, [r7, #4]
 8027c38:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8027c3a:	687b      	ldr	r3, [r7, #4]
 8027c3c:	681a      	ldr	r2, [r3, #0]
 8027c3e:	687b      	ldr	r3, [r7, #4]
 8027c40:	685b      	ldr	r3, [r3, #4]
 8027c42:	1ad3      	subs	r3, r2, r3
 8027c44:	109b      	asrs	r3, r3, #2
 8027c46:	4a2b      	ldr	r2, [pc, #172]	; (8027cf4 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 8027c48:	fb02 f303 	mul.w	r3, r2, r3
 8027c4c:	461a      	mov	r2, r3
 8027c4e:	683b      	ldr	r3, [r7, #0]
 8027c50:	4413      	add	r3, r2
 8027c52:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	db08      	blt.n	8027c6c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8027c5a:	f7fe fc5c 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027c5e:	4603      	mov	r3, r0
 8027c60:	461a      	mov	r2, r3
 8027c62:	68fb      	ldr	r3, [r7, #12]
 8027c64:	4293      	cmp	r3, r2
 8027c66:	da01      	bge.n	8027c6c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8027c68:	2301      	movs	r3, #1
 8027c6a:	e000      	b.n	8027c6e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 8027c6c:	2300      	movs	r3, #0
 8027c6e:	2b00      	cmp	r3, #0
 8027c70:	d00a      	beq.n	8027c88 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 8027c72:	687b      	ldr	r3, [r7, #4]
 8027c74:	6819      	ldr	r1, [r3, #0]
 8027c76:	683a      	ldr	r2, [r7, #0]
 8027c78:	4613      	mov	r3, r2
 8027c7a:	009b      	lsls	r3, r3, #2
 8027c7c:	4413      	add	r3, r2
 8027c7e:	009b      	lsls	r3, r3, #2
 8027c80:	18ca      	adds	r2, r1, r3
 8027c82:	687b      	ldr	r3, [r7, #4]
 8027c84:	601a      	str	r2, [r3, #0]
 8027c86:	e02f      	b.n	8027ce8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8027c88:	68fb      	ldr	r3, [r7, #12]
 8027c8a:	2b00      	cmp	r3, #0
 8027c8c:	dd07      	ble.n	8027c9e <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 8027c8e:	f7fe fc42 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027c92:	4603      	mov	r3, r0
 8027c94:	461a      	mov	r2, r3
 8027c96:	68fb      	ldr	r3, [r7, #12]
 8027c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8027c9c:	e007      	b.n	8027cae <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 8027c9e:	68fb      	ldr	r3, [r7, #12]
 8027ca0:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8027ca2:	f7fe fc38 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027ca6:	4603      	mov	r3, r0
 8027ca8:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8027cac:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8027cae:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8027cb0:	687b      	ldr	r3, [r7, #4]
 8027cb2:	68da      	ldr	r2, [r3, #12]
 8027cb4:	68bb      	ldr	r3, [r7, #8]
 8027cb6:	009b      	lsls	r3, r3, #2
 8027cb8:	4413      	add	r3, r2
 8027cba:	4619      	mov	r1, r3
 8027cbc:	6878      	ldr	r0, [r7, #4]
 8027cbe:	f7fe fbfb 	bl	80264b8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 8027cc2:	687b      	ldr	r3, [r7, #4]
 8027cc4:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8027cc6:	f7fe fc26 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027cca:	4603      	mov	r3, r0
 8027ccc:	461a      	mov	r2, r3
 8027cce:	68bb      	ldr	r3, [r7, #8]
 8027cd0:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8027cd4:	68fa      	ldr	r2, [r7, #12]
 8027cd6:	1ad3      	subs	r3, r2, r3
 8027cd8:	461a      	mov	r2, r3
 8027cda:	4613      	mov	r3, r2
 8027cdc:	009b      	lsls	r3, r3, #2
 8027cde:	4413      	add	r3, r2
 8027ce0:	009b      	lsls	r3, r3, #2
 8027ce2:	18e2      	adds	r2, r4, r3
 8027ce4:	687b      	ldr	r3, [r7, #4]
 8027ce6:	601a      	str	r2, [r3, #0]
	return *this;
 8027ce8:	687b      	ldr	r3, [r7, #4]
      }
 8027cea:	4618      	mov	r0, r3
 8027cec:	3714      	adds	r7, #20
 8027cee:	46bd      	mov	sp, r7
 8027cf0:	bd90      	pop	{r4, r7, pc}
 8027cf2:	bf00      	nop
 8027cf4:	cccccccd 	.word	0xcccccccd

08027cf8 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8027cf8:	b480      	push	{r7}
 8027cfa:	b083      	sub	sp, #12
 8027cfc:	af00      	add	r7, sp, #0
 8027cfe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8027d00:	687b      	ldr	r3, [r7, #4]
 8027d02:	4618      	mov	r0, r3
 8027d04:	370c      	adds	r7, #12
 8027d06:	46bd      	mov	sp, r7
 8027d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d0c:	4770      	bx	lr

08027d0e <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8027d0e:	b590      	push	{r4, r7, lr}
 8027d10:	b085      	sub	sp, #20
 8027d12:	af00      	add	r7, sp, #0
 8027d14:	60f8      	str	r0, [r7, #12]
 8027d16:	60b9      	str	r1, [r7, #8]
 8027d18:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8027d1a:	6878      	ldr	r0, [r7, #4]
 8027d1c:	f7ff ffec 	bl	8027cf8 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8027d20:	4603      	mov	r3, r0
 8027d22:	681c      	ldr	r4, [r3, #0]
 8027d24:	68bb      	ldr	r3, [r7, #8]
 8027d26:	4619      	mov	r1, r3
 8027d28:	2004      	movs	r0, #4
 8027d2a:	f7f9 f8cc 	bl	8020ec6 <_ZnwjPv>
 8027d2e:	4603      	mov	r3, r0
 8027d30:	601c      	str	r4, [r3, #0]
 8027d32:	bf00      	nop
 8027d34:	3714      	adds	r7, #20
 8027d36:	46bd      	mov	sp, r7
 8027d38:	bd90      	pop	{r4, r7, pc}

08027d3a <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8027d3a:	b580      	push	{r7, lr}
 8027d3c:	b082      	sub	sp, #8
 8027d3e:	af00      	add	r7, sp, #0
 8027d40:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8027d42:	687b      	ldr	r3, [r7, #4]
 8027d44:	f103 0218 	add.w	r2, r3, #24
 8027d48:	687b      	ldr	r3, [r7, #4]
 8027d4a:	3308      	adds	r3, #8
 8027d4c:	4619      	mov	r1, r3
 8027d4e:	4610      	mov	r0, r2
 8027d50:	f001 f8f0 	bl	8028f34 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 8027d54:	4603      	mov	r3, r0
 8027d56:	4618      	mov	r0, r3
 8027d58:	3708      	adds	r7, #8
 8027d5a:	46bd      	mov	sp, r7
 8027d5c:	bd80      	pop	{r7, pc}

08027d5e <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8027d5e:	b580      	push	{r7, lr}
 8027d60:	b082      	sub	sp, #8
 8027d62:	af00      	add	r7, sp, #0
 8027d64:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8027d66:	687b      	ldr	r3, [r7, #4]
 8027d68:	4618      	mov	r0, r3
 8027d6a:	f001 f921 	bl	8028fb0 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8027d6e:	4603      	mov	r3, r0
 8027d70:	4618      	mov	r0, r3
 8027d72:	f001 f903 	bl	8028f7c <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 8027d76:	4603      	mov	r3, r0
 8027d78:	4618      	mov	r0, r3
 8027d7a:	3708      	adds	r7, #8
 8027d7c:	46bd      	mov	sp, r7
 8027d7e:	bd80      	pop	{r7, pc}

08027d80 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8027d80:	b580      	push	{r7, lr}
 8027d82:	b082      	sub	sp, #8
 8027d84:	af00      	add	r7, sp, #0
 8027d86:	6078      	str	r0, [r7, #4]
 8027d88:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8027d8a:	683b      	ldr	r3, [r7, #0]
 8027d8c:	1c5a      	adds	r2, r3, #1
 8027d8e:	687b      	ldr	r3, [r7, #4]
 8027d90:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8027d92:	6879      	ldr	r1, [r7, #4]
 8027d94:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8027d96:	6879      	ldr	r1, [r7, #4]
 8027d98:	6809      	ldr	r1, [r1, #0]
 8027d9a:	1a41      	subs	r1, r0, r1
 8027d9c:	1089      	asrs	r1, r1, #2
 8027d9e:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8027da0:	429a      	cmp	r2, r3
 8027da2:	d904      	bls.n	8027dae <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8027da4:	2200      	movs	r2, #0
 8027da6:	6839      	ldr	r1, [r7, #0]
 8027da8:	6878      	ldr	r0, [r7, #4]
 8027daa:	f001 f90c 	bl	8028fc6 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 8027dae:	bf00      	nop
 8027db0:	3708      	adds	r7, #8
 8027db2:	46bd      	mov	sp, r7
 8027db4:	bd80      	pop	{r7, pc}

08027db6 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8027db6:	b590      	push	{r4, r7, lr}
 8027db8:	b083      	sub	sp, #12
 8027dba:	af00      	add	r7, sp, #0
 8027dbc:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8027dbe:	687c      	ldr	r4, [r7, #4]
 8027dc0:	2004      	movs	r0, #4
 8027dc2:	f7f9 f88c 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8027dc6:	4603      	mov	r3, r0
 8027dc8:	4619      	mov	r1, r3
 8027dca:	4620      	mov	r0, r4
 8027dcc:	f001 f995 	bl	80290fa <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 8027dd0:	4603      	mov	r3, r0
      }
 8027dd2:	4618      	mov	r0, r3
 8027dd4:	370c      	adds	r7, #12
 8027dd6:	46bd      	mov	sp, r7
 8027dd8:	bd90      	pop	{r4, r7, pc}

08027dda <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8027dda:	b590      	push	{r4, r7, lr}
 8027ddc:	b083      	sub	sp, #12
 8027dde:	af00      	add	r7, sp, #0
 8027de0:	6078      	str	r0, [r7, #4]
 8027de2:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8027de4:	687b      	ldr	r3, [r7, #4]
 8027de6:	683a      	ldr	r2, [r7, #0]
 8027de8:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8027dea:	683b      	ldr	r3, [r7, #0]
 8027dec:	681a      	ldr	r2, [r3, #0]
 8027dee:	687b      	ldr	r3, [r7, #4]
 8027df0:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8027df2:	687b      	ldr	r3, [r7, #4]
 8027df4:	685c      	ldr	r4, [r3, #4]
 8027df6:	f001 f98f 	bl	8029118 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8027dfa:	4603      	mov	r3, r0
 8027dfc:	009b      	lsls	r3, r3, #2
 8027dfe:	18e2      	adds	r2, r4, r3
 8027e00:	687b      	ldr	r3, [r7, #4]
 8027e02:	609a      	str	r2, [r3, #8]
      }
 8027e04:	bf00      	nop
 8027e06:	370c      	adds	r7, #12
 8027e08:	46bd      	mov	sp, r7
 8027e0a:	bd90      	pop	{r4, r7, pc}

08027e0c <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8027e0c:	b590      	push	{r4, r7, lr}
 8027e0e:	b083      	sub	sp, #12
 8027e10:	af00      	add	r7, sp, #0
 8027e12:	6078      	str	r0, [r7, #4]
 8027e14:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8027e16:	687c      	ldr	r4, [r7, #4]
 8027e18:	2004      	movs	r0, #4
 8027e1a:	f7f9 f860 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8027e1e:	4603      	mov	r3, r0
 8027e20:	461a      	mov	r2, r3
 8027e22:	6839      	ldr	r1, [r7, #0]
 8027e24:	4620      	mov	r0, r4
 8027e26:	f001 f97f 	bl	8029128 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 8027e2a:	bf00      	nop
 8027e2c:	370c      	adds	r7, #12
 8027e2e:	46bd      	mov	sp, r7
 8027e30:	bd90      	pop	{r4, r7, pc}

08027e32 <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8027e32:	b480      	push	{r7}
 8027e34:	b083      	sub	sp, #12
 8027e36:	af00      	add	r7, sp, #0
 8027e38:	6078      	str	r0, [r7, #4]
 8027e3a:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8027e3c:	683b      	ldr	r3, [r7, #0]
 8027e3e:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8027e40:	687b      	ldr	r3, [r7, #4]
 8027e42:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8027e44:	683b      	ldr	r3, [r7, #0]
 8027e46:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8027e48:	687b      	ldr	r3, [r7, #4]
 8027e4a:	605a      	str	r2, [r3, #4]
 8027e4c:	683b      	ldr	r3, [r7, #0]
 8027e4e:	689a      	ldr	r2, [r3, #8]
 8027e50:	687b      	ldr	r3, [r7, #4]
 8027e52:	609a      	str	r2, [r3, #8]
 8027e54:	683b      	ldr	r3, [r7, #0]
 8027e56:	68da      	ldr	r2, [r3, #12]
 8027e58:	687b      	ldr	r3, [r7, #4]
 8027e5a:	60da      	str	r2, [r3, #12]
 8027e5c:	687b      	ldr	r3, [r7, #4]
 8027e5e:	4618      	mov	r0, r3
 8027e60:	370c      	adds	r7, #12
 8027e62:	46bd      	mov	sp, r7
 8027e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e68:	4770      	bx	lr

08027e6a <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:
	destroy(_Up* __p)
 8027e6a:	b480      	push	{r7}
 8027e6c:	b083      	sub	sp, #12
 8027e6e:	af00      	add	r7, sp, #0
 8027e70:	6078      	str	r0, [r7, #4]
 8027e72:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8027e74:	bf00      	nop
 8027e76:	370c      	adds	r7, #12
 8027e78:	46bd      	mov	sp, r7
 8027e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e7e:	4770      	bx	lr

08027e80 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027e80:	b480      	push	{r7}
 8027e82:	b083      	sub	sp, #12
 8027e84:	af00      	add	r7, sp, #0
 8027e86:	6078      	str	r0, [r7, #4]
 8027e88:	687b      	ldr	r3, [r7, #4]
 8027e8a:	4618      	mov	r0, r3
 8027e8c:	370c      	adds	r7, #12
 8027e8e:	46bd      	mov	sp, r7
 8027e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e94:	4770      	bx	lr

08027e96 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8027e96:	b480      	push	{r7}
 8027e98:	b083      	sub	sp, #12
 8027e9a:	af00      	add	r7, sp, #0
 8027e9c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8027e9e:	687b      	ldr	r3, [r7, #4]
 8027ea0:	2200      	movs	r2, #0
 8027ea2:	601a      	str	r2, [r3, #0]
 8027ea4:	687b      	ldr	r3, [r7, #4]
 8027ea6:	2200      	movs	r2, #0
 8027ea8:	605a      	str	r2, [r3, #4]
 8027eaa:	687b      	ldr	r3, [r7, #4]
 8027eac:	2200      	movs	r2, #0
 8027eae:	609a      	str	r2, [r3, #8]
 8027eb0:	687b      	ldr	r3, [r7, #4]
 8027eb2:	2200      	movs	r2, #0
 8027eb4:	60da      	str	r2, [r3, #12]
 8027eb6:	687b      	ldr	r3, [r7, #4]
 8027eb8:	4618      	mov	r0, r3
 8027eba:	370c      	adds	r7, #12
 8027ebc:	46bd      	mov	sp, r7
 8027ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ec2:	4770      	bx	lr

08027ec4 <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8027ec4:	b580      	push	{r7, lr}
 8027ec6:	b082      	sub	sp, #8
 8027ec8:	af00      	add	r7, sp, #0
 8027eca:	6078      	str	r0, [r7, #4]
 8027ecc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8027ece:	2200      	movs	r2, #0
 8027ed0:	6839      	ldr	r1, [r7, #0]
 8027ed2:	6878      	ldr	r0, [r7, #4]
 8027ed4:	f001 f937 	bl	8029146 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8027ed8:	4603      	mov	r3, r0
 8027eda:	4618      	mov	r0, r3
 8027edc:	3708      	adds	r7, #8
 8027ede:	46bd      	mov	sp, r7
 8027ee0:	bd80      	pop	{r7, pc}

08027ee2 <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8027ee2:	b580      	push	{r7, lr}
 8027ee4:	b082      	sub	sp, #8
 8027ee6:	af00      	add	r7, sp, #0
 8027ee8:	6078      	str	r0, [r7, #4]
 8027eea:	6039      	str	r1, [r7, #0]
 8027eec:	6878      	ldr	r0, [r7, #4]
 8027eee:	f001 f948 	bl	8029182 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 8027ef2:	687b      	ldr	r3, [r7, #4]
 8027ef4:	4618      	mov	r0, r3
 8027ef6:	3708      	adds	r7, #8
 8027ef8:	46bd      	mov	sp, r7
 8027efa:	bd80      	pop	{r7, pc}

08027efc <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027efc:	b480      	push	{r7}
 8027efe:	b083      	sub	sp, #12
 8027f00:	af00      	add	r7, sp, #0
 8027f02:	6078      	str	r0, [r7, #4]
 8027f04:	687b      	ldr	r3, [r7, #4]
 8027f06:	4618      	mov	r0, r3
 8027f08:	370c      	adds	r7, #12
 8027f0a:	46bd      	mov	sp, r7
 8027f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f10:	4770      	bx	lr

08027f12 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8027f12:	b580      	push	{r7, lr}
 8027f14:	b084      	sub	sp, #16
 8027f16:	af00      	add	r7, sp, #0
 8027f18:	60f8      	str	r0, [r7, #12]
 8027f1a:	60b9      	str	r1, [r7, #8]
 8027f1c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8027f1e:	687b      	ldr	r3, [r7, #4]
 8027f20:	009b      	lsls	r3, r3, #2
 8027f22:	4619      	mov	r1, r3
 8027f24:	68b8      	ldr	r0, [r7, #8]
 8027f26:	f017 fa29 	bl	803f37c <_ZdlPvj>
      }
 8027f2a:	bf00      	nop
 8027f2c:	3710      	adds	r7, #16
 8027f2e:	46bd      	mov	sp, r7
 8027f30:	bd80      	pop	{r7, pc}

08027f32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8027f32:	b580      	push	{r7, lr}
 8027f34:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8027f36:	2014      	movs	r0, #20
 8027f38:	f7f8 ffd1 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8027f3c:	4603      	mov	r3, r0
 8027f3e:	4618      	mov	r0, r3
 8027f40:	bd80      	pop	{r7, pc}

08027f42 <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8027f42:	b580      	push	{r7, lr}
 8027f44:	b082      	sub	sp, #8
 8027f46:	af00      	add	r7, sp, #0
 8027f48:	6078      	str	r0, [r7, #4]
 8027f4a:	6878      	ldr	r0, [r7, #4]
 8027f4c:	f001 f924 	bl	8029198 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 8027f50:	687b      	ldr	r3, [r7, #4]
 8027f52:	4618      	mov	r0, r3
 8027f54:	3708      	adds	r7, #8
 8027f56:	46bd      	mov	sp, r7
 8027f58:	bd80      	pop	{r7, pc}

08027f5a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8027f5a:	b580      	push	{r7, lr}
 8027f5c:	b082      	sub	sp, #8
 8027f5e:	af00      	add	r7, sp, #0
 8027f60:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8027f62:	687b      	ldr	r3, [r7, #4]
 8027f64:	2200      	movs	r2, #0
 8027f66:	601a      	str	r2, [r3, #0]
 8027f68:	687b      	ldr	r3, [r7, #4]
 8027f6a:	2200      	movs	r2, #0
 8027f6c:	605a      	str	r2, [r3, #4]
 8027f6e:	687b      	ldr	r3, [r7, #4]
 8027f70:	3308      	adds	r3, #8
 8027f72:	4618      	mov	r0, r3
 8027f74:	f001 f91b 	bl	80291ae <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 8027f78:	687b      	ldr	r3, [r7, #4]
 8027f7a:	3318      	adds	r3, #24
 8027f7c:	4618      	mov	r0, r3
 8027f7e:	f001 f916 	bl	80291ae <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 8027f82:	687b      	ldr	r3, [r7, #4]
 8027f84:	4618      	mov	r0, r3
 8027f86:	3708      	adds	r7, #8
 8027f88:	46bd      	mov	sp, r7
 8027f8a:	bd80      	pop	{r7, pc}

08027f8c <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8027f8c:	b480      	push	{r7}
 8027f8e:	b083      	sub	sp, #12
 8027f90:	af00      	add	r7, sp, #0
 8027f92:	6078      	str	r0, [r7, #4]
 8027f94:	687b      	ldr	r3, [r7, #4]
 8027f96:	4618      	mov	r0, r3
 8027f98:	370c      	adds	r7, #12
 8027f9a:	46bd      	mov	sp, r7
 8027f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fa0:	4770      	bx	lr

08027fa2 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8027fa2:	b590      	push	{r4, r7, lr}
 8027fa4:	b085      	sub	sp, #20
 8027fa6:	af00      	add	r7, sp, #0
 8027fa8:	6078      	str	r0, [r7, #4]
 8027faa:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8027fac:	f107 030c 	add.w	r3, r7, #12
 8027fb0:	6879      	ldr	r1, [r7, #4]
 8027fb2:	4618      	mov	r0, r3
 8027fb4:	f000 f82c 	bl	8028010 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8027fb8:	f107 030c 	add.w	r3, r7, #12
 8027fbc:	6839      	ldr	r1, [r7, #0]
 8027fbe:	4618      	mov	r0, r3
 8027fc0:	f001 f90c 	bl	80291dc <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 8027fc4:	4604      	mov	r4, r0
 8027fc6:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8027fc8:	f107 030c 	add.w	r3, r7, #12
 8027fcc:	4618      	mov	r0, r3
 8027fce:	f000 f830 	bl	8028032 <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8027fd2:	4623      	mov	r3, r4
      }
 8027fd4:	4618      	mov	r0, r3
 8027fd6:	3714      	adds	r7, #20
 8027fd8:	46bd      	mov	sp, r7
 8027fda:	bd90      	pop	{r4, r7, pc}

08027fdc <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8027fdc:	b580      	push	{r7, lr}
 8027fde:	b086      	sub	sp, #24
 8027fe0:	af00      	add	r7, sp, #0
 8027fe2:	60f8      	str	r0, [r7, #12]
 8027fe4:	60b9      	str	r1, [r7, #8]
 8027fe6:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8027fe8:	68bb      	ldr	r3, [r7, #8]
 8027fea:	617b      	str	r3, [r7, #20]
 8027fec:	697a      	ldr	r2, [r7, #20]
 8027fee:	687b      	ldr	r3, [r7, #4]
 8027ff0:	429a      	cmp	r2, r3
 8027ff2:	d209      	bcs.n	8028008 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8027ff4:	68f8      	ldr	r0, [r7, #12]
 8027ff6:	f7ff fede 	bl	8027db6 <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8027ffa:	4602      	mov	r2, r0
 8027ffc:	697b      	ldr	r3, [r7, #20]
 8027ffe:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8028000:	697b      	ldr	r3, [r7, #20]
 8028002:	3304      	adds	r3, #4
 8028004:	617b      	str	r3, [r7, #20]
 8028006:	e7f1      	b.n	8027fec <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 8028008:	bf00      	nop
 802800a:	3718      	adds	r7, #24
 802800c:	46bd      	mov	sp, r7
 802800e:	bd80      	pop	{r7, pc}

08028010 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8028010:	b580      	push	{r7, lr}
 8028012:	b082      	sub	sp, #8
 8028014:	af00      	add	r7, sp, #0
 8028016:	6078      	str	r0, [r7, #4]
 8028018:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 802801a:	6838      	ldr	r0, [r7, #0]
 802801c:	f000 ffc8 	bl	8028fb0 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8028020:	4603      	mov	r3, r0
 8028022:	4619      	mov	r1, r3
 8028024:	6878      	ldr	r0, [r7, #4]
 8028026:	f001 f8e8 	bl	80291fa <_ZNSaIPjEC1IjEERKSaIT_E>
 802802a:	6878      	ldr	r0, [r7, #4]
 802802c:	3708      	adds	r7, #8
 802802e:	46bd      	mov	sp, r7
 8028030:	bd80      	pop	{r7, pc}

08028032 <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8028032:	b580      	push	{r7, lr}
 8028034:	b082      	sub	sp, #8
 8028036:	af00      	add	r7, sp, #0
 8028038:	6078      	str	r0, [r7, #4]
 802803a:	6878      	ldr	r0, [r7, #4]
 802803c:	f001 f8ea 	bl	8029214 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 8028040:	687b      	ldr	r3, [r7, #4]
 8028042:	4618      	mov	r0, r3
 8028044:	3708      	adds	r7, #8
 8028046:	46bd      	mov	sp, r7
 8028048:	bd80      	pop	{r7, pc}

0802804a <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802804a:	b580      	push	{r7, lr}
 802804c:	b084      	sub	sp, #16
 802804e:	af00      	add	r7, sp, #0
 8028050:	60f8      	str	r0, [r7, #12]
 8028052:	60b9      	str	r1, [r7, #8]
 8028054:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8028056:	687a      	ldr	r2, [r7, #4]
 8028058:	68b9      	ldr	r1, [r7, #8]
 802805a:	68f8      	ldr	r0, [r7, #12]
 802805c:	f001 f8e5 	bl	802922a <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 8028060:	bf00      	nop
 8028062:	3710      	adds	r7, #16
 8028064:	46bd      	mov	sp, r7
 8028066:	bd80      	pop	{r7, pc}

08028068 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8028068:	b5b0      	push	{r4, r5, r7, lr}
 802806a:	b08c      	sub	sp, #48	; 0x30
 802806c:	af00      	add	r7, sp, #0
 802806e:	6078      	str	r0, [r7, #4]
 8028070:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8028072:	6878      	ldr	r0, [r7, #4]
 8028074:	f001 f8e9 	bl	802924a <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8028078:	4602      	mov	r2, r0
 802807a:	f107 0308 	add.w	r3, r7, #8
 802807e:	4611      	mov	r1, r2
 8028080:	4618      	mov	r0, r3
 8028082:	f001 f911 	bl	80292a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 8028086:	6838      	ldr	r0, [r7, #0]
 8028088:	f001 f8df 	bl	802924a <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 802808c:	4602      	mov	r2, r0
 802808e:	687b      	ldr	r3, [r7, #4]
 8028090:	461c      	mov	r4, r3
 8028092:	4615      	mov	r5, r2
 8028094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802809a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802809c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80280a0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80280a4:	f107 0308 	add.w	r3, r7, #8
 80280a8:	4618      	mov	r0, r3
 80280aa:	f001 f8ce 	bl	802924a <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80280ae:	4602      	mov	r2, r0
 80280b0:	683b      	ldr	r3, [r7, #0]
 80280b2:	461c      	mov	r4, r3
 80280b4:	4615      	mov	r5, r2
 80280b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80280b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80280ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80280bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80280be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80280c2:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80280c6:	bf00      	nop
 80280c8:	3730      	adds	r7, #48	; 0x30
 80280ca:	46bd      	mov	sp, r7
 80280cc:	bdb0      	pop	{r4, r5, r7, pc}

080280ce <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80280ce:	b590      	push	{r4, r7, lr}
 80280d0:	b08b      	sub	sp, #44	; 0x2c
 80280d2:	af00      	add	r7, sp, #0
 80280d4:	6078      	str	r0, [r7, #4]
 80280d6:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80280d8:	f107 0308 	add.w	r3, r7, #8
 80280dc:	6839      	ldr	r1, [r7, #0]
 80280de:	4618      	mov	r0, r3
 80280e0:	f7fc f8d2 	bl	8024288 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80280e4:	f107 0318 	add.w	r3, r7, #24
 80280e8:	6879      	ldr	r1, [r7, #4]
 80280ea:	4618      	mov	r0, r3
 80280ec:	f7fc f8b2 	bl	8024254 <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 80280f0:	687b      	ldr	r3, [r7, #4]
 80280f2:	4618      	mov	r0, r3
 80280f4:	f7fc f8bd 	bl	8024272 <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80280f8:	4603      	mov	r3, r0
 80280fa:	f107 0218 	add.w	r2, r7, #24
 80280fe:	f107 0108 	add.w	r1, r7, #8
 8028102:	6878      	ldr	r0, [r7, #4]
 8028104:	f7fc f8dc 	bl	80242c0 <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8028108:	6878      	ldr	r0, [r7, #4]
 802810a:	683b      	ldr	r3, [r7, #0]
 802810c:	68db      	ldr	r3, [r3, #12]
 802810e:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8028110:	687b      	ldr	r3, [r7, #4]
 8028112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8028114:	3304      	adds	r3, #4
 8028116:	461a      	mov	r2, r3
 8028118:	f7fc f857 	bl	80241ca <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 802811c:	687b      	ldr	r3, [r7, #4]
 802811e:	683a      	ldr	r2, [r7, #0]
 8028120:	f103 0418 	add.w	r4, r3, #24
 8028124:	4613      	mov	r3, r2
 8028126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 802812c:	bf00      	nop
 802812e:	372c      	adds	r7, #44	; 0x2c
 8028130:	46bd      	mov	sp, r7
 8028132:	bd90      	pop	{r4, r7, pc}

08028134 <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8028134:	b580      	push	{r7, lr}
 8028136:	b084      	sub	sp, #16
 8028138:	af00      	add	r7, sp, #0
 802813a:	60f8      	str	r0, [r7, #12]
 802813c:	60b9      	str	r1, [r7, #8]
 802813e:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8028140:	68b8      	ldr	r0, [r7, #8]
 8028142:	f001 f8d0 	bl	80292e6 <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 8028146:	bf00      	nop
 8028148:	3710      	adds	r7, #16
 802814a:	46bd      	mov	sp, r7
 802814c:	bd80      	pop	{r7, pc}

0802814e <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 802814e:	b5b0      	push	{r4, r5, r7, lr}
 8028150:	b08c      	sub	sp, #48	; 0x30
 8028152:	af00      	add	r7, sp, #0
 8028154:	6078      	str	r0, [r7, #4]
 8028156:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8028158:	6878      	ldr	r0, [r7, #4]
 802815a:	f001 f8cf 	bl	80292fc <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 802815e:	4602      	mov	r2, r0
 8028160:	f107 0308 	add.w	r3, r7, #8
 8028164:	4611      	mov	r1, r2
 8028166:	4618      	mov	r0, r3
 8028168:	f001 f8f7 	bl	802935a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 802816c:	6838      	ldr	r0, [r7, #0]
 802816e:	f001 f8c5 	bl	80292fc <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8028172:	4602      	mov	r2, r0
 8028174:	687b      	ldr	r3, [r7, #4]
 8028176:	461c      	mov	r4, r3
 8028178:	4615      	mov	r5, r2
 802817a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802817c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802817e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028182:	e895 0003 	ldmia.w	r5, {r0, r1}
 8028186:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 802818a:	f107 0308 	add.w	r3, r7, #8
 802818e:	4618      	mov	r0, r3
 8028190:	f001 f8b4 	bl	80292fc <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8028194:	4602      	mov	r2, r0
 8028196:	683b      	ldr	r3, [r7, #0]
 8028198:	461c      	mov	r4, r3
 802819a:	4615      	mov	r5, r2
 802819c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802819e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80281a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80281a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80281a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80281a8:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80281ac:	bf00      	nop
 80281ae:	3730      	adds	r7, #48	; 0x30
 80281b0:	46bd      	mov	sp, r7
 80281b2:	bdb0      	pop	{r4, r5, r7, pc}

080281b4 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80281b4:	b590      	push	{r4, r7, lr}
 80281b6:	b08b      	sub	sp, #44	; 0x2c
 80281b8:	af00      	add	r7, sp, #0
 80281ba:	6078      	str	r0, [r7, #4]
 80281bc:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 80281be:	f107 0308 	add.w	r3, r7, #8
 80281c2:	6839      	ldr	r1, [r7, #0]
 80281c4:	4618      	mov	r0, r3
 80281c6:	f7fc f902 	bl	80243ce <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80281ca:	f107 0318 	add.w	r3, r7, #24
 80281ce:	6879      	ldr	r1, [r7, #4]
 80281d0:	4618      	mov	r0, r3
 80281d2:	f7fc f8e2 	bl	802439a <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 80281d6:	687b      	ldr	r3, [r7, #4]
 80281d8:	4618      	mov	r0, r3
 80281da:	f7fc f8ed 	bl	80243b8 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80281de:	4603      	mov	r3, r0
 80281e0:	f107 0218 	add.w	r2, r7, #24
 80281e4:	f107 0108 	add.w	r1, r7, #8
 80281e8:	6878      	ldr	r0, [r7, #4]
 80281ea:	f7fc f90c 	bl	8024406 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80281ee:	6878      	ldr	r0, [r7, #4]
 80281f0:	683b      	ldr	r3, [r7, #0]
 80281f2:	68db      	ldr	r3, [r3, #12]
 80281f4:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80281f6:	687b      	ldr	r3, [r7, #4]
 80281f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80281fa:	3304      	adds	r3, #4
 80281fc:	461a      	mov	r2, r3
 80281fe:	f7fd fbd5 	bl	80259ac <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8028202:	687b      	ldr	r3, [r7, #4]
 8028204:	683a      	ldr	r2, [r7, #0]
 8028206:	f103 0418 	add.w	r4, r3, #24
 802820a:	4613      	mov	r3, r2
 802820c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802820e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8028212:	bf00      	nop
 8028214:	372c      	adds	r7, #44	; 0x2c
 8028216:	46bd      	mov	sp, r7
 8028218:	bd90      	pop	{r4, r7, pc}

0802821a <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 802821a:	b580      	push	{r7, lr}
 802821c:	b084      	sub	sp, #16
 802821e:	af00      	add	r7, sp, #0
 8028220:	60f8      	str	r0, [r7, #12]
 8028222:	60b9      	str	r1, [r7, #8]
 8028224:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8028226:	68b8      	ldr	r0, [r7, #8]
 8028228:	f001 f8b6 	bl	8029398 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 802822c:	bf00      	nop
 802822e:	3710      	adds	r7, #16
 8028230:	46bd      	mov	sp, r7
 8028232:	bd80      	pop	{r7, pc}

08028234 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8028234:	b5b0      	push	{r4, r5, r7, lr}
 8028236:	b08c      	sub	sp, #48	; 0x30
 8028238:	af00      	add	r7, sp, #0
 802823a:	6078      	str	r0, [r7, #4]
 802823c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 802823e:	6878      	ldr	r0, [r7, #4]
 8028240:	f001 f8b5 	bl	80293ae <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8028244:	4602      	mov	r2, r0
 8028246:	f107 0308 	add.w	r3, r7, #8
 802824a:	4611      	mov	r1, r2
 802824c:	4618      	mov	r0, r3
 802824e:	f001 f8dd 	bl	802940c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8028252:	6838      	ldr	r0, [r7, #0]
 8028254:	f001 f8ab 	bl	80293ae <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8028258:	4602      	mov	r2, r0
 802825a:	687b      	ldr	r3, [r7, #4]
 802825c:	461c      	mov	r4, r3
 802825e:	4615      	mov	r5, r2
 8028260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028268:	e895 0003 	ldmia.w	r5, {r0, r1}
 802826c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8028270:	f107 0308 	add.w	r3, r7, #8
 8028274:	4618      	mov	r0, r3
 8028276:	f001 f89a 	bl	80293ae <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 802827a:	4602      	mov	r2, r0
 802827c:	683b      	ldr	r3, [r7, #0]
 802827e:	461c      	mov	r4, r3
 8028280:	4615      	mov	r5, r2
 8028282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802828a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802828e:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8028292:	bf00      	nop
 8028294:	3730      	adds	r7, #48	; 0x30
 8028296:	46bd      	mov	sp, r7
 8028298:	bdb0      	pop	{r4, r5, r7, pc}

0802829a <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 802829a:	b580      	push	{r7, lr}
 802829c:	b084      	sub	sp, #16
 802829e:	af00      	add	r7, sp, #0
 80282a0:	60f8      	str	r0, [r7, #12]
 80282a2:	60b9      	str	r1, [r7, #8]
 80282a4:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80282a6:	68b8      	ldr	r0, [r7, #8]
 80282a8:	f001 f8cf 	bl	802944a <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 80282ac:	bf00      	nop
 80282ae:	3710      	adds	r7, #16
 80282b0:	46bd      	mov	sp, r7
 80282b2:	bd80      	pop	{r7, pc}

080282b4 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 80282b4:	b5b0      	push	{r4, r5, r7, lr}
 80282b6:	b08c      	sub	sp, #48	; 0x30
 80282b8:	af00      	add	r7, sp, #0
 80282ba:	6078      	str	r0, [r7, #4]
 80282bc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80282be:	6878      	ldr	r0, [r7, #4]
 80282c0:	f001 f8ce 	bl	8029460 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 80282c4:	4602      	mov	r2, r0
 80282c6:	f107 0308 	add.w	r3, r7, #8
 80282ca:	4611      	mov	r1, r2
 80282cc:	4618      	mov	r0, r3
 80282ce:	f001 f8f6 	bl	80294be <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 80282d2:	6838      	ldr	r0, [r7, #0]
 80282d4:	f001 f8c4 	bl	8029460 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 80282d8:	4602      	mov	r2, r0
 80282da:	687b      	ldr	r3, [r7, #4]
 80282dc:	461c      	mov	r4, r3
 80282de:	4615      	mov	r5, r2
 80282e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80282e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80282e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80282e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80282e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80282ec:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80282f0:	f107 0308 	add.w	r3, r7, #8
 80282f4:	4618      	mov	r0, r3
 80282f6:	f001 f8b3 	bl	8029460 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 80282fa:	4602      	mov	r2, r0
 80282fc:	683b      	ldr	r3, [r7, #0]
 80282fe:	461c      	mov	r4, r3
 8028300:	4615      	mov	r5, r2
 8028302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8028306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8028308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802830a:	e895 0003 	ldmia.w	r5, {r0, r1}
 802830e:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8028312:	bf00      	nop
 8028314:	3730      	adds	r7, #48	; 0x30
 8028316:	46bd      	mov	sp, r7
 8028318:	bdb0      	pop	{r4, r5, r7, pc}

0802831a <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>:
      _M_erase_at_end(iterator __pos)
 802831a:	b590      	push	{r4, r7, lr}
 802831c:	b08b      	sub	sp, #44	; 0x2c
 802831e:	af00      	add	r7, sp, #0
 8028320:	6078      	str	r0, [r7, #4]
 8028322:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8028324:	f107 0308 	add.w	r3, r7, #8
 8028328:	6839      	ldr	r1, [r7, #0]
 802832a:	4618      	mov	r0, r3
 802832c:	f7fd f8b2 	bl	8025494 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8028330:	f107 0318 	add.w	r3, r7, #24
 8028334:	6879      	ldr	r1, [r7, #4]
 8028336:	4618      	mov	r0, r3
 8028338:	f7fd f892 	bl	8025460 <_ZNSt5dequeIjSaIjEE3endEv>
 802833c:	687b      	ldr	r3, [r7, #4]
 802833e:	4618      	mov	r0, r3
 8028340:	f7fd f89d 	bl	802547e <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8028344:	4603      	mov	r3, r0
 8028346:	f107 0218 	add.w	r2, r7, #24
 802834a:	f107 0108 	add.w	r1, r7, #8
 802834e:	6878      	ldr	r0, [r7, #4]
 8028350:	f7fd f8bc 	bl	80254cc <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8028354:	6878      	ldr	r0, [r7, #4]
 8028356:	683b      	ldr	r3, [r7, #0]
 8028358:	68db      	ldr	r3, [r3, #12]
 802835a:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 802835c:	687b      	ldr	r3, [r7, #4]
 802835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8028360:	3304      	adds	r3, #4
 8028362:	461a      	mov	r2, r3
 8028364:	f7fe faf2 	bl	802694c <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	this->_M_impl._M_finish = __pos;
 8028368:	687b      	ldr	r3, [r7, #4]
 802836a:	683a      	ldr	r2, [r7, #0]
 802836c:	f103 0418 	add.w	r4, r3, #24
 8028370:	4613      	mov	r3, r2
 8028372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8028378:	bf00      	nop
 802837a:	372c      	adds	r7, #44	; 0x2c
 802837c:	46bd      	mov	sp, r7
 802837e:	bd90      	pop	{r4, r7, pc}

08028380 <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8028380:	b580      	push	{r7, lr}
 8028382:	b084      	sub	sp, #16
 8028384:	af00      	add	r7, sp, #0
 8028386:	60f8      	str	r0, [r7, #12]
 8028388:	60b9      	str	r1, [r7, #8]
 802838a:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 802838c:	68b8      	ldr	r0, [r7, #8]
 802838e:	f001 f8b5 	bl	80294fc <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>
 8028392:	bf00      	nop
 8028394:	3710      	adds	r7, #16
 8028396:	46bd      	mov	sp, r7
 8028398:	bd80      	pop	{r7, pc}

0802839a <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802839a:	b580      	push	{r7, lr}
 802839c:	b084      	sub	sp, #16
 802839e:	af00      	add	r7, sp, #0
 80283a0:	60f8      	str	r0, [r7, #12]
 80283a2:	60b9      	str	r1, [r7, #8]
 80283a4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80283a6:	68f8      	ldr	r0, [r7, #12]
 80283a8:	f001 f8b3 	bl	8029512 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 80283ac:	4602      	mov	r2, r0
 80283ae:	68bb      	ldr	r3, [r7, #8]
 80283b0:	4293      	cmp	r3, r2
 80283b2:	bf8c      	ite	hi
 80283b4:	2301      	movhi	r3, #1
 80283b6:	2300      	movls	r3, #0
 80283b8:	b2db      	uxtb	r3, r3
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	d001      	beq.n	80283c2 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80283be:	f016 fff0 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80283c2:	68bb      	ldr	r3, [r7, #8]
 80283c4:	009b      	lsls	r3, r3, #2
 80283c6:	4618      	mov	r0, r3
 80283c8:	f016 ffda 	bl	803f380 <_Znwj>
 80283cc:	4603      	mov	r3, r0
      }
 80283ce:	4618      	mov	r0, r3
 80283d0:	3710      	adds	r7, #16
 80283d2:	46bd      	mov	sp, r7
 80283d4:	bd80      	pop	{r7, pc}

080283d6 <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80283d6:	b580      	push	{r7, lr}
 80283d8:	b084      	sub	sp, #16
 80283da:	af00      	add	r7, sp, #0
 80283dc:	60f8      	str	r0, [r7, #12]
 80283de:	60b9      	str	r1, [r7, #8]
 80283e0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80283e2:	687a      	ldr	r2, [r7, #4]
 80283e4:	4613      	mov	r3, r2
 80283e6:	009b      	lsls	r3, r3, #2
 80283e8:	4413      	add	r3, r2
 80283ea:	009b      	lsls	r3, r3, #2
 80283ec:	4619      	mov	r1, r3
 80283ee:	68b8      	ldr	r0, [r7, #8]
 80283f0:	f016 ffc4 	bl	803f37c <_ZdlPvj>
      }
 80283f4:	bf00      	nop
 80283f6:	3710      	adds	r7, #16
 80283f8:	46bd      	mov	sp, r7
 80283fa:	bd80      	pop	{r7, pc}

080283fc <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80283fc:	b480      	push	{r7}
 80283fe:	b083      	sub	sp, #12
 8028400:	af00      	add	r7, sp, #0
 8028402:	6078      	str	r0, [r7, #4]
 8028404:	687b      	ldr	r3, [r7, #4]
 8028406:	4618      	mov	r0, r3
 8028408:	370c      	adds	r7, #12
 802840a:	46bd      	mov	sp, r7
 802840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028410:	4770      	bx	lr

08028412 <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8028412:	b580      	push	{r7, lr}
 8028414:	b082      	sub	sp, #8
 8028416:	af00      	add	r7, sp, #0
 8028418:	6078      	str	r0, [r7, #4]
 802841a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 802841c:	6839      	ldr	r1, [r7, #0]
 802841e:	6878      	ldr	r0, [r7, #4]
 8028420:	f001 f883 	bl	802952a <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 8028424:	bf00      	nop
 8028426:	3708      	adds	r7, #8
 8028428:	46bd      	mov	sp, r7
 802842a:	bd80      	pop	{r7, pc}

0802842c <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 802842c:	b480      	push	{r7}
 802842e:	b083      	sub	sp, #12
 8028430:	af00      	add	r7, sp, #0
 8028432:	6078      	str	r0, [r7, #4]
 8028434:	687b      	ldr	r3, [r7, #4]
 8028436:	4618      	mov	r0, r3
 8028438:	370c      	adds	r7, #12
 802843a:	46bd      	mov	sp, r7
 802843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028440:	4770      	bx	lr

08028442 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8028442:	b480      	push	{r7}
 8028444:	b083      	sub	sp, #12
 8028446:	af00      	add	r7, sp, #0
 8028448:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 802844a:	687b      	ldr	r3, [r7, #4]
 802844c:	2200      	movs	r2, #0
 802844e:	601a      	str	r2, [r3, #0]
 8028450:	687b      	ldr	r3, [r7, #4]
 8028452:	2200      	movs	r2, #0
 8028454:	605a      	str	r2, [r3, #4]
 8028456:	687b      	ldr	r3, [r7, #4]
 8028458:	2200      	movs	r2, #0
 802845a:	609a      	str	r2, [r3, #8]
 802845c:	687b      	ldr	r3, [r7, #4]
 802845e:	2200      	movs	r2, #0
 8028460:	60da      	str	r2, [r3, #12]
 8028462:	687b      	ldr	r3, [r7, #4]
 8028464:	4618      	mov	r0, r3
 8028466:	370c      	adds	r7, #12
 8028468:	46bd      	mov	sp, r7
 802846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802846e:	4770      	bx	lr

08028470 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8028470:	b580      	push	{r7, lr}
 8028472:	b082      	sub	sp, #8
 8028474:	af00      	add	r7, sp, #0
 8028476:	6078      	str	r0, [r7, #4]
 8028478:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 802847a:	2200      	movs	r2, #0
 802847c:	6839      	ldr	r1, [r7, #0]
 802847e:	6878      	ldr	r0, [r7, #4]
 8028480:	f001 f86b 	bl	802955a <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 8028484:	4603      	mov	r3, r0
 8028486:	4618      	mov	r0, r3
 8028488:	3708      	adds	r7, #8
 802848a:	46bd      	mov	sp, r7
 802848c:	bd80      	pop	{r7, pc}

0802848e <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802848e:	b580      	push	{r7, lr}
 8028490:	b084      	sub	sp, #16
 8028492:	af00      	add	r7, sp, #0
 8028494:	60f8      	str	r0, [r7, #12]
 8028496:	60b9      	str	r1, [r7, #8]
 8028498:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 802849a:	687a      	ldr	r2, [r7, #4]
 802849c:	68b9      	ldr	r1, [r7, #8]
 802849e:	68f8      	ldr	r0, [r7, #12]
 80284a0:	f001 f879 	bl	8029596 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 80284a4:	bf00      	nop
 80284a6:	3710      	adds	r7, #16
 80284a8:	46bd      	mov	sp, r7
 80284aa:	bd80      	pop	{r7, pc}

080284ac <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80284ac:	b480      	push	{r7}
 80284ae:	b083      	sub	sp, #12
 80284b0:	af00      	add	r7, sp, #0
 80284b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80284b4:	687b      	ldr	r3, [r7, #4]
 80284b6:	4618      	mov	r0, r3
 80284b8:	370c      	adds	r7, #12
 80284ba:	46bd      	mov	sp, r7
 80284bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284c0:	4770      	bx	lr

080284c2 <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80284c2:	b580      	push	{r7, lr}
 80284c4:	b082      	sub	sp, #8
 80284c6:	af00      	add	r7, sp, #0
 80284c8:	6078      	str	r0, [r7, #4]
 80284ca:	6039      	str	r1, [r7, #0]
 80284cc:	6878      	ldr	r0, [r7, #4]
 80284ce:	f001 f872 	bl	80295b6 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 80284d2:	687b      	ldr	r3, [r7, #4]
 80284d4:	4618      	mov	r0, r3
 80284d6:	3708      	adds	r7, #8
 80284d8:	46bd      	mov	sp, r7
 80284da:	bd80      	pop	{r7, pc}

080284dc <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80284dc:	b480      	push	{r7}
 80284de:	b083      	sub	sp, #12
 80284e0:	af00      	add	r7, sp, #0
 80284e2:	6078      	str	r0, [r7, #4]
 80284e4:	687b      	ldr	r3, [r7, #4]
 80284e6:	4618      	mov	r0, r3
 80284e8:	370c      	adds	r7, #12
 80284ea:	46bd      	mov	sp, r7
 80284ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284f0:	4770      	bx	lr

080284f2 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80284f2:	b580      	push	{r7, lr}
 80284f4:	b084      	sub	sp, #16
 80284f6:	af00      	add	r7, sp, #0
 80284f8:	60f8      	str	r0, [r7, #12]
 80284fa:	60b9      	str	r1, [r7, #8]
 80284fc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80284fe:	687b      	ldr	r3, [r7, #4]
 8028500:	009b      	lsls	r3, r3, #2
 8028502:	4619      	mov	r1, r3
 8028504:	68b8      	ldr	r0, [r7, #8]
 8028506:	f016 ff39 	bl	803f37c <_ZdlPvj>
      }
 802850a:	bf00      	nop
 802850c:	3710      	adds	r7, #16
 802850e:	46bd      	mov	sp, r7
 8028510:	bd80      	pop	{r7, pc}

08028512 <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8028512:	b580      	push	{r7, lr}
 8028514:	b082      	sub	sp, #8
 8028516:	af00      	add	r7, sp, #0
 8028518:	6078      	str	r0, [r7, #4]
 802851a:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 802851c:	6839      	ldr	r1, [r7, #0]
 802851e:	6878      	ldr	r0, [r7, #4]
 8028520:	f001 f854 	bl	80295cc <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 8028524:	bf00      	nop
 8028526:	3708      	adds	r7, #8
 8028528:	46bd      	mov	sp, r7
 802852a:	bd80      	pop	{r7, pc}

0802852c <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 802852c:	b590      	push	{r4, r7, lr}
 802852e:	b085      	sub	sp, #20
 8028530:	af00      	add	r7, sp, #0
 8028532:	60f8      	str	r0, [r7, #12]
 8028534:	60b9      	str	r1, [r7, #8]
 8028536:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028538:	68f8      	ldr	r0, [r7, #12]
 802853a:	f001 f85f 	bl	80295fc <_ZSt12__miter_baseIPP7RequestET_S3_>
 802853e:	4604      	mov	r4, r0
 8028540:	68b8      	ldr	r0, [r7, #8]
 8028542:	f001 f85b 	bl	80295fc <_ZSt12__miter_baseIPP7RequestET_S3_>
 8028546:	4603      	mov	r3, r0
 8028548:	687a      	ldr	r2, [r7, #4]
 802854a:	4619      	mov	r1, r3
 802854c:	4620      	mov	r0, r4
 802854e:	f001 f860 	bl	8029612 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8028552:	4603      	mov	r3, r0
    }
 8028554:	4618      	mov	r0, r3
 8028556:	3714      	adds	r7, #20
 8028558:	46bd      	mov	sp, r7
 802855a:	bd90      	pop	{r4, r7, pc}

0802855c <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 802855c:	b590      	push	{r4, r7, lr}
 802855e:	b085      	sub	sp, #20
 8028560:	af00      	add	r7, sp, #0
 8028562:	60f8      	str	r0, [r7, #12]
 8028564:	60b9      	str	r1, [r7, #8]
 8028566:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028568:	68f8      	ldr	r0, [r7, #12]
 802856a:	f001 f847 	bl	80295fc <_ZSt12__miter_baseIPP7RequestET_S3_>
 802856e:	4604      	mov	r4, r0
 8028570:	68b8      	ldr	r0, [r7, #8]
 8028572:	f001 f843 	bl	80295fc <_ZSt12__miter_baseIPP7RequestET_S3_>
 8028576:	4603      	mov	r3, r0
 8028578:	687a      	ldr	r2, [r7, #4]
 802857a:	4619      	mov	r1, r3
 802857c:	4620      	mov	r0, r4
 802857e:	f001 f86b 	bl	8029658 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8028582:	4603      	mov	r3, r0
    }
 8028584:	4618      	mov	r0, r3
 8028586:	3714      	adds	r7, #20
 8028588:	46bd      	mov	sp, r7
 802858a:	bd90      	pop	{r4, r7, pc}

0802858c <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802858c:	b580      	push	{r7, lr}
 802858e:	b084      	sub	sp, #16
 8028590:	af00      	add	r7, sp, #0
 8028592:	60f8      	str	r0, [r7, #12]
 8028594:	60b9      	str	r1, [r7, #8]
 8028596:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8028598:	68f8      	ldr	r0, [r7, #12]
 802859a:	f000 f8e7 	bl	802876c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 802859e:	4602      	mov	r2, r0
 80285a0:	68bb      	ldr	r3, [r7, #8]
 80285a2:	4293      	cmp	r3, r2
 80285a4:	bf8c      	ite	hi
 80285a6:	2301      	movhi	r3, #1
 80285a8:	2300      	movls	r3, #0
 80285aa:	b2db      	uxtb	r3, r3
 80285ac:	2b00      	cmp	r3, #0
 80285ae:	d001      	beq.n	80285b4 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80285b0:	f016 fef7 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80285b4:	68ba      	ldr	r2, [r7, #8]
 80285b6:	4613      	mov	r3, r2
 80285b8:	009b      	lsls	r3, r3, #2
 80285ba:	4413      	add	r3, r2
 80285bc:	009b      	lsls	r3, r3, #2
 80285be:	4618      	mov	r0, r3
 80285c0:	f016 fede 	bl	803f380 <_Znwj>
 80285c4:	4603      	mov	r3, r0
      }
 80285c6:	4618      	mov	r0, r3
 80285c8:	3710      	adds	r7, #16
 80285ca:	46bd      	mov	sp, r7
 80285cc:	bd80      	pop	{r7, pc}

080285ce <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80285ce:	b480      	push	{r7}
 80285d0:	b083      	sub	sp, #12
 80285d2:	af00      	add	r7, sp, #0
 80285d4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80285d6:	687b      	ldr	r3, [r7, #4]
 80285d8:	4618      	mov	r0, r3
 80285da:	370c      	adds	r7, #12
 80285dc:	46bd      	mov	sp, r7
 80285de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80285e2:	4770      	bx	lr

080285e4 <_ZNSt5dequeI8ResponceSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80285e4:	b580      	push	{r7, lr}
 80285e6:	b084      	sub	sp, #16
 80285e8:	af00      	add	r7, sp, #0
 80285ea:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80285ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80285f0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80285f2:	6878      	ldr	r0, [r7, #4]
 80285f4:	f001 f853 	bl	802969e <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>
 80285f8:	4603      	mov	r3, r0
 80285fa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80285fc:	f107 0208 	add.w	r2, r7, #8
 8028600:	f107 030c 	add.w	r3, r7, #12
 8028604:	4611      	mov	r1, r2
 8028606:	4618      	mov	r0, r3
 8028608:	f7fd fbd3 	bl	8025db2 <_ZSt3minIjERKT_S2_S2_>
 802860c:	4603      	mov	r3, r0
 802860e:	681b      	ldr	r3, [r3, #0]
      }
 8028610:	4618      	mov	r0, r3
 8028612:	3710      	adds	r7, #16
 8028614:	46bd      	mov	sp, r7
 8028616:	bd80      	pop	{r7, pc}

08028618 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8028618:	b590      	push	{r4, r7, lr}
 802861a:	b08b      	sub	sp, #44	; 0x2c
 802861c:	af00      	add	r7, sp, #0
 802861e:	60f8      	str	r0, [r7, #12]
 8028620:	60b9      	str	r1, [r7, #8]
 8028622:	4613      	mov	r3, r2
 8028624:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8028626:	68fb      	ldr	r3, [r7, #12]
 8028628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802862a:	68fb      	ldr	r3, [r7, #12]
 802862c:	695b      	ldr	r3, [r3, #20]
 802862e:	1ad3      	subs	r3, r2, r3
 8028630:	109b      	asrs	r3, r3, #2
 8028632:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8028634:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8028636:	68bb      	ldr	r3, [r7, #8]
 8028638:	6a3a      	ldr	r2, [r7, #32]
 802863a:	4413      	add	r3, r2
 802863c:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 802863e:	68fb      	ldr	r3, [r7, #12]
 8028640:	685a      	ldr	r2, [r3, #4]
 8028642:	69fb      	ldr	r3, [r7, #28]
 8028644:	005b      	lsls	r3, r3, #1
 8028646:	429a      	cmp	r2, r3
 8028648:	d92d      	bls.n	80286a6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802864a:	68fb      	ldr	r3, [r7, #12]
 802864c:	681a      	ldr	r2, [r3, #0]
 802864e:	68fb      	ldr	r3, [r7, #12]
 8028650:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8028652:	69fb      	ldr	r3, [r7, #28]
 8028654:	1acb      	subs	r3, r1, r3
 8028656:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028658:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802865a:	79fb      	ldrb	r3, [r7, #7]
 802865c:	2b00      	cmp	r3, #0
 802865e:	d002      	beq.n	8028666 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8028660:	68bb      	ldr	r3, [r7, #8]
 8028662:	009b      	lsls	r3, r3, #2
 8028664:	e000      	b.n	8028668 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8028666:	2300      	movs	r3, #0
 8028668:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802866a:	4413      	add	r3, r2
 802866c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 802866e:	68fb      	ldr	r3, [r7, #12]
 8028670:	695b      	ldr	r3, [r3, #20]
 8028672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028674:	429a      	cmp	r2, r3
 8028676:	d209      	bcs.n	802868c <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8028678:	68fb      	ldr	r3, [r7, #12]
 802867a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 802867c:	68fb      	ldr	r3, [r7, #12]
 802867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8028680:	3304      	adds	r3, #4
 8028682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028684:	4619      	mov	r1, r3
 8028686:	f001 f816 	bl	80296b6 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
 802868a:	e048      	b.n	802871e <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802868c:	68fb      	ldr	r3, [r7, #12]
 802868e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8028690:	68fb      	ldr	r3, [r7, #12]
 8028692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8028694:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8028696:	6a3b      	ldr	r3, [r7, #32]
 8028698:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802869a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802869c:	4413      	add	r3, r2
 802869e:	461a      	mov	r2, r3
 80286a0:	f001 f821 	bl	80296e6 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>
 80286a4:	e03b      	b.n	802871e <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80286a6:	68fb      	ldr	r3, [r7, #12]
 80286a8:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80286aa:	68fb      	ldr	r3, [r7, #12]
 80286ac:	3304      	adds	r3, #4
 80286ae:	f107 0208 	add.w	r2, r7, #8
 80286b2:	4611      	mov	r1, r2
 80286b4:	4618      	mov	r0, r3
 80286b6:	f7fc fff6 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 80286ba:	4603      	mov	r3, r0
 80286bc:	681b      	ldr	r3, [r3, #0]
 80286be:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80286c0:	3302      	adds	r3, #2
 80286c2:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80286c4:	68fb      	ldr	r3, [r7, #12]
 80286c6:	69b9      	ldr	r1, [r7, #24]
 80286c8:	4618      	mov	r0, r3
 80286ca:	f7fe fadf 	bl	8026c8c <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 80286ce:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80286d0:	69ba      	ldr	r2, [r7, #24]
 80286d2:	69fb      	ldr	r3, [r7, #28]
 80286d4:	1ad3      	subs	r3, r2, r3
 80286d6:	085b      	lsrs	r3, r3, #1
 80286d8:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80286da:	79fb      	ldrb	r3, [r7, #7]
 80286dc:	2b00      	cmp	r3, #0
 80286de:	d002      	beq.n	80286e6 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xce>
 80286e0:	68bb      	ldr	r3, [r7, #8]
 80286e2:	009b      	lsls	r3, r3, #2
 80286e4:	e000      	b.n	80286e8 <_ZNSt5dequeI8ResponceSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80286e6:	2300      	movs	r3, #0
 80286e8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80286ea:	697a      	ldr	r2, [r7, #20]
 80286ec:	4413      	add	r3, r2
 80286ee:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80286f0:	68fb      	ldr	r3, [r7, #12]
 80286f2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80286f4:	68fb      	ldr	r3, [r7, #12]
 80286f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80286f8:	3304      	adds	r3, #4
 80286fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80286fc:	4619      	mov	r1, r3
 80286fe:	f000 ffda 	bl	80296b6 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8028702:	68f8      	ldr	r0, [r7, #12]
 8028704:	68fb      	ldr	r3, [r7, #12]
 8028706:	6819      	ldr	r1, [r3, #0]
 8028708:	68fb      	ldr	r3, [r7, #12]
 802870a:	685b      	ldr	r3, [r3, #4]
 802870c:	461a      	mov	r2, r3
 802870e:	f7fd f967 	bl	80259e0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8028712:	68fb      	ldr	r3, [r7, #12]
 8028714:	697a      	ldr	r2, [r7, #20]
 8028716:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8028718:	68fb      	ldr	r3, [r7, #12]
 802871a:	69ba      	ldr	r2, [r7, #24]
 802871c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 802871e:	68fb      	ldr	r3, [r7, #12]
 8028720:	3308      	adds	r3, #8
 8028722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028724:	4618      	mov	r0, r3
 8028726:	f7fe fae8 	bl	8026cfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802872a:	68fb      	ldr	r3, [r7, #12]
 802872c:	f103 0018 	add.w	r0, r3, #24
 8028730:	6a3a      	ldr	r2, [r7, #32]
 8028732:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8028736:	4413      	add	r3, r2
 8028738:	009b      	lsls	r3, r3, #2
 802873a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802873c:	4413      	add	r3, r2
 802873e:	4619      	mov	r1, r3
 8028740:	f7fe fadb 	bl	8026cfa <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8028744:	bf00      	nop
 8028746:	372c      	adds	r7, #44	; 0x2c
 8028748:	46bd      	mov	sp, r7
 802874a:	bd90      	pop	{r4, r7, pc}

0802874c <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 802874c:	b580      	push	{r7, lr}
 802874e:	b082      	sub	sp, #8
 8028750:	af00      	add	r7, sp, #0
 8028752:	6078      	str	r0, [r7, #4]
 8028754:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8028756:	2200      	movs	r2, #0
 8028758:	6839      	ldr	r1, [r7, #0]
 802875a:	6878      	ldr	r0, [r7, #4]
 802875c:	f000 ffdb 	bl	8029716 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 8028760:	4603      	mov	r3, r0
 8028762:	4618      	mov	r0, r3
 8028764:	3708      	adds	r7, #8
 8028766:	46bd      	mov	sp, r7
 8028768:	bd80      	pop	{r7, pc}
	...

0802876c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802876c:	b480      	push	{r7}
 802876e:	b083      	sub	sp, #12
 8028770:	af00      	add	r7, sp, #0
 8028772:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8028774:	4b03      	ldr	r3, [pc, #12]	; (8028784 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8028776:	4618      	mov	r0, r3
 8028778:	370c      	adds	r7, #12
 802877a:	46bd      	mov	sp, r7
 802877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028780:	4770      	bx	lr
 8028782:	bf00      	nop
 8028784:	06666666 	.word	0x06666666

08028788 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8028788:	b580      	push	{r7, lr}
 802878a:	b082      	sub	sp, #8
 802878c:	af00      	add	r7, sp, #0
 802878e:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8028790:	6878      	ldr	r0, [r7, #4]
 8028792:	f000 ffde 	bl	8029752 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8028796:	4603      	mov	r3, r0
      }
 8028798:	4618      	mov	r0, r3
 802879a:	3708      	adds	r7, #8
 802879c:	46bd      	mov	sp, r7
 802879e:	bd80      	pop	{r7, pc}

080287a0 <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80287a0:	b580      	push	{r7, lr}
 80287a2:	b084      	sub	sp, #16
 80287a4:	af00      	add	r7, sp, #0
 80287a6:	6078      	str	r0, [r7, #4]
 80287a8:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 80287aa:	2300      	movs	r3, #0
 80287ac:	73fb      	strb	r3, [r7, #15]
 80287ae:	f107 030f 	add.w	r3, r7, #15
 80287b2:	461a      	mov	r2, r3
 80287b4:	6839      	ldr	r1, [r7, #0]
 80287b6:	6878      	ldr	r0, [r7, #4]
 80287b8:	f000 ffd7 	bl	802976a <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80287bc:	4603      	mov	r3, r0
	}
 80287be:	4618      	mov	r0, r3
 80287c0:	3710      	adds	r7, #16
 80287c2:	46bd      	mov	sp, r7
 80287c4:	bd80      	pop	{r7, pc}

080287c6 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80287c6:	b580      	push	{r7, lr}
 80287c8:	b084      	sub	sp, #16
 80287ca:	af00      	add	r7, sp, #0
 80287cc:	60f8      	str	r0, [r7, #12]
 80287ce:	60b9      	str	r1, [r7, #8]
 80287d0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80287d2:	68f8      	ldr	r0, [r7, #12]
 80287d4:	f000 ffe4 	bl	80297a0 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 80287d8:	4602      	mov	r2, r0
 80287da:	68bb      	ldr	r3, [r7, #8]
 80287dc:	4293      	cmp	r3, r2
 80287de:	bf8c      	ite	hi
 80287e0:	2301      	movhi	r3, #1
 80287e2:	2300      	movls	r3, #0
 80287e4:	b2db      	uxtb	r3, r3
 80287e6:	2b00      	cmp	r3, #0
 80287e8:	d001      	beq.n	80287ee <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80287ea:	f016 fdda 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80287ee:	68b8      	ldr	r0, [r7, #8]
 80287f0:	f016 fdc6 	bl	803f380 <_Znwj>
 80287f4:	4603      	mov	r3, r0
      }
 80287f6:	4618      	mov	r0, r3
 80287f8:	3710      	adds	r7, #16
 80287fa:	46bd      	mov	sp, r7
 80287fc:	bd80      	pop	{r7, pc}

080287fe <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80287fe:	b5b0      	push	{r4, r5, r7, lr}
 8028800:	b084      	sub	sp, #16
 8028802:	af00      	add	r7, sp, #0
 8028804:	60f8      	str	r0, [r7, #12]
 8028806:	60b9      	str	r1, [r7, #8]
 8028808:	607a      	str	r2, [r7, #4]
 802880a:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 802880c:	68f8      	ldr	r0, [r7, #12]
 802880e:	f7fe fcff 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 8028812:	4604      	mov	r4, r0
 8028814:	68b8      	ldr	r0, [r7, #8]
 8028816:	f7fe fcfb 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 802881a:	4605      	mov	r5, r0
 802881c:	6878      	ldr	r0, [r7, #4]
 802881e:	f7fe fcf7 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 8028822:	4602      	mov	r2, r0
 8028824:	683b      	ldr	r3, [r7, #0]
 8028826:	4629      	mov	r1, r5
 8028828:	4620      	mov	r0, r4
 802882a:	f000 ffc5 	bl	80297b8 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 802882e:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8028830:	4618      	mov	r0, r3
 8028832:	3710      	adds	r7, #16
 8028834:	46bd      	mov	sp, r7
 8028836:	bdb0      	pop	{r4, r5, r7, pc}

08028838 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 8028838:	b580      	push	{r7, lr}
 802883a:	b082      	sub	sp, #8
 802883c:	af00      	add	r7, sp, #0
 802883e:	6078      	str	r0, [r7, #4]
 8028840:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8028842:	463b      	mov	r3, r7
 8028844:	4618      	mov	r0, r3
 8028846:	f000 ffd2 	bl	80297ee <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 802884a:	4603      	mov	r3, r0
 802884c:	681a      	ldr	r2, [r3, #0]
 802884e:	687b      	ldr	r3, [r7, #4]
 8028850:	601a      	str	r2, [r3, #0]
 8028852:	687b      	ldr	r3, [r7, #4]
 8028854:	4618      	mov	r0, r3
 8028856:	3708      	adds	r7, #8
 8028858:	46bd      	mov	sp, r7
 802885a:	bd80      	pop	{r7, pc}

0802885c <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802885c:	b580      	push	{r7, lr}
 802885e:	b086      	sub	sp, #24
 8028860:	af00      	add	r7, sp, #0
 8028862:	60f8      	str	r0, [r7, #12]
 8028864:	60b9      	str	r1, [r7, #8]
 8028866:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8028868:	2301      	movs	r3, #1
 802886a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 802886c:	687a      	ldr	r2, [r7, #4]
 802886e:	68b9      	ldr	r1, [r7, #8]
 8028870:	68f8      	ldr	r0, [r7, #12]
 8028872:	f000 ffc7 	bl	8029804 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 8028876:	4603      	mov	r3, r0
    }
 8028878:	4618      	mov	r0, r3
 802887a:	3718      	adds	r7, #24
 802887c:	46bd      	mov	sp, r7
 802887e:	bd80      	pop	{r7, pc}

08028880 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8028880:	b580      	push	{r7, lr}
 8028882:	b084      	sub	sp, #16
 8028884:	af00      	add	r7, sp, #0
 8028886:	60f8      	str	r0, [r7, #12]
 8028888:	60b9      	str	r1, [r7, #8]
 802888a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 802888c:	687a      	ldr	r2, [r7, #4]
 802888e:	68b9      	ldr	r1, [r7, #8]
 8028890:	68f8      	ldr	r0, [r7, #12]
 8028892:	f000 ffc7 	bl	8029824 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8028896:	4603      	mov	r3, r0
 8028898:	4618      	mov	r0, r3
 802889a:	3710      	adds	r7, #16
 802889c:	46bd      	mov	sp, r7
 802889e:	bd80      	pop	{r7, pc}

080288a0 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80288a0:	b480      	push	{r7}
 80288a2:	b083      	sub	sp, #12
 80288a4:	af00      	add	r7, sp, #0
 80288a6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80288a8:	687b      	ldr	r3, [r7, #4]
 80288aa:	4618      	mov	r0, r3
 80288ac:	370c      	adds	r7, #12
 80288ae:	46bd      	mov	sp, r7
 80288b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288b4:	4770      	bx	lr

080288b6 <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80288b6:	b480      	push	{r7}
 80288b8:	b083      	sub	sp, #12
 80288ba:	af00      	add	r7, sp, #0
 80288bc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80288be:	687b      	ldr	r3, [r7, #4]
 80288c0:	4618      	mov	r0, r3
 80288c2:	370c      	adds	r7, #12
 80288c4:	46bd      	mov	sp, r7
 80288c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288ca:	4770      	bx	lr

080288cc <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80288cc:	b580      	push	{r7, lr}
 80288ce:	b084      	sub	sp, #16
 80288d0:	af00      	add	r7, sp, #0
 80288d2:	60f8      	str	r0, [r7, #12]
 80288d4:	60b9      	str	r1, [r7, #8]
 80288d6:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80288d8:	687a      	ldr	r2, [r7, #4]
 80288da:	68b9      	ldr	r1, [r7, #8]
 80288dc:	68f8      	ldr	r0, [r7, #12]
 80288de:	f000 ffb9 	bl	8029854 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80288e2:	4603      	mov	r3, r0
    }
 80288e4:	4618      	mov	r0, r3
 80288e6:	3710      	adds	r7, #16
 80288e8:	46bd      	mov	sp, r7
 80288ea:	bd80      	pop	{r7, pc}

080288ec <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80288ec:	b580      	push	{r7, lr}
 80288ee:	b084      	sub	sp, #16
 80288f0:	af00      	add	r7, sp, #0
 80288f2:	6078      	str	r0, [r7, #4]
 80288f4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80288f6:	687b      	ldr	r3, [r7, #4]
 80288f8:	681a      	ldr	r2, [r3, #0]
 80288fa:	683b      	ldr	r3, [r7, #0]
 80288fc:	4413      	add	r3, r2
 80288fe:	60fb      	str	r3, [r7, #12]
 8028900:	f107 020c 	add.w	r2, r7, #12
 8028904:	f107 0308 	add.w	r3, r7, #8
 8028908:	4611      	mov	r1, r2
 802890a:	4618      	mov	r0, r3
 802890c:	f7fd fb4e 	bl	8025fac <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8028910:	68bb      	ldr	r3, [r7, #8]
 8028912:	4618      	mov	r0, r3
 8028914:	3710      	adds	r7, #16
 8028916:	46bd      	mov	sp, r7
 8028918:	bd80      	pop	{r7, pc}

0802891a <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802891a:	b580      	push	{r7, lr}
 802891c:	b084      	sub	sp, #16
 802891e:	af00      	add	r7, sp, #0
 8028920:	60f8      	str	r0, [r7, #12]
 8028922:	60b9      	str	r1, [r7, #8]
 8028924:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8028926:	687a      	ldr	r2, [r7, #4]
 8028928:	68b9      	ldr	r1, [r7, #8]
 802892a:	68f8      	ldr	r0, [r7, #12]
 802892c:	f000 ff92 	bl	8029854 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8028930:	4603      	mov	r3, r0
    }
 8028932:	4618      	mov	r0, r3
 8028934:	3710      	adds	r7, #16
 8028936:	46bd      	mov	sp, r7
 8028938:	bd80      	pop	{r7, pc}

0802893a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802893a:	b580      	push	{r7, lr}
 802893c:	b084      	sub	sp, #16
 802893e:	af00      	add	r7, sp, #0
 8028940:	60f8      	str	r0, [r7, #12]
 8028942:	60b9      	str	r1, [r7, #8]
 8028944:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8028946:	687a      	ldr	r2, [r7, #4]
 8028948:	68b9      	ldr	r1, [r7, #8]
 802894a:	68f8      	ldr	r0, [r7, #12]
 802894c:	f000 ff9c 	bl	8029888 <_ZSt4copyIPKhPhET0_T_S4_S3_>
 8028950:	4603      	mov	r3, r0
 8028952:	4618      	mov	r0, r3
 8028954:	3710      	adds	r7, #16
 8028956:	46bd      	mov	sp, r7
 8028958:	bd80      	pop	{r7, pc}

0802895a <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 802895a:	b480      	push	{r7}
 802895c:	b083      	sub	sp, #12
 802895e:	af00      	add	r7, sp, #0
 8028960:	6078      	str	r0, [r7, #4]
    { return __it; }
 8028962:	687b      	ldr	r3, [r7, #4]
 8028964:	4618      	mov	r0, r3
 8028966:	370c      	adds	r7, #12
 8028968:	46bd      	mov	sp, r7
 802896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802896e:	4770      	bx	lr

08028970 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8028970:	b580      	push	{r7, lr}
 8028972:	b082      	sub	sp, #8
 8028974:	af00      	add	r7, sp, #0
 8028976:	6078      	str	r0, [r7, #4]
 8028978:	6039      	str	r1, [r7, #0]
    { return __it; }
 802897a:	6839      	ldr	r1, [r7, #0]
 802897c:	6878      	ldr	r0, [r7, #4]
 802897e:	f7fc fcf8 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028982:	6878      	ldr	r0, [r7, #4]
 8028984:	3708      	adds	r7, #8
 8028986:	46bd      	mov	sp, r7
 8028988:	bd80      	pop	{r7, pc}

0802898a <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 802898a:	b480      	push	{r7}
 802898c:	b083      	sub	sp, #12
 802898e:	af00      	add	r7, sp, #0
 8028990:	6078      	str	r0, [r7, #4]
 8028992:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8028994:	683b      	ldr	r3, [r7, #0]
 8028996:	681a      	ldr	r2, [r3, #0]
 8028998:	687b      	ldr	r3, [r7, #4]
 802899a:	681b      	ldr	r3, [r3, #0]
 802899c:	429a      	cmp	r2, r3
 802899e:	da01      	bge.n	80289a4 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 80289a0:	683b      	ldr	r3, [r7, #0]
 80289a2:	e000      	b.n	80289a6 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 80289a4:	687b      	ldr	r3, [r7, #4]
    }
 80289a6:	4618      	mov	r0, r3
 80289a8:	370c      	adds	r7, #12
 80289aa:	46bd      	mov	sp, r7
 80289ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289b0:	4770      	bx	lr
	...

080289b4 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 80289b4:	b580      	push	{r7, lr}
 80289b6:	b088      	sub	sp, #32
 80289b8:	af00      	add	r7, sp, #0
 80289ba:	60f8      	str	r0, [r7, #12]
 80289bc:	60b9      	str	r1, [r7, #8]
 80289be:	607a      	str	r2, [r7, #4]
 80289c0:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 80289c2:	687a      	ldr	r2, [r7, #4]
 80289c4:	68bb      	ldr	r3, [r7, #8]
 80289c6:	1ad3      	subs	r3, r2, r3
 80289c8:	109b      	asrs	r3, r3, #2
 80289ca:	4a22      	ldr	r2, [pc, #136]	; (8028a54 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 80289cc:	fb02 f303 	mul.w	r3, r2, r3
 80289d0:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80289d2:	697b      	ldr	r3, [r7, #20]
 80289d4:	2b00      	cmp	r3, #0
 80289d6:	dd34      	ble.n	8028a42 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 80289d8:	683b      	ldr	r3, [r7, #0]
 80289da:	689a      	ldr	r2, [r3, #8]
 80289dc:	683b      	ldr	r3, [r7, #0]
 80289de:	681b      	ldr	r3, [r3, #0]
 80289e0:	1ad3      	subs	r3, r2, r3
 80289e2:	109b      	asrs	r3, r3, #2
 80289e4:	4a1b      	ldr	r2, [pc, #108]	; (8028a54 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 80289e6:	fb02 f303 	mul.w	r3, r2, r3
 80289ea:	61bb      	str	r3, [r7, #24]
 80289ec:	f107 0218 	add.w	r2, r7, #24
 80289f0:	f107 0314 	add.w	r3, r7, #20
 80289f4:	4611      	mov	r1, r2
 80289f6:	4618      	mov	r0, r3
 80289f8:	f7ff ffc7 	bl	802898a <_ZSt3minIiERKT_S2_S2_>
 80289fc:	4603      	mov	r3, r0
	  const difference_type __clen
 80289fe:	681b      	ldr	r3, [r3, #0]
 8028a00:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8028a02:	69fa      	ldr	r2, [r7, #28]
 8028a04:	4613      	mov	r3, r2
 8028a06:	009b      	lsls	r3, r3, #2
 8028a08:	4413      	add	r3, r2
 8028a0a:	009b      	lsls	r3, r3, #2
 8028a0c:	461a      	mov	r2, r3
 8028a0e:	68bb      	ldr	r3, [r7, #8]
 8028a10:	1899      	adds	r1, r3, r2
 8028a12:	683b      	ldr	r3, [r7, #0]
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	461a      	mov	r2, r3
 8028a18:	68b8      	ldr	r0, [r7, #8]
 8028a1a:	f000 ff4d 	bl	80298b8 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8028a1e:	69fa      	ldr	r2, [r7, #28]
 8028a20:	4613      	mov	r3, r2
 8028a22:	009b      	lsls	r3, r3, #2
 8028a24:	4413      	add	r3, r2
 8028a26:	009b      	lsls	r3, r3, #2
 8028a28:	461a      	mov	r2, r3
 8028a2a:	68bb      	ldr	r3, [r7, #8]
 8028a2c:	4413      	add	r3, r2
 8028a2e:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8028a30:	69f9      	ldr	r1, [r7, #28]
 8028a32:	6838      	ldr	r0, [r7, #0]
 8028a34:	f7ff f8fc 	bl	8027c30 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8028a38:	697a      	ldr	r2, [r7, #20]
 8028a3a:	69fb      	ldr	r3, [r7, #28]
 8028a3c:	1ad3      	subs	r3, r2, r3
 8028a3e:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8028a40:	e7c7      	b.n	80289d2 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8028a42:	6839      	ldr	r1, [r7, #0]
 8028a44:	68f8      	ldr	r0, [r7, #12]
 8028a46:	f7fc fc94 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8028a4a:	68f8      	ldr	r0, [r7, #12]
 8028a4c:	3720      	adds	r7, #32
 8028a4e:	46bd      	mov	sp, r7
 8028a50:	bd80      	pop	{r7, pc}
 8028a52:	bf00      	nop
 8028a54:	cccccccd 	.word	0xcccccccd

08028a58 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8028a58:	b580      	push	{r7, lr}
 8028a5a:	b084      	sub	sp, #16
 8028a5c:	af00      	add	r7, sp, #0
 8028a5e:	60f8      	str	r0, [r7, #12]
 8028a60:	60b9      	str	r1, [r7, #8]
 8028a62:	607a      	str	r2, [r7, #4]
    { return __res; }
 8028a64:	6879      	ldr	r1, [r7, #4]
 8028a66:	68f8      	ldr	r0, [r7, #12]
 8028a68:	f7fc fc83 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028a6c:	68f8      	ldr	r0, [r7, #12]
 8028a6e:	3710      	adds	r7, #16
 8028a70:	46bd      	mov	sp, r7
 8028a72:	bd80      	pop	{r7, pc}

08028a74 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8028a74:	b590      	push	{r4, r7, lr}
 8028a76:	b085      	sub	sp, #20
 8028a78:	af00      	add	r7, sp, #0
 8028a7a:	6078      	str	r0, [r7, #4]
 8028a7c:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8028a7e:	6878      	ldr	r0, [r7, #4]
 8028a80:	f7fd fcdf 	bl	8026442 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8028a84:	4604      	mov	r4, r0
 8028a86:	6878      	ldr	r0, [r7, #4]
 8028a88:	f7fb f978 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8028a8c:	4603      	mov	r3, r0
 8028a8e:	1ae3      	subs	r3, r4, r3
 8028a90:	683a      	ldr	r2, [r7, #0]
 8028a92:	429a      	cmp	r2, r3
 8028a94:	bf8c      	ite	hi
 8028a96:	2301      	movhi	r3, #1
 8028a98:	2300      	movls	r3, #0
 8028a9a:	b2db      	uxtb	r3, r3
 8028a9c:	2b00      	cmp	r3, #0
 8028a9e:	d002      	beq.n	8028aa6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8028aa0:	4816      	ldr	r0, [pc, #88]	; (8028afc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8028aa2:	f016 fc81 	bl	803f3a8 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8028aa6:	f7ff fa44 	bl	8027f32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8028aaa:	4602      	mov	r2, r0
 8028aac:	683b      	ldr	r3, [r7, #0]
 8028aae:	4413      	add	r3, r2
 8028ab0:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8028ab2:	f7ff fa3e 	bl	8027f32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8028ab6:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8028ab8:	fbb4 f3f3 	udiv	r3, r4, r3
 8028abc:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8028abe:	68b9      	ldr	r1, [r7, #8]
 8028ac0:	6878      	ldr	r0, [r7, #4]
 8028ac2:	f7fd fccf 	bl	8026464 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8028ac6:	2301      	movs	r3, #1
 8028ac8:	60fb      	str	r3, [r7, #12]
 8028aca:	68fa      	ldr	r2, [r7, #12]
 8028acc:	68bb      	ldr	r3, [r7, #8]
 8028ace:	429a      	cmp	r2, r3
 8028ad0:	d80f      	bhi.n	8028af2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8028ad2:	6879      	ldr	r1, [r7, #4]
 8028ad4:	687b      	ldr	r3, [r7, #4]
 8028ad6:	695a      	ldr	r2, [r3, #20]
 8028ad8:	68fb      	ldr	r3, [r7, #12]
 8028ada:	009b      	lsls	r3, r3, #2
 8028adc:	425b      	negs	r3, r3
 8028ade:	18d4      	adds	r4, r2, r3
 8028ae0:	4608      	mov	r0, r1
 8028ae2:	f7fd fcd7 	bl	8026494 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8028ae6:	4603      	mov	r3, r0
 8028ae8:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8028aea:	68fb      	ldr	r3, [r7, #12]
 8028aec:	3301      	adds	r3, #1
 8028aee:	60fb      	str	r3, [r7, #12]
 8028af0:	e7eb      	b.n	8028aca <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 8028af2:	bf00      	nop
 8028af4:	3714      	adds	r7, #20
 8028af6:	46bd      	mov	sp, r7
 8028af8:	bd90      	pop	{r4, r7, pc}
 8028afa:	bf00      	nop
 8028afc:	0804111c 	.word	0x0804111c

08028b00 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8028b00:	b580      	push	{r7, lr}
 8028b02:	b084      	sub	sp, #16
 8028b04:	af00      	add	r7, sp, #0
 8028b06:	60f8      	str	r0, [r7, #12]
 8028b08:	60b9      	str	r1, [r7, #8]
 8028b0a:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8028b0c:	68b9      	ldr	r1, [r7, #8]
 8028b0e:	68f8      	ldr	r0, [r7, #12]
 8028b10:	f7fc fc2f 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 8028b14:	6879      	ldr	r1, [r7, #4]
 8028b16:	68f8      	ldr	r0, [r7, #12]
 8028b18:	f000 fede 	bl	80298d8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 8028b1c:	bf00      	nop
      }
 8028b1e:	68f8      	ldr	r0, [r7, #12]
 8028b20:	3710      	adds	r7, #16
 8028b22:	46bd      	mov	sp, r7
 8028b24:	bd80      	pop	{r7, pc}

08028b26 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8028b26:	b580      	push	{r7, lr}
 8028b28:	b08a      	sub	sp, #40	; 0x28
 8028b2a:	af00      	add	r7, sp, #0
 8028b2c:	60f8      	str	r0, [r7, #12]
 8028b2e:	60b9      	str	r1, [r7, #8]
 8028b30:	607a      	str	r2, [r7, #4]
 8028b32:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8028b34:	2301      	movs	r3, #1
 8028b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8028b3a:	f107 0314 	add.w	r3, r7, #20
 8028b3e:	6839      	ldr	r1, [r7, #0]
 8028b40:	4618      	mov	r0, r3
 8028b42:	f7fc fc16 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028b46:	68f8      	ldr	r0, [r7, #12]
 8028b48:	f107 0314 	add.w	r3, r7, #20
 8028b4c:	687a      	ldr	r2, [r7, #4]
 8028b4e:	68b9      	ldr	r1, [r7, #8]
 8028b50:	f000 fed2 	bl	80298f8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8028b54:	68f8      	ldr	r0, [r7, #12]
 8028b56:	3728      	adds	r7, #40	; 0x28
 8028b58:	46bd      	mov	sp, r7
 8028b5a:	bd80      	pop	{r7, pc}

08028b5c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8028b5c:	b590      	push	{r4, r7, lr}
 8028b5e:	b085      	sub	sp, #20
 8028b60:	af00      	add	r7, sp, #0
 8028b62:	6078      	str	r0, [r7, #4]
 8028b64:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8028b66:	6878      	ldr	r0, [r7, #4]
 8028b68:	f7fd fc6b 	bl	8026442 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8028b6c:	4604      	mov	r4, r0
 8028b6e:	6878      	ldr	r0, [r7, #4]
 8028b70:	f7fb f904 	bl	8023d7c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8028b74:	4603      	mov	r3, r0
 8028b76:	1ae3      	subs	r3, r4, r3
 8028b78:	683a      	ldr	r2, [r7, #0]
 8028b7a:	429a      	cmp	r2, r3
 8028b7c:	bf8c      	ite	hi
 8028b7e:	2301      	movhi	r3, #1
 8028b80:	2300      	movls	r3, #0
 8028b82:	b2db      	uxtb	r3, r3
 8028b84:	2b00      	cmp	r3, #0
 8028b86:	d002      	beq.n	8028b8e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8028b88:	4815      	ldr	r0, [pc, #84]	; (8028be0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8028b8a:	f016 fc0d 	bl	803f3a8 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8028b8e:	f7ff f9d0 	bl	8027f32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8028b92:	4602      	mov	r2, r0
 8028b94:	683b      	ldr	r3, [r7, #0]
 8028b96:	4413      	add	r3, r2
 8028b98:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8028b9a:	f7ff f9ca 	bl	8027f32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8028b9e:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8028ba0:	fbb4 f3f3 	udiv	r3, r4, r3
 8028ba4:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8028ba6:	68b9      	ldr	r1, [r7, #8]
 8028ba8:	6878      	ldr	r0, [r7, #4]
 8028baa:	f000 febd 	bl	8029928 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8028bae:	2301      	movs	r3, #1
 8028bb0:	60fb      	str	r3, [r7, #12]
 8028bb2:	68fa      	ldr	r2, [r7, #12]
 8028bb4:	68bb      	ldr	r3, [r7, #8]
 8028bb6:	429a      	cmp	r2, r3
 8028bb8:	d80e      	bhi.n	8028bd8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8028bba:	6879      	ldr	r1, [r7, #4]
 8028bbc:	687b      	ldr	r3, [r7, #4]
 8028bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028bc0:	68fb      	ldr	r3, [r7, #12]
 8028bc2:	009b      	lsls	r3, r3, #2
 8028bc4:	18d4      	adds	r4, r2, r3
 8028bc6:	4608      	mov	r0, r1
 8028bc8:	f7fd fc64 	bl	8026494 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8028bcc:	4603      	mov	r3, r0
 8028bce:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8028bd0:	68fb      	ldr	r3, [r7, #12]
 8028bd2:	3301      	adds	r3, #1
 8028bd4:	60fb      	str	r3, [r7, #12]
 8028bd6:	e7ec      	b.n	8028bb2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8028bd8:	bf00      	nop
 8028bda:	3714      	adds	r7, #20
 8028bdc:	46bd      	mov	sp, r7
 8028bde:	bd90      	pop	{r4, r7, pc}
 8028be0:	0804113c 	.word	0x0804113c

08028be4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8028be4:	b590      	push	{r4, r7, lr}
 8028be6:	b09b      	sub	sp, #108	; 0x6c
 8028be8:	af02      	add	r7, sp, #8
 8028bea:	60f8      	str	r0, [r7, #12]
 8028bec:	60b9      	str	r1, [r7, #8]
 8028bee:	607a      	str	r2, [r7, #4]
 8028bf0:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 8028bf2:	f107 0320 	add.w	r3, r7, #32
 8028bf6:	68b9      	ldr	r1, [r7, #8]
 8028bf8:	4618      	mov	r0, r3
 8028bfa:	f7fc fbba 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028bfe:	f107 0310 	add.w	r3, r7, #16
 8028c02:	f107 0220 	add.w	r2, r7, #32
 8028c06:	4611      	mov	r1, r2
 8028c08:	4618      	mov	r0, r3
 8028c0a:	f000 fea8 	bl	802995e <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8028c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028c12:	6879      	ldr	r1, [r7, #4]
 8028c14:	4618      	mov	r0, r3
 8028c16:	f7fc fbac 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028c1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028c1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8028c22:	4611      	mov	r1, r2
 8028c24:	4618      	mov	r0, r3
 8028c26:	f000 fe9a 	bl	802995e <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 8028c2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028c2e:	6839      	ldr	r1, [r7, #0]
 8028c30:	4618      	mov	r0, r3
 8028c32:	f7fc fb9e 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028c36:	68f8      	ldr	r0, [r7, #12]
 8028c38:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8028c3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028c40:	f107 0110 	add.w	r1, r7, #16
 8028c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028c46:	9300      	str	r3, [sp, #0]
 8028c48:	4623      	mov	r3, r4
 8028c4a:	f000 feb1 	bl	80299b0 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 8028c4e:	68f8      	ldr	r0, [r7, #12]
 8028c50:	3764      	adds	r7, #100	; 0x64
 8028c52:	46bd      	mov	sp, r7
 8028c54:	bd90      	pop	{r4, r7, pc}

08028c56 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move(_II __first, _II __last, _OI __result)
 8028c56:	b580      	push	{r7, lr}
 8028c58:	b098      	sub	sp, #96	; 0x60
 8028c5a:	af00      	add	r7, sp, #0
 8028c5c:	60f8      	str	r0, [r7, #12]
 8028c5e:	60b9      	str	r1, [r7, #8]
 8028c60:	607a      	str	r2, [r7, #4]
 8028c62:	603b      	str	r3, [r7, #0]
				      std::__miter_base(__last), __result);
 8028c64:	f107 0320 	add.w	r3, r7, #32
 8028c68:	68b9      	ldr	r1, [r7, #8]
 8028c6a:	4618      	mov	r0, r3
 8028c6c:	f7fc fb81 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028c70:	f107 0310 	add.w	r3, r7, #16
 8028c74:	f107 0220 	add.w	r2, r7, #32
 8028c78:	4611      	mov	r1, r2
 8028c7a:	4618      	mov	r0, r3
 8028c7c:	f000 febe 	bl	80299fc <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028c80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028c84:	6879      	ldr	r1, [r7, #4]
 8028c86:	4618      	mov	r0, r3
 8028c88:	f7fc fb73 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028c8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028c90:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8028c94:	4611      	mov	r1, r2
 8028c96:	4618      	mov	r0, r3
 8028c98:	f000 feb0 	bl	80299fc <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028c9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028ca0:	6839      	ldr	r1, [r7, #0]
 8028ca2:	4618      	mov	r0, r3
 8028ca4:	f7fc fb65 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028ca8:	68f8      	ldr	r0, [r7, #12]
 8028caa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028cae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028cb2:	f107 0110 	add.w	r1, r7, #16
 8028cb6:	f000 feae 	bl	8029a16 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8028cba:	68f8      	ldr	r0, [r7, #12]
 8028cbc:	3760      	adds	r7, #96	; 0x60
 8028cbe:	46bd      	mov	sp, r7
 8028cc0:	bd80      	pop	{r7, pc}

08028cc2 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 8028cc2:	b590      	push	{r4, r7, lr}
 8028cc4:	b085      	sub	sp, #20
 8028cc6:	af00      	add	r7, sp, #0
 8028cc8:	6078      	str	r0, [r7, #4]
 8028cca:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8028ccc:	683b      	ldr	r3, [r7, #0]
 8028cce:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8028cd0:	6878      	ldr	r0, [r7, #4]
 8028cd2:	f7fd fad7 	bl	8026284 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8028cd6:	4622      	mov	r2, r4
 8028cd8:	68f9      	ldr	r1, [r7, #12]
 8028cda:	6878      	ldr	r0, [r7, #4]
 8028cdc:	f7fe fb1a 	bl	8027314 <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 8028ce0:	bf00      	nop
 8028ce2:	3714      	adds	r7, #20
 8028ce4:	46bd      	mov	sp, r7
 8028ce6:	bd90      	pop	{r4, r7, pc}

08028ce8 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_move_copy(_InputIterator1 __first1,
 8028ce8:	b590      	push	{r4, r7, lr}
 8028cea:	b0a3      	sub	sp, #140	; 0x8c
 8028cec:	af02      	add	r7, sp, #8
 8028cee:	60f8      	str	r0, [r7, #12]
 8028cf0:	60b9      	str	r1, [r7, #8]
 8028cf2:	607a      	str	r2, [r7, #4]
 8028cf4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8028cf6:	f107 0320 	add.w	r3, r7, #32
 8028cfa:	68b9      	ldr	r1, [r7, #8]
 8028cfc:	4618      	mov	r0, r3
 8028cfe:	f7fc fb38 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028d06:	6879      	ldr	r1, [r7, #4]
 8028d08:	4618      	mov	r0, r3
 8028d0a:	f7fc fb32 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028d0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028d12:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8028d16:	4618      	mov	r0, r3
 8028d18:	f7fc fb2b 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028d1c:	f107 0010 	add.w	r0, r7, #16
 8028d20:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8028d24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028d28:	f107 0120 	add.w	r1, r7, #32
 8028d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028d30:	9300      	str	r3, [sp, #0]
 8028d32:	4623      	mov	r3, r4
 8028d34:	f7ff ff56 	bl	8028be4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 8028d38:	f107 0210 	add.w	r2, r7, #16
 8028d3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028d40:	4611      	mov	r1, r2
 8028d42:	4618      	mov	r0, r3
 8028d44:	f7fc fb15 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028d48:	68f8      	ldr	r0, [r7, #12]
 8028d4a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8028d4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028d52:	9300      	str	r3, [sp, #0]
 8028d54:	4613      	mov	r3, r2
 8028d56:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8028d5a:	6839      	ldr	r1, [r7, #0]
 8028d5c:	f7fe fb56 	bl	802740c <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
    }
 8028d60:	68f8      	ldr	r0, [r7, #12]
 8028d62:	3784      	adds	r7, #132	; 0x84
 8028d64:	46bd      	mov	sp, r7
 8028d66:	bd90      	pop	{r4, r7, pc}

08028d68 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8028d68:	b580      	push	{r7, lr}
 8028d6a:	b098      	sub	sp, #96	; 0x60
 8028d6c:	af00      	add	r7, sp, #0
 8028d6e:	60f8      	str	r0, [r7, #12]
 8028d70:	60b9      	str	r1, [r7, #8]
 8028d72:	607a      	str	r2, [r7, #4]
 8028d74:	603b      	str	r3, [r7, #0]
					       __result);
 8028d76:	f107 0320 	add.w	r3, r7, #32
 8028d7a:	68b9      	ldr	r1, [r7, #8]
 8028d7c:	4618      	mov	r0, r3
 8028d7e:	f7fc faf8 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028d82:	f107 0310 	add.w	r3, r7, #16
 8028d86:	f107 0220 	add.w	r2, r7, #32
 8028d8a:	4611      	mov	r1, r2
 8028d8c:	4618      	mov	r0, r3
 8028d8e:	f000 fe35 	bl	80299fc <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028d92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028d96:	6879      	ldr	r1, [r7, #4]
 8028d98:	4618      	mov	r0, r3
 8028d9a:	f7fc faea 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028da2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8028da6:	4611      	mov	r1, r2
 8028da8:	4618      	mov	r0, r3
 8028daa:	f000 fe27 	bl	80299fc <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8028dae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028db2:	6839      	ldr	r1, [r7, #0]
 8028db4:	4618      	mov	r0, r3
 8028db6:	f7fc fadc 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028dba:	68f8      	ldr	r0, [r7, #12]
 8028dbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028dc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8028dc4:	f107 0110 	add.w	r1, r7, #16
 8028dc8:	f000 fe6b 	bl	8029aa2 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8028dcc:	68f8      	ldr	r0, [r7, #12]
 8028dce:	3760      	adds	r7, #96	; 0x60
 8028dd0:	46bd      	mov	sp, r7
 8028dd2:	bd80      	pop	{r7, pc}

08028dd4 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8028dd4:	b590      	push	{r4, r7, lr}
 8028dd6:	b0a3      	sub	sp, #140	; 0x8c
 8028dd8:	af02      	add	r7, sp, #8
 8028dda:	60f8      	str	r0, [r7, #12]
 8028ddc:	60b9      	str	r1, [r7, #8]
 8028dde:	607a      	str	r2, [r7, #4]
 8028de0:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 8028de2:	f107 0320 	add.w	r3, r7, #32
 8028de6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8028dea:	4618      	mov	r0, r3
 8028dec:	f7fc fac1 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028df0:	f107 0010 	add.w	r0, r7, #16
 8028df4:	f107 0220 	add.w	r2, r7, #32
 8028df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028dfc:	9300      	str	r3, [sp, #0]
 8028dfe:	4613      	mov	r3, r2
 8028e00:	687a      	ldr	r2, [r7, #4]
 8028e02:	68b9      	ldr	r1, [r7, #8]
 8028e04:	f7fe fb02 	bl	802740c <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 8028e08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8028e0c:	6839      	ldr	r1, [r7, #0]
 8028e0e:	4618      	mov	r0, r3
 8028e10:	f7fc faaf 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028e14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8028e18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8028e1c:	4618      	mov	r0, r3
 8028e1e:	f7fc faa8 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028e22:	f107 0210 	add.w	r2, r7, #16
 8028e26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8028e2a:	4611      	mov	r1, r2
 8028e2c:	4618      	mov	r0, r3
 8028e2e:	f7fc faa0 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8028e32:	68f8      	ldr	r0, [r7, #12]
 8028e34:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8028e38:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8028e3c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8028e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028e44:	9300      	str	r3, [sp, #0]
 8028e46:	4623      	mov	r3, r4
 8028e48:	f7ff fecc 	bl	8028be4 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 8028e4c:	68f8      	ldr	r0, [r7, #12]
 8028e4e:	3784      	adds	r7, #132	; 0x84
 8028e50:	46bd      	mov	sp, r7
 8028e52:	bd90      	pop	{r4, r7, pc}

08028e54 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8028e54:	b580      	push	{r7, lr}
 8028e56:	b082      	sub	sp, #8
 8028e58:	af00      	add	r7, sp, #0
 8028e5a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8028e5c:	6878      	ldr	r0, [r7, #4]
 8028e5e:	f000 fe66 	bl	8029b2e <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 8028e62:	4603      	mov	r3, r0
      }
 8028e64:	4618      	mov	r0, r3
 8028e66:	3708      	adds	r7, #8
 8028e68:	46bd      	mov	sp, r7
 8028e6a:	bd80      	pop	{r7, pc}

08028e6c <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8028e6c:	b590      	push	{r4, r7, lr}
 8028e6e:	b085      	sub	sp, #20
 8028e70:	af00      	add	r7, sp, #0
 8028e72:	60f8      	str	r0, [r7, #12]
 8028e74:	60b9      	str	r1, [r7, #8]
 8028e76:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028e78:	68f8      	ldr	r0, [r7, #12]
 8028e7a:	f000 fe64 	bl	8029b46 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028e7e:	4604      	mov	r4, r0
 8028e80:	68b8      	ldr	r0, [r7, #8]
 8028e82:	f000 fe60 	bl	8029b46 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028e86:	4603      	mov	r3, r0
 8028e88:	687a      	ldr	r2, [r7, #4]
 8028e8a:	4619      	mov	r1, r3
 8028e8c:	4620      	mov	r0, r4
 8028e8e:	f000 fe65 	bl	8029b5c <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8028e92:	4603      	mov	r3, r0
    }
 8028e94:	4618      	mov	r0, r3
 8028e96:	3714      	adds	r7, #20
 8028e98:	46bd      	mov	sp, r7
 8028e9a:	bd90      	pop	{r4, r7, pc}

08028e9c <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8028e9c:	b590      	push	{r4, r7, lr}
 8028e9e:	b085      	sub	sp, #20
 8028ea0:	af00      	add	r7, sp, #0
 8028ea2:	60f8      	str	r0, [r7, #12]
 8028ea4:	60b9      	str	r1, [r7, #8]
 8028ea6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8028ea8:	68f8      	ldr	r0, [r7, #12]
 8028eaa:	f000 fe4c 	bl	8029b46 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028eae:	4604      	mov	r4, r0
 8028eb0:	68b8      	ldr	r0, [r7, #8]
 8028eb2:	f000 fe48 	bl	8029b46 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8028eb6:	4603      	mov	r3, r0
 8028eb8:	687a      	ldr	r2, [r7, #4]
 8028eba:	4619      	mov	r1, r3
 8028ebc:	4620      	mov	r0, r4
 8028ebe:	f000 fe70 	bl	8029ba2 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8028ec2:	4603      	mov	r3, r0
    }
 8028ec4:	4618      	mov	r0, r3
 8028ec6:	3714      	adds	r7, #20
 8028ec8:	46bd      	mov	sp, r7
 8028eca:	bd90      	pop	{r4, r7, pc}

08028ecc <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8028ecc:	b580      	push	{r7, lr}
 8028ece:	b084      	sub	sp, #16
 8028ed0:	af00      	add	r7, sp, #0
 8028ed2:	60f8      	str	r0, [r7, #12]
 8028ed4:	60b9      	str	r1, [r7, #8]
 8028ed6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8028ed8:	68f8      	ldr	r0, [r7, #12]
 8028eda:	f000 fe85 	bl	8029be8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8028ede:	4602      	mov	r2, r0
 8028ee0:	68bb      	ldr	r3, [r7, #8]
 8028ee2:	4293      	cmp	r3, r2
 8028ee4:	bf8c      	ite	hi
 8028ee6:	2301      	movhi	r3, #1
 8028ee8:	2300      	movls	r3, #0
 8028eea:	b2db      	uxtb	r3, r3
 8028eec:	2b00      	cmp	r3, #0
 8028eee:	d001      	beq.n	8028ef4 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8028ef0:	f016 fa57 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8028ef4:	68ba      	ldr	r2, [r7, #8]
 8028ef6:	4613      	mov	r3, r2
 8028ef8:	009b      	lsls	r3, r3, #2
 8028efa:	4413      	add	r3, r2
 8028efc:	009b      	lsls	r3, r3, #2
 8028efe:	4618      	mov	r0, r3
 8028f00:	f016 fa3e 	bl	803f380 <_Znwj>
 8028f04:	4603      	mov	r3, r0
      }
 8028f06:	4618      	mov	r0, r3
 8028f08:	3710      	adds	r7, #16
 8028f0a:	46bd      	mov	sp, r7
 8028f0c:	bd80      	pop	{r7, pc}

08028f0e <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8028f0e:	b580      	push	{r7, lr}
 8028f10:	b084      	sub	sp, #16
 8028f12:	af00      	add	r7, sp, #0
 8028f14:	60f8      	str	r0, [r7, #12]
 8028f16:	60b9      	str	r1, [r7, #8]
 8028f18:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8028f1a:	687a      	ldr	r2, [r7, #4]
 8028f1c:	4613      	mov	r3, r2
 8028f1e:	009b      	lsls	r3, r3, #2
 8028f20:	4413      	add	r3, r2
 8028f22:	009b      	lsls	r3, r3, #2
 8028f24:	4619      	mov	r1, r3
 8028f26:	68b8      	ldr	r0, [r7, #8]
 8028f28:	f016 fa28 	bl	803f37c <_ZdlPvj>
      }
 8028f2c:	bf00      	nop
 8028f2e:	3710      	adds	r7, #16
 8028f30:	46bd      	mov	sp, r7
 8028f32:	bd80      	pop	{r7, pc}

08028f34 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8028f34:	b580      	push	{r7, lr}
 8028f36:	b082      	sub	sp, #8
 8028f38:	af00      	add	r7, sp, #0
 8028f3a:	6078      	str	r0, [r7, #4]
 8028f3c:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8028f3e:	f000 f8eb 	bl	8029118 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8028f42:	4603      	mov	r3, r0
 8028f44:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8028f46:	687b      	ldr	r3, [r7, #4]
 8028f48:	68da      	ldr	r2, [r3, #12]
 8028f4a:	683b      	ldr	r3, [r7, #0]
 8028f4c:	68db      	ldr	r3, [r3, #12]
 8028f4e:	1ad3      	subs	r3, r2, r3
 8028f50:	109b      	asrs	r3, r3, #2
 8028f52:	3b01      	subs	r3, #1
 8028f54:	fb01 f303 	mul.w	r3, r1, r3
 8028f58:	687a      	ldr	r2, [r7, #4]
 8028f5a:	6811      	ldr	r1, [r2, #0]
 8028f5c:	687a      	ldr	r2, [r7, #4]
 8028f5e:	6852      	ldr	r2, [r2, #4]
 8028f60:	1a8a      	subs	r2, r1, r2
 8028f62:	1092      	asrs	r2, r2, #2
 8028f64:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8028f66:	683a      	ldr	r2, [r7, #0]
 8028f68:	6891      	ldr	r1, [r2, #8]
 8028f6a:	683a      	ldr	r2, [r7, #0]
 8028f6c:	6812      	ldr	r2, [r2, #0]
 8028f6e:	1a8a      	subs	r2, r1, r2
 8028f70:	1092      	asrs	r2, r2, #2
 8028f72:	4413      	add	r3, r2
      }
 8028f74:	4618      	mov	r0, r3
 8028f76:	3708      	adds	r7, #8
 8028f78:	46bd      	mov	sp, r7
 8028f7a:	bd80      	pop	{r7, pc}

08028f7c <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8028f7c:	b580      	push	{r7, lr}
 8028f7e:	b084      	sub	sp, #16
 8028f80:	af00      	add	r7, sp, #0
 8028f82:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8028f84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8028f88:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8028f8a:	6878      	ldr	r0, [r7, #4]
 8028f8c:	f000 fe3a 	bl	8029c04 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 8028f90:	4603      	mov	r3, r0
 8028f92:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8028f94:	f107 0208 	add.w	r2, r7, #8
 8028f98:	f107 030c 	add.w	r3, r7, #12
 8028f9c:	4611      	mov	r1, r2
 8028f9e:	4618      	mov	r0, r3
 8028fa0:	f7fc ff07 	bl	8025db2 <_ZSt3minIjERKT_S2_S2_>
 8028fa4:	4603      	mov	r3, r0
 8028fa6:	681b      	ldr	r3, [r3, #0]
      }
 8028fa8:	4618      	mov	r0, r3
 8028faa:	3710      	adds	r7, #16
 8028fac:	46bd      	mov	sp, r7
 8028fae:	bd80      	pop	{r7, pc}

08028fb0 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8028fb0:	b480      	push	{r7}
 8028fb2:	b083      	sub	sp, #12
 8028fb4:	af00      	add	r7, sp, #0
 8028fb6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8028fb8:	687b      	ldr	r3, [r7, #4]
 8028fba:	4618      	mov	r0, r3
 8028fbc:	370c      	adds	r7, #12
 8028fbe:	46bd      	mov	sp, r7
 8028fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fc4:	4770      	bx	lr

08028fc6 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8028fc6:	b590      	push	{r4, r7, lr}
 8028fc8:	b08b      	sub	sp, #44	; 0x2c
 8028fca:	af00      	add	r7, sp, #0
 8028fcc:	60f8      	str	r0, [r7, #12]
 8028fce:	60b9      	str	r1, [r7, #8]
 8028fd0:	4613      	mov	r3, r2
 8028fd2:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8028fd4:	68fb      	ldr	r3, [r7, #12]
 8028fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028fd8:	68fb      	ldr	r3, [r7, #12]
 8028fda:	695b      	ldr	r3, [r3, #20]
 8028fdc:	1ad3      	subs	r3, r2, r3
 8028fde:	109b      	asrs	r3, r3, #2
 8028fe0:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8028fe2:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8028fe4:	68bb      	ldr	r3, [r7, #8]
 8028fe6:	6a3a      	ldr	r2, [r7, #32]
 8028fe8:	4413      	add	r3, r2
 8028fea:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8028fec:	68fb      	ldr	r3, [r7, #12]
 8028fee:	685a      	ldr	r2, [r3, #4]
 8028ff0:	69fb      	ldr	r3, [r7, #28]
 8028ff2:	005b      	lsls	r3, r3, #1
 8028ff4:	429a      	cmp	r2, r3
 8028ff6:	d92d      	bls.n	8029054 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8028ff8:	68fb      	ldr	r3, [r7, #12]
 8028ffa:	681a      	ldr	r2, [r3, #0]
 8028ffc:	68fb      	ldr	r3, [r7, #12]
 8028ffe:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8029000:	69fb      	ldr	r3, [r7, #28]
 8029002:	1acb      	subs	r3, r1, r3
 8029004:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8029006:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8029008:	79fb      	ldrb	r3, [r7, #7]
 802900a:	2b00      	cmp	r3, #0
 802900c:	d002      	beq.n	8029014 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 802900e:	68bb      	ldr	r3, [r7, #8]
 8029010:	009b      	lsls	r3, r3, #2
 8029012:	e000      	b.n	8029016 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 8029014:	2300      	movs	r3, #0
 8029016:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8029018:	4413      	add	r3, r2
 802901a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 802901c:	68fb      	ldr	r3, [r7, #12]
 802901e:	695b      	ldr	r3, [r3, #20]
 8029020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029022:	429a      	cmp	r2, r3
 8029024:	d209      	bcs.n	802903a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8029026:	68fb      	ldr	r3, [r7, #12]
 8029028:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 802902a:	68fb      	ldr	r3, [r7, #12]
 802902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 802902e:	3304      	adds	r3, #4
 8029030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029032:	4619      	mov	r1, r3
 8029034:	f000 fdf2 	bl	8029c1c <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 8029038:	e048      	b.n	80290cc <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802903a:	68fb      	ldr	r3, [r7, #12]
 802903c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 802903e:	68fb      	ldr	r3, [r7, #12]
 8029040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8029042:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8029044:	6a3b      	ldr	r3, [r7, #32]
 8029046:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8029048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802904a:	4413      	add	r3, r2
 802904c:	461a      	mov	r2, r3
 802904e:	f000 fdfd 	bl	8029c4c <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 8029052:	e03b      	b.n	80290cc <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8029054:	68fb      	ldr	r3, [r7, #12]
 8029056:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8029058:	68fb      	ldr	r3, [r7, #12]
 802905a:	3304      	adds	r3, #4
 802905c:	f107 0208 	add.w	r2, r7, #8
 8029060:	4611      	mov	r1, r2
 8029062:	4618      	mov	r0, r3
 8029064:	f7fc fb1f 	bl	80256a6 <_ZSt3maxIjERKT_S2_S2_>
 8029068:	4603      	mov	r3, r0
 802906a:	681b      	ldr	r3, [r3, #0]
 802906c:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 802906e:	3302      	adds	r3, #2
 8029070:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8029072:	68fb      	ldr	r3, [r7, #12]
 8029074:	69b9      	ldr	r1, [r7, #24]
 8029076:	4618      	mov	r0, r3
 8029078:	f7fe ff93 	bl	8027fa2 <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 802907c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802907e:	69ba      	ldr	r2, [r7, #24]
 8029080:	69fb      	ldr	r3, [r7, #28]
 8029082:	1ad3      	subs	r3, r2, r3
 8029084:	085b      	lsrs	r3, r3, #1
 8029086:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8029088:	79fb      	ldrb	r3, [r7, #7]
 802908a:	2b00      	cmp	r3, #0
 802908c:	d002      	beq.n	8029094 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 802908e:	68bb      	ldr	r3, [r7, #8]
 8029090:	009b      	lsls	r3, r3, #2
 8029092:	e000      	b.n	8029096 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 8029094:	2300      	movs	r3, #0
 8029096:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8029098:	697a      	ldr	r2, [r7, #20]
 802909a:	4413      	add	r3, r2
 802909c:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802909e:	68fb      	ldr	r3, [r7, #12]
 80290a0:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80290a2:	68fb      	ldr	r3, [r7, #12]
 80290a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80290a6:	3304      	adds	r3, #4
 80290a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80290aa:	4619      	mov	r1, r3
 80290ac:	f000 fdb6 	bl	8029c1c <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80290b0:	68f8      	ldr	r0, [r7, #12]
 80290b2:	68fb      	ldr	r3, [r7, #12]
 80290b4:	6819      	ldr	r1, [r3, #0]
 80290b6:	68fb      	ldr	r3, [r7, #12]
 80290b8:	685b      	ldr	r3, [r3, #4]
 80290ba:	461a      	mov	r2, r3
 80290bc:	f7fd fc60 	bl	8026980 <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
	  this->_M_impl._M_map = __new_map;
 80290c0:	68fb      	ldr	r3, [r7, #12]
 80290c2:	697a      	ldr	r2, [r7, #20]
 80290c4:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80290c6:	68fb      	ldr	r3, [r7, #12]
 80290c8:	69ba      	ldr	r2, [r7, #24]
 80290ca:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 80290cc:	68fb      	ldr	r3, [r7, #12]
 80290ce:	3308      	adds	r3, #8
 80290d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80290d2:	4618      	mov	r0, r3
 80290d4:	f7fe fe81 	bl	8027dda <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80290d8:	68fb      	ldr	r3, [r7, #12]
 80290da:	f103 0018 	add.w	r0, r3, #24
 80290de:	6a3a      	ldr	r2, [r7, #32]
 80290e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80290e4:	4413      	add	r3, r2
 80290e6:	009b      	lsls	r3, r3, #2
 80290e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80290ea:	4413      	add	r3, r2
 80290ec:	4619      	mov	r1, r3
 80290ee:	f7fe fe74 	bl	8027dda <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 80290f2:	bf00      	nop
 80290f4:	372c      	adds	r7, #44	; 0x2c
 80290f6:	46bd      	mov	sp, r7
 80290f8:	bd90      	pop	{r4, r7, pc}

080290fa <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80290fa:	b580      	push	{r7, lr}
 80290fc:	b082      	sub	sp, #8
 80290fe:	af00      	add	r7, sp, #0
 8029100:	6078      	str	r0, [r7, #4]
 8029102:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8029104:	2200      	movs	r2, #0
 8029106:	6839      	ldr	r1, [r7, #0]
 8029108:	6878      	ldr	r0, [r7, #4]
 802910a:	f000 fdb7 	bl	8029c7c <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 802910e:	4603      	mov	r3, r0
 8029110:	4618      	mov	r0, r3
 8029112:	3708      	adds	r7, #8
 8029114:	46bd      	mov	sp, r7
 8029116:	bd80      	pop	{r7, pc}

08029118 <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8029118:	b580      	push	{r7, lr}
 802911a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802911c:	2004      	movs	r0, #4
 802911e:	f7f7 fede 	bl	8020ede <_ZSt16__deque_buf_sizej>
 8029122:	4603      	mov	r3, r0
 8029124:	4618      	mov	r0, r3
 8029126:	bd80      	pop	{r7, pc}

08029128 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8029128:	b580      	push	{r7, lr}
 802912a:	b084      	sub	sp, #16
 802912c:	af00      	add	r7, sp, #0
 802912e:	60f8      	str	r0, [r7, #12]
 8029130:	60b9      	str	r1, [r7, #8]
 8029132:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8029134:	687a      	ldr	r2, [r7, #4]
 8029136:	68b9      	ldr	r1, [r7, #8]
 8029138:	68f8      	ldr	r0, [r7, #12]
 802913a:	f000 fdbd 	bl	8029cb8 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 802913e:	bf00      	nop
 8029140:	3710      	adds	r7, #16
 8029142:	46bd      	mov	sp, r7
 8029144:	bd80      	pop	{r7, pc}

08029146 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029146:	b580      	push	{r7, lr}
 8029148:	b084      	sub	sp, #16
 802914a:	af00      	add	r7, sp, #0
 802914c:	60f8      	str	r0, [r7, #12]
 802914e:	60b9      	str	r1, [r7, #8]
 8029150:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029152:	68f8      	ldr	r0, [r7, #12]
 8029154:	f000 fdc0 	bl	8029cd8 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8029158:	4602      	mov	r2, r0
 802915a:	68bb      	ldr	r3, [r7, #8]
 802915c:	4293      	cmp	r3, r2
 802915e:	bf8c      	ite	hi
 8029160:	2301      	movhi	r3, #1
 8029162:	2300      	movls	r3, #0
 8029164:	b2db      	uxtb	r3, r3
 8029166:	2b00      	cmp	r3, #0
 8029168:	d001      	beq.n	802916e <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802916a:	f016 f91a 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 802916e:	68bb      	ldr	r3, [r7, #8]
 8029170:	009b      	lsls	r3, r3, #2
 8029172:	4618      	mov	r0, r3
 8029174:	f016 f904 	bl	803f380 <_Znwj>
 8029178:	4603      	mov	r3, r0
      }
 802917a:	4618      	mov	r0, r3
 802917c:	3710      	adds	r7, #16
 802917e:	46bd      	mov	sp, r7
 8029180:	bd80      	pop	{r7, pc}

08029182 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8029182:	b480      	push	{r7}
 8029184:	b083      	sub	sp, #12
 8029186:	af00      	add	r7, sp, #0
 8029188:	6078      	str	r0, [r7, #4]
 802918a:	687b      	ldr	r3, [r7, #4]
 802918c:	4618      	mov	r0, r3
 802918e:	370c      	adds	r7, #12
 8029190:	46bd      	mov	sp, r7
 8029192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029196:	4770      	bx	lr

08029198 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 8029198:	b480      	push	{r7}
 802919a:	b083      	sub	sp, #12
 802919c:	af00      	add	r7, sp, #0
 802919e:	6078      	str	r0, [r7, #4]
 80291a0:	687b      	ldr	r3, [r7, #4]
 80291a2:	4618      	mov	r0, r3
 80291a4:	370c      	adds	r7, #12
 80291a6:	46bd      	mov	sp, r7
 80291a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291ac:	4770      	bx	lr

080291ae <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80291ae:	b480      	push	{r7}
 80291b0:	b083      	sub	sp, #12
 80291b2:	af00      	add	r7, sp, #0
 80291b4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80291b6:	687b      	ldr	r3, [r7, #4]
 80291b8:	2200      	movs	r2, #0
 80291ba:	601a      	str	r2, [r3, #0]
 80291bc:	687b      	ldr	r3, [r7, #4]
 80291be:	2200      	movs	r2, #0
 80291c0:	605a      	str	r2, [r3, #4]
 80291c2:	687b      	ldr	r3, [r7, #4]
 80291c4:	2200      	movs	r2, #0
 80291c6:	609a      	str	r2, [r3, #8]
 80291c8:	687b      	ldr	r3, [r7, #4]
 80291ca:	2200      	movs	r2, #0
 80291cc:	60da      	str	r2, [r3, #12]
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	4618      	mov	r0, r3
 80291d2:	370c      	adds	r7, #12
 80291d4:	46bd      	mov	sp, r7
 80291d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80291da:	4770      	bx	lr

080291dc <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80291dc:	b580      	push	{r7, lr}
 80291de:	b082      	sub	sp, #8
 80291e0:	af00      	add	r7, sp, #0
 80291e2:	6078      	str	r0, [r7, #4]
 80291e4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80291e6:	2200      	movs	r2, #0
 80291e8:	6839      	ldr	r1, [r7, #0]
 80291ea:	6878      	ldr	r0, [r7, #4]
 80291ec:	f000 fd80 	bl	8029cf0 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 80291f0:	4603      	mov	r3, r0
 80291f2:	4618      	mov	r0, r3
 80291f4:	3708      	adds	r7, #8
 80291f6:	46bd      	mov	sp, r7
 80291f8:	bd80      	pop	{r7, pc}

080291fa <_ZNSaIPjEC1IjEERKSaIT_E>:
 80291fa:	b580      	push	{r7, lr}
 80291fc:	b082      	sub	sp, #8
 80291fe:	af00      	add	r7, sp, #0
 8029200:	6078      	str	r0, [r7, #4]
 8029202:	6039      	str	r1, [r7, #0]
 8029204:	6878      	ldr	r0, [r7, #4]
 8029206:	f000 fd91 	bl	8029d2c <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 802920a:	687b      	ldr	r3, [r7, #4]
 802920c:	4618      	mov	r0, r3
 802920e:	3708      	adds	r7, #8
 8029210:	46bd      	mov	sp, r7
 8029212:	bd80      	pop	{r7, pc}

08029214 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8029214:	b480      	push	{r7}
 8029216:	b083      	sub	sp, #12
 8029218:	af00      	add	r7, sp, #0
 802921a:	6078      	str	r0, [r7, #4]
 802921c:	687b      	ldr	r3, [r7, #4]
 802921e:	4618      	mov	r0, r3
 8029220:	370c      	adds	r7, #12
 8029222:	46bd      	mov	sp, r7
 8029224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029228:	4770      	bx	lr

0802922a <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 802922a:	b580      	push	{r7, lr}
 802922c:	b084      	sub	sp, #16
 802922e:	af00      	add	r7, sp, #0
 8029230:	60f8      	str	r0, [r7, #12]
 8029232:	60b9      	str	r1, [r7, #8]
 8029234:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8029236:	687b      	ldr	r3, [r7, #4]
 8029238:	009b      	lsls	r3, r3, #2
 802923a:	4619      	mov	r1, r3
 802923c:	68b8      	ldr	r0, [r7, #8]
 802923e:	f016 f89d 	bl	803f37c <_ZdlPvj>
      }
 8029242:	bf00      	nop
 8029244:	3710      	adds	r7, #16
 8029246:	46bd      	mov	sp, r7
 8029248:	bd80      	pop	{r7, pc}

0802924a <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 802924a:	b480      	push	{r7}
 802924c:	b083      	sub	sp, #12
 802924e:	af00      	add	r7, sp, #0
 8029250:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8029252:	687b      	ldr	r3, [r7, #4]
 8029254:	4618      	mov	r0, r3
 8029256:	370c      	adds	r7, #12
 8029258:	46bd      	mov	sp, r7
 802925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802925e:	4770      	bx	lr

08029260 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8029260:	b580      	push	{r7, lr}
 8029262:	b082      	sub	sp, #8
 8029264:	af00      	add	r7, sp, #0
 8029266:	6078      	str	r0, [r7, #4]
 8029268:	6039      	str	r1, [r7, #0]
 802926a:	683b      	ldr	r3, [r7, #0]
 802926c:	681a      	ldr	r2, [r3, #0]
 802926e:	687b      	ldr	r3, [r7, #4]
 8029270:	601a      	str	r2, [r3, #0]
 8029272:	683b      	ldr	r3, [r7, #0]
 8029274:	685a      	ldr	r2, [r3, #4]
 8029276:	687b      	ldr	r3, [r7, #4]
 8029278:	605a      	str	r2, [r3, #4]
 802927a:	687b      	ldr	r3, [r7, #4]
 802927c:	f103 0208 	add.w	r2, r3, #8
 8029280:	683b      	ldr	r3, [r7, #0]
 8029282:	3308      	adds	r3, #8
 8029284:	4619      	mov	r1, r3
 8029286:	4610      	mov	r0, r2
 8029288:	f7fa fffe 	bl	8024288 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 802928c:	687b      	ldr	r3, [r7, #4]
 802928e:	f103 0218 	add.w	r2, r3, #24
 8029292:	683b      	ldr	r3, [r7, #0]
 8029294:	3318      	adds	r3, #24
 8029296:	4619      	mov	r1, r3
 8029298:	4610      	mov	r0, r2
 802929a:	f7fa fff5 	bl	8024288 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 802929e:	687b      	ldr	r3, [r7, #4]
 80292a0:	4618      	mov	r0, r3
 80292a2:	3708      	adds	r7, #8
 80292a4:	46bd      	mov	sp, r7
 80292a6:	bd80      	pop	{r7, pc}

080292a8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80292a8:	b5b0      	push	{r4, r5, r7, lr}
 80292aa:	b08c      	sub	sp, #48	; 0x30
 80292ac:	af00      	add	r7, sp, #0
 80292ae:	6078      	str	r0, [r7, #4]
 80292b0:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80292b2:	6839      	ldr	r1, [r7, #0]
 80292b4:	6878      	ldr	r0, [r7, #4]
 80292b6:	f7ff ffd3 	bl	8029260 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 80292ba:	f107 0308 	add.w	r3, r7, #8
 80292be:	4618      	mov	r0, r3
 80292c0:	f7fc f9cd 	bl	802565e <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 80292c4:	683b      	ldr	r3, [r7, #0]
 80292c6:	461d      	mov	r5, r3
 80292c8:	f107 0408 	add.w	r4, r7, #8
 80292cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80292ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80292d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80292d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80292d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80292d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80292dc:	687b      	ldr	r3, [r7, #4]
 80292de:	4618      	mov	r0, r3
 80292e0:	3730      	adds	r7, #48	; 0x30
 80292e2:	46bd      	mov	sp, r7
 80292e4:	bdb0      	pop	{r4, r5, r7, pc}

080292e6 <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80292e6:	b480      	push	{r7}
 80292e8:	b083      	sub	sp, #12
 80292ea:	af00      	add	r7, sp, #0
 80292ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80292ee:	687b      	ldr	r3, [r7, #4]
 80292f0:	4618      	mov	r0, r3
 80292f2:	370c      	adds	r7, #12
 80292f4:	46bd      	mov	sp, r7
 80292f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292fa:	4770      	bx	lr

080292fc <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80292fc:	b480      	push	{r7}
 80292fe:	b083      	sub	sp, #12
 8029300:	af00      	add	r7, sp, #0
 8029302:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8029304:	687b      	ldr	r3, [r7, #4]
 8029306:	4618      	mov	r0, r3
 8029308:	370c      	adds	r7, #12
 802930a:	46bd      	mov	sp, r7
 802930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029310:	4770      	bx	lr

08029312 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8029312:	b580      	push	{r7, lr}
 8029314:	b082      	sub	sp, #8
 8029316:	af00      	add	r7, sp, #0
 8029318:	6078      	str	r0, [r7, #4]
 802931a:	6039      	str	r1, [r7, #0]
 802931c:	683b      	ldr	r3, [r7, #0]
 802931e:	681a      	ldr	r2, [r3, #0]
 8029320:	687b      	ldr	r3, [r7, #4]
 8029322:	601a      	str	r2, [r3, #0]
 8029324:	683b      	ldr	r3, [r7, #0]
 8029326:	685a      	ldr	r2, [r3, #4]
 8029328:	687b      	ldr	r3, [r7, #4]
 802932a:	605a      	str	r2, [r3, #4]
 802932c:	687b      	ldr	r3, [r7, #4]
 802932e:	f103 0208 	add.w	r2, r3, #8
 8029332:	683b      	ldr	r3, [r7, #0]
 8029334:	3308      	adds	r3, #8
 8029336:	4619      	mov	r1, r3
 8029338:	4610      	mov	r0, r2
 802933a:	f7fb f848 	bl	80243ce <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 802933e:	687b      	ldr	r3, [r7, #4]
 8029340:	f103 0218 	add.w	r2, r3, #24
 8029344:	683b      	ldr	r3, [r7, #0]
 8029346:	3318      	adds	r3, #24
 8029348:	4619      	mov	r1, r3
 802934a:	4610      	mov	r0, r2
 802934c:	f7fb f83f 	bl	80243ce <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	4618      	mov	r0, r3
 8029354:	3708      	adds	r7, #8
 8029356:	46bd      	mov	sp, r7
 8029358:	bd80      	pop	{r7, pc}

0802935a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 802935a:	b5b0      	push	{r4, r5, r7, lr}
 802935c:	b08c      	sub	sp, #48	; 0x30
 802935e:	af00      	add	r7, sp, #0
 8029360:	6078      	str	r0, [r7, #4]
 8029362:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8029364:	6839      	ldr	r1, [r7, #0]
 8029366:	6878      	ldr	r0, [r7, #4]
 8029368:	f7ff ffd3 	bl	8029312 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 802936c:	f107 0308 	add.w	r3, r7, #8
 8029370:	4618      	mov	r0, r3
 8029372:	f7fd fc67 	bl	8026c44 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 8029376:	683b      	ldr	r3, [r7, #0]
 8029378:	461d      	mov	r5, r3
 802937a:	f107 0408 	add.w	r4, r7, #8
 802937e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8029382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8029386:	e894 0003 	ldmia.w	r4, {r0, r1}
 802938a:	e885 0003 	stmia.w	r5, {r0, r1}
 802938e:	687b      	ldr	r3, [r7, #4]
 8029390:	4618      	mov	r0, r3
 8029392:	3730      	adds	r7, #48	; 0x30
 8029394:	46bd      	mov	sp, r7
 8029396:	bdb0      	pop	{r4, r5, r7, pc}

08029398 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8029398:	b480      	push	{r7}
 802939a:	b083      	sub	sp, #12
 802939c:	af00      	add	r7, sp, #0
 802939e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80293a0:	687b      	ldr	r3, [r7, #4]
 80293a2:	4618      	mov	r0, r3
 80293a4:	370c      	adds	r7, #12
 80293a6:	46bd      	mov	sp, r7
 80293a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293ac:	4770      	bx	lr

080293ae <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80293ae:	b480      	push	{r7}
 80293b0:	b083      	sub	sp, #12
 80293b2:	af00      	add	r7, sp, #0
 80293b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80293b6:	687b      	ldr	r3, [r7, #4]
 80293b8:	4618      	mov	r0, r3
 80293ba:	370c      	adds	r7, #12
 80293bc:	46bd      	mov	sp, r7
 80293be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293c2:	4770      	bx	lr

080293c4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80293c4:	b580      	push	{r7, lr}
 80293c6:	b082      	sub	sp, #8
 80293c8:	af00      	add	r7, sp, #0
 80293ca:	6078      	str	r0, [r7, #4]
 80293cc:	6039      	str	r1, [r7, #0]
 80293ce:	683b      	ldr	r3, [r7, #0]
 80293d0:	681a      	ldr	r2, [r3, #0]
 80293d2:	687b      	ldr	r3, [r7, #4]
 80293d4:	601a      	str	r2, [r3, #0]
 80293d6:	683b      	ldr	r3, [r7, #0]
 80293d8:	685a      	ldr	r2, [r3, #4]
 80293da:	687b      	ldr	r3, [r7, #4]
 80293dc:	605a      	str	r2, [r3, #4]
 80293de:	687b      	ldr	r3, [r7, #4]
 80293e0:	f103 0208 	add.w	r2, r3, #8
 80293e4:	683b      	ldr	r3, [r7, #0]
 80293e6:	3308      	adds	r3, #8
 80293e8:	4619      	mov	r1, r3
 80293ea:	4610      	mov	r0, r2
 80293ec:	f7fb ffc1 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80293f0:	687b      	ldr	r3, [r7, #4]
 80293f2:	f103 0218 	add.w	r2, r3, #24
 80293f6:	683b      	ldr	r3, [r7, #0]
 80293f8:	3318      	adds	r3, #24
 80293fa:	4619      	mov	r1, r3
 80293fc:	4610      	mov	r0, r2
 80293fe:	f7fb ffb8 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029402:	687b      	ldr	r3, [r7, #4]
 8029404:	4618      	mov	r0, r3
 8029406:	3708      	adds	r7, #8
 8029408:	46bd      	mov	sp, r7
 802940a:	bd80      	pop	{r7, pc}

0802940c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 802940c:	b5b0      	push	{r4, r5, r7, lr}
 802940e:	b08c      	sub	sp, #48	; 0x30
 8029410:	af00      	add	r7, sp, #0
 8029412:	6078      	str	r0, [r7, #4]
 8029414:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8029416:	6839      	ldr	r1, [r7, #0]
 8029418:	6878      	ldr	r0, [r7, #4]
 802941a:	f7ff ffd3 	bl	80293c4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 802941e:	f107 0308 	add.w	r3, r7, #8
 8029422:	4618      	mov	r0, r3
 8029424:	f7fd f98c 	bl	8026740 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 8029428:	683b      	ldr	r3, [r7, #0]
 802942a:	461d      	mov	r5, r3
 802942c:	f107 0408 	add.w	r4, r7, #8
 8029430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8029434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8029438:	e894 0003 	ldmia.w	r4, {r0, r1}
 802943c:	e885 0003 	stmia.w	r5, {r0, r1}
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	4618      	mov	r0, r3
 8029444:	3730      	adds	r7, #48	; 0x30
 8029446:	46bd      	mov	sp, r7
 8029448:	bdb0      	pop	{r4, r5, r7, pc}

0802944a <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 802944a:	b480      	push	{r7}
 802944c:	b083      	sub	sp, #12
 802944e:	af00      	add	r7, sp, #0
 8029450:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8029452:	687b      	ldr	r3, [r7, #4]
 8029454:	4618      	mov	r0, r3
 8029456:	370c      	adds	r7, #12
 8029458:	46bd      	mov	sp, r7
 802945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802945e:	4770      	bx	lr

08029460 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8029460:	b480      	push	{r7}
 8029462:	b083      	sub	sp, #12
 8029464:	af00      	add	r7, sp, #0
 8029466:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8029468:	687b      	ldr	r3, [r7, #4]
 802946a:	4618      	mov	r0, r3
 802946c:	370c      	adds	r7, #12
 802946e:	46bd      	mov	sp, r7
 8029470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029474:	4770      	bx	lr

08029476 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8029476:	b580      	push	{r7, lr}
 8029478:	b082      	sub	sp, #8
 802947a:	af00      	add	r7, sp, #0
 802947c:	6078      	str	r0, [r7, #4]
 802947e:	6039      	str	r1, [r7, #0]
 8029480:	683b      	ldr	r3, [r7, #0]
 8029482:	681a      	ldr	r2, [r3, #0]
 8029484:	687b      	ldr	r3, [r7, #4]
 8029486:	601a      	str	r2, [r3, #0]
 8029488:	683b      	ldr	r3, [r7, #0]
 802948a:	685a      	ldr	r2, [r3, #4]
 802948c:	687b      	ldr	r3, [r7, #4]
 802948e:	605a      	str	r2, [r3, #4]
 8029490:	687b      	ldr	r3, [r7, #4]
 8029492:	f103 0208 	add.w	r2, r3, #8
 8029496:	683b      	ldr	r3, [r7, #0]
 8029498:	3308      	adds	r3, #8
 802949a:	4619      	mov	r1, r3
 802949c:	4610      	mov	r0, r2
 802949e:	f7fb fff9 	bl	8025494 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80294a2:	687b      	ldr	r3, [r7, #4]
 80294a4:	f103 0218 	add.w	r2, r3, #24
 80294a8:	683b      	ldr	r3, [r7, #0]
 80294aa:	3318      	adds	r3, #24
 80294ac:	4619      	mov	r1, r3
 80294ae:	4610      	mov	r0, r2
 80294b0:	f7fb fff0 	bl	8025494 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80294b4:	687b      	ldr	r3, [r7, #4]
 80294b6:	4618      	mov	r0, r3
 80294b8:	3708      	adds	r7, #8
 80294ba:	46bd      	mov	sp, r7
 80294bc:	bd80      	pop	{r7, pc}

080294be <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 80294be:	b5b0      	push	{r4, r5, r7, lr}
 80294c0:	b08c      	sub	sp, #48	; 0x30
 80294c2:	af00      	add	r7, sp, #0
 80294c4:	6078      	str	r0, [r7, #4]
 80294c6:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 80294c8:	6839      	ldr	r1, [r7, #0]
 80294ca:	6878      	ldr	r0, [r7, #4]
 80294cc:	f7ff ffd3 	bl	8029476 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 80294d0:	f107 0308 	add.w	r3, r7, #8
 80294d4:	4618      	mov	r0, r3
 80294d6:	f7fe fd40 	bl	8027f5a <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
 80294da:	683b      	ldr	r3, [r7, #0]
 80294dc:	461d      	mov	r5, r3
 80294de:	f107 0408 	add.w	r4, r7, #8
 80294e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80294e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80294e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80294e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80294ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80294ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80294f2:	687b      	ldr	r3, [r7, #4]
 80294f4:	4618      	mov	r0, r3
 80294f6:	3730      	adds	r7, #48	; 0x30
 80294f8:	46bd      	mov	sp, r7
 80294fa:	bdb0      	pop	{r4, r5, r7, pc}

080294fc <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80294fc:	b480      	push	{r7}
 80294fe:	b083      	sub	sp, #12
 8029500:	af00      	add	r7, sp, #0
 8029502:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8029504:	687b      	ldr	r3, [r7, #4]
 8029506:	4618      	mov	r0, r3
 8029508:	370c      	adds	r7, #12
 802950a:	46bd      	mov	sp, r7
 802950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029510:	4770      	bx	lr

08029512 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029512:	b480      	push	{r7}
 8029514:	b083      	sub	sp, #12
 8029516:	af00      	add	r7, sp, #0
 8029518:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802951a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 802951e:	4618      	mov	r0, r3
 8029520:	370c      	adds	r7, #12
 8029522:	46bd      	mov	sp, r7
 8029524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029528:	4770      	bx	lr

0802952a <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 802952a:	b580      	push	{r7, lr}
 802952c:	b082      	sub	sp, #8
 802952e:	af00      	add	r7, sp, #0
 8029530:	6078      	str	r0, [r7, #4]
 8029532:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8029534:	687a      	ldr	r2, [r7, #4]
 8029536:	683b      	ldr	r3, [r7, #0]
 8029538:	429a      	cmp	r2, r3
 802953a:	d00a      	beq.n	8029552 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 802953c:	6878      	ldr	r0, [r7, #4]
 802953e:	f000 fc00 	bl	8029d42 <_ZSt11__addressofI7RequestEPT_RS1_>
 8029542:	4603      	mov	r3, r0
 8029544:	4618      	mov	r0, r3
 8029546:	f000 fc07 	bl	8029d58 <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 802954a:	687b      	ldr	r3, [r7, #4]
 802954c:	3314      	adds	r3, #20
 802954e:	607b      	str	r3, [r7, #4]
 8029550:	e7f0      	b.n	8029534 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 8029552:	bf00      	nop
 8029554:	3708      	adds	r7, #8
 8029556:	46bd      	mov	sp, r7
 8029558:	bd80      	pop	{r7, pc}

0802955a <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802955a:	b580      	push	{r7, lr}
 802955c:	b084      	sub	sp, #16
 802955e:	af00      	add	r7, sp, #0
 8029560:	60f8      	str	r0, [r7, #12]
 8029562:	60b9      	str	r1, [r7, #8]
 8029564:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029566:	68f8      	ldr	r0, [r7, #12]
 8029568:	f000 fc01 	bl	8029d6e <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 802956c:	4602      	mov	r2, r0
 802956e:	68bb      	ldr	r3, [r7, #8]
 8029570:	4293      	cmp	r3, r2
 8029572:	bf8c      	ite	hi
 8029574:	2301      	movhi	r3, #1
 8029576:	2300      	movls	r3, #0
 8029578:	b2db      	uxtb	r3, r3
 802957a:	2b00      	cmp	r3, #0
 802957c:	d001      	beq.n	8029582 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802957e:	f015 ff10 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8029582:	68bb      	ldr	r3, [r7, #8]
 8029584:	009b      	lsls	r3, r3, #2
 8029586:	4618      	mov	r0, r3
 8029588:	f015 fefa 	bl	803f380 <_Znwj>
 802958c:	4603      	mov	r3, r0
      }
 802958e:	4618      	mov	r0, r3
 8029590:	3710      	adds	r7, #16
 8029592:	46bd      	mov	sp, r7
 8029594:	bd80      	pop	{r7, pc}

08029596 <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8029596:	b580      	push	{r7, lr}
 8029598:	b084      	sub	sp, #16
 802959a:	af00      	add	r7, sp, #0
 802959c:	60f8      	str	r0, [r7, #12]
 802959e:	60b9      	str	r1, [r7, #8]
 80295a0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80295a2:	687b      	ldr	r3, [r7, #4]
 80295a4:	011b      	lsls	r3, r3, #4
 80295a6:	4619      	mov	r1, r3
 80295a8:	68b8      	ldr	r0, [r7, #8]
 80295aa:	f015 fee7 	bl	803f37c <_ZdlPvj>
      }
 80295ae:	bf00      	nop
 80295b0:	3710      	adds	r7, #16
 80295b2:	46bd      	mov	sp, r7
 80295b4:	bd80      	pop	{r7, pc}

080295b6 <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80295b6:	b480      	push	{r7}
 80295b8:	b083      	sub	sp, #12
 80295ba:	af00      	add	r7, sp, #0
 80295bc:	6078      	str	r0, [r7, #4]
 80295be:	687b      	ldr	r3, [r7, #4]
 80295c0:	4618      	mov	r0, r3
 80295c2:	370c      	adds	r7, #12
 80295c4:	46bd      	mov	sp, r7
 80295c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295ca:	4770      	bx	lr

080295cc <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80295cc:	b580      	push	{r7, lr}
 80295ce:	b082      	sub	sp, #8
 80295d0:	af00      	add	r7, sp, #0
 80295d2:	6078      	str	r0, [r7, #4]
 80295d4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80295d6:	687a      	ldr	r2, [r7, #4]
 80295d8:	683b      	ldr	r3, [r7, #0]
 80295da:	429a      	cmp	r2, r3
 80295dc:	d00a      	beq.n	80295f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80295de:	6878      	ldr	r0, [r7, #4]
 80295e0:	f000 fbd1 	bl	8029d86 <_ZSt11__addressofI8ResponceEPT_RS1_>
 80295e4:	4603      	mov	r3, r0
 80295e6:	4618      	mov	r0, r3
 80295e8:	f000 fbd8 	bl	8029d9c <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 80295ec:	687b      	ldr	r3, [r7, #4]
 80295ee:	3310      	adds	r3, #16
 80295f0:	607b      	str	r3, [r7, #4]
 80295f2:	e7f0      	b.n	80295d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 80295f4:	bf00      	nop
 80295f6:	3708      	adds	r7, #8
 80295f8:	46bd      	mov	sp, r7
 80295fa:	bd80      	pop	{r7, pc}

080295fc <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 80295fc:	b480      	push	{r7}
 80295fe:	b083      	sub	sp, #12
 8029600:	af00      	add	r7, sp, #0
 8029602:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029604:	687b      	ldr	r3, [r7, #4]
 8029606:	4618      	mov	r0, r3
 8029608:	370c      	adds	r7, #12
 802960a:	46bd      	mov	sp, r7
 802960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029610:	4770      	bx	lr

08029612 <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029612:	b5b0      	push	{r4, r5, r7, lr}
 8029614:	b084      	sub	sp, #16
 8029616:	af00      	add	r7, sp, #0
 8029618:	60f8      	str	r0, [r7, #12]
 802961a:	60b9      	str	r1, [r7, #8]
 802961c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802961e:	68f8      	ldr	r0, [r7, #12]
 8029620:	f000 fbc7 	bl	8029db2 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8029624:	4604      	mov	r4, r0
 8029626:	68b8      	ldr	r0, [r7, #8]
 8029628:	f000 fbc3 	bl	8029db2 <_ZSt12__niter_baseIPP7RequestET_S3_>
 802962c:	4605      	mov	r5, r0
 802962e:	687b      	ldr	r3, [r7, #4]
 8029630:	4618      	mov	r0, r3
 8029632:	f000 fbbe 	bl	8029db2 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8029636:	4603      	mov	r3, r0
 8029638:	461a      	mov	r2, r3
 802963a:	4629      	mov	r1, r5
 802963c:	4620      	mov	r0, r4
 802963e:	f000 fbc3 	bl	8029dc8 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8029642:	4602      	mov	r2, r0
 8029644:	1d3b      	adds	r3, r7, #4
 8029646:	4611      	mov	r1, r2
 8029648:	4618      	mov	r0, r3
 802964a:	f000 fbcd 	bl	8029de8 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 802964e:	4603      	mov	r3, r0
    }
 8029650:	4618      	mov	r0, r3
 8029652:	3710      	adds	r7, #16
 8029654:	46bd      	mov	sp, r7
 8029656:	bdb0      	pop	{r4, r5, r7, pc}

08029658 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8029658:	b5b0      	push	{r4, r5, r7, lr}
 802965a:	b084      	sub	sp, #16
 802965c:	af00      	add	r7, sp, #0
 802965e:	60f8      	str	r0, [r7, #12]
 8029660:	60b9      	str	r1, [r7, #8]
 8029662:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029664:	68f8      	ldr	r0, [r7, #12]
 8029666:	f000 fba4 	bl	8029db2 <_ZSt12__niter_baseIPP7RequestET_S3_>
 802966a:	4604      	mov	r4, r0
 802966c:	68b8      	ldr	r0, [r7, #8]
 802966e:	f000 fba0 	bl	8029db2 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8029672:	4605      	mov	r5, r0
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	4618      	mov	r0, r3
 8029678:	f000 fb9b 	bl	8029db2 <_ZSt12__niter_baseIPP7RequestET_S3_>
 802967c:	4603      	mov	r3, r0
 802967e:	461a      	mov	r2, r3
 8029680:	4629      	mov	r1, r5
 8029682:	4620      	mov	r0, r4
 8029684:	f000 fbbc 	bl	8029e00 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8029688:	4602      	mov	r2, r0
 802968a:	1d3b      	adds	r3, r7, #4
 802968c:	4611      	mov	r1, r2
 802968e:	4618      	mov	r0, r3
 8029690:	f000 fbaa 	bl	8029de8 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8029694:	4603      	mov	r3, r0
    }
 8029696:	4618      	mov	r0, r3
 8029698:	3710      	adds	r7, #16
 802969a:	46bd      	mov	sp, r7
 802969c:	bdb0      	pop	{r4, r5, r7, pc}

0802969e <_ZNSt16allocator_traitsISaI8ResponceEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 802969e:	b580      	push	{r7, lr}
 80296a0:	b082      	sub	sp, #8
 80296a2:	af00      	add	r7, sp, #0
 80296a4:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80296a6:	6878      	ldr	r0, [r7, #4]
 80296a8:	f000 fbba 	bl	8029e20 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>
 80296ac:	4603      	mov	r3, r0
      }
 80296ae:	4618      	mov	r0, r3
 80296b0:	3708      	adds	r7, #8
 80296b2:	46bd      	mov	sp, r7
 80296b4:	bd80      	pop	{r7, pc}

080296b6 <_ZSt4copyIPP8ResponceS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80296b6:	b590      	push	{r4, r7, lr}
 80296b8:	b085      	sub	sp, #20
 80296ba:	af00      	add	r7, sp, #0
 80296bc:	60f8      	str	r0, [r7, #12]
 80296be:	60b9      	str	r1, [r7, #8]
 80296c0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80296c2:	68f8      	ldr	r0, [r7, #12]
 80296c4:	f000 fbb8 	bl	8029e38 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80296c8:	4604      	mov	r4, r0
 80296ca:	68b8      	ldr	r0, [r7, #8]
 80296cc:	f000 fbb4 	bl	8029e38 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80296d0:	4603      	mov	r3, r0
 80296d2:	687a      	ldr	r2, [r7, #4]
 80296d4:	4619      	mov	r1, r3
 80296d6:	4620      	mov	r0, r4
 80296d8:	f000 fbb9 	bl	8029e4e <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 80296dc:	4603      	mov	r3, r0
    }
 80296de:	4618      	mov	r0, r3
 80296e0:	3714      	adds	r7, #20
 80296e2:	46bd      	mov	sp, r7
 80296e4:	bd90      	pop	{r4, r7, pc}

080296e6 <_ZSt13copy_backwardIPP8ResponceS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80296e6:	b590      	push	{r4, r7, lr}
 80296e8:	b085      	sub	sp, #20
 80296ea:	af00      	add	r7, sp, #0
 80296ec:	60f8      	str	r0, [r7, #12]
 80296ee:	60b9      	str	r1, [r7, #8]
 80296f0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80296f2:	68f8      	ldr	r0, [r7, #12]
 80296f4:	f000 fba0 	bl	8029e38 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 80296f8:	4604      	mov	r4, r0
 80296fa:	68b8      	ldr	r0, [r7, #8]
 80296fc:	f000 fb9c 	bl	8029e38 <_ZSt12__miter_baseIPP8ResponceET_S3_>
 8029700:	4603      	mov	r3, r0
 8029702:	687a      	ldr	r2, [r7, #4]
 8029704:	4619      	mov	r1, r3
 8029706:	4620      	mov	r0, r4
 8029708:	f000 fbc4 	bl	8029e94 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 802970c:	4603      	mov	r3, r0
    }
 802970e:	4618      	mov	r0, r3
 8029710:	3714      	adds	r7, #20
 8029712:	46bd      	mov	sp, r7
 8029714:	bd90      	pop	{r4, r7, pc}

08029716 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029716:	b580      	push	{r7, lr}
 8029718:	b084      	sub	sp, #16
 802971a:	af00      	add	r7, sp, #0
 802971c:	60f8      	str	r0, [r7, #12]
 802971e:	60b9      	str	r1, [r7, #8]
 8029720:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029722:	68f8      	ldr	r0, [r7, #12]
 8029724:	f000 fbd9 	bl	8029eda <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8029728:	4602      	mov	r2, r0
 802972a:	68bb      	ldr	r3, [r7, #8]
 802972c:	4293      	cmp	r3, r2
 802972e:	bf8c      	ite	hi
 8029730:	2301      	movhi	r3, #1
 8029732:	2300      	movls	r3, #0
 8029734:	b2db      	uxtb	r3, r3
 8029736:	2b00      	cmp	r3, #0
 8029738:	d001      	beq.n	802973e <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802973a:	f015 fe32 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 802973e:	68bb      	ldr	r3, [r7, #8]
 8029740:	011b      	lsls	r3, r3, #4
 8029742:	4618      	mov	r0, r3
 8029744:	f015 fe1c 	bl	803f380 <_Znwj>
 8029748:	4603      	mov	r3, r0
      }
 802974a:	4618      	mov	r0, r3
 802974c:	3710      	adds	r7, #16
 802974e:	46bd      	mov	sp, r7
 8029750:	bd80      	pop	{r7, pc}

08029752 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8029752:	b580      	push	{r7, lr}
 8029754:	b082      	sub	sp, #8
 8029756:	af00      	add	r7, sp, #0
 8029758:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 802975a:	6878      	ldr	r0, [r7, #4]
 802975c:	f000 f820 	bl	80297a0 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8029760:	4603      	mov	r3, r0
 8029762:	4618      	mov	r0, r3
 8029764:	3708      	adds	r7, #8
 8029766:	46bd      	mov	sp, r7
 8029768:	bd80      	pop	{r7, pc}

0802976a <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 802976a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802976c:	b085      	sub	sp, #20
 802976e:	af00      	add	r7, sp, #0
 8029770:	60f8      	str	r0, [r7, #12]
 8029772:	60b9      	str	r1, [r7, #8]
 8029774:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8029776:	68fc      	ldr	r4, [r7, #12]
 8029778:	68b8      	ldr	r0, [r7, #8]
 802977a:	f7f7 fb99 	bl	8020eb0 <_ZSt17__size_to_integerj>
 802977e:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8029780:	f107 030c 	add.w	r3, r7, #12
 8029784:	4618      	mov	r0, r3
 8029786:	f000 fbb4 	bl	8029ef2 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 802978a:	4633      	mov	r3, r6
 802978c:	687a      	ldr	r2, [r7, #4]
 802978e:	4629      	mov	r1, r5
 8029790:	4620      	mov	r0, r4
 8029792:	f000 fbb9 	bl	8029f08 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8029796:	4603      	mov	r3, r0
    }
 8029798:	4618      	mov	r0, r3
 802979a:	3714      	adds	r7, #20
 802979c:	46bd      	mov	sp, r7
 802979e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080297a0 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80297a0:	b480      	push	{r7}
 80297a2:	b083      	sub	sp, #12
 80297a4:	af00      	add	r7, sp, #0
 80297a6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80297a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
      }
 80297ac:	4618      	mov	r0, r3
 80297ae:	370c      	adds	r7, #12
 80297b0:	46bd      	mov	sp, r7
 80297b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80297b6:	4770      	bx	lr

080297b8 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80297b8:	b580      	push	{r7, lr}
 80297ba:	b086      	sub	sp, #24
 80297bc:	af00      	add	r7, sp, #0
 80297be:	60f8      	str	r0, [r7, #12]
 80297c0:	60b9      	str	r1, [r7, #8]
 80297c2:	607a      	str	r2, [r7, #4]
 80297c4:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80297c6:	68ba      	ldr	r2, [r7, #8]
 80297c8:	68fb      	ldr	r3, [r7, #12]
 80297ca:	1ad3      	subs	r3, r2, r3
 80297cc:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80297ce:	697b      	ldr	r3, [r7, #20]
 80297d0:	2b00      	cmp	r3, #0
 80297d2:	dd05      	ble.n	80297e0 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80297d4:	697b      	ldr	r3, [r7, #20]
 80297d6:	461a      	mov	r2, r3
 80297d8:	68f9      	ldr	r1, [r7, #12]
 80297da:	6878      	ldr	r0, [r7, #4]
 80297dc:	f015 fe72 	bl	803f4c4 <memmove>
      return __result + __count;
 80297e0:	697b      	ldr	r3, [r7, #20]
 80297e2:	687a      	ldr	r2, [r7, #4]
 80297e4:	4413      	add	r3, r2
    }
 80297e6:	4618      	mov	r0, r3
 80297e8:	3718      	adds	r7, #24
 80297ea:	46bd      	mov	sp, r7
 80297ec:	bd80      	pop	{r7, pc}

080297ee <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80297ee:	b480      	push	{r7}
 80297f0:	b083      	sub	sp, #12
 80297f2:	af00      	add	r7, sp, #0
 80297f4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80297f6:	687b      	ldr	r3, [r7, #4]
 80297f8:	4618      	mov	r0, r3
 80297fa:	370c      	adds	r7, #12
 80297fc:	46bd      	mov	sp, r7
 80297fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029802:	4770      	bx	lr

08029804 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8029804:	b580      	push	{r7, lr}
 8029806:	b084      	sub	sp, #16
 8029808:	af00      	add	r7, sp, #0
 802980a:	60f8      	str	r0, [r7, #12]
 802980c:	60b9      	str	r1, [r7, #8]
 802980e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8029810:	687a      	ldr	r2, [r7, #4]
 8029812:	68b9      	ldr	r1, [r7, #8]
 8029814:	68f8      	ldr	r0, [r7, #12]
 8029816:	f000 fb92 	bl	8029f3e <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 802981a:	4603      	mov	r3, r0
 802981c:	4618      	mov	r0, r3
 802981e:	3710      	adds	r7, #16
 8029820:	46bd      	mov	sp, r7
 8029822:	bd80      	pop	{r7, pc}

08029824 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 8029824:	b590      	push	{r4, r7, lr}
 8029826:	b085      	sub	sp, #20
 8029828:	af00      	add	r7, sp, #0
 802982a:	60f8      	str	r0, [r7, #12]
 802982c:	60b9      	str	r1, [r7, #8]
 802982e:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029830:	68f8      	ldr	r0, [r7, #12]
 8029832:	f7fc fbcb 	bl	8025fcc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8029836:	4604      	mov	r4, r0
 8029838:	68b8      	ldr	r0, [r7, #8]
 802983a:	f7fc fbc7 	bl	8025fcc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 802983e:	4603      	mov	r3, r0
 8029840:	687a      	ldr	r2, [r7, #4]
 8029842:	4619      	mov	r1, r3
 8029844:	4620      	mov	r0, r4
 8029846:	f000 fb92 	bl	8029f6e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 802984a:	4603      	mov	r3, r0
    }
 802984c:	4618      	mov	r0, r3
 802984e:	3714      	adds	r7, #20
 8029850:	46bd      	mov	sp, r7
 8029852:	bd90      	pop	{r4, r7, pc}

08029854 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8029854:	b580      	push	{r7, lr}
 8029856:	b086      	sub	sp, #24
 8029858:	af00      	add	r7, sp, #0
 802985a:	60f8      	str	r0, [r7, #12]
 802985c:	60b9      	str	r1, [r7, #8]
 802985e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8029860:	68ba      	ldr	r2, [r7, #8]
 8029862:	68fb      	ldr	r3, [r7, #12]
 8029864:	1ad3      	subs	r3, r2, r3
 8029866:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8029868:	697b      	ldr	r3, [r7, #20]
 802986a:	2b00      	cmp	r3, #0
 802986c:	d005      	beq.n	802987a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802986e:	697b      	ldr	r3, [r7, #20]
 8029870:	461a      	mov	r2, r3
 8029872:	68f9      	ldr	r1, [r7, #12]
 8029874:	6878      	ldr	r0, [r7, #4]
 8029876:	f015 fe25 	bl	803f4c4 <memmove>
	  return __result + _Num;
 802987a:	697b      	ldr	r3, [r7, #20]
 802987c:	687a      	ldr	r2, [r7, #4]
 802987e:	4413      	add	r3, r2
	}
 8029880:	4618      	mov	r0, r3
 8029882:	3718      	adds	r7, #24
 8029884:	46bd      	mov	sp, r7
 8029886:	bd80      	pop	{r7, pc}

08029888 <_ZSt4copyIPKhPhET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8029888:	b590      	push	{r4, r7, lr}
 802988a:	b085      	sub	sp, #20
 802988c:	af00      	add	r7, sp, #0
 802988e:	60f8      	str	r0, [r7, #12]
 8029890:	60b9      	str	r1, [r7, #8]
 8029892:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029894:	68f8      	ldr	r0, [r7, #12]
 8029896:	f000 fb8d 	bl	8029fb4 <_ZSt12__miter_baseIPKhET_S2_>
 802989a:	4604      	mov	r4, r0
 802989c:	68b8      	ldr	r0, [r7, #8]
 802989e:	f000 fb89 	bl	8029fb4 <_ZSt12__miter_baseIPKhET_S2_>
 80298a2:	4603      	mov	r3, r0
 80298a4:	687a      	ldr	r2, [r7, #4]
 80298a6:	4619      	mov	r1, r3
 80298a8:	4620      	mov	r0, r4
 80298aa:	f000 fb8e 	bl	8029fca <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 80298ae:	4603      	mov	r3, r0
    }
 80298b0:	4618      	mov	r0, r3
 80298b2:	3714      	adds	r7, #20
 80298b4:	46bd      	mov	sp, r7
 80298b6:	bd90      	pop	{r4, r7, pc}

080298b8 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80298b8:	b580      	push	{r7, lr}
 80298ba:	b084      	sub	sp, #16
 80298bc:	af00      	add	r7, sp, #0
 80298be:	60f8      	str	r0, [r7, #12]
 80298c0:	60b9      	str	r1, [r7, #8]
 80298c2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80298c4:	687a      	ldr	r2, [r7, #4]
 80298c6:	68b9      	ldr	r1, [r7, #8]
 80298c8:	68f8      	ldr	r0, [r7, #12]
 80298ca:	f000 fba1 	bl	802a010 <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 80298ce:	4603      	mov	r3, r0
 80298d0:	4618      	mov	r0, r3
 80298d2:	3710      	adds	r7, #16
 80298d4:	46bd      	mov	sp, r7
 80298d6:	bd80      	pop	{r7, pc}

080298d8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 80298d8:	b580      	push	{r7, lr}
 80298da:	b082      	sub	sp, #8
 80298dc:	af00      	add	r7, sp, #0
 80298de:	6078      	str	r0, [r7, #4]
 80298e0:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 80298e2:	683b      	ldr	r3, [r7, #0]
 80298e4:	425b      	negs	r3, r3
 80298e6:	4619      	mov	r1, r3
 80298e8:	6878      	ldr	r0, [r7, #4]
 80298ea:	f7fe f9a1 	bl	8027c30 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 80298ee:	4603      	mov	r3, r0
 80298f0:	4618      	mov	r0, r3
 80298f2:	3708      	adds	r7, #8
 80298f4:	46bd      	mov	sp, r7
 80298f6:	bd80      	pop	{r7, pc}

080298f8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80298f8:	b580      	push	{r7, lr}
 80298fa:	b088      	sub	sp, #32
 80298fc:	af00      	add	r7, sp, #0
 80298fe:	60f8      	str	r0, [r7, #12]
 8029900:	60b9      	str	r1, [r7, #8]
 8029902:	607a      	str	r2, [r7, #4]
 8029904:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8029906:	f107 0310 	add.w	r3, r7, #16
 802990a:	6839      	ldr	r1, [r7, #0]
 802990c:	4618      	mov	r0, r3
 802990e:	f7fb fd30 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029912:	68f8      	ldr	r0, [r7, #12]
 8029914:	f107 0310 	add.w	r3, r7, #16
 8029918:	687a      	ldr	r2, [r7, #4]
 802991a:	68b9      	ldr	r1, [r7, #8]
 802991c:	f7fc fc92 	bl	8026244 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8029920:	68f8      	ldr	r0, [r7, #12]
 8029922:	3720      	adds	r7, #32
 8029924:	46bd      	mov	sp, r7
 8029926:	bd80      	pop	{r7, pc}

08029928 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8029928:	b580      	push	{r7, lr}
 802992a:	b082      	sub	sp, #8
 802992c:	af00      	add	r7, sp, #0
 802992e:	6078      	str	r0, [r7, #4]
 8029930:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8029932:	683b      	ldr	r3, [r7, #0]
 8029934:	1c5a      	adds	r2, r3, #1
 8029936:	687b      	ldr	r3, [r7, #4]
 8029938:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 802993a:	6879      	ldr	r1, [r7, #4]
 802993c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 802993e:	6879      	ldr	r1, [r7, #4]
 8029940:	6809      	ldr	r1, [r1, #0]
 8029942:	1a41      	subs	r1, r0, r1
 8029944:	1089      	asrs	r1, r1, #2
 8029946:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8029948:	429a      	cmp	r2, r3
 802994a:	d904      	bls.n	8029956 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 802994c:	2200      	movs	r2, #0
 802994e:	6839      	ldr	r1, [r7, #0]
 8029950:	6878      	ldr	r0, [r7, #4]
 8029952:	f7fe f8b5 	bl	8027ac0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8029956:	bf00      	nop
 8029958:	3708      	adds	r7, #8
 802995a:	46bd      	mov	sp, r7
 802995c:	bd80      	pop	{r7, pc}

0802995e <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
    make_move_iterator(_Iterator __i)
 802995e:	b580      	push	{r7, lr}
 8029960:	b086      	sub	sp, #24
 8029962:	af00      	add	r7, sp, #0
 8029964:	6078      	str	r0, [r7, #4]
 8029966:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8029968:	6838      	ldr	r0, [r7, #0]
 802996a:	f000 fb61 	bl	802a030 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 802996e:	4602      	mov	r2, r0
 8029970:	f107 0308 	add.w	r3, r7, #8
 8029974:	4611      	mov	r1, r2
 8029976:	4618      	mov	r0, r3
 8029978:	f7fb fcfb 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802997c:	f107 0308 	add.w	r3, r7, #8
 8029980:	4619      	mov	r1, r3
 8029982:	6878      	ldr	r0, [r7, #4]
 8029984:	f000 fb5f 	bl	802a046 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8029988:	6878      	ldr	r0, [r7, #4]
 802998a:	3718      	adds	r7, #24
 802998c:	46bd      	mov	sp, r7
 802998e:	bd80      	pop	{r7, pc}

08029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 8029990:	b580      	push	{r7, lr}
 8029992:	b082      	sub	sp, #8
 8029994:	af00      	add	r7, sp, #0
 8029996:	6078      	str	r0, [r7, #4]
 8029998:	6039      	str	r1, [r7, #0]
 802999a:	687b      	ldr	r3, [r7, #4]
 802999c:	683a      	ldr	r2, [r7, #0]
 802999e:	4611      	mov	r1, r2
 80299a0:	4618      	mov	r0, r3
 80299a2:	f7fb fce6 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80299a6:	687b      	ldr	r3, [r7, #4]
 80299a8:	4618      	mov	r0, r3
 80299aa:	3708      	adds	r7, #8
 80299ac:	46bd      	mov	sp, r7
 80299ae:	bd80      	pop	{r7, pc}

080299b0 <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80299b0:	b580      	push	{r7, lr}
 80299b2:	b090      	sub	sp, #64	; 0x40
 80299b4:	af00      	add	r7, sp, #0
 80299b6:	60f8      	str	r0, [r7, #12]
 80299b8:	60b9      	str	r1, [r7, #8]
 80299ba:	607a      	str	r2, [r7, #4]
 80299bc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80299be:	f107 0310 	add.w	r3, r7, #16
 80299c2:	68b9      	ldr	r1, [r7, #8]
 80299c4:	4618      	mov	r0, r3
 80299c6:	f7ff ffe3 	bl	8029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80299ca:	f107 0320 	add.w	r3, r7, #32
 80299ce:	6879      	ldr	r1, [r7, #4]
 80299d0:	4618      	mov	r0, r3
 80299d2:	f7ff ffdd 	bl	8029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80299d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80299da:	6839      	ldr	r1, [r7, #0]
 80299dc:	4618      	mov	r0, r3
 80299de:	f7fb fcc8 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80299e2:	68f8      	ldr	r0, [r7, #12]
 80299e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80299e8:	f107 0220 	add.w	r2, r7, #32
 80299ec:	f107 0110 	add.w	r1, r7, #16
 80299f0:	f000 fb3c 	bl	802a06c <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 80299f4:	68f8      	ldr	r0, [r7, #12]
 80299f6:	3740      	adds	r7, #64	; 0x40
 80299f8:	46bd      	mov	sp, r7
 80299fa:	bd80      	pop	{r7, pc}

080299fc <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 80299fc:	b580      	push	{r7, lr}
 80299fe:	b082      	sub	sp, #8
 8029a00:	af00      	add	r7, sp, #0
 8029a02:	6078      	str	r0, [r7, #4]
 8029a04:	6039      	str	r1, [r7, #0]
    { return __it; }
 8029a06:	6839      	ldr	r1, [r7, #0]
 8029a08:	6878      	ldr	r0, [r7, #4]
 8029a0a:	f7fb fcb2 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029a0e:	6878      	ldr	r0, [r7, #4]
 8029a10:	3708      	adds	r7, #8
 8029a12:	46bd      	mov	sp, r7
 8029a14:	bd80      	pop	{r7, pc}

08029a16 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029a16:	b580      	push	{r7, lr}
 8029a18:	b0a0      	sub	sp, #128	; 0x80
 8029a1a:	af00      	add	r7, sp, #0
 8029a1c:	60f8      	str	r0, [r7, #12]
 8029a1e:	60b9      	str	r1, [r7, #8]
 8029a20:	607a      	str	r2, [r7, #4]
 8029a22:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8029a24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029a28:	68b9      	ldr	r1, [r7, #8]
 8029a2a:	4618      	mov	r0, r3
 8029a2c:	f7fb fca1 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029a30:	f107 0320 	add.w	r3, r7, #32
 8029a34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029a38:	4611      	mov	r1, r2
 8029a3a:	4618      	mov	r0, r3
 8029a3c:	f7fe ff98 	bl	8028970 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029a40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029a44:	6879      	ldr	r1, [r7, #4]
 8029a46:	4618      	mov	r0, r3
 8029a48:	f7fb fc93 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029a50:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8029a54:	4611      	mov	r1, r2
 8029a56:	4618      	mov	r0, r3
 8029a58:	f7fe ff8a 	bl	8028970 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029a5c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8029a60:	6839      	ldr	r1, [r7, #0]
 8029a62:	4618      	mov	r0, r3
 8029a64:	f7fb fc85 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029a68:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8029a6c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8029a70:	4611      	mov	r1, r2
 8029a72:	4618      	mov	r0, r3
 8029a74:	f7fe ff7c 	bl	8028970 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029a78:	f107 0010 	add.w	r0, r7, #16
 8029a7c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8029a80:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8029a84:	f107 0120 	add.w	r1, r7, #32
 8029a88:	f000 fb19 	bl	802a0be <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8029a8c:	68fb      	ldr	r3, [r7, #12]
 8029a8e:	f107 0210 	add.w	r2, r7, #16
 8029a92:	6839      	ldr	r1, [r7, #0]
 8029a94:	4618      	mov	r0, r3
 8029a96:	f7fe ffdf 	bl	8028a58 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8029a9a:	68f8      	ldr	r0, [r7, #12]
 8029a9c:	3780      	adds	r7, #128	; 0x80
 8029a9e:	46bd      	mov	sp, r7
 8029aa0:	bd80      	pop	{r7, pc}

08029aa2 <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8029aa2:	b580      	push	{r7, lr}
 8029aa4:	b0a0      	sub	sp, #128	; 0x80
 8029aa6:	af00      	add	r7, sp, #0
 8029aa8:	60f8      	str	r0, [r7, #12]
 8029aaa:	60b9      	str	r1, [r7, #8]
 8029aac:	607a      	str	r2, [r7, #4]
 8029aae:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8029ab0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029ab4:	68b9      	ldr	r1, [r7, #8]
 8029ab6:	4618      	mov	r0, r3
 8029ab8:	f7fb fc5b 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029abc:	f107 0320 	add.w	r3, r7, #32
 8029ac0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8029ac4:	4611      	mov	r1, r2
 8029ac6:	4618      	mov	r0, r3
 8029ac8:	f7fe ff52 	bl	8028970 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029acc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8029ad0:	6879      	ldr	r1, [r7, #4]
 8029ad2:	4618      	mov	r0, r3
 8029ad4:	f7fb fc4d 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8029adc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8029ae0:	4611      	mov	r1, r2
 8029ae2:	4618      	mov	r0, r3
 8029ae4:	f7fe ff44 	bl	8028970 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029ae8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8029aec:	6839      	ldr	r1, [r7, #0]
 8029aee:	4618      	mov	r0, r3
 8029af0:	f7fb fc3f 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8029af4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8029af8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8029afc:	4611      	mov	r1, r2
 8029afe:	4618      	mov	r0, r3
 8029b00:	f7fe ff36 	bl	8028970 <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8029b04:	f107 0010 	add.w	r0, r7, #16
 8029b08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8029b0c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8029b10:	f107 0120 	add.w	r1, r7, #32
 8029b14:	f000 faf9 	bl	802a10a <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8029b18:	68fb      	ldr	r3, [r7, #12]
 8029b1a:	f107 0210 	add.w	r2, r7, #16
 8029b1e:	6839      	ldr	r1, [r7, #0]
 8029b20:	4618      	mov	r0, r3
 8029b22:	f7fe ff99 	bl	8028a58 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8029b26:	68f8      	ldr	r0, [r7, #12]
 8029b28:	3780      	adds	r7, #128	; 0x80
 8029b2a:	46bd      	mov	sp, r7
 8029b2c:	bd80      	pop	{r7, pc}

08029b2e <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8029b2e:	b580      	push	{r7, lr}
 8029b30:	b082      	sub	sp, #8
 8029b32:	af00      	add	r7, sp, #0
 8029b34:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8029b36:	6878      	ldr	r0, [r7, #4]
 8029b38:	f000 f856 	bl	8029be8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8029b3c:	4603      	mov	r3, r0
 8029b3e:	4618      	mov	r0, r3
 8029b40:	3708      	adds	r7, #8
 8029b42:	46bd      	mov	sp, r7
 8029b44:	bd80      	pop	{r7, pc}

08029b46 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8029b46:	b480      	push	{r7}
 8029b48:	b083      	sub	sp, #12
 8029b4a:	af00      	add	r7, sp, #0
 8029b4c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029b4e:	687b      	ldr	r3, [r7, #4]
 8029b50:	4618      	mov	r0, r3
 8029b52:	370c      	adds	r7, #12
 8029b54:	46bd      	mov	sp, r7
 8029b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b5a:	4770      	bx	lr

08029b5c <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029b5c:	b5b0      	push	{r4, r5, r7, lr}
 8029b5e:	b084      	sub	sp, #16
 8029b60:	af00      	add	r7, sp, #0
 8029b62:	60f8      	str	r0, [r7, #12]
 8029b64:	60b9      	str	r1, [r7, #8]
 8029b66:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029b68:	68f8      	ldr	r0, [r7, #12]
 8029b6a:	f000 faf4 	bl	802a156 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029b6e:	4604      	mov	r4, r0
 8029b70:	68b8      	ldr	r0, [r7, #8]
 8029b72:	f000 faf0 	bl	802a156 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029b76:	4605      	mov	r5, r0
 8029b78:	687b      	ldr	r3, [r7, #4]
 8029b7a:	4618      	mov	r0, r3
 8029b7c:	f000 faeb 	bl	802a156 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029b80:	4603      	mov	r3, r0
 8029b82:	461a      	mov	r2, r3
 8029b84:	4629      	mov	r1, r5
 8029b86:	4620      	mov	r0, r4
 8029b88:	f000 faf0 	bl	802a16c <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8029b8c:	4602      	mov	r2, r0
 8029b8e:	1d3b      	adds	r3, r7, #4
 8029b90:	4611      	mov	r1, r2
 8029b92:	4618      	mov	r0, r3
 8029b94:	f000 fafa 	bl	802a18c <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8029b98:	4603      	mov	r3, r0
    }
 8029b9a:	4618      	mov	r0, r3
 8029b9c:	3710      	adds	r7, #16
 8029b9e:	46bd      	mov	sp, r7
 8029ba0:	bdb0      	pop	{r4, r5, r7, pc}

08029ba2 <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8029ba2:	b5b0      	push	{r4, r5, r7, lr}
 8029ba4:	b084      	sub	sp, #16
 8029ba6:	af00      	add	r7, sp, #0
 8029ba8:	60f8      	str	r0, [r7, #12]
 8029baa:	60b9      	str	r1, [r7, #8]
 8029bac:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029bae:	68f8      	ldr	r0, [r7, #12]
 8029bb0:	f000 fad1 	bl	802a156 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029bb4:	4604      	mov	r4, r0
 8029bb6:	68b8      	ldr	r0, [r7, #8]
 8029bb8:	f000 facd 	bl	802a156 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029bbc:	4605      	mov	r5, r0
 8029bbe:	687b      	ldr	r3, [r7, #4]
 8029bc0:	4618      	mov	r0, r3
 8029bc2:	f000 fac8 	bl	802a156 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8029bc6:	4603      	mov	r3, r0
 8029bc8:	461a      	mov	r2, r3
 8029bca:	4629      	mov	r1, r5
 8029bcc:	4620      	mov	r0, r4
 8029bce:	f000 fae9 	bl	802a1a4 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8029bd2:	4602      	mov	r2, r0
 8029bd4:	1d3b      	adds	r3, r7, #4
 8029bd6:	4611      	mov	r1, r2
 8029bd8:	4618      	mov	r0, r3
 8029bda:	f000 fad7 	bl	802a18c <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8029bde:	4603      	mov	r3, r0
    }
 8029be0:	4618      	mov	r0, r3
 8029be2:	3710      	adds	r7, #16
 8029be4:	46bd      	mov	sp, r7
 8029be6:	bdb0      	pop	{r4, r5, r7, pc}

08029be8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029be8:	b480      	push	{r7}
 8029bea:	b083      	sub	sp, #12
 8029bec:	af00      	add	r7, sp, #0
 8029bee:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029bf0:	4b03      	ldr	r3, [pc, #12]	; (8029c00 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
      }
 8029bf2:	4618      	mov	r0, r3
 8029bf4:	370c      	adds	r7, #12
 8029bf6:	46bd      	mov	sp, r7
 8029bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bfc:	4770      	bx	lr
 8029bfe:	bf00      	nop
 8029c00:	06666666 	.word	0x06666666

08029c04 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8029c04:	b580      	push	{r7, lr}
 8029c06:	b082      	sub	sp, #8
 8029c08:	af00      	add	r7, sp, #0
 8029c0a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8029c0c:	6878      	ldr	r0, [r7, #4]
 8029c0e:	f000 fad9 	bl	802a1c4 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 8029c12:	4603      	mov	r3, r0
      }
 8029c14:	4618      	mov	r0, r3
 8029c16:	3708      	adds	r7, #8
 8029c18:	46bd      	mov	sp, r7
 8029c1a:	bd80      	pop	{r7, pc}

08029c1c <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8029c1c:	b590      	push	{r4, r7, lr}
 8029c1e:	b085      	sub	sp, #20
 8029c20:	af00      	add	r7, sp, #0
 8029c22:	60f8      	str	r0, [r7, #12]
 8029c24:	60b9      	str	r1, [r7, #8]
 8029c26:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029c28:	68f8      	ldr	r0, [r7, #12]
 8029c2a:	f000 fad7 	bl	802a1dc <_ZSt12__miter_baseIPPjET_S2_>
 8029c2e:	4604      	mov	r4, r0
 8029c30:	68b8      	ldr	r0, [r7, #8]
 8029c32:	f000 fad3 	bl	802a1dc <_ZSt12__miter_baseIPPjET_S2_>
 8029c36:	4603      	mov	r3, r0
 8029c38:	687a      	ldr	r2, [r7, #4]
 8029c3a:	4619      	mov	r1, r3
 8029c3c:	4620      	mov	r0, r4
 8029c3e:	f000 fad8 	bl	802a1f2 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 8029c42:	4603      	mov	r3, r0
    }
 8029c44:	4618      	mov	r0, r3
 8029c46:	3714      	adds	r7, #20
 8029c48:	46bd      	mov	sp, r7
 8029c4a:	bd90      	pop	{r4, r7, pc}

08029c4c <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8029c4c:	b590      	push	{r4, r7, lr}
 8029c4e:	b085      	sub	sp, #20
 8029c50:	af00      	add	r7, sp, #0
 8029c52:	60f8      	str	r0, [r7, #12]
 8029c54:	60b9      	str	r1, [r7, #8]
 8029c56:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029c58:	68f8      	ldr	r0, [r7, #12]
 8029c5a:	f000 fabf 	bl	802a1dc <_ZSt12__miter_baseIPPjET_S2_>
 8029c5e:	4604      	mov	r4, r0
 8029c60:	68b8      	ldr	r0, [r7, #8]
 8029c62:	f000 fabb 	bl	802a1dc <_ZSt12__miter_baseIPPjET_S2_>
 8029c66:	4603      	mov	r3, r0
 8029c68:	687a      	ldr	r2, [r7, #4]
 8029c6a:	4619      	mov	r1, r3
 8029c6c:	4620      	mov	r0, r4
 8029c6e:	f000 fae3 	bl	802a238 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 8029c72:	4603      	mov	r3, r0
    }
 8029c74:	4618      	mov	r0, r3
 8029c76:	3714      	adds	r7, #20
 8029c78:	46bd      	mov	sp, r7
 8029c7a:	bd90      	pop	{r4, r7, pc}

08029c7c <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029c7c:	b580      	push	{r7, lr}
 8029c7e:	b084      	sub	sp, #16
 8029c80:	af00      	add	r7, sp, #0
 8029c82:	60f8      	str	r0, [r7, #12]
 8029c84:	60b9      	str	r1, [r7, #8]
 8029c86:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029c88:	68f8      	ldr	r0, [r7, #12]
 8029c8a:	f000 faf8 	bl	802a27e <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8029c8e:	4602      	mov	r2, r0
 8029c90:	68bb      	ldr	r3, [r7, #8]
 8029c92:	4293      	cmp	r3, r2
 8029c94:	bf8c      	ite	hi
 8029c96:	2301      	movhi	r3, #1
 8029c98:	2300      	movls	r3, #0
 8029c9a:	b2db      	uxtb	r3, r3
 8029c9c:	2b00      	cmp	r3, #0
 8029c9e:	d001      	beq.n	8029ca4 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8029ca0:	f015 fb7f 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8029ca4:	68bb      	ldr	r3, [r7, #8]
 8029ca6:	009b      	lsls	r3, r3, #2
 8029ca8:	4618      	mov	r0, r3
 8029caa:	f015 fb69 	bl	803f380 <_Znwj>
 8029cae:	4603      	mov	r3, r0
      }
 8029cb0:	4618      	mov	r0, r3
 8029cb2:	3710      	adds	r7, #16
 8029cb4:	46bd      	mov	sp, r7
 8029cb6:	bd80      	pop	{r7, pc}

08029cb8 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 8029cb8:	b580      	push	{r7, lr}
 8029cba:	b084      	sub	sp, #16
 8029cbc:	af00      	add	r7, sp, #0
 8029cbe:	60f8      	str	r0, [r7, #12]
 8029cc0:	60b9      	str	r1, [r7, #8]
 8029cc2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8029cc4:	687b      	ldr	r3, [r7, #4]
 8029cc6:	009b      	lsls	r3, r3, #2
 8029cc8:	4619      	mov	r1, r3
 8029cca:	68b8      	ldr	r0, [r7, #8]
 8029ccc:	f015 fb56 	bl	803f37c <_ZdlPvj>
      }
 8029cd0:	bf00      	nop
 8029cd2:	3710      	adds	r7, #16
 8029cd4:	46bd      	mov	sp, r7
 8029cd6:	bd80      	pop	{r7, pc}

08029cd8 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029cd8:	b480      	push	{r7}
 8029cda:	b083      	sub	sp, #12
 8029cdc:	af00      	add	r7, sp, #0
 8029cde:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029ce0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8029ce4:	4618      	mov	r0, r3
 8029ce6:	370c      	adds	r7, #12
 8029ce8:	46bd      	mov	sp, r7
 8029cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cee:	4770      	bx	lr

08029cf0 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8029cf0:	b580      	push	{r7, lr}
 8029cf2:	b084      	sub	sp, #16
 8029cf4:	af00      	add	r7, sp, #0
 8029cf6:	60f8      	str	r0, [r7, #12]
 8029cf8:	60b9      	str	r1, [r7, #8]
 8029cfa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8029cfc:	68f8      	ldr	r0, [r7, #12]
 8029cfe:	f000 faca 	bl	802a296 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 8029d02:	4602      	mov	r2, r0
 8029d04:	68bb      	ldr	r3, [r7, #8]
 8029d06:	4293      	cmp	r3, r2
 8029d08:	bf8c      	ite	hi
 8029d0a:	2301      	movhi	r3, #1
 8029d0c:	2300      	movls	r3, #0
 8029d0e:	b2db      	uxtb	r3, r3
 8029d10:	2b00      	cmp	r3, #0
 8029d12:	d001      	beq.n	8029d18 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8029d14:	f015 fb45 	bl	803f3a2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8029d18:	68bb      	ldr	r3, [r7, #8]
 8029d1a:	009b      	lsls	r3, r3, #2
 8029d1c:	4618      	mov	r0, r3
 8029d1e:	f015 fb2f 	bl	803f380 <_Znwj>
 8029d22:	4603      	mov	r3, r0
      }
 8029d24:	4618      	mov	r0, r3
 8029d26:	3710      	adds	r7, #16
 8029d28:	46bd      	mov	sp, r7
 8029d2a:	bd80      	pop	{r7, pc}

08029d2c <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8029d2c:	b480      	push	{r7}
 8029d2e:	b083      	sub	sp, #12
 8029d30:	af00      	add	r7, sp, #0
 8029d32:	6078      	str	r0, [r7, #4]
 8029d34:	687b      	ldr	r3, [r7, #4]
 8029d36:	4618      	mov	r0, r3
 8029d38:	370c      	adds	r7, #12
 8029d3a:	46bd      	mov	sp, r7
 8029d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d40:	4770      	bx	lr

08029d42 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8029d42:	b480      	push	{r7}
 8029d44:	b083      	sub	sp, #12
 8029d46:	af00      	add	r7, sp, #0
 8029d48:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	4618      	mov	r0, r3
 8029d4e:	370c      	adds	r7, #12
 8029d50:	46bd      	mov	sp, r7
 8029d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d56:	4770      	bx	lr

08029d58 <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 8029d58:	b580      	push	{r7, lr}
 8029d5a:	b082      	sub	sp, #8
 8029d5c:	af00      	add	r7, sp, #0
 8029d5e:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8029d60:	6878      	ldr	r0, [r7, #4]
 8029d62:	f7f7 f97a 	bl	802105a <_ZN7RequestD1Ev>
    }
 8029d66:	bf00      	nop
 8029d68:	3708      	adds	r7, #8
 8029d6a:	46bd      	mov	sp, r7
 8029d6c:	bd80      	pop	{r7, pc}

08029d6e <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029d6e:	b480      	push	{r7}
 8029d70:	b083      	sub	sp, #12
 8029d72:	af00      	add	r7, sp, #0
 8029d74:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029d76:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8029d7a:	4618      	mov	r0, r3
 8029d7c:	370c      	adds	r7, #12
 8029d7e:	46bd      	mov	sp, r7
 8029d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d84:	4770      	bx	lr

08029d86 <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8029d86:	b480      	push	{r7}
 8029d88:	b083      	sub	sp, #12
 8029d8a:	af00      	add	r7, sp, #0
 8029d8c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8029d8e:	687b      	ldr	r3, [r7, #4]
 8029d90:	4618      	mov	r0, r3
 8029d92:	370c      	adds	r7, #12
 8029d94:	46bd      	mov	sp, r7
 8029d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d9a:	4770      	bx	lr

08029d9c <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 8029d9c:	b580      	push	{r7, lr}
 8029d9e:	b082      	sub	sp, #8
 8029da0:	af00      	add	r7, sp, #0
 8029da2:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8029da4:	6878      	ldr	r0, [r7, #4]
 8029da6:	f7f7 f9d5 	bl	8021154 <_ZN8ResponceD1Ev>
    }
 8029daa:	bf00      	nop
 8029dac:	3708      	adds	r7, #8
 8029dae:	46bd      	mov	sp, r7
 8029db0:	bd80      	pop	{r7, pc}

08029db2 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 8029db2:	b480      	push	{r7}
 8029db4:	b083      	sub	sp, #12
 8029db6:	af00      	add	r7, sp, #0
 8029db8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029dba:	687b      	ldr	r3, [r7, #4]
 8029dbc:	4618      	mov	r0, r3
 8029dbe:	370c      	adds	r7, #12
 8029dc0:	46bd      	mov	sp, r7
 8029dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dc6:	4770      	bx	lr

08029dc8 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8029dc8:	b580      	push	{r7, lr}
 8029dca:	b084      	sub	sp, #16
 8029dcc:	af00      	add	r7, sp, #0
 8029dce:	60f8      	str	r0, [r7, #12]
 8029dd0:	60b9      	str	r1, [r7, #8]
 8029dd2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8029dd4:	687a      	ldr	r2, [r7, #4]
 8029dd6:	68b9      	ldr	r1, [r7, #8]
 8029dd8:	68f8      	ldr	r0, [r7, #12]
 8029dda:	f000 fa68 	bl	802a2ae <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8029dde:	4603      	mov	r3, r0
 8029de0:	4618      	mov	r0, r3
 8029de2:	3710      	adds	r7, #16
 8029de4:	46bd      	mov	sp, r7
 8029de6:	bd80      	pop	{r7, pc}

08029de8 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8029de8:	b480      	push	{r7}
 8029dea:	b083      	sub	sp, #12
 8029dec:	af00      	add	r7, sp, #0
 8029dee:	6078      	str	r0, [r7, #4]
 8029df0:	6039      	str	r1, [r7, #0]
    { return __res; }
 8029df2:	683b      	ldr	r3, [r7, #0]
 8029df4:	4618      	mov	r0, r3
 8029df6:	370c      	adds	r7, #12
 8029df8:	46bd      	mov	sp, r7
 8029dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dfe:	4770      	bx	lr

08029e00 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8029e00:	b580      	push	{r7, lr}
 8029e02:	b084      	sub	sp, #16
 8029e04:	af00      	add	r7, sp, #0
 8029e06:	60f8      	str	r0, [r7, #12]
 8029e08:	60b9      	str	r1, [r7, #8]
 8029e0a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8029e0c:	687a      	ldr	r2, [r7, #4]
 8029e0e:	68b9      	ldr	r1, [r7, #8]
 8029e10:	68f8      	ldr	r0, [r7, #12]
 8029e12:	f000 fa5c 	bl	802a2ce <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8029e16:	4603      	mov	r3, r0
 8029e18:	4618      	mov	r0, r3
 8029e1a:	3710      	adds	r7, #16
 8029e1c:	46bd      	mov	sp, r7
 8029e1e:	bd80      	pop	{r7, pc}

08029e20 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8029e20:	b580      	push	{r7, lr}
 8029e22:	b082      	sub	sp, #8
 8029e24:	af00      	add	r7, sp, #0
 8029e26:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8029e28:	6878      	ldr	r0, [r7, #4]
 8029e2a:	f000 f856 	bl	8029eda <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 8029e2e:	4603      	mov	r3, r0
 8029e30:	4618      	mov	r0, r3
 8029e32:	3708      	adds	r7, #8
 8029e34:	46bd      	mov	sp, r7
 8029e36:	bd80      	pop	{r7, pc}

08029e38 <_ZSt12__miter_baseIPP8ResponceET_S3_>:
    __miter_base(_Iterator __it)
 8029e38:	b480      	push	{r7}
 8029e3a:	b083      	sub	sp, #12
 8029e3c:	af00      	add	r7, sp, #0
 8029e3e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029e40:	687b      	ldr	r3, [r7, #4]
 8029e42:	4618      	mov	r0, r3
 8029e44:	370c      	adds	r7, #12
 8029e46:	46bd      	mov	sp, r7
 8029e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e4c:	4770      	bx	lr

08029e4e <_ZSt13__copy_move_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029e4e:	b5b0      	push	{r4, r5, r7, lr}
 8029e50:	b084      	sub	sp, #16
 8029e52:	af00      	add	r7, sp, #0
 8029e54:	60f8      	str	r0, [r7, #12]
 8029e56:	60b9      	str	r1, [r7, #8]
 8029e58:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029e5a:	68f8      	ldr	r0, [r7, #12]
 8029e5c:	f000 fa47 	bl	802a2ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029e60:	4604      	mov	r4, r0
 8029e62:	68b8      	ldr	r0, [r7, #8]
 8029e64:	f000 fa43 	bl	802a2ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029e68:	4605      	mov	r5, r0
 8029e6a:	687b      	ldr	r3, [r7, #4]
 8029e6c:	4618      	mov	r0, r3
 8029e6e:	f000 fa3e 	bl	802a2ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029e72:	4603      	mov	r3, r0
 8029e74:	461a      	mov	r2, r3
 8029e76:	4629      	mov	r1, r5
 8029e78:	4620      	mov	r0, r4
 8029e7a:	f000 fa43 	bl	802a304 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8029e7e:	4602      	mov	r2, r0
 8029e80:	1d3b      	adds	r3, r7, #4
 8029e82:	4611      	mov	r1, r2
 8029e84:	4618      	mov	r0, r3
 8029e86:	f000 fa4d 	bl	802a324 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8029e8a:	4603      	mov	r3, r0
    }
 8029e8c:	4618      	mov	r0, r3
 8029e8e:	3710      	adds	r7, #16
 8029e90:	46bd      	mov	sp, r7
 8029e92:	bdb0      	pop	{r4, r5, r7, pc}

08029e94 <_ZSt22__copy_move_backward_aILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8029e94:	b5b0      	push	{r4, r5, r7, lr}
 8029e96:	b084      	sub	sp, #16
 8029e98:	af00      	add	r7, sp, #0
 8029e9a:	60f8      	str	r0, [r7, #12]
 8029e9c:	60b9      	str	r1, [r7, #8]
 8029e9e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029ea0:	68f8      	ldr	r0, [r7, #12]
 8029ea2:	f000 fa24 	bl	802a2ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029ea6:	4604      	mov	r4, r0
 8029ea8:	68b8      	ldr	r0, [r7, #8]
 8029eaa:	f000 fa20 	bl	802a2ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029eae:	4605      	mov	r5, r0
 8029eb0:	687b      	ldr	r3, [r7, #4]
 8029eb2:	4618      	mov	r0, r3
 8029eb4:	f000 fa1b 	bl	802a2ee <_ZSt12__niter_baseIPP8ResponceET_S3_>
 8029eb8:	4603      	mov	r3, r0
 8029eba:	461a      	mov	r2, r3
 8029ebc:	4629      	mov	r1, r5
 8029ebe:	4620      	mov	r0, r4
 8029ec0:	f000 fa3c 	bl	802a33c <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 8029ec4:	4602      	mov	r2, r0
 8029ec6:	1d3b      	adds	r3, r7, #4
 8029ec8:	4611      	mov	r1, r2
 8029eca:	4618      	mov	r0, r3
 8029ecc:	f000 fa2a 	bl	802a324 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>
 8029ed0:	4603      	mov	r3, r0
    }
 8029ed2:	4618      	mov	r0, r3
 8029ed4:	3710      	adds	r7, #16
 8029ed6:	46bd      	mov	sp, r7
 8029ed8:	bdb0      	pop	{r4, r5, r7, pc}

08029eda <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8029eda:	b480      	push	{r7}
 8029edc:	b083      	sub	sp, #12
 8029ede:	af00      	add	r7, sp, #0
 8029ee0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8029ee2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8029ee6:	4618      	mov	r0, r3
 8029ee8:	370c      	adds	r7, #12
 8029eea:	46bd      	mov	sp, r7
 8029eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ef0:	4770      	bx	lr

08029ef2 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
    __iterator_category(const _Iter&)
 8029ef2:	b480      	push	{r7}
 8029ef4:	b083      	sub	sp, #12
 8029ef6:	af00      	add	r7, sp, #0
 8029ef8:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8029efa:	bf00      	nop
 8029efc:	4618      	mov	r0, r3
 8029efe:	370c      	adds	r7, #12
 8029f00:	46bd      	mov	sp, r7
 8029f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f06:	4770      	bx	lr

08029f08 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 8029f08:	b580      	push	{r7, lr}
 8029f0a:	b084      	sub	sp, #16
 8029f0c:	af00      	add	r7, sp, #0
 8029f0e:	60f8      	str	r0, [r7, #12]
 8029f10:	60b9      	str	r1, [r7, #8]
 8029f12:	607a      	str	r2, [r7, #4]
 8029f14:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 8029f16:	68bb      	ldr	r3, [r7, #8]
 8029f18:	2b00      	cmp	r3, #0
 8029f1a:	d101      	bne.n	8029f20 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 8029f1c:	68fb      	ldr	r3, [r7, #12]
 8029f1e:	e00a      	b.n	8029f36 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 8029f20:	68fa      	ldr	r2, [r7, #12]
 8029f22:	68bb      	ldr	r3, [r7, #8]
 8029f24:	4413      	add	r3, r2
 8029f26:	687a      	ldr	r2, [r7, #4]
 8029f28:	4619      	mov	r1, r3
 8029f2a:	68f8      	ldr	r0, [r7, #12]
 8029f2c:	f000 fa16 	bl	802a35c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 8029f30:	68fa      	ldr	r2, [r7, #12]
 8029f32:	68bb      	ldr	r3, [r7, #8]
 8029f34:	4413      	add	r3, r2
    }
 8029f36:	4618      	mov	r0, r3
 8029f38:	3710      	adds	r7, #16
 8029f3a:	46bd      	mov	sp, r7
 8029f3c:	bd80      	pop	{r7, pc}

08029f3e <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8029f3e:	b590      	push	{r4, r7, lr}
 8029f40:	b085      	sub	sp, #20
 8029f42:	af00      	add	r7, sp, #0
 8029f44:	60f8      	str	r0, [r7, #12]
 8029f46:	60b9      	str	r1, [r7, #8]
 8029f48:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8029f4a:	68f8      	ldr	r0, [r7, #12]
 8029f4c:	f000 fa15 	bl	802a37a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8029f50:	4604      	mov	r4, r0
 8029f52:	68b8      	ldr	r0, [r7, #8]
 8029f54:	f000 fa11 	bl	802a37a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8029f58:	4603      	mov	r3, r0
 8029f5a:	687a      	ldr	r2, [r7, #4]
 8029f5c:	4619      	mov	r1, r3
 8029f5e:	4620      	mov	r0, r4
 8029f60:	f000 fa1c 	bl	802a39c <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 8029f64:	4603      	mov	r3, r0
    }
 8029f66:	4618      	mov	r0, r3
 8029f68:	3714      	adds	r7, #20
 8029f6a:	46bd      	mov	sp, r7
 8029f6c:	bd90      	pop	{r4, r7, pc}

08029f6e <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029f6e:	b5b0      	push	{r4, r5, r7, lr}
 8029f70:	b084      	sub	sp, #16
 8029f72:	af00      	add	r7, sp, #0
 8029f74:	60f8      	str	r0, [r7, #12]
 8029f76:	60b9      	str	r1, [r7, #8]
 8029f78:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029f7a:	68f8      	ldr	r0, [r7, #12]
 8029f7c:	f7fd f8fc 	bl	8027178 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8029f80:	4604      	mov	r4, r0
 8029f82:	68b8      	ldr	r0, [r7, #8]
 8029f84:	f7fd f8f8 	bl	8027178 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8029f88:	4605      	mov	r5, r0
 8029f8a:	687b      	ldr	r3, [r7, #4]
 8029f8c:	4618      	mov	r0, r3
 8029f8e:	f7fd f93f 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 8029f92:	4603      	mov	r3, r0
 8029f94:	461a      	mov	r2, r3
 8029f96:	4629      	mov	r1, r5
 8029f98:	4620      	mov	r0, r4
 8029f9a:	f7fd f909 	bl	80271b0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8029f9e:	4602      	mov	r2, r0
 8029fa0:	1d3b      	adds	r3, r7, #4
 8029fa2:	4611      	mov	r1, r2
 8029fa4:	4618      	mov	r0, r3
 8029fa6:	f7fd f94e 	bl	8027246 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8029faa:	4603      	mov	r3, r0
    }
 8029fac:	4618      	mov	r0, r3
 8029fae:	3710      	adds	r7, #16
 8029fb0:	46bd      	mov	sp, r7
 8029fb2:	bdb0      	pop	{r4, r5, r7, pc}

08029fb4 <_ZSt12__miter_baseIPKhET_S2_>:
    __miter_base(_Iterator __it)
 8029fb4:	b480      	push	{r7}
 8029fb6:	b083      	sub	sp, #12
 8029fb8:	af00      	add	r7, sp, #0
 8029fba:	6078      	str	r0, [r7, #4]
    { return __it; }
 8029fbc:	687b      	ldr	r3, [r7, #4]
 8029fbe:	4618      	mov	r0, r3
 8029fc0:	370c      	adds	r7, #12
 8029fc2:	46bd      	mov	sp, r7
 8029fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fc8:	4770      	bx	lr

08029fca <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8029fca:	b5b0      	push	{r4, r5, r7, lr}
 8029fcc:	b084      	sub	sp, #16
 8029fce:	af00      	add	r7, sp, #0
 8029fd0:	60f8      	str	r0, [r7, #12]
 8029fd2:	60b9      	str	r1, [r7, #8]
 8029fd4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8029fd6:	68f8      	ldr	r0, [r7, #12]
 8029fd8:	f000 fa03 	bl	802a3e2 <_ZSt12__niter_baseIPKhET_S2_>
 8029fdc:	4604      	mov	r4, r0
 8029fde:	68b8      	ldr	r0, [r7, #8]
 8029fe0:	f000 f9ff 	bl	802a3e2 <_ZSt12__niter_baseIPKhET_S2_>
 8029fe4:	4605      	mov	r5, r0
 8029fe6:	687b      	ldr	r3, [r7, #4]
 8029fe8:	4618      	mov	r0, r3
 8029fea:	f7fd f911 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 8029fee:	4603      	mov	r3, r0
 8029ff0:	461a      	mov	r2, r3
 8029ff2:	4629      	mov	r1, r5
 8029ff4:	4620      	mov	r0, r4
 8029ff6:	f7fd f8db 	bl	80271b0 <_ZSt14__copy_move_a1ILb0EPKhPhET1_T0_S4_S3_>
 8029ffa:	4602      	mov	r2, r0
 8029ffc:	1d3b      	adds	r3, r7, #4
 8029ffe:	4611      	mov	r1, r2
 802a000:	4618      	mov	r0, r3
 802a002:	f7fd f920 	bl	8027246 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 802a006:	4603      	mov	r3, r0
    }
 802a008:	4618      	mov	r0, r3
 802a00a:	3710      	adds	r7, #16
 802a00c:	46bd      	mov	sp, r7
 802a00e:	bdb0      	pop	{r4, r5, r7, pc}

0802a010 <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a010:	b580      	push	{r7, lr}
 802a012:	b084      	sub	sp, #16
 802a014:	af00      	add	r7, sp, #0
 802a016:	60f8      	str	r0, [r7, #12]
 802a018:	60b9      	str	r1, [r7, #8]
 802a01a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a01c:	687a      	ldr	r2, [r7, #4]
 802a01e:	68b9      	ldr	r1, [r7, #8]
 802a020:	68f8      	ldr	r0, [r7, #12]
 802a022:	f000 f9e9 	bl	802a3f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802a026:	4603      	mov	r3, r0
    }
 802a028:	4618      	mov	r0, r3
 802a02a:	3710      	adds	r7, #16
 802a02c:	46bd      	mov	sp, r7
 802a02e:	bd80      	pop	{r7, pc}

0802a030 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 802a030:	b480      	push	{r7}
 802a032:	b083      	sub	sp, #12
 802a034:	af00      	add	r7, sp, #0
 802a036:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802a038:	687b      	ldr	r3, [r7, #4]
 802a03a:	4618      	mov	r0, r3
 802a03c:	370c      	adds	r7, #12
 802a03e:	46bd      	mov	sp, r7
 802a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a044:	4770      	bx	lr

0802a046 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 802a046:	b590      	push	{r4, r7, lr}
 802a048:	b083      	sub	sp, #12
 802a04a:	af00      	add	r7, sp, #0
 802a04c:	6078      	str	r0, [r7, #4]
 802a04e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 802a050:	687c      	ldr	r4, [r7, #4]
 802a052:	6838      	ldr	r0, [r7, #0]
 802a054:	f7ff ffec 	bl	802a030 <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 802a058:	4603      	mov	r3, r0
 802a05a:	4619      	mov	r1, r3
 802a05c:	4620      	mov	r0, r4
 802a05e:	f7fb f988 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a062:	687b      	ldr	r3, [r7, #4]
 802a064:	4618      	mov	r0, r3
 802a066:	370c      	adds	r7, #12
 802a068:	46bd      	mov	sp, r7
 802a06a:	bd90      	pop	{r4, r7, pc}

0802a06c <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 802a06c:	b580      	push	{r7, lr}
 802a06e:	b092      	sub	sp, #72	; 0x48
 802a070:	af00      	add	r7, sp, #0
 802a072:	60f8      	str	r0, [r7, #12]
 802a074:	60b9      	str	r1, [r7, #8]
 802a076:	607a      	str	r2, [r7, #4]
 802a078:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 802a07a:	2301      	movs	r3, #1
 802a07c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 802a080:	f107 0314 	add.w	r3, r7, #20
 802a084:	68b9      	ldr	r1, [r7, #8]
 802a086:	4618      	mov	r0, r3
 802a088:	f7ff fc82 	bl	8029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802a08c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a090:	6879      	ldr	r1, [r7, #4]
 802a092:	4618      	mov	r0, r3
 802a094:	f7ff fc7c 	bl	8029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802a098:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802a09c:	6839      	ldr	r1, [r7, #0]
 802a09e:	4618      	mov	r0, r3
 802a0a0:	f7fb f967 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a0a4:	68f8      	ldr	r0, [r7, #12]
 802a0a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802a0aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802a0ae:	f107 0114 	add.w	r1, r7, #20
 802a0b2:	f000 f9cb 	bl	802a44c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 802a0b6:	68f8      	ldr	r0, [r7, #12]
 802a0b8:	3748      	adds	r7, #72	; 0x48
 802a0ba:	46bd      	mov	sp, r7
 802a0bc:	bd80      	pop	{r7, pc}

0802a0be <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 802a0be:	b580      	push	{r7, lr}
 802a0c0:	b090      	sub	sp, #64	; 0x40
 802a0c2:	af00      	add	r7, sp, #0
 802a0c4:	60f8      	str	r0, [r7, #12]
 802a0c6:	60b9      	str	r1, [r7, #8]
 802a0c8:	607a      	str	r2, [r7, #4]
 802a0ca:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 802a0cc:	f107 0310 	add.w	r3, r7, #16
 802a0d0:	68b9      	ldr	r1, [r7, #8]
 802a0d2:	4618      	mov	r0, r3
 802a0d4:	f7fb f94d 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a0d8:	f107 0320 	add.w	r3, r7, #32
 802a0dc:	6879      	ldr	r1, [r7, #4]
 802a0de:	4618      	mov	r0, r3
 802a0e0:	f7fb f947 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a0e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a0e8:	6839      	ldr	r1, [r7, #0]
 802a0ea:	4618      	mov	r0, r3
 802a0ec:	f7fb f941 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a0f0:	68f8      	ldr	r0, [r7, #12]
 802a0f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a0f6:	f107 0220 	add.w	r2, r7, #32
 802a0fa:	f107 0110 	add.w	r1, r7, #16
 802a0fe:	f000 f9cb 	bl	802a498 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 802a102:	68f8      	ldr	r0, [r7, #12]
 802a104:	3740      	adds	r7, #64	; 0x40
 802a106:	46bd      	mov	sp, r7
 802a108:	bd80      	pop	{r7, pc}

0802a10a <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 802a10a:	b580      	push	{r7, lr}
 802a10c:	b090      	sub	sp, #64	; 0x40
 802a10e:	af00      	add	r7, sp, #0
 802a110:	60f8      	str	r0, [r7, #12]
 802a112:	60b9      	str	r1, [r7, #8]
 802a114:	607a      	str	r2, [r7, #4]
 802a116:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 802a118:	f107 0310 	add.w	r3, r7, #16
 802a11c:	68b9      	ldr	r1, [r7, #8]
 802a11e:	4618      	mov	r0, r3
 802a120:	f7fb f927 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a124:	f107 0320 	add.w	r3, r7, #32
 802a128:	6879      	ldr	r1, [r7, #4]
 802a12a:	4618      	mov	r0, r3
 802a12c:	f7fb f921 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a134:	6839      	ldr	r1, [r7, #0]
 802a136:	4618      	mov	r0, r3
 802a138:	f7fb f91b 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a13c:	68f8      	ldr	r0, [r7, #12]
 802a13e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a142:	f107 0220 	add.w	r2, r7, #32
 802a146:	f107 0110 	add.w	r1, r7, #16
 802a14a:	f000 fa20 	bl	802a58e <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 802a14e:	68f8      	ldr	r0, [r7, #12]
 802a150:	3740      	adds	r7, #64	; 0x40
 802a152:	46bd      	mov	sp, r7
 802a154:	bd80      	pop	{r7, pc}

0802a156 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 802a156:	b480      	push	{r7}
 802a158:	b083      	sub	sp, #12
 802a15a:	af00      	add	r7, sp, #0
 802a15c:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a15e:	687b      	ldr	r3, [r7, #4]
 802a160:	4618      	mov	r0, r3
 802a162:	370c      	adds	r7, #12
 802a164:	46bd      	mov	sp, r7
 802a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a16a:	4770      	bx	lr

0802a16c <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a16c:	b580      	push	{r7, lr}
 802a16e:	b084      	sub	sp, #16
 802a170:	af00      	add	r7, sp, #0
 802a172:	60f8      	str	r0, [r7, #12]
 802a174:	60b9      	str	r1, [r7, #8]
 802a176:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a178:	687a      	ldr	r2, [r7, #4]
 802a17a:	68b9      	ldr	r1, [r7, #8]
 802a17c:	68f8      	ldr	r0, [r7, #12]
 802a17e:	f000 fa81 	bl	802a684 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802a182:	4603      	mov	r3, r0
 802a184:	4618      	mov	r0, r3
 802a186:	3710      	adds	r7, #16
 802a188:	46bd      	mov	sp, r7
 802a18a:	bd80      	pop	{r7, pc}

0802a18c <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802a18c:	b480      	push	{r7}
 802a18e:	b083      	sub	sp, #12
 802a190:	af00      	add	r7, sp, #0
 802a192:	6078      	str	r0, [r7, #4]
 802a194:	6039      	str	r1, [r7, #0]
    { return __res; }
 802a196:	683b      	ldr	r3, [r7, #0]
 802a198:	4618      	mov	r0, r3
 802a19a:	370c      	adds	r7, #12
 802a19c:	46bd      	mov	sp, r7
 802a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1a2:	4770      	bx	lr

0802a1a4 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802a1a4:	b580      	push	{r7, lr}
 802a1a6:	b084      	sub	sp, #16
 802a1a8:	af00      	add	r7, sp, #0
 802a1aa:	60f8      	str	r0, [r7, #12]
 802a1ac:	60b9      	str	r1, [r7, #8]
 802a1ae:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802a1b0:	687a      	ldr	r2, [r7, #4]
 802a1b2:	68b9      	ldr	r1, [r7, #8]
 802a1b4:	68f8      	ldr	r0, [r7, #12]
 802a1b6:	f000 fa75 	bl	802a6a4 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 802a1ba:	4603      	mov	r3, r0
 802a1bc:	4618      	mov	r0, r3
 802a1be:	3710      	adds	r7, #16
 802a1c0:	46bd      	mov	sp, r7
 802a1c2:	bd80      	pop	{r7, pc}

0802a1c4 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 802a1c4:	b580      	push	{r7, lr}
 802a1c6:	b082      	sub	sp, #8
 802a1c8:	af00      	add	r7, sp, #0
 802a1ca:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 802a1cc:	6878      	ldr	r0, [r7, #4]
 802a1ce:	f000 f856 	bl	802a27e <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 802a1d2:	4603      	mov	r3, r0
 802a1d4:	4618      	mov	r0, r3
 802a1d6:	3708      	adds	r7, #8
 802a1d8:	46bd      	mov	sp, r7
 802a1da:	bd80      	pop	{r7, pc}

0802a1dc <_ZSt12__miter_baseIPPjET_S2_>:
    __miter_base(_Iterator __it)
 802a1dc:	b480      	push	{r7}
 802a1de:	b083      	sub	sp, #12
 802a1e0:	af00      	add	r7, sp, #0
 802a1e2:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a1e4:	687b      	ldr	r3, [r7, #4]
 802a1e6:	4618      	mov	r0, r3
 802a1e8:	370c      	adds	r7, #12
 802a1ea:	46bd      	mov	sp, r7
 802a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1f0:	4770      	bx	lr

0802a1f2 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802a1f2:	b5b0      	push	{r4, r5, r7, lr}
 802a1f4:	b084      	sub	sp, #16
 802a1f6:	af00      	add	r7, sp, #0
 802a1f8:	60f8      	str	r0, [r7, #12]
 802a1fa:	60b9      	str	r1, [r7, #8]
 802a1fc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a1fe:	68f8      	ldr	r0, [r7, #12]
 802a200:	f000 fa60 	bl	802a6c4 <_ZSt12__niter_baseIPPjET_S2_>
 802a204:	4604      	mov	r4, r0
 802a206:	68b8      	ldr	r0, [r7, #8]
 802a208:	f000 fa5c 	bl	802a6c4 <_ZSt12__niter_baseIPPjET_S2_>
 802a20c:	4605      	mov	r5, r0
 802a20e:	687b      	ldr	r3, [r7, #4]
 802a210:	4618      	mov	r0, r3
 802a212:	f000 fa57 	bl	802a6c4 <_ZSt12__niter_baseIPPjET_S2_>
 802a216:	4603      	mov	r3, r0
 802a218:	461a      	mov	r2, r3
 802a21a:	4629      	mov	r1, r5
 802a21c:	4620      	mov	r0, r4
 802a21e:	f000 fa5c 	bl	802a6da <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 802a222:	4602      	mov	r2, r0
 802a224:	1d3b      	adds	r3, r7, #4
 802a226:	4611      	mov	r1, r2
 802a228:	4618      	mov	r0, r3
 802a22a:	f000 fa66 	bl	802a6fa <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 802a22e:	4603      	mov	r3, r0
    }
 802a230:	4618      	mov	r0, r3
 802a232:	3710      	adds	r7, #16
 802a234:	46bd      	mov	sp, r7
 802a236:	bdb0      	pop	{r4, r5, r7, pc}

0802a238 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 802a238:	b5b0      	push	{r4, r5, r7, lr}
 802a23a:	b084      	sub	sp, #16
 802a23c:	af00      	add	r7, sp, #0
 802a23e:	60f8      	str	r0, [r7, #12]
 802a240:	60b9      	str	r1, [r7, #8]
 802a242:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a244:	68f8      	ldr	r0, [r7, #12]
 802a246:	f000 fa3d 	bl	802a6c4 <_ZSt12__niter_baseIPPjET_S2_>
 802a24a:	4604      	mov	r4, r0
 802a24c:	68b8      	ldr	r0, [r7, #8]
 802a24e:	f000 fa39 	bl	802a6c4 <_ZSt12__niter_baseIPPjET_S2_>
 802a252:	4605      	mov	r5, r0
 802a254:	687b      	ldr	r3, [r7, #4]
 802a256:	4618      	mov	r0, r3
 802a258:	f000 fa34 	bl	802a6c4 <_ZSt12__niter_baseIPPjET_S2_>
 802a25c:	4603      	mov	r3, r0
 802a25e:	461a      	mov	r2, r3
 802a260:	4629      	mov	r1, r5
 802a262:	4620      	mov	r0, r4
 802a264:	f000 fa55 	bl	802a712 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 802a268:	4602      	mov	r2, r0
 802a26a:	1d3b      	adds	r3, r7, #4
 802a26c:	4611      	mov	r1, r2
 802a26e:	4618      	mov	r0, r3
 802a270:	f000 fa43 	bl	802a6fa <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 802a274:	4603      	mov	r3, r0
    }
 802a276:	4618      	mov	r0, r3
 802a278:	3710      	adds	r7, #16
 802a27a:	46bd      	mov	sp, r7
 802a27c:	bdb0      	pop	{r4, r5, r7, pc}

0802a27e <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802a27e:	b480      	push	{r7}
 802a280:	b083      	sub	sp, #12
 802a282:	af00      	add	r7, sp, #0
 802a284:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802a286:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 802a28a:	4618      	mov	r0, r3
 802a28c:	370c      	adds	r7, #12
 802a28e:	46bd      	mov	sp, r7
 802a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a294:	4770      	bx	lr

0802a296 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802a296:	b480      	push	{r7}
 802a298:	b083      	sub	sp, #12
 802a29a:	af00      	add	r7, sp, #0
 802a29c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802a29e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 802a2a2:	4618      	mov	r0, r3
 802a2a4:	370c      	adds	r7, #12
 802a2a6:	46bd      	mov	sp, r7
 802a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2ac:	4770      	bx	lr

0802a2ae <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a2ae:	b580      	push	{r7, lr}
 802a2b0:	b084      	sub	sp, #16
 802a2b2:	af00      	add	r7, sp, #0
 802a2b4:	60f8      	str	r0, [r7, #12]
 802a2b6:	60b9      	str	r1, [r7, #8]
 802a2b8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a2ba:	687a      	ldr	r2, [r7, #4]
 802a2bc:	68b9      	ldr	r1, [r7, #8]
 802a2be:	68f8      	ldr	r0, [r7, #12]
 802a2c0:	f000 fa37 	bl	802a732 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 802a2c4:	4603      	mov	r3, r0
    }
 802a2c6:	4618      	mov	r0, r3
 802a2c8:	3710      	adds	r7, #16
 802a2ca:	46bd      	mov	sp, r7
 802a2cc:	bd80      	pop	{r7, pc}

0802a2ce <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802a2ce:	b580      	push	{r7, lr}
 802a2d0:	b084      	sub	sp, #16
 802a2d2:	af00      	add	r7, sp, #0
 802a2d4:	60f8      	str	r0, [r7, #12]
 802a2d6:	60b9      	str	r1, [r7, #8]
 802a2d8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802a2da:	687a      	ldr	r2, [r7, #4]
 802a2dc:	68b9      	ldr	r1, [r7, #8]
 802a2de:	68f8      	ldr	r0, [r7, #12]
 802a2e0:	f000 fa44 	bl	802a76c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 802a2e4:	4603      	mov	r3, r0
    }
 802a2e6:	4618      	mov	r0, r3
 802a2e8:	3710      	adds	r7, #16
 802a2ea:	46bd      	mov	sp, r7
 802a2ec:	bd80      	pop	{r7, pc}

0802a2ee <_ZSt12__niter_baseIPP8ResponceET_S3_>:
    __niter_base(_Iterator __it)
 802a2ee:	b480      	push	{r7}
 802a2f0:	b083      	sub	sp, #12
 802a2f2:	af00      	add	r7, sp, #0
 802a2f4:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a2f6:	687b      	ldr	r3, [r7, #4]
 802a2f8:	4618      	mov	r0, r3
 802a2fa:	370c      	adds	r7, #12
 802a2fc:	46bd      	mov	sp, r7
 802a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a302:	4770      	bx	lr

0802a304 <_ZSt14__copy_move_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a304:	b580      	push	{r7, lr}
 802a306:	b084      	sub	sp, #16
 802a308:	af00      	add	r7, sp, #0
 802a30a:	60f8      	str	r0, [r7, #12]
 802a30c:	60b9      	str	r1, [r7, #8]
 802a30e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a310:	687a      	ldr	r2, [r7, #4]
 802a312:	68b9      	ldr	r1, [r7, #8]
 802a314:	68f8      	ldr	r0, [r7, #12]
 802a316:	f000 fa4b 	bl	802a7b0 <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 802a31a:	4603      	mov	r3, r0
 802a31c:	4618      	mov	r0, r3
 802a31e:	3710      	adds	r7, #16
 802a320:	46bd      	mov	sp, r7
 802a322:	bd80      	pop	{r7, pc}

0802a324 <_ZSt12__niter_wrapIPP8ResponceET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802a324:	b480      	push	{r7}
 802a326:	b083      	sub	sp, #12
 802a328:	af00      	add	r7, sp, #0
 802a32a:	6078      	str	r0, [r7, #4]
 802a32c:	6039      	str	r1, [r7, #0]
    { return __res; }
 802a32e:	683b      	ldr	r3, [r7, #0]
 802a330:	4618      	mov	r0, r3
 802a332:	370c      	adds	r7, #12
 802a334:	46bd      	mov	sp, r7
 802a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a33a:	4770      	bx	lr

0802a33c <_ZSt23__copy_move_backward_a1ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802a33c:	b580      	push	{r7, lr}
 802a33e:	b084      	sub	sp, #16
 802a340:	af00      	add	r7, sp, #0
 802a342:	60f8      	str	r0, [r7, #12]
 802a344:	60b9      	str	r1, [r7, #8]
 802a346:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802a348:	687a      	ldr	r2, [r7, #4]
 802a34a:	68b9      	ldr	r1, [r7, #8]
 802a34c:	68f8      	ldr	r0, [r7, #12]
 802a34e:	f000 fa3f 	bl	802a7d0 <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>
 802a352:	4603      	mov	r3, r0
 802a354:	4618      	mov	r0, r3
 802a356:	3710      	adds	r7, #16
 802a358:	46bd      	mov	sp, r7
 802a35a:	bd80      	pop	{r7, pc}

0802a35c <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 802a35c:	b580      	push	{r7, lr}
 802a35e:	b084      	sub	sp, #16
 802a360:	af00      	add	r7, sp, #0
 802a362:	60f8      	str	r0, [r7, #12]
 802a364:	60b9      	str	r1, [r7, #8]
 802a366:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 802a368:	687a      	ldr	r2, [r7, #4]
 802a36a:	68b9      	ldr	r1, [r7, #8]
 802a36c:	68f8      	ldr	r0, [r7, #12]
 802a36e:	f000 fa3f 	bl	802a7f0 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 802a372:	bf00      	nop
 802a374:	3710      	adds	r7, #16
 802a376:	46bd      	mov	sp, r7
 802a378:	bd80      	pop	{r7, pc}

0802a37a <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 802a37a:	b580      	push	{r7, lr}
 802a37c:	b082      	sub	sp, #8
 802a37e:	af00      	add	r7, sp, #0
 802a380:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 802a382:	1d3b      	adds	r3, r7, #4
 802a384:	4618      	mov	r0, r3
 802a386:	f000 fa4d 	bl	802a824 <_ZNKSt13move_iteratorIPhE4baseEv>
 802a38a:	4603      	mov	r3, r0
 802a38c:	4618      	mov	r0, r3
 802a38e:	f7fb fe56 	bl	802603e <_ZSt12__miter_baseIPhET_S1_>
 802a392:	4603      	mov	r3, r0
 802a394:	4618      	mov	r0, r3
 802a396:	3708      	adds	r7, #8
 802a398:	46bd      	mov	sp, r7
 802a39a:	bd80      	pop	{r7, pc}

0802a39c <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 802a39c:	b5b0      	push	{r4, r5, r7, lr}
 802a39e:	b084      	sub	sp, #16
 802a3a0:	af00      	add	r7, sp, #0
 802a3a2:	60f8      	str	r0, [r7, #12]
 802a3a4:	60b9      	str	r1, [r7, #8]
 802a3a6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 802a3a8:	68f8      	ldr	r0, [r7, #12]
 802a3aa:	f7fc ff31 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 802a3ae:	4604      	mov	r4, r0
 802a3b0:	68b8      	ldr	r0, [r7, #8]
 802a3b2:	f7fc ff2d 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 802a3b6:	4605      	mov	r5, r0
 802a3b8:	687b      	ldr	r3, [r7, #4]
 802a3ba:	4618      	mov	r0, r3
 802a3bc:	f7fc ff28 	bl	8027210 <_ZSt12__niter_baseIPhET_S1_>
 802a3c0:	4603      	mov	r3, r0
 802a3c2:	461a      	mov	r2, r3
 802a3c4:	4629      	mov	r1, r5
 802a3c6:	4620      	mov	r0, r4
 802a3c8:	f000 fa38 	bl	802a83c <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 802a3cc:	4602      	mov	r2, r0
 802a3ce:	1d3b      	adds	r3, r7, #4
 802a3d0:	4611      	mov	r1, r2
 802a3d2:	4618      	mov	r0, r3
 802a3d4:	f7fc ff37 	bl	8027246 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 802a3d8:	4603      	mov	r3, r0
    }
 802a3da:	4618      	mov	r0, r3
 802a3dc:	3710      	adds	r7, #16
 802a3de:	46bd      	mov	sp, r7
 802a3e0:	bdb0      	pop	{r4, r5, r7, pc}

0802a3e2 <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 802a3e2:	b480      	push	{r7}
 802a3e4:	b083      	sub	sp, #12
 802a3e6:	af00      	add	r7, sp, #0
 802a3e8:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a3ea:	687b      	ldr	r3, [r7, #4]
 802a3ec:	4618      	mov	r0, r3
 802a3ee:	370c      	adds	r7, #12
 802a3f0:	46bd      	mov	sp, r7
 802a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3f6:	4770      	bx	lr

0802a3f8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a3f8:	b580      	push	{r7, lr}
 802a3fa:	b086      	sub	sp, #24
 802a3fc:	af00      	add	r7, sp, #0
 802a3fe:	60f8      	str	r0, [r7, #12]
 802a400:	60b9      	str	r1, [r7, #8]
 802a402:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a404:	68ba      	ldr	r2, [r7, #8]
 802a406:	68fb      	ldr	r3, [r7, #12]
 802a408:	1ad3      	subs	r3, r2, r3
 802a40a:	109b      	asrs	r3, r3, #2
 802a40c:	4a0e      	ldr	r2, [pc, #56]	; (802a448 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 802a40e:	fb02 f303 	mul.w	r3, r2, r3
 802a412:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a414:	697b      	ldr	r3, [r7, #20]
 802a416:	2b00      	cmp	r3, #0
 802a418:	d009      	beq.n	802a42e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802a41a:	697a      	ldr	r2, [r7, #20]
 802a41c:	4613      	mov	r3, r2
 802a41e:	009b      	lsls	r3, r3, #2
 802a420:	4413      	add	r3, r2
 802a422:	009b      	lsls	r3, r3, #2
 802a424:	461a      	mov	r2, r3
 802a426:	68f9      	ldr	r1, [r7, #12]
 802a428:	6878      	ldr	r0, [r7, #4]
 802a42a:	f015 f84b 	bl	803f4c4 <memmove>
	  return __result + _Num;
 802a42e:	697a      	ldr	r2, [r7, #20]
 802a430:	4613      	mov	r3, r2
 802a432:	009b      	lsls	r3, r3, #2
 802a434:	4413      	add	r3, r2
 802a436:	009b      	lsls	r3, r3, #2
 802a438:	461a      	mov	r2, r3
 802a43a:	687b      	ldr	r3, [r7, #4]
 802a43c:	4413      	add	r3, r2
	}
 802a43e:	4618      	mov	r0, r3
 802a440:	3718      	adds	r7, #24
 802a442:	46bd      	mov	sp, r7
 802a444:	bd80      	pop	{r7, pc}
 802a446:	bf00      	nop
 802a448:	cccccccd 	.word	0xcccccccd

0802a44c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 802a44c:	b580      	push	{r7, lr}
 802a44e:	b090      	sub	sp, #64	; 0x40
 802a450:	af00      	add	r7, sp, #0
 802a452:	60f8      	str	r0, [r7, #12]
 802a454:	60b9      	str	r1, [r7, #8]
 802a456:	607a      	str	r2, [r7, #4]
 802a458:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 802a45a:	f107 0310 	add.w	r3, r7, #16
 802a45e:	68b9      	ldr	r1, [r7, #8]
 802a460:	4618      	mov	r0, r3
 802a462:	f7ff fa95 	bl	8029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802a466:	f107 0320 	add.w	r3, r7, #32
 802a46a:	6879      	ldr	r1, [r7, #4]
 802a46c:	4618      	mov	r0, r3
 802a46e:	f7ff fa8f 	bl	8029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802a472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a476:	6839      	ldr	r1, [r7, #0]
 802a478:	4618      	mov	r0, r3
 802a47a:	f7fa ff7a 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a47e:	68f8      	ldr	r0, [r7, #12]
 802a480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a484:	f107 0220 	add.w	r2, r7, #32
 802a488:	f107 0110 	add.w	r1, r7, #16
 802a48c:	f000 f9e6 	bl	802a85c <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 802a490:	68f8      	ldr	r0, [r7, #12]
 802a492:	3740      	adds	r7, #64	; 0x40
 802a494:	46bd      	mov	sp, r7
 802a496:	bd80      	pop	{r7, pc}

0802a498 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 802a498:	b5b0      	push	{r4, r5, r7, lr}
 802a49a:	b09e      	sub	sp, #120	; 0x78
 802a49c:	af00      	add	r7, sp, #0
 802a49e:	60f8      	str	r0, [r7, #12]
 802a4a0:	60b9      	str	r1, [r7, #8]
 802a4a2:	607a      	str	r2, [r7, #4]
 802a4a4:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802a4a6:	68bb      	ldr	r3, [r7, #8]
 802a4a8:	68da      	ldr	r2, [r3, #12]
 802a4aa:	687b      	ldr	r3, [r7, #4]
 802a4ac:	68db      	ldr	r3, [r3, #12]
 802a4ae:	429a      	cmp	r2, r3
 802a4b0:	d058      	beq.n	802a564 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 802a4b2:	68bb      	ldr	r3, [r7, #8]
 802a4b4:	681c      	ldr	r4, [r3, #0]
 802a4b6:	68bb      	ldr	r3, [r7, #8]
 802a4b8:	689d      	ldr	r5, [r3, #8]
 802a4ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a4be:	6839      	ldr	r1, [r7, #0]
 802a4c0:	4618      	mov	r0, r3
 802a4c2:	f7fa ff56 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a4c6:	f107 0014 	add.w	r0, r7, #20
 802a4ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a4ce:	462a      	mov	r2, r5
 802a4d0:	4621      	mov	r1, r4
 802a4d2:	f000 f9f9 	bl	802a8c8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802a4d6:	683b      	ldr	r3, [r7, #0]
 802a4d8:	461c      	mov	r4, r3
 802a4da:	f107 0314 	add.w	r3, r7, #20
 802a4de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a4e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802a4e4:	68bb      	ldr	r3, [r7, #8]
 802a4e6:	68db      	ldr	r3, [r3, #12]
 802a4e8:	3304      	adds	r3, #4
 802a4ea:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 802a4ec:	687b      	ldr	r3, [r7, #4]
 802a4ee:	68db      	ldr	r3, [r3, #12]
 802a4f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802a4f2:	429a      	cmp	r2, r3
 802a4f4:	d024      	beq.n	802a540 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 802a4f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a4f8:	681d      	ldr	r5, [r3, #0]
 802a4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a4fc:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 802a4fe:	f7fc f80a 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802a502:	4602      	mov	r2, r0
 802a504:	4613      	mov	r3, r2
 802a506:	009b      	lsls	r3, r3, #2
 802a508:	4413      	add	r3, r2
 802a50a:	009b      	lsls	r3, r3, #2
	    __result
 802a50c:	441c      	add	r4, r3
 802a50e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a512:	6839      	ldr	r1, [r7, #0]
 802a514:	4618      	mov	r0, r3
 802a516:	f7fa ff2c 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a51a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802a51e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a522:	4622      	mov	r2, r4
 802a524:	4629      	mov	r1, r5
 802a526:	f000 f9cf 	bl	802a8c8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802a52a:	683b      	ldr	r3, [r7, #0]
 802a52c:	461c      	mov	r4, r3
 802a52e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802a532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 802a538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a53a:	3304      	adds	r3, #4
 802a53c:	677b      	str	r3, [r7, #116]	; 0x74
 802a53e:	e7d5      	b.n	802a4ec <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 802a540:	687b      	ldr	r3, [r7, #4]
 802a542:	685c      	ldr	r4, [r3, #4]
 802a544:	687b      	ldr	r3, [r7, #4]
 802a546:	681d      	ldr	r5, [r3, #0]
 802a548:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a54c:	6839      	ldr	r1, [r7, #0]
 802a54e:	4618      	mov	r0, r3
 802a550:	f7fa ff0f 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a554:	68f8      	ldr	r0, [r7, #12]
 802a556:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a55a:	462a      	mov	r2, r5
 802a55c:	4621      	mov	r1, r4
 802a55e:	f000 f9b3 	bl	802a8c8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802a562:	e010      	b.n	802a586 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 802a564:	68bb      	ldr	r3, [r7, #8]
 802a566:	681c      	ldr	r4, [r3, #0]
 802a568:	687b      	ldr	r3, [r7, #4]
 802a56a:	681d      	ldr	r5, [r3, #0]
 802a56c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a570:	6839      	ldr	r1, [r7, #0]
 802a572:	4618      	mov	r0, r3
 802a574:	f7fa fefd 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a578:	68f8      	ldr	r0, [r7, #12]
 802a57a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a57e:	462a      	mov	r2, r5
 802a580:	4621      	mov	r1, r4
 802a582:	f000 f9a1 	bl	802a8c8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802a586:	68f8      	ldr	r0, [r7, #12]
 802a588:	3778      	adds	r7, #120	; 0x78
 802a58a:	46bd      	mov	sp, r7
 802a58c:	bdb0      	pop	{r4, r5, r7, pc}

0802a58e <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 802a58e:	b5b0      	push	{r4, r5, r7, lr}
 802a590:	b09e      	sub	sp, #120	; 0x78
 802a592:	af00      	add	r7, sp, #0
 802a594:	60f8      	str	r0, [r7, #12]
 802a596:	60b9      	str	r1, [r7, #8]
 802a598:	607a      	str	r2, [r7, #4]
 802a59a:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802a59c:	68bb      	ldr	r3, [r7, #8]
 802a59e:	68da      	ldr	r2, [r3, #12]
 802a5a0:	687b      	ldr	r3, [r7, #4]
 802a5a2:	68db      	ldr	r3, [r3, #12]
 802a5a4:	429a      	cmp	r2, r3
 802a5a6:	d058      	beq.n	802a65a <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 802a5a8:	687b      	ldr	r3, [r7, #4]
 802a5aa:	685c      	ldr	r4, [r3, #4]
 802a5ac:	687b      	ldr	r3, [r7, #4]
 802a5ae:	681d      	ldr	r5, [r3, #0]
 802a5b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a5b4:	6839      	ldr	r1, [r7, #0]
 802a5b6:	4618      	mov	r0, r3
 802a5b8:	f7fa fedb 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a5bc:	f107 0014 	add.w	r0, r7, #20
 802a5c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802a5c4:	462a      	mov	r2, r5
 802a5c6:	4621      	mov	r1, r4
 802a5c8:	f000 f9d0 	bl	802a96c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802a5cc:	683b      	ldr	r3, [r7, #0]
 802a5ce:	461c      	mov	r4, r3
 802a5d0:	f107 0314 	add.w	r3, r7, #20
 802a5d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a5d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802a5da:	687b      	ldr	r3, [r7, #4]
 802a5dc:	68db      	ldr	r3, [r3, #12]
 802a5de:	3b04      	subs	r3, #4
 802a5e0:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 802a5e2:	68bb      	ldr	r3, [r7, #8]
 802a5e4:	68db      	ldr	r3, [r3, #12]
 802a5e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802a5e8:	429a      	cmp	r2, r3
 802a5ea:	d024      	beq.n	802a636 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802a5ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a5ee:	681d      	ldr	r5, [r3, #0]
 802a5f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a5f2:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 802a5f4:	f7fb ff8f 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802a5f8:	4602      	mov	r2, r0
 802a5fa:	4613      	mov	r3, r2
 802a5fc:	009b      	lsls	r3, r3, #2
 802a5fe:	4413      	add	r3, r2
 802a600:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 802a602:	441c      	add	r4, r3
 802a604:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a608:	6839      	ldr	r1, [r7, #0]
 802a60a:	4618      	mov	r0, r3
 802a60c:	f7fa feb1 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a610:	f107 0034 	add.w	r0, r7, #52	; 0x34
 802a614:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802a618:	4622      	mov	r2, r4
 802a61a:	4629      	mov	r1, r5
 802a61c:	f000 f9a6 	bl	802a96c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802a620:	683b      	ldr	r3, [r7, #0]
 802a622:	461c      	mov	r4, r3
 802a624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802a628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802a62a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802a62e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802a630:	3b04      	subs	r3, #4
 802a632:	677b      	str	r3, [r7, #116]	; 0x74
 802a634:	e7d5      	b.n	802a5e2 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 802a636:	68bb      	ldr	r3, [r7, #8]
 802a638:	681c      	ldr	r4, [r3, #0]
 802a63a:	68bb      	ldr	r3, [r7, #8]
 802a63c:	689d      	ldr	r5, [r3, #8]
 802a63e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a642:	6839      	ldr	r1, [r7, #0]
 802a644:	4618      	mov	r0, r3
 802a646:	f7fa fe94 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a64a:	68f8      	ldr	r0, [r7, #12]
 802a64c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802a650:	462a      	mov	r2, r5
 802a652:	4621      	mov	r1, r4
 802a654:	f000 f98a 	bl	802a96c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802a658:	e010      	b.n	802a67c <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 802a65a:	68bb      	ldr	r3, [r7, #8]
 802a65c:	681c      	ldr	r4, [r3, #0]
 802a65e:	687b      	ldr	r3, [r7, #4]
 802a660:	681d      	ldr	r5, [r3, #0]
 802a662:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a666:	6839      	ldr	r1, [r7, #0]
 802a668:	4618      	mov	r0, r3
 802a66a:	f7fa fe82 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a66e:	68f8      	ldr	r0, [r7, #12]
 802a670:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802a674:	462a      	mov	r2, r5
 802a676:	4621      	mov	r1, r4
 802a678:	f000 f978 	bl	802a96c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802a67c:	68f8      	ldr	r0, [r7, #12]
 802a67e:	3778      	adds	r7, #120	; 0x78
 802a680:	46bd      	mov	sp, r7
 802a682:	bdb0      	pop	{r4, r5, r7, pc}

0802a684 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a684:	b580      	push	{r7, lr}
 802a686:	b084      	sub	sp, #16
 802a688:	af00      	add	r7, sp, #0
 802a68a:	60f8      	str	r0, [r7, #12]
 802a68c:	60b9      	str	r1, [r7, #8]
 802a68e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a690:	687a      	ldr	r2, [r7, #4]
 802a692:	68b9      	ldr	r1, [r7, #8]
 802a694:	68f8      	ldr	r0, [r7, #12]
 802a696:	f000 f9cf 	bl	802aa38 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802a69a:	4603      	mov	r3, r0
    }
 802a69c:	4618      	mov	r0, r3
 802a69e:	3710      	adds	r7, #16
 802a6a0:	46bd      	mov	sp, r7
 802a6a2:	bd80      	pop	{r7, pc}

0802a6a4 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802a6a4:	b580      	push	{r7, lr}
 802a6a6:	b084      	sub	sp, #16
 802a6a8:	af00      	add	r7, sp, #0
 802a6aa:	60f8      	str	r0, [r7, #12]
 802a6ac:	60b9      	str	r1, [r7, #8]
 802a6ae:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802a6b0:	687a      	ldr	r2, [r7, #4]
 802a6b2:	68b9      	ldr	r1, [r7, #8]
 802a6b4:	68f8      	ldr	r0, [r7, #12]
 802a6b6:	f000 f9dc 	bl	802aa72 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802a6ba:	4603      	mov	r3, r0
    }
 802a6bc:	4618      	mov	r0, r3
 802a6be:	3710      	adds	r7, #16
 802a6c0:	46bd      	mov	sp, r7
 802a6c2:	bd80      	pop	{r7, pc}

0802a6c4 <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 802a6c4:	b480      	push	{r7}
 802a6c6:	b083      	sub	sp, #12
 802a6c8:	af00      	add	r7, sp, #0
 802a6ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 802a6cc:	687b      	ldr	r3, [r7, #4]
 802a6ce:	4618      	mov	r0, r3
 802a6d0:	370c      	adds	r7, #12
 802a6d2:	46bd      	mov	sp, r7
 802a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6d8:	4770      	bx	lr

0802a6da <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a6da:	b580      	push	{r7, lr}
 802a6dc:	b084      	sub	sp, #16
 802a6de:	af00      	add	r7, sp, #0
 802a6e0:	60f8      	str	r0, [r7, #12]
 802a6e2:	60b9      	str	r1, [r7, #8]
 802a6e4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a6e6:	687a      	ldr	r2, [r7, #4]
 802a6e8:	68b9      	ldr	r1, [r7, #8]
 802a6ea:	68f8      	ldr	r0, [r7, #12]
 802a6ec:	f000 f9e3 	bl	802aab6 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 802a6f0:	4603      	mov	r3, r0
 802a6f2:	4618      	mov	r0, r3
 802a6f4:	3710      	adds	r7, #16
 802a6f6:	46bd      	mov	sp, r7
 802a6f8:	bd80      	pop	{r7, pc}

0802a6fa <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802a6fa:	b480      	push	{r7}
 802a6fc:	b083      	sub	sp, #12
 802a6fe:	af00      	add	r7, sp, #0
 802a700:	6078      	str	r0, [r7, #4]
 802a702:	6039      	str	r1, [r7, #0]
    { return __res; }
 802a704:	683b      	ldr	r3, [r7, #0]
 802a706:	4618      	mov	r0, r3
 802a708:	370c      	adds	r7, #12
 802a70a:	46bd      	mov	sp, r7
 802a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a710:	4770      	bx	lr

0802a712 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802a712:	b580      	push	{r7, lr}
 802a714:	b084      	sub	sp, #16
 802a716:	af00      	add	r7, sp, #0
 802a718:	60f8      	str	r0, [r7, #12]
 802a71a:	60b9      	str	r1, [r7, #8]
 802a71c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802a71e:	687a      	ldr	r2, [r7, #4]
 802a720:	68b9      	ldr	r1, [r7, #8]
 802a722:	68f8      	ldr	r0, [r7, #12]
 802a724:	f000 f9d7 	bl	802aad6 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 802a728:	4603      	mov	r3, r0
 802a72a:	4618      	mov	r0, r3
 802a72c:	3710      	adds	r7, #16
 802a72e:	46bd      	mov	sp, r7
 802a730:	bd80      	pop	{r7, pc}

0802a732 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a732:	b580      	push	{r7, lr}
 802a734:	b086      	sub	sp, #24
 802a736:	af00      	add	r7, sp, #0
 802a738:	60f8      	str	r0, [r7, #12]
 802a73a:	60b9      	str	r1, [r7, #8]
 802a73c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a73e:	68ba      	ldr	r2, [r7, #8]
 802a740:	68fb      	ldr	r3, [r7, #12]
 802a742:	1ad3      	subs	r3, r2, r3
 802a744:	109b      	asrs	r3, r3, #2
 802a746:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a748:	697b      	ldr	r3, [r7, #20]
 802a74a:	2b00      	cmp	r3, #0
 802a74c:	d006      	beq.n	802a75c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802a74e:	697b      	ldr	r3, [r7, #20]
 802a750:	009b      	lsls	r3, r3, #2
 802a752:	461a      	mov	r2, r3
 802a754:	68f9      	ldr	r1, [r7, #12]
 802a756:	6878      	ldr	r0, [r7, #4]
 802a758:	f014 feb4 	bl	803f4c4 <memmove>
	  return __result + _Num;
 802a75c:	697b      	ldr	r3, [r7, #20]
 802a75e:	009b      	lsls	r3, r3, #2
 802a760:	687a      	ldr	r2, [r7, #4]
 802a762:	4413      	add	r3, r2
	}
 802a764:	4618      	mov	r0, r3
 802a766:	3718      	adds	r7, #24
 802a768:	46bd      	mov	sp, r7
 802a76a:	bd80      	pop	{r7, pc}

0802a76c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802a76c:	b580      	push	{r7, lr}
 802a76e:	b086      	sub	sp, #24
 802a770:	af00      	add	r7, sp, #0
 802a772:	60f8      	str	r0, [r7, #12]
 802a774:	60b9      	str	r1, [r7, #8]
 802a776:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802a778:	68ba      	ldr	r2, [r7, #8]
 802a77a:	68fb      	ldr	r3, [r7, #12]
 802a77c:	1ad3      	subs	r3, r2, r3
 802a77e:	109b      	asrs	r3, r3, #2
 802a780:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802a782:	697b      	ldr	r3, [r7, #20]
 802a784:	2b00      	cmp	r3, #0
 802a786:	d00a      	beq.n	802a79e <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802a788:	697b      	ldr	r3, [r7, #20]
 802a78a:	009b      	lsls	r3, r3, #2
 802a78c:	425b      	negs	r3, r3
 802a78e:	687a      	ldr	r2, [r7, #4]
 802a790:	18d0      	adds	r0, r2, r3
 802a792:	697b      	ldr	r3, [r7, #20]
 802a794:	009b      	lsls	r3, r3, #2
 802a796:	461a      	mov	r2, r3
 802a798:	68f9      	ldr	r1, [r7, #12]
 802a79a:	f014 fe93 	bl	803f4c4 <memmove>
	  return __result - _Num;
 802a79e:	697b      	ldr	r3, [r7, #20]
 802a7a0:	009b      	lsls	r3, r3, #2
 802a7a2:	425b      	negs	r3, r3
 802a7a4:	687a      	ldr	r2, [r7, #4]
 802a7a6:	4413      	add	r3, r2
	}
 802a7a8:	4618      	mov	r0, r3
 802a7aa:	3718      	adds	r7, #24
 802a7ac:	46bd      	mov	sp, r7
 802a7ae:	bd80      	pop	{r7, pc}

0802a7b0 <_ZSt14__copy_move_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802a7b0:	b580      	push	{r7, lr}
 802a7b2:	b084      	sub	sp, #16
 802a7b4:	af00      	add	r7, sp, #0
 802a7b6:	60f8      	str	r0, [r7, #12]
 802a7b8:	60b9      	str	r1, [r7, #8]
 802a7ba:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802a7bc:	687a      	ldr	r2, [r7, #4]
 802a7be:	68b9      	ldr	r1, [r7, #8]
 802a7c0:	68f8      	ldr	r0, [r7, #12]
 802a7c2:	f000 f998 	bl	802aaf6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>
 802a7c6:	4603      	mov	r3, r0
    }
 802a7c8:	4618      	mov	r0, r3
 802a7ca:	3710      	adds	r7, #16
 802a7cc:	46bd      	mov	sp, r7
 802a7ce:	bd80      	pop	{r7, pc}

0802a7d0 <_ZSt23__copy_move_backward_a2ILb0EPP8ResponceS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802a7d0:	b580      	push	{r7, lr}
 802a7d2:	b084      	sub	sp, #16
 802a7d4:	af00      	add	r7, sp, #0
 802a7d6:	60f8      	str	r0, [r7, #12]
 802a7d8:	60b9      	str	r1, [r7, #8]
 802a7da:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802a7dc:	687a      	ldr	r2, [r7, #4]
 802a7de:	68b9      	ldr	r1, [r7, #8]
 802a7e0:	68f8      	ldr	r0, [r7, #12]
 802a7e2:	f000 f9a5 	bl	802ab30 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>
 802a7e6:	4603      	mov	r3, r0
    }
 802a7e8:	4618      	mov	r0, r3
 802a7ea:	3710      	adds	r7, #16
 802a7ec:	46bd      	mov	sp, r7
 802a7ee:	bd80      	pop	{r7, pc}

0802a7f0 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 802a7f0:	b580      	push	{r7, lr}
 802a7f2:	b086      	sub	sp, #24
 802a7f4:	af00      	add	r7, sp, #0
 802a7f6:	60f8      	str	r0, [r7, #12]
 802a7f8:	60b9      	str	r1, [r7, #8]
 802a7fa:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 802a7fc:	687b      	ldr	r3, [r7, #4]
 802a7fe:	781b      	ldrb	r3, [r3, #0]
 802a800:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 802a802:	68ba      	ldr	r2, [r7, #8]
 802a804:	68fb      	ldr	r3, [r7, #12]
 802a806:	1ad3      	subs	r3, r2, r3
 802a808:	613b      	str	r3, [r7, #16]
 802a80a:	693b      	ldr	r3, [r7, #16]
 802a80c:	2b00      	cmp	r3, #0
 802a80e:	d005      	beq.n	802a81c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 802a810:	7dfb      	ldrb	r3, [r7, #23]
 802a812:	693a      	ldr	r2, [r7, #16]
 802a814:	4619      	mov	r1, r3
 802a816:	68f8      	ldr	r0, [r7, #12]
 802a818:	f014 fe6e 	bl	803f4f8 <memset>
    }
 802a81c:	bf00      	nop
 802a81e:	3718      	adds	r7, #24
 802a820:	46bd      	mov	sp, r7
 802a822:	bd80      	pop	{r7, pc}

0802a824 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 802a824:	b480      	push	{r7}
 802a826:	b083      	sub	sp, #12
 802a828:	af00      	add	r7, sp, #0
 802a82a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 802a82c:	687b      	ldr	r3, [r7, #4]
 802a82e:	681b      	ldr	r3, [r3, #0]
 802a830:	4618      	mov	r0, r3
 802a832:	370c      	adds	r7, #12
 802a834:	46bd      	mov	sp, r7
 802a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a83a:	4770      	bx	lr

0802a83c <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802a83c:	b580      	push	{r7, lr}
 802a83e:	b084      	sub	sp, #16
 802a840:	af00      	add	r7, sp, #0
 802a842:	60f8      	str	r0, [r7, #12]
 802a844:	60b9      	str	r1, [r7, #8]
 802a846:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802a848:	687a      	ldr	r2, [r7, #4]
 802a84a:	68b9      	ldr	r1, [r7, #8]
 802a84c:	68f8      	ldr	r0, [r7, #12]
 802a84e:	f000 f991 	bl	802ab74 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 802a852:	4603      	mov	r3, r0
 802a854:	4618      	mov	r0, r3
 802a856:	3710      	adds	r7, #16
 802a858:	46bd      	mov	sp, r7
 802a85a:	bd80      	pop	{r7, pc}

0802a85c <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 802a85c:	b580      	push	{r7, lr}
 802a85e:	b098      	sub	sp, #96	; 0x60
 802a860:	af00      	add	r7, sp, #0
 802a862:	60f8      	str	r0, [r7, #12]
 802a864:	60b9      	str	r1, [r7, #8]
 802a866:	607a      	str	r2, [r7, #4]
 802a868:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802a86a:	f107 0320 	add.w	r3, r7, #32
 802a86e:	68b9      	ldr	r1, [r7, #8]
 802a870:	4618      	mov	r0, r3
 802a872:	f7ff f88d 	bl	8029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802a876:	f107 0310 	add.w	r3, r7, #16
 802a87a:	f107 0220 	add.w	r2, r7, #32
 802a87e:	4611      	mov	r1, r2
 802a880:	4618      	mov	r0, r3
 802a882:	f000 f987 	bl	802ab94 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802a886:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802a88a:	6879      	ldr	r1, [r7, #4]
 802a88c:	4618      	mov	r0, r3
 802a88e:	f7ff f87f 	bl	8029990 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802a892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a896:	f107 0240 	add.w	r2, r7, #64	; 0x40
 802a89a:	4611      	mov	r1, r2
 802a89c:	4618      	mov	r0, r3
 802a89e:	f000 f979 	bl	802ab94 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802a8a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802a8a6:	6839      	ldr	r1, [r7, #0]
 802a8a8:	4618      	mov	r0, r3
 802a8aa:	f7fa fd62 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802a8ae:	68f8      	ldr	r0, [r7, #12]
 802a8b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802a8b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802a8b8:	f107 0110 	add.w	r1, r7, #16
 802a8bc:	f7ff f8ab 	bl	8029a16 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802a8c0:	68f8      	ldr	r0, [r7, #12]
 802a8c2:	3760      	adds	r7, #96	; 0x60
 802a8c4:	46bd      	mov	sp, r7
 802a8c6:	bd80      	pop	{r7, pc}

0802a8c8 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 802a8c8:	b580      	push	{r7, lr}
 802a8ca:	b088      	sub	sp, #32
 802a8cc:	af00      	add	r7, sp, #0
 802a8ce:	60f8      	str	r0, [r7, #12]
 802a8d0:	60b9      	str	r1, [r7, #8]
 802a8d2:	607a      	str	r2, [r7, #4]
 802a8d4:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 802a8d6:	687a      	ldr	r2, [r7, #4]
 802a8d8:	68bb      	ldr	r3, [r7, #8]
 802a8da:	1ad3      	subs	r3, r2, r3
 802a8dc:	109b      	asrs	r3, r3, #2
 802a8de:	4a22      	ldr	r2, [pc, #136]	; (802a968 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802a8e0:	fb02 f303 	mul.w	r3, r2, r3
 802a8e4:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802a8e6:	697b      	ldr	r3, [r7, #20]
 802a8e8:	2b00      	cmp	r3, #0
 802a8ea:	dd34      	ble.n	802a956 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 802a8ec:	683b      	ldr	r3, [r7, #0]
 802a8ee:	689a      	ldr	r2, [r3, #8]
 802a8f0:	683b      	ldr	r3, [r7, #0]
 802a8f2:	681b      	ldr	r3, [r3, #0]
 802a8f4:	1ad3      	subs	r3, r2, r3
 802a8f6:	109b      	asrs	r3, r3, #2
 802a8f8:	4a1b      	ldr	r2, [pc, #108]	; (802a968 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802a8fa:	fb02 f303 	mul.w	r3, r2, r3
 802a8fe:	61bb      	str	r3, [r7, #24]
 802a900:	f107 0218 	add.w	r2, r7, #24
 802a904:	f107 0314 	add.w	r3, r7, #20
 802a908:	4611      	mov	r1, r2
 802a90a:	4618      	mov	r0, r3
 802a90c:	f7fe f83d 	bl	802898a <_ZSt3minIiERKT_S2_S2_>
 802a910:	4603      	mov	r3, r0
	  const difference_type __clen
 802a912:	681b      	ldr	r3, [r3, #0]
 802a914:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 802a916:	69fa      	ldr	r2, [r7, #28]
 802a918:	4613      	mov	r3, r2
 802a91a:	009b      	lsls	r3, r3, #2
 802a91c:	4413      	add	r3, r2
 802a91e:	009b      	lsls	r3, r3, #2
 802a920:	461a      	mov	r2, r3
 802a922:	68bb      	ldr	r3, [r7, #8]
 802a924:	1899      	adds	r1, r3, r2
 802a926:	683b      	ldr	r3, [r7, #0]
 802a928:	681b      	ldr	r3, [r3, #0]
 802a92a:	461a      	mov	r2, r3
 802a92c:	68b8      	ldr	r0, [r7, #8]
 802a92e:	f000 f947 	bl	802abc0 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 802a932:	69fa      	ldr	r2, [r7, #28]
 802a934:	4613      	mov	r3, r2
 802a936:	009b      	lsls	r3, r3, #2
 802a938:	4413      	add	r3, r2
 802a93a:	009b      	lsls	r3, r3, #2
 802a93c:	461a      	mov	r2, r3
 802a93e:	68bb      	ldr	r3, [r7, #8]
 802a940:	4413      	add	r3, r2
 802a942:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 802a944:	69f9      	ldr	r1, [r7, #28]
 802a946:	6838      	ldr	r0, [r7, #0]
 802a948:	f7fd f972 	bl	8027c30 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 802a94c:	697a      	ldr	r2, [r7, #20]
 802a94e:	69fb      	ldr	r3, [r7, #28]
 802a950:	1ad3      	subs	r3, r2, r3
 802a952:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802a954:	e7c7      	b.n	802a8e6 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 802a956:	6839      	ldr	r1, [r7, #0]
 802a958:	68f8      	ldr	r0, [r7, #12]
 802a95a:	f7fa fd0a 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 802a95e:	68f8      	ldr	r0, [r7, #12]
 802a960:	3720      	adds	r7, #32
 802a962:	46bd      	mov	sp, r7
 802a964:	bd80      	pop	{r7, pc}
 802a966:	bf00      	nop
 802a968:	cccccccd 	.word	0xcccccccd

0802a96c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 802a96c:	b580      	push	{r7, lr}
 802a96e:	b088      	sub	sp, #32
 802a970:	af00      	add	r7, sp, #0
 802a972:	60f8      	str	r0, [r7, #12]
 802a974:	60b9      	str	r1, [r7, #8]
 802a976:	607a      	str	r2, [r7, #4]
 802a978:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 802a97a:	687a      	ldr	r2, [r7, #4]
 802a97c:	68bb      	ldr	r3, [r7, #8]
 802a97e:	1ad3      	subs	r3, r2, r3
 802a980:	109b      	asrs	r3, r3, #2
 802a982:	4a2c      	ldr	r2, [pc, #176]	; (802aa34 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 802a984:	fb02 f303 	mul.w	r3, r2, r3
 802a988:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802a98a:	697b      	ldr	r3, [r7, #20]
 802a98c:	2b00      	cmp	r3, #0
 802a98e:	dd49      	ble.n	802aa24 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 802a990:	683b      	ldr	r3, [r7, #0]
 802a992:	681a      	ldr	r2, [r3, #0]
 802a994:	683b      	ldr	r3, [r7, #0]
 802a996:	685b      	ldr	r3, [r3, #4]
 802a998:	1ad3      	subs	r3, r2, r3
 802a99a:	109b      	asrs	r3, r3, #2
 802a99c:	4a25      	ldr	r2, [pc, #148]	; (802aa34 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 802a99e:	fb02 f303 	mul.w	r3, r2, r3
 802a9a2:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 802a9a4:	683b      	ldr	r3, [r7, #0]
 802a9a6:	681b      	ldr	r3, [r3, #0]
 802a9a8:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 802a9aa:	693b      	ldr	r3, [r7, #16]
 802a9ac:	2b00      	cmp	r3, #0
 802a9ae:	d10f      	bne.n	802a9d0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 802a9b0:	f7fb fdb1 	bl	8026516 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802a9b4:	4603      	mov	r3, r0
 802a9b6:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 802a9b8:	683b      	ldr	r3, [r7, #0]
 802a9ba:	68db      	ldr	r3, [r3, #12]
 802a9bc:	3b04      	subs	r3, #4
 802a9be:	681a      	ldr	r2, [r3, #0]
 802a9c0:	693b      	ldr	r3, [r7, #16]
 802a9c2:	4619      	mov	r1, r3
 802a9c4:	460b      	mov	r3, r1
 802a9c6:	009b      	lsls	r3, r3, #2
 802a9c8:	440b      	add	r3, r1
 802a9ca:	009b      	lsls	r3, r3, #2
 802a9cc:	4413      	add	r3, r2
 802a9ce:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 802a9d0:	f107 0210 	add.w	r2, r7, #16
 802a9d4:	f107 0314 	add.w	r3, r7, #20
 802a9d8:	4611      	mov	r1, r2
 802a9da:	4618      	mov	r0, r3
 802a9dc:	f7fd ffd5 	bl	802898a <_ZSt3minIiERKT_S2_S2_>
 802a9e0:	4603      	mov	r3, r0
 802a9e2:	681b      	ldr	r3, [r3, #0]
 802a9e4:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 802a9e6:	69ba      	ldr	r2, [r7, #24]
 802a9e8:	4613      	mov	r3, r2
 802a9ea:	009b      	lsls	r3, r3, #2
 802a9ec:	4413      	add	r3, r2
 802a9ee:	009b      	lsls	r3, r3, #2
 802a9f0:	425b      	negs	r3, r3
 802a9f2:	687a      	ldr	r2, [r7, #4]
 802a9f4:	4413      	add	r3, r2
 802a9f6:	69fa      	ldr	r2, [r7, #28]
 802a9f8:	6879      	ldr	r1, [r7, #4]
 802a9fa:	4618      	mov	r0, r3
 802a9fc:	f000 f8f0 	bl	802abe0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 802aa00:	69ba      	ldr	r2, [r7, #24]
 802aa02:	4613      	mov	r3, r2
 802aa04:	009b      	lsls	r3, r3, #2
 802aa06:	4413      	add	r3, r2
 802aa08:	009b      	lsls	r3, r3, #2
 802aa0a:	425b      	negs	r3, r3
 802aa0c:	687a      	ldr	r2, [r7, #4]
 802aa0e:	4413      	add	r3, r2
 802aa10:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 802aa12:	69b9      	ldr	r1, [r7, #24]
 802aa14:	6838      	ldr	r0, [r7, #0]
 802aa16:	f7fe ff5f 	bl	80298d8 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 802aa1a:	697a      	ldr	r2, [r7, #20]
 802aa1c:	69bb      	ldr	r3, [r7, #24]
 802aa1e:	1ad3      	subs	r3, r2, r3
 802aa20:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802aa22:	e7b2      	b.n	802a98a <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 802aa24:	6839      	ldr	r1, [r7, #0]
 802aa26:	68f8      	ldr	r0, [r7, #12]
 802aa28:	f7fa fca3 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 802aa2c:	68f8      	ldr	r0, [r7, #12]
 802aa2e:	3720      	adds	r7, #32
 802aa30:	46bd      	mov	sp, r7
 802aa32:	bd80      	pop	{r7, pc}
 802aa34:	cccccccd 	.word	0xcccccccd

0802aa38 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802aa38:	b580      	push	{r7, lr}
 802aa3a:	b086      	sub	sp, #24
 802aa3c:	af00      	add	r7, sp, #0
 802aa3e:	60f8      	str	r0, [r7, #12]
 802aa40:	60b9      	str	r1, [r7, #8]
 802aa42:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802aa44:	68ba      	ldr	r2, [r7, #8]
 802aa46:	68fb      	ldr	r3, [r7, #12]
 802aa48:	1ad3      	subs	r3, r2, r3
 802aa4a:	109b      	asrs	r3, r3, #2
 802aa4c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802aa4e:	697b      	ldr	r3, [r7, #20]
 802aa50:	2b00      	cmp	r3, #0
 802aa52:	d006      	beq.n	802aa62 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802aa54:	697b      	ldr	r3, [r7, #20]
 802aa56:	009b      	lsls	r3, r3, #2
 802aa58:	461a      	mov	r2, r3
 802aa5a:	68f9      	ldr	r1, [r7, #12]
 802aa5c:	6878      	ldr	r0, [r7, #4]
 802aa5e:	f014 fd31 	bl	803f4c4 <memmove>
	  return __result + _Num;
 802aa62:	697b      	ldr	r3, [r7, #20]
 802aa64:	009b      	lsls	r3, r3, #2
 802aa66:	687a      	ldr	r2, [r7, #4]
 802aa68:	4413      	add	r3, r2
	}
 802aa6a:	4618      	mov	r0, r3
 802aa6c:	3718      	adds	r7, #24
 802aa6e:	46bd      	mov	sp, r7
 802aa70:	bd80      	pop	{r7, pc}

0802aa72 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802aa72:	b580      	push	{r7, lr}
 802aa74:	b086      	sub	sp, #24
 802aa76:	af00      	add	r7, sp, #0
 802aa78:	60f8      	str	r0, [r7, #12]
 802aa7a:	60b9      	str	r1, [r7, #8]
 802aa7c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802aa7e:	68ba      	ldr	r2, [r7, #8]
 802aa80:	68fb      	ldr	r3, [r7, #12]
 802aa82:	1ad3      	subs	r3, r2, r3
 802aa84:	109b      	asrs	r3, r3, #2
 802aa86:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802aa88:	697b      	ldr	r3, [r7, #20]
 802aa8a:	2b00      	cmp	r3, #0
 802aa8c:	d00a      	beq.n	802aaa4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802aa8e:	697b      	ldr	r3, [r7, #20]
 802aa90:	009b      	lsls	r3, r3, #2
 802aa92:	425b      	negs	r3, r3
 802aa94:	687a      	ldr	r2, [r7, #4]
 802aa96:	18d0      	adds	r0, r2, r3
 802aa98:	697b      	ldr	r3, [r7, #20]
 802aa9a:	009b      	lsls	r3, r3, #2
 802aa9c:	461a      	mov	r2, r3
 802aa9e:	68f9      	ldr	r1, [r7, #12]
 802aaa0:	f014 fd10 	bl	803f4c4 <memmove>
	  return __result - _Num;
 802aaa4:	697b      	ldr	r3, [r7, #20]
 802aaa6:	009b      	lsls	r3, r3, #2
 802aaa8:	425b      	negs	r3, r3
 802aaaa:	687a      	ldr	r2, [r7, #4]
 802aaac:	4413      	add	r3, r2
	}
 802aaae:	4618      	mov	r0, r3
 802aab0:	3718      	adds	r7, #24
 802aab2:	46bd      	mov	sp, r7
 802aab4:	bd80      	pop	{r7, pc}

0802aab6 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802aab6:	b580      	push	{r7, lr}
 802aab8:	b084      	sub	sp, #16
 802aaba:	af00      	add	r7, sp, #0
 802aabc:	60f8      	str	r0, [r7, #12]
 802aabe:	60b9      	str	r1, [r7, #8]
 802aac0:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802aac2:	687a      	ldr	r2, [r7, #4]
 802aac4:	68b9      	ldr	r1, [r7, #8]
 802aac6:	68f8      	ldr	r0, [r7, #12]
 802aac8:	f000 f89a 	bl	802ac00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 802aacc:	4603      	mov	r3, r0
    }
 802aace:	4618      	mov	r0, r3
 802aad0:	3710      	adds	r7, #16
 802aad2:	46bd      	mov	sp, r7
 802aad4:	bd80      	pop	{r7, pc}

0802aad6 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802aad6:	b580      	push	{r7, lr}
 802aad8:	b084      	sub	sp, #16
 802aada:	af00      	add	r7, sp, #0
 802aadc:	60f8      	str	r0, [r7, #12]
 802aade:	60b9      	str	r1, [r7, #8]
 802aae0:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802aae2:	687a      	ldr	r2, [r7, #4]
 802aae4:	68b9      	ldr	r1, [r7, #8]
 802aae6:	68f8      	ldr	r0, [r7, #12]
 802aae8:	f000 f8a7 	bl	802ac3a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 802aaec:	4603      	mov	r3, r0
    }
 802aaee:	4618      	mov	r0, r3
 802aaf0:	3710      	adds	r7, #16
 802aaf2:	46bd      	mov	sp, r7
 802aaf4:	bd80      	pop	{r7, pc}

0802aaf6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802aaf6:	b580      	push	{r7, lr}
 802aaf8:	b086      	sub	sp, #24
 802aafa:	af00      	add	r7, sp, #0
 802aafc:	60f8      	str	r0, [r7, #12]
 802aafe:	60b9      	str	r1, [r7, #8]
 802ab00:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ab02:	68ba      	ldr	r2, [r7, #8]
 802ab04:	68fb      	ldr	r3, [r7, #12]
 802ab06:	1ad3      	subs	r3, r2, r3
 802ab08:	109b      	asrs	r3, r3, #2
 802ab0a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ab0c:	697b      	ldr	r3, [r7, #20]
 802ab0e:	2b00      	cmp	r3, #0
 802ab10:	d006      	beq.n	802ab20 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8ResponceEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802ab12:	697b      	ldr	r3, [r7, #20]
 802ab14:	009b      	lsls	r3, r3, #2
 802ab16:	461a      	mov	r2, r3
 802ab18:	68f9      	ldr	r1, [r7, #12]
 802ab1a:	6878      	ldr	r0, [r7, #4]
 802ab1c:	f014 fcd2 	bl	803f4c4 <memmove>
	  return __result + _Num;
 802ab20:	697b      	ldr	r3, [r7, #20]
 802ab22:	009b      	lsls	r3, r3, #2
 802ab24:	687a      	ldr	r2, [r7, #4]
 802ab26:	4413      	add	r3, r2
	}
 802ab28:	4618      	mov	r0, r3
 802ab2a:	3718      	adds	r7, #24
 802ab2c:	46bd      	mov	sp, r7
 802ab2e:	bd80      	pop	{r7, pc}

0802ab30 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ab30:	b580      	push	{r7, lr}
 802ab32:	b086      	sub	sp, #24
 802ab34:	af00      	add	r7, sp, #0
 802ab36:	60f8      	str	r0, [r7, #12]
 802ab38:	60b9      	str	r1, [r7, #8]
 802ab3a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ab3c:	68ba      	ldr	r2, [r7, #8]
 802ab3e:	68fb      	ldr	r3, [r7, #12]
 802ab40:	1ad3      	subs	r3, r2, r3
 802ab42:	109b      	asrs	r3, r3, #2
 802ab44:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ab46:	697b      	ldr	r3, [r7, #20]
 802ab48:	2b00      	cmp	r3, #0
 802ab4a:	d00a      	beq.n	802ab62 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8ResponceEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802ab4c:	697b      	ldr	r3, [r7, #20]
 802ab4e:	009b      	lsls	r3, r3, #2
 802ab50:	425b      	negs	r3, r3
 802ab52:	687a      	ldr	r2, [r7, #4]
 802ab54:	18d0      	adds	r0, r2, r3
 802ab56:	697b      	ldr	r3, [r7, #20]
 802ab58:	009b      	lsls	r3, r3, #2
 802ab5a:	461a      	mov	r2, r3
 802ab5c:	68f9      	ldr	r1, [r7, #12]
 802ab5e:	f014 fcb1 	bl	803f4c4 <memmove>
	  return __result - _Num;
 802ab62:	697b      	ldr	r3, [r7, #20]
 802ab64:	009b      	lsls	r3, r3, #2
 802ab66:	425b      	negs	r3, r3
 802ab68:	687a      	ldr	r2, [r7, #4]
 802ab6a:	4413      	add	r3, r2
	}
 802ab6c:	4618      	mov	r0, r3
 802ab6e:	3718      	adds	r7, #24
 802ab70:	46bd      	mov	sp, r7
 802ab72:	bd80      	pop	{r7, pc}

0802ab74 <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802ab74:	b580      	push	{r7, lr}
 802ab76:	b084      	sub	sp, #16
 802ab78:	af00      	add	r7, sp, #0
 802ab7a:	60f8      	str	r0, [r7, #12]
 802ab7c:	60b9      	str	r1, [r7, #8]
 802ab7e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802ab80:	687a      	ldr	r2, [r7, #4]
 802ab82:	68b9      	ldr	r1, [r7, #8]
 802ab84:	68f8      	ldr	r0, [r7, #12]
 802ab86:	f000 f87a 	bl	802ac7e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 802ab8a:	4603      	mov	r3, r0
    }
 802ab8c:	4618      	mov	r0, r3
 802ab8e:	3710      	adds	r7, #16
 802ab90:	46bd      	mov	sp, r7
 802ab92:	bd80      	pop	{r7, pc}

0802ab94 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 802ab94:	b580      	push	{r7, lr}
 802ab96:	b086      	sub	sp, #24
 802ab98:	af00      	add	r7, sp, #0
 802ab9a:	6078      	str	r0, [r7, #4]
 802ab9c:	6039      	str	r1, [r7, #0]
    { return __miter_base(__it.base()); }
 802ab9e:	f107 0308 	add.w	r3, r7, #8
 802aba2:	6839      	ldr	r1, [r7, #0]
 802aba4:	4618      	mov	r0, r3
 802aba6:	f000 f884 	bl	802acb2 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 802abaa:	687b      	ldr	r3, [r7, #4]
 802abac:	f107 0208 	add.w	r2, r7, #8
 802abb0:	4611      	mov	r1, r2
 802abb2:	4618      	mov	r0, r3
 802abb4:	f7fe ff22 	bl	80299fc <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802abb8:	6878      	ldr	r0, [r7, #4]
 802abba:	3718      	adds	r7, #24
 802abbc:	46bd      	mov	sp, r7
 802abbe:	bd80      	pop	{r7, pc}

0802abc0 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802abc0:	b580      	push	{r7, lr}
 802abc2:	b084      	sub	sp, #16
 802abc4:	af00      	add	r7, sp, #0
 802abc6:	60f8      	str	r0, [r7, #12]
 802abc8:	60b9      	str	r1, [r7, #8]
 802abca:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802abcc:	687a      	ldr	r2, [r7, #4]
 802abce:	68b9      	ldr	r1, [r7, #8]
 802abd0:	68f8      	ldr	r0, [r7, #12]
 802abd2:	f000 f87c 	bl	802acce <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 802abd6:	4603      	mov	r3, r0
 802abd8:	4618      	mov	r0, r3
 802abda:	3710      	adds	r7, #16
 802abdc:	46bd      	mov	sp, r7
 802abde:	bd80      	pop	{r7, pc}

0802abe0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 802abe0:	b580      	push	{r7, lr}
 802abe2:	b084      	sub	sp, #16
 802abe4:	af00      	add	r7, sp, #0
 802abe6:	60f8      	str	r0, [r7, #12]
 802abe8:	60b9      	str	r1, [r7, #8]
 802abea:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 802abec:	687a      	ldr	r2, [r7, #4]
 802abee:	68b9      	ldr	r1, [r7, #8]
 802abf0:	68f8      	ldr	r0, [r7, #12]
 802abf2:	f000 f87c 	bl	802acee <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 802abf6:	4603      	mov	r3, r0
 802abf8:	4618      	mov	r0, r3
 802abfa:	3710      	adds	r7, #16
 802abfc:	46bd      	mov	sp, r7
 802abfe:	bd80      	pop	{r7, pc}

0802ac00 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ac00:	b580      	push	{r7, lr}
 802ac02:	b086      	sub	sp, #24
 802ac04:	af00      	add	r7, sp, #0
 802ac06:	60f8      	str	r0, [r7, #12]
 802ac08:	60b9      	str	r1, [r7, #8]
 802ac0a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ac0c:	68ba      	ldr	r2, [r7, #8]
 802ac0e:	68fb      	ldr	r3, [r7, #12]
 802ac10:	1ad3      	subs	r3, r2, r3
 802ac12:	109b      	asrs	r3, r3, #2
 802ac14:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ac16:	697b      	ldr	r3, [r7, #20]
 802ac18:	2b00      	cmp	r3, #0
 802ac1a:	d006      	beq.n	802ac2a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802ac1c:	697b      	ldr	r3, [r7, #20]
 802ac1e:	009b      	lsls	r3, r3, #2
 802ac20:	461a      	mov	r2, r3
 802ac22:	68f9      	ldr	r1, [r7, #12]
 802ac24:	6878      	ldr	r0, [r7, #4]
 802ac26:	f014 fc4d 	bl	803f4c4 <memmove>
	  return __result + _Num;
 802ac2a:	697b      	ldr	r3, [r7, #20]
 802ac2c:	009b      	lsls	r3, r3, #2
 802ac2e:	687a      	ldr	r2, [r7, #4]
 802ac30:	4413      	add	r3, r2
	}
 802ac32:	4618      	mov	r0, r3
 802ac34:	3718      	adds	r7, #24
 802ac36:	46bd      	mov	sp, r7
 802ac38:	bd80      	pop	{r7, pc}

0802ac3a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ac3a:	b580      	push	{r7, lr}
 802ac3c:	b086      	sub	sp, #24
 802ac3e:	af00      	add	r7, sp, #0
 802ac40:	60f8      	str	r0, [r7, #12]
 802ac42:	60b9      	str	r1, [r7, #8]
 802ac44:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ac46:	68ba      	ldr	r2, [r7, #8]
 802ac48:	68fb      	ldr	r3, [r7, #12]
 802ac4a:	1ad3      	subs	r3, r2, r3
 802ac4c:	109b      	asrs	r3, r3, #2
 802ac4e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ac50:	697b      	ldr	r3, [r7, #20]
 802ac52:	2b00      	cmp	r3, #0
 802ac54:	d00a      	beq.n	802ac6c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802ac56:	697b      	ldr	r3, [r7, #20]
 802ac58:	009b      	lsls	r3, r3, #2
 802ac5a:	425b      	negs	r3, r3
 802ac5c:	687a      	ldr	r2, [r7, #4]
 802ac5e:	18d0      	adds	r0, r2, r3
 802ac60:	697b      	ldr	r3, [r7, #20]
 802ac62:	009b      	lsls	r3, r3, #2
 802ac64:	461a      	mov	r2, r3
 802ac66:	68f9      	ldr	r1, [r7, #12]
 802ac68:	f014 fc2c 	bl	803f4c4 <memmove>
	  return __result - _Num;
 802ac6c:	697b      	ldr	r3, [r7, #20]
 802ac6e:	009b      	lsls	r3, r3, #2
 802ac70:	425b      	negs	r3, r3
 802ac72:	687a      	ldr	r2, [r7, #4]
 802ac74:	4413      	add	r3, r2
	}
 802ac76:	4618      	mov	r0, r3
 802ac78:	3718      	adds	r7, #24
 802ac7a:	46bd      	mov	sp, r7
 802ac7c:	bd80      	pop	{r7, pc}

0802ac7e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ac7e:	b580      	push	{r7, lr}
 802ac80:	b086      	sub	sp, #24
 802ac82:	af00      	add	r7, sp, #0
 802ac84:	60f8      	str	r0, [r7, #12]
 802ac86:	60b9      	str	r1, [r7, #8]
 802ac88:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ac8a:	68ba      	ldr	r2, [r7, #8]
 802ac8c:	68fb      	ldr	r3, [r7, #12]
 802ac8e:	1ad3      	subs	r3, r2, r3
 802ac90:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ac92:	697b      	ldr	r3, [r7, #20]
 802ac94:	2b00      	cmp	r3, #0
 802ac96:	d005      	beq.n	802aca4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802ac98:	697b      	ldr	r3, [r7, #20]
 802ac9a:	461a      	mov	r2, r3
 802ac9c:	68f9      	ldr	r1, [r7, #12]
 802ac9e:	6878      	ldr	r0, [r7, #4]
 802aca0:	f014 fc10 	bl	803f4c4 <memmove>
	  return __result + _Num;
 802aca4:	697b      	ldr	r3, [r7, #20]
 802aca6:	687a      	ldr	r2, [r7, #4]
 802aca8:	4413      	add	r3, r2
	}
 802acaa:	4618      	mov	r0, r3
 802acac:	3718      	adds	r7, #24
 802acae:	46bd      	mov	sp, r7
 802acb0:	bd80      	pop	{r7, pc}

0802acb2 <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 802acb2:	b580      	push	{r7, lr}
 802acb4:	b082      	sub	sp, #8
 802acb6:	af00      	add	r7, sp, #0
 802acb8:	6078      	str	r0, [r7, #4]
 802acba:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 802acbc:	683b      	ldr	r3, [r7, #0]
 802acbe:	4619      	mov	r1, r3
 802acc0:	6878      	ldr	r0, [r7, #4]
 802acc2:	f7fa fb56 	bl	8025372 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802acc6:	6878      	ldr	r0, [r7, #4]
 802acc8:	3708      	adds	r7, #8
 802acca:	46bd      	mov	sp, r7
 802accc:	bd80      	pop	{r7, pc}

0802acce <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 802acce:	b580      	push	{r7, lr}
 802acd0:	b084      	sub	sp, #16
 802acd2:	af00      	add	r7, sp, #0
 802acd4:	60f8      	str	r0, [r7, #12]
 802acd6:	60b9      	str	r1, [r7, #8]
 802acd8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802acda:	687a      	ldr	r2, [r7, #4]
 802acdc:	68b9      	ldr	r1, [r7, #8]
 802acde:	68f8      	ldr	r0, [r7, #12]
 802ace0:	f000 f816 	bl	802ad10 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802ace4:	4603      	mov	r3, r0
    }
 802ace6:	4618      	mov	r0, r3
 802ace8:	3710      	adds	r7, #16
 802acea:	46bd      	mov	sp, r7
 802acec:	bd80      	pop	{r7, pc}

0802acee <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 802acee:	b580      	push	{r7, lr}
 802acf0:	b084      	sub	sp, #16
 802acf2:	af00      	add	r7, sp, #0
 802acf4:	60f8      	str	r0, [r7, #12]
 802acf6:	60b9      	str	r1, [r7, #8]
 802acf8:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802acfa:	687a      	ldr	r2, [r7, #4]
 802acfc:	68b9      	ldr	r1, [r7, #8]
 802acfe:	68f8      	ldr	r0, [r7, #12]
 802ad00:	f000 f830 	bl	802ad64 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802ad04:	4603      	mov	r3, r0
    }
 802ad06:	4618      	mov	r0, r3
 802ad08:	3710      	adds	r7, #16
 802ad0a:	46bd      	mov	sp, r7
 802ad0c:	bd80      	pop	{r7, pc}
	...

0802ad10 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ad10:	b580      	push	{r7, lr}
 802ad12:	b086      	sub	sp, #24
 802ad14:	af00      	add	r7, sp, #0
 802ad16:	60f8      	str	r0, [r7, #12]
 802ad18:	60b9      	str	r1, [r7, #8]
 802ad1a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ad1c:	68ba      	ldr	r2, [r7, #8]
 802ad1e:	68fb      	ldr	r3, [r7, #12]
 802ad20:	1ad3      	subs	r3, r2, r3
 802ad22:	109b      	asrs	r3, r3, #2
 802ad24:	4a0e      	ldr	r2, [pc, #56]	; (802ad60 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 802ad26:	fb02 f303 	mul.w	r3, r2, r3
 802ad2a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ad2c:	697b      	ldr	r3, [r7, #20]
 802ad2e:	2b00      	cmp	r3, #0
 802ad30:	d009      	beq.n	802ad46 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 802ad32:	697a      	ldr	r2, [r7, #20]
 802ad34:	4613      	mov	r3, r2
 802ad36:	009b      	lsls	r3, r3, #2
 802ad38:	4413      	add	r3, r2
 802ad3a:	009b      	lsls	r3, r3, #2
 802ad3c:	461a      	mov	r2, r3
 802ad3e:	68f9      	ldr	r1, [r7, #12]
 802ad40:	6878      	ldr	r0, [r7, #4]
 802ad42:	f014 fbbf 	bl	803f4c4 <memmove>
	  return __result + _Num;
 802ad46:	697a      	ldr	r2, [r7, #20]
 802ad48:	4613      	mov	r3, r2
 802ad4a:	009b      	lsls	r3, r3, #2
 802ad4c:	4413      	add	r3, r2
 802ad4e:	009b      	lsls	r3, r3, #2
 802ad50:	461a      	mov	r2, r3
 802ad52:	687b      	ldr	r3, [r7, #4]
 802ad54:	4413      	add	r3, r2
	}
 802ad56:	4618      	mov	r0, r3
 802ad58:	3718      	adds	r7, #24
 802ad5a:	46bd      	mov	sp, r7
 802ad5c:	bd80      	pop	{r7, pc}
 802ad5e:	bf00      	nop
 802ad60:	cccccccd 	.word	0xcccccccd

0802ad64 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802ad64:	b580      	push	{r7, lr}
 802ad66:	b086      	sub	sp, #24
 802ad68:	af00      	add	r7, sp, #0
 802ad6a:	60f8      	str	r0, [r7, #12]
 802ad6c:	60b9      	str	r1, [r7, #8]
 802ad6e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 802ad70:	68ba      	ldr	r2, [r7, #8]
 802ad72:	68fb      	ldr	r3, [r7, #12]
 802ad74:	1ad3      	subs	r3, r2, r3
 802ad76:	109b      	asrs	r3, r3, #2
 802ad78:	4a11      	ldr	r2, [pc, #68]	; (802adc0 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 802ad7a:	fb02 f303 	mul.w	r3, r2, r3
 802ad7e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802ad80:	697b      	ldr	r3, [r7, #20]
 802ad82:	2b00      	cmp	r3, #0
 802ad84:	d010      	beq.n	802ada8 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802ad86:	697a      	ldr	r2, [r7, #20]
 802ad88:	4613      	mov	r3, r2
 802ad8a:	009b      	lsls	r3, r3, #2
 802ad8c:	4413      	add	r3, r2
 802ad8e:	009b      	lsls	r3, r3, #2
 802ad90:	425b      	negs	r3, r3
 802ad92:	687a      	ldr	r2, [r7, #4]
 802ad94:	18d0      	adds	r0, r2, r3
 802ad96:	697a      	ldr	r2, [r7, #20]
 802ad98:	4613      	mov	r3, r2
 802ad9a:	009b      	lsls	r3, r3, #2
 802ad9c:	4413      	add	r3, r2
 802ad9e:	009b      	lsls	r3, r3, #2
 802ada0:	461a      	mov	r2, r3
 802ada2:	68f9      	ldr	r1, [r7, #12]
 802ada4:	f014 fb8e 	bl	803f4c4 <memmove>
	  return __result - _Num;
 802ada8:	697a      	ldr	r2, [r7, #20]
 802adaa:	4613      	mov	r3, r2
 802adac:	009b      	lsls	r3, r3, #2
 802adae:	4413      	add	r3, r2
 802adb0:	009b      	lsls	r3, r3, #2
 802adb2:	425b      	negs	r3, r3
 802adb4:	687a      	ldr	r2, [r7, #4]
 802adb6:	4413      	add	r3, r2
	}
 802adb8:	4618      	mov	r0, r3
 802adba:	3718      	adds	r7, #24
 802adbc:	46bd      	mov	sp, r7
 802adbe:	bd80      	pop	{r7, pc}
 802adc0:	cccccccd 	.word	0xcccccccd

0802adc4 <_Z41__static_initialization_and_destruction_0ii>:
 802adc4:	b580      	push	{r7, lr}
 802adc6:	b082      	sub	sp, #8
 802adc8:	af00      	add	r7, sp, #0
 802adca:	6078      	str	r0, [r7, #4]
 802adcc:	6039      	str	r1, [r7, #0]
 802adce:	687b      	ldr	r3, [r7, #4]
 802add0:	2b01      	cmp	r3, #1
 802add2:	d107      	bne.n	802ade4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 802add4:	683b      	ldr	r3, [r7, #0]
 802add6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802adda:	4293      	cmp	r3, r2
 802addc:	d102      	bne.n	802ade4 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 802adde:	4809      	ldr	r0, [pc, #36]	; (802ae04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802ade0:	f7f7 fffe 	bl	8022de0 <_ZN18MotherboardContextC1Ev>
 802ade4:	687b      	ldr	r3, [r7, #4]
 802ade6:	2b00      	cmp	r3, #0
 802ade8:	d107      	bne.n	802adfa <_Z41__static_initialization_and_destruction_0ii+0x36>
 802adea:	683b      	ldr	r3, [r7, #0]
 802adec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802adf0:	4293      	cmp	r3, r2
 802adf2:	d102      	bne.n	802adfa <_Z41__static_initialization_and_destruction_0ii+0x36>
 802adf4:	4803      	ldr	r0, [pc, #12]	; (802ae04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802adf6:	f7f8 f830 	bl	8022e5a <_ZN18MotherboardContextD1Ev>
}
 802adfa:	bf00      	nop
 802adfc:	3708      	adds	r7, #8
 802adfe:	46bd      	mov	sp, r7
 802ae00:	bd80      	pop	{r7, pc}
 802ae02:	bf00      	nop
 802ae04:	240001d0 	.word	0x240001d0

0802ae08 <_GLOBAL__sub_I_MotherboardInit>:
 802ae08:	b580      	push	{r7, lr}
 802ae0a:	af00      	add	r7, sp, #0
 802ae0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802ae10:	2001      	movs	r0, #1
 802ae12:	f7ff ffd7 	bl	802adc4 <_Z41__static_initialization_and_destruction_0ii>
 802ae16:	bd80      	pop	{r7, pc}

0802ae18 <_GLOBAL__sub_D_MotherboardInit>:
 802ae18:	b580      	push	{r7, lr}
 802ae1a:	af00      	add	r7, sp, #0
 802ae1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802ae20:	2000      	movs	r0, #0
 802ae22:	f7ff ffcf 	bl	802adc4 <_Z41__static_initialization_and_destruction_0ii>
 802ae26:	bd80      	pop	{r7, pc}

0802ae28 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 802ae28:	b580      	push	{r7, lr}
 802ae2a:	b086      	sub	sp, #24
 802ae2c:	af00      	add	r7, sp, #0
 802ae2e:	60b9      	str	r1, [r7, #8]
 802ae30:	607b      	str	r3, [r7, #4]
 802ae32:	4603      	mov	r3, r0
 802ae34:	73fb      	strb	r3, [r7, #15]
 802ae36:	4613      	mov	r3, r2
 802ae38:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 802ae3a:	2300      	movs	r3, #0
 802ae3c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802ae3e:	687b      	ldr	r3, [r7, #4]
 802ae40:	2b00      	cmp	r3, #0
 802ae42:	d008      	beq.n	802ae56 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 802ae44:	89ba      	ldrh	r2, [r7, #12]
 802ae46:	687b      	ldr	r3, [r7, #4]
 802ae48:	7bf8      	ldrb	r0, [r7, #15]
 802ae4a:	68b9      	ldr	r1, [r7, #8]
 802ae4c:	f001 f925 	bl	802c09a <bhy2_hif_get_regs>
 802ae50:	4603      	mov	r3, r0
 802ae52:	75fb      	strb	r3, [r7, #23]
 802ae54:	e001      	b.n	802ae5a <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802ae56:	23ff      	movs	r3, #255	; 0xff
 802ae58:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802ae5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802ae5e:	4618      	mov	r0, r3
 802ae60:	3718      	adds	r7, #24
 802ae62:	46bd      	mov	sp, r7
 802ae64:	bd80      	pop	{r7, pc}

0802ae66 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 802ae66:	b590      	push	{r4, r7, lr}
 802ae68:	b08f      	sub	sp, #60	; 0x3c
 802ae6a:	af02      	add	r7, sp, #8
 802ae6c:	60f8      	str	r0, [r7, #12]
 802ae6e:	60b9      	str	r1, [r7, #8]
 802ae70:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 802ae72:	2300      	movs	r3, #0
 802ae74:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 802ae76:	687b      	ldr	r3, [r7, #4]
 802ae78:	2b00      	cmp	r3, #0
 802ae7a:	d002      	beq.n	802ae82 <bhy2_get_and_process_fifo+0x1c>
 802ae7c:	68fb      	ldr	r3, [r7, #12]
 802ae7e:	2b00      	cmp	r3, #0
 802ae80:	d102      	bne.n	802ae88 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 802ae82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802ae86:	e11b      	b.n	802b0c0 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 802ae88:	68bb      	ldr	r3, [r7, #8]
 802ae8a:	2b00      	cmp	r3, #0
 802ae8c:	d102      	bne.n	802ae94 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 802ae8e:	f06f 0305 	mvn.w	r3, #5
 802ae92:	e115      	b.n	802b0c0 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 802ae94:	68ba      	ldr	r2, [r7, #8]
 802ae96:	2100      	movs	r1, #0
 802ae98:	68f8      	ldr	r0, [r7, #12]
 802ae9a:	f014 fb2d 	bl	803f4f8 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 802ae9e:	f107 0314 	add.w	r3, r7, #20
 802aea2:	2214      	movs	r2, #20
 802aea4:	2100      	movs	r1, #0
 802aea6:	4618      	mov	r0, r3
 802aea8:	f014 fb26 	bl	803f4f8 <memset>

    fifos.buffer = work_buffer;
 802aeac:	68fb      	ldr	r3, [r7, #12]
 802aeae:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 802aeb0:	68bb      	ldr	r3, [r7, #8]
 802aeb2:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 802aeb4:	687a      	ldr	r2, [r7, #4]
 802aeb6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 802aeba:	4611      	mov	r1, r2
 802aebc:	4618      	mov	r0, r3
 802aebe:	f001 fa5f 	bl	802c380 <bhy2_hif_get_interrupt_status>
 802aec2:	4603      	mov	r3, r0
 802aec4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 802aec8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802aecc:	2b00      	cmp	r3, #0
 802aece:	d002      	beq.n	802aed6 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 802aed0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802aed4:	e0f4      	b.n	802b0c0 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 802aed6:	2300      	movs	r3, #0
 802aed8:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802aeda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802aede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802aee2:	e042      	b.n	802af6a <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802aee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aee8:	f003 0306 	and.w	r3, r3, #6
 802aeec:	2b02      	cmp	r3, #2
 802aeee:	d00e      	beq.n	802af0e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 802aef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802aef4:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802aef8:	2b04      	cmp	r3, #4
 802aefa:	d008      	beq.n	802af0e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 802aefc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802af00:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 802af04:	2b06      	cmp	r3, #6
 802af06:	d002      	beq.n	802af0e <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 802af08:	69fb      	ldr	r3, [r7, #28]
 802af0a:	2b00      	cmp	r3, #0
 802af0c:	d020      	beq.n	802af50 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 802af0e:	2300      	movs	r3, #0
 802af10:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 802af12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802af14:	69bb      	ldr	r3, [r7, #24]
 802af16:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 802af18:	6a3a      	ldr	r2, [r7, #32]
 802af1a:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 802af1c:	1ad1      	subs	r1, r2, r3
 802af1e:	687b      	ldr	r3, [r7, #4]
 802af20:	f107 0214 	add.w	r2, r7, #20
 802af24:	f102 0408 	add.w	r4, r2, #8
 802af28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802af2c:	9300      	str	r3, [sp, #0]
 802af2e:	4623      	mov	r3, r4
 802af30:	f001 fad7 	bl	802c4e2 <bhy2_hif_get_wakeup_fifo>
 802af34:	4603      	mov	r3, r0
 802af36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 802af3a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802af3e:	2b00      	cmp	r3, #0
 802af40:	d002      	beq.n	802af48 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 802af42:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802af46:	e0bb      	b.n	802b0c0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802af48:	69ba      	ldr	r2, [r7, #24]
 802af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802af4c:	4413      	add	r3, r2
 802af4e:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 802af50:	f107 0314 	add.w	r3, r7, #20
 802af54:	687a      	ldr	r2, [r7, #4]
 802af56:	4619      	mov	r1, r3
 802af58:	2000      	movs	r0, #0
 802af5a:	f000 fbad 	bl	802b6b8 <parse_fifo>
 802af5e:	4603      	mov	r3, r0
 802af60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802af64:	2300      	movs	r3, #0
 802af66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802af6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802af6e:	2b00      	cmp	r3, #0
 802af70:	d102      	bne.n	802af78 <bhy2_get_and_process_fifo+0x112>
 802af72:	69fb      	ldr	r3, [r7, #28]
 802af74:	2b00      	cmp	r3, #0
 802af76:	d003      	beq.n	802af80 <bhy2_get_and_process_fifo+0x11a>
 802af78:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802af7c:	2b00      	cmp	r3, #0
 802af7e:	d0b1      	beq.n	802aee4 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 802af80:	2300      	movs	r3, #0
 802af82:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802af84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802af88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802af8c:	e042      	b.n	802b014 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802af8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802af92:	f003 0318 	and.w	r3, r3, #24
 802af96:	2b08      	cmp	r3, #8
 802af98:	d00e      	beq.n	802afb8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802af9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802af9e:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802afa2:	2b10      	cmp	r3, #16
 802afa4:	d008      	beq.n	802afb8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802afa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802afaa:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 802afae:	2b18      	cmp	r3, #24
 802afb0:	d002      	beq.n	802afb8 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802afb2:	69fb      	ldr	r3, [r7, #28]
 802afb4:	2b00      	cmp	r3, #0
 802afb6:	d020      	beq.n	802affa <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 802afb8:	2300      	movs	r3, #0
 802afba:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802afbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802afbe:	69bb      	ldr	r3, [r7, #24]
 802afc0:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802afc2:	6a3a      	ldr	r2, [r7, #32]
 802afc4:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802afc6:	1ad1      	subs	r1, r2, r3
 802afc8:	687b      	ldr	r3, [r7, #4]
 802afca:	f107 0214 	add.w	r2, r7, #20
 802afce:	f102 0408 	add.w	r4, r2, #8
 802afd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802afd6:	9300      	str	r3, [sp, #0]
 802afd8:	4623      	mov	r3, r4
 802afda:	f001 fa98 	bl	802c50e <bhy2_hif_get_nonwakeup_fifo>
 802afde:	4603      	mov	r3, r0
 802afe0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802afe4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802afe8:	2b00      	cmp	r3, #0
 802afea:	d002      	beq.n	802aff2 <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 802afec:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802aff0:	e066      	b.n	802b0c0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802aff2:	69ba      	ldr	r2, [r7, #24]
 802aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aff6:	4413      	add	r3, r2
 802aff8:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 802affa:	f107 0314 	add.w	r3, r7, #20
 802affe:	687a      	ldr	r2, [r7, #4]
 802b000:	4619      	mov	r1, r3
 802b002:	2001      	movs	r0, #1
 802b004:	f000 fb58 	bl	802b6b8 <parse_fifo>
 802b008:	4603      	mov	r3, r0
 802b00a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802b00e:	2300      	movs	r3, #0
 802b010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802b014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b018:	2b00      	cmp	r3, #0
 802b01a:	d102      	bne.n	802b022 <bhy2_get_and_process_fifo+0x1bc>
 802b01c:	69fb      	ldr	r3, [r7, #28]
 802b01e:	2b00      	cmp	r3, #0
 802b020:	d003      	beq.n	802b02a <bhy2_get_and_process_fifo+0x1c4>
 802b022:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802b026:	2b00      	cmp	r3, #0
 802b028:	d0b1      	beq.n	802af8e <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 802b02a:	2300      	movs	r3, #0
 802b02c:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802b02e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 802b032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802b036:	e036      	b.n	802b0a6 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 802b038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b040:	2b00      	cmp	r3, #0
 802b042:	d102      	bne.n	802b04a <bhy2_get_and_process_fifo+0x1e4>
 802b044:	69fb      	ldr	r3, [r7, #28]
 802b046:	2b00      	cmp	r3, #0
 802b048:	d020      	beq.n	802b08c <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 802b04a:	2300      	movs	r3, #0
 802b04c:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 802b04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b050:	69bb      	ldr	r3, [r7, #24]
 802b052:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802b054:	6a3a      	ldr	r2, [r7, #32]
 802b056:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 802b058:	1ad1      	subs	r1, r2, r3
 802b05a:	687b      	ldr	r3, [r7, #4]
 802b05c:	f107 0214 	add.w	r2, r7, #20
 802b060:	f102 0408 	add.w	r4, r2, #8
 802b064:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802b068:	9300      	str	r3, [sp, #0]
 802b06a:	4623      	mov	r3, r4
 802b06c:	f001 fab0 	bl	802c5d0 <bhy2_hif_get_status_fifo_async>
 802b070:	4603      	mov	r3, r0
 802b072:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802b076:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802b07a:	2b00      	cmp	r3, #0
 802b07c:	d002      	beq.n	802b084 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 802b07e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802b082:	e01d      	b.n	802b0c0 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802b084:	69ba      	ldr	r2, [r7, #24]
 802b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b088:	4413      	add	r3, r2
 802b08a:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 802b08c:	f107 0314 	add.w	r3, r7, #20
 802b090:	687a      	ldr	r2, [r7, #4]
 802b092:	4619      	mov	r1, r3
 802b094:	2002      	movs	r0, #2
 802b096:	f000 fb0f 	bl	802b6b8 <parse_fifo>
 802b09a:	4603      	mov	r3, r0
 802b09c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802b0a0:	2300      	movs	r3, #0
 802b0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802b0a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b0aa:	2b00      	cmp	r3, #0
 802b0ac:	d102      	bne.n	802b0b4 <bhy2_get_and_process_fifo+0x24e>
 802b0ae:	69fb      	ldr	r3, [r7, #28]
 802b0b0:	2b00      	cmp	r3, #0
 802b0b2:	d003      	beq.n	802b0bc <bhy2_get_and_process_fifo+0x256>
 802b0b4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802b0b8:	2b00      	cmp	r3, #0
 802b0ba:	d0bd      	beq.n	802b038 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 802b0bc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 802b0c0:	4618      	mov	r0, r3
 802b0c2:	3734      	adds	r7, #52	; 0x34
 802b0c4:	46bd      	mov	sp, r7
 802b0c6:	bd90      	pop	{r4, r7, pc}

0802b0c8 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 802b0c8:	b580      	push	{r7, lr}
 802b0ca:	b086      	sub	sp, #24
 802b0cc:	af00      	add	r7, sp, #0
 802b0ce:	4603      	mov	r3, r0
 802b0d0:	ed87 0a02 	vstr	s0, [r7, #8]
 802b0d4:	6079      	str	r1, [r7, #4]
 802b0d6:	603a      	str	r2, [r7, #0]
 802b0d8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802b0da:	2300      	movs	r3, #0
 802b0dc:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802b0de:	683b      	ldr	r3, [r7, #0]
 802b0e0:	2b00      	cmp	r3, #0
 802b0e2:	d00a      	beq.n	802b0fa <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 802b0e4:	683a      	ldr	r2, [r7, #0]
 802b0e6:	7bfb      	ldrb	r3, [r7, #15]
 802b0e8:	6879      	ldr	r1, [r7, #4]
 802b0ea:	ed97 0a02 	vldr	s0, [r7, #8]
 802b0ee:	4618      	mov	r0, r3
 802b0f0:	f001 fa84 	bl	802c5fc <bhy2_hif_exec_sensor_conf_cmd>
 802b0f4:	4603      	mov	r3, r0
 802b0f6:	75fb      	strb	r3, [r7, #23]
 802b0f8:	e001      	b.n	802b0fe <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b0fa:	23ff      	movs	r3, #255	; 0xff
 802b0fc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802b0fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802b102:	4618      	mov	r0, r3
 802b104:	3718      	adds	r7, #24
 802b106:	46bd      	mov	sp, r7
 802b108:	bd80      	pop	{r7, pc}

0802b10a <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 802b10a:	b580      	push	{r7, lr}
 802b10c:	b084      	sub	sp, #16
 802b10e:	af00      	add	r7, sp, #0
 802b110:	6078      	str	r0, [r7, #4]
 802b112:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802b114:	2300      	movs	r3, #0
 802b116:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802b118:	683b      	ldr	r3, [r7, #0]
 802b11a:	2b00      	cmp	r3, #0
 802b11c:	d007      	beq.n	802b12e <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 802b11e:	683b      	ldr	r3, [r7, #0]
 802b120:	4619      	mov	r1, r3
 802b122:	6878      	ldr	r0, [r7, #4]
 802b124:	f001 f8e8 	bl	802c2f8 <bhy2_hif_get_product_id>
 802b128:	4603      	mov	r3, r0
 802b12a:	73fb      	strb	r3, [r7, #15]
 802b12c:	e001      	b.n	802b132 <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b12e:	23ff      	movs	r3, #255	; 0xff
 802b130:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b132:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b136:	4618      	mov	r0, r3
 802b138:	3710      	adds	r7, #16
 802b13a:	46bd      	mov	sp, r7
 802b13c:	bd80      	pop	{r7, pc}

0802b13e <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 802b13e:	b580      	push	{r7, lr}
 802b140:	b084      	sub	sp, #16
 802b142:	af00      	add	r7, sp, #0
 802b144:	6078      	str	r0, [r7, #4]
 802b146:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802b148:	2300      	movs	r3, #0
 802b14a:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802b14c:	683b      	ldr	r3, [r7, #0]
 802b14e:	2b00      	cmp	r3, #0
 802b150:	d007      	beq.n	802b162 <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 802b152:	683b      	ldr	r3, [r7, #0]
 802b154:	4619      	mov	r1, r3
 802b156:	6878      	ldr	r0, [r7, #4]
 802b158:	f001 f8de 	bl	802c318 <bhy2_hif_get_kernel_version>
 802b15c:	4603      	mov	r3, r0
 802b15e:	73fb      	strb	r3, [r7, #15]
 802b160:	e001      	b.n	802b166 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b162:	23ff      	movs	r3, #255	; 0xff
 802b164:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b16a:	4618      	mov	r0, r3
 802b16c:	3710      	adds	r7, #16
 802b16e:	46bd      	mov	sp, r7
 802b170:	bd80      	pop	{r7, pc}

0802b172 <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 802b172:	b580      	push	{r7, lr}
 802b174:	b084      	sub	sp, #16
 802b176:	af00      	add	r7, sp, #0
 802b178:	6078      	str	r0, [r7, #4]
 802b17a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802b17c:	2300      	movs	r3, #0
 802b17e:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802b180:	683b      	ldr	r3, [r7, #0]
 802b182:	2b00      	cmp	r3, #0
 802b184:	d007      	beq.n	802b196 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 802b186:	683b      	ldr	r3, [r7, #0]
 802b188:	4619      	mov	r1, r3
 802b18a:	6878      	ldr	r0, [r7, #4]
 802b18c:	f001 f8e8 	bl	802c360 <bhy2_hif_get_boot_status>
 802b190:	4603      	mov	r3, r0
 802b192:	73fb      	strb	r3, [r7, #15]
 802b194:	e001      	b.n	802b19a <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b196:	23ff      	movs	r3, #255	; 0xff
 802b198:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b19e:	4618      	mov	r0, r3
 802b1a0:	3710      	adds	r7, #16
 802b1a2:	46bd      	mov	sp, r7
 802b1a4:	bd80      	pop	{r7, pc}

0802b1a6 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 802b1a6:	b580      	push	{r7, lr}
 802b1a8:	b086      	sub	sp, #24
 802b1aa:	af02      	add	r7, sp, #8
 802b1ac:	6078      	str	r0, [r7, #4]
 802b1ae:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 802b1b0:	2300      	movs	r3, #0
 802b1b2:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 802b1b4:	2300      	movs	r3, #0
 802b1b6:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 802b1b8:	683b      	ldr	r3, [r7, #0]
 802b1ba:	2b00      	cmp	r3, #0
 802b1bc:	d00d      	beq.n	802b1da <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 802b1be:	683b      	ldr	r3, [r7, #0]
 802b1c0:	f107 0208 	add.w	r2, r7, #8
 802b1c4:	9300      	str	r3, [sp, #0]
 802b1c6:	4613      	mov	r3, r2
 802b1c8:	2220      	movs	r2, #32
 802b1ca:	6879      	ldr	r1, [r7, #4]
 802b1cc:	f240 101f 	movw	r0, #287	; 0x11f
 802b1d0:	f001 f80a 	bl	802c1e8 <bhy2_hif_get_parameter>
 802b1d4:	4603      	mov	r3, r0
 802b1d6:	73fb      	strb	r3, [r7, #15]
 802b1d8:	e001      	b.n	802b1de <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b1da:	23ff      	movs	r3, #255	; 0xff
 802b1dc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b1de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b1e2:	4618      	mov	r0, r3
 802b1e4:	3710      	adds	r7, #16
 802b1e6:	46bd      	mov	sp, r7
 802b1e8:	bd80      	pop	{r7, pc}

0802b1ea <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 802b1ea:	b580      	push	{r7, lr}
 802b1ec:	b086      	sub	sp, #24
 802b1ee:	af00      	add	r7, sp, #0
 802b1f0:	60f8      	str	r0, [r7, #12]
 802b1f2:	60b9      	str	r1, [r7, #8]
 802b1f4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802b1f6:	2300      	movs	r3, #0
 802b1f8:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 802b1fa:	687b      	ldr	r3, [r7, #4]
 802b1fc:	2b00      	cmp	r3, #0
 802b1fe:	d002      	beq.n	802b206 <bhy2_upload_firmware_to_ram+0x1c>
 802b200:	68fb      	ldr	r3, [r7, #12]
 802b202:	2b00      	cmp	r3, #0
 802b204:	d102      	bne.n	802b20c <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 802b206:	23ff      	movs	r3, #255	; 0xff
 802b208:	75fb      	strb	r3, [r7, #23]
 802b20a:	e007      	b.n	802b21c <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 802b20c:	687b      	ldr	r3, [r7, #4]
 802b20e:	461a      	mov	r2, r3
 802b210:	68b9      	ldr	r1, [r7, #8]
 802b212:	68f8      	ldr	r0, [r7, #12]
 802b214:	f001 f90d 	bl	802c432 <bhy2_hif_upload_firmware_to_ram>
 802b218:	4603      	mov	r3, r0
 802b21a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802b21c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802b220:	4618      	mov	r0, r3
 802b222:	3718      	adds	r7, #24
 802b224:	46bd      	mov	sp, r7
 802b226:	bd80      	pop	{r7, pc}

0802b228 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 802b228:	b580      	push	{r7, lr}
 802b22a:	b084      	sub	sp, #16
 802b22c:	af00      	add	r7, sp, #0
 802b22e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 802b230:	2300      	movs	r3, #0
 802b232:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802b234:	687b      	ldr	r3, [r7, #4]
 802b236:	2b00      	cmp	r3, #0
 802b238:	d102      	bne.n	802b240 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 802b23a:	23ff      	movs	r3, #255	; 0xff
 802b23c:	73fb      	strb	r3, [r7, #15]
 802b23e:	e005      	b.n	802b24c <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 802b240:	687b      	ldr	r3, [r7, #4]
 802b242:	4618      	mov	r0, r3
 802b244:	f001 f932 	bl	802c4ac <bhy2_hif_boot_program_ram>
 802b248:	4603      	mov	r3, r0
 802b24a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b24c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b250:	4618      	mov	r0, r3
 802b252:	3710      	adds	r7, #16
 802b254:	46bd      	mov	sp, r7
 802b256:	bd80      	pop	{r7, pc}

0802b258 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 802b258:	b580      	push	{r7, lr}
 802b25a:	b084      	sub	sp, #16
 802b25c:	af00      	add	r7, sp, #0
 802b25e:	4603      	mov	r3, r0
 802b260:	6039      	str	r1, [r7, #0]
 802b262:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 802b264:	2300      	movs	r3, #0
 802b266:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802b268:	683b      	ldr	r3, [r7, #0]
 802b26a:	2b00      	cmp	r3, #0
 802b26c:	d102      	bne.n	802b274 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 802b26e:	23ff      	movs	r3, #255	; 0xff
 802b270:	73fb      	strb	r3, [r7, #15]
 802b272:	e007      	b.n	802b284 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 802b274:	683b      	ldr	r3, [r7, #0]
 802b276:	1df9      	adds	r1, r7, #7
 802b278:	2201      	movs	r2, #1
 802b27a:	2007      	movs	r0, #7
 802b27c:	f000 ff45 	bl	802c10a <bhy2_hif_set_regs>
 802b280:	4603      	mov	r3, r0
 802b282:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b284:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b288:	4618      	mov	r0, r3
 802b28a:	3710      	adds	r7, #16
 802b28c:	46bd      	mov	sp, r7
 802b28e:	bd80      	pop	{r7, pc}

0802b290 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 802b290:	b580      	push	{r7, lr}
 802b292:	b084      	sub	sp, #16
 802b294:	af00      	add	r7, sp, #0
 802b296:	6078      	str	r0, [r7, #4]
 802b298:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802b29a:	2300      	movs	r3, #0
 802b29c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802b29e:	683b      	ldr	r3, [r7, #0]
 802b2a0:	2b00      	cmp	r3, #0
 802b2a2:	d102      	bne.n	802b2aa <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 802b2a4:	23ff      	movs	r3, #255	; 0xff
 802b2a6:	73fb      	strb	r3, [r7, #15]
 802b2a8:	e007      	b.n	802b2ba <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 802b2aa:	683b      	ldr	r3, [r7, #0]
 802b2ac:	2201      	movs	r2, #1
 802b2ae:	6879      	ldr	r1, [r7, #4]
 802b2b0:	2007      	movs	r0, #7
 802b2b2:	f000 fef2 	bl	802c09a <bhy2_hif_get_regs>
 802b2b6:	4603      	mov	r3, r0
 802b2b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b2be:	4618      	mov	r0, r3
 802b2c0:	3710      	adds	r7, #16
 802b2c2:	46bd      	mov	sp, r7
 802b2c4:	bd80      	pop	{r7, pc}

0802b2c6 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 802b2c6:	b580      	push	{r7, lr}
 802b2c8:	b084      	sub	sp, #16
 802b2ca:	af00      	add	r7, sp, #0
 802b2cc:	6078      	str	r0, [r7, #4]
 802b2ce:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802b2d0:	2300      	movs	r3, #0
 802b2d2:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802b2d4:	683b      	ldr	r3, [r7, #0]
 802b2d6:	2b00      	cmp	r3, #0
 802b2d8:	d102      	bne.n	802b2e0 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 802b2da:	23ff      	movs	r3, #255	; 0xff
 802b2dc:	73fb      	strb	r3, [r7, #15]
 802b2de:	e006      	b.n	802b2ee <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 802b2e0:	683b      	ldr	r3, [r7, #0]
 802b2e2:	4619      	mov	r1, r3
 802b2e4:	6878      	ldr	r0, [r7, #4]
 802b2e6:	f001 f84b 	bl	802c380 <bhy2_hif_get_interrupt_status>
 802b2ea:	4603      	mov	r3, r0
 802b2ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b2ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b2f2:	4618      	mov	r0, r3
 802b2f4:	3710      	adds	r7, #16
 802b2f6:	46bd      	mov	sp, r7
 802b2f8:	bd80      	pop	{r7, pc}

0802b2fa <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 802b2fa:	b580      	push	{r7, lr}
 802b2fc:	b084      	sub	sp, #16
 802b2fe:	af00      	add	r7, sp, #0
 802b300:	4603      	mov	r3, r0
 802b302:	6039      	str	r1, [r7, #0]
 802b304:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 802b306:	2300      	movs	r3, #0
 802b308:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802b30a:	683b      	ldr	r3, [r7, #0]
 802b30c:	2b00      	cmp	r3, #0
 802b30e:	d102      	bne.n	802b316 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 802b310:	23ff      	movs	r3, #255	; 0xff
 802b312:	73fb      	strb	r3, [r7, #15]
 802b314:	e007      	b.n	802b326 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 802b316:	683b      	ldr	r3, [r7, #0]
 802b318:	1df9      	adds	r1, r7, #7
 802b31a:	2201      	movs	r2, #1
 802b31c:	2006      	movs	r0, #6
 802b31e:	f000 fef4 	bl	802c10a <bhy2_hif_set_regs>
 802b322:	4603      	mov	r3, r0
 802b324:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b326:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b32a:	4618      	mov	r0, r3
 802b32c:	3710      	adds	r7, #16
 802b32e:	46bd      	mov	sp, r7
 802b330:	bd80      	pop	{r7, pc}

0802b332 <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 802b332:	b580      	push	{r7, lr}
 802b334:	b084      	sub	sp, #16
 802b336:	af00      	add	r7, sp, #0
 802b338:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 802b33a:	2300      	movs	r3, #0
 802b33c:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 802b33e:	687b      	ldr	r3, [r7, #4]
 802b340:	2b00      	cmp	r3, #0
 802b342:	d102      	bne.n	802b34a <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 802b344:	23ff      	movs	r3, #255	; 0xff
 802b346:	73fb      	strb	r3, [r7, #15]
 802b348:	e005      	b.n	802b356 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 802b34a:	687b      	ldr	r3, [r7, #4]
 802b34c:	4618      	mov	r0, r3
 802b34e:	f001 f827 	bl	802c3a0 <bhy2_hif_reset>
 802b352:	4603      	mov	r3, r0
 802b354:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b356:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b35a:	4618      	mov	r0, r3
 802b35c:	3710      	adds	r7, #16
 802b35e:	46bd      	mov	sp, r7
 802b360:	bd80      	pop	{r7, pc}

0802b362 <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 802b362:	b580      	push	{r7, lr}
 802b364:	b08a      	sub	sp, #40	; 0x28
 802b366:	af04      	add	r7, sp, #16
 802b368:	60b9      	str	r1, [r7, #8]
 802b36a:	607a      	str	r2, [r7, #4]
 802b36c:	603b      	str	r3, [r7, #0]
 802b36e:	4603      	mov	r3, r0
 802b370:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802b372:	2300      	movs	r3, #0
 802b374:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 802b376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b378:	2b00      	cmp	r3, #0
 802b37a:	d014      	beq.n	802b3a6 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 802b37c:	f640 1238 	movw	r2, #2360	; 0x938
 802b380:	2100      	movs	r1, #0
 802b382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b384:	f014 f8b8 	bl	803f4f8 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 802b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b38a:	7bf8      	ldrb	r0, [r7, #15]
 802b38c:	9302      	str	r3, [sp, #8]
 802b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b390:	9301      	str	r3, [sp, #4]
 802b392:	6a3b      	ldr	r3, [r7, #32]
 802b394:	9300      	str	r3, [sp, #0]
 802b396:	683b      	ldr	r3, [r7, #0]
 802b398:	687a      	ldr	r2, [r7, #4]
 802b39a:	68b9      	ldr	r1, [r7, #8]
 802b39c:	f000 fe3e 	bl	802c01c <bhy2_hif_init>
 802b3a0:	4603      	mov	r3, r0
 802b3a2:	75fb      	strb	r3, [r7, #23]
 802b3a4:	e001      	b.n	802b3aa <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b3a6:	23ff      	movs	r3, #255	; 0xff
 802b3a8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802b3aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802b3ae:	4618      	mov	r0, r3
 802b3b0:	3718      	adds	r7, #24
 802b3b2:	46bd      	mov	sp, r7
 802b3b4:	bd80      	pop	{r7, pc}

0802b3b6 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 802b3b6:	b480      	push	{r7}
 802b3b8:	b087      	sub	sp, #28
 802b3ba:	af00      	add	r7, sp, #0
 802b3bc:	60b9      	str	r1, [r7, #8]
 802b3be:	607a      	str	r2, [r7, #4]
 802b3c0:	603b      	str	r3, [r7, #0]
 802b3c2:	4603      	mov	r3, r0
 802b3c4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802b3c6:	2300      	movs	r3, #0
 802b3c8:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 802b3ca:	683b      	ldr	r3, [r7, #0]
 802b3cc:	2b00      	cmp	r3, #0
 802b3ce:	d002      	beq.n	802b3d6 <bhy2_register_fifo_parse_callback+0x20>
 802b3d0:	68bb      	ldr	r3, [r7, #8]
 802b3d2:	2b00      	cmp	r3, #0
 802b3d4:	d102      	bne.n	802b3dc <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 802b3d6:	23ff      	movs	r3, #255	; 0xff
 802b3d8:	75fb      	strb	r3, [r7, #23]
 802b3da:	e013      	b.n	802b404 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 802b3dc:	7bfa      	ldrb	r2, [r7, #15]
 802b3de:	6839      	ldr	r1, [r7, #0]
 802b3e0:	4613      	mov	r3, r2
 802b3e2:	00db      	lsls	r3, r3, #3
 802b3e4:	4413      	add	r3, r2
 802b3e6:	440b      	add	r3, r1
 802b3e8:	3318      	adds	r3, #24
 802b3ea:	68ba      	ldr	r2, [r7, #8]
 802b3ec:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 802b3f0:	7bfa      	ldrb	r2, [r7, #15]
 802b3f2:	6839      	ldr	r1, [r7, #0]
 802b3f4:	4613      	mov	r3, r2
 802b3f6:	00db      	lsls	r3, r3, #3
 802b3f8:	4413      	add	r3, r2
 802b3fa:	440b      	add	r3, r1
 802b3fc:	3318      	adds	r3, #24
 802b3fe:	687a      	ldr	r2, [r7, #4]
 802b400:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 802b404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802b408:	4618      	mov	r0, r3
 802b40a:	371c      	adds	r7, #28
 802b40c:	46bd      	mov	sp, r7
 802b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b412:	4770      	bx	lr

0802b414 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 802b414:	b580      	push	{r7, lr}
 802b416:	b092      	sub	sp, #72	; 0x48
 802b418:	af00      	add	r7, sp, #0
 802b41a:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 802b41c:	687b      	ldr	r3, [r7, #4]
 802b41e:	2b00      	cmp	r3, #0
 802b420:	d103      	bne.n	802b42a <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 802b422:	23ff      	movs	r3, #255	; 0xff
 802b424:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 802b428:	e079      	b.n	802b51e <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 802b42a:	f107 0308 	add.w	r3, r7, #8
 802b42e:	6879      	ldr	r1, [r7, #4]
 802b430:	4618      	mov	r0, r3
 802b432:	f7ff feb8 	bl	802b1a6 <bhy2_get_virt_sensor_list>
 802b436:	4603      	mov	r3, r0
 802b438:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 802b43c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802b440:	2b00      	cmp	r3, #0
 802b442:	d16c      	bne.n	802b51e <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 802b444:	687b      	ldr	r3, [r7, #4]
 802b446:	2201      	movs	r2, #1
 802b448:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802b44a:	2301      	movs	r3, #1
 802b44c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802b450:	e041      	b.n	802b4d6 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 802b452:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b456:	08db      	lsrs	r3, r3, #3
 802b458:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 802b45c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b460:	f003 0307 	and.w	r3, r3, #7
 802b464:	2201      	movs	r2, #1
 802b466:	fa02 f303 	lsl.w	r3, r2, r3
 802b46a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 802b46e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 802b472:	3348      	adds	r3, #72	; 0x48
 802b474:	443b      	add	r3, r7
 802b476:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 802b47a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 802b47e:	4013      	ands	r3, r2
 802b480:	b2db      	uxtb	r3, r3
 802b482:	2b00      	cmp	r3, #0
 802b484:	d022      	beq.n	802b4cc <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 802b486:	687a      	ldr	r2, [r7, #4]
 802b488:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802b48c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b490:	4618      	mov	r0, r3
 802b492:	f001 f8e6 	bl	802c662 <bhy2_hif_get_sensor_info>
 802b496:	4603      	mov	r3, r0
 802b498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 802b49c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802b4a0:	2b00      	cmp	r3, #0
 802b4a2:	d113      	bne.n	802b4cc <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 802b4a4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 802b4a8:	2b00      	cmp	r3, #0
 802b4aa:	d103      	bne.n	802b4b4 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 802b4ac:	23f8      	movs	r3, #248	; 0xf8
 802b4ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 802b4b2:	e018      	b.n	802b4e6 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 802b4b4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802b4b8:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 802b4bc:	6879      	ldr	r1, [r7, #4]
 802b4be:	4613      	mov	r3, r2
 802b4c0:	00db      	lsls	r3, r3, #3
 802b4c2:	4413      	add	r3, r2
 802b4c4:	440b      	add	r3, r1
 802b4c6:	331c      	adds	r3, #28
 802b4c8:	4602      	mov	r2, r0
 802b4ca:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 802b4cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b4d0:	3301      	adds	r3, #1
 802b4d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802b4d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b4da:	2bf4      	cmp	r3, #244	; 0xf4
 802b4dc:	d803      	bhi.n	802b4e6 <bhy2_update_virtual_sensor_list+0xd2>
 802b4de:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 802b4e2:	2b00      	cmp	r3, #0
 802b4e4:	d0b5      	beq.n	802b452 <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 802b4e6:	23ff      	movs	r3, #255	; 0xff
 802b4e8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802b4ec:	e013      	b.n	802b516 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802b4ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b4f2:	3bf5      	subs	r3, #245	; 0xf5
 802b4f4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 802b4f8:	490c      	ldr	r1, [pc, #48]	; (802b52c <bhy2_update_virtual_sensor_list+0x118>)
 802b4fa:	5cc8      	ldrb	r0, [r1, r3]
 802b4fc:	6879      	ldr	r1, [r7, #4]
 802b4fe:	4613      	mov	r3, r2
 802b500:	00db      	lsls	r3, r3, #3
 802b502:	4413      	add	r3, r2
 802b504:	440b      	add	r3, r1
 802b506:	331c      	adds	r3, #28
 802b508:	4602      	mov	r2, r0
 802b50a:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 802b50c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b510:	3b01      	subs	r3, #1
 802b512:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 802b516:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 802b51a:	2bf4      	cmp	r3, #244	; 0xf4
 802b51c:	d8e7      	bhi.n	802b4ee <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 802b51e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 802b522:	4618      	mov	r0, r3
 802b524:	3748      	adds	r7, #72	; 0x48
 802b526:	46bd      	mov	sp, r7
 802b528:	bd80      	pop	{r7, pc}
 802b52a:	bf00      	nop
 802b52c:	0805b810 	.word	0x0805b810

0802b530 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 802b530:	b580      	push	{r7, lr}
 802b532:	b084      	sub	sp, #16
 802b534:	af00      	add	r7, sp, #0
 802b536:	6078      	str	r0, [r7, #4]
 802b538:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802b53a:	2300      	movs	r3, #0
 802b53c:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 802b53e:	683b      	ldr	r3, [r7, #0]
 802b540:	2b00      	cmp	r3, #0
 802b542:	d002      	beq.n	802b54a <bhy2_get_error_value+0x1a>
 802b544:	687b      	ldr	r3, [r7, #4]
 802b546:	2b00      	cmp	r3, #0
 802b548:	d102      	bne.n	802b550 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 802b54a:	23ff      	movs	r3, #255	; 0xff
 802b54c:	73fb      	strb	r3, [r7, #15]
 802b54e:	e007      	b.n	802b560 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 802b550:	683b      	ldr	r3, [r7, #0]
 802b552:	2201      	movs	r2, #1
 802b554:	6879      	ldr	r1, [r7, #4]
 802b556:	202e      	movs	r0, #46	; 0x2e
 802b558:	f7ff fc66 	bl	802ae28 <bhy2_get_regs>
 802b55c:	4603      	mov	r3, r0
 802b55e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802b560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802b564:	4618      	mov	r0, r3
 802b566:	3710      	adds	r7, #16
 802b568:	46bd      	mov	sp, r7
 802b56a:	bd80      	pop	{r7, pc}

0802b56c <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 802b56c:	b480      	push	{r7}
 802b56e:	b087      	sub	sp, #28
 802b570:	af00      	add	r7, sp, #0
 802b572:	4603      	mov	r3, r0
 802b574:	60b9      	str	r1, [r7, #8]
 802b576:	607a      	str	r2, [r7, #4]
 802b578:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 802b57a:	2300      	movs	r3, #0
 802b57c:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 802b57e:	687b      	ldr	r3, [r7, #4]
 802b580:	2b00      	cmp	r3, #0
 802b582:	d04e      	beq.n	802b622 <get_callback_info+0xb6>
 802b584:	68bb      	ldr	r3, [r7, #8]
 802b586:	2b00      	cmp	r3, #0
 802b588:	d04b      	beq.n	802b622 <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 802b58a:	7bfa      	ldrb	r2, [r7, #15]
 802b58c:	68b8      	ldr	r0, [r7, #8]
 802b58e:	6879      	ldr	r1, [r7, #4]
 802b590:	4613      	mov	r3, r2
 802b592:	00db      	lsls	r3, r3, #3
 802b594:	4413      	add	r3, r2
 802b596:	440b      	add	r3, r1
 802b598:	3318      	adds	r3, #24
 802b59a:	4602      	mov	r2, r0
 802b59c:	3304      	adds	r3, #4
 802b59e:	6818      	ldr	r0, [r3, #0]
 802b5a0:	6859      	ldr	r1, [r3, #4]
 802b5a2:	6010      	str	r0, [r2, #0]
 802b5a4:	6051      	str	r1, [r2, #4]
 802b5a6:	7a1b      	ldrb	r3, [r3, #8]
 802b5a8:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 802b5aa:	7bfb      	ldrb	r3, [r7, #15]
 802b5ac:	2bf4      	cmp	r3, #244	; 0xf4
 802b5ae:	d91b      	bls.n	802b5e8 <get_callback_info+0x7c>
 802b5b0:	68bb      	ldr	r3, [r7, #8]
 802b5b2:	781b      	ldrb	r3, [r3, #0]
 802b5b4:	2b00      	cmp	r3, #0
 802b5b6:	d117      	bne.n	802b5e8 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 802b5b8:	68bb      	ldr	r3, [r7, #8]
 802b5ba:	2200      	movs	r2, #0
 802b5bc:	705a      	strb	r2, [r3, #1]
 802b5be:	2200      	movs	r2, #0
 802b5c0:	709a      	strb	r2, [r3, #2]
 802b5c2:	2200      	movs	r2, #0
 802b5c4:	70da      	strb	r2, [r3, #3]
 802b5c6:	2200      	movs	r2, #0
 802b5c8:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 802b5ca:	68bb      	ldr	r3, [r7, #8]
 802b5cc:	2200      	movs	r2, #0
 802b5ce:	715a      	strb	r2, [r3, #5]
 802b5d0:	2200      	movs	r2, #0
 802b5d2:	719a      	strb	r2, [r3, #6]
 802b5d4:	2200      	movs	r2, #0
 802b5d6:	71da      	strb	r2, [r3, #7]
 802b5d8:	2200      	movs	r2, #0
 802b5da:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 802b5dc:	7bfb      	ldrb	r3, [r7, #15]
 802b5de:	3bf5      	subs	r3, #245	; 0xf5
 802b5e0:	4a16      	ldr	r2, [pc, #88]	; (802b63c <get_callback_info+0xd0>)
 802b5e2:	5cd2      	ldrb	r2, [r2, r3]
 802b5e4:	68bb      	ldr	r3, [r7, #8]
 802b5e6:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 802b5e8:	7bfb      	ldrb	r3, [r7, #15]
 802b5ea:	2b00      	cmp	r3, #0
 802b5ec:	d11c      	bne.n	802b628 <get_callback_info+0xbc>
 802b5ee:	68bb      	ldr	r3, [r7, #8]
 802b5f0:	781b      	ldrb	r3, [r3, #0]
 802b5f2:	2b00      	cmp	r3, #0
 802b5f4:	d118      	bne.n	802b628 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 802b5f6:	68bb      	ldr	r3, [r7, #8]
 802b5f8:	2200      	movs	r2, #0
 802b5fa:	705a      	strb	r2, [r3, #1]
 802b5fc:	2200      	movs	r2, #0
 802b5fe:	709a      	strb	r2, [r3, #2]
 802b600:	2200      	movs	r2, #0
 802b602:	70da      	strb	r2, [r3, #3]
 802b604:	2200      	movs	r2, #0
 802b606:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 802b608:	68bb      	ldr	r3, [r7, #8]
 802b60a:	2200      	movs	r2, #0
 802b60c:	715a      	strb	r2, [r3, #5]
 802b60e:	2200      	movs	r2, #0
 802b610:	719a      	strb	r2, [r3, #6]
 802b612:	2200      	movs	r2, #0
 802b614:	71da      	strb	r2, [r3, #7]
 802b616:	2200      	movs	r2, #0
 802b618:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 802b61a:	68bb      	ldr	r3, [r7, #8]
 802b61c:	2201      	movs	r2, #1
 802b61e:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 802b620:	e002      	b.n	802b628 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802b622:	23ff      	movs	r3, #255	; 0xff
 802b624:	75fb      	strb	r3, [r7, #23]
 802b626:	e000      	b.n	802b62a <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 802b628:	bf00      	nop
    }

    return rslt;
 802b62a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802b62e:	4618      	mov	r0, r3
 802b630:	371c      	adds	r7, #28
 802b632:	46bd      	mov	sp, r7
 802b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b638:	4770      	bx	lr
 802b63a:	bf00      	nop
 802b63c:	0805b810 	.word	0x0805b810

0802b640 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 802b640:	b480      	push	{r7}
 802b642:	b085      	sub	sp, #20
 802b644:	af00      	add	r7, sp, #0
 802b646:	60f8      	str	r0, [r7, #12]
 802b648:	460b      	mov	r3, r1
 802b64a:	607a      	str	r2, [r7, #4]
 802b64c:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 802b64e:	68fb      	ldr	r3, [r7, #12]
 802b650:	681a      	ldr	r2, [r3, #0]
 802b652:	7afb      	ldrb	r3, [r7, #11]
 802b654:	441a      	add	r2, r3
 802b656:	68fb      	ldr	r3, [r7, #12]
 802b658:	685b      	ldr	r3, [r3, #4]
 802b65a:	429a      	cmp	r2, r3
 802b65c:	d803      	bhi.n	802b666 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 802b65e:	687b      	ldr	r3, [r7, #4]
 802b660:	2200      	movs	r2, #0
 802b662:	701a      	strb	r2, [r3, #0]
 802b664:	e002      	b.n	802b66c <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 802b666:	687b      	ldr	r3, [r7, #4]
 802b668:	2201      	movs	r2, #1
 802b66a:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 802b66c:	2300      	movs	r3, #0
}
 802b66e:	4618      	mov	r0, r3
 802b670:	3714      	adds	r7, #20
 802b672:	46bd      	mov	sp, r7
 802b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b678:	4770      	bx	lr

0802b67a <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 802b67a:	b480      	push	{r7}
 802b67c:	b087      	sub	sp, #28
 802b67e:	af00      	add	r7, sp, #0
 802b680:	4603      	mov	r3, r0
 802b682:	60b9      	str	r1, [r7, #8]
 802b684:	607a      	str	r2, [r7, #4]
 802b686:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802b688:	2300      	movs	r3, #0
 802b68a:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 802b68c:	7bfb      	ldrb	r3, [r7, #15]
 802b68e:	2b02      	cmp	r3, #2
 802b690:	d808      	bhi.n	802b6a4 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 802b692:	7bfb      	ldrb	r3, [r7, #15]
 802b694:	f503 7392 	add.w	r3, r3, #292	; 0x124
 802b698:	00db      	lsls	r3, r3, #3
 802b69a:	687a      	ldr	r2, [r7, #4]
 802b69c:	441a      	add	r2, r3
 802b69e:	68bb      	ldr	r3, [r7, #8]
 802b6a0:	601a      	str	r2, [r3, #0]
 802b6a2:	e001      	b.n	802b6a8 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 802b6a4:	23f9      	movs	r3, #249	; 0xf9
 802b6a6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802b6a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802b6ac:	4618      	mov	r0, r3
 802b6ae:	371c      	adds	r7, #28
 802b6b0:	46bd      	mov	sp, r7
 802b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6b6:	4770      	bx	lr

0802b6b8 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 802b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6bc:	b099      	sub	sp, #100	; 0x64
 802b6be:	af00      	add	r7, sp, #0
 802b6c0:	4603      	mov	r3, r0
 802b6c2:	62b9      	str	r1, [r7, #40]	; 0x28
 802b6c4:	627a      	str	r2, [r7, #36]	; 0x24
 802b6c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 802b6ca:	2300      	movs	r3, #0
 802b6cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 802b6d0:	2300      	movs	r3, #0
 802b6d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 802b6d6:	2300      	movs	r3, #0
 802b6d8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 802b6dc:	2300      	movs	r3, #0
 802b6de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802b6e2:	e16a      	b.n	802b9ba <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 802b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b6e6:	681b      	ldr	r3, [r3, #0]
 802b6e8:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 802b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b6ec:	691a      	ldr	r2, [r3, #16]
 802b6ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6f0:	4413      	add	r3, r2
 802b6f2:	781b      	ldrb	r3, [r3, #0]
 802b6f4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 802b6f8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 802b6fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b702:	4618      	mov	r0, r3
 802b704:	f7ff ffb9 	bl	802b67a <get_time_stamp>
 802b708:	4603      	mov	r3, r0
 802b70a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 802b70e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b712:	2b00      	cmp	r3, #0
 802b714:	d002      	beq.n	802b71c <parse_fifo+0x64>
        {
            return rslt;
 802b716:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b71a:	e191      	b.n	802ba40 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 802b71c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802b720:	2b00      	cmp	r3, #0
 802b722:	d025      	beq.n	802b770 <parse_fifo+0xb8>
 802b724:	2b00      	cmp	r3, #0
 802b726:	f2c0 80f6 	blt.w	802b916 <parse_fifo+0x25e>
 802b72a:	2bff      	cmp	r3, #255	; 0xff
 802b72c:	f300 80f3 	bgt.w	802b916 <parse_fifo+0x25e>
 802b730:	2bf5      	cmp	r3, #245	; 0xf5
 802b732:	f2c0 80f0 	blt.w	802b916 <parse_fifo+0x25e>
 802b736:	3bf5      	subs	r3, #245	; 0xf5
 802b738:	2b0a      	cmp	r3, #10
 802b73a:	f200 80ec 	bhi.w	802b916 <parse_fifo+0x25e>
 802b73e:	a201      	add	r2, pc, #4	; (adr r2, 802b744 <parse_fifo+0x8c>)
 802b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b744:	0802b77d 	.word	0x0802b77d
 802b748:	0802b7e5 	.word	0x0802b7e5
 802b74c:	0802b863 	.word	0x0802b863
 802b750:	0802b917 	.word	0x0802b917
 802b754:	0802b917 	.word	0x0802b917
 802b758:	0802b917 	.word	0x0802b917
 802b75c:	0802b77d 	.word	0x0802b77d
 802b760:	0802b7e5 	.word	0x0802b7e5
 802b764:	0802b863 	.word	0x0802b863
 802b768:	0802b917 	.word	0x0802b917
 802b76c:	0802b771 	.word	0x0802b771
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 802b770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b772:	681b      	ldr	r3, [r3, #0]
 802b774:	1c5a      	adds	r2, r3, #1
 802b776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b778:	601a      	str	r2, [r3, #0]
                break;
 802b77a:	e11e      	b.n	802b9ba <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 802b77c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802b780:	461a      	mov	r2, r3
 802b782:	2102      	movs	r1, #2
 802b784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b786:	f7ff ff5b 	bl	802b640 <get_buffer_status>
 802b78a:	4603      	mov	r3, r0
 802b78c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802b790:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b794:	2b00      	cmp	r3, #0
 802b796:	d002      	beq.n	802b79e <parse_fifo+0xe6>
                {
                    return rslt;
 802b798:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b79c:	e150      	b.n	802ba40 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802b79e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b7a2:	2b00      	cmp	r3, #0
 802b7a4:	d000      	beq.n	802b7a8 <parse_fifo+0xf0>
                {
                    break;
 802b7a6:	e108      	b.n	802b9ba <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 802b7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b7aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 802b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b7b0:	691a      	ldr	r2, [r3, #16]
 802b7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7b4:	3301      	adds	r3, #1
 802b7b6:	4413      	add	r3, r2
 802b7b8:	781b      	ldrb	r3, [r3, #0]
 802b7ba:	b2db      	uxtb	r3, r3
 802b7bc:	2200      	movs	r2, #0
 802b7be:	469a      	mov	sl, r3
 802b7c0:	4693      	mov	fp, r2
 802b7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b7c4:	eb10 020a 	adds.w	r2, r0, sl
 802b7c8:	61ba      	str	r2, [r7, #24]
 802b7ca:	eb41 020b 	adc.w	r2, r1, fp
 802b7ce:	61fa      	str	r2, [r7, #28]
 802b7d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802b7d4:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 802b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b7da:	681b      	ldr	r3, [r3, #0]
 802b7dc:	1c9a      	adds	r2, r3, #2
 802b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b7e0:	601a      	str	r2, [r3, #0]
                break;
 802b7e2:	e0ea      	b.n	802b9ba <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 802b7e4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802b7e8:	461a      	mov	r2, r3
 802b7ea:	2103      	movs	r1, #3
 802b7ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b7ee:	f7ff ff27 	bl	802b640 <get_buffer_status>
 802b7f2:	4603      	mov	r3, r0
 802b7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802b7f8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b7fc:	2b00      	cmp	r3, #0
 802b7fe:	d002      	beq.n	802b806 <parse_fifo+0x14e>
                {
                    return rslt;
 802b800:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b804:	e11c      	b.n	802ba40 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802b806:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b80a:	2b00      	cmp	r3, #0
 802b80c:	d000      	beq.n	802b810 <parse_fifo+0x158>
                {
                    break;
 802b80e:	e0d4      	b.n	802b9ba <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 802b810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b812:	e9d3 0100 	ldrd	r0, r1, [r3]
 802b816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b818:	691a      	ldr	r2, [r3, #16]
 802b81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b81c:	3301      	adds	r3, #1
 802b81e:	4413      	add	r3, r2
 802b820:	781b      	ldrb	r3, [r3, #0]
 802b822:	b21c      	sxth	r4, r3
 802b824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b826:	691a      	ldr	r2, [r3, #16]
 802b828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b82a:	3302      	adds	r3, #2
 802b82c:	4413      	add	r3, r2
 802b82e:	781b      	ldrb	r3, [r3, #0]
 802b830:	021b      	lsls	r3, r3, #8
 802b832:	b21b      	sxth	r3, r3
 802b834:	4323      	orrs	r3, r4
 802b836:	b21b      	sxth	r3, r3
 802b838:	b29b      	uxth	r3, r3
 802b83a:	b29b      	uxth	r3, r3
 802b83c:	2200      	movs	r2, #0
 802b83e:	461d      	mov	r5, r3
 802b840:	4616      	mov	r6, r2
 802b842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b844:	1942      	adds	r2, r0, r5
 802b846:	613a      	str	r2, [r7, #16]
 802b848:	eb41 0206 	adc.w	r2, r1, r6
 802b84c:	617a      	str	r2, [r7, #20]
 802b84e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802b852:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 802b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b858:	681b      	ldr	r3, [r3, #0]
 802b85a:	1cda      	adds	r2, r3, #3
 802b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b85e:	601a      	str	r2, [r3, #0]
                break;
 802b860:	e0ab      	b.n	802b9ba <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 802b862:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802b866:	461a      	mov	r2, r3
 802b868:	2106      	movs	r1, #6
 802b86a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b86c:	f7ff fee8 	bl	802b640 <get_buffer_status>
 802b870:	4603      	mov	r3, r0
 802b872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802b876:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b87a:	2b00      	cmp	r3, #0
 802b87c:	d002      	beq.n	802b884 <parse_fifo+0x1cc>
                {
                    return rslt;
 802b87e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b882:	e0dd      	b.n	802ba40 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802b884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b888:	2b00      	cmp	r3, #0
 802b88a:	d000      	beq.n	802b88e <parse_fifo+0x1d6>
                {
                    break;
 802b88c:	e095      	b.n	802b9ba <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 802b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b890:	691a      	ldr	r2, [r3, #16]
 802b892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b894:	3301      	adds	r3, #1
 802b896:	4413      	add	r3, r2
 802b898:	781b      	ldrb	r3, [r3, #0]
 802b89a:	4619      	mov	r1, r3
 802b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b89e:	691a      	ldr	r2, [r3, #16]
 802b8a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8a2:	3302      	adds	r3, #2
 802b8a4:	4413      	add	r3, r2
 802b8a6:	781b      	ldrb	r3, [r3, #0]
 802b8a8:	021b      	lsls	r3, r3, #8
 802b8aa:	4319      	orrs	r1, r3
 802b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b8ae:	691a      	ldr	r2, [r3, #16]
 802b8b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8b2:	3303      	adds	r3, #3
 802b8b4:	4413      	add	r3, r2
 802b8b6:	781b      	ldrb	r3, [r3, #0]
 802b8b8:	041b      	lsls	r3, r3, #16
 802b8ba:	4319      	orrs	r1, r3
 802b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b8be:	691a      	ldr	r2, [r3, #16]
 802b8c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8c2:	3304      	adds	r3, #4
 802b8c4:	4413      	add	r3, r2
 802b8c6:	781b      	ldrb	r3, [r3, #0]
 802b8c8:	061b      	lsls	r3, r3, #24
 802b8ca:	430b      	orrs	r3, r1
 802b8cc:	2200      	movs	r2, #0
 802b8ce:	4698      	mov	r8, r3
 802b8d0:	4691      	mov	r9, r2
 802b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b8d4:	691a      	ldr	r2, [r3, #16]
 802b8d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8d8:	3305      	adds	r3, #5
 802b8da:	4413      	add	r3, r2
 802b8dc:	781b      	ldrb	r3, [r3, #0]
 802b8de:	b2db      	uxtb	r3, r3
 802b8e0:	2200      	movs	r2, #0
 802b8e2:	60bb      	str	r3, [r7, #8]
 802b8e4:	60fa      	str	r2, [r7, #12]
 802b8e6:	f04f 0200 	mov.w	r2, #0
 802b8ea:	f04f 0300 	mov.w	r3, #0
 802b8ee:	68b9      	ldr	r1, [r7, #8]
 802b8f0:	000b      	movs	r3, r1
 802b8f2:	2200      	movs	r2, #0
 802b8f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802b8f6:	ea48 0002 	orr.w	r0, r8, r2
 802b8fa:	6038      	str	r0, [r7, #0]
 802b8fc:	ea49 0303 	orr.w	r3, r9, r3
 802b900:	607b      	str	r3, [r7, #4]
 802b902:	e9d7 3400 	ldrd	r3, r4, [r7]
 802b906:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 802b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b90c:	681b      	ldr	r3, [r3, #0]
 802b90e:	1d9a      	adds	r2, r3, #6
 802b910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b912:	601a      	str	r2, [r3, #0]
                break;
 802b914:	e051      	b.n	802b9ba <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 802b916:	f107 0138 	add.w	r1, r7, #56	; 0x38
 802b91a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802b91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b920:	4618      	mov	r0, r3
 802b922:	f7ff fe23 	bl	802b56c <get_callback_info>
 802b926:	4603      	mov	r3, r0
 802b928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 802b92c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b930:	2b00      	cmp	r3, #0
 802b932:	d002      	beq.n	802b93a <parse_fifo+0x282>
                {
                    return rslt;
 802b934:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b938:	e082      	b.n	802ba40 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 802b93a:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 802b93e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802b942:	461a      	mov	r2, r3
 802b944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802b946:	f7ff fe7b 	bl	802b640 <get_buffer_status>
 802b94a:	4603      	mov	r3, r0
 802b94c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802b950:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b954:	2b00      	cmp	r3, #0
 802b956:	d002      	beq.n	802b95e <parse_fifo+0x2a6>
                {
                    return rslt;
 802b958:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802b95c:	e070      	b.n	802ba40 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802b95e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b962:	2b00      	cmp	r3, #0
 802b964:	d000      	beq.n	802b968 <parse_fifo+0x2b0>
                {
                    break;
 802b966:	e028      	b.n	802b9ba <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 802b968:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 802b96c:	2b00      	cmp	r3, #0
 802b96e:	d01c      	beq.n	802b9aa <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 802b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b972:	691a      	ldr	r2, [r3, #16]
 802b974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b976:	3301      	adds	r3, #1
 802b978:	4413      	add	r3, r2
 802b97a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 802b97c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802b980:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 802b984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b986:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 802b988:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 802b98c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 802b990:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802b994:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 802b998:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 802b99c:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 802b9a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802b9a4:	4611      	mov	r1, r2
 802b9a6:	4618      	mov	r0, r3
 802b9a8:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 802b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9ac:	681a      	ldr	r2, [r3, #0]
 802b9ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802b9b2:	441a      	add	r2, r3
 802b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9b6:	601a      	str	r2, [r3, #0]
                break;
 802b9b8:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9bc:	681a      	ldr	r2, [r3, #0]
 802b9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9c0:	685b      	ldr	r3, [r3, #4]
 802b9c2:	429a      	cmp	r2, r3
 802b9c4:	d204      	bcs.n	802b9d0 <parse_fifo+0x318>
 802b9c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802b9ca:	2b00      	cmp	r3, #0
 802b9cc:	f43f ae8a 	beq.w	802b6e4 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 802b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9d2:	685b      	ldr	r3, [r3, #4]
 802b9d4:	2b00      	cmp	r3, #0
 802b9d6:	d031      	beq.n	802ba3c <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 802b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9da:	685a      	ldr	r2, [r3, #4]
 802b9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9de:	681b      	ldr	r3, [r3, #0]
 802b9e0:	429a      	cmp	r2, r3
 802b9e2:	d202      	bcs.n	802b9ea <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 802b9e4:	f06f 0301 	mvn.w	r3, #1
 802b9e8:	e02a      	b.n	802ba40 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 802b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9ec:	685a      	ldr	r2, [r3, #4]
 802b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9f0:	681b      	ldr	r3, [r3, #0]
 802b9f2:	1ad2      	subs	r2, r2, r3
 802b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9f6:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 802b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b9fa:	685b      	ldr	r3, [r3, #4]
 802b9fc:	2b00      	cmp	r3, #0
 802b9fe:	d01d      	beq.n	802ba3c <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 802ba00:	2300      	movs	r3, #0
 802ba02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 802ba06:	e013      	b.n	802ba30 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 802ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba0a:	691a      	ldr	r2, [r3, #16]
 802ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba0e:	6819      	ldr	r1, [r3, #0]
 802ba10:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802ba14:	440b      	add	r3, r1
 802ba16:	441a      	add	r2, r3
 802ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba1a:	6919      	ldr	r1, [r3, #16]
 802ba1c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802ba20:	440b      	add	r3, r1
 802ba22:	7812      	ldrb	r2, [r2, #0]
 802ba24:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 802ba26:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 802ba2a:	3301      	adds	r3, #1
 802ba2c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 802ba30:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 802ba34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba36:	685b      	ldr	r3, [r3, #4]
 802ba38:	429a      	cmp	r2, r3
 802ba3a:	d3e5      	bcc.n	802ba08 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 802ba3c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 802ba40:	4618      	mov	r0, r3
 802ba42:	3764      	adds	r7, #100	; 0x64
 802ba44:	46bd      	mov	sp, r7
 802ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ba4a:	bf00      	nop

0802ba4c <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 802ba4c:	b590      	push	{r4, r7, lr}
 802ba4e:	b0cf      	sub	sp, #316	; 0x13c
 802ba50:	af00      	add	r7, sp, #0
 802ba52:	4604      	mov	r4, r0
 802ba54:	f507 709c 	add.w	r0, r7, #312	; 0x138
 802ba58:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 802ba5c:	6001      	str	r1, [r0, #0]
 802ba5e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802ba62:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 802ba66:	600a      	str	r2, [r1, #0]
 802ba68:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802ba6c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802ba70:	6013      	str	r3, [r2, #0]
 802ba72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802ba76:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802ba7a:	4622      	mov	r2, r4
 802ba7c:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 802ba7e:	2300      	movs	r3, #0
 802ba80:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 802ba84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802ba88:	2b00      	cmp	r3, #0
 802ba8a:	f000 81af 	beq.w	802bdec <bhy2_hif_exec_cmd_generic+0x3a0>
 802ba8e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802ba92:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802ba96:	681b      	ldr	r3, [r3, #0]
 802ba98:	2b00      	cmp	r3, #0
 802ba9a:	d007      	beq.n	802baac <bhy2_hif_exec_cmd_generic+0x60>
 802ba9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802baa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802baa4:	681b      	ldr	r3, [r3, #0]
 802baa6:	2b00      	cmp	r3, #0
 802baa8:	f000 81a0 	beq.w	802bdec <bhy2_hif_exec_cmd_generic+0x3a0>
 802baac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 802bab0:	2b00      	cmp	r3, #0
 802bab2:	d007      	beq.n	802bac4 <bhy2_hif_exec_cmd_generic+0x78>
 802bab4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bab8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 802babc:	681b      	ldr	r3, [r3, #0]
 802babe:	2b00      	cmp	r3, #0
 802bac0:	f000 8194 	beq.w	802bdec <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 802bac4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802bac8:	699b      	ldr	r3, [r3, #24]
 802baca:	2b00      	cmp	r3, #0
 802bacc:	f000 8188 	beq.w	802bde0 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 802bad0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bad4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802bad8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 802badc:	681b      	ldr	r3, [r3, #0]
 802bade:	4413      	add	r3, r2
 802bae0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 802bae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802bae8:	2b00      	cmp	r3, #0
 802baea:	d007      	beq.n	802bafc <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 802baec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 802baf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802baf4:	4413      	add	r3, r2
 802baf6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 802bafa:	e003      	b.n	802bb04 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 802bafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bb00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 802bb04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802bb08:	f003 0303 	and.w	r3, r3, #3
 802bb0c:	2b00      	cmp	r3, #0
 802bb0e:	d006      	beq.n	802bb1e <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 802bb10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802bb14:	089b      	lsrs	r3, r3, #2
 802bb16:	3301      	adds	r3, #1
 802bb18:	009b      	lsls	r3, r3, #2
 802bb1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 802bb1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bb22:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802bb26:	881b      	ldrh	r3, [r3, #0]
 802bb28:	b2da      	uxtb	r2, r3
 802bb2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bb2e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802bb32:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 802bb34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bb38:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802bb3c:	881b      	ldrh	r3, [r3, #0]
 802bb3e:	0a1b      	lsrs	r3, r3, #8
 802bb40:	b29b      	uxth	r3, r3
 802bb42:	b2da      	uxtb	r2, r3
 802bb44:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bb48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802bb4c:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 802bb4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bb52:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 802bb56:	881b      	ldrh	r3, [r3, #0]
 802bb58:	2b02      	cmp	r3, #2
 802bb5a:	d113      	bne.n	802bb84 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 802bb5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802bb60:	089b      	lsrs	r3, r3, #2
 802bb62:	b2da      	uxtb	r2, r3
 802bb64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bb68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802bb6c:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 802bb6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802bb72:	089b      	lsrs	r3, r3, #2
 802bb74:	0a1b      	lsrs	r3, r3, #8
 802bb76:	b2da      	uxtb	r2, r3
 802bb78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bb7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802bb80:	70da      	strb	r2, [r3, #3]
 802bb82:	e010      	b.n	802bba6 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 802bb84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802bb88:	b2da      	uxtb	r2, r3
 802bb8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bb8e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802bb92:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 802bb94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802bb98:	0a1b      	lsrs	r3, r3, #8
 802bb9a:	b2da      	uxtb	r2, r3
 802bb9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bba0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802bba4:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 802bba6:	2304      	movs	r3, #4
 802bba8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 802bbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 802bbb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 802bbb4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802bbb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802bbbc:	4413      	add	r3, r2
 802bbbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 802bbc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 802bbc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 802bbca:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802bbce:	699b      	ldr	r3, [r3, #24]
 802bbd0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802bbd4:	429a      	cmp	r2, r3
 802bbd6:	f240 80f9 	bls.w	802bdcc <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 802bbda:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802bbde:	699b      	ldr	r3, [r3, #24]
 802bbe0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 802bbe4:	e0f2      	b.n	802bdcc <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 802bbe6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802bbea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802bbee:	4413      	add	r3, r2
 802bbf0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802bbf4:	429a      	cmp	r2, r3
 802bbf6:	d20b      	bcs.n	802bc10 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 802bbf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 802bbfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 802bc00:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802bc04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802bc08:	1ad3      	subs	r3, r2, r3
 802bc0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 802bc0e:	e020      	b.n	802bc52 <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 802bc10:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802bc14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802bc18:	4413      	add	r3, r2
 802bc1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 802bc1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802bc22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 802bc26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802bc2a:	f003 0303 	and.w	r3, r3, #3
 802bc2e:	2b00      	cmp	r3, #0
 802bc30:	d006      	beq.n	802bc40 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 802bc32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802bc36:	089b      	lsrs	r3, r3, #2
 802bc38:	3301      	adds	r3, #1
 802bc3a:	009b      	lsls	r3, r3, #2
 802bc3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 802bc40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 802bc44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802bc48:	d903      	bls.n	802bc52 <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 802bc4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802bc4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 802bc52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bc56:	2b00      	cmp	r3, #0
 802bc58:	d07e      	beq.n	802bd58 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 802bc5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bc5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802bc62:	681a      	ldr	r2, [r3, #0]
 802bc64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bc68:	4413      	add	r3, r2
 802bc6a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802bc6e:	429a      	cmp	r2, r3
 802bc70:	d315      	bcc.n	802bc9e <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 802bc72:	f107 0214 	add.w	r2, r7, #20
 802bc76:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802bc7a:	18d0      	adds	r0, r2, r3
 802bc7c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 802bc80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802bc84:	1ad3      	subs	r3, r2, r3
 802bc86:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802bc8a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802bc8e:	6812      	ldr	r2, [r2, #0]
 802bc90:	4413      	add	r3, r2
 802bc92:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802bc96:	4619      	mov	r1, r3
 802bc98:	f013 fc06 	bl	803f4a8 <memcpy>
 802bc9c:	e05c      	b.n	802bd58 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 802bc9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bca2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802bca6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802bcaa:	681b      	ldr	r3, [r3, #0]
 802bcac:	429a      	cmp	r2, r3
 802bcae:	d93b      	bls.n	802bd28 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 802bcb0:	f107 0214 	add.w	r2, r7, #20
 802bcb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802bcb8:	18d0      	adds	r0, r2, r3
 802bcba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 802bcbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802bcc2:	1ad3      	subs	r3, r2, r3
 802bcc4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802bcc8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 802bccc:	6812      	ldr	r2, [r2, #0]
 802bcce:	18d1      	adds	r1, r2, r3
 802bcd0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bcd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802bcd8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802bcdc:	681b      	ldr	r3, [r3, #0]
 802bcde:	1ad3      	subs	r3, r2, r3
 802bce0:	461a      	mov	r2, r3
 802bce2:	f013 fbe1 	bl	803f4a8 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 802bce6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802bcea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802bcee:	441a      	add	r2, r3
 802bcf0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bcf4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802bcf8:	681b      	ldr	r3, [r3, #0]
 802bcfa:	1ad3      	subs	r3, r2, r3
 802bcfc:	f107 0214 	add.w	r2, r7, #20
 802bd00:	18d0      	adds	r0, r2, r3
 802bd02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bd06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802bd0a:	681a      	ldr	r2, [r3, #0]
 802bd0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802bd10:	1ad2      	subs	r2, r2, r3
 802bd12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bd16:	441a      	add	r2, r3
 802bd18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bd1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802bd20:	6819      	ldr	r1, [r3, #0]
 802bd22:	f013 fbc1 	bl	803f4a8 <memcpy>
 802bd26:	e017      	b.n	802bd58 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 802bd28:	f107 0214 	add.w	r2, r7, #20
 802bd2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802bd30:	18d0      	adds	r0, r2, r3
 802bd32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802bd36:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802bd3a:	681a      	ldr	r2, [r3, #0]
 802bd3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802bd40:	1ad3      	subs	r3, r2, r3
 802bd42:	f507 729c 	add.w	r2, r7, #312	; 0x138
 802bd46:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 802bd4a:	6812      	ldr	r2, [r2, #0]
 802bd4c:	4413      	add	r3, r2
 802bd4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802bd52:	4619      	mov	r1, r3
 802bd54:	f013 fba8 	bl	803f4a8 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 802bd58:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802bd5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bd60:	4413      	add	r3, r2
 802bd62:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802bd66:	429a      	cmp	r2, r3
 802bd68:	d012      	beq.n	802bd90 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 802bd6a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802bd6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bd72:	4413      	add	r3, r2
 802bd74:	f107 0214 	add.w	r2, r7, #20
 802bd78:	18d0      	adds	r0, r2, r3
 802bd7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 802bd7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bd82:	4413      	add	r3, r2
 802bd84:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 802bd88:	461a      	mov	r2, r3
 802bd8a:	2100      	movs	r1, #0
 802bd8c:	f013 fbb4 	bl	803f4f8 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 802bd90:	f107 0114 	add.w	r1, r7, #20
 802bd94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 802bd98:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802bd9c:	2000      	movs	r0, #0
 802bd9e:	f000 f9b4 	bl	802c10a <bhy2_hif_set_regs>
 802bda2:	4603      	mov	r3, r0
 802bda4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 802bda8:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 802bdac:	2b00      	cmp	r3, #0
 802bdae:	d11b      	bne.n	802bde8 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 802bdb0:	2300      	movs	r3, #0
 802bdb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 802bdb6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 802bdba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802bdbe:	1ad3      	subs	r3, r2, r3
 802bdc0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 802bdc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802bdc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 802bdcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802bdd0:	2b00      	cmp	r3, #0
 802bdd2:	d00f      	beq.n	802bdf4 <bhy2_hif_exec_cmd_generic+0x3a8>
 802bdd4:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 802bdd8:	2b00      	cmp	r3, #0
 802bdda:	f43f af04 	beq.w	802bbe6 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 802bdde:	e009      	b.n	802bdf4 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 802bde0:	23fe      	movs	r3, #254	; 0xfe
 802bde2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 802bde6:	e005      	b.n	802bdf4 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 802bde8:	bf00      	nop
        if (hif->read_write_len != 0)
 802bdea:	e003      	b.n	802bdf4 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802bdec:	23ff      	movs	r3, #255	; 0xff
 802bdee:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 802bdf2:	e000      	b.n	802bdf6 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 802bdf4:	bf00      	nop
    }

    return rslt;
 802bdf6:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 802bdfa:	4618      	mov	r0, r3
 802bdfc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 802be00:	46bd      	mov	sp, r7
 802be02:	bd90      	pop	{r4, r7, pc}

0802be04 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 802be04:	b580      	push	{r7, lr}
 802be06:	b084      	sub	sp, #16
 802be08:	af00      	add	r7, sp, #0
 802be0a:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 802be0c:	2300      	movs	r3, #0
 802be0e:	81fb      	strh	r3, [r7, #14]
 802be10:	e027      	b.n	802be62 <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 802be12:	f107 030c 	add.w	r3, r7, #12
 802be16:	6879      	ldr	r1, [r7, #4]
 802be18:	4618      	mov	r0, r3
 802be1a:	f000 fab1 	bl	802c380 <bhy2_hif_get_interrupt_status>
 802be1e:	4603      	mov	r3, r0
 802be20:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 802be22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802be26:	2b00      	cmp	r3, #0
 802be28:	d115      	bne.n	802be56 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 802be2a:	7b3b      	ldrb	r3, [r7, #12]
 802be2c:	f003 0320 	and.w	r3, r3, #32
 802be30:	2b00      	cmp	r3, #0
 802be32:	d002      	beq.n	802be3a <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 802be34:	2300      	movs	r3, #0
 802be36:	737b      	strb	r3, [r7, #13]
                break;
 802be38:	e017      	b.n	802be6a <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 802be3a:	6879      	ldr	r1, [r7, #4]
 802be3c:	f242 7010 	movw	r0, #10000	; 0x2710
 802be40:	f000 f99b 	bl	802c17a <bhy2_hif_delay_us>
 802be44:	4603      	mov	r3, r0
 802be46:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 802be48:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802be4c:	2b00      	cmp	r3, #0
 802be4e:	d005      	beq.n	802be5c <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 802be50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802be54:	e00b      	b.n	802be6e <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 802be56:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802be5a:	e008      	b.n	802be6e <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 802be5c:	89fb      	ldrh	r3, [r7, #14]
 802be5e:	3301      	adds	r3, #1
 802be60:	81fb      	strh	r3, [r7, #14]
 802be62:	89fb      	ldrh	r3, [r7, #14]
 802be64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802be68:	d3d3      	bcc.n	802be12 <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 802be6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 802be6e:	4618      	mov	r0, r3
 802be70:	3710      	adds	r7, #16
 802be72:	46bd      	mov	sp, r7
 802be74:	bd80      	pop	{r7, pc}

0802be76 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 802be76:	b580      	push	{r7, lr}
 802be78:	b084      	sub	sp, #16
 802be7a:	af00      	add	r7, sp, #0
 802be7c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 802be7e:	2300      	movs	r3, #0
 802be80:	81fb      	strh	r3, [r7, #14]
 802be82:	e02f      	b.n	802bee4 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 802be84:	6879      	ldr	r1, [r7, #4]
 802be86:	f24c 3050 	movw	r0, #50000	; 0xc350
 802be8a:	f000 f976 	bl	802c17a <bhy2_hif_delay_us>
 802be8e:	4603      	mov	r3, r0
 802be90:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802be92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802be96:	2b00      	cmp	r3, #0
 802be98:	da02      	bge.n	802bea0 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 802be9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802be9e:	e02d      	b.n	802befc <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 802bea0:	f107 010c 	add.w	r1, r7, #12
 802bea4:	687b      	ldr	r3, [r7, #4]
 802bea6:	2201      	movs	r2, #1
 802bea8:	2025      	movs	r0, #37	; 0x25
 802beaa:	f000 f8f6 	bl	802c09a <bhy2_hif_get_regs>
 802beae:	4603      	mov	r3, r0
 802beb0:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802beb2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802beb6:	2b00      	cmp	r3, #0
 802beb8:	da02      	bge.n	802bec0 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 802beba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802bebe:	e01d      	b.n	802befc <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 802bec0:	7b3b      	ldrb	r3, [r7, #12]
 802bec2:	f003 0310 	and.w	r3, r3, #16
 802bec6:	2b00      	cmp	r3, #0
 802bec8:	d009      	beq.n	802bede <bhy2_hif_check_boot_status_ram+0x68>
 802beca:	7b3b      	ldrb	r3, [r7, #12]
 802becc:	f003 0320 	and.w	r3, r3, #32
 802bed0:	2b00      	cmp	r3, #0
 802bed2:	d004      	beq.n	802bede <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 802bed4:	7b3b      	ldrb	r3, [r7, #12]
 802bed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 802beda:	2b00      	cmp	r3, #0
 802bedc:	d006      	beq.n	802beec <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 802bede:	89fb      	ldrh	r3, [r7, #14]
 802bee0:	3301      	adds	r3, #1
 802bee2:	81fb      	strh	r3, [r7, #14]
 802bee4:	89fb      	ldrh	r3, [r7, #14]
 802bee6:	2b63      	cmp	r3, #99	; 0x63
 802bee8:	d9cc      	bls.n	802be84 <bhy2_hif_check_boot_status_ram+0xe>
 802beea:	e000      	b.n	802beee <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 802beec:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 802beee:	89fb      	ldrh	r3, [r7, #14]
 802bef0:	2b64      	cmp	r3, #100	; 0x64
 802bef2:	d102      	bne.n	802befa <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 802bef4:	f06f 0304 	mvn.w	r3, #4
 802bef8:	e000      	b.n	802befc <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 802befa:	2300      	movs	r3, #0
}
 802befc:	4618      	mov	r0, r3
 802befe:	3710      	adds	r7, #16
 802bf00:	46bd      	mov	sp, r7
 802bf02:	bd80      	pop	{r7, pc}

0802bf04 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802bf04:	b580      	push	{r7, lr}
 802bf06:	b08a      	sub	sp, #40	; 0x28
 802bf08:	af00      	add	r7, sp, #0
 802bf0a:	60b9      	str	r1, [r7, #8]
 802bf0c:	607a      	str	r2, [r7, #4]
 802bf0e:	603b      	str	r3, [r7, #0]
 802bf10:	4603      	mov	r3, r0
 802bf12:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802bf14:	2300      	movs	r3, #0
 802bf16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 802bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bf1c:	2b00      	cmp	r3, #0
 802bf1e:	d072      	beq.n	802c006 <bhy2_hif_get_fifo+0x102>
 802bf20:	68bb      	ldr	r3, [r7, #8]
 802bf22:	2b00      	cmp	r3, #0
 802bf24:	d06f      	beq.n	802c006 <bhy2_hif_get_fifo+0x102>
 802bf26:	683b      	ldr	r3, [r7, #0]
 802bf28:	2b00      	cmp	r3, #0
 802bf2a:	d06c      	beq.n	802c006 <bhy2_hif_get_fifo+0x102>
 802bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bf2e:	2b00      	cmp	r3, #0
 802bf30:	d069      	beq.n	802c006 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 802bf32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bf34:	699b      	ldr	r3, [r3, #24]
 802bf36:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 802bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bf3a:	681b      	ldr	r3, [r3, #0]
 802bf3c:	2b00      	cmp	r3, #0
 802bf3e:	d114      	bne.n	802bf6a <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 802bf40:	f107 0114 	add.w	r1, r7, #20
 802bf44:	7bf8      	ldrb	r0, [r7, #15]
 802bf46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bf48:	2202      	movs	r2, #2
 802bf4a:	f000 f8a6 	bl	802c09a <bhy2_hif_get_regs>
 802bf4e:	4603      	mov	r3, r0
 802bf50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 802bf54:	7d3b      	ldrb	r3, [r7, #20]
 802bf56:	b21a      	sxth	r2, r3
 802bf58:	7d7b      	ldrb	r3, [r7, #21]
 802bf5a:	021b      	lsls	r3, r3, #8
 802bf5c:	b21b      	sxth	r3, r3
 802bf5e:	4313      	orrs	r3, r2
 802bf60:	b21b      	sxth	r3, r3
 802bf62:	b29b      	uxth	r3, r3
 802bf64:	461a      	mov	r2, r3
 802bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bf68:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bf6c:	681b      	ldr	r3, [r3, #0]
 802bf6e:	2b00      	cmp	r3, #0
 802bf70:	d04d      	beq.n	802c00e <bhy2_hif_get_fifo+0x10a>
 802bf72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802bf76:	2b00      	cmp	r3, #0
 802bf78:	d149      	bne.n	802c00e <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 802bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bf7c:	681b      	ldr	r3, [r3, #0]
 802bf7e:	687a      	ldr	r2, [r7, #4]
 802bf80:	429a      	cmp	r2, r3
 802bf82:	d203      	bcs.n	802bf8c <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 802bf84:	683b      	ldr	r3, [r7, #0]
 802bf86:	687a      	ldr	r2, [r7, #4]
 802bf88:	601a      	str	r2, [r3, #0]
 802bf8a:	e003      	b.n	802bf94 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 802bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bf8e:	681a      	ldr	r2, [r3, #0]
 802bf90:	683b      	ldr	r3, [r7, #0]
 802bf92:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 802bf94:	683b      	ldr	r3, [r7, #0]
 802bf96:	681b      	ldr	r3, [r3, #0]
 802bf98:	623b      	str	r3, [r7, #32]
            offset = 0;
 802bf9a:	2300      	movs	r3, #0
 802bf9c:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802bf9e:	e016      	b.n	802bfce <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 802bfa0:	68ba      	ldr	r2, [r7, #8]
 802bfa2:	69fb      	ldr	r3, [r7, #28]
 802bfa4:	18d1      	adds	r1, r2, r3
 802bfa6:	7bf8      	ldrb	r0, [r7, #15]
 802bfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bfaa:	69ba      	ldr	r2, [r7, #24]
 802bfac:	f000 f875 	bl	802c09a <bhy2_hif_get_regs>
 802bfb0:	4603      	mov	r3, r0
 802bfb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 802bfb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802bfba:	2b00      	cmp	r3, #0
 802bfbc:	d10c      	bne.n	802bfd8 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 802bfbe:	6a3a      	ldr	r2, [r7, #32]
 802bfc0:	69bb      	ldr	r3, [r7, #24]
 802bfc2:	1ad3      	subs	r3, r2, r3
 802bfc4:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 802bfc6:	69fa      	ldr	r2, [r7, #28]
 802bfc8:	69bb      	ldr	r3, [r7, #24]
 802bfca:	4413      	add	r3, r2
 802bfcc:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 802bfce:	6a3a      	ldr	r2, [r7, #32]
 802bfd0:	69bb      	ldr	r3, [r7, #24]
 802bfd2:	429a      	cmp	r2, r3
 802bfd4:	d8e4      	bhi.n	802bfa0 <bhy2_hif_get_fifo+0x9c>
 802bfd6:	e000      	b.n	802bfda <bhy2_hif_get_fifo+0xd6>
                    break;
 802bfd8:	bf00      	nop
            }

            if (read_len != 0)
 802bfda:	6a3b      	ldr	r3, [r7, #32]
 802bfdc:	2b00      	cmp	r3, #0
 802bfde:	d00a      	beq.n	802bff6 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 802bfe0:	68ba      	ldr	r2, [r7, #8]
 802bfe2:	69fb      	ldr	r3, [r7, #28]
 802bfe4:	18d1      	adds	r1, r2, r3
 802bfe6:	7bf8      	ldrb	r0, [r7, #15]
 802bfe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bfea:	6a3a      	ldr	r2, [r7, #32]
 802bfec:	f000 f855 	bl	802c09a <bhy2_hif_get_regs>
 802bff0:	4603      	mov	r3, r0
 802bff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 802bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bff8:	681a      	ldr	r2, [r3, #0]
 802bffa:	683b      	ldr	r3, [r7, #0]
 802bffc:	681b      	ldr	r3, [r3, #0]
 802bffe:	1ad2      	subs	r2, r2, r3
 802c000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c002:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802c004:	e003      	b.n	802c00e <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c006:	23ff      	movs	r3, #255	; 0xff
 802c008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802c00c:	e000      	b.n	802c010 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 802c00e:	bf00      	nop
    }

    return rslt;
 802c010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802c014:	4618      	mov	r0, r3
 802c016:	3728      	adds	r7, #40	; 0x28
 802c018:	46bd      	mov	sp, r7
 802c01a:	bd80      	pop	{r7, pc}

0802c01c <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 802c01c:	b480      	push	{r7}
 802c01e:	b087      	sub	sp, #28
 802c020:	af00      	add	r7, sp, #0
 802c022:	60b9      	str	r1, [r7, #8]
 802c024:	607a      	str	r2, [r7, #4]
 802c026:	603b      	str	r3, [r7, #0]
 802c028:	4603      	mov	r3, r0
 802c02a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802c02c:	2300      	movs	r3, #0
 802c02e:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 802c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c032:	2b00      	cmp	r3, #0
 802c034:	d027      	beq.n	802c086 <bhy2_hif_init+0x6a>
 802c036:	68bb      	ldr	r3, [r7, #8]
 802c038:	2b00      	cmp	r3, #0
 802c03a:	d024      	beq.n	802c086 <bhy2_hif_init+0x6a>
 802c03c:	687b      	ldr	r3, [r7, #4]
 802c03e:	2b00      	cmp	r3, #0
 802c040:	d021      	beq.n	802c086 <bhy2_hif_init+0x6a>
 802c042:	683b      	ldr	r3, [r7, #0]
 802c044:	2b00      	cmp	r3, #0
 802c046:	d01e      	beq.n	802c086 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 802c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c04a:	68ba      	ldr	r2, [r7, #8]
 802c04c:	601a      	str	r2, [r3, #0]
        hif->write = write;
 802c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c050:	687a      	ldr	r2, [r7, #4]
 802c052:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 802c054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c056:	683a      	ldr	r2, [r7, #0]
 802c058:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 802c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c05c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802c05e:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 802c060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c062:	7bfa      	ldrb	r2, [r7, #15]
 802c064:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 802c066:	6a3b      	ldr	r3, [r7, #32]
 802c068:	f003 0303 	and.w	r3, r3, #3
 802c06c:	2b00      	cmp	r3, #0
 802c06e:	d006      	beq.n	802c07e <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 802c070:	6a3b      	ldr	r3, [r7, #32]
 802c072:	089b      	lsrs	r3, r3, #2
 802c074:	3301      	adds	r3, #1
 802c076:	009a      	lsls	r2, r3, #2
 802c078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c07a:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802c07c:	e005      	b.n	802c08a <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 802c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c080:	6a3a      	ldr	r2, [r7, #32]
 802c082:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 802c084:	e001      	b.n	802c08a <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c086:	23ff      	movs	r3, #255	; 0xff
 802c088:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802c08a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c08e:	4618      	mov	r0, r3
 802c090:	371c      	adds	r7, #28
 802c092:	46bd      	mov	sp, r7
 802c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c098:	4770      	bx	lr

0802c09a <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 802c09a:	b590      	push	{r4, r7, lr}
 802c09c:	b087      	sub	sp, #28
 802c09e:	af00      	add	r7, sp, #0
 802c0a0:	60b9      	str	r1, [r7, #8]
 802c0a2:	607a      	str	r2, [r7, #4]
 802c0a4:	603b      	str	r3, [r7, #0]
 802c0a6:	4603      	mov	r3, r0
 802c0a8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802c0aa:	2300      	movs	r3, #0
 802c0ac:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 802c0ae:	683b      	ldr	r3, [r7, #0]
 802c0b0:	2b00      	cmp	r3, #0
 802c0b2:	d022      	beq.n	802c0fa <bhy2_hif_get_regs+0x60>
 802c0b4:	683b      	ldr	r3, [r7, #0]
 802c0b6:	681b      	ldr	r3, [r3, #0]
 802c0b8:	2b00      	cmp	r3, #0
 802c0ba:	d01e      	beq.n	802c0fa <bhy2_hif_get_regs+0x60>
 802c0bc:	68bb      	ldr	r3, [r7, #8]
 802c0be:	2b00      	cmp	r3, #0
 802c0c0:	d01b      	beq.n	802c0fa <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802c0c2:	683b      	ldr	r3, [r7, #0]
 802c0c4:	7b1b      	ldrb	r3, [r3, #12]
 802c0c6:	2b01      	cmp	r3, #1
 802c0c8:	d103      	bne.n	802c0d2 <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 802c0ca:	7bfb      	ldrb	r3, [r7, #15]
 802c0cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802c0d0:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 802c0d2:	683b      	ldr	r3, [r7, #0]
 802c0d4:	681c      	ldr	r4, [r3, #0]
 802c0d6:	683b      	ldr	r3, [r7, #0]
 802c0d8:	691b      	ldr	r3, [r3, #16]
 802c0da:	7bf8      	ldrb	r0, [r7, #15]
 802c0dc:	687a      	ldr	r2, [r7, #4]
 802c0de:	68b9      	ldr	r1, [r7, #8]
 802c0e0:	47a0      	blx	r4
 802c0e2:	4603      	mov	r3, r0
 802c0e4:	461a      	mov	r2, r3
 802c0e6:	683b      	ldr	r3, [r7, #0]
 802c0e8:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802c0ea:	683b      	ldr	r3, [r7, #0]
 802c0ec:	f993 3014 	ldrsb.w	r3, [r3, #20]
 802c0f0:	2b00      	cmp	r3, #0
 802c0f2:	d004      	beq.n	802c0fe <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802c0f4:	23fd      	movs	r3, #253	; 0xfd
 802c0f6:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802c0f8:	e001      	b.n	802c0fe <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c0fa:	23ff      	movs	r3, #255	; 0xff
 802c0fc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802c0fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c102:	4618      	mov	r0, r3
 802c104:	371c      	adds	r7, #28
 802c106:	46bd      	mov	sp, r7
 802c108:	bd90      	pop	{r4, r7, pc}

0802c10a <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 802c10a:	b590      	push	{r4, r7, lr}
 802c10c:	b087      	sub	sp, #28
 802c10e:	af00      	add	r7, sp, #0
 802c110:	60b9      	str	r1, [r7, #8]
 802c112:	607a      	str	r2, [r7, #4]
 802c114:	603b      	str	r3, [r7, #0]
 802c116:	4603      	mov	r3, r0
 802c118:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 802c11a:	2300      	movs	r3, #0
 802c11c:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 802c11e:	683b      	ldr	r3, [r7, #0]
 802c120:	2b00      	cmp	r3, #0
 802c122:	d022      	beq.n	802c16a <bhy2_hif_set_regs+0x60>
 802c124:	683b      	ldr	r3, [r7, #0]
 802c126:	681b      	ldr	r3, [r3, #0]
 802c128:	2b00      	cmp	r3, #0
 802c12a:	d01e      	beq.n	802c16a <bhy2_hif_set_regs+0x60>
 802c12c:	68bb      	ldr	r3, [r7, #8]
 802c12e:	2b00      	cmp	r3, #0
 802c130:	d01b      	beq.n	802c16a <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 802c132:	683b      	ldr	r3, [r7, #0]
 802c134:	7b1b      	ldrb	r3, [r3, #12]
 802c136:	2b01      	cmp	r3, #1
 802c138:	d103      	bne.n	802c142 <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 802c13a:	7bfb      	ldrb	r3, [r7, #15]
 802c13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c140:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 802c142:	683b      	ldr	r3, [r7, #0]
 802c144:	685c      	ldr	r4, [r3, #4]
 802c146:	683b      	ldr	r3, [r7, #0]
 802c148:	691b      	ldr	r3, [r3, #16]
 802c14a:	7bf8      	ldrb	r0, [r7, #15]
 802c14c:	687a      	ldr	r2, [r7, #4]
 802c14e:	68b9      	ldr	r1, [r7, #8]
 802c150:	47a0      	blx	r4
 802c152:	4603      	mov	r3, r0
 802c154:	461a      	mov	r2, r3
 802c156:	683b      	ldr	r3, [r7, #0]
 802c158:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802c15a:	683b      	ldr	r3, [r7, #0]
 802c15c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 802c160:	2b00      	cmp	r3, #0
 802c162:	d004      	beq.n	802c16e <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 802c164:	23fd      	movs	r3, #253	; 0xfd
 802c166:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 802c168:	e001      	b.n	802c16e <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c16a:	23ff      	movs	r3, #255	; 0xff
 802c16c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 802c16e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c172:	4618      	mov	r0, r3
 802c174:	371c      	adds	r7, #28
 802c176:	46bd      	mov	sp, r7
 802c178:	bd90      	pop	{r4, r7, pc}

0802c17a <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 802c17a:	b580      	push	{r7, lr}
 802c17c:	b084      	sub	sp, #16
 802c17e:	af00      	add	r7, sp, #0
 802c180:	6078      	str	r0, [r7, #4]
 802c182:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 802c184:	2300      	movs	r3, #0
 802c186:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 802c188:	683b      	ldr	r3, [r7, #0]
 802c18a:	2b00      	cmp	r3, #0
 802c18c:	d00b      	beq.n	802c1a6 <bhy2_hif_delay_us+0x2c>
 802c18e:	683b      	ldr	r3, [r7, #0]
 802c190:	689b      	ldr	r3, [r3, #8]
 802c192:	2b00      	cmp	r3, #0
 802c194:	d007      	beq.n	802c1a6 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 802c196:	683b      	ldr	r3, [r7, #0]
 802c198:	689b      	ldr	r3, [r3, #8]
 802c19a:	683a      	ldr	r2, [r7, #0]
 802c19c:	6912      	ldr	r2, [r2, #16]
 802c19e:	4611      	mov	r1, r2
 802c1a0:	6878      	ldr	r0, [r7, #4]
 802c1a2:	4798      	blx	r3
 802c1a4:	e001      	b.n	802c1aa <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c1a6:	23ff      	movs	r3, #255	; 0xff
 802c1a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c1ae:	4618      	mov	r0, r3
 802c1b0:	3710      	adds	r7, #16
 802c1b2:	46bd      	mov	sp, r7
 802c1b4:	bd80      	pop	{r7, pc}

0802c1b6 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 802c1b6:	b580      	push	{r7, lr}
 802c1b8:	b088      	sub	sp, #32
 802c1ba:	af04      	add	r7, sp, #16
 802c1bc:	60b9      	str	r1, [r7, #8]
 802c1be:	607a      	str	r2, [r7, #4]
 802c1c0:	603b      	str	r3, [r7, #0]
 802c1c2:	4603      	mov	r3, r0
 802c1c4:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 802c1c6:	89f8      	ldrh	r0, [r7, #14]
 802c1c8:	683b      	ldr	r3, [r7, #0]
 802c1ca:	9302      	str	r3, [sp, #8]
 802c1cc:	2300      	movs	r3, #0
 802c1ce:	9301      	str	r3, [sp, #4]
 802c1d0:	2300      	movs	r3, #0
 802c1d2:	9300      	str	r3, [sp, #0]
 802c1d4:	2300      	movs	r3, #0
 802c1d6:	687a      	ldr	r2, [r7, #4]
 802c1d8:	68b9      	ldr	r1, [r7, #8]
 802c1da:	f7ff fc37 	bl	802ba4c <bhy2_hif_exec_cmd_generic>
 802c1de:	4603      	mov	r3, r0
}
 802c1e0:	4618      	mov	r0, r3
 802c1e2:	3710      	adds	r7, #16
 802c1e4:	46bd      	mov	sp, r7
 802c1e6:	bd80      	pop	{r7, pc}

0802c1e8 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 802c1e8:	b580      	push	{r7, lr}
 802c1ea:	b088      	sub	sp, #32
 802c1ec:	af02      	add	r7, sp, #8
 802c1ee:	60b9      	str	r1, [r7, #8]
 802c1f0:	607a      	str	r2, [r7, #4]
 802c1f2:	603b      	str	r3, [r7, #0]
 802c1f4:	4603      	mov	r3, r0
 802c1f6:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 802c1f8:	2300      	movs	r3, #0
 802c1fa:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 802c1fc:	2300      	movs	r3, #0
 802c1fe:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 802c200:	6a3b      	ldr	r3, [r7, #32]
 802c202:	2b00      	cmp	r3, #0
 802c204:	d06e      	beq.n	802c2e4 <bhy2_hif_get_parameter+0xfc>
 802c206:	68bb      	ldr	r3, [r7, #8]
 802c208:	2b00      	cmp	r3, #0
 802c20a:	d06b      	beq.n	802c2e4 <bhy2_hif_get_parameter+0xfc>
 802c20c:	683b      	ldr	r3, [r7, #0]
 802c20e:	2b00      	cmp	r3, #0
 802c210:	d068      	beq.n	802c2e4 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 802c212:	683b      	ldr	r3, [r7, #0]
 802c214:	2200      	movs	r2, #0
 802c216:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802c218:	f107 0113 	add.w	r1, r7, #19
 802c21c:	6a3b      	ldr	r3, [r7, #32]
 802c21e:	2201      	movs	r2, #1
 802c220:	2006      	movs	r0, #6
 802c222:	f7ff ff3a 	bl	802c09a <bhy2_hif_get_regs>
 802c226:	4603      	mov	r3, r0
 802c228:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802c22a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c22e:	2b00      	cmp	r3, #0
 802c230:	d15b      	bne.n	802c2ea <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 802c232:	7cfb      	ldrb	r3, [r7, #19]
 802c234:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 802c236:	7cfb      	ldrb	r3, [r7, #19]
 802c238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802c23c:	b2db      	uxtb	r3, r3
 802c23e:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 802c240:	7cfb      	ldrb	r3, [r7, #19]
 802c242:	7dba      	ldrb	r2, [r7, #22]
 802c244:	429a      	cmp	r2, r3
 802c246:	d008      	beq.n	802c25a <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802c248:	f107 0113 	add.w	r1, r7, #19
 802c24c:	6a3b      	ldr	r3, [r7, #32]
 802c24e:	2201      	movs	r2, #1
 802c250:	2006      	movs	r0, #6
 802c252:	f7ff ff5a 	bl	802c10a <bhy2_hif_set_regs>
 802c256:	4603      	mov	r3, r0
 802c258:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 802c25a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c25e:	2b00      	cmp	r3, #0
 802c260:	d143      	bne.n	802c2ea <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 802c262:	89fb      	ldrh	r3, [r7, #14]
 802c264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802c268:	b298      	uxth	r0, r3
 802c26a:	6a3b      	ldr	r3, [r7, #32]
 802c26c:	2200      	movs	r2, #0
 802c26e:	2100      	movs	r1, #0
 802c270:	f7ff ffa1 	bl	802c1b6 <bhy2_hif_exec_cmd>
 802c274:	4603      	mov	r3, r0
 802c276:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 802c278:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c27c:	2b00      	cmp	r3, #0
 802c27e:	d134      	bne.n	802c2ea <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 802c280:	6a38      	ldr	r0, [r7, #32]
 802c282:	f7ff fdbf 	bl	802be04 <bhy2_wait_status_ready>
 802c286:	4603      	mov	r3, r0
 802c288:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 802c28a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c28e:	2b00      	cmp	r3, #0
 802c290:	d12b      	bne.n	802c2ea <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 802c292:	f107 0014 	add.w	r0, r7, #20
 802c296:	6a3b      	ldr	r3, [r7, #32]
 802c298:	9300      	str	r3, [sp, #0]
 802c29a:	683b      	ldr	r3, [r7, #0]
 802c29c:	687a      	ldr	r2, [r7, #4]
 802c29e:	68b9      	ldr	r1, [r7, #8]
 802c2a0:	f000 f94b 	bl	802c53a <bhy2_hif_get_status_fifo>
 802c2a4:	4603      	mov	r3, r0
 802c2a6:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 802c2a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c2ac:	2b00      	cmp	r3, #0
 802c2ae:	d11c      	bne.n	802c2ea <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 802c2b0:	7cfb      	ldrb	r3, [r7, #19]
 802c2b2:	7dba      	ldrb	r2, [r7, #22]
 802c2b4:	429a      	cmp	r2, r3
 802c2b6:	d00a      	beq.n	802c2ce <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 802c2b8:	7dbb      	ldrb	r3, [r7, #22]
 802c2ba:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 802c2bc:	f107 0113 	add.w	r1, r7, #19
 802c2c0:	6a3b      	ldr	r3, [r7, #32]
 802c2c2:	2201      	movs	r2, #1
 802c2c4:	2006      	movs	r0, #6
 802c2c6:	f7ff ff20 	bl	802c10a <bhy2_hif_set_regs>
 802c2ca:	4603      	mov	r3, r0
 802c2cc:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 802c2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c2d2:	2b00      	cmp	r3, #0
 802c2d4:	d109      	bne.n	802c2ea <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 802c2d6:	8abb      	ldrh	r3, [r7, #20]
 802c2d8:	89fa      	ldrh	r2, [r7, #14]
 802c2da:	429a      	cmp	r2, r3
 802c2dc:	d005      	beq.n	802c2ea <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 802c2de:	23fb      	movs	r3, #251	; 0xfb
 802c2e0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 802c2e2:	e002      	b.n	802c2ea <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c2e4:	23ff      	movs	r3, #255	; 0xff
 802c2e6:	75fb      	strb	r3, [r7, #23]
 802c2e8:	e000      	b.n	802c2ec <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 802c2ea:	bf00      	nop
    }

    return rslt;
 802c2ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c2f0:	4618      	mov	r0, r3
 802c2f2:	3718      	adds	r7, #24
 802c2f4:	46bd      	mov	sp, r7
 802c2f6:	bd80      	pop	{r7, pc}

0802c2f8 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 802c2f8:	b580      	push	{r7, lr}
 802c2fa:	b082      	sub	sp, #8
 802c2fc:	af00      	add	r7, sp, #0
 802c2fe:	6078      	str	r0, [r7, #4]
 802c300:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 802c302:	683b      	ldr	r3, [r7, #0]
 802c304:	2201      	movs	r2, #1
 802c306:	6879      	ldr	r1, [r7, #4]
 802c308:	201c      	movs	r0, #28
 802c30a:	f7ff fec6 	bl	802c09a <bhy2_hif_get_regs>
 802c30e:	4603      	mov	r3, r0
}
 802c310:	4618      	mov	r0, r3
 802c312:	3708      	adds	r7, #8
 802c314:	46bd      	mov	sp, r7
 802c316:	bd80      	pop	{r7, pc}

0802c318 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 802c318:	b580      	push	{r7, lr}
 802c31a:	b084      	sub	sp, #16
 802c31c:	af00      	add	r7, sp, #0
 802c31e:	6078      	str	r0, [r7, #4]
 802c320:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 802c322:	687b      	ldr	r3, [r7, #4]
 802c324:	2b00      	cmp	r3, #0
 802c326:	d013      	beq.n	802c350 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 802c328:	f107 010c 	add.w	r1, r7, #12
 802c32c:	683b      	ldr	r3, [r7, #0]
 802c32e:	2202      	movs	r2, #2
 802c330:	2020      	movs	r0, #32
 802c332:	f7ff feb2 	bl	802c09a <bhy2_hif_get_regs>
 802c336:	4603      	mov	r3, r0
 802c338:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 802c33a:	7b3b      	ldrb	r3, [r7, #12]
 802c33c:	b21a      	sxth	r2, r3
 802c33e:	7b7b      	ldrb	r3, [r7, #13]
 802c340:	021b      	lsls	r3, r3, #8
 802c342:	b21b      	sxth	r3, r3
 802c344:	4313      	orrs	r3, r2
 802c346:	b21b      	sxth	r3, r3
 802c348:	b29a      	uxth	r2, r3
 802c34a:	687b      	ldr	r3, [r7, #4]
 802c34c:	801a      	strh	r2, [r3, #0]
 802c34e:	e001      	b.n	802c354 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c350:	23ff      	movs	r3, #255	; 0xff
 802c352:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c354:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c358:	4618      	mov	r0, r3
 802c35a:	3710      	adds	r7, #16
 802c35c:	46bd      	mov	sp, r7
 802c35e:	bd80      	pop	{r7, pc}

0802c360 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 802c360:	b580      	push	{r7, lr}
 802c362:	b082      	sub	sp, #8
 802c364:	af00      	add	r7, sp, #0
 802c366:	6078      	str	r0, [r7, #4]
 802c368:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 802c36a:	683b      	ldr	r3, [r7, #0]
 802c36c:	2201      	movs	r2, #1
 802c36e:	6879      	ldr	r1, [r7, #4]
 802c370:	2025      	movs	r0, #37	; 0x25
 802c372:	f7ff fe92 	bl	802c09a <bhy2_hif_get_regs>
 802c376:	4603      	mov	r3, r0
}
 802c378:	4618      	mov	r0, r3
 802c37a:	3708      	adds	r7, #8
 802c37c:	46bd      	mov	sp, r7
 802c37e:	bd80      	pop	{r7, pc}

0802c380 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 802c380:	b580      	push	{r7, lr}
 802c382:	b082      	sub	sp, #8
 802c384:	af00      	add	r7, sp, #0
 802c386:	6078      	str	r0, [r7, #4]
 802c388:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 802c38a:	683b      	ldr	r3, [r7, #0]
 802c38c:	2201      	movs	r2, #1
 802c38e:	6879      	ldr	r1, [r7, #4]
 802c390:	202d      	movs	r0, #45	; 0x2d
 802c392:	f7ff fe82 	bl	802c09a <bhy2_hif_get_regs>
 802c396:	4603      	mov	r3, r0
}
 802c398:	4618      	mov	r0, r3
 802c39a:	3708      	adds	r7, #8
 802c39c:	46bd      	mov	sp, r7
 802c39e:	bd80      	pop	{r7, pc}

0802c3a0 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 802c3a0:	b580      	push	{r7, lr}
 802c3a2:	b084      	sub	sp, #16
 802c3a4:	af00      	add	r7, sp, #0
 802c3a6:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 802c3a8:	2301      	movs	r3, #1
 802c3aa:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 802c3ac:	2300      	movs	r3, #0
 802c3ae:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 802c3b0:	230f      	movs	r3, #15
 802c3b2:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 802c3b4:	f107 010b 	add.w	r1, r7, #11
 802c3b8:	687b      	ldr	r3, [r7, #4]
 802c3ba:	2201      	movs	r2, #1
 802c3bc:	2014      	movs	r0, #20
 802c3be:	f7ff fea4 	bl	802c10a <bhy2_hif_set_regs>
 802c3c2:	4603      	mov	r3, r0
 802c3c4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802c3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c3ca:	2b00      	cmp	r3, #0
 802c3cc:	d12b      	bne.n	802c426 <bhy2_hif_reset+0x86>
    {
        while (count--)
 802c3ce:	e01c      	b.n	802c40a <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 802c3d0:	6879      	ldr	r1, [r7, #4]
 802c3d2:	f242 7010 	movw	r0, #10000	; 0x2710
 802c3d6:	f7ff fed0 	bl	802c17a <bhy2_hif_delay_us>
 802c3da:	4603      	mov	r3, r0
 802c3dc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 802c3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c3e2:	2b00      	cmp	r3, #0
 802c3e4:	d111      	bne.n	802c40a <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 802c3e6:	f107 010a 	add.w	r1, r7, #10
 802c3ea:	687b      	ldr	r3, [r7, #4]
 802c3ec:	2201      	movs	r2, #1
 802c3ee:	2025      	movs	r0, #37	; 0x25
 802c3f0:	f7ff fe53 	bl	802c09a <bhy2_hif_get_regs>
 802c3f4:	4603      	mov	r3, r0
 802c3f6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 802c3f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c3fc:	2b00      	cmp	r3, #0
 802c3fe:	d104      	bne.n	802c40a <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 802c400:	7abb      	ldrb	r3, [r7, #10]
 802c402:	f003 0310 	and.w	r3, r3, #16
 802c406:	2b00      	cmp	r3, #0
 802c408:	d105      	bne.n	802c416 <bhy2_hif_reset+0x76>
        while (count--)
 802c40a:	89bb      	ldrh	r3, [r7, #12]
 802c40c:	1e5a      	subs	r2, r3, #1
 802c40e:	81ba      	strh	r2, [r7, #12]
 802c410:	2b00      	cmp	r3, #0
 802c412:	d1dd      	bne.n	802c3d0 <bhy2_hif_reset+0x30>
 802c414:	e000      	b.n	802c418 <bhy2_hif_reset+0x78>
                    {
                        break;
 802c416:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 802c418:	7abb      	ldrb	r3, [r7, #10]
 802c41a:	f003 0310 	and.w	r3, r3, #16
 802c41e:	2b00      	cmp	r3, #0
 802c420:	d101      	bne.n	802c426 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 802c422:	23fb      	movs	r3, #251	; 0xfb
 802c424:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 802c426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c42a:	4618      	mov	r0, r3
 802c42c:	3710      	adds	r7, #16
 802c42e:	46bd      	mov	sp, r7
 802c430:	bd80      	pop	{r7, pc}

0802c432 <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 802c432:	b580      	push	{r7, lr}
 802c434:	b086      	sub	sp, #24
 802c436:	af00      	add	r7, sp, #0
 802c438:	60f8      	str	r0, [r7, #12]
 802c43a:	60b9      	str	r1, [r7, #8]
 802c43c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 802c43e:	2300      	movs	r3, #0
 802c440:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 802c442:	687b      	ldr	r3, [r7, #4]
 802c444:	2b00      	cmp	r3, #0
 802c446:	d027      	beq.n	802c498 <bhy2_hif_upload_firmware_to_ram+0x66>
 802c448:	68fb      	ldr	r3, [r7, #12]
 802c44a:	2b00      	cmp	r3, #0
 802c44c:	d024      	beq.n	802c498 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 802c44e:	68fb      	ldr	r3, [r7, #12]
 802c450:	781b      	ldrb	r3, [r3, #0]
 802c452:	b21a      	sxth	r2, r3
 802c454:	68fb      	ldr	r3, [r7, #12]
 802c456:	3301      	adds	r3, #1
 802c458:	781b      	ldrb	r3, [r3, #0]
 802c45a:	021b      	lsls	r3, r3, #8
 802c45c:	b21b      	sxth	r3, r3
 802c45e:	4313      	orrs	r3, r2
 802c460:	b21b      	sxth	r3, r3
 802c462:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 802c464:	8abb      	ldrh	r3, [r7, #20]
 802c466:	f246 622b 	movw	r2, #26155	; 0x662b
 802c46a:	4293      	cmp	r3, r2
 802c46c:	d002      	beq.n	802c474 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 802c46e:	23fc      	movs	r3, #252	; 0xfc
 802c470:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802c472:	e014      	b.n	802c49e <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 802c474:	687b      	ldr	r3, [r7, #4]
 802c476:	68ba      	ldr	r2, [r7, #8]
 802c478:	68f9      	ldr	r1, [r7, #12]
 802c47a:	2002      	movs	r0, #2
 802c47c:	f7ff fe9b 	bl	802c1b6 <bhy2_hif_exec_cmd>
 802c480:	4603      	mov	r3, r0
 802c482:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 802c484:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c488:	2b00      	cmp	r3, #0
 802c48a:	d108      	bne.n	802c49e <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 802c48c:	6878      	ldr	r0, [r7, #4]
 802c48e:	f7ff fcf2 	bl	802be76 <bhy2_hif_check_boot_status_ram>
 802c492:	4603      	mov	r3, r0
 802c494:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 802c496:	e002      	b.n	802c49e <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c498:	23ff      	movs	r3, #255	; 0xff
 802c49a:	75fb      	strb	r3, [r7, #23]
 802c49c:	e000      	b.n	802c4a0 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 802c49e:	bf00      	nop
    }

    return rslt;
 802c4a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c4a4:	4618      	mov	r0, r3
 802c4a6:	3718      	adds	r7, #24
 802c4a8:	46bd      	mov	sp, r7
 802c4aa:	bd80      	pop	{r7, pc}

0802c4ac <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 802c4ac:	b580      	push	{r7, lr}
 802c4ae:	b084      	sub	sp, #16
 802c4b0:	af00      	add	r7, sp, #0
 802c4b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 802c4b4:	687b      	ldr	r3, [r7, #4]
 802c4b6:	2200      	movs	r2, #0
 802c4b8:	2100      	movs	r1, #0
 802c4ba:	2003      	movs	r0, #3
 802c4bc:	f7ff fe7b 	bl	802c1b6 <bhy2_hif_exec_cmd>
 802c4c0:	4603      	mov	r3, r0
 802c4c2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 802c4c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802c4c8:	2b00      	cmp	r3, #0
 802c4ca:	d104      	bne.n	802c4d6 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 802c4cc:	6878      	ldr	r0, [r7, #4]
 802c4ce:	f7ff fcd2 	bl	802be76 <bhy2_hif_check_boot_status_ram>
 802c4d2:	4603      	mov	r3, r0
 802c4d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 802c4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802c4da:	4618      	mov	r0, r3
 802c4dc:	3710      	adds	r7, #16
 802c4de:	46bd      	mov	sp, r7
 802c4e0:	bd80      	pop	{r7, pc}

0802c4e2 <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802c4e2:	b580      	push	{r7, lr}
 802c4e4:	b086      	sub	sp, #24
 802c4e6:	af02      	add	r7, sp, #8
 802c4e8:	60f8      	str	r0, [r7, #12]
 802c4ea:	60b9      	str	r1, [r7, #8]
 802c4ec:	607a      	str	r2, [r7, #4]
 802c4ee:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802c4f0:	69bb      	ldr	r3, [r7, #24]
 802c4f2:	9301      	str	r3, [sp, #4]
 802c4f4:	683b      	ldr	r3, [r7, #0]
 802c4f6:	9300      	str	r3, [sp, #0]
 802c4f8:	687b      	ldr	r3, [r7, #4]
 802c4fa:	68ba      	ldr	r2, [r7, #8]
 802c4fc:	68f9      	ldr	r1, [r7, #12]
 802c4fe:	2001      	movs	r0, #1
 802c500:	f7ff fd00 	bl	802bf04 <bhy2_hif_get_fifo>
 802c504:	4603      	mov	r3, r0
}
 802c506:	4618      	mov	r0, r3
 802c508:	3710      	adds	r7, #16
 802c50a:	46bd      	mov	sp, r7
 802c50c:	bd80      	pop	{r7, pc}

0802c50e <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 802c50e:	b580      	push	{r7, lr}
 802c510:	b086      	sub	sp, #24
 802c512:	af02      	add	r7, sp, #8
 802c514:	60f8      	str	r0, [r7, #12]
 802c516:	60b9      	str	r1, [r7, #8]
 802c518:	607a      	str	r2, [r7, #4]
 802c51a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802c51c:	69bb      	ldr	r3, [r7, #24]
 802c51e:	9301      	str	r3, [sp, #4]
 802c520:	683b      	ldr	r3, [r7, #0]
 802c522:	9300      	str	r3, [sp, #0]
 802c524:	687b      	ldr	r3, [r7, #4]
 802c526:	68ba      	ldr	r2, [r7, #8]
 802c528:	68f9      	ldr	r1, [r7, #12]
 802c52a:	2002      	movs	r0, #2
 802c52c:	f7ff fcea 	bl	802bf04 <bhy2_hif_get_fifo>
 802c530:	4603      	mov	r3, r0
}
 802c532:	4618      	mov	r0, r3
 802c534:	3710      	adds	r7, #16
 802c536:	46bd      	mov	sp, r7
 802c538:	bd80      	pop	{r7, pc}

0802c53a <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 802c53a:	b580      	push	{r7, lr}
 802c53c:	b086      	sub	sp, #24
 802c53e:	af00      	add	r7, sp, #0
 802c540:	60f8      	str	r0, [r7, #12]
 802c542:	60b9      	str	r1, [r7, #8]
 802c544:	607a      	str	r2, [r7, #4]
 802c546:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 802c548:	f107 0110 	add.w	r1, r7, #16
 802c54c:	6a3b      	ldr	r3, [r7, #32]
 802c54e:	2204      	movs	r2, #4
 802c550:	2003      	movs	r0, #3
 802c552:	f7ff fda2 	bl	802c09a <bhy2_hif_get_regs>
 802c556:	4603      	mov	r3, r0
 802c558:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 802c55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 802c55e:	2b00      	cmp	r3, #0
 802c560:	d130      	bne.n	802c5c4 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 802c562:	7c3b      	ldrb	r3, [r7, #16]
 802c564:	b21a      	sxth	r2, r3
 802c566:	f107 0310 	add.w	r3, r7, #16
 802c56a:	3301      	adds	r3, #1
 802c56c:	781b      	ldrb	r3, [r3, #0]
 802c56e:	021b      	lsls	r3, r3, #8
 802c570:	b21b      	sxth	r3, r3
 802c572:	4313      	orrs	r3, r2
 802c574:	b21b      	sxth	r3, r3
 802c576:	b29a      	uxth	r2, r3
 802c578:	68fb      	ldr	r3, [r7, #12]
 802c57a:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 802c57c:	7cbb      	ldrb	r3, [r7, #18]
 802c57e:	b21a      	sxth	r2, r3
 802c580:	f107 0310 	add.w	r3, r7, #16
 802c584:	3302      	adds	r3, #2
 802c586:	3301      	adds	r3, #1
 802c588:	781b      	ldrb	r3, [r3, #0]
 802c58a:	021b      	lsls	r3, r3, #8
 802c58c:	b21b      	sxth	r3, r3
 802c58e:	4313      	orrs	r3, r2
 802c590:	b21b      	sxth	r3, r3
 802c592:	b29b      	uxth	r3, r3
 802c594:	461a      	mov	r2, r3
 802c596:	683b      	ldr	r3, [r7, #0]
 802c598:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 802c59a:	683b      	ldr	r3, [r7, #0]
 802c59c:	681b      	ldr	r3, [r3, #0]
 802c59e:	2b00      	cmp	r3, #0
 802c5a0:	d010      	beq.n	802c5c4 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 802c5a2:	683b      	ldr	r3, [r7, #0]
 802c5a4:	681b      	ldr	r3, [r3, #0]
 802c5a6:	687a      	ldr	r2, [r7, #4]
 802c5a8:	429a      	cmp	r2, r3
 802c5aa:	d202      	bcs.n	802c5b2 <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 802c5ac:	23fa      	movs	r3, #250	; 0xfa
 802c5ae:	75fb      	strb	r3, [r7, #23]
 802c5b0:	e008      	b.n	802c5c4 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 802c5b2:	683b      	ldr	r3, [r7, #0]
 802c5b4:	681a      	ldr	r2, [r3, #0]
 802c5b6:	6a3b      	ldr	r3, [r7, #32]
 802c5b8:	68b9      	ldr	r1, [r7, #8]
 802c5ba:	2003      	movs	r0, #3
 802c5bc:	f7ff fd6d 	bl	802c09a <bhy2_hif_get_regs>
 802c5c0:	4603      	mov	r3, r0
 802c5c2:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 802c5c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802c5c8:	4618      	mov	r0, r3
 802c5ca:	3718      	adds	r7, #24
 802c5cc:	46bd      	mov	sp, r7
 802c5ce:	bd80      	pop	{r7, pc}

0802c5d0 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 802c5d0:	b580      	push	{r7, lr}
 802c5d2:	b086      	sub	sp, #24
 802c5d4:	af02      	add	r7, sp, #8
 802c5d6:	60f8      	str	r0, [r7, #12]
 802c5d8:	60b9      	str	r1, [r7, #8]
 802c5da:	607a      	str	r2, [r7, #4]
 802c5dc:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 802c5de:	69bb      	ldr	r3, [r7, #24]
 802c5e0:	9301      	str	r3, [sp, #4]
 802c5e2:	683b      	ldr	r3, [r7, #0]
 802c5e4:	9300      	str	r3, [sp, #0]
 802c5e6:	687b      	ldr	r3, [r7, #4]
 802c5e8:	68ba      	ldr	r2, [r7, #8]
 802c5ea:	68f9      	ldr	r1, [r7, #12]
 802c5ec:	2003      	movs	r0, #3
 802c5ee:	f7ff fc89 	bl	802bf04 <bhy2_hif_get_fifo>
 802c5f2:	4603      	mov	r3, r0
}
 802c5f4:	4618      	mov	r0, r3
 802c5f6:	3710      	adds	r7, #16
 802c5f8:	46bd      	mov	sp, r7
 802c5fa:	bd80      	pop	{r7, pc}

0802c5fc <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 802c5fc:	b580      	push	{r7, lr}
 802c5fe:	b088      	sub	sp, #32
 802c600:	af00      	add	r7, sp, #0
 802c602:	4603      	mov	r3, r0
 802c604:	ed87 0a02 	vstr	s0, [r7, #8]
 802c608:	6079      	str	r1, [r7, #4]
 802c60a:	603a      	str	r2, [r7, #0]
 802c60c:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 802c60e:	68bb      	ldr	r3, [r7, #8]
 802c610:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 802c612:	7bfb      	ldrb	r3, [r7, #15]
 802c614:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 802c616:	697b      	ldr	r3, [r7, #20]
 802c618:	b2db      	uxtb	r3, r3
 802c61a:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 802c61c:	697b      	ldr	r3, [r7, #20]
 802c61e:	0a1b      	lsrs	r3, r3, #8
 802c620:	b2db      	uxtb	r3, r3
 802c622:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 802c624:	697b      	ldr	r3, [r7, #20]
 802c626:	0c1b      	lsrs	r3, r3, #16
 802c628:	b2db      	uxtb	r3, r3
 802c62a:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 802c62c:	697b      	ldr	r3, [r7, #20]
 802c62e:	0e1b      	lsrs	r3, r3, #24
 802c630:	b2db      	uxtb	r3, r3
 802c632:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 802c634:	687b      	ldr	r3, [r7, #4]
 802c636:	b2db      	uxtb	r3, r3
 802c638:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 802c63a:	687b      	ldr	r3, [r7, #4]
 802c63c:	0a1b      	lsrs	r3, r3, #8
 802c63e:	b2db      	uxtb	r3, r3
 802c640:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 802c642:	687b      	ldr	r3, [r7, #4]
 802c644:	0c1b      	lsrs	r3, r3, #16
 802c646:	b2db      	uxtb	r3, r3
 802c648:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 802c64a:	f107 0118 	add.w	r1, r7, #24
 802c64e:	683b      	ldr	r3, [r7, #0]
 802c650:	2208      	movs	r2, #8
 802c652:	200d      	movs	r0, #13
 802c654:	f7ff fdaf 	bl	802c1b6 <bhy2_hif_exec_cmd>
 802c658:	4603      	mov	r3, r0
}
 802c65a:	4618      	mov	r0, r3
 802c65c:	3720      	adds	r7, #32
 802c65e:	46bd      	mov	sp, r7
 802c660:	bd80      	pop	{r7, pc}

0802c662 <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 802c662:	b580      	push	{r7, lr}
 802c664:	b090      	sub	sp, #64	; 0x40
 802c666:	af02      	add	r7, sp, #8
 802c668:	4603      	mov	r3, r0
 802c66a:	60b9      	str	r1, [r7, #8]
 802c66c:	607a      	str	r2, [r7, #4]
 802c66e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 802c670:	68bb      	ldr	r3, [r7, #8]
 802c672:	2b00      	cmp	r3, #0
 802c674:	f000 80da 	beq.w	802c82c <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 802c678:	7bfb      	ldrb	r3, [r7, #15]
 802c67a:	2bf5      	cmp	r3, #245	; 0xf5
 802c67c:	d903      	bls.n	802c686 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 802c67e:	23fe      	movs	r3, #254	; 0xfe
 802c680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802c684:	e0d5      	b.n	802c832 <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 802c686:	7bfb      	ldrb	r3, [r7, #15]
 802c688:	b29b      	uxth	r3, r3
 802c68a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 802c68e:	b298      	uxth	r0, r3
 802c690:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802c694:	f107 0114 	add.w	r1, r7, #20
 802c698:	687b      	ldr	r3, [r7, #4]
 802c69a:	9300      	str	r3, [sp, #0]
 802c69c:	4613      	mov	r3, r2
 802c69e:	221c      	movs	r2, #28
 802c6a0:	f7ff fda2 	bl	802c1e8 <bhy2_hif_get_parameter>
 802c6a4:	4603      	mov	r3, r0
 802c6a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 802c6aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 802c6ae:	2b00      	cmp	r3, #0
 802c6b0:	f040 80bf 	bne.w	802c832 <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 802c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c6b6:	2b1c      	cmp	r3, #28
 802c6b8:	d003      	beq.n	802c6c2 <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 802c6ba:	23fe      	movs	r3, #254	; 0xfe
 802c6bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802c6c0:	e0b7      	b.n	802c832 <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 802c6c2:	7d3a      	ldrb	r2, [r7, #20]
 802c6c4:	68bb      	ldr	r3, [r7, #8]
 802c6c6:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 802c6c8:	7d7a      	ldrb	r2, [r7, #21]
 802c6ca:	68bb      	ldr	r3, [r7, #8]
 802c6cc:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 802c6ce:	7dba      	ldrb	r2, [r7, #22]
 802c6d0:	68bb      	ldr	r3, [r7, #8]
 802c6d2:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 802c6d4:	7dfa      	ldrb	r2, [r7, #23]
 802c6d6:	68bb      	ldr	r3, [r7, #8]
 802c6d8:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 802c6da:	7e3a      	ldrb	r2, [r7, #24]
 802c6dc:	68bb      	ldr	r3, [r7, #8]
 802c6de:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 802c6e0:	7e7a      	ldrb	r2, [r7, #25]
 802c6e2:	68bb      	ldr	r3, [r7, #8]
 802c6e4:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 802c6e6:	7eba      	ldrb	r2, [r7, #26]
 802c6e8:	68bb      	ldr	r3, [r7, #8]
 802c6ea:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 802c6ec:	7efa      	ldrb	r2, [r7, #27]
 802c6ee:	68bb      	ldr	r3, [r7, #8]
 802c6f0:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 802c6f2:	7f3a      	ldrb	r2, [r7, #28]
 802c6f4:	68bb      	ldr	r3, [r7, #8]
 802c6f6:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 802c6f8:	7f7a      	ldrb	r2, [r7, #29]
 802c6fa:	68bb      	ldr	r3, [r7, #8]
 802c6fc:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 802c6fe:	7fba      	ldrb	r2, [r7, #30]
 802c700:	68bb      	ldr	r3, [r7, #8]
 802c702:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 802c704:	7ffa      	ldrb	r2, [r7, #31]
 802c706:	68bb      	ldr	r3, [r7, #8]
 802c708:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 802c70a:	f897 2020 	ldrb.w	r2, [r7, #32]
 802c70e:	68bb      	ldr	r3, [r7, #8]
 802c710:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 802c712:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802c716:	68bb      	ldr	r3, [r7, #8]
 802c718:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 802c71a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 802c71e:	68bb      	ldr	r3, [r7, #8]
 802c720:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 802c722:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 802c726:	68bb      	ldr	r3, [r7, #8]
 802c728:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 802c72a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802c72e:	68bb      	ldr	r3, [r7, #8]
 802c730:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 802c732:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 802c736:	68bb      	ldr	r3, [r7, #8]
 802c738:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 802c73a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c73e:	68bb      	ldr	r3, [r7, #8]
 802c740:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 802c742:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c746:	68bb      	ldr	r3, [r7, #8]
 802c748:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 802c74a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802c74e:	68bb      	ldr	r3, [r7, #8]
 802c750:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 802c752:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 802c756:	68bb      	ldr	r3, [r7, #8]
 802c758:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 802c75a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 802c75e:	68bb      	ldr	r3, [r7, #8]
 802c760:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 802c762:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 802c766:	68bb      	ldr	r3, [r7, #8]
 802c768:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 802c76a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802c76e:	68bb      	ldr	r3, [r7, #8]
 802c770:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 802c772:	68bb      	ldr	r3, [r7, #8]
 802c774:	791b      	ldrb	r3, [r3, #4]
 802c776:	b21a      	sxth	r2, r3
 802c778:	68bb      	ldr	r3, [r7, #8]
 802c77a:	795b      	ldrb	r3, [r3, #5]
 802c77c:	021b      	lsls	r3, r3, #8
 802c77e:	b21b      	sxth	r3, r3
 802c780:	4313      	orrs	r3, r2
 802c782:	b21b      	sxth	r3, r3
 802c784:	b29a      	uxth	r2, r3
 802c786:	68bb      	ldr	r3, [r7, #8]
 802c788:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 802c78a:	68bb      	ldr	r3, [r7, #8]
 802c78c:	799b      	ldrb	r3, [r3, #6]
 802c78e:	b21a      	sxth	r2, r3
 802c790:	68bb      	ldr	r3, [r7, #8]
 802c792:	79db      	ldrb	r3, [r3, #7]
 802c794:	021b      	lsls	r3, r3, #8
 802c796:	b21b      	sxth	r3, r3
 802c798:	4313      	orrs	r3, r2
 802c79a:	b21b      	sxth	r3, r3
 802c79c:	b29a      	uxth	r2, r3
 802c79e:	68bb      	ldr	r3, [r7, #8]
 802c7a0:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 802c7a2:	68bb      	ldr	r3, [r7, #8]
 802c7a4:	7a1b      	ldrb	r3, [r3, #8]
 802c7a6:	461a      	mov	r2, r3
 802c7a8:	68bb      	ldr	r3, [r7, #8]
 802c7aa:	7a5b      	ldrb	r3, [r3, #9]
 802c7ac:	021b      	lsls	r3, r3, #8
 802c7ae:	431a      	orrs	r2, r3
 802c7b0:	68bb      	ldr	r3, [r7, #8]
 802c7b2:	7a9b      	ldrb	r3, [r3, #10]
 802c7b4:	041b      	lsls	r3, r3, #16
 802c7b6:	431a      	orrs	r2, r3
 802c7b8:	68bb      	ldr	r3, [r7, #8]
 802c7ba:	7adb      	ldrb	r3, [r3, #11]
 802c7bc:	061b      	lsls	r3, r3, #24
 802c7be:	431a      	orrs	r2, r3
 802c7c0:	68bb      	ldr	r3, [r7, #8]
 802c7c2:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 802c7c4:	68bb      	ldr	r3, [r7, #8]
 802c7c6:	7b1b      	ldrb	r3, [r3, #12]
 802c7c8:	461a      	mov	r2, r3
 802c7ca:	68bb      	ldr	r3, [r7, #8]
 802c7cc:	7b5b      	ldrb	r3, [r3, #13]
 802c7ce:	021b      	lsls	r3, r3, #8
 802c7d0:	431a      	orrs	r2, r3
 802c7d2:	68bb      	ldr	r3, [r7, #8]
 802c7d4:	7b9b      	ldrb	r3, [r3, #14]
 802c7d6:	041b      	lsls	r3, r3, #16
 802c7d8:	431a      	orrs	r2, r3
 802c7da:	68bb      	ldr	r3, [r7, #8]
 802c7dc:	7bdb      	ldrb	r3, [r3, #15]
 802c7de:	061b      	lsls	r3, r3, #24
 802c7e0:	431a      	orrs	r2, r3
 802c7e2:	68bb      	ldr	r3, [r7, #8]
 802c7e4:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 802c7e6:	68bb      	ldr	r3, [r7, #8]
 802c7e8:	7c1b      	ldrb	r3, [r3, #16]
 802c7ea:	461a      	mov	r2, r3
 802c7ec:	68bb      	ldr	r3, [r7, #8]
 802c7ee:	7c5b      	ldrb	r3, [r3, #17]
 802c7f0:	021b      	lsls	r3, r3, #8
 802c7f2:	431a      	orrs	r2, r3
 802c7f4:	68bb      	ldr	r3, [r7, #8]
 802c7f6:	7c9b      	ldrb	r3, [r3, #18]
 802c7f8:	041b      	lsls	r3, r3, #16
 802c7fa:	431a      	orrs	r2, r3
 802c7fc:	68bb      	ldr	r3, [r7, #8]
 802c7fe:	7cdb      	ldrb	r3, [r3, #19]
 802c800:	061b      	lsls	r3, r3, #24
 802c802:	431a      	orrs	r2, r3
 802c804:	68bb      	ldr	r3, [r7, #8]
 802c806:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 802c808:	68bb      	ldr	r3, [r7, #8]
 802c80a:	7e1b      	ldrb	r3, [r3, #24]
 802c80c:	461a      	mov	r2, r3
 802c80e:	68bb      	ldr	r3, [r7, #8]
 802c810:	7e5b      	ldrb	r3, [r3, #25]
 802c812:	021b      	lsls	r3, r3, #8
 802c814:	431a      	orrs	r2, r3
 802c816:	68bb      	ldr	r3, [r7, #8]
 802c818:	7e9b      	ldrb	r3, [r3, #26]
 802c81a:	041b      	lsls	r3, r3, #16
 802c81c:	431a      	orrs	r2, r3
 802c81e:	68bb      	ldr	r3, [r7, #8]
 802c820:	7edb      	ldrb	r3, [r3, #27]
 802c822:	061b      	lsls	r3, r3, #24
 802c824:	431a      	orrs	r2, r3
 802c826:	68bb      	ldr	r3, [r7, #8]
 802c828:	619a      	str	r2, [r3, #24]
 802c82a:	e002      	b.n	802c832 <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 802c82c:	23ff      	movs	r3, #255	; 0xff
 802c82e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 802c832:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 802c836:	4618      	mov	r0, r3
 802c838:	3738      	adds	r7, #56	; 0x38
 802c83a:	46bd      	mov	sp, r7
 802c83c:	bd80      	pop	{r7, pc}

0802c83e <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 802c83e:	b480      	push	{r7}
 802c840:	b083      	sub	sp, #12
 802c842:	af00      	add	r7, sp, #0
 802c844:	6078      	str	r0, [r7, #4]
 802c846:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 802c848:	687b      	ldr	r3, [r7, #4]
 802c84a:	781b      	ldrb	r3, [r3, #0]
 802c84c:	b21a      	sxth	r2, r3
 802c84e:	687b      	ldr	r3, [r7, #4]
 802c850:	3301      	adds	r3, #1
 802c852:	781b      	ldrb	r3, [r3, #0]
 802c854:	021b      	lsls	r3, r3, #8
 802c856:	b21b      	sxth	r3, r3
 802c858:	4313      	orrs	r3, r2
 802c85a:	b21a      	sxth	r2, r3
 802c85c:	683b      	ldr	r3, [r7, #0]
 802c85e:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 802c860:	687b      	ldr	r3, [r7, #4]
 802c862:	3302      	adds	r3, #2
 802c864:	781b      	ldrb	r3, [r3, #0]
 802c866:	b21a      	sxth	r2, r3
 802c868:	687b      	ldr	r3, [r7, #4]
 802c86a:	3303      	adds	r3, #3
 802c86c:	781b      	ldrb	r3, [r3, #0]
 802c86e:	021b      	lsls	r3, r3, #8
 802c870:	b21b      	sxth	r3, r3
 802c872:	4313      	orrs	r3, r2
 802c874:	b21a      	sxth	r2, r3
 802c876:	683b      	ldr	r3, [r7, #0]
 802c878:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 802c87a:	687b      	ldr	r3, [r7, #4]
 802c87c:	3304      	adds	r3, #4
 802c87e:	781b      	ldrb	r3, [r3, #0]
 802c880:	b21a      	sxth	r2, r3
 802c882:	687b      	ldr	r3, [r7, #4]
 802c884:	3305      	adds	r3, #5
 802c886:	781b      	ldrb	r3, [r3, #0]
 802c888:	021b      	lsls	r3, r3, #8
 802c88a:	b21b      	sxth	r3, r3
 802c88c:	4313      	orrs	r3, r2
 802c88e:	b21a      	sxth	r2, r3
 802c890:	683b      	ldr	r3, [r7, #0]
 802c892:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 802c894:	687b      	ldr	r3, [r7, #4]
 802c896:	3306      	adds	r3, #6
 802c898:	781b      	ldrb	r3, [r3, #0]
 802c89a:	b21a      	sxth	r2, r3
 802c89c:	687b      	ldr	r3, [r7, #4]
 802c89e:	3307      	adds	r3, #7
 802c8a0:	781b      	ldrb	r3, [r3, #0]
 802c8a2:	021b      	lsls	r3, r3, #8
 802c8a4:	b21b      	sxth	r3, r3
 802c8a6:	4313      	orrs	r3, r2
 802c8a8:	b21a      	sxth	r2, r3
 802c8aa:	683b      	ldr	r3, [r7, #0]
 802c8ac:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 802c8ae:	687b      	ldr	r3, [r7, #4]
 802c8b0:	3308      	adds	r3, #8
 802c8b2:	781b      	ldrb	r3, [r3, #0]
 802c8b4:	b21a      	sxth	r2, r3
 802c8b6:	687b      	ldr	r3, [r7, #4]
 802c8b8:	3309      	adds	r3, #9
 802c8ba:	781b      	ldrb	r3, [r3, #0]
 802c8bc:	021b      	lsls	r3, r3, #8
 802c8be:	b21b      	sxth	r3, r3
 802c8c0:	4313      	orrs	r3, r2
 802c8c2:	b21b      	sxth	r3, r3
 802c8c4:	b29a      	uxth	r2, r3
 802c8c6:	683b      	ldr	r3, [r7, #0]
 802c8c8:	811a      	strh	r2, [r3, #8]
}
 802c8ca:	bf00      	nop
 802c8cc:	370c      	adds	r7, #12
 802c8ce:	46bd      	mov	sp, r7
 802c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8d4:	4770      	bx	lr
	...

0802c8d8 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 802c8d8:	b580      	push	{r7, lr}
 802c8da:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 802c8dc:	4b12      	ldr	r3, [pc, #72]	; (802c928 <MX_COMP2_Init+0x50>)
 802c8de:	4a13      	ldr	r2, [pc, #76]	; (802c92c <MX_COMP2_Init+0x54>)
 802c8e0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 802c8e2:	4b11      	ldr	r3, [pc, #68]	; (802c928 <MX_COMP2_Init+0x50>)
 802c8e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 802c8e8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 802c8ea:	4b0f      	ldr	r3, [pc, #60]	; (802c928 <MX_COMP2_Init+0x50>)
 802c8ec:	2200      	movs	r2, #0
 802c8ee:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 802c8f0:	4b0d      	ldr	r3, [pc, #52]	; (802c928 <MX_COMP2_Init+0x50>)
 802c8f2:	2200      	movs	r2, #0
 802c8f4:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 802c8f6:	4b0c      	ldr	r3, [pc, #48]	; (802c928 <MX_COMP2_Init+0x50>)
 802c8f8:	2200      	movs	r2, #0
 802c8fa:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 802c8fc:	4b0a      	ldr	r3, [pc, #40]	; (802c928 <MX_COMP2_Init+0x50>)
 802c8fe:	2200      	movs	r2, #0
 802c900:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 802c902:	4b09      	ldr	r3, [pc, #36]	; (802c928 <MX_COMP2_Init+0x50>)
 802c904:	2200      	movs	r2, #0
 802c906:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 802c908:	4b07      	ldr	r3, [pc, #28]	; (802c928 <MX_COMP2_Init+0x50>)
 802c90a:	2200      	movs	r2, #0
 802c90c:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 802c90e:	4b06      	ldr	r3, [pc, #24]	; (802c928 <MX_COMP2_Init+0x50>)
 802c910:	2231      	movs	r2, #49	; 0x31
 802c912:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 802c914:	4804      	ldr	r0, [pc, #16]	; (802c928 <MX_COMP2_Init+0x50>)
 802c916:	f001 fd1f 	bl	802e358 <HAL_COMP_Init>
 802c91a:	4603      	mov	r3, r0
 802c91c:	2b00      	cmp	r3, #0
 802c91e:	d001      	beq.n	802c924 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 802c920:	f000 fc28 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 802c924:	bf00      	nop
 802c926:	bd80      	pop	{r7, pc}
 802c928:	24001520 	.word	0x24001520
 802c92c:	58003810 	.word	0x58003810

0802c930 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 802c930:	b580      	push	{r7, lr}
 802c932:	b08a      	sub	sp, #40	; 0x28
 802c934:	af00      	add	r7, sp, #0
 802c936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802c938:	f107 0314 	add.w	r3, r7, #20
 802c93c:	2200      	movs	r2, #0
 802c93e:	601a      	str	r2, [r3, #0]
 802c940:	605a      	str	r2, [r3, #4]
 802c942:	609a      	str	r2, [r3, #8]
 802c944:	60da      	str	r2, [r3, #12]
 802c946:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 802c948:	687b      	ldr	r3, [r7, #4]
 802c94a:	681b      	ldr	r3, [r3, #0]
 802c94c:	4a1c      	ldr	r2, [pc, #112]	; (802c9c0 <HAL_COMP_MspInit+0x90>)
 802c94e:	4293      	cmp	r3, r2
 802c950:	d132      	bne.n	802c9b8 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 802c952:	4b1c      	ldr	r3, [pc, #112]	; (802c9c4 <HAL_COMP_MspInit+0x94>)
 802c954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802c958:	4a1a      	ldr	r2, [pc, #104]	; (802c9c4 <HAL_COMP_MspInit+0x94>)
 802c95a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802c95e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802c962:	4b18      	ldr	r3, [pc, #96]	; (802c9c4 <HAL_COMP_MspInit+0x94>)
 802c964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802c968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802c96c:	613b      	str	r3, [r7, #16]
 802c96e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 802c970:	4b14      	ldr	r3, [pc, #80]	; (802c9c4 <HAL_COMP_MspInit+0x94>)
 802c972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c976:	4a13      	ldr	r2, [pc, #76]	; (802c9c4 <HAL_COMP_MspInit+0x94>)
 802c978:	f043 0310 	orr.w	r3, r3, #16
 802c97c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802c980:	4b10      	ldr	r3, [pc, #64]	; (802c9c4 <HAL_COMP_MspInit+0x94>)
 802c982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802c986:	f003 0310 	and.w	r3, r3, #16
 802c98a:	60fb      	str	r3, [r7, #12]
 802c98c:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802c98e:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802c994:	2303      	movs	r3, #3
 802c996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802c998:	2300      	movs	r3, #0
 802c99a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802c99c:	f107 0314 	add.w	r3, r7, #20
 802c9a0:	4619      	mov	r1, r3
 802c9a2:	4809      	ldr	r0, [pc, #36]	; (802c9c8 <HAL_COMP_MspInit+0x98>)
 802c9a4:	f004 ffee 	bl	8031984 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 802c9a8:	2200      	movs	r2, #0
 802c9aa:	2104      	movs	r1, #4
 802c9ac:	2089      	movs	r0, #137	; 0x89
 802c9ae:	f001 ff96 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802c9b2:	2089      	movs	r0, #137	; 0x89
 802c9b4:	f001 ffad 	bl	802e912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 802c9b8:	bf00      	nop
 802c9ba:	3728      	adds	r7, #40	; 0x28
 802c9bc:	46bd      	mov	sp, r7
 802c9be:	bd80      	pop	{r7, pc}
 802c9c0:	58003810 	.word	0x58003810
 802c9c4:	58024400 	.word	0x58024400
 802c9c8:	58021000 	.word	0x58021000

0802c9cc <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 802c9cc:	b580      	push	{r7, lr}
 802c9ce:	b08a      	sub	sp, #40	; 0x28
 802c9d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802c9d2:	1d3b      	adds	r3, r7, #4
 802c9d4:	2224      	movs	r2, #36	; 0x24
 802c9d6:	2100      	movs	r1, #0
 802c9d8:	4618      	mov	r0, r3
 802c9da:	f012 fd8d 	bl	803f4f8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 802c9de:	4b12      	ldr	r3, [pc, #72]	; (802ca28 <MX_DAC1_Init+0x5c>)
 802c9e0:	4a12      	ldr	r2, [pc, #72]	; (802ca2c <MX_DAC1_Init+0x60>)
 802c9e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 802c9e4:	4810      	ldr	r0, [pc, #64]	; (802ca28 <MX_DAC1_Init+0x5c>)
 802c9e6:	f001 ffae 	bl	802e946 <HAL_DAC_Init>
 802c9ea:	4603      	mov	r3, r0
 802c9ec:	2b00      	cmp	r3, #0
 802c9ee:	d001      	beq.n	802c9f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 802c9f0:	f000 fbc0 	bl	802d174 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 802c9f4:	2300      	movs	r3, #0
 802c9f6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 802c9f8:	2300      	movs	r3, #0
 802c9fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 802c9fc:	2302      	movs	r3, #2
 802c9fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 802ca00:	2302      	movs	r3, #2
 802ca02:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 802ca04:	2300      	movs	r3, #0
 802ca06:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 802ca08:	1d3b      	adds	r3, r7, #4
 802ca0a:	2200      	movs	r2, #0
 802ca0c:	4619      	mov	r1, r3
 802ca0e:	4806      	ldr	r0, [pc, #24]	; (802ca28 <MX_DAC1_Init+0x5c>)
 802ca10:	f002 f832 	bl	802ea78 <HAL_DAC_ConfigChannel>
 802ca14:	4603      	mov	r3, r0
 802ca16:	2b00      	cmp	r3, #0
 802ca18:	d001      	beq.n	802ca1e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 802ca1a:	f000 fbab 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 802ca1e:	bf00      	nop
 802ca20:	3728      	adds	r7, #40	; 0x28
 802ca22:	46bd      	mov	sp, r7
 802ca24:	bd80      	pop	{r7, pc}
 802ca26:	bf00      	nop
 802ca28:	2400154c 	.word	0x2400154c
 802ca2c:	40007400 	.word	0x40007400

0802ca30 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 802ca30:	b480      	push	{r7}
 802ca32:	b085      	sub	sp, #20
 802ca34:	af00      	add	r7, sp, #0
 802ca36:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 802ca38:	687b      	ldr	r3, [r7, #4]
 802ca3a:	681b      	ldr	r3, [r3, #0]
 802ca3c:	4a0b      	ldr	r2, [pc, #44]	; (802ca6c <HAL_DAC_MspInit+0x3c>)
 802ca3e:	4293      	cmp	r3, r2
 802ca40:	d10e      	bne.n	802ca60 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 802ca42:	4b0b      	ldr	r3, [pc, #44]	; (802ca70 <HAL_DAC_MspInit+0x40>)
 802ca44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ca48:	4a09      	ldr	r2, [pc, #36]	; (802ca70 <HAL_DAC_MspInit+0x40>)
 802ca4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802ca4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802ca52:	4b07      	ldr	r3, [pc, #28]	; (802ca70 <HAL_DAC_MspInit+0x40>)
 802ca54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802ca58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802ca5c:	60fb      	str	r3, [r7, #12]
 802ca5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 802ca60:	bf00      	nop
 802ca62:	3714      	adds	r7, #20
 802ca64:	46bd      	mov	sp, r7
 802ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ca6a:	4770      	bx	lr
 802ca6c:	40007400 	.word	0x40007400
 802ca70:	58024400 	.word	0x58024400

0802ca74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802ca74:	b580      	push	{r7, lr}
 802ca76:	b082      	sub	sp, #8
 802ca78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 802ca7a:	4b19      	ldr	r3, [pc, #100]	; (802cae0 <MX_DMA_Init+0x6c>)
 802ca7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802ca80:	4a17      	ldr	r2, [pc, #92]	; (802cae0 <MX_DMA_Init+0x6c>)
 802ca82:	f043 0301 	orr.w	r3, r3, #1
 802ca86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 802ca8a:	4b15      	ldr	r3, [pc, #84]	; (802cae0 <MX_DMA_Init+0x6c>)
 802ca8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 802ca90:	f003 0301 	and.w	r3, r3, #1
 802ca94:	607b      	str	r3, [r7, #4]
 802ca96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 802ca98:	2200      	movs	r2, #0
 802ca9a:	2100      	movs	r1, #0
 802ca9c:	200b      	movs	r0, #11
 802ca9e:	f001 ff1e 	bl	802e8de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802caa2:	200b      	movs	r0, #11
 802caa4:	f001 ff35 	bl	802e912 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 802caa8:	2200      	movs	r2, #0
 802caaa:	2100      	movs	r1, #0
 802caac:	200c      	movs	r0, #12
 802caae:	f001 ff16 	bl	802e8de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802cab2:	200c      	movs	r0, #12
 802cab4:	f001 ff2d 	bl	802e912 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 802cab8:	2200      	movs	r2, #0
 802caba:	2100      	movs	r1, #0
 802cabc:	200f      	movs	r0, #15
 802cabe:	f001 ff0e 	bl	802e8de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802cac2:	200f      	movs	r0, #15
 802cac4:	f001 ff25 	bl	802e912 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 802cac8:	2200      	movs	r2, #0
 802caca:	2100      	movs	r1, #0
 802cacc:	2010      	movs	r0, #16
 802cace:	f001 ff06 	bl	802e8de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802cad2:	2010      	movs	r0, #16
 802cad4:	f001 ff1d 	bl	802e912 <HAL_NVIC_EnableIRQ>

}
 802cad8:	bf00      	nop
 802cada:	3708      	adds	r7, #8
 802cadc:	46bd      	mov	sp, r7
 802cade:	bd80      	pop	{r7, pc}
 802cae0:	58024400 	.word	0x58024400

0802cae4 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 802cae4:	b580      	push	{r7, lr}
 802cae6:	b08a      	sub	sp, #40	; 0x28
 802cae8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802caea:	f107 0314 	add.w	r3, r7, #20
 802caee:	2200      	movs	r2, #0
 802caf0:	601a      	str	r2, [r3, #0]
 802caf2:	605a      	str	r2, [r3, #4]
 802caf4:	609a      	str	r2, [r3, #8]
 802caf6:	60da      	str	r2, [r3, #12]
 802caf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802cafa:	4b3b      	ldr	r3, [pc, #236]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cafc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb00:	4a39      	ldr	r2, [pc, #228]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb02:	f043 0304 	orr.w	r3, r3, #4
 802cb06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802cb0a:	4b37      	ldr	r3, [pc, #220]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb10:	f003 0304 	and.w	r3, r3, #4
 802cb14:	613b      	str	r3, [r7, #16]
 802cb16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802cb18:	4b33      	ldr	r3, [pc, #204]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb1e:	4a32      	ldr	r2, [pc, #200]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb20:	f043 0301 	orr.w	r3, r3, #1
 802cb24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802cb28:	4b2f      	ldr	r3, [pc, #188]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb2e:	f003 0301 	and.w	r3, r3, #1
 802cb32:	60fb      	str	r3, [r7, #12]
 802cb34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802cb36:	4b2c      	ldr	r3, [pc, #176]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb3c:	4a2a      	ldr	r2, [pc, #168]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb3e:	f043 0310 	orr.w	r3, r3, #16
 802cb42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802cb46:	4b28      	ldr	r3, [pc, #160]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb4c:	f003 0310 	and.w	r3, r3, #16
 802cb50:	60bb      	str	r3, [r7, #8]
 802cb52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802cb54:	4b24      	ldr	r3, [pc, #144]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb5a:	4a23      	ldr	r2, [pc, #140]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb5c:	f043 0302 	orr.w	r3, r3, #2
 802cb60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802cb64:	4b20      	ldr	r3, [pc, #128]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb6a:	f003 0302 	and.w	r3, r3, #2
 802cb6e:	607b      	str	r3, [r7, #4]
 802cb70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802cb72:	4b1d      	ldr	r3, [pc, #116]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb78:	4a1b      	ldr	r2, [pc, #108]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb7a:	f043 0308 	orr.w	r3, r3, #8
 802cb7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802cb82:	4b19      	ldr	r3, [pc, #100]	; (802cbe8 <MX_GPIO_Init+0x104>)
 802cb84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802cb88:	f003 0308 	and.w	r3, r3, #8
 802cb8c:	603b      	str	r3, [r7, #0]
 802cb8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 802cb90:	2200      	movs	r2, #0
 802cb92:	2101      	movs	r1, #1
 802cb94:	4815      	ldr	r0, [pc, #84]	; (802cbec <MX_GPIO_Init+0x108>)
 802cb96:	f005 f8a5 	bl	8031ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 802cb9a:	2200      	movs	r2, #0
 802cb9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802cba0:	4813      	ldr	r0, [pc, #76]	; (802cbf0 <MX_GPIO_Init+0x10c>)
 802cba2:	f005 f89f 	bl	8031ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802cba6:	2301      	movs	r3, #1
 802cba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802cbaa:	2301      	movs	r3, #1
 802cbac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802cbae:	2302      	movs	r3, #2
 802cbb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802cbb2:	2303      	movs	r3, #3
 802cbb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802cbb6:	f107 0314 	add.w	r3, r7, #20
 802cbba:	4619      	mov	r1, r3
 802cbbc:	480b      	ldr	r0, [pc, #44]	; (802cbec <MX_GPIO_Init+0x108>)
 802cbbe:	f004 fee1 	bl	8031984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802cbc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802cbc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802cbc8:	2301      	movs	r3, #1
 802cbca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 802cbcc:	2302      	movs	r3, #2
 802cbce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802cbd0:	2303      	movs	r3, #3
 802cbd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 802cbd4:	f107 0314 	add.w	r3, r7, #20
 802cbd8:	4619      	mov	r1, r3
 802cbda:	4805      	ldr	r0, [pc, #20]	; (802cbf0 <MX_GPIO_Init+0x10c>)
 802cbdc:	f004 fed2 	bl	8031984 <HAL_GPIO_Init>

}
 802cbe0:	bf00      	nop
 802cbe2:	3728      	adds	r7, #40	; 0x28
 802cbe4:	46bd      	mov	sp, r7
 802cbe6:	bd80      	pop	{r7, pc}
 802cbe8:	58024400 	.word	0x58024400
 802cbec:	58020800 	.word	0x58020800
 802cbf0:	58021000 	.word	0x58021000

0802cbf4 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 802cbf4:	b580      	push	{r7, lr}
 802cbf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 802cbf8:	4b1b      	ldr	r3, [pc, #108]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cbfa:	4a1c      	ldr	r2, [pc, #112]	; (802cc6c <MX_I2C2_Init+0x78>)
 802cbfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 802cbfe:	4b1a      	ldr	r3, [pc, #104]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc00:	4a1b      	ldr	r2, [pc, #108]	; (802cc70 <MX_I2C2_Init+0x7c>)
 802cc02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 802cc04:	4b18      	ldr	r3, [pc, #96]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc06:	2200      	movs	r2, #0
 802cc08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802cc0a:	4b17      	ldr	r3, [pc, #92]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc0c:	2201      	movs	r2, #1
 802cc0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802cc10:	4b15      	ldr	r3, [pc, #84]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc12:	2200      	movs	r2, #0
 802cc14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 802cc16:	4b14      	ldr	r3, [pc, #80]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc18:	2200      	movs	r2, #0
 802cc1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 802cc1c:	4b12      	ldr	r3, [pc, #72]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc1e:	2200      	movs	r2, #0
 802cc20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802cc22:	4b11      	ldr	r3, [pc, #68]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc24:	2200      	movs	r2, #0
 802cc26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802cc28:	4b0f      	ldr	r3, [pc, #60]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc2a:	2200      	movs	r2, #0
 802cc2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 802cc2e:	480e      	ldr	r0, [pc, #56]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc30:	f005 f872 	bl	8031d18 <HAL_I2C_Init>
 802cc34:	4603      	mov	r3, r0
 802cc36:	2b00      	cmp	r3, #0
 802cc38:	d001      	beq.n	802cc3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 802cc3a:	f000 fa9b 	bl	802d174 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 802cc3e:	2100      	movs	r1, #0
 802cc40:	4809      	ldr	r0, [pc, #36]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc42:	f005 ff7e 	bl	8032b42 <HAL_I2CEx_ConfigAnalogFilter>
 802cc46:	4603      	mov	r3, r0
 802cc48:	2b00      	cmp	r3, #0
 802cc4a:	d001      	beq.n	802cc50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 802cc4c:	f000 fa92 	bl	802d174 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 802cc50:	2100      	movs	r1, #0
 802cc52:	4805      	ldr	r0, [pc, #20]	; (802cc68 <MX_I2C2_Init+0x74>)
 802cc54:	f005 ffc0 	bl	8032bd8 <HAL_I2CEx_ConfigDigitalFilter>
 802cc58:	4603      	mov	r3, r0
 802cc5a:	2b00      	cmp	r3, #0
 802cc5c:	d001      	beq.n	802cc62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 802cc5e:	f000 fa89 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802cc62:	bf00      	nop
 802cc64:	bd80      	pop	{r7, pc}
 802cc66:	bf00      	nop
 802cc68:	24001560 	.word	0x24001560
 802cc6c:	40005800 	.word	0x40005800
 802cc70:	00b03fdb 	.word	0x00b03fdb

0802cc74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 802cc74:	b580      	push	{r7, lr}
 802cc76:	b0b8      	sub	sp, #224	; 0xe0
 802cc78:	af00      	add	r7, sp, #0
 802cc7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802cc7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802cc80:	2200      	movs	r2, #0
 802cc82:	601a      	str	r2, [r3, #0]
 802cc84:	605a      	str	r2, [r3, #4]
 802cc86:	609a      	str	r2, [r3, #8]
 802cc88:	60da      	str	r2, [r3, #12]
 802cc8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802cc8c:	f107 0310 	add.w	r3, r7, #16
 802cc90:	22bc      	movs	r2, #188	; 0xbc
 802cc92:	2100      	movs	r1, #0
 802cc94:	4618      	mov	r0, r3
 802cc96:	f012 fc2f 	bl	803f4f8 <memset>
  if(i2cHandle->Instance==I2C2)
 802cc9a:	687b      	ldr	r3, [r7, #4]
 802cc9c:	681b      	ldr	r3, [r3, #0]
 802cc9e:	4a5a      	ldr	r2, [pc, #360]	; (802ce08 <HAL_I2C_MspInit+0x194>)
 802cca0:	4293      	cmp	r3, r2
 802cca2:	f040 80ad 	bne.w	802ce00 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802cca6:	2308      	movs	r3, #8
 802cca8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 802ccaa:	2300      	movs	r3, #0
 802ccac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802ccb0:	f107 0310 	add.w	r3, r7, #16
 802ccb4:	4618      	mov	r0, r3
 802ccb6:	f008 fab5 	bl	8035224 <HAL_RCCEx_PeriphCLKConfig>
 802ccba:	4603      	mov	r3, r0
 802ccbc:	2b00      	cmp	r3, #0
 802ccbe:	d001      	beq.n	802ccc4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 802ccc0:	f000 fa58 	bl	802d174 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802ccc4:	4b51      	ldr	r3, [pc, #324]	; (802ce0c <HAL_I2C_MspInit+0x198>)
 802ccc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ccca:	4a50      	ldr	r2, [pc, #320]	; (802ce0c <HAL_I2C_MspInit+0x198>)
 802cccc:	f043 0302 	orr.w	r3, r3, #2
 802ccd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802ccd4:	4b4d      	ldr	r3, [pc, #308]	; (802ce0c <HAL_I2C_MspInit+0x198>)
 802ccd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802ccda:	f003 0302 	and.w	r3, r3, #2
 802ccde:	60fb      	str	r3, [r7, #12]
 802cce0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802cce2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802cce6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802ccea:	2312      	movs	r3, #18
 802ccec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ccf0:	2300      	movs	r3, #0
 802ccf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ccf6:	2300      	movs	r3, #0
 802ccf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 802ccfc:	2304      	movs	r3, #4
 802ccfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802cd02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802cd06:	4619      	mov	r1, r3
 802cd08:	4841      	ldr	r0, [pc, #260]	; (802ce10 <HAL_I2C_MspInit+0x19c>)
 802cd0a:	f004 fe3b 	bl	8031984 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 802cd0e:	4b3f      	ldr	r3, [pc, #252]	; (802ce0c <HAL_I2C_MspInit+0x198>)
 802cd10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802cd14:	4a3d      	ldr	r2, [pc, #244]	; (802ce0c <HAL_I2C_MspInit+0x198>)
 802cd16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802cd1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802cd1e:	4b3b      	ldr	r3, [pc, #236]	; (802ce0c <HAL_I2C_MspInit+0x198>)
 802cd20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802cd24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802cd28:	60bb      	str	r3, [r7, #8]
 802cd2a:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 802cd2c:	4b39      	ldr	r3, [pc, #228]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd2e:	4a3a      	ldr	r2, [pc, #232]	; (802ce18 <HAL_I2C_MspInit+0x1a4>)
 802cd30:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 802cd32:	4b38      	ldr	r3, [pc, #224]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd34:	2223      	movs	r2, #35	; 0x23
 802cd36:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802cd38:	4b36      	ldr	r3, [pc, #216]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd3a:	2200      	movs	r2, #0
 802cd3c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802cd3e:	4b35      	ldr	r3, [pc, #212]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd40:	2200      	movs	r2, #0
 802cd42:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 802cd44:	4b33      	ldr	r3, [pc, #204]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802cd4a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802cd4c:	4b31      	ldr	r3, [pc, #196]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd4e:	2200      	movs	r2, #0
 802cd50:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802cd52:	4b30      	ldr	r3, [pc, #192]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd54:	2200      	movs	r2, #0
 802cd56:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 802cd58:	4b2e      	ldr	r3, [pc, #184]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd5a:	2200      	movs	r2, #0
 802cd5c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 802cd5e:	4b2d      	ldr	r3, [pc, #180]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd60:	2200      	movs	r2, #0
 802cd62:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802cd64:	4b2b      	ldr	r3, [pc, #172]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd66:	2200      	movs	r2, #0
 802cd68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 802cd6a:	482a      	ldr	r0, [pc, #168]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd6c:	f001 ffb4 	bl	802ecd8 <HAL_DMA_Init>
 802cd70:	4603      	mov	r3, r0
 802cd72:	2b00      	cmp	r3, #0
 802cd74:	d001      	beq.n	802cd7a <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 802cd76:	f000 f9fd 	bl	802d174 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 802cd7a:	687b      	ldr	r3, [r7, #4]
 802cd7c:	4a25      	ldr	r2, [pc, #148]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd7e:	63da      	str	r2, [r3, #60]	; 0x3c
 802cd80:	4a24      	ldr	r2, [pc, #144]	; (802ce14 <HAL_I2C_MspInit+0x1a0>)
 802cd82:	687b      	ldr	r3, [r7, #4]
 802cd84:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 802cd86:	4b25      	ldr	r3, [pc, #148]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cd88:	4a25      	ldr	r2, [pc, #148]	; (802ce20 <HAL_I2C_MspInit+0x1ac>)
 802cd8a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 802cd8c:	4b23      	ldr	r3, [pc, #140]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cd8e:	2224      	movs	r2, #36	; 0x24
 802cd90:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802cd92:	4b22      	ldr	r3, [pc, #136]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cd94:	2240      	movs	r2, #64	; 0x40
 802cd96:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802cd98:	4b20      	ldr	r3, [pc, #128]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cd9a:	2200      	movs	r2, #0
 802cd9c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 802cd9e:	4b1f      	ldr	r3, [pc, #124]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cda0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802cda4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802cda6:	4b1d      	ldr	r3, [pc, #116]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cda8:	2200      	movs	r2, #0
 802cdaa:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802cdac:	4b1b      	ldr	r3, [pc, #108]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cdae:	2200      	movs	r2, #0
 802cdb0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802cdb2:	4b1a      	ldr	r3, [pc, #104]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cdb4:	2200      	movs	r2, #0
 802cdb6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 802cdb8:	4b18      	ldr	r3, [pc, #96]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cdba:	2200      	movs	r2, #0
 802cdbc:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802cdbe:	4b17      	ldr	r3, [pc, #92]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cdc0:	2200      	movs	r2, #0
 802cdc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 802cdc4:	4815      	ldr	r0, [pc, #84]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cdc6:	f001 ff87 	bl	802ecd8 <HAL_DMA_Init>
 802cdca:	4603      	mov	r3, r0
 802cdcc:	2b00      	cmp	r3, #0
 802cdce:	d001      	beq.n	802cdd4 <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 802cdd0:	f000 f9d0 	bl	802d174 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 802cdd4:	687b      	ldr	r3, [r7, #4]
 802cdd6:	4a11      	ldr	r2, [pc, #68]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cdd8:	639a      	str	r2, [r3, #56]	; 0x38
 802cdda:	4a10      	ldr	r2, [pc, #64]	; (802ce1c <HAL_I2C_MspInit+0x1a8>)
 802cddc:	687b      	ldr	r3, [r7, #4]
 802cdde:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 802cde0:	2200      	movs	r2, #0
 802cde2:	2100      	movs	r1, #0
 802cde4:	2021      	movs	r0, #33	; 0x21
 802cde6:	f001 fd7a 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 802cdea:	2021      	movs	r0, #33	; 0x21
 802cdec:	f001 fd91 	bl	802e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 802cdf0:	2200      	movs	r2, #0
 802cdf2:	2100      	movs	r1, #0
 802cdf4:	2022      	movs	r0, #34	; 0x22
 802cdf6:	f001 fd72 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 802cdfa:	2022      	movs	r0, #34	; 0x22
 802cdfc:	f001 fd89 	bl	802e912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 802ce00:	bf00      	nop
 802ce02:	37e0      	adds	r7, #224	; 0xe0
 802ce04:	46bd      	mov	sp, r7
 802ce06:	bd80      	pop	{r7, pc}
 802ce08:	40005800 	.word	0x40005800
 802ce0c:	58024400 	.word	0x58024400
 802ce10:	58020400 	.word	0x58020400
 802ce14:	240015ac 	.word	0x240015ac
 802ce18:	40020010 	.word	0x40020010
 802ce1c:	24001624 	.word	0x24001624
 802ce20:	40020028 	.word	0x40020028

0802ce24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802ce24:	b5b0      	push	{r4, r5, r7, lr}
 802ce26:	b090      	sub	sp, #64	; 0x40
 802ce28:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 802ce2a:	4b33      	ldr	r3, [pc, #204]	; (802cef8 <main+0xd4>)
 802ce2c:	4a33      	ldr	r2, [pc, #204]	; (802cefc <main+0xd8>)
 802ce2e:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802ce30:	f001 f9d0 	bl	802e1d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802ce34:	f000 f874 	bl	802cf20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802ce38:	f7ff fe54 	bl	802cae4 <MX_GPIO_Init>
  MX_DMA_Init();
 802ce3c:	f7ff fe1a 	bl	802ca74 <MX_DMA_Init>
  MX_I2C2_Init();
 802ce40:	f7ff fed8 	bl	802cbf4 <MX_I2C2_Init>
  MX_SPI1_Init();
 802ce44:	f000 f99c 	bl	802d180 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 802ce48:	f011 fd78 	bl	803e93c <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 802ce4c:	f000 ff4a 	bl	802dce4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 802ce50:	f000 fe52 	bl	802daf8 <MX_UART4_Init>
  MX_UART7_Init();
 802ce54:	f000 fea2 	bl	802db9c <MX_UART7_Init>
  MX_USART3_UART_Init();
 802ce58:	f000 ff90 	bl	802dd7c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 802ce5c:	f000 fd4c 	bl	802d8f8 <MX_TIM3_Init>
  MX_TIM2_Init();
 802ce60:	f000 fcfc 	bl	802d85c <MX_TIM2_Init>
  MX_TIM4_Init();
 802ce64:	f000 fd96 	bl	802d994 <MX_TIM4_Init>
  MX_COMP2_Init();
 802ce68:	f7ff fd36 	bl	802c8d8 <MX_COMP2_Init>
  MX_DAC1_Init();
 802ce6c:	f7ff fdae 	bl	802c9cc <MX_DAC1_Init>
  MX_UART8_Init();
 802ce70:	f000 fee2 	bl	802dc38 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 802ce74:	2100      	movs	r1, #0
 802ce76:	4822      	ldr	r0, [pc, #136]	; (802cf00 <main+0xdc>)
 802ce78:	f001 fd87 	bl	802e98a <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 802ce7c:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 802ce80:	2200      	movs	r2, #0
 802ce82:	2100      	movs	r1, #0
 802ce84:	481e      	ldr	r0, [pc, #120]	; (802cf00 <main+0xdc>)
 802ce86:	f001 fdd2 	bl	802ea2e <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 802ce8a:	481e      	ldr	r0, [pc, #120]	; (802cf04 <main+0xe0>)
 802ce8c:	f00a feb6 	bl	8037bfc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 802ce90:	481d      	ldr	r0, [pc, #116]	; (802cf08 <main+0xe4>)
 802ce92:	f00a feb3 	bl	8037bfc <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802ce96:	481d      	ldr	r0, [pc, #116]	; (802cf0c <main+0xe8>)
 802ce98:	f001 fb88 	bl	802e5ac <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 802ce9c:	4b1c      	ldr	r3, [pc, #112]	; (802cf10 <main+0xec>)
 802ce9e:	607b      	str	r3, [r7, #4]
	config.HeadStreamUart = &huart4;
 802cea0:	4b1c      	ldr	r3, [pc, #112]	; (802cf14 <main+0xf0>)
 802cea2:	60bb      	str	r3, [r7, #8]

	config.HeadTimeout = 10;
 802cea4:	230a      	movs	r3, #10
 802cea6:	60fb      	str	r3, [r7, #12]

	config.BodyUart = &huart8;
 802cea8:	4b1b      	ldr	r3, [pc, #108]	; (802cf18 <main+0xf4>)
 802ceaa:	613b      	str	r3, [r7, #16]
	config.BodyTimeout = 10;
 802ceac:	230a      	movs	r3, #10
 802ceae:	617b      	str	r3, [r7, #20]
	config.BodyPeriod = 20;
 802ceb0:	2314      	movs	r3, #20
 802ceb2:	763b      	strb	r3, [r7, #24]

	config.IMUSpi = &hspi1;
 802ceb4:	4b19      	ldr	r3, [pc, #100]	; (802cf1c <main+0xf8>)
 802ceb6:	61fb      	str	r3, [r7, #28]

	config.VersionMajor = 0;
 802ceb8:	2300      	movs	r3, #0
 802ceba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config.VersionMinor = 1;
 802cebe:	2301      	movs	r3, #1
 802cec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	config.StrobeOffset = 0;
 802cec4:	2300      	movs	r3, #0
 802cec6:	623b      	str	r3, [r7, #32]

	if (MotherboardInit(config))
 802cec8:	466d      	mov	r5, sp
 802ceca:	f107 0414 	add.w	r4, r7, #20
 802cece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802ced0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802ced2:	6823      	ldr	r3, [r4, #0]
 802ced4:	602b      	str	r3, [r5, #0]
 802ced6:	1d3b      	adds	r3, r7, #4
 802ced8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802ceda:	f7f6 f973 	bl	80231c4 <MotherboardInit>
 802cede:	4603      	mov	r3, r0
 802cee0:	2b00      	cmp	r3, #0
 802cee2:	d001      	beq.n	802cee8 <main+0xc4>
		return 1;
 802cee4:	2301      	movs	r3, #1
 802cee6:	e002      	b.n	802ceee <main+0xca>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 802cee8:	f7f6 f9c0 	bl	802326c <MotherboardTick>
 802ceec:	e7fc      	b.n	802cee8 <main+0xc4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 802ceee:	4618      	mov	r0, r3
 802cef0:	3728      	adds	r7, #40	; 0x28
 802cef2:	46bd      	mov	sp, r7
 802cef4:	bdb0      	pop	{r4, r5, r7, pc}
 802cef6:	bf00      	nop
 802cef8:	e000ed00 	.word	0xe000ed00
 802cefc:	08020000 	.word	0x08020000
 802cf00:	2400154c 	.word	0x2400154c
 802cf04:	24001864 	.word	0x24001864
 802cf08:	24001818 	.word	0x24001818
 802cf0c:	24001520 	.word	0x24001520
 802cf10:	24001b3c 	.word	0x24001b3c
 802cf14:	240018fc 	.word	0x240018fc
 802cf18:	24001a1c 	.word	0x24001a1c
 802cf1c:	2400169c 	.word	0x2400169c

0802cf20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802cf20:	b580      	push	{r7, lr}
 802cf22:	b09e      	sub	sp, #120	; 0x78
 802cf24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802cf26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802cf2a:	224c      	movs	r2, #76	; 0x4c
 802cf2c:	2100      	movs	r1, #0
 802cf2e:	4618      	mov	r0, r3
 802cf30:	f012 fae2 	bl	803f4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802cf34:	f107 030c 	add.w	r3, r7, #12
 802cf38:	2220      	movs	r2, #32
 802cf3a:	2100      	movs	r1, #0
 802cf3c:	4618      	mov	r0, r3
 802cf3e:	f012 fadb 	bl	803f4f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 802cf42:	2002      	movs	r0, #2
 802cf44:	f007 f96a 	bl	803421c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802cf48:	2300      	movs	r3, #0
 802cf4a:	60bb      	str	r3, [r7, #8]
 802cf4c:	4b4d      	ldr	r3, [pc, #308]	; (802d084 <SystemClock_Config+0x164>)
 802cf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cf50:	4a4c      	ldr	r2, [pc, #304]	; (802d084 <SystemClock_Config+0x164>)
 802cf52:	f023 0301 	bic.w	r3, r3, #1
 802cf56:	62d3      	str	r3, [r2, #44]	; 0x2c
 802cf58:	4b4a      	ldr	r3, [pc, #296]	; (802d084 <SystemClock_Config+0x164>)
 802cf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cf5c:	f003 0301 	and.w	r3, r3, #1
 802cf60:	60bb      	str	r3, [r7, #8]
 802cf62:	4b49      	ldr	r3, [pc, #292]	; (802d088 <SystemClock_Config+0x168>)
 802cf64:	699b      	ldr	r3, [r3, #24]
 802cf66:	4a48      	ldr	r2, [pc, #288]	; (802d088 <SystemClock_Config+0x168>)
 802cf68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802cf6c:	6193      	str	r3, [r2, #24]
 802cf6e:	4b46      	ldr	r3, [pc, #280]	; (802d088 <SystemClock_Config+0x168>)
 802cf70:	699b      	ldr	r3, [r3, #24]
 802cf72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802cf76:	60bb      	str	r3, [r7, #8]
 802cf78:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802cf7a:	bf00      	nop
 802cf7c:	4b42      	ldr	r3, [pc, #264]	; (802d088 <SystemClock_Config+0x168>)
 802cf7e:	699b      	ldr	r3, [r3, #24]
 802cf80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802cf84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802cf88:	d1f8      	bne.n	802cf7c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802cf8a:	4b40      	ldr	r3, [pc, #256]	; (802d08c <SystemClock_Config+0x16c>)
 802cf8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802cf90:	4a3e      	ldr	r2, [pc, #248]	; (802d08c <SystemClock_Config+0x16c>)
 802cf92:	f043 0302 	orr.w	r3, r3, #2
 802cf96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802cf9a:	4b3c      	ldr	r3, [pc, #240]	; (802d08c <SystemClock_Config+0x16c>)
 802cf9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802cfa0:	f003 0302 	and.w	r3, r3, #2
 802cfa4:	607b      	str	r3, [r7, #4]
 802cfa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 802cfa8:	2300      	movs	r3, #0
 802cfaa:	603b      	str	r3, [r7, #0]
 802cfac:	4b36      	ldr	r3, [pc, #216]	; (802d088 <SystemClock_Config+0x168>)
 802cfae:	699b      	ldr	r3, [r3, #24]
 802cfb0:	4a35      	ldr	r2, [pc, #212]	; (802d088 <SystemClock_Config+0x168>)
 802cfb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802cfb6:	6193      	str	r3, [r2, #24]
 802cfb8:	4b33      	ldr	r3, [pc, #204]	; (802d088 <SystemClock_Config+0x168>)
 802cfba:	699b      	ldr	r3, [r3, #24]
 802cfbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802cfc0:	603b      	str	r3, [r7, #0]
 802cfc2:	4b30      	ldr	r3, [pc, #192]	; (802d084 <SystemClock_Config+0x164>)
 802cfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cfc6:	4a2f      	ldr	r2, [pc, #188]	; (802d084 <SystemClock_Config+0x164>)
 802cfc8:	f043 0301 	orr.w	r3, r3, #1
 802cfcc:	62d3      	str	r3, [r2, #44]	; 0x2c
 802cfce:	4b2d      	ldr	r3, [pc, #180]	; (802d084 <SystemClock_Config+0x164>)
 802cfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cfd2:	f003 0301 	and.w	r3, r3, #1
 802cfd6:	603b      	str	r3, [r7, #0]
 802cfd8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 802cfda:	bf00      	nop
 802cfdc:	4b2a      	ldr	r3, [pc, #168]	; (802d088 <SystemClock_Config+0x168>)
 802cfde:	699b      	ldr	r3, [r3, #24]
 802cfe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802cfe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802cfe8:	d1f8      	bne.n	802cfdc <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 802cfea:	4b28      	ldr	r3, [pc, #160]	; (802d08c <SystemClock_Config+0x16c>)
 802cfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802cfee:	4a27      	ldr	r2, [pc, #156]	; (802d08c <SystemClock_Config+0x16c>)
 802cff0:	f023 0303 	bic.w	r3, r3, #3
 802cff4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 802cff6:	2322      	movs	r3, #34	; 0x22
 802cff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 802cffa:	2301      	movs	r3, #1
 802cffc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802cffe:	2340      	movs	r3, #64	; 0x40
 802d000:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 802d002:	2301      	movs	r3, #1
 802d004:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802d006:	2302      	movs	r3, #2
 802d008:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802d00a:	2300      	movs	r3, #0
 802d00c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 802d00e:	2304      	movs	r3, #4
 802d010:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 802d012:	233c      	movs	r3, #60	; 0x3c
 802d014:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 802d016:	2302      	movs	r3, #2
 802d018:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 802d01a:	2305      	movs	r3, #5
 802d01c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 802d01e:	2302      	movs	r3, #2
 802d020:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 802d022:	230c      	movs	r3, #12
 802d024:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 802d026:	2300      	movs	r3, #0
 802d028:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 802d02a:	2300      	movs	r3, #0
 802d02c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802d02e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802d032:	4618      	mov	r0, r3
 802d034:	f007 f93c 	bl	80342b0 <HAL_RCC_OscConfig>
 802d038:	4603      	mov	r3, r0
 802d03a:	2b00      	cmp	r3, #0
 802d03c:	d001      	beq.n	802d042 <SystemClock_Config+0x122>
  {
    Error_Handler();
 802d03e:	f000 f899 	bl	802d174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802d042:	233f      	movs	r3, #63	; 0x3f
 802d044:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802d046:	2303      	movs	r3, #3
 802d048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 802d04a:	2300      	movs	r3, #0
 802d04c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 802d04e:	2308      	movs	r3, #8
 802d050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 802d052:	2340      	movs	r3, #64	; 0x40
 802d054:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 802d056:	2340      	movs	r3, #64	; 0x40
 802d058:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 802d05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d05e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 802d060:	2340      	movs	r3, #64	; 0x40
 802d062:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 802d064:	f107 030c 	add.w	r3, r7, #12
 802d068:	2104      	movs	r1, #4
 802d06a:	4618      	mov	r0, r3
 802d06c:	f007 fd4e 	bl	8034b0c <HAL_RCC_ClockConfig>
 802d070:	4603      	mov	r3, r0
 802d072:	2b00      	cmp	r3, #0
 802d074:	d001      	beq.n	802d07a <SystemClock_Config+0x15a>
  {
    Error_Handler();
 802d076:	f000 f87d 	bl	802d174 <Error_Handler>
  }
}
 802d07a:	bf00      	nop
 802d07c:	3778      	adds	r7, #120	; 0x78
 802d07e:	46bd      	mov	sp, r7
 802d080:	bd80      	pop	{r7, pc}
 802d082:	bf00      	nop
 802d084:	58000400 	.word	0x58000400
 802d088:	58024800 	.word	0x58024800
 802d08c:	58024400 	.word	0x58024400

0802d090 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 802d090:	b580      	push	{r7, lr}
 802d092:	b082      	sub	sp, #8
 802d094:	af00      	add	r7, sp, #0
 802d096:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 802d098:	687b      	ldr	r3, [r7, #4]
 802d09a:	681b      	ldr	r3, [r3, #0]
 802d09c:	4a04      	ldr	r2, [pc, #16]	; (802d0b0 <HAL_COMP_TriggerCallback+0x20>)
 802d09e:	4293      	cmp	r3, r2
 802d0a0:	d101      	bne.n	802d0a6 <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 802d0a2:	f7f6 f9b9 	bl	8023418 <MotherboardOnStrobe>
	}
}
 802d0a6:	bf00      	nop
 802d0a8:	3708      	adds	r7, #8
 802d0aa:	46bd      	mov	sp, r7
 802d0ac:	bd80      	pop	{r7, pc}
 802d0ae:	bf00      	nop
 802d0b0:	58003810 	.word	0x58003810

0802d0b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 802d0b4:	b580      	push	{r7, lr}
 802d0b6:	b082      	sub	sp, #8
 802d0b8:	af00      	add	r7, sp, #0
 802d0ba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 802d0bc:	687b      	ldr	r3, [r7, #4]
 802d0be:	681b      	ldr	r3, [r3, #0]
 802d0c0:	4a0b      	ldr	r2, [pc, #44]	; (802d0f0 <HAL_UART_RxCpltCallback+0x3c>)
 802d0c2:	4293      	cmp	r3, r2
 802d0c4:	d101      	bne.n	802d0ca <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 802d0c6:	f7f6 f9c7 	bl	8023458 <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 802d0ca:	687b      	ldr	r3, [r7, #4]
 802d0cc:	681b      	ldr	r3, [r3, #0]
 802d0ce:	4a09      	ldr	r2, [pc, #36]	; (802d0f4 <HAL_UART_RxCpltCallback+0x40>)
 802d0d0:	4293      	cmp	r3, r2
 802d0d2:	d101      	bne.n	802d0d8 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 802d0d4:	f7f6 f9ca 	bl	802346c <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 802d0d8:	687b      	ldr	r3, [r7, #4]
 802d0da:	681b      	ldr	r3, [r3, #0]
 802d0dc:	4a06      	ldr	r2, [pc, #24]	; (802d0f8 <HAL_UART_RxCpltCallback+0x44>)
 802d0de:	4293      	cmp	r3, r2
 802d0e0:	d101      	bne.n	802d0e6 <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 802d0e2:	f7f6 f9af 	bl	8023444 <MotherboardOnBodyRecieveComplete>
	}
}
 802d0e6:	bf00      	nop
 802d0e8:	3708      	adds	r7, #8
 802d0ea:	46bd      	mov	sp, r7
 802d0ec:	bd80      	pop	{r7, pc}
 802d0ee:	bf00      	nop
 802d0f0:	40004800 	.word	0x40004800
 802d0f4:	40004c00 	.word	0x40004c00
 802d0f8:	40007c00 	.word	0x40007c00

0802d0fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 802d0fc:	b580      	push	{r7, lr}
 802d0fe:	b082      	sub	sp, #8
 802d100:	af00      	add	r7, sp, #0
 802d102:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 802d104:	687b      	ldr	r3, [r7, #4]
 802d106:	681b      	ldr	r3, [r3, #0]
 802d108:	4a0b      	ldr	r2, [pc, #44]	; (802d138 <HAL_UART_TxCpltCallback+0x3c>)
 802d10a:	4293      	cmp	r3, r2
 802d10c:	d101      	bne.n	802d112 <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 802d10e:	f7f6 f9b7 	bl	8023480 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 802d112:	687b      	ldr	r3, [r7, #4]
 802d114:	681b      	ldr	r3, [r3, #0]
 802d116:	4a09      	ldr	r2, [pc, #36]	; (802d13c <HAL_UART_TxCpltCallback+0x40>)
 802d118:	4293      	cmp	r3, r2
 802d11a:	d101      	bne.n	802d120 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 802d11c:	f7f6 f9ba 	bl	8023494 <MotherboardOnHeadStreamTransmitComplete>
	}
	if (huart->Instance == UART8) {
 802d120:	687b      	ldr	r3, [r7, #4]
 802d122:	681b      	ldr	r3, [r3, #0]
 802d124:	4a06      	ldr	r2, [pc, #24]	; (802d140 <HAL_UART_TxCpltCallback+0x44>)
 802d126:	4293      	cmp	r3, r2
 802d128:	d101      	bne.n	802d12e <HAL_UART_TxCpltCallback+0x32>
		MotherboardOnBodyTransmitComplete();
 802d12a:	f7f6 f9bd 	bl	80234a8 <MotherboardOnBodyTransmitComplete>
	}
}
 802d12e:	bf00      	nop
 802d130:	3708      	adds	r7, #8
 802d132:	46bd      	mov	sp, r7
 802d134:	bd80      	pop	{r7, pc}
 802d136:	bf00      	nop
 802d138:	40004800 	.word	0x40004800
 802d13c:	40004c00 	.word	0x40004c00
 802d140:	40007c00 	.word	0x40007c00

0802d144 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 802d144:	b580      	push	{r7, lr}
 802d146:	b082      	sub	sp, #8
 802d148:	af00      	add	r7, sp, #0
 802d14a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 802d14c:	687b      	ldr	r3, [r7, #4]
 802d14e:	681b      	ldr	r3, [r3, #0]
 802d150:	4a07      	ldr	r2, [pc, #28]	; (802d170 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 802d152:	4293      	cmp	r3, r2
 802d154:	d101      	bne.n	802d15a <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 802d156:	f7f6 f9b1 	bl	80234bc <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 802d15a:	687b      	ldr	r3, [r7, #4]
 802d15c:	681b      	ldr	r3, [r3, #0]
 802d15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802d162:	d101      	bne.n	802d168 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 802d164:	f7f6 f9b4 	bl	80234d0 <MotherboardOnImuTimerTick>
}
 802d168:	bf00      	nop
 802d16a:	3708      	adds	r7, #8
 802d16c:	46bd      	mov	sp, r7
 802d16e:	bd80      	pop	{r7, pc}
 802d170:	40000400 	.word	0x40000400

0802d174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802d174:	b480      	push	{r7}
 802d176:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 802d178:	b672      	cpsid	i
}
 802d17a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 802d17c:	e7fe      	b.n	802d17c <Error_Handler+0x8>
	...

0802d180 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 802d180:	b580      	push	{r7, lr}
 802d182:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 802d184:	4b28      	ldr	r3, [pc, #160]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d186:	4a29      	ldr	r2, [pc, #164]	; (802d22c <MX_SPI1_Init+0xac>)
 802d188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 802d18a:	4b27      	ldr	r3, [pc, #156]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d18c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 802d190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 802d192:	4b25      	ldr	r3, [pc, #148]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d194:	2200      	movs	r2, #0
 802d196:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 802d198:	4b23      	ldr	r3, [pc, #140]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d19a:	2207      	movs	r2, #7
 802d19c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 802d19e:	4b22      	ldr	r3, [pc, #136]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802d1a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 802d1a6:	4b20      	ldr	r3, [pc, #128]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802d1ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 802d1ae:	4b1e      	ldr	r3, [pc, #120]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 802d1b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 802d1b6:	4b1c      	ldr	r3, [pc, #112]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802d1bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802d1be:	4b1a      	ldr	r3, [pc, #104]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1c0:	2200      	movs	r2, #0
 802d1c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 802d1c4:	4b18      	ldr	r3, [pc, #96]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1c6:	2200      	movs	r2, #0
 802d1c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802d1ca:	4b17      	ldr	r3, [pc, #92]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1cc:	2200      	movs	r2, #0
 802d1ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 802d1d0:	4b15      	ldr	r3, [pc, #84]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1d2:	2200      	movs	r2, #0
 802d1d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 802d1d6:	4b14      	ldr	r3, [pc, #80]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802d1dc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 802d1de:	4b12      	ldr	r3, [pc, #72]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1e0:	2200      	movs	r2, #0
 802d1e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 802d1e4:	4b10      	ldr	r3, [pc, #64]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1e6:	2200      	movs	r2, #0
 802d1e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802d1ea:	4b0f      	ldr	r3, [pc, #60]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1ec:	2200      	movs	r2, #0
 802d1ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 802d1f0:	4b0d      	ldr	r3, [pc, #52]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1f2:	2200      	movs	r2, #0
 802d1f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 802d1f6:	4b0c      	ldr	r3, [pc, #48]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1f8:	2200      	movs	r2, #0
 802d1fa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 802d1fc:	4b0a      	ldr	r3, [pc, #40]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d1fe:	2200      	movs	r2, #0
 802d200:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 802d202:	4b09      	ldr	r3, [pc, #36]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d204:	2200      	movs	r2, #0
 802d206:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 802d208:	4b07      	ldr	r3, [pc, #28]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d20a:	2200      	movs	r2, #0
 802d20c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 802d20e:	4b06      	ldr	r3, [pc, #24]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d210:	2200      	movs	r2, #0
 802d212:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 802d214:	4804      	ldr	r0, [pc, #16]	; (802d228 <MX_SPI1_Init+0xa8>)
 802d216:	f009 fb6d 	bl	80368f4 <HAL_SPI_Init>
 802d21a:	4603      	mov	r3, r0
 802d21c:	2b00      	cmp	r3, #0
 802d21e:	d001      	beq.n	802d224 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 802d220:	f7ff ffa8 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 802d224:	bf00      	nop
 802d226:	bd80      	pop	{r7, pc}
 802d228:	2400169c 	.word	0x2400169c
 802d22c:	40013000 	.word	0x40013000

0802d230 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 802d230:	b580      	push	{r7, lr}
 802d232:	b0b8      	sub	sp, #224	; 0xe0
 802d234:	af00      	add	r7, sp, #0
 802d236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802d238:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802d23c:	2200      	movs	r2, #0
 802d23e:	601a      	str	r2, [r3, #0]
 802d240:	605a      	str	r2, [r3, #4]
 802d242:	609a      	str	r2, [r3, #8]
 802d244:	60da      	str	r2, [r3, #12]
 802d246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802d248:	f107 0310 	add.w	r3, r7, #16
 802d24c:	22bc      	movs	r2, #188	; 0xbc
 802d24e:	2100      	movs	r1, #0
 802d250:	4618      	mov	r0, r3
 802d252:	f012 f951 	bl	803f4f8 <memset>
  if(spiHandle->Instance==SPI1)
 802d256:	687b      	ldr	r3, [r7, #4]
 802d258:	681b      	ldr	r3, [r3, #0]
 802d25a:	4a60      	ldr	r2, [pc, #384]	; (802d3dc <HAL_SPI_MspInit+0x1ac>)
 802d25c:	4293      	cmp	r3, r2
 802d25e:	f040 80b8 	bne.w	802d3d2 <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 802d262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802d266:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 802d268:	2320      	movs	r3, #32
 802d26a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 802d26c:	2381      	movs	r3, #129	; 0x81
 802d26e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 802d270:	2302      	movs	r3, #2
 802d272:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 802d274:	2302      	movs	r3, #2
 802d276:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 802d278:	2302      	movs	r3, #2
 802d27a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 802d27c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d280:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 802d282:	2300      	movs	r3, #0
 802d284:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 802d286:	2300      	movs	r3, #0
 802d288:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 802d28a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802d28e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802d290:	f107 0310 	add.w	r3, r7, #16
 802d294:	4618      	mov	r0, r3
 802d296:	f007 ffc5 	bl	8035224 <HAL_RCCEx_PeriphCLKConfig>
 802d29a:	4603      	mov	r3, r0
 802d29c:	2b00      	cmp	r3, #0
 802d29e:	d001      	beq.n	802d2a4 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 802d2a0:	f7ff ff68 	bl	802d174 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 802d2a4:	4b4e      	ldr	r3, [pc, #312]	; (802d3e0 <HAL_SPI_MspInit+0x1b0>)
 802d2a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802d2aa:	4a4d      	ldr	r2, [pc, #308]	; (802d3e0 <HAL_SPI_MspInit+0x1b0>)
 802d2ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802d2b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 802d2b4:	4b4a      	ldr	r3, [pc, #296]	; (802d3e0 <HAL_SPI_MspInit+0x1b0>)
 802d2b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 802d2ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802d2be:	60fb      	str	r3, [r7, #12]
 802d2c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802d2c2:	4b47      	ldr	r3, [pc, #284]	; (802d3e0 <HAL_SPI_MspInit+0x1b0>)
 802d2c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d2c8:	4a45      	ldr	r2, [pc, #276]	; (802d3e0 <HAL_SPI_MspInit+0x1b0>)
 802d2ca:	f043 0301 	orr.w	r3, r3, #1
 802d2ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802d2d2:	4b43      	ldr	r3, [pc, #268]	; (802d3e0 <HAL_SPI_MspInit+0x1b0>)
 802d2d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802d2d8:	f003 0301 	and.w	r3, r3, #1
 802d2dc:	60bb      	str	r3, [r7, #8]
 802d2de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 802d2e0:	23e0      	movs	r3, #224	; 0xe0
 802d2e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802d2e6:	2302      	movs	r3, #2
 802d2e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802d2ec:	2300      	movs	r3, #0
 802d2ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802d2f2:	2300      	movs	r3, #0
 802d2f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802d2f8:	2305      	movs	r3, #5
 802d2fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802d2fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802d302:	4619      	mov	r1, r3
 802d304:	4837      	ldr	r0, [pc, #220]	; (802d3e4 <HAL_SPI_MspInit+0x1b4>)
 802d306:	f004 fb3d 	bl	8031984 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 802d30a:	4b37      	ldr	r3, [pc, #220]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d30c:	4a37      	ldr	r2, [pc, #220]	; (802d3ec <HAL_SPI_MspInit+0x1bc>)
 802d30e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 802d310:	4b35      	ldr	r3, [pc, #212]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d312:	2226      	movs	r2, #38	; 0x26
 802d314:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802d316:	4b34      	ldr	r3, [pc, #208]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d318:	2240      	movs	r2, #64	; 0x40
 802d31a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802d31c:	4b32      	ldr	r3, [pc, #200]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d31e:	2200      	movs	r2, #0
 802d320:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 802d322:	4b31      	ldr	r3, [pc, #196]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802d328:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802d32a:	4b2f      	ldr	r3, [pc, #188]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d32c:	2200      	movs	r2, #0
 802d32e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802d330:	4b2d      	ldr	r3, [pc, #180]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d332:	2200      	movs	r2, #0
 802d334:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 802d336:	4b2c      	ldr	r3, [pc, #176]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d338:	2200      	movs	r2, #0
 802d33a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802d33c:	4b2a      	ldr	r3, [pc, #168]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d33e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802d342:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802d344:	4b28      	ldr	r3, [pc, #160]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d346:	2200      	movs	r2, #0
 802d348:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 802d34a:	4827      	ldr	r0, [pc, #156]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d34c:	f001 fcc4 	bl	802ecd8 <HAL_DMA_Init>
 802d350:	4603      	mov	r3, r0
 802d352:	2b00      	cmp	r3, #0
 802d354:	d001      	beq.n	802d35a <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 802d356:	f7ff ff0d 	bl	802d174 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 802d35a:	687b      	ldr	r3, [r7, #4]
 802d35c:	4a22      	ldr	r2, [pc, #136]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d35e:	679a      	str	r2, [r3, #120]	; 0x78
 802d360:	4a21      	ldr	r2, [pc, #132]	; (802d3e8 <HAL_SPI_MspInit+0x1b8>)
 802d362:	687b      	ldr	r3, [r7, #4]
 802d364:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 802d366:	4b22      	ldr	r3, [pc, #136]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d368:	4a22      	ldr	r2, [pc, #136]	; (802d3f4 <HAL_SPI_MspInit+0x1c4>)
 802d36a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 802d36c:	4b20      	ldr	r3, [pc, #128]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d36e:	2225      	movs	r2, #37	; 0x25
 802d370:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802d372:	4b1f      	ldr	r3, [pc, #124]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d374:	2200      	movs	r2, #0
 802d376:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 802d378:	4b1d      	ldr	r3, [pc, #116]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d37a:	2200      	movs	r2, #0
 802d37c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 802d37e:	4b1c      	ldr	r3, [pc, #112]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802d384:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802d386:	4b1a      	ldr	r3, [pc, #104]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d388:	2200      	movs	r2, #0
 802d38a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 802d38c:	4b18      	ldr	r3, [pc, #96]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d38e:	2200      	movs	r2, #0
 802d390:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 802d392:	4b17      	ldr	r3, [pc, #92]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d394:	2200      	movs	r2, #0
 802d396:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 802d398:	4b15      	ldr	r3, [pc, #84]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d39a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802d39e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802d3a0:	4b13      	ldr	r3, [pc, #76]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d3a2:	2200      	movs	r2, #0
 802d3a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 802d3a6:	4812      	ldr	r0, [pc, #72]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d3a8:	f001 fc96 	bl	802ecd8 <HAL_DMA_Init>
 802d3ac:	4603      	mov	r3, r0
 802d3ae:	2b00      	cmp	r3, #0
 802d3b0:	d001      	beq.n	802d3b6 <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 802d3b2:	f7ff fedf 	bl	802d174 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 802d3b6:	687b      	ldr	r3, [r7, #4]
 802d3b8:	4a0d      	ldr	r2, [pc, #52]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d3ba:	67da      	str	r2, [r3, #124]	; 0x7c
 802d3bc:	4a0c      	ldr	r2, [pc, #48]	; (802d3f0 <HAL_SPI_MspInit+0x1c0>)
 802d3be:	687b      	ldr	r3, [r7, #4]
 802d3c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 802d3c2:	2200      	movs	r2, #0
 802d3c4:	2102      	movs	r1, #2
 802d3c6:	2023      	movs	r0, #35	; 0x23
 802d3c8:	f001 fa89 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802d3cc:	2023      	movs	r0, #35	; 0x23
 802d3ce:	f001 faa0 	bl	802e912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 802d3d2:	bf00      	nop
 802d3d4:	37e0      	adds	r7, #224	; 0xe0
 802d3d6:	46bd      	mov	sp, r7
 802d3d8:	bd80      	pop	{r7, pc}
 802d3da:	bf00      	nop
 802d3dc:	40013000 	.word	0x40013000
 802d3e0:	58024400 	.word	0x58024400
 802d3e4:	58020000 	.word	0x58020000
 802d3e8:	24001724 	.word	0x24001724
 802d3ec:	40020070 	.word	0x40020070
 802d3f0:	2400179c 	.word	0x2400179c
 802d3f4:	40020088 	.word	0x40020088

0802d3f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802d3f8:	b480      	push	{r7}
 802d3fa:	b083      	sub	sp, #12
 802d3fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802d3fe:	4b0a      	ldr	r3, [pc, #40]	; (802d428 <HAL_MspInit+0x30>)
 802d400:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802d404:	4a08      	ldr	r2, [pc, #32]	; (802d428 <HAL_MspInit+0x30>)
 802d406:	f043 0302 	orr.w	r3, r3, #2
 802d40a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802d40e:	4b06      	ldr	r3, [pc, #24]	; (802d428 <HAL_MspInit+0x30>)
 802d410:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802d414:	f003 0302 	and.w	r3, r3, #2
 802d418:	607b      	str	r3, [r7, #4]
 802d41a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802d41c:	bf00      	nop
 802d41e:	370c      	adds	r7, #12
 802d420:	46bd      	mov	sp, r7
 802d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d426:	4770      	bx	lr
 802d428:	58024400 	.word	0x58024400

0802d42c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802d42c:	b480      	push	{r7}
 802d42e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802d430:	e7fe      	b.n	802d430 <NMI_Handler+0x4>

0802d432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802d432:	b480      	push	{r7}
 802d434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802d436:	e7fe      	b.n	802d436 <HardFault_Handler+0x4>

0802d438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802d438:	b480      	push	{r7}
 802d43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802d43c:	e7fe      	b.n	802d43c <MemManage_Handler+0x4>

0802d43e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802d43e:	b480      	push	{r7}
 802d440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802d442:	e7fe      	b.n	802d442 <BusFault_Handler+0x4>

0802d444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802d444:	b480      	push	{r7}
 802d446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 802d448:	e7fe      	b.n	802d448 <UsageFault_Handler+0x4>

0802d44a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802d44a:	b480      	push	{r7}
 802d44c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802d44e:	bf00      	nop
 802d450:	46bd      	mov	sp, r7
 802d452:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d456:	4770      	bx	lr

0802d458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 802d458:	b480      	push	{r7}
 802d45a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802d45c:	bf00      	nop
 802d45e:	46bd      	mov	sp, r7
 802d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d464:	4770      	bx	lr

0802d466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802d466:	b480      	push	{r7}
 802d468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802d46a:	bf00      	nop
 802d46c:	46bd      	mov	sp, r7
 802d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d472:	4770      	bx	lr

0802d474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802d474:	b580      	push	{r7, lr}
 802d476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802d478:	f000 ff1e 	bl	802e2b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802d47c:	bf00      	nop
 802d47e:	bd80      	pop	{r7, pc}

0802d480 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 802d480:	b580      	push	{r7, lr}
 802d482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 802d484:	4802      	ldr	r0, [pc, #8]	; (802d490 <DMA1_Stream0_IRQHandler+0x10>)
 802d486:	f002 ff51 	bl	803032c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 802d48a:	bf00      	nop
 802d48c:	bd80      	pop	{r7, pc}
 802d48e:	bf00      	nop
 802d490:	240015ac 	.word	0x240015ac

0802d494 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 802d494:	b580      	push	{r7, lr}
 802d496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 802d498:	4802      	ldr	r0, [pc, #8]	; (802d4a4 <DMA1_Stream1_IRQHandler+0x10>)
 802d49a:	f002 ff47 	bl	803032c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 802d49e:	bf00      	nop
 802d4a0:	bd80      	pop	{r7, pc}
 802d4a2:	bf00      	nop
 802d4a4:	24001624 	.word	0x24001624

0802d4a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 802d4a8:	b580      	push	{r7, lr}
 802d4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 802d4ac:	4802      	ldr	r0, [pc, #8]	; (802d4b8 <DMA1_Stream4_IRQHandler+0x10>)
 802d4ae:	f002 ff3d 	bl	803032c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 802d4b2:	bf00      	nop
 802d4b4:	bd80      	pop	{r7, pc}
 802d4b6:	bf00      	nop
 802d4b8:	24001724 	.word	0x24001724

0802d4bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 802d4bc:	b580      	push	{r7, lr}
 802d4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 802d4c0:	4802      	ldr	r0, [pc, #8]	; (802d4cc <DMA1_Stream5_IRQHandler+0x10>)
 802d4c2:	f002 ff33 	bl	803032c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 802d4c6:	bf00      	nop
 802d4c8:	bd80      	pop	{r7, pc}
 802d4ca:	bf00      	nop
 802d4cc:	2400179c 	.word	0x2400179c

0802d4d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 802d4d0:	b580      	push	{r7, lr}
 802d4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 802d4d4:	4802      	ldr	r0, [pc, #8]	; (802d4e0 <TIM2_IRQHandler+0x10>)
 802d4d6:	f00a fc09 	bl	8037cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802d4da:	bf00      	nop
 802d4dc:	bd80      	pop	{r7, pc}
 802d4de:	bf00      	nop
 802d4e0:	24001818 	.word	0x24001818

0802d4e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 802d4e4:	b580      	push	{r7, lr}
 802d4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 802d4e8:	4802      	ldr	r0, [pc, #8]	; (802d4f4 <TIM3_IRQHandler+0x10>)
 802d4ea:	f00a fbff 	bl	8037cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 802d4ee:	bf00      	nop
 802d4f0:	bd80      	pop	{r7, pc}
 802d4f2:	bf00      	nop
 802d4f4:	24001864 	.word	0x24001864

0802d4f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 802d4f8:	b580      	push	{r7, lr}
 802d4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 802d4fc:	4802      	ldr	r0, [pc, #8]	; (802d508 <TIM4_IRQHandler+0x10>)
 802d4fe:	f00a fbf5 	bl	8037cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 802d502:	bf00      	nop
 802d504:	bd80      	pop	{r7, pc}
 802d506:	bf00      	nop
 802d508:	240018b0 	.word	0x240018b0

0802d50c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 802d50c:	b580      	push	{r7, lr}
 802d50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 802d510:	4802      	ldr	r0, [pc, #8]	; (802d51c <I2C2_EV_IRQHandler+0x10>)
 802d512:	f004 fc91 	bl	8031e38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 802d516:	bf00      	nop
 802d518:	bd80      	pop	{r7, pc}
 802d51a:	bf00      	nop
 802d51c:	24001560 	.word	0x24001560

0802d520 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 802d520:	b580      	push	{r7, lr}
 802d522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 802d524:	4802      	ldr	r0, [pc, #8]	; (802d530 <I2C2_ER_IRQHandler+0x10>)
 802d526:	f004 fca1 	bl	8031e6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 802d52a:	bf00      	nop
 802d52c:	bd80      	pop	{r7, pc}
 802d52e:	bf00      	nop
 802d530:	24001560 	.word	0x24001560

0802d534 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 802d534:	b580      	push	{r7, lr}
 802d536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802d538:	4802      	ldr	r0, [pc, #8]	; (802d544 <SPI1_IRQHandler+0x10>)
 802d53a:	f009 ff5d 	bl	80373f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 802d53e:	bf00      	nop
 802d540:	bd80      	pop	{r7, pc}
 802d542:	bf00      	nop
 802d544:	2400169c 	.word	0x2400169c

0802d548 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 802d548:	b580      	push	{r7, lr}
 802d54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 802d54c:	4802      	ldr	r0, [pc, #8]	; (802d558 <USART3_IRQHandler+0x10>)
 802d54e:	f00b fa13 	bl	8038978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 802d552:	bf00      	nop
 802d554:	bd80      	pop	{r7, pc}
 802d556:	bf00      	nop
 802d558:	24001b3c 	.word	0x24001b3c

0802d55c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 802d55c:	b580      	push	{r7, lr}
 802d55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 802d560:	4802      	ldr	r0, [pc, #8]	; (802d56c <UART4_IRQHandler+0x10>)
 802d562:	f00b fa09 	bl	8038978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 802d566:	bf00      	nop
 802d568:	bd80      	pop	{r7, pc}
 802d56a:	bf00      	nop
 802d56c:	240018fc 	.word	0x240018fc

0802d570 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 802d570:	b580      	push	{r7, lr}
 802d572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 802d574:	4802      	ldr	r0, [pc, #8]	; (802d580 <UART8_IRQHandler+0x10>)
 802d576:	f00b f9ff 	bl	8038978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 802d57a:	bf00      	nop
 802d57c:	bd80      	pop	{r7, pc}
 802d57e:	bf00      	nop
 802d580:	24001a1c 	.word	0x24001a1c

0802d584 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 802d584:	b580      	push	{r7, lr}
 802d586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802d588:	4802      	ldr	r0, [pc, #8]	; (802d594 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 802d58a:	f005 fcc8 	bl	8032f1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 802d58e:	bf00      	nop
 802d590:	bd80      	pop	{r7, pc}
 802d592:	bf00      	nop
 802d594:	240030b0 	.word	0x240030b0

0802d598 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 802d598:	b580      	push	{r7, lr}
 802d59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 802d59c:	4802      	ldr	r0, [pc, #8]	; (802d5a8 <OTG_FS_IRQHandler+0x10>)
 802d59e:	f005 fcbe 	bl	8032f1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 802d5a2:	bf00      	nop
 802d5a4:	bd80      	pop	{r7, pc}
 802d5a6:	bf00      	nop
 802d5a8:	240030b0 	.word	0x240030b0

0802d5ac <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 802d5ac:	b580      	push	{r7, lr}
 802d5ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 802d5b0:	4802      	ldr	r0, [pc, #8]	; (802d5bc <COMP1_IRQHandler+0x10>)
 802d5b2:	f001 f845 	bl	802e640 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 802d5b6:	bf00      	nop
 802d5b8:	bd80      	pop	{r7, pc}
 802d5ba:	bf00      	nop
 802d5bc:	24001520 	.word	0x24001520

0802d5c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802d5c0:	b480      	push	{r7}
 802d5c2:	af00      	add	r7, sp, #0
	return 1;
 802d5c4:	2301      	movs	r3, #1
}
 802d5c6:	4618      	mov	r0, r3
 802d5c8:	46bd      	mov	sp, r7
 802d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d5ce:	4770      	bx	lr

0802d5d0 <_kill>:

int _kill(int pid, int sig)
{
 802d5d0:	b580      	push	{r7, lr}
 802d5d2:	b082      	sub	sp, #8
 802d5d4:	af00      	add	r7, sp, #0
 802d5d6:	6078      	str	r0, [r7, #4]
 802d5d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 802d5da:	f011 ff19 	bl	803f410 <__errno>
 802d5de:	4603      	mov	r3, r0
 802d5e0:	2216      	movs	r2, #22
 802d5e2:	601a      	str	r2, [r3, #0]
	return -1;
 802d5e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802d5e8:	4618      	mov	r0, r3
 802d5ea:	3708      	adds	r7, #8
 802d5ec:	46bd      	mov	sp, r7
 802d5ee:	bd80      	pop	{r7, pc}

0802d5f0 <_exit>:

void _exit (int status)
{
 802d5f0:	b580      	push	{r7, lr}
 802d5f2:	b082      	sub	sp, #8
 802d5f4:	af00      	add	r7, sp, #0
 802d5f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 802d5f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802d5fc:	6878      	ldr	r0, [r7, #4]
 802d5fe:	f7ff ffe7 	bl	802d5d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 802d602:	e7fe      	b.n	802d602 <_exit+0x12>

0802d604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802d604:	b580      	push	{r7, lr}
 802d606:	b086      	sub	sp, #24
 802d608:	af00      	add	r7, sp, #0
 802d60a:	60f8      	str	r0, [r7, #12]
 802d60c:	60b9      	str	r1, [r7, #8]
 802d60e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802d610:	2300      	movs	r3, #0
 802d612:	617b      	str	r3, [r7, #20]
 802d614:	e00a      	b.n	802d62c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 802d616:	f3af 8000 	nop.w
 802d61a:	4601      	mov	r1, r0
 802d61c:	68bb      	ldr	r3, [r7, #8]
 802d61e:	1c5a      	adds	r2, r3, #1
 802d620:	60ba      	str	r2, [r7, #8]
 802d622:	b2ca      	uxtb	r2, r1
 802d624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802d626:	697b      	ldr	r3, [r7, #20]
 802d628:	3301      	adds	r3, #1
 802d62a:	617b      	str	r3, [r7, #20]
 802d62c:	697a      	ldr	r2, [r7, #20]
 802d62e:	687b      	ldr	r3, [r7, #4]
 802d630:	429a      	cmp	r2, r3
 802d632:	dbf0      	blt.n	802d616 <_read+0x12>
	}

return len;
 802d634:	687b      	ldr	r3, [r7, #4]
}
 802d636:	4618      	mov	r0, r3
 802d638:	3718      	adds	r7, #24
 802d63a:	46bd      	mov	sp, r7
 802d63c:	bd80      	pop	{r7, pc}

0802d63e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802d63e:	b580      	push	{r7, lr}
 802d640:	b086      	sub	sp, #24
 802d642:	af00      	add	r7, sp, #0
 802d644:	60f8      	str	r0, [r7, #12]
 802d646:	60b9      	str	r1, [r7, #8]
 802d648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802d64a:	2300      	movs	r3, #0
 802d64c:	617b      	str	r3, [r7, #20]
 802d64e:	e009      	b.n	802d664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 802d650:	68bb      	ldr	r3, [r7, #8]
 802d652:	1c5a      	adds	r2, r3, #1
 802d654:	60ba      	str	r2, [r7, #8]
 802d656:	781b      	ldrb	r3, [r3, #0]
 802d658:	4618      	mov	r0, r3
 802d65a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802d65e:	697b      	ldr	r3, [r7, #20]
 802d660:	3301      	adds	r3, #1
 802d662:	617b      	str	r3, [r7, #20]
 802d664:	697a      	ldr	r2, [r7, #20]
 802d666:	687b      	ldr	r3, [r7, #4]
 802d668:	429a      	cmp	r2, r3
 802d66a:	dbf1      	blt.n	802d650 <_write+0x12>
	}
	return len;
 802d66c:	687b      	ldr	r3, [r7, #4]
}
 802d66e:	4618      	mov	r0, r3
 802d670:	3718      	adds	r7, #24
 802d672:	46bd      	mov	sp, r7
 802d674:	bd80      	pop	{r7, pc}

0802d676 <_close>:

int _close(int file)
{
 802d676:	b480      	push	{r7}
 802d678:	b083      	sub	sp, #12
 802d67a:	af00      	add	r7, sp, #0
 802d67c:	6078      	str	r0, [r7, #4]
	return -1;
 802d67e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802d682:	4618      	mov	r0, r3
 802d684:	370c      	adds	r7, #12
 802d686:	46bd      	mov	sp, r7
 802d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d68c:	4770      	bx	lr

0802d68e <_fstat>:


int _fstat(int file, struct stat *st)
{
 802d68e:	b480      	push	{r7}
 802d690:	b083      	sub	sp, #12
 802d692:	af00      	add	r7, sp, #0
 802d694:	6078      	str	r0, [r7, #4]
 802d696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802d698:	683b      	ldr	r3, [r7, #0]
 802d69a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802d69e:	605a      	str	r2, [r3, #4]
	return 0;
 802d6a0:	2300      	movs	r3, #0
}
 802d6a2:	4618      	mov	r0, r3
 802d6a4:	370c      	adds	r7, #12
 802d6a6:	46bd      	mov	sp, r7
 802d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6ac:	4770      	bx	lr

0802d6ae <_isatty>:

int _isatty(int file)
{
 802d6ae:	b480      	push	{r7}
 802d6b0:	b083      	sub	sp, #12
 802d6b2:	af00      	add	r7, sp, #0
 802d6b4:	6078      	str	r0, [r7, #4]
	return 1;
 802d6b6:	2301      	movs	r3, #1
}
 802d6b8:	4618      	mov	r0, r3
 802d6ba:	370c      	adds	r7, #12
 802d6bc:	46bd      	mov	sp, r7
 802d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6c2:	4770      	bx	lr

0802d6c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802d6c4:	b480      	push	{r7}
 802d6c6:	b085      	sub	sp, #20
 802d6c8:	af00      	add	r7, sp, #0
 802d6ca:	60f8      	str	r0, [r7, #12]
 802d6cc:	60b9      	str	r1, [r7, #8]
 802d6ce:	607a      	str	r2, [r7, #4]
	return 0;
 802d6d0:	2300      	movs	r3, #0
}
 802d6d2:	4618      	mov	r0, r3
 802d6d4:	3714      	adds	r7, #20
 802d6d6:	46bd      	mov	sp, r7
 802d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d6dc:	4770      	bx	lr
	...

0802d6e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802d6e0:	b580      	push	{r7, lr}
 802d6e2:	b086      	sub	sp, #24
 802d6e4:	af00      	add	r7, sp, #0
 802d6e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802d6e8:	4a14      	ldr	r2, [pc, #80]	; (802d73c <_sbrk+0x5c>)
 802d6ea:	4b15      	ldr	r3, [pc, #84]	; (802d740 <_sbrk+0x60>)
 802d6ec:	1ad3      	subs	r3, r2, r3
 802d6ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802d6f0:	697b      	ldr	r3, [r7, #20]
 802d6f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802d6f4:	4b13      	ldr	r3, [pc, #76]	; (802d744 <_sbrk+0x64>)
 802d6f6:	681b      	ldr	r3, [r3, #0]
 802d6f8:	2b00      	cmp	r3, #0
 802d6fa:	d102      	bne.n	802d702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802d6fc:	4b11      	ldr	r3, [pc, #68]	; (802d744 <_sbrk+0x64>)
 802d6fe:	4a12      	ldr	r2, [pc, #72]	; (802d748 <_sbrk+0x68>)
 802d700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802d702:	4b10      	ldr	r3, [pc, #64]	; (802d744 <_sbrk+0x64>)
 802d704:	681a      	ldr	r2, [r3, #0]
 802d706:	687b      	ldr	r3, [r7, #4]
 802d708:	4413      	add	r3, r2
 802d70a:	693a      	ldr	r2, [r7, #16]
 802d70c:	429a      	cmp	r2, r3
 802d70e:	d207      	bcs.n	802d720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802d710:	f011 fe7e 	bl	803f410 <__errno>
 802d714:	4603      	mov	r3, r0
 802d716:	220c      	movs	r2, #12
 802d718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802d71a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802d71e:	e009      	b.n	802d734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802d720:	4b08      	ldr	r3, [pc, #32]	; (802d744 <_sbrk+0x64>)
 802d722:	681b      	ldr	r3, [r3, #0]
 802d724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802d726:	4b07      	ldr	r3, [pc, #28]	; (802d744 <_sbrk+0x64>)
 802d728:	681a      	ldr	r2, [r3, #0]
 802d72a:	687b      	ldr	r3, [r7, #4]
 802d72c:	4413      	add	r3, r2
 802d72e:	4a05      	ldr	r2, [pc, #20]	; (802d744 <_sbrk+0x64>)
 802d730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802d732:	68fb      	ldr	r3, [r7, #12]
}
 802d734:	4618      	mov	r0, r3
 802d736:	3718      	adds	r7, #24
 802d738:	46bd      	mov	sp, r7
 802d73a:	bd80      	pop	{r7, pc}
 802d73c:	24080000 	.word	0x24080000
 802d740:	00000400 	.word	0x00000400
 802d744:	24001814 	.word	0x24001814
 802d748:	240037f0 	.word	0x240037f0

0802d74c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802d74c:	b480      	push	{r7}
 802d74e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802d750:	4b37      	ldr	r3, [pc, #220]	; (802d830 <SystemInit+0xe4>)
 802d752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802d756:	4a36      	ldr	r2, [pc, #216]	; (802d830 <SystemInit+0xe4>)
 802d758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802d75c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802d760:	4b34      	ldr	r3, [pc, #208]	; (802d834 <SystemInit+0xe8>)
 802d762:	681b      	ldr	r3, [r3, #0]
 802d764:	f003 030f 	and.w	r3, r3, #15
 802d768:	2b06      	cmp	r3, #6
 802d76a:	d807      	bhi.n	802d77c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802d76c:	4b31      	ldr	r3, [pc, #196]	; (802d834 <SystemInit+0xe8>)
 802d76e:	681b      	ldr	r3, [r3, #0]
 802d770:	f023 030f 	bic.w	r3, r3, #15
 802d774:	4a2f      	ldr	r2, [pc, #188]	; (802d834 <SystemInit+0xe8>)
 802d776:	f043 0307 	orr.w	r3, r3, #7
 802d77a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802d77c:	4b2e      	ldr	r3, [pc, #184]	; (802d838 <SystemInit+0xec>)
 802d77e:	681b      	ldr	r3, [r3, #0]
 802d780:	4a2d      	ldr	r2, [pc, #180]	; (802d838 <SystemInit+0xec>)
 802d782:	f043 0301 	orr.w	r3, r3, #1
 802d786:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802d788:	4b2b      	ldr	r3, [pc, #172]	; (802d838 <SystemInit+0xec>)
 802d78a:	2200      	movs	r2, #0
 802d78c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802d78e:	4b2a      	ldr	r3, [pc, #168]	; (802d838 <SystemInit+0xec>)
 802d790:	681a      	ldr	r2, [r3, #0]
 802d792:	4929      	ldr	r1, [pc, #164]	; (802d838 <SystemInit+0xec>)
 802d794:	4b29      	ldr	r3, [pc, #164]	; (802d83c <SystemInit+0xf0>)
 802d796:	4013      	ands	r3, r2
 802d798:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802d79a:	4b26      	ldr	r3, [pc, #152]	; (802d834 <SystemInit+0xe8>)
 802d79c:	681b      	ldr	r3, [r3, #0]
 802d79e:	f003 0308 	and.w	r3, r3, #8
 802d7a2:	2b00      	cmp	r3, #0
 802d7a4:	d007      	beq.n	802d7b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802d7a6:	4b23      	ldr	r3, [pc, #140]	; (802d834 <SystemInit+0xe8>)
 802d7a8:	681b      	ldr	r3, [r3, #0]
 802d7aa:	f023 030f 	bic.w	r3, r3, #15
 802d7ae:	4a21      	ldr	r2, [pc, #132]	; (802d834 <SystemInit+0xe8>)
 802d7b0:	f043 0307 	orr.w	r3, r3, #7
 802d7b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802d7b6:	4b20      	ldr	r3, [pc, #128]	; (802d838 <SystemInit+0xec>)
 802d7b8:	2200      	movs	r2, #0
 802d7ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802d7bc:	4b1e      	ldr	r3, [pc, #120]	; (802d838 <SystemInit+0xec>)
 802d7be:	2200      	movs	r2, #0
 802d7c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802d7c2:	4b1d      	ldr	r3, [pc, #116]	; (802d838 <SystemInit+0xec>)
 802d7c4:	2200      	movs	r2, #0
 802d7c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802d7c8:	4b1b      	ldr	r3, [pc, #108]	; (802d838 <SystemInit+0xec>)
 802d7ca:	4a1d      	ldr	r2, [pc, #116]	; (802d840 <SystemInit+0xf4>)
 802d7cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802d7ce:	4b1a      	ldr	r3, [pc, #104]	; (802d838 <SystemInit+0xec>)
 802d7d0:	4a1c      	ldr	r2, [pc, #112]	; (802d844 <SystemInit+0xf8>)
 802d7d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802d7d4:	4b18      	ldr	r3, [pc, #96]	; (802d838 <SystemInit+0xec>)
 802d7d6:	4a1c      	ldr	r2, [pc, #112]	; (802d848 <SystemInit+0xfc>)
 802d7d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802d7da:	4b17      	ldr	r3, [pc, #92]	; (802d838 <SystemInit+0xec>)
 802d7dc:	2200      	movs	r2, #0
 802d7de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802d7e0:	4b15      	ldr	r3, [pc, #84]	; (802d838 <SystemInit+0xec>)
 802d7e2:	4a19      	ldr	r2, [pc, #100]	; (802d848 <SystemInit+0xfc>)
 802d7e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802d7e6:	4b14      	ldr	r3, [pc, #80]	; (802d838 <SystemInit+0xec>)
 802d7e8:	2200      	movs	r2, #0
 802d7ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802d7ec:	4b12      	ldr	r3, [pc, #72]	; (802d838 <SystemInit+0xec>)
 802d7ee:	4a16      	ldr	r2, [pc, #88]	; (802d848 <SystemInit+0xfc>)
 802d7f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802d7f2:	4b11      	ldr	r3, [pc, #68]	; (802d838 <SystemInit+0xec>)
 802d7f4:	2200      	movs	r2, #0
 802d7f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802d7f8:	4b0f      	ldr	r3, [pc, #60]	; (802d838 <SystemInit+0xec>)
 802d7fa:	681b      	ldr	r3, [r3, #0]
 802d7fc:	4a0e      	ldr	r2, [pc, #56]	; (802d838 <SystemInit+0xec>)
 802d7fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802d802:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802d804:	4b0c      	ldr	r3, [pc, #48]	; (802d838 <SystemInit+0xec>)
 802d806:	2200      	movs	r2, #0
 802d808:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802d80a:	4b10      	ldr	r3, [pc, #64]	; (802d84c <SystemInit+0x100>)
 802d80c:	681a      	ldr	r2, [r3, #0]
 802d80e:	4b10      	ldr	r3, [pc, #64]	; (802d850 <SystemInit+0x104>)
 802d810:	4013      	ands	r3, r2
 802d812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802d816:	d202      	bcs.n	802d81e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802d818:	4b0e      	ldr	r3, [pc, #56]	; (802d854 <SystemInit+0x108>)
 802d81a:	2201      	movs	r2, #1
 802d81c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802d81e:	4b0e      	ldr	r3, [pc, #56]	; (802d858 <SystemInit+0x10c>)
 802d820:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802d824:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802d826:	bf00      	nop
 802d828:	46bd      	mov	sp, r7
 802d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d82e:	4770      	bx	lr
 802d830:	e000ed00 	.word	0xe000ed00
 802d834:	52002000 	.word	0x52002000
 802d838:	58024400 	.word	0x58024400
 802d83c:	eaf6ed7f 	.word	0xeaf6ed7f
 802d840:	02020200 	.word	0x02020200
 802d844:	01ff0000 	.word	0x01ff0000
 802d848:	01010280 	.word	0x01010280
 802d84c:	5c001000 	.word	0x5c001000
 802d850:	ffff0000 	.word	0xffff0000
 802d854:	51008108 	.word	0x51008108
 802d858:	52004000 	.word	0x52004000

0802d85c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802d85c:	b580      	push	{r7, lr}
 802d85e:	b088      	sub	sp, #32
 802d860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802d862:	f107 0310 	add.w	r3, r7, #16
 802d866:	2200      	movs	r2, #0
 802d868:	601a      	str	r2, [r3, #0]
 802d86a:	605a      	str	r2, [r3, #4]
 802d86c:	609a      	str	r2, [r3, #8]
 802d86e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802d870:	1d3b      	adds	r3, r7, #4
 802d872:	2200      	movs	r2, #0
 802d874:	601a      	str	r2, [r3, #0]
 802d876:	605a      	str	r2, [r3, #4]
 802d878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802d87a:	4b1e      	ldr	r3, [pc, #120]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d87c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802d880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802d882:	4b1c      	ldr	r3, [pc, #112]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d884:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802d888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802d88a:	4b1a      	ldr	r3, [pc, #104]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d88c:	2200      	movs	r2, #0
 802d88e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802d890:	4b18      	ldr	r3, [pc, #96]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d892:	2264      	movs	r2, #100	; 0x64
 802d894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802d896:	4b17      	ldr	r3, [pc, #92]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d898:	2200      	movs	r2, #0
 802d89a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802d89c:	4b15      	ldr	r3, [pc, #84]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d89e:	2200      	movs	r2, #0
 802d8a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802d8a2:	4814      	ldr	r0, [pc, #80]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d8a4:	f00a f953 	bl	8037b4e <HAL_TIM_Base_Init>
 802d8a8:	4603      	mov	r3, r0
 802d8aa:	2b00      	cmp	r3, #0
 802d8ac:	d001      	beq.n	802d8b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802d8ae:	f7ff fc61 	bl	802d174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802d8b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802d8b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802d8b8:	f107 0310 	add.w	r3, r7, #16
 802d8bc:	4619      	mov	r1, r3
 802d8be:	480d      	ldr	r0, [pc, #52]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d8c0:	f00a fb34 	bl	8037f2c <HAL_TIM_ConfigClockSource>
 802d8c4:	4603      	mov	r3, r0
 802d8c6:	2b00      	cmp	r3, #0
 802d8c8:	d001      	beq.n	802d8ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802d8ca:	f7ff fc53 	bl	802d174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802d8ce:	2300      	movs	r3, #0
 802d8d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802d8d2:	2300      	movs	r3, #0
 802d8d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802d8d6:	1d3b      	adds	r3, r7, #4
 802d8d8:	4619      	mov	r1, r3
 802d8da:	4806      	ldr	r0, [pc, #24]	; (802d8f4 <MX_TIM2_Init+0x98>)
 802d8dc:	f00a fd7e 	bl	80383dc <HAL_TIMEx_MasterConfigSynchronization>
 802d8e0:	4603      	mov	r3, r0
 802d8e2:	2b00      	cmp	r3, #0
 802d8e4:	d001      	beq.n	802d8ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802d8e6:	f7ff fc45 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802d8ea:	bf00      	nop
 802d8ec:	3720      	adds	r7, #32
 802d8ee:	46bd      	mov	sp, r7
 802d8f0:	bd80      	pop	{r7, pc}
 802d8f2:	bf00      	nop
 802d8f4:	24001818 	.word	0x24001818

0802d8f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802d8f8:	b580      	push	{r7, lr}
 802d8fa:	b088      	sub	sp, #32
 802d8fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802d8fe:	f107 0310 	add.w	r3, r7, #16
 802d902:	2200      	movs	r2, #0
 802d904:	601a      	str	r2, [r3, #0]
 802d906:	605a      	str	r2, [r3, #4]
 802d908:	609a      	str	r2, [r3, #8]
 802d90a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802d90c:	1d3b      	adds	r3, r7, #4
 802d90e:	2200      	movs	r2, #0
 802d910:	601a      	str	r2, [r3, #0]
 802d912:	605a      	str	r2, [r3, #4]
 802d914:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802d916:	4b1d      	ldr	r3, [pc, #116]	; (802d98c <MX_TIM3_Init+0x94>)
 802d918:	4a1d      	ldr	r2, [pc, #116]	; (802d990 <MX_TIM3_Init+0x98>)
 802d91a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802d91c:	4b1b      	ldr	r3, [pc, #108]	; (802d98c <MX_TIM3_Init+0x94>)
 802d91e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802d922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802d924:	4b19      	ldr	r3, [pc, #100]	; (802d98c <MX_TIM3_Init+0x94>)
 802d926:	2200      	movs	r2, #0
 802d928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 802d92a:	4b18      	ldr	r3, [pc, #96]	; (802d98c <MX_TIM3_Init+0x94>)
 802d92c:	220a      	movs	r2, #10
 802d92e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802d930:	4b16      	ldr	r3, [pc, #88]	; (802d98c <MX_TIM3_Init+0x94>)
 802d932:	2200      	movs	r2, #0
 802d934:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802d936:	4b15      	ldr	r3, [pc, #84]	; (802d98c <MX_TIM3_Init+0x94>)
 802d938:	2200      	movs	r2, #0
 802d93a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802d93c:	4813      	ldr	r0, [pc, #76]	; (802d98c <MX_TIM3_Init+0x94>)
 802d93e:	f00a f906 	bl	8037b4e <HAL_TIM_Base_Init>
 802d942:	4603      	mov	r3, r0
 802d944:	2b00      	cmp	r3, #0
 802d946:	d001      	beq.n	802d94c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802d948:	f7ff fc14 	bl	802d174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802d94c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802d950:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802d952:	f107 0310 	add.w	r3, r7, #16
 802d956:	4619      	mov	r1, r3
 802d958:	480c      	ldr	r0, [pc, #48]	; (802d98c <MX_TIM3_Init+0x94>)
 802d95a:	f00a fae7 	bl	8037f2c <HAL_TIM_ConfigClockSource>
 802d95e:	4603      	mov	r3, r0
 802d960:	2b00      	cmp	r3, #0
 802d962:	d001      	beq.n	802d968 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802d964:	f7ff fc06 	bl	802d174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802d968:	2300      	movs	r3, #0
 802d96a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802d96c:	2300      	movs	r3, #0
 802d96e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802d970:	1d3b      	adds	r3, r7, #4
 802d972:	4619      	mov	r1, r3
 802d974:	4805      	ldr	r0, [pc, #20]	; (802d98c <MX_TIM3_Init+0x94>)
 802d976:	f00a fd31 	bl	80383dc <HAL_TIMEx_MasterConfigSynchronization>
 802d97a:	4603      	mov	r3, r0
 802d97c:	2b00      	cmp	r3, #0
 802d97e:	d001      	beq.n	802d984 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802d980:	f7ff fbf8 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802d984:	bf00      	nop
 802d986:	3720      	adds	r7, #32
 802d988:	46bd      	mov	sp, r7
 802d98a:	bd80      	pop	{r7, pc}
 802d98c:	24001864 	.word	0x24001864
 802d990:	40000400 	.word	0x40000400

0802d994 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802d994:	b580      	push	{r7, lr}
 802d996:	b088      	sub	sp, #32
 802d998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802d99a:	f107 0310 	add.w	r3, r7, #16
 802d99e:	2200      	movs	r2, #0
 802d9a0:	601a      	str	r2, [r3, #0]
 802d9a2:	605a      	str	r2, [r3, #4]
 802d9a4:	609a      	str	r2, [r3, #8]
 802d9a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802d9a8:	1d3b      	adds	r3, r7, #4
 802d9aa:	2200      	movs	r2, #0
 802d9ac:	601a      	str	r2, [r3, #0]
 802d9ae:	605a      	str	r2, [r3, #4]
 802d9b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802d9b2:	4b1d      	ldr	r3, [pc, #116]	; (802da28 <MX_TIM4_Init+0x94>)
 802d9b4:	4a1d      	ldr	r2, [pc, #116]	; (802da2c <MX_TIM4_Init+0x98>)
 802d9b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802d9b8:	4b1b      	ldr	r3, [pc, #108]	; (802da28 <MX_TIM4_Init+0x94>)
 802d9ba:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802d9be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802d9c0:	4b19      	ldr	r3, [pc, #100]	; (802da28 <MX_TIM4_Init+0x94>)
 802d9c2:	2200      	movs	r2, #0
 802d9c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802d9c6:	4b18      	ldr	r3, [pc, #96]	; (802da28 <MX_TIM4_Init+0x94>)
 802d9c8:	2264      	movs	r2, #100	; 0x64
 802d9ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802d9cc:	4b16      	ldr	r3, [pc, #88]	; (802da28 <MX_TIM4_Init+0x94>)
 802d9ce:	2200      	movs	r2, #0
 802d9d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802d9d2:	4b15      	ldr	r3, [pc, #84]	; (802da28 <MX_TIM4_Init+0x94>)
 802d9d4:	2200      	movs	r2, #0
 802d9d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802d9d8:	4813      	ldr	r0, [pc, #76]	; (802da28 <MX_TIM4_Init+0x94>)
 802d9da:	f00a f8b8 	bl	8037b4e <HAL_TIM_Base_Init>
 802d9de:	4603      	mov	r3, r0
 802d9e0:	2b00      	cmp	r3, #0
 802d9e2:	d001      	beq.n	802d9e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802d9e4:	f7ff fbc6 	bl	802d174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802d9e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802d9ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802d9ee:	f107 0310 	add.w	r3, r7, #16
 802d9f2:	4619      	mov	r1, r3
 802d9f4:	480c      	ldr	r0, [pc, #48]	; (802da28 <MX_TIM4_Init+0x94>)
 802d9f6:	f00a fa99 	bl	8037f2c <HAL_TIM_ConfigClockSource>
 802d9fa:	4603      	mov	r3, r0
 802d9fc:	2b00      	cmp	r3, #0
 802d9fe:	d001      	beq.n	802da04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802da00:	f7ff fbb8 	bl	802d174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802da04:	2300      	movs	r3, #0
 802da06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802da08:	2300      	movs	r3, #0
 802da0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802da0c:	1d3b      	adds	r3, r7, #4
 802da0e:	4619      	mov	r1, r3
 802da10:	4805      	ldr	r0, [pc, #20]	; (802da28 <MX_TIM4_Init+0x94>)
 802da12:	f00a fce3 	bl	80383dc <HAL_TIMEx_MasterConfigSynchronization>
 802da16:	4603      	mov	r3, r0
 802da18:	2b00      	cmp	r3, #0
 802da1a:	d001      	beq.n	802da20 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802da1c:	f7ff fbaa 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802da20:	bf00      	nop
 802da22:	3720      	adds	r7, #32
 802da24:	46bd      	mov	sp, r7
 802da26:	bd80      	pop	{r7, pc}
 802da28:	240018b0 	.word	0x240018b0
 802da2c:	40000800 	.word	0x40000800

0802da30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802da30:	b580      	push	{r7, lr}
 802da32:	b086      	sub	sp, #24
 802da34:	af00      	add	r7, sp, #0
 802da36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802da38:	687b      	ldr	r3, [r7, #4]
 802da3a:	681b      	ldr	r3, [r3, #0]
 802da3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802da40:	d117      	bne.n	802da72 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802da42:	4b2a      	ldr	r3, [pc, #168]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802da44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802da48:	4a28      	ldr	r2, [pc, #160]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802da4a:	f043 0301 	orr.w	r3, r3, #1
 802da4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802da52:	4b26      	ldr	r3, [pc, #152]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802da54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802da58:	f003 0301 	and.w	r3, r3, #1
 802da5c:	617b      	str	r3, [r7, #20]
 802da5e:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 802da60:	2200      	movs	r2, #0
 802da62:	2101      	movs	r1, #1
 802da64:	201c      	movs	r0, #28
 802da66:	f000 ff3a 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802da6a:	201c      	movs	r0, #28
 802da6c:	f000 ff51 	bl	802e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802da70:	e038      	b.n	802dae4 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802da72:	687b      	ldr	r3, [r7, #4]
 802da74:	681b      	ldr	r3, [r3, #0]
 802da76:	4a1e      	ldr	r2, [pc, #120]	; (802daf0 <HAL_TIM_Base_MspInit+0xc0>)
 802da78:	4293      	cmp	r3, r2
 802da7a:	d117      	bne.n	802daac <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802da7c:	4b1b      	ldr	r3, [pc, #108]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802da7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802da82:	4a1a      	ldr	r2, [pc, #104]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802da84:	f043 0302 	orr.w	r3, r3, #2
 802da88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802da8c:	4b17      	ldr	r3, [pc, #92]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802da8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802da92:	f003 0302 	and.w	r3, r3, #2
 802da96:	613b      	str	r3, [r7, #16]
 802da98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802da9a:	2200      	movs	r2, #0
 802da9c:	2101      	movs	r1, #1
 802da9e:	201d      	movs	r0, #29
 802daa0:	f000 ff1d 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802daa4:	201d      	movs	r0, #29
 802daa6:	f000 ff34 	bl	802e912 <HAL_NVIC_EnableIRQ>
}
 802daaa:	e01b      	b.n	802dae4 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802daac:	687b      	ldr	r3, [r7, #4]
 802daae:	681b      	ldr	r3, [r3, #0]
 802dab0:	4a10      	ldr	r2, [pc, #64]	; (802daf4 <HAL_TIM_Base_MspInit+0xc4>)
 802dab2:	4293      	cmp	r3, r2
 802dab4:	d116      	bne.n	802dae4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802dab6:	4b0d      	ldr	r3, [pc, #52]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802dab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802dabc:	4a0b      	ldr	r2, [pc, #44]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802dabe:	f043 0304 	orr.w	r3, r3, #4
 802dac2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802dac6:	4b09      	ldr	r3, [pc, #36]	; (802daec <HAL_TIM_Base_MspInit+0xbc>)
 802dac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802dacc:	f003 0304 	and.w	r3, r3, #4
 802dad0:	60fb      	str	r3, [r7, #12]
 802dad2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802dad4:	2200      	movs	r2, #0
 802dad6:	2100      	movs	r1, #0
 802dad8:	201e      	movs	r0, #30
 802dada:	f000 ff00 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802dade:	201e      	movs	r0, #30
 802dae0:	f000 ff17 	bl	802e912 <HAL_NVIC_EnableIRQ>
}
 802dae4:	bf00      	nop
 802dae6:	3718      	adds	r7, #24
 802dae8:	46bd      	mov	sp, r7
 802daea:	bd80      	pop	{r7, pc}
 802daec:	58024400 	.word	0x58024400
 802daf0:	40000400 	.word	0x40000400
 802daf4:	40000800 	.word	0x40000800

0802daf8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802daf8:	b580      	push	{r7, lr}
 802dafa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802dafc:	4b25      	ldr	r3, [pc, #148]	; (802db94 <MX_UART4_Init+0x9c>)
 802dafe:	4a26      	ldr	r2, [pc, #152]	; (802db98 <MX_UART4_Init+0xa0>)
 802db00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802db02:	4b24      	ldr	r3, [pc, #144]	; (802db94 <MX_UART4_Init+0x9c>)
 802db04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802db08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802db0a:	4b22      	ldr	r3, [pc, #136]	; (802db94 <MX_UART4_Init+0x9c>)
 802db0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802db10:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802db12:	4b20      	ldr	r3, [pc, #128]	; (802db94 <MX_UART4_Init+0x9c>)
 802db14:	2200      	movs	r2, #0
 802db16:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802db18:	4b1e      	ldr	r3, [pc, #120]	; (802db94 <MX_UART4_Init+0x9c>)
 802db1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802db1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802db20:	4b1c      	ldr	r3, [pc, #112]	; (802db94 <MX_UART4_Init+0x9c>)
 802db22:	220c      	movs	r2, #12
 802db24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802db26:	4b1b      	ldr	r3, [pc, #108]	; (802db94 <MX_UART4_Init+0x9c>)
 802db28:	2200      	movs	r2, #0
 802db2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802db2c:	4b19      	ldr	r3, [pc, #100]	; (802db94 <MX_UART4_Init+0x9c>)
 802db2e:	2200      	movs	r2, #0
 802db30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802db32:	4b18      	ldr	r3, [pc, #96]	; (802db94 <MX_UART4_Init+0x9c>)
 802db34:	2200      	movs	r2, #0
 802db36:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802db38:	4b16      	ldr	r3, [pc, #88]	; (802db94 <MX_UART4_Init+0x9c>)
 802db3a:	2200      	movs	r2, #0
 802db3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802db3e:	4b15      	ldr	r3, [pc, #84]	; (802db94 <MX_UART4_Init+0x9c>)
 802db40:	2220      	movs	r2, #32
 802db42:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802db44:	4b13      	ldr	r3, [pc, #76]	; (802db94 <MX_UART4_Init+0x9c>)
 802db46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802db4a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802db4c:	4811      	ldr	r0, [pc, #68]	; (802db94 <MX_UART4_Init+0x9c>)
 802db4e:	f00a fcf1 	bl	8038534 <HAL_UART_Init>
 802db52:	4603      	mov	r3, r0
 802db54:	2b00      	cmp	r3, #0
 802db56:	d001      	beq.n	802db5c <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802db58:	f7ff fb0c 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802db5c:	2100      	movs	r1, #0
 802db5e:	480d      	ldr	r0, [pc, #52]	; (802db94 <MX_UART4_Init+0x9c>)
 802db60:	f00d fa3e 	bl	803afe0 <HAL_UARTEx_SetTxFifoThreshold>
 802db64:	4603      	mov	r3, r0
 802db66:	2b00      	cmp	r3, #0
 802db68:	d001      	beq.n	802db6e <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802db6a:	f7ff fb03 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802db6e:	2100      	movs	r1, #0
 802db70:	4808      	ldr	r0, [pc, #32]	; (802db94 <MX_UART4_Init+0x9c>)
 802db72:	f00d fa73 	bl	803b05c <HAL_UARTEx_SetRxFifoThreshold>
 802db76:	4603      	mov	r3, r0
 802db78:	2b00      	cmp	r3, #0
 802db7a:	d001      	beq.n	802db80 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802db7c:	f7ff fafa 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802db80:	4804      	ldr	r0, [pc, #16]	; (802db94 <MX_UART4_Init+0x9c>)
 802db82:	f00d f9f4 	bl	803af6e <HAL_UARTEx_DisableFifoMode>
 802db86:	4603      	mov	r3, r0
 802db88:	2b00      	cmp	r3, #0
 802db8a:	d001      	beq.n	802db90 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802db8c:	f7ff faf2 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802db90:	bf00      	nop
 802db92:	bd80      	pop	{r7, pc}
 802db94:	240018fc 	.word	0x240018fc
 802db98:	40004c00 	.word	0x40004c00

0802db9c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802db9c:	b580      	push	{r7, lr}
 802db9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802dba0:	4b22      	ldr	r3, [pc, #136]	; (802dc2c <MX_UART7_Init+0x90>)
 802dba2:	4a23      	ldr	r2, [pc, #140]	; (802dc30 <MX_UART7_Init+0x94>)
 802dba4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802dba6:	4b21      	ldr	r3, [pc, #132]	; (802dc2c <MX_UART7_Init+0x90>)
 802dba8:	4a22      	ldr	r2, [pc, #136]	; (802dc34 <MX_UART7_Init+0x98>)
 802dbaa:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802dbac:	4b1f      	ldr	r3, [pc, #124]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbae:	2200      	movs	r2, #0
 802dbb0:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802dbb2:	4b1e      	ldr	r3, [pc, #120]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbb4:	2200      	movs	r2, #0
 802dbb6:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802dbb8:	4b1c      	ldr	r3, [pc, #112]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbba:	2200      	movs	r2, #0
 802dbbc:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802dbbe:	4b1b      	ldr	r3, [pc, #108]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbc0:	220c      	movs	r2, #12
 802dbc2:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802dbc4:	4b19      	ldr	r3, [pc, #100]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbc6:	2200      	movs	r2, #0
 802dbc8:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802dbca:	4b18      	ldr	r3, [pc, #96]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbcc:	2200      	movs	r2, #0
 802dbce:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802dbd0:	4b16      	ldr	r3, [pc, #88]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbd2:	2200      	movs	r2, #0
 802dbd4:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802dbd6:	4b15      	ldr	r3, [pc, #84]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbd8:	2200      	movs	r2, #0
 802dbda:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802dbdc:	4b13      	ldr	r3, [pc, #76]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbde:	2200      	movs	r2, #0
 802dbe0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802dbe2:	4812      	ldr	r0, [pc, #72]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbe4:	f00a fca6 	bl	8038534 <HAL_UART_Init>
 802dbe8:	4603      	mov	r3, r0
 802dbea:	2b00      	cmp	r3, #0
 802dbec:	d001      	beq.n	802dbf2 <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802dbee:	f7ff fac1 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802dbf2:	2100      	movs	r1, #0
 802dbf4:	480d      	ldr	r0, [pc, #52]	; (802dc2c <MX_UART7_Init+0x90>)
 802dbf6:	f00d f9f3 	bl	803afe0 <HAL_UARTEx_SetTxFifoThreshold>
 802dbfa:	4603      	mov	r3, r0
 802dbfc:	2b00      	cmp	r3, #0
 802dbfe:	d001      	beq.n	802dc04 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802dc00:	f7ff fab8 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802dc04:	2100      	movs	r1, #0
 802dc06:	4809      	ldr	r0, [pc, #36]	; (802dc2c <MX_UART7_Init+0x90>)
 802dc08:	f00d fa28 	bl	803b05c <HAL_UARTEx_SetRxFifoThreshold>
 802dc0c:	4603      	mov	r3, r0
 802dc0e:	2b00      	cmp	r3, #0
 802dc10:	d001      	beq.n	802dc16 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802dc12:	f7ff faaf 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802dc16:	4805      	ldr	r0, [pc, #20]	; (802dc2c <MX_UART7_Init+0x90>)
 802dc18:	f00d f9a9 	bl	803af6e <HAL_UARTEx_DisableFifoMode>
 802dc1c:	4603      	mov	r3, r0
 802dc1e:	2b00      	cmp	r3, #0
 802dc20:	d001      	beq.n	802dc26 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802dc22:	f7ff faa7 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802dc26:	bf00      	nop
 802dc28:	bd80      	pop	{r7, pc}
 802dc2a:	bf00      	nop
 802dc2c:	2400198c 	.word	0x2400198c
 802dc30:	40007800 	.word	0x40007800
 802dc34:	001312d0 	.word	0x001312d0

0802dc38 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802dc38:	b580      	push	{r7, lr}
 802dc3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802dc3c:	4b26      	ldr	r3, [pc, #152]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc3e:	4a27      	ldr	r2, [pc, #156]	; (802dcdc <MX_UART8_Init+0xa4>)
 802dc40:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802dc42:	4b25      	ldr	r3, [pc, #148]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc44:	4a26      	ldr	r2, [pc, #152]	; (802dce0 <MX_UART8_Init+0xa8>)
 802dc46:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802dc48:	4b23      	ldr	r3, [pc, #140]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802dc4e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802dc50:	4b21      	ldr	r3, [pc, #132]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc52:	2200      	movs	r2, #0
 802dc54:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802dc56:	4b20      	ldr	r3, [pc, #128]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802dc5c:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802dc5e:	4b1e      	ldr	r3, [pc, #120]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc60:	220c      	movs	r2, #12
 802dc62:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802dc64:	4b1c      	ldr	r3, [pc, #112]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc66:	2200      	movs	r2, #0
 802dc68:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802dc6a:	4b1b      	ldr	r3, [pc, #108]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc6c:	2200      	movs	r2, #0
 802dc6e:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802dc70:	4b19      	ldr	r3, [pc, #100]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc72:	2200      	movs	r2, #0
 802dc74:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802dc76:	4b18      	ldr	r3, [pc, #96]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc78:	2200      	movs	r2, #0
 802dc7a:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802dc7c:	4b16      	ldr	r3, [pc, #88]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc7e:	2220      	movs	r2, #32
 802dc80:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802dc82:	4b15      	ldr	r3, [pc, #84]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802dc88:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802dc8a:	4813      	ldr	r0, [pc, #76]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dc8c:	f00a fc52 	bl	8038534 <HAL_UART_Init>
 802dc90:	4603      	mov	r3, r0
 802dc92:	2b00      	cmp	r3, #0
 802dc94:	d001      	beq.n	802dc9a <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802dc96:	f7ff fa6d 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802dc9a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802dc9e:	480e      	ldr	r0, [pc, #56]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dca0:	f00d f99e 	bl	803afe0 <HAL_UARTEx_SetTxFifoThreshold>
 802dca4:	4603      	mov	r3, r0
 802dca6:	2b00      	cmp	r3, #0
 802dca8:	d001      	beq.n	802dcae <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802dcaa:	f7ff fa63 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802dcae:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802dcb2:	4809      	ldr	r0, [pc, #36]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dcb4:	f00d f9d2 	bl	803b05c <HAL_UARTEx_SetRxFifoThreshold>
 802dcb8:	4603      	mov	r3, r0
 802dcba:	2b00      	cmp	r3, #0
 802dcbc:	d001      	beq.n	802dcc2 <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802dcbe:	f7ff fa59 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802dcc2:	4805      	ldr	r0, [pc, #20]	; (802dcd8 <MX_UART8_Init+0xa0>)
 802dcc4:	f00d f918 	bl	803aef8 <HAL_UARTEx_EnableFifoMode>
 802dcc8:	4603      	mov	r3, r0
 802dcca:	2b00      	cmp	r3, #0
 802dccc:	d001      	beq.n	802dcd2 <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802dcce:	f7ff fa51 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802dcd2:	bf00      	nop
 802dcd4:	bd80      	pop	{r7, pc}
 802dcd6:	bf00      	nop
 802dcd8:	24001a1c 	.word	0x24001a1c
 802dcdc:	40007c00 	.word	0x40007c00
 802dce0:	001312d0 	.word	0x001312d0

0802dce4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802dce4:	b580      	push	{r7, lr}
 802dce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802dce8:	4b22      	ldr	r3, [pc, #136]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dcea:	4a23      	ldr	r2, [pc, #140]	; (802dd78 <MX_USART2_UART_Init+0x94>)
 802dcec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802dcee:	4b21      	ldr	r3, [pc, #132]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dcf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802dcf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802dcf6:	4b1f      	ldr	r3, [pc, #124]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dcf8:	2200      	movs	r2, #0
 802dcfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802dcfc:	4b1d      	ldr	r3, [pc, #116]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dcfe:	2200      	movs	r2, #0
 802dd00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802dd02:	4b1c      	ldr	r3, [pc, #112]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd04:	2200      	movs	r2, #0
 802dd06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802dd08:	4b1a      	ldr	r3, [pc, #104]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd0a:	220c      	movs	r2, #12
 802dd0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802dd0e:	4b19      	ldr	r3, [pc, #100]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd10:	2200      	movs	r2, #0
 802dd12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802dd14:	4b17      	ldr	r3, [pc, #92]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd16:	2200      	movs	r2, #0
 802dd18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802dd1a:	4b16      	ldr	r3, [pc, #88]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd1c:	2200      	movs	r2, #0
 802dd1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802dd20:	4b14      	ldr	r3, [pc, #80]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd22:	2200      	movs	r2, #0
 802dd24:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802dd26:	4b13      	ldr	r3, [pc, #76]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd28:	2200      	movs	r2, #0
 802dd2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802dd2c:	4811      	ldr	r0, [pc, #68]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd2e:	f00a fc01 	bl	8038534 <HAL_UART_Init>
 802dd32:	4603      	mov	r3, r0
 802dd34:	2b00      	cmp	r3, #0
 802dd36:	d001      	beq.n	802dd3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802dd38:	f7ff fa1c 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802dd3c:	2100      	movs	r1, #0
 802dd3e:	480d      	ldr	r0, [pc, #52]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd40:	f00d f94e 	bl	803afe0 <HAL_UARTEx_SetTxFifoThreshold>
 802dd44:	4603      	mov	r3, r0
 802dd46:	2b00      	cmp	r3, #0
 802dd48:	d001      	beq.n	802dd4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802dd4a:	f7ff fa13 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802dd4e:	2100      	movs	r1, #0
 802dd50:	4808      	ldr	r0, [pc, #32]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd52:	f00d f983 	bl	803b05c <HAL_UARTEx_SetRxFifoThreshold>
 802dd56:	4603      	mov	r3, r0
 802dd58:	2b00      	cmp	r3, #0
 802dd5a:	d001      	beq.n	802dd60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802dd5c:	f7ff fa0a 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802dd60:	4804      	ldr	r0, [pc, #16]	; (802dd74 <MX_USART2_UART_Init+0x90>)
 802dd62:	f00d f904 	bl	803af6e <HAL_UARTEx_DisableFifoMode>
 802dd66:	4603      	mov	r3, r0
 802dd68:	2b00      	cmp	r3, #0
 802dd6a:	d001      	beq.n	802dd70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802dd6c:	f7ff fa02 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802dd70:	bf00      	nop
 802dd72:	bd80      	pop	{r7, pc}
 802dd74:	24001aac 	.word	0x24001aac
 802dd78:	40004400 	.word	0x40004400

0802dd7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802dd7c:	b580      	push	{r7, lr}
 802dd7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802dd80:	4b26      	ldr	r3, [pc, #152]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802dd82:	4a27      	ldr	r2, [pc, #156]	; (802de20 <MX_USART3_UART_Init+0xa4>)
 802dd84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802dd86:	4b25      	ldr	r3, [pc, #148]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802dd88:	4a26      	ldr	r2, [pc, #152]	; (802de24 <MX_USART3_UART_Init+0xa8>)
 802dd8a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802dd8c:	4b23      	ldr	r3, [pc, #140]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802dd8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802dd92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802dd94:	4b21      	ldr	r3, [pc, #132]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802dd96:	2200      	movs	r2, #0
 802dd98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802dd9a:	4b20      	ldr	r3, [pc, #128]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802dd9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802dda0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802dda2:	4b1e      	ldr	r3, [pc, #120]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802dda4:	220c      	movs	r2, #12
 802dda6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802dda8:	4b1c      	ldr	r3, [pc, #112]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802ddaa:	2200      	movs	r2, #0
 802ddac:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802ddae:	4b1b      	ldr	r3, [pc, #108]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802ddb0:	2200      	movs	r2, #0
 802ddb2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802ddb4:	4b19      	ldr	r3, [pc, #100]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802ddb6:	2200      	movs	r2, #0
 802ddb8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802ddba:	4b18      	ldr	r3, [pc, #96]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802ddbc:	2200      	movs	r2, #0
 802ddbe:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802ddc0:	4b16      	ldr	r3, [pc, #88]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802ddc2:	2220      	movs	r2, #32
 802ddc4:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802ddc6:	4b15      	ldr	r3, [pc, #84]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802ddc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802ddcc:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802ddce:	4813      	ldr	r0, [pc, #76]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802ddd0:	f00a fbb0 	bl	8038534 <HAL_UART_Init>
 802ddd4:	4603      	mov	r3, r0
 802ddd6:	2b00      	cmp	r3, #0
 802ddd8:	d001      	beq.n	802ddde <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802ddda:	f7ff f9cb 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802ddde:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802dde2:	480e      	ldr	r0, [pc, #56]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802dde4:	f00d f8fc 	bl	803afe0 <HAL_UARTEx_SetTxFifoThreshold>
 802dde8:	4603      	mov	r3, r0
 802ddea:	2b00      	cmp	r3, #0
 802ddec:	d001      	beq.n	802ddf2 <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802ddee:	f7ff f9c1 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802ddf2:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802ddf6:	4809      	ldr	r0, [pc, #36]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802ddf8:	f00d f930 	bl	803b05c <HAL_UARTEx_SetRxFifoThreshold>
 802ddfc:	4603      	mov	r3, r0
 802ddfe:	2b00      	cmp	r3, #0
 802de00:	d001      	beq.n	802de06 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802de02:	f7ff f9b7 	bl	802d174 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802de06:	4805      	ldr	r0, [pc, #20]	; (802de1c <MX_USART3_UART_Init+0xa0>)
 802de08:	f00d f876 	bl	803aef8 <HAL_UARTEx_EnableFifoMode>
 802de0c:	4603      	mov	r3, r0
 802de0e:	2b00      	cmp	r3, #0
 802de10:	d001      	beq.n	802de16 <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802de12:	f7ff f9af 	bl	802d174 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802de16:	bf00      	nop
 802de18:	bd80      	pop	{r7, pc}
 802de1a:	bf00      	nop
 802de1c:	24001b3c 	.word	0x24001b3c
 802de20:	40004800 	.word	0x40004800
 802de24:	001312d0 	.word	0x001312d0

0802de28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802de28:	b580      	push	{r7, lr}
 802de2a:	b0c0      	sub	sp, #256	; 0x100
 802de2c:	af00      	add	r7, sp, #0
 802de2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802de30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802de34:	2200      	movs	r2, #0
 802de36:	601a      	str	r2, [r3, #0]
 802de38:	605a      	str	r2, [r3, #4]
 802de3a:	609a      	str	r2, [r3, #8]
 802de3c:	60da      	str	r2, [r3, #12]
 802de3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802de40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802de44:	22bc      	movs	r2, #188	; 0xbc
 802de46:	2100      	movs	r1, #0
 802de48:	4618      	mov	r0, r3
 802de4a:	f011 fb55 	bl	803f4f8 <memset>
  if(uartHandle->Instance==UART4)
 802de4e:	687b      	ldr	r3, [r7, #4]
 802de50:	681b      	ldr	r3, [r3, #0]
 802de52:	4ac2      	ldr	r2, [pc, #776]	; (802e15c <HAL_UART_MspInit+0x334>)
 802de54:	4293      	cmp	r3, r2
 802de56:	d14a      	bne.n	802deee <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802de58:	2302      	movs	r3, #2
 802de5a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802de5c:	2300      	movs	r3, #0
 802de5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802de62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802de66:	4618      	mov	r0, r3
 802de68:	f007 f9dc 	bl	8035224 <HAL_RCCEx_PeriphCLKConfig>
 802de6c:	4603      	mov	r3, r0
 802de6e:	2b00      	cmp	r3, #0
 802de70:	d001      	beq.n	802de76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802de72:	f7ff f97f 	bl	802d174 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802de76:	4bba      	ldr	r3, [pc, #744]	; (802e160 <HAL_UART_MspInit+0x338>)
 802de78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802de7c:	4ab8      	ldr	r2, [pc, #736]	; (802e160 <HAL_UART_MspInit+0x338>)
 802de7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802de82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802de86:	4bb6      	ldr	r3, [pc, #728]	; (802e160 <HAL_UART_MspInit+0x338>)
 802de88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802de8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802de90:	62fb      	str	r3, [r7, #44]	; 0x2c
 802de92:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802de94:	4bb2      	ldr	r3, [pc, #712]	; (802e160 <HAL_UART_MspInit+0x338>)
 802de96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802de9a:	4ab1      	ldr	r2, [pc, #708]	; (802e160 <HAL_UART_MspInit+0x338>)
 802de9c:	f043 0301 	orr.w	r3, r3, #1
 802dea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802dea4:	4bae      	ldr	r3, [pc, #696]	; (802e160 <HAL_UART_MspInit+0x338>)
 802dea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802deaa:	f003 0301 	and.w	r3, r3, #1
 802deae:	62bb      	str	r3, [r7, #40]	; 0x28
 802deb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802deb2:	2303      	movs	r3, #3
 802deb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802deb8:	2302      	movs	r3, #2
 802deba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802debe:	2300      	movs	r3, #0
 802dec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802dec4:	2300      	movs	r3, #0
 802dec6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802deca:	2308      	movs	r3, #8
 802decc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802ded0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802ded4:	4619      	mov	r1, r3
 802ded6:	48a3      	ldr	r0, [pc, #652]	; (802e164 <HAL_UART_MspInit+0x33c>)
 802ded8:	f003 fd54 	bl	8031984 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802dedc:	2200      	movs	r2, #0
 802dede:	2100      	movs	r1, #0
 802dee0:	2034      	movs	r0, #52	; 0x34
 802dee2:	f000 fcfc 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802dee6:	2034      	movs	r0, #52	; 0x34
 802dee8:	f000 fd13 	bl	802e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802deec:	e130      	b.n	802e150 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802deee:	687b      	ldr	r3, [r7, #4]
 802def0:	681b      	ldr	r3, [r3, #0]
 802def2:	4a9d      	ldr	r2, [pc, #628]	; (802e168 <HAL_UART_MspInit+0x340>)
 802def4:	4293      	cmp	r3, r2
 802def6:	d143      	bne.n	802df80 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802def8:	2302      	movs	r3, #2
 802defa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802defc:	2300      	movs	r3, #0
 802defe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802df02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802df06:	4618      	mov	r0, r3
 802df08:	f007 f98c 	bl	8035224 <HAL_RCCEx_PeriphCLKConfig>
 802df0c:	4603      	mov	r3, r0
 802df0e:	2b00      	cmp	r3, #0
 802df10:	d001      	beq.n	802df16 <HAL_UART_MspInit+0xee>
      Error_Handler();
 802df12:	f7ff f92f 	bl	802d174 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802df16:	4b92      	ldr	r3, [pc, #584]	; (802e160 <HAL_UART_MspInit+0x338>)
 802df18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802df1c:	4a90      	ldr	r2, [pc, #576]	; (802e160 <HAL_UART_MspInit+0x338>)
 802df1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802df22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802df26:	4b8e      	ldr	r3, [pc, #568]	; (802e160 <HAL_UART_MspInit+0x338>)
 802df28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802df2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802df30:	627b      	str	r3, [r7, #36]	; 0x24
 802df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802df34:	4b8a      	ldr	r3, [pc, #552]	; (802e160 <HAL_UART_MspInit+0x338>)
 802df36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802df3a:	4a89      	ldr	r2, [pc, #548]	; (802e160 <HAL_UART_MspInit+0x338>)
 802df3c:	f043 0310 	orr.w	r3, r3, #16
 802df40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802df44:	4b86      	ldr	r3, [pc, #536]	; (802e160 <HAL_UART_MspInit+0x338>)
 802df46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802df4a:	f003 0310 	and.w	r3, r3, #16
 802df4e:	623b      	str	r3, [r7, #32]
 802df50:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802df52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802df56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802df5a:	2302      	movs	r3, #2
 802df5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802df60:	2300      	movs	r3, #0
 802df62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802df66:	2300      	movs	r3, #0
 802df68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802df6c:	2307      	movs	r3, #7
 802df6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802df72:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802df76:	4619      	mov	r1, r3
 802df78:	487c      	ldr	r0, [pc, #496]	; (802e16c <HAL_UART_MspInit+0x344>)
 802df7a:	f003 fd03 	bl	8031984 <HAL_GPIO_Init>
}
 802df7e:	e0e7      	b.n	802e150 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802df80:	687b      	ldr	r3, [r7, #4]
 802df82:	681b      	ldr	r3, [r3, #0]
 802df84:	4a7a      	ldr	r2, [pc, #488]	; (802e170 <HAL_UART_MspInit+0x348>)
 802df86:	4293      	cmp	r3, r2
 802df88:	d14a      	bne.n	802e020 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802df8a:	2302      	movs	r3, #2
 802df8c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802df8e:	2300      	movs	r3, #0
 802df90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802df94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802df98:	4618      	mov	r0, r3
 802df9a:	f007 f943 	bl	8035224 <HAL_RCCEx_PeriphCLKConfig>
 802df9e:	4603      	mov	r3, r0
 802dfa0:	2b00      	cmp	r3, #0
 802dfa2:	d001      	beq.n	802dfa8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 802dfa4:	f7ff f8e6 	bl	802d174 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802dfa8:	4b6d      	ldr	r3, [pc, #436]	; (802e160 <HAL_UART_MspInit+0x338>)
 802dfaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802dfae:	4a6c      	ldr	r2, [pc, #432]	; (802e160 <HAL_UART_MspInit+0x338>)
 802dfb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802dfb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802dfb8:	4b69      	ldr	r3, [pc, #420]	; (802e160 <HAL_UART_MspInit+0x338>)
 802dfba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802dfbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802dfc2:	61fb      	str	r3, [r7, #28]
 802dfc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802dfc6:	4b66      	ldr	r3, [pc, #408]	; (802e160 <HAL_UART_MspInit+0x338>)
 802dfc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802dfcc:	4a64      	ldr	r2, [pc, #400]	; (802e160 <HAL_UART_MspInit+0x338>)
 802dfce:	f043 0310 	orr.w	r3, r3, #16
 802dfd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802dfd6:	4b62      	ldr	r3, [pc, #392]	; (802e160 <HAL_UART_MspInit+0x338>)
 802dfd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802dfdc:	f003 0310 	and.w	r3, r3, #16
 802dfe0:	61bb      	str	r3, [r7, #24]
 802dfe2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802dfe4:	2303      	movs	r3, #3
 802dfe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802dfea:	2302      	movs	r3, #2
 802dfec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802dff0:	2300      	movs	r3, #0
 802dff2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802dff6:	2300      	movs	r3, #0
 802dff8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802dffc:	2308      	movs	r3, #8
 802dffe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802e002:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802e006:	4619      	mov	r1, r3
 802e008:	4858      	ldr	r0, [pc, #352]	; (802e16c <HAL_UART_MspInit+0x344>)
 802e00a:	f003 fcbb 	bl	8031984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802e00e:	2200      	movs	r2, #0
 802e010:	2102      	movs	r1, #2
 802e012:	2053      	movs	r0, #83	; 0x53
 802e014:	f000 fc63 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802e018:	2053      	movs	r0, #83	; 0x53
 802e01a:	f000 fc7a 	bl	802e912 <HAL_NVIC_EnableIRQ>
}
 802e01e:	e097      	b.n	802e150 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802e020:	687b      	ldr	r3, [r7, #4]
 802e022:	681b      	ldr	r3, [r3, #0]
 802e024:	4a53      	ldr	r2, [pc, #332]	; (802e174 <HAL_UART_MspInit+0x34c>)
 802e026:	4293      	cmp	r3, r2
 802e028:	d142      	bne.n	802e0b0 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802e02a:	2302      	movs	r3, #2
 802e02c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802e02e:	2300      	movs	r3, #0
 802e030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802e034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802e038:	4618      	mov	r0, r3
 802e03a:	f007 f8f3 	bl	8035224 <HAL_RCCEx_PeriphCLKConfig>
 802e03e:	4603      	mov	r3, r0
 802e040:	2b00      	cmp	r3, #0
 802e042:	d001      	beq.n	802e048 <HAL_UART_MspInit+0x220>
      Error_Handler();
 802e044:	f7ff f896 	bl	802d174 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802e048:	4b45      	ldr	r3, [pc, #276]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e04a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e04e:	4a44      	ldr	r2, [pc, #272]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802e054:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802e058:	4b41      	ldr	r3, [pc, #260]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e05a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e05e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e062:	617b      	str	r3, [r7, #20]
 802e064:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802e066:	4b3e      	ldr	r3, [pc, #248]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802e06c:	4a3c      	ldr	r2, [pc, #240]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e06e:	f043 0301 	orr.w	r3, r3, #1
 802e072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802e076:	4b3a      	ldr	r3, [pc, #232]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802e07c:	f003 0301 	and.w	r3, r3, #1
 802e080:	613b      	str	r3, [r7, #16]
 802e082:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802e084:	230c      	movs	r3, #12
 802e086:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802e08a:	2302      	movs	r3, #2
 802e08c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802e090:	2300      	movs	r3, #0
 802e092:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802e096:	2300      	movs	r3, #0
 802e098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802e09c:	2307      	movs	r3, #7
 802e09e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802e0a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802e0a6:	4619      	mov	r1, r3
 802e0a8:	482e      	ldr	r0, [pc, #184]	; (802e164 <HAL_UART_MspInit+0x33c>)
 802e0aa:	f003 fc6b 	bl	8031984 <HAL_GPIO_Init>
}
 802e0ae:	e04f      	b.n	802e150 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802e0b0:	687b      	ldr	r3, [r7, #4]
 802e0b2:	681b      	ldr	r3, [r3, #0]
 802e0b4:	4a30      	ldr	r2, [pc, #192]	; (802e178 <HAL_UART_MspInit+0x350>)
 802e0b6:	4293      	cmp	r3, r2
 802e0b8:	d14a      	bne.n	802e150 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802e0ba:	2302      	movs	r3, #2
 802e0bc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802e0be:	2300      	movs	r3, #0
 802e0c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802e0c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802e0c8:	4618      	mov	r0, r3
 802e0ca:	f007 f8ab 	bl	8035224 <HAL_RCCEx_PeriphCLKConfig>
 802e0ce:	4603      	mov	r3, r0
 802e0d0:	2b00      	cmp	r3, #0
 802e0d2:	d001      	beq.n	802e0d8 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802e0d4:	f7ff f84e 	bl	802d174 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802e0d8:	4b21      	ldr	r3, [pc, #132]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e0da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e0de:	4a20      	ldr	r2, [pc, #128]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e0e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802e0e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802e0e8:	4b1d      	ldr	r3, [pc, #116]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e0ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802e0ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802e0f2:	60fb      	str	r3, [r7, #12]
 802e0f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802e0f6:	4b1a      	ldr	r3, [pc, #104]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e0f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802e0fc:	4a18      	ldr	r2, [pc, #96]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e0fe:	f043 0308 	orr.w	r3, r3, #8
 802e102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802e106:	4b16      	ldr	r3, [pc, #88]	; (802e160 <HAL_UART_MspInit+0x338>)
 802e108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802e10c:	f003 0308 	and.w	r3, r3, #8
 802e110:	60bb      	str	r3, [r7, #8]
 802e112:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802e114:	f44f 7340 	mov.w	r3, #768	; 0x300
 802e118:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802e11c:	2302      	movs	r3, #2
 802e11e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802e122:	2300      	movs	r3, #0
 802e124:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802e128:	2300      	movs	r3, #0
 802e12a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802e12e:	2307      	movs	r3, #7
 802e130:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802e134:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802e138:	4619      	mov	r1, r3
 802e13a:	4810      	ldr	r0, [pc, #64]	; (802e17c <HAL_UART_MspInit+0x354>)
 802e13c:	f003 fc22 	bl	8031984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802e140:	2200      	movs	r2, #0
 802e142:	2100      	movs	r1, #0
 802e144:	2027      	movs	r0, #39	; 0x27
 802e146:	f000 fbca 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802e14a:	2027      	movs	r0, #39	; 0x27
 802e14c:	f000 fbe1 	bl	802e912 <HAL_NVIC_EnableIRQ>
}
 802e150:	bf00      	nop
 802e152:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802e156:	46bd      	mov	sp, r7
 802e158:	bd80      	pop	{r7, pc}
 802e15a:	bf00      	nop
 802e15c:	40004c00 	.word	0x40004c00
 802e160:	58024400 	.word	0x58024400
 802e164:	58020000 	.word	0x58020000
 802e168:	40007800 	.word	0x40007800
 802e16c:	58021000 	.word	0x58021000
 802e170:	40007c00 	.word	0x40007c00
 802e174:	40004400 	.word	0x40004400
 802e178:	40004800 	.word	0x40004800
 802e17c:	58020c00 	.word	0x58020c00

0802e180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802e180:	f8df d034 	ldr.w	sp, [pc, #52]	; 802e1b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802e184:	f7ff fae2 	bl	802d74c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802e188:	480c      	ldr	r0, [pc, #48]	; (802e1bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802e18a:	490d      	ldr	r1, [pc, #52]	; (802e1c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802e18c:	4a0d      	ldr	r2, [pc, #52]	; (802e1c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802e18e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802e190:	e002      	b.n	802e198 <LoopCopyDataInit>

0802e192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802e192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802e194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802e196:	3304      	adds	r3, #4

0802e198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802e198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802e19a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802e19c:	d3f9      	bcc.n	802e192 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802e19e:	4a0a      	ldr	r2, [pc, #40]	; (802e1c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802e1a0:	4c0a      	ldr	r4, [pc, #40]	; (802e1cc <LoopFillZerobss+0x22>)
  movs r3, #0
 802e1a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 802e1a4:	e001      	b.n	802e1aa <LoopFillZerobss>

0802e1a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802e1a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802e1a8:	3204      	adds	r2, #4

0802e1aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802e1aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802e1ac:	d3fb      	bcc.n	802e1a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802e1ae:	f011 f947 	bl	803f440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802e1b2:	f7fe fe37 	bl	802ce24 <main>
  bx  lr
 802e1b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802e1b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802e1bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802e1c0:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 802e1c4:	0805b948 	.word	0x0805b948
  ldr r2, =_sbss
 802e1c8:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802e1cc:	240037f0 	.word	0x240037f0

0802e1d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802e1d0:	e7fe      	b.n	802e1d0 <ADC3_IRQHandler>
	...

0802e1d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802e1d4:	b580      	push	{r7, lr}
 802e1d6:	b082      	sub	sp, #8
 802e1d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802e1da:	2003      	movs	r0, #3
 802e1dc:	f000 fb74 	bl	802e8c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802e1e0:	f006 fe4a 	bl	8034e78 <HAL_RCC_GetSysClockFreq>
 802e1e4:	4602      	mov	r2, r0
 802e1e6:	4b15      	ldr	r3, [pc, #84]	; (802e23c <HAL_Init+0x68>)
 802e1e8:	699b      	ldr	r3, [r3, #24]
 802e1ea:	0a1b      	lsrs	r3, r3, #8
 802e1ec:	f003 030f 	and.w	r3, r3, #15
 802e1f0:	4913      	ldr	r1, [pc, #76]	; (802e240 <HAL_Init+0x6c>)
 802e1f2:	5ccb      	ldrb	r3, [r1, r3]
 802e1f4:	f003 031f 	and.w	r3, r3, #31
 802e1f8:	fa22 f303 	lsr.w	r3, r2, r3
 802e1fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802e1fe:	4b0f      	ldr	r3, [pc, #60]	; (802e23c <HAL_Init+0x68>)
 802e200:	699b      	ldr	r3, [r3, #24]
 802e202:	f003 030f 	and.w	r3, r3, #15
 802e206:	4a0e      	ldr	r2, [pc, #56]	; (802e240 <HAL_Init+0x6c>)
 802e208:	5cd3      	ldrb	r3, [r2, r3]
 802e20a:	f003 031f 	and.w	r3, r3, #31
 802e20e:	687a      	ldr	r2, [r7, #4]
 802e210:	fa22 f303 	lsr.w	r3, r2, r3
 802e214:	4a0b      	ldr	r2, [pc, #44]	; (802e244 <HAL_Init+0x70>)
 802e216:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802e218:	4a0b      	ldr	r2, [pc, #44]	; (802e248 <HAL_Init+0x74>)
 802e21a:	687b      	ldr	r3, [r7, #4]
 802e21c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802e21e:	200f      	movs	r0, #15
 802e220:	f000 f814 	bl	802e24c <HAL_InitTick>
 802e224:	4603      	mov	r3, r0
 802e226:	2b00      	cmp	r3, #0
 802e228:	d001      	beq.n	802e22e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802e22a:	2301      	movs	r3, #1
 802e22c:	e002      	b.n	802e234 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802e22e:	f7ff f8e3 	bl	802d3f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802e232:	2300      	movs	r3, #0
}
 802e234:	4618      	mov	r0, r3
 802e236:	3708      	adds	r7, #8
 802e238:	46bd      	mov	sp, r7
 802e23a:	bd80      	pop	{r7, pc}
 802e23c:	58024400 	.word	0x58024400
 802e240:	0805b81c 	.word	0x0805b81c
 802e244:	24000008 	.word	0x24000008
 802e248:	24000004 	.word	0x24000004

0802e24c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802e24c:	b580      	push	{r7, lr}
 802e24e:	b082      	sub	sp, #8
 802e250:	af00      	add	r7, sp, #0
 802e252:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802e254:	4b15      	ldr	r3, [pc, #84]	; (802e2ac <HAL_InitTick+0x60>)
 802e256:	781b      	ldrb	r3, [r3, #0]
 802e258:	2b00      	cmp	r3, #0
 802e25a:	d101      	bne.n	802e260 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802e25c:	2301      	movs	r3, #1
 802e25e:	e021      	b.n	802e2a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802e260:	4b13      	ldr	r3, [pc, #76]	; (802e2b0 <HAL_InitTick+0x64>)
 802e262:	681a      	ldr	r2, [r3, #0]
 802e264:	4b11      	ldr	r3, [pc, #68]	; (802e2ac <HAL_InitTick+0x60>)
 802e266:	781b      	ldrb	r3, [r3, #0]
 802e268:	4619      	mov	r1, r3
 802e26a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802e26e:	fbb3 f3f1 	udiv	r3, r3, r1
 802e272:	fbb2 f3f3 	udiv	r3, r2, r3
 802e276:	4618      	mov	r0, r3
 802e278:	f000 fb59 	bl	802e92e <HAL_SYSTICK_Config>
 802e27c:	4603      	mov	r3, r0
 802e27e:	2b00      	cmp	r3, #0
 802e280:	d001      	beq.n	802e286 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802e282:	2301      	movs	r3, #1
 802e284:	e00e      	b.n	802e2a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802e286:	687b      	ldr	r3, [r7, #4]
 802e288:	2b0f      	cmp	r3, #15
 802e28a:	d80a      	bhi.n	802e2a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802e28c:	2200      	movs	r2, #0
 802e28e:	6879      	ldr	r1, [r7, #4]
 802e290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802e294:	f000 fb23 	bl	802e8de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802e298:	4a06      	ldr	r2, [pc, #24]	; (802e2b4 <HAL_InitTick+0x68>)
 802e29a:	687b      	ldr	r3, [r7, #4]
 802e29c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802e29e:	2300      	movs	r3, #0
 802e2a0:	e000      	b.n	802e2a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 802e2a2:	2301      	movs	r3, #1
}
 802e2a4:	4618      	mov	r0, r3
 802e2a6:	3708      	adds	r7, #8
 802e2a8:	46bd      	mov	sp, r7
 802e2aa:	bd80      	pop	{r7, pc}
 802e2ac:	24000010 	.word	0x24000010
 802e2b0:	24000004 	.word	0x24000004
 802e2b4:	2400000c 	.word	0x2400000c

0802e2b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802e2b8:	b480      	push	{r7}
 802e2ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802e2bc:	4b06      	ldr	r3, [pc, #24]	; (802e2d8 <HAL_IncTick+0x20>)
 802e2be:	781b      	ldrb	r3, [r3, #0]
 802e2c0:	461a      	mov	r2, r3
 802e2c2:	4b06      	ldr	r3, [pc, #24]	; (802e2dc <HAL_IncTick+0x24>)
 802e2c4:	681b      	ldr	r3, [r3, #0]
 802e2c6:	4413      	add	r3, r2
 802e2c8:	4a04      	ldr	r2, [pc, #16]	; (802e2dc <HAL_IncTick+0x24>)
 802e2ca:	6013      	str	r3, [r2, #0]
}
 802e2cc:	bf00      	nop
 802e2ce:	46bd      	mov	sp, r7
 802e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2d4:	4770      	bx	lr
 802e2d6:	bf00      	nop
 802e2d8:	24000010 	.word	0x24000010
 802e2dc:	24001bcc 	.word	0x24001bcc

0802e2e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802e2e0:	b480      	push	{r7}
 802e2e2:	af00      	add	r7, sp, #0
  return uwTick;
 802e2e4:	4b03      	ldr	r3, [pc, #12]	; (802e2f4 <HAL_GetTick+0x14>)
 802e2e6:	681b      	ldr	r3, [r3, #0]
}
 802e2e8:	4618      	mov	r0, r3
 802e2ea:	46bd      	mov	sp, r7
 802e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2f0:	4770      	bx	lr
 802e2f2:	bf00      	nop
 802e2f4:	24001bcc 	.word	0x24001bcc

0802e2f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802e2f8:	b580      	push	{r7, lr}
 802e2fa:	b084      	sub	sp, #16
 802e2fc:	af00      	add	r7, sp, #0
 802e2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802e300:	f7ff ffee 	bl	802e2e0 <HAL_GetTick>
 802e304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802e306:	687b      	ldr	r3, [r7, #4]
 802e308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802e30a:	68fb      	ldr	r3, [r7, #12]
 802e30c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802e310:	d005      	beq.n	802e31e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802e312:	4b0a      	ldr	r3, [pc, #40]	; (802e33c <HAL_Delay+0x44>)
 802e314:	781b      	ldrb	r3, [r3, #0]
 802e316:	461a      	mov	r2, r3
 802e318:	68fb      	ldr	r3, [r7, #12]
 802e31a:	4413      	add	r3, r2
 802e31c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802e31e:	bf00      	nop
 802e320:	f7ff ffde 	bl	802e2e0 <HAL_GetTick>
 802e324:	4602      	mov	r2, r0
 802e326:	68bb      	ldr	r3, [r7, #8]
 802e328:	1ad3      	subs	r3, r2, r3
 802e32a:	68fa      	ldr	r2, [r7, #12]
 802e32c:	429a      	cmp	r2, r3
 802e32e:	d8f7      	bhi.n	802e320 <HAL_Delay+0x28>
  {
  }
}
 802e330:	bf00      	nop
 802e332:	bf00      	nop
 802e334:	3710      	adds	r7, #16
 802e336:	46bd      	mov	sp, r7
 802e338:	bd80      	pop	{r7, pc}
 802e33a:	bf00      	nop
 802e33c:	24000010 	.word	0x24000010

0802e340 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802e340:	b480      	push	{r7}
 802e342:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802e344:	4b03      	ldr	r3, [pc, #12]	; (802e354 <HAL_GetREVID+0x14>)
 802e346:	681b      	ldr	r3, [r3, #0]
 802e348:	0c1b      	lsrs	r3, r3, #16
}
 802e34a:	4618      	mov	r0, r3
 802e34c:	46bd      	mov	sp, r7
 802e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e352:	4770      	bx	lr
 802e354:	5c001000 	.word	0x5c001000

0802e358 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802e358:	b580      	push	{r7, lr}
 802e35a:	b088      	sub	sp, #32
 802e35c:	af00      	add	r7, sp, #0
 802e35e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802e360:	2300      	movs	r3, #0
 802e362:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802e364:	2300      	movs	r3, #0
 802e366:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802e368:	687b      	ldr	r3, [r7, #4]
 802e36a:	2b00      	cmp	r3, #0
 802e36c:	d102      	bne.n	802e374 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802e36e:	2301      	movs	r3, #1
 802e370:	77fb      	strb	r3, [r7, #31]
 802e372:	e10e      	b.n	802e592 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802e374:	687b      	ldr	r3, [r7, #4]
 802e376:	681b      	ldr	r3, [r3, #0]
 802e378:	681b      	ldr	r3, [r3, #0]
 802e37a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e37e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e382:	d102      	bne.n	802e38a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802e384:	2301      	movs	r3, #1
 802e386:	77fb      	strb	r3, [r7, #31]
 802e388:	e103      	b.n	802e592 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802e38a:	687b      	ldr	r3, [r7, #4]
 802e38c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802e390:	b2db      	uxtb	r3, r3
 802e392:	2b00      	cmp	r3, #0
 802e394:	d109      	bne.n	802e3aa <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802e396:	687b      	ldr	r3, [r7, #4]
 802e398:	2200      	movs	r2, #0
 802e39a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802e39e:	687b      	ldr	r3, [r7, #4]
 802e3a0:	2200      	movs	r2, #0
 802e3a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802e3a4:	6878      	ldr	r0, [r7, #4]
 802e3a6:	f7fe fac3 	bl	802c930 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802e3aa:	687b      	ldr	r3, [r7, #4]
 802e3ac:	681b      	ldr	r3, [r3, #0]
 802e3ae:	681b      	ldr	r3, [r3, #0]
 802e3b0:	f003 0304 	and.w	r3, r3, #4
 802e3b4:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802e3b6:	687b      	ldr	r3, [r7, #4]
 802e3b8:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802e3ba:	687b      	ldr	r3, [r7, #4]
 802e3bc:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802e3be:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802e3c0:	687b      	ldr	r3, [r7, #4]
 802e3c2:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802e3c4:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802e3c6:	687b      	ldr	r3, [r7, #4]
 802e3c8:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802e3ca:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802e3cc:	687b      	ldr	r3, [r7, #4]
 802e3ce:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802e3d0:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802e3d2:	687b      	ldr	r3, [r7, #4]
 802e3d4:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802e3d6:	4313      	orrs	r3, r2
 802e3d8:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802e3da:	687b      	ldr	r3, [r7, #4]
 802e3dc:	681b      	ldr	r3, [r3, #0]
 802e3de:	681a      	ldr	r2, [r3, #0]
 802e3e0:	4b6e      	ldr	r3, [pc, #440]	; (802e59c <HAL_COMP_Init+0x244>)
 802e3e2:	4013      	ands	r3, r2
 802e3e4:	687a      	ldr	r2, [r7, #4]
 802e3e6:	6812      	ldr	r2, [r2, #0]
 802e3e8:	6979      	ldr	r1, [r7, #20]
 802e3ea:	430b      	orrs	r3, r1
 802e3ec:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802e3ee:	687b      	ldr	r3, [r7, #4]
 802e3f0:	685b      	ldr	r3, [r3, #4]
 802e3f2:	2b10      	cmp	r3, #16
 802e3f4:	d108      	bne.n	802e408 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802e3f6:	687b      	ldr	r3, [r7, #4]
 802e3f8:	681b      	ldr	r3, [r3, #0]
 802e3fa:	681a      	ldr	r2, [r3, #0]
 802e3fc:	687b      	ldr	r3, [r7, #4]
 802e3fe:	681b      	ldr	r3, [r3, #0]
 802e400:	f042 0210 	orr.w	r2, r2, #16
 802e404:	601a      	str	r2, [r3, #0]
 802e406:	e007      	b.n	802e418 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802e408:	687b      	ldr	r3, [r7, #4]
 802e40a:	681b      	ldr	r3, [r3, #0]
 802e40c:	681a      	ldr	r2, [r3, #0]
 802e40e:	687b      	ldr	r3, [r7, #4]
 802e410:	681b      	ldr	r3, [r3, #0]
 802e412:	f022 0210 	bic.w	r2, r2, #16
 802e416:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802e418:	687b      	ldr	r3, [r7, #4]
 802e41a:	681b      	ldr	r3, [r3, #0]
 802e41c:	681b      	ldr	r3, [r3, #0]
 802e41e:	f003 0304 	and.w	r3, r3, #4
 802e422:	2b00      	cmp	r3, #0
 802e424:	d016      	beq.n	802e454 <HAL_COMP_Init+0xfc>
 802e426:	69bb      	ldr	r3, [r7, #24]
 802e428:	2b00      	cmp	r3, #0
 802e42a:	d013      	beq.n	802e454 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802e42c:	4b5c      	ldr	r3, [pc, #368]	; (802e5a0 <HAL_COMP_Init+0x248>)
 802e42e:	681b      	ldr	r3, [r3, #0]
 802e430:	099b      	lsrs	r3, r3, #6
 802e432:	4a5c      	ldr	r2, [pc, #368]	; (802e5a4 <HAL_COMP_Init+0x24c>)
 802e434:	fba2 2303 	umull	r2, r3, r2, r3
 802e438:	099b      	lsrs	r3, r3, #6
 802e43a:	1c5a      	adds	r2, r3, #1
 802e43c:	4613      	mov	r3, r2
 802e43e:	009b      	lsls	r3, r3, #2
 802e440:	4413      	add	r3, r2
 802e442:	009b      	lsls	r3, r3, #2
 802e444:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802e446:	e002      	b.n	802e44e <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802e448:	68fb      	ldr	r3, [r7, #12]
 802e44a:	3b01      	subs	r3, #1
 802e44c:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802e44e:	68fb      	ldr	r3, [r7, #12]
 802e450:	2b00      	cmp	r3, #0
 802e452:	d1f9      	bne.n	802e448 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802e454:	687b      	ldr	r3, [r7, #4]
 802e456:	681b      	ldr	r3, [r3, #0]
 802e458:	4a53      	ldr	r2, [pc, #332]	; (802e5a8 <HAL_COMP_Init+0x250>)
 802e45a:	4293      	cmp	r3, r2
 802e45c:	d102      	bne.n	802e464 <HAL_COMP_Init+0x10c>
 802e45e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802e462:	e001      	b.n	802e468 <HAL_COMP_Init+0x110>
 802e464:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802e468:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802e46a:	687b      	ldr	r3, [r7, #4]
 802e46c:	6a1b      	ldr	r3, [r3, #32]
 802e46e:	f003 0303 	and.w	r3, r3, #3
 802e472:	2b00      	cmp	r3, #0
 802e474:	d06d      	beq.n	802e552 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802e476:	687b      	ldr	r3, [r7, #4]
 802e478:	6a1b      	ldr	r3, [r3, #32]
 802e47a:	f003 0310 	and.w	r3, r3, #16
 802e47e:	2b00      	cmp	r3, #0
 802e480:	d008      	beq.n	802e494 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802e482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e486:	681a      	ldr	r2, [r3, #0]
 802e488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e48c:	693b      	ldr	r3, [r7, #16]
 802e48e:	4313      	orrs	r3, r2
 802e490:	600b      	str	r3, [r1, #0]
 802e492:	e008      	b.n	802e4a6 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802e494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e498:	681a      	ldr	r2, [r3, #0]
 802e49a:	693b      	ldr	r3, [r7, #16]
 802e49c:	43db      	mvns	r3, r3
 802e49e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e4a2:	4013      	ands	r3, r2
 802e4a4:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802e4a6:	687b      	ldr	r3, [r7, #4]
 802e4a8:	6a1b      	ldr	r3, [r3, #32]
 802e4aa:	f003 0320 	and.w	r3, r3, #32
 802e4ae:	2b00      	cmp	r3, #0
 802e4b0:	d008      	beq.n	802e4c4 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802e4b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e4b6:	685a      	ldr	r2, [r3, #4]
 802e4b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e4bc:	693b      	ldr	r3, [r7, #16]
 802e4be:	4313      	orrs	r3, r2
 802e4c0:	604b      	str	r3, [r1, #4]
 802e4c2:	e008      	b.n	802e4d6 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802e4c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e4c8:	685a      	ldr	r2, [r3, #4]
 802e4ca:	693b      	ldr	r3, [r7, #16]
 802e4cc:	43db      	mvns	r3, r3
 802e4ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e4d2:	4013      	ands	r3, r2
 802e4d4:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802e4d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e4da:	693b      	ldr	r3, [r7, #16]
 802e4dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802e4e0:	687b      	ldr	r3, [r7, #4]
 802e4e2:	6a1b      	ldr	r3, [r3, #32]
 802e4e4:	f003 0302 	and.w	r3, r3, #2
 802e4e8:	2b00      	cmp	r3, #0
 802e4ea:	d00a      	beq.n	802e502 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802e4ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e4f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e4f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e4f8:	693b      	ldr	r3, [r7, #16]
 802e4fa:	4313      	orrs	r3, r2
 802e4fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802e500:	e00a      	b.n	802e518 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802e502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e506:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e50a:	693b      	ldr	r3, [r7, #16]
 802e50c:	43db      	mvns	r3, r3
 802e50e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e512:	4013      	ands	r3, r2
 802e514:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802e518:	687b      	ldr	r3, [r7, #4]
 802e51a:	6a1b      	ldr	r3, [r3, #32]
 802e51c:	f003 0301 	and.w	r3, r3, #1
 802e520:	2b00      	cmp	r3, #0
 802e522:	d00a      	beq.n	802e53a <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802e524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e528:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802e52c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e530:	693b      	ldr	r3, [r7, #16]
 802e532:	4313      	orrs	r3, r2
 802e534:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802e538:	e021      	b.n	802e57e <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802e53a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e53e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802e542:	693b      	ldr	r3, [r7, #16]
 802e544:	43db      	mvns	r3, r3
 802e546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e54a:	4013      	ands	r3, r2
 802e54c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802e550:	e015      	b.n	802e57e <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802e552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e556:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802e55a:	693b      	ldr	r3, [r7, #16]
 802e55c:	43db      	mvns	r3, r3
 802e55e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e562:	4013      	ands	r3, r2
 802e564:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802e568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e56c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802e570:	693b      	ldr	r3, [r7, #16]
 802e572:	43db      	mvns	r3, r3
 802e574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802e578:	4013      	ands	r3, r2
 802e57a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802e57e:	687b      	ldr	r3, [r7, #4]
 802e580:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802e584:	b2db      	uxtb	r3, r3
 802e586:	2b00      	cmp	r3, #0
 802e588:	d103      	bne.n	802e592 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802e58a:	687b      	ldr	r3, [r7, #4]
 802e58c:	2201      	movs	r2, #1
 802e58e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802e592:	7ffb      	ldrb	r3, [r7, #31]
}
 802e594:	4618      	mov	r0, r3
 802e596:	3720      	adds	r7, #32
 802e598:	46bd      	mov	sp, r7
 802e59a:	bd80      	pop	{r7, pc}
 802e59c:	f0e8cce1 	.word	0xf0e8cce1
 802e5a0:	24000004 	.word	0x24000004
 802e5a4:	053e2d63 	.word	0x053e2d63
 802e5a8:	5800380c 	.word	0x5800380c

0802e5ac <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802e5ac:	b480      	push	{r7}
 802e5ae:	b085      	sub	sp, #20
 802e5b0:	af00      	add	r7, sp, #0
 802e5b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802e5b4:	2300      	movs	r3, #0
 802e5b6:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802e5b8:	2300      	movs	r3, #0
 802e5ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802e5bc:	687b      	ldr	r3, [r7, #4]
 802e5be:	2b00      	cmp	r3, #0
 802e5c0:	d102      	bne.n	802e5c8 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802e5c2:	2301      	movs	r3, #1
 802e5c4:	73fb      	strb	r3, [r7, #15]
 802e5c6:	e030      	b.n	802e62a <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802e5c8:	687b      	ldr	r3, [r7, #4]
 802e5ca:	681b      	ldr	r3, [r3, #0]
 802e5cc:	681b      	ldr	r3, [r3, #0]
 802e5ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802e5d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802e5d6:	d102      	bne.n	802e5de <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802e5d8:	2301      	movs	r3, #1
 802e5da:	73fb      	strb	r3, [r7, #15]
 802e5dc:	e025      	b.n	802e62a <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802e5de:	687b      	ldr	r3, [r7, #4]
 802e5e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802e5e4:	b2db      	uxtb	r3, r3
 802e5e6:	2b01      	cmp	r3, #1
 802e5e8:	d11d      	bne.n	802e626 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802e5ea:	687b      	ldr	r3, [r7, #4]
 802e5ec:	681b      	ldr	r3, [r3, #0]
 802e5ee:	681a      	ldr	r2, [r3, #0]
 802e5f0:	687b      	ldr	r3, [r7, #4]
 802e5f2:	681b      	ldr	r3, [r3, #0]
 802e5f4:	f042 0201 	orr.w	r2, r2, #1
 802e5f8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802e5fa:	687b      	ldr	r3, [r7, #4]
 802e5fc:	2202      	movs	r2, #2
 802e5fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802e602:	4b0d      	ldr	r3, [pc, #52]	; (802e638 <HAL_COMP_Start+0x8c>)
 802e604:	681b      	ldr	r3, [r3, #0]
 802e606:	099b      	lsrs	r3, r3, #6
 802e608:	4a0c      	ldr	r2, [pc, #48]	; (802e63c <HAL_COMP_Start+0x90>)
 802e60a:	fba2 2303 	umull	r2, r3, r2, r3
 802e60e:	099b      	lsrs	r3, r3, #6
 802e610:	3301      	adds	r3, #1
 802e612:	00db      	lsls	r3, r3, #3
 802e614:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802e616:	e002      	b.n	802e61e <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802e618:	68bb      	ldr	r3, [r7, #8]
 802e61a:	3b01      	subs	r3, #1
 802e61c:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802e61e:	68bb      	ldr	r3, [r7, #8]
 802e620:	2b00      	cmp	r3, #0
 802e622:	d1f9      	bne.n	802e618 <HAL_COMP_Start+0x6c>
 802e624:	e001      	b.n	802e62a <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802e626:	2301      	movs	r3, #1
 802e628:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802e62a:	7bfb      	ldrb	r3, [r7, #15]
}
 802e62c:	4618      	mov	r0, r3
 802e62e:	3714      	adds	r7, #20
 802e630:	46bd      	mov	sp, r7
 802e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e636:	4770      	bx	lr
 802e638:	24000004 	.word	0x24000004
 802e63c:	053e2d63 	.word	0x053e2d63

0802e640 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802e640:	b580      	push	{r7, lr}
 802e642:	b084      	sub	sp, #16
 802e644:	af00      	add	r7, sp, #0
 802e646:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802e648:	687b      	ldr	r3, [r7, #4]
 802e64a:	681b      	ldr	r3, [r3, #0]
 802e64c:	4a33      	ldr	r2, [pc, #204]	; (802e71c <HAL_COMP_IRQHandler+0xdc>)
 802e64e:	4293      	cmp	r3, r2
 802e650:	d102      	bne.n	802e658 <HAL_COMP_IRQHandler+0x18>
 802e652:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802e656:	e001      	b.n	802e65c <HAL_COMP_IRQHandler+0x1c>
 802e658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802e65c:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802e65e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e662:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802e666:	68fb      	ldr	r3, [r7, #12]
 802e668:	4013      	ands	r3, r2
 802e66a:	2b00      	cmp	r3, #0
 802e66c:	d014      	beq.n	802e698 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802e66e:	4b2c      	ldr	r3, [pc, #176]	; (802e720 <HAL_COMP_IRQHandler+0xe0>)
 802e670:	681b      	ldr	r3, [r3, #0]
 802e672:	f003 0310 	and.w	r3, r3, #16
 802e676:	2b00      	cmp	r3, #0
 802e678:	d006      	beq.n	802e688 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802e67a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e67e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802e682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802e686:	e004      	b.n	802e692 <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802e688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e68c:	68fb      	ldr	r3, [r7, #12]
 802e68e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802e692:	6878      	ldr	r0, [r7, #4]
 802e694:	f7fe fcfc 	bl	802d090 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802e698:	687b      	ldr	r3, [r7, #4]
 802e69a:	681b      	ldr	r3, [r3, #0]
 802e69c:	681b      	ldr	r3, [r3, #0]
 802e69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e6a2:	2b40      	cmp	r3, #64	; 0x40
 802e6a4:	d136      	bne.n	802e714 <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802e6a6:	4b1f      	ldr	r3, [pc, #124]	; (802e724 <HAL_COMP_IRQHandler+0xe4>)
 802e6a8:	681b      	ldr	r3, [r3, #0]
 802e6aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802e6ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802e6b2:	d101      	bne.n	802e6b8 <HAL_COMP_IRQHandler+0x78>
 802e6b4:	2301      	movs	r3, #1
 802e6b6:	e000      	b.n	802e6ba <HAL_COMP_IRQHandler+0x7a>
 802e6b8:	2300      	movs	r3, #0
 802e6ba:	2b00      	cmp	r3, #0
 802e6bc:	d00b      	beq.n	802e6d6 <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802e6be:	4b19      	ldr	r3, [pc, #100]	; (802e724 <HAL_COMP_IRQHandler+0xe4>)
 802e6c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802e6c4:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802e6c6:	687b      	ldr	r3, [r7, #4]
 802e6c8:	681b      	ldr	r3, [r3, #0]
 802e6ca:	681a      	ldr	r2, [r3, #0]
 802e6cc:	687b      	ldr	r3, [r7, #4]
 802e6ce:	681b      	ldr	r3, [r3, #0]
 802e6d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802e6d4:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802e6d6:	4b13      	ldr	r3, [pc, #76]	; (802e724 <HAL_COMP_IRQHandler+0xe4>)
 802e6d8:	681b      	ldr	r3, [r3, #0]
 802e6da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e6de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802e6e2:	d101      	bne.n	802e6e8 <HAL_COMP_IRQHandler+0xa8>
 802e6e4:	2301      	movs	r3, #1
 802e6e6:	e000      	b.n	802e6ea <HAL_COMP_IRQHandler+0xaa>
 802e6e8:	2300      	movs	r3, #0
 802e6ea:	2b00      	cmp	r3, #0
 802e6ec:	d00b      	beq.n	802e706 <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802e6ee:	4b0d      	ldr	r3, [pc, #52]	; (802e724 <HAL_COMP_IRQHandler+0xe4>)
 802e6f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802e6f4:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802e6f6:	687b      	ldr	r3, [r7, #4]
 802e6f8:	681b      	ldr	r3, [r3, #0]
 802e6fa:	681a      	ldr	r2, [r3, #0]
 802e6fc:	687b      	ldr	r3, [r7, #4]
 802e6fe:	681b      	ldr	r3, [r3, #0]
 802e700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802e704:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802e706:	687b      	ldr	r3, [r7, #4]
 802e708:	2201      	movs	r2, #1
 802e70a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802e70e:	6878      	ldr	r0, [r7, #4]
 802e710:	f7fe fcbe 	bl	802d090 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802e714:	bf00      	nop
 802e716:	3710      	adds	r7, #16
 802e718:	46bd      	mov	sp, r7
 802e71a:	bd80      	pop	{r7, pc}
 802e71c:	5800380c 	.word	0x5800380c
 802e720:	58003810 	.word	0x58003810
 802e724:	58003800 	.word	0x58003800

0802e728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802e728:	b480      	push	{r7}
 802e72a:	b085      	sub	sp, #20
 802e72c:	af00      	add	r7, sp, #0
 802e72e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802e730:	687b      	ldr	r3, [r7, #4]
 802e732:	f003 0307 	and.w	r3, r3, #7
 802e736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802e738:	4b0b      	ldr	r3, [pc, #44]	; (802e768 <__NVIC_SetPriorityGrouping+0x40>)
 802e73a:	68db      	ldr	r3, [r3, #12]
 802e73c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802e73e:	68ba      	ldr	r2, [r7, #8]
 802e740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802e744:	4013      	ands	r3, r2
 802e746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802e748:	68fb      	ldr	r3, [r7, #12]
 802e74a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802e74c:	68bb      	ldr	r3, [r7, #8]
 802e74e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802e750:	4b06      	ldr	r3, [pc, #24]	; (802e76c <__NVIC_SetPriorityGrouping+0x44>)
 802e752:	4313      	orrs	r3, r2
 802e754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802e756:	4a04      	ldr	r2, [pc, #16]	; (802e768 <__NVIC_SetPriorityGrouping+0x40>)
 802e758:	68bb      	ldr	r3, [r7, #8]
 802e75a:	60d3      	str	r3, [r2, #12]
}
 802e75c:	bf00      	nop
 802e75e:	3714      	adds	r7, #20
 802e760:	46bd      	mov	sp, r7
 802e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e766:	4770      	bx	lr
 802e768:	e000ed00 	.word	0xe000ed00
 802e76c:	05fa0000 	.word	0x05fa0000

0802e770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802e770:	b480      	push	{r7}
 802e772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802e774:	4b04      	ldr	r3, [pc, #16]	; (802e788 <__NVIC_GetPriorityGrouping+0x18>)
 802e776:	68db      	ldr	r3, [r3, #12]
 802e778:	0a1b      	lsrs	r3, r3, #8
 802e77a:	f003 0307 	and.w	r3, r3, #7
}
 802e77e:	4618      	mov	r0, r3
 802e780:	46bd      	mov	sp, r7
 802e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e786:	4770      	bx	lr
 802e788:	e000ed00 	.word	0xe000ed00

0802e78c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802e78c:	b480      	push	{r7}
 802e78e:	b083      	sub	sp, #12
 802e790:	af00      	add	r7, sp, #0
 802e792:	4603      	mov	r3, r0
 802e794:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802e796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e79a:	2b00      	cmp	r3, #0
 802e79c:	db0b      	blt.n	802e7b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802e79e:	88fb      	ldrh	r3, [r7, #6]
 802e7a0:	f003 021f 	and.w	r2, r3, #31
 802e7a4:	4907      	ldr	r1, [pc, #28]	; (802e7c4 <__NVIC_EnableIRQ+0x38>)
 802e7a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e7aa:	095b      	lsrs	r3, r3, #5
 802e7ac:	2001      	movs	r0, #1
 802e7ae:	fa00 f202 	lsl.w	r2, r0, r2
 802e7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802e7b6:	bf00      	nop
 802e7b8:	370c      	adds	r7, #12
 802e7ba:	46bd      	mov	sp, r7
 802e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e7c0:	4770      	bx	lr
 802e7c2:	bf00      	nop
 802e7c4:	e000e100 	.word	0xe000e100

0802e7c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802e7c8:	b480      	push	{r7}
 802e7ca:	b083      	sub	sp, #12
 802e7cc:	af00      	add	r7, sp, #0
 802e7ce:	4603      	mov	r3, r0
 802e7d0:	6039      	str	r1, [r7, #0]
 802e7d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802e7d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e7d8:	2b00      	cmp	r3, #0
 802e7da:	db0a      	blt.n	802e7f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802e7dc:	683b      	ldr	r3, [r7, #0]
 802e7de:	b2da      	uxtb	r2, r3
 802e7e0:	490c      	ldr	r1, [pc, #48]	; (802e814 <__NVIC_SetPriority+0x4c>)
 802e7e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e7e6:	0112      	lsls	r2, r2, #4
 802e7e8:	b2d2      	uxtb	r2, r2
 802e7ea:	440b      	add	r3, r1
 802e7ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802e7f0:	e00a      	b.n	802e808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802e7f2:	683b      	ldr	r3, [r7, #0]
 802e7f4:	b2da      	uxtb	r2, r3
 802e7f6:	4908      	ldr	r1, [pc, #32]	; (802e818 <__NVIC_SetPriority+0x50>)
 802e7f8:	88fb      	ldrh	r3, [r7, #6]
 802e7fa:	f003 030f 	and.w	r3, r3, #15
 802e7fe:	3b04      	subs	r3, #4
 802e800:	0112      	lsls	r2, r2, #4
 802e802:	b2d2      	uxtb	r2, r2
 802e804:	440b      	add	r3, r1
 802e806:	761a      	strb	r2, [r3, #24]
}
 802e808:	bf00      	nop
 802e80a:	370c      	adds	r7, #12
 802e80c:	46bd      	mov	sp, r7
 802e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e812:	4770      	bx	lr
 802e814:	e000e100 	.word	0xe000e100
 802e818:	e000ed00 	.word	0xe000ed00

0802e81c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802e81c:	b480      	push	{r7}
 802e81e:	b089      	sub	sp, #36	; 0x24
 802e820:	af00      	add	r7, sp, #0
 802e822:	60f8      	str	r0, [r7, #12]
 802e824:	60b9      	str	r1, [r7, #8]
 802e826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802e828:	68fb      	ldr	r3, [r7, #12]
 802e82a:	f003 0307 	and.w	r3, r3, #7
 802e82e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802e830:	69fb      	ldr	r3, [r7, #28]
 802e832:	f1c3 0307 	rsb	r3, r3, #7
 802e836:	2b04      	cmp	r3, #4
 802e838:	bf28      	it	cs
 802e83a:	2304      	movcs	r3, #4
 802e83c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802e83e:	69fb      	ldr	r3, [r7, #28]
 802e840:	3304      	adds	r3, #4
 802e842:	2b06      	cmp	r3, #6
 802e844:	d902      	bls.n	802e84c <NVIC_EncodePriority+0x30>
 802e846:	69fb      	ldr	r3, [r7, #28]
 802e848:	3b03      	subs	r3, #3
 802e84a:	e000      	b.n	802e84e <NVIC_EncodePriority+0x32>
 802e84c:	2300      	movs	r3, #0
 802e84e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802e850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802e854:	69bb      	ldr	r3, [r7, #24]
 802e856:	fa02 f303 	lsl.w	r3, r2, r3
 802e85a:	43da      	mvns	r2, r3
 802e85c:	68bb      	ldr	r3, [r7, #8]
 802e85e:	401a      	ands	r2, r3
 802e860:	697b      	ldr	r3, [r7, #20]
 802e862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802e864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802e868:	697b      	ldr	r3, [r7, #20]
 802e86a:	fa01 f303 	lsl.w	r3, r1, r3
 802e86e:	43d9      	mvns	r1, r3
 802e870:	687b      	ldr	r3, [r7, #4]
 802e872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802e874:	4313      	orrs	r3, r2
         );
}
 802e876:	4618      	mov	r0, r3
 802e878:	3724      	adds	r7, #36	; 0x24
 802e87a:	46bd      	mov	sp, r7
 802e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e880:	4770      	bx	lr
	...

0802e884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802e884:	b580      	push	{r7, lr}
 802e886:	b082      	sub	sp, #8
 802e888:	af00      	add	r7, sp, #0
 802e88a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802e88c:	687b      	ldr	r3, [r7, #4]
 802e88e:	3b01      	subs	r3, #1
 802e890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802e894:	d301      	bcc.n	802e89a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802e896:	2301      	movs	r3, #1
 802e898:	e00f      	b.n	802e8ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802e89a:	4a0a      	ldr	r2, [pc, #40]	; (802e8c4 <SysTick_Config+0x40>)
 802e89c:	687b      	ldr	r3, [r7, #4]
 802e89e:	3b01      	subs	r3, #1
 802e8a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802e8a2:	210f      	movs	r1, #15
 802e8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802e8a8:	f7ff ff8e 	bl	802e7c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802e8ac:	4b05      	ldr	r3, [pc, #20]	; (802e8c4 <SysTick_Config+0x40>)
 802e8ae:	2200      	movs	r2, #0
 802e8b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802e8b2:	4b04      	ldr	r3, [pc, #16]	; (802e8c4 <SysTick_Config+0x40>)
 802e8b4:	2207      	movs	r2, #7
 802e8b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802e8b8:	2300      	movs	r3, #0
}
 802e8ba:	4618      	mov	r0, r3
 802e8bc:	3708      	adds	r7, #8
 802e8be:	46bd      	mov	sp, r7
 802e8c0:	bd80      	pop	{r7, pc}
 802e8c2:	bf00      	nop
 802e8c4:	e000e010 	.word	0xe000e010

0802e8c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802e8c8:	b580      	push	{r7, lr}
 802e8ca:	b082      	sub	sp, #8
 802e8cc:	af00      	add	r7, sp, #0
 802e8ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802e8d0:	6878      	ldr	r0, [r7, #4]
 802e8d2:	f7ff ff29 	bl	802e728 <__NVIC_SetPriorityGrouping>
}
 802e8d6:	bf00      	nop
 802e8d8:	3708      	adds	r7, #8
 802e8da:	46bd      	mov	sp, r7
 802e8dc:	bd80      	pop	{r7, pc}

0802e8de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802e8de:	b580      	push	{r7, lr}
 802e8e0:	b086      	sub	sp, #24
 802e8e2:	af00      	add	r7, sp, #0
 802e8e4:	4603      	mov	r3, r0
 802e8e6:	60b9      	str	r1, [r7, #8]
 802e8e8:	607a      	str	r2, [r7, #4]
 802e8ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802e8ec:	f7ff ff40 	bl	802e770 <__NVIC_GetPriorityGrouping>
 802e8f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802e8f2:	687a      	ldr	r2, [r7, #4]
 802e8f4:	68b9      	ldr	r1, [r7, #8]
 802e8f6:	6978      	ldr	r0, [r7, #20]
 802e8f8:	f7ff ff90 	bl	802e81c <NVIC_EncodePriority>
 802e8fc:	4602      	mov	r2, r0
 802e8fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802e902:	4611      	mov	r1, r2
 802e904:	4618      	mov	r0, r3
 802e906:	f7ff ff5f 	bl	802e7c8 <__NVIC_SetPriority>
}
 802e90a:	bf00      	nop
 802e90c:	3718      	adds	r7, #24
 802e90e:	46bd      	mov	sp, r7
 802e910:	bd80      	pop	{r7, pc}

0802e912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802e912:	b580      	push	{r7, lr}
 802e914:	b082      	sub	sp, #8
 802e916:	af00      	add	r7, sp, #0
 802e918:	4603      	mov	r3, r0
 802e91a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802e91c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802e920:	4618      	mov	r0, r3
 802e922:	f7ff ff33 	bl	802e78c <__NVIC_EnableIRQ>
}
 802e926:	bf00      	nop
 802e928:	3708      	adds	r7, #8
 802e92a:	46bd      	mov	sp, r7
 802e92c:	bd80      	pop	{r7, pc}

0802e92e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802e92e:	b580      	push	{r7, lr}
 802e930:	b082      	sub	sp, #8
 802e932:	af00      	add	r7, sp, #0
 802e934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802e936:	6878      	ldr	r0, [r7, #4]
 802e938:	f7ff ffa4 	bl	802e884 <SysTick_Config>
 802e93c:	4603      	mov	r3, r0
}
 802e93e:	4618      	mov	r0, r3
 802e940:	3708      	adds	r7, #8
 802e942:	46bd      	mov	sp, r7
 802e944:	bd80      	pop	{r7, pc}

0802e946 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802e946:	b580      	push	{r7, lr}
 802e948:	b082      	sub	sp, #8
 802e94a:	af00      	add	r7, sp, #0
 802e94c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802e94e:	687b      	ldr	r3, [r7, #4]
 802e950:	2b00      	cmp	r3, #0
 802e952:	d101      	bne.n	802e958 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802e954:	2301      	movs	r3, #1
 802e956:	e014      	b.n	802e982 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802e958:	687b      	ldr	r3, [r7, #4]
 802e95a:	791b      	ldrb	r3, [r3, #4]
 802e95c:	b2db      	uxtb	r3, r3
 802e95e:	2b00      	cmp	r3, #0
 802e960:	d105      	bne.n	802e96e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802e962:	687b      	ldr	r3, [r7, #4]
 802e964:	2200      	movs	r2, #0
 802e966:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802e968:	6878      	ldr	r0, [r7, #4]
 802e96a:	f7fe f861 	bl	802ca30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802e96e:	687b      	ldr	r3, [r7, #4]
 802e970:	2202      	movs	r2, #2
 802e972:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802e974:	687b      	ldr	r3, [r7, #4]
 802e976:	2200      	movs	r2, #0
 802e978:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802e97a:	687b      	ldr	r3, [r7, #4]
 802e97c:	2201      	movs	r2, #1
 802e97e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802e980:	2300      	movs	r3, #0
}
 802e982:	4618      	mov	r0, r3
 802e984:	3708      	adds	r7, #8
 802e986:	46bd      	mov	sp, r7
 802e988:	bd80      	pop	{r7, pc}

0802e98a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802e98a:	b480      	push	{r7}
 802e98c:	b083      	sub	sp, #12
 802e98e:	af00      	add	r7, sp, #0
 802e990:	6078      	str	r0, [r7, #4]
 802e992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802e994:	687b      	ldr	r3, [r7, #4]
 802e996:	795b      	ldrb	r3, [r3, #5]
 802e998:	2b01      	cmp	r3, #1
 802e99a:	d101      	bne.n	802e9a0 <HAL_DAC_Start+0x16>
 802e99c:	2302      	movs	r3, #2
 802e99e:	e040      	b.n	802ea22 <HAL_DAC_Start+0x98>
 802e9a0:	687b      	ldr	r3, [r7, #4]
 802e9a2:	2201      	movs	r2, #1
 802e9a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802e9a6:	687b      	ldr	r3, [r7, #4]
 802e9a8:	2202      	movs	r2, #2
 802e9aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802e9ac:	687b      	ldr	r3, [r7, #4]
 802e9ae:	681b      	ldr	r3, [r3, #0]
 802e9b0:	6819      	ldr	r1, [r3, #0]
 802e9b2:	683b      	ldr	r3, [r7, #0]
 802e9b4:	f003 0310 	and.w	r3, r3, #16
 802e9b8:	2201      	movs	r2, #1
 802e9ba:	409a      	lsls	r2, r3
 802e9bc:	687b      	ldr	r3, [r7, #4]
 802e9be:	681b      	ldr	r3, [r3, #0]
 802e9c0:	430a      	orrs	r2, r1
 802e9c2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802e9c4:	683b      	ldr	r3, [r7, #0]
 802e9c6:	2b00      	cmp	r3, #0
 802e9c8:	d10f      	bne.n	802e9ea <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802e9ca:	687b      	ldr	r3, [r7, #4]
 802e9cc:	681b      	ldr	r3, [r3, #0]
 802e9ce:	681b      	ldr	r3, [r3, #0]
 802e9d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802e9d4:	2b02      	cmp	r3, #2
 802e9d6:	d11d      	bne.n	802ea14 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802e9d8:	687b      	ldr	r3, [r7, #4]
 802e9da:	681b      	ldr	r3, [r3, #0]
 802e9dc:	685a      	ldr	r2, [r3, #4]
 802e9de:	687b      	ldr	r3, [r7, #4]
 802e9e0:	681b      	ldr	r3, [r3, #0]
 802e9e2:	f042 0201 	orr.w	r2, r2, #1
 802e9e6:	605a      	str	r2, [r3, #4]
 802e9e8:	e014      	b.n	802ea14 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802e9ea:	687b      	ldr	r3, [r7, #4]
 802e9ec:	681b      	ldr	r3, [r3, #0]
 802e9ee:	681b      	ldr	r3, [r3, #0]
 802e9f0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802e9f4:	683b      	ldr	r3, [r7, #0]
 802e9f6:	f003 0310 	and.w	r3, r3, #16
 802e9fa:	2102      	movs	r1, #2
 802e9fc:	fa01 f303 	lsl.w	r3, r1, r3
 802ea00:	429a      	cmp	r2, r3
 802ea02:	d107      	bne.n	802ea14 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802ea04:	687b      	ldr	r3, [r7, #4]
 802ea06:	681b      	ldr	r3, [r3, #0]
 802ea08:	685a      	ldr	r2, [r3, #4]
 802ea0a:	687b      	ldr	r3, [r7, #4]
 802ea0c:	681b      	ldr	r3, [r3, #0]
 802ea0e:	f042 0202 	orr.w	r2, r2, #2
 802ea12:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802ea14:	687b      	ldr	r3, [r7, #4]
 802ea16:	2201      	movs	r2, #1
 802ea18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802ea1a:	687b      	ldr	r3, [r7, #4]
 802ea1c:	2200      	movs	r2, #0
 802ea1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802ea20:	2300      	movs	r3, #0
}
 802ea22:	4618      	mov	r0, r3
 802ea24:	370c      	adds	r7, #12
 802ea26:	46bd      	mov	sp, r7
 802ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea2c:	4770      	bx	lr

0802ea2e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802ea2e:	b480      	push	{r7}
 802ea30:	b087      	sub	sp, #28
 802ea32:	af00      	add	r7, sp, #0
 802ea34:	60f8      	str	r0, [r7, #12]
 802ea36:	60b9      	str	r1, [r7, #8]
 802ea38:	607a      	str	r2, [r7, #4]
 802ea3a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802ea3c:	2300      	movs	r3, #0
 802ea3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802ea40:	68fb      	ldr	r3, [r7, #12]
 802ea42:	681b      	ldr	r3, [r3, #0]
 802ea44:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802ea46:	68bb      	ldr	r3, [r7, #8]
 802ea48:	2b00      	cmp	r3, #0
 802ea4a:	d105      	bne.n	802ea58 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802ea4c:	697a      	ldr	r2, [r7, #20]
 802ea4e:	687b      	ldr	r3, [r7, #4]
 802ea50:	4413      	add	r3, r2
 802ea52:	3308      	adds	r3, #8
 802ea54:	617b      	str	r3, [r7, #20]
 802ea56:	e004      	b.n	802ea62 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802ea58:	697a      	ldr	r2, [r7, #20]
 802ea5a:	687b      	ldr	r3, [r7, #4]
 802ea5c:	4413      	add	r3, r2
 802ea5e:	3314      	adds	r3, #20
 802ea60:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802ea62:	697b      	ldr	r3, [r7, #20]
 802ea64:	461a      	mov	r2, r3
 802ea66:	683b      	ldr	r3, [r7, #0]
 802ea68:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802ea6a:	2300      	movs	r3, #0
}
 802ea6c:	4618      	mov	r0, r3
 802ea6e:	371c      	adds	r7, #28
 802ea70:	46bd      	mov	sp, r7
 802ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ea76:	4770      	bx	lr

0802ea78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802ea78:	b580      	push	{r7, lr}
 802ea7a:	b088      	sub	sp, #32
 802ea7c:	af00      	add	r7, sp, #0
 802ea7e:	60f8      	str	r0, [r7, #12]
 802ea80:	60b9      	str	r1, [r7, #8]
 802ea82:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802ea84:	68fb      	ldr	r3, [r7, #12]
 802ea86:	795b      	ldrb	r3, [r3, #5]
 802ea88:	2b01      	cmp	r3, #1
 802ea8a:	d101      	bne.n	802ea90 <HAL_DAC_ConfigChannel+0x18>
 802ea8c:	2302      	movs	r3, #2
 802ea8e:	e11d      	b.n	802eccc <HAL_DAC_ConfigChannel+0x254>
 802ea90:	68fb      	ldr	r3, [r7, #12]
 802ea92:	2201      	movs	r2, #1
 802ea94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802ea96:	68fb      	ldr	r3, [r7, #12]
 802ea98:	2202      	movs	r2, #2
 802ea9a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802ea9c:	68bb      	ldr	r3, [r7, #8]
 802ea9e:	681b      	ldr	r3, [r3, #0]
 802eaa0:	2b04      	cmp	r3, #4
 802eaa2:	d174      	bne.n	802eb8e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802eaa4:	f7ff fc1c 	bl	802e2e0 <HAL_GetTick>
 802eaa8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802eaaa:	687b      	ldr	r3, [r7, #4]
 802eaac:	2b00      	cmp	r3, #0
 802eaae:	d134      	bne.n	802eb1a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802eab0:	e011      	b.n	802ead6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802eab2:	f7ff fc15 	bl	802e2e0 <HAL_GetTick>
 802eab6:	4602      	mov	r2, r0
 802eab8:	69bb      	ldr	r3, [r7, #24]
 802eaba:	1ad3      	subs	r3, r2, r3
 802eabc:	2b01      	cmp	r3, #1
 802eabe:	d90a      	bls.n	802ead6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802eac0:	68fb      	ldr	r3, [r7, #12]
 802eac2:	691b      	ldr	r3, [r3, #16]
 802eac4:	f043 0208 	orr.w	r2, r3, #8
 802eac8:	68fb      	ldr	r3, [r7, #12]
 802eaca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802eacc:	68fb      	ldr	r3, [r7, #12]
 802eace:	2203      	movs	r2, #3
 802ead0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802ead2:	2303      	movs	r3, #3
 802ead4:	e0fa      	b.n	802eccc <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802ead6:	68fb      	ldr	r3, [r7, #12]
 802ead8:	681b      	ldr	r3, [r3, #0]
 802eada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802eadc:	4b7d      	ldr	r3, [pc, #500]	; (802ecd4 <HAL_DAC_ConfigChannel+0x25c>)
 802eade:	4013      	ands	r3, r2
 802eae0:	2b00      	cmp	r3, #0
 802eae2:	d1e6      	bne.n	802eab2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802eae4:	2001      	movs	r0, #1
 802eae6:	f7ff fc07 	bl	802e2f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802eaea:	68fb      	ldr	r3, [r7, #12]
 802eaec:	681b      	ldr	r3, [r3, #0]
 802eaee:	68ba      	ldr	r2, [r7, #8]
 802eaf0:	6992      	ldr	r2, [r2, #24]
 802eaf2:	641a      	str	r2, [r3, #64]	; 0x40
 802eaf4:	e01e      	b.n	802eb34 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802eaf6:	f7ff fbf3 	bl	802e2e0 <HAL_GetTick>
 802eafa:	4602      	mov	r2, r0
 802eafc:	69bb      	ldr	r3, [r7, #24]
 802eafe:	1ad3      	subs	r3, r2, r3
 802eb00:	2b01      	cmp	r3, #1
 802eb02:	d90a      	bls.n	802eb1a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802eb04:	68fb      	ldr	r3, [r7, #12]
 802eb06:	691b      	ldr	r3, [r3, #16]
 802eb08:	f043 0208 	orr.w	r2, r3, #8
 802eb0c:	68fb      	ldr	r3, [r7, #12]
 802eb0e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802eb10:	68fb      	ldr	r3, [r7, #12]
 802eb12:	2203      	movs	r2, #3
 802eb14:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802eb16:	2303      	movs	r3, #3
 802eb18:	e0d8      	b.n	802eccc <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802eb1a:	68fb      	ldr	r3, [r7, #12]
 802eb1c:	681b      	ldr	r3, [r3, #0]
 802eb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802eb20:	2b00      	cmp	r3, #0
 802eb22:	dbe8      	blt.n	802eaf6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802eb24:	2001      	movs	r0, #1
 802eb26:	f7ff fbe7 	bl	802e2f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802eb2a:	68fb      	ldr	r3, [r7, #12]
 802eb2c:	681b      	ldr	r3, [r3, #0]
 802eb2e:	68ba      	ldr	r2, [r7, #8]
 802eb30:	6992      	ldr	r2, [r2, #24]
 802eb32:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802eb34:	68fb      	ldr	r3, [r7, #12]
 802eb36:	681b      	ldr	r3, [r3, #0]
 802eb38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802eb3a:	687b      	ldr	r3, [r7, #4]
 802eb3c:	f003 0310 	and.w	r3, r3, #16
 802eb40:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802eb44:	fa01 f303 	lsl.w	r3, r1, r3
 802eb48:	43db      	mvns	r3, r3
 802eb4a:	ea02 0103 	and.w	r1, r2, r3
 802eb4e:	68bb      	ldr	r3, [r7, #8]
 802eb50:	69da      	ldr	r2, [r3, #28]
 802eb52:	687b      	ldr	r3, [r7, #4]
 802eb54:	f003 0310 	and.w	r3, r3, #16
 802eb58:	409a      	lsls	r2, r3
 802eb5a:	68fb      	ldr	r3, [r7, #12]
 802eb5c:	681b      	ldr	r3, [r3, #0]
 802eb5e:	430a      	orrs	r2, r1
 802eb60:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802eb62:	68fb      	ldr	r3, [r7, #12]
 802eb64:	681b      	ldr	r3, [r3, #0]
 802eb66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802eb68:	687b      	ldr	r3, [r7, #4]
 802eb6a:	f003 0310 	and.w	r3, r3, #16
 802eb6e:	21ff      	movs	r1, #255	; 0xff
 802eb70:	fa01 f303 	lsl.w	r3, r1, r3
 802eb74:	43db      	mvns	r3, r3
 802eb76:	ea02 0103 	and.w	r1, r2, r3
 802eb7a:	68bb      	ldr	r3, [r7, #8]
 802eb7c:	6a1a      	ldr	r2, [r3, #32]
 802eb7e:	687b      	ldr	r3, [r7, #4]
 802eb80:	f003 0310 	and.w	r3, r3, #16
 802eb84:	409a      	lsls	r2, r3
 802eb86:	68fb      	ldr	r3, [r7, #12]
 802eb88:	681b      	ldr	r3, [r3, #0]
 802eb8a:	430a      	orrs	r2, r1
 802eb8c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802eb8e:	68bb      	ldr	r3, [r7, #8]
 802eb90:	691b      	ldr	r3, [r3, #16]
 802eb92:	2b01      	cmp	r3, #1
 802eb94:	d11d      	bne.n	802ebd2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802eb96:	68fb      	ldr	r3, [r7, #12]
 802eb98:	681b      	ldr	r3, [r3, #0]
 802eb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eb9c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802eb9e:	687b      	ldr	r3, [r7, #4]
 802eba0:	f003 0310 	and.w	r3, r3, #16
 802eba4:	221f      	movs	r2, #31
 802eba6:	fa02 f303 	lsl.w	r3, r2, r3
 802ebaa:	43db      	mvns	r3, r3
 802ebac:	697a      	ldr	r2, [r7, #20]
 802ebae:	4013      	ands	r3, r2
 802ebb0:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802ebb2:	68bb      	ldr	r3, [r7, #8]
 802ebb4:	695b      	ldr	r3, [r3, #20]
 802ebb6:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802ebb8:	687b      	ldr	r3, [r7, #4]
 802ebba:	f003 0310 	and.w	r3, r3, #16
 802ebbe:	693a      	ldr	r2, [r7, #16]
 802ebc0:	fa02 f303 	lsl.w	r3, r2, r3
 802ebc4:	697a      	ldr	r2, [r7, #20]
 802ebc6:	4313      	orrs	r3, r2
 802ebc8:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802ebca:	68fb      	ldr	r3, [r7, #12]
 802ebcc:	681b      	ldr	r3, [r3, #0]
 802ebce:	697a      	ldr	r2, [r7, #20]
 802ebd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802ebd2:	68fb      	ldr	r3, [r7, #12]
 802ebd4:	681b      	ldr	r3, [r3, #0]
 802ebd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ebd8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802ebda:	687b      	ldr	r3, [r7, #4]
 802ebdc:	f003 0310 	and.w	r3, r3, #16
 802ebe0:	2207      	movs	r2, #7
 802ebe2:	fa02 f303 	lsl.w	r3, r2, r3
 802ebe6:	43db      	mvns	r3, r3
 802ebe8:	697a      	ldr	r2, [r7, #20]
 802ebea:	4013      	ands	r3, r2
 802ebec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802ebee:	68bb      	ldr	r3, [r7, #8]
 802ebf0:	68db      	ldr	r3, [r3, #12]
 802ebf2:	2b01      	cmp	r3, #1
 802ebf4:	d102      	bne.n	802ebfc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802ebf6:	2300      	movs	r3, #0
 802ebf8:	61fb      	str	r3, [r7, #28]
 802ebfa:	e00f      	b.n	802ec1c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802ebfc:	68bb      	ldr	r3, [r7, #8]
 802ebfe:	68db      	ldr	r3, [r3, #12]
 802ec00:	2b02      	cmp	r3, #2
 802ec02:	d102      	bne.n	802ec0a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802ec04:	2301      	movs	r3, #1
 802ec06:	61fb      	str	r3, [r7, #28]
 802ec08:	e008      	b.n	802ec1c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802ec0a:	68bb      	ldr	r3, [r7, #8]
 802ec0c:	689b      	ldr	r3, [r3, #8]
 802ec0e:	2b00      	cmp	r3, #0
 802ec10:	d102      	bne.n	802ec18 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802ec12:	2301      	movs	r3, #1
 802ec14:	61fb      	str	r3, [r7, #28]
 802ec16:	e001      	b.n	802ec1c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802ec18:	2300      	movs	r3, #0
 802ec1a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802ec1c:	68bb      	ldr	r3, [r7, #8]
 802ec1e:	681a      	ldr	r2, [r3, #0]
 802ec20:	68bb      	ldr	r3, [r7, #8]
 802ec22:	689b      	ldr	r3, [r3, #8]
 802ec24:	4313      	orrs	r3, r2
 802ec26:	69fa      	ldr	r2, [r7, #28]
 802ec28:	4313      	orrs	r3, r2
 802ec2a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802ec2c:	687b      	ldr	r3, [r7, #4]
 802ec2e:	f003 0310 	and.w	r3, r3, #16
 802ec32:	693a      	ldr	r2, [r7, #16]
 802ec34:	fa02 f303 	lsl.w	r3, r2, r3
 802ec38:	697a      	ldr	r2, [r7, #20]
 802ec3a:	4313      	orrs	r3, r2
 802ec3c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802ec3e:	68fb      	ldr	r3, [r7, #12]
 802ec40:	681b      	ldr	r3, [r3, #0]
 802ec42:	697a      	ldr	r2, [r7, #20]
 802ec44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802ec46:	68fb      	ldr	r3, [r7, #12]
 802ec48:	681b      	ldr	r3, [r3, #0]
 802ec4a:	6819      	ldr	r1, [r3, #0]
 802ec4c:	687b      	ldr	r3, [r7, #4]
 802ec4e:	f003 0310 	and.w	r3, r3, #16
 802ec52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802ec56:	fa02 f303 	lsl.w	r3, r2, r3
 802ec5a:	43da      	mvns	r2, r3
 802ec5c:	68fb      	ldr	r3, [r7, #12]
 802ec5e:	681b      	ldr	r3, [r3, #0]
 802ec60:	400a      	ands	r2, r1
 802ec62:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802ec64:	68fb      	ldr	r3, [r7, #12]
 802ec66:	681b      	ldr	r3, [r3, #0]
 802ec68:	681b      	ldr	r3, [r3, #0]
 802ec6a:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802ec6c:	687b      	ldr	r3, [r7, #4]
 802ec6e:	f003 0310 	and.w	r3, r3, #16
 802ec72:	f640 72fe 	movw	r2, #4094	; 0xffe
 802ec76:	fa02 f303 	lsl.w	r3, r2, r3
 802ec7a:	43db      	mvns	r3, r3
 802ec7c:	697a      	ldr	r2, [r7, #20]
 802ec7e:	4013      	ands	r3, r2
 802ec80:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802ec82:	68bb      	ldr	r3, [r7, #8]
 802ec84:	685b      	ldr	r3, [r3, #4]
 802ec86:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802ec88:	687b      	ldr	r3, [r7, #4]
 802ec8a:	f003 0310 	and.w	r3, r3, #16
 802ec8e:	693a      	ldr	r2, [r7, #16]
 802ec90:	fa02 f303 	lsl.w	r3, r2, r3
 802ec94:	697a      	ldr	r2, [r7, #20]
 802ec96:	4313      	orrs	r3, r2
 802ec98:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802ec9a:	68fb      	ldr	r3, [r7, #12]
 802ec9c:	681b      	ldr	r3, [r3, #0]
 802ec9e:	697a      	ldr	r2, [r7, #20]
 802eca0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802eca2:	68fb      	ldr	r3, [r7, #12]
 802eca4:	681b      	ldr	r3, [r3, #0]
 802eca6:	6819      	ldr	r1, [r3, #0]
 802eca8:	687b      	ldr	r3, [r7, #4]
 802ecaa:	f003 0310 	and.w	r3, r3, #16
 802ecae:	22c0      	movs	r2, #192	; 0xc0
 802ecb0:	fa02 f303 	lsl.w	r3, r2, r3
 802ecb4:	43da      	mvns	r2, r3
 802ecb6:	68fb      	ldr	r3, [r7, #12]
 802ecb8:	681b      	ldr	r3, [r3, #0]
 802ecba:	400a      	ands	r2, r1
 802ecbc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802ecbe:	68fb      	ldr	r3, [r7, #12]
 802ecc0:	2201      	movs	r2, #1
 802ecc2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802ecc4:	68fb      	ldr	r3, [r7, #12]
 802ecc6:	2200      	movs	r2, #0
 802ecc8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802ecca:	2300      	movs	r3, #0
}
 802eccc:	4618      	mov	r0, r3
 802ecce:	3720      	adds	r7, #32
 802ecd0:	46bd      	mov	sp, r7
 802ecd2:	bd80      	pop	{r7, pc}
 802ecd4:	20008000 	.word	0x20008000

0802ecd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802ecd8:	b580      	push	{r7, lr}
 802ecda:	b086      	sub	sp, #24
 802ecdc:	af00      	add	r7, sp, #0
 802ecde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802ece0:	f7ff fafe 	bl	802e2e0 <HAL_GetTick>
 802ece4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802ece6:	687b      	ldr	r3, [r7, #4]
 802ece8:	2b00      	cmp	r3, #0
 802ecea:	d101      	bne.n	802ecf0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802ecec:	2301      	movs	r3, #1
 802ecee:	e316      	b.n	802f31e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802ecf0:	687b      	ldr	r3, [r7, #4]
 802ecf2:	681b      	ldr	r3, [r3, #0]
 802ecf4:	4a66      	ldr	r2, [pc, #408]	; (802ee90 <HAL_DMA_Init+0x1b8>)
 802ecf6:	4293      	cmp	r3, r2
 802ecf8:	d04a      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ecfa:	687b      	ldr	r3, [r7, #4]
 802ecfc:	681b      	ldr	r3, [r3, #0]
 802ecfe:	4a65      	ldr	r2, [pc, #404]	; (802ee94 <HAL_DMA_Init+0x1bc>)
 802ed00:	4293      	cmp	r3, r2
 802ed02:	d045      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed04:	687b      	ldr	r3, [r7, #4]
 802ed06:	681b      	ldr	r3, [r3, #0]
 802ed08:	4a63      	ldr	r2, [pc, #396]	; (802ee98 <HAL_DMA_Init+0x1c0>)
 802ed0a:	4293      	cmp	r3, r2
 802ed0c:	d040      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed0e:	687b      	ldr	r3, [r7, #4]
 802ed10:	681b      	ldr	r3, [r3, #0]
 802ed12:	4a62      	ldr	r2, [pc, #392]	; (802ee9c <HAL_DMA_Init+0x1c4>)
 802ed14:	4293      	cmp	r3, r2
 802ed16:	d03b      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed18:	687b      	ldr	r3, [r7, #4]
 802ed1a:	681b      	ldr	r3, [r3, #0]
 802ed1c:	4a60      	ldr	r2, [pc, #384]	; (802eea0 <HAL_DMA_Init+0x1c8>)
 802ed1e:	4293      	cmp	r3, r2
 802ed20:	d036      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed22:	687b      	ldr	r3, [r7, #4]
 802ed24:	681b      	ldr	r3, [r3, #0]
 802ed26:	4a5f      	ldr	r2, [pc, #380]	; (802eea4 <HAL_DMA_Init+0x1cc>)
 802ed28:	4293      	cmp	r3, r2
 802ed2a:	d031      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed2c:	687b      	ldr	r3, [r7, #4]
 802ed2e:	681b      	ldr	r3, [r3, #0]
 802ed30:	4a5d      	ldr	r2, [pc, #372]	; (802eea8 <HAL_DMA_Init+0x1d0>)
 802ed32:	4293      	cmp	r3, r2
 802ed34:	d02c      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed36:	687b      	ldr	r3, [r7, #4]
 802ed38:	681b      	ldr	r3, [r3, #0]
 802ed3a:	4a5c      	ldr	r2, [pc, #368]	; (802eeac <HAL_DMA_Init+0x1d4>)
 802ed3c:	4293      	cmp	r3, r2
 802ed3e:	d027      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed40:	687b      	ldr	r3, [r7, #4]
 802ed42:	681b      	ldr	r3, [r3, #0]
 802ed44:	4a5a      	ldr	r2, [pc, #360]	; (802eeb0 <HAL_DMA_Init+0x1d8>)
 802ed46:	4293      	cmp	r3, r2
 802ed48:	d022      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed4a:	687b      	ldr	r3, [r7, #4]
 802ed4c:	681b      	ldr	r3, [r3, #0]
 802ed4e:	4a59      	ldr	r2, [pc, #356]	; (802eeb4 <HAL_DMA_Init+0x1dc>)
 802ed50:	4293      	cmp	r3, r2
 802ed52:	d01d      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed54:	687b      	ldr	r3, [r7, #4]
 802ed56:	681b      	ldr	r3, [r3, #0]
 802ed58:	4a57      	ldr	r2, [pc, #348]	; (802eeb8 <HAL_DMA_Init+0x1e0>)
 802ed5a:	4293      	cmp	r3, r2
 802ed5c:	d018      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed5e:	687b      	ldr	r3, [r7, #4]
 802ed60:	681b      	ldr	r3, [r3, #0]
 802ed62:	4a56      	ldr	r2, [pc, #344]	; (802eebc <HAL_DMA_Init+0x1e4>)
 802ed64:	4293      	cmp	r3, r2
 802ed66:	d013      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed68:	687b      	ldr	r3, [r7, #4]
 802ed6a:	681b      	ldr	r3, [r3, #0]
 802ed6c:	4a54      	ldr	r2, [pc, #336]	; (802eec0 <HAL_DMA_Init+0x1e8>)
 802ed6e:	4293      	cmp	r3, r2
 802ed70:	d00e      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed72:	687b      	ldr	r3, [r7, #4]
 802ed74:	681b      	ldr	r3, [r3, #0]
 802ed76:	4a53      	ldr	r2, [pc, #332]	; (802eec4 <HAL_DMA_Init+0x1ec>)
 802ed78:	4293      	cmp	r3, r2
 802ed7a:	d009      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed7c:	687b      	ldr	r3, [r7, #4]
 802ed7e:	681b      	ldr	r3, [r3, #0]
 802ed80:	4a51      	ldr	r2, [pc, #324]	; (802eec8 <HAL_DMA_Init+0x1f0>)
 802ed82:	4293      	cmp	r3, r2
 802ed84:	d004      	beq.n	802ed90 <HAL_DMA_Init+0xb8>
 802ed86:	687b      	ldr	r3, [r7, #4]
 802ed88:	681b      	ldr	r3, [r3, #0]
 802ed8a:	4a50      	ldr	r2, [pc, #320]	; (802eecc <HAL_DMA_Init+0x1f4>)
 802ed8c:	4293      	cmp	r3, r2
 802ed8e:	d101      	bne.n	802ed94 <HAL_DMA_Init+0xbc>
 802ed90:	2301      	movs	r3, #1
 802ed92:	e000      	b.n	802ed96 <HAL_DMA_Init+0xbe>
 802ed94:	2300      	movs	r3, #0
 802ed96:	2b00      	cmp	r3, #0
 802ed98:	f000 813b 	beq.w	802f012 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802ed9c:	687b      	ldr	r3, [r7, #4]
 802ed9e:	2202      	movs	r2, #2
 802eda0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802eda4:	687b      	ldr	r3, [r7, #4]
 802eda6:	2200      	movs	r2, #0
 802eda8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802edac:	687b      	ldr	r3, [r7, #4]
 802edae:	681b      	ldr	r3, [r3, #0]
 802edb0:	4a37      	ldr	r2, [pc, #220]	; (802ee90 <HAL_DMA_Init+0x1b8>)
 802edb2:	4293      	cmp	r3, r2
 802edb4:	d04a      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802edb6:	687b      	ldr	r3, [r7, #4]
 802edb8:	681b      	ldr	r3, [r3, #0]
 802edba:	4a36      	ldr	r2, [pc, #216]	; (802ee94 <HAL_DMA_Init+0x1bc>)
 802edbc:	4293      	cmp	r3, r2
 802edbe:	d045      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802edc0:	687b      	ldr	r3, [r7, #4]
 802edc2:	681b      	ldr	r3, [r3, #0]
 802edc4:	4a34      	ldr	r2, [pc, #208]	; (802ee98 <HAL_DMA_Init+0x1c0>)
 802edc6:	4293      	cmp	r3, r2
 802edc8:	d040      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802edca:	687b      	ldr	r3, [r7, #4]
 802edcc:	681b      	ldr	r3, [r3, #0]
 802edce:	4a33      	ldr	r2, [pc, #204]	; (802ee9c <HAL_DMA_Init+0x1c4>)
 802edd0:	4293      	cmp	r3, r2
 802edd2:	d03b      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802edd4:	687b      	ldr	r3, [r7, #4]
 802edd6:	681b      	ldr	r3, [r3, #0]
 802edd8:	4a31      	ldr	r2, [pc, #196]	; (802eea0 <HAL_DMA_Init+0x1c8>)
 802edda:	4293      	cmp	r3, r2
 802eddc:	d036      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802edde:	687b      	ldr	r3, [r7, #4]
 802ede0:	681b      	ldr	r3, [r3, #0]
 802ede2:	4a30      	ldr	r2, [pc, #192]	; (802eea4 <HAL_DMA_Init+0x1cc>)
 802ede4:	4293      	cmp	r3, r2
 802ede6:	d031      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802ede8:	687b      	ldr	r3, [r7, #4]
 802edea:	681b      	ldr	r3, [r3, #0]
 802edec:	4a2e      	ldr	r2, [pc, #184]	; (802eea8 <HAL_DMA_Init+0x1d0>)
 802edee:	4293      	cmp	r3, r2
 802edf0:	d02c      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802edf2:	687b      	ldr	r3, [r7, #4]
 802edf4:	681b      	ldr	r3, [r3, #0]
 802edf6:	4a2d      	ldr	r2, [pc, #180]	; (802eeac <HAL_DMA_Init+0x1d4>)
 802edf8:	4293      	cmp	r3, r2
 802edfa:	d027      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802edfc:	687b      	ldr	r3, [r7, #4]
 802edfe:	681b      	ldr	r3, [r3, #0]
 802ee00:	4a2b      	ldr	r2, [pc, #172]	; (802eeb0 <HAL_DMA_Init+0x1d8>)
 802ee02:	4293      	cmp	r3, r2
 802ee04:	d022      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802ee06:	687b      	ldr	r3, [r7, #4]
 802ee08:	681b      	ldr	r3, [r3, #0]
 802ee0a:	4a2a      	ldr	r2, [pc, #168]	; (802eeb4 <HAL_DMA_Init+0x1dc>)
 802ee0c:	4293      	cmp	r3, r2
 802ee0e:	d01d      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802ee10:	687b      	ldr	r3, [r7, #4]
 802ee12:	681b      	ldr	r3, [r3, #0]
 802ee14:	4a28      	ldr	r2, [pc, #160]	; (802eeb8 <HAL_DMA_Init+0x1e0>)
 802ee16:	4293      	cmp	r3, r2
 802ee18:	d018      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802ee1a:	687b      	ldr	r3, [r7, #4]
 802ee1c:	681b      	ldr	r3, [r3, #0]
 802ee1e:	4a27      	ldr	r2, [pc, #156]	; (802eebc <HAL_DMA_Init+0x1e4>)
 802ee20:	4293      	cmp	r3, r2
 802ee22:	d013      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802ee24:	687b      	ldr	r3, [r7, #4]
 802ee26:	681b      	ldr	r3, [r3, #0]
 802ee28:	4a25      	ldr	r2, [pc, #148]	; (802eec0 <HAL_DMA_Init+0x1e8>)
 802ee2a:	4293      	cmp	r3, r2
 802ee2c:	d00e      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802ee2e:	687b      	ldr	r3, [r7, #4]
 802ee30:	681b      	ldr	r3, [r3, #0]
 802ee32:	4a24      	ldr	r2, [pc, #144]	; (802eec4 <HAL_DMA_Init+0x1ec>)
 802ee34:	4293      	cmp	r3, r2
 802ee36:	d009      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802ee38:	687b      	ldr	r3, [r7, #4]
 802ee3a:	681b      	ldr	r3, [r3, #0]
 802ee3c:	4a22      	ldr	r2, [pc, #136]	; (802eec8 <HAL_DMA_Init+0x1f0>)
 802ee3e:	4293      	cmp	r3, r2
 802ee40:	d004      	beq.n	802ee4c <HAL_DMA_Init+0x174>
 802ee42:	687b      	ldr	r3, [r7, #4]
 802ee44:	681b      	ldr	r3, [r3, #0]
 802ee46:	4a21      	ldr	r2, [pc, #132]	; (802eecc <HAL_DMA_Init+0x1f4>)
 802ee48:	4293      	cmp	r3, r2
 802ee4a:	d108      	bne.n	802ee5e <HAL_DMA_Init+0x186>
 802ee4c:	687b      	ldr	r3, [r7, #4]
 802ee4e:	681b      	ldr	r3, [r3, #0]
 802ee50:	681a      	ldr	r2, [r3, #0]
 802ee52:	687b      	ldr	r3, [r7, #4]
 802ee54:	681b      	ldr	r3, [r3, #0]
 802ee56:	f022 0201 	bic.w	r2, r2, #1
 802ee5a:	601a      	str	r2, [r3, #0]
 802ee5c:	e007      	b.n	802ee6e <HAL_DMA_Init+0x196>
 802ee5e:	687b      	ldr	r3, [r7, #4]
 802ee60:	681b      	ldr	r3, [r3, #0]
 802ee62:	681a      	ldr	r2, [r3, #0]
 802ee64:	687b      	ldr	r3, [r7, #4]
 802ee66:	681b      	ldr	r3, [r3, #0]
 802ee68:	f022 0201 	bic.w	r2, r2, #1
 802ee6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802ee6e:	e02f      	b.n	802eed0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802ee70:	f7ff fa36 	bl	802e2e0 <HAL_GetTick>
 802ee74:	4602      	mov	r2, r0
 802ee76:	693b      	ldr	r3, [r7, #16]
 802ee78:	1ad3      	subs	r3, r2, r3
 802ee7a:	2b05      	cmp	r3, #5
 802ee7c:	d928      	bls.n	802eed0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802ee7e:	687b      	ldr	r3, [r7, #4]
 802ee80:	2220      	movs	r2, #32
 802ee82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802ee84:	687b      	ldr	r3, [r7, #4]
 802ee86:	2203      	movs	r2, #3
 802ee88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802ee8c:	2301      	movs	r3, #1
 802ee8e:	e246      	b.n	802f31e <HAL_DMA_Init+0x646>
 802ee90:	40020010 	.word	0x40020010
 802ee94:	40020028 	.word	0x40020028
 802ee98:	40020040 	.word	0x40020040
 802ee9c:	40020058 	.word	0x40020058
 802eea0:	40020070 	.word	0x40020070
 802eea4:	40020088 	.word	0x40020088
 802eea8:	400200a0 	.word	0x400200a0
 802eeac:	400200b8 	.word	0x400200b8
 802eeb0:	40020410 	.word	0x40020410
 802eeb4:	40020428 	.word	0x40020428
 802eeb8:	40020440 	.word	0x40020440
 802eebc:	40020458 	.word	0x40020458
 802eec0:	40020470 	.word	0x40020470
 802eec4:	40020488 	.word	0x40020488
 802eec8:	400204a0 	.word	0x400204a0
 802eecc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802eed0:	687b      	ldr	r3, [r7, #4]
 802eed2:	681b      	ldr	r3, [r3, #0]
 802eed4:	681b      	ldr	r3, [r3, #0]
 802eed6:	f003 0301 	and.w	r3, r3, #1
 802eeda:	2b00      	cmp	r3, #0
 802eedc:	d1c8      	bne.n	802ee70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802eede:	687b      	ldr	r3, [r7, #4]
 802eee0:	681b      	ldr	r3, [r3, #0]
 802eee2:	681b      	ldr	r3, [r3, #0]
 802eee4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802eee6:	697a      	ldr	r2, [r7, #20]
 802eee8:	4b83      	ldr	r3, [pc, #524]	; (802f0f8 <HAL_DMA_Init+0x420>)
 802eeea:	4013      	ands	r3, r2
 802eeec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802eeee:	687b      	ldr	r3, [r7, #4]
 802eef0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802eef2:	687b      	ldr	r3, [r7, #4]
 802eef4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802eef6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802eef8:	687b      	ldr	r3, [r7, #4]
 802eefa:	691b      	ldr	r3, [r3, #16]
 802eefc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802eefe:	687b      	ldr	r3, [r7, #4]
 802ef00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802ef02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802ef04:	687b      	ldr	r3, [r7, #4]
 802ef06:	699b      	ldr	r3, [r3, #24]
 802ef08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802ef0a:	687b      	ldr	r3, [r7, #4]
 802ef0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802ef0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802ef10:	687b      	ldr	r3, [r7, #4]
 802ef12:	6a1b      	ldr	r3, [r3, #32]
 802ef14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802ef16:	697a      	ldr	r2, [r7, #20]
 802ef18:	4313      	orrs	r3, r2
 802ef1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802ef1c:	687b      	ldr	r3, [r7, #4]
 802ef1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ef20:	2b04      	cmp	r3, #4
 802ef22:	d107      	bne.n	802ef34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802ef24:	687b      	ldr	r3, [r7, #4]
 802ef26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802ef28:	687b      	ldr	r3, [r7, #4]
 802ef2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ef2c:	4313      	orrs	r3, r2
 802ef2e:	697a      	ldr	r2, [r7, #20]
 802ef30:	4313      	orrs	r3, r2
 802ef32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802ef34:	4b71      	ldr	r3, [pc, #452]	; (802f0fc <HAL_DMA_Init+0x424>)
 802ef36:	681a      	ldr	r2, [r3, #0]
 802ef38:	4b71      	ldr	r3, [pc, #452]	; (802f100 <HAL_DMA_Init+0x428>)
 802ef3a:	4013      	ands	r3, r2
 802ef3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802ef40:	d328      	bcc.n	802ef94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802ef42:	687b      	ldr	r3, [r7, #4]
 802ef44:	685b      	ldr	r3, [r3, #4]
 802ef46:	2b28      	cmp	r3, #40	; 0x28
 802ef48:	d903      	bls.n	802ef52 <HAL_DMA_Init+0x27a>
 802ef4a:	687b      	ldr	r3, [r7, #4]
 802ef4c:	685b      	ldr	r3, [r3, #4]
 802ef4e:	2b2e      	cmp	r3, #46	; 0x2e
 802ef50:	d917      	bls.n	802ef82 <HAL_DMA_Init+0x2aa>
 802ef52:	687b      	ldr	r3, [r7, #4]
 802ef54:	685b      	ldr	r3, [r3, #4]
 802ef56:	2b3e      	cmp	r3, #62	; 0x3e
 802ef58:	d903      	bls.n	802ef62 <HAL_DMA_Init+0x28a>
 802ef5a:	687b      	ldr	r3, [r7, #4]
 802ef5c:	685b      	ldr	r3, [r3, #4]
 802ef5e:	2b42      	cmp	r3, #66	; 0x42
 802ef60:	d90f      	bls.n	802ef82 <HAL_DMA_Init+0x2aa>
 802ef62:	687b      	ldr	r3, [r7, #4]
 802ef64:	685b      	ldr	r3, [r3, #4]
 802ef66:	2b46      	cmp	r3, #70	; 0x46
 802ef68:	d903      	bls.n	802ef72 <HAL_DMA_Init+0x29a>
 802ef6a:	687b      	ldr	r3, [r7, #4]
 802ef6c:	685b      	ldr	r3, [r3, #4]
 802ef6e:	2b48      	cmp	r3, #72	; 0x48
 802ef70:	d907      	bls.n	802ef82 <HAL_DMA_Init+0x2aa>
 802ef72:	687b      	ldr	r3, [r7, #4]
 802ef74:	685b      	ldr	r3, [r3, #4]
 802ef76:	2b4e      	cmp	r3, #78	; 0x4e
 802ef78:	d905      	bls.n	802ef86 <HAL_DMA_Init+0x2ae>
 802ef7a:	687b      	ldr	r3, [r7, #4]
 802ef7c:	685b      	ldr	r3, [r3, #4]
 802ef7e:	2b52      	cmp	r3, #82	; 0x52
 802ef80:	d801      	bhi.n	802ef86 <HAL_DMA_Init+0x2ae>
 802ef82:	2301      	movs	r3, #1
 802ef84:	e000      	b.n	802ef88 <HAL_DMA_Init+0x2b0>
 802ef86:	2300      	movs	r3, #0
 802ef88:	2b00      	cmp	r3, #0
 802ef8a:	d003      	beq.n	802ef94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802ef8c:	697b      	ldr	r3, [r7, #20]
 802ef8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802ef92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802ef94:	687b      	ldr	r3, [r7, #4]
 802ef96:	681b      	ldr	r3, [r3, #0]
 802ef98:	697a      	ldr	r2, [r7, #20]
 802ef9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802ef9c:	687b      	ldr	r3, [r7, #4]
 802ef9e:	681b      	ldr	r3, [r3, #0]
 802efa0:	695b      	ldr	r3, [r3, #20]
 802efa2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802efa4:	697b      	ldr	r3, [r7, #20]
 802efa6:	f023 0307 	bic.w	r3, r3, #7
 802efaa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802efac:	687b      	ldr	r3, [r7, #4]
 802efae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802efb0:	697a      	ldr	r2, [r7, #20]
 802efb2:	4313      	orrs	r3, r2
 802efb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802efb6:	687b      	ldr	r3, [r7, #4]
 802efb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802efba:	2b04      	cmp	r3, #4
 802efbc:	d117      	bne.n	802efee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802efbe:	687b      	ldr	r3, [r7, #4]
 802efc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802efc2:	697a      	ldr	r2, [r7, #20]
 802efc4:	4313      	orrs	r3, r2
 802efc6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802efc8:	687b      	ldr	r3, [r7, #4]
 802efca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802efcc:	2b00      	cmp	r3, #0
 802efce:	d00e      	beq.n	802efee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802efd0:	6878      	ldr	r0, [r7, #4]
 802efd2:	f002 fb4d 	bl	8031670 <DMA_CheckFifoParam>
 802efd6:	4603      	mov	r3, r0
 802efd8:	2b00      	cmp	r3, #0
 802efda:	d008      	beq.n	802efee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802efdc:	687b      	ldr	r3, [r7, #4]
 802efde:	2240      	movs	r2, #64	; 0x40
 802efe0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802efe2:	687b      	ldr	r3, [r7, #4]
 802efe4:	2201      	movs	r2, #1
 802efe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802efea:	2301      	movs	r3, #1
 802efec:	e197      	b.n	802f31e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802efee:	687b      	ldr	r3, [r7, #4]
 802eff0:	681b      	ldr	r3, [r3, #0]
 802eff2:	697a      	ldr	r2, [r7, #20]
 802eff4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802eff6:	6878      	ldr	r0, [r7, #4]
 802eff8:	f002 fa88 	bl	803150c <DMA_CalcBaseAndBitshift>
 802effc:	4603      	mov	r3, r0
 802effe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802f000:	687b      	ldr	r3, [r7, #4]
 802f002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f004:	f003 031f 	and.w	r3, r3, #31
 802f008:	223f      	movs	r2, #63	; 0x3f
 802f00a:	409a      	lsls	r2, r3
 802f00c:	68bb      	ldr	r3, [r7, #8]
 802f00e:	609a      	str	r2, [r3, #8]
 802f010:	e0cd      	b.n	802f1ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802f012:	687b      	ldr	r3, [r7, #4]
 802f014:	681b      	ldr	r3, [r3, #0]
 802f016:	4a3b      	ldr	r2, [pc, #236]	; (802f104 <HAL_DMA_Init+0x42c>)
 802f018:	4293      	cmp	r3, r2
 802f01a:	d022      	beq.n	802f062 <HAL_DMA_Init+0x38a>
 802f01c:	687b      	ldr	r3, [r7, #4]
 802f01e:	681b      	ldr	r3, [r3, #0]
 802f020:	4a39      	ldr	r2, [pc, #228]	; (802f108 <HAL_DMA_Init+0x430>)
 802f022:	4293      	cmp	r3, r2
 802f024:	d01d      	beq.n	802f062 <HAL_DMA_Init+0x38a>
 802f026:	687b      	ldr	r3, [r7, #4]
 802f028:	681b      	ldr	r3, [r3, #0]
 802f02a:	4a38      	ldr	r2, [pc, #224]	; (802f10c <HAL_DMA_Init+0x434>)
 802f02c:	4293      	cmp	r3, r2
 802f02e:	d018      	beq.n	802f062 <HAL_DMA_Init+0x38a>
 802f030:	687b      	ldr	r3, [r7, #4]
 802f032:	681b      	ldr	r3, [r3, #0]
 802f034:	4a36      	ldr	r2, [pc, #216]	; (802f110 <HAL_DMA_Init+0x438>)
 802f036:	4293      	cmp	r3, r2
 802f038:	d013      	beq.n	802f062 <HAL_DMA_Init+0x38a>
 802f03a:	687b      	ldr	r3, [r7, #4]
 802f03c:	681b      	ldr	r3, [r3, #0]
 802f03e:	4a35      	ldr	r2, [pc, #212]	; (802f114 <HAL_DMA_Init+0x43c>)
 802f040:	4293      	cmp	r3, r2
 802f042:	d00e      	beq.n	802f062 <HAL_DMA_Init+0x38a>
 802f044:	687b      	ldr	r3, [r7, #4]
 802f046:	681b      	ldr	r3, [r3, #0]
 802f048:	4a33      	ldr	r2, [pc, #204]	; (802f118 <HAL_DMA_Init+0x440>)
 802f04a:	4293      	cmp	r3, r2
 802f04c:	d009      	beq.n	802f062 <HAL_DMA_Init+0x38a>
 802f04e:	687b      	ldr	r3, [r7, #4]
 802f050:	681b      	ldr	r3, [r3, #0]
 802f052:	4a32      	ldr	r2, [pc, #200]	; (802f11c <HAL_DMA_Init+0x444>)
 802f054:	4293      	cmp	r3, r2
 802f056:	d004      	beq.n	802f062 <HAL_DMA_Init+0x38a>
 802f058:	687b      	ldr	r3, [r7, #4]
 802f05a:	681b      	ldr	r3, [r3, #0]
 802f05c:	4a30      	ldr	r2, [pc, #192]	; (802f120 <HAL_DMA_Init+0x448>)
 802f05e:	4293      	cmp	r3, r2
 802f060:	d101      	bne.n	802f066 <HAL_DMA_Init+0x38e>
 802f062:	2301      	movs	r3, #1
 802f064:	e000      	b.n	802f068 <HAL_DMA_Init+0x390>
 802f066:	2300      	movs	r3, #0
 802f068:	2b00      	cmp	r3, #0
 802f06a:	f000 8097 	beq.w	802f19c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802f06e:	687b      	ldr	r3, [r7, #4]
 802f070:	681b      	ldr	r3, [r3, #0]
 802f072:	4a24      	ldr	r2, [pc, #144]	; (802f104 <HAL_DMA_Init+0x42c>)
 802f074:	4293      	cmp	r3, r2
 802f076:	d021      	beq.n	802f0bc <HAL_DMA_Init+0x3e4>
 802f078:	687b      	ldr	r3, [r7, #4]
 802f07a:	681b      	ldr	r3, [r3, #0]
 802f07c:	4a22      	ldr	r2, [pc, #136]	; (802f108 <HAL_DMA_Init+0x430>)
 802f07e:	4293      	cmp	r3, r2
 802f080:	d01c      	beq.n	802f0bc <HAL_DMA_Init+0x3e4>
 802f082:	687b      	ldr	r3, [r7, #4]
 802f084:	681b      	ldr	r3, [r3, #0]
 802f086:	4a21      	ldr	r2, [pc, #132]	; (802f10c <HAL_DMA_Init+0x434>)
 802f088:	4293      	cmp	r3, r2
 802f08a:	d017      	beq.n	802f0bc <HAL_DMA_Init+0x3e4>
 802f08c:	687b      	ldr	r3, [r7, #4]
 802f08e:	681b      	ldr	r3, [r3, #0]
 802f090:	4a1f      	ldr	r2, [pc, #124]	; (802f110 <HAL_DMA_Init+0x438>)
 802f092:	4293      	cmp	r3, r2
 802f094:	d012      	beq.n	802f0bc <HAL_DMA_Init+0x3e4>
 802f096:	687b      	ldr	r3, [r7, #4]
 802f098:	681b      	ldr	r3, [r3, #0]
 802f09a:	4a1e      	ldr	r2, [pc, #120]	; (802f114 <HAL_DMA_Init+0x43c>)
 802f09c:	4293      	cmp	r3, r2
 802f09e:	d00d      	beq.n	802f0bc <HAL_DMA_Init+0x3e4>
 802f0a0:	687b      	ldr	r3, [r7, #4]
 802f0a2:	681b      	ldr	r3, [r3, #0]
 802f0a4:	4a1c      	ldr	r2, [pc, #112]	; (802f118 <HAL_DMA_Init+0x440>)
 802f0a6:	4293      	cmp	r3, r2
 802f0a8:	d008      	beq.n	802f0bc <HAL_DMA_Init+0x3e4>
 802f0aa:	687b      	ldr	r3, [r7, #4]
 802f0ac:	681b      	ldr	r3, [r3, #0]
 802f0ae:	4a1b      	ldr	r2, [pc, #108]	; (802f11c <HAL_DMA_Init+0x444>)
 802f0b0:	4293      	cmp	r3, r2
 802f0b2:	d003      	beq.n	802f0bc <HAL_DMA_Init+0x3e4>
 802f0b4:	687b      	ldr	r3, [r7, #4]
 802f0b6:	681b      	ldr	r3, [r3, #0]
 802f0b8:	4a19      	ldr	r2, [pc, #100]	; (802f120 <HAL_DMA_Init+0x448>)
 802f0ba:	4293      	cmp	r3, r2
 802f0bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802f0be:	687b      	ldr	r3, [r7, #4]
 802f0c0:	2202      	movs	r2, #2
 802f0c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802f0c6:	687b      	ldr	r3, [r7, #4]
 802f0c8:	2200      	movs	r2, #0
 802f0ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802f0ce:	687b      	ldr	r3, [r7, #4]
 802f0d0:	681b      	ldr	r3, [r3, #0]
 802f0d2:	681b      	ldr	r3, [r3, #0]
 802f0d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802f0d6:	697a      	ldr	r2, [r7, #20]
 802f0d8:	4b12      	ldr	r3, [pc, #72]	; (802f124 <HAL_DMA_Init+0x44c>)
 802f0da:	4013      	ands	r3, r2
 802f0dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802f0de:	687b      	ldr	r3, [r7, #4]
 802f0e0:	689b      	ldr	r3, [r3, #8]
 802f0e2:	2b40      	cmp	r3, #64	; 0x40
 802f0e4:	d020      	beq.n	802f128 <HAL_DMA_Init+0x450>
 802f0e6:	687b      	ldr	r3, [r7, #4]
 802f0e8:	689b      	ldr	r3, [r3, #8]
 802f0ea:	2b80      	cmp	r3, #128	; 0x80
 802f0ec:	d102      	bne.n	802f0f4 <HAL_DMA_Init+0x41c>
 802f0ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802f0f2:	e01a      	b.n	802f12a <HAL_DMA_Init+0x452>
 802f0f4:	2300      	movs	r3, #0
 802f0f6:	e018      	b.n	802f12a <HAL_DMA_Init+0x452>
 802f0f8:	fe10803f 	.word	0xfe10803f
 802f0fc:	5c001000 	.word	0x5c001000
 802f100:	ffff0000 	.word	0xffff0000
 802f104:	58025408 	.word	0x58025408
 802f108:	5802541c 	.word	0x5802541c
 802f10c:	58025430 	.word	0x58025430
 802f110:	58025444 	.word	0x58025444
 802f114:	58025458 	.word	0x58025458
 802f118:	5802546c 	.word	0x5802546c
 802f11c:	58025480 	.word	0x58025480
 802f120:	58025494 	.word	0x58025494
 802f124:	fffe000f 	.word	0xfffe000f
 802f128:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802f12a:	687a      	ldr	r2, [r7, #4]
 802f12c:	68d2      	ldr	r2, [r2, #12]
 802f12e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802f130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802f132:	687b      	ldr	r3, [r7, #4]
 802f134:	691b      	ldr	r3, [r3, #16]
 802f136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802f138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802f13a:	687b      	ldr	r3, [r7, #4]
 802f13c:	695b      	ldr	r3, [r3, #20]
 802f13e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802f140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802f142:	687b      	ldr	r3, [r7, #4]
 802f144:	699b      	ldr	r3, [r3, #24]
 802f146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802f148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802f14a:	687b      	ldr	r3, [r7, #4]
 802f14c:	69db      	ldr	r3, [r3, #28]
 802f14e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802f150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802f152:	687b      	ldr	r3, [r7, #4]
 802f154:	6a1b      	ldr	r3, [r3, #32]
 802f156:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802f158:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802f15a:	697a      	ldr	r2, [r7, #20]
 802f15c:	4313      	orrs	r3, r2
 802f15e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802f160:	687b      	ldr	r3, [r7, #4]
 802f162:	681b      	ldr	r3, [r3, #0]
 802f164:	697a      	ldr	r2, [r7, #20]
 802f166:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802f168:	687b      	ldr	r3, [r7, #4]
 802f16a:	681b      	ldr	r3, [r3, #0]
 802f16c:	461a      	mov	r2, r3
 802f16e:	4b6e      	ldr	r3, [pc, #440]	; (802f328 <HAL_DMA_Init+0x650>)
 802f170:	4413      	add	r3, r2
 802f172:	4a6e      	ldr	r2, [pc, #440]	; (802f32c <HAL_DMA_Init+0x654>)
 802f174:	fba2 2303 	umull	r2, r3, r2, r3
 802f178:	091b      	lsrs	r3, r3, #4
 802f17a:	009a      	lsls	r2, r3, #2
 802f17c:	687b      	ldr	r3, [r7, #4]
 802f17e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802f180:	6878      	ldr	r0, [r7, #4]
 802f182:	f002 f9c3 	bl	803150c <DMA_CalcBaseAndBitshift>
 802f186:	4603      	mov	r3, r0
 802f188:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802f18a:	687b      	ldr	r3, [r7, #4]
 802f18c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802f18e:	f003 031f 	and.w	r3, r3, #31
 802f192:	2201      	movs	r2, #1
 802f194:	409a      	lsls	r2, r3
 802f196:	68fb      	ldr	r3, [r7, #12]
 802f198:	605a      	str	r2, [r3, #4]
 802f19a:	e008      	b.n	802f1ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802f19c:	687b      	ldr	r3, [r7, #4]
 802f19e:	2240      	movs	r2, #64	; 0x40
 802f1a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802f1a2:	687b      	ldr	r3, [r7, #4]
 802f1a4:	2203      	movs	r2, #3
 802f1a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802f1aa:	2301      	movs	r3, #1
 802f1ac:	e0b7      	b.n	802f31e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802f1ae:	687b      	ldr	r3, [r7, #4]
 802f1b0:	681b      	ldr	r3, [r3, #0]
 802f1b2:	4a5f      	ldr	r2, [pc, #380]	; (802f330 <HAL_DMA_Init+0x658>)
 802f1b4:	4293      	cmp	r3, r2
 802f1b6:	d072      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f1b8:	687b      	ldr	r3, [r7, #4]
 802f1ba:	681b      	ldr	r3, [r3, #0]
 802f1bc:	4a5d      	ldr	r2, [pc, #372]	; (802f334 <HAL_DMA_Init+0x65c>)
 802f1be:	4293      	cmp	r3, r2
 802f1c0:	d06d      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f1c2:	687b      	ldr	r3, [r7, #4]
 802f1c4:	681b      	ldr	r3, [r3, #0]
 802f1c6:	4a5c      	ldr	r2, [pc, #368]	; (802f338 <HAL_DMA_Init+0x660>)
 802f1c8:	4293      	cmp	r3, r2
 802f1ca:	d068      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f1cc:	687b      	ldr	r3, [r7, #4]
 802f1ce:	681b      	ldr	r3, [r3, #0]
 802f1d0:	4a5a      	ldr	r2, [pc, #360]	; (802f33c <HAL_DMA_Init+0x664>)
 802f1d2:	4293      	cmp	r3, r2
 802f1d4:	d063      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f1d6:	687b      	ldr	r3, [r7, #4]
 802f1d8:	681b      	ldr	r3, [r3, #0]
 802f1da:	4a59      	ldr	r2, [pc, #356]	; (802f340 <HAL_DMA_Init+0x668>)
 802f1dc:	4293      	cmp	r3, r2
 802f1de:	d05e      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f1e0:	687b      	ldr	r3, [r7, #4]
 802f1e2:	681b      	ldr	r3, [r3, #0]
 802f1e4:	4a57      	ldr	r2, [pc, #348]	; (802f344 <HAL_DMA_Init+0x66c>)
 802f1e6:	4293      	cmp	r3, r2
 802f1e8:	d059      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f1ea:	687b      	ldr	r3, [r7, #4]
 802f1ec:	681b      	ldr	r3, [r3, #0]
 802f1ee:	4a56      	ldr	r2, [pc, #344]	; (802f348 <HAL_DMA_Init+0x670>)
 802f1f0:	4293      	cmp	r3, r2
 802f1f2:	d054      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f1f4:	687b      	ldr	r3, [r7, #4]
 802f1f6:	681b      	ldr	r3, [r3, #0]
 802f1f8:	4a54      	ldr	r2, [pc, #336]	; (802f34c <HAL_DMA_Init+0x674>)
 802f1fa:	4293      	cmp	r3, r2
 802f1fc:	d04f      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f1fe:	687b      	ldr	r3, [r7, #4]
 802f200:	681b      	ldr	r3, [r3, #0]
 802f202:	4a53      	ldr	r2, [pc, #332]	; (802f350 <HAL_DMA_Init+0x678>)
 802f204:	4293      	cmp	r3, r2
 802f206:	d04a      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f208:	687b      	ldr	r3, [r7, #4]
 802f20a:	681b      	ldr	r3, [r3, #0]
 802f20c:	4a51      	ldr	r2, [pc, #324]	; (802f354 <HAL_DMA_Init+0x67c>)
 802f20e:	4293      	cmp	r3, r2
 802f210:	d045      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f212:	687b      	ldr	r3, [r7, #4]
 802f214:	681b      	ldr	r3, [r3, #0]
 802f216:	4a50      	ldr	r2, [pc, #320]	; (802f358 <HAL_DMA_Init+0x680>)
 802f218:	4293      	cmp	r3, r2
 802f21a:	d040      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f21c:	687b      	ldr	r3, [r7, #4]
 802f21e:	681b      	ldr	r3, [r3, #0]
 802f220:	4a4e      	ldr	r2, [pc, #312]	; (802f35c <HAL_DMA_Init+0x684>)
 802f222:	4293      	cmp	r3, r2
 802f224:	d03b      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f226:	687b      	ldr	r3, [r7, #4]
 802f228:	681b      	ldr	r3, [r3, #0]
 802f22a:	4a4d      	ldr	r2, [pc, #308]	; (802f360 <HAL_DMA_Init+0x688>)
 802f22c:	4293      	cmp	r3, r2
 802f22e:	d036      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f230:	687b      	ldr	r3, [r7, #4]
 802f232:	681b      	ldr	r3, [r3, #0]
 802f234:	4a4b      	ldr	r2, [pc, #300]	; (802f364 <HAL_DMA_Init+0x68c>)
 802f236:	4293      	cmp	r3, r2
 802f238:	d031      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f23a:	687b      	ldr	r3, [r7, #4]
 802f23c:	681b      	ldr	r3, [r3, #0]
 802f23e:	4a4a      	ldr	r2, [pc, #296]	; (802f368 <HAL_DMA_Init+0x690>)
 802f240:	4293      	cmp	r3, r2
 802f242:	d02c      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f244:	687b      	ldr	r3, [r7, #4]
 802f246:	681b      	ldr	r3, [r3, #0]
 802f248:	4a48      	ldr	r2, [pc, #288]	; (802f36c <HAL_DMA_Init+0x694>)
 802f24a:	4293      	cmp	r3, r2
 802f24c:	d027      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f24e:	687b      	ldr	r3, [r7, #4]
 802f250:	681b      	ldr	r3, [r3, #0]
 802f252:	4a47      	ldr	r2, [pc, #284]	; (802f370 <HAL_DMA_Init+0x698>)
 802f254:	4293      	cmp	r3, r2
 802f256:	d022      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f258:	687b      	ldr	r3, [r7, #4]
 802f25a:	681b      	ldr	r3, [r3, #0]
 802f25c:	4a45      	ldr	r2, [pc, #276]	; (802f374 <HAL_DMA_Init+0x69c>)
 802f25e:	4293      	cmp	r3, r2
 802f260:	d01d      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f262:	687b      	ldr	r3, [r7, #4]
 802f264:	681b      	ldr	r3, [r3, #0]
 802f266:	4a44      	ldr	r2, [pc, #272]	; (802f378 <HAL_DMA_Init+0x6a0>)
 802f268:	4293      	cmp	r3, r2
 802f26a:	d018      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f26c:	687b      	ldr	r3, [r7, #4]
 802f26e:	681b      	ldr	r3, [r3, #0]
 802f270:	4a42      	ldr	r2, [pc, #264]	; (802f37c <HAL_DMA_Init+0x6a4>)
 802f272:	4293      	cmp	r3, r2
 802f274:	d013      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f276:	687b      	ldr	r3, [r7, #4]
 802f278:	681b      	ldr	r3, [r3, #0]
 802f27a:	4a41      	ldr	r2, [pc, #260]	; (802f380 <HAL_DMA_Init+0x6a8>)
 802f27c:	4293      	cmp	r3, r2
 802f27e:	d00e      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f280:	687b      	ldr	r3, [r7, #4]
 802f282:	681b      	ldr	r3, [r3, #0]
 802f284:	4a3f      	ldr	r2, [pc, #252]	; (802f384 <HAL_DMA_Init+0x6ac>)
 802f286:	4293      	cmp	r3, r2
 802f288:	d009      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f28a:	687b      	ldr	r3, [r7, #4]
 802f28c:	681b      	ldr	r3, [r3, #0]
 802f28e:	4a3e      	ldr	r2, [pc, #248]	; (802f388 <HAL_DMA_Init+0x6b0>)
 802f290:	4293      	cmp	r3, r2
 802f292:	d004      	beq.n	802f29e <HAL_DMA_Init+0x5c6>
 802f294:	687b      	ldr	r3, [r7, #4]
 802f296:	681b      	ldr	r3, [r3, #0]
 802f298:	4a3c      	ldr	r2, [pc, #240]	; (802f38c <HAL_DMA_Init+0x6b4>)
 802f29a:	4293      	cmp	r3, r2
 802f29c:	d101      	bne.n	802f2a2 <HAL_DMA_Init+0x5ca>
 802f29e:	2301      	movs	r3, #1
 802f2a0:	e000      	b.n	802f2a4 <HAL_DMA_Init+0x5cc>
 802f2a2:	2300      	movs	r3, #0
 802f2a4:	2b00      	cmp	r3, #0
 802f2a6:	d032      	beq.n	802f30e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802f2a8:	6878      	ldr	r0, [r7, #4]
 802f2aa:	f002 fa5d 	bl	8031768 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802f2ae:	687b      	ldr	r3, [r7, #4]
 802f2b0:	689b      	ldr	r3, [r3, #8]
 802f2b2:	2b80      	cmp	r3, #128	; 0x80
 802f2b4:	d102      	bne.n	802f2bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802f2b6:	687b      	ldr	r3, [r7, #4]
 802f2b8:	2200      	movs	r2, #0
 802f2ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802f2bc:	687b      	ldr	r3, [r7, #4]
 802f2be:	685a      	ldr	r2, [r3, #4]
 802f2c0:	687b      	ldr	r3, [r7, #4]
 802f2c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f2c4:	b2d2      	uxtb	r2, r2
 802f2c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802f2c8:	687b      	ldr	r3, [r7, #4]
 802f2ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802f2cc:	687a      	ldr	r2, [r7, #4]
 802f2ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802f2d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802f2d2:	687b      	ldr	r3, [r7, #4]
 802f2d4:	685b      	ldr	r3, [r3, #4]
 802f2d6:	2b00      	cmp	r3, #0
 802f2d8:	d010      	beq.n	802f2fc <HAL_DMA_Init+0x624>
 802f2da:	687b      	ldr	r3, [r7, #4]
 802f2dc:	685b      	ldr	r3, [r3, #4]
 802f2de:	2b08      	cmp	r3, #8
 802f2e0:	d80c      	bhi.n	802f2fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802f2e2:	6878      	ldr	r0, [r7, #4]
 802f2e4:	f002 fada 	bl	803189c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802f2e8:	687b      	ldr	r3, [r7, #4]
 802f2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f2ec:	2200      	movs	r2, #0
 802f2ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802f2f0:	687b      	ldr	r3, [r7, #4]
 802f2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802f2f4:	687a      	ldr	r2, [r7, #4]
 802f2f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802f2f8:	605a      	str	r2, [r3, #4]
 802f2fa:	e008      	b.n	802f30e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802f2fc:	687b      	ldr	r3, [r7, #4]
 802f2fe:	2200      	movs	r2, #0
 802f300:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802f302:	687b      	ldr	r3, [r7, #4]
 802f304:	2200      	movs	r2, #0
 802f306:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802f308:	687b      	ldr	r3, [r7, #4]
 802f30a:	2200      	movs	r2, #0
 802f30c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802f30e:	687b      	ldr	r3, [r7, #4]
 802f310:	2200      	movs	r2, #0
 802f312:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802f314:	687b      	ldr	r3, [r7, #4]
 802f316:	2201      	movs	r2, #1
 802f318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802f31c:	2300      	movs	r3, #0
}
 802f31e:	4618      	mov	r0, r3
 802f320:	3718      	adds	r7, #24
 802f322:	46bd      	mov	sp, r7
 802f324:	bd80      	pop	{r7, pc}
 802f326:	bf00      	nop
 802f328:	a7fdabf8 	.word	0xa7fdabf8
 802f32c:	cccccccd 	.word	0xcccccccd
 802f330:	40020010 	.word	0x40020010
 802f334:	40020028 	.word	0x40020028
 802f338:	40020040 	.word	0x40020040
 802f33c:	40020058 	.word	0x40020058
 802f340:	40020070 	.word	0x40020070
 802f344:	40020088 	.word	0x40020088
 802f348:	400200a0 	.word	0x400200a0
 802f34c:	400200b8 	.word	0x400200b8
 802f350:	40020410 	.word	0x40020410
 802f354:	40020428 	.word	0x40020428
 802f358:	40020440 	.word	0x40020440
 802f35c:	40020458 	.word	0x40020458
 802f360:	40020470 	.word	0x40020470
 802f364:	40020488 	.word	0x40020488
 802f368:	400204a0 	.word	0x400204a0
 802f36c:	400204b8 	.word	0x400204b8
 802f370:	58025408 	.word	0x58025408
 802f374:	5802541c 	.word	0x5802541c
 802f378:	58025430 	.word	0x58025430
 802f37c:	58025444 	.word	0x58025444
 802f380:	58025458 	.word	0x58025458
 802f384:	5802546c 	.word	0x5802546c
 802f388:	58025480 	.word	0x58025480
 802f38c:	58025494 	.word	0x58025494

0802f390 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802f390:	b580      	push	{r7, lr}
 802f392:	b086      	sub	sp, #24
 802f394:	af00      	add	r7, sp, #0
 802f396:	60f8      	str	r0, [r7, #12]
 802f398:	60b9      	str	r1, [r7, #8]
 802f39a:	607a      	str	r2, [r7, #4]
 802f39c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802f39e:	2300      	movs	r3, #0
 802f3a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802f3a2:	68fb      	ldr	r3, [r7, #12]
 802f3a4:	2b00      	cmp	r3, #0
 802f3a6:	d101      	bne.n	802f3ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802f3a8:	2301      	movs	r3, #1
 802f3aa:	e226      	b.n	802f7fa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802f3ac:	68fb      	ldr	r3, [r7, #12]
 802f3ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802f3b2:	2b01      	cmp	r3, #1
 802f3b4:	d101      	bne.n	802f3ba <HAL_DMA_Start_IT+0x2a>
 802f3b6:	2302      	movs	r3, #2
 802f3b8:	e21f      	b.n	802f7fa <HAL_DMA_Start_IT+0x46a>
 802f3ba:	68fb      	ldr	r3, [r7, #12]
 802f3bc:	2201      	movs	r2, #1
 802f3be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802f3c2:	68fb      	ldr	r3, [r7, #12]
 802f3c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f3c8:	b2db      	uxtb	r3, r3
 802f3ca:	2b01      	cmp	r3, #1
 802f3cc:	f040 820a 	bne.w	802f7e4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802f3d0:	68fb      	ldr	r3, [r7, #12]
 802f3d2:	2202      	movs	r2, #2
 802f3d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802f3d8:	68fb      	ldr	r3, [r7, #12]
 802f3da:	2200      	movs	r2, #0
 802f3dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802f3de:	68fb      	ldr	r3, [r7, #12]
 802f3e0:	681b      	ldr	r3, [r3, #0]
 802f3e2:	4a68      	ldr	r2, [pc, #416]	; (802f584 <HAL_DMA_Start_IT+0x1f4>)
 802f3e4:	4293      	cmp	r3, r2
 802f3e6:	d04a      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f3e8:	68fb      	ldr	r3, [r7, #12]
 802f3ea:	681b      	ldr	r3, [r3, #0]
 802f3ec:	4a66      	ldr	r2, [pc, #408]	; (802f588 <HAL_DMA_Start_IT+0x1f8>)
 802f3ee:	4293      	cmp	r3, r2
 802f3f0:	d045      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f3f2:	68fb      	ldr	r3, [r7, #12]
 802f3f4:	681b      	ldr	r3, [r3, #0]
 802f3f6:	4a65      	ldr	r2, [pc, #404]	; (802f58c <HAL_DMA_Start_IT+0x1fc>)
 802f3f8:	4293      	cmp	r3, r2
 802f3fa:	d040      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f3fc:	68fb      	ldr	r3, [r7, #12]
 802f3fe:	681b      	ldr	r3, [r3, #0]
 802f400:	4a63      	ldr	r2, [pc, #396]	; (802f590 <HAL_DMA_Start_IT+0x200>)
 802f402:	4293      	cmp	r3, r2
 802f404:	d03b      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f406:	68fb      	ldr	r3, [r7, #12]
 802f408:	681b      	ldr	r3, [r3, #0]
 802f40a:	4a62      	ldr	r2, [pc, #392]	; (802f594 <HAL_DMA_Start_IT+0x204>)
 802f40c:	4293      	cmp	r3, r2
 802f40e:	d036      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f410:	68fb      	ldr	r3, [r7, #12]
 802f412:	681b      	ldr	r3, [r3, #0]
 802f414:	4a60      	ldr	r2, [pc, #384]	; (802f598 <HAL_DMA_Start_IT+0x208>)
 802f416:	4293      	cmp	r3, r2
 802f418:	d031      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f41a:	68fb      	ldr	r3, [r7, #12]
 802f41c:	681b      	ldr	r3, [r3, #0]
 802f41e:	4a5f      	ldr	r2, [pc, #380]	; (802f59c <HAL_DMA_Start_IT+0x20c>)
 802f420:	4293      	cmp	r3, r2
 802f422:	d02c      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f424:	68fb      	ldr	r3, [r7, #12]
 802f426:	681b      	ldr	r3, [r3, #0]
 802f428:	4a5d      	ldr	r2, [pc, #372]	; (802f5a0 <HAL_DMA_Start_IT+0x210>)
 802f42a:	4293      	cmp	r3, r2
 802f42c:	d027      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f42e:	68fb      	ldr	r3, [r7, #12]
 802f430:	681b      	ldr	r3, [r3, #0]
 802f432:	4a5c      	ldr	r2, [pc, #368]	; (802f5a4 <HAL_DMA_Start_IT+0x214>)
 802f434:	4293      	cmp	r3, r2
 802f436:	d022      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f438:	68fb      	ldr	r3, [r7, #12]
 802f43a:	681b      	ldr	r3, [r3, #0]
 802f43c:	4a5a      	ldr	r2, [pc, #360]	; (802f5a8 <HAL_DMA_Start_IT+0x218>)
 802f43e:	4293      	cmp	r3, r2
 802f440:	d01d      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f442:	68fb      	ldr	r3, [r7, #12]
 802f444:	681b      	ldr	r3, [r3, #0]
 802f446:	4a59      	ldr	r2, [pc, #356]	; (802f5ac <HAL_DMA_Start_IT+0x21c>)
 802f448:	4293      	cmp	r3, r2
 802f44a:	d018      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f44c:	68fb      	ldr	r3, [r7, #12]
 802f44e:	681b      	ldr	r3, [r3, #0]
 802f450:	4a57      	ldr	r2, [pc, #348]	; (802f5b0 <HAL_DMA_Start_IT+0x220>)
 802f452:	4293      	cmp	r3, r2
 802f454:	d013      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f456:	68fb      	ldr	r3, [r7, #12]
 802f458:	681b      	ldr	r3, [r3, #0]
 802f45a:	4a56      	ldr	r2, [pc, #344]	; (802f5b4 <HAL_DMA_Start_IT+0x224>)
 802f45c:	4293      	cmp	r3, r2
 802f45e:	d00e      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f460:	68fb      	ldr	r3, [r7, #12]
 802f462:	681b      	ldr	r3, [r3, #0]
 802f464:	4a54      	ldr	r2, [pc, #336]	; (802f5b8 <HAL_DMA_Start_IT+0x228>)
 802f466:	4293      	cmp	r3, r2
 802f468:	d009      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f46a:	68fb      	ldr	r3, [r7, #12]
 802f46c:	681b      	ldr	r3, [r3, #0]
 802f46e:	4a53      	ldr	r2, [pc, #332]	; (802f5bc <HAL_DMA_Start_IT+0x22c>)
 802f470:	4293      	cmp	r3, r2
 802f472:	d004      	beq.n	802f47e <HAL_DMA_Start_IT+0xee>
 802f474:	68fb      	ldr	r3, [r7, #12]
 802f476:	681b      	ldr	r3, [r3, #0]
 802f478:	4a51      	ldr	r2, [pc, #324]	; (802f5c0 <HAL_DMA_Start_IT+0x230>)
 802f47a:	4293      	cmp	r3, r2
 802f47c:	d108      	bne.n	802f490 <HAL_DMA_Start_IT+0x100>
 802f47e:	68fb      	ldr	r3, [r7, #12]
 802f480:	681b      	ldr	r3, [r3, #0]
 802f482:	681a      	ldr	r2, [r3, #0]
 802f484:	68fb      	ldr	r3, [r7, #12]
 802f486:	681b      	ldr	r3, [r3, #0]
 802f488:	f022 0201 	bic.w	r2, r2, #1
 802f48c:	601a      	str	r2, [r3, #0]
 802f48e:	e007      	b.n	802f4a0 <HAL_DMA_Start_IT+0x110>
 802f490:	68fb      	ldr	r3, [r7, #12]
 802f492:	681b      	ldr	r3, [r3, #0]
 802f494:	681a      	ldr	r2, [r3, #0]
 802f496:	68fb      	ldr	r3, [r7, #12]
 802f498:	681b      	ldr	r3, [r3, #0]
 802f49a:	f022 0201 	bic.w	r2, r2, #1
 802f49e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802f4a0:	683b      	ldr	r3, [r7, #0]
 802f4a2:	687a      	ldr	r2, [r7, #4]
 802f4a4:	68b9      	ldr	r1, [r7, #8]
 802f4a6:	68f8      	ldr	r0, [r7, #12]
 802f4a8:	f001 fe84 	bl	80311b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802f4ac:	68fb      	ldr	r3, [r7, #12]
 802f4ae:	681b      	ldr	r3, [r3, #0]
 802f4b0:	4a34      	ldr	r2, [pc, #208]	; (802f584 <HAL_DMA_Start_IT+0x1f4>)
 802f4b2:	4293      	cmp	r3, r2
 802f4b4:	d04a      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f4b6:	68fb      	ldr	r3, [r7, #12]
 802f4b8:	681b      	ldr	r3, [r3, #0]
 802f4ba:	4a33      	ldr	r2, [pc, #204]	; (802f588 <HAL_DMA_Start_IT+0x1f8>)
 802f4bc:	4293      	cmp	r3, r2
 802f4be:	d045      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f4c0:	68fb      	ldr	r3, [r7, #12]
 802f4c2:	681b      	ldr	r3, [r3, #0]
 802f4c4:	4a31      	ldr	r2, [pc, #196]	; (802f58c <HAL_DMA_Start_IT+0x1fc>)
 802f4c6:	4293      	cmp	r3, r2
 802f4c8:	d040      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f4ca:	68fb      	ldr	r3, [r7, #12]
 802f4cc:	681b      	ldr	r3, [r3, #0]
 802f4ce:	4a30      	ldr	r2, [pc, #192]	; (802f590 <HAL_DMA_Start_IT+0x200>)
 802f4d0:	4293      	cmp	r3, r2
 802f4d2:	d03b      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f4d4:	68fb      	ldr	r3, [r7, #12]
 802f4d6:	681b      	ldr	r3, [r3, #0]
 802f4d8:	4a2e      	ldr	r2, [pc, #184]	; (802f594 <HAL_DMA_Start_IT+0x204>)
 802f4da:	4293      	cmp	r3, r2
 802f4dc:	d036      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f4de:	68fb      	ldr	r3, [r7, #12]
 802f4e0:	681b      	ldr	r3, [r3, #0]
 802f4e2:	4a2d      	ldr	r2, [pc, #180]	; (802f598 <HAL_DMA_Start_IT+0x208>)
 802f4e4:	4293      	cmp	r3, r2
 802f4e6:	d031      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f4e8:	68fb      	ldr	r3, [r7, #12]
 802f4ea:	681b      	ldr	r3, [r3, #0]
 802f4ec:	4a2b      	ldr	r2, [pc, #172]	; (802f59c <HAL_DMA_Start_IT+0x20c>)
 802f4ee:	4293      	cmp	r3, r2
 802f4f0:	d02c      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f4f2:	68fb      	ldr	r3, [r7, #12]
 802f4f4:	681b      	ldr	r3, [r3, #0]
 802f4f6:	4a2a      	ldr	r2, [pc, #168]	; (802f5a0 <HAL_DMA_Start_IT+0x210>)
 802f4f8:	4293      	cmp	r3, r2
 802f4fa:	d027      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f4fc:	68fb      	ldr	r3, [r7, #12]
 802f4fe:	681b      	ldr	r3, [r3, #0]
 802f500:	4a28      	ldr	r2, [pc, #160]	; (802f5a4 <HAL_DMA_Start_IT+0x214>)
 802f502:	4293      	cmp	r3, r2
 802f504:	d022      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f506:	68fb      	ldr	r3, [r7, #12]
 802f508:	681b      	ldr	r3, [r3, #0]
 802f50a:	4a27      	ldr	r2, [pc, #156]	; (802f5a8 <HAL_DMA_Start_IT+0x218>)
 802f50c:	4293      	cmp	r3, r2
 802f50e:	d01d      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f510:	68fb      	ldr	r3, [r7, #12]
 802f512:	681b      	ldr	r3, [r3, #0]
 802f514:	4a25      	ldr	r2, [pc, #148]	; (802f5ac <HAL_DMA_Start_IT+0x21c>)
 802f516:	4293      	cmp	r3, r2
 802f518:	d018      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f51a:	68fb      	ldr	r3, [r7, #12]
 802f51c:	681b      	ldr	r3, [r3, #0]
 802f51e:	4a24      	ldr	r2, [pc, #144]	; (802f5b0 <HAL_DMA_Start_IT+0x220>)
 802f520:	4293      	cmp	r3, r2
 802f522:	d013      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f524:	68fb      	ldr	r3, [r7, #12]
 802f526:	681b      	ldr	r3, [r3, #0]
 802f528:	4a22      	ldr	r2, [pc, #136]	; (802f5b4 <HAL_DMA_Start_IT+0x224>)
 802f52a:	4293      	cmp	r3, r2
 802f52c:	d00e      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f52e:	68fb      	ldr	r3, [r7, #12]
 802f530:	681b      	ldr	r3, [r3, #0]
 802f532:	4a21      	ldr	r2, [pc, #132]	; (802f5b8 <HAL_DMA_Start_IT+0x228>)
 802f534:	4293      	cmp	r3, r2
 802f536:	d009      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f538:	68fb      	ldr	r3, [r7, #12]
 802f53a:	681b      	ldr	r3, [r3, #0]
 802f53c:	4a1f      	ldr	r2, [pc, #124]	; (802f5bc <HAL_DMA_Start_IT+0x22c>)
 802f53e:	4293      	cmp	r3, r2
 802f540:	d004      	beq.n	802f54c <HAL_DMA_Start_IT+0x1bc>
 802f542:	68fb      	ldr	r3, [r7, #12]
 802f544:	681b      	ldr	r3, [r3, #0]
 802f546:	4a1e      	ldr	r2, [pc, #120]	; (802f5c0 <HAL_DMA_Start_IT+0x230>)
 802f548:	4293      	cmp	r3, r2
 802f54a:	d101      	bne.n	802f550 <HAL_DMA_Start_IT+0x1c0>
 802f54c:	2301      	movs	r3, #1
 802f54e:	e000      	b.n	802f552 <HAL_DMA_Start_IT+0x1c2>
 802f550:	2300      	movs	r3, #0
 802f552:	2b00      	cmp	r3, #0
 802f554:	d036      	beq.n	802f5c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802f556:	68fb      	ldr	r3, [r7, #12]
 802f558:	681b      	ldr	r3, [r3, #0]
 802f55a:	681b      	ldr	r3, [r3, #0]
 802f55c:	f023 021e 	bic.w	r2, r3, #30
 802f560:	68fb      	ldr	r3, [r7, #12]
 802f562:	681b      	ldr	r3, [r3, #0]
 802f564:	f042 0216 	orr.w	r2, r2, #22
 802f568:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802f56a:	68fb      	ldr	r3, [r7, #12]
 802f56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f56e:	2b00      	cmp	r3, #0
 802f570:	d03e      	beq.n	802f5f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802f572:	68fb      	ldr	r3, [r7, #12]
 802f574:	681b      	ldr	r3, [r3, #0]
 802f576:	681a      	ldr	r2, [r3, #0]
 802f578:	68fb      	ldr	r3, [r7, #12]
 802f57a:	681b      	ldr	r3, [r3, #0]
 802f57c:	f042 0208 	orr.w	r2, r2, #8
 802f580:	601a      	str	r2, [r3, #0]
 802f582:	e035      	b.n	802f5f0 <HAL_DMA_Start_IT+0x260>
 802f584:	40020010 	.word	0x40020010
 802f588:	40020028 	.word	0x40020028
 802f58c:	40020040 	.word	0x40020040
 802f590:	40020058 	.word	0x40020058
 802f594:	40020070 	.word	0x40020070
 802f598:	40020088 	.word	0x40020088
 802f59c:	400200a0 	.word	0x400200a0
 802f5a0:	400200b8 	.word	0x400200b8
 802f5a4:	40020410 	.word	0x40020410
 802f5a8:	40020428 	.word	0x40020428
 802f5ac:	40020440 	.word	0x40020440
 802f5b0:	40020458 	.word	0x40020458
 802f5b4:	40020470 	.word	0x40020470
 802f5b8:	40020488 	.word	0x40020488
 802f5bc:	400204a0 	.word	0x400204a0
 802f5c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802f5c4:	68fb      	ldr	r3, [r7, #12]
 802f5c6:	681b      	ldr	r3, [r3, #0]
 802f5c8:	681b      	ldr	r3, [r3, #0]
 802f5ca:	f023 020e 	bic.w	r2, r3, #14
 802f5ce:	68fb      	ldr	r3, [r7, #12]
 802f5d0:	681b      	ldr	r3, [r3, #0]
 802f5d2:	f042 020a 	orr.w	r2, r2, #10
 802f5d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802f5d8:	68fb      	ldr	r3, [r7, #12]
 802f5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802f5dc:	2b00      	cmp	r3, #0
 802f5de:	d007      	beq.n	802f5f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802f5e0:	68fb      	ldr	r3, [r7, #12]
 802f5e2:	681b      	ldr	r3, [r3, #0]
 802f5e4:	681a      	ldr	r2, [r3, #0]
 802f5e6:	68fb      	ldr	r3, [r7, #12]
 802f5e8:	681b      	ldr	r3, [r3, #0]
 802f5ea:	f042 0204 	orr.w	r2, r2, #4
 802f5ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802f5f0:	68fb      	ldr	r3, [r7, #12]
 802f5f2:	681b      	ldr	r3, [r3, #0]
 802f5f4:	4a83      	ldr	r2, [pc, #524]	; (802f804 <HAL_DMA_Start_IT+0x474>)
 802f5f6:	4293      	cmp	r3, r2
 802f5f8:	d072      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f5fa:	68fb      	ldr	r3, [r7, #12]
 802f5fc:	681b      	ldr	r3, [r3, #0]
 802f5fe:	4a82      	ldr	r2, [pc, #520]	; (802f808 <HAL_DMA_Start_IT+0x478>)
 802f600:	4293      	cmp	r3, r2
 802f602:	d06d      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f604:	68fb      	ldr	r3, [r7, #12]
 802f606:	681b      	ldr	r3, [r3, #0]
 802f608:	4a80      	ldr	r2, [pc, #512]	; (802f80c <HAL_DMA_Start_IT+0x47c>)
 802f60a:	4293      	cmp	r3, r2
 802f60c:	d068      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f60e:	68fb      	ldr	r3, [r7, #12]
 802f610:	681b      	ldr	r3, [r3, #0]
 802f612:	4a7f      	ldr	r2, [pc, #508]	; (802f810 <HAL_DMA_Start_IT+0x480>)
 802f614:	4293      	cmp	r3, r2
 802f616:	d063      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f618:	68fb      	ldr	r3, [r7, #12]
 802f61a:	681b      	ldr	r3, [r3, #0]
 802f61c:	4a7d      	ldr	r2, [pc, #500]	; (802f814 <HAL_DMA_Start_IT+0x484>)
 802f61e:	4293      	cmp	r3, r2
 802f620:	d05e      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f622:	68fb      	ldr	r3, [r7, #12]
 802f624:	681b      	ldr	r3, [r3, #0]
 802f626:	4a7c      	ldr	r2, [pc, #496]	; (802f818 <HAL_DMA_Start_IT+0x488>)
 802f628:	4293      	cmp	r3, r2
 802f62a:	d059      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f62c:	68fb      	ldr	r3, [r7, #12]
 802f62e:	681b      	ldr	r3, [r3, #0]
 802f630:	4a7a      	ldr	r2, [pc, #488]	; (802f81c <HAL_DMA_Start_IT+0x48c>)
 802f632:	4293      	cmp	r3, r2
 802f634:	d054      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f636:	68fb      	ldr	r3, [r7, #12]
 802f638:	681b      	ldr	r3, [r3, #0]
 802f63a:	4a79      	ldr	r2, [pc, #484]	; (802f820 <HAL_DMA_Start_IT+0x490>)
 802f63c:	4293      	cmp	r3, r2
 802f63e:	d04f      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f640:	68fb      	ldr	r3, [r7, #12]
 802f642:	681b      	ldr	r3, [r3, #0]
 802f644:	4a77      	ldr	r2, [pc, #476]	; (802f824 <HAL_DMA_Start_IT+0x494>)
 802f646:	4293      	cmp	r3, r2
 802f648:	d04a      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f64a:	68fb      	ldr	r3, [r7, #12]
 802f64c:	681b      	ldr	r3, [r3, #0]
 802f64e:	4a76      	ldr	r2, [pc, #472]	; (802f828 <HAL_DMA_Start_IT+0x498>)
 802f650:	4293      	cmp	r3, r2
 802f652:	d045      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f654:	68fb      	ldr	r3, [r7, #12]
 802f656:	681b      	ldr	r3, [r3, #0]
 802f658:	4a74      	ldr	r2, [pc, #464]	; (802f82c <HAL_DMA_Start_IT+0x49c>)
 802f65a:	4293      	cmp	r3, r2
 802f65c:	d040      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f65e:	68fb      	ldr	r3, [r7, #12]
 802f660:	681b      	ldr	r3, [r3, #0]
 802f662:	4a73      	ldr	r2, [pc, #460]	; (802f830 <HAL_DMA_Start_IT+0x4a0>)
 802f664:	4293      	cmp	r3, r2
 802f666:	d03b      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f668:	68fb      	ldr	r3, [r7, #12]
 802f66a:	681b      	ldr	r3, [r3, #0]
 802f66c:	4a71      	ldr	r2, [pc, #452]	; (802f834 <HAL_DMA_Start_IT+0x4a4>)
 802f66e:	4293      	cmp	r3, r2
 802f670:	d036      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f672:	68fb      	ldr	r3, [r7, #12]
 802f674:	681b      	ldr	r3, [r3, #0]
 802f676:	4a70      	ldr	r2, [pc, #448]	; (802f838 <HAL_DMA_Start_IT+0x4a8>)
 802f678:	4293      	cmp	r3, r2
 802f67a:	d031      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f67c:	68fb      	ldr	r3, [r7, #12]
 802f67e:	681b      	ldr	r3, [r3, #0]
 802f680:	4a6e      	ldr	r2, [pc, #440]	; (802f83c <HAL_DMA_Start_IT+0x4ac>)
 802f682:	4293      	cmp	r3, r2
 802f684:	d02c      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f686:	68fb      	ldr	r3, [r7, #12]
 802f688:	681b      	ldr	r3, [r3, #0]
 802f68a:	4a6d      	ldr	r2, [pc, #436]	; (802f840 <HAL_DMA_Start_IT+0x4b0>)
 802f68c:	4293      	cmp	r3, r2
 802f68e:	d027      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f690:	68fb      	ldr	r3, [r7, #12]
 802f692:	681b      	ldr	r3, [r3, #0]
 802f694:	4a6b      	ldr	r2, [pc, #428]	; (802f844 <HAL_DMA_Start_IT+0x4b4>)
 802f696:	4293      	cmp	r3, r2
 802f698:	d022      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f69a:	68fb      	ldr	r3, [r7, #12]
 802f69c:	681b      	ldr	r3, [r3, #0]
 802f69e:	4a6a      	ldr	r2, [pc, #424]	; (802f848 <HAL_DMA_Start_IT+0x4b8>)
 802f6a0:	4293      	cmp	r3, r2
 802f6a2:	d01d      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f6a4:	68fb      	ldr	r3, [r7, #12]
 802f6a6:	681b      	ldr	r3, [r3, #0]
 802f6a8:	4a68      	ldr	r2, [pc, #416]	; (802f84c <HAL_DMA_Start_IT+0x4bc>)
 802f6aa:	4293      	cmp	r3, r2
 802f6ac:	d018      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f6ae:	68fb      	ldr	r3, [r7, #12]
 802f6b0:	681b      	ldr	r3, [r3, #0]
 802f6b2:	4a67      	ldr	r2, [pc, #412]	; (802f850 <HAL_DMA_Start_IT+0x4c0>)
 802f6b4:	4293      	cmp	r3, r2
 802f6b6:	d013      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f6b8:	68fb      	ldr	r3, [r7, #12]
 802f6ba:	681b      	ldr	r3, [r3, #0]
 802f6bc:	4a65      	ldr	r2, [pc, #404]	; (802f854 <HAL_DMA_Start_IT+0x4c4>)
 802f6be:	4293      	cmp	r3, r2
 802f6c0:	d00e      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f6c2:	68fb      	ldr	r3, [r7, #12]
 802f6c4:	681b      	ldr	r3, [r3, #0]
 802f6c6:	4a64      	ldr	r2, [pc, #400]	; (802f858 <HAL_DMA_Start_IT+0x4c8>)
 802f6c8:	4293      	cmp	r3, r2
 802f6ca:	d009      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f6cc:	68fb      	ldr	r3, [r7, #12]
 802f6ce:	681b      	ldr	r3, [r3, #0]
 802f6d0:	4a62      	ldr	r2, [pc, #392]	; (802f85c <HAL_DMA_Start_IT+0x4cc>)
 802f6d2:	4293      	cmp	r3, r2
 802f6d4:	d004      	beq.n	802f6e0 <HAL_DMA_Start_IT+0x350>
 802f6d6:	68fb      	ldr	r3, [r7, #12]
 802f6d8:	681b      	ldr	r3, [r3, #0]
 802f6da:	4a61      	ldr	r2, [pc, #388]	; (802f860 <HAL_DMA_Start_IT+0x4d0>)
 802f6dc:	4293      	cmp	r3, r2
 802f6de:	d101      	bne.n	802f6e4 <HAL_DMA_Start_IT+0x354>
 802f6e0:	2301      	movs	r3, #1
 802f6e2:	e000      	b.n	802f6e6 <HAL_DMA_Start_IT+0x356>
 802f6e4:	2300      	movs	r3, #0
 802f6e6:	2b00      	cmp	r3, #0
 802f6e8:	d01a      	beq.n	802f720 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802f6ea:	68fb      	ldr	r3, [r7, #12]
 802f6ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f6ee:	681b      	ldr	r3, [r3, #0]
 802f6f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802f6f4:	2b00      	cmp	r3, #0
 802f6f6:	d007      	beq.n	802f708 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802f6f8:	68fb      	ldr	r3, [r7, #12]
 802f6fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f6fc:	681a      	ldr	r2, [r3, #0]
 802f6fe:	68fb      	ldr	r3, [r7, #12]
 802f700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802f702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802f706:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802f708:	68fb      	ldr	r3, [r7, #12]
 802f70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f70c:	2b00      	cmp	r3, #0
 802f70e:	d007      	beq.n	802f720 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802f710:	68fb      	ldr	r3, [r7, #12]
 802f712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f714:	681a      	ldr	r2, [r3, #0]
 802f716:	68fb      	ldr	r3, [r7, #12]
 802f718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802f71a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802f71e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802f720:	68fb      	ldr	r3, [r7, #12]
 802f722:	681b      	ldr	r3, [r3, #0]
 802f724:	4a37      	ldr	r2, [pc, #220]	; (802f804 <HAL_DMA_Start_IT+0x474>)
 802f726:	4293      	cmp	r3, r2
 802f728:	d04a      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f72a:	68fb      	ldr	r3, [r7, #12]
 802f72c:	681b      	ldr	r3, [r3, #0]
 802f72e:	4a36      	ldr	r2, [pc, #216]	; (802f808 <HAL_DMA_Start_IT+0x478>)
 802f730:	4293      	cmp	r3, r2
 802f732:	d045      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f734:	68fb      	ldr	r3, [r7, #12]
 802f736:	681b      	ldr	r3, [r3, #0]
 802f738:	4a34      	ldr	r2, [pc, #208]	; (802f80c <HAL_DMA_Start_IT+0x47c>)
 802f73a:	4293      	cmp	r3, r2
 802f73c:	d040      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f73e:	68fb      	ldr	r3, [r7, #12]
 802f740:	681b      	ldr	r3, [r3, #0]
 802f742:	4a33      	ldr	r2, [pc, #204]	; (802f810 <HAL_DMA_Start_IT+0x480>)
 802f744:	4293      	cmp	r3, r2
 802f746:	d03b      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f748:	68fb      	ldr	r3, [r7, #12]
 802f74a:	681b      	ldr	r3, [r3, #0]
 802f74c:	4a31      	ldr	r2, [pc, #196]	; (802f814 <HAL_DMA_Start_IT+0x484>)
 802f74e:	4293      	cmp	r3, r2
 802f750:	d036      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f752:	68fb      	ldr	r3, [r7, #12]
 802f754:	681b      	ldr	r3, [r3, #0]
 802f756:	4a30      	ldr	r2, [pc, #192]	; (802f818 <HAL_DMA_Start_IT+0x488>)
 802f758:	4293      	cmp	r3, r2
 802f75a:	d031      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f75c:	68fb      	ldr	r3, [r7, #12]
 802f75e:	681b      	ldr	r3, [r3, #0]
 802f760:	4a2e      	ldr	r2, [pc, #184]	; (802f81c <HAL_DMA_Start_IT+0x48c>)
 802f762:	4293      	cmp	r3, r2
 802f764:	d02c      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f766:	68fb      	ldr	r3, [r7, #12]
 802f768:	681b      	ldr	r3, [r3, #0]
 802f76a:	4a2d      	ldr	r2, [pc, #180]	; (802f820 <HAL_DMA_Start_IT+0x490>)
 802f76c:	4293      	cmp	r3, r2
 802f76e:	d027      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f770:	68fb      	ldr	r3, [r7, #12]
 802f772:	681b      	ldr	r3, [r3, #0]
 802f774:	4a2b      	ldr	r2, [pc, #172]	; (802f824 <HAL_DMA_Start_IT+0x494>)
 802f776:	4293      	cmp	r3, r2
 802f778:	d022      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f77a:	68fb      	ldr	r3, [r7, #12]
 802f77c:	681b      	ldr	r3, [r3, #0]
 802f77e:	4a2a      	ldr	r2, [pc, #168]	; (802f828 <HAL_DMA_Start_IT+0x498>)
 802f780:	4293      	cmp	r3, r2
 802f782:	d01d      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f784:	68fb      	ldr	r3, [r7, #12]
 802f786:	681b      	ldr	r3, [r3, #0]
 802f788:	4a28      	ldr	r2, [pc, #160]	; (802f82c <HAL_DMA_Start_IT+0x49c>)
 802f78a:	4293      	cmp	r3, r2
 802f78c:	d018      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f78e:	68fb      	ldr	r3, [r7, #12]
 802f790:	681b      	ldr	r3, [r3, #0]
 802f792:	4a27      	ldr	r2, [pc, #156]	; (802f830 <HAL_DMA_Start_IT+0x4a0>)
 802f794:	4293      	cmp	r3, r2
 802f796:	d013      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f798:	68fb      	ldr	r3, [r7, #12]
 802f79a:	681b      	ldr	r3, [r3, #0]
 802f79c:	4a25      	ldr	r2, [pc, #148]	; (802f834 <HAL_DMA_Start_IT+0x4a4>)
 802f79e:	4293      	cmp	r3, r2
 802f7a0:	d00e      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f7a2:	68fb      	ldr	r3, [r7, #12]
 802f7a4:	681b      	ldr	r3, [r3, #0]
 802f7a6:	4a24      	ldr	r2, [pc, #144]	; (802f838 <HAL_DMA_Start_IT+0x4a8>)
 802f7a8:	4293      	cmp	r3, r2
 802f7aa:	d009      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f7ac:	68fb      	ldr	r3, [r7, #12]
 802f7ae:	681b      	ldr	r3, [r3, #0]
 802f7b0:	4a22      	ldr	r2, [pc, #136]	; (802f83c <HAL_DMA_Start_IT+0x4ac>)
 802f7b2:	4293      	cmp	r3, r2
 802f7b4:	d004      	beq.n	802f7c0 <HAL_DMA_Start_IT+0x430>
 802f7b6:	68fb      	ldr	r3, [r7, #12]
 802f7b8:	681b      	ldr	r3, [r3, #0]
 802f7ba:	4a21      	ldr	r2, [pc, #132]	; (802f840 <HAL_DMA_Start_IT+0x4b0>)
 802f7bc:	4293      	cmp	r3, r2
 802f7be:	d108      	bne.n	802f7d2 <HAL_DMA_Start_IT+0x442>
 802f7c0:	68fb      	ldr	r3, [r7, #12]
 802f7c2:	681b      	ldr	r3, [r3, #0]
 802f7c4:	681a      	ldr	r2, [r3, #0]
 802f7c6:	68fb      	ldr	r3, [r7, #12]
 802f7c8:	681b      	ldr	r3, [r3, #0]
 802f7ca:	f042 0201 	orr.w	r2, r2, #1
 802f7ce:	601a      	str	r2, [r3, #0]
 802f7d0:	e012      	b.n	802f7f8 <HAL_DMA_Start_IT+0x468>
 802f7d2:	68fb      	ldr	r3, [r7, #12]
 802f7d4:	681b      	ldr	r3, [r3, #0]
 802f7d6:	681a      	ldr	r2, [r3, #0]
 802f7d8:	68fb      	ldr	r3, [r7, #12]
 802f7da:	681b      	ldr	r3, [r3, #0]
 802f7dc:	f042 0201 	orr.w	r2, r2, #1
 802f7e0:	601a      	str	r2, [r3, #0]
 802f7e2:	e009      	b.n	802f7f8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802f7e4:	68fb      	ldr	r3, [r7, #12]
 802f7e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802f7ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802f7ec:	68fb      	ldr	r3, [r7, #12]
 802f7ee:	2200      	movs	r2, #0
 802f7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802f7f4:	2301      	movs	r3, #1
 802f7f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802f7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 802f7fa:	4618      	mov	r0, r3
 802f7fc:	3718      	adds	r7, #24
 802f7fe:	46bd      	mov	sp, r7
 802f800:	bd80      	pop	{r7, pc}
 802f802:	bf00      	nop
 802f804:	40020010 	.word	0x40020010
 802f808:	40020028 	.word	0x40020028
 802f80c:	40020040 	.word	0x40020040
 802f810:	40020058 	.word	0x40020058
 802f814:	40020070 	.word	0x40020070
 802f818:	40020088 	.word	0x40020088
 802f81c:	400200a0 	.word	0x400200a0
 802f820:	400200b8 	.word	0x400200b8
 802f824:	40020410 	.word	0x40020410
 802f828:	40020428 	.word	0x40020428
 802f82c:	40020440 	.word	0x40020440
 802f830:	40020458 	.word	0x40020458
 802f834:	40020470 	.word	0x40020470
 802f838:	40020488 	.word	0x40020488
 802f83c:	400204a0 	.word	0x400204a0
 802f840:	400204b8 	.word	0x400204b8
 802f844:	58025408 	.word	0x58025408
 802f848:	5802541c 	.word	0x5802541c
 802f84c:	58025430 	.word	0x58025430
 802f850:	58025444 	.word	0x58025444
 802f854:	58025458 	.word	0x58025458
 802f858:	5802546c 	.word	0x5802546c
 802f85c:	58025480 	.word	0x58025480
 802f860:	58025494 	.word	0x58025494

0802f864 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802f864:	b580      	push	{r7, lr}
 802f866:	b086      	sub	sp, #24
 802f868:	af00      	add	r7, sp, #0
 802f86a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802f86c:	f7fe fd38 	bl	802e2e0 <HAL_GetTick>
 802f870:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802f872:	687b      	ldr	r3, [r7, #4]
 802f874:	2b00      	cmp	r3, #0
 802f876:	d101      	bne.n	802f87c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802f878:	2301      	movs	r3, #1
 802f87a:	e2dc      	b.n	802fe36 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802f87c:	687b      	ldr	r3, [r7, #4]
 802f87e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802f882:	b2db      	uxtb	r3, r3
 802f884:	2b02      	cmp	r3, #2
 802f886:	d008      	beq.n	802f89a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802f888:	687b      	ldr	r3, [r7, #4]
 802f88a:	2280      	movs	r2, #128	; 0x80
 802f88c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802f88e:	687b      	ldr	r3, [r7, #4]
 802f890:	2200      	movs	r2, #0
 802f892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802f896:	2301      	movs	r3, #1
 802f898:	e2cd      	b.n	802fe36 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802f89a:	687b      	ldr	r3, [r7, #4]
 802f89c:	681b      	ldr	r3, [r3, #0]
 802f89e:	4a76      	ldr	r2, [pc, #472]	; (802fa78 <HAL_DMA_Abort+0x214>)
 802f8a0:	4293      	cmp	r3, r2
 802f8a2:	d04a      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8a4:	687b      	ldr	r3, [r7, #4]
 802f8a6:	681b      	ldr	r3, [r3, #0]
 802f8a8:	4a74      	ldr	r2, [pc, #464]	; (802fa7c <HAL_DMA_Abort+0x218>)
 802f8aa:	4293      	cmp	r3, r2
 802f8ac:	d045      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8ae:	687b      	ldr	r3, [r7, #4]
 802f8b0:	681b      	ldr	r3, [r3, #0]
 802f8b2:	4a73      	ldr	r2, [pc, #460]	; (802fa80 <HAL_DMA_Abort+0x21c>)
 802f8b4:	4293      	cmp	r3, r2
 802f8b6:	d040      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8b8:	687b      	ldr	r3, [r7, #4]
 802f8ba:	681b      	ldr	r3, [r3, #0]
 802f8bc:	4a71      	ldr	r2, [pc, #452]	; (802fa84 <HAL_DMA_Abort+0x220>)
 802f8be:	4293      	cmp	r3, r2
 802f8c0:	d03b      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8c2:	687b      	ldr	r3, [r7, #4]
 802f8c4:	681b      	ldr	r3, [r3, #0]
 802f8c6:	4a70      	ldr	r2, [pc, #448]	; (802fa88 <HAL_DMA_Abort+0x224>)
 802f8c8:	4293      	cmp	r3, r2
 802f8ca:	d036      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8cc:	687b      	ldr	r3, [r7, #4]
 802f8ce:	681b      	ldr	r3, [r3, #0]
 802f8d0:	4a6e      	ldr	r2, [pc, #440]	; (802fa8c <HAL_DMA_Abort+0x228>)
 802f8d2:	4293      	cmp	r3, r2
 802f8d4:	d031      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8d6:	687b      	ldr	r3, [r7, #4]
 802f8d8:	681b      	ldr	r3, [r3, #0]
 802f8da:	4a6d      	ldr	r2, [pc, #436]	; (802fa90 <HAL_DMA_Abort+0x22c>)
 802f8dc:	4293      	cmp	r3, r2
 802f8de:	d02c      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8e0:	687b      	ldr	r3, [r7, #4]
 802f8e2:	681b      	ldr	r3, [r3, #0]
 802f8e4:	4a6b      	ldr	r2, [pc, #428]	; (802fa94 <HAL_DMA_Abort+0x230>)
 802f8e6:	4293      	cmp	r3, r2
 802f8e8:	d027      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8ea:	687b      	ldr	r3, [r7, #4]
 802f8ec:	681b      	ldr	r3, [r3, #0]
 802f8ee:	4a6a      	ldr	r2, [pc, #424]	; (802fa98 <HAL_DMA_Abort+0x234>)
 802f8f0:	4293      	cmp	r3, r2
 802f8f2:	d022      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8f4:	687b      	ldr	r3, [r7, #4]
 802f8f6:	681b      	ldr	r3, [r3, #0]
 802f8f8:	4a68      	ldr	r2, [pc, #416]	; (802fa9c <HAL_DMA_Abort+0x238>)
 802f8fa:	4293      	cmp	r3, r2
 802f8fc:	d01d      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f8fe:	687b      	ldr	r3, [r7, #4]
 802f900:	681b      	ldr	r3, [r3, #0]
 802f902:	4a67      	ldr	r2, [pc, #412]	; (802faa0 <HAL_DMA_Abort+0x23c>)
 802f904:	4293      	cmp	r3, r2
 802f906:	d018      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f908:	687b      	ldr	r3, [r7, #4]
 802f90a:	681b      	ldr	r3, [r3, #0]
 802f90c:	4a65      	ldr	r2, [pc, #404]	; (802faa4 <HAL_DMA_Abort+0x240>)
 802f90e:	4293      	cmp	r3, r2
 802f910:	d013      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f912:	687b      	ldr	r3, [r7, #4]
 802f914:	681b      	ldr	r3, [r3, #0]
 802f916:	4a64      	ldr	r2, [pc, #400]	; (802faa8 <HAL_DMA_Abort+0x244>)
 802f918:	4293      	cmp	r3, r2
 802f91a:	d00e      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f91c:	687b      	ldr	r3, [r7, #4]
 802f91e:	681b      	ldr	r3, [r3, #0]
 802f920:	4a62      	ldr	r2, [pc, #392]	; (802faac <HAL_DMA_Abort+0x248>)
 802f922:	4293      	cmp	r3, r2
 802f924:	d009      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f926:	687b      	ldr	r3, [r7, #4]
 802f928:	681b      	ldr	r3, [r3, #0]
 802f92a:	4a61      	ldr	r2, [pc, #388]	; (802fab0 <HAL_DMA_Abort+0x24c>)
 802f92c:	4293      	cmp	r3, r2
 802f92e:	d004      	beq.n	802f93a <HAL_DMA_Abort+0xd6>
 802f930:	687b      	ldr	r3, [r7, #4]
 802f932:	681b      	ldr	r3, [r3, #0]
 802f934:	4a5f      	ldr	r2, [pc, #380]	; (802fab4 <HAL_DMA_Abort+0x250>)
 802f936:	4293      	cmp	r3, r2
 802f938:	d101      	bne.n	802f93e <HAL_DMA_Abort+0xda>
 802f93a:	2301      	movs	r3, #1
 802f93c:	e000      	b.n	802f940 <HAL_DMA_Abort+0xdc>
 802f93e:	2300      	movs	r3, #0
 802f940:	2b00      	cmp	r3, #0
 802f942:	d013      	beq.n	802f96c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802f944:	687b      	ldr	r3, [r7, #4]
 802f946:	681b      	ldr	r3, [r3, #0]
 802f948:	681a      	ldr	r2, [r3, #0]
 802f94a:	687b      	ldr	r3, [r7, #4]
 802f94c:	681b      	ldr	r3, [r3, #0]
 802f94e:	f022 021e 	bic.w	r2, r2, #30
 802f952:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802f954:	687b      	ldr	r3, [r7, #4]
 802f956:	681b      	ldr	r3, [r3, #0]
 802f958:	695a      	ldr	r2, [r3, #20]
 802f95a:	687b      	ldr	r3, [r7, #4]
 802f95c:	681b      	ldr	r3, [r3, #0]
 802f95e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802f962:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802f964:	687b      	ldr	r3, [r7, #4]
 802f966:	681b      	ldr	r3, [r3, #0]
 802f968:	617b      	str	r3, [r7, #20]
 802f96a:	e00a      	b.n	802f982 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802f96c:	687b      	ldr	r3, [r7, #4]
 802f96e:	681b      	ldr	r3, [r3, #0]
 802f970:	681a      	ldr	r2, [r3, #0]
 802f972:	687b      	ldr	r3, [r7, #4]
 802f974:	681b      	ldr	r3, [r3, #0]
 802f976:	f022 020e 	bic.w	r2, r2, #14
 802f97a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802f97c:	687b      	ldr	r3, [r7, #4]
 802f97e:	681b      	ldr	r3, [r3, #0]
 802f980:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802f982:	687b      	ldr	r3, [r7, #4]
 802f984:	681b      	ldr	r3, [r3, #0]
 802f986:	4a3c      	ldr	r2, [pc, #240]	; (802fa78 <HAL_DMA_Abort+0x214>)
 802f988:	4293      	cmp	r3, r2
 802f98a:	d072      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f98c:	687b      	ldr	r3, [r7, #4]
 802f98e:	681b      	ldr	r3, [r3, #0]
 802f990:	4a3a      	ldr	r2, [pc, #232]	; (802fa7c <HAL_DMA_Abort+0x218>)
 802f992:	4293      	cmp	r3, r2
 802f994:	d06d      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f996:	687b      	ldr	r3, [r7, #4]
 802f998:	681b      	ldr	r3, [r3, #0]
 802f99a:	4a39      	ldr	r2, [pc, #228]	; (802fa80 <HAL_DMA_Abort+0x21c>)
 802f99c:	4293      	cmp	r3, r2
 802f99e:	d068      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9a0:	687b      	ldr	r3, [r7, #4]
 802f9a2:	681b      	ldr	r3, [r3, #0]
 802f9a4:	4a37      	ldr	r2, [pc, #220]	; (802fa84 <HAL_DMA_Abort+0x220>)
 802f9a6:	4293      	cmp	r3, r2
 802f9a8:	d063      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9aa:	687b      	ldr	r3, [r7, #4]
 802f9ac:	681b      	ldr	r3, [r3, #0]
 802f9ae:	4a36      	ldr	r2, [pc, #216]	; (802fa88 <HAL_DMA_Abort+0x224>)
 802f9b0:	4293      	cmp	r3, r2
 802f9b2:	d05e      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9b4:	687b      	ldr	r3, [r7, #4]
 802f9b6:	681b      	ldr	r3, [r3, #0]
 802f9b8:	4a34      	ldr	r2, [pc, #208]	; (802fa8c <HAL_DMA_Abort+0x228>)
 802f9ba:	4293      	cmp	r3, r2
 802f9bc:	d059      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9be:	687b      	ldr	r3, [r7, #4]
 802f9c0:	681b      	ldr	r3, [r3, #0]
 802f9c2:	4a33      	ldr	r2, [pc, #204]	; (802fa90 <HAL_DMA_Abort+0x22c>)
 802f9c4:	4293      	cmp	r3, r2
 802f9c6:	d054      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9c8:	687b      	ldr	r3, [r7, #4]
 802f9ca:	681b      	ldr	r3, [r3, #0]
 802f9cc:	4a31      	ldr	r2, [pc, #196]	; (802fa94 <HAL_DMA_Abort+0x230>)
 802f9ce:	4293      	cmp	r3, r2
 802f9d0:	d04f      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9d2:	687b      	ldr	r3, [r7, #4]
 802f9d4:	681b      	ldr	r3, [r3, #0]
 802f9d6:	4a30      	ldr	r2, [pc, #192]	; (802fa98 <HAL_DMA_Abort+0x234>)
 802f9d8:	4293      	cmp	r3, r2
 802f9da:	d04a      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9dc:	687b      	ldr	r3, [r7, #4]
 802f9de:	681b      	ldr	r3, [r3, #0]
 802f9e0:	4a2e      	ldr	r2, [pc, #184]	; (802fa9c <HAL_DMA_Abort+0x238>)
 802f9e2:	4293      	cmp	r3, r2
 802f9e4:	d045      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9e6:	687b      	ldr	r3, [r7, #4]
 802f9e8:	681b      	ldr	r3, [r3, #0]
 802f9ea:	4a2d      	ldr	r2, [pc, #180]	; (802faa0 <HAL_DMA_Abort+0x23c>)
 802f9ec:	4293      	cmp	r3, r2
 802f9ee:	d040      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9f0:	687b      	ldr	r3, [r7, #4]
 802f9f2:	681b      	ldr	r3, [r3, #0]
 802f9f4:	4a2b      	ldr	r2, [pc, #172]	; (802faa4 <HAL_DMA_Abort+0x240>)
 802f9f6:	4293      	cmp	r3, r2
 802f9f8:	d03b      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802f9fa:	687b      	ldr	r3, [r7, #4]
 802f9fc:	681b      	ldr	r3, [r3, #0]
 802f9fe:	4a2a      	ldr	r2, [pc, #168]	; (802faa8 <HAL_DMA_Abort+0x244>)
 802fa00:	4293      	cmp	r3, r2
 802fa02:	d036      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa04:	687b      	ldr	r3, [r7, #4]
 802fa06:	681b      	ldr	r3, [r3, #0]
 802fa08:	4a28      	ldr	r2, [pc, #160]	; (802faac <HAL_DMA_Abort+0x248>)
 802fa0a:	4293      	cmp	r3, r2
 802fa0c:	d031      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa0e:	687b      	ldr	r3, [r7, #4]
 802fa10:	681b      	ldr	r3, [r3, #0]
 802fa12:	4a27      	ldr	r2, [pc, #156]	; (802fab0 <HAL_DMA_Abort+0x24c>)
 802fa14:	4293      	cmp	r3, r2
 802fa16:	d02c      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa18:	687b      	ldr	r3, [r7, #4]
 802fa1a:	681b      	ldr	r3, [r3, #0]
 802fa1c:	4a25      	ldr	r2, [pc, #148]	; (802fab4 <HAL_DMA_Abort+0x250>)
 802fa1e:	4293      	cmp	r3, r2
 802fa20:	d027      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa22:	687b      	ldr	r3, [r7, #4]
 802fa24:	681b      	ldr	r3, [r3, #0]
 802fa26:	4a24      	ldr	r2, [pc, #144]	; (802fab8 <HAL_DMA_Abort+0x254>)
 802fa28:	4293      	cmp	r3, r2
 802fa2a:	d022      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa2c:	687b      	ldr	r3, [r7, #4]
 802fa2e:	681b      	ldr	r3, [r3, #0]
 802fa30:	4a22      	ldr	r2, [pc, #136]	; (802fabc <HAL_DMA_Abort+0x258>)
 802fa32:	4293      	cmp	r3, r2
 802fa34:	d01d      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa36:	687b      	ldr	r3, [r7, #4]
 802fa38:	681b      	ldr	r3, [r3, #0]
 802fa3a:	4a21      	ldr	r2, [pc, #132]	; (802fac0 <HAL_DMA_Abort+0x25c>)
 802fa3c:	4293      	cmp	r3, r2
 802fa3e:	d018      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa40:	687b      	ldr	r3, [r7, #4]
 802fa42:	681b      	ldr	r3, [r3, #0]
 802fa44:	4a1f      	ldr	r2, [pc, #124]	; (802fac4 <HAL_DMA_Abort+0x260>)
 802fa46:	4293      	cmp	r3, r2
 802fa48:	d013      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa4a:	687b      	ldr	r3, [r7, #4]
 802fa4c:	681b      	ldr	r3, [r3, #0]
 802fa4e:	4a1e      	ldr	r2, [pc, #120]	; (802fac8 <HAL_DMA_Abort+0x264>)
 802fa50:	4293      	cmp	r3, r2
 802fa52:	d00e      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa54:	687b      	ldr	r3, [r7, #4]
 802fa56:	681b      	ldr	r3, [r3, #0]
 802fa58:	4a1c      	ldr	r2, [pc, #112]	; (802facc <HAL_DMA_Abort+0x268>)
 802fa5a:	4293      	cmp	r3, r2
 802fa5c:	d009      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa5e:	687b      	ldr	r3, [r7, #4]
 802fa60:	681b      	ldr	r3, [r3, #0]
 802fa62:	4a1b      	ldr	r2, [pc, #108]	; (802fad0 <HAL_DMA_Abort+0x26c>)
 802fa64:	4293      	cmp	r3, r2
 802fa66:	d004      	beq.n	802fa72 <HAL_DMA_Abort+0x20e>
 802fa68:	687b      	ldr	r3, [r7, #4]
 802fa6a:	681b      	ldr	r3, [r3, #0]
 802fa6c:	4a19      	ldr	r2, [pc, #100]	; (802fad4 <HAL_DMA_Abort+0x270>)
 802fa6e:	4293      	cmp	r3, r2
 802fa70:	d132      	bne.n	802fad8 <HAL_DMA_Abort+0x274>
 802fa72:	2301      	movs	r3, #1
 802fa74:	e031      	b.n	802fada <HAL_DMA_Abort+0x276>
 802fa76:	bf00      	nop
 802fa78:	40020010 	.word	0x40020010
 802fa7c:	40020028 	.word	0x40020028
 802fa80:	40020040 	.word	0x40020040
 802fa84:	40020058 	.word	0x40020058
 802fa88:	40020070 	.word	0x40020070
 802fa8c:	40020088 	.word	0x40020088
 802fa90:	400200a0 	.word	0x400200a0
 802fa94:	400200b8 	.word	0x400200b8
 802fa98:	40020410 	.word	0x40020410
 802fa9c:	40020428 	.word	0x40020428
 802faa0:	40020440 	.word	0x40020440
 802faa4:	40020458 	.word	0x40020458
 802faa8:	40020470 	.word	0x40020470
 802faac:	40020488 	.word	0x40020488
 802fab0:	400204a0 	.word	0x400204a0
 802fab4:	400204b8 	.word	0x400204b8
 802fab8:	58025408 	.word	0x58025408
 802fabc:	5802541c 	.word	0x5802541c
 802fac0:	58025430 	.word	0x58025430
 802fac4:	58025444 	.word	0x58025444
 802fac8:	58025458 	.word	0x58025458
 802facc:	5802546c 	.word	0x5802546c
 802fad0:	58025480 	.word	0x58025480
 802fad4:	58025494 	.word	0x58025494
 802fad8:	2300      	movs	r3, #0
 802fada:	2b00      	cmp	r3, #0
 802fadc:	d007      	beq.n	802faee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802fade:	687b      	ldr	r3, [r7, #4]
 802fae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802fae2:	681a      	ldr	r2, [r3, #0]
 802fae4:	687b      	ldr	r3, [r7, #4]
 802fae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802fae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802faec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802faee:	687b      	ldr	r3, [r7, #4]
 802faf0:	681b      	ldr	r3, [r3, #0]
 802faf2:	4a6d      	ldr	r2, [pc, #436]	; (802fca8 <HAL_DMA_Abort+0x444>)
 802faf4:	4293      	cmp	r3, r2
 802faf6:	d04a      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802faf8:	687b      	ldr	r3, [r7, #4]
 802fafa:	681b      	ldr	r3, [r3, #0]
 802fafc:	4a6b      	ldr	r2, [pc, #428]	; (802fcac <HAL_DMA_Abort+0x448>)
 802fafe:	4293      	cmp	r3, r2
 802fb00:	d045      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb02:	687b      	ldr	r3, [r7, #4]
 802fb04:	681b      	ldr	r3, [r3, #0]
 802fb06:	4a6a      	ldr	r2, [pc, #424]	; (802fcb0 <HAL_DMA_Abort+0x44c>)
 802fb08:	4293      	cmp	r3, r2
 802fb0a:	d040      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb0c:	687b      	ldr	r3, [r7, #4]
 802fb0e:	681b      	ldr	r3, [r3, #0]
 802fb10:	4a68      	ldr	r2, [pc, #416]	; (802fcb4 <HAL_DMA_Abort+0x450>)
 802fb12:	4293      	cmp	r3, r2
 802fb14:	d03b      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb16:	687b      	ldr	r3, [r7, #4]
 802fb18:	681b      	ldr	r3, [r3, #0]
 802fb1a:	4a67      	ldr	r2, [pc, #412]	; (802fcb8 <HAL_DMA_Abort+0x454>)
 802fb1c:	4293      	cmp	r3, r2
 802fb1e:	d036      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb20:	687b      	ldr	r3, [r7, #4]
 802fb22:	681b      	ldr	r3, [r3, #0]
 802fb24:	4a65      	ldr	r2, [pc, #404]	; (802fcbc <HAL_DMA_Abort+0x458>)
 802fb26:	4293      	cmp	r3, r2
 802fb28:	d031      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb2a:	687b      	ldr	r3, [r7, #4]
 802fb2c:	681b      	ldr	r3, [r3, #0]
 802fb2e:	4a64      	ldr	r2, [pc, #400]	; (802fcc0 <HAL_DMA_Abort+0x45c>)
 802fb30:	4293      	cmp	r3, r2
 802fb32:	d02c      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb34:	687b      	ldr	r3, [r7, #4]
 802fb36:	681b      	ldr	r3, [r3, #0]
 802fb38:	4a62      	ldr	r2, [pc, #392]	; (802fcc4 <HAL_DMA_Abort+0x460>)
 802fb3a:	4293      	cmp	r3, r2
 802fb3c:	d027      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb3e:	687b      	ldr	r3, [r7, #4]
 802fb40:	681b      	ldr	r3, [r3, #0]
 802fb42:	4a61      	ldr	r2, [pc, #388]	; (802fcc8 <HAL_DMA_Abort+0x464>)
 802fb44:	4293      	cmp	r3, r2
 802fb46:	d022      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb48:	687b      	ldr	r3, [r7, #4]
 802fb4a:	681b      	ldr	r3, [r3, #0]
 802fb4c:	4a5f      	ldr	r2, [pc, #380]	; (802fccc <HAL_DMA_Abort+0x468>)
 802fb4e:	4293      	cmp	r3, r2
 802fb50:	d01d      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb52:	687b      	ldr	r3, [r7, #4]
 802fb54:	681b      	ldr	r3, [r3, #0]
 802fb56:	4a5e      	ldr	r2, [pc, #376]	; (802fcd0 <HAL_DMA_Abort+0x46c>)
 802fb58:	4293      	cmp	r3, r2
 802fb5a:	d018      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb5c:	687b      	ldr	r3, [r7, #4]
 802fb5e:	681b      	ldr	r3, [r3, #0]
 802fb60:	4a5c      	ldr	r2, [pc, #368]	; (802fcd4 <HAL_DMA_Abort+0x470>)
 802fb62:	4293      	cmp	r3, r2
 802fb64:	d013      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb66:	687b      	ldr	r3, [r7, #4]
 802fb68:	681b      	ldr	r3, [r3, #0]
 802fb6a:	4a5b      	ldr	r2, [pc, #364]	; (802fcd8 <HAL_DMA_Abort+0x474>)
 802fb6c:	4293      	cmp	r3, r2
 802fb6e:	d00e      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb70:	687b      	ldr	r3, [r7, #4]
 802fb72:	681b      	ldr	r3, [r3, #0]
 802fb74:	4a59      	ldr	r2, [pc, #356]	; (802fcdc <HAL_DMA_Abort+0x478>)
 802fb76:	4293      	cmp	r3, r2
 802fb78:	d009      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb7a:	687b      	ldr	r3, [r7, #4]
 802fb7c:	681b      	ldr	r3, [r3, #0]
 802fb7e:	4a58      	ldr	r2, [pc, #352]	; (802fce0 <HAL_DMA_Abort+0x47c>)
 802fb80:	4293      	cmp	r3, r2
 802fb82:	d004      	beq.n	802fb8e <HAL_DMA_Abort+0x32a>
 802fb84:	687b      	ldr	r3, [r7, #4]
 802fb86:	681b      	ldr	r3, [r3, #0]
 802fb88:	4a56      	ldr	r2, [pc, #344]	; (802fce4 <HAL_DMA_Abort+0x480>)
 802fb8a:	4293      	cmp	r3, r2
 802fb8c:	d108      	bne.n	802fba0 <HAL_DMA_Abort+0x33c>
 802fb8e:	687b      	ldr	r3, [r7, #4]
 802fb90:	681b      	ldr	r3, [r3, #0]
 802fb92:	681a      	ldr	r2, [r3, #0]
 802fb94:	687b      	ldr	r3, [r7, #4]
 802fb96:	681b      	ldr	r3, [r3, #0]
 802fb98:	f022 0201 	bic.w	r2, r2, #1
 802fb9c:	601a      	str	r2, [r3, #0]
 802fb9e:	e007      	b.n	802fbb0 <HAL_DMA_Abort+0x34c>
 802fba0:	687b      	ldr	r3, [r7, #4]
 802fba2:	681b      	ldr	r3, [r3, #0]
 802fba4:	681a      	ldr	r2, [r3, #0]
 802fba6:	687b      	ldr	r3, [r7, #4]
 802fba8:	681b      	ldr	r3, [r3, #0]
 802fbaa:	f022 0201 	bic.w	r2, r2, #1
 802fbae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802fbb0:	e013      	b.n	802fbda <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802fbb2:	f7fe fb95 	bl	802e2e0 <HAL_GetTick>
 802fbb6:	4602      	mov	r2, r0
 802fbb8:	693b      	ldr	r3, [r7, #16]
 802fbba:	1ad3      	subs	r3, r2, r3
 802fbbc:	2b05      	cmp	r3, #5
 802fbbe:	d90c      	bls.n	802fbda <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802fbc0:	687b      	ldr	r3, [r7, #4]
 802fbc2:	2220      	movs	r2, #32
 802fbc4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802fbc6:	687b      	ldr	r3, [r7, #4]
 802fbc8:	2203      	movs	r2, #3
 802fbca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802fbce:	687b      	ldr	r3, [r7, #4]
 802fbd0:	2200      	movs	r2, #0
 802fbd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802fbd6:	2301      	movs	r3, #1
 802fbd8:	e12d      	b.n	802fe36 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802fbda:	697b      	ldr	r3, [r7, #20]
 802fbdc:	681b      	ldr	r3, [r3, #0]
 802fbde:	f003 0301 	and.w	r3, r3, #1
 802fbe2:	2b00      	cmp	r3, #0
 802fbe4:	d1e5      	bne.n	802fbb2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802fbe6:	687b      	ldr	r3, [r7, #4]
 802fbe8:	681b      	ldr	r3, [r3, #0]
 802fbea:	4a2f      	ldr	r2, [pc, #188]	; (802fca8 <HAL_DMA_Abort+0x444>)
 802fbec:	4293      	cmp	r3, r2
 802fbee:	d04a      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fbf0:	687b      	ldr	r3, [r7, #4]
 802fbf2:	681b      	ldr	r3, [r3, #0]
 802fbf4:	4a2d      	ldr	r2, [pc, #180]	; (802fcac <HAL_DMA_Abort+0x448>)
 802fbf6:	4293      	cmp	r3, r2
 802fbf8:	d045      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fbfa:	687b      	ldr	r3, [r7, #4]
 802fbfc:	681b      	ldr	r3, [r3, #0]
 802fbfe:	4a2c      	ldr	r2, [pc, #176]	; (802fcb0 <HAL_DMA_Abort+0x44c>)
 802fc00:	4293      	cmp	r3, r2
 802fc02:	d040      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc04:	687b      	ldr	r3, [r7, #4]
 802fc06:	681b      	ldr	r3, [r3, #0]
 802fc08:	4a2a      	ldr	r2, [pc, #168]	; (802fcb4 <HAL_DMA_Abort+0x450>)
 802fc0a:	4293      	cmp	r3, r2
 802fc0c:	d03b      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc0e:	687b      	ldr	r3, [r7, #4]
 802fc10:	681b      	ldr	r3, [r3, #0]
 802fc12:	4a29      	ldr	r2, [pc, #164]	; (802fcb8 <HAL_DMA_Abort+0x454>)
 802fc14:	4293      	cmp	r3, r2
 802fc16:	d036      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc18:	687b      	ldr	r3, [r7, #4]
 802fc1a:	681b      	ldr	r3, [r3, #0]
 802fc1c:	4a27      	ldr	r2, [pc, #156]	; (802fcbc <HAL_DMA_Abort+0x458>)
 802fc1e:	4293      	cmp	r3, r2
 802fc20:	d031      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc22:	687b      	ldr	r3, [r7, #4]
 802fc24:	681b      	ldr	r3, [r3, #0]
 802fc26:	4a26      	ldr	r2, [pc, #152]	; (802fcc0 <HAL_DMA_Abort+0x45c>)
 802fc28:	4293      	cmp	r3, r2
 802fc2a:	d02c      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc2c:	687b      	ldr	r3, [r7, #4]
 802fc2e:	681b      	ldr	r3, [r3, #0]
 802fc30:	4a24      	ldr	r2, [pc, #144]	; (802fcc4 <HAL_DMA_Abort+0x460>)
 802fc32:	4293      	cmp	r3, r2
 802fc34:	d027      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc36:	687b      	ldr	r3, [r7, #4]
 802fc38:	681b      	ldr	r3, [r3, #0]
 802fc3a:	4a23      	ldr	r2, [pc, #140]	; (802fcc8 <HAL_DMA_Abort+0x464>)
 802fc3c:	4293      	cmp	r3, r2
 802fc3e:	d022      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc40:	687b      	ldr	r3, [r7, #4]
 802fc42:	681b      	ldr	r3, [r3, #0]
 802fc44:	4a21      	ldr	r2, [pc, #132]	; (802fccc <HAL_DMA_Abort+0x468>)
 802fc46:	4293      	cmp	r3, r2
 802fc48:	d01d      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc4a:	687b      	ldr	r3, [r7, #4]
 802fc4c:	681b      	ldr	r3, [r3, #0]
 802fc4e:	4a20      	ldr	r2, [pc, #128]	; (802fcd0 <HAL_DMA_Abort+0x46c>)
 802fc50:	4293      	cmp	r3, r2
 802fc52:	d018      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc54:	687b      	ldr	r3, [r7, #4]
 802fc56:	681b      	ldr	r3, [r3, #0]
 802fc58:	4a1e      	ldr	r2, [pc, #120]	; (802fcd4 <HAL_DMA_Abort+0x470>)
 802fc5a:	4293      	cmp	r3, r2
 802fc5c:	d013      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc5e:	687b      	ldr	r3, [r7, #4]
 802fc60:	681b      	ldr	r3, [r3, #0]
 802fc62:	4a1d      	ldr	r2, [pc, #116]	; (802fcd8 <HAL_DMA_Abort+0x474>)
 802fc64:	4293      	cmp	r3, r2
 802fc66:	d00e      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc68:	687b      	ldr	r3, [r7, #4]
 802fc6a:	681b      	ldr	r3, [r3, #0]
 802fc6c:	4a1b      	ldr	r2, [pc, #108]	; (802fcdc <HAL_DMA_Abort+0x478>)
 802fc6e:	4293      	cmp	r3, r2
 802fc70:	d009      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc72:	687b      	ldr	r3, [r7, #4]
 802fc74:	681b      	ldr	r3, [r3, #0]
 802fc76:	4a1a      	ldr	r2, [pc, #104]	; (802fce0 <HAL_DMA_Abort+0x47c>)
 802fc78:	4293      	cmp	r3, r2
 802fc7a:	d004      	beq.n	802fc86 <HAL_DMA_Abort+0x422>
 802fc7c:	687b      	ldr	r3, [r7, #4]
 802fc7e:	681b      	ldr	r3, [r3, #0]
 802fc80:	4a18      	ldr	r2, [pc, #96]	; (802fce4 <HAL_DMA_Abort+0x480>)
 802fc82:	4293      	cmp	r3, r2
 802fc84:	d101      	bne.n	802fc8a <HAL_DMA_Abort+0x426>
 802fc86:	2301      	movs	r3, #1
 802fc88:	e000      	b.n	802fc8c <HAL_DMA_Abort+0x428>
 802fc8a:	2300      	movs	r3, #0
 802fc8c:	2b00      	cmp	r3, #0
 802fc8e:	d02b      	beq.n	802fce8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802fc90:	687b      	ldr	r3, [r7, #4]
 802fc92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802fc94:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802fc96:	687b      	ldr	r3, [r7, #4]
 802fc98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802fc9a:	f003 031f 	and.w	r3, r3, #31
 802fc9e:	223f      	movs	r2, #63	; 0x3f
 802fca0:	409a      	lsls	r2, r3
 802fca2:	68bb      	ldr	r3, [r7, #8]
 802fca4:	609a      	str	r2, [r3, #8]
 802fca6:	e02a      	b.n	802fcfe <HAL_DMA_Abort+0x49a>
 802fca8:	40020010 	.word	0x40020010
 802fcac:	40020028 	.word	0x40020028
 802fcb0:	40020040 	.word	0x40020040
 802fcb4:	40020058 	.word	0x40020058
 802fcb8:	40020070 	.word	0x40020070
 802fcbc:	40020088 	.word	0x40020088
 802fcc0:	400200a0 	.word	0x400200a0
 802fcc4:	400200b8 	.word	0x400200b8
 802fcc8:	40020410 	.word	0x40020410
 802fccc:	40020428 	.word	0x40020428
 802fcd0:	40020440 	.word	0x40020440
 802fcd4:	40020458 	.word	0x40020458
 802fcd8:	40020470 	.word	0x40020470
 802fcdc:	40020488 	.word	0x40020488
 802fce0:	400204a0 	.word	0x400204a0
 802fce4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802fce8:	687b      	ldr	r3, [r7, #4]
 802fcea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802fcec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802fcee:	687b      	ldr	r3, [r7, #4]
 802fcf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802fcf2:	f003 031f 	and.w	r3, r3, #31
 802fcf6:	2201      	movs	r2, #1
 802fcf8:	409a      	lsls	r2, r3
 802fcfa:	68fb      	ldr	r3, [r7, #12]
 802fcfc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802fcfe:	687b      	ldr	r3, [r7, #4]
 802fd00:	681b      	ldr	r3, [r3, #0]
 802fd02:	4a4f      	ldr	r2, [pc, #316]	; (802fe40 <HAL_DMA_Abort+0x5dc>)
 802fd04:	4293      	cmp	r3, r2
 802fd06:	d072      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd08:	687b      	ldr	r3, [r7, #4]
 802fd0a:	681b      	ldr	r3, [r3, #0]
 802fd0c:	4a4d      	ldr	r2, [pc, #308]	; (802fe44 <HAL_DMA_Abort+0x5e0>)
 802fd0e:	4293      	cmp	r3, r2
 802fd10:	d06d      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd12:	687b      	ldr	r3, [r7, #4]
 802fd14:	681b      	ldr	r3, [r3, #0]
 802fd16:	4a4c      	ldr	r2, [pc, #304]	; (802fe48 <HAL_DMA_Abort+0x5e4>)
 802fd18:	4293      	cmp	r3, r2
 802fd1a:	d068      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd1c:	687b      	ldr	r3, [r7, #4]
 802fd1e:	681b      	ldr	r3, [r3, #0]
 802fd20:	4a4a      	ldr	r2, [pc, #296]	; (802fe4c <HAL_DMA_Abort+0x5e8>)
 802fd22:	4293      	cmp	r3, r2
 802fd24:	d063      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd26:	687b      	ldr	r3, [r7, #4]
 802fd28:	681b      	ldr	r3, [r3, #0]
 802fd2a:	4a49      	ldr	r2, [pc, #292]	; (802fe50 <HAL_DMA_Abort+0x5ec>)
 802fd2c:	4293      	cmp	r3, r2
 802fd2e:	d05e      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd30:	687b      	ldr	r3, [r7, #4]
 802fd32:	681b      	ldr	r3, [r3, #0]
 802fd34:	4a47      	ldr	r2, [pc, #284]	; (802fe54 <HAL_DMA_Abort+0x5f0>)
 802fd36:	4293      	cmp	r3, r2
 802fd38:	d059      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd3a:	687b      	ldr	r3, [r7, #4]
 802fd3c:	681b      	ldr	r3, [r3, #0]
 802fd3e:	4a46      	ldr	r2, [pc, #280]	; (802fe58 <HAL_DMA_Abort+0x5f4>)
 802fd40:	4293      	cmp	r3, r2
 802fd42:	d054      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd44:	687b      	ldr	r3, [r7, #4]
 802fd46:	681b      	ldr	r3, [r3, #0]
 802fd48:	4a44      	ldr	r2, [pc, #272]	; (802fe5c <HAL_DMA_Abort+0x5f8>)
 802fd4a:	4293      	cmp	r3, r2
 802fd4c:	d04f      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd4e:	687b      	ldr	r3, [r7, #4]
 802fd50:	681b      	ldr	r3, [r3, #0]
 802fd52:	4a43      	ldr	r2, [pc, #268]	; (802fe60 <HAL_DMA_Abort+0x5fc>)
 802fd54:	4293      	cmp	r3, r2
 802fd56:	d04a      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd58:	687b      	ldr	r3, [r7, #4]
 802fd5a:	681b      	ldr	r3, [r3, #0]
 802fd5c:	4a41      	ldr	r2, [pc, #260]	; (802fe64 <HAL_DMA_Abort+0x600>)
 802fd5e:	4293      	cmp	r3, r2
 802fd60:	d045      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd62:	687b      	ldr	r3, [r7, #4]
 802fd64:	681b      	ldr	r3, [r3, #0]
 802fd66:	4a40      	ldr	r2, [pc, #256]	; (802fe68 <HAL_DMA_Abort+0x604>)
 802fd68:	4293      	cmp	r3, r2
 802fd6a:	d040      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd6c:	687b      	ldr	r3, [r7, #4]
 802fd6e:	681b      	ldr	r3, [r3, #0]
 802fd70:	4a3e      	ldr	r2, [pc, #248]	; (802fe6c <HAL_DMA_Abort+0x608>)
 802fd72:	4293      	cmp	r3, r2
 802fd74:	d03b      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd76:	687b      	ldr	r3, [r7, #4]
 802fd78:	681b      	ldr	r3, [r3, #0]
 802fd7a:	4a3d      	ldr	r2, [pc, #244]	; (802fe70 <HAL_DMA_Abort+0x60c>)
 802fd7c:	4293      	cmp	r3, r2
 802fd7e:	d036      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd80:	687b      	ldr	r3, [r7, #4]
 802fd82:	681b      	ldr	r3, [r3, #0]
 802fd84:	4a3b      	ldr	r2, [pc, #236]	; (802fe74 <HAL_DMA_Abort+0x610>)
 802fd86:	4293      	cmp	r3, r2
 802fd88:	d031      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd8a:	687b      	ldr	r3, [r7, #4]
 802fd8c:	681b      	ldr	r3, [r3, #0]
 802fd8e:	4a3a      	ldr	r2, [pc, #232]	; (802fe78 <HAL_DMA_Abort+0x614>)
 802fd90:	4293      	cmp	r3, r2
 802fd92:	d02c      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd94:	687b      	ldr	r3, [r7, #4]
 802fd96:	681b      	ldr	r3, [r3, #0]
 802fd98:	4a38      	ldr	r2, [pc, #224]	; (802fe7c <HAL_DMA_Abort+0x618>)
 802fd9a:	4293      	cmp	r3, r2
 802fd9c:	d027      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fd9e:	687b      	ldr	r3, [r7, #4]
 802fda0:	681b      	ldr	r3, [r3, #0]
 802fda2:	4a37      	ldr	r2, [pc, #220]	; (802fe80 <HAL_DMA_Abort+0x61c>)
 802fda4:	4293      	cmp	r3, r2
 802fda6:	d022      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fda8:	687b      	ldr	r3, [r7, #4]
 802fdaa:	681b      	ldr	r3, [r3, #0]
 802fdac:	4a35      	ldr	r2, [pc, #212]	; (802fe84 <HAL_DMA_Abort+0x620>)
 802fdae:	4293      	cmp	r3, r2
 802fdb0:	d01d      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fdb2:	687b      	ldr	r3, [r7, #4]
 802fdb4:	681b      	ldr	r3, [r3, #0]
 802fdb6:	4a34      	ldr	r2, [pc, #208]	; (802fe88 <HAL_DMA_Abort+0x624>)
 802fdb8:	4293      	cmp	r3, r2
 802fdba:	d018      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fdbc:	687b      	ldr	r3, [r7, #4]
 802fdbe:	681b      	ldr	r3, [r3, #0]
 802fdc0:	4a32      	ldr	r2, [pc, #200]	; (802fe8c <HAL_DMA_Abort+0x628>)
 802fdc2:	4293      	cmp	r3, r2
 802fdc4:	d013      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fdc6:	687b      	ldr	r3, [r7, #4]
 802fdc8:	681b      	ldr	r3, [r3, #0]
 802fdca:	4a31      	ldr	r2, [pc, #196]	; (802fe90 <HAL_DMA_Abort+0x62c>)
 802fdcc:	4293      	cmp	r3, r2
 802fdce:	d00e      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fdd0:	687b      	ldr	r3, [r7, #4]
 802fdd2:	681b      	ldr	r3, [r3, #0]
 802fdd4:	4a2f      	ldr	r2, [pc, #188]	; (802fe94 <HAL_DMA_Abort+0x630>)
 802fdd6:	4293      	cmp	r3, r2
 802fdd8:	d009      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fdda:	687b      	ldr	r3, [r7, #4]
 802fddc:	681b      	ldr	r3, [r3, #0]
 802fdde:	4a2e      	ldr	r2, [pc, #184]	; (802fe98 <HAL_DMA_Abort+0x634>)
 802fde0:	4293      	cmp	r3, r2
 802fde2:	d004      	beq.n	802fdee <HAL_DMA_Abort+0x58a>
 802fde4:	687b      	ldr	r3, [r7, #4]
 802fde6:	681b      	ldr	r3, [r3, #0]
 802fde8:	4a2c      	ldr	r2, [pc, #176]	; (802fe9c <HAL_DMA_Abort+0x638>)
 802fdea:	4293      	cmp	r3, r2
 802fdec:	d101      	bne.n	802fdf2 <HAL_DMA_Abort+0x58e>
 802fdee:	2301      	movs	r3, #1
 802fdf0:	e000      	b.n	802fdf4 <HAL_DMA_Abort+0x590>
 802fdf2:	2300      	movs	r3, #0
 802fdf4:	2b00      	cmp	r3, #0
 802fdf6:	d015      	beq.n	802fe24 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802fdf8:	687b      	ldr	r3, [r7, #4]
 802fdfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802fdfc:	687a      	ldr	r2, [r7, #4]
 802fdfe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802fe00:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802fe02:	687b      	ldr	r3, [r7, #4]
 802fe04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fe06:	2b00      	cmp	r3, #0
 802fe08:	d00c      	beq.n	802fe24 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802fe0a:	687b      	ldr	r3, [r7, #4]
 802fe0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fe0e:	681a      	ldr	r2, [r3, #0]
 802fe10:	687b      	ldr	r3, [r7, #4]
 802fe12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802fe14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802fe18:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802fe1a:	687b      	ldr	r3, [r7, #4]
 802fe1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802fe1e:	687a      	ldr	r2, [r7, #4]
 802fe20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802fe22:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802fe24:	687b      	ldr	r3, [r7, #4]
 802fe26:	2201      	movs	r2, #1
 802fe28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802fe2c:	687b      	ldr	r3, [r7, #4]
 802fe2e:	2200      	movs	r2, #0
 802fe30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802fe34:	2300      	movs	r3, #0
}
 802fe36:	4618      	mov	r0, r3
 802fe38:	3718      	adds	r7, #24
 802fe3a:	46bd      	mov	sp, r7
 802fe3c:	bd80      	pop	{r7, pc}
 802fe3e:	bf00      	nop
 802fe40:	40020010 	.word	0x40020010
 802fe44:	40020028 	.word	0x40020028
 802fe48:	40020040 	.word	0x40020040
 802fe4c:	40020058 	.word	0x40020058
 802fe50:	40020070 	.word	0x40020070
 802fe54:	40020088 	.word	0x40020088
 802fe58:	400200a0 	.word	0x400200a0
 802fe5c:	400200b8 	.word	0x400200b8
 802fe60:	40020410 	.word	0x40020410
 802fe64:	40020428 	.word	0x40020428
 802fe68:	40020440 	.word	0x40020440
 802fe6c:	40020458 	.word	0x40020458
 802fe70:	40020470 	.word	0x40020470
 802fe74:	40020488 	.word	0x40020488
 802fe78:	400204a0 	.word	0x400204a0
 802fe7c:	400204b8 	.word	0x400204b8
 802fe80:	58025408 	.word	0x58025408
 802fe84:	5802541c 	.word	0x5802541c
 802fe88:	58025430 	.word	0x58025430
 802fe8c:	58025444 	.word	0x58025444
 802fe90:	58025458 	.word	0x58025458
 802fe94:	5802546c 	.word	0x5802546c
 802fe98:	58025480 	.word	0x58025480
 802fe9c:	58025494 	.word	0x58025494

0802fea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802fea0:	b580      	push	{r7, lr}
 802fea2:	b084      	sub	sp, #16
 802fea4:	af00      	add	r7, sp, #0
 802fea6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802fea8:	687b      	ldr	r3, [r7, #4]
 802feaa:	2b00      	cmp	r3, #0
 802feac:	d101      	bne.n	802feb2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802feae:	2301      	movs	r3, #1
 802feb0:	e237      	b.n	8030322 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802feb2:	687b      	ldr	r3, [r7, #4]
 802feb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802feb8:	b2db      	uxtb	r3, r3
 802feba:	2b02      	cmp	r3, #2
 802febc:	d004      	beq.n	802fec8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802febe:	687b      	ldr	r3, [r7, #4]
 802fec0:	2280      	movs	r2, #128	; 0x80
 802fec2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802fec4:	2301      	movs	r3, #1
 802fec6:	e22c      	b.n	8030322 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802fec8:	687b      	ldr	r3, [r7, #4]
 802feca:	681b      	ldr	r3, [r3, #0]
 802fecc:	4a5c      	ldr	r2, [pc, #368]	; (8030040 <HAL_DMA_Abort_IT+0x1a0>)
 802fece:	4293      	cmp	r3, r2
 802fed0:	d04a      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802fed2:	687b      	ldr	r3, [r7, #4]
 802fed4:	681b      	ldr	r3, [r3, #0]
 802fed6:	4a5b      	ldr	r2, [pc, #364]	; (8030044 <HAL_DMA_Abort_IT+0x1a4>)
 802fed8:	4293      	cmp	r3, r2
 802feda:	d045      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802fedc:	687b      	ldr	r3, [r7, #4]
 802fede:	681b      	ldr	r3, [r3, #0]
 802fee0:	4a59      	ldr	r2, [pc, #356]	; (8030048 <HAL_DMA_Abort_IT+0x1a8>)
 802fee2:	4293      	cmp	r3, r2
 802fee4:	d040      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802fee6:	687b      	ldr	r3, [r7, #4]
 802fee8:	681b      	ldr	r3, [r3, #0]
 802feea:	4a58      	ldr	r2, [pc, #352]	; (803004c <HAL_DMA_Abort_IT+0x1ac>)
 802feec:	4293      	cmp	r3, r2
 802feee:	d03b      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802fef0:	687b      	ldr	r3, [r7, #4]
 802fef2:	681b      	ldr	r3, [r3, #0]
 802fef4:	4a56      	ldr	r2, [pc, #344]	; (8030050 <HAL_DMA_Abort_IT+0x1b0>)
 802fef6:	4293      	cmp	r3, r2
 802fef8:	d036      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802fefa:	687b      	ldr	r3, [r7, #4]
 802fefc:	681b      	ldr	r3, [r3, #0]
 802fefe:	4a55      	ldr	r2, [pc, #340]	; (8030054 <HAL_DMA_Abort_IT+0x1b4>)
 802ff00:	4293      	cmp	r3, r2
 802ff02:	d031      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff04:	687b      	ldr	r3, [r7, #4]
 802ff06:	681b      	ldr	r3, [r3, #0]
 802ff08:	4a53      	ldr	r2, [pc, #332]	; (8030058 <HAL_DMA_Abort_IT+0x1b8>)
 802ff0a:	4293      	cmp	r3, r2
 802ff0c:	d02c      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff0e:	687b      	ldr	r3, [r7, #4]
 802ff10:	681b      	ldr	r3, [r3, #0]
 802ff12:	4a52      	ldr	r2, [pc, #328]	; (803005c <HAL_DMA_Abort_IT+0x1bc>)
 802ff14:	4293      	cmp	r3, r2
 802ff16:	d027      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff18:	687b      	ldr	r3, [r7, #4]
 802ff1a:	681b      	ldr	r3, [r3, #0]
 802ff1c:	4a50      	ldr	r2, [pc, #320]	; (8030060 <HAL_DMA_Abort_IT+0x1c0>)
 802ff1e:	4293      	cmp	r3, r2
 802ff20:	d022      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff22:	687b      	ldr	r3, [r7, #4]
 802ff24:	681b      	ldr	r3, [r3, #0]
 802ff26:	4a4f      	ldr	r2, [pc, #316]	; (8030064 <HAL_DMA_Abort_IT+0x1c4>)
 802ff28:	4293      	cmp	r3, r2
 802ff2a:	d01d      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff2c:	687b      	ldr	r3, [r7, #4]
 802ff2e:	681b      	ldr	r3, [r3, #0]
 802ff30:	4a4d      	ldr	r2, [pc, #308]	; (8030068 <HAL_DMA_Abort_IT+0x1c8>)
 802ff32:	4293      	cmp	r3, r2
 802ff34:	d018      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff36:	687b      	ldr	r3, [r7, #4]
 802ff38:	681b      	ldr	r3, [r3, #0]
 802ff3a:	4a4c      	ldr	r2, [pc, #304]	; (803006c <HAL_DMA_Abort_IT+0x1cc>)
 802ff3c:	4293      	cmp	r3, r2
 802ff3e:	d013      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff40:	687b      	ldr	r3, [r7, #4]
 802ff42:	681b      	ldr	r3, [r3, #0]
 802ff44:	4a4a      	ldr	r2, [pc, #296]	; (8030070 <HAL_DMA_Abort_IT+0x1d0>)
 802ff46:	4293      	cmp	r3, r2
 802ff48:	d00e      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff4a:	687b      	ldr	r3, [r7, #4]
 802ff4c:	681b      	ldr	r3, [r3, #0]
 802ff4e:	4a49      	ldr	r2, [pc, #292]	; (8030074 <HAL_DMA_Abort_IT+0x1d4>)
 802ff50:	4293      	cmp	r3, r2
 802ff52:	d009      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff54:	687b      	ldr	r3, [r7, #4]
 802ff56:	681b      	ldr	r3, [r3, #0]
 802ff58:	4a47      	ldr	r2, [pc, #284]	; (8030078 <HAL_DMA_Abort_IT+0x1d8>)
 802ff5a:	4293      	cmp	r3, r2
 802ff5c:	d004      	beq.n	802ff68 <HAL_DMA_Abort_IT+0xc8>
 802ff5e:	687b      	ldr	r3, [r7, #4]
 802ff60:	681b      	ldr	r3, [r3, #0]
 802ff62:	4a46      	ldr	r2, [pc, #280]	; (803007c <HAL_DMA_Abort_IT+0x1dc>)
 802ff64:	4293      	cmp	r3, r2
 802ff66:	d101      	bne.n	802ff6c <HAL_DMA_Abort_IT+0xcc>
 802ff68:	2301      	movs	r3, #1
 802ff6a:	e000      	b.n	802ff6e <HAL_DMA_Abort_IT+0xce>
 802ff6c:	2300      	movs	r3, #0
 802ff6e:	2b00      	cmp	r3, #0
 802ff70:	f000 8086 	beq.w	8030080 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802ff74:	687b      	ldr	r3, [r7, #4]
 802ff76:	2204      	movs	r2, #4
 802ff78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802ff7c:	687b      	ldr	r3, [r7, #4]
 802ff7e:	681b      	ldr	r3, [r3, #0]
 802ff80:	4a2f      	ldr	r2, [pc, #188]	; (8030040 <HAL_DMA_Abort_IT+0x1a0>)
 802ff82:	4293      	cmp	r3, r2
 802ff84:	d04a      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ff86:	687b      	ldr	r3, [r7, #4]
 802ff88:	681b      	ldr	r3, [r3, #0]
 802ff8a:	4a2e      	ldr	r2, [pc, #184]	; (8030044 <HAL_DMA_Abort_IT+0x1a4>)
 802ff8c:	4293      	cmp	r3, r2
 802ff8e:	d045      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ff90:	687b      	ldr	r3, [r7, #4]
 802ff92:	681b      	ldr	r3, [r3, #0]
 802ff94:	4a2c      	ldr	r2, [pc, #176]	; (8030048 <HAL_DMA_Abort_IT+0x1a8>)
 802ff96:	4293      	cmp	r3, r2
 802ff98:	d040      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ff9a:	687b      	ldr	r3, [r7, #4]
 802ff9c:	681b      	ldr	r3, [r3, #0]
 802ff9e:	4a2b      	ldr	r2, [pc, #172]	; (803004c <HAL_DMA_Abort_IT+0x1ac>)
 802ffa0:	4293      	cmp	r3, r2
 802ffa2:	d03b      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ffa4:	687b      	ldr	r3, [r7, #4]
 802ffa6:	681b      	ldr	r3, [r3, #0]
 802ffa8:	4a29      	ldr	r2, [pc, #164]	; (8030050 <HAL_DMA_Abort_IT+0x1b0>)
 802ffaa:	4293      	cmp	r3, r2
 802ffac:	d036      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ffae:	687b      	ldr	r3, [r7, #4]
 802ffb0:	681b      	ldr	r3, [r3, #0]
 802ffb2:	4a28      	ldr	r2, [pc, #160]	; (8030054 <HAL_DMA_Abort_IT+0x1b4>)
 802ffb4:	4293      	cmp	r3, r2
 802ffb6:	d031      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ffb8:	687b      	ldr	r3, [r7, #4]
 802ffba:	681b      	ldr	r3, [r3, #0]
 802ffbc:	4a26      	ldr	r2, [pc, #152]	; (8030058 <HAL_DMA_Abort_IT+0x1b8>)
 802ffbe:	4293      	cmp	r3, r2
 802ffc0:	d02c      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ffc2:	687b      	ldr	r3, [r7, #4]
 802ffc4:	681b      	ldr	r3, [r3, #0]
 802ffc6:	4a25      	ldr	r2, [pc, #148]	; (803005c <HAL_DMA_Abort_IT+0x1bc>)
 802ffc8:	4293      	cmp	r3, r2
 802ffca:	d027      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ffcc:	687b      	ldr	r3, [r7, #4]
 802ffce:	681b      	ldr	r3, [r3, #0]
 802ffd0:	4a23      	ldr	r2, [pc, #140]	; (8030060 <HAL_DMA_Abort_IT+0x1c0>)
 802ffd2:	4293      	cmp	r3, r2
 802ffd4:	d022      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ffd6:	687b      	ldr	r3, [r7, #4]
 802ffd8:	681b      	ldr	r3, [r3, #0]
 802ffda:	4a22      	ldr	r2, [pc, #136]	; (8030064 <HAL_DMA_Abort_IT+0x1c4>)
 802ffdc:	4293      	cmp	r3, r2
 802ffde:	d01d      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ffe0:	687b      	ldr	r3, [r7, #4]
 802ffe2:	681b      	ldr	r3, [r3, #0]
 802ffe4:	4a20      	ldr	r2, [pc, #128]	; (8030068 <HAL_DMA_Abort_IT+0x1c8>)
 802ffe6:	4293      	cmp	r3, r2
 802ffe8:	d018      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802ffea:	687b      	ldr	r3, [r7, #4]
 802ffec:	681b      	ldr	r3, [r3, #0]
 802ffee:	4a1f      	ldr	r2, [pc, #124]	; (803006c <HAL_DMA_Abort_IT+0x1cc>)
 802fff0:	4293      	cmp	r3, r2
 802fff2:	d013      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802fff4:	687b      	ldr	r3, [r7, #4]
 802fff6:	681b      	ldr	r3, [r3, #0]
 802fff8:	4a1d      	ldr	r2, [pc, #116]	; (8030070 <HAL_DMA_Abort_IT+0x1d0>)
 802fffa:	4293      	cmp	r3, r2
 802fffc:	d00e      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 802fffe:	687b      	ldr	r3, [r7, #4]
 8030000:	681b      	ldr	r3, [r3, #0]
 8030002:	4a1c      	ldr	r2, [pc, #112]	; (8030074 <HAL_DMA_Abort_IT+0x1d4>)
 8030004:	4293      	cmp	r3, r2
 8030006:	d009      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 8030008:	687b      	ldr	r3, [r7, #4]
 803000a:	681b      	ldr	r3, [r3, #0]
 803000c:	4a1a      	ldr	r2, [pc, #104]	; (8030078 <HAL_DMA_Abort_IT+0x1d8>)
 803000e:	4293      	cmp	r3, r2
 8030010:	d004      	beq.n	803001c <HAL_DMA_Abort_IT+0x17c>
 8030012:	687b      	ldr	r3, [r7, #4]
 8030014:	681b      	ldr	r3, [r3, #0]
 8030016:	4a19      	ldr	r2, [pc, #100]	; (803007c <HAL_DMA_Abort_IT+0x1dc>)
 8030018:	4293      	cmp	r3, r2
 803001a:	d108      	bne.n	803002e <HAL_DMA_Abort_IT+0x18e>
 803001c:	687b      	ldr	r3, [r7, #4]
 803001e:	681b      	ldr	r3, [r3, #0]
 8030020:	681a      	ldr	r2, [r3, #0]
 8030022:	687b      	ldr	r3, [r7, #4]
 8030024:	681b      	ldr	r3, [r3, #0]
 8030026:	f022 0201 	bic.w	r2, r2, #1
 803002a:	601a      	str	r2, [r3, #0]
 803002c:	e178      	b.n	8030320 <HAL_DMA_Abort_IT+0x480>
 803002e:	687b      	ldr	r3, [r7, #4]
 8030030:	681b      	ldr	r3, [r3, #0]
 8030032:	681a      	ldr	r2, [r3, #0]
 8030034:	687b      	ldr	r3, [r7, #4]
 8030036:	681b      	ldr	r3, [r3, #0]
 8030038:	f022 0201 	bic.w	r2, r2, #1
 803003c:	601a      	str	r2, [r3, #0]
 803003e:	e16f      	b.n	8030320 <HAL_DMA_Abort_IT+0x480>
 8030040:	40020010 	.word	0x40020010
 8030044:	40020028 	.word	0x40020028
 8030048:	40020040 	.word	0x40020040
 803004c:	40020058 	.word	0x40020058
 8030050:	40020070 	.word	0x40020070
 8030054:	40020088 	.word	0x40020088
 8030058:	400200a0 	.word	0x400200a0
 803005c:	400200b8 	.word	0x400200b8
 8030060:	40020410 	.word	0x40020410
 8030064:	40020428 	.word	0x40020428
 8030068:	40020440 	.word	0x40020440
 803006c:	40020458 	.word	0x40020458
 8030070:	40020470 	.word	0x40020470
 8030074:	40020488 	.word	0x40020488
 8030078:	400204a0 	.word	0x400204a0
 803007c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8030080:	687b      	ldr	r3, [r7, #4]
 8030082:	681b      	ldr	r3, [r3, #0]
 8030084:	681a      	ldr	r2, [r3, #0]
 8030086:	687b      	ldr	r3, [r7, #4]
 8030088:	681b      	ldr	r3, [r3, #0]
 803008a:	f022 020e 	bic.w	r2, r2, #14
 803008e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8030090:	687b      	ldr	r3, [r7, #4]
 8030092:	681b      	ldr	r3, [r3, #0]
 8030094:	4a6c      	ldr	r2, [pc, #432]	; (8030248 <HAL_DMA_Abort_IT+0x3a8>)
 8030096:	4293      	cmp	r3, r2
 8030098:	d04a      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 803009a:	687b      	ldr	r3, [r7, #4]
 803009c:	681b      	ldr	r3, [r3, #0]
 803009e:	4a6b      	ldr	r2, [pc, #428]	; (803024c <HAL_DMA_Abort_IT+0x3ac>)
 80300a0:	4293      	cmp	r3, r2
 80300a2:	d045      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300a4:	687b      	ldr	r3, [r7, #4]
 80300a6:	681b      	ldr	r3, [r3, #0]
 80300a8:	4a69      	ldr	r2, [pc, #420]	; (8030250 <HAL_DMA_Abort_IT+0x3b0>)
 80300aa:	4293      	cmp	r3, r2
 80300ac:	d040      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300ae:	687b      	ldr	r3, [r7, #4]
 80300b0:	681b      	ldr	r3, [r3, #0]
 80300b2:	4a68      	ldr	r2, [pc, #416]	; (8030254 <HAL_DMA_Abort_IT+0x3b4>)
 80300b4:	4293      	cmp	r3, r2
 80300b6:	d03b      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300b8:	687b      	ldr	r3, [r7, #4]
 80300ba:	681b      	ldr	r3, [r3, #0]
 80300bc:	4a66      	ldr	r2, [pc, #408]	; (8030258 <HAL_DMA_Abort_IT+0x3b8>)
 80300be:	4293      	cmp	r3, r2
 80300c0:	d036      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300c2:	687b      	ldr	r3, [r7, #4]
 80300c4:	681b      	ldr	r3, [r3, #0]
 80300c6:	4a65      	ldr	r2, [pc, #404]	; (803025c <HAL_DMA_Abort_IT+0x3bc>)
 80300c8:	4293      	cmp	r3, r2
 80300ca:	d031      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300cc:	687b      	ldr	r3, [r7, #4]
 80300ce:	681b      	ldr	r3, [r3, #0]
 80300d0:	4a63      	ldr	r2, [pc, #396]	; (8030260 <HAL_DMA_Abort_IT+0x3c0>)
 80300d2:	4293      	cmp	r3, r2
 80300d4:	d02c      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300d6:	687b      	ldr	r3, [r7, #4]
 80300d8:	681b      	ldr	r3, [r3, #0]
 80300da:	4a62      	ldr	r2, [pc, #392]	; (8030264 <HAL_DMA_Abort_IT+0x3c4>)
 80300dc:	4293      	cmp	r3, r2
 80300de:	d027      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300e0:	687b      	ldr	r3, [r7, #4]
 80300e2:	681b      	ldr	r3, [r3, #0]
 80300e4:	4a60      	ldr	r2, [pc, #384]	; (8030268 <HAL_DMA_Abort_IT+0x3c8>)
 80300e6:	4293      	cmp	r3, r2
 80300e8:	d022      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300ea:	687b      	ldr	r3, [r7, #4]
 80300ec:	681b      	ldr	r3, [r3, #0]
 80300ee:	4a5f      	ldr	r2, [pc, #380]	; (803026c <HAL_DMA_Abort_IT+0x3cc>)
 80300f0:	4293      	cmp	r3, r2
 80300f2:	d01d      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300f4:	687b      	ldr	r3, [r7, #4]
 80300f6:	681b      	ldr	r3, [r3, #0]
 80300f8:	4a5d      	ldr	r2, [pc, #372]	; (8030270 <HAL_DMA_Abort_IT+0x3d0>)
 80300fa:	4293      	cmp	r3, r2
 80300fc:	d018      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 80300fe:	687b      	ldr	r3, [r7, #4]
 8030100:	681b      	ldr	r3, [r3, #0]
 8030102:	4a5c      	ldr	r2, [pc, #368]	; (8030274 <HAL_DMA_Abort_IT+0x3d4>)
 8030104:	4293      	cmp	r3, r2
 8030106:	d013      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 8030108:	687b      	ldr	r3, [r7, #4]
 803010a:	681b      	ldr	r3, [r3, #0]
 803010c:	4a5a      	ldr	r2, [pc, #360]	; (8030278 <HAL_DMA_Abort_IT+0x3d8>)
 803010e:	4293      	cmp	r3, r2
 8030110:	d00e      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 8030112:	687b      	ldr	r3, [r7, #4]
 8030114:	681b      	ldr	r3, [r3, #0]
 8030116:	4a59      	ldr	r2, [pc, #356]	; (803027c <HAL_DMA_Abort_IT+0x3dc>)
 8030118:	4293      	cmp	r3, r2
 803011a:	d009      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 803011c:	687b      	ldr	r3, [r7, #4]
 803011e:	681b      	ldr	r3, [r3, #0]
 8030120:	4a57      	ldr	r2, [pc, #348]	; (8030280 <HAL_DMA_Abort_IT+0x3e0>)
 8030122:	4293      	cmp	r3, r2
 8030124:	d004      	beq.n	8030130 <HAL_DMA_Abort_IT+0x290>
 8030126:	687b      	ldr	r3, [r7, #4]
 8030128:	681b      	ldr	r3, [r3, #0]
 803012a:	4a56      	ldr	r2, [pc, #344]	; (8030284 <HAL_DMA_Abort_IT+0x3e4>)
 803012c:	4293      	cmp	r3, r2
 803012e:	d108      	bne.n	8030142 <HAL_DMA_Abort_IT+0x2a2>
 8030130:	687b      	ldr	r3, [r7, #4]
 8030132:	681b      	ldr	r3, [r3, #0]
 8030134:	681a      	ldr	r2, [r3, #0]
 8030136:	687b      	ldr	r3, [r7, #4]
 8030138:	681b      	ldr	r3, [r3, #0]
 803013a:	f022 0201 	bic.w	r2, r2, #1
 803013e:	601a      	str	r2, [r3, #0]
 8030140:	e007      	b.n	8030152 <HAL_DMA_Abort_IT+0x2b2>
 8030142:	687b      	ldr	r3, [r7, #4]
 8030144:	681b      	ldr	r3, [r3, #0]
 8030146:	681a      	ldr	r2, [r3, #0]
 8030148:	687b      	ldr	r3, [r7, #4]
 803014a:	681b      	ldr	r3, [r3, #0]
 803014c:	f022 0201 	bic.w	r2, r2, #1
 8030150:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8030152:	687b      	ldr	r3, [r7, #4]
 8030154:	681b      	ldr	r3, [r3, #0]
 8030156:	4a3c      	ldr	r2, [pc, #240]	; (8030248 <HAL_DMA_Abort_IT+0x3a8>)
 8030158:	4293      	cmp	r3, r2
 803015a:	d072      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 803015c:	687b      	ldr	r3, [r7, #4]
 803015e:	681b      	ldr	r3, [r3, #0]
 8030160:	4a3a      	ldr	r2, [pc, #232]	; (803024c <HAL_DMA_Abort_IT+0x3ac>)
 8030162:	4293      	cmp	r3, r2
 8030164:	d06d      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 8030166:	687b      	ldr	r3, [r7, #4]
 8030168:	681b      	ldr	r3, [r3, #0]
 803016a:	4a39      	ldr	r2, [pc, #228]	; (8030250 <HAL_DMA_Abort_IT+0x3b0>)
 803016c:	4293      	cmp	r3, r2
 803016e:	d068      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 8030170:	687b      	ldr	r3, [r7, #4]
 8030172:	681b      	ldr	r3, [r3, #0]
 8030174:	4a37      	ldr	r2, [pc, #220]	; (8030254 <HAL_DMA_Abort_IT+0x3b4>)
 8030176:	4293      	cmp	r3, r2
 8030178:	d063      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 803017a:	687b      	ldr	r3, [r7, #4]
 803017c:	681b      	ldr	r3, [r3, #0]
 803017e:	4a36      	ldr	r2, [pc, #216]	; (8030258 <HAL_DMA_Abort_IT+0x3b8>)
 8030180:	4293      	cmp	r3, r2
 8030182:	d05e      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 8030184:	687b      	ldr	r3, [r7, #4]
 8030186:	681b      	ldr	r3, [r3, #0]
 8030188:	4a34      	ldr	r2, [pc, #208]	; (803025c <HAL_DMA_Abort_IT+0x3bc>)
 803018a:	4293      	cmp	r3, r2
 803018c:	d059      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 803018e:	687b      	ldr	r3, [r7, #4]
 8030190:	681b      	ldr	r3, [r3, #0]
 8030192:	4a33      	ldr	r2, [pc, #204]	; (8030260 <HAL_DMA_Abort_IT+0x3c0>)
 8030194:	4293      	cmp	r3, r2
 8030196:	d054      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 8030198:	687b      	ldr	r3, [r7, #4]
 803019a:	681b      	ldr	r3, [r3, #0]
 803019c:	4a31      	ldr	r2, [pc, #196]	; (8030264 <HAL_DMA_Abort_IT+0x3c4>)
 803019e:	4293      	cmp	r3, r2
 80301a0:	d04f      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301a2:	687b      	ldr	r3, [r7, #4]
 80301a4:	681b      	ldr	r3, [r3, #0]
 80301a6:	4a30      	ldr	r2, [pc, #192]	; (8030268 <HAL_DMA_Abort_IT+0x3c8>)
 80301a8:	4293      	cmp	r3, r2
 80301aa:	d04a      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301ac:	687b      	ldr	r3, [r7, #4]
 80301ae:	681b      	ldr	r3, [r3, #0]
 80301b0:	4a2e      	ldr	r2, [pc, #184]	; (803026c <HAL_DMA_Abort_IT+0x3cc>)
 80301b2:	4293      	cmp	r3, r2
 80301b4:	d045      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301b6:	687b      	ldr	r3, [r7, #4]
 80301b8:	681b      	ldr	r3, [r3, #0]
 80301ba:	4a2d      	ldr	r2, [pc, #180]	; (8030270 <HAL_DMA_Abort_IT+0x3d0>)
 80301bc:	4293      	cmp	r3, r2
 80301be:	d040      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301c0:	687b      	ldr	r3, [r7, #4]
 80301c2:	681b      	ldr	r3, [r3, #0]
 80301c4:	4a2b      	ldr	r2, [pc, #172]	; (8030274 <HAL_DMA_Abort_IT+0x3d4>)
 80301c6:	4293      	cmp	r3, r2
 80301c8:	d03b      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301ca:	687b      	ldr	r3, [r7, #4]
 80301cc:	681b      	ldr	r3, [r3, #0]
 80301ce:	4a2a      	ldr	r2, [pc, #168]	; (8030278 <HAL_DMA_Abort_IT+0x3d8>)
 80301d0:	4293      	cmp	r3, r2
 80301d2:	d036      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301d4:	687b      	ldr	r3, [r7, #4]
 80301d6:	681b      	ldr	r3, [r3, #0]
 80301d8:	4a28      	ldr	r2, [pc, #160]	; (803027c <HAL_DMA_Abort_IT+0x3dc>)
 80301da:	4293      	cmp	r3, r2
 80301dc:	d031      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301de:	687b      	ldr	r3, [r7, #4]
 80301e0:	681b      	ldr	r3, [r3, #0]
 80301e2:	4a27      	ldr	r2, [pc, #156]	; (8030280 <HAL_DMA_Abort_IT+0x3e0>)
 80301e4:	4293      	cmp	r3, r2
 80301e6:	d02c      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301e8:	687b      	ldr	r3, [r7, #4]
 80301ea:	681b      	ldr	r3, [r3, #0]
 80301ec:	4a25      	ldr	r2, [pc, #148]	; (8030284 <HAL_DMA_Abort_IT+0x3e4>)
 80301ee:	4293      	cmp	r3, r2
 80301f0:	d027      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301f2:	687b      	ldr	r3, [r7, #4]
 80301f4:	681b      	ldr	r3, [r3, #0]
 80301f6:	4a24      	ldr	r2, [pc, #144]	; (8030288 <HAL_DMA_Abort_IT+0x3e8>)
 80301f8:	4293      	cmp	r3, r2
 80301fa:	d022      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 80301fc:	687b      	ldr	r3, [r7, #4]
 80301fe:	681b      	ldr	r3, [r3, #0]
 8030200:	4a22      	ldr	r2, [pc, #136]	; (803028c <HAL_DMA_Abort_IT+0x3ec>)
 8030202:	4293      	cmp	r3, r2
 8030204:	d01d      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 8030206:	687b      	ldr	r3, [r7, #4]
 8030208:	681b      	ldr	r3, [r3, #0]
 803020a:	4a21      	ldr	r2, [pc, #132]	; (8030290 <HAL_DMA_Abort_IT+0x3f0>)
 803020c:	4293      	cmp	r3, r2
 803020e:	d018      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 8030210:	687b      	ldr	r3, [r7, #4]
 8030212:	681b      	ldr	r3, [r3, #0]
 8030214:	4a1f      	ldr	r2, [pc, #124]	; (8030294 <HAL_DMA_Abort_IT+0x3f4>)
 8030216:	4293      	cmp	r3, r2
 8030218:	d013      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 803021a:	687b      	ldr	r3, [r7, #4]
 803021c:	681b      	ldr	r3, [r3, #0]
 803021e:	4a1e      	ldr	r2, [pc, #120]	; (8030298 <HAL_DMA_Abort_IT+0x3f8>)
 8030220:	4293      	cmp	r3, r2
 8030222:	d00e      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 8030224:	687b      	ldr	r3, [r7, #4]
 8030226:	681b      	ldr	r3, [r3, #0]
 8030228:	4a1c      	ldr	r2, [pc, #112]	; (803029c <HAL_DMA_Abort_IT+0x3fc>)
 803022a:	4293      	cmp	r3, r2
 803022c:	d009      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 803022e:	687b      	ldr	r3, [r7, #4]
 8030230:	681b      	ldr	r3, [r3, #0]
 8030232:	4a1b      	ldr	r2, [pc, #108]	; (80302a0 <HAL_DMA_Abort_IT+0x400>)
 8030234:	4293      	cmp	r3, r2
 8030236:	d004      	beq.n	8030242 <HAL_DMA_Abort_IT+0x3a2>
 8030238:	687b      	ldr	r3, [r7, #4]
 803023a:	681b      	ldr	r3, [r3, #0]
 803023c:	4a19      	ldr	r2, [pc, #100]	; (80302a4 <HAL_DMA_Abort_IT+0x404>)
 803023e:	4293      	cmp	r3, r2
 8030240:	d132      	bne.n	80302a8 <HAL_DMA_Abort_IT+0x408>
 8030242:	2301      	movs	r3, #1
 8030244:	e031      	b.n	80302aa <HAL_DMA_Abort_IT+0x40a>
 8030246:	bf00      	nop
 8030248:	40020010 	.word	0x40020010
 803024c:	40020028 	.word	0x40020028
 8030250:	40020040 	.word	0x40020040
 8030254:	40020058 	.word	0x40020058
 8030258:	40020070 	.word	0x40020070
 803025c:	40020088 	.word	0x40020088
 8030260:	400200a0 	.word	0x400200a0
 8030264:	400200b8 	.word	0x400200b8
 8030268:	40020410 	.word	0x40020410
 803026c:	40020428 	.word	0x40020428
 8030270:	40020440 	.word	0x40020440
 8030274:	40020458 	.word	0x40020458
 8030278:	40020470 	.word	0x40020470
 803027c:	40020488 	.word	0x40020488
 8030280:	400204a0 	.word	0x400204a0
 8030284:	400204b8 	.word	0x400204b8
 8030288:	58025408 	.word	0x58025408
 803028c:	5802541c 	.word	0x5802541c
 8030290:	58025430 	.word	0x58025430
 8030294:	58025444 	.word	0x58025444
 8030298:	58025458 	.word	0x58025458
 803029c:	5802546c 	.word	0x5802546c
 80302a0:	58025480 	.word	0x58025480
 80302a4:	58025494 	.word	0x58025494
 80302a8:	2300      	movs	r3, #0
 80302aa:	2b00      	cmp	r3, #0
 80302ac:	d028      	beq.n	8030300 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80302ae:	687b      	ldr	r3, [r7, #4]
 80302b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80302b2:	681a      	ldr	r2, [r3, #0]
 80302b4:	687b      	ldr	r3, [r7, #4]
 80302b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80302b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80302bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80302be:	687b      	ldr	r3, [r7, #4]
 80302c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80302c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80302c4:	687b      	ldr	r3, [r7, #4]
 80302c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80302c8:	f003 031f 	and.w	r3, r3, #31
 80302cc:	2201      	movs	r2, #1
 80302ce:	409a      	lsls	r2, r3
 80302d0:	68fb      	ldr	r3, [r7, #12]
 80302d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80302d4:	687b      	ldr	r3, [r7, #4]
 80302d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80302d8:	687a      	ldr	r2, [r7, #4]
 80302da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80302dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80302de:	687b      	ldr	r3, [r7, #4]
 80302e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80302e2:	2b00      	cmp	r3, #0
 80302e4:	d00c      	beq.n	8030300 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80302e6:	687b      	ldr	r3, [r7, #4]
 80302e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80302ea:	681a      	ldr	r2, [r3, #0]
 80302ec:	687b      	ldr	r3, [r7, #4]
 80302ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80302f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80302f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80302f6:	687b      	ldr	r3, [r7, #4]
 80302f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80302fa:	687a      	ldr	r2, [r7, #4]
 80302fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80302fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8030300:	687b      	ldr	r3, [r7, #4]
 8030302:	2201      	movs	r2, #1
 8030304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8030308:	687b      	ldr	r3, [r7, #4]
 803030a:	2200      	movs	r2, #0
 803030c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8030310:	687b      	ldr	r3, [r7, #4]
 8030312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030314:	2b00      	cmp	r3, #0
 8030316:	d003      	beq.n	8030320 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8030318:	687b      	ldr	r3, [r7, #4]
 803031a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803031c:	6878      	ldr	r0, [r7, #4]
 803031e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8030320:	2300      	movs	r3, #0
}
 8030322:	4618      	mov	r0, r3
 8030324:	3710      	adds	r7, #16
 8030326:	46bd      	mov	sp, r7
 8030328:	bd80      	pop	{r7, pc}
 803032a:	bf00      	nop

0803032c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 803032c:	b580      	push	{r7, lr}
 803032e:	b08a      	sub	sp, #40	; 0x28
 8030330:	af00      	add	r7, sp, #0
 8030332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8030334:	2300      	movs	r3, #0
 8030336:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8030338:	4b67      	ldr	r3, [pc, #412]	; (80304d8 <HAL_DMA_IRQHandler+0x1ac>)
 803033a:	681b      	ldr	r3, [r3, #0]
 803033c:	4a67      	ldr	r2, [pc, #412]	; (80304dc <HAL_DMA_IRQHandler+0x1b0>)
 803033e:	fba2 2303 	umull	r2, r3, r2, r3
 8030342:	0a9b      	lsrs	r3, r3, #10
 8030344:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8030346:	687b      	ldr	r3, [r7, #4]
 8030348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803034a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 803034c:	687b      	ldr	r3, [r7, #4]
 803034e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8030350:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8030352:	6a3b      	ldr	r3, [r7, #32]
 8030354:	681b      	ldr	r3, [r3, #0]
 8030356:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8030358:	69fb      	ldr	r3, [r7, #28]
 803035a:	681b      	ldr	r3, [r3, #0]
 803035c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 803035e:	687b      	ldr	r3, [r7, #4]
 8030360:	681b      	ldr	r3, [r3, #0]
 8030362:	4a5f      	ldr	r2, [pc, #380]	; (80304e0 <HAL_DMA_IRQHandler+0x1b4>)
 8030364:	4293      	cmp	r3, r2
 8030366:	d04a      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 8030368:	687b      	ldr	r3, [r7, #4]
 803036a:	681b      	ldr	r3, [r3, #0]
 803036c:	4a5d      	ldr	r2, [pc, #372]	; (80304e4 <HAL_DMA_IRQHandler+0x1b8>)
 803036e:	4293      	cmp	r3, r2
 8030370:	d045      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 8030372:	687b      	ldr	r3, [r7, #4]
 8030374:	681b      	ldr	r3, [r3, #0]
 8030376:	4a5c      	ldr	r2, [pc, #368]	; (80304e8 <HAL_DMA_IRQHandler+0x1bc>)
 8030378:	4293      	cmp	r3, r2
 803037a:	d040      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 803037c:	687b      	ldr	r3, [r7, #4]
 803037e:	681b      	ldr	r3, [r3, #0]
 8030380:	4a5a      	ldr	r2, [pc, #360]	; (80304ec <HAL_DMA_IRQHandler+0x1c0>)
 8030382:	4293      	cmp	r3, r2
 8030384:	d03b      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 8030386:	687b      	ldr	r3, [r7, #4]
 8030388:	681b      	ldr	r3, [r3, #0]
 803038a:	4a59      	ldr	r2, [pc, #356]	; (80304f0 <HAL_DMA_IRQHandler+0x1c4>)
 803038c:	4293      	cmp	r3, r2
 803038e:	d036      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 8030390:	687b      	ldr	r3, [r7, #4]
 8030392:	681b      	ldr	r3, [r3, #0]
 8030394:	4a57      	ldr	r2, [pc, #348]	; (80304f4 <HAL_DMA_IRQHandler+0x1c8>)
 8030396:	4293      	cmp	r3, r2
 8030398:	d031      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 803039a:	687b      	ldr	r3, [r7, #4]
 803039c:	681b      	ldr	r3, [r3, #0]
 803039e:	4a56      	ldr	r2, [pc, #344]	; (80304f8 <HAL_DMA_IRQHandler+0x1cc>)
 80303a0:	4293      	cmp	r3, r2
 80303a2:	d02c      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303a4:	687b      	ldr	r3, [r7, #4]
 80303a6:	681b      	ldr	r3, [r3, #0]
 80303a8:	4a54      	ldr	r2, [pc, #336]	; (80304fc <HAL_DMA_IRQHandler+0x1d0>)
 80303aa:	4293      	cmp	r3, r2
 80303ac:	d027      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303ae:	687b      	ldr	r3, [r7, #4]
 80303b0:	681b      	ldr	r3, [r3, #0]
 80303b2:	4a53      	ldr	r2, [pc, #332]	; (8030500 <HAL_DMA_IRQHandler+0x1d4>)
 80303b4:	4293      	cmp	r3, r2
 80303b6:	d022      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303b8:	687b      	ldr	r3, [r7, #4]
 80303ba:	681b      	ldr	r3, [r3, #0]
 80303bc:	4a51      	ldr	r2, [pc, #324]	; (8030504 <HAL_DMA_IRQHandler+0x1d8>)
 80303be:	4293      	cmp	r3, r2
 80303c0:	d01d      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303c2:	687b      	ldr	r3, [r7, #4]
 80303c4:	681b      	ldr	r3, [r3, #0]
 80303c6:	4a50      	ldr	r2, [pc, #320]	; (8030508 <HAL_DMA_IRQHandler+0x1dc>)
 80303c8:	4293      	cmp	r3, r2
 80303ca:	d018      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303cc:	687b      	ldr	r3, [r7, #4]
 80303ce:	681b      	ldr	r3, [r3, #0]
 80303d0:	4a4e      	ldr	r2, [pc, #312]	; (803050c <HAL_DMA_IRQHandler+0x1e0>)
 80303d2:	4293      	cmp	r3, r2
 80303d4:	d013      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303d6:	687b      	ldr	r3, [r7, #4]
 80303d8:	681b      	ldr	r3, [r3, #0]
 80303da:	4a4d      	ldr	r2, [pc, #308]	; (8030510 <HAL_DMA_IRQHandler+0x1e4>)
 80303dc:	4293      	cmp	r3, r2
 80303de:	d00e      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303e0:	687b      	ldr	r3, [r7, #4]
 80303e2:	681b      	ldr	r3, [r3, #0]
 80303e4:	4a4b      	ldr	r2, [pc, #300]	; (8030514 <HAL_DMA_IRQHandler+0x1e8>)
 80303e6:	4293      	cmp	r3, r2
 80303e8:	d009      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303ea:	687b      	ldr	r3, [r7, #4]
 80303ec:	681b      	ldr	r3, [r3, #0]
 80303ee:	4a4a      	ldr	r2, [pc, #296]	; (8030518 <HAL_DMA_IRQHandler+0x1ec>)
 80303f0:	4293      	cmp	r3, r2
 80303f2:	d004      	beq.n	80303fe <HAL_DMA_IRQHandler+0xd2>
 80303f4:	687b      	ldr	r3, [r7, #4]
 80303f6:	681b      	ldr	r3, [r3, #0]
 80303f8:	4a48      	ldr	r2, [pc, #288]	; (803051c <HAL_DMA_IRQHandler+0x1f0>)
 80303fa:	4293      	cmp	r3, r2
 80303fc:	d101      	bne.n	8030402 <HAL_DMA_IRQHandler+0xd6>
 80303fe:	2301      	movs	r3, #1
 8030400:	e000      	b.n	8030404 <HAL_DMA_IRQHandler+0xd8>
 8030402:	2300      	movs	r3, #0
 8030404:	2b00      	cmp	r3, #0
 8030406:	f000 842b 	beq.w	8030c60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 803040a:	687b      	ldr	r3, [r7, #4]
 803040c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803040e:	f003 031f 	and.w	r3, r3, #31
 8030412:	2208      	movs	r2, #8
 8030414:	409a      	lsls	r2, r3
 8030416:	69bb      	ldr	r3, [r7, #24]
 8030418:	4013      	ands	r3, r2
 803041a:	2b00      	cmp	r3, #0
 803041c:	f000 80a2 	beq.w	8030564 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8030420:	687b      	ldr	r3, [r7, #4]
 8030422:	681b      	ldr	r3, [r3, #0]
 8030424:	4a2e      	ldr	r2, [pc, #184]	; (80304e0 <HAL_DMA_IRQHandler+0x1b4>)
 8030426:	4293      	cmp	r3, r2
 8030428:	d04a      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 803042a:	687b      	ldr	r3, [r7, #4]
 803042c:	681b      	ldr	r3, [r3, #0]
 803042e:	4a2d      	ldr	r2, [pc, #180]	; (80304e4 <HAL_DMA_IRQHandler+0x1b8>)
 8030430:	4293      	cmp	r3, r2
 8030432:	d045      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 8030434:	687b      	ldr	r3, [r7, #4]
 8030436:	681b      	ldr	r3, [r3, #0]
 8030438:	4a2b      	ldr	r2, [pc, #172]	; (80304e8 <HAL_DMA_IRQHandler+0x1bc>)
 803043a:	4293      	cmp	r3, r2
 803043c:	d040      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 803043e:	687b      	ldr	r3, [r7, #4]
 8030440:	681b      	ldr	r3, [r3, #0]
 8030442:	4a2a      	ldr	r2, [pc, #168]	; (80304ec <HAL_DMA_IRQHandler+0x1c0>)
 8030444:	4293      	cmp	r3, r2
 8030446:	d03b      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 8030448:	687b      	ldr	r3, [r7, #4]
 803044a:	681b      	ldr	r3, [r3, #0]
 803044c:	4a28      	ldr	r2, [pc, #160]	; (80304f0 <HAL_DMA_IRQHandler+0x1c4>)
 803044e:	4293      	cmp	r3, r2
 8030450:	d036      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 8030452:	687b      	ldr	r3, [r7, #4]
 8030454:	681b      	ldr	r3, [r3, #0]
 8030456:	4a27      	ldr	r2, [pc, #156]	; (80304f4 <HAL_DMA_IRQHandler+0x1c8>)
 8030458:	4293      	cmp	r3, r2
 803045a:	d031      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 803045c:	687b      	ldr	r3, [r7, #4]
 803045e:	681b      	ldr	r3, [r3, #0]
 8030460:	4a25      	ldr	r2, [pc, #148]	; (80304f8 <HAL_DMA_IRQHandler+0x1cc>)
 8030462:	4293      	cmp	r3, r2
 8030464:	d02c      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 8030466:	687b      	ldr	r3, [r7, #4]
 8030468:	681b      	ldr	r3, [r3, #0]
 803046a:	4a24      	ldr	r2, [pc, #144]	; (80304fc <HAL_DMA_IRQHandler+0x1d0>)
 803046c:	4293      	cmp	r3, r2
 803046e:	d027      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 8030470:	687b      	ldr	r3, [r7, #4]
 8030472:	681b      	ldr	r3, [r3, #0]
 8030474:	4a22      	ldr	r2, [pc, #136]	; (8030500 <HAL_DMA_IRQHandler+0x1d4>)
 8030476:	4293      	cmp	r3, r2
 8030478:	d022      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 803047a:	687b      	ldr	r3, [r7, #4]
 803047c:	681b      	ldr	r3, [r3, #0]
 803047e:	4a21      	ldr	r2, [pc, #132]	; (8030504 <HAL_DMA_IRQHandler+0x1d8>)
 8030480:	4293      	cmp	r3, r2
 8030482:	d01d      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 8030484:	687b      	ldr	r3, [r7, #4]
 8030486:	681b      	ldr	r3, [r3, #0]
 8030488:	4a1f      	ldr	r2, [pc, #124]	; (8030508 <HAL_DMA_IRQHandler+0x1dc>)
 803048a:	4293      	cmp	r3, r2
 803048c:	d018      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 803048e:	687b      	ldr	r3, [r7, #4]
 8030490:	681b      	ldr	r3, [r3, #0]
 8030492:	4a1e      	ldr	r2, [pc, #120]	; (803050c <HAL_DMA_IRQHandler+0x1e0>)
 8030494:	4293      	cmp	r3, r2
 8030496:	d013      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 8030498:	687b      	ldr	r3, [r7, #4]
 803049a:	681b      	ldr	r3, [r3, #0]
 803049c:	4a1c      	ldr	r2, [pc, #112]	; (8030510 <HAL_DMA_IRQHandler+0x1e4>)
 803049e:	4293      	cmp	r3, r2
 80304a0:	d00e      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 80304a2:	687b      	ldr	r3, [r7, #4]
 80304a4:	681b      	ldr	r3, [r3, #0]
 80304a6:	4a1b      	ldr	r2, [pc, #108]	; (8030514 <HAL_DMA_IRQHandler+0x1e8>)
 80304a8:	4293      	cmp	r3, r2
 80304aa:	d009      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 80304ac:	687b      	ldr	r3, [r7, #4]
 80304ae:	681b      	ldr	r3, [r3, #0]
 80304b0:	4a19      	ldr	r2, [pc, #100]	; (8030518 <HAL_DMA_IRQHandler+0x1ec>)
 80304b2:	4293      	cmp	r3, r2
 80304b4:	d004      	beq.n	80304c0 <HAL_DMA_IRQHandler+0x194>
 80304b6:	687b      	ldr	r3, [r7, #4]
 80304b8:	681b      	ldr	r3, [r3, #0]
 80304ba:	4a18      	ldr	r2, [pc, #96]	; (803051c <HAL_DMA_IRQHandler+0x1f0>)
 80304bc:	4293      	cmp	r3, r2
 80304be:	d12f      	bne.n	8030520 <HAL_DMA_IRQHandler+0x1f4>
 80304c0:	687b      	ldr	r3, [r7, #4]
 80304c2:	681b      	ldr	r3, [r3, #0]
 80304c4:	681b      	ldr	r3, [r3, #0]
 80304c6:	f003 0304 	and.w	r3, r3, #4
 80304ca:	2b00      	cmp	r3, #0
 80304cc:	bf14      	ite	ne
 80304ce:	2301      	movne	r3, #1
 80304d0:	2300      	moveq	r3, #0
 80304d2:	b2db      	uxtb	r3, r3
 80304d4:	e02e      	b.n	8030534 <HAL_DMA_IRQHandler+0x208>
 80304d6:	bf00      	nop
 80304d8:	24000004 	.word	0x24000004
 80304dc:	1b4e81b5 	.word	0x1b4e81b5
 80304e0:	40020010 	.word	0x40020010
 80304e4:	40020028 	.word	0x40020028
 80304e8:	40020040 	.word	0x40020040
 80304ec:	40020058 	.word	0x40020058
 80304f0:	40020070 	.word	0x40020070
 80304f4:	40020088 	.word	0x40020088
 80304f8:	400200a0 	.word	0x400200a0
 80304fc:	400200b8 	.word	0x400200b8
 8030500:	40020410 	.word	0x40020410
 8030504:	40020428 	.word	0x40020428
 8030508:	40020440 	.word	0x40020440
 803050c:	40020458 	.word	0x40020458
 8030510:	40020470 	.word	0x40020470
 8030514:	40020488 	.word	0x40020488
 8030518:	400204a0 	.word	0x400204a0
 803051c:	400204b8 	.word	0x400204b8
 8030520:	687b      	ldr	r3, [r7, #4]
 8030522:	681b      	ldr	r3, [r3, #0]
 8030524:	681b      	ldr	r3, [r3, #0]
 8030526:	f003 0308 	and.w	r3, r3, #8
 803052a:	2b00      	cmp	r3, #0
 803052c:	bf14      	ite	ne
 803052e:	2301      	movne	r3, #1
 8030530:	2300      	moveq	r3, #0
 8030532:	b2db      	uxtb	r3, r3
 8030534:	2b00      	cmp	r3, #0
 8030536:	d015      	beq.n	8030564 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8030538:	687b      	ldr	r3, [r7, #4]
 803053a:	681b      	ldr	r3, [r3, #0]
 803053c:	681a      	ldr	r2, [r3, #0]
 803053e:	687b      	ldr	r3, [r7, #4]
 8030540:	681b      	ldr	r3, [r3, #0]
 8030542:	f022 0204 	bic.w	r2, r2, #4
 8030546:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8030548:	687b      	ldr	r3, [r7, #4]
 803054a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803054c:	f003 031f 	and.w	r3, r3, #31
 8030550:	2208      	movs	r2, #8
 8030552:	409a      	lsls	r2, r3
 8030554:	6a3b      	ldr	r3, [r7, #32]
 8030556:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8030558:	687b      	ldr	r3, [r7, #4]
 803055a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803055c:	f043 0201 	orr.w	r2, r3, #1
 8030560:	687b      	ldr	r3, [r7, #4]
 8030562:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8030564:	687b      	ldr	r3, [r7, #4]
 8030566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030568:	f003 031f 	and.w	r3, r3, #31
 803056c:	69ba      	ldr	r2, [r7, #24]
 803056e:	fa22 f303 	lsr.w	r3, r2, r3
 8030572:	f003 0301 	and.w	r3, r3, #1
 8030576:	2b00      	cmp	r3, #0
 8030578:	d06e      	beq.n	8030658 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 803057a:	687b      	ldr	r3, [r7, #4]
 803057c:	681b      	ldr	r3, [r3, #0]
 803057e:	4a69      	ldr	r2, [pc, #420]	; (8030724 <HAL_DMA_IRQHandler+0x3f8>)
 8030580:	4293      	cmp	r3, r2
 8030582:	d04a      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 8030584:	687b      	ldr	r3, [r7, #4]
 8030586:	681b      	ldr	r3, [r3, #0]
 8030588:	4a67      	ldr	r2, [pc, #412]	; (8030728 <HAL_DMA_IRQHandler+0x3fc>)
 803058a:	4293      	cmp	r3, r2
 803058c:	d045      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 803058e:	687b      	ldr	r3, [r7, #4]
 8030590:	681b      	ldr	r3, [r3, #0]
 8030592:	4a66      	ldr	r2, [pc, #408]	; (803072c <HAL_DMA_IRQHandler+0x400>)
 8030594:	4293      	cmp	r3, r2
 8030596:	d040      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 8030598:	687b      	ldr	r3, [r7, #4]
 803059a:	681b      	ldr	r3, [r3, #0]
 803059c:	4a64      	ldr	r2, [pc, #400]	; (8030730 <HAL_DMA_IRQHandler+0x404>)
 803059e:	4293      	cmp	r3, r2
 80305a0:	d03b      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305a2:	687b      	ldr	r3, [r7, #4]
 80305a4:	681b      	ldr	r3, [r3, #0]
 80305a6:	4a63      	ldr	r2, [pc, #396]	; (8030734 <HAL_DMA_IRQHandler+0x408>)
 80305a8:	4293      	cmp	r3, r2
 80305aa:	d036      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305ac:	687b      	ldr	r3, [r7, #4]
 80305ae:	681b      	ldr	r3, [r3, #0]
 80305b0:	4a61      	ldr	r2, [pc, #388]	; (8030738 <HAL_DMA_IRQHandler+0x40c>)
 80305b2:	4293      	cmp	r3, r2
 80305b4:	d031      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305b6:	687b      	ldr	r3, [r7, #4]
 80305b8:	681b      	ldr	r3, [r3, #0]
 80305ba:	4a60      	ldr	r2, [pc, #384]	; (803073c <HAL_DMA_IRQHandler+0x410>)
 80305bc:	4293      	cmp	r3, r2
 80305be:	d02c      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305c0:	687b      	ldr	r3, [r7, #4]
 80305c2:	681b      	ldr	r3, [r3, #0]
 80305c4:	4a5e      	ldr	r2, [pc, #376]	; (8030740 <HAL_DMA_IRQHandler+0x414>)
 80305c6:	4293      	cmp	r3, r2
 80305c8:	d027      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305ca:	687b      	ldr	r3, [r7, #4]
 80305cc:	681b      	ldr	r3, [r3, #0]
 80305ce:	4a5d      	ldr	r2, [pc, #372]	; (8030744 <HAL_DMA_IRQHandler+0x418>)
 80305d0:	4293      	cmp	r3, r2
 80305d2:	d022      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305d4:	687b      	ldr	r3, [r7, #4]
 80305d6:	681b      	ldr	r3, [r3, #0]
 80305d8:	4a5b      	ldr	r2, [pc, #364]	; (8030748 <HAL_DMA_IRQHandler+0x41c>)
 80305da:	4293      	cmp	r3, r2
 80305dc:	d01d      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305de:	687b      	ldr	r3, [r7, #4]
 80305e0:	681b      	ldr	r3, [r3, #0]
 80305e2:	4a5a      	ldr	r2, [pc, #360]	; (803074c <HAL_DMA_IRQHandler+0x420>)
 80305e4:	4293      	cmp	r3, r2
 80305e6:	d018      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305e8:	687b      	ldr	r3, [r7, #4]
 80305ea:	681b      	ldr	r3, [r3, #0]
 80305ec:	4a58      	ldr	r2, [pc, #352]	; (8030750 <HAL_DMA_IRQHandler+0x424>)
 80305ee:	4293      	cmp	r3, r2
 80305f0:	d013      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305f2:	687b      	ldr	r3, [r7, #4]
 80305f4:	681b      	ldr	r3, [r3, #0]
 80305f6:	4a57      	ldr	r2, [pc, #348]	; (8030754 <HAL_DMA_IRQHandler+0x428>)
 80305f8:	4293      	cmp	r3, r2
 80305fa:	d00e      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 80305fc:	687b      	ldr	r3, [r7, #4]
 80305fe:	681b      	ldr	r3, [r3, #0]
 8030600:	4a55      	ldr	r2, [pc, #340]	; (8030758 <HAL_DMA_IRQHandler+0x42c>)
 8030602:	4293      	cmp	r3, r2
 8030604:	d009      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 8030606:	687b      	ldr	r3, [r7, #4]
 8030608:	681b      	ldr	r3, [r3, #0]
 803060a:	4a54      	ldr	r2, [pc, #336]	; (803075c <HAL_DMA_IRQHandler+0x430>)
 803060c:	4293      	cmp	r3, r2
 803060e:	d004      	beq.n	803061a <HAL_DMA_IRQHandler+0x2ee>
 8030610:	687b      	ldr	r3, [r7, #4]
 8030612:	681b      	ldr	r3, [r3, #0]
 8030614:	4a52      	ldr	r2, [pc, #328]	; (8030760 <HAL_DMA_IRQHandler+0x434>)
 8030616:	4293      	cmp	r3, r2
 8030618:	d10a      	bne.n	8030630 <HAL_DMA_IRQHandler+0x304>
 803061a:	687b      	ldr	r3, [r7, #4]
 803061c:	681b      	ldr	r3, [r3, #0]
 803061e:	695b      	ldr	r3, [r3, #20]
 8030620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8030624:	2b00      	cmp	r3, #0
 8030626:	bf14      	ite	ne
 8030628:	2301      	movne	r3, #1
 803062a:	2300      	moveq	r3, #0
 803062c:	b2db      	uxtb	r3, r3
 803062e:	e003      	b.n	8030638 <HAL_DMA_IRQHandler+0x30c>
 8030630:	687b      	ldr	r3, [r7, #4]
 8030632:	681b      	ldr	r3, [r3, #0]
 8030634:	681b      	ldr	r3, [r3, #0]
 8030636:	2300      	movs	r3, #0
 8030638:	2b00      	cmp	r3, #0
 803063a:	d00d      	beq.n	8030658 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 803063c:	687b      	ldr	r3, [r7, #4]
 803063e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030640:	f003 031f 	and.w	r3, r3, #31
 8030644:	2201      	movs	r2, #1
 8030646:	409a      	lsls	r2, r3
 8030648:	6a3b      	ldr	r3, [r7, #32]
 803064a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 803064c:	687b      	ldr	r3, [r7, #4]
 803064e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8030650:	f043 0202 	orr.w	r2, r3, #2
 8030654:	687b      	ldr	r3, [r7, #4]
 8030656:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8030658:	687b      	ldr	r3, [r7, #4]
 803065a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803065c:	f003 031f 	and.w	r3, r3, #31
 8030660:	2204      	movs	r2, #4
 8030662:	409a      	lsls	r2, r3
 8030664:	69bb      	ldr	r3, [r7, #24]
 8030666:	4013      	ands	r3, r2
 8030668:	2b00      	cmp	r3, #0
 803066a:	f000 808f 	beq.w	803078c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 803066e:	687b      	ldr	r3, [r7, #4]
 8030670:	681b      	ldr	r3, [r3, #0]
 8030672:	4a2c      	ldr	r2, [pc, #176]	; (8030724 <HAL_DMA_IRQHandler+0x3f8>)
 8030674:	4293      	cmp	r3, r2
 8030676:	d04a      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 8030678:	687b      	ldr	r3, [r7, #4]
 803067a:	681b      	ldr	r3, [r3, #0]
 803067c:	4a2a      	ldr	r2, [pc, #168]	; (8030728 <HAL_DMA_IRQHandler+0x3fc>)
 803067e:	4293      	cmp	r3, r2
 8030680:	d045      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 8030682:	687b      	ldr	r3, [r7, #4]
 8030684:	681b      	ldr	r3, [r3, #0]
 8030686:	4a29      	ldr	r2, [pc, #164]	; (803072c <HAL_DMA_IRQHandler+0x400>)
 8030688:	4293      	cmp	r3, r2
 803068a:	d040      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 803068c:	687b      	ldr	r3, [r7, #4]
 803068e:	681b      	ldr	r3, [r3, #0]
 8030690:	4a27      	ldr	r2, [pc, #156]	; (8030730 <HAL_DMA_IRQHandler+0x404>)
 8030692:	4293      	cmp	r3, r2
 8030694:	d03b      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 8030696:	687b      	ldr	r3, [r7, #4]
 8030698:	681b      	ldr	r3, [r3, #0]
 803069a:	4a26      	ldr	r2, [pc, #152]	; (8030734 <HAL_DMA_IRQHandler+0x408>)
 803069c:	4293      	cmp	r3, r2
 803069e:	d036      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306a0:	687b      	ldr	r3, [r7, #4]
 80306a2:	681b      	ldr	r3, [r3, #0]
 80306a4:	4a24      	ldr	r2, [pc, #144]	; (8030738 <HAL_DMA_IRQHandler+0x40c>)
 80306a6:	4293      	cmp	r3, r2
 80306a8:	d031      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306aa:	687b      	ldr	r3, [r7, #4]
 80306ac:	681b      	ldr	r3, [r3, #0]
 80306ae:	4a23      	ldr	r2, [pc, #140]	; (803073c <HAL_DMA_IRQHandler+0x410>)
 80306b0:	4293      	cmp	r3, r2
 80306b2:	d02c      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306b4:	687b      	ldr	r3, [r7, #4]
 80306b6:	681b      	ldr	r3, [r3, #0]
 80306b8:	4a21      	ldr	r2, [pc, #132]	; (8030740 <HAL_DMA_IRQHandler+0x414>)
 80306ba:	4293      	cmp	r3, r2
 80306bc:	d027      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306be:	687b      	ldr	r3, [r7, #4]
 80306c0:	681b      	ldr	r3, [r3, #0]
 80306c2:	4a20      	ldr	r2, [pc, #128]	; (8030744 <HAL_DMA_IRQHandler+0x418>)
 80306c4:	4293      	cmp	r3, r2
 80306c6:	d022      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306c8:	687b      	ldr	r3, [r7, #4]
 80306ca:	681b      	ldr	r3, [r3, #0]
 80306cc:	4a1e      	ldr	r2, [pc, #120]	; (8030748 <HAL_DMA_IRQHandler+0x41c>)
 80306ce:	4293      	cmp	r3, r2
 80306d0:	d01d      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306d2:	687b      	ldr	r3, [r7, #4]
 80306d4:	681b      	ldr	r3, [r3, #0]
 80306d6:	4a1d      	ldr	r2, [pc, #116]	; (803074c <HAL_DMA_IRQHandler+0x420>)
 80306d8:	4293      	cmp	r3, r2
 80306da:	d018      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306dc:	687b      	ldr	r3, [r7, #4]
 80306de:	681b      	ldr	r3, [r3, #0]
 80306e0:	4a1b      	ldr	r2, [pc, #108]	; (8030750 <HAL_DMA_IRQHandler+0x424>)
 80306e2:	4293      	cmp	r3, r2
 80306e4:	d013      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306e6:	687b      	ldr	r3, [r7, #4]
 80306e8:	681b      	ldr	r3, [r3, #0]
 80306ea:	4a1a      	ldr	r2, [pc, #104]	; (8030754 <HAL_DMA_IRQHandler+0x428>)
 80306ec:	4293      	cmp	r3, r2
 80306ee:	d00e      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306f0:	687b      	ldr	r3, [r7, #4]
 80306f2:	681b      	ldr	r3, [r3, #0]
 80306f4:	4a18      	ldr	r2, [pc, #96]	; (8030758 <HAL_DMA_IRQHandler+0x42c>)
 80306f6:	4293      	cmp	r3, r2
 80306f8:	d009      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 80306fa:	687b      	ldr	r3, [r7, #4]
 80306fc:	681b      	ldr	r3, [r3, #0]
 80306fe:	4a17      	ldr	r2, [pc, #92]	; (803075c <HAL_DMA_IRQHandler+0x430>)
 8030700:	4293      	cmp	r3, r2
 8030702:	d004      	beq.n	803070e <HAL_DMA_IRQHandler+0x3e2>
 8030704:	687b      	ldr	r3, [r7, #4]
 8030706:	681b      	ldr	r3, [r3, #0]
 8030708:	4a15      	ldr	r2, [pc, #84]	; (8030760 <HAL_DMA_IRQHandler+0x434>)
 803070a:	4293      	cmp	r3, r2
 803070c:	d12a      	bne.n	8030764 <HAL_DMA_IRQHandler+0x438>
 803070e:	687b      	ldr	r3, [r7, #4]
 8030710:	681b      	ldr	r3, [r3, #0]
 8030712:	681b      	ldr	r3, [r3, #0]
 8030714:	f003 0302 	and.w	r3, r3, #2
 8030718:	2b00      	cmp	r3, #0
 803071a:	bf14      	ite	ne
 803071c:	2301      	movne	r3, #1
 803071e:	2300      	moveq	r3, #0
 8030720:	b2db      	uxtb	r3, r3
 8030722:	e023      	b.n	803076c <HAL_DMA_IRQHandler+0x440>
 8030724:	40020010 	.word	0x40020010
 8030728:	40020028 	.word	0x40020028
 803072c:	40020040 	.word	0x40020040
 8030730:	40020058 	.word	0x40020058
 8030734:	40020070 	.word	0x40020070
 8030738:	40020088 	.word	0x40020088
 803073c:	400200a0 	.word	0x400200a0
 8030740:	400200b8 	.word	0x400200b8
 8030744:	40020410 	.word	0x40020410
 8030748:	40020428 	.word	0x40020428
 803074c:	40020440 	.word	0x40020440
 8030750:	40020458 	.word	0x40020458
 8030754:	40020470 	.word	0x40020470
 8030758:	40020488 	.word	0x40020488
 803075c:	400204a0 	.word	0x400204a0
 8030760:	400204b8 	.word	0x400204b8
 8030764:	687b      	ldr	r3, [r7, #4]
 8030766:	681b      	ldr	r3, [r3, #0]
 8030768:	681b      	ldr	r3, [r3, #0]
 803076a:	2300      	movs	r3, #0
 803076c:	2b00      	cmp	r3, #0
 803076e:	d00d      	beq.n	803078c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8030770:	687b      	ldr	r3, [r7, #4]
 8030772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030774:	f003 031f 	and.w	r3, r3, #31
 8030778:	2204      	movs	r2, #4
 803077a:	409a      	lsls	r2, r3
 803077c:	6a3b      	ldr	r3, [r7, #32]
 803077e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8030780:	687b      	ldr	r3, [r7, #4]
 8030782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8030784:	f043 0204 	orr.w	r2, r3, #4
 8030788:	687b      	ldr	r3, [r7, #4]
 803078a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 803078c:	687b      	ldr	r3, [r7, #4]
 803078e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030790:	f003 031f 	and.w	r3, r3, #31
 8030794:	2210      	movs	r2, #16
 8030796:	409a      	lsls	r2, r3
 8030798:	69bb      	ldr	r3, [r7, #24]
 803079a:	4013      	ands	r3, r2
 803079c:	2b00      	cmp	r3, #0
 803079e:	f000 80a6 	beq.w	80308ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80307a2:	687b      	ldr	r3, [r7, #4]
 80307a4:	681b      	ldr	r3, [r3, #0]
 80307a6:	4a85      	ldr	r2, [pc, #532]	; (80309bc <HAL_DMA_IRQHandler+0x690>)
 80307a8:	4293      	cmp	r3, r2
 80307aa:	d04a      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307ac:	687b      	ldr	r3, [r7, #4]
 80307ae:	681b      	ldr	r3, [r3, #0]
 80307b0:	4a83      	ldr	r2, [pc, #524]	; (80309c0 <HAL_DMA_IRQHandler+0x694>)
 80307b2:	4293      	cmp	r3, r2
 80307b4:	d045      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307b6:	687b      	ldr	r3, [r7, #4]
 80307b8:	681b      	ldr	r3, [r3, #0]
 80307ba:	4a82      	ldr	r2, [pc, #520]	; (80309c4 <HAL_DMA_IRQHandler+0x698>)
 80307bc:	4293      	cmp	r3, r2
 80307be:	d040      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307c0:	687b      	ldr	r3, [r7, #4]
 80307c2:	681b      	ldr	r3, [r3, #0]
 80307c4:	4a80      	ldr	r2, [pc, #512]	; (80309c8 <HAL_DMA_IRQHandler+0x69c>)
 80307c6:	4293      	cmp	r3, r2
 80307c8:	d03b      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307ca:	687b      	ldr	r3, [r7, #4]
 80307cc:	681b      	ldr	r3, [r3, #0]
 80307ce:	4a7f      	ldr	r2, [pc, #508]	; (80309cc <HAL_DMA_IRQHandler+0x6a0>)
 80307d0:	4293      	cmp	r3, r2
 80307d2:	d036      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307d4:	687b      	ldr	r3, [r7, #4]
 80307d6:	681b      	ldr	r3, [r3, #0]
 80307d8:	4a7d      	ldr	r2, [pc, #500]	; (80309d0 <HAL_DMA_IRQHandler+0x6a4>)
 80307da:	4293      	cmp	r3, r2
 80307dc:	d031      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307de:	687b      	ldr	r3, [r7, #4]
 80307e0:	681b      	ldr	r3, [r3, #0]
 80307e2:	4a7c      	ldr	r2, [pc, #496]	; (80309d4 <HAL_DMA_IRQHandler+0x6a8>)
 80307e4:	4293      	cmp	r3, r2
 80307e6:	d02c      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307e8:	687b      	ldr	r3, [r7, #4]
 80307ea:	681b      	ldr	r3, [r3, #0]
 80307ec:	4a7a      	ldr	r2, [pc, #488]	; (80309d8 <HAL_DMA_IRQHandler+0x6ac>)
 80307ee:	4293      	cmp	r3, r2
 80307f0:	d027      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307f2:	687b      	ldr	r3, [r7, #4]
 80307f4:	681b      	ldr	r3, [r3, #0]
 80307f6:	4a79      	ldr	r2, [pc, #484]	; (80309dc <HAL_DMA_IRQHandler+0x6b0>)
 80307f8:	4293      	cmp	r3, r2
 80307fa:	d022      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 80307fc:	687b      	ldr	r3, [r7, #4]
 80307fe:	681b      	ldr	r3, [r3, #0]
 8030800:	4a77      	ldr	r2, [pc, #476]	; (80309e0 <HAL_DMA_IRQHandler+0x6b4>)
 8030802:	4293      	cmp	r3, r2
 8030804:	d01d      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 8030806:	687b      	ldr	r3, [r7, #4]
 8030808:	681b      	ldr	r3, [r3, #0]
 803080a:	4a76      	ldr	r2, [pc, #472]	; (80309e4 <HAL_DMA_IRQHandler+0x6b8>)
 803080c:	4293      	cmp	r3, r2
 803080e:	d018      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 8030810:	687b      	ldr	r3, [r7, #4]
 8030812:	681b      	ldr	r3, [r3, #0]
 8030814:	4a74      	ldr	r2, [pc, #464]	; (80309e8 <HAL_DMA_IRQHandler+0x6bc>)
 8030816:	4293      	cmp	r3, r2
 8030818:	d013      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 803081a:	687b      	ldr	r3, [r7, #4]
 803081c:	681b      	ldr	r3, [r3, #0]
 803081e:	4a73      	ldr	r2, [pc, #460]	; (80309ec <HAL_DMA_IRQHandler+0x6c0>)
 8030820:	4293      	cmp	r3, r2
 8030822:	d00e      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 8030824:	687b      	ldr	r3, [r7, #4]
 8030826:	681b      	ldr	r3, [r3, #0]
 8030828:	4a71      	ldr	r2, [pc, #452]	; (80309f0 <HAL_DMA_IRQHandler+0x6c4>)
 803082a:	4293      	cmp	r3, r2
 803082c:	d009      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 803082e:	687b      	ldr	r3, [r7, #4]
 8030830:	681b      	ldr	r3, [r3, #0]
 8030832:	4a70      	ldr	r2, [pc, #448]	; (80309f4 <HAL_DMA_IRQHandler+0x6c8>)
 8030834:	4293      	cmp	r3, r2
 8030836:	d004      	beq.n	8030842 <HAL_DMA_IRQHandler+0x516>
 8030838:	687b      	ldr	r3, [r7, #4]
 803083a:	681b      	ldr	r3, [r3, #0]
 803083c:	4a6e      	ldr	r2, [pc, #440]	; (80309f8 <HAL_DMA_IRQHandler+0x6cc>)
 803083e:	4293      	cmp	r3, r2
 8030840:	d10a      	bne.n	8030858 <HAL_DMA_IRQHandler+0x52c>
 8030842:	687b      	ldr	r3, [r7, #4]
 8030844:	681b      	ldr	r3, [r3, #0]
 8030846:	681b      	ldr	r3, [r3, #0]
 8030848:	f003 0308 	and.w	r3, r3, #8
 803084c:	2b00      	cmp	r3, #0
 803084e:	bf14      	ite	ne
 8030850:	2301      	movne	r3, #1
 8030852:	2300      	moveq	r3, #0
 8030854:	b2db      	uxtb	r3, r3
 8030856:	e009      	b.n	803086c <HAL_DMA_IRQHandler+0x540>
 8030858:	687b      	ldr	r3, [r7, #4]
 803085a:	681b      	ldr	r3, [r3, #0]
 803085c:	681b      	ldr	r3, [r3, #0]
 803085e:	f003 0304 	and.w	r3, r3, #4
 8030862:	2b00      	cmp	r3, #0
 8030864:	bf14      	ite	ne
 8030866:	2301      	movne	r3, #1
 8030868:	2300      	moveq	r3, #0
 803086a:	b2db      	uxtb	r3, r3
 803086c:	2b00      	cmp	r3, #0
 803086e:	d03e      	beq.n	80308ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8030870:	687b      	ldr	r3, [r7, #4]
 8030872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030874:	f003 031f 	and.w	r3, r3, #31
 8030878:	2210      	movs	r2, #16
 803087a:	409a      	lsls	r2, r3
 803087c:	6a3b      	ldr	r3, [r7, #32]
 803087e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8030880:	687b      	ldr	r3, [r7, #4]
 8030882:	681b      	ldr	r3, [r3, #0]
 8030884:	681b      	ldr	r3, [r3, #0]
 8030886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 803088a:	2b00      	cmp	r3, #0
 803088c:	d018      	beq.n	80308c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 803088e:	687b      	ldr	r3, [r7, #4]
 8030890:	681b      	ldr	r3, [r3, #0]
 8030892:	681b      	ldr	r3, [r3, #0]
 8030894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8030898:	2b00      	cmp	r3, #0
 803089a:	d108      	bne.n	80308ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 803089c:	687b      	ldr	r3, [r7, #4]
 803089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80308a0:	2b00      	cmp	r3, #0
 80308a2:	d024      	beq.n	80308ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80308a4:	687b      	ldr	r3, [r7, #4]
 80308a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80308a8:	6878      	ldr	r0, [r7, #4]
 80308aa:	4798      	blx	r3
 80308ac:	e01f      	b.n	80308ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80308ae:	687b      	ldr	r3, [r7, #4]
 80308b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80308b2:	2b00      	cmp	r3, #0
 80308b4:	d01b      	beq.n	80308ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80308b6:	687b      	ldr	r3, [r7, #4]
 80308b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80308ba:	6878      	ldr	r0, [r7, #4]
 80308bc:	4798      	blx	r3
 80308be:	e016      	b.n	80308ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80308c0:	687b      	ldr	r3, [r7, #4]
 80308c2:	681b      	ldr	r3, [r3, #0]
 80308c4:	681b      	ldr	r3, [r3, #0]
 80308c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80308ca:	2b00      	cmp	r3, #0
 80308cc:	d107      	bne.n	80308de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80308ce:	687b      	ldr	r3, [r7, #4]
 80308d0:	681b      	ldr	r3, [r3, #0]
 80308d2:	681a      	ldr	r2, [r3, #0]
 80308d4:	687b      	ldr	r3, [r7, #4]
 80308d6:	681b      	ldr	r3, [r3, #0]
 80308d8:	f022 0208 	bic.w	r2, r2, #8
 80308dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80308de:	687b      	ldr	r3, [r7, #4]
 80308e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80308e2:	2b00      	cmp	r3, #0
 80308e4:	d003      	beq.n	80308ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80308e6:	687b      	ldr	r3, [r7, #4]
 80308e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80308ea:	6878      	ldr	r0, [r7, #4]
 80308ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80308ee:	687b      	ldr	r3, [r7, #4]
 80308f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80308f2:	f003 031f 	and.w	r3, r3, #31
 80308f6:	2220      	movs	r2, #32
 80308f8:	409a      	lsls	r2, r3
 80308fa:	69bb      	ldr	r3, [r7, #24]
 80308fc:	4013      	ands	r3, r2
 80308fe:	2b00      	cmp	r3, #0
 8030900:	f000 8110 	beq.w	8030b24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8030904:	687b      	ldr	r3, [r7, #4]
 8030906:	681b      	ldr	r3, [r3, #0]
 8030908:	4a2c      	ldr	r2, [pc, #176]	; (80309bc <HAL_DMA_IRQHandler+0x690>)
 803090a:	4293      	cmp	r3, r2
 803090c:	d04a      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 803090e:	687b      	ldr	r3, [r7, #4]
 8030910:	681b      	ldr	r3, [r3, #0]
 8030912:	4a2b      	ldr	r2, [pc, #172]	; (80309c0 <HAL_DMA_IRQHandler+0x694>)
 8030914:	4293      	cmp	r3, r2
 8030916:	d045      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030918:	687b      	ldr	r3, [r7, #4]
 803091a:	681b      	ldr	r3, [r3, #0]
 803091c:	4a29      	ldr	r2, [pc, #164]	; (80309c4 <HAL_DMA_IRQHandler+0x698>)
 803091e:	4293      	cmp	r3, r2
 8030920:	d040      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030922:	687b      	ldr	r3, [r7, #4]
 8030924:	681b      	ldr	r3, [r3, #0]
 8030926:	4a28      	ldr	r2, [pc, #160]	; (80309c8 <HAL_DMA_IRQHandler+0x69c>)
 8030928:	4293      	cmp	r3, r2
 803092a:	d03b      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 803092c:	687b      	ldr	r3, [r7, #4]
 803092e:	681b      	ldr	r3, [r3, #0]
 8030930:	4a26      	ldr	r2, [pc, #152]	; (80309cc <HAL_DMA_IRQHandler+0x6a0>)
 8030932:	4293      	cmp	r3, r2
 8030934:	d036      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030936:	687b      	ldr	r3, [r7, #4]
 8030938:	681b      	ldr	r3, [r3, #0]
 803093a:	4a25      	ldr	r2, [pc, #148]	; (80309d0 <HAL_DMA_IRQHandler+0x6a4>)
 803093c:	4293      	cmp	r3, r2
 803093e:	d031      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030940:	687b      	ldr	r3, [r7, #4]
 8030942:	681b      	ldr	r3, [r3, #0]
 8030944:	4a23      	ldr	r2, [pc, #140]	; (80309d4 <HAL_DMA_IRQHandler+0x6a8>)
 8030946:	4293      	cmp	r3, r2
 8030948:	d02c      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 803094a:	687b      	ldr	r3, [r7, #4]
 803094c:	681b      	ldr	r3, [r3, #0]
 803094e:	4a22      	ldr	r2, [pc, #136]	; (80309d8 <HAL_DMA_IRQHandler+0x6ac>)
 8030950:	4293      	cmp	r3, r2
 8030952:	d027      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030954:	687b      	ldr	r3, [r7, #4]
 8030956:	681b      	ldr	r3, [r3, #0]
 8030958:	4a20      	ldr	r2, [pc, #128]	; (80309dc <HAL_DMA_IRQHandler+0x6b0>)
 803095a:	4293      	cmp	r3, r2
 803095c:	d022      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 803095e:	687b      	ldr	r3, [r7, #4]
 8030960:	681b      	ldr	r3, [r3, #0]
 8030962:	4a1f      	ldr	r2, [pc, #124]	; (80309e0 <HAL_DMA_IRQHandler+0x6b4>)
 8030964:	4293      	cmp	r3, r2
 8030966:	d01d      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030968:	687b      	ldr	r3, [r7, #4]
 803096a:	681b      	ldr	r3, [r3, #0]
 803096c:	4a1d      	ldr	r2, [pc, #116]	; (80309e4 <HAL_DMA_IRQHandler+0x6b8>)
 803096e:	4293      	cmp	r3, r2
 8030970:	d018      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030972:	687b      	ldr	r3, [r7, #4]
 8030974:	681b      	ldr	r3, [r3, #0]
 8030976:	4a1c      	ldr	r2, [pc, #112]	; (80309e8 <HAL_DMA_IRQHandler+0x6bc>)
 8030978:	4293      	cmp	r3, r2
 803097a:	d013      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 803097c:	687b      	ldr	r3, [r7, #4]
 803097e:	681b      	ldr	r3, [r3, #0]
 8030980:	4a1a      	ldr	r2, [pc, #104]	; (80309ec <HAL_DMA_IRQHandler+0x6c0>)
 8030982:	4293      	cmp	r3, r2
 8030984:	d00e      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030986:	687b      	ldr	r3, [r7, #4]
 8030988:	681b      	ldr	r3, [r3, #0]
 803098a:	4a19      	ldr	r2, [pc, #100]	; (80309f0 <HAL_DMA_IRQHandler+0x6c4>)
 803098c:	4293      	cmp	r3, r2
 803098e:	d009      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 8030990:	687b      	ldr	r3, [r7, #4]
 8030992:	681b      	ldr	r3, [r3, #0]
 8030994:	4a17      	ldr	r2, [pc, #92]	; (80309f4 <HAL_DMA_IRQHandler+0x6c8>)
 8030996:	4293      	cmp	r3, r2
 8030998:	d004      	beq.n	80309a4 <HAL_DMA_IRQHandler+0x678>
 803099a:	687b      	ldr	r3, [r7, #4]
 803099c:	681b      	ldr	r3, [r3, #0]
 803099e:	4a16      	ldr	r2, [pc, #88]	; (80309f8 <HAL_DMA_IRQHandler+0x6cc>)
 80309a0:	4293      	cmp	r3, r2
 80309a2:	d12b      	bne.n	80309fc <HAL_DMA_IRQHandler+0x6d0>
 80309a4:	687b      	ldr	r3, [r7, #4]
 80309a6:	681b      	ldr	r3, [r3, #0]
 80309a8:	681b      	ldr	r3, [r3, #0]
 80309aa:	f003 0310 	and.w	r3, r3, #16
 80309ae:	2b00      	cmp	r3, #0
 80309b0:	bf14      	ite	ne
 80309b2:	2301      	movne	r3, #1
 80309b4:	2300      	moveq	r3, #0
 80309b6:	b2db      	uxtb	r3, r3
 80309b8:	e02a      	b.n	8030a10 <HAL_DMA_IRQHandler+0x6e4>
 80309ba:	bf00      	nop
 80309bc:	40020010 	.word	0x40020010
 80309c0:	40020028 	.word	0x40020028
 80309c4:	40020040 	.word	0x40020040
 80309c8:	40020058 	.word	0x40020058
 80309cc:	40020070 	.word	0x40020070
 80309d0:	40020088 	.word	0x40020088
 80309d4:	400200a0 	.word	0x400200a0
 80309d8:	400200b8 	.word	0x400200b8
 80309dc:	40020410 	.word	0x40020410
 80309e0:	40020428 	.word	0x40020428
 80309e4:	40020440 	.word	0x40020440
 80309e8:	40020458 	.word	0x40020458
 80309ec:	40020470 	.word	0x40020470
 80309f0:	40020488 	.word	0x40020488
 80309f4:	400204a0 	.word	0x400204a0
 80309f8:	400204b8 	.word	0x400204b8
 80309fc:	687b      	ldr	r3, [r7, #4]
 80309fe:	681b      	ldr	r3, [r3, #0]
 8030a00:	681b      	ldr	r3, [r3, #0]
 8030a02:	f003 0302 	and.w	r3, r3, #2
 8030a06:	2b00      	cmp	r3, #0
 8030a08:	bf14      	ite	ne
 8030a0a:	2301      	movne	r3, #1
 8030a0c:	2300      	moveq	r3, #0
 8030a0e:	b2db      	uxtb	r3, r3
 8030a10:	2b00      	cmp	r3, #0
 8030a12:	f000 8087 	beq.w	8030b24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8030a16:	687b      	ldr	r3, [r7, #4]
 8030a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030a1a:	f003 031f 	and.w	r3, r3, #31
 8030a1e:	2220      	movs	r2, #32
 8030a20:	409a      	lsls	r2, r3
 8030a22:	6a3b      	ldr	r3, [r7, #32]
 8030a24:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8030a26:	687b      	ldr	r3, [r7, #4]
 8030a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8030a2c:	b2db      	uxtb	r3, r3
 8030a2e:	2b04      	cmp	r3, #4
 8030a30:	d139      	bne.n	8030aa6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8030a32:	687b      	ldr	r3, [r7, #4]
 8030a34:	681b      	ldr	r3, [r3, #0]
 8030a36:	681a      	ldr	r2, [r3, #0]
 8030a38:	687b      	ldr	r3, [r7, #4]
 8030a3a:	681b      	ldr	r3, [r3, #0]
 8030a3c:	f022 0216 	bic.w	r2, r2, #22
 8030a40:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8030a42:	687b      	ldr	r3, [r7, #4]
 8030a44:	681b      	ldr	r3, [r3, #0]
 8030a46:	695a      	ldr	r2, [r3, #20]
 8030a48:	687b      	ldr	r3, [r7, #4]
 8030a4a:	681b      	ldr	r3, [r3, #0]
 8030a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8030a50:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8030a52:	687b      	ldr	r3, [r7, #4]
 8030a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030a56:	2b00      	cmp	r3, #0
 8030a58:	d103      	bne.n	8030a62 <HAL_DMA_IRQHandler+0x736>
 8030a5a:	687b      	ldr	r3, [r7, #4]
 8030a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8030a5e:	2b00      	cmp	r3, #0
 8030a60:	d007      	beq.n	8030a72 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8030a62:	687b      	ldr	r3, [r7, #4]
 8030a64:	681b      	ldr	r3, [r3, #0]
 8030a66:	681a      	ldr	r2, [r3, #0]
 8030a68:	687b      	ldr	r3, [r7, #4]
 8030a6a:	681b      	ldr	r3, [r3, #0]
 8030a6c:	f022 0208 	bic.w	r2, r2, #8
 8030a70:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8030a72:	687b      	ldr	r3, [r7, #4]
 8030a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030a76:	f003 031f 	and.w	r3, r3, #31
 8030a7a:	223f      	movs	r2, #63	; 0x3f
 8030a7c:	409a      	lsls	r2, r3
 8030a7e:	6a3b      	ldr	r3, [r7, #32]
 8030a80:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8030a82:	687b      	ldr	r3, [r7, #4]
 8030a84:	2201      	movs	r2, #1
 8030a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8030a8a:	687b      	ldr	r3, [r7, #4]
 8030a8c:	2200      	movs	r2, #0
 8030a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8030a92:	687b      	ldr	r3, [r7, #4]
 8030a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030a96:	2b00      	cmp	r3, #0
 8030a98:	f000 834a 	beq.w	8031130 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8030a9c:	687b      	ldr	r3, [r7, #4]
 8030a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030aa0:	6878      	ldr	r0, [r7, #4]
 8030aa2:	4798      	blx	r3
          }
          return;
 8030aa4:	e344      	b.n	8031130 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8030aa6:	687b      	ldr	r3, [r7, #4]
 8030aa8:	681b      	ldr	r3, [r3, #0]
 8030aaa:	681b      	ldr	r3, [r3, #0]
 8030aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8030ab0:	2b00      	cmp	r3, #0
 8030ab2:	d018      	beq.n	8030ae6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8030ab4:	687b      	ldr	r3, [r7, #4]
 8030ab6:	681b      	ldr	r3, [r3, #0]
 8030ab8:	681b      	ldr	r3, [r3, #0]
 8030aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8030abe:	2b00      	cmp	r3, #0
 8030ac0:	d108      	bne.n	8030ad4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8030ac2:	687b      	ldr	r3, [r7, #4]
 8030ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030ac6:	2b00      	cmp	r3, #0
 8030ac8:	d02c      	beq.n	8030b24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8030aca:	687b      	ldr	r3, [r7, #4]
 8030acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030ace:	6878      	ldr	r0, [r7, #4]
 8030ad0:	4798      	blx	r3
 8030ad2:	e027      	b.n	8030b24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8030ad4:	687b      	ldr	r3, [r7, #4]
 8030ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030ad8:	2b00      	cmp	r3, #0
 8030ada:	d023      	beq.n	8030b24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8030adc:	687b      	ldr	r3, [r7, #4]
 8030ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030ae0:	6878      	ldr	r0, [r7, #4]
 8030ae2:	4798      	blx	r3
 8030ae4:	e01e      	b.n	8030b24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8030ae6:	687b      	ldr	r3, [r7, #4]
 8030ae8:	681b      	ldr	r3, [r3, #0]
 8030aea:	681b      	ldr	r3, [r3, #0]
 8030aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030af0:	2b00      	cmp	r3, #0
 8030af2:	d10f      	bne.n	8030b14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8030af4:	687b      	ldr	r3, [r7, #4]
 8030af6:	681b      	ldr	r3, [r3, #0]
 8030af8:	681a      	ldr	r2, [r3, #0]
 8030afa:	687b      	ldr	r3, [r7, #4]
 8030afc:	681b      	ldr	r3, [r3, #0]
 8030afe:	f022 0210 	bic.w	r2, r2, #16
 8030b02:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8030b04:	687b      	ldr	r3, [r7, #4]
 8030b06:	2201      	movs	r2, #1
 8030b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8030b0c:	687b      	ldr	r3, [r7, #4]
 8030b0e:	2200      	movs	r2, #0
 8030b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8030b14:	687b      	ldr	r3, [r7, #4]
 8030b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030b18:	2b00      	cmp	r3, #0
 8030b1a:	d003      	beq.n	8030b24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8030b1c:	687b      	ldr	r3, [r7, #4]
 8030b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030b20:	6878      	ldr	r0, [r7, #4]
 8030b22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8030b24:	687b      	ldr	r3, [r7, #4]
 8030b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8030b28:	2b00      	cmp	r3, #0
 8030b2a:	f000 8306 	beq.w	803113a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8030b2e:	687b      	ldr	r3, [r7, #4]
 8030b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8030b32:	f003 0301 	and.w	r3, r3, #1
 8030b36:	2b00      	cmp	r3, #0
 8030b38:	f000 8088 	beq.w	8030c4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8030b3c:	687b      	ldr	r3, [r7, #4]
 8030b3e:	2204      	movs	r2, #4
 8030b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8030b44:	687b      	ldr	r3, [r7, #4]
 8030b46:	681b      	ldr	r3, [r3, #0]
 8030b48:	4a7a      	ldr	r2, [pc, #488]	; (8030d34 <HAL_DMA_IRQHandler+0xa08>)
 8030b4a:	4293      	cmp	r3, r2
 8030b4c:	d04a      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b4e:	687b      	ldr	r3, [r7, #4]
 8030b50:	681b      	ldr	r3, [r3, #0]
 8030b52:	4a79      	ldr	r2, [pc, #484]	; (8030d38 <HAL_DMA_IRQHandler+0xa0c>)
 8030b54:	4293      	cmp	r3, r2
 8030b56:	d045      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b58:	687b      	ldr	r3, [r7, #4]
 8030b5a:	681b      	ldr	r3, [r3, #0]
 8030b5c:	4a77      	ldr	r2, [pc, #476]	; (8030d3c <HAL_DMA_IRQHandler+0xa10>)
 8030b5e:	4293      	cmp	r3, r2
 8030b60:	d040      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b62:	687b      	ldr	r3, [r7, #4]
 8030b64:	681b      	ldr	r3, [r3, #0]
 8030b66:	4a76      	ldr	r2, [pc, #472]	; (8030d40 <HAL_DMA_IRQHandler+0xa14>)
 8030b68:	4293      	cmp	r3, r2
 8030b6a:	d03b      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b6c:	687b      	ldr	r3, [r7, #4]
 8030b6e:	681b      	ldr	r3, [r3, #0]
 8030b70:	4a74      	ldr	r2, [pc, #464]	; (8030d44 <HAL_DMA_IRQHandler+0xa18>)
 8030b72:	4293      	cmp	r3, r2
 8030b74:	d036      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b76:	687b      	ldr	r3, [r7, #4]
 8030b78:	681b      	ldr	r3, [r3, #0]
 8030b7a:	4a73      	ldr	r2, [pc, #460]	; (8030d48 <HAL_DMA_IRQHandler+0xa1c>)
 8030b7c:	4293      	cmp	r3, r2
 8030b7e:	d031      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b80:	687b      	ldr	r3, [r7, #4]
 8030b82:	681b      	ldr	r3, [r3, #0]
 8030b84:	4a71      	ldr	r2, [pc, #452]	; (8030d4c <HAL_DMA_IRQHandler+0xa20>)
 8030b86:	4293      	cmp	r3, r2
 8030b88:	d02c      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b8a:	687b      	ldr	r3, [r7, #4]
 8030b8c:	681b      	ldr	r3, [r3, #0]
 8030b8e:	4a70      	ldr	r2, [pc, #448]	; (8030d50 <HAL_DMA_IRQHandler+0xa24>)
 8030b90:	4293      	cmp	r3, r2
 8030b92:	d027      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b94:	687b      	ldr	r3, [r7, #4]
 8030b96:	681b      	ldr	r3, [r3, #0]
 8030b98:	4a6e      	ldr	r2, [pc, #440]	; (8030d54 <HAL_DMA_IRQHandler+0xa28>)
 8030b9a:	4293      	cmp	r3, r2
 8030b9c:	d022      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030b9e:	687b      	ldr	r3, [r7, #4]
 8030ba0:	681b      	ldr	r3, [r3, #0]
 8030ba2:	4a6d      	ldr	r2, [pc, #436]	; (8030d58 <HAL_DMA_IRQHandler+0xa2c>)
 8030ba4:	4293      	cmp	r3, r2
 8030ba6:	d01d      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030ba8:	687b      	ldr	r3, [r7, #4]
 8030baa:	681b      	ldr	r3, [r3, #0]
 8030bac:	4a6b      	ldr	r2, [pc, #428]	; (8030d5c <HAL_DMA_IRQHandler+0xa30>)
 8030bae:	4293      	cmp	r3, r2
 8030bb0:	d018      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030bb2:	687b      	ldr	r3, [r7, #4]
 8030bb4:	681b      	ldr	r3, [r3, #0]
 8030bb6:	4a6a      	ldr	r2, [pc, #424]	; (8030d60 <HAL_DMA_IRQHandler+0xa34>)
 8030bb8:	4293      	cmp	r3, r2
 8030bba:	d013      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030bbc:	687b      	ldr	r3, [r7, #4]
 8030bbe:	681b      	ldr	r3, [r3, #0]
 8030bc0:	4a68      	ldr	r2, [pc, #416]	; (8030d64 <HAL_DMA_IRQHandler+0xa38>)
 8030bc2:	4293      	cmp	r3, r2
 8030bc4:	d00e      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030bc6:	687b      	ldr	r3, [r7, #4]
 8030bc8:	681b      	ldr	r3, [r3, #0]
 8030bca:	4a67      	ldr	r2, [pc, #412]	; (8030d68 <HAL_DMA_IRQHandler+0xa3c>)
 8030bcc:	4293      	cmp	r3, r2
 8030bce:	d009      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030bd0:	687b      	ldr	r3, [r7, #4]
 8030bd2:	681b      	ldr	r3, [r3, #0]
 8030bd4:	4a65      	ldr	r2, [pc, #404]	; (8030d6c <HAL_DMA_IRQHandler+0xa40>)
 8030bd6:	4293      	cmp	r3, r2
 8030bd8:	d004      	beq.n	8030be4 <HAL_DMA_IRQHandler+0x8b8>
 8030bda:	687b      	ldr	r3, [r7, #4]
 8030bdc:	681b      	ldr	r3, [r3, #0]
 8030bde:	4a64      	ldr	r2, [pc, #400]	; (8030d70 <HAL_DMA_IRQHandler+0xa44>)
 8030be0:	4293      	cmp	r3, r2
 8030be2:	d108      	bne.n	8030bf6 <HAL_DMA_IRQHandler+0x8ca>
 8030be4:	687b      	ldr	r3, [r7, #4]
 8030be6:	681b      	ldr	r3, [r3, #0]
 8030be8:	681a      	ldr	r2, [r3, #0]
 8030bea:	687b      	ldr	r3, [r7, #4]
 8030bec:	681b      	ldr	r3, [r3, #0]
 8030bee:	f022 0201 	bic.w	r2, r2, #1
 8030bf2:	601a      	str	r2, [r3, #0]
 8030bf4:	e007      	b.n	8030c06 <HAL_DMA_IRQHandler+0x8da>
 8030bf6:	687b      	ldr	r3, [r7, #4]
 8030bf8:	681b      	ldr	r3, [r3, #0]
 8030bfa:	681a      	ldr	r2, [r3, #0]
 8030bfc:	687b      	ldr	r3, [r7, #4]
 8030bfe:	681b      	ldr	r3, [r3, #0]
 8030c00:	f022 0201 	bic.w	r2, r2, #1
 8030c04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8030c06:	68fb      	ldr	r3, [r7, #12]
 8030c08:	3301      	adds	r3, #1
 8030c0a:	60fb      	str	r3, [r7, #12]
 8030c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030c0e:	429a      	cmp	r2, r3
 8030c10:	d307      	bcc.n	8030c22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8030c12:	687b      	ldr	r3, [r7, #4]
 8030c14:	681b      	ldr	r3, [r3, #0]
 8030c16:	681b      	ldr	r3, [r3, #0]
 8030c18:	f003 0301 	and.w	r3, r3, #1
 8030c1c:	2b00      	cmp	r3, #0
 8030c1e:	d1f2      	bne.n	8030c06 <HAL_DMA_IRQHandler+0x8da>
 8030c20:	e000      	b.n	8030c24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8030c22:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8030c24:	687b      	ldr	r3, [r7, #4]
 8030c26:	681b      	ldr	r3, [r3, #0]
 8030c28:	681b      	ldr	r3, [r3, #0]
 8030c2a:	f003 0301 	and.w	r3, r3, #1
 8030c2e:	2b00      	cmp	r3, #0
 8030c30:	d004      	beq.n	8030c3c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8030c32:	687b      	ldr	r3, [r7, #4]
 8030c34:	2203      	movs	r2, #3
 8030c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8030c3a:	e003      	b.n	8030c44 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8030c3c:	687b      	ldr	r3, [r7, #4]
 8030c3e:	2201      	movs	r2, #1
 8030c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8030c44:	687b      	ldr	r3, [r7, #4]
 8030c46:	2200      	movs	r2, #0
 8030c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8030c4c:	687b      	ldr	r3, [r7, #4]
 8030c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8030c50:	2b00      	cmp	r3, #0
 8030c52:	f000 8272 	beq.w	803113a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8030c56:	687b      	ldr	r3, [r7, #4]
 8030c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8030c5a:	6878      	ldr	r0, [r7, #4]
 8030c5c:	4798      	blx	r3
 8030c5e:	e26c      	b.n	803113a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8030c60:	687b      	ldr	r3, [r7, #4]
 8030c62:	681b      	ldr	r3, [r3, #0]
 8030c64:	4a43      	ldr	r2, [pc, #268]	; (8030d74 <HAL_DMA_IRQHandler+0xa48>)
 8030c66:	4293      	cmp	r3, r2
 8030c68:	d022      	beq.n	8030cb0 <HAL_DMA_IRQHandler+0x984>
 8030c6a:	687b      	ldr	r3, [r7, #4]
 8030c6c:	681b      	ldr	r3, [r3, #0]
 8030c6e:	4a42      	ldr	r2, [pc, #264]	; (8030d78 <HAL_DMA_IRQHandler+0xa4c>)
 8030c70:	4293      	cmp	r3, r2
 8030c72:	d01d      	beq.n	8030cb0 <HAL_DMA_IRQHandler+0x984>
 8030c74:	687b      	ldr	r3, [r7, #4]
 8030c76:	681b      	ldr	r3, [r3, #0]
 8030c78:	4a40      	ldr	r2, [pc, #256]	; (8030d7c <HAL_DMA_IRQHandler+0xa50>)
 8030c7a:	4293      	cmp	r3, r2
 8030c7c:	d018      	beq.n	8030cb0 <HAL_DMA_IRQHandler+0x984>
 8030c7e:	687b      	ldr	r3, [r7, #4]
 8030c80:	681b      	ldr	r3, [r3, #0]
 8030c82:	4a3f      	ldr	r2, [pc, #252]	; (8030d80 <HAL_DMA_IRQHandler+0xa54>)
 8030c84:	4293      	cmp	r3, r2
 8030c86:	d013      	beq.n	8030cb0 <HAL_DMA_IRQHandler+0x984>
 8030c88:	687b      	ldr	r3, [r7, #4]
 8030c8a:	681b      	ldr	r3, [r3, #0]
 8030c8c:	4a3d      	ldr	r2, [pc, #244]	; (8030d84 <HAL_DMA_IRQHandler+0xa58>)
 8030c8e:	4293      	cmp	r3, r2
 8030c90:	d00e      	beq.n	8030cb0 <HAL_DMA_IRQHandler+0x984>
 8030c92:	687b      	ldr	r3, [r7, #4]
 8030c94:	681b      	ldr	r3, [r3, #0]
 8030c96:	4a3c      	ldr	r2, [pc, #240]	; (8030d88 <HAL_DMA_IRQHandler+0xa5c>)
 8030c98:	4293      	cmp	r3, r2
 8030c9a:	d009      	beq.n	8030cb0 <HAL_DMA_IRQHandler+0x984>
 8030c9c:	687b      	ldr	r3, [r7, #4]
 8030c9e:	681b      	ldr	r3, [r3, #0]
 8030ca0:	4a3a      	ldr	r2, [pc, #232]	; (8030d8c <HAL_DMA_IRQHandler+0xa60>)
 8030ca2:	4293      	cmp	r3, r2
 8030ca4:	d004      	beq.n	8030cb0 <HAL_DMA_IRQHandler+0x984>
 8030ca6:	687b      	ldr	r3, [r7, #4]
 8030ca8:	681b      	ldr	r3, [r3, #0]
 8030caa:	4a39      	ldr	r2, [pc, #228]	; (8030d90 <HAL_DMA_IRQHandler+0xa64>)
 8030cac:	4293      	cmp	r3, r2
 8030cae:	d101      	bne.n	8030cb4 <HAL_DMA_IRQHandler+0x988>
 8030cb0:	2301      	movs	r3, #1
 8030cb2:	e000      	b.n	8030cb6 <HAL_DMA_IRQHandler+0x98a>
 8030cb4:	2300      	movs	r3, #0
 8030cb6:	2b00      	cmp	r3, #0
 8030cb8:	f000 823f 	beq.w	803113a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8030cbc:	687b      	ldr	r3, [r7, #4]
 8030cbe:	681b      	ldr	r3, [r3, #0]
 8030cc0:	681b      	ldr	r3, [r3, #0]
 8030cc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8030cc4:	687b      	ldr	r3, [r7, #4]
 8030cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030cc8:	f003 031f 	and.w	r3, r3, #31
 8030ccc:	2204      	movs	r2, #4
 8030cce:	409a      	lsls	r2, r3
 8030cd0:	697b      	ldr	r3, [r7, #20]
 8030cd2:	4013      	ands	r3, r2
 8030cd4:	2b00      	cmp	r3, #0
 8030cd6:	f000 80cd 	beq.w	8030e74 <HAL_DMA_IRQHandler+0xb48>
 8030cda:	693b      	ldr	r3, [r7, #16]
 8030cdc:	f003 0304 	and.w	r3, r3, #4
 8030ce0:	2b00      	cmp	r3, #0
 8030ce2:	f000 80c7 	beq.w	8030e74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8030ce6:	687b      	ldr	r3, [r7, #4]
 8030ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030cea:	f003 031f 	and.w	r3, r3, #31
 8030cee:	2204      	movs	r2, #4
 8030cf0:	409a      	lsls	r2, r3
 8030cf2:	69fb      	ldr	r3, [r7, #28]
 8030cf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030cf6:	693b      	ldr	r3, [r7, #16]
 8030cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8030cfc:	2b00      	cmp	r3, #0
 8030cfe:	d049      	beq.n	8030d94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8030d00:	693b      	ldr	r3, [r7, #16]
 8030d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8030d06:	2b00      	cmp	r3, #0
 8030d08:	d109      	bne.n	8030d1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8030d0a:	687b      	ldr	r3, [r7, #4]
 8030d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8030d0e:	2b00      	cmp	r3, #0
 8030d10:	f000 8210 	beq.w	8031134 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8030d14:	687b      	ldr	r3, [r7, #4]
 8030d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8030d18:	6878      	ldr	r0, [r7, #4]
 8030d1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030d1c:	e20a      	b.n	8031134 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8030d1e:	687b      	ldr	r3, [r7, #4]
 8030d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030d22:	2b00      	cmp	r3, #0
 8030d24:	f000 8206 	beq.w	8031134 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8030d28:	687b      	ldr	r3, [r7, #4]
 8030d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030d2c:	6878      	ldr	r0, [r7, #4]
 8030d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030d30:	e200      	b.n	8031134 <HAL_DMA_IRQHandler+0xe08>
 8030d32:	bf00      	nop
 8030d34:	40020010 	.word	0x40020010
 8030d38:	40020028 	.word	0x40020028
 8030d3c:	40020040 	.word	0x40020040
 8030d40:	40020058 	.word	0x40020058
 8030d44:	40020070 	.word	0x40020070
 8030d48:	40020088 	.word	0x40020088
 8030d4c:	400200a0 	.word	0x400200a0
 8030d50:	400200b8 	.word	0x400200b8
 8030d54:	40020410 	.word	0x40020410
 8030d58:	40020428 	.word	0x40020428
 8030d5c:	40020440 	.word	0x40020440
 8030d60:	40020458 	.word	0x40020458
 8030d64:	40020470 	.word	0x40020470
 8030d68:	40020488 	.word	0x40020488
 8030d6c:	400204a0 	.word	0x400204a0
 8030d70:	400204b8 	.word	0x400204b8
 8030d74:	58025408 	.word	0x58025408
 8030d78:	5802541c 	.word	0x5802541c
 8030d7c:	58025430 	.word	0x58025430
 8030d80:	58025444 	.word	0x58025444
 8030d84:	58025458 	.word	0x58025458
 8030d88:	5802546c 	.word	0x5802546c
 8030d8c:	58025480 	.word	0x58025480
 8030d90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8030d94:	693b      	ldr	r3, [r7, #16]
 8030d96:	f003 0320 	and.w	r3, r3, #32
 8030d9a:	2b00      	cmp	r3, #0
 8030d9c:	d160      	bne.n	8030e60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8030d9e:	687b      	ldr	r3, [r7, #4]
 8030da0:	681b      	ldr	r3, [r3, #0]
 8030da2:	4a7f      	ldr	r2, [pc, #508]	; (8030fa0 <HAL_DMA_IRQHandler+0xc74>)
 8030da4:	4293      	cmp	r3, r2
 8030da6:	d04a      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030da8:	687b      	ldr	r3, [r7, #4]
 8030daa:	681b      	ldr	r3, [r3, #0]
 8030dac:	4a7d      	ldr	r2, [pc, #500]	; (8030fa4 <HAL_DMA_IRQHandler+0xc78>)
 8030dae:	4293      	cmp	r3, r2
 8030db0:	d045      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030db2:	687b      	ldr	r3, [r7, #4]
 8030db4:	681b      	ldr	r3, [r3, #0]
 8030db6:	4a7c      	ldr	r2, [pc, #496]	; (8030fa8 <HAL_DMA_IRQHandler+0xc7c>)
 8030db8:	4293      	cmp	r3, r2
 8030dba:	d040      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030dbc:	687b      	ldr	r3, [r7, #4]
 8030dbe:	681b      	ldr	r3, [r3, #0]
 8030dc0:	4a7a      	ldr	r2, [pc, #488]	; (8030fac <HAL_DMA_IRQHandler+0xc80>)
 8030dc2:	4293      	cmp	r3, r2
 8030dc4:	d03b      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030dc6:	687b      	ldr	r3, [r7, #4]
 8030dc8:	681b      	ldr	r3, [r3, #0]
 8030dca:	4a79      	ldr	r2, [pc, #484]	; (8030fb0 <HAL_DMA_IRQHandler+0xc84>)
 8030dcc:	4293      	cmp	r3, r2
 8030dce:	d036      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030dd0:	687b      	ldr	r3, [r7, #4]
 8030dd2:	681b      	ldr	r3, [r3, #0]
 8030dd4:	4a77      	ldr	r2, [pc, #476]	; (8030fb4 <HAL_DMA_IRQHandler+0xc88>)
 8030dd6:	4293      	cmp	r3, r2
 8030dd8:	d031      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030dda:	687b      	ldr	r3, [r7, #4]
 8030ddc:	681b      	ldr	r3, [r3, #0]
 8030dde:	4a76      	ldr	r2, [pc, #472]	; (8030fb8 <HAL_DMA_IRQHandler+0xc8c>)
 8030de0:	4293      	cmp	r3, r2
 8030de2:	d02c      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030de4:	687b      	ldr	r3, [r7, #4]
 8030de6:	681b      	ldr	r3, [r3, #0]
 8030de8:	4a74      	ldr	r2, [pc, #464]	; (8030fbc <HAL_DMA_IRQHandler+0xc90>)
 8030dea:	4293      	cmp	r3, r2
 8030dec:	d027      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030dee:	687b      	ldr	r3, [r7, #4]
 8030df0:	681b      	ldr	r3, [r3, #0]
 8030df2:	4a73      	ldr	r2, [pc, #460]	; (8030fc0 <HAL_DMA_IRQHandler+0xc94>)
 8030df4:	4293      	cmp	r3, r2
 8030df6:	d022      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030df8:	687b      	ldr	r3, [r7, #4]
 8030dfa:	681b      	ldr	r3, [r3, #0]
 8030dfc:	4a71      	ldr	r2, [pc, #452]	; (8030fc4 <HAL_DMA_IRQHandler+0xc98>)
 8030dfe:	4293      	cmp	r3, r2
 8030e00:	d01d      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030e02:	687b      	ldr	r3, [r7, #4]
 8030e04:	681b      	ldr	r3, [r3, #0]
 8030e06:	4a70      	ldr	r2, [pc, #448]	; (8030fc8 <HAL_DMA_IRQHandler+0xc9c>)
 8030e08:	4293      	cmp	r3, r2
 8030e0a:	d018      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030e0c:	687b      	ldr	r3, [r7, #4]
 8030e0e:	681b      	ldr	r3, [r3, #0]
 8030e10:	4a6e      	ldr	r2, [pc, #440]	; (8030fcc <HAL_DMA_IRQHandler+0xca0>)
 8030e12:	4293      	cmp	r3, r2
 8030e14:	d013      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030e16:	687b      	ldr	r3, [r7, #4]
 8030e18:	681b      	ldr	r3, [r3, #0]
 8030e1a:	4a6d      	ldr	r2, [pc, #436]	; (8030fd0 <HAL_DMA_IRQHandler+0xca4>)
 8030e1c:	4293      	cmp	r3, r2
 8030e1e:	d00e      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030e20:	687b      	ldr	r3, [r7, #4]
 8030e22:	681b      	ldr	r3, [r3, #0]
 8030e24:	4a6b      	ldr	r2, [pc, #428]	; (8030fd4 <HAL_DMA_IRQHandler+0xca8>)
 8030e26:	4293      	cmp	r3, r2
 8030e28:	d009      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030e2a:	687b      	ldr	r3, [r7, #4]
 8030e2c:	681b      	ldr	r3, [r3, #0]
 8030e2e:	4a6a      	ldr	r2, [pc, #424]	; (8030fd8 <HAL_DMA_IRQHandler+0xcac>)
 8030e30:	4293      	cmp	r3, r2
 8030e32:	d004      	beq.n	8030e3e <HAL_DMA_IRQHandler+0xb12>
 8030e34:	687b      	ldr	r3, [r7, #4]
 8030e36:	681b      	ldr	r3, [r3, #0]
 8030e38:	4a68      	ldr	r2, [pc, #416]	; (8030fdc <HAL_DMA_IRQHandler+0xcb0>)
 8030e3a:	4293      	cmp	r3, r2
 8030e3c:	d108      	bne.n	8030e50 <HAL_DMA_IRQHandler+0xb24>
 8030e3e:	687b      	ldr	r3, [r7, #4]
 8030e40:	681b      	ldr	r3, [r3, #0]
 8030e42:	681a      	ldr	r2, [r3, #0]
 8030e44:	687b      	ldr	r3, [r7, #4]
 8030e46:	681b      	ldr	r3, [r3, #0]
 8030e48:	f022 0208 	bic.w	r2, r2, #8
 8030e4c:	601a      	str	r2, [r3, #0]
 8030e4e:	e007      	b.n	8030e60 <HAL_DMA_IRQHandler+0xb34>
 8030e50:	687b      	ldr	r3, [r7, #4]
 8030e52:	681b      	ldr	r3, [r3, #0]
 8030e54:	681a      	ldr	r2, [r3, #0]
 8030e56:	687b      	ldr	r3, [r7, #4]
 8030e58:	681b      	ldr	r3, [r3, #0]
 8030e5a:	f022 0204 	bic.w	r2, r2, #4
 8030e5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8030e60:	687b      	ldr	r3, [r7, #4]
 8030e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030e64:	2b00      	cmp	r3, #0
 8030e66:	f000 8165 	beq.w	8031134 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8030e6a:	687b      	ldr	r3, [r7, #4]
 8030e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030e6e:	6878      	ldr	r0, [r7, #4]
 8030e70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030e72:	e15f      	b.n	8031134 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8030e74:	687b      	ldr	r3, [r7, #4]
 8030e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030e78:	f003 031f 	and.w	r3, r3, #31
 8030e7c:	2202      	movs	r2, #2
 8030e7e:	409a      	lsls	r2, r3
 8030e80:	697b      	ldr	r3, [r7, #20]
 8030e82:	4013      	ands	r3, r2
 8030e84:	2b00      	cmp	r3, #0
 8030e86:	f000 80c5 	beq.w	8031014 <HAL_DMA_IRQHandler+0xce8>
 8030e8a:	693b      	ldr	r3, [r7, #16]
 8030e8c:	f003 0302 	and.w	r3, r3, #2
 8030e90:	2b00      	cmp	r3, #0
 8030e92:	f000 80bf 	beq.w	8031014 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8030e96:	687b      	ldr	r3, [r7, #4]
 8030e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8030e9a:	f003 031f 	and.w	r3, r3, #31
 8030e9e:	2202      	movs	r2, #2
 8030ea0:	409a      	lsls	r2, r3
 8030ea2:	69fb      	ldr	r3, [r7, #28]
 8030ea4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030ea6:	693b      	ldr	r3, [r7, #16]
 8030ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8030eac:	2b00      	cmp	r3, #0
 8030eae:	d018      	beq.n	8030ee2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8030eb0:	693b      	ldr	r3, [r7, #16]
 8030eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8030eb6:	2b00      	cmp	r3, #0
 8030eb8:	d109      	bne.n	8030ece <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8030eba:	687b      	ldr	r3, [r7, #4]
 8030ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030ebe:	2b00      	cmp	r3, #0
 8030ec0:	f000 813a 	beq.w	8031138 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8030ec4:	687b      	ldr	r3, [r7, #4]
 8030ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8030ec8:	6878      	ldr	r0, [r7, #4]
 8030eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030ecc:	e134      	b.n	8031138 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8030ece:	687b      	ldr	r3, [r7, #4]
 8030ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030ed2:	2b00      	cmp	r3, #0
 8030ed4:	f000 8130 	beq.w	8031138 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8030ed8:	687b      	ldr	r3, [r7, #4]
 8030eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8030edc:	6878      	ldr	r0, [r7, #4]
 8030ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8030ee0:	e12a      	b.n	8031138 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8030ee2:	693b      	ldr	r3, [r7, #16]
 8030ee4:	f003 0320 	and.w	r3, r3, #32
 8030ee8:	2b00      	cmp	r3, #0
 8030eea:	f040 8089 	bne.w	8031000 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8030eee:	687b      	ldr	r3, [r7, #4]
 8030ef0:	681b      	ldr	r3, [r3, #0]
 8030ef2:	4a2b      	ldr	r2, [pc, #172]	; (8030fa0 <HAL_DMA_IRQHandler+0xc74>)
 8030ef4:	4293      	cmp	r3, r2
 8030ef6:	d04a      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030ef8:	687b      	ldr	r3, [r7, #4]
 8030efa:	681b      	ldr	r3, [r3, #0]
 8030efc:	4a29      	ldr	r2, [pc, #164]	; (8030fa4 <HAL_DMA_IRQHandler+0xc78>)
 8030efe:	4293      	cmp	r3, r2
 8030f00:	d045      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f02:	687b      	ldr	r3, [r7, #4]
 8030f04:	681b      	ldr	r3, [r3, #0]
 8030f06:	4a28      	ldr	r2, [pc, #160]	; (8030fa8 <HAL_DMA_IRQHandler+0xc7c>)
 8030f08:	4293      	cmp	r3, r2
 8030f0a:	d040      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f0c:	687b      	ldr	r3, [r7, #4]
 8030f0e:	681b      	ldr	r3, [r3, #0]
 8030f10:	4a26      	ldr	r2, [pc, #152]	; (8030fac <HAL_DMA_IRQHandler+0xc80>)
 8030f12:	4293      	cmp	r3, r2
 8030f14:	d03b      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f16:	687b      	ldr	r3, [r7, #4]
 8030f18:	681b      	ldr	r3, [r3, #0]
 8030f1a:	4a25      	ldr	r2, [pc, #148]	; (8030fb0 <HAL_DMA_IRQHandler+0xc84>)
 8030f1c:	4293      	cmp	r3, r2
 8030f1e:	d036      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f20:	687b      	ldr	r3, [r7, #4]
 8030f22:	681b      	ldr	r3, [r3, #0]
 8030f24:	4a23      	ldr	r2, [pc, #140]	; (8030fb4 <HAL_DMA_IRQHandler+0xc88>)
 8030f26:	4293      	cmp	r3, r2
 8030f28:	d031      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f2a:	687b      	ldr	r3, [r7, #4]
 8030f2c:	681b      	ldr	r3, [r3, #0]
 8030f2e:	4a22      	ldr	r2, [pc, #136]	; (8030fb8 <HAL_DMA_IRQHandler+0xc8c>)
 8030f30:	4293      	cmp	r3, r2
 8030f32:	d02c      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f34:	687b      	ldr	r3, [r7, #4]
 8030f36:	681b      	ldr	r3, [r3, #0]
 8030f38:	4a20      	ldr	r2, [pc, #128]	; (8030fbc <HAL_DMA_IRQHandler+0xc90>)
 8030f3a:	4293      	cmp	r3, r2
 8030f3c:	d027      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f3e:	687b      	ldr	r3, [r7, #4]
 8030f40:	681b      	ldr	r3, [r3, #0]
 8030f42:	4a1f      	ldr	r2, [pc, #124]	; (8030fc0 <HAL_DMA_IRQHandler+0xc94>)
 8030f44:	4293      	cmp	r3, r2
 8030f46:	d022      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f48:	687b      	ldr	r3, [r7, #4]
 8030f4a:	681b      	ldr	r3, [r3, #0]
 8030f4c:	4a1d      	ldr	r2, [pc, #116]	; (8030fc4 <HAL_DMA_IRQHandler+0xc98>)
 8030f4e:	4293      	cmp	r3, r2
 8030f50:	d01d      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f52:	687b      	ldr	r3, [r7, #4]
 8030f54:	681b      	ldr	r3, [r3, #0]
 8030f56:	4a1c      	ldr	r2, [pc, #112]	; (8030fc8 <HAL_DMA_IRQHandler+0xc9c>)
 8030f58:	4293      	cmp	r3, r2
 8030f5a:	d018      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f5c:	687b      	ldr	r3, [r7, #4]
 8030f5e:	681b      	ldr	r3, [r3, #0]
 8030f60:	4a1a      	ldr	r2, [pc, #104]	; (8030fcc <HAL_DMA_IRQHandler+0xca0>)
 8030f62:	4293      	cmp	r3, r2
 8030f64:	d013      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f66:	687b      	ldr	r3, [r7, #4]
 8030f68:	681b      	ldr	r3, [r3, #0]
 8030f6a:	4a19      	ldr	r2, [pc, #100]	; (8030fd0 <HAL_DMA_IRQHandler+0xca4>)
 8030f6c:	4293      	cmp	r3, r2
 8030f6e:	d00e      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f70:	687b      	ldr	r3, [r7, #4]
 8030f72:	681b      	ldr	r3, [r3, #0]
 8030f74:	4a17      	ldr	r2, [pc, #92]	; (8030fd4 <HAL_DMA_IRQHandler+0xca8>)
 8030f76:	4293      	cmp	r3, r2
 8030f78:	d009      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f7a:	687b      	ldr	r3, [r7, #4]
 8030f7c:	681b      	ldr	r3, [r3, #0]
 8030f7e:	4a16      	ldr	r2, [pc, #88]	; (8030fd8 <HAL_DMA_IRQHandler+0xcac>)
 8030f80:	4293      	cmp	r3, r2
 8030f82:	d004      	beq.n	8030f8e <HAL_DMA_IRQHandler+0xc62>
 8030f84:	687b      	ldr	r3, [r7, #4]
 8030f86:	681b      	ldr	r3, [r3, #0]
 8030f88:	4a14      	ldr	r2, [pc, #80]	; (8030fdc <HAL_DMA_IRQHandler+0xcb0>)
 8030f8a:	4293      	cmp	r3, r2
 8030f8c:	d128      	bne.n	8030fe0 <HAL_DMA_IRQHandler+0xcb4>
 8030f8e:	687b      	ldr	r3, [r7, #4]
 8030f90:	681b      	ldr	r3, [r3, #0]
 8030f92:	681a      	ldr	r2, [r3, #0]
 8030f94:	687b      	ldr	r3, [r7, #4]
 8030f96:	681b      	ldr	r3, [r3, #0]
 8030f98:	f022 0214 	bic.w	r2, r2, #20
 8030f9c:	601a      	str	r2, [r3, #0]
 8030f9e:	e027      	b.n	8030ff0 <HAL_DMA_IRQHandler+0xcc4>
 8030fa0:	40020010 	.word	0x40020010
 8030fa4:	40020028 	.word	0x40020028
 8030fa8:	40020040 	.word	0x40020040
 8030fac:	40020058 	.word	0x40020058
 8030fb0:	40020070 	.word	0x40020070
 8030fb4:	40020088 	.word	0x40020088
 8030fb8:	400200a0 	.word	0x400200a0
 8030fbc:	400200b8 	.word	0x400200b8
 8030fc0:	40020410 	.word	0x40020410
 8030fc4:	40020428 	.word	0x40020428
 8030fc8:	40020440 	.word	0x40020440
 8030fcc:	40020458 	.word	0x40020458
 8030fd0:	40020470 	.word	0x40020470
 8030fd4:	40020488 	.word	0x40020488
 8030fd8:	400204a0 	.word	0x400204a0
 8030fdc:	400204b8 	.word	0x400204b8
 8030fe0:	687b      	ldr	r3, [r7, #4]
 8030fe2:	681b      	ldr	r3, [r3, #0]
 8030fe4:	681a      	ldr	r2, [r3, #0]
 8030fe6:	687b      	ldr	r3, [r7, #4]
 8030fe8:	681b      	ldr	r3, [r3, #0]
 8030fea:	f022 020a 	bic.w	r2, r2, #10
 8030fee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8030ff0:	687b      	ldr	r3, [r7, #4]
 8030ff2:	2201      	movs	r2, #1
 8030ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8030ff8:	687b      	ldr	r3, [r7, #4]
 8030ffa:	2200      	movs	r2, #0
 8030ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8031000:	687b      	ldr	r3, [r7, #4]
 8031002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8031004:	2b00      	cmp	r3, #0
 8031006:	f000 8097 	beq.w	8031138 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 803100a:	687b      	ldr	r3, [r7, #4]
 803100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803100e:	6878      	ldr	r0, [r7, #4]
 8031010:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031012:	e091      	b.n	8031138 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8031014:	687b      	ldr	r3, [r7, #4]
 8031016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031018:	f003 031f 	and.w	r3, r3, #31
 803101c:	2208      	movs	r2, #8
 803101e:	409a      	lsls	r2, r3
 8031020:	697b      	ldr	r3, [r7, #20]
 8031022:	4013      	ands	r3, r2
 8031024:	2b00      	cmp	r3, #0
 8031026:	f000 8088 	beq.w	803113a <HAL_DMA_IRQHandler+0xe0e>
 803102a:	693b      	ldr	r3, [r7, #16]
 803102c:	f003 0308 	and.w	r3, r3, #8
 8031030:	2b00      	cmp	r3, #0
 8031032:	f000 8082 	beq.w	803113a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8031036:	687b      	ldr	r3, [r7, #4]
 8031038:	681b      	ldr	r3, [r3, #0]
 803103a:	4a41      	ldr	r2, [pc, #260]	; (8031140 <HAL_DMA_IRQHandler+0xe14>)
 803103c:	4293      	cmp	r3, r2
 803103e:	d04a      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 8031040:	687b      	ldr	r3, [r7, #4]
 8031042:	681b      	ldr	r3, [r3, #0]
 8031044:	4a3f      	ldr	r2, [pc, #252]	; (8031144 <HAL_DMA_IRQHandler+0xe18>)
 8031046:	4293      	cmp	r3, r2
 8031048:	d045      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 803104a:	687b      	ldr	r3, [r7, #4]
 803104c:	681b      	ldr	r3, [r3, #0]
 803104e:	4a3e      	ldr	r2, [pc, #248]	; (8031148 <HAL_DMA_IRQHandler+0xe1c>)
 8031050:	4293      	cmp	r3, r2
 8031052:	d040      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 8031054:	687b      	ldr	r3, [r7, #4]
 8031056:	681b      	ldr	r3, [r3, #0]
 8031058:	4a3c      	ldr	r2, [pc, #240]	; (803114c <HAL_DMA_IRQHandler+0xe20>)
 803105a:	4293      	cmp	r3, r2
 803105c:	d03b      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 803105e:	687b      	ldr	r3, [r7, #4]
 8031060:	681b      	ldr	r3, [r3, #0]
 8031062:	4a3b      	ldr	r2, [pc, #236]	; (8031150 <HAL_DMA_IRQHandler+0xe24>)
 8031064:	4293      	cmp	r3, r2
 8031066:	d036      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 8031068:	687b      	ldr	r3, [r7, #4]
 803106a:	681b      	ldr	r3, [r3, #0]
 803106c:	4a39      	ldr	r2, [pc, #228]	; (8031154 <HAL_DMA_IRQHandler+0xe28>)
 803106e:	4293      	cmp	r3, r2
 8031070:	d031      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 8031072:	687b      	ldr	r3, [r7, #4]
 8031074:	681b      	ldr	r3, [r3, #0]
 8031076:	4a38      	ldr	r2, [pc, #224]	; (8031158 <HAL_DMA_IRQHandler+0xe2c>)
 8031078:	4293      	cmp	r3, r2
 803107a:	d02c      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 803107c:	687b      	ldr	r3, [r7, #4]
 803107e:	681b      	ldr	r3, [r3, #0]
 8031080:	4a36      	ldr	r2, [pc, #216]	; (803115c <HAL_DMA_IRQHandler+0xe30>)
 8031082:	4293      	cmp	r3, r2
 8031084:	d027      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 8031086:	687b      	ldr	r3, [r7, #4]
 8031088:	681b      	ldr	r3, [r3, #0]
 803108a:	4a35      	ldr	r2, [pc, #212]	; (8031160 <HAL_DMA_IRQHandler+0xe34>)
 803108c:	4293      	cmp	r3, r2
 803108e:	d022      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 8031090:	687b      	ldr	r3, [r7, #4]
 8031092:	681b      	ldr	r3, [r3, #0]
 8031094:	4a33      	ldr	r2, [pc, #204]	; (8031164 <HAL_DMA_IRQHandler+0xe38>)
 8031096:	4293      	cmp	r3, r2
 8031098:	d01d      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 803109a:	687b      	ldr	r3, [r7, #4]
 803109c:	681b      	ldr	r3, [r3, #0]
 803109e:	4a32      	ldr	r2, [pc, #200]	; (8031168 <HAL_DMA_IRQHandler+0xe3c>)
 80310a0:	4293      	cmp	r3, r2
 80310a2:	d018      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 80310a4:	687b      	ldr	r3, [r7, #4]
 80310a6:	681b      	ldr	r3, [r3, #0]
 80310a8:	4a30      	ldr	r2, [pc, #192]	; (803116c <HAL_DMA_IRQHandler+0xe40>)
 80310aa:	4293      	cmp	r3, r2
 80310ac:	d013      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 80310ae:	687b      	ldr	r3, [r7, #4]
 80310b0:	681b      	ldr	r3, [r3, #0]
 80310b2:	4a2f      	ldr	r2, [pc, #188]	; (8031170 <HAL_DMA_IRQHandler+0xe44>)
 80310b4:	4293      	cmp	r3, r2
 80310b6:	d00e      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 80310b8:	687b      	ldr	r3, [r7, #4]
 80310ba:	681b      	ldr	r3, [r3, #0]
 80310bc:	4a2d      	ldr	r2, [pc, #180]	; (8031174 <HAL_DMA_IRQHandler+0xe48>)
 80310be:	4293      	cmp	r3, r2
 80310c0:	d009      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 80310c2:	687b      	ldr	r3, [r7, #4]
 80310c4:	681b      	ldr	r3, [r3, #0]
 80310c6:	4a2c      	ldr	r2, [pc, #176]	; (8031178 <HAL_DMA_IRQHandler+0xe4c>)
 80310c8:	4293      	cmp	r3, r2
 80310ca:	d004      	beq.n	80310d6 <HAL_DMA_IRQHandler+0xdaa>
 80310cc:	687b      	ldr	r3, [r7, #4]
 80310ce:	681b      	ldr	r3, [r3, #0]
 80310d0:	4a2a      	ldr	r2, [pc, #168]	; (803117c <HAL_DMA_IRQHandler+0xe50>)
 80310d2:	4293      	cmp	r3, r2
 80310d4:	d108      	bne.n	80310e8 <HAL_DMA_IRQHandler+0xdbc>
 80310d6:	687b      	ldr	r3, [r7, #4]
 80310d8:	681b      	ldr	r3, [r3, #0]
 80310da:	681a      	ldr	r2, [r3, #0]
 80310dc:	687b      	ldr	r3, [r7, #4]
 80310de:	681b      	ldr	r3, [r3, #0]
 80310e0:	f022 021c 	bic.w	r2, r2, #28
 80310e4:	601a      	str	r2, [r3, #0]
 80310e6:	e007      	b.n	80310f8 <HAL_DMA_IRQHandler+0xdcc>
 80310e8:	687b      	ldr	r3, [r7, #4]
 80310ea:	681b      	ldr	r3, [r3, #0]
 80310ec:	681a      	ldr	r2, [r3, #0]
 80310ee:	687b      	ldr	r3, [r7, #4]
 80310f0:	681b      	ldr	r3, [r3, #0]
 80310f2:	f022 020e 	bic.w	r2, r2, #14
 80310f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80310f8:	687b      	ldr	r3, [r7, #4]
 80310fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80310fc:	f003 031f 	and.w	r3, r3, #31
 8031100:	2201      	movs	r2, #1
 8031102:	409a      	lsls	r2, r3
 8031104:	69fb      	ldr	r3, [r7, #28]
 8031106:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8031108:	687b      	ldr	r3, [r7, #4]
 803110a:	2201      	movs	r2, #1
 803110c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 803110e:	687b      	ldr	r3, [r7, #4]
 8031110:	2201      	movs	r2, #1
 8031112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8031116:	687b      	ldr	r3, [r7, #4]
 8031118:	2200      	movs	r2, #0
 803111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 803111e:	687b      	ldr	r3, [r7, #4]
 8031120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031122:	2b00      	cmp	r3, #0
 8031124:	d009      	beq.n	803113a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8031126:	687b      	ldr	r3, [r7, #4]
 8031128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803112a:	6878      	ldr	r0, [r7, #4]
 803112c:	4798      	blx	r3
 803112e:	e004      	b.n	803113a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8031130:	bf00      	nop
 8031132:	e002      	b.n	803113a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031134:	bf00      	nop
 8031136:	e000      	b.n	803113a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8031138:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 803113a:	3728      	adds	r7, #40	; 0x28
 803113c:	46bd      	mov	sp, r7
 803113e:	bd80      	pop	{r7, pc}
 8031140:	40020010 	.word	0x40020010
 8031144:	40020028 	.word	0x40020028
 8031148:	40020040 	.word	0x40020040
 803114c:	40020058 	.word	0x40020058
 8031150:	40020070 	.word	0x40020070
 8031154:	40020088 	.word	0x40020088
 8031158:	400200a0 	.word	0x400200a0
 803115c:	400200b8 	.word	0x400200b8
 8031160:	40020410 	.word	0x40020410
 8031164:	40020428 	.word	0x40020428
 8031168:	40020440 	.word	0x40020440
 803116c:	40020458 	.word	0x40020458
 8031170:	40020470 	.word	0x40020470
 8031174:	40020488 	.word	0x40020488
 8031178:	400204a0 	.word	0x400204a0
 803117c:	400204b8 	.word	0x400204b8

08031180 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8031180:	b480      	push	{r7}
 8031182:	b083      	sub	sp, #12
 8031184:	af00      	add	r7, sp, #0
 8031186:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8031188:	687b      	ldr	r3, [r7, #4]
 803118a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 803118e:	b2db      	uxtb	r3, r3
}
 8031190:	4618      	mov	r0, r3
 8031192:	370c      	adds	r7, #12
 8031194:	46bd      	mov	sp, r7
 8031196:	f85d 7b04 	ldr.w	r7, [sp], #4
 803119a:	4770      	bx	lr

0803119c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 803119c:	b480      	push	{r7}
 803119e:	b083      	sub	sp, #12
 80311a0:	af00      	add	r7, sp, #0
 80311a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80311a4:	687b      	ldr	r3, [r7, #4]
 80311a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80311a8:	4618      	mov	r0, r3
 80311aa:	370c      	adds	r7, #12
 80311ac:	46bd      	mov	sp, r7
 80311ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80311b2:	4770      	bx	lr

080311b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80311b4:	b480      	push	{r7}
 80311b6:	b087      	sub	sp, #28
 80311b8:	af00      	add	r7, sp, #0
 80311ba:	60f8      	str	r0, [r7, #12]
 80311bc:	60b9      	str	r1, [r7, #8]
 80311be:	607a      	str	r2, [r7, #4]
 80311c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80311c2:	68fb      	ldr	r3, [r7, #12]
 80311c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80311c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80311c8:	68fb      	ldr	r3, [r7, #12]
 80311ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80311cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80311ce:	68fb      	ldr	r3, [r7, #12]
 80311d0:	681b      	ldr	r3, [r3, #0]
 80311d2:	4a7f      	ldr	r2, [pc, #508]	; (80313d0 <DMA_SetConfig+0x21c>)
 80311d4:	4293      	cmp	r3, r2
 80311d6:	d072      	beq.n	80312be <DMA_SetConfig+0x10a>
 80311d8:	68fb      	ldr	r3, [r7, #12]
 80311da:	681b      	ldr	r3, [r3, #0]
 80311dc:	4a7d      	ldr	r2, [pc, #500]	; (80313d4 <DMA_SetConfig+0x220>)
 80311de:	4293      	cmp	r3, r2
 80311e0:	d06d      	beq.n	80312be <DMA_SetConfig+0x10a>
 80311e2:	68fb      	ldr	r3, [r7, #12]
 80311e4:	681b      	ldr	r3, [r3, #0]
 80311e6:	4a7c      	ldr	r2, [pc, #496]	; (80313d8 <DMA_SetConfig+0x224>)
 80311e8:	4293      	cmp	r3, r2
 80311ea:	d068      	beq.n	80312be <DMA_SetConfig+0x10a>
 80311ec:	68fb      	ldr	r3, [r7, #12]
 80311ee:	681b      	ldr	r3, [r3, #0]
 80311f0:	4a7a      	ldr	r2, [pc, #488]	; (80313dc <DMA_SetConfig+0x228>)
 80311f2:	4293      	cmp	r3, r2
 80311f4:	d063      	beq.n	80312be <DMA_SetConfig+0x10a>
 80311f6:	68fb      	ldr	r3, [r7, #12]
 80311f8:	681b      	ldr	r3, [r3, #0]
 80311fa:	4a79      	ldr	r2, [pc, #484]	; (80313e0 <DMA_SetConfig+0x22c>)
 80311fc:	4293      	cmp	r3, r2
 80311fe:	d05e      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031200:	68fb      	ldr	r3, [r7, #12]
 8031202:	681b      	ldr	r3, [r3, #0]
 8031204:	4a77      	ldr	r2, [pc, #476]	; (80313e4 <DMA_SetConfig+0x230>)
 8031206:	4293      	cmp	r3, r2
 8031208:	d059      	beq.n	80312be <DMA_SetConfig+0x10a>
 803120a:	68fb      	ldr	r3, [r7, #12]
 803120c:	681b      	ldr	r3, [r3, #0]
 803120e:	4a76      	ldr	r2, [pc, #472]	; (80313e8 <DMA_SetConfig+0x234>)
 8031210:	4293      	cmp	r3, r2
 8031212:	d054      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031214:	68fb      	ldr	r3, [r7, #12]
 8031216:	681b      	ldr	r3, [r3, #0]
 8031218:	4a74      	ldr	r2, [pc, #464]	; (80313ec <DMA_SetConfig+0x238>)
 803121a:	4293      	cmp	r3, r2
 803121c:	d04f      	beq.n	80312be <DMA_SetConfig+0x10a>
 803121e:	68fb      	ldr	r3, [r7, #12]
 8031220:	681b      	ldr	r3, [r3, #0]
 8031222:	4a73      	ldr	r2, [pc, #460]	; (80313f0 <DMA_SetConfig+0x23c>)
 8031224:	4293      	cmp	r3, r2
 8031226:	d04a      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031228:	68fb      	ldr	r3, [r7, #12]
 803122a:	681b      	ldr	r3, [r3, #0]
 803122c:	4a71      	ldr	r2, [pc, #452]	; (80313f4 <DMA_SetConfig+0x240>)
 803122e:	4293      	cmp	r3, r2
 8031230:	d045      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031232:	68fb      	ldr	r3, [r7, #12]
 8031234:	681b      	ldr	r3, [r3, #0]
 8031236:	4a70      	ldr	r2, [pc, #448]	; (80313f8 <DMA_SetConfig+0x244>)
 8031238:	4293      	cmp	r3, r2
 803123a:	d040      	beq.n	80312be <DMA_SetConfig+0x10a>
 803123c:	68fb      	ldr	r3, [r7, #12]
 803123e:	681b      	ldr	r3, [r3, #0]
 8031240:	4a6e      	ldr	r2, [pc, #440]	; (80313fc <DMA_SetConfig+0x248>)
 8031242:	4293      	cmp	r3, r2
 8031244:	d03b      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031246:	68fb      	ldr	r3, [r7, #12]
 8031248:	681b      	ldr	r3, [r3, #0]
 803124a:	4a6d      	ldr	r2, [pc, #436]	; (8031400 <DMA_SetConfig+0x24c>)
 803124c:	4293      	cmp	r3, r2
 803124e:	d036      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031250:	68fb      	ldr	r3, [r7, #12]
 8031252:	681b      	ldr	r3, [r3, #0]
 8031254:	4a6b      	ldr	r2, [pc, #428]	; (8031404 <DMA_SetConfig+0x250>)
 8031256:	4293      	cmp	r3, r2
 8031258:	d031      	beq.n	80312be <DMA_SetConfig+0x10a>
 803125a:	68fb      	ldr	r3, [r7, #12]
 803125c:	681b      	ldr	r3, [r3, #0]
 803125e:	4a6a      	ldr	r2, [pc, #424]	; (8031408 <DMA_SetConfig+0x254>)
 8031260:	4293      	cmp	r3, r2
 8031262:	d02c      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031264:	68fb      	ldr	r3, [r7, #12]
 8031266:	681b      	ldr	r3, [r3, #0]
 8031268:	4a68      	ldr	r2, [pc, #416]	; (803140c <DMA_SetConfig+0x258>)
 803126a:	4293      	cmp	r3, r2
 803126c:	d027      	beq.n	80312be <DMA_SetConfig+0x10a>
 803126e:	68fb      	ldr	r3, [r7, #12]
 8031270:	681b      	ldr	r3, [r3, #0]
 8031272:	4a67      	ldr	r2, [pc, #412]	; (8031410 <DMA_SetConfig+0x25c>)
 8031274:	4293      	cmp	r3, r2
 8031276:	d022      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031278:	68fb      	ldr	r3, [r7, #12]
 803127a:	681b      	ldr	r3, [r3, #0]
 803127c:	4a65      	ldr	r2, [pc, #404]	; (8031414 <DMA_SetConfig+0x260>)
 803127e:	4293      	cmp	r3, r2
 8031280:	d01d      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031282:	68fb      	ldr	r3, [r7, #12]
 8031284:	681b      	ldr	r3, [r3, #0]
 8031286:	4a64      	ldr	r2, [pc, #400]	; (8031418 <DMA_SetConfig+0x264>)
 8031288:	4293      	cmp	r3, r2
 803128a:	d018      	beq.n	80312be <DMA_SetConfig+0x10a>
 803128c:	68fb      	ldr	r3, [r7, #12]
 803128e:	681b      	ldr	r3, [r3, #0]
 8031290:	4a62      	ldr	r2, [pc, #392]	; (803141c <DMA_SetConfig+0x268>)
 8031292:	4293      	cmp	r3, r2
 8031294:	d013      	beq.n	80312be <DMA_SetConfig+0x10a>
 8031296:	68fb      	ldr	r3, [r7, #12]
 8031298:	681b      	ldr	r3, [r3, #0]
 803129a:	4a61      	ldr	r2, [pc, #388]	; (8031420 <DMA_SetConfig+0x26c>)
 803129c:	4293      	cmp	r3, r2
 803129e:	d00e      	beq.n	80312be <DMA_SetConfig+0x10a>
 80312a0:	68fb      	ldr	r3, [r7, #12]
 80312a2:	681b      	ldr	r3, [r3, #0]
 80312a4:	4a5f      	ldr	r2, [pc, #380]	; (8031424 <DMA_SetConfig+0x270>)
 80312a6:	4293      	cmp	r3, r2
 80312a8:	d009      	beq.n	80312be <DMA_SetConfig+0x10a>
 80312aa:	68fb      	ldr	r3, [r7, #12]
 80312ac:	681b      	ldr	r3, [r3, #0]
 80312ae:	4a5e      	ldr	r2, [pc, #376]	; (8031428 <DMA_SetConfig+0x274>)
 80312b0:	4293      	cmp	r3, r2
 80312b2:	d004      	beq.n	80312be <DMA_SetConfig+0x10a>
 80312b4:	68fb      	ldr	r3, [r7, #12]
 80312b6:	681b      	ldr	r3, [r3, #0]
 80312b8:	4a5c      	ldr	r2, [pc, #368]	; (803142c <DMA_SetConfig+0x278>)
 80312ba:	4293      	cmp	r3, r2
 80312bc:	d101      	bne.n	80312c2 <DMA_SetConfig+0x10e>
 80312be:	2301      	movs	r3, #1
 80312c0:	e000      	b.n	80312c4 <DMA_SetConfig+0x110>
 80312c2:	2300      	movs	r3, #0
 80312c4:	2b00      	cmp	r3, #0
 80312c6:	d00d      	beq.n	80312e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80312c8:	68fb      	ldr	r3, [r7, #12]
 80312ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80312cc:	68fa      	ldr	r2, [r7, #12]
 80312ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80312d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80312d2:	68fb      	ldr	r3, [r7, #12]
 80312d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80312d6:	2b00      	cmp	r3, #0
 80312d8:	d004      	beq.n	80312e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80312da:	68fb      	ldr	r3, [r7, #12]
 80312dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80312de:	68fa      	ldr	r2, [r7, #12]
 80312e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80312e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80312e4:	68fb      	ldr	r3, [r7, #12]
 80312e6:	681b      	ldr	r3, [r3, #0]
 80312e8:	4a39      	ldr	r2, [pc, #228]	; (80313d0 <DMA_SetConfig+0x21c>)
 80312ea:	4293      	cmp	r3, r2
 80312ec:	d04a      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 80312ee:	68fb      	ldr	r3, [r7, #12]
 80312f0:	681b      	ldr	r3, [r3, #0]
 80312f2:	4a38      	ldr	r2, [pc, #224]	; (80313d4 <DMA_SetConfig+0x220>)
 80312f4:	4293      	cmp	r3, r2
 80312f6:	d045      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 80312f8:	68fb      	ldr	r3, [r7, #12]
 80312fa:	681b      	ldr	r3, [r3, #0]
 80312fc:	4a36      	ldr	r2, [pc, #216]	; (80313d8 <DMA_SetConfig+0x224>)
 80312fe:	4293      	cmp	r3, r2
 8031300:	d040      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 8031302:	68fb      	ldr	r3, [r7, #12]
 8031304:	681b      	ldr	r3, [r3, #0]
 8031306:	4a35      	ldr	r2, [pc, #212]	; (80313dc <DMA_SetConfig+0x228>)
 8031308:	4293      	cmp	r3, r2
 803130a:	d03b      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 803130c:	68fb      	ldr	r3, [r7, #12]
 803130e:	681b      	ldr	r3, [r3, #0]
 8031310:	4a33      	ldr	r2, [pc, #204]	; (80313e0 <DMA_SetConfig+0x22c>)
 8031312:	4293      	cmp	r3, r2
 8031314:	d036      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 8031316:	68fb      	ldr	r3, [r7, #12]
 8031318:	681b      	ldr	r3, [r3, #0]
 803131a:	4a32      	ldr	r2, [pc, #200]	; (80313e4 <DMA_SetConfig+0x230>)
 803131c:	4293      	cmp	r3, r2
 803131e:	d031      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 8031320:	68fb      	ldr	r3, [r7, #12]
 8031322:	681b      	ldr	r3, [r3, #0]
 8031324:	4a30      	ldr	r2, [pc, #192]	; (80313e8 <DMA_SetConfig+0x234>)
 8031326:	4293      	cmp	r3, r2
 8031328:	d02c      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 803132a:	68fb      	ldr	r3, [r7, #12]
 803132c:	681b      	ldr	r3, [r3, #0]
 803132e:	4a2f      	ldr	r2, [pc, #188]	; (80313ec <DMA_SetConfig+0x238>)
 8031330:	4293      	cmp	r3, r2
 8031332:	d027      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 8031334:	68fb      	ldr	r3, [r7, #12]
 8031336:	681b      	ldr	r3, [r3, #0]
 8031338:	4a2d      	ldr	r2, [pc, #180]	; (80313f0 <DMA_SetConfig+0x23c>)
 803133a:	4293      	cmp	r3, r2
 803133c:	d022      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 803133e:	68fb      	ldr	r3, [r7, #12]
 8031340:	681b      	ldr	r3, [r3, #0]
 8031342:	4a2c      	ldr	r2, [pc, #176]	; (80313f4 <DMA_SetConfig+0x240>)
 8031344:	4293      	cmp	r3, r2
 8031346:	d01d      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 8031348:	68fb      	ldr	r3, [r7, #12]
 803134a:	681b      	ldr	r3, [r3, #0]
 803134c:	4a2a      	ldr	r2, [pc, #168]	; (80313f8 <DMA_SetConfig+0x244>)
 803134e:	4293      	cmp	r3, r2
 8031350:	d018      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 8031352:	68fb      	ldr	r3, [r7, #12]
 8031354:	681b      	ldr	r3, [r3, #0]
 8031356:	4a29      	ldr	r2, [pc, #164]	; (80313fc <DMA_SetConfig+0x248>)
 8031358:	4293      	cmp	r3, r2
 803135a:	d013      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 803135c:	68fb      	ldr	r3, [r7, #12]
 803135e:	681b      	ldr	r3, [r3, #0]
 8031360:	4a27      	ldr	r2, [pc, #156]	; (8031400 <DMA_SetConfig+0x24c>)
 8031362:	4293      	cmp	r3, r2
 8031364:	d00e      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 8031366:	68fb      	ldr	r3, [r7, #12]
 8031368:	681b      	ldr	r3, [r3, #0]
 803136a:	4a26      	ldr	r2, [pc, #152]	; (8031404 <DMA_SetConfig+0x250>)
 803136c:	4293      	cmp	r3, r2
 803136e:	d009      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 8031370:	68fb      	ldr	r3, [r7, #12]
 8031372:	681b      	ldr	r3, [r3, #0]
 8031374:	4a24      	ldr	r2, [pc, #144]	; (8031408 <DMA_SetConfig+0x254>)
 8031376:	4293      	cmp	r3, r2
 8031378:	d004      	beq.n	8031384 <DMA_SetConfig+0x1d0>
 803137a:	68fb      	ldr	r3, [r7, #12]
 803137c:	681b      	ldr	r3, [r3, #0]
 803137e:	4a23      	ldr	r2, [pc, #140]	; (803140c <DMA_SetConfig+0x258>)
 8031380:	4293      	cmp	r3, r2
 8031382:	d101      	bne.n	8031388 <DMA_SetConfig+0x1d4>
 8031384:	2301      	movs	r3, #1
 8031386:	e000      	b.n	803138a <DMA_SetConfig+0x1d6>
 8031388:	2300      	movs	r3, #0
 803138a:	2b00      	cmp	r3, #0
 803138c:	d059      	beq.n	8031442 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 803138e:	68fb      	ldr	r3, [r7, #12]
 8031390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031392:	f003 031f 	and.w	r3, r3, #31
 8031396:	223f      	movs	r2, #63	; 0x3f
 8031398:	409a      	lsls	r2, r3
 803139a:	697b      	ldr	r3, [r7, #20]
 803139c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 803139e:	68fb      	ldr	r3, [r7, #12]
 80313a0:	681b      	ldr	r3, [r3, #0]
 80313a2:	681a      	ldr	r2, [r3, #0]
 80313a4:	68fb      	ldr	r3, [r7, #12]
 80313a6:	681b      	ldr	r3, [r3, #0]
 80313a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80313ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80313ae:	68fb      	ldr	r3, [r7, #12]
 80313b0:	681b      	ldr	r3, [r3, #0]
 80313b2:	683a      	ldr	r2, [r7, #0]
 80313b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80313b6:	68fb      	ldr	r3, [r7, #12]
 80313b8:	689b      	ldr	r3, [r3, #8]
 80313ba:	2b40      	cmp	r3, #64	; 0x40
 80313bc:	d138      	bne.n	8031430 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80313be:	68fb      	ldr	r3, [r7, #12]
 80313c0:	681b      	ldr	r3, [r3, #0]
 80313c2:	687a      	ldr	r2, [r7, #4]
 80313c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80313c6:	68fb      	ldr	r3, [r7, #12]
 80313c8:	681b      	ldr	r3, [r3, #0]
 80313ca:	68ba      	ldr	r2, [r7, #8]
 80313cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80313ce:	e086      	b.n	80314de <DMA_SetConfig+0x32a>
 80313d0:	40020010 	.word	0x40020010
 80313d4:	40020028 	.word	0x40020028
 80313d8:	40020040 	.word	0x40020040
 80313dc:	40020058 	.word	0x40020058
 80313e0:	40020070 	.word	0x40020070
 80313e4:	40020088 	.word	0x40020088
 80313e8:	400200a0 	.word	0x400200a0
 80313ec:	400200b8 	.word	0x400200b8
 80313f0:	40020410 	.word	0x40020410
 80313f4:	40020428 	.word	0x40020428
 80313f8:	40020440 	.word	0x40020440
 80313fc:	40020458 	.word	0x40020458
 8031400:	40020470 	.word	0x40020470
 8031404:	40020488 	.word	0x40020488
 8031408:	400204a0 	.word	0x400204a0
 803140c:	400204b8 	.word	0x400204b8
 8031410:	58025408 	.word	0x58025408
 8031414:	5802541c 	.word	0x5802541c
 8031418:	58025430 	.word	0x58025430
 803141c:	58025444 	.word	0x58025444
 8031420:	58025458 	.word	0x58025458
 8031424:	5802546c 	.word	0x5802546c
 8031428:	58025480 	.word	0x58025480
 803142c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8031430:	68fb      	ldr	r3, [r7, #12]
 8031432:	681b      	ldr	r3, [r3, #0]
 8031434:	68ba      	ldr	r2, [r7, #8]
 8031436:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8031438:	68fb      	ldr	r3, [r7, #12]
 803143a:	681b      	ldr	r3, [r3, #0]
 803143c:	687a      	ldr	r2, [r7, #4]
 803143e:	60da      	str	r2, [r3, #12]
}
 8031440:	e04d      	b.n	80314de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8031442:	68fb      	ldr	r3, [r7, #12]
 8031444:	681b      	ldr	r3, [r3, #0]
 8031446:	4a29      	ldr	r2, [pc, #164]	; (80314ec <DMA_SetConfig+0x338>)
 8031448:	4293      	cmp	r3, r2
 803144a:	d022      	beq.n	8031492 <DMA_SetConfig+0x2de>
 803144c:	68fb      	ldr	r3, [r7, #12]
 803144e:	681b      	ldr	r3, [r3, #0]
 8031450:	4a27      	ldr	r2, [pc, #156]	; (80314f0 <DMA_SetConfig+0x33c>)
 8031452:	4293      	cmp	r3, r2
 8031454:	d01d      	beq.n	8031492 <DMA_SetConfig+0x2de>
 8031456:	68fb      	ldr	r3, [r7, #12]
 8031458:	681b      	ldr	r3, [r3, #0]
 803145a:	4a26      	ldr	r2, [pc, #152]	; (80314f4 <DMA_SetConfig+0x340>)
 803145c:	4293      	cmp	r3, r2
 803145e:	d018      	beq.n	8031492 <DMA_SetConfig+0x2de>
 8031460:	68fb      	ldr	r3, [r7, #12]
 8031462:	681b      	ldr	r3, [r3, #0]
 8031464:	4a24      	ldr	r2, [pc, #144]	; (80314f8 <DMA_SetConfig+0x344>)
 8031466:	4293      	cmp	r3, r2
 8031468:	d013      	beq.n	8031492 <DMA_SetConfig+0x2de>
 803146a:	68fb      	ldr	r3, [r7, #12]
 803146c:	681b      	ldr	r3, [r3, #0]
 803146e:	4a23      	ldr	r2, [pc, #140]	; (80314fc <DMA_SetConfig+0x348>)
 8031470:	4293      	cmp	r3, r2
 8031472:	d00e      	beq.n	8031492 <DMA_SetConfig+0x2de>
 8031474:	68fb      	ldr	r3, [r7, #12]
 8031476:	681b      	ldr	r3, [r3, #0]
 8031478:	4a21      	ldr	r2, [pc, #132]	; (8031500 <DMA_SetConfig+0x34c>)
 803147a:	4293      	cmp	r3, r2
 803147c:	d009      	beq.n	8031492 <DMA_SetConfig+0x2de>
 803147e:	68fb      	ldr	r3, [r7, #12]
 8031480:	681b      	ldr	r3, [r3, #0]
 8031482:	4a20      	ldr	r2, [pc, #128]	; (8031504 <DMA_SetConfig+0x350>)
 8031484:	4293      	cmp	r3, r2
 8031486:	d004      	beq.n	8031492 <DMA_SetConfig+0x2de>
 8031488:	68fb      	ldr	r3, [r7, #12]
 803148a:	681b      	ldr	r3, [r3, #0]
 803148c:	4a1e      	ldr	r2, [pc, #120]	; (8031508 <DMA_SetConfig+0x354>)
 803148e:	4293      	cmp	r3, r2
 8031490:	d101      	bne.n	8031496 <DMA_SetConfig+0x2e2>
 8031492:	2301      	movs	r3, #1
 8031494:	e000      	b.n	8031498 <DMA_SetConfig+0x2e4>
 8031496:	2300      	movs	r3, #0
 8031498:	2b00      	cmp	r3, #0
 803149a:	d020      	beq.n	80314de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 803149c:	68fb      	ldr	r3, [r7, #12]
 803149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80314a0:	f003 031f 	and.w	r3, r3, #31
 80314a4:	2201      	movs	r2, #1
 80314a6:	409a      	lsls	r2, r3
 80314a8:	693b      	ldr	r3, [r7, #16]
 80314aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80314ac:	68fb      	ldr	r3, [r7, #12]
 80314ae:	681b      	ldr	r3, [r3, #0]
 80314b0:	683a      	ldr	r2, [r7, #0]
 80314b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80314b4:	68fb      	ldr	r3, [r7, #12]
 80314b6:	689b      	ldr	r3, [r3, #8]
 80314b8:	2b40      	cmp	r3, #64	; 0x40
 80314ba:	d108      	bne.n	80314ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80314bc:	68fb      	ldr	r3, [r7, #12]
 80314be:	681b      	ldr	r3, [r3, #0]
 80314c0:	687a      	ldr	r2, [r7, #4]
 80314c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80314c4:	68fb      	ldr	r3, [r7, #12]
 80314c6:	681b      	ldr	r3, [r3, #0]
 80314c8:	68ba      	ldr	r2, [r7, #8]
 80314ca:	60da      	str	r2, [r3, #12]
}
 80314cc:	e007      	b.n	80314de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80314ce:	68fb      	ldr	r3, [r7, #12]
 80314d0:	681b      	ldr	r3, [r3, #0]
 80314d2:	68ba      	ldr	r2, [r7, #8]
 80314d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80314d6:	68fb      	ldr	r3, [r7, #12]
 80314d8:	681b      	ldr	r3, [r3, #0]
 80314da:	687a      	ldr	r2, [r7, #4]
 80314dc:	60da      	str	r2, [r3, #12]
}
 80314de:	bf00      	nop
 80314e0:	371c      	adds	r7, #28
 80314e2:	46bd      	mov	sp, r7
 80314e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80314e8:	4770      	bx	lr
 80314ea:	bf00      	nop
 80314ec:	58025408 	.word	0x58025408
 80314f0:	5802541c 	.word	0x5802541c
 80314f4:	58025430 	.word	0x58025430
 80314f8:	58025444 	.word	0x58025444
 80314fc:	58025458 	.word	0x58025458
 8031500:	5802546c 	.word	0x5802546c
 8031504:	58025480 	.word	0x58025480
 8031508:	58025494 	.word	0x58025494

0803150c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 803150c:	b480      	push	{r7}
 803150e:	b085      	sub	sp, #20
 8031510:	af00      	add	r7, sp, #0
 8031512:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8031514:	687b      	ldr	r3, [r7, #4]
 8031516:	681b      	ldr	r3, [r3, #0]
 8031518:	4a42      	ldr	r2, [pc, #264]	; (8031624 <DMA_CalcBaseAndBitshift+0x118>)
 803151a:	4293      	cmp	r3, r2
 803151c:	d04a      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 803151e:	687b      	ldr	r3, [r7, #4]
 8031520:	681b      	ldr	r3, [r3, #0]
 8031522:	4a41      	ldr	r2, [pc, #260]	; (8031628 <DMA_CalcBaseAndBitshift+0x11c>)
 8031524:	4293      	cmp	r3, r2
 8031526:	d045      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 8031528:	687b      	ldr	r3, [r7, #4]
 803152a:	681b      	ldr	r3, [r3, #0]
 803152c:	4a3f      	ldr	r2, [pc, #252]	; (803162c <DMA_CalcBaseAndBitshift+0x120>)
 803152e:	4293      	cmp	r3, r2
 8031530:	d040      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 8031532:	687b      	ldr	r3, [r7, #4]
 8031534:	681b      	ldr	r3, [r3, #0]
 8031536:	4a3e      	ldr	r2, [pc, #248]	; (8031630 <DMA_CalcBaseAndBitshift+0x124>)
 8031538:	4293      	cmp	r3, r2
 803153a:	d03b      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 803153c:	687b      	ldr	r3, [r7, #4]
 803153e:	681b      	ldr	r3, [r3, #0]
 8031540:	4a3c      	ldr	r2, [pc, #240]	; (8031634 <DMA_CalcBaseAndBitshift+0x128>)
 8031542:	4293      	cmp	r3, r2
 8031544:	d036      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 8031546:	687b      	ldr	r3, [r7, #4]
 8031548:	681b      	ldr	r3, [r3, #0]
 803154a:	4a3b      	ldr	r2, [pc, #236]	; (8031638 <DMA_CalcBaseAndBitshift+0x12c>)
 803154c:	4293      	cmp	r3, r2
 803154e:	d031      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 8031550:	687b      	ldr	r3, [r7, #4]
 8031552:	681b      	ldr	r3, [r3, #0]
 8031554:	4a39      	ldr	r2, [pc, #228]	; (803163c <DMA_CalcBaseAndBitshift+0x130>)
 8031556:	4293      	cmp	r3, r2
 8031558:	d02c      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 803155a:	687b      	ldr	r3, [r7, #4]
 803155c:	681b      	ldr	r3, [r3, #0]
 803155e:	4a38      	ldr	r2, [pc, #224]	; (8031640 <DMA_CalcBaseAndBitshift+0x134>)
 8031560:	4293      	cmp	r3, r2
 8031562:	d027      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 8031564:	687b      	ldr	r3, [r7, #4]
 8031566:	681b      	ldr	r3, [r3, #0]
 8031568:	4a36      	ldr	r2, [pc, #216]	; (8031644 <DMA_CalcBaseAndBitshift+0x138>)
 803156a:	4293      	cmp	r3, r2
 803156c:	d022      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 803156e:	687b      	ldr	r3, [r7, #4]
 8031570:	681b      	ldr	r3, [r3, #0]
 8031572:	4a35      	ldr	r2, [pc, #212]	; (8031648 <DMA_CalcBaseAndBitshift+0x13c>)
 8031574:	4293      	cmp	r3, r2
 8031576:	d01d      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 8031578:	687b      	ldr	r3, [r7, #4]
 803157a:	681b      	ldr	r3, [r3, #0]
 803157c:	4a33      	ldr	r2, [pc, #204]	; (803164c <DMA_CalcBaseAndBitshift+0x140>)
 803157e:	4293      	cmp	r3, r2
 8031580:	d018      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 8031582:	687b      	ldr	r3, [r7, #4]
 8031584:	681b      	ldr	r3, [r3, #0]
 8031586:	4a32      	ldr	r2, [pc, #200]	; (8031650 <DMA_CalcBaseAndBitshift+0x144>)
 8031588:	4293      	cmp	r3, r2
 803158a:	d013      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 803158c:	687b      	ldr	r3, [r7, #4]
 803158e:	681b      	ldr	r3, [r3, #0]
 8031590:	4a30      	ldr	r2, [pc, #192]	; (8031654 <DMA_CalcBaseAndBitshift+0x148>)
 8031592:	4293      	cmp	r3, r2
 8031594:	d00e      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 8031596:	687b      	ldr	r3, [r7, #4]
 8031598:	681b      	ldr	r3, [r3, #0]
 803159a:	4a2f      	ldr	r2, [pc, #188]	; (8031658 <DMA_CalcBaseAndBitshift+0x14c>)
 803159c:	4293      	cmp	r3, r2
 803159e:	d009      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 80315a0:	687b      	ldr	r3, [r7, #4]
 80315a2:	681b      	ldr	r3, [r3, #0]
 80315a4:	4a2d      	ldr	r2, [pc, #180]	; (803165c <DMA_CalcBaseAndBitshift+0x150>)
 80315a6:	4293      	cmp	r3, r2
 80315a8:	d004      	beq.n	80315b4 <DMA_CalcBaseAndBitshift+0xa8>
 80315aa:	687b      	ldr	r3, [r7, #4]
 80315ac:	681b      	ldr	r3, [r3, #0]
 80315ae:	4a2c      	ldr	r2, [pc, #176]	; (8031660 <DMA_CalcBaseAndBitshift+0x154>)
 80315b0:	4293      	cmp	r3, r2
 80315b2:	d101      	bne.n	80315b8 <DMA_CalcBaseAndBitshift+0xac>
 80315b4:	2301      	movs	r3, #1
 80315b6:	e000      	b.n	80315ba <DMA_CalcBaseAndBitshift+0xae>
 80315b8:	2300      	movs	r3, #0
 80315ba:	2b00      	cmp	r3, #0
 80315bc:	d024      	beq.n	8031608 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80315be:	687b      	ldr	r3, [r7, #4]
 80315c0:	681b      	ldr	r3, [r3, #0]
 80315c2:	b2db      	uxtb	r3, r3
 80315c4:	3b10      	subs	r3, #16
 80315c6:	4a27      	ldr	r2, [pc, #156]	; (8031664 <DMA_CalcBaseAndBitshift+0x158>)
 80315c8:	fba2 2303 	umull	r2, r3, r2, r3
 80315cc:	091b      	lsrs	r3, r3, #4
 80315ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80315d0:	68fb      	ldr	r3, [r7, #12]
 80315d2:	f003 0307 	and.w	r3, r3, #7
 80315d6:	4a24      	ldr	r2, [pc, #144]	; (8031668 <DMA_CalcBaseAndBitshift+0x15c>)
 80315d8:	5cd3      	ldrb	r3, [r2, r3]
 80315da:	461a      	mov	r2, r3
 80315dc:	687b      	ldr	r3, [r7, #4]
 80315de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80315e0:	68fb      	ldr	r3, [r7, #12]
 80315e2:	2b03      	cmp	r3, #3
 80315e4:	d908      	bls.n	80315f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80315e6:	687b      	ldr	r3, [r7, #4]
 80315e8:	681b      	ldr	r3, [r3, #0]
 80315ea:	461a      	mov	r2, r3
 80315ec:	4b1f      	ldr	r3, [pc, #124]	; (803166c <DMA_CalcBaseAndBitshift+0x160>)
 80315ee:	4013      	ands	r3, r2
 80315f0:	1d1a      	adds	r2, r3, #4
 80315f2:	687b      	ldr	r3, [r7, #4]
 80315f4:	659a      	str	r2, [r3, #88]	; 0x58
 80315f6:	e00d      	b.n	8031614 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80315f8:	687b      	ldr	r3, [r7, #4]
 80315fa:	681b      	ldr	r3, [r3, #0]
 80315fc:	461a      	mov	r2, r3
 80315fe:	4b1b      	ldr	r3, [pc, #108]	; (803166c <DMA_CalcBaseAndBitshift+0x160>)
 8031600:	4013      	ands	r3, r2
 8031602:	687a      	ldr	r2, [r7, #4]
 8031604:	6593      	str	r3, [r2, #88]	; 0x58
 8031606:	e005      	b.n	8031614 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8031608:	687b      	ldr	r3, [r7, #4]
 803160a:	681b      	ldr	r3, [r3, #0]
 803160c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8031610:	687b      	ldr	r3, [r7, #4]
 8031612:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8031614:	687b      	ldr	r3, [r7, #4]
 8031616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8031618:	4618      	mov	r0, r3
 803161a:	3714      	adds	r7, #20
 803161c:	46bd      	mov	sp, r7
 803161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031622:	4770      	bx	lr
 8031624:	40020010 	.word	0x40020010
 8031628:	40020028 	.word	0x40020028
 803162c:	40020040 	.word	0x40020040
 8031630:	40020058 	.word	0x40020058
 8031634:	40020070 	.word	0x40020070
 8031638:	40020088 	.word	0x40020088
 803163c:	400200a0 	.word	0x400200a0
 8031640:	400200b8 	.word	0x400200b8
 8031644:	40020410 	.word	0x40020410
 8031648:	40020428 	.word	0x40020428
 803164c:	40020440 	.word	0x40020440
 8031650:	40020458 	.word	0x40020458
 8031654:	40020470 	.word	0x40020470
 8031658:	40020488 	.word	0x40020488
 803165c:	400204a0 	.word	0x400204a0
 8031660:	400204b8 	.word	0x400204b8
 8031664:	aaaaaaab 	.word	0xaaaaaaab
 8031668:	0805b82c 	.word	0x0805b82c
 803166c:	fffffc00 	.word	0xfffffc00

08031670 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8031670:	b480      	push	{r7}
 8031672:	b085      	sub	sp, #20
 8031674:	af00      	add	r7, sp, #0
 8031676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8031678:	2300      	movs	r3, #0
 803167a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 803167c:	687b      	ldr	r3, [r7, #4]
 803167e:	699b      	ldr	r3, [r3, #24]
 8031680:	2b00      	cmp	r3, #0
 8031682:	d120      	bne.n	80316c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8031684:	687b      	ldr	r3, [r7, #4]
 8031686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031688:	2b03      	cmp	r3, #3
 803168a:	d858      	bhi.n	803173e <DMA_CheckFifoParam+0xce>
 803168c:	a201      	add	r2, pc, #4	; (adr r2, 8031694 <DMA_CheckFifoParam+0x24>)
 803168e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031692:	bf00      	nop
 8031694:	080316a5 	.word	0x080316a5
 8031698:	080316b7 	.word	0x080316b7
 803169c:	080316a5 	.word	0x080316a5
 80316a0:	0803173f 	.word	0x0803173f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80316a4:	687b      	ldr	r3, [r7, #4]
 80316a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80316a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80316ac:	2b00      	cmp	r3, #0
 80316ae:	d048      	beq.n	8031742 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80316b0:	2301      	movs	r3, #1
 80316b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80316b4:	e045      	b.n	8031742 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80316b6:	687b      	ldr	r3, [r7, #4]
 80316b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80316ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80316be:	d142      	bne.n	8031746 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80316c0:	2301      	movs	r3, #1
 80316c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80316c4:	e03f      	b.n	8031746 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80316c6:	687b      	ldr	r3, [r7, #4]
 80316c8:	699b      	ldr	r3, [r3, #24]
 80316ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80316ce:	d123      	bne.n	8031718 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80316d0:	687b      	ldr	r3, [r7, #4]
 80316d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80316d4:	2b03      	cmp	r3, #3
 80316d6:	d838      	bhi.n	803174a <DMA_CheckFifoParam+0xda>
 80316d8:	a201      	add	r2, pc, #4	; (adr r2, 80316e0 <DMA_CheckFifoParam+0x70>)
 80316da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80316de:	bf00      	nop
 80316e0:	080316f1 	.word	0x080316f1
 80316e4:	080316f7 	.word	0x080316f7
 80316e8:	080316f1 	.word	0x080316f1
 80316ec:	08031709 	.word	0x08031709
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80316f0:	2301      	movs	r3, #1
 80316f2:	73fb      	strb	r3, [r7, #15]
        break;
 80316f4:	e030      	b.n	8031758 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80316f6:	687b      	ldr	r3, [r7, #4]
 80316f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80316fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80316fe:	2b00      	cmp	r3, #0
 8031700:	d025      	beq.n	803174e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8031702:	2301      	movs	r3, #1
 8031704:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8031706:	e022      	b.n	803174e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8031708:	687b      	ldr	r3, [r7, #4]
 803170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803170c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8031710:	d11f      	bne.n	8031752 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8031712:	2301      	movs	r3, #1
 8031714:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8031716:	e01c      	b.n	8031752 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8031718:	687b      	ldr	r3, [r7, #4]
 803171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803171c:	2b02      	cmp	r3, #2
 803171e:	d902      	bls.n	8031726 <DMA_CheckFifoParam+0xb6>
 8031720:	2b03      	cmp	r3, #3
 8031722:	d003      	beq.n	803172c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8031724:	e018      	b.n	8031758 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8031726:	2301      	movs	r3, #1
 8031728:	73fb      	strb	r3, [r7, #15]
        break;
 803172a:	e015      	b.n	8031758 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 803172c:	687b      	ldr	r3, [r7, #4]
 803172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8031734:	2b00      	cmp	r3, #0
 8031736:	d00e      	beq.n	8031756 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8031738:	2301      	movs	r3, #1
 803173a:	73fb      	strb	r3, [r7, #15]
    break;
 803173c:	e00b      	b.n	8031756 <DMA_CheckFifoParam+0xe6>
        break;
 803173e:	bf00      	nop
 8031740:	e00a      	b.n	8031758 <DMA_CheckFifoParam+0xe8>
        break;
 8031742:	bf00      	nop
 8031744:	e008      	b.n	8031758 <DMA_CheckFifoParam+0xe8>
        break;
 8031746:	bf00      	nop
 8031748:	e006      	b.n	8031758 <DMA_CheckFifoParam+0xe8>
        break;
 803174a:	bf00      	nop
 803174c:	e004      	b.n	8031758 <DMA_CheckFifoParam+0xe8>
        break;
 803174e:	bf00      	nop
 8031750:	e002      	b.n	8031758 <DMA_CheckFifoParam+0xe8>
        break;
 8031752:	bf00      	nop
 8031754:	e000      	b.n	8031758 <DMA_CheckFifoParam+0xe8>
    break;
 8031756:	bf00      	nop
    }
  }

  return status;
 8031758:	7bfb      	ldrb	r3, [r7, #15]
}
 803175a:	4618      	mov	r0, r3
 803175c:	3714      	adds	r7, #20
 803175e:	46bd      	mov	sp, r7
 8031760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031764:	4770      	bx	lr
 8031766:	bf00      	nop

08031768 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8031768:	b480      	push	{r7}
 803176a:	b085      	sub	sp, #20
 803176c:	af00      	add	r7, sp, #0
 803176e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8031770:	687b      	ldr	r3, [r7, #4]
 8031772:	681b      	ldr	r3, [r3, #0]
 8031774:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8031776:	687b      	ldr	r3, [r7, #4]
 8031778:	681b      	ldr	r3, [r3, #0]
 803177a:	4a38      	ldr	r2, [pc, #224]	; (803185c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 803177c:	4293      	cmp	r3, r2
 803177e:	d022      	beq.n	80317c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8031780:	687b      	ldr	r3, [r7, #4]
 8031782:	681b      	ldr	r3, [r3, #0]
 8031784:	4a36      	ldr	r2, [pc, #216]	; (8031860 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8031786:	4293      	cmp	r3, r2
 8031788:	d01d      	beq.n	80317c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 803178a:	687b      	ldr	r3, [r7, #4]
 803178c:	681b      	ldr	r3, [r3, #0]
 803178e:	4a35      	ldr	r2, [pc, #212]	; (8031864 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8031790:	4293      	cmp	r3, r2
 8031792:	d018      	beq.n	80317c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8031794:	687b      	ldr	r3, [r7, #4]
 8031796:	681b      	ldr	r3, [r3, #0]
 8031798:	4a33      	ldr	r2, [pc, #204]	; (8031868 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 803179a:	4293      	cmp	r3, r2
 803179c:	d013      	beq.n	80317c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 803179e:	687b      	ldr	r3, [r7, #4]
 80317a0:	681b      	ldr	r3, [r3, #0]
 80317a2:	4a32      	ldr	r2, [pc, #200]	; (803186c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80317a4:	4293      	cmp	r3, r2
 80317a6:	d00e      	beq.n	80317c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80317a8:	687b      	ldr	r3, [r7, #4]
 80317aa:	681b      	ldr	r3, [r3, #0]
 80317ac:	4a30      	ldr	r2, [pc, #192]	; (8031870 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80317ae:	4293      	cmp	r3, r2
 80317b0:	d009      	beq.n	80317c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80317b2:	687b      	ldr	r3, [r7, #4]
 80317b4:	681b      	ldr	r3, [r3, #0]
 80317b6:	4a2f      	ldr	r2, [pc, #188]	; (8031874 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80317b8:	4293      	cmp	r3, r2
 80317ba:	d004      	beq.n	80317c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80317bc:	687b      	ldr	r3, [r7, #4]
 80317be:	681b      	ldr	r3, [r3, #0]
 80317c0:	4a2d      	ldr	r2, [pc, #180]	; (8031878 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80317c2:	4293      	cmp	r3, r2
 80317c4:	d101      	bne.n	80317ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80317c6:	2301      	movs	r3, #1
 80317c8:	e000      	b.n	80317cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80317ca:	2300      	movs	r3, #0
 80317cc:	2b00      	cmp	r3, #0
 80317ce:	d01a      	beq.n	8031806 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80317d0:	687b      	ldr	r3, [r7, #4]
 80317d2:	681b      	ldr	r3, [r3, #0]
 80317d4:	b2db      	uxtb	r3, r3
 80317d6:	3b08      	subs	r3, #8
 80317d8:	4a28      	ldr	r2, [pc, #160]	; (803187c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80317da:	fba2 2303 	umull	r2, r3, r2, r3
 80317de:	091b      	lsrs	r3, r3, #4
 80317e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80317e2:	68fa      	ldr	r2, [r7, #12]
 80317e4:	4b26      	ldr	r3, [pc, #152]	; (8031880 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80317e6:	4413      	add	r3, r2
 80317e8:	009b      	lsls	r3, r3, #2
 80317ea:	461a      	mov	r2, r3
 80317ec:	687b      	ldr	r3, [r7, #4]
 80317ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80317f0:	687b      	ldr	r3, [r7, #4]
 80317f2:	4a24      	ldr	r2, [pc, #144]	; (8031884 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80317f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80317f6:	68fb      	ldr	r3, [r7, #12]
 80317f8:	f003 031f 	and.w	r3, r3, #31
 80317fc:	2201      	movs	r2, #1
 80317fe:	409a      	lsls	r2, r3
 8031800:	687b      	ldr	r3, [r7, #4]
 8031802:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8031804:	e024      	b.n	8031850 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8031806:	687b      	ldr	r3, [r7, #4]
 8031808:	681b      	ldr	r3, [r3, #0]
 803180a:	b2db      	uxtb	r3, r3
 803180c:	3b10      	subs	r3, #16
 803180e:	4a1e      	ldr	r2, [pc, #120]	; (8031888 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8031810:	fba2 2303 	umull	r2, r3, r2, r3
 8031814:	091b      	lsrs	r3, r3, #4
 8031816:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8031818:	68bb      	ldr	r3, [r7, #8]
 803181a:	4a1c      	ldr	r2, [pc, #112]	; (803188c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 803181c:	4293      	cmp	r3, r2
 803181e:	d806      	bhi.n	803182e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8031820:	68bb      	ldr	r3, [r7, #8]
 8031822:	4a1b      	ldr	r2, [pc, #108]	; (8031890 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8031824:	4293      	cmp	r3, r2
 8031826:	d902      	bls.n	803182e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8031828:	68fb      	ldr	r3, [r7, #12]
 803182a:	3308      	adds	r3, #8
 803182c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 803182e:	68fa      	ldr	r2, [r7, #12]
 8031830:	4b18      	ldr	r3, [pc, #96]	; (8031894 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8031832:	4413      	add	r3, r2
 8031834:	009b      	lsls	r3, r3, #2
 8031836:	461a      	mov	r2, r3
 8031838:	687b      	ldr	r3, [r7, #4]
 803183a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 803183c:	687b      	ldr	r3, [r7, #4]
 803183e:	4a16      	ldr	r2, [pc, #88]	; (8031898 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8031840:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8031842:	68fb      	ldr	r3, [r7, #12]
 8031844:	f003 031f 	and.w	r3, r3, #31
 8031848:	2201      	movs	r2, #1
 803184a:	409a      	lsls	r2, r3
 803184c:	687b      	ldr	r3, [r7, #4]
 803184e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8031850:	bf00      	nop
 8031852:	3714      	adds	r7, #20
 8031854:	46bd      	mov	sp, r7
 8031856:	f85d 7b04 	ldr.w	r7, [sp], #4
 803185a:	4770      	bx	lr
 803185c:	58025408 	.word	0x58025408
 8031860:	5802541c 	.word	0x5802541c
 8031864:	58025430 	.word	0x58025430
 8031868:	58025444 	.word	0x58025444
 803186c:	58025458 	.word	0x58025458
 8031870:	5802546c 	.word	0x5802546c
 8031874:	58025480 	.word	0x58025480
 8031878:	58025494 	.word	0x58025494
 803187c:	cccccccd 	.word	0xcccccccd
 8031880:	16009600 	.word	0x16009600
 8031884:	58025880 	.word	0x58025880
 8031888:	aaaaaaab 	.word	0xaaaaaaab
 803188c:	400204b8 	.word	0x400204b8
 8031890:	4002040f 	.word	0x4002040f
 8031894:	10008200 	.word	0x10008200
 8031898:	40020880 	.word	0x40020880

0803189c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 803189c:	b480      	push	{r7}
 803189e:	b085      	sub	sp, #20
 80318a0:	af00      	add	r7, sp, #0
 80318a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80318a4:	687b      	ldr	r3, [r7, #4]
 80318a6:	685b      	ldr	r3, [r3, #4]
 80318a8:	b2db      	uxtb	r3, r3
 80318aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80318ac:	68fb      	ldr	r3, [r7, #12]
 80318ae:	2b00      	cmp	r3, #0
 80318b0:	d04a      	beq.n	8031948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80318b2:	68fb      	ldr	r3, [r7, #12]
 80318b4:	2b08      	cmp	r3, #8
 80318b6:	d847      	bhi.n	8031948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80318b8:	687b      	ldr	r3, [r7, #4]
 80318ba:	681b      	ldr	r3, [r3, #0]
 80318bc:	4a25      	ldr	r2, [pc, #148]	; (8031954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80318be:	4293      	cmp	r3, r2
 80318c0:	d022      	beq.n	8031908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80318c2:	687b      	ldr	r3, [r7, #4]
 80318c4:	681b      	ldr	r3, [r3, #0]
 80318c6:	4a24      	ldr	r2, [pc, #144]	; (8031958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80318c8:	4293      	cmp	r3, r2
 80318ca:	d01d      	beq.n	8031908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80318cc:	687b      	ldr	r3, [r7, #4]
 80318ce:	681b      	ldr	r3, [r3, #0]
 80318d0:	4a22      	ldr	r2, [pc, #136]	; (803195c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80318d2:	4293      	cmp	r3, r2
 80318d4:	d018      	beq.n	8031908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80318d6:	687b      	ldr	r3, [r7, #4]
 80318d8:	681b      	ldr	r3, [r3, #0]
 80318da:	4a21      	ldr	r2, [pc, #132]	; (8031960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80318dc:	4293      	cmp	r3, r2
 80318de:	d013      	beq.n	8031908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80318e0:	687b      	ldr	r3, [r7, #4]
 80318e2:	681b      	ldr	r3, [r3, #0]
 80318e4:	4a1f      	ldr	r2, [pc, #124]	; (8031964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80318e6:	4293      	cmp	r3, r2
 80318e8:	d00e      	beq.n	8031908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80318ea:	687b      	ldr	r3, [r7, #4]
 80318ec:	681b      	ldr	r3, [r3, #0]
 80318ee:	4a1e      	ldr	r2, [pc, #120]	; (8031968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80318f0:	4293      	cmp	r3, r2
 80318f2:	d009      	beq.n	8031908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80318f4:	687b      	ldr	r3, [r7, #4]
 80318f6:	681b      	ldr	r3, [r3, #0]
 80318f8:	4a1c      	ldr	r2, [pc, #112]	; (803196c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80318fa:	4293      	cmp	r3, r2
 80318fc:	d004      	beq.n	8031908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80318fe:	687b      	ldr	r3, [r7, #4]
 8031900:	681b      	ldr	r3, [r3, #0]
 8031902:	4a1b      	ldr	r2, [pc, #108]	; (8031970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8031904:	4293      	cmp	r3, r2
 8031906:	d101      	bne.n	803190c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8031908:	2301      	movs	r3, #1
 803190a:	e000      	b.n	803190e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 803190c:	2300      	movs	r3, #0
 803190e:	2b00      	cmp	r3, #0
 8031910:	d00a      	beq.n	8031928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8031912:	68fa      	ldr	r2, [r7, #12]
 8031914:	4b17      	ldr	r3, [pc, #92]	; (8031974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8031916:	4413      	add	r3, r2
 8031918:	009b      	lsls	r3, r3, #2
 803191a:	461a      	mov	r2, r3
 803191c:	687b      	ldr	r3, [r7, #4]
 803191e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8031920:	687b      	ldr	r3, [r7, #4]
 8031922:	4a15      	ldr	r2, [pc, #84]	; (8031978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8031924:	671a      	str	r2, [r3, #112]	; 0x70
 8031926:	e009      	b.n	803193c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8031928:	68fa      	ldr	r2, [r7, #12]
 803192a:	4b14      	ldr	r3, [pc, #80]	; (803197c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 803192c:	4413      	add	r3, r2
 803192e:	009b      	lsls	r3, r3, #2
 8031930:	461a      	mov	r2, r3
 8031932:	687b      	ldr	r3, [r7, #4]
 8031934:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8031936:	687b      	ldr	r3, [r7, #4]
 8031938:	4a11      	ldr	r2, [pc, #68]	; (8031980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 803193a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 803193c:	68fb      	ldr	r3, [r7, #12]
 803193e:	3b01      	subs	r3, #1
 8031940:	2201      	movs	r2, #1
 8031942:	409a      	lsls	r2, r3
 8031944:	687b      	ldr	r3, [r7, #4]
 8031946:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8031948:	bf00      	nop
 803194a:	3714      	adds	r7, #20
 803194c:	46bd      	mov	sp, r7
 803194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031952:	4770      	bx	lr
 8031954:	58025408 	.word	0x58025408
 8031958:	5802541c 	.word	0x5802541c
 803195c:	58025430 	.word	0x58025430
 8031960:	58025444 	.word	0x58025444
 8031964:	58025458 	.word	0x58025458
 8031968:	5802546c 	.word	0x5802546c
 803196c:	58025480 	.word	0x58025480
 8031970:	58025494 	.word	0x58025494
 8031974:	1600963f 	.word	0x1600963f
 8031978:	58025940 	.word	0x58025940
 803197c:	1000823f 	.word	0x1000823f
 8031980:	40020940 	.word	0x40020940

08031984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8031984:	b480      	push	{r7}
 8031986:	b089      	sub	sp, #36	; 0x24
 8031988:	af00      	add	r7, sp, #0
 803198a:	6078      	str	r0, [r7, #4]
 803198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 803198e:	2300      	movs	r3, #0
 8031990:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8031992:	4b89      	ldr	r3, [pc, #548]	; (8031bb8 <HAL_GPIO_Init+0x234>)
 8031994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8031996:	e194      	b.n	8031cc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8031998:	683b      	ldr	r3, [r7, #0]
 803199a:	681a      	ldr	r2, [r3, #0]
 803199c:	2101      	movs	r1, #1
 803199e:	69fb      	ldr	r3, [r7, #28]
 80319a0:	fa01 f303 	lsl.w	r3, r1, r3
 80319a4:	4013      	ands	r3, r2
 80319a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80319a8:	693b      	ldr	r3, [r7, #16]
 80319aa:	2b00      	cmp	r3, #0
 80319ac:	f000 8186 	beq.w	8031cbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80319b0:	683b      	ldr	r3, [r7, #0]
 80319b2:	685b      	ldr	r3, [r3, #4]
 80319b4:	f003 0303 	and.w	r3, r3, #3
 80319b8:	2b01      	cmp	r3, #1
 80319ba:	d005      	beq.n	80319c8 <HAL_GPIO_Init+0x44>
 80319bc:	683b      	ldr	r3, [r7, #0]
 80319be:	685b      	ldr	r3, [r3, #4]
 80319c0:	f003 0303 	and.w	r3, r3, #3
 80319c4:	2b02      	cmp	r3, #2
 80319c6:	d130      	bne.n	8031a2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80319c8:	687b      	ldr	r3, [r7, #4]
 80319ca:	689b      	ldr	r3, [r3, #8]
 80319cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80319ce:	69fb      	ldr	r3, [r7, #28]
 80319d0:	005b      	lsls	r3, r3, #1
 80319d2:	2203      	movs	r2, #3
 80319d4:	fa02 f303 	lsl.w	r3, r2, r3
 80319d8:	43db      	mvns	r3, r3
 80319da:	69ba      	ldr	r2, [r7, #24]
 80319dc:	4013      	ands	r3, r2
 80319de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80319e0:	683b      	ldr	r3, [r7, #0]
 80319e2:	68da      	ldr	r2, [r3, #12]
 80319e4:	69fb      	ldr	r3, [r7, #28]
 80319e6:	005b      	lsls	r3, r3, #1
 80319e8:	fa02 f303 	lsl.w	r3, r2, r3
 80319ec:	69ba      	ldr	r2, [r7, #24]
 80319ee:	4313      	orrs	r3, r2
 80319f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80319f2:	687b      	ldr	r3, [r7, #4]
 80319f4:	69ba      	ldr	r2, [r7, #24]
 80319f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80319f8:	687b      	ldr	r3, [r7, #4]
 80319fa:	685b      	ldr	r3, [r3, #4]
 80319fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80319fe:	2201      	movs	r2, #1
 8031a00:	69fb      	ldr	r3, [r7, #28]
 8031a02:	fa02 f303 	lsl.w	r3, r2, r3
 8031a06:	43db      	mvns	r3, r3
 8031a08:	69ba      	ldr	r2, [r7, #24]
 8031a0a:	4013      	ands	r3, r2
 8031a0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8031a0e:	683b      	ldr	r3, [r7, #0]
 8031a10:	685b      	ldr	r3, [r3, #4]
 8031a12:	091b      	lsrs	r3, r3, #4
 8031a14:	f003 0201 	and.w	r2, r3, #1
 8031a18:	69fb      	ldr	r3, [r7, #28]
 8031a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8031a1e:	69ba      	ldr	r2, [r7, #24]
 8031a20:	4313      	orrs	r3, r2
 8031a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8031a24:	687b      	ldr	r3, [r7, #4]
 8031a26:	69ba      	ldr	r2, [r7, #24]
 8031a28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8031a2a:	683b      	ldr	r3, [r7, #0]
 8031a2c:	685b      	ldr	r3, [r3, #4]
 8031a2e:	f003 0303 	and.w	r3, r3, #3
 8031a32:	2b03      	cmp	r3, #3
 8031a34:	d017      	beq.n	8031a66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8031a36:	687b      	ldr	r3, [r7, #4]
 8031a38:	68db      	ldr	r3, [r3, #12]
 8031a3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8031a3c:	69fb      	ldr	r3, [r7, #28]
 8031a3e:	005b      	lsls	r3, r3, #1
 8031a40:	2203      	movs	r2, #3
 8031a42:	fa02 f303 	lsl.w	r3, r2, r3
 8031a46:	43db      	mvns	r3, r3
 8031a48:	69ba      	ldr	r2, [r7, #24]
 8031a4a:	4013      	ands	r3, r2
 8031a4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8031a4e:	683b      	ldr	r3, [r7, #0]
 8031a50:	689a      	ldr	r2, [r3, #8]
 8031a52:	69fb      	ldr	r3, [r7, #28]
 8031a54:	005b      	lsls	r3, r3, #1
 8031a56:	fa02 f303 	lsl.w	r3, r2, r3
 8031a5a:	69ba      	ldr	r2, [r7, #24]
 8031a5c:	4313      	orrs	r3, r2
 8031a5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8031a60:	687b      	ldr	r3, [r7, #4]
 8031a62:	69ba      	ldr	r2, [r7, #24]
 8031a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8031a66:	683b      	ldr	r3, [r7, #0]
 8031a68:	685b      	ldr	r3, [r3, #4]
 8031a6a:	f003 0303 	and.w	r3, r3, #3
 8031a6e:	2b02      	cmp	r3, #2
 8031a70:	d123      	bne.n	8031aba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8031a72:	69fb      	ldr	r3, [r7, #28]
 8031a74:	08da      	lsrs	r2, r3, #3
 8031a76:	687b      	ldr	r3, [r7, #4]
 8031a78:	3208      	adds	r2, #8
 8031a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8031a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8031a80:	69fb      	ldr	r3, [r7, #28]
 8031a82:	f003 0307 	and.w	r3, r3, #7
 8031a86:	009b      	lsls	r3, r3, #2
 8031a88:	220f      	movs	r2, #15
 8031a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8031a8e:	43db      	mvns	r3, r3
 8031a90:	69ba      	ldr	r2, [r7, #24]
 8031a92:	4013      	ands	r3, r2
 8031a94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8031a96:	683b      	ldr	r3, [r7, #0]
 8031a98:	691a      	ldr	r2, [r3, #16]
 8031a9a:	69fb      	ldr	r3, [r7, #28]
 8031a9c:	f003 0307 	and.w	r3, r3, #7
 8031aa0:	009b      	lsls	r3, r3, #2
 8031aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8031aa6:	69ba      	ldr	r2, [r7, #24]
 8031aa8:	4313      	orrs	r3, r2
 8031aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8031aac:	69fb      	ldr	r3, [r7, #28]
 8031aae:	08da      	lsrs	r2, r3, #3
 8031ab0:	687b      	ldr	r3, [r7, #4]
 8031ab2:	3208      	adds	r2, #8
 8031ab4:	69b9      	ldr	r1, [r7, #24]
 8031ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8031aba:	687b      	ldr	r3, [r7, #4]
 8031abc:	681b      	ldr	r3, [r3, #0]
 8031abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8031ac0:	69fb      	ldr	r3, [r7, #28]
 8031ac2:	005b      	lsls	r3, r3, #1
 8031ac4:	2203      	movs	r2, #3
 8031ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8031aca:	43db      	mvns	r3, r3
 8031acc:	69ba      	ldr	r2, [r7, #24]
 8031ace:	4013      	ands	r3, r2
 8031ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8031ad2:	683b      	ldr	r3, [r7, #0]
 8031ad4:	685b      	ldr	r3, [r3, #4]
 8031ad6:	f003 0203 	and.w	r2, r3, #3
 8031ada:	69fb      	ldr	r3, [r7, #28]
 8031adc:	005b      	lsls	r3, r3, #1
 8031ade:	fa02 f303 	lsl.w	r3, r2, r3
 8031ae2:	69ba      	ldr	r2, [r7, #24]
 8031ae4:	4313      	orrs	r3, r2
 8031ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8031ae8:	687b      	ldr	r3, [r7, #4]
 8031aea:	69ba      	ldr	r2, [r7, #24]
 8031aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8031aee:	683b      	ldr	r3, [r7, #0]
 8031af0:	685b      	ldr	r3, [r3, #4]
 8031af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8031af6:	2b00      	cmp	r3, #0
 8031af8:	f000 80e0 	beq.w	8031cbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8031afc:	4b2f      	ldr	r3, [pc, #188]	; (8031bbc <HAL_GPIO_Init+0x238>)
 8031afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8031b02:	4a2e      	ldr	r2, [pc, #184]	; (8031bbc <HAL_GPIO_Init+0x238>)
 8031b04:	f043 0302 	orr.w	r3, r3, #2
 8031b08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8031b0c:	4b2b      	ldr	r3, [pc, #172]	; (8031bbc <HAL_GPIO_Init+0x238>)
 8031b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8031b12:	f003 0302 	and.w	r3, r3, #2
 8031b16:	60fb      	str	r3, [r7, #12]
 8031b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8031b1a:	4a29      	ldr	r2, [pc, #164]	; (8031bc0 <HAL_GPIO_Init+0x23c>)
 8031b1c:	69fb      	ldr	r3, [r7, #28]
 8031b1e:	089b      	lsrs	r3, r3, #2
 8031b20:	3302      	adds	r3, #2
 8031b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8031b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8031b28:	69fb      	ldr	r3, [r7, #28]
 8031b2a:	f003 0303 	and.w	r3, r3, #3
 8031b2e:	009b      	lsls	r3, r3, #2
 8031b30:	220f      	movs	r2, #15
 8031b32:	fa02 f303 	lsl.w	r3, r2, r3
 8031b36:	43db      	mvns	r3, r3
 8031b38:	69ba      	ldr	r2, [r7, #24]
 8031b3a:	4013      	ands	r3, r2
 8031b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8031b3e:	687b      	ldr	r3, [r7, #4]
 8031b40:	4a20      	ldr	r2, [pc, #128]	; (8031bc4 <HAL_GPIO_Init+0x240>)
 8031b42:	4293      	cmp	r3, r2
 8031b44:	d052      	beq.n	8031bec <HAL_GPIO_Init+0x268>
 8031b46:	687b      	ldr	r3, [r7, #4]
 8031b48:	4a1f      	ldr	r2, [pc, #124]	; (8031bc8 <HAL_GPIO_Init+0x244>)
 8031b4a:	4293      	cmp	r3, r2
 8031b4c:	d031      	beq.n	8031bb2 <HAL_GPIO_Init+0x22e>
 8031b4e:	687b      	ldr	r3, [r7, #4]
 8031b50:	4a1e      	ldr	r2, [pc, #120]	; (8031bcc <HAL_GPIO_Init+0x248>)
 8031b52:	4293      	cmp	r3, r2
 8031b54:	d02b      	beq.n	8031bae <HAL_GPIO_Init+0x22a>
 8031b56:	687b      	ldr	r3, [r7, #4]
 8031b58:	4a1d      	ldr	r2, [pc, #116]	; (8031bd0 <HAL_GPIO_Init+0x24c>)
 8031b5a:	4293      	cmp	r3, r2
 8031b5c:	d025      	beq.n	8031baa <HAL_GPIO_Init+0x226>
 8031b5e:	687b      	ldr	r3, [r7, #4]
 8031b60:	4a1c      	ldr	r2, [pc, #112]	; (8031bd4 <HAL_GPIO_Init+0x250>)
 8031b62:	4293      	cmp	r3, r2
 8031b64:	d01f      	beq.n	8031ba6 <HAL_GPIO_Init+0x222>
 8031b66:	687b      	ldr	r3, [r7, #4]
 8031b68:	4a1b      	ldr	r2, [pc, #108]	; (8031bd8 <HAL_GPIO_Init+0x254>)
 8031b6a:	4293      	cmp	r3, r2
 8031b6c:	d019      	beq.n	8031ba2 <HAL_GPIO_Init+0x21e>
 8031b6e:	687b      	ldr	r3, [r7, #4]
 8031b70:	4a1a      	ldr	r2, [pc, #104]	; (8031bdc <HAL_GPIO_Init+0x258>)
 8031b72:	4293      	cmp	r3, r2
 8031b74:	d013      	beq.n	8031b9e <HAL_GPIO_Init+0x21a>
 8031b76:	687b      	ldr	r3, [r7, #4]
 8031b78:	4a19      	ldr	r2, [pc, #100]	; (8031be0 <HAL_GPIO_Init+0x25c>)
 8031b7a:	4293      	cmp	r3, r2
 8031b7c:	d00d      	beq.n	8031b9a <HAL_GPIO_Init+0x216>
 8031b7e:	687b      	ldr	r3, [r7, #4]
 8031b80:	4a18      	ldr	r2, [pc, #96]	; (8031be4 <HAL_GPIO_Init+0x260>)
 8031b82:	4293      	cmp	r3, r2
 8031b84:	d007      	beq.n	8031b96 <HAL_GPIO_Init+0x212>
 8031b86:	687b      	ldr	r3, [r7, #4]
 8031b88:	4a17      	ldr	r2, [pc, #92]	; (8031be8 <HAL_GPIO_Init+0x264>)
 8031b8a:	4293      	cmp	r3, r2
 8031b8c:	d101      	bne.n	8031b92 <HAL_GPIO_Init+0x20e>
 8031b8e:	2309      	movs	r3, #9
 8031b90:	e02d      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031b92:	230a      	movs	r3, #10
 8031b94:	e02b      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031b96:	2308      	movs	r3, #8
 8031b98:	e029      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031b9a:	2307      	movs	r3, #7
 8031b9c:	e027      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031b9e:	2306      	movs	r3, #6
 8031ba0:	e025      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031ba2:	2305      	movs	r3, #5
 8031ba4:	e023      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031ba6:	2304      	movs	r3, #4
 8031ba8:	e021      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031baa:	2303      	movs	r3, #3
 8031bac:	e01f      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031bae:	2302      	movs	r3, #2
 8031bb0:	e01d      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031bb2:	2301      	movs	r3, #1
 8031bb4:	e01b      	b.n	8031bee <HAL_GPIO_Init+0x26a>
 8031bb6:	bf00      	nop
 8031bb8:	58000080 	.word	0x58000080
 8031bbc:	58024400 	.word	0x58024400
 8031bc0:	58000400 	.word	0x58000400
 8031bc4:	58020000 	.word	0x58020000
 8031bc8:	58020400 	.word	0x58020400
 8031bcc:	58020800 	.word	0x58020800
 8031bd0:	58020c00 	.word	0x58020c00
 8031bd4:	58021000 	.word	0x58021000
 8031bd8:	58021400 	.word	0x58021400
 8031bdc:	58021800 	.word	0x58021800
 8031be0:	58021c00 	.word	0x58021c00
 8031be4:	58022000 	.word	0x58022000
 8031be8:	58022400 	.word	0x58022400
 8031bec:	2300      	movs	r3, #0
 8031bee:	69fa      	ldr	r2, [r7, #28]
 8031bf0:	f002 0203 	and.w	r2, r2, #3
 8031bf4:	0092      	lsls	r2, r2, #2
 8031bf6:	4093      	lsls	r3, r2
 8031bf8:	69ba      	ldr	r2, [r7, #24]
 8031bfa:	4313      	orrs	r3, r2
 8031bfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8031bfe:	4938      	ldr	r1, [pc, #224]	; (8031ce0 <HAL_GPIO_Init+0x35c>)
 8031c00:	69fb      	ldr	r3, [r7, #28]
 8031c02:	089b      	lsrs	r3, r3, #2
 8031c04:	3302      	adds	r3, #2
 8031c06:	69ba      	ldr	r2, [r7, #24]
 8031c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8031c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8031c10:	681b      	ldr	r3, [r3, #0]
 8031c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8031c14:	693b      	ldr	r3, [r7, #16]
 8031c16:	43db      	mvns	r3, r3
 8031c18:	69ba      	ldr	r2, [r7, #24]
 8031c1a:	4013      	ands	r3, r2
 8031c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8031c1e:	683b      	ldr	r3, [r7, #0]
 8031c20:	685b      	ldr	r3, [r3, #4]
 8031c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8031c26:	2b00      	cmp	r3, #0
 8031c28:	d003      	beq.n	8031c32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8031c2a:	69ba      	ldr	r2, [r7, #24]
 8031c2c:	693b      	ldr	r3, [r7, #16]
 8031c2e:	4313      	orrs	r3, r2
 8031c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8031c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8031c36:	69bb      	ldr	r3, [r7, #24]
 8031c38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8031c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8031c3e:	685b      	ldr	r3, [r3, #4]
 8031c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8031c42:	693b      	ldr	r3, [r7, #16]
 8031c44:	43db      	mvns	r3, r3
 8031c46:	69ba      	ldr	r2, [r7, #24]
 8031c48:	4013      	ands	r3, r2
 8031c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8031c4c:	683b      	ldr	r3, [r7, #0]
 8031c4e:	685b      	ldr	r3, [r3, #4]
 8031c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8031c54:	2b00      	cmp	r3, #0
 8031c56:	d003      	beq.n	8031c60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8031c58:	69ba      	ldr	r2, [r7, #24]
 8031c5a:	693b      	ldr	r3, [r7, #16]
 8031c5c:	4313      	orrs	r3, r2
 8031c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8031c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8031c64:	69bb      	ldr	r3, [r7, #24]
 8031c66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8031c68:	697b      	ldr	r3, [r7, #20]
 8031c6a:	685b      	ldr	r3, [r3, #4]
 8031c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8031c6e:	693b      	ldr	r3, [r7, #16]
 8031c70:	43db      	mvns	r3, r3
 8031c72:	69ba      	ldr	r2, [r7, #24]
 8031c74:	4013      	ands	r3, r2
 8031c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8031c78:	683b      	ldr	r3, [r7, #0]
 8031c7a:	685b      	ldr	r3, [r3, #4]
 8031c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8031c80:	2b00      	cmp	r3, #0
 8031c82:	d003      	beq.n	8031c8c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8031c84:	69ba      	ldr	r2, [r7, #24]
 8031c86:	693b      	ldr	r3, [r7, #16]
 8031c88:	4313      	orrs	r3, r2
 8031c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8031c8c:	697b      	ldr	r3, [r7, #20]
 8031c8e:	69ba      	ldr	r2, [r7, #24]
 8031c90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8031c92:	697b      	ldr	r3, [r7, #20]
 8031c94:	681b      	ldr	r3, [r3, #0]
 8031c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8031c98:	693b      	ldr	r3, [r7, #16]
 8031c9a:	43db      	mvns	r3, r3
 8031c9c:	69ba      	ldr	r2, [r7, #24]
 8031c9e:	4013      	ands	r3, r2
 8031ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8031ca2:	683b      	ldr	r3, [r7, #0]
 8031ca4:	685b      	ldr	r3, [r3, #4]
 8031ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8031caa:	2b00      	cmp	r3, #0
 8031cac:	d003      	beq.n	8031cb6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8031cae:	69ba      	ldr	r2, [r7, #24]
 8031cb0:	693b      	ldr	r3, [r7, #16]
 8031cb2:	4313      	orrs	r3, r2
 8031cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8031cb6:	697b      	ldr	r3, [r7, #20]
 8031cb8:	69ba      	ldr	r2, [r7, #24]
 8031cba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8031cbc:	69fb      	ldr	r3, [r7, #28]
 8031cbe:	3301      	adds	r3, #1
 8031cc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8031cc2:	683b      	ldr	r3, [r7, #0]
 8031cc4:	681a      	ldr	r2, [r3, #0]
 8031cc6:	69fb      	ldr	r3, [r7, #28]
 8031cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8031ccc:	2b00      	cmp	r3, #0
 8031cce:	f47f ae63 	bne.w	8031998 <HAL_GPIO_Init+0x14>
  }
}
 8031cd2:	bf00      	nop
 8031cd4:	bf00      	nop
 8031cd6:	3724      	adds	r7, #36	; 0x24
 8031cd8:	46bd      	mov	sp, r7
 8031cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031cde:	4770      	bx	lr
 8031ce0:	58000400 	.word	0x58000400

08031ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8031ce4:	b480      	push	{r7}
 8031ce6:	b083      	sub	sp, #12
 8031ce8:	af00      	add	r7, sp, #0
 8031cea:	6078      	str	r0, [r7, #4]
 8031cec:	460b      	mov	r3, r1
 8031cee:	807b      	strh	r3, [r7, #2]
 8031cf0:	4613      	mov	r3, r2
 8031cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8031cf4:	787b      	ldrb	r3, [r7, #1]
 8031cf6:	2b00      	cmp	r3, #0
 8031cf8:	d003      	beq.n	8031d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8031cfa:	887a      	ldrh	r2, [r7, #2]
 8031cfc:	687b      	ldr	r3, [r7, #4]
 8031cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8031d00:	e003      	b.n	8031d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8031d02:	887b      	ldrh	r3, [r7, #2]
 8031d04:	041a      	lsls	r2, r3, #16
 8031d06:	687b      	ldr	r3, [r7, #4]
 8031d08:	619a      	str	r2, [r3, #24]
}
 8031d0a:	bf00      	nop
 8031d0c:	370c      	adds	r7, #12
 8031d0e:	46bd      	mov	sp, r7
 8031d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031d14:	4770      	bx	lr
	...

08031d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8031d18:	b580      	push	{r7, lr}
 8031d1a:	b082      	sub	sp, #8
 8031d1c:	af00      	add	r7, sp, #0
 8031d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8031d20:	687b      	ldr	r3, [r7, #4]
 8031d22:	2b00      	cmp	r3, #0
 8031d24:	d101      	bne.n	8031d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8031d26:	2301      	movs	r3, #1
 8031d28:	e07f      	b.n	8031e2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8031d2a:	687b      	ldr	r3, [r7, #4]
 8031d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8031d30:	b2db      	uxtb	r3, r3
 8031d32:	2b00      	cmp	r3, #0
 8031d34:	d106      	bne.n	8031d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8031d36:	687b      	ldr	r3, [r7, #4]
 8031d38:	2200      	movs	r2, #0
 8031d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8031d3e:	6878      	ldr	r0, [r7, #4]
 8031d40:	f7fa ff98 	bl	802cc74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8031d44:	687b      	ldr	r3, [r7, #4]
 8031d46:	2224      	movs	r2, #36	; 0x24
 8031d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8031d4c:	687b      	ldr	r3, [r7, #4]
 8031d4e:	681b      	ldr	r3, [r3, #0]
 8031d50:	681a      	ldr	r2, [r3, #0]
 8031d52:	687b      	ldr	r3, [r7, #4]
 8031d54:	681b      	ldr	r3, [r3, #0]
 8031d56:	f022 0201 	bic.w	r2, r2, #1
 8031d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8031d5c:	687b      	ldr	r3, [r7, #4]
 8031d5e:	685a      	ldr	r2, [r3, #4]
 8031d60:	687b      	ldr	r3, [r7, #4]
 8031d62:	681b      	ldr	r3, [r3, #0]
 8031d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8031d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8031d6a:	687b      	ldr	r3, [r7, #4]
 8031d6c:	681b      	ldr	r3, [r3, #0]
 8031d6e:	689a      	ldr	r2, [r3, #8]
 8031d70:	687b      	ldr	r3, [r7, #4]
 8031d72:	681b      	ldr	r3, [r3, #0]
 8031d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8031d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8031d7a:	687b      	ldr	r3, [r7, #4]
 8031d7c:	68db      	ldr	r3, [r3, #12]
 8031d7e:	2b01      	cmp	r3, #1
 8031d80:	d107      	bne.n	8031d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8031d82:	687b      	ldr	r3, [r7, #4]
 8031d84:	689a      	ldr	r2, [r3, #8]
 8031d86:	687b      	ldr	r3, [r7, #4]
 8031d88:	681b      	ldr	r3, [r3, #0]
 8031d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8031d8e:	609a      	str	r2, [r3, #8]
 8031d90:	e006      	b.n	8031da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8031d92:	687b      	ldr	r3, [r7, #4]
 8031d94:	689a      	ldr	r2, [r3, #8]
 8031d96:	687b      	ldr	r3, [r7, #4]
 8031d98:	681b      	ldr	r3, [r3, #0]
 8031d9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8031d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8031da0:	687b      	ldr	r3, [r7, #4]
 8031da2:	68db      	ldr	r3, [r3, #12]
 8031da4:	2b02      	cmp	r3, #2
 8031da6:	d104      	bne.n	8031db2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8031da8:	687b      	ldr	r3, [r7, #4]
 8031daa:	681b      	ldr	r3, [r3, #0]
 8031dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8031db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8031db2:	687b      	ldr	r3, [r7, #4]
 8031db4:	681b      	ldr	r3, [r3, #0]
 8031db6:	6859      	ldr	r1, [r3, #4]
 8031db8:	687b      	ldr	r3, [r7, #4]
 8031dba:	681a      	ldr	r2, [r3, #0]
 8031dbc:	4b1d      	ldr	r3, [pc, #116]	; (8031e34 <HAL_I2C_Init+0x11c>)
 8031dbe:	430b      	orrs	r3, r1
 8031dc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8031dc2:	687b      	ldr	r3, [r7, #4]
 8031dc4:	681b      	ldr	r3, [r3, #0]
 8031dc6:	68da      	ldr	r2, [r3, #12]
 8031dc8:	687b      	ldr	r3, [r7, #4]
 8031dca:	681b      	ldr	r3, [r3, #0]
 8031dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8031dd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8031dd2:	687b      	ldr	r3, [r7, #4]
 8031dd4:	691a      	ldr	r2, [r3, #16]
 8031dd6:	687b      	ldr	r3, [r7, #4]
 8031dd8:	695b      	ldr	r3, [r3, #20]
 8031dda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8031dde:	687b      	ldr	r3, [r7, #4]
 8031de0:	699b      	ldr	r3, [r3, #24]
 8031de2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8031de4:	687b      	ldr	r3, [r7, #4]
 8031de6:	681b      	ldr	r3, [r3, #0]
 8031de8:	430a      	orrs	r2, r1
 8031dea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8031dec:	687b      	ldr	r3, [r7, #4]
 8031dee:	69d9      	ldr	r1, [r3, #28]
 8031df0:	687b      	ldr	r3, [r7, #4]
 8031df2:	6a1a      	ldr	r2, [r3, #32]
 8031df4:	687b      	ldr	r3, [r7, #4]
 8031df6:	681b      	ldr	r3, [r3, #0]
 8031df8:	430a      	orrs	r2, r1
 8031dfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8031dfc:	687b      	ldr	r3, [r7, #4]
 8031dfe:	681b      	ldr	r3, [r3, #0]
 8031e00:	681a      	ldr	r2, [r3, #0]
 8031e02:	687b      	ldr	r3, [r7, #4]
 8031e04:	681b      	ldr	r3, [r3, #0]
 8031e06:	f042 0201 	orr.w	r2, r2, #1
 8031e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8031e0c:	687b      	ldr	r3, [r7, #4]
 8031e0e:	2200      	movs	r2, #0
 8031e10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8031e12:	687b      	ldr	r3, [r7, #4]
 8031e14:	2220      	movs	r2, #32
 8031e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8031e1a:	687b      	ldr	r3, [r7, #4]
 8031e1c:	2200      	movs	r2, #0
 8031e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8031e20:	687b      	ldr	r3, [r7, #4]
 8031e22:	2200      	movs	r2, #0
 8031e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8031e28:	2300      	movs	r3, #0
}
 8031e2a:	4618      	mov	r0, r3
 8031e2c:	3708      	adds	r7, #8
 8031e2e:	46bd      	mov	sp, r7
 8031e30:	bd80      	pop	{r7, pc}
 8031e32:	bf00      	nop
 8031e34:	02008000 	.word	0x02008000

08031e38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8031e38:	b580      	push	{r7, lr}
 8031e3a:	b084      	sub	sp, #16
 8031e3c:	af00      	add	r7, sp, #0
 8031e3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8031e40:	687b      	ldr	r3, [r7, #4]
 8031e42:	681b      	ldr	r3, [r3, #0]
 8031e44:	699b      	ldr	r3, [r3, #24]
 8031e46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8031e48:	687b      	ldr	r3, [r7, #4]
 8031e4a:	681b      	ldr	r3, [r3, #0]
 8031e4c:	681b      	ldr	r3, [r3, #0]
 8031e4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8031e50:	687b      	ldr	r3, [r7, #4]
 8031e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031e54:	2b00      	cmp	r3, #0
 8031e56:	d005      	beq.n	8031e64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8031e58:	687b      	ldr	r3, [r7, #4]
 8031e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031e5c:	68ba      	ldr	r2, [r7, #8]
 8031e5e:	68f9      	ldr	r1, [r7, #12]
 8031e60:	6878      	ldr	r0, [r7, #4]
 8031e62:	4798      	blx	r3
  }
}
 8031e64:	bf00      	nop
 8031e66:	3710      	adds	r7, #16
 8031e68:	46bd      	mov	sp, r7
 8031e6a:	bd80      	pop	{r7, pc}

08031e6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8031e6c:	b580      	push	{r7, lr}
 8031e6e:	b086      	sub	sp, #24
 8031e70:	af00      	add	r7, sp, #0
 8031e72:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8031e74:	687b      	ldr	r3, [r7, #4]
 8031e76:	681b      	ldr	r3, [r3, #0]
 8031e78:	699b      	ldr	r3, [r3, #24]
 8031e7a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8031e7c:	687b      	ldr	r3, [r7, #4]
 8031e7e:	681b      	ldr	r3, [r3, #0]
 8031e80:	681b      	ldr	r3, [r3, #0]
 8031e82:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8031e84:	697b      	ldr	r3, [r7, #20]
 8031e86:	0a1b      	lsrs	r3, r3, #8
 8031e88:	f003 0301 	and.w	r3, r3, #1
 8031e8c:	2b00      	cmp	r3, #0
 8031e8e:	d010      	beq.n	8031eb2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8031e90:	693b      	ldr	r3, [r7, #16]
 8031e92:	09db      	lsrs	r3, r3, #7
 8031e94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8031e98:	2b00      	cmp	r3, #0
 8031e9a:	d00a      	beq.n	8031eb2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8031e9c:	687b      	ldr	r3, [r7, #4]
 8031e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031ea0:	f043 0201 	orr.w	r2, r3, #1
 8031ea4:	687b      	ldr	r3, [r7, #4]
 8031ea6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8031ea8:	687b      	ldr	r3, [r7, #4]
 8031eaa:	681b      	ldr	r3, [r3, #0]
 8031eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8031eb0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8031eb2:	697b      	ldr	r3, [r7, #20]
 8031eb4:	0a9b      	lsrs	r3, r3, #10
 8031eb6:	f003 0301 	and.w	r3, r3, #1
 8031eba:	2b00      	cmp	r3, #0
 8031ebc:	d010      	beq.n	8031ee0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8031ebe:	693b      	ldr	r3, [r7, #16]
 8031ec0:	09db      	lsrs	r3, r3, #7
 8031ec2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8031ec6:	2b00      	cmp	r3, #0
 8031ec8:	d00a      	beq.n	8031ee0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8031eca:	687b      	ldr	r3, [r7, #4]
 8031ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031ece:	f043 0208 	orr.w	r2, r3, #8
 8031ed2:	687b      	ldr	r3, [r7, #4]
 8031ed4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8031ed6:	687b      	ldr	r3, [r7, #4]
 8031ed8:	681b      	ldr	r3, [r3, #0]
 8031eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8031ede:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8031ee0:	697b      	ldr	r3, [r7, #20]
 8031ee2:	0a5b      	lsrs	r3, r3, #9
 8031ee4:	f003 0301 	and.w	r3, r3, #1
 8031ee8:	2b00      	cmp	r3, #0
 8031eea:	d010      	beq.n	8031f0e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8031eec:	693b      	ldr	r3, [r7, #16]
 8031eee:	09db      	lsrs	r3, r3, #7
 8031ef0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8031ef4:	2b00      	cmp	r3, #0
 8031ef6:	d00a      	beq.n	8031f0e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8031ef8:	687b      	ldr	r3, [r7, #4]
 8031efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031efc:	f043 0202 	orr.w	r2, r3, #2
 8031f00:	687b      	ldr	r3, [r7, #4]
 8031f02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8031f04:	687b      	ldr	r3, [r7, #4]
 8031f06:	681b      	ldr	r3, [r3, #0]
 8031f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8031f0c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8031f0e:	687b      	ldr	r3, [r7, #4]
 8031f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031f12:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8031f14:	68fb      	ldr	r3, [r7, #12]
 8031f16:	f003 030b 	and.w	r3, r3, #11
 8031f1a:	2b00      	cmp	r3, #0
 8031f1c:	d003      	beq.n	8031f26 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8031f1e:	68f9      	ldr	r1, [r7, #12]
 8031f20:	6878      	ldr	r0, [r7, #4]
 8031f22:	f000 fc77 	bl	8032814 <I2C_ITError>
  }
}
 8031f26:	bf00      	nop
 8031f28:	3718      	adds	r7, #24
 8031f2a:	46bd      	mov	sp, r7
 8031f2c:	bd80      	pop	{r7, pc}

08031f2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031f2e:	b480      	push	{r7}
 8031f30:	b083      	sub	sp, #12
 8031f32:	af00      	add	r7, sp, #0
 8031f34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8031f36:	bf00      	nop
 8031f38:	370c      	adds	r7, #12
 8031f3a:	46bd      	mov	sp, r7
 8031f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f40:	4770      	bx	lr

08031f42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031f42:	b480      	push	{r7}
 8031f44:	b083      	sub	sp, #12
 8031f46:	af00      	add	r7, sp, #0
 8031f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8031f4a:	bf00      	nop
 8031f4c:	370c      	adds	r7, #12
 8031f4e:	46bd      	mov	sp, r7
 8031f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f54:	4770      	bx	lr

08031f56 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8031f56:	b480      	push	{r7}
 8031f58:	b083      	sub	sp, #12
 8031f5a:	af00      	add	r7, sp, #0
 8031f5c:	6078      	str	r0, [r7, #4]
 8031f5e:	460b      	mov	r3, r1
 8031f60:	70fb      	strb	r3, [r7, #3]
 8031f62:	4613      	mov	r3, r2
 8031f64:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8031f66:	bf00      	nop
 8031f68:	370c      	adds	r7, #12
 8031f6a:	46bd      	mov	sp, r7
 8031f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f70:	4770      	bx	lr

08031f72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031f72:	b480      	push	{r7}
 8031f74:	b083      	sub	sp, #12
 8031f76:	af00      	add	r7, sp, #0
 8031f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8031f7a:	bf00      	nop
 8031f7c:	370c      	adds	r7, #12
 8031f7e:	46bd      	mov	sp, r7
 8031f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f84:	4770      	bx	lr

08031f86 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8031f86:	b480      	push	{r7}
 8031f88:	b083      	sub	sp, #12
 8031f8a:	af00      	add	r7, sp, #0
 8031f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8031f8e:	bf00      	nop
 8031f90:	370c      	adds	r7, #12
 8031f92:	46bd      	mov	sp, r7
 8031f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031f98:	4770      	bx	lr

08031f9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8031f9a:	b480      	push	{r7}
 8031f9c:	b083      	sub	sp, #12
 8031f9e:	af00      	add	r7, sp, #0
 8031fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8031fa2:	bf00      	nop
 8031fa4:	370c      	adds	r7, #12
 8031fa6:	46bd      	mov	sp, r7
 8031fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031fac:	4770      	bx	lr

08031fae <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8031fae:	b580      	push	{r7, lr}
 8031fb0:	b086      	sub	sp, #24
 8031fb2:	af00      	add	r7, sp, #0
 8031fb4:	60f8      	str	r0, [r7, #12]
 8031fb6:	60b9      	str	r1, [r7, #8]
 8031fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8031fba:	68fb      	ldr	r3, [r7, #12]
 8031fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031fbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8031fc0:	68bb      	ldr	r3, [r7, #8]
 8031fc2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8031fc4:	68fb      	ldr	r3, [r7, #12]
 8031fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8031fca:	2b01      	cmp	r3, #1
 8031fcc:	d101      	bne.n	8031fd2 <I2C_Slave_ISR_IT+0x24>
 8031fce:	2302      	movs	r3, #2
 8031fd0:	e0ec      	b.n	80321ac <I2C_Slave_ISR_IT+0x1fe>
 8031fd2:	68fb      	ldr	r3, [r7, #12]
 8031fd4:	2201      	movs	r2, #1
 8031fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8031fda:	693b      	ldr	r3, [r7, #16]
 8031fdc:	095b      	lsrs	r3, r3, #5
 8031fde:	f003 0301 	and.w	r3, r3, #1
 8031fe2:	2b00      	cmp	r3, #0
 8031fe4:	d009      	beq.n	8031ffa <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8031fe6:	687b      	ldr	r3, [r7, #4]
 8031fe8:	095b      	lsrs	r3, r3, #5
 8031fea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8031fee:	2b00      	cmp	r3, #0
 8031ff0:	d003      	beq.n	8031ffa <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8031ff2:	6939      	ldr	r1, [r7, #16]
 8031ff4:	68f8      	ldr	r0, [r7, #12]
 8031ff6:	f000 f9bf 	bl	8032378 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8031ffa:	693b      	ldr	r3, [r7, #16]
 8031ffc:	091b      	lsrs	r3, r3, #4
 8031ffe:	f003 0301 	and.w	r3, r3, #1
 8032002:	2b00      	cmp	r3, #0
 8032004:	d04d      	beq.n	80320a2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8032006:	687b      	ldr	r3, [r7, #4]
 8032008:	091b      	lsrs	r3, r3, #4
 803200a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 803200e:	2b00      	cmp	r3, #0
 8032010:	d047      	beq.n	80320a2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8032012:	68fb      	ldr	r3, [r7, #12]
 8032014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032016:	b29b      	uxth	r3, r3
 8032018:	2b00      	cmp	r3, #0
 803201a:	d128      	bne.n	803206e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 803201c:	68fb      	ldr	r3, [r7, #12]
 803201e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032022:	b2db      	uxtb	r3, r3
 8032024:	2b28      	cmp	r3, #40	; 0x28
 8032026:	d108      	bne.n	803203a <I2C_Slave_ISR_IT+0x8c>
 8032028:	697b      	ldr	r3, [r7, #20]
 803202a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 803202e:	d104      	bne.n	803203a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8032030:	6939      	ldr	r1, [r7, #16]
 8032032:	68f8      	ldr	r0, [r7, #12]
 8032034:	f000 fb98 	bl	8032768 <I2C_ITListenCplt>
 8032038:	e032      	b.n	80320a0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 803203a:	68fb      	ldr	r3, [r7, #12]
 803203c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032040:	b2db      	uxtb	r3, r3
 8032042:	2b29      	cmp	r3, #41	; 0x29
 8032044:	d10e      	bne.n	8032064 <I2C_Slave_ISR_IT+0xb6>
 8032046:	697b      	ldr	r3, [r7, #20]
 8032048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 803204c:	d00a      	beq.n	8032064 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 803204e:	68fb      	ldr	r3, [r7, #12]
 8032050:	681b      	ldr	r3, [r3, #0]
 8032052:	2210      	movs	r2, #16
 8032054:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8032056:	68f8      	ldr	r0, [r7, #12]
 8032058:	f000 fcd3 	bl	8032a02 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 803205c:	68f8      	ldr	r0, [r7, #12]
 803205e:	f000 f92d 	bl	80322bc <I2C_ITSlaveSeqCplt>
 8032062:	e01d      	b.n	80320a0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8032064:	68fb      	ldr	r3, [r7, #12]
 8032066:	681b      	ldr	r3, [r3, #0]
 8032068:	2210      	movs	r2, #16
 803206a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 803206c:	e096      	b.n	803219c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 803206e:	68fb      	ldr	r3, [r7, #12]
 8032070:	681b      	ldr	r3, [r3, #0]
 8032072:	2210      	movs	r2, #16
 8032074:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8032076:	68fb      	ldr	r3, [r7, #12]
 8032078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803207a:	f043 0204 	orr.w	r2, r3, #4
 803207e:	68fb      	ldr	r3, [r7, #12]
 8032080:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8032082:	697b      	ldr	r3, [r7, #20]
 8032084:	2b00      	cmp	r3, #0
 8032086:	d004      	beq.n	8032092 <I2C_Slave_ISR_IT+0xe4>
 8032088:	697b      	ldr	r3, [r7, #20]
 803208a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 803208e:	f040 8085 	bne.w	803219c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8032092:	68fb      	ldr	r3, [r7, #12]
 8032094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032096:	4619      	mov	r1, r3
 8032098:	68f8      	ldr	r0, [r7, #12]
 803209a:	f000 fbbb 	bl	8032814 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 803209e:	e07d      	b.n	803219c <I2C_Slave_ISR_IT+0x1ee>
 80320a0:	e07c      	b.n	803219c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80320a2:	693b      	ldr	r3, [r7, #16]
 80320a4:	089b      	lsrs	r3, r3, #2
 80320a6:	f003 0301 	and.w	r3, r3, #1
 80320aa:	2b00      	cmp	r3, #0
 80320ac:	d030      	beq.n	8032110 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80320ae:	687b      	ldr	r3, [r7, #4]
 80320b0:	089b      	lsrs	r3, r3, #2
 80320b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80320b6:	2b00      	cmp	r3, #0
 80320b8:	d02a      	beq.n	8032110 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80320ba:	68fb      	ldr	r3, [r7, #12]
 80320bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80320be:	b29b      	uxth	r3, r3
 80320c0:	2b00      	cmp	r3, #0
 80320c2:	d018      	beq.n	80320f6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80320c4:	68fb      	ldr	r3, [r7, #12]
 80320c6:	681b      	ldr	r3, [r3, #0]
 80320c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80320ca:	68fb      	ldr	r3, [r7, #12]
 80320cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80320ce:	b2d2      	uxtb	r2, r2
 80320d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80320d2:	68fb      	ldr	r3, [r7, #12]
 80320d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80320d6:	1c5a      	adds	r2, r3, #1
 80320d8:	68fb      	ldr	r3, [r7, #12]
 80320da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80320dc:	68fb      	ldr	r3, [r7, #12]
 80320de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80320e0:	3b01      	subs	r3, #1
 80320e2:	b29a      	uxth	r2, r3
 80320e4:	68fb      	ldr	r3, [r7, #12]
 80320e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80320e8:	68fb      	ldr	r3, [r7, #12]
 80320ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80320ec:	b29b      	uxth	r3, r3
 80320ee:	3b01      	subs	r3, #1
 80320f0:	b29a      	uxth	r2, r3
 80320f2:	68fb      	ldr	r3, [r7, #12]
 80320f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80320f6:	68fb      	ldr	r3, [r7, #12]
 80320f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80320fa:	b29b      	uxth	r3, r3
 80320fc:	2b00      	cmp	r3, #0
 80320fe:	d14f      	bne.n	80321a0 <I2C_Slave_ISR_IT+0x1f2>
 8032100:	697b      	ldr	r3, [r7, #20]
 8032102:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8032106:	d04b      	beq.n	80321a0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8032108:	68f8      	ldr	r0, [r7, #12]
 803210a:	f000 f8d7 	bl	80322bc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 803210e:	e047      	b.n	80321a0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8032110:	693b      	ldr	r3, [r7, #16]
 8032112:	08db      	lsrs	r3, r3, #3
 8032114:	f003 0301 	and.w	r3, r3, #1
 8032118:	2b00      	cmp	r3, #0
 803211a:	d00a      	beq.n	8032132 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 803211c:	687b      	ldr	r3, [r7, #4]
 803211e:	08db      	lsrs	r3, r3, #3
 8032120:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8032124:	2b00      	cmp	r3, #0
 8032126:	d004      	beq.n	8032132 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8032128:	6939      	ldr	r1, [r7, #16]
 803212a:	68f8      	ldr	r0, [r7, #12]
 803212c:	f000 f842 	bl	80321b4 <I2C_ITAddrCplt>
 8032130:	e037      	b.n	80321a2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8032132:	693b      	ldr	r3, [r7, #16]
 8032134:	085b      	lsrs	r3, r3, #1
 8032136:	f003 0301 	and.w	r3, r3, #1
 803213a:	2b00      	cmp	r3, #0
 803213c:	d031      	beq.n	80321a2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 803213e:	687b      	ldr	r3, [r7, #4]
 8032140:	085b      	lsrs	r3, r3, #1
 8032142:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8032146:	2b00      	cmp	r3, #0
 8032148:	d02b      	beq.n	80321a2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 803214a:	68fb      	ldr	r3, [r7, #12]
 803214c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803214e:	b29b      	uxth	r3, r3
 8032150:	2b00      	cmp	r3, #0
 8032152:	d018      	beq.n	8032186 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8032154:	68fb      	ldr	r3, [r7, #12]
 8032156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032158:	781a      	ldrb	r2, [r3, #0]
 803215a:	68fb      	ldr	r3, [r7, #12]
 803215c:	681b      	ldr	r3, [r3, #0]
 803215e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8032160:	68fb      	ldr	r3, [r7, #12]
 8032162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032164:	1c5a      	adds	r2, r3, #1
 8032166:	68fb      	ldr	r3, [r7, #12]
 8032168:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 803216a:	68fb      	ldr	r3, [r7, #12]
 803216c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803216e:	b29b      	uxth	r3, r3
 8032170:	3b01      	subs	r3, #1
 8032172:	b29a      	uxth	r2, r3
 8032174:	68fb      	ldr	r3, [r7, #12]
 8032176:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8032178:	68fb      	ldr	r3, [r7, #12]
 803217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803217c:	3b01      	subs	r3, #1
 803217e:	b29a      	uxth	r2, r3
 8032180:	68fb      	ldr	r3, [r7, #12]
 8032182:	851a      	strh	r2, [r3, #40]	; 0x28
 8032184:	e00d      	b.n	80321a2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8032186:	697b      	ldr	r3, [r7, #20]
 8032188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 803218c:	d002      	beq.n	8032194 <I2C_Slave_ISR_IT+0x1e6>
 803218e:	697b      	ldr	r3, [r7, #20]
 8032190:	2b00      	cmp	r3, #0
 8032192:	d106      	bne.n	80321a2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8032194:	68f8      	ldr	r0, [r7, #12]
 8032196:	f000 f891 	bl	80322bc <I2C_ITSlaveSeqCplt>
 803219a:	e002      	b.n	80321a2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 803219c:	bf00      	nop
 803219e:	e000      	b.n	80321a2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80321a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80321a2:	68fb      	ldr	r3, [r7, #12]
 80321a4:	2200      	movs	r2, #0
 80321a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80321aa:	2300      	movs	r3, #0
}
 80321ac:	4618      	mov	r0, r3
 80321ae:	3718      	adds	r7, #24
 80321b0:	46bd      	mov	sp, r7
 80321b2:	bd80      	pop	{r7, pc}

080321b4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80321b4:	b580      	push	{r7, lr}
 80321b6:	b084      	sub	sp, #16
 80321b8:	af00      	add	r7, sp, #0
 80321ba:	6078      	str	r0, [r7, #4]
 80321bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80321be:	687b      	ldr	r3, [r7, #4]
 80321c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80321c4:	b2db      	uxtb	r3, r3
 80321c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80321ca:	2b28      	cmp	r3, #40	; 0x28
 80321cc:	d16a      	bne.n	80322a4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80321ce:	687b      	ldr	r3, [r7, #4]
 80321d0:	681b      	ldr	r3, [r3, #0]
 80321d2:	699b      	ldr	r3, [r3, #24]
 80321d4:	0c1b      	lsrs	r3, r3, #16
 80321d6:	b2db      	uxtb	r3, r3
 80321d8:	f003 0301 	and.w	r3, r3, #1
 80321dc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80321de:	687b      	ldr	r3, [r7, #4]
 80321e0:	681b      	ldr	r3, [r3, #0]
 80321e2:	699b      	ldr	r3, [r3, #24]
 80321e4:	0c1b      	lsrs	r3, r3, #16
 80321e6:	b29b      	uxth	r3, r3
 80321e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80321ec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80321ee:	687b      	ldr	r3, [r7, #4]
 80321f0:	681b      	ldr	r3, [r3, #0]
 80321f2:	689b      	ldr	r3, [r3, #8]
 80321f4:	b29b      	uxth	r3, r3
 80321f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80321fa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80321fc:	687b      	ldr	r3, [r7, #4]
 80321fe:	681b      	ldr	r3, [r3, #0]
 8032200:	68db      	ldr	r3, [r3, #12]
 8032202:	b29b      	uxth	r3, r3
 8032204:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8032208:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 803220a:	687b      	ldr	r3, [r7, #4]
 803220c:	68db      	ldr	r3, [r3, #12]
 803220e:	2b02      	cmp	r3, #2
 8032210:	d138      	bne.n	8032284 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8032212:	897b      	ldrh	r3, [r7, #10]
 8032214:	09db      	lsrs	r3, r3, #7
 8032216:	b29a      	uxth	r2, r3
 8032218:	89bb      	ldrh	r3, [r7, #12]
 803221a:	4053      	eors	r3, r2
 803221c:	b29b      	uxth	r3, r3
 803221e:	f003 0306 	and.w	r3, r3, #6
 8032222:	2b00      	cmp	r3, #0
 8032224:	d11c      	bne.n	8032260 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8032226:	897b      	ldrh	r3, [r7, #10]
 8032228:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 803222a:	687b      	ldr	r3, [r7, #4]
 803222c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803222e:	1c5a      	adds	r2, r3, #1
 8032230:	687b      	ldr	r3, [r7, #4]
 8032232:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8032234:	687b      	ldr	r3, [r7, #4]
 8032236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8032238:	2b02      	cmp	r3, #2
 803223a:	d13b      	bne.n	80322b4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 803223c:	687b      	ldr	r3, [r7, #4]
 803223e:	2200      	movs	r2, #0
 8032240:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8032242:	687b      	ldr	r3, [r7, #4]
 8032244:	681b      	ldr	r3, [r3, #0]
 8032246:	2208      	movs	r2, #8
 8032248:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 803224a:	687b      	ldr	r3, [r7, #4]
 803224c:	2200      	movs	r2, #0
 803224e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8032252:	89ba      	ldrh	r2, [r7, #12]
 8032254:	7bfb      	ldrb	r3, [r7, #15]
 8032256:	4619      	mov	r1, r3
 8032258:	6878      	ldr	r0, [r7, #4]
 803225a:	f7ff fe7c 	bl	8031f56 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 803225e:	e029      	b.n	80322b4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8032260:	893b      	ldrh	r3, [r7, #8]
 8032262:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8032264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8032268:	6878      	ldr	r0, [r7, #4]
 803226a:	f000 fc0c 	bl	8032a86 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 803226e:	687b      	ldr	r3, [r7, #4]
 8032270:	2200      	movs	r2, #0
 8032272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8032276:	89ba      	ldrh	r2, [r7, #12]
 8032278:	7bfb      	ldrb	r3, [r7, #15]
 803227a:	4619      	mov	r1, r3
 803227c:	6878      	ldr	r0, [r7, #4]
 803227e:	f7ff fe6a 	bl	8031f56 <HAL_I2C_AddrCallback>
}
 8032282:	e017      	b.n	80322b4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8032284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8032288:	6878      	ldr	r0, [r7, #4]
 803228a:	f000 fbfc 	bl	8032a86 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 803228e:	687b      	ldr	r3, [r7, #4]
 8032290:	2200      	movs	r2, #0
 8032292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8032296:	89ba      	ldrh	r2, [r7, #12]
 8032298:	7bfb      	ldrb	r3, [r7, #15]
 803229a:	4619      	mov	r1, r3
 803229c:	6878      	ldr	r0, [r7, #4]
 803229e:	f7ff fe5a 	bl	8031f56 <HAL_I2C_AddrCallback>
}
 80322a2:	e007      	b.n	80322b4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80322a4:	687b      	ldr	r3, [r7, #4]
 80322a6:	681b      	ldr	r3, [r3, #0]
 80322a8:	2208      	movs	r2, #8
 80322aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80322ac:	687b      	ldr	r3, [r7, #4]
 80322ae:	2200      	movs	r2, #0
 80322b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80322b4:	bf00      	nop
 80322b6:	3710      	adds	r7, #16
 80322b8:	46bd      	mov	sp, r7
 80322ba:	bd80      	pop	{r7, pc}

080322bc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80322bc:	b580      	push	{r7, lr}
 80322be:	b084      	sub	sp, #16
 80322c0:	af00      	add	r7, sp, #0
 80322c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80322c4:	687b      	ldr	r3, [r7, #4]
 80322c6:	681b      	ldr	r3, [r3, #0]
 80322c8:	681b      	ldr	r3, [r3, #0]
 80322ca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80322cc:	687b      	ldr	r3, [r7, #4]
 80322ce:	2200      	movs	r2, #0
 80322d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80322d4:	68fb      	ldr	r3, [r7, #12]
 80322d6:	0b9b      	lsrs	r3, r3, #14
 80322d8:	f003 0301 	and.w	r3, r3, #1
 80322dc:	2b00      	cmp	r3, #0
 80322de:	d008      	beq.n	80322f2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80322e0:	687b      	ldr	r3, [r7, #4]
 80322e2:	681b      	ldr	r3, [r3, #0]
 80322e4:	681a      	ldr	r2, [r3, #0]
 80322e6:	687b      	ldr	r3, [r7, #4]
 80322e8:	681b      	ldr	r3, [r3, #0]
 80322ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80322ee:	601a      	str	r2, [r3, #0]
 80322f0:	e00d      	b.n	803230e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80322f2:	68fb      	ldr	r3, [r7, #12]
 80322f4:	0bdb      	lsrs	r3, r3, #15
 80322f6:	f003 0301 	and.w	r3, r3, #1
 80322fa:	2b00      	cmp	r3, #0
 80322fc:	d007      	beq.n	803230e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80322fe:	687b      	ldr	r3, [r7, #4]
 8032300:	681b      	ldr	r3, [r3, #0]
 8032302:	681a      	ldr	r2, [r3, #0]
 8032304:	687b      	ldr	r3, [r7, #4]
 8032306:	681b      	ldr	r3, [r3, #0]
 8032308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803230c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 803230e:	687b      	ldr	r3, [r7, #4]
 8032310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032314:	b2db      	uxtb	r3, r3
 8032316:	2b29      	cmp	r3, #41	; 0x29
 8032318:	d112      	bne.n	8032340 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 803231a:	687b      	ldr	r3, [r7, #4]
 803231c:	2228      	movs	r2, #40	; 0x28
 803231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8032322:	687b      	ldr	r3, [r7, #4]
 8032324:	2221      	movs	r2, #33	; 0x21
 8032326:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8032328:	2101      	movs	r1, #1
 803232a:	6878      	ldr	r0, [r7, #4]
 803232c:	f000 fbab 	bl	8032a86 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8032330:	687b      	ldr	r3, [r7, #4]
 8032332:	2200      	movs	r2, #0
 8032334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8032338:	6878      	ldr	r0, [r7, #4]
 803233a:	f7ff fdf8 	bl	8031f2e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 803233e:	e017      	b.n	8032370 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8032340:	687b      	ldr	r3, [r7, #4]
 8032342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032346:	b2db      	uxtb	r3, r3
 8032348:	2b2a      	cmp	r3, #42	; 0x2a
 803234a:	d111      	bne.n	8032370 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 803234c:	687b      	ldr	r3, [r7, #4]
 803234e:	2228      	movs	r2, #40	; 0x28
 8032350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8032354:	687b      	ldr	r3, [r7, #4]
 8032356:	2222      	movs	r2, #34	; 0x22
 8032358:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 803235a:	2102      	movs	r1, #2
 803235c:	6878      	ldr	r0, [r7, #4]
 803235e:	f000 fb92 	bl	8032a86 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8032362:	687b      	ldr	r3, [r7, #4]
 8032364:	2200      	movs	r2, #0
 8032366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 803236a:	6878      	ldr	r0, [r7, #4]
 803236c:	f7ff fde9 	bl	8031f42 <HAL_I2C_SlaveRxCpltCallback>
}
 8032370:	bf00      	nop
 8032372:	3710      	adds	r7, #16
 8032374:	46bd      	mov	sp, r7
 8032376:	bd80      	pop	{r7, pc}

08032378 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8032378:	b580      	push	{r7, lr}
 803237a:	b086      	sub	sp, #24
 803237c:	af00      	add	r7, sp, #0
 803237e:	6078      	str	r0, [r7, #4]
 8032380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8032382:	687b      	ldr	r3, [r7, #4]
 8032384:	681b      	ldr	r3, [r3, #0]
 8032386:	681b      	ldr	r3, [r3, #0]
 8032388:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 803238a:	683b      	ldr	r3, [r7, #0]
 803238c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 803238e:	687b      	ldr	r3, [r7, #4]
 8032390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032394:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8032396:	687b      	ldr	r3, [r7, #4]
 8032398:	681b      	ldr	r3, [r3, #0]
 803239a:	2220      	movs	r2, #32
 803239c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 803239e:	7bfb      	ldrb	r3, [r7, #15]
 80323a0:	2b21      	cmp	r3, #33	; 0x21
 80323a2:	d002      	beq.n	80323aa <I2C_ITSlaveCplt+0x32>
 80323a4:	7bfb      	ldrb	r3, [r7, #15]
 80323a6:	2b29      	cmp	r3, #41	; 0x29
 80323a8:	d108      	bne.n	80323bc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80323aa:	f248 0101 	movw	r1, #32769	; 0x8001
 80323ae:	6878      	ldr	r0, [r7, #4]
 80323b0:	f000 fb69 	bl	8032a86 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80323b4:	687b      	ldr	r3, [r7, #4]
 80323b6:	2221      	movs	r2, #33	; 0x21
 80323b8:	631a      	str	r2, [r3, #48]	; 0x30
 80323ba:	e00d      	b.n	80323d8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80323bc:	7bfb      	ldrb	r3, [r7, #15]
 80323be:	2b22      	cmp	r3, #34	; 0x22
 80323c0:	d002      	beq.n	80323c8 <I2C_ITSlaveCplt+0x50>
 80323c2:	7bfb      	ldrb	r3, [r7, #15]
 80323c4:	2b2a      	cmp	r3, #42	; 0x2a
 80323c6:	d107      	bne.n	80323d8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80323c8:	f248 0102 	movw	r1, #32770	; 0x8002
 80323cc:	6878      	ldr	r0, [r7, #4]
 80323ce:	f000 fb5a 	bl	8032a86 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80323d2:	687b      	ldr	r3, [r7, #4]
 80323d4:	2222      	movs	r2, #34	; 0x22
 80323d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80323d8:	687b      	ldr	r3, [r7, #4]
 80323da:	681b      	ldr	r3, [r3, #0]
 80323dc:	685a      	ldr	r2, [r3, #4]
 80323de:	687b      	ldr	r3, [r7, #4]
 80323e0:	681b      	ldr	r3, [r3, #0]
 80323e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80323e6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80323e8:	687b      	ldr	r3, [r7, #4]
 80323ea:	681b      	ldr	r3, [r3, #0]
 80323ec:	6859      	ldr	r1, [r3, #4]
 80323ee:	687b      	ldr	r3, [r7, #4]
 80323f0:	681a      	ldr	r2, [r3, #0]
 80323f2:	4b80      	ldr	r3, [pc, #512]	; (80325f4 <I2C_ITSlaveCplt+0x27c>)
 80323f4:	400b      	ands	r3, r1
 80323f6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80323f8:	6878      	ldr	r0, [r7, #4]
 80323fa:	f000 fb02 	bl	8032a02 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80323fe:	693b      	ldr	r3, [r7, #16]
 8032400:	0b9b      	lsrs	r3, r3, #14
 8032402:	f003 0301 	and.w	r3, r3, #1
 8032406:	2b00      	cmp	r3, #0
 8032408:	d07a      	beq.n	8032500 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 803240a:	687b      	ldr	r3, [r7, #4]
 803240c:	681b      	ldr	r3, [r3, #0]
 803240e:	681a      	ldr	r2, [r3, #0]
 8032410:	687b      	ldr	r3, [r7, #4]
 8032412:	681b      	ldr	r3, [r3, #0]
 8032414:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8032418:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 803241a:	687b      	ldr	r3, [r7, #4]
 803241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803241e:	2b00      	cmp	r3, #0
 8032420:	f000 8111 	beq.w	8032646 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8032424:	687b      	ldr	r3, [r7, #4]
 8032426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032428:	681b      	ldr	r3, [r3, #0]
 803242a:	4a73      	ldr	r2, [pc, #460]	; (80325f8 <I2C_ITSlaveCplt+0x280>)
 803242c:	4293      	cmp	r3, r2
 803242e:	d059      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 8032430:	687b      	ldr	r3, [r7, #4]
 8032432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032434:	681b      	ldr	r3, [r3, #0]
 8032436:	4a71      	ldr	r2, [pc, #452]	; (80325fc <I2C_ITSlaveCplt+0x284>)
 8032438:	4293      	cmp	r3, r2
 803243a:	d053      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 803243c:	687b      	ldr	r3, [r7, #4]
 803243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032440:	681b      	ldr	r3, [r3, #0]
 8032442:	4a6f      	ldr	r2, [pc, #444]	; (8032600 <I2C_ITSlaveCplt+0x288>)
 8032444:	4293      	cmp	r3, r2
 8032446:	d04d      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 8032448:	687b      	ldr	r3, [r7, #4]
 803244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803244c:	681b      	ldr	r3, [r3, #0]
 803244e:	4a6d      	ldr	r2, [pc, #436]	; (8032604 <I2C_ITSlaveCplt+0x28c>)
 8032450:	4293      	cmp	r3, r2
 8032452:	d047      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 8032454:	687b      	ldr	r3, [r7, #4]
 8032456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032458:	681b      	ldr	r3, [r3, #0]
 803245a:	4a6b      	ldr	r2, [pc, #428]	; (8032608 <I2C_ITSlaveCplt+0x290>)
 803245c:	4293      	cmp	r3, r2
 803245e:	d041      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 8032460:	687b      	ldr	r3, [r7, #4]
 8032462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032464:	681b      	ldr	r3, [r3, #0]
 8032466:	4a69      	ldr	r2, [pc, #420]	; (803260c <I2C_ITSlaveCplt+0x294>)
 8032468:	4293      	cmp	r3, r2
 803246a:	d03b      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 803246c:	687b      	ldr	r3, [r7, #4]
 803246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032470:	681b      	ldr	r3, [r3, #0]
 8032472:	4a67      	ldr	r2, [pc, #412]	; (8032610 <I2C_ITSlaveCplt+0x298>)
 8032474:	4293      	cmp	r3, r2
 8032476:	d035      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 8032478:	687b      	ldr	r3, [r7, #4]
 803247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803247c:	681b      	ldr	r3, [r3, #0]
 803247e:	4a65      	ldr	r2, [pc, #404]	; (8032614 <I2C_ITSlaveCplt+0x29c>)
 8032480:	4293      	cmp	r3, r2
 8032482:	d02f      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 8032484:	687b      	ldr	r3, [r7, #4]
 8032486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032488:	681b      	ldr	r3, [r3, #0]
 803248a:	4a63      	ldr	r2, [pc, #396]	; (8032618 <I2C_ITSlaveCplt+0x2a0>)
 803248c:	4293      	cmp	r3, r2
 803248e:	d029      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 8032490:	687b      	ldr	r3, [r7, #4]
 8032492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032494:	681b      	ldr	r3, [r3, #0]
 8032496:	4a61      	ldr	r2, [pc, #388]	; (803261c <I2C_ITSlaveCplt+0x2a4>)
 8032498:	4293      	cmp	r3, r2
 803249a:	d023      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 803249c:	687b      	ldr	r3, [r7, #4]
 803249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324a0:	681b      	ldr	r3, [r3, #0]
 80324a2:	4a5f      	ldr	r2, [pc, #380]	; (8032620 <I2C_ITSlaveCplt+0x2a8>)
 80324a4:	4293      	cmp	r3, r2
 80324a6:	d01d      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 80324a8:	687b      	ldr	r3, [r7, #4]
 80324aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324ac:	681b      	ldr	r3, [r3, #0]
 80324ae:	4a5d      	ldr	r2, [pc, #372]	; (8032624 <I2C_ITSlaveCplt+0x2ac>)
 80324b0:	4293      	cmp	r3, r2
 80324b2:	d017      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 80324b4:	687b      	ldr	r3, [r7, #4]
 80324b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324b8:	681b      	ldr	r3, [r3, #0]
 80324ba:	4a5b      	ldr	r2, [pc, #364]	; (8032628 <I2C_ITSlaveCplt+0x2b0>)
 80324bc:	4293      	cmp	r3, r2
 80324be:	d011      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 80324c0:	687b      	ldr	r3, [r7, #4]
 80324c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324c4:	681b      	ldr	r3, [r3, #0]
 80324c6:	4a59      	ldr	r2, [pc, #356]	; (803262c <I2C_ITSlaveCplt+0x2b4>)
 80324c8:	4293      	cmp	r3, r2
 80324ca:	d00b      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 80324cc:	687b      	ldr	r3, [r7, #4]
 80324ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324d0:	681b      	ldr	r3, [r3, #0]
 80324d2:	4a57      	ldr	r2, [pc, #348]	; (8032630 <I2C_ITSlaveCplt+0x2b8>)
 80324d4:	4293      	cmp	r3, r2
 80324d6:	d005      	beq.n	80324e4 <I2C_ITSlaveCplt+0x16c>
 80324d8:	687b      	ldr	r3, [r7, #4]
 80324da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324dc:	681b      	ldr	r3, [r3, #0]
 80324de:	4a55      	ldr	r2, [pc, #340]	; (8032634 <I2C_ITSlaveCplt+0x2bc>)
 80324e0:	4293      	cmp	r3, r2
 80324e2:	d105      	bne.n	80324f0 <I2C_ITSlaveCplt+0x178>
 80324e4:	687b      	ldr	r3, [r7, #4]
 80324e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324e8:	681b      	ldr	r3, [r3, #0]
 80324ea:	685b      	ldr	r3, [r3, #4]
 80324ec:	b29b      	uxth	r3, r3
 80324ee:	e004      	b.n	80324fa <I2C_ITSlaveCplt+0x182>
 80324f0:	687b      	ldr	r3, [r7, #4]
 80324f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80324f4:	681b      	ldr	r3, [r3, #0]
 80324f6:	685b      	ldr	r3, [r3, #4]
 80324f8:	b29b      	uxth	r3, r3
 80324fa:	687a      	ldr	r2, [r7, #4]
 80324fc:	8553      	strh	r3, [r2, #42]	; 0x2a
 80324fe:	e0a2      	b.n	8032646 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8032500:	693b      	ldr	r3, [r7, #16]
 8032502:	0bdb      	lsrs	r3, r3, #15
 8032504:	f003 0301 	and.w	r3, r3, #1
 8032508:	2b00      	cmp	r3, #0
 803250a:	f000 809c 	beq.w	8032646 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 803250e:	687b      	ldr	r3, [r7, #4]
 8032510:	681b      	ldr	r3, [r3, #0]
 8032512:	681a      	ldr	r2, [r3, #0]
 8032514:	687b      	ldr	r3, [r7, #4]
 8032516:	681b      	ldr	r3, [r3, #0]
 8032518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803251c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 803251e:	687b      	ldr	r3, [r7, #4]
 8032520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032522:	2b00      	cmp	r3, #0
 8032524:	f000 808f 	beq.w	8032646 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8032528:	687b      	ldr	r3, [r7, #4]
 803252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803252c:	681b      	ldr	r3, [r3, #0]
 803252e:	4a32      	ldr	r2, [pc, #200]	; (80325f8 <I2C_ITSlaveCplt+0x280>)
 8032530:	4293      	cmp	r3, r2
 8032532:	d059      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 8032534:	687b      	ldr	r3, [r7, #4]
 8032536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032538:	681b      	ldr	r3, [r3, #0]
 803253a:	4a30      	ldr	r2, [pc, #192]	; (80325fc <I2C_ITSlaveCplt+0x284>)
 803253c:	4293      	cmp	r3, r2
 803253e:	d053      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 8032540:	687b      	ldr	r3, [r7, #4]
 8032542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032544:	681b      	ldr	r3, [r3, #0]
 8032546:	4a2e      	ldr	r2, [pc, #184]	; (8032600 <I2C_ITSlaveCplt+0x288>)
 8032548:	4293      	cmp	r3, r2
 803254a:	d04d      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 803254c:	687b      	ldr	r3, [r7, #4]
 803254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032550:	681b      	ldr	r3, [r3, #0]
 8032552:	4a2c      	ldr	r2, [pc, #176]	; (8032604 <I2C_ITSlaveCplt+0x28c>)
 8032554:	4293      	cmp	r3, r2
 8032556:	d047      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 8032558:	687b      	ldr	r3, [r7, #4]
 803255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803255c:	681b      	ldr	r3, [r3, #0]
 803255e:	4a2a      	ldr	r2, [pc, #168]	; (8032608 <I2C_ITSlaveCplt+0x290>)
 8032560:	4293      	cmp	r3, r2
 8032562:	d041      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 8032564:	687b      	ldr	r3, [r7, #4]
 8032566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032568:	681b      	ldr	r3, [r3, #0]
 803256a:	4a28      	ldr	r2, [pc, #160]	; (803260c <I2C_ITSlaveCplt+0x294>)
 803256c:	4293      	cmp	r3, r2
 803256e:	d03b      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 8032570:	687b      	ldr	r3, [r7, #4]
 8032572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032574:	681b      	ldr	r3, [r3, #0]
 8032576:	4a26      	ldr	r2, [pc, #152]	; (8032610 <I2C_ITSlaveCplt+0x298>)
 8032578:	4293      	cmp	r3, r2
 803257a:	d035      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 803257c:	687b      	ldr	r3, [r7, #4]
 803257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032580:	681b      	ldr	r3, [r3, #0]
 8032582:	4a24      	ldr	r2, [pc, #144]	; (8032614 <I2C_ITSlaveCplt+0x29c>)
 8032584:	4293      	cmp	r3, r2
 8032586:	d02f      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 8032588:	687b      	ldr	r3, [r7, #4]
 803258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803258c:	681b      	ldr	r3, [r3, #0]
 803258e:	4a22      	ldr	r2, [pc, #136]	; (8032618 <I2C_ITSlaveCplt+0x2a0>)
 8032590:	4293      	cmp	r3, r2
 8032592:	d029      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 8032594:	687b      	ldr	r3, [r7, #4]
 8032596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032598:	681b      	ldr	r3, [r3, #0]
 803259a:	4a20      	ldr	r2, [pc, #128]	; (803261c <I2C_ITSlaveCplt+0x2a4>)
 803259c:	4293      	cmp	r3, r2
 803259e:	d023      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 80325a0:	687b      	ldr	r3, [r7, #4]
 80325a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325a4:	681b      	ldr	r3, [r3, #0]
 80325a6:	4a1e      	ldr	r2, [pc, #120]	; (8032620 <I2C_ITSlaveCplt+0x2a8>)
 80325a8:	4293      	cmp	r3, r2
 80325aa:	d01d      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 80325ac:	687b      	ldr	r3, [r7, #4]
 80325ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325b0:	681b      	ldr	r3, [r3, #0]
 80325b2:	4a1c      	ldr	r2, [pc, #112]	; (8032624 <I2C_ITSlaveCplt+0x2ac>)
 80325b4:	4293      	cmp	r3, r2
 80325b6:	d017      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 80325b8:	687b      	ldr	r3, [r7, #4]
 80325ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325bc:	681b      	ldr	r3, [r3, #0]
 80325be:	4a1a      	ldr	r2, [pc, #104]	; (8032628 <I2C_ITSlaveCplt+0x2b0>)
 80325c0:	4293      	cmp	r3, r2
 80325c2:	d011      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 80325c4:	687b      	ldr	r3, [r7, #4]
 80325c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325c8:	681b      	ldr	r3, [r3, #0]
 80325ca:	4a18      	ldr	r2, [pc, #96]	; (803262c <I2C_ITSlaveCplt+0x2b4>)
 80325cc:	4293      	cmp	r3, r2
 80325ce:	d00b      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 80325d0:	687b      	ldr	r3, [r7, #4]
 80325d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325d4:	681b      	ldr	r3, [r3, #0]
 80325d6:	4a16      	ldr	r2, [pc, #88]	; (8032630 <I2C_ITSlaveCplt+0x2b8>)
 80325d8:	4293      	cmp	r3, r2
 80325da:	d005      	beq.n	80325e8 <I2C_ITSlaveCplt+0x270>
 80325dc:	687b      	ldr	r3, [r7, #4]
 80325de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325e0:	681b      	ldr	r3, [r3, #0]
 80325e2:	4a14      	ldr	r2, [pc, #80]	; (8032634 <I2C_ITSlaveCplt+0x2bc>)
 80325e4:	4293      	cmp	r3, r2
 80325e6:	d127      	bne.n	8032638 <I2C_ITSlaveCplt+0x2c0>
 80325e8:	687b      	ldr	r3, [r7, #4]
 80325ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80325ec:	681b      	ldr	r3, [r3, #0]
 80325ee:	685b      	ldr	r3, [r3, #4]
 80325f0:	b29b      	uxth	r3, r3
 80325f2:	e026      	b.n	8032642 <I2C_ITSlaveCplt+0x2ca>
 80325f4:	fe00e800 	.word	0xfe00e800
 80325f8:	40020010 	.word	0x40020010
 80325fc:	40020028 	.word	0x40020028
 8032600:	40020040 	.word	0x40020040
 8032604:	40020058 	.word	0x40020058
 8032608:	40020070 	.word	0x40020070
 803260c:	40020088 	.word	0x40020088
 8032610:	400200a0 	.word	0x400200a0
 8032614:	400200b8 	.word	0x400200b8
 8032618:	40020410 	.word	0x40020410
 803261c:	40020428 	.word	0x40020428
 8032620:	40020440 	.word	0x40020440
 8032624:	40020458 	.word	0x40020458
 8032628:	40020470 	.word	0x40020470
 803262c:	40020488 	.word	0x40020488
 8032630:	400204a0 	.word	0x400204a0
 8032634:	400204b8 	.word	0x400204b8
 8032638:	687b      	ldr	r3, [r7, #4]
 803263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803263c:	681b      	ldr	r3, [r3, #0]
 803263e:	685b      	ldr	r3, [r3, #4]
 8032640:	b29b      	uxth	r3, r3
 8032642:	687a      	ldr	r2, [r7, #4]
 8032644:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8032646:	697b      	ldr	r3, [r7, #20]
 8032648:	089b      	lsrs	r3, r3, #2
 803264a:	f003 0301 	and.w	r3, r3, #1
 803264e:	2b00      	cmp	r3, #0
 8032650:	d020      	beq.n	8032694 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8032652:	697b      	ldr	r3, [r7, #20]
 8032654:	f023 0304 	bic.w	r3, r3, #4
 8032658:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 803265a:	687b      	ldr	r3, [r7, #4]
 803265c:	681b      	ldr	r3, [r3, #0]
 803265e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8032660:	687b      	ldr	r3, [r7, #4]
 8032662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032664:	b2d2      	uxtb	r2, r2
 8032666:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8032668:	687b      	ldr	r3, [r7, #4]
 803266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803266c:	1c5a      	adds	r2, r3, #1
 803266e:	687b      	ldr	r3, [r7, #4]
 8032670:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8032672:	687b      	ldr	r3, [r7, #4]
 8032674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8032676:	2b00      	cmp	r3, #0
 8032678:	d00c      	beq.n	8032694 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 803267a:	687b      	ldr	r3, [r7, #4]
 803267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 803267e:	3b01      	subs	r3, #1
 8032680:	b29a      	uxth	r2, r3
 8032682:	687b      	ldr	r3, [r7, #4]
 8032684:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8032686:	687b      	ldr	r3, [r7, #4]
 8032688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803268a:	b29b      	uxth	r3, r3
 803268c:	3b01      	subs	r3, #1
 803268e:	b29a      	uxth	r2, r3
 8032690:	687b      	ldr	r3, [r7, #4]
 8032692:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8032694:	687b      	ldr	r3, [r7, #4]
 8032696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8032698:	b29b      	uxth	r3, r3
 803269a:	2b00      	cmp	r3, #0
 803269c:	d005      	beq.n	80326aa <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 803269e:	687b      	ldr	r3, [r7, #4]
 80326a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80326a2:	f043 0204 	orr.w	r2, r3, #4
 80326a6:	687b      	ldr	r3, [r7, #4]
 80326a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80326aa:	687b      	ldr	r3, [r7, #4]
 80326ac:	2200      	movs	r2, #0
 80326ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80326b2:	687b      	ldr	r3, [r7, #4]
 80326b4:	2200      	movs	r2, #0
 80326b6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80326b8:	687b      	ldr	r3, [r7, #4]
 80326ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80326bc:	2b00      	cmp	r3, #0
 80326be:	d010      	beq.n	80326e2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80326c0:	687b      	ldr	r3, [r7, #4]
 80326c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80326c4:	4619      	mov	r1, r3
 80326c6:	6878      	ldr	r0, [r7, #4]
 80326c8:	f000 f8a4 	bl	8032814 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80326cc:	687b      	ldr	r3, [r7, #4]
 80326ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80326d2:	b2db      	uxtb	r3, r3
 80326d4:	2b28      	cmp	r3, #40	; 0x28
 80326d6:	d141      	bne.n	803275c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80326d8:	6979      	ldr	r1, [r7, #20]
 80326da:	6878      	ldr	r0, [r7, #4]
 80326dc:	f000 f844 	bl	8032768 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80326e0:	e03c      	b.n	803275c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80326e2:	687b      	ldr	r3, [r7, #4]
 80326e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80326e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80326ea:	d014      	beq.n	8032716 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80326ec:	6878      	ldr	r0, [r7, #4]
 80326ee:	f7ff fde5 	bl	80322bc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80326f2:	687b      	ldr	r3, [r7, #4]
 80326f4:	4a1b      	ldr	r2, [pc, #108]	; (8032764 <I2C_ITSlaveCplt+0x3ec>)
 80326f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80326f8:	687b      	ldr	r3, [r7, #4]
 80326fa:	2220      	movs	r2, #32
 80326fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8032700:	687b      	ldr	r3, [r7, #4]
 8032702:	2200      	movs	r2, #0
 8032704:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8032706:	687b      	ldr	r3, [r7, #4]
 8032708:	2200      	movs	r2, #0
 803270a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 803270e:	6878      	ldr	r0, [r7, #4]
 8032710:	f7ff fc2f 	bl	8031f72 <HAL_I2C_ListenCpltCallback>
}
 8032714:	e022      	b.n	803275c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8032716:	687b      	ldr	r3, [r7, #4]
 8032718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 803271c:	b2db      	uxtb	r3, r3
 803271e:	2b22      	cmp	r3, #34	; 0x22
 8032720:	d10e      	bne.n	8032740 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8032722:	687b      	ldr	r3, [r7, #4]
 8032724:	2220      	movs	r2, #32
 8032726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 803272a:	687b      	ldr	r3, [r7, #4]
 803272c:	2200      	movs	r2, #0
 803272e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8032730:	687b      	ldr	r3, [r7, #4]
 8032732:	2200      	movs	r2, #0
 8032734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8032738:	6878      	ldr	r0, [r7, #4]
 803273a:	f7ff fc02 	bl	8031f42 <HAL_I2C_SlaveRxCpltCallback>
}
 803273e:	e00d      	b.n	803275c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8032740:	687b      	ldr	r3, [r7, #4]
 8032742:	2220      	movs	r2, #32
 8032744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8032748:	687b      	ldr	r3, [r7, #4]
 803274a:	2200      	movs	r2, #0
 803274c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 803274e:	687b      	ldr	r3, [r7, #4]
 8032750:	2200      	movs	r2, #0
 8032752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8032756:	6878      	ldr	r0, [r7, #4]
 8032758:	f7ff fbe9 	bl	8031f2e <HAL_I2C_SlaveTxCpltCallback>
}
 803275c:	bf00      	nop
 803275e:	3718      	adds	r7, #24
 8032760:	46bd      	mov	sp, r7
 8032762:	bd80      	pop	{r7, pc}
 8032764:	ffff0000 	.word	0xffff0000

08032768 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8032768:	b580      	push	{r7, lr}
 803276a:	b082      	sub	sp, #8
 803276c:	af00      	add	r7, sp, #0
 803276e:	6078      	str	r0, [r7, #4]
 8032770:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8032772:	687b      	ldr	r3, [r7, #4]
 8032774:	4a26      	ldr	r2, [pc, #152]	; (8032810 <I2C_ITListenCplt+0xa8>)
 8032776:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8032778:	687b      	ldr	r3, [r7, #4]
 803277a:	2200      	movs	r2, #0
 803277c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 803277e:	687b      	ldr	r3, [r7, #4]
 8032780:	2220      	movs	r2, #32
 8032782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8032786:	687b      	ldr	r3, [r7, #4]
 8032788:	2200      	movs	r2, #0
 803278a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 803278e:	687b      	ldr	r3, [r7, #4]
 8032790:	2200      	movs	r2, #0
 8032792:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8032794:	683b      	ldr	r3, [r7, #0]
 8032796:	089b      	lsrs	r3, r3, #2
 8032798:	f003 0301 	and.w	r3, r3, #1
 803279c:	2b00      	cmp	r3, #0
 803279e:	d022      	beq.n	80327e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80327a0:	687b      	ldr	r3, [r7, #4]
 80327a2:	681b      	ldr	r3, [r3, #0]
 80327a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80327a6:	687b      	ldr	r3, [r7, #4]
 80327a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80327aa:	b2d2      	uxtb	r2, r2
 80327ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80327ae:	687b      	ldr	r3, [r7, #4]
 80327b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80327b2:	1c5a      	adds	r2, r3, #1
 80327b4:	687b      	ldr	r3, [r7, #4]
 80327b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80327b8:	687b      	ldr	r3, [r7, #4]
 80327ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80327bc:	2b00      	cmp	r3, #0
 80327be:	d012      	beq.n	80327e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80327c0:	687b      	ldr	r3, [r7, #4]
 80327c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80327c4:	3b01      	subs	r3, #1
 80327c6:	b29a      	uxth	r2, r3
 80327c8:	687b      	ldr	r3, [r7, #4]
 80327ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80327cc:	687b      	ldr	r3, [r7, #4]
 80327ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80327d0:	b29b      	uxth	r3, r3
 80327d2:	3b01      	subs	r3, #1
 80327d4:	b29a      	uxth	r2, r3
 80327d6:	687b      	ldr	r3, [r7, #4]
 80327d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80327da:	687b      	ldr	r3, [r7, #4]
 80327dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80327de:	f043 0204 	orr.w	r2, r3, #4
 80327e2:	687b      	ldr	r3, [r7, #4]
 80327e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80327e6:	f248 0103 	movw	r1, #32771	; 0x8003
 80327ea:	6878      	ldr	r0, [r7, #4]
 80327ec:	f000 f94b 	bl	8032a86 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80327f0:	687b      	ldr	r3, [r7, #4]
 80327f2:	681b      	ldr	r3, [r3, #0]
 80327f4:	2210      	movs	r2, #16
 80327f6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80327f8:	687b      	ldr	r3, [r7, #4]
 80327fa:	2200      	movs	r2, #0
 80327fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8032800:	6878      	ldr	r0, [r7, #4]
 8032802:	f7ff fbb6 	bl	8031f72 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8032806:	bf00      	nop
 8032808:	3708      	adds	r7, #8
 803280a:	46bd      	mov	sp, r7
 803280c:	bd80      	pop	{r7, pc}
 803280e:	bf00      	nop
 8032810:	ffff0000 	.word	0xffff0000

08032814 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8032814:	b580      	push	{r7, lr}
 8032816:	b084      	sub	sp, #16
 8032818:	af00      	add	r7, sp, #0
 803281a:	6078      	str	r0, [r7, #4]
 803281c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 803281e:	687b      	ldr	r3, [r7, #4]
 8032820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8032826:	687b      	ldr	r3, [r7, #4]
 8032828:	2200      	movs	r2, #0
 803282a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 803282e:	687b      	ldr	r3, [r7, #4]
 8032830:	4a5d      	ldr	r2, [pc, #372]	; (80329a8 <I2C_ITError+0x194>)
 8032832:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8032834:	687b      	ldr	r3, [r7, #4]
 8032836:	2200      	movs	r2, #0
 8032838:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 803283a:	687b      	ldr	r3, [r7, #4]
 803283c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803283e:	683b      	ldr	r3, [r7, #0]
 8032840:	431a      	orrs	r2, r3
 8032842:	687b      	ldr	r3, [r7, #4]
 8032844:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8032846:	7bfb      	ldrb	r3, [r7, #15]
 8032848:	2b28      	cmp	r3, #40	; 0x28
 803284a:	d005      	beq.n	8032858 <I2C_ITError+0x44>
 803284c:	7bfb      	ldrb	r3, [r7, #15]
 803284e:	2b29      	cmp	r3, #41	; 0x29
 8032850:	d002      	beq.n	8032858 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8032852:	7bfb      	ldrb	r3, [r7, #15]
 8032854:	2b2a      	cmp	r3, #42	; 0x2a
 8032856:	d10b      	bne.n	8032870 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8032858:	2103      	movs	r1, #3
 803285a:	6878      	ldr	r0, [r7, #4]
 803285c:	f000 f913 	bl	8032a86 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8032860:	687b      	ldr	r3, [r7, #4]
 8032862:	2228      	movs	r2, #40	; 0x28
 8032864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8032868:	687b      	ldr	r3, [r7, #4]
 803286a:	4a50      	ldr	r2, [pc, #320]	; (80329ac <I2C_ITError+0x198>)
 803286c:	635a      	str	r2, [r3, #52]	; 0x34
 803286e:	e011      	b.n	8032894 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8032870:	f248 0103 	movw	r1, #32771	; 0x8003
 8032874:	6878      	ldr	r0, [r7, #4]
 8032876:	f000 f906 	bl	8032a86 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 803287a:	687b      	ldr	r3, [r7, #4]
 803287c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032880:	b2db      	uxtb	r3, r3
 8032882:	2b60      	cmp	r3, #96	; 0x60
 8032884:	d003      	beq.n	803288e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8032886:	687b      	ldr	r3, [r7, #4]
 8032888:	2220      	movs	r2, #32
 803288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 803288e:	687b      	ldr	r3, [r7, #4]
 8032890:	2200      	movs	r2, #0
 8032892:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8032894:	687b      	ldr	r3, [r7, #4]
 8032896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032898:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 803289a:	687b      	ldr	r3, [r7, #4]
 803289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803289e:	2b00      	cmp	r3, #0
 80328a0:	d039      	beq.n	8032916 <I2C_ITError+0x102>
 80328a2:	68bb      	ldr	r3, [r7, #8]
 80328a4:	2b11      	cmp	r3, #17
 80328a6:	d002      	beq.n	80328ae <I2C_ITError+0x9a>
 80328a8:	68bb      	ldr	r3, [r7, #8]
 80328aa:	2b21      	cmp	r3, #33	; 0x21
 80328ac:	d133      	bne.n	8032916 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80328ae:	687b      	ldr	r3, [r7, #4]
 80328b0:	681b      	ldr	r3, [r3, #0]
 80328b2:	681b      	ldr	r3, [r3, #0]
 80328b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80328b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80328bc:	d107      	bne.n	80328ce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80328be:	687b      	ldr	r3, [r7, #4]
 80328c0:	681b      	ldr	r3, [r3, #0]
 80328c2:	681a      	ldr	r2, [r3, #0]
 80328c4:	687b      	ldr	r3, [r7, #4]
 80328c6:	681b      	ldr	r3, [r3, #0]
 80328c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80328cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80328ce:	687b      	ldr	r3, [r7, #4]
 80328d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80328d2:	4618      	mov	r0, r3
 80328d4:	f7fe fc54 	bl	8031180 <HAL_DMA_GetState>
 80328d8:	4603      	mov	r3, r0
 80328da:	2b01      	cmp	r3, #1
 80328dc:	d017      	beq.n	803290e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80328de:	687b      	ldr	r3, [r7, #4]
 80328e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80328e2:	4a33      	ldr	r2, [pc, #204]	; (80329b0 <I2C_ITError+0x19c>)
 80328e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80328e6:	687b      	ldr	r3, [r7, #4]
 80328e8:	2200      	movs	r2, #0
 80328ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80328ee:	687b      	ldr	r3, [r7, #4]
 80328f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80328f2:	4618      	mov	r0, r3
 80328f4:	f7fd fad4 	bl	802fea0 <HAL_DMA_Abort_IT>
 80328f8:	4603      	mov	r3, r0
 80328fa:	2b00      	cmp	r3, #0
 80328fc:	d04d      	beq.n	803299a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80328fe:	687b      	ldr	r3, [r7, #4]
 8032900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032904:	687a      	ldr	r2, [r7, #4]
 8032906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8032908:	4610      	mov	r0, r2
 803290a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 803290c:	e045      	b.n	803299a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 803290e:	6878      	ldr	r0, [r7, #4]
 8032910:	f000 f850 	bl	80329b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8032914:	e041      	b.n	803299a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8032916:	687b      	ldr	r3, [r7, #4]
 8032918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803291a:	2b00      	cmp	r3, #0
 803291c:	d039      	beq.n	8032992 <I2C_ITError+0x17e>
 803291e:	68bb      	ldr	r3, [r7, #8]
 8032920:	2b12      	cmp	r3, #18
 8032922:	d002      	beq.n	803292a <I2C_ITError+0x116>
 8032924:	68bb      	ldr	r3, [r7, #8]
 8032926:	2b22      	cmp	r3, #34	; 0x22
 8032928:	d133      	bne.n	8032992 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 803292a:	687b      	ldr	r3, [r7, #4]
 803292c:	681b      	ldr	r3, [r3, #0]
 803292e:	681b      	ldr	r3, [r3, #0]
 8032930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8032934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8032938:	d107      	bne.n	803294a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 803293a:	687b      	ldr	r3, [r7, #4]
 803293c:	681b      	ldr	r3, [r3, #0]
 803293e:	681a      	ldr	r2, [r3, #0]
 8032940:	687b      	ldr	r3, [r7, #4]
 8032942:	681b      	ldr	r3, [r3, #0]
 8032944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8032948:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 803294a:	687b      	ldr	r3, [r7, #4]
 803294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803294e:	4618      	mov	r0, r3
 8032950:	f7fe fc16 	bl	8031180 <HAL_DMA_GetState>
 8032954:	4603      	mov	r3, r0
 8032956:	2b01      	cmp	r3, #1
 8032958:	d017      	beq.n	803298a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 803295a:	687b      	ldr	r3, [r7, #4]
 803295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803295e:	4a14      	ldr	r2, [pc, #80]	; (80329b0 <I2C_ITError+0x19c>)
 8032960:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8032962:	687b      	ldr	r3, [r7, #4]
 8032964:	2200      	movs	r2, #0
 8032966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 803296a:	687b      	ldr	r3, [r7, #4]
 803296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803296e:	4618      	mov	r0, r3
 8032970:	f7fd fa96 	bl	802fea0 <HAL_DMA_Abort_IT>
 8032974:	4603      	mov	r3, r0
 8032976:	2b00      	cmp	r3, #0
 8032978:	d011      	beq.n	803299e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 803297a:	687b      	ldr	r3, [r7, #4]
 803297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032980:	687a      	ldr	r2, [r7, #4]
 8032982:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8032984:	4610      	mov	r0, r2
 8032986:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8032988:	e009      	b.n	803299e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 803298a:	6878      	ldr	r0, [r7, #4]
 803298c:	f000 f812 	bl	80329b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8032990:	e005      	b.n	803299e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8032992:	6878      	ldr	r0, [r7, #4]
 8032994:	f000 f80e 	bl	80329b4 <I2C_TreatErrorCallback>
  }
}
 8032998:	e002      	b.n	80329a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 803299a:	bf00      	nop
 803299c:	e000      	b.n	80329a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 803299e:	bf00      	nop
}
 80329a0:	bf00      	nop
 80329a2:	3710      	adds	r7, #16
 80329a4:	46bd      	mov	sp, r7
 80329a6:	bd80      	pop	{r7, pc}
 80329a8:	ffff0000 	.word	0xffff0000
 80329ac:	08031faf 	.word	0x08031faf
 80329b0:	08032a4b 	.word	0x08032a4b

080329b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80329b4:	b580      	push	{r7, lr}
 80329b6:	b082      	sub	sp, #8
 80329b8:	af00      	add	r7, sp, #0
 80329ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80329bc:	687b      	ldr	r3, [r7, #4]
 80329be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80329c2:	b2db      	uxtb	r3, r3
 80329c4:	2b60      	cmp	r3, #96	; 0x60
 80329c6:	d10e      	bne.n	80329e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80329c8:	687b      	ldr	r3, [r7, #4]
 80329ca:	2220      	movs	r2, #32
 80329cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80329d0:	687b      	ldr	r3, [r7, #4]
 80329d2:	2200      	movs	r2, #0
 80329d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80329d6:	687b      	ldr	r3, [r7, #4]
 80329d8:	2200      	movs	r2, #0
 80329da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80329de:	6878      	ldr	r0, [r7, #4]
 80329e0:	f7ff fadb 	bl	8031f9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80329e4:	e009      	b.n	80329fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80329e6:	687b      	ldr	r3, [r7, #4]
 80329e8:	2200      	movs	r2, #0
 80329ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80329ec:	687b      	ldr	r3, [r7, #4]
 80329ee:	2200      	movs	r2, #0
 80329f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80329f4:	6878      	ldr	r0, [r7, #4]
 80329f6:	f7ff fac6 	bl	8031f86 <HAL_I2C_ErrorCallback>
}
 80329fa:	bf00      	nop
 80329fc:	3708      	adds	r7, #8
 80329fe:	46bd      	mov	sp, r7
 8032a00:	bd80      	pop	{r7, pc}

08032a02 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8032a02:	b480      	push	{r7}
 8032a04:	b083      	sub	sp, #12
 8032a06:	af00      	add	r7, sp, #0
 8032a08:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8032a0a:	687b      	ldr	r3, [r7, #4]
 8032a0c:	681b      	ldr	r3, [r3, #0]
 8032a0e:	699b      	ldr	r3, [r3, #24]
 8032a10:	f003 0302 	and.w	r3, r3, #2
 8032a14:	2b02      	cmp	r3, #2
 8032a16:	d103      	bne.n	8032a20 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8032a18:	687b      	ldr	r3, [r7, #4]
 8032a1a:	681b      	ldr	r3, [r3, #0]
 8032a1c:	2200      	movs	r2, #0
 8032a1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8032a20:	687b      	ldr	r3, [r7, #4]
 8032a22:	681b      	ldr	r3, [r3, #0]
 8032a24:	699b      	ldr	r3, [r3, #24]
 8032a26:	f003 0301 	and.w	r3, r3, #1
 8032a2a:	2b01      	cmp	r3, #1
 8032a2c:	d007      	beq.n	8032a3e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8032a2e:	687b      	ldr	r3, [r7, #4]
 8032a30:	681b      	ldr	r3, [r3, #0]
 8032a32:	699a      	ldr	r2, [r3, #24]
 8032a34:	687b      	ldr	r3, [r7, #4]
 8032a36:	681b      	ldr	r3, [r3, #0]
 8032a38:	f042 0201 	orr.w	r2, r2, #1
 8032a3c:	619a      	str	r2, [r3, #24]
  }
}
 8032a3e:	bf00      	nop
 8032a40:	370c      	adds	r7, #12
 8032a42:	46bd      	mov	sp, r7
 8032a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a48:	4770      	bx	lr

08032a4a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8032a4a:	b580      	push	{r7, lr}
 8032a4c:	b084      	sub	sp, #16
 8032a4e:	af00      	add	r7, sp, #0
 8032a50:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8032a52:	687b      	ldr	r3, [r7, #4]
 8032a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a56:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8032a58:	68fb      	ldr	r3, [r7, #12]
 8032a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a5c:	2b00      	cmp	r3, #0
 8032a5e:	d003      	beq.n	8032a68 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8032a60:	68fb      	ldr	r3, [r7, #12]
 8032a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032a64:	2200      	movs	r2, #0
 8032a66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8032a68:	68fb      	ldr	r3, [r7, #12]
 8032a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032a6c:	2b00      	cmp	r3, #0
 8032a6e:	d003      	beq.n	8032a78 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8032a70:	68fb      	ldr	r3, [r7, #12]
 8032a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032a74:	2200      	movs	r2, #0
 8032a76:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8032a78:	68f8      	ldr	r0, [r7, #12]
 8032a7a:	f7ff ff9b 	bl	80329b4 <I2C_TreatErrorCallback>
}
 8032a7e:	bf00      	nop
 8032a80:	3710      	adds	r7, #16
 8032a82:	46bd      	mov	sp, r7
 8032a84:	bd80      	pop	{r7, pc}

08032a86 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8032a86:	b480      	push	{r7}
 8032a88:	b085      	sub	sp, #20
 8032a8a:	af00      	add	r7, sp, #0
 8032a8c:	6078      	str	r0, [r7, #4]
 8032a8e:	460b      	mov	r3, r1
 8032a90:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8032a92:	2300      	movs	r3, #0
 8032a94:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8032a96:	887b      	ldrh	r3, [r7, #2]
 8032a98:	f003 0301 	and.w	r3, r3, #1
 8032a9c:	2b00      	cmp	r3, #0
 8032a9e:	d00f      	beq.n	8032ac0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8032aa0:	68fb      	ldr	r3, [r7, #12]
 8032aa2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8032aa6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8032aa8:	687b      	ldr	r3, [r7, #4]
 8032aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032aae:	b2db      	uxtb	r3, r3
 8032ab0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8032ab4:	2b28      	cmp	r3, #40	; 0x28
 8032ab6:	d003      	beq.n	8032ac0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8032ab8:	68fb      	ldr	r3, [r7, #12]
 8032aba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8032abe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8032ac0:	887b      	ldrh	r3, [r7, #2]
 8032ac2:	f003 0302 	and.w	r3, r3, #2
 8032ac6:	2b00      	cmp	r3, #0
 8032ac8:	d00f      	beq.n	8032aea <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8032aca:	68fb      	ldr	r3, [r7, #12]
 8032acc:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8032ad0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8032ad2:	687b      	ldr	r3, [r7, #4]
 8032ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032ad8:	b2db      	uxtb	r3, r3
 8032ada:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8032ade:	2b28      	cmp	r3, #40	; 0x28
 8032ae0:	d003      	beq.n	8032aea <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8032ae2:	68fb      	ldr	r3, [r7, #12]
 8032ae4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8032ae8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8032aea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8032aee:	2b00      	cmp	r3, #0
 8032af0:	da03      	bge.n	8032afa <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8032af2:	68fb      	ldr	r3, [r7, #12]
 8032af4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8032af8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8032afa:	887b      	ldrh	r3, [r7, #2]
 8032afc:	2b10      	cmp	r3, #16
 8032afe:	d103      	bne.n	8032b08 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8032b00:	68fb      	ldr	r3, [r7, #12]
 8032b02:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8032b06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8032b08:	887b      	ldrh	r3, [r7, #2]
 8032b0a:	2b20      	cmp	r3, #32
 8032b0c:	d103      	bne.n	8032b16 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8032b0e:	68fb      	ldr	r3, [r7, #12]
 8032b10:	f043 0320 	orr.w	r3, r3, #32
 8032b14:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8032b16:	887b      	ldrh	r3, [r7, #2]
 8032b18:	2b40      	cmp	r3, #64	; 0x40
 8032b1a:	d103      	bne.n	8032b24 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8032b1c:	68fb      	ldr	r3, [r7, #12]
 8032b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8032b22:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8032b24:	687b      	ldr	r3, [r7, #4]
 8032b26:	681b      	ldr	r3, [r3, #0]
 8032b28:	6819      	ldr	r1, [r3, #0]
 8032b2a:	68fb      	ldr	r3, [r7, #12]
 8032b2c:	43da      	mvns	r2, r3
 8032b2e:	687b      	ldr	r3, [r7, #4]
 8032b30:	681b      	ldr	r3, [r3, #0]
 8032b32:	400a      	ands	r2, r1
 8032b34:	601a      	str	r2, [r3, #0]
}
 8032b36:	bf00      	nop
 8032b38:	3714      	adds	r7, #20
 8032b3a:	46bd      	mov	sp, r7
 8032b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032b40:	4770      	bx	lr

08032b42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8032b42:	b480      	push	{r7}
 8032b44:	b083      	sub	sp, #12
 8032b46:	af00      	add	r7, sp, #0
 8032b48:	6078      	str	r0, [r7, #4]
 8032b4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8032b4c:	687b      	ldr	r3, [r7, #4]
 8032b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032b52:	b2db      	uxtb	r3, r3
 8032b54:	2b20      	cmp	r3, #32
 8032b56:	d138      	bne.n	8032bca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8032b58:	687b      	ldr	r3, [r7, #4]
 8032b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8032b5e:	2b01      	cmp	r3, #1
 8032b60:	d101      	bne.n	8032b66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8032b62:	2302      	movs	r3, #2
 8032b64:	e032      	b.n	8032bcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8032b66:	687b      	ldr	r3, [r7, #4]
 8032b68:	2201      	movs	r2, #1
 8032b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8032b6e:	687b      	ldr	r3, [r7, #4]
 8032b70:	2224      	movs	r2, #36	; 0x24
 8032b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8032b76:	687b      	ldr	r3, [r7, #4]
 8032b78:	681b      	ldr	r3, [r3, #0]
 8032b7a:	681a      	ldr	r2, [r3, #0]
 8032b7c:	687b      	ldr	r3, [r7, #4]
 8032b7e:	681b      	ldr	r3, [r3, #0]
 8032b80:	f022 0201 	bic.w	r2, r2, #1
 8032b84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8032b86:	687b      	ldr	r3, [r7, #4]
 8032b88:	681b      	ldr	r3, [r3, #0]
 8032b8a:	681a      	ldr	r2, [r3, #0]
 8032b8c:	687b      	ldr	r3, [r7, #4]
 8032b8e:	681b      	ldr	r3, [r3, #0]
 8032b90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8032b94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8032b96:	687b      	ldr	r3, [r7, #4]
 8032b98:	681b      	ldr	r3, [r3, #0]
 8032b9a:	6819      	ldr	r1, [r3, #0]
 8032b9c:	687b      	ldr	r3, [r7, #4]
 8032b9e:	681b      	ldr	r3, [r3, #0]
 8032ba0:	683a      	ldr	r2, [r7, #0]
 8032ba2:	430a      	orrs	r2, r1
 8032ba4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8032ba6:	687b      	ldr	r3, [r7, #4]
 8032ba8:	681b      	ldr	r3, [r3, #0]
 8032baa:	681a      	ldr	r2, [r3, #0]
 8032bac:	687b      	ldr	r3, [r7, #4]
 8032bae:	681b      	ldr	r3, [r3, #0]
 8032bb0:	f042 0201 	orr.w	r2, r2, #1
 8032bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8032bb6:	687b      	ldr	r3, [r7, #4]
 8032bb8:	2220      	movs	r2, #32
 8032bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8032bbe:	687b      	ldr	r3, [r7, #4]
 8032bc0:	2200      	movs	r2, #0
 8032bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8032bc6:	2300      	movs	r3, #0
 8032bc8:	e000      	b.n	8032bcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8032bca:	2302      	movs	r3, #2
  }
}
 8032bcc:	4618      	mov	r0, r3
 8032bce:	370c      	adds	r7, #12
 8032bd0:	46bd      	mov	sp, r7
 8032bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032bd6:	4770      	bx	lr

08032bd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8032bd8:	b480      	push	{r7}
 8032bda:	b085      	sub	sp, #20
 8032bdc:	af00      	add	r7, sp, #0
 8032bde:	6078      	str	r0, [r7, #4]
 8032be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8032be2:	687b      	ldr	r3, [r7, #4]
 8032be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8032be8:	b2db      	uxtb	r3, r3
 8032bea:	2b20      	cmp	r3, #32
 8032bec:	d139      	bne.n	8032c62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8032bee:	687b      	ldr	r3, [r7, #4]
 8032bf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8032bf4:	2b01      	cmp	r3, #1
 8032bf6:	d101      	bne.n	8032bfc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8032bf8:	2302      	movs	r3, #2
 8032bfa:	e033      	b.n	8032c64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8032bfc:	687b      	ldr	r3, [r7, #4]
 8032bfe:	2201      	movs	r2, #1
 8032c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8032c04:	687b      	ldr	r3, [r7, #4]
 8032c06:	2224      	movs	r2, #36	; 0x24
 8032c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8032c0c:	687b      	ldr	r3, [r7, #4]
 8032c0e:	681b      	ldr	r3, [r3, #0]
 8032c10:	681a      	ldr	r2, [r3, #0]
 8032c12:	687b      	ldr	r3, [r7, #4]
 8032c14:	681b      	ldr	r3, [r3, #0]
 8032c16:	f022 0201 	bic.w	r2, r2, #1
 8032c1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8032c1c:	687b      	ldr	r3, [r7, #4]
 8032c1e:	681b      	ldr	r3, [r3, #0]
 8032c20:	681b      	ldr	r3, [r3, #0]
 8032c22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8032c24:	68fb      	ldr	r3, [r7, #12]
 8032c26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8032c2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8032c2c:	683b      	ldr	r3, [r7, #0]
 8032c2e:	021b      	lsls	r3, r3, #8
 8032c30:	68fa      	ldr	r2, [r7, #12]
 8032c32:	4313      	orrs	r3, r2
 8032c34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8032c36:	687b      	ldr	r3, [r7, #4]
 8032c38:	681b      	ldr	r3, [r3, #0]
 8032c3a:	68fa      	ldr	r2, [r7, #12]
 8032c3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8032c3e:	687b      	ldr	r3, [r7, #4]
 8032c40:	681b      	ldr	r3, [r3, #0]
 8032c42:	681a      	ldr	r2, [r3, #0]
 8032c44:	687b      	ldr	r3, [r7, #4]
 8032c46:	681b      	ldr	r3, [r3, #0]
 8032c48:	f042 0201 	orr.w	r2, r2, #1
 8032c4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8032c4e:	687b      	ldr	r3, [r7, #4]
 8032c50:	2220      	movs	r2, #32
 8032c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8032c56:	687b      	ldr	r3, [r7, #4]
 8032c58:	2200      	movs	r2, #0
 8032c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8032c5e:	2300      	movs	r3, #0
 8032c60:	e000      	b.n	8032c64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8032c62:	2302      	movs	r3, #2
  }
}
 8032c64:	4618      	mov	r0, r3
 8032c66:	3714      	adds	r7, #20
 8032c68:	46bd      	mov	sp, r7
 8032c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032c6e:	4770      	bx	lr

08032c70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8032c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8032c72:	b08f      	sub	sp, #60	; 0x3c
 8032c74:	af0a      	add	r7, sp, #40	; 0x28
 8032c76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8032c78:	687b      	ldr	r3, [r7, #4]
 8032c7a:	2b00      	cmp	r3, #0
 8032c7c:	d101      	bne.n	8032c82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8032c7e:	2301      	movs	r3, #1
 8032c80:	e116      	b.n	8032eb0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8032c82:	687b      	ldr	r3, [r7, #4]
 8032c84:	681b      	ldr	r3, [r3, #0]
 8032c86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8032c88:	687b      	ldr	r3, [r7, #4]
 8032c8a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8032c8e:	b2db      	uxtb	r3, r3
 8032c90:	2b00      	cmp	r3, #0
 8032c92:	d106      	bne.n	8032ca2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8032c94:	687b      	ldr	r3, [r7, #4]
 8032c96:	2200      	movs	r2, #0
 8032c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8032c9c:	6878      	ldr	r0, [r7, #4]
 8032c9e:	f00c f82f 	bl	803ed00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8032ca2:	687b      	ldr	r3, [r7, #4]
 8032ca4:	2203      	movs	r2, #3
 8032ca6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8032caa:	68bb      	ldr	r3, [r7, #8]
 8032cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032cb2:	2b00      	cmp	r3, #0
 8032cb4:	d102      	bne.n	8032cbc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8032cb6:	687b      	ldr	r3, [r7, #4]
 8032cb8:	2200      	movs	r2, #0
 8032cba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8032cbc:	687b      	ldr	r3, [r7, #4]
 8032cbe:	681b      	ldr	r3, [r3, #0]
 8032cc0:	4618      	mov	r0, r3
 8032cc2:	f008 fb78 	bl	803b3b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8032cc6:	687b      	ldr	r3, [r7, #4]
 8032cc8:	681b      	ldr	r3, [r3, #0]
 8032cca:	603b      	str	r3, [r7, #0]
 8032ccc:	687e      	ldr	r6, [r7, #4]
 8032cce:	466d      	mov	r5, sp
 8032cd0:	f106 0410 	add.w	r4, r6, #16
 8032cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8032cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8032cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8032cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8032cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8032ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8032ce4:	1d33      	adds	r3, r6, #4
 8032ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8032ce8:	6838      	ldr	r0, [r7, #0]
 8032cea:	f008 fa43 	bl	803b174 <USB_CoreInit>
 8032cee:	4603      	mov	r3, r0
 8032cf0:	2b00      	cmp	r3, #0
 8032cf2:	d005      	beq.n	8032d00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8032cf4:	687b      	ldr	r3, [r7, #4]
 8032cf6:	2202      	movs	r2, #2
 8032cf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8032cfc:	2301      	movs	r3, #1
 8032cfe:	e0d7      	b.n	8032eb0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8032d00:	687b      	ldr	r3, [r7, #4]
 8032d02:	681b      	ldr	r3, [r3, #0]
 8032d04:	2100      	movs	r1, #0
 8032d06:	4618      	mov	r0, r3
 8032d08:	f008 fb66 	bl	803b3d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8032d0c:	2300      	movs	r3, #0
 8032d0e:	73fb      	strb	r3, [r7, #15]
 8032d10:	e04a      	b.n	8032da8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8032d12:	7bfa      	ldrb	r2, [r7, #15]
 8032d14:	6879      	ldr	r1, [r7, #4]
 8032d16:	4613      	mov	r3, r2
 8032d18:	00db      	lsls	r3, r3, #3
 8032d1a:	4413      	add	r3, r2
 8032d1c:	009b      	lsls	r3, r3, #2
 8032d1e:	440b      	add	r3, r1
 8032d20:	333d      	adds	r3, #61	; 0x3d
 8032d22:	2201      	movs	r2, #1
 8032d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8032d26:	7bfa      	ldrb	r2, [r7, #15]
 8032d28:	6879      	ldr	r1, [r7, #4]
 8032d2a:	4613      	mov	r3, r2
 8032d2c:	00db      	lsls	r3, r3, #3
 8032d2e:	4413      	add	r3, r2
 8032d30:	009b      	lsls	r3, r3, #2
 8032d32:	440b      	add	r3, r1
 8032d34:	333c      	adds	r3, #60	; 0x3c
 8032d36:	7bfa      	ldrb	r2, [r7, #15]
 8032d38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8032d3a:	7bfa      	ldrb	r2, [r7, #15]
 8032d3c:	7bfb      	ldrb	r3, [r7, #15]
 8032d3e:	b298      	uxth	r0, r3
 8032d40:	6879      	ldr	r1, [r7, #4]
 8032d42:	4613      	mov	r3, r2
 8032d44:	00db      	lsls	r3, r3, #3
 8032d46:	4413      	add	r3, r2
 8032d48:	009b      	lsls	r3, r3, #2
 8032d4a:	440b      	add	r3, r1
 8032d4c:	3344      	adds	r3, #68	; 0x44
 8032d4e:	4602      	mov	r2, r0
 8032d50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8032d52:	7bfa      	ldrb	r2, [r7, #15]
 8032d54:	6879      	ldr	r1, [r7, #4]
 8032d56:	4613      	mov	r3, r2
 8032d58:	00db      	lsls	r3, r3, #3
 8032d5a:	4413      	add	r3, r2
 8032d5c:	009b      	lsls	r3, r3, #2
 8032d5e:	440b      	add	r3, r1
 8032d60:	3340      	adds	r3, #64	; 0x40
 8032d62:	2200      	movs	r2, #0
 8032d64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8032d66:	7bfa      	ldrb	r2, [r7, #15]
 8032d68:	6879      	ldr	r1, [r7, #4]
 8032d6a:	4613      	mov	r3, r2
 8032d6c:	00db      	lsls	r3, r3, #3
 8032d6e:	4413      	add	r3, r2
 8032d70:	009b      	lsls	r3, r3, #2
 8032d72:	440b      	add	r3, r1
 8032d74:	3348      	adds	r3, #72	; 0x48
 8032d76:	2200      	movs	r2, #0
 8032d78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8032d7a:	7bfa      	ldrb	r2, [r7, #15]
 8032d7c:	6879      	ldr	r1, [r7, #4]
 8032d7e:	4613      	mov	r3, r2
 8032d80:	00db      	lsls	r3, r3, #3
 8032d82:	4413      	add	r3, r2
 8032d84:	009b      	lsls	r3, r3, #2
 8032d86:	440b      	add	r3, r1
 8032d88:	334c      	adds	r3, #76	; 0x4c
 8032d8a:	2200      	movs	r2, #0
 8032d8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8032d8e:	7bfa      	ldrb	r2, [r7, #15]
 8032d90:	6879      	ldr	r1, [r7, #4]
 8032d92:	4613      	mov	r3, r2
 8032d94:	00db      	lsls	r3, r3, #3
 8032d96:	4413      	add	r3, r2
 8032d98:	009b      	lsls	r3, r3, #2
 8032d9a:	440b      	add	r3, r1
 8032d9c:	3354      	adds	r3, #84	; 0x54
 8032d9e:	2200      	movs	r2, #0
 8032da0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8032da2:	7bfb      	ldrb	r3, [r7, #15]
 8032da4:	3301      	adds	r3, #1
 8032da6:	73fb      	strb	r3, [r7, #15]
 8032da8:	7bfa      	ldrb	r2, [r7, #15]
 8032daa:	687b      	ldr	r3, [r7, #4]
 8032dac:	685b      	ldr	r3, [r3, #4]
 8032dae:	429a      	cmp	r2, r3
 8032db0:	d3af      	bcc.n	8032d12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8032db2:	2300      	movs	r3, #0
 8032db4:	73fb      	strb	r3, [r7, #15]
 8032db6:	e044      	b.n	8032e42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8032db8:	7bfa      	ldrb	r2, [r7, #15]
 8032dba:	6879      	ldr	r1, [r7, #4]
 8032dbc:	4613      	mov	r3, r2
 8032dbe:	00db      	lsls	r3, r3, #3
 8032dc0:	4413      	add	r3, r2
 8032dc2:	009b      	lsls	r3, r3, #2
 8032dc4:	440b      	add	r3, r1
 8032dc6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8032dca:	2200      	movs	r2, #0
 8032dcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8032dce:	7bfa      	ldrb	r2, [r7, #15]
 8032dd0:	6879      	ldr	r1, [r7, #4]
 8032dd2:	4613      	mov	r3, r2
 8032dd4:	00db      	lsls	r3, r3, #3
 8032dd6:	4413      	add	r3, r2
 8032dd8:	009b      	lsls	r3, r3, #2
 8032dda:	440b      	add	r3, r1
 8032ddc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8032de0:	7bfa      	ldrb	r2, [r7, #15]
 8032de2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8032de4:	7bfa      	ldrb	r2, [r7, #15]
 8032de6:	6879      	ldr	r1, [r7, #4]
 8032de8:	4613      	mov	r3, r2
 8032dea:	00db      	lsls	r3, r3, #3
 8032dec:	4413      	add	r3, r2
 8032dee:	009b      	lsls	r3, r3, #2
 8032df0:	440b      	add	r3, r1
 8032df2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8032df6:	2200      	movs	r2, #0
 8032df8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8032dfa:	7bfa      	ldrb	r2, [r7, #15]
 8032dfc:	6879      	ldr	r1, [r7, #4]
 8032dfe:	4613      	mov	r3, r2
 8032e00:	00db      	lsls	r3, r3, #3
 8032e02:	4413      	add	r3, r2
 8032e04:	009b      	lsls	r3, r3, #2
 8032e06:	440b      	add	r3, r1
 8032e08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8032e0c:	2200      	movs	r2, #0
 8032e0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8032e10:	7bfa      	ldrb	r2, [r7, #15]
 8032e12:	6879      	ldr	r1, [r7, #4]
 8032e14:	4613      	mov	r3, r2
 8032e16:	00db      	lsls	r3, r3, #3
 8032e18:	4413      	add	r3, r2
 8032e1a:	009b      	lsls	r3, r3, #2
 8032e1c:	440b      	add	r3, r1
 8032e1e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8032e22:	2200      	movs	r2, #0
 8032e24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8032e26:	7bfa      	ldrb	r2, [r7, #15]
 8032e28:	6879      	ldr	r1, [r7, #4]
 8032e2a:	4613      	mov	r3, r2
 8032e2c:	00db      	lsls	r3, r3, #3
 8032e2e:	4413      	add	r3, r2
 8032e30:	009b      	lsls	r3, r3, #2
 8032e32:	440b      	add	r3, r1
 8032e34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8032e38:	2200      	movs	r2, #0
 8032e3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8032e3c:	7bfb      	ldrb	r3, [r7, #15]
 8032e3e:	3301      	adds	r3, #1
 8032e40:	73fb      	strb	r3, [r7, #15]
 8032e42:	7bfa      	ldrb	r2, [r7, #15]
 8032e44:	687b      	ldr	r3, [r7, #4]
 8032e46:	685b      	ldr	r3, [r3, #4]
 8032e48:	429a      	cmp	r2, r3
 8032e4a:	d3b5      	bcc.n	8032db8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8032e4c:	687b      	ldr	r3, [r7, #4]
 8032e4e:	681b      	ldr	r3, [r3, #0]
 8032e50:	603b      	str	r3, [r7, #0]
 8032e52:	687e      	ldr	r6, [r7, #4]
 8032e54:	466d      	mov	r5, sp
 8032e56:	f106 0410 	add.w	r4, r6, #16
 8032e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8032e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8032e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8032e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8032e62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8032e66:	e885 0003 	stmia.w	r5, {r0, r1}
 8032e6a:	1d33      	adds	r3, r6, #4
 8032e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8032e6e:	6838      	ldr	r0, [r7, #0]
 8032e70:	f008 fafe 	bl	803b470 <USB_DevInit>
 8032e74:	4603      	mov	r3, r0
 8032e76:	2b00      	cmp	r3, #0
 8032e78:	d005      	beq.n	8032e86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8032e7a:	687b      	ldr	r3, [r7, #4]
 8032e7c:	2202      	movs	r2, #2
 8032e7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8032e82:	2301      	movs	r3, #1
 8032e84:	e014      	b.n	8032eb0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8032e86:	687b      	ldr	r3, [r7, #4]
 8032e88:	2200      	movs	r2, #0
 8032e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8032e8e:	687b      	ldr	r3, [r7, #4]
 8032e90:	2201      	movs	r2, #1
 8032e92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8032e96:	687b      	ldr	r3, [r7, #4]
 8032e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8032e9a:	2b01      	cmp	r3, #1
 8032e9c:	d102      	bne.n	8032ea4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8032e9e:	6878      	ldr	r0, [r7, #4]
 8032ea0:	f001 f98c 	bl	80341bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8032ea4:	687b      	ldr	r3, [r7, #4]
 8032ea6:	681b      	ldr	r3, [r3, #0]
 8032ea8:	4618      	mov	r0, r3
 8032eaa:	f009 fc4c 	bl	803c746 <USB_DevDisconnect>

  return HAL_OK;
 8032eae:	2300      	movs	r3, #0
}
 8032eb0:	4618      	mov	r0, r3
 8032eb2:	3714      	adds	r7, #20
 8032eb4:	46bd      	mov	sp, r7
 8032eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08032eb8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8032eb8:	b580      	push	{r7, lr}
 8032eba:	b084      	sub	sp, #16
 8032ebc:	af00      	add	r7, sp, #0
 8032ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8032ec0:	687b      	ldr	r3, [r7, #4]
 8032ec2:	681b      	ldr	r3, [r3, #0]
 8032ec4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8032ec6:	687b      	ldr	r3, [r7, #4]
 8032ec8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8032ecc:	2b01      	cmp	r3, #1
 8032ece:	d101      	bne.n	8032ed4 <HAL_PCD_Start+0x1c>
 8032ed0:	2302      	movs	r3, #2
 8032ed2:	e020      	b.n	8032f16 <HAL_PCD_Start+0x5e>
 8032ed4:	687b      	ldr	r3, [r7, #4]
 8032ed6:	2201      	movs	r2, #1
 8032ed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8032edc:	687b      	ldr	r3, [r7, #4]
 8032ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032ee0:	2b01      	cmp	r3, #1
 8032ee2:	d109      	bne.n	8032ef8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8032ee4:	687b      	ldr	r3, [r7, #4]
 8032ee6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8032ee8:	2b01      	cmp	r3, #1
 8032eea:	d005      	beq.n	8032ef8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8032eec:	68fb      	ldr	r3, [r7, #12]
 8032eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032ef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8032ef4:	68fb      	ldr	r3, [r7, #12]
 8032ef6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8032ef8:	687b      	ldr	r3, [r7, #4]
 8032efa:	681b      	ldr	r3, [r3, #0]
 8032efc:	4618      	mov	r0, r3
 8032efe:	f008 fa49 	bl	803b394 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8032f02:	687b      	ldr	r3, [r7, #4]
 8032f04:	681b      	ldr	r3, [r3, #0]
 8032f06:	4618      	mov	r0, r3
 8032f08:	f009 fbfc 	bl	803c704 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8032f0c:	687b      	ldr	r3, [r7, #4]
 8032f0e:	2200      	movs	r2, #0
 8032f10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8032f14:	2300      	movs	r3, #0
}
 8032f16:	4618      	mov	r0, r3
 8032f18:	3710      	adds	r7, #16
 8032f1a:	46bd      	mov	sp, r7
 8032f1c:	bd80      	pop	{r7, pc}

08032f1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8032f1e:	b590      	push	{r4, r7, lr}
 8032f20:	b08d      	sub	sp, #52	; 0x34
 8032f22:	af00      	add	r7, sp, #0
 8032f24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8032f26:	687b      	ldr	r3, [r7, #4]
 8032f28:	681b      	ldr	r3, [r3, #0]
 8032f2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8032f2c:	6a3b      	ldr	r3, [r7, #32]
 8032f2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8032f30:	687b      	ldr	r3, [r7, #4]
 8032f32:	681b      	ldr	r3, [r3, #0]
 8032f34:	4618      	mov	r0, r3
 8032f36:	f009 fcba 	bl	803c8ae <USB_GetMode>
 8032f3a:	4603      	mov	r3, r0
 8032f3c:	2b00      	cmp	r3, #0
 8032f3e:	f040 84b7 	bne.w	80338b0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8032f42:	687b      	ldr	r3, [r7, #4]
 8032f44:	681b      	ldr	r3, [r3, #0]
 8032f46:	4618      	mov	r0, r3
 8032f48:	f009 fc1e 	bl	803c788 <USB_ReadInterrupts>
 8032f4c:	4603      	mov	r3, r0
 8032f4e:	2b00      	cmp	r3, #0
 8032f50:	f000 84ad 	beq.w	80338ae <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8032f54:	69fb      	ldr	r3, [r7, #28]
 8032f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8032f5a:	689b      	ldr	r3, [r3, #8]
 8032f5c:	0a1b      	lsrs	r3, r3, #8
 8032f5e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8032f62:	687b      	ldr	r3, [r7, #4]
 8032f64:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8032f68:	687b      	ldr	r3, [r7, #4]
 8032f6a:	681b      	ldr	r3, [r3, #0]
 8032f6c:	4618      	mov	r0, r3
 8032f6e:	f009 fc0b 	bl	803c788 <USB_ReadInterrupts>
 8032f72:	4603      	mov	r3, r0
 8032f74:	f003 0302 	and.w	r3, r3, #2
 8032f78:	2b02      	cmp	r3, #2
 8032f7a:	d107      	bne.n	8032f8c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8032f7c:	687b      	ldr	r3, [r7, #4]
 8032f7e:	681b      	ldr	r3, [r3, #0]
 8032f80:	695a      	ldr	r2, [r3, #20]
 8032f82:	687b      	ldr	r3, [r7, #4]
 8032f84:	681b      	ldr	r3, [r3, #0]
 8032f86:	f002 0202 	and.w	r2, r2, #2
 8032f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8032f8c:	687b      	ldr	r3, [r7, #4]
 8032f8e:	681b      	ldr	r3, [r3, #0]
 8032f90:	4618      	mov	r0, r3
 8032f92:	f009 fbf9 	bl	803c788 <USB_ReadInterrupts>
 8032f96:	4603      	mov	r3, r0
 8032f98:	f003 0310 	and.w	r3, r3, #16
 8032f9c:	2b10      	cmp	r3, #16
 8032f9e:	d161      	bne.n	8033064 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8032fa0:	687b      	ldr	r3, [r7, #4]
 8032fa2:	681b      	ldr	r3, [r3, #0]
 8032fa4:	699a      	ldr	r2, [r3, #24]
 8032fa6:	687b      	ldr	r3, [r7, #4]
 8032fa8:	681b      	ldr	r3, [r3, #0]
 8032faa:	f022 0210 	bic.w	r2, r2, #16
 8032fae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8032fb0:	6a3b      	ldr	r3, [r7, #32]
 8032fb2:	6a1b      	ldr	r3, [r3, #32]
 8032fb4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8032fb6:	69bb      	ldr	r3, [r7, #24]
 8032fb8:	f003 020f 	and.w	r2, r3, #15
 8032fbc:	4613      	mov	r3, r2
 8032fbe:	00db      	lsls	r3, r3, #3
 8032fc0:	4413      	add	r3, r2
 8032fc2:	009b      	lsls	r3, r3, #2
 8032fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8032fc8:	687a      	ldr	r2, [r7, #4]
 8032fca:	4413      	add	r3, r2
 8032fcc:	3304      	adds	r3, #4
 8032fce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8032fd0:	69bb      	ldr	r3, [r7, #24]
 8032fd2:	0c5b      	lsrs	r3, r3, #17
 8032fd4:	f003 030f 	and.w	r3, r3, #15
 8032fd8:	2b02      	cmp	r3, #2
 8032fda:	d124      	bne.n	8033026 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8032fdc:	69ba      	ldr	r2, [r7, #24]
 8032fde:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8032fe2:	4013      	ands	r3, r2
 8032fe4:	2b00      	cmp	r3, #0
 8032fe6:	d035      	beq.n	8033054 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8032fe8:	697b      	ldr	r3, [r7, #20]
 8032fea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8032fec:	69bb      	ldr	r3, [r7, #24]
 8032fee:	091b      	lsrs	r3, r3, #4
 8032ff0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8032ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8032ff6:	b29b      	uxth	r3, r3
 8032ff8:	461a      	mov	r2, r3
 8032ffa:	6a38      	ldr	r0, [r7, #32]
 8032ffc:	f009 fa30 	bl	803c460 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8033000:	697b      	ldr	r3, [r7, #20]
 8033002:	691a      	ldr	r2, [r3, #16]
 8033004:	69bb      	ldr	r3, [r7, #24]
 8033006:	091b      	lsrs	r3, r3, #4
 8033008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 803300c:	441a      	add	r2, r3
 803300e:	697b      	ldr	r3, [r7, #20]
 8033010:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8033012:	697b      	ldr	r3, [r7, #20]
 8033014:	6a1a      	ldr	r2, [r3, #32]
 8033016:	69bb      	ldr	r3, [r7, #24]
 8033018:	091b      	lsrs	r3, r3, #4
 803301a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 803301e:	441a      	add	r2, r3
 8033020:	697b      	ldr	r3, [r7, #20]
 8033022:	621a      	str	r2, [r3, #32]
 8033024:	e016      	b.n	8033054 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8033026:	69bb      	ldr	r3, [r7, #24]
 8033028:	0c5b      	lsrs	r3, r3, #17
 803302a:	f003 030f 	and.w	r3, r3, #15
 803302e:	2b06      	cmp	r3, #6
 8033030:	d110      	bne.n	8033054 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8033032:	687b      	ldr	r3, [r7, #4]
 8033034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8033038:	2208      	movs	r2, #8
 803303a:	4619      	mov	r1, r3
 803303c:	6a38      	ldr	r0, [r7, #32]
 803303e:	f009 fa0f 	bl	803c460 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8033042:	697b      	ldr	r3, [r7, #20]
 8033044:	6a1a      	ldr	r2, [r3, #32]
 8033046:	69bb      	ldr	r3, [r7, #24]
 8033048:	091b      	lsrs	r3, r3, #4
 803304a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 803304e:	441a      	add	r2, r3
 8033050:	697b      	ldr	r3, [r7, #20]
 8033052:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8033054:	687b      	ldr	r3, [r7, #4]
 8033056:	681b      	ldr	r3, [r3, #0]
 8033058:	699a      	ldr	r2, [r3, #24]
 803305a:	687b      	ldr	r3, [r7, #4]
 803305c:	681b      	ldr	r3, [r3, #0]
 803305e:	f042 0210 	orr.w	r2, r2, #16
 8033062:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8033064:	687b      	ldr	r3, [r7, #4]
 8033066:	681b      	ldr	r3, [r3, #0]
 8033068:	4618      	mov	r0, r3
 803306a:	f009 fb8d 	bl	803c788 <USB_ReadInterrupts>
 803306e:	4603      	mov	r3, r0
 8033070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8033074:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8033078:	f040 80a7 	bne.w	80331ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 803307c:	2300      	movs	r3, #0
 803307e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8033080:	687b      	ldr	r3, [r7, #4]
 8033082:	681b      	ldr	r3, [r3, #0]
 8033084:	4618      	mov	r0, r3
 8033086:	f009 fb92 	bl	803c7ae <USB_ReadDevAllOutEpInterrupt>
 803308a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 803308c:	e099      	b.n	80331c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 803308e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033090:	f003 0301 	and.w	r3, r3, #1
 8033094:	2b00      	cmp	r3, #0
 8033096:	f000 808e 	beq.w	80331b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 803309a:	687b      	ldr	r3, [r7, #4]
 803309c:	681b      	ldr	r3, [r3, #0]
 803309e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80330a0:	b2d2      	uxtb	r2, r2
 80330a2:	4611      	mov	r1, r2
 80330a4:	4618      	mov	r0, r3
 80330a6:	f009 fbb6 	bl	803c816 <USB_ReadDevOutEPInterrupt>
 80330aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80330ac:	693b      	ldr	r3, [r7, #16]
 80330ae:	f003 0301 	and.w	r3, r3, #1
 80330b2:	2b00      	cmp	r3, #0
 80330b4:	d00c      	beq.n	80330d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80330b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80330b8:	015a      	lsls	r2, r3, #5
 80330ba:	69fb      	ldr	r3, [r7, #28]
 80330bc:	4413      	add	r3, r2
 80330be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80330c2:	461a      	mov	r2, r3
 80330c4:	2301      	movs	r3, #1
 80330c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80330c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80330ca:	6878      	ldr	r0, [r7, #4]
 80330cc:	f000 fef0 	bl	8033eb0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80330d0:	693b      	ldr	r3, [r7, #16]
 80330d2:	f003 0308 	and.w	r3, r3, #8
 80330d6:	2b00      	cmp	r3, #0
 80330d8:	d00c      	beq.n	80330f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80330da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80330dc:	015a      	lsls	r2, r3, #5
 80330de:	69fb      	ldr	r3, [r7, #28]
 80330e0:	4413      	add	r3, r2
 80330e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80330e6:	461a      	mov	r2, r3
 80330e8:	2308      	movs	r3, #8
 80330ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80330ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80330ee:	6878      	ldr	r0, [r7, #4]
 80330f0:	f000 ffc6 	bl	8034080 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80330f4:	693b      	ldr	r3, [r7, #16]
 80330f6:	f003 0310 	and.w	r3, r3, #16
 80330fa:	2b00      	cmp	r3, #0
 80330fc:	d008      	beq.n	8033110 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80330fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033100:	015a      	lsls	r2, r3, #5
 8033102:	69fb      	ldr	r3, [r7, #28]
 8033104:	4413      	add	r3, r2
 8033106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803310a:	461a      	mov	r2, r3
 803310c:	2310      	movs	r3, #16
 803310e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8033110:	693b      	ldr	r3, [r7, #16]
 8033112:	f003 0302 	and.w	r3, r3, #2
 8033116:	2b00      	cmp	r3, #0
 8033118:	d030      	beq.n	803317c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 803311a:	6a3b      	ldr	r3, [r7, #32]
 803311c:	695b      	ldr	r3, [r3, #20]
 803311e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033122:	2b80      	cmp	r3, #128	; 0x80
 8033124:	d109      	bne.n	803313a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8033126:	69fb      	ldr	r3, [r7, #28]
 8033128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803312c:	685b      	ldr	r3, [r3, #4]
 803312e:	69fa      	ldr	r2, [r7, #28]
 8033130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8033134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8033138:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 803313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803313c:	4613      	mov	r3, r2
 803313e:	00db      	lsls	r3, r3, #3
 8033140:	4413      	add	r3, r2
 8033142:	009b      	lsls	r3, r3, #2
 8033144:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033148:	687a      	ldr	r2, [r7, #4]
 803314a:	4413      	add	r3, r2
 803314c:	3304      	adds	r3, #4
 803314e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8033150:	697b      	ldr	r3, [r7, #20]
 8033152:	78db      	ldrb	r3, [r3, #3]
 8033154:	2b01      	cmp	r3, #1
 8033156:	d108      	bne.n	803316a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8033158:	697b      	ldr	r3, [r7, #20]
 803315a:	2200      	movs	r2, #0
 803315c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 803315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033160:	b2db      	uxtb	r3, r3
 8033162:	4619      	mov	r1, r3
 8033164:	6878      	ldr	r0, [r7, #4]
 8033166:	f00b fef7 	bl	803ef58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 803316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803316c:	015a      	lsls	r2, r3, #5
 803316e:	69fb      	ldr	r3, [r7, #28]
 8033170:	4413      	add	r3, r2
 8033172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033176:	461a      	mov	r2, r3
 8033178:	2302      	movs	r3, #2
 803317a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 803317c:	693b      	ldr	r3, [r7, #16]
 803317e:	f003 0320 	and.w	r3, r3, #32
 8033182:	2b00      	cmp	r3, #0
 8033184:	d008      	beq.n	8033198 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8033186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033188:	015a      	lsls	r2, r3, #5
 803318a:	69fb      	ldr	r3, [r7, #28]
 803318c:	4413      	add	r3, r2
 803318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033192:	461a      	mov	r2, r3
 8033194:	2320      	movs	r3, #32
 8033196:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8033198:	693b      	ldr	r3, [r7, #16]
 803319a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803319e:	2b00      	cmp	r3, #0
 80331a0:	d009      	beq.n	80331b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80331a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80331a4:	015a      	lsls	r2, r3, #5
 80331a6:	69fb      	ldr	r3, [r7, #28]
 80331a8:	4413      	add	r3, r2
 80331aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80331ae:	461a      	mov	r2, r3
 80331b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80331b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80331b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80331b8:	3301      	adds	r3, #1
 80331ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80331bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80331be:	085b      	lsrs	r3, r3, #1
 80331c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80331c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80331c4:	2b00      	cmp	r3, #0
 80331c6:	f47f af62 	bne.w	803308e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80331ca:	687b      	ldr	r3, [r7, #4]
 80331cc:	681b      	ldr	r3, [r3, #0]
 80331ce:	4618      	mov	r0, r3
 80331d0:	f009 fada 	bl	803c788 <USB_ReadInterrupts>
 80331d4:	4603      	mov	r3, r0
 80331d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80331da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80331de:	f040 80db 	bne.w	8033398 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80331e2:	687b      	ldr	r3, [r7, #4]
 80331e4:	681b      	ldr	r3, [r3, #0]
 80331e6:	4618      	mov	r0, r3
 80331e8:	f009 fafb 	bl	803c7e2 <USB_ReadDevAllInEpInterrupt>
 80331ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80331ee:	2300      	movs	r3, #0
 80331f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80331f2:	e0cd      	b.n	8033390 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80331f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80331f6:	f003 0301 	and.w	r3, r3, #1
 80331fa:	2b00      	cmp	r3, #0
 80331fc:	f000 80c2 	beq.w	8033384 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8033200:	687b      	ldr	r3, [r7, #4]
 8033202:	681b      	ldr	r3, [r3, #0]
 8033204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033206:	b2d2      	uxtb	r2, r2
 8033208:	4611      	mov	r1, r2
 803320a:	4618      	mov	r0, r3
 803320c:	f009 fb21 	bl	803c852 <USB_ReadDevInEPInterrupt>
 8033210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8033212:	693b      	ldr	r3, [r7, #16]
 8033214:	f003 0301 	and.w	r3, r3, #1
 8033218:	2b00      	cmp	r3, #0
 803321a:	d057      	beq.n	80332cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 803321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803321e:	f003 030f 	and.w	r3, r3, #15
 8033222:	2201      	movs	r2, #1
 8033224:	fa02 f303 	lsl.w	r3, r2, r3
 8033228:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 803322a:	69fb      	ldr	r3, [r7, #28]
 803322c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8033232:	68fb      	ldr	r3, [r7, #12]
 8033234:	43db      	mvns	r3, r3
 8033236:	69f9      	ldr	r1, [r7, #28]
 8033238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803323c:	4013      	ands	r3, r2
 803323e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8033240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033242:	015a      	lsls	r2, r3, #5
 8033244:	69fb      	ldr	r3, [r7, #28]
 8033246:	4413      	add	r3, r2
 8033248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803324c:	461a      	mov	r2, r3
 803324e:	2301      	movs	r3, #1
 8033250:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8033252:	687b      	ldr	r3, [r7, #4]
 8033254:	691b      	ldr	r3, [r3, #16]
 8033256:	2b01      	cmp	r3, #1
 8033258:	d132      	bne.n	80332c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 803325a:	6879      	ldr	r1, [r7, #4]
 803325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803325e:	4613      	mov	r3, r2
 8033260:	00db      	lsls	r3, r3, #3
 8033262:	4413      	add	r3, r2
 8033264:	009b      	lsls	r3, r3, #2
 8033266:	440b      	add	r3, r1
 8033268:	334c      	adds	r3, #76	; 0x4c
 803326a:	6819      	ldr	r1, [r3, #0]
 803326c:	6878      	ldr	r0, [r7, #4]
 803326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033270:	4613      	mov	r3, r2
 8033272:	00db      	lsls	r3, r3, #3
 8033274:	4413      	add	r3, r2
 8033276:	009b      	lsls	r3, r3, #2
 8033278:	4403      	add	r3, r0
 803327a:	3348      	adds	r3, #72	; 0x48
 803327c:	681b      	ldr	r3, [r3, #0]
 803327e:	4419      	add	r1, r3
 8033280:	6878      	ldr	r0, [r7, #4]
 8033282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033284:	4613      	mov	r3, r2
 8033286:	00db      	lsls	r3, r3, #3
 8033288:	4413      	add	r3, r2
 803328a:	009b      	lsls	r3, r3, #2
 803328c:	4403      	add	r3, r0
 803328e:	334c      	adds	r3, #76	; 0x4c
 8033290:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8033292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033294:	2b00      	cmp	r3, #0
 8033296:	d113      	bne.n	80332c0 <HAL_PCD_IRQHandler+0x3a2>
 8033298:	6879      	ldr	r1, [r7, #4]
 803329a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803329c:	4613      	mov	r3, r2
 803329e:	00db      	lsls	r3, r3, #3
 80332a0:	4413      	add	r3, r2
 80332a2:	009b      	lsls	r3, r3, #2
 80332a4:	440b      	add	r3, r1
 80332a6:	3354      	adds	r3, #84	; 0x54
 80332a8:	681b      	ldr	r3, [r3, #0]
 80332aa:	2b00      	cmp	r3, #0
 80332ac:	d108      	bne.n	80332c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80332ae:	687b      	ldr	r3, [r7, #4]
 80332b0:	6818      	ldr	r0, [r3, #0]
 80332b2:	687b      	ldr	r3, [r7, #4]
 80332b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80332b8:	461a      	mov	r2, r3
 80332ba:	2101      	movs	r1, #1
 80332bc:	f009 fb2a 	bl	803c914 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80332c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80332c2:	b2db      	uxtb	r3, r3
 80332c4:	4619      	mov	r1, r3
 80332c6:	6878      	ldr	r0, [r7, #4]
 80332c8:	f00b fdc1 	bl	803ee4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80332cc:	693b      	ldr	r3, [r7, #16]
 80332ce:	f003 0308 	and.w	r3, r3, #8
 80332d2:	2b00      	cmp	r3, #0
 80332d4:	d008      	beq.n	80332e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80332d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80332d8:	015a      	lsls	r2, r3, #5
 80332da:	69fb      	ldr	r3, [r7, #28]
 80332dc:	4413      	add	r3, r2
 80332de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80332e2:	461a      	mov	r2, r3
 80332e4:	2308      	movs	r3, #8
 80332e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80332e8:	693b      	ldr	r3, [r7, #16]
 80332ea:	f003 0310 	and.w	r3, r3, #16
 80332ee:	2b00      	cmp	r3, #0
 80332f0:	d008      	beq.n	8033304 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80332f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80332f4:	015a      	lsls	r2, r3, #5
 80332f6:	69fb      	ldr	r3, [r7, #28]
 80332f8:	4413      	add	r3, r2
 80332fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80332fe:	461a      	mov	r2, r3
 8033300:	2310      	movs	r3, #16
 8033302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8033304:	693b      	ldr	r3, [r7, #16]
 8033306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803330a:	2b00      	cmp	r3, #0
 803330c:	d008      	beq.n	8033320 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 803330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033310:	015a      	lsls	r2, r3, #5
 8033312:	69fb      	ldr	r3, [r7, #28]
 8033314:	4413      	add	r3, r2
 8033316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803331a:	461a      	mov	r2, r3
 803331c:	2340      	movs	r3, #64	; 0x40
 803331e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8033320:	693b      	ldr	r3, [r7, #16]
 8033322:	f003 0302 	and.w	r3, r3, #2
 8033326:	2b00      	cmp	r3, #0
 8033328:	d023      	beq.n	8033372 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 803332a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803332c:	6a38      	ldr	r0, [r7, #32]
 803332e:	f008 f9fd 	bl	803b72c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8033332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033334:	4613      	mov	r3, r2
 8033336:	00db      	lsls	r3, r3, #3
 8033338:	4413      	add	r3, r2
 803333a:	009b      	lsls	r3, r3, #2
 803333c:	3338      	adds	r3, #56	; 0x38
 803333e:	687a      	ldr	r2, [r7, #4]
 8033340:	4413      	add	r3, r2
 8033342:	3304      	adds	r3, #4
 8033344:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8033346:	697b      	ldr	r3, [r7, #20]
 8033348:	78db      	ldrb	r3, [r3, #3]
 803334a:	2b01      	cmp	r3, #1
 803334c:	d108      	bne.n	8033360 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 803334e:	697b      	ldr	r3, [r7, #20]
 8033350:	2200      	movs	r2, #0
 8033352:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8033354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033356:	b2db      	uxtb	r3, r3
 8033358:	4619      	mov	r1, r3
 803335a:	6878      	ldr	r0, [r7, #4]
 803335c:	f00b fe0e 	bl	803ef7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8033360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033362:	015a      	lsls	r2, r3, #5
 8033364:	69fb      	ldr	r3, [r7, #28]
 8033366:	4413      	add	r3, r2
 8033368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803336c:	461a      	mov	r2, r3
 803336e:	2302      	movs	r3, #2
 8033370:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8033372:	693b      	ldr	r3, [r7, #16]
 8033374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8033378:	2b00      	cmp	r3, #0
 803337a:	d003      	beq.n	8033384 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 803337c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803337e:	6878      	ldr	r0, [r7, #4]
 8033380:	f000 fd08 	bl	8033d94 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8033384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033386:	3301      	adds	r3, #1
 8033388:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 803338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803338c:	085b      	lsrs	r3, r3, #1
 803338e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8033390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8033392:	2b00      	cmp	r3, #0
 8033394:	f47f af2e 	bne.w	80331f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8033398:	687b      	ldr	r3, [r7, #4]
 803339a:	681b      	ldr	r3, [r3, #0]
 803339c:	4618      	mov	r0, r3
 803339e:	f009 f9f3 	bl	803c788 <USB_ReadInterrupts>
 80333a2:	4603      	mov	r3, r0
 80333a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80333a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80333ac:	d122      	bne.n	80333f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80333ae:	69fb      	ldr	r3, [r7, #28]
 80333b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80333b4:	685b      	ldr	r3, [r3, #4]
 80333b6:	69fa      	ldr	r2, [r7, #28]
 80333b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80333bc:	f023 0301 	bic.w	r3, r3, #1
 80333c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80333c2:	687b      	ldr	r3, [r7, #4]
 80333c4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80333c8:	2b01      	cmp	r3, #1
 80333ca:	d108      	bne.n	80333de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80333cc:	687b      	ldr	r3, [r7, #4]
 80333ce:	2200      	movs	r2, #0
 80333d0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80333d4:	2100      	movs	r1, #0
 80333d6:	6878      	ldr	r0, [r7, #4]
 80333d8:	f000 ff14 	bl	8034204 <HAL_PCDEx_LPM_Callback>
 80333dc:	e002      	b.n	80333e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80333de:	6878      	ldr	r0, [r7, #4]
 80333e0:	f00b fdac 	bl	803ef3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80333e4:	687b      	ldr	r3, [r7, #4]
 80333e6:	681b      	ldr	r3, [r3, #0]
 80333e8:	695a      	ldr	r2, [r3, #20]
 80333ea:	687b      	ldr	r3, [r7, #4]
 80333ec:	681b      	ldr	r3, [r3, #0]
 80333ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80333f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80333f4:	687b      	ldr	r3, [r7, #4]
 80333f6:	681b      	ldr	r3, [r3, #0]
 80333f8:	4618      	mov	r0, r3
 80333fa:	f009 f9c5 	bl	803c788 <USB_ReadInterrupts>
 80333fe:	4603      	mov	r3, r0
 8033400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8033404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8033408:	d112      	bne.n	8033430 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 803340a:	69fb      	ldr	r3, [r7, #28]
 803340c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033410:	689b      	ldr	r3, [r3, #8]
 8033412:	f003 0301 	and.w	r3, r3, #1
 8033416:	2b01      	cmp	r3, #1
 8033418:	d102      	bne.n	8033420 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 803341a:	6878      	ldr	r0, [r7, #4]
 803341c:	f00b fd68 	bl	803eef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8033420:	687b      	ldr	r3, [r7, #4]
 8033422:	681b      	ldr	r3, [r3, #0]
 8033424:	695a      	ldr	r2, [r3, #20]
 8033426:	687b      	ldr	r3, [r7, #4]
 8033428:	681b      	ldr	r3, [r3, #0]
 803342a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 803342e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8033430:	687b      	ldr	r3, [r7, #4]
 8033432:	681b      	ldr	r3, [r3, #0]
 8033434:	4618      	mov	r0, r3
 8033436:	f009 f9a7 	bl	803c788 <USB_ReadInterrupts>
 803343a:	4603      	mov	r3, r0
 803343c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8033440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8033444:	d121      	bne.n	803348a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8033446:	687b      	ldr	r3, [r7, #4]
 8033448:	681b      	ldr	r3, [r3, #0]
 803344a:	695a      	ldr	r2, [r3, #20]
 803344c:	687b      	ldr	r3, [r7, #4]
 803344e:	681b      	ldr	r3, [r3, #0]
 8033450:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8033454:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8033456:	687b      	ldr	r3, [r7, #4]
 8033458:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 803345c:	2b00      	cmp	r3, #0
 803345e:	d111      	bne.n	8033484 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8033460:	687b      	ldr	r3, [r7, #4]
 8033462:	2201      	movs	r2, #1
 8033464:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8033468:	687b      	ldr	r3, [r7, #4]
 803346a:	681b      	ldr	r3, [r3, #0]
 803346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803346e:	089b      	lsrs	r3, r3, #2
 8033470:	f003 020f 	and.w	r2, r3, #15
 8033474:	687b      	ldr	r3, [r7, #4]
 8033476:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 803347a:	2101      	movs	r1, #1
 803347c:	6878      	ldr	r0, [r7, #4]
 803347e:	f000 fec1 	bl	8034204 <HAL_PCDEx_LPM_Callback>
 8033482:	e002      	b.n	803348a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8033484:	6878      	ldr	r0, [r7, #4]
 8033486:	f00b fd33 	bl	803eef0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 803348a:	687b      	ldr	r3, [r7, #4]
 803348c:	681b      	ldr	r3, [r3, #0]
 803348e:	4618      	mov	r0, r3
 8033490:	f009 f97a 	bl	803c788 <USB_ReadInterrupts>
 8033494:	4603      	mov	r3, r0
 8033496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 803349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803349e:	f040 80b7 	bne.w	8033610 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80334a2:	69fb      	ldr	r3, [r7, #28]
 80334a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80334a8:	685b      	ldr	r3, [r3, #4]
 80334aa:	69fa      	ldr	r2, [r7, #28]
 80334ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80334b0:	f023 0301 	bic.w	r3, r3, #1
 80334b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80334b6:	687b      	ldr	r3, [r7, #4]
 80334b8:	681b      	ldr	r3, [r3, #0]
 80334ba:	2110      	movs	r1, #16
 80334bc:	4618      	mov	r0, r3
 80334be:	f008 f935 	bl	803b72c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80334c2:	2300      	movs	r3, #0
 80334c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80334c6:	e046      	b.n	8033556 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80334c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334ca:	015a      	lsls	r2, r3, #5
 80334cc:	69fb      	ldr	r3, [r7, #28]
 80334ce:	4413      	add	r3, r2
 80334d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80334d4:	461a      	mov	r2, r3
 80334d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80334da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80334dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334de:	015a      	lsls	r2, r3, #5
 80334e0:	69fb      	ldr	r3, [r7, #28]
 80334e2:	4413      	add	r3, r2
 80334e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80334e8:	681b      	ldr	r3, [r3, #0]
 80334ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80334ec:	0151      	lsls	r1, r2, #5
 80334ee:	69fa      	ldr	r2, [r7, #28]
 80334f0:	440a      	add	r2, r1
 80334f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80334f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80334fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80334fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80334fe:	015a      	lsls	r2, r3, #5
 8033500:	69fb      	ldr	r3, [r7, #28]
 8033502:	4413      	add	r3, r2
 8033504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033508:	461a      	mov	r2, r3
 803350a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803350e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8033510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033512:	015a      	lsls	r2, r3, #5
 8033514:	69fb      	ldr	r3, [r7, #28]
 8033516:	4413      	add	r3, r2
 8033518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803351c:	681b      	ldr	r3, [r3, #0]
 803351e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8033520:	0151      	lsls	r1, r2, #5
 8033522:	69fa      	ldr	r2, [r7, #28]
 8033524:	440a      	add	r2, r1
 8033526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803352a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803352e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8033530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033532:	015a      	lsls	r2, r3, #5
 8033534:	69fb      	ldr	r3, [r7, #28]
 8033536:	4413      	add	r3, r2
 8033538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803353c:	681b      	ldr	r3, [r3, #0]
 803353e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8033540:	0151      	lsls	r1, r2, #5
 8033542:	69fa      	ldr	r2, [r7, #28]
 8033544:	440a      	add	r2, r1
 8033546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803354a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803354e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8033550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033552:	3301      	adds	r3, #1
 8033554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8033556:	687b      	ldr	r3, [r7, #4]
 8033558:	685b      	ldr	r3, [r3, #4]
 803355a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803355c:	429a      	cmp	r2, r3
 803355e:	d3b3      	bcc.n	80334c8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8033560:	69fb      	ldr	r3, [r7, #28]
 8033562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033566:	69db      	ldr	r3, [r3, #28]
 8033568:	69fa      	ldr	r2, [r7, #28]
 803356a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803356e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8033572:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8033574:	687b      	ldr	r3, [r7, #4]
 8033576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8033578:	2b00      	cmp	r3, #0
 803357a:	d016      	beq.n	80335aa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 803357c:	69fb      	ldr	r3, [r7, #28]
 803357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033586:	69fa      	ldr	r2, [r7, #28]
 8033588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803358c:	f043 030b 	orr.w	r3, r3, #11
 8033590:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8033594:	69fb      	ldr	r3, [r7, #28]
 8033596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803359c:	69fa      	ldr	r2, [r7, #28]
 803359e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80335a2:	f043 030b 	orr.w	r3, r3, #11
 80335a6:	6453      	str	r3, [r2, #68]	; 0x44
 80335a8:	e015      	b.n	80335d6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80335aa:	69fb      	ldr	r3, [r7, #28]
 80335ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80335b0:	695a      	ldr	r2, [r3, #20]
 80335b2:	69fb      	ldr	r3, [r7, #28]
 80335b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80335b8:	4619      	mov	r1, r3
 80335ba:	f242 032b 	movw	r3, #8235	; 0x202b
 80335be:	4313      	orrs	r3, r2
 80335c0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80335c2:	69fb      	ldr	r3, [r7, #28]
 80335c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80335c8:	691b      	ldr	r3, [r3, #16]
 80335ca:	69fa      	ldr	r2, [r7, #28]
 80335cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80335d0:	f043 030b 	orr.w	r3, r3, #11
 80335d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80335d6:	69fb      	ldr	r3, [r7, #28]
 80335d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80335dc:	681b      	ldr	r3, [r3, #0]
 80335de:	69fa      	ldr	r2, [r7, #28]
 80335e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80335e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80335e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80335ea:	687b      	ldr	r3, [r7, #4]
 80335ec:	6818      	ldr	r0, [r3, #0]
 80335ee:	687b      	ldr	r3, [r7, #4]
 80335f0:	691b      	ldr	r3, [r3, #16]
 80335f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80335f4:	687b      	ldr	r3, [r7, #4]
 80335f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80335fa:	461a      	mov	r2, r3
 80335fc:	f009 f98a 	bl	803c914 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8033600:	687b      	ldr	r3, [r7, #4]
 8033602:	681b      	ldr	r3, [r3, #0]
 8033604:	695a      	ldr	r2, [r3, #20]
 8033606:	687b      	ldr	r3, [r7, #4]
 8033608:	681b      	ldr	r3, [r3, #0]
 803360a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 803360e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8033610:	687b      	ldr	r3, [r7, #4]
 8033612:	681b      	ldr	r3, [r3, #0]
 8033614:	4618      	mov	r0, r3
 8033616:	f009 f8b7 	bl	803c788 <USB_ReadInterrupts>
 803361a:	4603      	mov	r3, r0
 803361c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8033620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033624:	d124      	bne.n	8033670 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8033626:	687b      	ldr	r3, [r7, #4]
 8033628:	681b      	ldr	r3, [r3, #0]
 803362a:	4618      	mov	r0, r3
 803362c:	f009 f94e 	bl	803c8cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8033630:	687b      	ldr	r3, [r7, #4]
 8033632:	681b      	ldr	r3, [r3, #0]
 8033634:	4618      	mov	r0, r3
 8033636:	f008 f8f6 	bl	803b826 <USB_GetDevSpeed>
 803363a:	4603      	mov	r3, r0
 803363c:	461a      	mov	r2, r3
 803363e:	687b      	ldr	r3, [r7, #4]
 8033640:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8033642:	687b      	ldr	r3, [r7, #4]
 8033644:	681c      	ldr	r4, [r3, #0]
 8033646:	f001 fd91 	bl	803516c <HAL_RCC_GetHCLKFreq>
 803364a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 803364c:	687b      	ldr	r3, [r7, #4]
 803364e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8033650:	b2db      	uxtb	r3, r3
 8033652:	461a      	mov	r2, r3
 8033654:	4620      	mov	r0, r4
 8033656:	f007 fdfb 	bl	803b250 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 803365a:	6878      	ldr	r0, [r7, #4]
 803365c:	f00b fc1f 	bl	803ee9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8033660:	687b      	ldr	r3, [r7, #4]
 8033662:	681b      	ldr	r3, [r3, #0]
 8033664:	695a      	ldr	r2, [r3, #20]
 8033666:	687b      	ldr	r3, [r7, #4]
 8033668:	681b      	ldr	r3, [r3, #0]
 803366a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 803366e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8033670:	687b      	ldr	r3, [r7, #4]
 8033672:	681b      	ldr	r3, [r3, #0]
 8033674:	4618      	mov	r0, r3
 8033676:	f009 f887 	bl	803c788 <USB_ReadInterrupts>
 803367a:	4603      	mov	r3, r0
 803367c:	f003 0308 	and.w	r3, r3, #8
 8033680:	2b08      	cmp	r3, #8
 8033682:	d10a      	bne.n	803369a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8033684:	6878      	ldr	r0, [r7, #4]
 8033686:	f00b fbfc 	bl	803ee82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 803368a:	687b      	ldr	r3, [r7, #4]
 803368c:	681b      	ldr	r3, [r3, #0]
 803368e:	695a      	ldr	r2, [r3, #20]
 8033690:	687b      	ldr	r3, [r7, #4]
 8033692:	681b      	ldr	r3, [r3, #0]
 8033694:	f002 0208 	and.w	r2, r2, #8
 8033698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 803369a:	687b      	ldr	r3, [r7, #4]
 803369c:	681b      	ldr	r3, [r3, #0]
 803369e:	4618      	mov	r0, r3
 80336a0:	f009 f872 	bl	803c788 <USB_ReadInterrupts>
 80336a4:	4603      	mov	r3, r0
 80336a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80336aa:	2b80      	cmp	r3, #128	; 0x80
 80336ac:	d122      	bne.n	80336f4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80336ae:	6a3b      	ldr	r3, [r7, #32]
 80336b0:	699b      	ldr	r3, [r3, #24]
 80336b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80336b6:	6a3b      	ldr	r3, [r7, #32]
 80336b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80336ba:	2301      	movs	r3, #1
 80336bc:	627b      	str	r3, [r7, #36]	; 0x24
 80336be:	e014      	b.n	80336ea <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80336c0:	6879      	ldr	r1, [r7, #4]
 80336c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80336c4:	4613      	mov	r3, r2
 80336c6:	00db      	lsls	r3, r3, #3
 80336c8:	4413      	add	r3, r2
 80336ca:	009b      	lsls	r3, r3, #2
 80336cc:	440b      	add	r3, r1
 80336ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80336d2:	781b      	ldrb	r3, [r3, #0]
 80336d4:	2b01      	cmp	r3, #1
 80336d6:	d105      	bne.n	80336e4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80336d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80336da:	b2db      	uxtb	r3, r3
 80336dc:	4619      	mov	r1, r3
 80336de:	6878      	ldr	r0, [r7, #4]
 80336e0:	f000 fb27 	bl	8033d32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80336e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80336e6:	3301      	adds	r3, #1
 80336e8:	627b      	str	r3, [r7, #36]	; 0x24
 80336ea:	687b      	ldr	r3, [r7, #4]
 80336ec:	685b      	ldr	r3, [r3, #4]
 80336ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80336f0:	429a      	cmp	r2, r3
 80336f2:	d3e5      	bcc.n	80336c0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80336f4:	687b      	ldr	r3, [r7, #4]
 80336f6:	681b      	ldr	r3, [r3, #0]
 80336f8:	4618      	mov	r0, r3
 80336fa:	f009 f845 	bl	803c788 <USB_ReadInterrupts>
 80336fe:	4603      	mov	r3, r0
 8033700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8033704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8033708:	d13b      	bne.n	8033782 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803370a:	2301      	movs	r3, #1
 803370c:	627b      	str	r3, [r7, #36]	; 0x24
 803370e:	e02b      	b.n	8033768 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8033710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033712:	015a      	lsls	r2, r3, #5
 8033714:	69fb      	ldr	r3, [r7, #28]
 8033716:	4413      	add	r3, r2
 8033718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803371c:	681b      	ldr	r3, [r3, #0]
 803371e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8033720:	6879      	ldr	r1, [r7, #4]
 8033722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033724:	4613      	mov	r3, r2
 8033726:	00db      	lsls	r3, r3, #3
 8033728:	4413      	add	r3, r2
 803372a:	009b      	lsls	r3, r3, #2
 803372c:	440b      	add	r3, r1
 803372e:	3340      	adds	r3, #64	; 0x40
 8033730:	781b      	ldrb	r3, [r3, #0]
 8033732:	2b01      	cmp	r3, #1
 8033734:	d115      	bne.n	8033762 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8033736:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8033738:	2b00      	cmp	r3, #0
 803373a:	da12      	bge.n	8033762 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 803373c:	6879      	ldr	r1, [r7, #4]
 803373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033740:	4613      	mov	r3, r2
 8033742:	00db      	lsls	r3, r3, #3
 8033744:	4413      	add	r3, r2
 8033746:	009b      	lsls	r3, r3, #2
 8033748:	440b      	add	r3, r1
 803374a:	333f      	adds	r3, #63	; 0x3f
 803374c:	2201      	movs	r2, #1
 803374e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8033750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033752:	b2db      	uxtb	r3, r3
 8033754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8033758:	b2db      	uxtb	r3, r3
 803375a:	4619      	mov	r1, r3
 803375c:	6878      	ldr	r0, [r7, #4]
 803375e:	f000 fae8 	bl	8033d32 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8033762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033764:	3301      	adds	r3, #1
 8033766:	627b      	str	r3, [r7, #36]	; 0x24
 8033768:	687b      	ldr	r3, [r7, #4]
 803376a:	685b      	ldr	r3, [r3, #4]
 803376c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803376e:	429a      	cmp	r2, r3
 8033770:	d3ce      	bcc.n	8033710 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8033772:	687b      	ldr	r3, [r7, #4]
 8033774:	681b      	ldr	r3, [r3, #0]
 8033776:	695a      	ldr	r2, [r3, #20]
 8033778:	687b      	ldr	r3, [r7, #4]
 803377a:	681b      	ldr	r3, [r3, #0]
 803377c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8033780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8033782:	687b      	ldr	r3, [r7, #4]
 8033784:	681b      	ldr	r3, [r3, #0]
 8033786:	4618      	mov	r0, r3
 8033788:	f008 fffe 	bl	803c788 <USB_ReadInterrupts>
 803378c:	4603      	mov	r3, r0
 803378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8033792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8033796:	d155      	bne.n	8033844 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8033798:	2301      	movs	r3, #1
 803379a:	627b      	str	r3, [r7, #36]	; 0x24
 803379c:	e045      	b.n	803382a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 803379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80337a0:	015a      	lsls	r2, r3, #5
 80337a2:	69fb      	ldr	r3, [r7, #28]
 80337a4:	4413      	add	r3, r2
 80337a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80337aa:	681b      	ldr	r3, [r3, #0]
 80337ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80337ae:	6879      	ldr	r1, [r7, #4]
 80337b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80337b2:	4613      	mov	r3, r2
 80337b4:	00db      	lsls	r3, r3, #3
 80337b6:	4413      	add	r3, r2
 80337b8:	009b      	lsls	r3, r3, #2
 80337ba:	440b      	add	r3, r1
 80337bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80337c0:	781b      	ldrb	r3, [r3, #0]
 80337c2:	2b01      	cmp	r3, #1
 80337c4:	d12e      	bne.n	8033824 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80337c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80337c8:	2b00      	cmp	r3, #0
 80337ca:	da2b      	bge.n	8033824 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80337cc:	69bb      	ldr	r3, [r7, #24]
 80337ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80337d2:	687b      	ldr	r3, [r7, #4]
 80337d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80337d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80337dc:	429a      	cmp	r2, r3
 80337de:	d121      	bne.n	8033824 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80337e0:	6879      	ldr	r1, [r7, #4]
 80337e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80337e4:	4613      	mov	r3, r2
 80337e6:	00db      	lsls	r3, r3, #3
 80337e8:	4413      	add	r3, r2
 80337ea:	009b      	lsls	r3, r3, #2
 80337ec:	440b      	add	r3, r1
 80337ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80337f2:	2201      	movs	r2, #1
 80337f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80337f6:	6a3b      	ldr	r3, [r7, #32]
 80337f8:	699b      	ldr	r3, [r3, #24]
 80337fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80337fe:	6a3b      	ldr	r3, [r7, #32]
 8033800:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8033802:	6a3b      	ldr	r3, [r7, #32]
 8033804:	695b      	ldr	r3, [r3, #20]
 8033806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803380a:	2b00      	cmp	r3, #0
 803380c:	d10a      	bne.n	8033824 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 803380e:	69fb      	ldr	r3, [r7, #28]
 8033810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033814:	685b      	ldr	r3, [r3, #4]
 8033816:	69fa      	ldr	r2, [r7, #28]
 8033818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803381c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8033820:	6053      	str	r3, [r2, #4]
            break;
 8033822:	e007      	b.n	8033834 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8033824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033826:	3301      	adds	r3, #1
 8033828:	627b      	str	r3, [r7, #36]	; 0x24
 803382a:	687b      	ldr	r3, [r7, #4]
 803382c:	685b      	ldr	r3, [r3, #4]
 803382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8033830:	429a      	cmp	r2, r3
 8033832:	d3b4      	bcc.n	803379e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8033834:	687b      	ldr	r3, [r7, #4]
 8033836:	681b      	ldr	r3, [r3, #0]
 8033838:	695a      	ldr	r2, [r3, #20]
 803383a:	687b      	ldr	r3, [r7, #4]
 803383c:	681b      	ldr	r3, [r3, #0]
 803383e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8033842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8033844:	687b      	ldr	r3, [r7, #4]
 8033846:	681b      	ldr	r3, [r3, #0]
 8033848:	4618      	mov	r0, r3
 803384a:	f008 ff9d 	bl	803c788 <USB_ReadInterrupts>
 803384e:	4603      	mov	r3, r0
 8033850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8033854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8033858:	d10a      	bne.n	8033870 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 803385a:	6878      	ldr	r0, [r7, #4]
 803385c:	f00b fba0 	bl	803efa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8033860:	687b      	ldr	r3, [r7, #4]
 8033862:	681b      	ldr	r3, [r3, #0]
 8033864:	695a      	ldr	r2, [r3, #20]
 8033866:	687b      	ldr	r3, [r7, #4]
 8033868:	681b      	ldr	r3, [r3, #0]
 803386a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 803386e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8033870:	687b      	ldr	r3, [r7, #4]
 8033872:	681b      	ldr	r3, [r3, #0]
 8033874:	4618      	mov	r0, r3
 8033876:	f008 ff87 	bl	803c788 <USB_ReadInterrupts>
 803387a:	4603      	mov	r3, r0
 803387c:	f003 0304 	and.w	r3, r3, #4
 8033880:	2b04      	cmp	r3, #4
 8033882:	d115      	bne.n	80338b0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8033884:	687b      	ldr	r3, [r7, #4]
 8033886:	681b      	ldr	r3, [r3, #0]
 8033888:	685b      	ldr	r3, [r3, #4]
 803388a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 803388c:	69bb      	ldr	r3, [r7, #24]
 803388e:	f003 0304 	and.w	r3, r3, #4
 8033892:	2b00      	cmp	r3, #0
 8033894:	d002      	beq.n	803389c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8033896:	6878      	ldr	r0, [r7, #4]
 8033898:	f00b fb90 	bl	803efbc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 803389c:	687b      	ldr	r3, [r7, #4]
 803389e:	681b      	ldr	r3, [r3, #0]
 80338a0:	6859      	ldr	r1, [r3, #4]
 80338a2:	687b      	ldr	r3, [r7, #4]
 80338a4:	681b      	ldr	r3, [r3, #0]
 80338a6:	69ba      	ldr	r2, [r7, #24]
 80338a8:	430a      	orrs	r2, r1
 80338aa:	605a      	str	r2, [r3, #4]
 80338ac:	e000      	b.n	80338b0 <HAL_PCD_IRQHandler+0x992>
      return;
 80338ae:	bf00      	nop
    }
  }
}
 80338b0:	3734      	adds	r7, #52	; 0x34
 80338b2:	46bd      	mov	sp, r7
 80338b4:	bd90      	pop	{r4, r7, pc}

080338b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80338b6:	b580      	push	{r7, lr}
 80338b8:	b082      	sub	sp, #8
 80338ba:	af00      	add	r7, sp, #0
 80338bc:	6078      	str	r0, [r7, #4]
 80338be:	460b      	mov	r3, r1
 80338c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80338c2:	687b      	ldr	r3, [r7, #4]
 80338c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80338c8:	2b01      	cmp	r3, #1
 80338ca:	d101      	bne.n	80338d0 <HAL_PCD_SetAddress+0x1a>
 80338cc:	2302      	movs	r3, #2
 80338ce:	e013      	b.n	80338f8 <HAL_PCD_SetAddress+0x42>
 80338d0:	687b      	ldr	r3, [r7, #4]
 80338d2:	2201      	movs	r2, #1
 80338d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80338d8:	687b      	ldr	r3, [r7, #4]
 80338da:	78fa      	ldrb	r2, [r7, #3]
 80338dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80338e0:	687b      	ldr	r3, [r7, #4]
 80338e2:	681b      	ldr	r3, [r3, #0]
 80338e4:	78fa      	ldrb	r2, [r7, #3]
 80338e6:	4611      	mov	r1, r2
 80338e8:	4618      	mov	r0, r3
 80338ea:	f008 fee5 	bl	803c6b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80338ee:	687b      	ldr	r3, [r7, #4]
 80338f0:	2200      	movs	r2, #0
 80338f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80338f6:	2300      	movs	r3, #0
}
 80338f8:	4618      	mov	r0, r3
 80338fa:	3708      	adds	r7, #8
 80338fc:	46bd      	mov	sp, r7
 80338fe:	bd80      	pop	{r7, pc}

08033900 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8033900:	b580      	push	{r7, lr}
 8033902:	b084      	sub	sp, #16
 8033904:	af00      	add	r7, sp, #0
 8033906:	6078      	str	r0, [r7, #4]
 8033908:	4608      	mov	r0, r1
 803390a:	4611      	mov	r1, r2
 803390c:	461a      	mov	r2, r3
 803390e:	4603      	mov	r3, r0
 8033910:	70fb      	strb	r3, [r7, #3]
 8033912:	460b      	mov	r3, r1
 8033914:	803b      	strh	r3, [r7, #0]
 8033916:	4613      	mov	r3, r2
 8033918:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 803391a:	2300      	movs	r3, #0
 803391c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 803391e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8033922:	2b00      	cmp	r3, #0
 8033924:	da0f      	bge.n	8033946 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033926:	78fb      	ldrb	r3, [r7, #3]
 8033928:	f003 020f 	and.w	r2, r3, #15
 803392c:	4613      	mov	r3, r2
 803392e:	00db      	lsls	r3, r3, #3
 8033930:	4413      	add	r3, r2
 8033932:	009b      	lsls	r3, r3, #2
 8033934:	3338      	adds	r3, #56	; 0x38
 8033936:	687a      	ldr	r2, [r7, #4]
 8033938:	4413      	add	r3, r2
 803393a:	3304      	adds	r3, #4
 803393c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803393e:	68fb      	ldr	r3, [r7, #12]
 8033940:	2201      	movs	r2, #1
 8033942:	705a      	strb	r2, [r3, #1]
 8033944:	e00f      	b.n	8033966 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8033946:	78fb      	ldrb	r3, [r7, #3]
 8033948:	f003 020f 	and.w	r2, r3, #15
 803394c:	4613      	mov	r3, r2
 803394e:	00db      	lsls	r3, r3, #3
 8033950:	4413      	add	r3, r2
 8033952:	009b      	lsls	r3, r3, #2
 8033954:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033958:	687a      	ldr	r2, [r7, #4]
 803395a:	4413      	add	r3, r2
 803395c:	3304      	adds	r3, #4
 803395e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8033960:	68fb      	ldr	r3, [r7, #12]
 8033962:	2200      	movs	r2, #0
 8033964:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8033966:	78fb      	ldrb	r3, [r7, #3]
 8033968:	f003 030f 	and.w	r3, r3, #15
 803396c:	b2da      	uxtb	r2, r3
 803396e:	68fb      	ldr	r3, [r7, #12]
 8033970:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8033972:	883a      	ldrh	r2, [r7, #0]
 8033974:	68fb      	ldr	r3, [r7, #12]
 8033976:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8033978:	68fb      	ldr	r3, [r7, #12]
 803397a:	78ba      	ldrb	r2, [r7, #2]
 803397c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 803397e:	68fb      	ldr	r3, [r7, #12]
 8033980:	785b      	ldrb	r3, [r3, #1]
 8033982:	2b00      	cmp	r3, #0
 8033984:	d004      	beq.n	8033990 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8033986:	68fb      	ldr	r3, [r7, #12]
 8033988:	781b      	ldrb	r3, [r3, #0]
 803398a:	b29a      	uxth	r2, r3
 803398c:	68fb      	ldr	r3, [r7, #12]
 803398e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8033990:	78bb      	ldrb	r3, [r7, #2]
 8033992:	2b02      	cmp	r3, #2
 8033994:	d102      	bne.n	803399c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8033996:	68fb      	ldr	r3, [r7, #12]
 8033998:	2200      	movs	r2, #0
 803399a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 803399c:	687b      	ldr	r3, [r7, #4]
 803399e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80339a2:	2b01      	cmp	r3, #1
 80339a4:	d101      	bne.n	80339aa <HAL_PCD_EP_Open+0xaa>
 80339a6:	2302      	movs	r3, #2
 80339a8:	e00e      	b.n	80339c8 <HAL_PCD_EP_Open+0xc8>
 80339aa:	687b      	ldr	r3, [r7, #4]
 80339ac:	2201      	movs	r2, #1
 80339ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80339b2:	687b      	ldr	r3, [r7, #4]
 80339b4:	681b      	ldr	r3, [r3, #0]
 80339b6:	68f9      	ldr	r1, [r7, #12]
 80339b8:	4618      	mov	r0, r3
 80339ba:	f007 ff59 	bl	803b870 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80339be:	687b      	ldr	r3, [r7, #4]
 80339c0:	2200      	movs	r2, #0
 80339c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80339c6:	7afb      	ldrb	r3, [r7, #11]
}
 80339c8:	4618      	mov	r0, r3
 80339ca:	3710      	adds	r7, #16
 80339cc:	46bd      	mov	sp, r7
 80339ce:	bd80      	pop	{r7, pc}

080339d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80339d0:	b580      	push	{r7, lr}
 80339d2:	b084      	sub	sp, #16
 80339d4:	af00      	add	r7, sp, #0
 80339d6:	6078      	str	r0, [r7, #4]
 80339d8:	460b      	mov	r3, r1
 80339da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80339dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80339e0:	2b00      	cmp	r3, #0
 80339e2:	da0f      	bge.n	8033a04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80339e4:	78fb      	ldrb	r3, [r7, #3]
 80339e6:	f003 020f 	and.w	r2, r3, #15
 80339ea:	4613      	mov	r3, r2
 80339ec:	00db      	lsls	r3, r3, #3
 80339ee:	4413      	add	r3, r2
 80339f0:	009b      	lsls	r3, r3, #2
 80339f2:	3338      	adds	r3, #56	; 0x38
 80339f4:	687a      	ldr	r2, [r7, #4]
 80339f6:	4413      	add	r3, r2
 80339f8:	3304      	adds	r3, #4
 80339fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80339fc:	68fb      	ldr	r3, [r7, #12]
 80339fe:	2201      	movs	r2, #1
 8033a00:	705a      	strb	r2, [r3, #1]
 8033a02:	e00f      	b.n	8033a24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8033a04:	78fb      	ldrb	r3, [r7, #3]
 8033a06:	f003 020f 	and.w	r2, r3, #15
 8033a0a:	4613      	mov	r3, r2
 8033a0c:	00db      	lsls	r3, r3, #3
 8033a0e:	4413      	add	r3, r2
 8033a10:	009b      	lsls	r3, r3, #2
 8033a12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033a16:	687a      	ldr	r2, [r7, #4]
 8033a18:	4413      	add	r3, r2
 8033a1a:	3304      	adds	r3, #4
 8033a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8033a1e:	68fb      	ldr	r3, [r7, #12]
 8033a20:	2200      	movs	r2, #0
 8033a22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8033a24:	78fb      	ldrb	r3, [r7, #3]
 8033a26:	f003 030f 	and.w	r3, r3, #15
 8033a2a:	b2da      	uxtb	r2, r3
 8033a2c:	68fb      	ldr	r3, [r7, #12]
 8033a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8033a30:	687b      	ldr	r3, [r7, #4]
 8033a32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8033a36:	2b01      	cmp	r3, #1
 8033a38:	d101      	bne.n	8033a3e <HAL_PCD_EP_Close+0x6e>
 8033a3a:	2302      	movs	r3, #2
 8033a3c:	e00e      	b.n	8033a5c <HAL_PCD_EP_Close+0x8c>
 8033a3e:	687b      	ldr	r3, [r7, #4]
 8033a40:	2201      	movs	r2, #1
 8033a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8033a46:	687b      	ldr	r3, [r7, #4]
 8033a48:	681b      	ldr	r3, [r3, #0]
 8033a4a:	68f9      	ldr	r1, [r7, #12]
 8033a4c:	4618      	mov	r0, r3
 8033a4e:	f007 ff97 	bl	803b980 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8033a52:	687b      	ldr	r3, [r7, #4]
 8033a54:	2200      	movs	r2, #0
 8033a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8033a5a:	2300      	movs	r3, #0
}
 8033a5c:	4618      	mov	r0, r3
 8033a5e:	3710      	adds	r7, #16
 8033a60:	46bd      	mov	sp, r7
 8033a62:	bd80      	pop	{r7, pc}

08033a64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8033a64:	b580      	push	{r7, lr}
 8033a66:	b086      	sub	sp, #24
 8033a68:	af00      	add	r7, sp, #0
 8033a6a:	60f8      	str	r0, [r7, #12]
 8033a6c:	607a      	str	r2, [r7, #4]
 8033a6e:	603b      	str	r3, [r7, #0]
 8033a70:	460b      	mov	r3, r1
 8033a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8033a74:	7afb      	ldrb	r3, [r7, #11]
 8033a76:	f003 020f 	and.w	r2, r3, #15
 8033a7a:	4613      	mov	r3, r2
 8033a7c:	00db      	lsls	r3, r3, #3
 8033a7e:	4413      	add	r3, r2
 8033a80:	009b      	lsls	r3, r3, #2
 8033a82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033a86:	68fa      	ldr	r2, [r7, #12]
 8033a88:	4413      	add	r3, r2
 8033a8a:	3304      	adds	r3, #4
 8033a8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8033a8e:	697b      	ldr	r3, [r7, #20]
 8033a90:	687a      	ldr	r2, [r7, #4]
 8033a92:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8033a94:	697b      	ldr	r3, [r7, #20]
 8033a96:	683a      	ldr	r2, [r7, #0]
 8033a98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8033a9a:	697b      	ldr	r3, [r7, #20]
 8033a9c:	2200      	movs	r2, #0
 8033a9e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8033aa0:	697b      	ldr	r3, [r7, #20]
 8033aa2:	2200      	movs	r2, #0
 8033aa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8033aa6:	7afb      	ldrb	r3, [r7, #11]
 8033aa8:	f003 030f 	and.w	r3, r3, #15
 8033aac:	b2da      	uxtb	r2, r3
 8033aae:	697b      	ldr	r3, [r7, #20]
 8033ab0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8033ab2:	68fb      	ldr	r3, [r7, #12]
 8033ab4:	691b      	ldr	r3, [r3, #16]
 8033ab6:	2b01      	cmp	r3, #1
 8033ab8:	d102      	bne.n	8033ac0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8033aba:	687a      	ldr	r2, [r7, #4]
 8033abc:	697b      	ldr	r3, [r7, #20]
 8033abe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8033ac0:	7afb      	ldrb	r3, [r7, #11]
 8033ac2:	f003 030f 	and.w	r3, r3, #15
 8033ac6:	2b00      	cmp	r3, #0
 8033ac8:	d109      	bne.n	8033ade <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8033aca:	68fb      	ldr	r3, [r7, #12]
 8033acc:	6818      	ldr	r0, [r3, #0]
 8033ace:	68fb      	ldr	r3, [r7, #12]
 8033ad0:	691b      	ldr	r3, [r3, #16]
 8033ad2:	b2db      	uxtb	r3, r3
 8033ad4:	461a      	mov	r2, r3
 8033ad6:	6979      	ldr	r1, [r7, #20]
 8033ad8:	f008 fa7e 	bl	803bfd8 <USB_EP0StartXfer>
 8033adc:	e008      	b.n	8033af0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8033ade:	68fb      	ldr	r3, [r7, #12]
 8033ae0:	6818      	ldr	r0, [r3, #0]
 8033ae2:	68fb      	ldr	r3, [r7, #12]
 8033ae4:	691b      	ldr	r3, [r3, #16]
 8033ae6:	b2db      	uxtb	r3, r3
 8033ae8:	461a      	mov	r2, r3
 8033aea:	6979      	ldr	r1, [r7, #20]
 8033aec:	f008 f824 	bl	803bb38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8033af0:	2300      	movs	r3, #0
}
 8033af2:	4618      	mov	r0, r3
 8033af4:	3718      	adds	r7, #24
 8033af6:	46bd      	mov	sp, r7
 8033af8:	bd80      	pop	{r7, pc}

08033afa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8033afa:	b480      	push	{r7}
 8033afc:	b083      	sub	sp, #12
 8033afe:	af00      	add	r7, sp, #0
 8033b00:	6078      	str	r0, [r7, #4]
 8033b02:	460b      	mov	r3, r1
 8033b04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8033b06:	78fb      	ldrb	r3, [r7, #3]
 8033b08:	f003 020f 	and.w	r2, r3, #15
 8033b0c:	6879      	ldr	r1, [r7, #4]
 8033b0e:	4613      	mov	r3, r2
 8033b10:	00db      	lsls	r3, r3, #3
 8033b12:	4413      	add	r3, r2
 8033b14:	009b      	lsls	r3, r3, #2
 8033b16:	440b      	add	r3, r1
 8033b18:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8033b1c:	681b      	ldr	r3, [r3, #0]
}
 8033b1e:	4618      	mov	r0, r3
 8033b20:	370c      	adds	r7, #12
 8033b22:	46bd      	mov	sp, r7
 8033b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033b28:	4770      	bx	lr

08033b2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8033b2a:	b580      	push	{r7, lr}
 8033b2c:	b086      	sub	sp, #24
 8033b2e:	af00      	add	r7, sp, #0
 8033b30:	60f8      	str	r0, [r7, #12]
 8033b32:	607a      	str	r2, [r7, #4]
 8033b34:	603b      	str	r3, [r7, #0]
 8033b36:	460b      	mov	r3, r1
 8033b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033b3a:	7afb      	ldrb	r3, [r7, #11]
 8033b3c:	f003 020f 	and.w	r2, r3, #15
 8033b40:	4613      	mov	r3, r2
 8033b42:	00db      	lsls	r3, r3, #3
 8033b44:	4413      	add	r3, r2
 8033b46:	009b      	lsls	r3, r3, #2
 8033b48:	3338      	adds	r3, #56	; 0x38
 8033b4a:	68fa      	ldr	r2, [r7, #12]
 8033b4c:	4413      	add	r3, r2
 8033b4e:	3304      	adds	r3, #4
 8033b50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8033b52:	697b      	ldr	r3, [r7, #20]
 8033b54:	687a      	ldr	r2, [r7, #4]
 8033b56:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8033b58:	697b      	ldr	r3, [r7, #20]
 8033b5a:	683a      	ldr	r2, [r7, #0]
 8033b5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8033b5e:	697b      	ldr	r3, [r7, #20]
 8033b60:	2200      	movs	r2, #0
 8033b62:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8033b64:	697b      	ldr	r3, [r7, #20]
 8033b66:	2201      	movs	r2, #1
 8033b68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8033b6a:	7afb      	ldrb	r3, [r7, #11]
 8033b6c:	f003 030f 	and.w	r3, r3, #15
 8033b70:	b2da      	uxtb	r2, r3
 8033b72:	697b      	ldr	r3, [r7, #20]
 8033b74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8033b76:	68fb      	ldr	r3, [r7, #12]
 8033b78:	691b      	ldr	r3, [r3, #16]
 8033b7a:	2b01      	cmp	r3, #1
 8033b7c:	d102      	bne.n	8033b84 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8033b7e:	687a      	ldr	r2, [r7, #4]
 8033b80:	697b      	ldr	r3, [r7, #20]
 8033b82:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8033b84:	7afb      	ldrb	r3, [r7, #11]
 8033b86:	f003 030f 	and.w	r3, r3, #15
 8033b8a:	2b00      	cmp	r3, #0
 8033b8c:	d109      	bne.n	8033ba2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8033b8e:	68fb      	ldr	r3, [r7, #12]
 8033b90:	6818      	ldr	r0, [r3, #0]
 8033b92:	68fb      	ldr	r3, [r7, #12]
 8033b94:	691b      	ldr	r3, [r3, #16]
 8033b96:	b2db      	uxtb	r3, r3
 8033b98:	461a      	mov	r2, r3
 8033b9a:	6979      	ldr	r1, [r7, #20]
 8033b9c:	f008 fa1c 	bl	803bfd8 <USB_EP0StartXfer>
 8033ba0:	e008      	b.n	8033bb4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8033ba2:	68fb      	ldr	r3, [r7, #12]
 8033ba4:	6818      	ldr	r0, [r3, #0]
 8033ba6:	68fb      	ldr	r3, [r7, #12]
 8033ba8:	691b      	ldr	r3, [r3, #16]
 8033baa:	b2db      	uxtb	r3, r3
 8033bac:	461a      	mov	r2, r3
 8033bae:	6979      	ldr	r1, [r7, #20]
 8033bb0:	f007 ffc2 	bl	803bb38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8033bb4:	2300      	movs	r3, #0
}
 8033bb6:	4618      	mov	r0, r3
 8033bb8:	3718      	adds	r7, #24
 8033bba:	46bd      	mov	sp, r7
 8033bbc:	bd80      	pop	{r7, pc}

08033bbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8033bbe:	b580      	push	{r7, lr}
 8033bc0:	b084      	sub	sp, #16
 8033bc2:	af00      	add	r7, sp, #0
 8033bc4:	6078      	str	r0, [r7, #4]
 8033bc6:	460b      	mov	r3, r1
 8033bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8033bca:	78fb      	ldrb	r3, [r7, #3]
 8033bcc:	f003 020f 	and.w	r2, r3, #15
 8033bd0:	687b      	ldr	r3, [r7, #4]
 8033bd2:	685b      	ldr	r3, [r3, #4]
 8033bd4:	429a      	cmp	r2, r3
 8033bd6:	d901      	bls.n	8033bdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8033bd8:	2301      	movs	r3, #1
 8033bda:	e050      	b.n	8033c7e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8033bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8033be0:	2b00      	cmp	r3, #0
 8033be2:	da0f      	bge.n	8033c04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033be4:	78fb      	ldrb	r3, [r7, #3]
 8033be6:	f003 020f 	and.w	r2, r3, #15
 8033bea:	4613      	mov	r3, r2
 8033bec:	00db      	lsls	r3, r3, #3
 8033bee:	4413      	add	r3, r2
 8033bf0:	009b      	lsls	r3, r3, #2
 8033bf2:	3338      	adds	r3, #56	; 0x38
 8033bf4:	687a      	ldr	r2, [r7, #4]
 8033bf6:	4413      	add	r3, r2
 8033bf8:	3304      	adds	r3, #4
 8033bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8033bfc:	68fb      	ldr	r3, [r7, #12]
 8033bfe:	2201      	movs	r2, #1
 8033c00:	705a      	strb	r2, [r3, #1]
 8033c02:	e00d      	b.n	8033c20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8033c04:	78fa      	ldrb	r2, [r7, #3]
 8033c06:	4613      	mov	r3, r2
 8033c08:	00db      	lsls	r3, r3, #3
 8033c0a:	4413      	add	r3, r2
 8033c0c:	009b      	lsls	r3, r3, #2
 8033c0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033c12:	687a      	ldr	r2, [r7, #4]
 8033c14:	4413      	add	r3, r2
 8033c16:	3304      	adds	r3, #4
 8033c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8033c1a:	68fb      	ldr	r3, [r7, #12]
 8033c1c:	2200      	movs	r2, #0
 8033c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8033c20:	68fb      	ldr	r3, [r7, #12]
 8033c22:	2201      	movs	r2, #1
 8033c24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8033c26:	78fb      	ldrb	r3, [r7, #3]
 8033c28:	f003 030f 	and.w	r3, r3, #15
 8033c2c:	b2da      	uxtb	r2, r3
 8033c2e:	68fb      	ldr	r3, [r7, #12]
 8033c30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8033c32:	687b      	ldr	r3, [r7, #4]
 8033c34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8033c38:	2b01      	cmp	r3, #1
 8033c3a:	d101      	bne.n	8033c40 <HAL_PCD_EP_SetStall+0x82>
 8033c3c:	2302      	movs	r3, #2
 8033c3e:	e01e      	b.n	8033c7e <HAL_PCD_EP_SetStall+0xc0>
 8033c40:	687b      	ldr	r3, [r7, #4]
 8033c42:	2201      	movs	r2, #1
 8033c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8033c48:	687b      	ldr	r3, [r7, #4]
 8033c4a:	681b      	ldr	r3, [r3, #0]
 8033c4c:	68f9      	ldr	r1, [r7, #12]
 8033c4e:	4618      	mov	r0, r3
 8033c50:	f008 fc5e 	bl	803c510 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8033c54:	78fb      	ldrb	r3, [r7, #3]
 8033c56:	f003 030f 	and.w	r3, r3, #15
 8033c5a:	2b00      	cmp	r3, #0
 8033c5c:	d10a      	bne.n	8033c74 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8033c5e:	687b      	ldr	r3, [r7, #4]
 8033c60:	6818      	ldr	r0, [r3, #0]
 8033c62:	687b      	ldr	r3, [r7, #4]
 8033c64:	691b      	ldr	r3, [r3, #16]
 8033c66:	b2d9      	uxtb	r1, r3
 8033c68:	687b      	ldr	r3, [r7, #4]
 8033c6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8033c6e:	461a      	mov	r2, r3
 8033c70:	f008 fe50 	bl	803c914 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8033c74:	687b      	ldr	r3, [r7, #4]
 8033c76:	2200      	movs	r2, #0
 8033c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8033c7c:	2300      	movs	r3, #0
}
 8033c7e:	4618      	mov	r0, r3
 8033c80:	3710      	adds	r7, #16
 8033c82:	46bd      	mov	sp, r7
 8033c84:	bd80      	pop	{r7, pc}

08033c86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8033c86:	b580      	push	{r7, lr}
 8033c88:	b084      	sub	sp, #16
 8033c8a:	af00      	add	r7, sp, #0
 8033c8c:	6078      	str	r0, [r7, #4]
 8033c8e:	460b      	mov	r3, r1
 8033c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8033c92:	78fb      	ldrb	r3, [r7, #3]
 8033c94:	f003 020f 	and.w	r2, r3, #15
 8033c98:	687b      	ldr	r3, [r7, #4]
 8033c9a:	685b      	ldr	r3, [r3, #4]
 8033c9c:	429a      	cmp	r2, r3
 8033c9e:	d901      	bls.n	8033ca4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8033ca0:	2301      	movs	r3, #1
 8033ca2:	e042      	b.n	8033d2a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8033ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8033ca8:	2b00      	cmp	r3, #0
 8033caa:	da0f      	bge.n	8033ccc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033cac:	78fb      	ldrb	r3, [r7, #3]
 8033cae:	f003 020f 	and.w	r2, r3, #15
 8033cb2:	4613      	mov	r3, r2
 8033cb4:	00db      	lsls	r3, r3, #3
 8033cb6:	4413      	add	r3, r2
 8033cb8:	009b      	lsls	r3, r3, #2
 8033cba:	3338      	adds	r3, #56	; 0x38
 8033cbc:	687a      	ldr	r2, [r7, #4]
 8033cbe:	4413      	add	r3, r2
 8033cc0:	3304      	adds	r3, #4
 8033cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8033cc4:	68fb      	ldr	r3, [r7, #12]
 8033cc6:	2201      	movs	r2, #1
 8033cc8:	705a      	strb	r2, [r3, #1]
 8033cca:	e00f      	b.n	8033cec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8033ccc:	78fb      	ldrb	r3, [r7, #3]
 8033cce:	f003 020f 	and.w	r2, r3, #15
 8033cd2:	4613      	mov	r3, r2
 8033cd4:	00db      	lsls	r3, r3, #3
 8033cd6:	4413      	add	r3, r2
 8033cd8:	009b      	lsls	r3, r3, #2
 8033cda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033cde:	687a      	ldr	r2, [r7, #4]
 8033ce0:	4413      	add	r3, r2
 8033ce2:	3304      	adds	r3, #4
 8033ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8033ce6:	68fb      	ldr	r3, [r7, #12]
 8033ce8:	2200      	movs	r2, #0
 8033cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8033cec:	68fb      	ldr	r3, [r7, #12]
 8033cee:	2200      	movs	r2, #0
 8033cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8033cf2:	78fb      	ldrb	r3, [r7, #3]
 8033cf4:	f003 030f 	and.w	r3, r3, #15
 8033cf8:	b2da      	uxtb	r2, r3
 8033cfa:	68fb      	ldr	r3, [r7, #12]
 8033cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8033cfe:	687b      	ldr	r3, [r7, #4]
 8033d00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8033d04:	2b01      	cmp	r3, #1
 8033d06:	d101      	bne.n	8033d0c <HAL_PCD_EP_ClrStall+0x86>
 8033d08:	2302      	movs	r3, #2
 8033d0a:	e00e      	b.n	8033d2a <HAL_PCD_EP_ClrStall+0xa4>
 8033d0c:	687b      	ldr	r3, [r7, #4]
 8033d0e:	2201      	movs	r2, #1
 8033d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8033d14:	687b      	ldr	r3, [r7, #4]
 8033d16:	681b      	ldr	r3, [r3, #0]
 8033d18:	68f9      	ldr	r1, [r7, #12]
 8033d1a:	4618      	mov	r0, r3
 8033d1c:	f008 fc66 	bl	803c5ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8033d20:	687b      	ldr	r3, [r7, #4]
 8033d22:	2200      	movs	r2, #0
 8033d24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8033d28:	2300      	movs	r3, #0
}
 8033d2a:	4618      	mov	r0, r3
 8033d2c:	3710      	adds	r7, #16
 8033d2e:	46bd      	mov	sp, r7
 8033d30:	bd80      	pop	{r7, pc}

08033d32 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8033d32:	b580      	push	{r7, lr}
 8033d34:	b084      	sub	sp, #16
 8033d36:	af00      	add	r7, sp, #0
 8033d38:	6078      	str	r0, [r7, #4]
 8033d3a:	460b      	mov	r3, r1
 8033d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8033d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8033d42:	2b00      	cmp	r3, #0
 8033d44:	da0c      	bge.n	8033d60 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8033d46:	78fb      	ldrb	r3, [r7, #3]
 8033d48:	f003 020f 	and.w	r2, r3, #15
 8033d4c:	4613      	mov	r3, r2
 8033d4e:	00db      	lsls	r3, r3, #3
 8033d50:	4413      	add	r3, r2
 8033d52:	009b      	lsls	r3, r3, #2
 8033d54:	3338      	adds	r3, #56	; 0x38
 8033d56:	687a      	ldr	r2, [r7, #4]
 8033d58:	4413      	add	r3, r2
 8033d5a:	3304      	adds	r3, #4
 8033d5c:	60fb      	str	r3, [r7, #12]
 8033d5e:	e00c      	b.n	8033d7a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8033d60:	78fb      	ldrb	r3, [r7, #3]
 8033d62:	f003 020f 	and.w	r2, r3, #15
 8033d66:	4613      	mov	r3, r2
 8033d68:	00db      	lsls	r3, r3, #3
 8033d6a:	4413      	add	r3, r2
 8033d6c:	009b      	lsls	r3, r3, #2
 8033d6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033d72:	687a      	ldr	r2, [r7, #4]
 8033d74:	4413      	add	r3, r2
 8033d76:	3304      	adds	r3, #4
 8033d78:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8033d7a:	687b      	ldr	r3, [r7, #4]
 8033d7c:	681b      	ldr	r3, [r3, #0]
 8033d7e:	68f9      	ldr	r1, [r7, #12]
 8033d80:	4618      	mov	r0, r3
 8033d82:	f008 fa85 	bl	803c290 <USB_EPStopXfer>
 8033d86:	4603      	mov	r3, r0
 8033d88:	72fb      	strb	r3, [r7, #11]

  return ret;
 8033d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8033d8c:	4618      	mov	r0, r3
 8033d8e:	3710      	adds	r7, #16
 8033d90:	46bd      	mov	sp, r7
 8033d92:	bd80      	pop	{r7, pc}

08033d94 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8033d94:	b580      	push	{r7, lr}
 8033d96:	b08a      	sub	sp, #40	; 0x28
 8033d98:	af02      	add	r7, sp, #8
 8033d9a:	6078      	str	r0, [r7, #4]
 8033d9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8033d9e:	687b      	ldr	r3, [r7, #4]
 8033da0:	681b      	ldr	r3, [r3, #0]
 8033da2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8033da4:	697b      	ldr	r3, [r7, #20]
 8033da6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8033da8:	683a      	ldr	r2, [r7, #0]
 8033daa:	4613      	mov	r3, r2
 8033dac:	00db      	lsls	r3, r3, #3
 8033dae:	4413      	add	r3, r2
 8033db0:	009b      	lsls	r3, r3, #2
 8033db2:	3338      	adds	r3, #56	; 0x38
 8033db4:	687a      	ldr	r2, [r7, #4]
 8033db6:	4413      	add	r3, r2
 8033db8:	3304      	adds	r3, #4
 8033dba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8033dbc:	68fb      	ldr	r3, [r7, #12]
 8033dbe:	6a1a      	ldr	r2, [r3, #32]
 8033dc0:	68fb      	ldr	r3, [r7, #12]
 8033dc2:	699b      	ldr	r3, [r3, #24]
 8033dc4:	429a      	cmp	r2, r3
 8033dc6:	d901      	bls.n	8033dcc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8033dc8:	2301      	movs	r3, #1
 8033dca:	e06c      	b.n	8033ea6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8033dcc:	68fb      	ldr	r3, [r7, #12]
 8033dce:	699a      	ldr	r2, [r3, #24]
 8033dd0:	68fb      	ldr	r3, [r7, #12]
 8033dd2:	6a1b      	ldr	r3, [r3, #32]
 8033dd4:	1ad3      	subs	r3, r2, r3
 8033dd6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8033dd8:	68fb      	ldr	r3, [r7, #12]
 8033dda:	68db      	ldr	r3, [r3, #12]
 8033ddc:	69fa      	ldr	r2, [r7, #28]
 8033dde:	429a      	cmp	r2, r3
 8033de0:	d902      	bls.n	8033de8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8033de2:	68fb      	ldr	r3, [r7, #12]
 8033de4:	68db      	ldr	r3, [r3, #12]
 8033de6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8033de8:	69fb      	ldr	r3, [r7, #28]
 8033dea:	3303      	adds	r3, #3
 8033dec:	089b      	lsrs	r3, r3, #2
 8033dee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8033df0:	e02b      	b.n	8033e4a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8033df2:	68fb      	ldr	r3, [r7, #12]
 8033df4:	699a      	ldr	r2, [r3, #24]
 8033df6:	68fb      	ldr	r3, [r7, #12]
 8033df8:	6a1b      	ldr	r3, [r3, #32]
 8033dfa:	1ad3      	subs	r3, r2, r3
 8033dfc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8033dfe:	68fb      	ldr	r3, [r7, #12]
 8033e00:	68db      	ldr	r3, [r3, #12]
 8033e02:	69fa      	ldr	r2, [r7, #28]
 8033e04:	429a      	cmp	r2, r3
 8033e06:	d902      	bls.n	8033e0e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8033e08:	68fb      	ldr	r3, [r7, #12]
 8033e0a:	68db      	ldr	r3, [r3, #12]
 8033e0c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8033e0e:	69fb      	ldr	r3, [r7, #28]
 8033e10:	3303      	adds	r3, #3
 8033e12:	089b      	lsrs	r3, r3, #2
 8033e14:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8033e16:	68fb      	ldr	r3, [r7, #12]
 8033e18:	6919      	ldr	r1, [r3, #16]
 8033e1a:	683b      	ldr	r3, [r7, #0]
 8033e1c:	b2da      	uxtb	r2, r3
 8033e1e:	69fb      	ldr	r3, [r7, #28]
 8033e20:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8033e22:	687b      	ldr	r3, [r7, #4]
 8033e24:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8033e26:	b2db      	uxtb	r3, r3
 8033e28:	9300      	str	r3, [sp, #0]
 8033e2a:	4603      	mov	r3, r0
 8033e2c:	6978      	ldr	r0, [r7, #20]
 8033e2e:	f008 fad9 	bl	803c3e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8033e32:	68fb      	ldr	r3, [r7, #12]
 8033e34:	691a      	ldr	r2, [r3, #16]
 8033e36:	69fb      	ldr	r3, [r7, #28]
 8033e38:	441a      	add	r2, r3
 8033e3a:	68fb      	ldr	r3, [r7, #12]
 8033e3c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8033e3e:	68fb      	ldr	r3, [r7, #12]
 8033e40:	6a1a      	ldr	r2, [r3, #32]
 8033e42:	69fb      	ldr	r3, [r7, #28]
 8033e44:	441a      	add	r2, r3
 8033e46:	68fb      	ldr	r3, [r7, #12]
 8033e48:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8033e4a:	683b      	ldr	r3, [r7, #0]
 8033e4c:	015a      	lsls	r2, r3, #5
 8033e4e:	693b      	ldr	r3, [r7, #16]
 8033e50:	4413      	add	r3, r2
 8033e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8033e56:	699b      	ldr	r3, [r3, #24]
 8033e58:	b29b      	uxth	r3, r3
 8033e5a:	69ba      	ldr	r2, [r7, #24]
 8033e5c:	429a      	cmp	r2, r3
 8033e5e:	d809      	bhi.n	8033e74 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8033e60:	68fb      	ldr	r3, [r7, #12]
 8033e62:	6a1a      	ldr	r2, [r3, #32]
 8033e64:	68fb      	ldr	r3, [r7, #12]
 8033e66:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8033e68:	429a      	cmp	r2, r3
 8033e6a:	d203      	bcs.n	8033e74 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8033e6c:	68fb      	ldr	r3, [r7, #12]
 8033e6e:	699b      	ldr	r3, [r3, #24]
 8033e70:	2b00      	cmp	r3, #0
 8033e72:	d1be      	bne.n	8033df2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8033e74:	68fb      	ldr	r3, [r7, #12]
 8033e76:	699a      	ldr	r2, [r3, #24]
 8033e78:	68fb      	ldr	r3, [r7, #12]
 8033e7a:	6a1b      	ldr	r3, [r3, #32]
 8033e7c:	429a      	cmp	r2, r3
 8033e7e:	d811      	bhi.n	8033ea4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8033e80:	683b      	ldr	r3, [r7, #0]
 8033e82:	f003 030f 	and.w	r3, r3, #15
 8033e86:	2201      	movs	r2, #1
 8033e88:	fa02 f303 	lsl.w	r3, r2, r3
 8033e8c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8033e8e:	693b      	ldr	r3, [r7, #16]
 8033e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8033e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8033e96:	68bb      	ldr	r3, [r7, #8]
 8033e98:	43db      	mvns	r3, r3
 8033e9a:	6939      	ldr	r1, [r7, #16]
 8033e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8033ea0:	4013      	ands	r3, r2
 8033ea2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8033ea4:	2300      	movs	r3, #0
}
 8033ea6:	4618      	mov	r0, r3
 8033ea8:	3720      	adds	r7, #32
 8033eaa:	46bd      	mov	sp, r7
 8033eac:	bd80      	pop	{r7, pc}
	...

08033eb0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8033eb0:	b580      	push	{r7, lr}
 8033eb2:	b088      	sub	sp, #32
 8033eb4:	af00      	add	r7, sp, #0
 8033eb6:	6078      	str	r0, [r7, #4]
 8033eb8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8033eba:	687b      	ldr	r3, [r7, #4]
 8033ebc:	681b      	ldr	r3, [r3, #0]
 8033ebe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8033ec0:	69fb      	ldr	r3, [r7, #28]
 8033ec2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8033ec4:	69fb      	ldr	r3, [r7, #28]
 8033ec6:	333c      	adds	r3, #60	; 0x3c
 8033ec8:	3304      	adds	r3, #4
 8033eca:	681b      	ldr	r3, [r3, #0]
 8033ecc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8033ece:	683b      	ldr	r3, [r7, #0]
 8033ed0:	015a      	lsls	r2, r3, #5
 8033ed2:	69bb      	ldr	r3, [r7, #24]
 8033ed4:	4413      	add	r3, r2
 8033ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033eda:	689b      	ldr	r3, [r3, #8]
 8033edc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8033ede:	687b      	ldr	r3, [r7, #4]
 8033ee0:	691b      	ldr	r3, [r3, #16]
 8033ee2:	2b01      	cmp	r3, #1
 8033ee4:	d17b      	bne.n	8033fde <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8033ee6:	693b      	ldr	r3, [r7, #16]
 8033ee8:	f003 0308 	and.w	r3, r3, #8
 8033eec:	2b00      	cmp	r3, #0
 8033eee:	d015      	beq.n	8033f1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033ef0:	697b      	ldr	r3, [r7, #20]
 8033ef2:	4a61      	ldr	r2, [pc, #388]	; (8034078 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8033ef4:	4293      	cmp	r3, r2
 8033ef6:	f240 80b9 	bls.w	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8033efa:	693b      	ldr	r3, [r7, #16]
 8033efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033f00:	2b00      	cmp	r3, #0
 8033f02:	f000 80b3 	beq.w	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8033f06:	683b      	ldr	r3, [r7, #0]
 8033f08:	015a      	lsls	r2, r3, #5
 8033f0a:	69bb      	ldr	r3, [r7, #24]
 8033f0c:	4413      	add	r3, r2
 8033f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033f12:	461a      	mov	r2, r3
 8033f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8033f18:	6093      	str	r3, [r2, #8]
 8033f1a:	e0a7      	b.n	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8033f1c:	693b      	ldr	r3, [r7, #16]
 8033f1e:	f003 0320 	and.w	r3, r3, #32
 8033f22:	2b00      	cmp	r3, #0
 8033f24:	d009      	beq.n	8033f3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8033f26:	683b      	ldr	r3, [r7, #0]
 8033f28:	015a      	lsls	r2, r3, #5
 8033f2a:	69bb      	ldr	r3, [r7, #24]
 8033f2c:	4413      	add	r3, r2
 8033f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033f32:	461a      	mov	r2, r3
 8033f34:	2320      	movs	r3, #32
 8033f36:	6093      	str	r3, [r2, #8]
 8033f38:	e098      	b.n	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8033f3a:	693b      	ldr	r3, [r7, #16]
 8033f3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8033f40:	2b00      	cmp	r3, #0
 8033f42:	f040 8093 	bne.w	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033f46:	697b      	ldr	r3, [r7, #20]
 8033f48:	4a4b      	ldr	r2, [pc, #300]	; (8034078 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8033f4a:	4293      	cmp	r3, r2
 8033f4c:	d90f      	bls.n	8033f6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8033f4e:	693b      	ldr	r3, [r7, #16]
 8033f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8033f54:	2b00      	cmp	r3, #0
 8033f56:	d00a      	beq.n	8033f6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8033f58:	683b      	ldr	r3, [r7, #0]
 8033f5a:	015a      	lsls	r2, r3, #5
 8033f5c:	69bb      	ldr	r3, [r7, #24]
 8033f5e:	4413      	add	r3, r2
 8033f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033f64:	461a      	mov	r2, r3
 8033f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8033f6a:	6093      	str	r3, [r2, #8]
 8033f6c:	e07e      	b.n	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8033f6e:	683a      	ldr	r2, [r7, #0]
 8033f70:	4613      	mov	r3, r2
 8033f72:	00db      	lsls	r3, r3, #3
 8033f74:	4413      	add	r3, r2
 8033f76:	009b      	lsls	r3, r3, #2
 8033f78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8033f7c:	687a      	ldr	r2, [r7, #4]
 8033f7e:	4413      	add	r3, r2
 8033f80:	3304      	adds	r3, #4
 8033f82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8033f84:	68fb      	ldr	r3, [r7, #12]
 8033f86:	69da      	ldr	r2, [r3, #28]
 8033f88:	683b      	ldr	r3, [r7, #0]
 8033f8a:	0159      	lsls	r1, r3, #5
 8033f8c:	69bb      	ldr	r3, [r7, #24]
 8033f8e:	440b      	add	r3, r1
 8033f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033f94:	691b      	ldr	r3, [r3, #16]
 8033f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8033f9a:	1ad2      	subs	r2, r2, r3
 8033f9c:	68fb      	ldr	r3, [r7, #12]
 8033f9e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8033fa0:	683b      	ldr	r3, [r7, #0]
 8033fa2:	2b00      	cmp	r3, #0
 8033fa4:	d114      	bne.n	8033fd0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8033fa6:	68fb      	ldr	r3, [r7, #12]
 8033fa8:	699b      	ldr	r3, [r3, #24]
 8033faa:	2b00      	cmp	r3, #0
 8033fac:	d109      	bne.n	8033fc2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8033fae:	687b      	ldr	r3, [r7, #4]
 8033fb0:	6818      	ldr	r0, [r3, #0]
 8033fb2:	687b      	ldr	r3, [r7, #4]
 8033fb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8033fb8:	461a      	mov	r2, r3
 8033fba:	2101      	movs	r1, #1
 8033fbc:	f008 fcaa 	bl	803c914 <USB_EP0_OutStart>
 8033fc0:	e006      	b.n	8033fd0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8033fc2:	68fb      	ldr	r3, [r7, #12]
 8033fc4:	691a      	ldr	r2, [r3, #16]
 8033fc6:	68fb      	ldr	r3, [r7, #12]
 8033fc8:	6a1b      	ldr	r3, [r3, #32]
 8033fca:	441a      	add	r2, r3
 8033fcc:	68fb      	ldr	r3, [r7, #12]
 8033fce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8033fd0:	683b      	ldr	r3, [r7, #0]
 8033fd2:	b2db      	uxtb	r3, r3
 8033fd4:	4619      	mov	r1, r3
 8033fd6:	6878      	ldr	r0, [r7, #4]
 8033fd8:	f00a ff1e 	bl	803ee18 <HAL_PCD_DataOutStageCallback>
 8033fdc:	e046      	b.n	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8033fde:	697b      	ldr	r3, [r7, #20]
 8033fe0:	4a26      	ldr	r2, [pc, #152]	; (803407c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8033fe2:	4293      	cmp	r3, r2
 8033fe4:	d124      	bne.n	8034030 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8033fe6:	693b      	ldr	r3, [r7, #16]
 8033fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8033fec:	2b00      	cmp	r3, #0
 8033fee:	d00a      	beq.n	8034006 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8033ff0:	683b      	ldr	r3, [r7, #0]
 8033ff2:	015a      	lsls	r2, r3, #5
 8033ff4:	69bb      	ldr	r3, [r7, #24]
 8033ff6:	4413      	add	r3, r2
 8033ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8033ffc:	461a      	mov	r2, r3
 8033ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8034002:	6093      	str	r3, [r2, #8]
 8034004:	e032      	b.n	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8034006:	693b      	ldr	r3, [r7, #16]
 8034008:	f003 0320 	and.w	r3, r3, #32
 803400c:	2b00      	cmp	r3, #0
 803400e:	d008      	beq.n	8034022 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8034010:	683b      	ldr	r3, [r7, #0]
 8034012:	015a      	lsls	r2, r3, #5
 8034014:	69bb      	ldr	r3, [r7, #24]
 8034016:	4413      	add	r3, r2
 8034018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803401c:	461a      	mov	r2, r3
 803401e:	2320      	movs	r3, #32
 8034020:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8034022:	683b      	ldr	r3, [r7, #0]
 8034024:	b2db      	uxtb	r3, r3
 8034026:	4619      	mov	r1, r3
 8034028:	6878      	ldr	r0, [r7, #4]
 803402a:	f00a fef5 	bl	803ee18 <HAL_PCD_DataOutStageCallback>
 803402e:	e01d      	b.n	803406c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8034030:	683b      	ldr	r3, [r7, #0]
 8034032:	2b00      	cmp	r3, #0
 8034034:	d114      	bne.n	8034060 <PCD_EP_OutXfrComplete_int+0x1b0>
 8034036:	6879      	ldr	r1, [r7, #4]
 8034038:	683a      	ldr	r2, [r7, #0]
 803403a:	4613      	mov	r3, r2
 803403c:	00db      	lsls	r3, r3, #3
 803403e:	4413      	add	r3, r2
 8034040:	009b      	lsls	r3, r3, #2
 8034042:	440b      	add	r3, r1
 8034044:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8034048:	681b      	ldr	r3, [r3, #0]
 803404a:	2b00      	cmp	r3, #0
 803404c:	d108      	bne.n	8034060 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 803404e:	687b      	ldr	r3, [r7, #4]
 8034050:	6818      	ldr	r0, [r3, #0]
 8034052:	687b      	ldr	r3, [r7, #4]
 8034054:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8034058:	461a      	mov	r2, r3
 803405a:	2100      	movs	r1, #0
 803405c:	f008 fc5a 	bl	803c914 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8034060:	683b      	ldr	r3, [r7, #0]
 8034062:	b2db      	uxtb	r3, r3
 8034064:	4619      	mov	r1, r3
 8034066:	6878      	ldr	r0, [r7, #4]
 8034068:	f00a fed6 	bl	803ee18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 803406c:	2300      	movs	r3, #0
}
 803406e:	4618      	mov	r0, r3
 8034070:	3720      	adds	r7, #32
 8034072:	46bd      	mov	sp, r7
 8034074:	bd80      	pop	{r7, pc}
 8034076:	bf00      	nop
 8034078:	4f54300a 	.word	0x4f54300a
 803407c:	4f54310a 	.word	0x4f54310a

08034080 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8034080:	b580      	push	{r7, lr}
 8034082:	b086      	sub	sp, #24
 8034084:	af00      	add	r7, sp, #0
 8034086:	6078      	str	r0, [r7, #4]
 8034088:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 803408a:	687b      	ldr	r3, [r7, #4]
 803408c:	681b      	ldr	r3, [r3, #0]
 803408e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8034090:	697b      	ldr	r3, [r7, #20]
 8034092:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8034094:	697b      	ldr	r3, [r7, #20]
 8034096:	333c      	adds	r3, #60	; 0x3c
 8034098:	3304      	adds	r3, #4
 803409a:	681b      	ldr	r3, [r3, #0]
 803409c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 803409e:	683b      	ldr	r3, [r7, #0]
 80340a0:	015a      	lsls	r2, r3, #5
 80340a2:	693b      	ldr	r3, [r7, #16]
 80340a4:	4413      	add	r3, r2
 80340a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80340aa:	689b      	ldr	r3, [r3, #8]
 80340ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80340ae:	68fb      	ldr	r3, [r7, #12]
 80340b0:	4a15      	ldr	r2, [pc, #84]	; (8034108 <PCD_EP_OutSetupPacket_int+0x88>)
 80340b2:	4293      	cmp	r3, r2
 80340b4:	d90e      	bls.n	80340d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80340b6:	68bb      	ldr	r3, [r7, #8]
 80340b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80340bc:	2b00      	cmp	r3, #0
 80340be:	d009      	beq.n	80340d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80340c0:	683b      	ldr	r3, [r7, #0]
 80340c2:	015a      	lsls	r2, r3, #5
 80340c4:	693b      	ldr	r3, [r7, #16]
 80340c6:	4413      	add	r3, r2
 80340c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80340cc:	461a      	mov	r2, r3
 80340ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80340d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80340d4:	6878      	ldr	r0, [r7, #4]
 80340d6:	f00a fe8d 	bl	803edf4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80340da:	68fb      	ldr	r3, [r7, #12]
 80340dc:	4a0a      	ldr	r2, [pc, #40]	; (8034108 <PCD_EP_OutSetupPacket_int+0x88>)
 80340de:	4293      	cmp	r3, r2
 80340e0:	d90c      	bls.n	80340fc <PCD_EP_OutSetupPacket_int+0x7c>
 80340e2:	687b      	ldr	r3, [r7, #4]
 80340e4:	691b      	ldr	r3, [r3, #16]
 80340e6:	2b01      	cmp	r3, #1
 80340e8:	d108      	bne.n	80340fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80340ea:	687b      	ldr	r3, [r7, #4]
 80340ec:	6818      	ldr	r0, [r3, #0]
 80340ee:	687b      	ldr	r3, [r7, #4]
 80340f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80340f4:	461a      	mov	r2, r3
 80340f6:	2101      	movs	r1, #1
 80340f8:	f008 fc0c 	bl	803c914 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80340fc:	2300      	movs	r3, #0
}
 80340fe:	4618      	mov	r0, r3
 8034100:	3718      	adds	r7, #24
 8034102:	46bd      	mov	sp, r7
 8034104:	bd80      	pop	{r7, pc}
 8034106:	bf00      	nop
 8034108:	4f54300a 	.word	0x4f54300a

0803410c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 803410c:	b480      	push	{r7}
 803410e:	b085      	sub	sp, #20
 8034110:	af00      	add	r7, sp, #0
 8034112:	6078      	str	r0, [r7, #4]
 8034114:	460b      	mov	r3, r1
 8034116:	70fb      	strb	r3, [r7, #3]
 8034118:	4613      	mov	r3, r2
 803411a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 803411c:	687b      	ldr	r3, [r7, #4]
 803411e:	681b      	ldr	r3, [r3, #0]
 8034120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034122:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8034124:	78fb      	ldrb	r3, [r7, #3]
 8034126:	2b00      	cmp	r3, #0
 8034128:	d107      	bne.n	803413a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 803412a:	883b      	ldrh	r3, [r7, #0]
 803412c:	0419      	lsls	r1, r3, #16
 803412e:	687b      	ldr	r3, [r7, #4]
 8034130:	681b      	ldr	r3, [r3, #0]
 8034132:	68ba      	ldr	r2, [r7, #8]
 8034134:	430a      	orrs	r2, r1
 8034136:	629a      	str	r2, [r3, #40]	; 0x28
 8034138:	e028      	b.n	803418c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 803413a:	687b      	ldr	r3, [r7, #4]
 803413c:	681b      	ldr	r3, [r3, #0]
 803413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034140:	0c1b      	lsrs	r3, r3, #16
 8034142:	68ba      	ldr	r2, [r7, #8]
 8034144:	4413      	add	r3, r2
 8034146:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8034148:	2300      	movs	r3, #0
 803414a:	73fb      	strb	r3, [r7, #15]
 803414c:	e00d      	b.n	803416a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 803414e:	687b      	ldr	r3, [r7, #4]
 8034150:	681a      	ldr	r2, [r3, #0]
 8034152:	7bfb      	ldrb	r3, [r7, #15]
 8034154:	3340      	adds	r3, #64	; 0x40
 8034156:	009b      	lsls	r3, r3, #2
 8034158:	4413      	add	r3, r2
 803415a:	685b      	ldr	r3, [r3, #4]
 803415c:	0c1b      	lsrs	r3, r3, #16
 803415e:	68ba      	ldr	r2, [r7, #8]
 8034160:	4413      	add	r3, r2
 8034162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8034164:	7bfb      	ldrb	r3, [r7, #15]
 8034166:	3301      	adds	r3, #1
 8034168:	73fb      	strb	r3, [r7, #15]
 803416a:	7bfa      	ldrb	r2, [r7, #15]
 803416c:	78fb      	ldrb	r3, [r7, #3]
 803416e:	3b01      	subs	r3, #1
 8034170:	429a      	cmp	r2, r3
 8034172:	d3ec      	bcc.n	803414e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8034174:	883b      	ldrh	r3, [r7, #0]
 8034176:	0418      	lsls	r0, r3, #16
 8034178:	687b      	ldr	r3, [r7, #4]
 803417a:	6819      	ldr	r1, [r3, #0]
 803417c:	78fb      	ldrb	r3, [r7, #3]
 803417e:	3b01      	subs	r3, #1
 8034180:	68ba      	ldr	r2, [r7, #8]
 8034182:	4302      	orrs	r2, r0
 8034184:	3340      	adds	r3, #64	; 0x40
 8034186:	009b      	lsls	r3, r3, #2
 8034188:	440b      	add	r3, r1
 803418a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 803418c:	2300      	movs	r3, #0
}
 803418e:	4618      	mov	r0, r3
 8034190:	3714      	adds	r7, #20
 8034192:	46bd      	mov	sp, r7
 8034194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034198:	4770      	bx	lr

0803419a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 803419a:	b480      	push	{r7}
 803419c:	b083      	sub	sp, #12
 803419e:	af00      	add	r7, sp, #0
 80341a0:	6078      	str	r0, [r7, #4]
 80341a2:	460b      	mov	r3, r1
 80341a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80341a6:	687b      	ldr	r3, [r7, #4]
 80341a8:	681b      	ldr	r3, [r3, #0]
 80341aa:	887a      	ldrh	r2, [r7, #2]
 80341ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80341ae:	2300      	movs	r3, #0
}
 80341b0:	4618      	mov	r0, r3
 80341b2:	370c      	adds	r7, #12
 80341b4:	46bd      	mov	sp, r7
 80341b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341ba:	4770      	bx	lr

080341bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80341bc:	b480      	push	{r7}
 80341be:	b085      	sub	sp, #20
 80341c0:	af00      	add	r7, sp, #0
 80341c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80341c4:	687b      	ldr	r3, [r7, #4]
 80341c6:	681b      	ldr	r3, [r3, #0]
 80341c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80341ca:	687b      	ldr	r3, [r7, #4]
 80341cc:	2201      	movs	r2, #1
 80341ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80341d2:	687b      	ldr	r3, [r7, #4]
 80341d4:	2200      	movs	r2, #0
 80341d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80341da:	68fb      	ldr	r3, [r7, #12]
 80341dc:	699b      	ldr	r3, [r3, #24]
 80341de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80341e2:	68fb      	ldr	r3, [r7, #12]
 80341e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80341e6:	68fb      	ldr	r3, [r7, #12]
 80341e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80341ea:	4b05      	ldr	r3, [pc, #20]	; (8034200 <HAL_PCDEx_ActivateLPM+0x44>)
 80341ec:	4313      	orrs	r3, r2
 80341ee:	68fa      	ldr	r2, [r7, #12]
 80341f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80341f2:	2300      	movs	r3, #0
}
 80341f4:	4618      	mov	r0, r3
 80341f6:	3714      	adds	r7, #20
 80341f8:	46bd      	mov	sp, r7
 80341fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341fe:	4770      	bx	lr
 8034200:	10000003 	.word	0x10000003

08034204 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8034204:	b480      	push	{r7}
 8034206:	b083      	sub	sp, #12
 8034208:	af00      	add	r7, sp, #0
 803420a:	6078      	str	r0, [r7, #4]
 803420c:	460b      	mov	r3, r1
 803420e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8034210:	bf00      	nop
 8034212:	370c      	adds	r7, #12
 8034214:	46bd      	mov	sp, r7
 8034216:	f85d 7b04 	ldr.w	r7, [sp], #4
 803421a:	4770      	bx	lr

0803421c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 803421c:	b580      	push	{r7, lr}
 803421e:	b084      	sub	sp, #16
 8034220:	af00      	add	r7, sp, #0
 8034222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8034224:	4b19      	ldr	r3, [pc, #100]	; (803428c <HAL_PWREx_ConfigSupply+0x70>)
 8034226:	68db      	ldr	r3, [r3, #12]
 8034228:	f003 0304 	and.w	r3, r3, #4
 803422c:	2b04      	cmp	r3, #4
 803422e:	d00a      	beq.n	8034246 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8034230:	4b16      	ldr	r3, [pc, #88]	; (803428c <HAL_PWREx_ConfigSupply+0x70>)
 8034232:	68db      	ldr	r3, [r3, #12]
 8034234:	f003 0307 	and.w	r3, r3, #7
 8034238:	687a      	ldr	r2, [r7, #4]
 803423a:	429a      	cmp	r2, r3
 803423c:	d001      	beq.n	8034242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 803423e:	2301      	movs	r3, #1
 8034240:	e01f      	b.n	8034282 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8034242:	2300      	movs	r3, #0
 8034244:	e01d      	b.n	8034282 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8034246:	4b11      	ldr	r3, [pc, #68]	; (803428c <HAL_PWREx_ConfigSupply+0x70>)
 8034248:	68db      	ldr	r3, [r3, #12]
 803424a:	f023 0207 	bic.w	r2, r3, #7
 803424e:	490f      	ldr	r1, [pc, #60]	; (803428c <HAL_PWREx_ConfigSupply+0x70>)
 8034250:	687b      	ldr	r3, [r7, #4]
 8034252:	4313      	orrs	r3, r2
 8034254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8034256:	f7fa f843 	bl	802e2e0 <HAL_GetTick>
 803425a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 803425c:	e009      	b.n	8034272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 803425e:	f7fa f83f 	bl	802e2e0 <HAL_GetTick>
 8034262:	4602      	mov	r2, r0
 8034264:	68fb      	ldr	r3, [r7, #12]
 8034266:	1ad3      	subs	r3, r2, r3
 8034268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 803426c:	d901      	bls.n	8034272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 803426e:	2301      	movs	r3, #1
 8034270:	e007      	b.n	8034282 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8034272:	4b06      	ldr	r3, [pc, #24]	; (803428c <HAL_PWREx_ConfigSupply+0x70>)
 8034274:	685b      	ldr	r3, [r3, #4]
 8034276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 803427a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803427e:	d1ee      	bne.n	803425e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8034280:	2300      	movs	r3, #0
}
 8034282:	4618      	mov	r0, r3
 8034284:	3710      	adds	r7, #16
 8034286:	46bd      	mov	sp, r7
 8034288:	bd80      	pop	{r7, pc}
 803428a:	bf00      	nop
 803428c:	58024800 	.word	0x58024800

08034290 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8034290:	b480      	push	{r7}
 8034292:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8034294:	4b05      	ldr	r3, [pc, #20]	; (80342ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8034296:	68db      	ldr	r3, [r3, #12]
 8034298:	4a04      	ldr	r2, [pc, #16]	; (80342ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 803429a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 803429e:	60d3      	str	r3, [r2, #12]
}
 80342a0:	bf00      	nop
 80342a2:	46bd      	mov	sp, r7
 80342a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80342a8:	4770      	bx	lr
 80342aa:	bf00      	nop
 80342ac:	58024800 	.word	0x58024800

080342b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80342b0:	b580      	push	{r7, lr}
 80342b2:	b08c      	sub	sp, #48	; 0x30
 80342b4:	af00      	add	r7, sp, #0
 80342b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80342b8:	687b      	ldr	r3, [r7, #4]
 80342ba:	2b00      	cmp	r3, #0
 80342bc:	d102      	bne.n	80342c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80342be:	2301      	movs	r3, #1
 80342c0:	f000 bc1d 	b.w	8034afe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80342c4:	687b      	ldr	r3, [r7, #4]
 80342c6:	681b      	ldr	r3, [r3, #0]
 80342c8:	f003 0301 	and.w	r3, r3, #1
 80342cc:	2b00      	cmp	r3, #0
 80342ce:	f000 8087 	beq.w	80343e0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80342d2:	4b99      	ldr	r3, [pc, #612]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80342d4:	691b      	ldr	r3, [r3, #16]
 80342d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80342da:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80342dc:	4b96      	ldr	r3, [pc, #600]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80342de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80342e0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80342e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342e4:	2b10      	cmp	r3, #16
 80342e6:	d007      	beq.n	80342f8 <HAL_RCC_OscConfig+0x48>
 80342e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80342ea:	2b18      	cmp	r3, #24
 80342ec:	d110      	bne.n	8034310 <HAL_RCC_OscConfig+0x60>
 80342ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80342f0:	f003 0303 	and.w	r3, r3, #3
 80342f4:	2b02      	cmp	r3, #2
 80342f6:	d10b      	bne.n	8034310 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80342f8:	4b8f      	ldr	r3, [pc, #572]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80342fa:	681b      	ldr	r3, [r3, #0]
 80342fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034300:	2b00      	cmp	r3, #0
 8034302:	d06c      	beq.n	80343de <HAL_RCC_OscConfig+0x12e>
 8034304:	687b      	ldr	r3, [r7, #4]
 8034306:	685b      	ldr	r3, [r3, #4]
 8034308:	2b00      	cmp	r3, #0
 803430a:	d168      	bne.n	80343de <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 803430c:	2301      	movs	r3, #1
 803430e:	e3f6      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8034310:	687b      	ldr	r3, [r7, #4]
 8034312:	685b      	ldr	r3, [r3, #4]
 8034314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8034318:	d106      	bne.n	8034328 <HAL_RCC_OscConfig+0x78>
 803431a:	4b87      	ldr	r3, [pc, #540]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803431c:	681b      	ldr	r3, [r3, #0]
 803431e:	4a86      	ldr	r2, [pc, #536]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8034324:	6013      	str	r3, [r2, #0]
 8034326:	e02e      	b.n	8034386 <HAL_RCC_OscConfig+0xd6>
 8034328:	687b      	ldr	r3, [r7, #4]
 803432a:	685b      	ldr	r3, [r3, #4]
 803432c:	2b00      	cmp	r3, #0
 803432e:	d10c      	bne.n	803434a <HAL_RCC_OscConfig+0x9a>
 8034330:	4b81      	ldr	r3, [pc, #516]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034332:	681b      	ldr	r3, [r3, #0]
 8034334:	4a80      	ldr	r2, [pc, #512]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 803433a:	6013      	str	r3, [r2, #0]
 803433c:	4b7e      	ldr	r3, [pc, #504]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803433e:	681b      	ldr	r3, [r3, #0]
 8034340:	4a7d      	ldr	r2, [pc, #500]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8034346:	6013      	str	r3, [r2, #0]
 8034348:	e01d      	b.n	8034386 <HAL_RCC_OscConfig+0xd6>
 803434a:	687b      	ldr	r3, [r7, #4]
 803434c:	685b      	ldr	r3, [r3, #4]
 803434e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8034352:	d10c      	bne.n	803436e <HAL_RCC_OscConfig+0xbe>
 8034354:	4b78      	ldr	r3, [pc, #480]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034356:	681b      	ldr	r3, [r3, #0]
 8034358:	4a77      	ldr	r2, [pc, #476]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803435a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 803435e:	6013      	str	r3, [r2, #0]
 8034360:	4b75      	ldr	r3, [pc, #468]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034362:	681b      	ldr	r3, [r3, #0]
 8034364:	4a74      	ldr	r2, [pc, #464]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803436a:	6013      	str	r3, [r2, #0]
 803436c:	e00b      	b.n	8034386 <HAL_RCC_OscConfig+0xd6>
 803436e:	4b72      	ldr	r3, [pc, #456]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034370:	681b      	ldr	r3, [r3, #0]
 8034372:	4a71      	ldr	r2, [pc, #452]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8034378:	6013      	str	r3, [r2, #0]
 803437a:	4b6f      	ldr	r3, [pc, #444]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803437c:	681b      	ldr	r3, [r3, #0]
 803437e:	4a6e      	ldr	r2, [pc, #440]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8034384:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8034386:	687b      	ldr	r3, [r7, #4]
 8034388:	685b      	ldr	r3, [r3, #4]
 803438a:	2b00      	cmp	r3, #0
 803438c:	d013      	beq.n	80343b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803438e:	f7f9 ffa7 	bl	802e2e0 <HAL_GetTick>
 8034392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8034394:	e008      	b.n	80343a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8034396:	f7f9 ffa3 	bl	802e2e0 <HAL_GetTick>
 803439a:	4602      	mov	r2, r0
 803439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803439e:	1ad3      	subs	r3, r2, r3
 80343a0:	2b64      	cmp	r3, #100	; 0x64
 80343a2:	d901      	bls.n	80343a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80343a4:	2303      	movs	r3, #3
 80343a6:	e3aa      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80343a8:	4b63      	ldr	r3, [pc, #396]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80343aa:	681b      	ldr	r3, [r3, #0]
 80343ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80343b0:	2b00      	cmp	r3, #0
 80343b2:	d0f0      	beq.n	8034396 <HAL_RCC_OscConfig+0xe6>
 80343b4:	e014      	b.n	80343e0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80343b6:	f7f9 ff93 	bl	802e2e0 <HAL_GetTick>
 80343ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80343bc:	e008      	b.n	80343d0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80343be:	f7f9 ff8f 	bl	802e2e0 <HAL_GetTick>
 80343c2:	4602      	mov	r2, r0
 80343c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80343c6:	1ad3      	subs	r3, r2, r3
 80343c8:	2b64      	cmp	r3, #100	; 0x64
 80343ca:	d901      	bls.n	80343d0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80343cc:	2303      	movs	r3, #3
 80343ce:	e396      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80343d0:	4b59      	ldr	r3, [pc, #356]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80343d2:	681b      	ldr	r3, [r3, #0]
 80343d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80343d8:	2b00      	cmp	r3, #0
 80343da:	d1f0      	bne.n	80343be <HAL_RCC_OscConfig+0x10e>
 80343dc:	e000      	b.n	80343e0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80343de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80343e0:	687b      	ldr	r3, [r7, #4]
 80343e2:	681b      	ldr	r3, [r3, #0]
 80343e4:	f003 0302 	and.w	r3, r3, #2
 80343e8:	2b00      	cmp	r3, #0
 80343ea:	f000 80cb 	beq.w	8034584 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80343ee:	4b52      	ldr	r3, [pc, #328]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80343f0:	691b      	ldr	r3, [r3, #16]
 80343f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80343f6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80343f8:	4b4f      	ldr	r3, [pc, #316]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80343fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80343fc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80343fe:	6a3b      	ldr	r3, [r7, #32]
 8034400:	2b00      	cmp	r3, #0
 8034402:	d007      	beq.n	8034414 <HAL_RCC_OscConfig+0x164>
 8034404:	6a3b      	ldr	r3, [r7, #32]
 8034406:	2b18      	cmp	r3, #24
 8034408:	d156      	bne.n	80344b8 <HAL_RCC_OscConfig+0x208>
 803440a:	69fb      	ldr	r3, [r7, #28]
 803440c:	f003 0303 	and.w	r3, r3, #3
 8034410:	2b00      	cmp	r3, #0
 8034412:	d151      	bne.n	80344b8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8034414:	4b48      	ldr	r3, [pc, #288]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034416:	681b      	ldr	r3, [r3, #0]
 8034418:	f003 0304 	and.w	r3, r3, #4
 803441c:	2b00      	cmp	r3, #0
 803441e:	d005      	beq.n	803442c <HAL_RCC_OscConfig+0x17c>
 8034420:	687b      	ldr	r3, [r7, #4]
 8034422:	68db      	ldr	r3, [r3, #12]
 8034424:	2b00      	cmp	r3, #0
 8034426:	d101      	bne.n	803442c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8034428:	2301      	movs	r3, #1
 803442a:	e368      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 803442c:	4b42      	ldr	r3, [pc, #264]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803442e:	681b      	ldr	r3, [r3, #0]
 8034430:	f023 0219 	bic.w	r2, r3, #25
 8034434:	687b      	ldr	r3, [r7, #4]
 8034436:	68db      	ldr	r3, [r3, #12]
 8034438:	493f      	ldr	r1, [pc, #252]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803443a:	4313      	orrs	r3, r2
 803443c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 803443e:	f7f9 ff4f 	bl	802e2e0 <HAL_GetTick>
 8034442:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8034444:	e008      	b.n	8034458 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8034446:	f7f9 ff4b 	bl	802e2e0 <HAL_GetTick>
 803444a:	4602      	mov	r2, r0
 803444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803444e:	1ad3      	subs	r3, r2, r3
 8034450:	2b02      	cmp	r3, #2
 8034452:	d901      	bls.n	8034458 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8034454:	2303      	movs	r3, #3
 8034456:	e352      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8034458:	4b37      	ldr	r3, [pc, #220]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803445a:	681b      	ldr	r3, [r3, #0]
 803445c:	f003 0304 	and.w	r3, r3, #4
 8034460:	2b00      	cmp	r3, #0
 8034462:	d0f0      	beq.n	8034446 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8034464:	f7f9 ff6c 	bl	802e340 <HAL_GetREVID>
 8034468:	4603      	mov	r3, r0
 803446a:	f241 0203 	movw	r2, #4099	; 0x1003
 803446e:	4293      	cmp	r3, r2
 8034470:	d817      	bhi.n	80344a2 <HAL_RCC_OscConfig+0x1f2>
 8034472:	687b      	ldr	r3, [r7, #4]
 8034474:	691b      	ldr	r3, [r3, #16]
 8034476:	2b40      	cmp	r3, #64	; 0x40
 8034478:	d108      	bne.n	803448c <HAL_RCC_OscConfig+0x1dc>
 803447a:	4b2f      	ldr	r3, [pc, #188]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803447c:	685b      	ldr	r3, [r3, #4]
 803447e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8034482:	4a2d      	ldr	r2, [pc, #180]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8034488:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 803448a:	e07b      	b.n	8034584 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 803448c:	4b2a      	ldr	r3, [pc, #168]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803448e:	685b      	ldr	r3, [r3, #4]
 8034490:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8034494:	687b      	ldr	r3, [r7, #4]
 8034496:	691b      	ldr	r3, [r3, #16]
 8034498:	031b      	lsls	r3, r3, #12
 803449a:	4927      	ldr	r1, [pc, #156]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 803449c:	4313      	orrs	r3, r2
 803449e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80344a0:	e070      	b.n	8034584 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80344a2:	4b25      	ldr	r3, [pc, #148]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80344a4:	685b      	ldr	r3, [r3, #4]
 80344a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80344aa:	687b      	ldr	r3, [r7, #4]
 80344ac:	691b      	ldr	r3, [r3, #16]
 80344ae:	061b      	lsls	r3, r3, #24
 80344b0:	4921      	ldr	r1, [pc, #132]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80344b2:	4313      	orrs	r3, r2
 80344b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80344b6:	e065      	b.n	8034584 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80344b8:	687b      	ldr	r3, [r7, #4]
 80344ba:	68db      	ldr	r3, [r3, #12]
 80344bc:	2b00      	cmp	r3, #0
 80344be:	d048      	beq.n	8034552 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80344c0:	4b1d      	ldr	r3, [pc, #116]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80344c2:	681b      	ldr	r3, [r3, #0]
 80344c4:	f023 0219 	bic.w	r2, r3, #25
 80344c8:	687b      	ldr	r3, [r7, #4]
 80344ca:	68db      	ldr	r3, [r3, #12]
 80344cc:	491a      	ldr	r1, [pc, #104]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80344ce:	4313      	orrs	r3, r2
 80344d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80344d2:	f7f9 ff05 	bl	802e2e0 <HAL_GetTick>
 80344d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80344d8:	e008      	b.n	80344ec <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80344da:	f7f9 ff01 	bl	802e2e0 <HAL_GetTick>
 80344de:	4602      	mov	r2, r0
 80344e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80344e2:	1ad3      	subs	r3, r2, r3
 80344e4:	2b02      	cmp	r3, #2
 80344e6:	d901      	bls.n	80344ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80344e8:	2303      	movs	r3, #3
 80344ea:	e308      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80344ec:	4b12      	ldr	r3, [pc, #72]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 80344ee:	681b      	ldr	r3, [r3, #0]
 80344f0:	f003 0304 	and.w	r3, r3, #4
 80344f4:	2b00      	cmp	r3, #0
 80344f6:	d0f0      	beq.n	80344da <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80344f8:	f7f9 ff22 	bl	802e340 <HAL_GetREVID>
 80344fc:	4603      	mov	r3, r0
 80344fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8034502:	4293      	cmp	r3, r2
 8034504:	d81a      	bhi.n	803453c <HAL_RCC_OscConfig+0x28c>
 8034506:	687b      	ldr	r3, [r7, #4]
 8034508:	691b      	ldr	r3, [r3, #16]
 803450a:	2b40      	cmp	r3, #64	; 0x40
 803450c:	d108      	bne.n	8034520 <HAL_RCC_OscConfig+0x270>
 803450e:	4b0a      	ldr	r3, [pc, #40]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034510:	685b      	ldr	r3, [r3, #4]
 8034512:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8034516:	4a08      	ldr	r2, [pc, #32]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803451c:	6053      	str	r3, [r2, #4]
 803451e:	e031      	b.n	8034584 <HAL_RCC_OscConfig+0x2d4>
 8034520:	4b05      	ldr	r3, [pc, #20]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034522:	685b      	ldr	r3, [r3, #4]
 8034524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8034528:	687b      	ldr	r3, [r7, #4]
 803452a:	691b      	ldr	r3, [r3, #16]
 803452c:	031b      	lsls	r3, r3, #12
 803452e:	4902      	ldr	r1, [pc, #8]	; (8034538 <HAL_RCC_OscConfig+0x288>)
 8034530:	4313      	orrs	r3, r2
 8034532:	604b      	str	r3, [r1, #4]
 8034534:	e026      	b.n	8034584 <HAL_RCC_OscConfig+0x2d4>
 8034536:	bf00      	nop
 8034538:	58024400 	.word	0x58024400
 803453c:	4b9a      	ldr	r3, [pc, #616]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803453e:	685b      	ldr	r3, [r3, #4]
 8034540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8034544:	687b      	ldr	r3, [r7, #4]
 8034546:	691b      	ldr	r3, [r3, #16]
 8034548:	061b      	lsls	r3, r3, #24
 803454a:	4997      	ldr	r1, [pc, #604]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803454c:	4313      	orrs	r3, r2
 803454e:	604b      	str	r3, [r1, #4]
 8034550:	e018      	b.n	8034584 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8034552:	4b95      	ldr	r3, [pc, #596]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034554:	681b      	ldr	r3, [r3, #0]
 8034556:	4a94      	ldr	r2, [pc, #592]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034558:	f023 0301 	bic.w	r3, r3, #1
 803455c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803455e:	f7f9 febf 	bl	802e2e0 <HAL_GetTick>
 8034562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8034564:	e008      	b.n	8034578 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8034566:	f7f9 febb 	bl	802e2e0 <HAL_GetTick>
 803456a:	4602      	mov	r2, r0
 803456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803456e:	1ad3      	subs	r3, r2, r3
 8034570:	2b02      	cmp	r3, #2
 8034572:	d901      	bls.n	8034578 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8034574:	2303      	movs	r3, #3
 8034576:	e2c2      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8034578:	4b8b      	ldr	r3, [pc, #556]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803457a:	681b      	ldr	r3, [r3, #0]
 803457c:	f003 0304 	and.w	r3, r3, #4
 8034580:	2b00      	cmp	r3, #0
 8034582:	d1f0      	bne.n	8034566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8034584:	687b      	ldr	r3, [r7, #4]
 8034586:	681b      	ldr	r3, [r3, #0]
 8034588:	f003 0310 	and.w	r3, r3, #16
 803458c:	2b00      	cmp	r3, #0
 803458e:	f000 80a9 	beq.w	80346e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8034592:	4b85      	ldr	r3, [pc, #532]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034594:	691b      	ldr	r3, [r3, #16]
 8034596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803459a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 803459c:	4b82      	ldr	r3, [pc, #520]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80345a0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80345a2:	69bb      	ldr	r3, [r7, #24]
 80345a4:	2b08      	cmp	r3, #8
 80345a6:	d007      	beq.n	80345b8 <HAL_RCC_OscConfig+0x308>
 80345a8:	69bb      	ldr	r3, [r7, #24]
 80345aa:	2b18      	cmp	r3, #24
 80345ac:	d13a      	bne.n	8034624 <HAL_RCC_OscConfig+0x374>
 80345ae:	697b      	ldr	r3, [r7, #20]
 80345b0:	f003 0303 	and.w	r3, r3, #3
 80345b4:	2b01      	cmp	r3, #1
 80345b6:	d135      	bne.n	8034624 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80345b8:	4b7b      	ldr	r3, [pc, #492]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80345ba:	681b      	ldr	r3, [r3, #0]
 80345bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80345c0:	2b00      	cmp	r3, #0
 80345c2:	d005      	beq.n	80345d0 <HAL_RCC_OscConfig+0x320>
 80345c4:	687b      	ldr	r3, [r7, #4]
 80345c6:	69db      	ldr	r3, [r3, #28]
 80345c8:	2b80      	cmp	r3, #128	; 0x80
 80345ca:	d001      	beq.n	80345d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80345cc:	2301      	movs	r3, #1
 80345ce:	e296      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80345d0:	f7f9 feb6 	bl	802e340 <HAL_GetREVID>
 80345d4:	4603      	mov	r3, r0
 80345d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80345da:	4293      	cmp	r3, r2
 80345dc:	d817      	bhi.n	803460e <HAL_RCC_OscConfig+0x35e>
 80345de:	687b      	ldr	r3, [r7, #4]
 80345e0:	6a1b      	ldr	r3, [r3, #32]
 80345e2:	2b20      	cmp	r3, #32
 80345e4:	d108      	bne.n	80345f8 <HAL_RCC_OscConfig+0x348>
 80345e6:	4b70      	ldr	r3, [pc, #448]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80345e8:	685b      	ldr	r3, [r3, #4]
 80345ea:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80345ee:	4a6e      	ldr	r2, [pc, #440]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80345f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80345f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80345f6:	e075      	b.n	80346e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80345f8:	4b6b      	ldr	r3, [pc, #428]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80345fa:	685b      	ldr	r3, [r3, #4]
 80345fc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8034600:	687b      	ldr	r3, [r7, #4]
 8034602:	6a1b      	ldr	r3, [r3, #32]
 8034604:	069b      	lsls	r3, r3, #26
 8034606:	4968      	ldr	r1, [pc, #416]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034608:	4313      	orrs	r3, r2
 803460a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 803460c:	e06a      	b.n	80346e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 803460e:	4b66      	ldr	r3, [pc, #408]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034610:	68db      	ldr	r3, [r3, #12]
 8034612:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8034616:	687b      	ldr	r3, [r7, #4]
 8034618:	6a1b      	ldr	r3, [r3, #32]
 803461a:	061b      	lsls	r3, r3, #24
 803461c:	4962      	ldr	r1, [pc, #392]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803461e:	4313      	orrs	r3, r2
 8034620:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8034622:	e05f      	b.n	80346e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8034624:	687b      	ldr	r3, [r7, #4]
 8034626:	69db      	ldr	r3, [r3, #28]
 8034628:	2b00      	cmp	r3, #0
 803462a:	d042      	beq.n	80346b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 803462c:	4b5e      	ldr	r3, [pc, #376]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803462e:	681b      	ldr	r3, [r3, #0]
 8034630:	4a5d      	ldr	r2, [pc, #372]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8034636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034638:	f7f9 fe52 	bl	802e2e0 <HAL_GetTick>
 803463c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 803463e:	e008      	b.n	8034652 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8034640:	f7f9 fe4e 	bl	802e2e0 <HAL_GetTick>
 8034644:	4602      	mov	r2, r0
 8034646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034648:	1ad3      	subs	r3, r2, r3
 803464a:	2b02      	cmp	r3, #2
 803464c:	d901      	bls.n	8034652 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 803464e:	2303      	movs	r3, #3
 8034650:	e255      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8034652:	4b55      	ldr	r3, [pc, #340]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034654:	681b      	ldr	r3, [r3, #0]
 8034656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803465a:	2b00      	cmp	r3, #0
 803465c:	d0f0      	beq.n	8034640 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 803465e:	f7f9 fe6f 	bl	802e340 <HAL_GetREVID>
 8034662:	4603      	mov	r3, r0
 8034664:	f241 0203 	movw	r2, #4099	; 0x1003
 8034668:	4293      	cmp	r3, r2
 803466a:	d817      	bhi.n	803469c <HAL_RCC_OscConfig+0x3ec>
 803466c:	687b      	ldr	r3, [r7, #4]
 803466e:	6a1b      	ldr	r3, [r3, #32]
 8034670:	2b20      	cmp	r3, #32
 8034672:	d108      	bne.n	8034686 <HAL_RCC_OscConfig+0x3d6>
 8034674:	4b4c      	ldr	r3, [pc, #304]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034676:	685b      	ldr	r3, [r3, #4]
 8034678:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 803467c:	4a4a      	ldr	r2, [pc, #296]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803467e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8034682:	6053      	str	r3, [r2, #4]
 8034684:	e02e      	b.n	80346e4 <HAL_RCC_OscConfig+0x434>
 8034686:	4b48      	ldr	r3, [pc, #288]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034688:	685b      	ldr	r3, [r3, #4]
 803468a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 803468e:	687b      	ldr	r3, [r7, #4]
 8034690:	6a1b      	ldr	r3, [r3, #32]
 8034692:	069b      	lsls	r3, r3, #26
 8034694:	4944      	ldr	r1, [pc, #272]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034696:	4313      	orrs	r3, r2
 8034698:	604b      	str	r3, [r1, #4]
 803469a:	e023      	b.n	80346e4 <HAL_RCC_OscConfig+0x434>
 803469c:	4b42      	ldr	r3, [pc, #264]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803469e:	68db      	ldr	r3, [r3, #12]
 80346a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80346a4:	687b      	ldr	r3, [r7, #4]
 80346a6:	6a1b      	ldr	r3, [r3, #32]
 80346a8:	061b      	lsls	r3, r3, #24
 80346aa:	493f      	ldr	r1, [pc, #252]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80346ac:	4313      	orrs	r3, r2
 80346ae:	60cb      	str	r3, [r1, #12]
 80346b0:	e018      	b.n	80346e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80346b2:	4b3d      	ldr	r3, [pc, #244]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80346b4:	681b      	ldr	r3, [r3, #0]
 80346b6:	4a3c      	ldr	r2, [pc, #240]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80346b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80346bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80346be:	f7f9 fe0f 	bl	802e2e0 <HAL_GetTick>
 80346c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80346c4:	e008      	b.n	80346d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80346c6:	f7f9 fe0b 	bl	802e2e0 <HAL_GetTick>
 80346ca:	4602      	mov	r2, r0
 80346cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80346ce:	1ad3      	subs	r3, r2, r3
 80346d0:	2b02      	cmp	r3, #2
 80346d2:	d901      	bls.n	80346d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80346d4:	2303      	movs	r3, #3
 80346d6:	e212      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80346d8:	4b33      	ldr	r3, [pc, #204]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80346da:	681b      	ldr	r3, [r3, #0]
 80346dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80346e0:	2b00      	cmp	r3, #0
 80346e2:	d1f0      	bne.n	80346c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80346e4:	687b      	ldr	r3, [r7, #4]
 80346e6:	681b      	ldr	r3, [r3, #0]
 80346e8:	f003 0308 	and.w	r3, r3, #8
 80346ec:	2b00      	cmp	r3, #0
 80346ee:	d036      	beq.n	803475e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80346f0:	687b      	ldr	r3, [r7, #4]
 80346f2:	695b      	ldr	r3, [r3, #20]
 80346f4:	2b00      	cmp	r3, #0
 80346f6:	d019      	beq.n	803472c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80346f8:	4b2b      	ldr	r3, [pc, #172]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80346fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80346fc:	4a2a      	ldr	r2, [pc, #168]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 80346fe:	f043 0301 	orr.w	r3, r3, #1
 8034702:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034704:	f7f9 fdec 	bl	802e2e0 <HAL_GetTick>
 8034708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 803470a:	e008      	b.n	803471e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 803470c:	f7f9 fde8 	bl	802e2e0 <HAL_GetTick>
 8034710:	4602      	mov	r2, r0
 8034712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034714:	1ad3      	subs	r3, r2, r3
 8034716:	2b02      	cmp	r3, #2
 8034718:	d901      	bls.n	803471e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 803471a:	2303      	movs	r3, #3
 803471c:	e1ef      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 803471e:	4b22      	ldr	r3, [pc, #136]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034722:	f003 0302 	and.w	r3, r3, #2
 8034726:	2b00      	cmp	r3, #0
 8034728:	d0f0      	beq.n	803470c <HAL_RCC_OscConfig+0x45c>
 803472a:	e018      	b.n	803475e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 803472c:	4b1e      	ldr	r3, [pc, #120]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034730:	4a1d      	ldr	r2, [pc, #116]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034732:	f023 0301 	bic.w	r3, r3, #1
 8034736:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034738:	f7f9 fdd2 	bl	802e2e0 <HAL_GetTick>
 803473c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 803473e:	e008      	b.n	8034752 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8034740:	f7f9 fdce 	bl	802e2e0 <HAL_GetTick>
 8034744:	4602      	mov	r2, r0
 8034746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034748:	1ad3      	subs	r3, r2, r3
 803474a:	2b02      	cmp	r3, #2
 803474c:	d901      	bls.n	8034752 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 803474e:	2303      	movs	r3, #3
 8034750:	e1d5      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8034752:	4b15      	ldr	r3, [pc, #84]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8034756:	f003 0302 	and.w	r3, r3, #2
 803475a:	2b00      	cmp	r3, #0
 803475c:	d1f0      	bne.n	8034740 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 803475e:	687b      	ldr	r3, [r7, #4]
 8034760:	681b      	ldr	r3, [r3, #0]
 8034762:	f003 0320 	and.w	r3, r3, #32
 8034766:	2b00      	cmp	r3, #0
 8034768:	d039      	beq.n	80347de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 803476a:	687b      	ldr	r3, [r7, #4]
 803476c:	699b      	ldr	r3, [r3, #24]
 803476e:	2b00      	cmp	r3, #0
 8034770:	d01c      	beq.n	80347ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8034772:	4b0d      	ldr	r3, [pc, #52]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034774:	681b      	ldr	r3, [r3, #0]
 8034776:	4a0c      	ldr	r2, [pc, #48]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 8034778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 803477c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 803477e:	f7f9 fdaf 	bl	802e2e0 <HAL_GetTick>
 8034782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8034784:	e008      	b.n	8034798 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8034786:	f7f9 fdab 	bl	802e2e0 <HAL_GetTick>
 803478a:	4602      	mov	r2, r0
 803478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803478e:	1ad3      	subs	r3, r2, r3
 8034790:	2b02      	cmp	r3, #2
 8034792:	d901      	bls.n	8034798 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8034794:	2303      	movs	r3, #3
 8034796:	e1b2      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8034798:	4b03      	ldr	r3, [pc, #12]	; (80347a8 <HAL_RCC_OscConfig+0x4f8>)
 803479a:	681b      	ldr	r3, [r3, #0]
 803479c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80347a0:	2b00      	cmp	r3, #0
 80347a2:	d0f0      	beq.n	8034786 <HAL_RCC_OscConfig+0x4d6>
 80347a4:	e01b      	b.n	80347de <HAL_RCC_OscConfig+0x52e>
 80347a6:	bf00      	nop
 80347a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80347ac:	4b9b      	ldr	r3, [pc, #620]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80347ae:	681b      	ldr	r3, [r3, #0]
 80347b0:	4a9a      	ldr	r2, [pc, #616]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80347b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80347b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80347b8:	f7f9 fd92 	bl	802e2e0 <HAL_GetTick>
 80347bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80347be:	e008      	b.n	80347d2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80347c0:	f7f9 fd8e 	bl	802e2e0 <HAL_GetTick>
 80347c4:	4602      	mov	r2, r0
 80347c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80347c8:	1ad3      	subs	r3, r2, r3
 80347ca:	2b02      	cmp	r3, #2
 80347cc:	d901      	bls.n	80347d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80347ce:	2303      	movs	r3, #3
 80347d0:	e195      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80347d2:	4b92      	ldr	r3, [pc, #584]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80347d4:	681b      	ldr	r3, [r3, #0]
 80347d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80347da:	2b00      	cmp	r3, #0
 80347dc:	d1f0      	bne.n	80347c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80347de:	687b      	ldr	r3, [r7, #4]
 80347e0:	681b      	ldr	r3, [r3, #0]
 80347e2:	f003 0304 	and.w	r3, r3, #4
 80347e6:	2b00      	cmp	r3, #0
 80347e8:	f000 8081 	beq.w	80348ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80347ec:	4b8c      	ldr	r3, [pc, #560]	; (8034a20 <HAL_RCC_OscConfig+0x770>)
 80347ee:	681b      	ldr	r3, [r3, #0]
 80347f0:	4a8b      	ldr	r2, [pc, #556]	; (8034a20 <HAL_RCC_OscConfig+0x770>)
 80347f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80347f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80347f8:	f7f9 fd72 	bl	802e2e0 <HAL_GetTick>
 80347fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80347fe:	e008      	b.n	8034812 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8034800:	f7f9 fd6e 	bl	802e2e0 <HAL_GetTick>
 8034804:	4602      	mov	r2, r0
 8034806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034808:	1ad3      	subs	r3, r2, r3
 803480a:	2b64      	cmp	r3, #100	; 0x64
 803480c:	d901      	bls.n	8034812 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 803480e:	2303      	movs	r3, #3
 8034810:	e175      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8034812:	4b83      	ldr	r3, [pc, #524]	; (8034a20 <HAL_RCC_OscConfig+0x770>)
 8034814:	681b      	ldr	r3, [r3, #0]
 8034816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803481a:	2b00      	cmp	r3, #0
 803481c:	d0f0      	beq.n	8034800 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 803481e:	687b      	ldr	r3, [r7, #4]
 8034820:	689b      	ldr	r3, [r3, #8]
 8034822:	2b01      	cmp	r3, #1
 8034824:	d106      	bne.n	8034834 <HAL_RCC_OscConfig+0x584>
 8034826:	4b7d      	ldr	r3, [pc, #500]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803482a:	4a7c      	ldr	r2, [pc, #496]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803482c:	f043 0301 	orr.w	r3, r3, #1
 8034830:	6713      	str	r3, [r2, #112]	; 0x70
 8034832:	e02d      	b.n	8034890 <HAL_RCC_OscConfig+0x5e0>
 8034834:	687b      	ldr	r3, [r7, #4]
 8034836:	689b      	ldr	r3, [r3, #8]
 8034838:	2b00      	cmp	r3, #0
 803483a:	d10c      	bne.n	8034856 <HAL_RCC_OscConfig+0x5a6>
 803483c:	4b77      	ldr	r3, [pc, #476]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034840:	4a76      	ldr	r2, [pc, #472]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034842:	f023 0301 	bic.w	r3, r3, #1
 8034846:	6713      	str	r3, [r2, #112]	; 0x70
 8034848:	4b74      	ldr	r3, [pc, #464]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803484c:	4a73      	ldr	r2, [pc, #460]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803484e:	f023 0304 	bic.w	r3, r3, #4
 8034852:	6713      	str	r3, [r2, #112]	; 0x70
 8034854:	e01c      	b.n	8034890 <HAL_RCC_OscConfig+0x5e0>
 8034856:	687b      	ldr	r3, [r7, #4]
 8034858:	689b      	ldr	r3, [r3, #8]
 803485a:	2b05      	cmp	r3, #5
 803485c:	d10c      	bne.n	8034878 <HAL_RCC_OscConfig+0x5c8>
 803485e:	4b6f      	ldr	r3, [pc, #444]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034862:	4a6e      	ldr	r2, [pc, #440]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034864:	f043 0304 	orr.w	r3, r3, #4
 8034868:	6713      	str	r3, [r2, #112]	; 0x70
 803486a:	4b6c      	ldr	r3, [pc, #432]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803486e:	4a6b      	ldr	r2, [pc, #428]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034870:	f043 0301 	orr.w	r3, r3, #1
 8034874:	6713      	str	r3, [r2, #112]	; 0x70
 8034876:	e00b      	b.n	8034890 <HAL_RCC_OscConfig+0x5e0>
 8034878:	4b68      	ldr	r3, [pc, #416]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803487c:	4a67      	ldr	r2, [pc, #412]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803487e:	f023 0301 	bic.w	r3, r3, #1
 8034882:	6713      	str	r3, [r2, #112]	; 0x70
 8034884:	4b65      	ldr	r3, [pc, #404]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034888:	4a64      	ldr	r2, [pc, #400]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803488a:	f023 0304 	bic.w	r3, r3, #4
 803488e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8034890:	687b      	ldr	r3, [r7, #4]
 8034892:	689b      	ldr	r3, [r3, #8]
 8034894:	2b00      	cmp	r3, #0
 8034896:	d015      	beq.n	80348c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034898:	f7f9 fd22 	bl	802e2e0 <HAL_GetTick>
 803489c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803489e:	e00a      	b.n	80348b6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80348a0:	f7f9 fd1e 	bl	802e2e0 <HAL_GetTick>
 80348a4:	4602      	mov	r2, r0
 80348a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80348a8:	1ad3      	subs	r3, r2, r3
 80348aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80348ae:	4293      	cmp	r3, r2
 80348b0:	d901      	bls.n	80348b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80348b2:	2303      	movs	r3, #3
 80348b4:	e123      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80348b6:	4b59      	ldr	r3, [pc, #356]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80348b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80348ba:	f003 0302 	and.w	r3, r3, #2
 80348be:	2b00      	cmp	r3, #0
 80348c0:	d0ee      	beq.n	80348a0 <HAL_RCC_OscConfig+0x5f0>
 80348c2:	e014      	b.n	80348ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80348c4:	f7f9 fd0c 	bl	802e2e0 <HAL_GetTick>
 80348c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80348ca:	e00a      	b.n	80348e2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80348cc:	f7f9 fd08 	bl	802e2e0 <HAL_GetTick>
 80348d0:	4602      	mov	r2, r0
 80348d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80348d4:	1ad3      	subs	r3, r2, r3
 80348d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80348da:	4293      	cmp	r3, r2
 80348dc:	d901      	bls.n	80348e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80348de:	2303      	movs	r3, #3
 80348e0:	e10d      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80348e2:	4b4e      	ldr	r3, [pc, #312]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80348e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80348e6:	f003 0302 	and.w	r3, r3, #2
 80348ea:	2b00      	cmp	r3, #0
 80348ec:	d1ee      	bne.n	80348cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80348ee:	687b      	ldr	r3, [r7, #4]
 80348f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80348f2:	2b00      	cmp	r3, #0
 80348f4:	f000 8102 	beq.w	8034afc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80348f8:	4b48      	ldr	r3, [pc, #288]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80348fa:	691b      	ldr	r3, [r3, #16]
 80348fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8034900:	2b18      	cmp	r3, #24
 8034902:	f000 80bd 	beq.w	8034a80 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8034906:	687b      	ldr	r3, [r7, #4]
 8034908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803490a:	2b02      	cmp	r3, #2
 803490c:	f040 809e 	bne.w	8034a4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034910:	4b42      	ldr	r3, [pc, #264]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034912:	681b      	ldr	r3, [r3, #0]
 8034914:	4a41      	ldr	r2, [pc, #260]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 803491a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803491c:	f7f9 fce0 	bl	802e2e0 <HAL_GetTick>
 8034920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8034922:	e008      	b.n	8034936 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034924:	f7f9 fcdc 	bl	802e2e0 <HAL_GetTick>
 8034928:	4602      	mov	r2, r0
 803492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803492c:	1ad3      	subs	r3, r2, r3
 803492e:	2b02      	cmp	r3, #2
 8034930:	d901      	bls.n	8034936 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8034932:	2303      	movs	r3, #3
 8034934:	e0e3      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8034936:	4b39      	ldr	r3, [pc, #228]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034938:	681b      	ldr	r3, [r3, #0]
 803493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803493e:	2b00      	cmp	r3, #0
 8034940:	d1f0      	bne.n	8034924 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8034942:	4b36      	ldr	r3, [pc, #216]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8034946:	4b37      	ldr	r3, [pc, #220]	; (8034a24 <HAL_RCC_OscConfig+0x774>)
 8034948:	4013      	ands	r3, r2
 803494a:	687a      	ldr	r2, [r7, #4]
 803494c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 803494e:	687a      	ldr	r2, [r7, #4]
 8034950:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8034952:	0112      	lsls	r2, r2, #4
 8034954:	430a      	orrs	r2, r1
 8034956:	4931      	ldr	r1, [pc, #196]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034958:	4313      	orrs	r3, r2
 803495a:	628b      	str	r3, [r1, #40]	; 0x28
 803495c:	687b      	ldr	r3, [r7, #4]
 803495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034960:	3b01      	subs	r3, #1
 8034962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8034966:	687b      	ldr	r3, [r7, #4]
 8034968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803496a:	3b01      	subs	r3, #1
 803496c:	025b      	lsls	r3, r3, #9
 803496e:	b29b      	uxth	r3, r3
 8034970:	431a      	orrs	r2, r3
 8034972:	687b      	ldr	r3, [r7, #4]
 8034974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034976:	3b01      	subs	r3, #1
 8034978:	041b      	lsls	r3, r3, #16
 803497a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 803497e:	431a      	orrs	r2, r3
 8034980:	687b      	ldr	r3, [r7, #4]
 8034982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034984:	3b01      	subs	r3, #1
 8034986:	061b      	lsls	r3, r3, #24
 8034988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 803498c:	4923      	ldr	r1, [pc, #140]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 803498e:	4313      	orrs	r3, r2
 8034990:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8034992:	4b22      	ldr	r3, [pc, #136]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034996:	4a21      	ldr	r2, [pc, #132]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034998:	f023 0301 	bic.w	r3, r3, #1
 803499c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 803499e:	4b1f      	ldr	r3, [pc, #124]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80349a2:	4b21      	ldr	r3, [pc, #132]	; (8034a28 <HAL_RCC_OscConfig+0x778>)
 80349a4:	4013      	ands	r3, r2
 80349a6:	687a      	ldr	r2, [r7, #4]
 80349a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80349aa:	00d2      	lsls	r2, r2, #3
 80349ac:	491b      	ldr	r1, [pc, #108]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349ae:	4313      	orrs	r3, r2
 80349b0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80349b2:	4b1a      	ldr	r3, [pc, #104]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80349b6:	f023 020c 	bic.w	r2, r3, #12
 80349ba:	687b      	ldr	r3, [r7, #4]
 80349bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80349be:	4917      	ldr	r1, [pc, #92]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349c0:	4313      	orrs	r3, r2
 80349c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80349c4:	4b15      	ldr	r3, [pc, #84]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80349c8:	f023 0202 	bic.w	r2, r3, #2
 80349cc:	687b      	ldr	r3, [r7, #4]
 80349ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80349d0:	4912      	ldr	r1, [pc, #72]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349d2:	4313      	orrs	r3, r2
 80349d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80349d6:	4b11      	ldr	r3, [pc, #68]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80349da:	4a10      	ldr	r2, [pc, #64]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80349e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80349e2:	4b0e      	ldr	r3, [pc, #56]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80349e6:	4a0d      	ldr	r2, [pc, #52]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80349ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80349ee:	4b0b      	ldr	r3, [pc, #44]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80349f2:	4a0a      	ldr	r2, [pc, #40]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80349f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80349fa:	4b08      	ldr	r3, [pc, #32]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 80349fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80349fe:	4a07      	ldr	r2, [pc, #28]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034a00:	f043 0301 	orr.w	r3, r3, #1
 8034a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8034a06:	4b05      	ldr	r3, [pc, #20]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034a08:	681b      	ldr	r3, [r3, #0]
 8034a0a:	4a04      	ldr	r2, [pc, #16]	; (8034a1c <HAL_RCC_OscConfig+0x76c>)
 8034a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8034a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034a12:	f7f9 fc65 	bl	802e2e0 <HAL_GetTick>
 8034a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8034a18:	e011      	b.n	8034a3e <HAL_RCC_OscConfig+0x78e>
 8034a1a:	bf00      	nop
 8034a1c:	58024400 	.word	0x58024400
 8034a20:	58024800 	.word	0x58024800
 8034a24:	fffffc0c 	.word	0xfffffc0c
 8034a28:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034a2c:	f7f9 fc58 	bl	802e2e0 <HAL_GetTick>
 8034a30:	4602      	mov	r2, r0
 8034a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034a34:	1ad3      	subs	r3, r2, r3
 8034a36:	2b02      	cmp	r3, #2
 8034a38:	d901      	bls.n	8034a3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8034a3a:	2303      	movs	r3, #3
 8034a3c:	e05f      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8034a3e:	4b32      	ldr	r3, [pc, #200]	; (8034b08 <HAL_RCC_OscConfig+0x858>)
 8034a40:	681b      	ldr	r3, [r3, #0]
 8034a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034a46:	2b00      	cmp	r3, #0
 8034a48:	d0f0      	beq.n	8034a2c <HAL_RCC_OscConfig+0x77c>
 8034a4a:	e057      	b.n	8034afc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8034a4c:	4b2e      	ldr	r3, [pc, #184]	; (8034b08 <HAL_RCC_OscConfig+0x858>)
 8034a4e:	681b      	ldr	r3, [r3, #0]
 8034a50:	4a2d      	ldr	r2, [pc, #180]	; (8034b08 <HAL_RCC_OscConfig+0x858>)
 8034a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8034a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8034a58:	f7f9 fc42 	bl	802e2e0 <HAL_GetTick>
 8034a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8034a5e:	e008      	b.n	8034a72 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8034a60:	f7f9 fc3e 	bl	802e2e0 <HAL_GetTick>
 8034a64:	4602      	mov	r2, r0
 8034a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034a68:	1ad3      	subs	r3, r2, r3
 8034a6a:	2b02      	cmp	r3, #2
 8034a6c:	d901      	bls.n	8034a72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8034a6e:	2303      	movs	r3, #3
 8034a70:	e045      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8034a72:	4b25      	ldr	r3, [pc, #148]	; (8034b08 <HAL_RCC_OscConfig+0x858>)
 8034a74:	681b      	ldr	r3, [r3, #0]
 8034a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034a7a:	2b00      	cmp	r3, #0
 8034a7c:	d1f0      	bne.n	8034a60 <HAL_RCC_OscConfig+0x7b0>
 8034a7e:	e03d      	b.n	8034afc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8034a80:	4b21      	ldr	r3, [pc, #132]	; (8034b08 <HAL_RCC_OscConfig+0x858>)
 8034a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034a84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8034a86:	4b20      	ldr	r3, [pc, #128]	; (8034b08 <HAL_RCC_OscConfig+0x858>)
 8034a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034a8a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8034a8c:	687b      	ldr	r3, [r7, #4]
 8034a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034a90:	2b01      	cmp	r3, #1
 8034a92:	d031      	beq.n	8034af8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8034a94:	693b      	ldr	r3, [r7, #16]
 8034a96:	f003 0203 	and.w	r2, r3, #3
 8034a9a:	687b      	ldr	r3, [r7, #4]
 8034a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8034a9e:	429a      	cmp	r2, r3
 8034aa0:	d12a      	bne.n	8034af8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8034aa2:	693b      	ldr	r3, [r7, #16]
 8034aa4:	091b      	lsrs	r3, r3, #4
 8034aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8034aaa:	687b      	ldr	r3, [r7, #4]
 8034aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8034aae:	429a      	cmp	r2, r3
 8034ab0:	d122      	bne.n	8034af8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8034ab2:	68fb      	ldr	r3, [r7, #12]
 8034ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8034ab8:	687b      	ldr	r3, [r7, #4]
 8034aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034abc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8034abe:	429a      	cmp	r2, r3
 8034ac0:	d11a      	bne.n	8034af8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8034ac2:	68fb      	ldr	r3, [r7, #12]
 8034ac4:	0a5b      	lsrs	r3, r3, #9
 8034ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8034aca:	687b      	ldr	r3, [r7, #4]
 8034acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034ace:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8034ad0:	429a      	cmp	r2, r3
 8034ad2:	d111      	bne.n	8034af8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8034ad4:	68fb      	ldr	r3, [r7, #12]
 8034ad6:	0c1b      	lsrs	r3, r3, #16
 8034ad8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8034adc:	687b      	ldr	r3, [r7, #4]
 8034ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034ae0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8034ae2:	429a      	cmp	r2, r3
 8034ae4:	d108      	bne.n	8034af8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8034ae6:	68fb      	ldr	r3, [r7, #12]
 8034ae8:	0e1b      	lsrs	r3, r3, #24
 8034aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8034aee:	687b      	ldr	r3, [r7, #4]
 8034af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8034af2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8034af4:	429a      	cmp	r2, r3
 8034af6:	d001      	beq.n	8034afc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8034af8:	2301      	movs	r3, #1
 8034afa:	e000      	b.n	8034afe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8034afc:	2300      	movs	r3, #0
}
 8034afe:	4618      	mov	r0, r3
 8034b00:	3730      	adds	r7, #48	; 0x30
 8034b02:	46bd      	mov	sp, r7
 8034b04:	bd80      	pop	{r7, pc}
 8034b06:	bf00      	nop
 8034b08:	58024400 	.word	0x58024400

08034b0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8034b0c:	b580      	push	{r7, lr}
 8034b0e:	b086      	sub	sp, #24
 8034b10:	af00      	add	r7, sp, #0
 8034b12:	6078      	str	r0, [r7, #4]
 8034b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8034b16:	687b      	ldr	r3, [r7, #4]
 8034b18:	2b00      	cmp	r3, #0
 8034b1a:	d101      	bne.n	8034b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8034b1c:	2301      	movs	r3, #1
 8034b1e:	e19c      	b.n	8034e5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8034b20:	4b8a      	ldr	r3, [pc, #552]	; (8034d4c <HAL_RCC_ClockConfig+0x240>)
 8034b22:	681b      	ldr	r3, [r3, #0]
 8034b24:	f003 030f 	and.w	r3, r3, #15
 8034b28:	683a      	ldr	r2, [r7, #0]
 8034b2a:	429a      	cmp	r2, r3
 8034b2c:	d910      	bls.n	8034b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8034b2e:	4b87      	ldr	r3, [pc, #540]	; (8034d4c <HAL_RCC_ClockConfig+0x240>)
 8034b30:	681b      	ldr	r3, [r3, #0]
 8034b32:	f023 020f 	bic.w	r2, r3, #15
 8034b36:	4985      	ldr	r1, [pc, #532]	; (8034d4c <HAL_RCC_ClockConfig+0x240>)
 8034b38:	683b      	ldr	r3, [r7, #0]
 8034b3a:	4313      	orrs	r3, r2
 8034b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8034b3e:	4b83      	ldr	r3, [pc, #524]	; (8034d4c <HAL_RCC_ClockConfig+0x240>)
 8034b40:	681b      	ldr	r3, [r3, #0]
 8034b42:	f003 030f 	and.w	r3, r3, #15
 8034b46:	683a      	ldr	r2, [r7, #0]
 8034b48:	429a      	cmp	r2, r3
 8034b4a:	d001      	beq.n	8034b50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8034b4c:	2301      	movs	r3, #1
 8034b4e:	e184      	b.n	8034e5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8034b50:	687b      	ldr	r3, [r7, #4]
 8034b52:	681b      	ldr	r3, [r3, #0]
 8034b54:	f003 0304 	and.w	r3, r3, #4
 8034b58:	2b00      	cmp	r3, #0
 8034b5a:	d010      	beq.n	8034b7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8034b5c:	687b      	ldr	r3, [r7, #4]
 8034b5e:	691a      	ldr	r2, [r3, #16]
 8034b60:	4b7b      	ldr	r3, [pc, #492]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034b62:	699b      	ldr	r3, [r3, #24]
 8034b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8034b68:	429a      	cmp	r2, r3
 8034b6a:	d908      	bls.n	8034b7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8034b6c:	4b78      	ldr	r3, [pc, #480]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034b6e:	699b      	ldr	r3, [r3, #24]
 8034b70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8034b74:	687b      	ldr	r3, [r7, #4]
 8034b76:	691b      	ldr	r3, [r3, #16]
 8034b78:	4975      	ldr	r1, [pc, #468]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034b7a:	4313      	orrs	r3, r2
 8034b7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8034b7e:	687b      	ldr	r3, [r7, #4]
 8034b80:	681b      	ldr	r3, [r3, #0]
 8034b82:	f003 0308 	and.w	r3, r3, #8
 8034b86:	2b00      	cmp	r3, #0
 8034b88:	d010      	beq.n	8034bac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8034b8a:	687b      	ldr	r3, [r7, #4]
 8034b8c:	695a      	ldr	r2, [r3, #20]
 8034b8e:	4b70      	ldr	r3, [pc, #448]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034b90:	69db      	ldr	r3, [r3, #28]
 8034b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8034b96:	429a      	cmp	r2, r3
 8034b98:	d908      	bls.n	8034bac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8034b9a:	4b6d      	ldr	r3, [pc, #436]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034b9c:	69db      	ldr	r3, [r3, #28]
 8034b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8034ba2:	687b      	ldr	r3, [r7, #4]
 8034ba4:	695b      	ldr	r3, [r3, #20]
 8034ba6:	496a      	ldr	r1, [pc, #424]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034ba8:	4313      	orrs	r3, r2
 8034baa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8034bac:	687b      	ldr	r3, [r7, #4]
 8034bae:	681b      	ldr	r3, [r3, #0]
 8034bb0:	f003 0310 	and.w	r3, r3, #16
 8034bb4:	2b00      	cmp	r3, #0
 8034bb6:	d010      	beq.n	8034bda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8034bb8:	687b      	ldr	r3, [r7, #4]
 8034bba:	699a      	ldr	r2, [r3, #24]
 8034bbc:	4b64      	ldr	r3, [pc, #400]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034bbe:	69db      	ldr	r3, [r3, #28]
 8034bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8034bc4:	429a      	cmp	r2, r3
 8034bc6:	d908      	bls.n	8034bda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8034bc8:	4b61      	ldr	r3, [pc, #388]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034bca:	69db      	ldr	r3, [r3, #28]
 8034bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8034bd0:	687b      	ldr	r3, [r7, #4]
 8034bd2:	699b      	ldr	r3, [r3, #24]
 8034bd4:	495e      	ldr	r1, [pc, #376]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034bd6:	4313      	orrs	r3, r2
 8034bd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8034bda:	687b      	ldr	r3, [r7, #4]
 8034bdc:	681b      	ldr	r3, [r3, #0]
 8034bde:	f003 0320 	and.w	r3, r3, #32
 8034be2:	2b00      	cmp	r3, #0
 8034be4:	d010      	beq.n	8034c08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8034be6:	687b      	ldr	r3, [r7, #4]
 8034be8:	69da      	ldr	r2, [r3, #28]
 8034bea:	4b59      	ldr	r3, [pc, #356]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034bec:	6a1b      	ldr	r3, [r3, #32]
 8034bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8034bf2:	429a      	cmp	r2, r3
 8034bf4:	d908      	bls.n	8034c08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8034bf6:	4b56      	ldr	r3, [pc, #344]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034bf8:	6a1b      	ldr	r3, [r3, #32]
 8034bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8034bfe:	687b      	ldr	r3, [r7, #4]
 8034c00:	69db      	ldr	r3, [r3, #28]
 8034c02:	4953      	ldr	r1, [pc, #332]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c04:	4313      	orrs	r3, r2
 8034c06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8034c08:	687b      	ldr	r3, [r7, #4]
 8034c0a:	681b      	ldr	r3, [r3, #0]
 8034c0c:	f003 0302 	and.w	r3, r3, #2
 8034c10:	2b00      	cmp	r3, #0
 8034c12:	d010      	beq.n	8034c36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8034c14:	687b      	ldr	r3, [r7, #4]
 8034c16:	68da      	ldr	r2, [r3, #12]
 8034c18:	4b4d      	ldr	r3, [pc, #308]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c1a:	699b      	ldr	r3, [r3, #24]
 8034c1c:	f003 030f 	and.w	r3, r3, #15
 8034c20:	429a      	cmp	r2, r3
 8034c22:	d908      	bls.n	8034c36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8034c24:	4b4a      	ldr	r3, [pc, #296]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c26:	699b      	ldr	r3, [r3, #24]
 8034c28:	f023 020f 	bic.w	r2, r3, #15
 8034c2c:	687b      	ldr	r3, [r7, #4]
 8034c2e:	68db      	ldr	r3, [r3, #12]
 8034c30:	4947      	ldr	r1, [pc, #284]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c32:	4313      	orrs	r3, r2
 8034c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8034c36:	687b      	ldr	r3, [r7, #4]
 8034c38:	681b      	ldr	r3, [r3, #0]
 8034c3a:	f003 0301 	and.w	r3, r3, #1
 8034c3e:	2b00      	cmp	r3, #0
 8034c40:	d055      	beq.n	8034cee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8034c42:	4b43      	ldr	r3, [pc, #268]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c44:	699b      	ldr	r3, [r3, #24]
 8034c46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8034c4a:	687b      	ldr	r3, [r7, #4]
 8034c4c:	689b      	ldr	r3, [r3, #8]
 8034c4e:	4940      	ldr	r1, [pc, #256]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c50:	4313      	orrs	r3, r2
 8034c52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8034c54:	687b      	ldr	r3, [r7, #4]
 8034c56:	685b      	ldr	r3, [r3, #4]
 8034c58:	2b02      	cmp	r3, #2
 8034c5a:	d107      	bne.n	8034c6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8034c5c:	4b3c      	ldr	r3, [pc, #240]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c5e:	681b      	ldr	r3, [r3, #0]
 8034c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8034c64:	2b00      	cmp	r3, #0
 8034c66:	d121      	bne.n	8034cac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8034c68:	2301      	movs	r3, #1
 8034c6a:	e0f6      	b.n	8034e5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8034c6c:	687b      	ldr	r3, [r7, #4]
 8034c6e:	685b      	ldr	r3, [r3, #4]
 8034c70:	2b03      	cmp	r3, #3
 8034c72:	d107      	bne.n	8034c84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8034c74:	4b36      	ldr	r3, [pc, #216]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c76:	681b      	ldr	r3, [r3, #0]
 8034c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8034c7c:	2b00      	cmp	r3, #0
 8034c7e:	d115      	bne.n	8034cac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8034c80:	2301      	movs	r3, #1
 8034c82:	e0ea      	b.n	8034e5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8034c84:	687b      	ldr	r3, [r7, #4]
 8034c86:	685b      	ldr	r3, [r3, #4]
 8034c88:	2b01      	cmp	r3, #1
 8034c8a:	d107      	bne.n	8034c9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8034c8c:	4b30      	ldr	r3, [pc, #192]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c8e:	681b      	ldr	r3, [r3, #0]
 8034c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034c94:	2b00      	cmp	r3, #0
 8034c96:	d109      	bne.n	8034cac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8034c98:	2301      	movs	r3, #1
 8034c9a:	e0de      	b.n	8034e5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8034c9c:	4b2c      	ldr	r3, [pc, #176]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034c9e:	681b      	ldr	r3, [r3, #0]
 8034ca0:	f003 0304 	and.w	r3, r3, #4
 8034ca4:	2b00      	cmp	r3, #0
 8034ca6:	d101      	bne.n	8034cac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8034ca8:	2301      	movs	r3, #1
 8034caa:	e0d6      	b.n	8034e5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8034cac:	4b28      	ldr	r3, [pc, #160]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034cae:	691b      	ldr	r3, [r3, #16]
 8034cb0:	f023 0207 	bic.w	r2, r3, #7
 8034cb4:	687b      	ldr	r3, [r7, #4]
 8034cb6:	685b      	ldr	r3, [r3, #4]
 8034cb8:	4925      	ldr	r1, [pc, #148]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034cba:	4313      	orrs	r3, r2
 8034cbc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8034cbe:	f7f9 fb0f 	bl	802e2e0 <HAL_GetTick>
 8034cc2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8034cc4:	e00a      	b.n	8034cdc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8034cc6:	f7f9 fb0b 	bl	802e2e0 <HAL_GetTick>
 8034cca:	4602      	mov	r2, r0
 8034ccc:	697b      	ldr	r3, [r7, #20]
 8034cce:	1ad3      	subs	r3, r2, r3
 8034cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8034cd4:	4293      	cmp	r3, r2
 8034cd6:	d901      	bls.n	8034cdc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8034cd8:	2303      	movs	r3, #3
 8034cda:	e0be      	b.n	8034e5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8034cdc:	4b1c      	ldr	r3, [pc, #112]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034cde:	691b      	ldr	r3, [r3, #16]
 8034ce0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8034ce4:	687b      	ldr	r3, [r7, #4]
 8034ce6:	685b      	ldr	r3, [r3, #4]
 8034ce8:	00db      	lsls	r3, r3, #3
 8034cea:	429a      	cmp	r2, r3
 8034cec:	d1eb      	bne.n	8034cc6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8034cee:	687b      	ldr	r3, [r7, #4]
 8034cf0:	681b      	ldr	r3, [r3, #0]
 8034cf2:	f003 0302 	and.w	r3, r3, #2
 8034cf6:	2b00      	cmp	r3, #0
 8034cf8:	d010      	beq.n	8034d1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8034cfa:	687b      	ldr	r3, [r7, #4]
 8034cfc:	68da      	ldr	r2, [r3, #12]
 8034cfe:	4b14      	ldr	r3, [pc, #80]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034d00:	699b      	ldr	r3, [r3, #24]
 8034d02:	f003 030f 	and.w	r3, r3, #15
 8034d06:	429a      	cmp	r2, r3
 8034d08:	d208      	bcs.n	8034d1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8034d0a:	4b11      	ldr	r3, [pc, #68]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034d0c:	699b      	ldr	r3, [r3, #24]
 8034d0e:	f023 020f 	bic.w	r2, r3, #15
 8034d12:	687b      	ldr	r3, [r7, #4]
 8034d14:	68db      	ldr	r3, [r3, #12]
 8034d16:	490e      	ldr	r1, [pc, #56]	; (8034d50 <HAL_RCC_ClockConfig+0x244>)
 8034d18:	4313      	orrs	r3, r2
 8034d1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8034d1c:	4b0b      	ldr	r3, [pc, #44]	; (8034d4c <HAL_RCC_ClockConfig+0x240>)
 8034d1e:	681b      	ldr	r3, [r3, #0]
 8034d20:	f003 030f 	and.w	r3, r3, #15
 8034d24:	683a      	ldr	r2, [r7, #0]
 8034d26:	429a      	cmp	r2, r3
 8034d28:	d214      	bcs.n	8034d54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8034d2a:	4b08      	ldr	r3, [pc, #32]	; (8034d4c <HAL_RCC_ClockConfig+0x240>)
 8034d2c:	681b      	ldr	r3, [r3, #0]
 8034d2e:	f023 020f 	bic.w	r2, r3, #15
 8034d32:	4906      	ldr	r1, [pc, #24]	; (8034d4c <HAL_RCC_ClockConfig+0x240>)
 8034d34:	683b      	ldr	r3, [r7, #0]
 8034d36:	4313      	orrs	r3, r2
 8034d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8034d3a:	4b04      	ldr	r3, [pc, #16]	; (8034d4c <HAL_RCC_ClockConfig+0x240>)
 8034d3c:	681b      	ldr	r3, [r3, #0]
 8034d3e:	f003 030f 	and.w	r3, r3, #15
 8034d42:	683a      	ldr	r2, [r7, #0]
 8034d44:	429a      	cmp	r2, r3
 8034d46:	d005      	beq.n	8034d54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8034d48:	2301      	movs	r3, #1
 8034d4a:	e086      	b.n	8034e5a <HAL_RCC_ClockConfig+0x34e>
 8034d4c:	52002000 	.word	0x52002000
 8034d50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8034d54:	687b      	ldr	r3, [r7, #4]
 8034d56:	681b      	ldr	r3, [r3, #0]
 8034d58:	f003 0304 	and.w	r3, r3, #4
 8034d5c:	2b00      	cmp	r3, #0
 8034d5e:	d010      	beq.n	8034d82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8034d60:	687b      	ldr	r3, [r7, #4]
 8034d62:	691a      	ldr	r2, [r3, #16]
 8034d64:	4b3f      	ldr	r3, [pc, #252]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034d66:	699b      	ldr	r3, [r3, #24]
 8034d68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8034d6c:	429a      	cmp	r2, r3
 8034d6e:	d208      	bcs.n	8034d82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8034d70:	4b3c      	ldr	r3, [pc, #240]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034d72:	699b      	ldr	r3, [r3, #24]
 8034d74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8034d78:	687b      	ldr	r3, [r7, #4]
 8034d7a:	691b      	ldr	r3, [r3, #16]
 8034d7c:	4939      	ldr	r1, [pc, #228]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034d7e:	4313      	orrs	r3, r2
 8034d80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8034d82:	687b      	ldr	r3, [r7, #4]
 8034d84:	681b      	ldr	r3, [r3, #0]
 8034d86:	f003 0308 	and.w	r3, r3, #8
 8034d8a:	2b00      	cmp	r3, #0
 8034d8c:	d010      	beq.n	8034db0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8034d8e:	687b      	ldr	r3, [r7, #4]
 8034d90:	695a      	ldr	r2, [r3, #20]
 8034d92:	4b34      	ldr	r3, [pc, #208]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034d94:	69db      	ldr	r3, [r3, #28]
 8034d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8034d9a:	429a      	cmp	r2, r3
 8034d9c:	d208      	bcs.n	8034db0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8034d9e:	4b31      	ldr	r3, [pc, #196]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034da0:	69db      	ldr	r3, [r3, #28]
 8034da2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8034da6:	687b      	ldr	r3, [r7, #4]
 8034da8:	695b      	ldr	r3, [r3, #20]
 8034daa:	492e      	ldr	r1, [pc, #184]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034dac:	4313      	orrs	r3, r2
 8034dae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8034db0:	687b      	ldr	r3, [r7, #4]
 8034db2:	681b      	ldr	r3, [r3, #0]
 8034db4:	f003 0310 	and.w	r3, r3, #16
 8034db8:	2b00      	cmp	r3, #0
 8034dba:	d010      	beq.n	8034dde <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8034dbc:	687b      	ldr	r3, [r7, #4]
 8034dbe:	699a      	ldr	r2, [r3, #24]
 8034dc0:	4b28      	ldr	r3, [pc, #160]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034dc2:	69db      	ldr	r3, [r3, #28]
 8034dc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8034dc8:	429a      	cmp	r2, r3
 8034dca:	d208      	bcs.n	8034dde <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8034dcc:	4b25      	ldr	r3, [pc, #148]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034dce:	69db      	ldr	r3, [r3, #28]
 8034dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8034dd4:	687b      	ldr	r3, [r7, #4]
 8034dd6:	699b      	ldr	r3, [r3, #24]
 8034dd8:	4922      	ldr	r1, [pc, #136]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034dda:	4313      	orrs	r3, r2
 8034ddc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8034dde:	687b      	ldr	r3, [r7, #4]
 8034de0:	681b      	ldr	r3, [r3, #0]
 8034de2:	f003 0320 	and.w	r3, r3, #32
 8034de6:	2b00      	cmp	r3, #0
 8034de8:	d010      	beq.n	8034e0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8034dea:	687b      	ldr	r3, [r7, #4]
 8034dec:	69da      	ldr	r2, [r3, #28]
 8034dee:	4b1d      	ldr	r3, [pc, #116]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034df0:	6a1b      	ldr	r3, [r3, #32]
 8034df2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8034df6:	429a      	cmp	r2, r3
 8034df8:	d208      	bcs.n	8034e0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8034dfa:	4b1a      	ldr	r3, [pc, #104]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034dfc:	6a1b      	ldr	r3, [r3, #32]
 8034dfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8034e02:	687b      	ldr	r3, [r7, #4]
 8034e04:	69db      	ldr	r3, [r3, #28]
 8034e06:	4917      	ldr	r1, [pc, #92]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034e08:	4313      	orrs	r3, r2
 8034e0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8034e0c:	f000 f834 	bl	8034e78 <HAL_RCC_GetSysClockFreq>
 8034e10:	4602      	mov	r2, r0
 8034e12:	4b14      	ldr	r3, [pc, #80]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034e14:	699b      	ldr	r3, [r3, #24]
 8034e16:	0a1b      	lsrs	r3, r3, #8
 8034e18:	f003 030f 	and.w	r3, r3, #15
 8034e1c:	4912      	ldr	r1, [pc, #72]	; (8034e68 <HAL_RCC_ClockConfig+0x35c>)
 8034e1e:	5ccb      	ldrb	r3, [r1, r3]
 8034e20:	f003 031f 	and.w	r3, r3, #31
 8034e24:	fa22 f303 	lsr.w	r3, r2, r3
 8034e28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8034e2a:	4b0e      	ldr	r3, [pc, #56]	; (8034e64 <HAL_RCC_ClockConfig+0x358>)
 8034e2c:	699b      	ldr	r3, [r3, #24]
 8034e2e:	f003 030f 	and.w	r3, r3, #15
 8034e32:	4a0d      	ldr	r2, [pc, #52]	; (8034e68 <HAL_RCC_ClockConfig+0x35c>)
 8034e34:	5cd3      	ldrb	r3, [r2, r3]
 8034e36:	f003 031f 	and.w	r3, r3, #31
 8034e3a:	693a      	ldr	r2, [r7, #16]
 8034e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8034e40:	4a0a      	ldr	r2, [pc, #40]	; (8034e6c <HAL_RCC_ClockConfig+0x360>)
 8034e42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8034e44:	4a0a      	ldr	r2, [pc, #40]	; (8034e70 <HAL_RCC_ClockConfig+0x364>)
 8034e46:	693b      	ldr	r3, [r7, #16]
 8034e48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8034e4a:	4b0a      	ldr	r3, [pc, #40]	; (8034e74 <HAL_RCC_ClockConfig+0x368>)
 8034e4c:	681b      	ldr	r3, [r3, #0]
 8034e4e:	4618      	mov	r0, r3
 8034e50:	f7f9 f9fc 	bl	802e24c <HAL_InitTick>
 8034e54:	4603      	mov	r3, r0
 8034e56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8034e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8034e5a:	4618      	mov	r0, r3
 8034e5c:	3718      	adds	r7, #24
 8034e5e:	46bd      	mov	sp, r7
 8034e60:	bd80      	pop	{r7, pc}
 8034e62:	bf00      	nop
 8034e64:	58024400 	.word	0x58024400
 8034e68:	0805b81c 	.word	0x0805b81c
 8034e6c:	24000008 	.word	0x24000008
 8034e70:	24000004 	.word	0x24000004
 8034e74:	2400000c 	.word	0x2400000c

08034e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8034e78:	b480      	push	{r7}
 8034e7a:	b089      	sub	sp, #36	; 0x24
 8034e7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8034e7e:	4bb3      	ldr	r3, [pc, #716]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034e80:	691b      	ldr	r3, [r3, #16]
 8034e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8034e86:	2b18      	cmp	r3, #24
 8034e88:	f200 8155 	bhi.w	8035136 <HAL_RCC_GetSysClockFreq+0x2be>
 8034e8c:	a201      	add	r2, pc, #4	; (adr r2, 8034e94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8034e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034e92:	bf00      	nop
 8034e94:	08034ef9 	.word	0x08034ef9
 8034e98:	08035137 	.word	0x08035137
 8034e9c:	08035137 	.word	0x08035137
 8034ea0:	08035137 	.word	0x08035137
 8034ea4:	08035137 	.word	0x08035137
 8034ea8:	08035137 	.word	0x08035137
 8034eac:	08035137 	.word	0x08035137
 8034eb0:	08035137 	.word	0x08035137
 8034eb4:	08034f1f 	.word	0x08034f1f
 8034eb8:	08035137 	.word	0x08035137
 8034ebc:	08035137 	.word	0x08035137
 8034ec0:	08035137 	.word	0x08035137
 8034ec4:	08035137 	.word	0x08035137
 8034ec8:	08035137 	.word	0x08035137
 8034ecc:	08035137 	.word	0x08035137
 8034ed0:	08035137 	.word	0x08035137
 8034ed4:	08034f25 	.word	0x08034f25
 8034ed8:	08035137 	.word	0x08035137
 8034edc:	08035137 	.word	0x08035137
 8034ee0:	08035137 	.word	0x08035137
 8034ee4:	08035137 	.word	0x08035137
 8034ee8:	08035137 	.word	0x08035137
 8034eec:	08035137 	.word	0x08035137
 8034ef0:	08035137 	.word	0x08035137
 8034ef4:	08034f2b 	.word	0x08034f2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8034ef8:	4b94      	ldr	r3, [pc, #592]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034efa:	681b      	ldr	r3, [r3, #0]
 8034efc:	f003 0320 	and.w	r3, r3, #32
 8034f00:	2b00      	cmp	r3, #0
 8034f02:	d009      	beq.n	8034f18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8034f04:	4b91      	ldr	r3, [pc, #580]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034f06:	681b      	ldr	r3, [r3, #0]
 8034f08:	08db      	lsrs	r3, r3, #3
 8034f0a:	f003 0303 	and.w	r3, r3, #3
 8034f0e:	4a90      	ldr	r2, [pc, #576]	; (8035150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8034f10:	fa22 f303 	lsr.w	r3, r2, r3
 8034f14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8034f16:	e111      	b.n	803513c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8034f18:	4b8d      	ldr	r3, [pc, #564]	; (8035150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8034f1a:	61bb      	str	r3, [r7, #24]
    break;
 8034f1c:	e10e      	b.n	803513c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8034f1e:	4b8d      	ldr	r3, [pc, #564]	; (8035154 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8034f20:	61bb      	str	r3, [r7, #24]
    break;
 8034f22:	e10b      	b.n	803513c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8034f24:	4b8c      	ldr	r3, [pc, #560]	; (8035158 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8034f26:	61bb      	str	r3, [r7, #24]
    break;
 8034f28:	e108      	b.n	803513c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8034f2a:	4b88      	ldr	r3, [pc, #544]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034f2e:	f003 0303 	and.w	r3, r3, #3
 8034f32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8034f34:	4b85      	ldr	r3, [pc, #532]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034f38:	091b      	lsrs	r3, r3, #4
 8034f3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034f3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8034f40:	4b82      	ldr	r3, [pc, #520]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034f44:	f003 0301 	and.w	r3, r3, #1
 8034f48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8034f4a:	4b80      	ldr	r3, [pc, #512]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034f4e:	08db      	lsrs	r3, r3, #3
 8034f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8034f54:	68fa      	ldr	r2, [r7, #12]
 8034f56:	fb02 f303 	mul.w	r3, r2, r3
 8034f5a:	ee07 3a90 	vmov	s15, r3
 8034f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034f62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8034f66:	693b      	ldr	r3, [r7, #16]
 8034f68:	2b00      	cmp	r3, #0
 8034f6a:	f000 80e1 	beq.w	8035130 <HAL_RCC_GetSysClockFreq+0x2b8>
 8034f6e:	697b      	ldr	r3, [r7, #20]
 8034f70:	2b02      	cmp	r3, #2
 8034f72:	f000 8083 	beq.w	803507c <HAL_RCC_GetSysClockFreq+0x204>
 8034f76:	697b      	ldr	r3, [r7, #20]
 8034f78:	2b02      	cmp	r3, #2
 8034f7a:	f200 80a1 	bhi.w	80350c0 <HAL_RCC_GetSysClockFreq+0x248>
 8034f7e:	697b      	ldr	r3, [r7, #20]
 8034f80:	2b00      	cmp	r3, #0
 8034f82:	d003      	beq.n	8034f8c <HAL_RCC_GetSysClockFreq+0x114>
 8034f84:	697b      	ldr	r3, [r7, #20]
 8034f86:	2b01      	cmp	r3, #1
 8034f88:	d056      	beq.n	8035038 <HAL_RCC_GetSysClockFreq+0x1c0>
 8034f8a:	e099      	b.n	80350c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8034f8c:	4b6f      	ldr	r3, [pc, #444]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034f8e:	681b      	ldr	r3, [r3, #0]
 8034f90:	f003 0320 	and.w	r3, r3, #32
 8034f94:	2b00      	cmp	r3, #0
 8034f96:	d02d      	beq.n	8034ff4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8034f98:	4b6c      	ldr	r3, [pc, #432]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034f9a:	681b      	ldr	r3, [r3, #0]
 8034f9c:	08db      	lsrs	r3, r3, #3
 8034f9e:	f003 0303 	and.w	r3, r3, #3
 8034fa2:	4a6b      	ldr	r2, [pc, #428]	; (8035150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8034fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8034fa8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8034faa:	687b      	ldr	r3, [r7, #4]
 8034fac:	ee07 3a90 	vmov	s15, r3
 8034fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034fb4:	693b      	ldr	r3, [r7, #16]
 8034fb6:	ee07 3a90 	vmov	s15, r3
 8034fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8034fc2:	4b62      	ldr	r3, [pc, #392]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8034fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8034fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034fca:	ee07 3a90 	vmov	s15, r3
 8034fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8034fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8034fd6:	eddf 5a61 	vldr	s11, [pc, #388]	; 803515c <HAL_RCC_GetSysClockFreq+0x2e4>
 8034fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8034fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8034fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8034fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8034fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8034fee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8034ff2:	e087      	b.n	8035104 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8034ff4:	693b      	ldr	r3, [r7, #16]
 8034ff6:	ee07 3a90 	vmov	s15, r3
 8034ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8034ffe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8035160 <HAL_RCC_GetSysClockFreq+0x2e8>
 8035002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8035006:	4b51      	ldr	r3, [pc, #324]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803500a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803500e:	ee07 3a90 	vmov	s15, r3
 8035012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8035016:	ed97 6a02 	vldr	s12, [r7, #8]
 803501a:	eddf 5a50 	vldr	s11, [pc, #320]	; 803515c <HAL_RCC_GetSysClockFreq+0x2e4>
 803501e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8035026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803502a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803502e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8035036:	e065      	b.n	8035104 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8035038:	693b      	ldr	r3, [r7, #16]
 803503a:	ee07 3a90 	vmov	s15, r3
 803503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035042:	eddf 6a48 	vldr	s13, [pc, #288]	; 8035164 <HAL_RCC_GetSysClockFreq+0x2ec>
 8035046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803504a:	4b40      	ldr	r3, [pc, #256]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 803504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803504e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035052:	ee07 3a90 	vmov	s15, r3
 8035056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803505a:	ed97 6a02 	vldr	s12, [r7, #8]
 803505e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 803515c <HAL_RCC_GetSysClockFreq+0x2e4>
 8035062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8035066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803506a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803506e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8035072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8035076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 803507a:	e043      	b.n	8035104 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 803507c:	693b      	ldr	r3, [r7, #16]
 803507e:	ee07 3a90 	vmov	s15, r3
 8035082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8035086:	eddf 6a38 	vldr	s13, [pc, #224]	; 8035168 <HAL_RCC_GetSysClockFreq+0x2f0>
 803508a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803508e:	4b2f      	ldr	r3, [pc, #188]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035096:	ee07 3a90 	vmov	s15, r3
 803509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803509e:	ed97 6a02 	vldr	s12, [r7, #8]
 80350a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 803515c <HAL_RCC_GetSysClockFreq+0x2e4>
 80350a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80350aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80350ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80350b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80350b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80350ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80350be:	e021      	b.n	8035104 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80350c0:	693b      	ldr	r3, [r7, #16]
 80350c2:	ee07 3a90 	vmov	s15, r3
 80350c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80350ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8035164 <HAL_RCC_GetSysClockFreq+0x2ec>
 80350ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80350d2:	4b1e      	ldr	r3, [pc, #120]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80350d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80350d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80350da:	ee07 3a90 	vmov	s15, r3
 80350de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80350e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80350e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 803515c <HAL_RCC_GetSysClockFreq+0x2e4>
 80350ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80350ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80350f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80350f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80350fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80350fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8035102:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8035104:	4b11      	ldr	r3, [pc, #68]	; (803514c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8035106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035108:	0a5b      	lsrs	r3, r3, #9
 803510a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803510e:	3301      	adds	r3, #1
 8035110:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8035112:	683b      	ldr	r3, [r7, #0]
 8035114:	ee07 3a90 	vmov	s15, r3
 8035118:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 803511c:	edd7 6a07 	vldr	s13, [r7, #28]
 8035120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8035124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8035128:	ee17 3a90 	vmov	r3, s15
 803512c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 803512e:	e005      	b.n	803513c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8035130:	2300      	movs	r3, #0
 8035132:	61bb      	str	r3, [r7, #24]
    break;
 8035134:	e002      	b.n	803513c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8035136:	4b07      	ldr	r3, [pc, #28]	; (8035154 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8035138:	61bb      	str	r3, [r7, #24]
    break;
 803513a:	bf00      	nop
  }

  return sysclockfreq;
 803513c:	69bb      	ldr	r3, [r7, #24]
}
 803513e:	4618      	mov	r0, r3
 8035140:	3724      	adds	r7, #36	; 0x24
 8035142:	46bd      	mov	sp, r7
 8035144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035148:	4770      	bx	lr
 803514a:	bf00      	nop
 803514c:	58024400 	.word	0x58024400
 8035150:	03d09000 	.word	0x03d09000
 8035154:	003d0900 	.word	0x003d0900
 8035158:	017d7840 	.word	0x017d7840
 803515c:	46000000 	.word	0x46000000
 8035160:	4c742400 	.word	0x4c742400
 8035164:	4a742400 	.word	0x4a742400
 8035168:	4bbebc20 	.word	0x4bbebc20

0803516c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 803516c:	b580      	push	{r7, lr}
 803516e:	b082      	sub	sp, #8
 8035170:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8035172:	f7ff fe81 	bl	8034e78 <HAL_RCC_GetSysClockFreq>
 8035176:	4602      	mov	r2, r0
 8035178:	4b10      	ldr	r3, [pc, #64]	; (80351bc <HAL_RCC_GetHCLKFreq+0x50>)
 803517a:	699b      	ldr	r3, [r3, #24]
 803517c:	0a1b      	lsrs	r3, r3, #8
 803517e:	f003 030f 	and.w	r3, r3, #15
 8035182:	490f      	ldr	r1, [pc, #60]	; (80351c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8035184:	5ccb      	ldrb	r3, [r1, r3]
 8035186:	f003 031f 	and.w	r3, r3, #31
 803518a:	fa22 f303 	lsr.w	r3, r2, r3
 803518e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8035190:	4b0a      	ldr	r3, [pc, #40]	; (80351bc <HAL_RCC_GetHCLKFreq+0x50>)
 8035192:	699b      	ldr	r3, [r3, #24]
 8035194:	f003 030f 	and.w	r3, r3, #15
 8035198:	4a09      	ldr	r2, [pc, #36]	; (80351c0 <HAL_RCC_GetHCLKFreq+0x54>)
 803519a:	5cd3      	ldrb	r3, [r2, r3]
 803519c:	f003 031f 	and.w	r3, r3, #31
 80351a0:	687a      	ldr	r2, [r7, #4]
 80351a2:	fa22 f303 	lsr.w	r3, r2, r3
 80351a6:	4a07      	ldr	r2, [pc, #28]	; (80351c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80351a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80351aa:	4a07      	ldr	r2, [pc, #28]	; (80351c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80351ac:	687b      	ldr	r3, [r7, #4]
 80351ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80351b0:	4b04      	ldr	r3, [pc, #16]	; (80351c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80351b2:	681b      	ldr	r3, [r3, #0]
}
 80351b4:	4618      	mov	r0, r3
 80351b6:	3708      	adds	r7, #8
 80351b8:	46bd      	mov	sp, r7
 80351ba:	bd80      	pop	{r7, pc}
 80351bc:	58024400 	.word	0x58024400
 80351c0:	0805b81c 	.word	0x0805b81c
 80351c4:	24000008 	.word	0x24000008
 80351c8:	24000004 	.word	0x24000004

080351cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80351cc:	b580      	push	{r7, lr}
 80351ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80351d0:	f7ff ffcc 	bl	803516c <HAL_RCC_GetHCLKFreq>
 80351d4:	4602      	mov	r2, r0
 80351d6:	4b06      	ldr	r3, [pc, #24]	; (80351f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80351d8:	69db      	ldr	r3, [r3, #28]
 80351da:	091b      	lsrs	r3, r3, #4
 80351dc:	f003 0307 	and.w	r3, r3, #7
 80351e0:	4904      	ldr	r1, [pc, #16]	; (80351f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80351e2:	5ccb      	ldrb	r3, [r1, r3]
 80351e4:	f003 031f 	and.w	r3, r3, #31
 80351e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80351ec:	4618      	mov	r0, r3
 80351ee:	bd80      	pop	{r7, pc}
 80351f0:	58024400 	.word	0x58024400
 80351f4:	0805b81c 	.word	0x0805b81c

080351f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80351f8:	b580      	push	{r7, lr}
 80351fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80351fc:	f7ff ffb6 	bl	803516c <HAL_RCC_GetHCLKFreq>
 8035200:	4602      	mov	r2, r0
 8035202:	4b06      	ldr	r3, [pc, #24]	; (803521c <HAL_RCC_GetPCLK2Freq+0x24>)
 8035204:	69db      	ldr	r3, [r3, #28]
 8035206:	0a1b      	lsrs	r3, r3, #8
 8035208:	f003 0307 	and.w	r3, r3, #7
 803520c:	4904      	ldr	r1, [pc, #16]	; (8035220 <HAL_RCC_GetPCLK2Freq+0x28>)
 803520e:	5ccb      	ldrb	r3, [r1, r3]
 8035210:	f003 031f 	and.w	r3, r3, #31
 8035214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8035218:	4618      	mov	r0, r3
 803521a:	bd80      	pop	{r7, pc}
 803521c:	58024400 	.word	0x58024400
 8035220:	0805b81c 	.word	0x0805b81c

08035224 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8035224:	b580      	push	{r7, lr}
 8035226:	b086      	sub	sp, #24
 8035228:	af00      	add	r7, sp, #0
 803522a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 803522c:	2300      	movs	r3, #0
 803522e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8035230:	2300      	movs	r3, #0
 8035232:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8035234:	687b      	ldr	r3, [r7, #4]
 8035236:	681b      	ldr	r3, [r3, #0]
 8035238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803523c:	2b00      	cmp	r3, #0
 803523e:	d03f      	beq.n	80352c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8035240:	687b      	ldr	r3, [r7, #4]
 8035242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8035244:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8035248:	d02a      	beq.n	80352a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 803524a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 803524e:	d824      	bhi.n	803529a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8035250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8035254:	d018      	beq.n	8035288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8035256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803525a:	d81e      	bhi.n	803529a <HAL_RCCEx_PeriphCLKConfig+0x76>
 803525c:	2b00      	cmp	r3, #0
 803525e:	d003      	beq.n	8035268 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8035260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8035264:	d007      	beq.n	8035276 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8035266:	e018      	b.n	803529a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035268:	4ba3      	ldr	r3, [pc, #652]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803526c:	4aa2      	ldr	r2, [pc, #648]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803526e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035272:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8035274:	e015      	b.n	80352a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8035276:	687b      	ldr	r3, [r7, #4]
 8035278:	3304      	adds	r3, #4
 803527a:	2102      	movs	r1, #2
 803527c:	4618      	mov	r0, r3
 803527e:	f001 f9d5 	bl	803662c <RCCEx_PLL2_Config>
 8035282:	4603      	mov	r3, r0
 8035284:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8035286:	e00c      	b.n	80352a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8035288:	687b      	ldr	r3, [r7, #4]
 803528a:	3324      	adds	r3, #36	; 0x24
 803528c:	2102      	movs	r1, #2
 803528e:	4618      	mov	r0, r3
 8035290:	f001 fa7e 	bl	8036790 <RCCEx_PLL3_Config>
 8035294:	4603      	mov	r3, r0
 8035296:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8035298:	e003      	b.n	80352a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803529a:	2301      	movs	r3, #1
 803529c:	75fb      	strb	r3, [r7, #23]
      break;
 803529e:	e000      	b.n	80352a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80352a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80352a2:	7dfb      	ldrb	r3, [r7, #23]
 80352a4:	2b00      	cmp	r3, #0
 80352a6:	d109      	bne.n	80352bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80352a8:	4b93      	ldr	r3, [pc, #588]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80352aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80352ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80352b0:	687b      	ldr	r3, [r7, #4]
 80352b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80352b4:	4990      	ldr	r1, [pc, #576]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80352b6:	4313      	orrs	r3, r2
 80352b8:	650b      	str	r3, [r1, #80]	; 0x50
 80352ba:	e001      	b.n	80352c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80352bc:	7dfb      	ldrb	r3, [r7, #23]
 80352be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80352c0:	687b      	ldr	r3, [r7, #4]
 80352c2:	681b      	ldr	r3, [r3, #0]
 80352c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80352c8:	2b00      	cmp	r3, #0
 80352ca:	d03d      	beq.n	8035348 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80352cc:	687b      	ldr	r3, [r7, #4]
 80352ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80352d0:	2b04      	cmp	r3, #4
 80352d2:	d826      	bhi.n	8035322 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80352d4:	a201      	add	r2, pc, #4	; (adr r2, 80352dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80352d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80352da:	bf00      	nop
 80352dc:	080352f1 	.word	0x080352f1
 80352e0:	080352ff 	.word	0x080352ff
 80352e4:	08035311 	.word	0x08035311
 80352e8:	08035329 	.word	0x08035329
 80352ec:	08035329 	.word	0x08035329
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80352f0:	4b81      	ldr	r3, [pc, #516]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80352f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80352f4:	4a80      	ldr	r2, [pc, #512]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80352f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80352fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80352fc:	e015      	b.n	803532a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80352fe:	687b      	ldr	r3, [r7, #4]
 8035300:	3304      	adds	r3, #4
 8035302:	2100      	movs	r1, #0
 8035304:	4618      	mov	r0, r3
 8035306:	f001 f991 	bl	803662c <RCCEx_PLL2_Config>
 803530a:	4603      	mov	r3, r0
 803530c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803530e:	e00c      	b.n	803532a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8035310:	687b      	ldr	r3, [r7, #4]
 8035312:	3324      	adds	r3, #36	; 0x24
 8035314:	2100      	movs	r1, #0
 8035316:	4618      	mov	r0, r3
 8035318:	f001 fa3a 	bl	8036790 <RCCEx_PLL3_Config>
 803531c:	4603      	mov	r3, r0
 803531e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8035320:	e003      	b.n	803532a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035322:	2301      	movs	r3, #1
 8035324:	75fb      	strb	r3, [r7, #23]
      break;
 8035326:	e000      	b.n	803532a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8035328:	bf00      	nop
    }

    if(ret == HAL_OK)
 803532a:	7dfb      	ldrb	r3, [r7, #23]
 803532c:	2b00      	cmp	r3, #0
 803532e:	d109      	bne.n	8035344 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8035330:	4b71      	ldr	r3, [pc, #452]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8035332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8035334:	f023 0207 	bic.w	r2, r3, #7
 8035338:	687b      	ldr	r3, [r7, #4]
 803533a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803533c:	496e      	ldr	r1, [pc, #440]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803533e:	4313      	orrs	r3, r2
 8035340:	650b      	str	r3, [r1, #80]	; 0x50
 8035342:	e001      	b.n	8035348 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035344:	7dfb      	ldrb	r3, [r7, #23]
 8035346:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8035348:	687b      	ldr	r3, [r7, #4]
 803534a:	681b      	ldr	r3, [r3, #0]
 803534c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8035350:	2b00      	cmp	r3, #0
 8035352:	d042      	beq.n	80353da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8035354:	687b      	ldr	r3, [r7, #4]
 8035356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803535c:	d02b      	beq.n	80353b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 803535e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035362:	d825      	bhi.n	80353b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8035364:	2bc0      	cmp	r3, #192	; 0xc0
 8035366:	d028      	beq.n	80353ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8035368:	2bc0      	cmp	r3, #192	; 0xc0
 803536a:	d821      	bhi.n	80353b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 803536c:	2b80      	cmp	r3, #128	; 0x80
 803536e:	d016      	beq.n	803539e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8035370:	2b80      	cmp	r3, #128	; 0x80
 8035372:	d81d      	bhi.n	80353b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8035374:	2b00      	cmp	r3, #0
 8035376:	d002      	beq.n	803537e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8035378:	2b40      	cmp	r3, #64	; 0x40
 803537a:	d007      	beq.n	803538c <HAL_RCCEx_PeriphCLKConfig+0x168>
 803537c:	e018      	b.n	80353b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803537e:	4b5e      	ldr	r3, [pc, #376]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8035380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035382:	4a5d      	ldr	r2, [pc, #372]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8035384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035388:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 803538a:	e017      	b.n	80353bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803538c:	687b      	ldr	r3, [r7, #4]
 803538e:	3304      	adds	r3, #4
 8035390:	2100      	movs	r1, #0
 8035392:	4618      	mov	r0, r3
 8035394:	f001 f94a 	bl	803662c <RCCEx_PLL2_Config>
 8035398:	4603      	mov	r3, r0
 803539a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 803539c:	e00e      	b.n	80353bc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 803539e:	687b      	ldr	r3, [r7, #4]
 80353a0:	3324      	adds	r3, #36	; 0x24
 80353a2:	2100      	movs	r1, #0
 80353a4:	4618      	mov	r0, r3
 80353a6:	f001 f9f3 	bl	8036790 <RCCEx_PLL3_Config>
 80353aa:	4603      	mov	r3, r0
 80353ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80353ae:	e005      	b.n	80353bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80353b0:	2301      	movs	r3, #1
 80353b2:	75fb      	strb	r3, [r7, #23]
      break;
 80353b4:	e002      	b.n	80353bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80353b6:	bf00      	nop
 80353b8:	e000      	b.n	80353bc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80353ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80353bc:	7dfb      	ldrb	r3, [r7, #23]
 80353be:	2b00      	cmp	r3, #0
 80353c0:	d109      	bne.n	80353d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80353c2:	4b4d      	ldr	r3, [pc, #308]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80353c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80353c6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80353ca:	687b      	ldr	r3, [r7, #4]
 80353cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80353ce:	494a      	ldr	r1, [pc, #296]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80353d0:	4313      	orrs	r3, r2
 80353d2:	650b      	str	r3, [r1, #80]	; 0x50
 80353d4:	e001      	b.n	80353da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80353d6:	7dfb      	ldrb	r3, [r7, #23]
 80353d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80353da:	687b      	ldr	r3, [r7, #4]
 80353dc:	681b      	ldr	r3, [r3, #0]
 80353de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80353e2:	2b00      	cmp	r3, #0
 80353e4:	d049      	beq.n	803547a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80353e6:	687b      	ldr	r3, [r7, #4]
 80353e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80353ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80353f0:	d030      	beq.n	8035454 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80353f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80353f6:	d82a      	bhi.n	803544e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80353f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80353fc:	d02c      	beq.n	8035458 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80353fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8035402:	d824      	bhi.n	803544e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8035404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8035408:	d018      	beq.n	803543c <HAL_RCCEx_PeriphCLKConfig+0x218>
 803540a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803540e:	d81e      	bhi.n	803544e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8035410:	2b00      	cmp	r3, #0
 8035412:	d003      	beq.n	803541c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8035414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8035418:	d007      	beq.n	803542a <HAL_RCCEx_PeriphCLKConfig+0x206>
 803541a:	e018      	b.n	803544e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803541c:	4b36      	ldr	r3, [pc, #216]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 803541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035420:	4a35      	ldr	r2, [pc, #212]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8035422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035426:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8035428:	e017      	b.n	803545a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803542a:	687b      	ldr	r3, [r7, #4]
 803542c:	3304      	adds	r3, #4
 803542e:	2100      	movs	r1, #0
 8035430:	4618      	mov	r0, r3
 8035432:	f001 f8fb 	bl	803662c <RCCEx_PLL2_Config>
 8035436:	4603      	mov	r3, r0
 8035438:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 803543a:	e00e      	b.n	803545a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 803543c:	687b      	ldr	r3, [r7, #4]
 803543e:	3324      	adds	r3, #36	; 0x24
 8035440:	2100      	movs	r1, #0
 8035442:	4618      	mov	r0, r3
 8035444:	f001 f9a4 	bl	8036790 <RCCEx_PLL3_Config>
 8035448:	4603      	mov	r3, r0
 803544a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 803544c:	e005      	b.n	803545a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 803544e:	2301      	movs	r3, #1
 8035450:	75fb      	strb	r3, [r7, #23]
      break;
 8035452:	e002      	b.n	803545a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8035454:	bf00      	nop
 8035456:	e000      	b.n	803545a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8035458:	bf00      	nop
    }

    if(ret == HAL_OK)
 803545a:	7dfb      	ldrb	r3, [r7, #23]
 803545c:	2b00      	cmp	r3, #0
 803545e:	d10a      	bne.n	8035476 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8035460:	4b25      	ldr	r3, [pc, #148]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8035462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035464:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8035468:	687b      	ldr	r3, [r7, #4]
 803546a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 803546e:	4922      	ldr	r1, [pc, #136]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8035470:	4313      	orrs	r3, r2
 8035472:	658b      	str	r3, [r1, #88]	; 0x58
 8035474:	e001      	b.n	803547a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035476:	7dfb      	ldrb	r3, [r7, #23]
 8035478:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 803547a:	687b      	ldr	r3, [r7, #4]
 803547c:	681b      	ldr	r3, [r3, #0]
 803547e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8035482:	2b00      	cmp	r3, #0
 8035484:	d04b      	beq.n	803551e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8035486:	687b      	ldr	r3, [r7, #4]
 8035488:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 803548c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8035490:	d030      	beq.n	80354f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8035492:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8035496:	d82a      	bhi.n	80354ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8035498:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 803549c:	d02e      	beq.n	80354fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 803549e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80354a2:	d824      	bhi.n	80354ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80354a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80354a8:	d018      	beq.n	80354dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80354aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80354ae:	d81e      	bhi.n	80354ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80354b0:	2b00      	cmp	r3, #0
 80354b2:	d003      	beq.n	80354bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80354b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80354b8:	d007      	beq.n	80354ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80354ba:	e018      	b.n	80354ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80354bc:	4b0e      	ldr	r3, [pc, #56]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80354be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80354c0:	4a0d      	ldr	r2, [pc, #52]	; (80354f8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80354c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80354c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80354c8:	e019      	b.n	80354fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80354ca:	687b      	ldr	r3, [r7, #4]
 80354cc:	3304      	adds	r3, #4
 80354ce:	2100      	movs	r1, #0
 80354d0:	4618      	mov	r0, r3
 80354d2:	f001 f8ab 	bl	803662c <RCCEx_PLL2_Config>
 80354d6:	4603      	mov	r3, r0
 80354d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80354da:	e010      	b.n	80354fe <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80354dc:	687b      	ldr	r3, [r7, #4]
 80354de:	3324      	adds	r3, #36	; 0x24
 80354e0:	2100      	movs	r1, #0
 80354e2:	4618      	mov	r0, r3
 80354e4:	f001 f954 	bl	8036790 <RCCEx_PLL3_Config>
 80354e8:	4603      	mov	r3, r0
 80354ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80354ec:	e007      	b.n	80354fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80354ee:	2301      	movs	r3, #1
 80354f0:	75fb      	strb	r3, [r7, #23]
      break;
 80354f2:	e004      	b.n	80354fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80354f4:	bf00      	nop
 80354f6:	e002      	b.n	80354fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80354f8:	58024400 	.word	0x58024400
      break;
 80354fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80354fe:	7dfb      	ldrb	r3, [r7, #23]
 8035500:	2b00      	cmp	r3, #0
 8035502:	d10a      	bne.n	803551a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8035504:	4b99      	ldr	r3, [pc, #612]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035508:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 803550c:	687b      	ldr	r3, [r7, #4]
 803550e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8035512:	4996      	ldr	r1, [pc, #600]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035514:	4313      	orrs	r3, r2
 8035516:	658b      	str	r3, [r1, #88]	; 0x58
 8035518:	e001      	b.n	803551e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803551a:	7dfb      	ldrb	r3, [r7, #23]
 803551c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 803551e:	687b      	ldr	r3, [r7, #4]
 8035520:	681b      	ldr	r3, [r3, #0]
 8035522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8035526:	2b00      	cmp	r3, #0
 8035528:	d032      	beq.n	8035590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 803552a:	687b      	ldr	r3, [r7, #4]
 803552c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803552e:	2b30      	cmp	r3, #48	; 0x30
 8035530:	d01c      	beq.n	803556c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8035532:	2b30      	cmp	r3, #48	; 0x30
 8035534:	d817      	bhi.n	8035566 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8035536:	2b20      	cmp	r3, #32
 8035538:	d00c      	beq.n	8035554 <HAL_RCCEx_PeriphCLKConfig+0x330>
 803553a:	2b20      	cmp	r3, #32
 803553c:	d813      	bhi.n	8035566 <HAL_RCCEx_PeriphCLKConfig+0x342>
 803553e:	2b00      	cmp	r3, #0
 8035540:	d016      	beq.n	8035570 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8035542:	2b10      	cmp	r3, #16
 8035544:	d10f      	bne.n	8035566 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035546:	4b89      	ldr	r3, [pc, #548]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803554a:	4a88      	ldr	r2, [pc, #544]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803554c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035550:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8035552:	e00e      	b.n	8035572 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8035554:	687b      	ldr	r3, [r7, #4]
 8035556:	3304      	adds	r3, #4
 8035558:	2102      	movs	r1, #2
 803555a:	4618      	mov	r0, r3
 803555c:	f001 f866 	bl	803662c <RCCEx_PLL2_Config>
 8035560:	4603      	mov	r3, r0
 8035562:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8035564:	e005      	b.n	8035572 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8035566:	2301      	movs	r3, #1
 8035568:	75fb      	strb	r3, [r7, #23]
      break;
 803556a:	e002      	b.n	8035572 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 803556c:	bf00      	nop
 803556e:	e000      	b.n	8035572 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8035570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035572:	7dfb      	ldrb	r3, [r7, #23]
 8035574:	2b00      	cmp	r3, #0
 8035576:	d109      	bne.n	803558c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8035578:	4b7c      	ldr	r3, [pc, #496]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803557a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803557c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8035580:	687b      	ldr	r3, [r7, #4]
 8035582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8035584:	4979      	ldr	r1, [pc, #484]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035586:	4313      	orrs	r3, r2
 8035588:	64cb      	str	r3, [r1, #76]	; 0x4c
 803558a:	e001      	b.n	8035590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803558c:	7dfb      	ldrb	r3, [r7, #23]
 803558e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8035590:	687b      	ldr	r3, [r7, #4]
 8035592:	681b      	ldr	r3, [r3, #0]
 8035594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8035598:	2b00      	cmp	r3, #0
 803559a:	d047      	beq.n	803562c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 803559c:	687b      	ldr	r3, [r7, #4]
 803559e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80355a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80355a4:	d030      	beq.n	8035608 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80355a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80355aa:	d82a      	bhi.n	8035602 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80355ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80355b0:	d02c      	beq.n	803560c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80355b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80355b6:	d824      	bhi.n	8035602 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80355b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80355bc:	d018      	beq.n	80355f0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80355be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80355c2:	d81e      	bhi.n	8035602 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80355c4:	2b00      	cmp	r3, #0
 80355c6:	d003      	beq.n	80355d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80355c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80355cc:	d007      	beq.n	80355de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80355ce:	e018      	b.n	8035602 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80355d0:	4b66      	ldr	r3, [pc, #408]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80355d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80355d4:	4a65      	ldr	r2, [pc, #404]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80355d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80355da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80355dc:	e017      	b.n	803560e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80355de:	687b      	ldr	r3, [r7, #4]
 80355e0:	3304      	adds	r3, #4
 80355e2:	2100      	movs	r1, #0
 80355e4:	4618      	mov	r0, r3
 80355e6:	f001 f821 	bl	803662c <RCCEx_PLL2_Config>
 80355ea:	4603      	mov	r3, r0
 80355ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80355ee:	e00e      	b.n	803560e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80355f0:	687b      	ldr	r3, [r7, #4]
 80355f2:	3324      	adds	r3, #36	; 0x24
 80355f4:	2100      	movs	r1, #0
 80355f6:	4618      	mov	r0, r3
 80355f8:	f001 f8ca 	bl	8036790 <RCCEx_PLL3_Config>
 80355fc:	4603      	mov	r3, r0
 80355fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8035600:	e005      	b.n	803560e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035602:	2301      	movs	r3, #1
 8035604:	75fb      	strb	r3, [r7, #23]
      break;
 8035606:	e002      	b.n	803560e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8035608:	bf00      	nop
 803560a:	e000      	b.n	803560e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 803560c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803560e:	7dfb      	ldrb	r3, [r7, #23]
 8035610:	2b00      	cmp	r3, #0
 8035612:	d109      	bne.n	8035628 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8035614:	4b55      	ldr	r3, [pc, #340]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8035618:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 803561c:	687b      	ldr	r3, [r7, #4]
 803561e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8035620:	4952      	ldr	r1, [pc, #328]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035622:	4313      	orrs	r3, r2
 8035624:	650b      	str	r3, [r1, #80]	; 0x50
 8035626:	e001      	b.n	803562c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035628:	7dfb      	ldrb	r3, [r7, #23]
 803562a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 803562c:	687b      	ldr	r3, [r7, #4]
 803562e:	681b      	ldr	r3, [r3, #0]
 8035630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8035634:	2b00      	cmp	r3, #0
 8035636:	d049      	beq.n	80356cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8035638:	687b      	ldr	r3, [r7, #4]
 803563a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 803563c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8035640:	d02e      	beq.n	80356a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8035642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8035646:	d828      	bhi.n	803569a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8035648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 803564c:	d02a      	beq.n	80356a4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 803564e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8035652:	d822      	bhi.n	803569a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8035654:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8035658:	d026      	beq.n	80356a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 803565a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 803565e:	d81c      	bhi.n	803569a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8035660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8035664:	d010      	beq.n	8035688 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8035666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 803566a:	d816      	bhi.n	803569a <HAL_RCCEx_PeriphCLKConfig+0x476>
 803566c:	2b00      	cmp	r3, #0
 803566e:	d01d      	beq.n	80356ac <HAL_RCCEx_PeriphCLKConfig+0x488>
 8035670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8035674:	d111      	bne.n	803569a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8035676:	687b      	ldr	r3, [r7, #4]
 8035678:	3304      	adds	r3, #4
 803567a:	2101      	movs	r1, #1
 803567c:	4618      	mov	r0, r3
 803567e:	f000 ffd5 	bl	803662c <RCCEx_PLL2_Config>
 8035682:	4603      	mov	r3, r0
 8035684:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8035686:	e012      	b.n	80356ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8035688:	687b      	ldr	r3, [r7, #4]
 803568a:	3324      	adds	r3, #36	; 0x24
 803568c:	2101      	movs	r1, #1
 803568e:	4618      	mov	r0, r3
 8035690:	f001 f87e 	bl	8036790 <RCCEx_PLL3_Config>
 8035694:	4603      	mov	r3, r0
 8035696:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8035698:	e009      	b.n	80356ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803569a:	2301      	movs	r3, #1
 803569c:	75fb      	strb	r3, [r7, #23]
      break;
 803569e:	e006      	b.n	80356ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80356a0:	bf00      	nop
 80356a2:	e004      	b.n	80356ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80356a4:	bf00      	nop
 80356a6:	e002      	b.n	80356ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80356a8:	bf00      	nop
 80356aa:	e000      	b.n	80356ae <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80356ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80356ae:	7dfb      	ldrb	r3, [r7, #23]
 80356b0:	2b00      	cmp	r3, #0
 80356b2:	d109      	bne.n	80356c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80356b4:	4b2d      	ldr	r3, [pc, #180]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80356b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80356b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80356bc:	687b      	ldr	r3, [r7, #4]
 80356be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80356c0:	492a      	ldr	r1, [pc, #168]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80356c2:	4313      	orrs	r3, r2
 80356c4:	650b      	str	r3, [r1, #80]	; 0x50
 80356c6:	e001      	b.n	80356cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80356c8:	7dfb      	ldrb	r3, [r7, #23]
 80356ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80356cc:	687b      	ldr	r3, [r7, #4]
 80356ce:	681b      	ldr	r3, [r3, #0]
 80356d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80356d4:	2b00      	cmp	r3, #0
 80356d6:	d04d      	beq.n	8035774 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80356d8:	687b      	ldr	r3, [r7, #4]
 80356da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80356de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80356e2:	d02e      	beq.n	8035742 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80356e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80356e8:	d828      	bhi.n	803573c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80356ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80356ee:	d02a      	beq.n	8035746 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80356f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80356f4:	d822      	bhi.n	803573c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80356f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80356fa:	d026      	beq.n	803574a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80356fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8035700:	d81c      	bhi.n	803573c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8035702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8035706:	d010      	beq.n	803572a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8035708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803570c:	d816      	bhi.n	803573c <HAL_RCCEx_PeriphCLKConfig+0x518>
 803570e:	2b00      	cmp	r3, #0
 8035710:	d01d      	beq.n	803574e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8035712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8035716:	d111      	bne.n	803573c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8035718:	687b      	ldr	r3, [r7, #4]
 803571a:	3304      	adds	r3, #4
 803571c:	2101      	movs	r1, #1
 803571e:	4618      	mov	r0, r3
 8035720:	f000 ff84 	bl	803662c <RCCEx_PLL2_Config>
 8035724:	4603      	mov	r3, r0
 8035726:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8035728:	e012      	b.n	8035750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 803572a:	687b      	ldr	r3, [r7, #4]
 803572c:	3324      	adds	r3, #36	; 0x24
 803572e:	2101      	movs	r1, #1
 8035730:	4618      	mov	r0, r3
 8035732:	f001 f82d 	bl	8036790 <RCCEx_PLL3_Config>
 8035736:	4603      	mov	r3, r0
 8035738:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 803573a:	e009      	b.n	8035750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 803573c:	2301      	movs	r3, #1
 803573e:	75fb      	strb	r3, [r7, #23]
      break;
 8035740:	e006      	b.n	8035750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8035742:	bf00      	nop
 8035744:	e004      	b.n	8035750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8035746:	bf00      	nop
 8035748:	e002      	b.n	8035750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803574a:	bf00      	nop
 803574c:	e000      	b.n	8035750 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 803574e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035750:	7dfb      	ldrb	r3, [r7, #23]
 8035752:	2b00      	cmp	r3, #0
 8035754:	d10c      	bne.n	8035770 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8035756:	4b05      	ldr	r3, [pc, #20]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803575a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 803575e:	687b      	ldr	r3, [r7, #4]
 8035760:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8035764:	4901      	ldr	r1, [pc, #4]	; (803576c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8035766:	4313      	orrs	r3, r2
 8035768:	658b      	str	r3, [r1, #88]	; 0x58
 803576a:	e003      	b.n	8035774 <HAL_RCCEx_PeriphCLKConfig+0x550>
 803576c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035770:	7dfb      	ldrb	r3, [r7, #23]
 8035772:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8035774:	687b      	ldr	r3, [r7, #4]
 8035776:	681b      	ldr	r3, [r3, #0]
 8035778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803577c:	2b00      	cmp	r3, #0
 803577e:	d02f      	beq.n	80357e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8035780:	687b      	ldr	r3, [r7, #4]
 8035782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8035784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8035788:	d00e      	beq.n	80357a8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 803578a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803578e:	d814      	bhi.n	80357ba <HAL_RCCEx_PeriphCLKConfig+0x596>
 8035790:	2b00      	cmp	r3, #0
 8035792:	d015      	beq.n	80357c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8035794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8035798:	d10f      	bne.n	80357ba <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803579a:	4baf      	ldr	r3, [pc, #700]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803579e:	4aae      	ldr	r2, [pc, #696]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80357a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80357a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80357a6:	e00c      	b.n	80357c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80357a8:	687b      	ldr	r3, [r7, #4]
 80357aa:	3304      	adds	r3, #4
 80357ac:	2101      	movs	r1, #1
 80357ae:	4618      	mov	r0, r3
 80357b0:	f000 ff3c 	bl	803662c <RCCEx_PLL2_Config>
 80357b4:	4603      	mov	r3, r0
 80357b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80357b8:	e003      	b.n	80357c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80357ba:	2301      	movs	r3, #1
 80357bc:	75fb      	strb	r3, [r7, #23]
      break;
 80357be:	e000      	b.n	80357c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80357c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80357c2:	7dfb      	ldrb	r3, [r7, #23]
 80357c4:	2b00      	cmp	r3, #0
 80357c6:	d109      	bne.n	80357dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80357c8:	4ba3      	ldr	r3, [pc, #652]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80357ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80357cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80357d0:	687b      	ldr	r3, [r7, #4]
 80357d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80357d4:	49a0      	ldr	r1, [pc, #640]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80357d6:	4313      	orrs	r3, r2
 80357d8:	650b      	str	r3, [r1, #80]	; 0x50
 80357da:	e001      	b.n	80357e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80357dc:	7dfb      	ldrb	r3, [r7, #23]
 80357de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80357e0:	687b      	ldr	r3, [r7, #4]
 80357e2:	681b      	ldr	r3, [r3, #0]
 80357e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80357e8:	2b00      	cmp	r3, #0
 80357ea:	d032      	beq.n	8035852 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80357ec:	687b      	ldr	r3, [r7, #4]
 80357ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80357f0:	2b03      	cmp	r3, #3
 80357f2:	d81b      	bhi.n	803582c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80357f4:	a201      	add	r2, pc, #4	; (adr r2, 80357fc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80357f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80357fa:	bf00      	nop
 80357fc:	08035833 	.word	0x08035833
 8035800:	0803580d 	.word	0x0803580d
 8035804:	0803581b 	.word	0x0803581b
 8035808:	08035833 	.word	0x08035833
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803580c:	4b92      	ldr	r3, [pc, #584]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035810:	4a91      	ldr	r2, [pc, #580]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8035818:	e00c      	b.n	8035834 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 803581a:	687b      	ldr	r3, [r7, #4]
 803581c:	3304      	adds	r3, #4
 803581e:	2102      	movs	r1, #2
 8035820:	4618      	mov	r0, r3
 8035822:	f000 ff03 	bl	803662c <RCCEx_PLL2_Config>
 8035826:	4603      	mov	r3, r0
 8035828:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 803582a:	e003      	b.n	8035834 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 803582c:	2301      	movs	r3, #1
 803582e:	75fb      	strb	r3, [r7, #23]
      break;
 8035830:	e000      	b.n	8035834 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8035832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035834:	7dfb      	ldrb	r3, [r7, #23]
 8035836:	2b00      	cmp	r3, #0
 8035838:	d109      	bne.n	803584e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 803583a:	4b87      	ldr	r3, [pc, #540]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803583c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803583e:	f023 0203 	bic.w	r2, r3, #3
 8035842:	687b      	ldr	r3, [r7, #4]
 8035844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8035846:	4984      	ldr	r1, [pc, #528]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035848:	4313      	orrs	r3, r2
 803584a:	64cb      	str	r3, [r1, #76]	; 0x4c
 803584c:	e001      	b.n	8035852 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 803584e:	7dfb      	ldrb	r3, [r7, #23]
 8035850:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8035852:	687b      	ldr	r3, [r7, #4]
 8035854:	681b      	ldr	r3, [r3, #0]
 8035856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 803585a:	2b00      	cmp	r3, #0
 803585c:	f000 8086 	beq.w	803596c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8035860:	4b7e      	ldr	r3, [pc, #504]	; (8035a5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8035862:	681b      	ldr	r3, [r3, #0]
 8035864:	4a7d      	ldr	r2, [pc, #500]	; (8035a5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8035866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803586a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 803586c:	f7f8 fd38 	bl	802e2e0 <HAL_GetTick>
 8035870:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8035872:	e009      	b.n	8035888 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8035874:	f7f8 fd34 	bl	802e2e0 <HAL_GetTick>
 8035878:	4602      	mov	r2, r0
 803587a:	693b      	ldr	r3, [r7, #16]
 803587c:	1ad3      	subs	r3, r2, r3
 803587e:	2b64      	cmp	r3, #100	; 0x64
 8035880:	d902      	bls.n	8035888 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8035882:	2303      	movs	r3, #3
 8035884:	75fb      	strb	r3, [r7, #23]
        break;
 8035886:	e005      	b.n	8035894 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8035888:	4b74      	ldr	r3, [pc, #464]	; (8035a5c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803588a:	681b      	ldr	r3, [r3, #0]
 803588c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8035890:	2b00      	cmp	r3, #0
 8035892:	d0ef      	beq.n	8035874 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8035894:	7dfb      	ldrb	r3, [r7, #23]
 8035896:	2b00      	cmp	r3, #0
 8035898:	d166      	bne.n	8035968 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 803589a:	4b6f      	ldr	r3, [pc, #444]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803589c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 803589e:	687b      	ldr	r3, [r7, #4]
 80358a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80358a4:	4053      	eors	r3, r2
 80358a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80358aa:	2b00      	cmp	r3, #0
 80358ac:	d013      	beq.n	80358d6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80358ae:	4b6a      	ldr	r3, [pc, #424]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80358b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80358b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80358b6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80358b8:	4b67      	ldr	r3, [pc, #412]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80358ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80358bc:	4a66      	ldr	r2, [pc, #408]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80358be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80358c2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80358c4:	4b64      	ldr	r3, [pc, #400]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80358c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80358c8:	4a63      	ldr	r2, [pc, #396]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80358ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80358ce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80358d0:	4a61      	ldr	r2, [pc, #388]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80358d2:	68fb      	ldr	r3, [r7, #12]
 80358d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80358d6:	687b      	ldr	r3, [r7, #4]
 80358d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80358dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80358e0:	d115      	bne.n	803590e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80358e2:	f7f8 fcfd 	bl	802e2e0 <HAL_GetTick>
 80358e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80358e8:	e00b      	b.n	8035902 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80358ea:	f7f8 fcf9 	bl	802e2e0 <HAL_GetTick>
 80358ee:	4602      	mov	r2, r0
 80358f0:	693b      	ldr	r3, [r7, #16]
 80358f2:	1ad3      	subs	r3, r2, r3
 80358f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80358f8:	4293      	cmp	r3, r2
 80358fa:	d902      	bls.n	8035902 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80358fc:	2303      	movs	r3, #3
 80358fe:	75fb      	strb	r3, [r7, #23]
            break;
 8035900:	e005      	b.n	803590e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8035902:	4b55      	ldr	r3, [pc, #340]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035906:	f003 0302 	and.w	r3, r3, #2
 803590a:	2b00      	cmp	r3, #0
 803590c:	d0ed      	beq.n	80358ea <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 803590e:	7dfb      	ldrb	r3, [r7, #23]
 8035910:	2b00      	cmp	r3, #0
 8035912:	d126      	bne.n	8035962 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8035914:	687b      	ldr	r3, [r7, #4]
 8035916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803591a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 803591e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8035922:	d10d      	bne.n	8035940 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8035924:	4b4c      	ldr	r3, [pc, #304]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035926:	691b      	ldr	r3, [r3, #16]
 8035928:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 803592c:	687b      	ldr	r3, [r7, #4]
 803592e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8035932:	0919      	lsrs	r1, r3, #4
 8035934:	4b4a      	ldr	r3, [pc, #296]	; (8035a60 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8035936:	400b      	ands	r3, r1
 8035938:	4947      	ldr	r1, [pc, #284]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803593a:	4313      	orrs	r3, r2
 803593c:	610b      	str	r3, [r1, #16]
 803593e:	e005      	b.n	803594c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8035940:	4b45      	ldr	r3, [pc, #276]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035942:	691b      	ldr	r3, [r3, #16]
 8035944:	4a44      	ldr	r2, [pc, #272]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8035946:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 803594a:	6113      	str	r3, [r2, #16]
 803594c:	4b42      	ldr	r3, [pc, #264]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803594e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8035950:	687b      	ldr	r3, [r7, #4]
 8035952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8035956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 803595a:	493f      	ldr	r1, [pc, #252]	; (8035a58 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803595c:	4313      	orrs	r3, r2
 803595e:	670b      	str	r3, [r1, #112]	; 0x70
 8035960:	e004      	b.n	803596c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8035962:	7dfb      	ldrb	r3, [r7, #23]
 8035964:	75bb      	strb	r3, [r7, #22]
 8035966:	e001      	b.n	803596c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035968:	7dfb      	ldrb	r3, [r7, #23]
 803596a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 803596c:	687b      	ldr	r3, [r7, #4]
 803596e:	681b      	ldr	r3, [r3, #0]
 8035970:	f003 0301 	and.w	r3, r3, #1
 8035974:	2b00      	cmp	r3, #0
 8035976:	f000 8085 	beq.w	8035a84 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 803597a:	687b      	ldr	r3, [r7, #4]
 803597c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803597e:	2b28      	cmp	r3, #40	; 0x28
 8035980:	d866      	bhi.n	8035a50 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8035982:	a201      	add	r2, pc, #4	; (adr r2, 8035988 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8035984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035988:	08035a65 	.word	0x08035a65
 803598c:	08035a51 	.word	0x08035a51
 8035990:	08035a51 	.word	0x08035a51
 8035994:	08035a51 	.word	0x08035a51
 8035998:	08035a51 	.word	0x08035a51
 803599c:	08035a51 	.word	0x08035a51
 80359a0:	08035a51 	.word	0x08035a51
 80359a4:	08035a51 	.word	0x08035a51
 80359a8:	08035a2d 	.word	0x08035a2d
 80359ac:	08035a51 	.word	0x08035a51
 80359b0:	08035a51 	.word	0x08035a51
 80359b4:	08035a51 	.word	0x08035a51
 80359b8:	08035a51 	.word	0x08035a51
 80359bc:	08035a51 	.word	0x08035a51
 80359c0:	08035a51 	.word	0x08035a51
 80359c4:	08035a51 	.word	0x08035a51
 80359c8:	08035a3f 	.word	0x08035a3f
 80359cc:	08035a51 	.word	0x08035a51
 80359d0:	08035a51 	.word	0x08035a51
 80359d4:	08035a51 	.word	0x08035a51
 80359d8:	08035a51 	.word	0x08035a51
 80359dc:	08035a51 	.word	0x08035a51
 80359e0:	08035a51 	.word	0x08035a51
 80359e4:	08035a51 	.word	0x08035a51
 80359e8:	08035a65 	.word	0x08035a65
 80359ec:	08035a51 	.word	0x08035a51
 80359f0:	08035a51 	.word	0x08035a51
 80359f4:	08035a51 	.word	0x08035a51
 80359f8:	08035a51 	.word	0x08035a51
 80359fc:	08035a51 	.word	0x08035a51
 8035a00:	08035a51 	.word	0x08035a51
 8035a04:	08035a51 	.word	0x08035a51
 8035a08:	08035a65 	.word	0x08035a65
 8035a0c:	08035a51 	.word	0x08035a51
 8035a10:	08035a51 	.word	0x08035a51
 8035a14:	08035a51 	.word	0x08035a51
 8035a18:	08035a51 	.word	0x08035a51
 8035a1c:	08035a51 	.word	0x08035a51
 8035a20:	08035a51 	.word	0x08035a51
 8035a24:	08035a51 	.word	0x08035a51
 8035a28:	08035a65 	.word	0x08035a65
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8035a2c:	687b      	ldr	r3, [r7, #4]
 8035a2e:	3304      	adds	r3, #4
 8035a30:	2101      	movs	r1, #1
 8035a32:	4618      	mov	r0, r3
 8035a34:	f000 fdfa 	bl	803662c <RCCEx_PLL2_Config>
 8035a38:	4603      	mov	r3, r0
 8035a3a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8035a3c:	e013      	b.n	8035a66 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8035a3e:	687b      	ldr	r3, [r7, #4]
 8035a40:	3324      	adds	r3, #36	; 0x24
 8035a42:	2101      	movs	r1, #1
 8035a44:	4618      	mov	r0, r3
 8035a46:	f000 fea3 	bl	8036790 <RCCEx_PLL3_Config>
 8035a4a:	4603      	mov	r3, r0
 8035a4c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8035a4e:	e00a      	b.n	8035a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035a50:	2301      	movs	r3, #1
 8035a52:	75fb      	strb	r3, [r7, #23]
      break;
 8035a54:	e007      	b.n	8035a66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8035a56:	bf00      	nop
 8035a58:	58024400 	.word	0x58024400
 8035a5c:	58024800 	.word	0x58024800
 8035a60:	00ffffcf 	.word	0x00ffffcf
      break;
 8035a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035a66:	7dfb      	ldrb	r3, [r7, #23]
 8035a68:	2b00      	cmp	r3, #0
 8035a6a:	d109      	bne.n	8035a80 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8035a6c:	4b96      	ldr	r3, [pc, #600]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035a70:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8035a74:	687b      	ldr	r3, [r7, #4]
 8035a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8035a78:	4993      	ldr	r1, [pc, #588]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035a7a:	4313      	orrs	r3, r2
 8035a7c:	654b      	str	r3, [r1, #84]	; 0x54
 8035a7e:	e001      	b.n	8035a84 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035a80:	7dfb      	ldrb	r3, [r7, #23]
 8035a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8035a84:	687b      	ldr	r3, [r7, #4]
 8035a86:	681b      	ldr	r3, [r3, #0]
 8035a88:	f003 0302 	and.w	r3, r3, #2
 8035a8c:	2b00      	cmp	r3, #0
 8035a8e:	d038      	beq.n	8035b02 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8035a90:	687b      	ldr	r3, [r7, #4]
 8035a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035a94:	2b05      	cmp	r3, #5
 8035a96:	d821      	bhi.n	8035adc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8035a98:	a201      	add	r2, pc, #4	; (adr r2, 8035aa0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8035a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035a9e:	bf00      	nop
 8035aa0:	08035ae3 	.word	0x08035ae3
 8035aa4:	08035ab9 	.word	0x08035ab9
 8035aa8:	08035acb 	.word	0x08035acb
 8035aac:	08035ae3 	.word	0x08035ae3
 8035ab0:	08035ae3 	.word	0x08035ae3
 8035ab4:	08035ae3 	.word	0x08035ae3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8035ab8:	687b      	ldr	r3, [r7, #4]
 8035aba:	3304      	adds	r3, #4
 8035abc:	2101      	movs	r1, #1
 8035abe:	4618      	mov	r0, r3
 8035ac0:	f000 fdb4 	bl	803662c <RCCEx_PLL2_Config>
 8035ac4:	4603      	mov	r3, r0
 8035ac6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8035ac8:	e00c      	b.n	8035ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8035aca:	687b      	ldr	r3, [r7, #4]
 8035acc:	3324      	adds	r3, #36	; 0x24
 8035ace:	2101      	movs	r1, #1
 8035ad0:	4618      	mov	r0, r3
 8035ad2:	f000 fe5d 	bl	8036790 <RCCEx_PLL3_Config>
 8035ad6:	4603      	mov	r3, r0
 8035ad8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8035ada:	e003      	b.n	8035ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035adc:	2301      	movs	r3, #1
 8035ade:	75fb      	strb	r3, [r7, #23]
      break;
 8035ae0:	e000      	b.n	8035ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8035ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035ae4:	7dfb      	ldrb	r3, [r7, #23]
 8035ae6:	2b00      	cmp	r3, #0
 8035ae8:	d109      	bne.n	8035afe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8035aea:	4b77      	ldr	r3, [pc, #476]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035aee:	f023 0207 	bic.w	r2, r3, #7
 8035af2:	687b      	ldr	r3, [r7, #4]
 8035af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8035af6:	4974      	ldr	r1, [pc, #464]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035af8:	4313      	orrs	r3, r2
 8035afa:	654b      	str	r3, [r1, #84]	; 0x54
 8035afc:	e001      	b.n	8035b02 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035afe:	7dfb      	ldrb	r3, [r7, #23]
 8035b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8035b02:	687b      	ldr	r3, [r7, #4]
 8035b04:	681b      	ldr	r3, [r3, #0]
 8035b06:	f003 0304 	and.w	r3, r3, #4
 8035b0a:	2b00      	cmp	r3, #0
 8035b0c:	d03a      	beq.n	8035b84 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8035b0e:	687b      	ldr	r3, [r7, #4]
 8035b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8035b14:	2b05      	cmp	r3, #5
 8035b16:	d821      	bhi.n	8035b5c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8035b18:	a201      	add	r2, pc, #4	; (adr r2, 8035b20 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8035b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035b1e:	bf00      	nop
 8035b20:	08035b63 	.word	0x08035b63
 8035b24:	08035b39 	.word	0x08035b39
 8035b28:	08035b4b 	.word	0x08035b4b
 8035b2c:	08035b63 	.word	0x08035b63
 8035b30:	08035b63 	.word	0x08035b63
 8035b34:	08035b63 	.word	0x08035b63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8035b38:	687b      	ldr	r3, [r7, #4]
 8035b3a:	3304      	adds	r3, #4
 8035b3c:	2101      	movs	r1, #1
 8035b3e:	4618      	mov	r0, r3
 8035b40:	f000 fd74 	bl	803662c <RCCEx_PLL2_Config>
 8035b44:	4603      	mov	r3, r0
 8035b46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8035b48:	e00c      	b.n	8035b64 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8035b4a:	687b      	ldr	r3, [r7, #4]
 8035b4c:	3324      	adds	r3, #36	; 0x24
 8035b4e:	2101      	movs	r1, #1
 8035b50:	4618      	mov	r0, r3
 8035b52:	f000 fe1d 	bl	8036790 <RCCEx_PLL3_Config>
 8035b56:	4603      	mov	r3, r0
 8035b58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8035b5a:	e003      	b.n	8035b64 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035b5c:	2301      	movs	r3, #1
 8035b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8035b60:	e000      	b.n	8035b64 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8035b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035b64:	7dfb      	ldrb	r3, [r7, #23]
 8035b66:	2b00      	cmp	r3, #0
 8035b68:	d10a      	bne.n	8035b80 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8035b6a:	4b57      	ldr	r3, [pc, #348]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035b6e:	f023 0207 	bic.w	r2, r3, #7
 8035b72:	687b      	ldr	r3, [r7, #4]
 8035b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8035b78:	4953      	ldr	r1, [pc, #332]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035b7a:	4313      	orrs	r3, r2
 8035b7c:	658b      	str	r3, [r1, #88]	; 0x58
 8035b7e:	e001      	b.n	8035b84 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035b80:	7dfb      	ldrb	r3, [r7, #23]
 8035b82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8035b84:	687b      	ldr	r3, [r7, #4]
 8035b86:	681b      	ldr	r3, [r3, #0]
 8035b88:	f003 0320 	and.w	r3, r3, #32
 8035b8c:	2b00      	cmp	r3, #0
 8035b8e:	d04b      	beq.n	8035c28 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8035b90:	687b      	ldr	r3, [r7, #4]
 8035b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8035b9a:	d02e      	beq.n	8035bfa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8035b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8035ba0:	d828      	bhi.n	8035bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8035ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035ba6:	d02a      	beq.n	8035bfe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8035ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035bac:	d822      	bhi.n	8035bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8035bae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8035bb2:	d026      	beq.n	8035c02 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8035bb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8035bb8:	d81c      	bhi.n	8035bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8035bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8035bbe:	d010      	beq.n	8035be2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8035bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8035bc4:	d816      	bhi.n	8035bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8035bc6:	2b00      	cmp	r3, #0
 8035bc8:	d01d      	beq.n	8035c06 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8035bca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8035bce:	d111      	bne.n	8035bf4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8035bd0:	687b      	ldr	r3, [r7, #4]
 8035bd2:	3304      	adds	r3, #4
 8035bd4:	2100      	movs	r1, #0
 8035bd6:	4618      	mov	r0, r3
 8035bd8:	f000 fd28 	bl	803662c <RCCEx_PLL2_Config>
 8035bdc:	4603      	mov	r3, r0
 8035bde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8035be0:	e012      	b.n	8035c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8035be2:	687b      	ldr	r3, [r7, #4]
 8035be4:	3324      	adds	r3, #36	; 0x24
 8035be6:	2102      	movs	r1, #2
 8035be8:	4618      	mov	r0, r3
 8035bea:	f000 fdd1 	bl	8036790 <RCCEx_PLL3_Config>
 8035bee:	4603      	mov	r3, r0
 8035bf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8035bf2:	e009      	b.n	8035c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035bf4:	2301      	movs	r3, #1
 8035bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8035bf8:	e006      	b.n	8035c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8035bfa:	bf00      	nop
 8035bfc:	e004      	b.n	8035c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8035bfe:	bf00      	nop
 8035c00:	e002      	b.n	8035c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8035c02:	bf00      	nop
 8035c04:	e000      	b.n	8035c08 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8035c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035c08:	7dfb      	ldrb	r3, [r7, #23]
 8035c0a:	2b00      	cmp	r3, #0
 8035c0c:	d10a      	bne.n	8035c24 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8035c0e:	4b2e      	ldr	r3, [pc, #184]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8035c16:	687b      	ldr	r3, [r7, #4]
 8035c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8035c1c:	492a      	ldr	r1, [pc, #168]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035c1e:	4313      	orrs	r3, r2
 8035c20:	654b      	str	r3, [r1, #84]	; 0x54
 8035c22:	e001      	b.n	8035c28 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035c24:	7dfb      	ldrb	r3, [r7, #23]
 8035c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8035c28:	687b      	ldr	r3, [r7, #4]
 8035c2a:	681b      	ldr	r3, [r3, #0]
 8035c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035c30:	2b00      	cmp	r3, #0
 8035c32:	d04d      	beq.n	8035cd0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8035c34:	687b      	ldr	r3, [r7, #4]
 8035c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8035c3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8035c3e:	d02e      	beq.n	8035c9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8035c40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8035c44:	d828      	bhi.n	8035c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8035c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035c4a:	d02a      	beq.n	8035ca2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8035c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035c50:	d822      	bhi.n	8035c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8035c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8035c56:	d026      	beq.n	8035ca6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8035c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8035c5c:	d81c      	bhi.n	8035c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8035c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8035c62:	d010      	beq.n	8035c86 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8035c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8035c68:	d816      	bhi.n	8035c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8035c6a:	2b00      	cmp	r3, #0
 8035c6c:	d01d      	beq.n	8035caa <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8035c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8035c72:	d111      	bne.n	8035c98 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8035c74:	687b      	ldr	r3, [r7, #4]
 8035c76:	3304      	adds	r3, #4
 8035c78:	2100      	movs	r1, #0
 8035c7a:	4618      	mov	r0, r3
 8035c7c:	f000 fcd6 	bl	803662c <RCCEx_PLL2_Config>
 8035c80:	4603      	mov	r3, r0
 8035c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8035c84:	e012      	b.n	8035cac <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8035c86:	687b      	ldr	r3, [r7, #4]
 8035c88:	3324      	adds	r3, #36	; 0x24
 8035c8a:	2102      	movs	r1, #2
 8035c8c:	4618      	mov	r0, r3
 8035c8e:	f000 fd7f 	bl	8036790 <RCCEx_PLL3_Config>
 8035c92:	4603      	mov	r3, r0
 8035c94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8035c96:	e009      	b.n	8035cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035c98:	2301      	movs	r3, #1
 8035c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8035c9c:	e006      	b.n	8035cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8035c9e:	bf00      	nop
 8035ca0:	e004      	b.n	8035cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8035ca2:	bf00      	nop
 8035ca4:	e002      	b.n	8035cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8035ca6:	bf00      	nop
 8035ca8:	e000      	b.n	8035cac <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8035caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035cac:	7dfb      	ldrb	r3, [r7, #23]
 8035cae:	2b00      	cmp	r3, #0
 8035cb0:	d10c      	bne.n	8035ccc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8035cb2:	4b05      	ldr	r3, [pc, #20]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035cb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8035cba:	687b      	ldr	r3, [r7, #4]
 8035cbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8035cc0:	4901      	ldr	r1, [pc, #4]	; (8035cc8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8035cc2:	4313      	orrs	r3, r2
 8035cc4:	658b      	str	r3, [r1, #88]	; 0x58
 8035cc6:	e003      	b.n	8035cd0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8035cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035ccc:	7dfb      	ldrb	r3, [r7, #23]
 8035cce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8035cd0:	687b      	ldr	r3, [r7, #4]
 8035cd2:	681b      	ldr	r3, [r3, #0]
 8035cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035cd8:	2b00      	cmp	r3, #0
 8035cda:	d04b      	beq.n	8035d74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8035cdc:	687b      	ldr	r3, [r7, #4]
 8035cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8035ce2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8035ce6:	d02e      	beq.n	8035d46 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8035ce8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8035cec:	d828      	bhi.n	8035d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8035cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8035cf2:	d02a      	beq.n	8035d4a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8035cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8035cf8:	d822      	bhi.n	8035d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8035cfa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8035cfe:	d026      	beq.n	8035d4e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8035d00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8035d04:	d81c      	bhi.n	8035d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8035d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8035d0a:	d010      	beq.n	8035d2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8035d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8035d10:	d816      	bhi.n	8035d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8035d12:	2b00      	cmp	r3, #0
 8035d14:	d01d      	beq.n	8035d52 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8035d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035d1a:	d111      	bne.n	8035d40 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8035d1c:	687b      	ldr	r3, [r7, #4]
 8035d1e:	3304      	adds	r3, #4
 8035d20:	2100      	movs	r1, #0
 8035d22:	4618      	mov	r0, r3
 8035d24:	f000 fc82 	bl	803662c <RCCEx_PLL2_Config>
 8035d28:	4603      	mov	r3, r0
 8035d2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8035d2c:	e012      	b.n	8035d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8035d2e:	687b      	ldr	r3, [r7, #4]
 8035d30:	3324      	adds	r3, #36	; 0x24
 8035d32:	2102      	movs	r1, #2
 8035d34:	4618      	mov	r0, r3
 8035d36:	f000 fd2b 	bl	8036790 <RCCEx_PLL3_Config>
 8035d3a:	4603      	mov	r3, r0
 8035d3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8035d3e:	e009      	b.n	8035d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035d40:	2301      	movs	r3, #1
 8035d42:	75fb      	strb	r3, [r7, #23]
      break;
 8035d44:	e006      	b.n	8035d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8035d46:	bf00      	nop
 8035d48:	e004      	b.n	8035d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8035d4a:	bf00      	nop
 8035d4c:	e002      	b.n	8035d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8035d4e:	bf00      	nop
 8035d50:	e000      	b.n	8035d54 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8035d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035d54:	7dfb      	ldrb	r3, [r7, #23]
 8035d56:	2b00      	cmp	r3, #0
 8035d58:	d10a      	bne.n	8035d70 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8035d5a:	4b9d      	ldr	r3, [pc, #628]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8035d62:	687b      	ldr	r3, [r7, #4]
 8035d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8035d68:	4999      	ldr	r1, [pc, #612]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035d6a:	4313      	orrs	r3, r2
 8035d6c:	658b      	str	r3, [r1, #88]	; 0x58
 8035d6e:	e001      	b.n	8035d74 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035d70:	7dfb      	ldrb	r3, [r7, #23]
 8035d72:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8035d74:	687b      	ldr	r3, [r7, #4]
 8035d76:	681b      	ldr	r3, [r3, #0]
 8035d78:	f003 0308 	and.w	r3, r3, #8
 8035d7c:	2b00      	cmp	r3, #0
 8035d7e:	d01a      	beq.n	8035db6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8035d80:	687b      	ldr	r3, [r7, #4]
 8035d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8035d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035d8a:	d10a      	bne.n	8035da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8035d8c:	687b      	ldr	r3, [r7, #4]
 8035d8e:	3324      	adds	r3, #36	; 0x24
 8035d90:	2102      	movs	r1, #2
 8035d92:	4618      	mov	r0, r3
 8035d94:	f000 fcfc 	bl	8036790 <RCCEx_PLL3_Config>
 8035d98:	4603      	mov	r3, r0
 8035d9a:	2b00      	cmp	r3, #0
 8035d9c:	d001      	beq.n	8035da2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8035d9e:	2301      	movs	r3, #1
 8035da0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8035da2:	4b8b      	ldr	r3, [pc, #556]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035da6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8035daa:	687b      	ldr	r3, [r7, #4]
 8035dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8035db0:	4987      	ldr	r1, [pc, #540]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035db2:	4313      	orrs	r3, r2
 8035db4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8035db6:	687b      	ldr	r3, [r7, #4]
 8035db8:	681b      	ldr	r3, [r3, #0]
 8035dba:	f003 0310 	and.w	r3, r3, #16
 8035dbe:	2b00      	cmp	r3, #0
 8035dc0:	d01a      	beq.n	8035df8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8035dc2:	687b      	ldr	r3, [r7, #4]
 8035dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8035dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035dcc:	d10a      	bne.n	8035de4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8035dce:	687b      	ldr	r3, [r7, #4]
 8035dd0:	3324      	adds	r3, #36	; 0x24
 8035dd2:	2102      	movs	r1, #2
 8035dd4:	4618      	mov	r0, r3
 8035dd6:	f000 fcdb 	bl	8036790 <RCCEx_PLL3_Config>
 8035dda:	4603      	mov	r3, r0
 8035ddc:	2b00      	cmp	r3, #0
 8035dde:	d001      	beq.n	8035de4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8035de0:	2301      	movs	r3, #1
 8035de2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8035de4:	4b7a      	ldr	r3, [pc, #488]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8035dec:	687b      	ldr	r3, [r7, #4]
 8035dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8035df2:	4977      	ldr	r1, [pc, #476]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035df4:	4313      	orrs	r3, r2
 8035df6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8035df8:	687b      	ldr	r3, [r7, #4]
 8035dfa:	681b      	ldr	r3, [r3, #0]
 8035dfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8035e00:	2b00      	cmp	r3, #0
 8035e02:	d034      	beq.n	8035e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8035e04:	687b      	ldr	r3, [r7, #4]
 8035e06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8035e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8035e0e:	d01d      	beq.n	8035e4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8035e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8035e14:	d817      	bhi.n	8035e46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8035e16:	2b00      	cmp	r3, #0
 8035e18:	d003      	beq.n	8035e22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8035e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8035e1e:	d009      	beq.n	8035e34 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8035e20:	e011      	b.n	8035e46 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8035e22:	687b      	ldr	r3, [r7, #4]
 8035e24:	3304      	adds	r3, #4
 8035e26:	2100      	movs	r1, #0
 8035e28:	4618      	mov	r0, r3
 8035e2a:	f000 fbff 	bl	803662c <RCCEx_PLL2_Config>
 8035e2e:	4603      	mov	r3, r0
 8035e30:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8035e32:	e00c      	b.n	8035e4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8035e34:	687b      	ldr	r3, [r7, #4]
 8035e36:	3324      	adds	r3, #36	; 0x24
 8035e38:	2102      	movs	r1, #2
 8035e3a:	4618      	mov	r0, r3
 8035e3c:	f000 fca8 	bl	8036790 <RCCEx_PLL3_Config>
 8035e40:	4603      	mov	r3, r0
 8035e42:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8035e44:	e003      	b.n	8035e4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035e46:	2301      	movs	r3, #1
 8035e48:	75fb      	strb	r3, [r7, #23]
      break;
 8035e4a:	e000      	b.n	8035e4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8035e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035e4e:	7dfb      	ldrb	r3, [r7, #23]
 8035e50:	2b00      	cmp	r3, #0
 8035e52:	d10a      	bne.n	8035e6a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8035e54:	4b5e      	ldr	r3, [pc, #376]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8035e5c:	687b      	ldr	r3, [r7, #4]
 8035e5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8035e62:	495b      	ldr	r1, [pc, #364]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035e64:	4313      	orrs	r3, r2
 8035e66:	658b      	str	r3, [r1, #88]	; 0x58
 8035e68:	e001      	b.n	8035e6e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035e6a:	7dfb      	ldrb	r3, [r7, #23]
 8035e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8035e6e:	687b      	ldr	r3, [r7, #4]
 8035e70:	681b      	ldr	r3, [r3, #0]
 8035e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8035e76:	2b00      	cmp	r3, #0
 8035e78:	d033      	beq.n	8035ee2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8035e7a:	687b      	ldr	r3, [r7, #4]
 8035e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8035e84:	d01c      	beq.n	8035ec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8035e86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8035e8a:	d816      	bhi.n	8035eba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8035e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8035e90:	d003      	beq.n	8035e9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8035e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8035e96:	d007      	beq.n	8035ea8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8035e98:	e00f      	b.n	8035eba <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035e9a:	4b4d      	ldr	r3, [pc, #308]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035e9e:	4a4c      	ldr	r2, [pc, #304]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8035ea6:	e00c      	b.n	8035ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8035ea8:	687b      	ldr	r3, [r7, #4]
 8035eaa:	3324      	adds	r3, #36	; 0x24
 8035eac:	2101      	movs	r1, #1
 8035eae:	4618      	mov	r0, r3
 8035eb0:	f000 fc6e 	bl	8036790 <RCCEx_PLL3_Config>
 8035eb4:	4603      	mov	r3, r0
 8035eb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8035eb8:	e003      	b.n	8035ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035eba:	2301      	movs	r3, #1
 8035ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8035ebe:	e000      	b.n	8035ec2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8035ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035ec2:	7dfb      	ldrb	r3, [r7, #23]
 8035ec4:	2b00      	cmp	r3, #0
 8035ec6:	d10a      	bne.n	8035ede <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8035ec8:	4b41      	ldr	r3, [pc, #260]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8035ed0:	687b      	ldr	r3, [r7, #4]
 8035ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035ed6:	493e      	ldr	r1, [pc, #248]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035ed8:	4313      	orrs	r3, r2
 8035eda:	654b      	str	r3, [r1, #84]	; 0x54
 8035edc:	e001      	b.n	8035ee2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035ede:	7dfb      	ldrb	r3, [r7, #23]
 8035ee0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8035ee2:	687b      	ldr	r3, [r7, #4]
 8035ee4:	681b      	ldr	r3, [r3, #0]
 8035ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8035eea:	2b00      	cmp	r3, #0
 8035eec:	d029      	beq.n	8035f42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8035eee:	687b      	ldr	r3, [r7, #4]
 8035ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8035ef2:	2b00      	cmp	r3, #0
 8035ef4:	d003      	beq.n	8035efe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8035ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8035efa:	d007      	beq.n	8035f0c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8035efc:	e00f      	b.n	8035f1e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035efe:	4b34      	ldr	r3, [pc, #208]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035f02:	4a33      	ldr	r2, [pc, #204]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035f08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8035f0a:	e00b      	b.n	8035f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8035f0c:	687b      	ldr	r3, [r7, #4]
 8035f0e:	3304      	adds	r3, #4
 8035f10:	2102      	movs	r1, #2
 8035f12:	4618      	mov	r0, r3
 8035f14:	f000 fb8a 	bl	803662c <RCCEx_PLL2_Config>
 8035f18:	4603      	mov	r3, r0
 8035f1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8035f1c:	e002      	b.n	8035f24 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8035f1e:	2301      	movs	r3, #1
 8035f20:	75fb      	strb	r3, [r7, #23]
      break;
 8035f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035f24:	7dfb      	ldrb	r3, [r7, #23]
 8035f26:	2b00      	cmp	r3, #0
 8035f28:	d109      	bne.n	8035f3e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8035f2a:	4b29      	ldr	r3, [pc, #164]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8035f2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8035f32:	687b      	ldr	r3, [r7, #4]
 8035f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8035f36:	4926      	ldr	r1, [pc, #152]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035f38:	4313      	orrs	r3, r2
 8035f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8035f3c:	e001      	b.n	8035f42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035f3e:	7dfb      	ldrb	r3, [r7, #23]
 8035f40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8035f42:	687b      	ldr	r3, [r7, #4]
 8035f44:	681b      	ldr	r3, [r3, #0]
 8035f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8035f4a:	2b00      	cmp	r3, #0
 8035f4c:	d00a      	beq.n	8035f64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8035f4e:	687b      	ldr	r3, [r7, #4]
 8035f50:	3324      	adds	r3, #36	; 0x24
 8035f52:	2102      	movs	r1, #2
 8035f54:	4618      	mov	r0, r3
 8035f56:	f000 fc1b 	bl	8036790 <RCCEx_PLL3_Config>
 8035f5a:	4603      	mov	r3, r0
 8035f5c:	2b00      	cmp	r3, #0
 8035f5e:	d001      	beq.n	8035f64 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8035f60:	2301      	movs	r3, #1
 8035f62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8035f64:	687b      	ldr	r3, [r7, #4]
 8035f66:	681b      	ldr	r3, [r3, #0]
 8035f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8035f6c:	2b00      	cmp	r3, #0
 8035f6e:	d033      	beq.n	8035fd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8035f70:	687b      	ldr	r3, [r7, #4]
 8035f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8035f78:	d017      	beq.n	8035faa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8035f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8035f7e:	d811      	bhi.n	8035fa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8035f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8035f84:	d013      	beq.n	8035fae <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8035f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8035f8a:	d80b      	bhi.n	8035fa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8035f8c:	2b00      	cmp	r3, #0
 8035f8e:	d010      	beq.n	8035fb2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8035f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035f94:	d106      	bne.n	8035fa4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8035f96:	4b0e      	ldr	r3, [pc, #56]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035f9a:	4a0d      	ldr	r2, [pc, #52]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8035fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8035fa2:	e007      	b.n	8035fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8035fa4:	2301      	movs	r3, #1
 8035fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8035fa8:	e004      	b.n	8035fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8035faa:	bf00      	nop
 8035fac:	e002      	b.n	8035fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8035fae:	bf00      	nop
 8035fb0:	e000      	b.n	8035fb4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8035fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8035fb4:	7dfb      	ldrb	r3, [r7, #23]
 8035fb6:	2b00      	cmp	r3, #0
 8035fb8:	d10c      	bne.n	8035fd4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8035fba:	4b05      	ldr	r3, [pc, #20]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035fbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8035fc2:	687b      	ldr	r3, [r7, #4]
 8035fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035fc6:	4902      	ldr	r1, [pc, #8]	; (8035fd0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8035fc8:	4313      	orrs	r3, r2
 8035fca:	654b      	str	r3, [r1, #84]	; 0x54
 8035fcc:	e004      	b.n	8035fd8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8035fce:	bf00      	nop
 8035fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8035fd4:	7dfb      	ldrb	r3, [r7, #23]
 8035fd6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8035fd8:	687b      	ldr	r3, [r7, #4]
 8035fda:	681b      	ldr	r3, [r3, #0]
 8035fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8035fe0:	2b00      	cmp	r3, #0
 8035fe2:	d008      	beq.n	8035ff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8035fe4:	4b31      	ldr	r3, [pc, #196]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8035fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8035fec:	687b      	ldr	r3, [r7, #4]
 8035fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035ff0:	492e      	ldr	r1, [pc, #184]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8035ff2:	4313      	orrs	r3, r2
 8035ff4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8035ff6:	687b      	ldr	r3, [r7, #4]
 8035ff8:	681b      	ldr	r3, [r3, #0]
 8035ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8035ffe:	2b00      	cmp	r3, #0
 8036000:	d009      	beq.n	8036016 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8036002:	4b2a      	ldr	r3, [pc, #168]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036004:	691b      	ldr	r3, [r3, #16]
 8036006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 803600a:	687b      	ldr	r3, [r7, #4]
 803600c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8036010:	4926      	ldr	r1, [pc, #152]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036012:	4313      	orrs	r3, r2
 8036014:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8036016:	687b      	ldr	r3, [r7, #4]
 8036018:	681b      	ldr	r3, [r3, #0]
 803601a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 803601e:	2b00      	cmp	r3, #0
 8036020:	d008      	beq.n	8036034 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8036022:	4b22      	ldr	r3, [pc, #136]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036026:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 803602a:	687b      	ldr	r3, [r7, #4]
 803602c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 803602e:	491f      	ldr	r1, [pc, #124]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036030:	4313      	orrs	r3, r2
 8036032:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8036034:	687b      	ldr	r3, [r7, #4]
 8036036:	681b      	ldr	r3, [r3, #0]
 8036038:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 803603c:	2b00      	cmp	r3, #0
 803603e:	d00d      	beq.n	803605c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8036040:	4b1a      	ldr	r3, [pc, #104]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036042:	691b      	ldr	r3, [r3, #16]
 8036044:	4a19      	ldr	r2, [pc, #100]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036046:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 803604a:	6113      	str	r3, [r2, #16]
 803604c:	4b17      	ldr	r3, [pc, #92]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803604e:	691a      	ldr	r2, [r3, #16]
 8036050:	687b      	ldr	r3, [r7, #4]
 8036052:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8036056:	4915      	ldr	r1, [pc, #84]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036058:	4313      	orrs	r3, r2
 803605a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 803605c:	687b      	ldr	r3, [r7, #4]
 803605e:	681b      	ldr	r3, [r3, #0]
 8036060:	2b00      	cmp	r3, #0
 8036062:	da08      	bge.n	8036076 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8036064:	4b11      	ldr	r3, [pc, #68]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8036068:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 803606c:	687b      	ldr	r3, [r7, #4]
 803606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036070:	490e      	ldr	r1, [pc, #56]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036072:	4313      	orrs	r3, r2
 8036074:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8036076:	687b      	ldr	r3, [r7, #4]
 8036078:	681b      	ldr	r3, [r3, #0]
 803607a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 803607e:	2b00      	cmp	r3, #0
 8036080:	d009      	beq.n	8036096 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8036082:	4b0a      	ldr	r3, [pc, #40]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8036086:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 803608a:	687b      	ldr	r3, [r7, #4]
 803608c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036090:	4906      	ldr	r1, [pc, #24]	; (80360ac <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8036092:	4313      	orrs	r3, r2
 8036094:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8036096:	7dbb      	ldrb	r3, [r7, #22]
 8036098:	2b00      	cmp	r3, #0
 803609a:	d101      	bne.n	80360a0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 803609c:	2300      	movs	r3, #0
 803609e:	e000      	b.n	80360a2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80360a0:	2301      	movs	r3, #1
}
 80360a2:	4618      	mov	r0, r3
 80360a4:	3718      	adds	r7, #24
 80360a6:	46bd      	mov	sp, r7
 80360a8:	bd80      	pop	{r7, pc}
 80360aa:	bf00      	nop
 80360ac:	58024400 	.word	0x58024400

080360b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80360b0:	b580      	push	{r7, lr}
 80360b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80360b4:	f7ff f85a 	bl	803516c <HAL_RCC_GetHCLKFreq>
 80360b8:	4602      	mov	r2, r0
 80360ba:	4b06      	ldr	r3, [pc, #24]	; (80360d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80360bc:	6a1b      	ldr	r3, [r3, #32]
 80360be:	091b      	lsrs	r3, r3, #4
 80360c0:	f003 0307 	and.w	r3, r3, #7
 80360c4:	4904      	ldr	r1, [pc, #16]	; (80360d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80360c6:	5ccb      	ldrb	r3, [r1, r3]
 80360c8:	f003 031f 	and.w	r3, r3, #31
 80360cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80360d0:	4618      	mov	r0, r3
 80360d2:	bd80      	pop	{r7, pc}
 80360d4:	58024400 	.word	0x58024400
 80360d8:	0805b81c 	.word	0x0805b81c

080360dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80360dc:	b480      	push	{r7}
 80360de:	b089      	sub	sp, #36	; 0x24
 80360e0:	af00      	add	r7, sp, #0
 80360e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80360e4:	4ba1      	ldr	r3, [pc, #644]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80360e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80360e8:	f003 0303 	and.w	r3, r3, #3
 80360ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80360ee:	4b9f      	ldr	r3, [pc, #636]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80360f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80360f2:	0b1b      	lsrs	r3, r3, #12
 80360f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80360f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80360fa:	4b9c      	ldr	r3, [pc, #624]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80360fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80360fe:	091b      	lsrs	r3, r3, #4
 8036100:	f003 0301 	and.w	r3, r3, #1
 8036104:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8036106:	4b99      	ldr	r3, [pc, #612]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803610a:	08db      	lsrs	r3, r3, #3
 803610c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8036110:	693a      	ldr	r2, [r7, #16]
 8036112:	fb02 f303 	mul.w	r3, r2, r3
 8036116:	ee07 3a90 	vmov	s15, r3
 803611a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803611e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8036122:	697b      	ldr	r3, [r7, #20]
 8036124:	2b00      	cmp	r3, #0
 8036126:	f000 8111 	beq.w	803634c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 803612a:	69bb      	ldr	r3, [r7, #24]
 803612c:	2b02      	cmp	r3, #2
 803612e:	f000 8083 	beq.w	8036238 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8036132:	69bb      	ldr	r3, [r7, #24]
 8036134:	2b02      	cmp	r3, #2
 8036136:	f200 80a1 	bhi.w	803627c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 803613a:	69bb      	ldr	r3, [r7, #24]
 803613c:	2b00      	cmp	r3, #0
 803613e:	d003      	beq.n	8036148 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8036140:	69bb      	ldr	r3, [r7, #24]
 8036142:	2b01      	cmp	r3, #1
 8036144:	d056      	beq.n	80361f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8036146:	e099      	b.n	803627c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8036148:	4b88      	ldr	r3, [pc, #544]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803614a:	681b      	ldr	r3, [r3, #0]
 803614c:	f003 0320 	and.w	r3, r3, #32
 8036150:	2b00      	cmp	r3, #0
 8036152:	d02d      	beq.n	80361b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8036154:	4b85      	ldr	r3, [pc, #532]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036156:	681b      	ldr	r3, [r3, #0]
 8036158:	08db      	lsrs	r3, r3, #3
 803615a:	f003 0303 	and.w	r3, r3, #3
 803615e:	4a84      	ldr	r2, [pc, #528]	; (8036370 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8036160:	fa22 f303 	lsr.w	r3, r2, r3
 8036164:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8036166:	68bb      	ldr	r3, [r7, #8]
 8036168:	ee07 3a90 	vmov	s15, r3
 803616c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036170:	697b      	ldr	r3, [r7, #20]
 8036172:	ee07 3a90 	vmov	s15, r3
 8036176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803617a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803617e:	4b7b      	ldr	r3, [pc, #492]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036186:	ee07 3a90 	vmov	s15, r3
 803618a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803618e:	ed97 6a03 	vldr	s12, [r7, #12]
 8036192:	eddf 5a78 	vldr	s11, [pc, #480]	; 8036374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8036196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803619a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803619e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80361a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80361a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80361aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80361ae:	e087      	b.n	80362c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80361b0:	697b      	ldr	r3, [r7, #20]
 80361b2:	ee07 3a90 	vmov	s15, r3
 80361b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80361ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8036378 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80361be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80361c2:	4b6a      	ldr	r3, [pc, #424]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80361c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80361c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80361ca:	ee07 3a90 	vmov	s15, r3
 80361ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80361d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80361d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8036374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80361da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80361de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80361e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80361e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80361ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80361ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80361f2:	e065      	b.n	80362c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80361f4:	697b      	ldr	r3, [r7, #20]
 80361f6:	ee07 3a90 	vmov	s15, r3
 80361fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80361fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 803637c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8036202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8036206:	4b59      	ldr	r3, [pc, #356]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803620e:	ee07 3a90 	vmov	s15, r3
 8036212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036216:	ed97 6a03 	vldr	s12, [r7, #12]
 803621a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8036374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 803621e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8036222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8036226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8036232:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8036236:	e043      	b.n	80362c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8036238:	697b      	ldr	r3, [r7, #20]
 803623a:	ee07 3a90 	vmov	s15, r3
 803623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036242:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8036380 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8036246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803624a:	4b48      	ldr	r3, [pc, #288]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036252:	ee07 3a90 	vmov	s15, r3
 8036256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803625a:	ed97 6a03 	vldr	s12, [r7, #12]
 803625e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8036374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8036262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8036266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803626a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8036272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8036276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803627a:	e021      	b.n	80362c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 803627c:	697b      	ldr	r3, [r7, #20]
 803627e:	ee07 3a90 	vmov	s15, r3
 8036282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036286:	eddf 6a3d 	vldr	s13, [pc, #244]	; 803637c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 803628a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803628e:	4b37      	ldr	r3, [pc, #220]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8036290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036296:	ee07 3a90 	vmov	s15, r3
 803629a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803629e:	ed97 6a03 	vldr	s12, [r7, #12]
 80362a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8036374 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80362a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80362aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80362ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80362b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80362b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80362ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80362be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80362c0:	4b2a      	ldr	r3, [pc, #168]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80362c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80362c4:	0a5b      	lsrs	r3, r3, #9
 80362c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80362ca:	ee07 3a90 	vmov	s15, r3
 80362ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80362d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80362d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80362da:	edd7 6a07 	vldr	s13, [r7, #28]
 80362de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80362e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80362e6:	ee17 2a90 	vmov	r2, s15
 80362ea:	687b      	ldr	r3, [r7, #4]
 80362ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80362ee:	4b1f      	ldr	r3, [pc, #124]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80362f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80362f2:	0c1b      	lsrs	r3, r3, #16
 80362f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80362f8:	ee07 3a90 	vmov	s15, r3
 80362fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8036304:	ee37 7a87 	vadd.f32	s14, s15, s14
 8036308:	edd7 6a07 	vldr	s13, [r7, #28]
 803630c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8036310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8036314:	ee17 2a90 	vmov	r2, s15
 8036318:	687b      	ldr	r3, [r7, #4]
 803631a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 803631c:	4b13      	ldr	r3, [pc, #76]	; (803636c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 803631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036320:	0e1b      	lsrs	r3, r3, #24
 8036322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8036326:	ee07 3a90 	vmov	s15, r3
 803632a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803632e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8036332:	ee37 7a87 	vadd.f32	s14, s15, s14
 8036336:	edd7 6a07 	vldr	s13, [r7, #28]
 803633a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 803633e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8036342:	ee17 2a90 	vmov	r2, s15
 8036346:	687b      	ldr	r3, [r7, #4]
 8036348:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 803634a:	e008      	b.n	803635e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 803634c:	687b      	ldr	r3, [r7, #4]
 803634e:	2200      	movs	r2, #0
 8036350:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8036352:	687b      	ldr	r3, [r7, #4]
 8036354:	2200      	movs	r2, #0
 8036356:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8036358:	687b      	ldr	r3, [r7, #4]
 803635a:	2200      	movs	r2, #0
 803635c:	609a      	str	r2, [r3, #8]
}
 803635e:	bf00      	nop
 8036360:	3724      	adds	r7, #36	; 0x24
 8036362:	46bd      	mov	sp, r7
 8036364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036368:	4770      	bx	lr
 803636a:	bf00      	nop
 803636c:	58024400 	.word	0x58024400
 8036370:	03d09000 	.word	0x03d09000
 8036374:	46000000 	.word	0x46000000
 8036378:	4c742400 	.word	0x4c742400
 803637c:	4a742400 	.word	0x4a742400
 8036380:	4bbebc20 	.word	0x4bbebc20

08036384 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8036384:	b480      	push	{r7}
 8036386:	b089      	sub	sp, #36	; 0x24
 8036388:	af00      	add	r7, sp, #0
 803638a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 803638c:	4ba1      	ldr	r3, [pc, #644]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036390:	f003 0303 	and.w	r3, r3, #3
 8036394:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8036396:	4b9f      	ldr	r3, [pc, #636]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8036398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803639a:	0d1b      	lsrs	r3, r3, #20
 803639c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80363a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80363a2:	4b9c      	ldr	r3, [pc, #624]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80363a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80363a6:	0a1b      	lsrs	r3, r3, #8
 80363a8:	f003 0301 	and.w	r3, r3, #1
 80363ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80363ae:	4b99      	ldr	r3, [pc, #612]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80363b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80363b2:	08db      	lsrs	r3, r3, #3
 80363b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80363b8:	693a      	ldr	r2, [r7, #16]
 80363ba:	fb02 f303 	mul.w	r3, r2, r3
 80363be:	ee07 3a90 	vmov	s15, r3
 80363c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80363c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80363ca:	697b      	ldr	r3, [r7, #20]
 80363cc:	2b00      	cmp	r3, #0
 80363ce:	f000 8111 	beq.w	80365f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80363d2:	69bb      	ldr	r3, [r7, #24]
 80363d4:	2b02      	cmp	r3, #2
 80363d6:	f000 8083 	beq.w	80364e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80363da:	69bb      	ldr	r3, [r7, #24]
 80363dc:	2b02      	cmp	r3, #2
 80363de:	f200 80a1 	bhi.w	8036524 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80363e2:	69bb      	ldr	r3, [r7, #24]
 80363e4:	2b00      	cmp	r3, #0
 80363e6:	d003      	beq.n	80363f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80363e8:	69bb      	ldr	r3, [r7, #24]
 80363ea:	2b01      	cmp	r3, #1
 80363ec:	d056      	beq.n	803649c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80363ee:	e099      	b.n	8036524 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80363f0:	4b88      	ldr	r3, [pc, #544]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80363f2:	681b      	ldr	r3, [r3, #0]
 80363f4:	f003 0320 	and.w	r3, r3, #32
 80363f8:	2b00      	cmp	r3, #0
 80363fa:	d02d      	beq.n	8036458 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80363fc:	4b85      	ldr	r3, [pc, #532]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80363fe:	681b      	ldr	r3, [r3, #0]
 8036400:	08db      	lsrs	r3, r3, #3
 8036402:	f003 0303 	and.w	r3, r3, #3
 8036406:	4a84      	ldr	r2, [pc, #528]	; (8036618 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8036408:	fa22 f303 	lsr.w	r3, r2, r3
 803640c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 803640e:	68bb      	ldr	r3, [r7, #8]
 8036410:	ee07 3a90 	vmov	s15, r3
 8036414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036418:	697b      	ldr	r3, [r7, #20]
 803641a:	ee07 3a90 	vmov	s15, r3
 803641e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8036426:	4b7b      	ldr	r3, [pc, #492]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8036428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803642a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803642e:	ee07 3a90 	vmov	s15, r3
 8036432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036436:	ed97 6a03 	vldr	s12, [r7, #12]
 803643a:	eddf 5a78 	vldr	s11, [pc, #480]	; 803661c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803643e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8036442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8036446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803644a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8036452:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8036456:	e087      	b.n	8036568 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8036458:	697b      	ldr	r3, [r7, #20]
 803645a:	ee07 3a90 	vmov	s15, r3
 803645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036462:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8036620 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8036466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803646a:	4b6a      	ldr	r3, [pc, #424]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036472:	ee07 3a90 	vmov	s15, r3
 8036476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803647a:	ed97 6a03 	vldr	s12, [r7, #12]
 803647e:	eddf 5a67 	vldr	s11, [pc, #412]	; 803661c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8036482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8036486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803648a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803648e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8036492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8036496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 803649a:	e065      	b.n	8036568 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 803649c:	697b      	ldr	r3, [r7, #20]
 803649e:	ee07 3a90 	vmov	s15, r3
 80364a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80364a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8036624 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80364aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80364ae:	4b59      	ldr	r3, [pc, #356]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80364b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80364b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80364b6:	ee07 3a90 	vmov	s15, r3
 80364ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80364be:	ed97 6a03 	vldr	s12, [r7, #12]
 80364c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 803661c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80364c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80364ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80364ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80364d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80364d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80364da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80364de:	e043      	b.n	8036568 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80364e0:	697b      	ldr	r3, [r7, #20]
 80364e2:	ee07 3a90 	vmov	s15, r3
 80364e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80364ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8036628 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80364ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80364f2:	4b48      	ldr	r3, [pc, #288]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80364f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80364f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80364fa:	ee07 3a90 	vmov	s15, r3
 80364fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036502:	ed97 6a03 	vldr	s12, [r7, #12]
 8036506:	eddf 5a45 	vldr	s11, [pc, #276]	; 803661c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803650a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 803650e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8036512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8036516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803651a:	ee67 7a27 	vmul.f32	s15, s14, s15
 803651e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8036522:	e021      	b.n	8036568 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8036524:	697b      	ldr	r3, [r7, #20]
 8036526:	ee07 3a90 	vmov	s15, r3
 803652a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803652e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8036624 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8036532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8036536:	4b37      	ldr	r3, [pc, #220]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8036538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803653e:	ee07 3a90 	vmov	s15, r3
 8036542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8036546:	ed97 6a03 	vldr	s12, [r7, #12]
 803654a:	eddf 5a34 	vldr	s11, [pc, #208]	; 803661c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 803654e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8036552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8036556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803655a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 803655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8036562:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8036566:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8036568:	4b2a      	ldr	r3, [pc, #168]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 803656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803656c:	0a5b      	lsrs	r3, r3, #9
 803656e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8036572:	ee07 3a90 	vmov	s15, r3
 8036576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803657a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 803657e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8036582:	edd7 6a07 	vldr	s13, [r7, #28]
 8036586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 803658a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 803658e:	ee17 2a90 	vmov	r2, s15
 8036592:	687b      	ldr	r3, [r7, #4]
 8036594:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8036596:	4b1f      	ldr	r3, [pc, #124]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8036598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803659a:	0c1b      	lsrs	r3, r3, #16
 803659c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80365a0:	ee07 3a90 	vmov	s15, r3
 80365a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80365a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80365ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80365b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80365b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80365b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80365bc:	ee17 2a90 	vmov	r2, s15
 80365c0:	687b      	ldr	r3, [r7, #4]
 80365c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80365c4:	4b13      	ldr	r3, [pc, #76]	; (8036614 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80365c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80365c8:	0e1b      	lsrs	r3, r3, #24
 80365ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80365ce:	ee07 3a90 	vmov	s15, r3
 80365d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80365d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80365da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80365de:	edd7 6a07 	vldr	s13, [r7, #28]
 80365e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80365e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80365ea:	ee17 2a90 	vmov	r2, s15
 80365ee:	687b      	ldr	r3, [r7, #4]
 80365f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80365f2:	e008      	b.n	8036606 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80365f4:	687b      	ldr	r3, [r7, #4]
 80365f6:	2200      	movs	r2, #0
 80365f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80365fa:	687b      	ldr	r3, [r7, #4]
 80365fc:	2200      	movs	r2, #0
 80365fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8036600:	687b      	ldr	r3, [r7, #4]
 8036602:	2200      	movs	r2, #0
 8036604:	609a      	str	r2, [r3, #8]
}
 8036606:	bf00      	nop
 8036608:	3724      	adds	r7, #36	; 0x24
 803660a:	46bd      	mov	sp, r7
 803660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036610:	4770      	bx	lr
 8036612:	bf00      	nop
 8036614:	58024400 	.word	0x58024400
 8036618:	03d09000 	.word	0x03d09000
 803661c:	46000000 	.word	0x46000000
 8036620:	4c742400 	.word	0x4c742400
 8036624:	4a742400 	.word	0x4a742400
 8036628:	4bbebc20 	.word	0x4bbebc20

0803662c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 803662c:	b580      	push	{r7, lr}
 803662e:	b084      	sub	sp, #16
 8036630:	af00      	add	r7, sp, #0
 8036632:	6078      	str	r0, [r7, #4]
 8036634:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8036636:	2300      	movs	r3, #0
 8036638:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 803663a:	4b53      	ldr	r3, [pc, #332]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 803663c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803663e:	f003 0303 	and.w	r3, r3, #3
 8036642:	2b03      	cmp	r3, #3
 8036644:	d101      	bne.n	803664a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8036646:	2301      	movs	r3, #1
 8036648:	e099      	b.n	803677e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 803664a:	4b4f      	ldr	r3, [pc, #316]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 803664c:	681b      	ldr	r3, [r3, #0]
 803664e:	4a4e      	ldr	r2, [pc, #312]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8036654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8036656:	f7f7 fe43 	bl	802e2e0 <HAL_GetTick>
 803665a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 803665c:	e008      	b.n	8036670 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 803665e:	f7f7 fe3f 	bl	802e2e0 <HAL_GetTick>
 8036662:	4602      	mov	r2, r0
 8036664:	68bb      	ldr	r3, [r7, #8]
 8036666:	1ad3      	subs	r3, r2, r3
 8036668:	2b02      	cmp	r3, #2
 803666a:	d901      	bls.n	8036670 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 803666c:	2303      	movs	r3, #3
 803666e:	e086      	b.n	803677e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8036670:	4b45      	ldr	r3, [pc, #276]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036672:	681b      	ldr	r3, [r3, #0]
 8036674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8036678:	2b00      	cmp	r3, #0
 803667a:	d1f0      	bne.n	803665e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 803667c:	4b42      	ldr	r3, [pc, #264]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 803667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036680:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8036684:	687b      	ldr	r3, [r7, #4]
 8036686:	681b      	ldr	r3, [r3, #0]
 8036688:	031b      	lsls	r3, r3, #12
 803668a:	493f      	ldr	r1, [pc, #252]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 803668c:	4313      	orrs	r3, r2
 803668e:	628b      	str	r3, [r1, #40]	; 0x28
 8036690:	687b      	ldr	r3, [r7, #4]
 8036692:	685b      	ldr	r3, [r3, #4]
 8036694:	3b01      	subs	r3, #1
 8036696:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803669a:	687b      	ldr	r3, [r7, #4]
 803669c:	689b      	ldr	r3, [r3, #8]
 803669e:	3b01      	subs	r3, #1
 80366a0:	025b      	lsls	r3, r3, #9
 80366a2:	b29b      	uxth	r3, r3
 80366a4:	431a      	orrs	r2, r3
 80366a6:	687b      	ldr	r3, [r7, #4]
 80366a8:	68db      	ldr	r3, [r3, #12]
 80366aa:	3b01      	subs	r3, #1
 80366ac:	041b      	lsls	r3, r3, #16
 80366ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80366b2:	431a      	orrs	r2, r3
 80366b4:	687b      	ldr	r3, [r7, #4]
 80366b6:	691b      	ldr	r3, [r3, #16]
 80366b8:	3b01      	subs	r3, #1
 80366ba:	061b      	lsls	r3, r3, #24
 80366bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80366c0:	4931      	ldr	r1, [pc, #196]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 80366c2:	4313      	orrs	r3, r2
 80366c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80366c6:	4b30      	ldr	r3, [pc, #192]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 80366c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80366ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80366ce:	687b      	ldr	r3, [r7, #4]
 80366d0:	695b      	ldr	r3, [r3, #20]
 80366d2:	492d      	ldr	r1, [pc, #180]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 80366d4:	4313      	orrs	r3, r2
 80366d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80366d8:	4b2b      	ldr	r3, [pc, #172]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 80366da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80366dc:	f023 0220 	bic.w	r2, r3, #32
 80366e0:	687b      	ldr	r3, [r7, #4]
 80366e2:	699b      	ldr	r3, [r3, #24]
 80366e4:	4928      	ldr	r1, [pc, #160]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 80366e6:	4313      	orrs	r3, r2
 80366e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80366ea:	4b27      	ldr	r3, [pc, #156]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 80366ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80366ee:	4a26      	ldr	r2, [pc, #152]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 80366f0:	f023 0310 	bic.w	r3, r3, #16
 80366f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80366f6:	4b24      	ldr	r3, [pc, #144]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 80366f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80366fa:	4b24      	ldr	r3, [pc, #144]	; (803678c <RCCEx_PLL2_Config+0x160>)
 80366fc:	4013      	ands	r3, r2
 80366fe:	687a      	ldr	r2, [r7, #4]
 8036700:	69d2      	ldr	r2, [r2, #28]
 8036702:	00d2      	lsls	r2, r2, #3
 8036704:	4920      	ldr	r1, [pc, #128]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036706:	4313      	orrs	r3, r2
 8036708:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 803670a:	4b1f      	ldr	r3, [pc, #124]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 803670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803670e:	4a1e      	ldr	r2, [pc, #120]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036710:	f043 0310 	orr.w	r3, r3, #16
 8036714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8036716:	683b      	ldr	r3, [r7, #0]
 8036718:	2b00      	cmp	r3, #0
 803671a:	d106      	bne.n	803672a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 803671c:	4b1a      	ldr	r3, [pc, #104]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 803671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036720:	4a19      	ldr	r2, [pc, #100]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8036726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8036728:	e00f      	b.n	803674a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 803672a:	683b      	ldr	r3, [r7, #0]
 803672c:	2b01      	cmp	r3, #1
 803672e:	d106      	bne.n	803673e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8036730:	4b15      	ldr	r3, [pc, #84]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036734:	4a14      	ldr	r2, [pc, #80]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 803673a:	62d3      	str	r3, [r2, #44]	; 0x2c
 803673c:	e005      	b.n	803674a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 803673e:	4b12      	ldr	r3, [pc, #72]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036742:	4a11      	ldr	r2, [pc, #68]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036744:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8036748:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 803674a:	4b0f      	ldr	r3, [pc, #60]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 803674c:	681b      	ldr	r3, [r3, #0]
 803674e:	4a0e      	ldr	r2, [pc, #56]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8036754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8036756:	f7f7 fdc3 	bl	802e2e0 <HAL_GetTick>
 803675a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 803675c:	e008      	b.n	8036770 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 803675e:	f7f7 fdbf 	bl	802e2e0 <HAL_GetTick>
 8036762:	4602      	mov	r2, r0
 8036764:	68bb      	ldr	r3, [r7, #8]
 8036766:	1ad3      	subs	r3, r2, r3
 8036768:	2b02      	cmp	r3, #2
 803676a:	d901      	bls.n	8036770 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 803676c:	2303      	movs	r3, #3
 803676e:	e006      	b.n	803677e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8036770:	4b05      	ldr	r3, [pc, #20]	; (8036788 <RCCEx_PLL2_Config+0x15c>)
 8036772:	681b      	ldr	r3, [r3, #0]
 8036774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8036778:	2b00      	cmp	r3, #0
 803677a:	d0f0      	beq.n	803675e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 803677c:	7bfb      	ldrb	r3, [r7, #15]
}
 803677e:	4618      	mov	r0, r3
 8036780:	3710      	adds	r7, #16
 8036782:	46bd      	mov	sp, r7
 8036784:	bd80      	pop	{r7, pc}
 8036786:	bf00      	nop
 8036788:	58024400 	.word	0x58024400
 803678c:	ffff0007 	.word	0xffff0007

08036790 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8036790:	b580      	push	{r7, lr}
 8036792:	b084      	sub	sp, #16
 8036794:	af00      	add	r7, sp, #0
 8036796:	6078      	str	r0, [r7, #4]
 8036798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 803679a:	2300      	movs	r3, #0
 803679c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 803679e:	4b53      	ldr	r3, [pc, #332]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80367a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80367a2:	f003 0303 	and.w	r3, r3, #3
 80367a6:	2b03      	cmp	r3, #3
 80367a8:	d101      	bne.n	80367ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80367aa:	2301      	movs	r3, #1
 80367ac:	e099      	b.n	80368e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80367ae:	4b4f      	ldr	r3, [pc, #316]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80367b0:	681b      	ldr	r3, [r3, #0]
 80367b2:	4a4e      	ldr	r2, [pc, #312]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80367b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80367b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80367ba:	f7f7 fd91 	bl	802e2e0 <HAL_GetTick>
 80367be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80367c0:	e008      	b.n	80367d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80367c2:	f7f7 fd8d 	bl	802e2e0 <HAL_GetTick>
 80367c6:	4602      	mov	r2, r0
 80367c8:	68bb      	ldr	r3, [r7, #8]
 80367ca:	1ad3      	subs	r3, r2, r3
 80367cc:	2b02      	cmp	r3, #2
 80367ce:	d901      	bls.n	80367d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80367d0:	2303      	movs	r3, #3
 80367d2:	e086      	b.n	80368e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80367d4:	4b45      	ldr	r3, [pc, #276]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80367d6:	681b      	ldr	r3, [r3, #0]
 80367d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80367dc:	2b00      	cmp	r3, #0
 80367de:	d1f0      	bne.n	80367c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80367e0:	4b42      	ldr	r3, [pc, #264]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80367e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80367e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80367e8:	687b      	ldr	r3, [r7, #4]
 80367ea:	681b      	ldr	r3, [r3, #0]
 80367ec:	051b      	lsls	r3, r3, #20
 80367ee:	493f      	ldr	r1, [pc, #252]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80367f0:	4313      	orrs	r3, r2
 80367f2:	628b      	str	r3, [r1, #40]	; 0x28
 80367f4:	687b      	ldr	r3, [r7, #4]
 80367f6:	685b      	ldr	r3, [r3, #4]
 80367f8:	3b01      	subs	r3, #1
 80367fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80367fe:	687b      	ldr	r3, [r7, #4]
 8036800:	689b      	ldr	r3, [r3, #8]
 8036802:	3b01      	subs	r3, #1
 8036804:	025b      	lsls	r3, r3, #9
 8036806:	b29b      	uxth	r3, r3
 8036808:	431a      	orrs	r2, r3
 803680a:	687b      	ldr	r3, [r7, #4]
 803680c:	68db      	ldr	r3, [r3, #12]
 803680e:	3b01      	subs	r3, #1
 8036810:	041b      	lsls	r3, r3, #16
 8036812:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8036816:	431a      	orrs	r2, r3
 8036818:	687b      	ldr	r3, [r7, #4]
 803681a:	691b      	ldr	r3, [r3, #16]
 803681c:	3b01      	subs	r3, #1
 803681e:	061b      	lsls	r3, r3, #24
 8036820:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8036824:	4931      	ldr	r1, [pc, #196]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036826:	4313      	orrs	r3, r2
 8036828:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 803682a:	4b30      	ldr	r3, [pc, #192]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 803682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803682e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8036832:	687b      	ldr	r3, [r7, #4]
 8036834:	695b      	ldr	r3, [r3, #20]
 8036836:	492d      	ldr	r1, [pc, #180]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036838:	4313      	orrs	r3, r2
 803683a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 803683c:	4b2b      	ldr	r3, [pc, #172]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 803683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036840:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8036844:	687b      	ldr	r3, [r7, #4]
 8036846:	699b      	ldr	r3, [r3, #24]
 8036848:	4928      	ldr	r1, [pc, #160]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 803684a:	4313      	orrs	r3, r2
 803684c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 803684e:	4b27      	ldr	r3, [pc, #156]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036852:	4a26      	ldr	r2, [pc, #152]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8036858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 803685a:	4b24      	ldr	r3, [pc, #144]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 803685c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803685e:	4b24      	ldr	r3, [pc, #144]	; (80368f0 <RCCEx_PLL3_Config+0x160>)
 8036860:	4013      	ands	r3, r2
 8036862:	687a      	ldr	r2, [r7, #4]
 8036864:	69d2      	ldr	r2, [r2, #28]
 8036866:	00d2      	lsls	r2, r2, #3
 8036868:	4920      	ldr	r1, [pc, #128]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 803686a:	4313      	orrs	r3, r2
 803686c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 803686e:	4b1f      	ldr	r3, [pc, #124]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036872:	4a1e      	ldr	r2, [pc, #120]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8036878:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 803687a:	683b      	ldr	r3, [r7, #0]
 803687c:	2b00      	cmp	r3, #0
 803687e:	d106      	bne.n	803688e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8036880:	4b1a      	ldr	r3, [pc, #104]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036884:	4a19      	ldr	r2, [pc, #100]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036886:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 803688a:	62d3      	str	r3, [r2, #44]	; 0x2c
 803688c:	e00f      	b.n	80368ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 803688e:	683b      	ldr	r3, [r7, #0]
 8036890:	2b01      	cmp	r3, #1
 8036892:	d106      	bne.n	80368a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8036894:	4b15      	ldr	r3, [pc, #84]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 8036896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8036898:	4a14      	ldr	r2, [pc, #80]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 803689a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 803689e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80368a0:	e005      	b.n	80368ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80368a2:	4b12      	ldr	r3, [pc, #72]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80368a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80368a6:	4a11      	ldr	r2, [pc, #68]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80368a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80368ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80368ae:	4b0f      	ldr	r3, [pc, #60]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80368b0:	681b      	ldr	r3, [r3, #0]
 80368b2:	4a0e      	ldr	r2, [pc, #56]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80368b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80368b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80368ba:	f7f7 fd11 	bl	802e2e0 <HAL_GetTick>
 80368be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80368c0:	e008      	b.n	80368d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80368c2:	f7f7 fd0d 	bl	802e2e0 <HAL_GetTick>
 80368c6:	4602      	mov	r2, r0
 80368c8:	68bb      	ldr	r3, [r7, #8]
 80368ca:	1ad3      	subs	r3, r2, r3
 80368cc:	2b02      	cmp	r3, #2
 80368ce:	d901      	bls.n	80368d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80368d0:	2303      	movs	r3, #3
 80368d2:	e006      	b.n	80368e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80368d4:	4b05      	ldr	r3, [pc, #20]	; (80368ec <RCCEx_PLL3_Config+0x15c>)
 80368d6:	681b      	ldr	r3, [r3, #0]
 80368d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80368dc:	2b00      	cmp	r3, #0
 80368de:	d0f0      	beq.n	80368c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80368e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80368e2:	4618      	mov	r0, r3
 80368e4:	3710      	adds	r7, #16
 80368e6:	46bd      	mov	sp, r7
 80368e8:	bd80      	pop	{r7, pc}
 80368ea:	bf00      	nop
 80368ec:	58024400 	.word	0x58024400
 80368f0:	ffff0007 	.word	0xffff0007

080368f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80368f4:	b580      	push	{r7, lr}
 80368f6:	b084      	sub	sp, #16
 80368f8:	af00      	add	r7, sp, #0
 80368fa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80368fc:	687b      	ldr	r3, [r7, #4]
 80368fe:	2b00      	cmp	r3, #0
 8036900:	d101      	bne.n	8036906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8036902:	2301      	movs	r3, #1
 8036904:	e0f1      	b.n	8036aea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8036906:	687b      	ldr	r3, [r7, #4]
 8036908:	2200      	movs	r2, #0
 803690a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 803690c:	687b      	ldr	r3, [r7, #4]
 803690e:	681b      	ldr	r3, [r3, #0]
 8036910:	4a78      	ldr	r2, [pc, #480]	; (8036af4 <HAL_SPI_Init+0x200>)
 8036912:	4293      	cmp	r3, r2
 8036914:	d00f      	beq.n	8036936 <HAL_SPI_Init+0x42>
 8036916:	687b      	ldr	r3, [r7, #4]
 8036918:	681b      	ldr	r3, [r3, #0]
 803691a:	4a77      	ldr	r2, [pc, #476]	; (8036af8 <HAL_SPI_Init+0x204>)
 803691c:	4293      	cmp	r3, r2
 803691e:	d00a      	beq.n	8036936 <HAL_SPI_Init+0x42>
 8036920:	687b      	ldr	r3, [r7, #4]
 8036922:	681b      	ldr	r3, [r3, #0]
 8036924:	4a75      	ldr	r2, [pc, #468]	; (8036afc <HAL_SPI_Init+0x208>)
 8036926:	4293      	cmp	r3, r2
 8036928:	d005      	beq.n	8036936 <HAL_SPI_Init+0x42>
 803692a:	687b      	ldr	r3, [r7, #4]
 803692c:	68db      	ldr	r3, [r3, #12]
 803692e:	2b0f      	cmp	r3, #15
 8036930:	d901      	bls.n	8036936 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8036932:	2301      	movs	r3, #1
 8036934:	e0d9      	b.n	8036aea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8036936:	6878      	ldr	r0, [r7, #4]
 8036938:	f001 f8ee 	bl	8037b18 <SPI_GetPacketSize>
 803693c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 803693e:	687b      	ldr	r3, [r7, #4]
 8036940:	681b      	ldr	r3, [r3, #0]
 8036942:	4a6c      	ldr	r2, [pc, #432]	; (8036af4 <HAL_SPI_Init+0x200>)
 8036944:	4293      	cmp	r3, r2
 8036946:	d00c      	beq.n	8036962 <HAL_SPI_Init+0x6e>
 8036948:	687b      	ldr	r3, [r7, #4]
 803694a:	681b      	ldr	r3, [r3, #0]
 803694c:	4a6a      	ldr	r2, [pc, #424]	; (8036af8 <HAL_SPI_Init+0x204>)
 803694e:	4293      	cmp	r3, r2
 8036950:	d007      	beq.n	8036962 <HAL_SPI_Init+0x6e>
 8036952:	687b      	ldr	r3, [r7, #4]
 8036954:	681b      	ldr	r3, [r3, #0]
 8036956:	4a69      	ldr	r2, [pc, #420]	; (8036afc <HAL_SPI_Init+0x208>)
 8036958:	4293      	cmp	r3, r2
 803695a:	d002      	beq.n	8036962 <HAL_SPI_Init+0x6e>
 803695c:	68fb      	ldr	r3, [r7, #12]
 803695e:	2b08      	cmp	r3, #8
 8036960:	d811      	bhi.n	8036986 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8036962:	687b      	ldr	r3, [r7, #4]
 8036964:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8036966:	4a63      	ldr	r2, [pc, #396]	; (8036af4 <HAL_SPI_Init+0x200>)
 8036968:	4293      	cmp	r3, r2
 803696a:	d009      	beq.n	8036980 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 803696c:	687b      	ldr	r3, [r7, #4]
 803696e:	681b      	ldr	r3, [r3, #0]
 8036970:	4a61      	ldr	r2, [pc, #388]	; (8036af8 <HAL_SPI_Init+0x204>)
 8036972:	4293      	cmp	r3, r2
 8036974:	d004      	beq.n	8036980 <HAL_SPI_Init+0x8c>
 8036976:	687b      	ldr	r3, [r7, #4]
 8036978:	681b      	ldr	r3, [r3, #0]
 803697a:	4a60      	ldr	r2, [pc, #384]	; (8036afc <HAL_SPI_Init+0x208>)
 803697c:	4293      	cmp	r3, r2
 803697e:	d104      	bne.n	803698a <HAL_SPI_Init+0x96>
 8036980:	68fb      	ldr	r3, [r7, #12]
 8036982:	2b10      	cmp	r3, #16
 8036984:	d901      	bls.n	803698a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8036986:	2301      	movs	r3, #1
 8036988:	e0af      	b.n	8036aea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 803698a:	687b      	ldr	r3, [r7, #4]
 803698c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8036990:	b2db      	uxtb	r3, r3
 8036992:	2b00      	cmp	r3, #0
 8036994:	d106      	bne.n	80369a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8036996:	687b      	ldr	r3, [r7, #4]
 8036998:	2200      	movs	r2, #0
 803699a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 803699e:	6878      	ldr	r0, [r7, #4]
 80369a0:	f7f6 fc46 	bl	802d230 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80369a4:	687b      	ldr	r3, [r7, #4]
 80369a6:	2202      	movs	r2, #2
 80369a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80369ac:	687b      	ldr	r3, [r7, #4]
 80369ae:	681b      	ldr	r3, [r3, #0]
 80369b0:	681a      	ldr	r2, [r3, #0]
 80369b2:	687b      	ldr	r3, [r7, #4]
 80369b4:	681b      	ldr	r3, [r3, #0]
 80369b6:	f022 0201 	bic.w	r2, r2, #1
 80369ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80369bc:	687b      	ldr	r3, [r7, #4]
 80369be:	681b      	ldr	r3, [r3, #0]
 80369c0:	689b      	ldr	r3, [r3, #8]
 80369c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80369c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80369c8:	687b      	ldr	r3, [r7, #4]
 80369ca:	699b      	ldr	r3, [r3, #24]
 80369cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80369d0:	d119      	bne.n	8036a06 <HAL_SPI_Init+0x112>
 80369d2:	687b      	ldr	r3, [r7, #4]
 80369d4:	685b      	ldr	r3, [r3, #4]
 80369d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80369da:	d103      	bne.n	80369e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80369dc:	687b      	ldr	r3, [r7, #4]
 80369de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80369e0:	2b00      	cmp	r3, #0
 80369e2:	d008      	beq.n	80369f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80369e4:	687b      	ldr	r3, [r7, #4]
 80369e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80369e8:	2b00      	cmp	r3, #0
 80369ea:	d10c      	bne.n	8036a06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80369ec:	687b      	ldr	r3, [r7, #4]
 80369ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80369f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80369f4:	d107      	bne.n	8036a06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80369f6:	687b      	ldr	r3, [r7, #4]
 80369f8:	681b      	ldr	r3, [r3, #0]
 80369fa:	681a      	ldr	r2, [r3, #0]
 80369fc:	687b      	ldr	r3, [r7, #4]
 80369fe:	681b      	ldr	r3, [r3, #0]
 8036a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8036a04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8036a06:	687b      	ldr	r3, [r7, #4]
 8036a08:	69da      	ldr	r2, [r3, #28]
 8036a0a:	687b      	ldr	r3, [r7, #4]
 8036a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036a0e:	431a      	orrs	r2, r3
 8036a10:	68bb      	ldr	r3, [r7, #8]
 8036a12:	431a      	orrs	r2, r3
 8036a14:	687b      	ldr	r3, [r7, #4]
 8036a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8036a18:	ea42 0103 	orr.w	r1, r2, r3
 8036a1c:	687b      	ldr	r3, [r7, #4]
 8036a1e:	68da      	ldr	r2, [r3, #12]
 8036a20:	687b      	ldr	r3, [r7, #4]
 8036a22:	681b      	ldr	r3, [r3, #0]
 8036a24:	430a      	orrs	r2, r1
 8036a26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8036a28:	687b      	ldr	r3, [r7, #4]
 8036a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8036a2c:	687b      	ldr	r3, [r7, #4]
 8036a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036a30:	431a      	orrs	r2, r3
 8036a32:	687b      	ldr	r3, [r7, #4]
 8036a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036a36:	431a      	orrs	r2, r3
 8036a38:	687b      	ldr	r3, [r7, #4]
 8036a3a:	699b      	ldr	r3, [r3, #24]
 8036a3c:	431a      	orrs	r2, r3
 8036a3e:	687b      	ldr	r3, [r7, #4]
 8036a40:	691b      	ldr	r3, [r3, #16]
 8036a42:	431a      	orrs	r2, r3
 8036a44:	687b      	ldr	r3, [r7, #4]
 8036a46:	695b      	ldr	r3, [r3, #20]
 8036a48:	431a      	orrs	r2, r3
 8036a4a:	687b      	ldr	r3, [r7, #4]
 8036a4c:	6a1b      	ldr	r3, [r3, #32]
 8036a4e:	431a      	orrs	r2, r3
 8036a50:	687b      	ldr	r3, [r7, #4]
 8036a52:	685b      	ldr	r3, [r3, #4]
 8036a54:	431a      	orrs	r2, r3
 8036a56:	687b      	ldr	r3, [r7, #4]
 8036a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8036a5a:	431a      	orrs	r2, r3
 8036a5c:	687b      	ldr	r3, [r7, #4]
 8036a5e:	689b      	ldr	r3, [r3, #8]
 8036a60:	431a      	orrs	r2, r3
 8036a62:	687b      	ldr	r3, [r7, #4]
 8036a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8036a66:	ea42 0103 	orr.w	r1, r2, r3
 8036a6a:	687b      	ldr	r3, [r7, #4]
 8036a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8036a6e:	687b      	ldr	r3, [r7, #4]
 8036a70:	681b      	ldr	r3, [r3, #0]
 8036a72:	430a      	orrs	r2, r1
 8036a74:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8036a76:	687b      	ldr	r3, [r7, #4]
 8036a78:	685b      	ldr	r3, [r3, #4]
 8036a7a:	2b00      	cmp	r3, #0
 8036a7c:	d113      	bne.n	8036aa6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8036a7e:	687b      	ldr	r3, [r7, #4]
 8036a80:	681b      	ldr	r3, [r3, #0]
 8036a82:	689b      	ldr	r3, [r3, #8]
 8036a84:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8036a88:	687b      	ldr	r3, [r7, #4]
 8036a8a:	681b      	ldr	r3, [r3, #0]
 8036a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8036a90:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8036a92:	687b      	ldr	r3, [r7, #4]
 8036a94:	681b      	ldr	r3, [r3, #0]
 8036a96:	689b      	ldr	r3, [r3, #8]
 8036a98:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8036a9c:	687b      	ldr	r3, [r7, #4]
 8036a9e:	681b      	ldr	r3, [r3, #0]
 8036aa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8036aa4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8036aa6:	687b      	ldr	r3, [r7, #4]
 8036aa8:	681b      	ldr	r3, [r3, #0]
 8036aaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8036aac:	687b      	ldr	r3, [r7, #4]
 8036aae:	681b      	ldr	r3, [r3, #0]
 8036ab0:	f022 0201 	bic.w	r2, r2, #1
 8036ab4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8036ab6:	687b      	ldr	r3, [r7, #4]
 8036ab8:	685b      	ldr	r3, [r3, #4]
 8036aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8036abe:	2b00      	cmp	r3, #0
 8036ac0:	d00a      	beq.n	8036ad8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8036ac2:	687b      	ldr	r3, [r7, #4]
 8036ac4:	681b      	ldr	r3, [r3, #0]
 8036ac6:	68db      	ldr	r3, [r3, #12]
 8036ac8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8036acc:	687b      	ldr	r3, [r7, #4]
 8036ace:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8036ad0:	687b      	ldr	r3, [r7, #4]
 8036ad2:	681b      	ldr	r3, [r3, #0]
 8036ad4:	430a      	orrs	r2, r1
 8036ad6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8036ad8:	687b      	ldr	r3, [r7, #4]
 8036ada:	2200      	movs	r2, #0
 8036adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8036ae0:	687b      	ldr	r3, [r7, #4]
 8036ae2:	2201      	movs	r2, #1
 8036ae4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8036ae8:	2300      	movs	r3, #0
}
 8036aea:	4618      	mov	r0, r3
 8036aec:	3710      	adds	r7, #16
 8036aee:	46bd      	mov	sp, r7
 8036af0:	bd80      	pop	{r7, pc}
 8036af2:	bf00      	nop
 8036af4:	40013000 	.word	0x40013000
 8036af8:	40003800 	.word	0x40003800
 8036afc:	40003c00 	.word	0x40003c00

08036b00 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8036b00:	b580      	push	{r7, lr}
 8036b02:	b086      	sub	sp, #24
 8036b04:	af00      	add	r7, sp, #0
 8036b06:	60f8      	str	r0, [r7, #12]
 8036b08:	60b9      	str	r1, [r7, #8]
 8036b0a:	4613      	mov	r3, r2
 8036b0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8036b0e:	2300      	movs	r3, #0
 8036b10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8036b12:	68fb      	ldr	r3, [r7, #12]
 8036b14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036b18:	2b01      	cmp	r3, #1
 8036b1a:	d101      	bne.n	8036b20 <HAL_SPI_Transmit_DMA+0x20>
 8036b1c:	2302      	movs	r3, #2
 8036b1e:	e12c      	b.n	8036d7a <HAL_SPI_Transmit_DMA+0x27a>
 8036b20:	68fb      	ldr	r3, [r7, #12]
 8036b22:	2201      	movs	r2, #1
 8036b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8036b28:	68fb      	ldr	r3, [r7, #12]
 8036b2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8036b2e:	b2db      	uxtb	r3, r3
 8036b30:	2b01      	cmp	r3, #1
 8036b32:	d007      	beq.n	8036b44 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8036b34:	2302      	movs	r3, #2
 8036b36:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036b38:	68fb      	ldr	r3, [r7, #12]
 8036b3a:	2200      	movs	r2, #0
 8036b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036b40:	7dfb      	ldrb	r3, [r7, #23]
 8036b42:	e11a      	b.n	8036d7a <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 8036b44:	68bb      	ldr	r3, [r7, #8]
 8036b46:	2b00      	cmp	r3, #0
 8036b48:	d002      	beq.n	8036b50 <HAL_SPI_Transmit_DMA+0x50>
 8036b4a:	88fb      	ldrh	r3, [r7, #6]
 8036b4c:	2b00      	cmp	r3, #0
 8036b4e:	d107      	bne.n	8036b60 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 8036b50:	2301      	movs	r3, #1
 8036b52:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036b54:	68fb      	ldr	r3, [r7, #12]
 8036b56:	2200      	movs	r2, #0
 8036b58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036b5c:	7dfb      	ldrb	r3, [r7, #23]
 8036b5e:	e10c      	b.n	8036d7a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8036b60:	68fb      	ldr	r3, [r7, #12]
 8036b62:	2203      	movs	r2, #3
 8036b64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8036b68:	68fb      	ldr	r3, [r7, #12]
 8036b6a:	2200      	movs	r2, #0
 8036b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8036b70:	68fb      	ldr	r3, [r7, #12]
 8036b72:	68ba      	ldr	r2, [r7, #8]
 8036b74:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8036b76:	68fb      	ldr	r3, [r7, #12]
 8036b78:	88fa      	ldrh	r2, [r7, #6]
 8036b7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8036b7e:	68fb      	ldr	r3, [r7, #12]
 8036b80:	88fa      	ldrh	r2, [r7, #6]
 8036b82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8036b86:	68fb      	ldr	r3, [r7, #12]
 8036b88:	2200      	movs	r2, #0
 8036b8a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8036b8c:	68fb      	ldr	r3, [r7, #12]
 8036b8e:	2200      	movs	r2, #0
 8036b90:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8036b92:	68fb      	ldr	r3, [r7, #12]
 8036b94:	2200      	movs	r2, #0
 8036b96:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8036b98:	68fb      	ldr	r3, [r7, #12]
 8036b9a:	2200      	movs	r2, #0
 8036b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8036ba0:	68fb      	ldr	r3, [r7, #12]
 8036ba2:	2200      	movs	r2, #0
 8036ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8036ba8:	68fb      	ldr	r3, [r7, #12]
 8036baa:	689b      	ldr	r3, [r3, #8]
 8036bac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8036bb0:	d107      	bne.n	8036bc2 <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 8036bb2:	68fb      	ldr	r3, [r7, #12]
 8036bb4:	681b      	ldr	r3, [r3, #0]
 8036bb6:	681a      	ldr	r2, [r3, #0]
 8036bb8:	68fb      	ldr	r3, [r7, #12]
 8036bba:	681b      	ldr	r3, [r3, #0]
 8036bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8036bc0:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8036bc2:	68fb      	ldr	r3, [r7, #12]
 8036bc4:	68db      	ldr	r3, [r3, #12]
 8036bc6:	2b0f      	cmp	r3, #15
 8036bc8:	d905      	bls.n	8036bd6 <HAL_SPI_Transmit_DMA+0xd6>
 8036bca:	68fb      	ldr	r3, [r7, #12]
 8036bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036bce:	699b      	ldr	r3, [r3, #24]
 8036bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036bd4:	d10f      	bne.n	8036bf6 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036bd6:	68fb      	ldr	r3, [r7, #12]
 8036bd8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8036bda:	2b07      	cmp	r3, #7
 8036bdc:	d913      	bls.n	8036c06 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036bde:	68fb      	ldr	r3, [r7, #12]
 8036be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036be2:	699b      	ldr	r3, [r3, #24]
 8036be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036be8:	d00d      	beq.n	8036c06 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8036bea:	68fb      	ldr	r3, [r7, #12]
 8036bec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036bee:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036bf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036bf4:	d007      	beq.n	8036c06 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8036bf6:	2301      	movs	r3, #1
 8036bf8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036bfa:	68fb      	ldr	r3, [r7, #12]
 8036bfc:	2200      	movs	r2, #0
 8036bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036c02:	7dfb      	ldrb	r3, [r7, #23]
 8036c04:	e0b9      	b.n	8036d7a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8036c06:	68fb      	ldr	r3, [r7, #12]
 8036c08:	68db      	ldr	r3, [r3, #12]
 8036c0a:	2b07      	cmp	r3, #7
 8036c0c:	d820      	bhi.n	8036c50 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8036c0e:	68fb      	ldr	r3, [r7, #12]
 8036c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036c12:	699b      	ldr	r3, [r3, #24]
 8036c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036c18:	d109      	bne.n	8036c2e <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8036c1a:	68fb      	ldr	r3, [r7, #12]
 8036c1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036c20:	b29b      	uxth	r3, r3
 8036c22:	3301      	adds	r3, #1
 8036c24:	105b      	asrs	r3, r3, #1
 8036c26:	b29a      	uxth	r2, r3
 8036c28:	68fb      	ldr	r3, [r7, #12]
 8036c2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036c2e:	68fb      	ldr	r3, [r7, #12]
 8036c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036c32:	699b      	ldr	r3, [r3, #24]
 8036c34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036c38:	d11e      	bne.n	8036c78 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8036c3a:	68fb      	ldr	r3, [r7, #12]
 8036c3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036c40:	b29b      	uxth	r3, r3
 8036c42:	3303      	adds	r3, #3
 8036c44:	109b      	asrs	r3, r3, #2
 8036c46:	b29a      	uxth	r2, r3
 8036c48:	68fb      	ldr	r3, [r7, #12]
 8036c4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8036c4e:	e013      	b.n	8036c78 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8036c50:	68fb      	ldr	r3, [r7, #12]
 8036c52:	68db      	ldr	r3, [r3, #12]
 8036c54:	2b0f      	cmp	r3, #15
 8036c56:	d80f      	bhi.n	8036c78 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036c58:	68fb      	ldr	r3, [r7, #12]
 8036c5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036c5c:	699b      	ldr	r3, [r3, #24]
 8036c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036c62:	d109      	bne.n	8036c78 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8036c64:	68fb      	ldr	r3, [r7, #12]
 8036c66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036c6a:	b29b      	uxth	r3, r3
 8036c6c:	3301      	adds	r3, #1
 8036c6e:	105b      	asrs	r3, r3, #1
 8036c70:	b29a      	uxth	r2, r3
 8036c72:	68fb      	ldr	r3, [r7, #12]
 8036c74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8036c78:	68fb      	ldr	r3, [r7, #12]
 8036c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036c7c:	4a41      	ldr	r2, [pc, #260]	; (8036d84 <HAL_SPI_Transmit_DMA+0x284>)
 8036c7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8036c80:	68fb      	ldr	r3, [r7, #12]
 8036c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036c84:	4a40      	ldr	r2, [pc, #256]	; (8036d88 <HAL_SPI_Transmit_DMA+0x288>)
 8036c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8036c88:	68fb      	ldr	r3, [r7, #12]
 8036c8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036c8c:	4a3f      	ldr	r2, [pc, #252]	; (8036d8c <HAL_SPI_Transmit_DMA+0x28c>)
 8036c8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8036c90:	68fb      	ldr	r3, [r7, #12]
 8036c92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036c94:	2200      	movs	r2, #0
 8036c96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8036c98:	68fb      	ldr	r3, [r7, #12]
 8036c9a:	681b      	ldr	r3, [r3, #0]
 8036c9c:	689a      	ldr	r2, [r3, #8]
 8036c9e:	68fb      	ldr	r3, [r7, #12]
 8036ca0:	681b      	ldr	r3, [r3, #0]
 8036ca2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8036ca6:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8036ca8:	68fb      	ldr	r3, [r7, #12]
 8036caa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8036cac:	68fb      	ldr	r3, [r7, #12]
 8036cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8036cb0:	4619      	mov	r1, r3
 8036cb2:	68fb      	ldr	r3, [r7, #12]
 8036cb4:	681b      	ldr	r3, [r3, #0]
 8036cb6:	3320      	adds	r3, #32
 8036cb8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8036cba:	68fb      	ldr	r3, [r7, #12]
 8036cbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8036cc0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8036cc2:	f7f8 fb65 	bl	802f390 <HAL_DMA_Start_IT>
 8036cc6:	4603      	mov	r3, r0
 8036cc8:	2b00      	cmp	r3, #0
 8036cca:	d013      	beq.n	8036cf4 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8036ccc:	68fb      	ldr	r3, [r7, #12]
 8036cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036cd2:	f043 0210 	orr.w	r2, r3, #16
 8036cd6:	68fb      	ldr	r3, [r7, #12]
 8036cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8036cdc:	68fb      	ldr	r3, [r7, #12]
 8036cde:	2200      	movs	r2, #0
 8036ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8036ce4:	68fb      	ldr	r3, [r7, #12]
 8036ce6:	2201      	movs	r2, #1
 8036ce8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8036cec:	2301      	movs	r3, #1
 8036cee:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8036cf0:	7dfb      	ldrb	r3, [r7, #23]
 8036cf2:	e042      	b.n	8036d7a <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8036cf4:	68fb      	ldr	r3, [r7, #12]
 8036cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8036cf8:	69db      	ldr	r3, [r3, #28]
 8036cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036cfe:	d108      	bne.n	8036d12 <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8036d00:	68fb      	ldr	r3, [r7, #12]
 8036d02:	681b      	ldr	r3, [r3, #0]
 8036d04:	6859      	ldr	r1, [r3, #4]
 8036d06:	68fb      	ldr	r3, [r7, #12]
 8036d08:	681a      	ldr	r2, [r3, #0]
 8036d0a:	4b21      	ldr	r3, [pc, #132]	; (8036d90 <HAL_SPI_Transmit_DMA+0x290>)
 8036d0c:	400b      	ands	r3, r1
 8036d0e:	6053      	str	r3, [r2, #4]
 8036d10:	e009      	b.n	8036d26 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8036d12:	68fb      	ldr	r3, [r7, #12]
 8036d14:	681b      	ldr	r3, [r3, #0]
 8036d16:	685a      	ldr	r2, [r3, #4]
 8036d18:	4b1d      	ldr	r3, [pc, #116]	; (8036d90 <HAL_SPI_Transmit_DMA+0x290>)
 8036d1a:	4013      	ands	r3, r2
 8036d1c:	88f9      	ldrh	r1, [r7, #6]
 8036d1e:	68fa      	ldr	r2, [r7, #12]
 8036d20:	6812      	ldr	r2, [r2, #0]
 8036d22:	430b      	orrs	r3, r1
 8036d24:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8036d26:	68fb      	ldr	r3, [r7, #12]
 8036d28:	681b      	ldr	r3, [r3, #0]
 8036d2a:	689a      	ldr	r2, [r3, #8]
 8036d2c:	68fb      	ldr	r3, [r7, #12]
 8036d2e:	681b      	ldr	r3, [r3, #0]
 8036d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8036d34:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8036d36:	68fb      	ldr	r3, [r7, #12]
 8036d38:	681b      	ldr	r3, [r3, #0]
 8036d3a:	691a      	ldr	r2, [r3, #16]
 8036d3c:	68fb      	ldr	r3, [r7, #12]
 8036d3e:	681b      	ldr	r3, [r3, #0]
 8036d40:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 8036d44:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8036d46:	68fb      	ldr	r3, [r7, #12]
 8036d48:	681b      	ldr	r3, [r3, #0]
 8036d4a:	681a      	ldr	r2, [r3, #0]
 8036d4c:	68fb      	ldr	r3, [r7, #12]
 8036d4e:	681b      	ldr	r3, [r3, #0]
 8036d50:	f042 0201 	orr.w	r2, r2, #1
 8036d54:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8036d56:	68fb      	ldr	r3, [r7, #12]
 8036d58:	685b      	ldr	r3, [r3, #4]
 8036d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8036d5e:	d107      	bne.n	8036d70 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8036d60:	68fb      	ldr	r3, [r7, #12]
 8036d62:	681b      	ldr	r3, [r3, #0]
 8036d64:	681a      	ldr	r2, [r3, #0]
 8036d66:	68fb      	ldr	r3, [r7, #12]
 8036d68:	681b      	ldr	r3, [r3, #0]
 8036d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8036d6e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8036d70:	68fb      	ldr	r3, [r7, #12]
 8036d72:	2200      	movs	r2, #0
 8036d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8036d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8036d7a:	4618      	mov	r0, r3
 8036d7c:	3718      	adds	r7, #24
 8036d7e:	46bd      	mov	sp, r7
 8036d80:	bd80      	pop	{r7, pc}
 8036d82:	bf00      	nop
 8036d84:	0803790b 	.word	0x0803790b
 8036d88:	08037839 	.word	0x08037839
 8036d8c:	0803795f 	.word	0x0803795f
 8036d90:	ffff0000 	.word	0xffff0000

08036d94 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8036d94:	b580      	push	{r7, lr}
 8036d96:	b086      	sub	sp, #24
 8036d98:	af00      	add	r7, sp, #0
 8036d9a:	60f8      	str	r0, [r7, #12]
 8036d9c:	60b9      	str	r1, [r7, #8]
 8036d9e:	4613      	mov	r3, r2
 8036da0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8036da2:	2300      	movs	r3, #0
 8036da4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8036da6:	68fb      	ldr	r3, [r7, #12]
 8036da8:	689b      	ldr	r3, [r3, #8]
 8036daa:	2b00      	cmp	r3, #0
 8036dac:	d110      	bne.n	8036dd0 <HAL_SPI_Receive_DMA+0x3c>
 8036dae:	68fb      	ldr	r3, [r7, #12]
 8036db0:	685b      	ldr	r3, [r3, #4]
 8036db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8036db6:	d10b      	bne.n	8036dd0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8036db8:	68fb      	ldr	r3, [r7, #12]
 8036dba:	2204      	movs	r2, #4
 8036dbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8036dc0:	88fb      	ldrh	r3, [r7, #6]
 8036dc2:	68ba      	ldr	r2, [r7, #8]
 8036dc4:	68b9      	ldr	r1, [r7, #8]
 8036dc6:	68f8      	ldr	r0, [r7, #12]
 8036dc8:	f000 f940 	bl	803704c <HAL_SPI_TransmitReceive_DMA>
 8036dcc:	4603      	mov	r3, r0
 8036dce:	e130      	b.n	8037032 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8036dd0:	68fb      	ldr	r3, [r7, #12]
 8036dd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8036dd6:	2b01      	cmp	r3, #1
 8036dd8:	d101      	bne.n	8036dde <HAL_SPI_Receive_DMA+0x4a>
 8036dda:	2302      	movs	r3, #2
 8036ddc:	e129      	b.n	8037032 <HAL_SPI_Receive_DMA+0x29e>
 8036dde:	68fb      	ldr	r3, [r7, #12]
 8036de0:	2201      	movs	r2, #1
 8036de2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8036de6:	68fb      	ldr	r3, [r7, #12]
 8036de8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8036dec:	b2db      	uxtb	r3, r3
 8036dee:	2b01      	cmp	r3, #1
 8036df0:	d007      	beq.n	8036e02 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8036df2:	2302      	movs	r3, #2
 8036df4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036df6:	68fb      	ldr	r3, [r7, #12]
 8036df8:	2200      	movs	r2, #0
 8036dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036dfe:	7dfb      	ldrb	r3, [r7, #23]
 8036e00:	e117      	b.n	8037032 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8036e02:	68bb      	ldr	r3, [r7, #8]
 8036e04:	2b00      	cmp	r3, #0
 8036e06:	d002      	beq.n	8036e0e <HAL_SPI_Receive_DMA+0x7a>
 8036e08:	88fb      	ldrh	r3, [r7, #6]
 8036e0a:	2b00      	cmp	r3, #0
 8036e0c:	d107      	bne.n	8036e1e <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8036e0e:	2301      	movs	r3, #1
 8036e10:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036e12:	68fb      	ldr	r3, [r7, #12]
 8036e14:	2200      	movs	r2, #0
 8036e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036e1a:	7dfb      	ldrb	r3, [r7, #23]
 8036e1c:	e109      	b.n	8037032 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8036e1e:	68fb      	ldr	r3, [r7, #12]
 8036e20:	2204      	movs	r2, #4
 8036e22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8036e26:	68fb      	ldr	r3, [r7, #12]
 8036e28:	2200      	movs	r2, #0
 8036e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8036e2e:	68fb      	ldr	r3, [r7, #12]
 8036e30:	68ba      	ldr	r2, [r7, #8]
 8036e32:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8036e34:	68fb      	ldr	r3, [r7, #12]
 8036e36:	88fa      	ldrh	r2, [r7, #6]
 8036e38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8036e3c:	68fb      	ldr	r3, [r7, #12]
 8036e3e:	88fa      	ldrh	r2, [r7, #6]
 8036e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8036e44:	68fb      	ldr	r3, [r7, #12]
 8036e46:	2200      	movs	r2, #0
 8036e48:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8036e4a:	68fb      	ldr	r3, [r7, #12]
 8036e4c:	2200      	movs	r2, #0
 8036e4e:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8036e50:	68fb      	ldr	r3, [r7, #12]
 8036e52:	2200      	movs	r2, #0
 8036e54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8036e58:	68fb      	ldr	r3, [r7, #12]
 8036e5a:	2200      	movs	r2, #0
 8036e5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8036e60:	68fb      	ldr	r3, [r7, #12]
 8036e62:	689b      	ldr	r3, [r3, #8]
 8036e64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8036e68:	d107      	bne.n	8036e7a <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8036e6a:	68fb      	ldr	r3, [r7, #12]
 8036e6c:	681b      	ldr	r3, [r3, #0]
 8036e6e:	681a      	ldr	r2, [r3, #0]
 8036e70:	68fb      	ldr	r3, [r7, #12]
 8036e72:	681b      	ldr	r3, [r3, #0]
 8036e74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8036e78:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8036e7a:	68fb      	ldr	r3, [r7, #12]
 8036e7c:	68db      	ldr	r3, [r3, #12]
 8036e7e:	2b0f      	cmp	r3, #15
 8036e80:	d905      	bls.n	8036e8e <HAL_SPI_Receive_DMA+0xfa>
 8036e82:	68fb      	ldr	r3, [r7, #12]
 8036e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036e86:	699b      	ldr	r3, [r3, #24]
 8036e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036e8c:	d10f      	bne.n	8036eae <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036e8e:	68fb      	ldr	r3, [r7, #12]
 8036e90:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8036e92:	2b07      	cmp	r3, #7
 8036e94:	d913      	bls.n	8036ebe <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036e96:	68fb      	ldr	r3, [r7, #12]
 8036e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036e9a:	699b      	ldr	r3, [r3, #24]
 8036e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036ea0:	d00d      	beq.n	8036ebe <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8036ea2:	68fb      	ldr	r3, [r7, #12]
 8036ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036ea6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8036ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036eac:	d007      	beq.n	8036ebe <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8036eae:	2301      	movs	r3, #1
 8036eb0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8036eb2:	68fb      	ldr	r3, [r7, #12]
 8036eb4:	2200      	movs	r2, #0
 8036eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8036eba:	7dfb      	ldrb	r3, [r7, #23]
 8036ebc:	e0b9      	b.n	8037032 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8036ebe:	68fb      	ldr	r3, [r7, #12]
 8036ec0:	681b      	ldr	r3, [r3, #0]
 8036ec2:	689a      	ldr	r2, [r3, #8]
 8036ec4:	68fb      	ldr	r3, [r7, #12]
 8036ec6:	681b      	ldr	r3, [r3, #0]
 8036ec8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8036ecc:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8036ece:	68fb      	ldr	r3, [r7, #12]
 8036ed0:	68db      	ldr	r3, [r3, #12]
 8036ed2:	2b07      	cmp	r3, #7
 8036ed4:	d820      	bhi.n	8036f18 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8036ed6:	68fb      	ldr	r3, [r7, #12]
 8036ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036eda:	699b      	ldr	r3, [r3, #24]
 8036edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8036ee0:	d109      	bne.n	8036ef6 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8036ee2:	68fb      	ldr	r3, [r7, #12]
 8036ee4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036ee8:	b29b      	uxth	r3, r3
 8036eea:	3301      	adds	r3, #1
 8036eec:	105b      	asrs	r3, r3, #1
 8036eee:	b29a      	uxth	r2, r3
 8036ef0:	68fb      	ldr	r3, [r7, #12]
 8036ef2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036ef6:	68fb      	ldr	r3, [r7, #12]
 8036ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036efa:	699b      	ldr	r3, [r3, #24]
 8036efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036f00:	d11e      	bne.n	8036f40 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8036f02:	68fb      	ldr	r3, [r7, #12]
 8036f04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036f08:	b29b      	uxth	r3, r3
 8036f0a:	3303      	adds	r3, #3
 8036f0c:	109b      	asrs	r3, r3, #2
 8036f0e:	b29a      	uxth	r2, r3
 8036f10:	68fb      	ldr	r3, [r7, #12]
 8036f12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8036f16:	e013      	b.n	8036f40 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8036f18:	68fb      	ldr	r3, [r7, #12]
 8036f1a:	68db      	ldr	r3, [r3, #12]
 8036f1c:	2b0f      	cmp	r3, #15
 8036f1e:	d80f      	bhi.n	8036f40 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8036f20:	68fb      	ldr	r3, [r7, #12]
 8036f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036f24:	699b      	ldr	r3, [r3, #24]
 8036f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8036f2a:	d109      	bne.n	8036f40 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8036f2c:	68fb      	ldr	r3, [r7, #12]
 8036f2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036f32:	b29b      	uxth	r3, r3
 8036f34:	3301      	adds	r3, #1
 8036f36:	105b      	asrs	r3, r3, #1
 8036f38:	b29a      	uxth	r2, r3
 8036f3a:	68fb      	ldr	r3, [r7, #12]
 8036f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8036f40:	68fb      	ldr	r3, [r7, #12]
 8036f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036f44:	4a3d      	ldr	r2, [pc, #244]	; (803703c <HAL_SPI_Receive_DMA+0x2a8>)
 8036f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8036f48:	68fb      	ldr	r3, [r7, #12]
 8036f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036f4c:	4a3c      	ldr	r2, [pc, #240]	; (8037040 <HAL_SPI_Receive_DMA+0x2ac>)
 8036f4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8036f50:	68fb      	ldr	r3, [r7, #12]
 8036f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036f54:	4a3b      	ldr	r2, [pc, #236]	; (8037044 <HAL_SPI_Receive_DMA+0x2b0>)
 8036f56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8036f58:	68fb      	ldr	r3, [r7, #12]
 8036f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036f5c:	2200      	movs	r2, #0
 8036f5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8036f60:	68fb      	ldr	r3, [r7, #12]
 8036f62:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8036f64:	68fb      	ldr	r3, [r7, #12]
 8036f66:	681b      	ldr	r3, [r3, #0]
 8036f68:	3330      	adds	r3, #48	; 0x30
 8036f6a:	4619      	mov	r1, r3
 8036f6c:	68fb      	ldr	r3, [r7, #12]
 8036f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8036f70:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8036f72:	68fb      	ldr	r3, [r7, #12]
 8036f74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036f78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8036f7a:	f7f8 fa09 	bl	802f390 <HAL_DMA_Start_IT>
 8036f7e:	4603      	mov	r3, r0
 8036f80:	2b00      	cmp	r3, #0
 8036f82:	d013      	beq.n	8036fac <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8036f84:	68fb      	ldr	r3, [r7, #12]
 8036f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036f8a:	f043 0210 	orr.w	r2, r3, #16
 8036f8e:	68fb      	ldr	r3, [r7, #12]
 8036f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8036f94:	68fb      	ldr	r3, [r7, #12]
 8036f96:	2200      	movs	r2, #0
 8036f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8036f9c:	68fb      	ldr	r3, [r7, #12]
 8036f9e:	2201      	movs	r2, #1
 8036fa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8036fa4:	2301      	movs	r3, #1
 8036fa6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8036fa8:	7dfb      	ldrb	r3, [r7, #23]
 8036faa:	e042      	b.n	8037032 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8036fac:	68fb      	ldr	r3, [r7, #12]
 8036fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8036fb0:	69db      	ldr	r3, [r3, #28]
 8036fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036fb6:	d108      	bne.n	8036fca <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8036fb8:	68fb      	ldr	r3, [r7, #12]
 8036fba:	681b      	ldr	r3, [r3, #0]
 8036fbc:	6859      	ldr	r1, [r3, #4]
 8036fbe:	68fb      	ldr	r3, [r7, #12]
 8036fc0:	681a      	ldr	r2, [r3, #0]
 8036fc2:	4b21      	ldr	r3, [pc, #132]	; (8037048 <HAL_SPI_Receive_DMA+0x2b4>)
 8036fc4:	400b      	ands	r3, r1
 8036fc6:	6053      	str	r3, [r2, #4]
 8036fc8:	e009      	b.n	8036fde <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8036fca:	68fb      	ldr	r3, [r7, #12]
 8036fcc:	681b      	ldr	r3, [r3, #0]
 8036fce:	685a      	ldr	r2, [r3, #4]
 8036fd0:	4b1d      	ldr	r3, [pc, #116]	; (8037048 <HAL_SPI_Receive_DMA+0x2b4>)
 8036fd2:	4013      	ands	r3, r2
 8036fd4:	88f9      	ldrh	r1, [r7, #6]
 8036fd6:	68fa      	ldr	r2, [r7, #12]
 8036fd8:	6812      	ldr	r2, [r2, #0]
 8036fda:	430b      	orrs	r3, r1
 8036fdc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8036fde:	68fb      	ldr	r3, [r7, #12]
 8036fe0:	681b      	ldr	r3, [r3, #0]
 8036fe2:	689a      	ldr	r2, [r3, #8]
 8036fe4:	68fb      	ldr	r3, [r7, #12]
 8036fe6:	681b      	ldr	r3, [r3, #0]
 8036fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8036fec:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8036fee:	68fb      	ldr	r3, [r7, #12]
 8036ff0:	681b      	ldr	r3, [r3, #0]
 8036ff2:	691a      	ldr	r2, [r3, #16]
 8036ff4:	68fb      	ldr	r3, [r7, #12]
 8036ff6:	681b      	ldr	r3, [r3, #0]
 8036ff8:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8036ffc:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8036ffe:	68fb      	ldr	r3, [r7, #12]
 8037000:	681b      	ldr	r3, [r3, #0]
 8037002:	681a      	ldr	r2, [r3, #0]
 8037004:	68fb      	ldr	r3, [r7, #12]
 8037006:	681b      	ldr	r3, [r3, #0]
 8037008:	f042 0201 	orr.w	r2, r2, #1
 803700c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 803700e:	68fb      	ldr	r3, [r7, #12]
 8037010:	685b      	ldr	r3, [r3, #4]
 8037012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8037016:	d107      	bne.n	8037028 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8037018:	68fb      	ldr	r3, [r7, #12]
 803701a:	681b      	ldr	r3, [r3, #0]
 803701c:	681a      	ldr	r2, [r3, #0]
 803701e:	68fb      	ldr	r3, [r7, #12]
 8037020:	681b      	ldr	r3, [r3, #0]
 8037022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8037026:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8037028:	68fb      	ldr	r3, [r7, #12]
 803702a:	2200      	movs	r2, #0
 803702c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8037030:	7dfb      	ldrb	r3, [r7, #23]
}
 8037032:	4618      	mov	r0, r3
 8037034:	3718      	adds	r7, #24
 8037036:	46bd      	mov	sp, r7
 8037038:	bd80      	pop	{r7, pc}
 803703a:	bf00      	nop
 803703c:	08037927 	.word	0x08037927
 8037040:	0803787f 	.word	0x0803787f
 8037044:	0803795f 	.word	0x0803795f
 8037048:	ffff0000 	.word	0xffff0000

0803704c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 803704c:	b580      	push	{r7, lr}
 803704e:	b086      	sub	sp, #24
 8037050:	af00      	add	r7, sp, #0
 8037052:	60f8      	str	r0, [r7, #12]
 8037054:	60b9      	str	r1, [r7, #8]
 8037056:	607a      	str	r2, [r7, #4]
 8037058:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 803705a:	2300      	movs	r3, #0
 803705c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 803705e:	68fb      	ldr	r3, [r7, #12]
 8037060:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037064:	2b01      	cmp	r3, #1
 8037066:	d101      	bne.n	803706c <HAL_SPI_TransmitReceive_DMA+0x20>
 8037068:	2302      	movs	r3, #2
 803706a:	e1b4      	b.n	80373d6 <HAL_SPI_TransmitReceive_DMA+0x38a>
 803706c:	68fb      	ldr	r3, [r7, #12]
 803706e:	2201      	movs	r2, #1
 8037070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8037074:	68fb      	ldr	r3, [r7, #12]
 8037076:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803707a:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 803707c:	68fb      	ldr	r3, [r7, #12]
 803707e:	685b      	ldr	r3, [r3, #4]
 8037080:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8037082:	7dbb      	ldrb	r3, [r7, #22]
 8037084:	2b01      	cmp	r3, #1
 8037086:	d012      	beq.n	80370ae <HAL_SPI_TransmitReceive_DMA+0x62>
 8037088:	693b      	ldr	r3, [r7, #16]
 803708a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803708e:	d106      	bne.n	803709e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8037090:	68fb      	ldr	r3, [r7, #12]
 8037092:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8037094:	2b00      	cmp	r3, #0
 8037096:	d102      	bne.n	803709e <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8037098:	7dbb      	ldrb	r3, [r7, #22]
 803709a:	2b04      	cmp	r3, #4
 803709c:	d007      	beq.n	80370ae <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 803709e:	2302      	movs	r3, #2
 80370a0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80370a2:	68fb      	ldr	r3, [r7, #12]
 80370a4:	2200      	movs	r2, #0
 80370a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80370aa:	7dfb      	ldrb	r3, [r7, #23]
 80370ac:	e193      	b.n	80373d6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80370ae:	68bb      	ldr	r3, [r7, #8]
 80370b0:	2b00      	cmp	r3, #0
 80370b2:	d005      	beq.n	80370c0 <HAL_SPI_TransmitReceive_DMA+0x74>
 80370b4:	687b      	ldr	r3, [r7, #4]
 80370b6:	2b00      	cmp	r3, #0
 80370b8:	d002      	beq.n	80370c0 <HAL_SPI_TransmitReceive_DMA+0x74>
 80370ba:	887b      	ldrh	r3, [r7, #2]
 80370bc:	2b00      	cmp	r3, #0
 80370be:	d107      	bne.n	80370d0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 80370c0:	2301      	movs	r3, #1
 80370c2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80370c4:	68fb      	ldr	r3, [r7, #12]
 80370c6:	2200      	movs	r2, #0
 80370c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80370cc:	7dfb      	ldrb	r3, [r7, #23]
 80370ce:	e182      	b.n	80373d6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80370d0:	68fb      	ldr	r3, [r7, #12]
 80370d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80370d6:	b2db      	uxtb	r3, r3
 80370d8:	2b04      	cmp	r3, #4
 80370da:	d003      	beq.n	80370e4 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80370dc:	68fb      	ldr	r3, [r7, #12]
 80370de:	2205      	movs	r2, #5
 80370e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80370e4:	68fb      	ldr	r3, [r7, #12]
 80370e6:	2200      	movs	r2, #0
 80370e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80370ec:	68fb      	ldr	r3, [r7, #12]
 80370ee:	68ba      	ldr	r2, [r7, #8]
 80370f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80370f2:	68fb      	ldr	r3, [r7, #12]
 80370f4:	887a      	ldrh	r2, [r7, #2]
 80370f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80370fa:	68fb      	ldr	r3, [r7, #12]
 80370fc:	887a      	ldrh	r2, [r7, #2]
 80370fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8037102:	68fb      	ldr	r3, [r7, #12]
 8037104:	687a      	ldr	r2, [r7, #4]
 8037106:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8037108:	68fb      	ldr	r3, [r7, #12]
 803710a:	887a      	ldrh	r2, [r7, #2]
 803710c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8037110:	68fb      	ldr	r3, [r7, #12]
 8037112:	887a      	ldrh	r2, [r7, #2]
 8037114:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8037118:	68fb      	ldr	r3, [r7, #12]
 803711a:	2200      	movs	r2, #0
 803711c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 803711e:	68fb      	ldr	r3, [r7, #12]
 8037120:	2200      	movs	r2, #0
 8037122:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8037124:	68fb      	ldr	r3, [r7, #12]
 8037126:	681b      	ldr	r3, [r3, #0]
 8037128:	689a      	ldr	r2, [r3, #8]
 803712a:	68fb      	ldr	r3, [r7, #12]
 803712c:	681b      	ldr	r3, [r3, #0]
 803712e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8037132:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8037134:	68fb      	ldr	r3, [r7, #12]
 8037136:	68db      	ldr	r3, [r3, #12]
 8037138:	2b0f      	cmp	r3, #15
 803713a:	d905      	bls.n	8037148 <HAL_SPI_TransmitReceive_DMA+0xfc>
 803713c:	68fb      	ldr	r3, [r7, #12]
 803713e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037140:	699b      	ldr	r3, [r3, #24]
 8037142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037146:	d10f      	bne.n	8037168 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037148:	68fb      	ldr	r3, [r7, #12]
 803714a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803714c:	2b07      	cmp	r3, #7
 803714e:	d913      	bls.n	8037178 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037150:	68fb      	ldr	r3, [r7, #12]
 8037152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037154:	699b      	ldr	r3, [r3, #24]
 8037156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803715a:	d00d      	beq.n	8037178 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 803715c:	68fb      	ldr	r3, [r7, #12]
 803715e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037160:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8037162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037166:	d007      	beq.n	8037178 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8037168:	2301      	movs	r3, #1
 803716a:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 803716c:	68fb      	ldr	r3, [r7, #12]
 803716e:	2200      	movs	r2, #0
 8037170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8037174:	7dfb      	ldrb	r3, [r7, #23]
 8037176:	e12e      	b.n	80373d6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8037178:	68fb      	ldr	r3, [r7, #12]
 803717a:	68db      	ldr	r3, [r3, #12]
 803717c:	2b07      	cmp	r3, #7
 803717e:	d840      	bhi.n	8037202 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8037180:	68fb      	ldr	r3, [r7, #12]
 8037182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037184:	699b      	ldr	r3, [r3, #24]
 8037186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803718a:	d109      	bne.n	80371a0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 803718c:	68fb      	ldr	r3, [r7, #12]
 803718e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8037192:	b29b      	uxth	r3, r3
 8037194:	3301      	adds	r3, #1
 8037196:	105b      	asrs	r3, r3, #1
 8037198:	b29a      	uxth	r2, r3
 803719a:	68fb      	ldr	r3, [r7, #12]
 803719c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80371a0:	68fb      	ldr	r3, [r7, #12]
 80371a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80371a4:	699b      	ldr	r3, [r3, #24]
 80371a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80371aa:	d109      	bne.n	80371c0 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80371ac:	68fb      	ldr	r3, [r7, #12]
 80371ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80371b2:	b29b      	uxth	r3, r3
 80371b4:	3303      	adds	r3, #3
 80371b6:	109b      	asrs	r3, r3, #2
 80371b8:	b29a      	uxth	r2, r3
 80371ba:	68fb      	ldr	r3, [r7, #12]
 80371bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80371c0:	68fb      	ldr	r3, [r7, #12]
 80371c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80371c4:	699b      	ldr	r3, [r3, #24]
 80371c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80371ca:	d109      	bne.n	80371e0 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80371cc:	68fb      	ldr	r3, [r7, #12]
 80371ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80371d2:	b29b      	uxth	r3, r3
 80371d4:	3301      	adds	r3, #1
 80371d6:	105b      	asrs	r3, r3, #1
 80371d8:	b29a      	uxth	r2, r3
 80371da:	68fb      	ldr	r3, [r7, #12]
 80371dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80371e0:	68fb      	ldr	r3, [r7, #12]
 80371e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80371e4:	699b      	ldr	r3, [r3, #24]
 80371e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80371ea:	d12e      	bne.n	803724a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80371ec:	68fb      	ldr	r3, [r7, #12]
 80371ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80371f2:	b29b      	uxth	r3, r3
 80371f4:	3303      	adds	r3, #3
 80371f6:	109b      	asrs	r3, r3, #2
 80371f8:	b29a      	uxth	r2, r3
 80371fa:	68fb      	ldr	r3, [r7, #12]
 80371fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8037200:	e023      	b.n	803724a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8037202:	68fb      	ldr	r3, [r7, #12]
 8037204:	68db      	ldr	r3, [r3, #12]
 8037206:	2b0f      	cmp	r3, #15
 8037208:	d81f      	bhi.n	803724a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803720a:	68fb      	ldr	r3, [r7, #12]
 803720c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803720e:	699b      	ldr	r3, [r3, #24]
 8037210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037214:	d109      	bne.n	803722a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8037216:	68fb      	ldr	r3, [r7, #12]
 8037218:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 803721c:	b29b      	uxth	r3, r3
 803721e:	3301      	adds	r3, #1
 8037220:	105b      	asrs	r3, r3, #1
 8037222:	b29a      	uxth	r2, r3
 8037224:	68fb      	ldr	r3, [r7, #12]
 8037226:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803722a:	68fb      	ldr	r3, [r7, #12]
 803722c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803722e:	699b      	ldr	r3, [r3, #24]
 8037230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8037234:	d109      	bne.n	803724a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8037236:	68fb      	ldr	r3, [r7, #12]
 8037238:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803723c:	b29b      	uxth	r3, r3
 803723e:	3301      	adds	r3, #1
 8037240:	105b      	asrs	r3, r3, #1
 8037242:	b29a      	uxth	r2, r3
 8037244:	68fb      	ldr	r3, [r7, #12]
 8037246:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 803724a:	68fb      	ldr	r3, [r7, #12]
 803724c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037250:	b2db      	uxtb	r3, r3
 8037252:	2b04      	cmp	r3, #4
 8037254:	d108      	bne.n	8037268 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8037256:	68fb      	ldr	r3, [r7, #12]
 8037258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803725a:	4a61      	ldr	r2, [pc, #388]	; (80373e0 <HAL_SPI_TransmitReceive_DMA+0x394>)
 803725c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 803725e:	68fb      	ldr	r3, [r7, #12]
 8037260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037262:	4a60      	ldr	r2, [pc, #384]	; (80373e4 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8037264:	63da      	str	r2, [r3, #60]	; 0x3c
 8037266:	e007      	b.n	8037278 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8037268:	68fb      	ldr	r3, [r7, #12]
 803726a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803726c:	4a5e      	ldr	r2, [pc, #376]	; (80373e8 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 803726e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8037270:	68fb      	ldr	r3, [r7, #12]
 8037272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037274:	4a5d      	ldr	r2, [pc, #372]	; (80373ec <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8037276:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8037278:	68fb      	ldr	r3, [r7, #12]
 803727a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803727c:	4a5c      	ldr	r2, [pc, #368]	; (80373f0 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 803727e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8037280:	68fb      	ldr	r3, [r7, #12]
 8037282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037284:	2200      	movs	r2, #0
 8037286:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8037288:	68fb      	ldr	r3, [r7, #12]
 803728a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 803728c:	68fb      	ldr	r3, [r7, #12]
 803728e:	681b      	ldr	r3, [r3, #0]
 8037290:	3330      	adds	r3, #48	; 0x30
 8037292:	4619      	mov	r1, r3
 8037294:	68fb      	ldr	r3, [r7, #12]
 8037296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037298:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 803729a:	68fb      	ldr	r3, [r7, #12]
 803729c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80372a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80372a2:	f7f8 f875 	bl	802f390 <HAL_DMA_Start_IT>
 80372a6:	4603      	mov	r3, r0
 80372a8:	2b00      	cmp	r3, #0
 80372aa:	d013      	beq.n	80372d4 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80372ac:	68fb      	ldr	r3, [r7, #12]
 80372ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80372b2:	f043 0210 	orr.w	r2, r3, #16
 80372b6:	68fb      	ldr	r3, [r7, #12]
 80372b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80372bc:	68fb      	ldr	r3, [r7, #12]
 80372be:	2200      	movs	r2, #0
 80372c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 80372c4:	68fb      	ldr	r3, [r7, #12]
 80372c6:	2201      	movs	r2, #1
 80372c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 80372cc:	2301      	movs	r3, #1
 80372ce:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 80372d0:	7dfb      	ldrb	r3, [r7, #23]
 80372d2:	e080      	b.n	80373d6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80372d4:	68fb      	ldr	r3, [r7, #12]
 80372d6:	681b      	ldr	r3, [r3, #0]
 80372d8:	689a      	ldr	r2, [r3, #8]
 80372da:	68fb      	ldr	r3, [r7, #12]
 80372dc:	681b      	ldr	r3, [r3, #0]
 80372de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80372e2:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80372e4:	68fb      	ldr	r3, [r7, #12]
 80372e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80372e8:	2200      	movs	r2, #0
 80372ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80372ec:	68fb      	ldr	r3, [r7, #12]
 80372ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80372f0:	2200      	movs	r2, #0
 80372f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80372f4:	68fb      	ldr	r3, [r7, #12]
 80372f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80372f8:	2200      	movs	r2, #0
 80372fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80372fc:	68fb      	ldr	r3, [r7, #12]
 80372fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037300:	2200      	movs	r2, #0
 8037302:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8037304:	68fb      	ldr	r3, [r7, #12]
 8037306:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8037308:	68fb      	ldr	r3, [r7, #12]
 803730a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803730c:	4619      	mov	r1, r3
 803730e:	68fb      	ldr	r3, [r7, #12]
 8037310:	681b      	ldr	r3, [r3, #0]
 8037312:	3320      	adds	r3, #32
 8037314:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8037316:	68fb      	ldr	r3, [r7, #12]
 8037318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 803731c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 803731e:	f7f8 f837 	bl	802f390 <HAL_DMA_Start_IT>
 8037322:	4603      	mov	r3, r0
 8037324:	2b00      	cmp	r3, #0
 8037326:	d013      	beq.n	8037350 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8037328:	68fb      	ldr	r3, [r7, #12]
 803732a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803732e:	f043 0210 	orr.w	r2, r3, #16
 8037332:	68fb      	ldr	r3, [r7, #12]
 8037334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8037338:	68fb      	ldr	r3, [r7, #12]
 803733a:	2200      	movs	r2, #0
 803733c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8037340:	68fb      	ldr	r3, [r7, #12]
 8037342:	2201      	movs	r2, #1
 8037344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8037348:	2301      	movs	r3, #1
 803734a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 803734c:	7dfb      	ldrb	r3, [r7, #23]
 803734e:	e042      	b.n	80373d6 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8037350:	68fb      	ldr	r3, [r7, #12]
 8037352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037354:	69db      	ldr	r3, [r3, #28]
 8037356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803735a:	d108      	bne.n	803736e <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 803735c:	68fb      	ldr	r3, [r7, #12]
 803735e:	681b      	ldr	r3, [r3, #0]
 8037360:	6859      	ldr	r1, [r3, #4]
 8037362:	68fb      	ldr	r3, [r7, #12]
 8037364:	681a      	ldr	r2, [r3, #0]
 8037366:	4b23      	ldr	r3, [pc, #140]	; (80373f4 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8037368:	400b      	ands	r3, r1
 803736a:	6053      	str	r3, [r2, #4]
 803736c:	e009      	b.n	8037382 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 803736e:	68fb      	ldr	r3, [r7, #12]
 8037370:	681b      	ldr	r3, [r3, #0]
 8037372:	685a      	ldr	r2, [r3, #4]
 8037374:	4b1f      	ldr	r3, [pc, #124]	; (80373f4 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8037376:	4013      	ands	r3, r2
 8037378:	8879      	ldrh	r1, [r7, #2]
 803737a:	68fa      	ldr	r2, [r7, #12]
 803737c:	6812      	ldr	r2, [r2, #0]
 803737e:	430b      	orrs	r3, r1
 8037380:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8037382:	68fb      	ldr	r3, [r7, #12]
 8037384:	681b      	ldr	r3, [r3, #0]
 8037386:	689a      	ldr	r2, [r3, #8]
 8037388:	68fb      	ldr	r3, [r7, #12]
 803738a:	681b      	ldr	r3, [r3, #0]
 803738c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8037390:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8037392:	68fb      	ldr	r3, [r7, #12]
 8037394:	681b      	ldr	r3, [r3, #0]
 8037396:	691a      	ldr	r2, [r3, #16]
 8037398:	68fb      	ldr	r3, [r7, #12]
 803739a:	681b      	ldr	r3, [r3, #0]
 803739c:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 80373a0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80373a2:	68fb      	ldr	r3, [r7, #12]
 80373a4:	681b      	ldr	r3, [r3, #0]
 80373a6:	681a      	ldr	r2, [r3, #0]
 80373a8:	68fb      	ldr	r3, [r7, #12]
 80373aa:	681b      	ldr	r3, [r3, #0]
 80373ac:	f042 0201 	orr.w	r2, r2, #1
 80373b0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80373b2:	68fb      	ldr	r3, [r7, #12]
 80373b4:	685b      	ldr	r3, [r3, #4]
 80373b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80373ba:	d107      	bne.n	80373cc <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80373bc:	68fb      	ldr	r3, [r7, #12]
 80373be:	681b      	ldr	r3, [r3, #0]
 80373c0:	681a      	ldr	r2, [r3, #0]
 80373c2:	68fb      	ldr	r3, [r7, #12]
 80373c4:	681b      	ldr	r3, [r3, #0]
 80373c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80373ca:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80373cc:	68fb      	ldr	r3, [r7, #12]
 80373ce:	2200      	movs	r2, #0
 80373d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80373d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80373d6:	4618      	mov	r0, r3
 80373d8:	3718      	adds	r7, #24
 80373da:	46bd      	mov	sp, r7
 80373dc:	bd80      	pop	{r7, pc}
 80373de:	bf00      	nop
 80373e0:	08037927 	.word	0x08037927
 80373e4:	0803787f 	.word	0x0803787f
 80373e8:	08037943 	.word	0x08037943
 80373ec:	080378c5 	.word	0x080378c5
 80373f0:	0803795f 	.word	0x0803795f
 80373f4:	ffff0000 	.word	0xffff0000

080373f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80373f8:	b580      	push	{r7, lr}
 80373fa:	b08a      	sub	sp, #40	; 0x28
 80373fc:	af00      	add	r7, sp, #0
 80373fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8037400:	687b      	ldr	r3, [r7, #4]
 8037402:	681b      	ldr	r3, [r3, #0]
 8037404:	691b      	ldr	r3, [r3, #16]
 8037406:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8037408:	687b      	ldr	r3, [r7, #4]
 803740a:	681b      	ldr	r3, [r3, #0]
 803740c:	695b      	ldr	r3, [r3, #20]
 803740e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8037410:	6a3a      	ldr	r2, [r7, #32]
 8037412:	69fb      	ldr	r3, [r7, #28]
 8037414:	4013      	ands	r3, r2
 8037416:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8037418:	687b      	ldr	r3, [r7, #4]
 803741a:	681b      	ldr	r3, [r3, #0]
 803741c:	689b      	ldr	r3, [r3, #8]
 803741e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8037420:	2300      	movs	r3, #0
 8037422:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8037424:	687b      	ldr	r3, [r7, #4]
 8037426:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803742a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 803742c:	687b      	ldr	r3, [r7, #4]
 803742e:	681b      	ldr	r3, [r3, #0]
 8037430:	3330      	adds	r3, #48	; 0x30
 8037432:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8037434:	69bb      	ldr	r3, [r7, #24]
 8037436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803743a:	2b00      	cmp	r3, #0
 803743c:	d113      	bne.n	8037466 <HAL_SPI_IRQHandler+0x6e>
 803743e:	69bb      	ldr	r3, [r7, #24]
 8037440:	f003 0320 	and.w	r3, r3, #32
 8037444:	2b00      	cmp	r3, #0
 8037446:	d10e      	bne.n	8037466 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8037448:	69bb      	ldr	r3, [r7, #24]
 803744a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 803744e:	2b00      	cmp	r3, #0
 8037450:	d009      	beq.n	8037466 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8037452:	687b      	ldr	r3, [r7, #4]
 8037454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8037456:	6878      	ldr	r0, [r7, #4]
 8037458:	4798      	blx	r3
    hspi->RxISR(hspi);
 803745a:	687b      	ldr	r3, [r7, #4]
 803745c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803745e:	6878      	ldr	r0, [r7, #4]
 8037460:	4798      	blx	r3
    handled = 1UL;
 8037462:	2301      	movs	r3, #1
 8037464:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8037466:	69bb      	ldr	r3, [r7, #24]
 8037468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803746c:	2b00      	cmp	r3, #0
 803746e:	d10f      	bne.n	8037490 <HAL_SPI_IRQHandler+0x98>
 8037470:	69bb      	ldr	r3, [r7, #24]
 8037472:	f003 0301 	and.w	r3, r3, #1
 8037476:	2b00      	cmp	r3, #0
 8037478:	d00a      	beq.n	8037490 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 803747a:	69bb      	ldr	r3, [r7, #24]
 803747c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8037480:	2b00      	cmp	r3, #0
 8037482:	d105      	bne.n	8037490 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8037484:	687b      	ldr	r3, [r7, #4]
 8037486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8037488:	6878      	ldr	r0, [r7, #4]
 803748a:	4798      	blx	r3
    handled = 1UL;
 803748c:	2301      	movs	r3, #1
 803748e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8037490:	69bb      	ldr	r3, [r7, #24]
 8037492:	f003 0320 	and.w	r3, r3, #32
 8037496:	2b00      	cmp	r3, #0
 8037498:	d10f      	bne.n	80374ba <HAL_SPI_IRQHandler+0xc2>
 803749a:	69bb      	ldr	r3, [r7, #24]
 803749c:	f003 0302 	and.w	r3, r3, #2
 80374a0:	2b00      	cmp	r3, #0
 80374a2:	d00a      	beq.n	80374ba <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80374a4:	69bb      	ldr	r3, [r7, #24]
 80374a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80374aa:	2b00      	cmp	r3, #0
 80374ac:	d105      	bne.n	80374ba <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80374ae:	687b      	ldr	r3, [r7, #4]
 80374b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80374b2:	6878      	ldr	r0, [r7, #4]
 80374b4:	4798      	blx	r3
    handled = 1UL;
 80374b6:	2301      	movs	r3, #1
 80374b8:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80374ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80374bc:	2b00      	cmp	r3, #0
 80374be:	f040 815a 	bne.w	8037776 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80374c2:	69bb      	ldr	r3, [r7, #24]
 80374c4:	f003 0308 	and.w	r3, r3, #8
 80374c8:	2b00      	cmp	r3, #0
 80374ca:	f000 808b 	beq.w	80375e4 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80374ce:	687b      	ldr	r3, [r7, #4]
 80374d0:	681b      	ldr	r3, [r3, #0]
 80374d2:	699a      	ldr	r2, [r3, #24]
 80374d4:	687b      	ldr	r3, [r7, #4]
 80374d6:	681b      	ldr	r3, [r3, #0]
 80374d8:	f042 0208 	orr.w	r2, r2, #8
 80374dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80374de:	687b      	ldr	r3, [r7, #4]
 80374e0:	681b      	ldr	r3, [r3, #0]
 80374e2:	699a      	ldr	r2, [r3, #24]
 80374e4:	687b      	ldr	r3, [r7, #4]
 80374e6:	681b      	ldr	r3, [r3, #0]
 80374e8:	f042 0210 	orr.w	r2, r2, #16
 80374ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80374ee:	687b      	ldr	r3, [r7, #4]
 80374f0:	681b      	ldr	r3, [r3, #0]
 80374f2:	699a      	ldr	r2, [r3, #24]
 80374f4:	687b      	ldr	r3, [r7, #4]
 80374f6:	681b      	ldr	r3, [r3, #0]
 80374f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80374fc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80374fe:	687b      	ldr	r3, [r7, #4]
 8037500:	681b      	ldr	r3, [r3, #0]
 8037502:	691a      	ldr	r2, [r3, #16]
 8037504:	687b      	ldr	r3, [r7, #4]
 8037506:	681b      	ldr	r3, [r3, #0]
 8037508:	f022 0208 	bic.w	r2, r2, #8
 803750c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 803750e:	687b      	ldr	r3, [r7, #4]
 8037510:	681b      	ldr	r3, [r3, #0]
 8037512:	689b      	ldr	r3, [r3, #8]
 8037514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8037518:	2b00      	cmp	r3, #0
 803751a:	d13d      	bne.n	8037598 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 803751c:	e036      	b.n	803758c <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 803751e:	687b      	ldr	r3, [r7, #4]
 8037520:	68db      	ldr	r3, [r3, #12]
 8037522:	2b0f      	cmp	r3, #15
 8037524:	d90b      	bls.n	803753e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8037526:	687b      	ldr	r3, [r7, #4]
 8037528:	681a      	ldr	r2, [r3, #0]
 803752a:	687b      	ldr	r3, [r7, #4]
 803752c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803752e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8037530:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8037532:	687b      	ldr	r3, [r7, #4]
 8037534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037536:	1d1a      	adds	r2, r3, #4
 8037538:	687b      	ldr	r3, [r7, #4]
 803753a:	665a      	str	r2, [r3, #100]	; 0x64
 803753c:	e01d      	b.n	803757a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 803753e:	687b      	ldr	r3, [r7, #4]
 8037540:	68db      	ldr	r3, [r3, #12]
 8037542:	2b07      	cmp	r3, #7
 8037544:	d90b      	bls.n	803755e <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8037546:	687b      	ldr	r3, [r7, #4]
 8037548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803754a:	68fa      	ldr	r2, [r7, #12]
 803754c:	8812      	ldrh	r2, [r2, #0]
 803754e:	b292      	uxth	r2, r2
 8037550:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8037552:	687b      	ldr	r3, [r7, #4]
 8037554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037556:	1c9a      	adds	r2, r3, #2
 8037558:	687b      	ldr	r3, [r7, #4]
 803755a:	665a      	str	r2, [r3, #100]	; 0x64
 803755c:	e00d      	b.n	803757a <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 803755e:	687b      	ldr	r3, [r7, #4]
 8037560:	681b      	ldr	r3, [r3, #0]
 8037562:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037566:	687b      	ldr	r3, [r7, #4]
 8037568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803756a:	7812      	ldrb	r2, [r2, #0]
 803756c:	b2d2      	uxtb	r2, r2
 803756e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8037570:	687b      	ldr	r3, [r7, #4]
 8037572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037574:	1c5a      	adds	r2, r3, #1
 8037576:	687b      	ldr	r3, [r7, #4]
 8037578:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 803757a:	687b      	ldr	r3, [r7, #4]
 803757c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8037580:	b29b      	uxth	r3, r3
 8037582:	3b01      	subs	r3, #1
 8037584:	b29a      	uxth	r2, r3
 8037586:	687b      	ldr	r3, [r7, #4]
 8037588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 803758c:	687b      	ldr	r3, [r7, #4]
 803758e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8037592:	b29b      	uxth	r3, r3
 8037594:	2b00      	cmp	r3, #0
 8037596:	d1c2      	bne.n	803751e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8037598:	6878      	ldr	r0, [r7, #4]
 803759a:	f000 fa1d 	bl	80379d8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 803759e:	687b      	ldr	r3, [r7, #4]
 80375a0:	2201      	movs	r2, #1
 80375a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80375a6:	687b      	ldr	r3, [r7, #4]
 80375a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80375ac:	2b00      	cmp	r3, #0
 80375ae:	d003      	beq.n	80375b8 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80375b0:	6878      	ldr	r0, [r7, #4]
 80375b2:	f000 f929 	bl	8037808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80375b6:	e0e3      	b.n	8037780 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80375b8:	7cfb      	ldrb	r3, [r7, #19]
 80375ba:	2b05      	cmp	r3, #5
 80375bc:	d103      	bne.n	80375c6 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80375be:	6878      	ldr	r0, [r7, #4]
 80375c0:	f000 f8fa 	bl	80377b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80375c4:	e0d9      	b.n	803777a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80375c6:	7cfb      	ldrb	r3, [r7, #19]
 80375c8:	2b04      	cmp	r3, #4
 80375ca:	d103      	bne.n	80375d4 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 80375cc:	6878      	ldr	r0, [r7, #4]
 80375ce:	f000 f8e9 	bl	80377a4 <HAL_SPI_RxCpltCallback>
    return;
 80375d2:	e0d2      	b.n	803777a <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80375d4:	7cfb      	ldrb	r3, [r7, #19]
 80375d6:	2b03      	cmp	r3, #3
 80375d8:	f040 80cf 	bne.w	803777a <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 80375dc:	6878      	ldr	r0, [r7, #4]
 80375de:	f000 f8d7 	bl	8037790 <HAL_SPI_TxCpltCallback>
    return;
 80375e2:	e0ca      	b.n	803777a <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80375e4:	69fb      	ldr	r3, [r7, #28]
 80375e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80375ea:	2b00      	cmp	r3, #0
 80375ec:	d00d      	beq.n	803760a <HAL_SPI_IRQHandler+0x212>
 80375ee:	6a3b      	ldr	r3, [r7, #32]
 80375f0:	f003 0308 	and.w	r3, r3, #8
 80375f4:	2b00      	cmp	r3, #0
 80375f6:	d008      	beq.n	803760a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80375f8:	687b      	ldr	r3, [r7, #4]
 80375fa:	681b      	ldr	r3, [r3, #0]
 80375fc:	699a      	ldr	r2, [r3, #24]
 80375fe:	687b      	ldr	r3, [r7, #4]
 8037600:	681b      	ldr	r3, [r3, #0]
 8037602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8037606:	619a      	str	r2, [r3, #24]

    return;
 8037608:	e0ba      	b.n	8037780 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 803760a:	69bb      	ldr	r3, [r7, #24]
 803760c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8037610:	2b00      	cmp	r3, #0
 8037612:	f000 80b5 	beq.w	8037780 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8037616:	69bb      	ldr	r3, [r7, #24]
 8037618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803761c:	2b00      	cmp	r3, #0
 803761e:	d00f      	beq.n	8037640 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8037620:	687b      	ldr	r3, [r7, #4]
 8037622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037626:	f043 0204 	orr.w	r2, r3, #4
 803762a:	687b      	ldr	r3, [r7, #4]
 803762c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8037630:	687b      	ldr	r3, [r7, #4]
 8037632:	681b      	ldr	r3, [r3, #0]
 8037634:	699a      	ldr	r2, [r3, #24]
 8037636:	687b      	ldr	r3, [r7, #4]
 8037638:	681b      	ldr	r3, [r3, #0]
 803763a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803763e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8037640:	69bb      	ldr	r3, [r7, #24]
 8037642:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8037646:	2b00      	cmp	r3, #0
 8037648:	d00f      	beq.n	803766a <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 803764a:	687b      	ldr	r3, [r7, #4]
 803764c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037650:	f043 0201 	orr.w	r2, r3, #1
 8037654:	687b      	ldr	r3, [r7, #4]
 8037656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 803765a:	687b      	ldr	r3, [r7, #4]
 803765c:	681b      	ldr	r3, [r3, #0]
 803765e:	699a      	ldr	r2, [r3, #24]
 8037660:	687b      	ldr	r3, [r7, #4]
 8037662:	681b      	ldr	r3, [r3, #0]
 8037664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8037668:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 803766a:	69bb      	ldr	r3, [r7, #24]
 803766c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8037670:	2b00      	cmp	r3, #0
 8037672:	d00f      	beq.n	8037694 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8037674:	687b      	ldr	r3, [r7, #4]
 8037676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803767a:	f043 0208 	orr.w	r2, r3, #8
 803767e:	687b      	ldr	r3, [r7, #4]
 8037680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8037684:	687b      	ldr	r3, [r7, #4]
 8037686:	681b      	ldr	r3, [r3, #0]
 8037688:	699a      	ldr	r2, [r3, #24]
 803768a:	687b      	ldr	r3, [r7, #4]
 803768c:	681b      	ldr	r3, [r3, #0]
 803768e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8037692:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8037694:	69bb      	ldr	r3, [r7, #24]
 8037696:	f003 0320 	and.w	r3, r3, #32
 803769a:	2b00      	cmp	r3, #0
 803769c:	d00f      	beq.n	80376be <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 803769e:	687b      	ldr	r3, [r7, #4]
 80376a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80376a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80376a8:	687b      	ldr	r3, [r7, #4]
 80376aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80376ae:	687b      	ldr	r3, [r7, #4]
 80376b0:	681b      	ldr	r3, [r3, #0]
 80376b2:	699a      	ldr	r2, [r3, #24]
 80376b4:	687b      	ldr	r3, [r7, #4]
 80376b6:	681b      	ldr	r3, [r3, #0]
 80376b8:	f042 0220 	orr.w	r2, r2, #32
 80376bc:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80376be:	687b      	ldr	r3, [r7, #4]
 80376c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80376c4:	2b00      	cmp	r3, #0
 80376c6:	d05a      	beq.n	803777e <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80376c8:	687b      	ldr	r3, [r7, #4]
 80376ca:	681b      	ldr	r3, [r3, #0]
 80376cc:	681a      	ldr	r2, [r3, #0]
 80376ce:	687b      	ldr	r3, [r7, #4]
 80376d0:	681b      	ldr	r3, [r3, #0]
 80376d2:	f022 0201 	bic.w	r2, r2, #1
 80376d6:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80376d8:	687b      	ldr	r3, [r7, #4]
 80376da:	681b      	ldr	r3, [r3, #0]
 80376dc:	6919      	ldr	r1, [r3, #16]
 80376de:	687b      	ldr	r3, [r7, #4]
 80376e0:	681a      	ldr	r2, [r3, #0]
 80376e2:	4b29      	ldr	r3, [pc, #164]	; (8037788 <HAL_SPI_IRQHandler+0x390>)
 80376e4:	400b      	ands	r3, r1
 80376e6:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80376e8:	697b      	ldr	r3, [r7, #20]
 80376ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80376ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80376f2:	d138      	bne.n	8037766 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80376f4:	687b      	ldr	r3, [r7, #4]
 80376f6:	681b      	ldr	r3, [r3, #0]
 80376f8:	689a      	ldr	r2, [r3, #8]
 80376fa:	687b      	ldr	r3, [r7, #4]
 80376fc:	681b      	ldr	r3, [r3, #0]
 80376fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8037702:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8037704:	687b      	ldr	r3, [r7, #4]
 8037706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037708:	2b00      	cmp	r3, #0
 803770a:	d013      	beq.n	8037734 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 803770c:	687b      	ldr	r3, [r7, #4]
 803770e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037710:	4a1e      	ldr	r2, [pc, #120]	; (803778c <HAL_SPI_IRQHandler+0x394>)
 8037712:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8037714:	687b      	ldr	r3, [r7, #4]
 8037716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8037718:	4618      	mov	r0, r3
 803771a:	f7f8 fbc1 	bl	802fea0 <HAL_DMA_Abort_IT>
 803771e:	4603      	mov	r3, r0
 8037720:	2b00      	cmp	r3, #0
 8037722:	d007      	beq.n	8037734 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8037724:	687b      	ldr	r3, [r7, #4]
 8037726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803772a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803772e:	687b      	ldr	r3, [r7, #4]
 8037730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8037734:	687b      	ldr	r3, [r7, #4]
 8037736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037738:	2b00      	cmp	r3, #0
 803773a:	d020      	beq.n	803777e <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 803773c:	687b      	ldr	r3, [r7, #4]
 803773e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037740:	4a12      	ldr	r2, [pc, #72]	; (803778c <HAL_SPI_IRQHandler+0x394>)
 8037742:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8037744:	687b      	ldr	r3, [r7, #4]
 8037746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037748:	4618      	mov	r0, r3
 803774a:	f7f8 fba9 	bl	802fea0 <HAL_DMA_Abort_IT>
 803774e:	4603      	mov	r3, r0
 8037750:	2b00      	cmp	r3, #0
 8037752:	d014      	beq.n	803777e <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8037754:	687b      	ldr	r3, [r7, #4]
 8037756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803775a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803775e:	687b      	ldr	r3, [r7, #4]
 8037760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8037764:	e00b      	b.n	803777e <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8037766:	687b      	ldr	r3, [r7, #4]
 8037768:	2201      	movs	r2, #1
 803776a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 803776e:	6878      	ldr	r0, [r7, #4]
 8037770:	f000 f84a 	bl	8037808 <HAL_SPI_ErrorCallback>
    return;
 8037774:	e003      	b.n	803777e <HAL_SPI_IRQHandler+0x386>
    return;
 8037776:	bf00      	nop
 8037778:	e002      	b.n	8037780 <HAL_SPI_IRQHandler+0x388>
    return;
 803777a:	bf00      	nop
 803777c:	e000      	b.n	8037780 <HAL_SPI_IRQHandler+0x388>
    return;
 803777e:	bf00      	nop
  }
}
 8037780:	3728      	adds	r7, #40	; 0x28
 8037782:	46bd      	mov	sp, r7
 8037784:	bd80      	pop	{r7, pc}
 8037786:	bf00      	nop
 8037788:	fffffc94 	.word	0xfffffc94
 803778c:	080379a5 	.word	0x080379a5

08037790 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8037790:	b480      	push	{r7}
 8037792:	b083      	sub	sp, #12
 8037794:	af00      	add	r7, sp, #0
 8037796:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8037798:	bf00      	nop
 803779a:	370c      	adds	r7, #12
 803779c:	46bd      	mov	sp, r7
 803779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377a2:	4770      	bx	lr

080377a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80377a4:	b480      	push	{r7}
 80377a6:	b083      	sub	sp, #12
 80377a8:	af00      	add	r7, sp, #0
 80377aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80377ac:	bf00      	nop
 80377ae:	370c      	adds	r7, #12
 80377b0:	46bd      	mov	sp, r7
 80377b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377b6:	4770      	bx	lr

080377b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80377b8:	b480      	push	{r7}
 80377ba:	b083      	sub	sp, #12
 80377bc:	af00      	add	r7, sp, #0
 80377be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80377c0:	bf00      	nop
 80377c2:	370c      	adds	r7, #12
 80377c4:	46bd      	mov	sp, r7
 80377c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377ca:	4770      	bx	lr

080377cc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80377cc:	b480      	push	{r7}
 80377ce:	b083      	sub	sp, #12
 80377d0:	af00      	add	r7, sp, #0
 80377d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80377d4:	bf00      	nop
 80377d6:	370c      	adds	r7, #12
 80377d8:	46bd      	mov	sp, r7
 80377da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377de:	4770      	bx	lr

080377e0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80377e0:	b480      	push	{r7}
 80377e2:	b083      	sub	sp, #12
 80377e4:	af00      	add	r7, sp, #0
 80377e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80377e8:	bf00      	nop
 80377ea:	370c      	adds	r7, #12
 80377ec:	46bd      	mov	sp, r7
 80377ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377f2:	4770      	bx	lr

080377f4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80377f4:	b480      	push	{r7}
 80377f6:	b083      	sub	sp, #12
 80377f8:	af00      	add	r7, sp, #0
 80377fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80377fc:	bf00      	nop
 80377fe:	370c      	adds	r7, #12
 8037800:	46bd      	mov	sp, r7
 8037802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037806:	4770      	bx	lr

08037808 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8037808:	b480      	push	{r7}
 803780a:	b083      	sub	sp, #12
 803780c:	af00      	add	r7, sp, #0
 803780e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8037810:	bf00      	nop
 8037812:	370c      	adds	r7, #12
 8037814:	46bd      	mov	sp, r7
 8037816:	f85d 7b04 	ldr.w	r7, [sp], #4
 803781a:	4770      	bx	lr

0803781c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 803781c:	b480      	push	{r7}
 803781e:	b083      	sub	sp, #12
 8037820:	af00      	add	r7, sp, #0
 8037822:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8037824:	687b      	ldr	r3, [r7, #4]
 8037826:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803782a:	b2db      	uxtb	r3, r3
}
 803782c:	4618      	mov	r0, r3
 803782e:	370c      	adds	r7, #12
 8037830:	46bd      	mov	sp, r7
 8037832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037836:	4770      	bx	lr

08037838 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8037838:	b580      	push	{r7, lr}
 803783a:	b084      	sub	sp, #16
 803783c:	af00      	add	r7, sp, #0
 803783e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8037840:	687b      	ldr	r3, [r7, #4]
 8037842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037844:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8037846:	68fb      	ldr	r3, [r7, #12]
 8037848:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803784c:	b2db      	uxtb	r3, r3
 803784e:	2b07      	cmp	r3, #7
 8037850:	d011      	beq.n	8037876 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8037852:	68fb      	ldr	r3, [r7, #12]
 8037854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8037856:	69db      	ldr	r3, [r3, #28]
 8037858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803785c:	d103      	bne.n	8037866 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 803785e:	68f8      	ldr	r0, [r7, #12]
 8037860:	f7ff ff96 	bl	8037790 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8037864:	e007      	b.n	8037876 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8037866:	68fb      	ldr	r3, [r7, #12]
 8037868:	681b      	ldr	r3, [r3, #0]
 803786a:	691a      	ldr	r2, [r3, #16]
 803786c:	68fb      	ldr	r3, [r7, #12]
 803786e:	681b      	ldr	r3, [r3, #0]
 8037870:	f042 0208 	orr.w	r2, r2, #8
 8037874:	611a      	str	r2, [r3, #16]
}
 8037876:	bf00      	nop
 8037878:	3710      	adds	r7, #16
 803787a:	46bd      	mov	sp, r7
 803787c:	bd80      	pop	{r7, pc}

0803787e <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803787e:	b580      	push	{r7, lr}
 8037880:	b084      	sub	sp, #16
 8037882:	af00      	add	r7, sp, #0
 8037884:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8037886:	687b      	ldr	r3, [r7, #4]
 8037888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803788a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 803788c:	68fb      	ldr	r3, [r7, #12]
 803788e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037892:	b2db      	uxtb	r3, r3
 8037894:	2b07      	cmp	r3, #7
 8037896:	d011      	beq.n	80378bc <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8037898:	68fb      	ldr	r3, [r7, #12]
 803789a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803789c:	69db      	ldr	r3, [r3, #28]
 803789e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80378a2:	d103      	bne.n	80378ac <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80378a4:	68f8      	ldr	r0, [r7, #12]
 80378a6:	f7ff ff7d 	bl	80377a4 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80378aa:	e007      	b.n	80378bc <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80378ac:	68fb      	ldr	r3, [r7, #12]
 80378ae:	681b      	ldr	r3, [r3, #0]
 80378b0:	691a      	ldr	r2, [r3, #16]
 80378b2:	68fb      	ldr	r3, [r7, #12]
 80378b4:	681b      	ldr	r3, [r3, #0]
 80378b6:	f042 0208 	orr.w	r2, r2, #8
 80378ba:	611a      	str	r2, [r3, #16]
}
 80378bc:	bf00      	nop
 80378be:	3710      	adds	r7, #16
 80378c0:	46bd      	mov	sp, r7
 80378c2:	bd80      	pop	{r7, pc}

080378c4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80378c4:	b580      	push	{r7, lr}
 80378c6:	b084      	sub	sp, #16
 80378c8:	af00      	add	r7, sp, #0
 80378ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80378cc:	687b      	ldr	r3, [r7, #4]
 80378ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80378d0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80378d2:	68fb      	ldr	r3, [r7, #12]
 80378d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80378d8:	b2db      	uxtb	r3, r3
 80378da:	2b07      	cmp	r3, #7
 80378dc:	d011      	beq.n	8037902 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80378de:	68fb      	ldr	r3, [r7, #12]
 80378e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80378e2:	69db      	ldr	r3, [r3, #28]
 80378e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80378e8:	d103      	bne.n	80378f2 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80378ea:	68f8      	ldr	r0, [r7, #12]
 80378ec:	f7ff ff64 	bl	80377b8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80378f0:	e007      	b.n	8037902 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80378f2:	68fb      	ldr	r3, [r7, #12]
 80378f4:	681b      	ldr	r3, [r3, #0]
 80378f6:	691a      	ldr	r2, [r3, #16]
 80378f8:	68fb      	ldr	r3, [r7, #12]
 80378fa:	681b      	ldr	r3, [r3, #0]
 80378fc:	f042 0208 	orr.w	r2, r2, #8
 8037900:	611a      	str	r2, [r3, #16]
}
 8037902:	bf00      	nop
 8037904:	3710      	adds	r7, #16
 8037906:	46bd      	mov	sp, r7
 8037908:	bd80      	pop	{r7, pc}

0803790a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 803790a:	b580      	push	{r7, lr}
 803790c:	b084      	sub	sp, #16
 803790e:	af00      	add	r7, sp, #0
 8037910:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8037912:	687b      	ldr	r3, [r7, #4]
 8037914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037916:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8037918:	68f8      	ldr	r0, [r7, #12]
 803791a:	f7ff ff57 	bl	80377cc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803791e:	bf00      	nop
 8037920:	3710      	adds	r7, #16
 8037922:	46bd      	mov	sp, r7
 8037924:	bd80      	pop	{r7, pc}

08037926 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8037926:	b580      	push	{r7, lr}
 8037928:	b084      	sub	sp, #16
 803792a:	af00      	add	r7, sp, #0
 803792c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803792e:	687b      	ldr	r3, [r7, #4]
 8037930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037932:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8037934:	68f8      	ldr	r0, [r7, #12]
 8037936:	f7ff ff53 	bl	80377e0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 803793a:	bf00      	nop
 803793c:	3710      	adds	r7, #16
 803793e:	46bd      	mov	sp, r7
 8037940:	bd80      	pop	{r7, pc}

08037942 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8037942:	b580      	push	{r7, lr}
 8037944:	b084      	sub	sp, #16
 8037946:	af00      	add	r7, sp, #0
 8037948:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803794a:	687b      	ldr	r3, [r7, #4]
 803794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803794e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8037950:	68f8      	ldr	r0, [r7, #12]
 8037952:	f7ff ff4f 	bl	80377f4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8037956:	bf00      	nop
 8037958:	3710      	adds	r7, #16
 803795a:	46bd      	mov	sp, r7
 803795c:	bd80      	pop	{r7, pc}

0803795e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 803795e:	b580      	push	{r7, lr}
 8037960:	b084      	sub	sp, #16
 8037962:	af00      	add	r7, sp, #0
 8037964:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8037966:	687b      	ldr	r3, [r7, #4]
 8037968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803796a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 803796c:	6878      	ldr	r0, [r7, #4]
 803796e:	f7f9 fc15 	bl	803119c <HAL_DMA_GetError>
 8037972:	4603      	mov	r3, r0
 8037974:	2b02      	cmp	r3, #2
 8037976:	d011      	beq.n	803799c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8037978:	68f8      	ldr	r0, [r7, #12]
 803797a:	f000 f82d 	bl	80379d8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 803797e:	68fb      	ldr	r3, [r7, #12]
 8037980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037984:	f043 0210 	orr.w	r2, r3, #16
 8037988:	68fb      	ldr	r3, [r7, #12]
 803798a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 803798e:	68fb      	ldr	r3, [r7, #12]
 8037990:	2201      	movs	r2, #1
 8037992:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8037996:	68f8      	ldr	r0, [r7, #12]
 8037998:	f7ff ff36 	bl	8037808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 803799c:	bf00      	nop
 803799e:	3710      	adds	r7, #16
 80379a0:	46bd      	mov	sp, r7
 80379a2:	bd80      	pop	{r7, pc}

080379a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80379a4:	b580      	push	{r7, lr}
 80379a6:	b084      	sub	sp, #16
 80379a8:	af00      	add	r7, sp, #0
 80379aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80379ac:	687b      	ldr	r3, [r7, #4]
 80379ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80379b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80379b2:	68fb      	ldr	r3, [r7, #12]
 80379b4:	2200      	movs	r2, #0
 80379b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80379ba:	68fb      	ldr	r3, [r7, #12]
 80379bc:	2200      	movs	r2, #0
 80379be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80379c2:	68fb      	ldr	r3, [r7, #12]
 80379c4:	2201      	movs	r2, #1
 80379c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80379ca:	68f8      	ldr	r0, [r7, #12]
 80379cc:	f7ff ff1c 	bl	8037808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80379d0:	bf00      	nop
 80379d2:	3710      	adds	r7, #16
 80379d4:	46bd      	mov	sp, r7
 80379d6:	bd80      	pop	{r7, pc}

080379d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80379d8:	b480      	push	{r7}
 80379da:	b085      	sub	sp, #20
 80379dc:	af00      	add	r7, sp, #0
 80379de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80379e0:	687b      	ldr	r3, [r7, #4]
 80379e2:	681b      	ldr	r3, [r3, #0]
 80379e4:	695b      	ldr	r3, [r3, #20]
 80379e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80379e8:	687b      	ldr	r3, [r7, #4]
 80379ea:	681b      	ldr	r3, [r3, #0]
 80379ec:	699a      	ldr	r2, [r3, #24]
 80379ee:	687b      	ldr	r3, [r7, #4]
 80379f0:	681b      	ldr	r3, [r3, #0]
 80379f2:	f042 0208 	orr.w	r2, r2, #8
 80379f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80379f8:	687b      	ldr	r3, [r7, #4]
 80379fa:	681b      	ldr	r3, [r3, #0]
 80379fc:	699a      	ldr	r2, [r3, #24]
 80379fe:	687b      	ldr	r3, [r7, #4]
 8037a00:	681b      	ldr	r3, [r3, #0]
 8037a02:	f042 0210 	orr.w	r2, r2, #16
 8037a06:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8037a08:	687b      	ldr	r3, [r7, #4]
 8037a0a:	681b      	ldr	r3, [r3, #0]
 8037a0c:	681a      	ldr	r2, [r3, #0]
 8037a0e:	687b      	ldr	r3, [r7, #4]
 8037a10:	681b      	ldr	r3, [r3, #0]
 8037a12:	f022 0201 	bic.w	r2, r2, #1
 8037a16:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8037a18:	687b      	ldr	r3, [r7, #4]
 8037a1a:	681b      	ldr	r3, [r3, #0]
 8037a1c:	6919      	ldr	r1, [r3, #16]
 8037a1e:	687b      	ldr	r3, [r7, #4]
 8037a20:	681a      	ldr	r2, [r3, #0]
 8037a22:	4b3c      	ldr	r3, [pc, #240]	; (8037b14 <SPI_CloseTransfer+0x13c>)
 8037a24:	400b      	ands	r3, r1
 8037a26:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8037a28:	687b      	ldr	r3, [r7, #4]
 8037a2a:	681b      	ldr	r3, [r3, #0]
 8037a2c:	689a      	ldr	r2, [r3, #8]
 8037a2e:	687b      	ldr	r3, [r7, #4]
 8037a30:	681b      	ldr	r3, [r3, #0]
 8037a32:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8037a36:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8037a38:	687b      	ldr	r3, [r7, #4]
 8037a3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037a3e:	b2db      	uxtb	r3, r3
 8037a40:	2b04      	cmp	r3, #4
 8037a42:	d014      	beq.n	8037a6e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8037a44:	68fb      	ldr	r3, [r7, #12]
 8037a46:	f003 0320 	and.w	r3, r3, #32
 8037a4a:	2b00      	cmp	r3, #0
 8037a4c:	d00f      	beq.n	8037a6e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8037a4e:	687b      	ldr	r3, [r7, #4]
 8037a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037a54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8037a58:	687b      	ldr	r3, [r7, #4]
 8037a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8037a5e:	687b      	ldr	r3, [r7, #4]
 8037a60:	681b      	ldr	r3, [r3, #0]
 8037a62:	699a      	ldr	r2, [r3, #24]
 8037a64:	687b      	ldr	r3, [r7, #4]
 8037a66:	681b      	ldr	r3, [r3, #0]
 8037a68:	f042 0220 	orr.w	r2, r2, #32
 8037a6c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8037a6e:	687b      	ldr	r3, [r7, #4]
 8037a70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8037a74:	b2db      	uxtb	r3, r3
 8037a76:	2b03      	cmp	r3, #3
 8037a78:	d014      	beq.n	8037aa4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8037a7a:	68fb      	ldr	r3, [r7, #12]
 8037a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037a80:	2b00      	cmp	r3, #0
 8037a82:	d00f      	beq.n	8037aa4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8037a84:	687b      	ldr	r3, [r7, #4]
 8037a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037a8a:	f043 0204 	orr.w	r2, r3, #4
 8037a8e:	687b      	ldr	r3, [r7, #4]
 8037a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8037a94:	687b      	ldr	r3, [r7, #4]
 8037a96:	681b      	ldr	r3, [r3, #0]
 8037a98:	699a      	ldr	r2, [r3, #24]
 8037a9a:	687b      	ldr	r3, [r7, #4]
 8037a9c:	681b      	ldr	r3, [r3, #0]
 8037a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8037aa2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8037aa4:	68fb      	ldr	r3, [r7, #12]
 8037aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8037aaa:	2b00      	cmp	r3, #0
 8037aac:	d00f      	beq.n	8037ace <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8037aae:	687b      	ldr	r3, [r7, #4]
 8037ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037ab4:	f043 0201 	orr.w	r2, r3, #1
 8037ab8:	687b      	ldr	r3, [r7, #4]
 8037aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8037abe:	687b      	ldr	r3, [r7, #4]
 8037ac0:	681b      	ldr	r3, [r3, #0]
 8037ac2:	699a      	ldr	r2, [r3, #24]
 8037ac4:	687b      	ldr	r3, [r7, #4]
 8037ac6:	681b      	ldr	r3, [r3, #0]
 8037ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8037acc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8037ace:	68fb      	ldr	r3, [r7, #12]
 8037ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8037ad4:	2b00      	cmp	r3, #0
 8037ad6:	d00f      	beq.n	8037af8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8037ad8:	687b      	ldr	r3, [r7, #4]
 8037ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8037ade:	f043 0208 	orr.w	r2, r3, #8
 8037ae2:	687b      	ldr	r3, [r7, #4]
 8037ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8037ae8:	687b      	ldr	r3, [r7, #4]
 8037aea:	681b      	ldr	r3, [r3, #0]
 8037aec:	699a      	ldr	r2, [r3, #24]
 8037aee:	687b      	ldr	r3, [r7, #4]
 8037af0:	681b      	ldr	r3, [r3, #0]
 8037af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8037af6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8037af8:	687b      	ldr	r3, [r7, #4]
 8037afa:	2200      	movs	r2, #0
 8037afc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8037b00:	687b      	ldr	r3, [r7, #4]
 8037b02:	2200      	movs	r2, #0
 8037b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8037b08:	bf00      	nop
 8037b0a:	3714      	adds	r7, #20
 8037b0c:	46bd      	mov	sp, r7
 8037b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b12:	4770      	bx	lr
 8037b14:	fffffc90 	.word	0xfffffc90

08037b18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8037b18:	b480      	push	{r7}
 8037b1a:	b085      	sub	sp, #20
 8037b1c:	af00      	add	r7, sp, #0
 8037b1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8037b20:	687b      	ldr	r3, [r7, #4]
 8037b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8037b24:	095b      	lsrs	r3, r3, #5
 8037b26:	3301      	adds	r3, #1
 8037b28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8037b2a:	687b      	ldr	r3, [r7, #4]
 8037b2c:	68db      	ldr	r3, [r3, #12]
 8037b2e:	3301      	adds	r3, #1
 8037b30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8037b32:	68bb      	ldr	r3, [r7, #8]
 8037b34:	3307      	adds	r3, #7
 8037b36:	08db      	lsrs	r3, r3, #3
 8037b38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8037b3a:	68bb      	ldr	r3, [r7, #8]
 8037b3c:	68fa      	ldr	r2, [r7, #12]
 8037b3e:	fb02 f303 	mul.w	r3, r2, r3
}
 8037b42:	4618      	mov	r0, r3
 8037b44:	3714      	adds	r7, #20
 8037b46:	46bd      	mov	sp, r7
 8037b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b4c:	4770      	bx	lr

08037b4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8037b4e:	b580      	push	{r7, lr}
 8037b50:	b082      	sub	sp, #8
 8037b52:	af00      	add	r7, sp, #0
 8037b54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8037b56:	687b      	ldr	r3, [r7, #4]
 8037b58:	2b00      	cmp	r3, #0
 8037b5a:	d101      	bne.n	8037b60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8037b5c:	2301      	movs	r3, #1
 8037b5e:	e049      	b.n	8037bf4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8037b60:	687b      	ldr	r3, [r7, #4]
 8037b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8037b66:	b2db      	uxtb	r3, r3
 8037b68:	2b00      	cmp	r3, #0
 8037b6a:	d106      	bne.n	8037b7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8037b6c:	687b      	ldr	r3, [r7, #4]
 8037b6e:	2200      	movs	r2, #0
 8037b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8037b74:	6878      	ldr	r0, [r7, #4]
 8037b76:	f7f5 ff5b 	bl	802da30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8037b7a:	687b      	ldr	r3, [r7, #4]
 8037b7c:	2202      	movs	r2, #2
 8037b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8037b82:	687b      	ldr	r3, [r7, #4]
 8037b84:	681a      	ldr	r2, [r3, #0]
 8037b86:	687b      	ldr	r3, [r7, #4]
 8037b88:	3304      	adds	r3, #4
 8037b8a:	4619      	mov	r1, r3
 8037b8c:	4610      	mov	r0, r2
 8037b8e:	f000 faed 	bl	803816c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8037b92:	687b      	ldr	r3, [r7, #4]
 8037b94:	2201      	movs	r2, #1
 8037b96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8037b9a:	687b      	ldr	r3, [r7, #4]
 8037b9c:	2201      	movs	r2, #1
 8037b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8037ba2:	687b      	ldr	r3, [r7, #4]
 8037ba4:	2201      	movs	r2, #1
 8037ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8037baa:	687b      	ldr	r3, [r7, #4]
 8037bac:	2201      	movs	r2, #1
 8037bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8037bb2:	687b      	ldr	r3, [r7, #4]
 8037bb4:	2201      	movs	r2, #1
 8037bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8037bba:	687b      	ldr	r3, [r7, #4]
 8037bbc:	2201      	movs	r2, #1
 8037bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8037bc2:	687b      	ldr	r3, [r7, #4]
 8037bc4:	2201      	movs	r2, #1
 8037bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8037bca:	687b      	ldr	r3, [r7, #4]
 8037bcc:	2201      	movs	r2, #1
 8037bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8037bd2:	687b      	ldr	r3, [r7, #4]
 8037bd4:	2201      	movs	r2, #1
 8037bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8037bda:	687b      	ldr	r3, [r7, #4]
 8037bdc:	2201      	movs	r2, #1
 8037bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8037be2:	687b      	ldr	r3, [r7, #4]
 8037be4:	2201      	movs	r2, #1
 8037be6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8037bea:	687b      	ldr	r3, [r7, #4]
 8037bec:	2201      	movs	r2, #1
 8037bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8037bf2:	2300      	movs	r3, #0
}
 8037bf4:	4618      	mov	r0, r3
 8037bf6:	3708      	adds	r7, #8
 8037bf8:	46bd      	mov	sp, r7
 8037bfa:	bd80      	pop	{r7, pc}

08037bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8037bfc:	b480      	push	{r7}
 8037bfe:	b085      	sub	sp, #20
 8037c00:	af00      	add	r7, sp, #0
 8037c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8037c04:	687b      	ldr	r3, [r7, #4]
 8037c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8037c0a:	b2db      	uxtb	r3, r3
 8037c0c:	2b01      	cmp	r3, #1
 8037c0e:	d001      	beq.n	8037c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8037c10:	2301      	movs	r3, #1
 8037c12:	e054      	b.n	8037cbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8037c14:	687b      	ldr	r3, [r7, #4]
 8037c16:	2202      	movs	r2, #2
 8037c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8037c1c:	687b      	ldr	r3, [r7, #4]
 8037c1e:	681b      	ldr	r3, [r3, #0]
 8037c20:	68da      	ldr	r2, [r3, #12]
 8037c22:	687b      	ldr	r3, [r7, #4]
 8037c24:	681b      	ldr	r3, [r3, #0]
 8037c26:	f042 0201 	orr.w	r2, r2, #1
 8037c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8037c2c:	687b      	ldr	r3, [r7, #4]
 8037c2e:	681b      	ldr	r3, [r3, #0]
 8037c30:	4a26      	ldr	r2, [pc, #152]	; (8037ccc <HAL_TIM_Base_Start_IT+0xd0>)
 8037c32:	4293      	cmp	r3, r2
 8037c34:	d022      	beq.n	8037c7c <HAL_TIM_Base_Start_IT+0x80>
 8037c36:	687b      	ldr	r3, [r7, #4]
 8037c38:	681b      	ldr	r3, [r3, #0]
 8037c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8037c3e:	d01d      	beq.n	8037c7c <HAL_TIM_Base_Start_IT+0x80>
 8037c40:	687b      	ldr	r3, [r7, #4]
 8037c42:	681b      	ldr	r3, [r3, #0]
 8037c44:	4a22      	ldr	r2, [pc, #136]	; (8037cd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8037c46:	4293      	cmp	r3, r2
 8037c48:	d018      	beq.n	8037c7c <HAL_TIM_Base_Start_IT+0x80>
 8037c4a:	687b      	ldr	r3, [r7, #4]
 8037c4c:	681b      	ldr	r3, [r3, #0]
 8037c4e:	4a21      	ldr	r2, [pc, #132]	; (8037cd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8037c50:	4293      	cmp	r3, r2
 8037c52:	d013      	beq.n	8037c7c <HAL_TIM_Base_Start_IT+0x80>
 8037c54:	687b      	ldr	r3, [r7, #4]
 8037c56:	681b      	ldr	r3, [r3, #0]
 8037c58:	4a1f      	ldr	r2, [pc, #124]	; (8037cd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8037c5a:	4293      	cmp	r3, r2
 8037c5c:	d00e      	beq.n	8037c7c <HAL_TIM_Base_Start_IT+0x80>
 8037c5e:	687b      	ldr	r3, [r7, #4]
 8037c60:	681b      	ldr	r3, [r3, #0]
 8037c62:	4a1e      	ldr	r2, [pc, #120]	; (8037cdc <HAL_TIM_Base_Start_IT+0xe0>)
 8037c64:	4293      	cmp	r3, r2
 8037c66:	d009      	beq.n	8037c7c <HAL_TIM_Base_Start_IT+0x80>
 8037c68:	687b      	ldr	r3, [r7, #4]
 8037c6a:	681b      	ldr	r3, [r3, #0]
 8037c6c:	4a1c      	ldr	r2, [pc, #112]	; (8037ce0 <HAL_TIM_Base_Start_IT+0xe4>)
 8037c6e:	4293      	cmp	r3, r2
 8037c70:	d004      	beq.n	8037c7c <HAL_TIM_Base_Start_IT+0x80>
 8037c72:	687b      	ldr	r3, [r7, #4]
 8037c74:	681b      	ldr	r3, [r3, #0]
 8037c76:	4a1b      	ldr	r2, [pc, #108]	; (8037ce4 <HAL_TIM_Base_Start_IT+0xe8>)
 8037c78:	4293      	cmp	r3, r2
 8037c7a:	d115      	bne.n	8037ca8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8037c7c:	687b      	ldr	r3, [r7, #4]
 8037c7e:	681b      	ldr	r3, [r3, #0]
 8037c80:	689a      	ldr	r2, [r3, #8]
 8037c82:	4b19      	ldr	r3, [pc, #100]	; (8037ce8 <HAL_TIM_Base_Start_IT+0xec>)
 8037c84:	4013      	ands	r3, r2
 8037c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8037c88:	68fb      	ldr	r3, [r7, #12]
 8037c8a:	2b06      	cmp	r3, #6
 8037c8c:	d015      	beq.n	8037cba <HAL_TIM_Base_Start_IT+0xbe>
 8037c8e:	68fb      	ldr	r3, [r7, #12]
 8037c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8037c94:	d011      	beq.n	8037cba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8037c96:	687b      	ldr	r3, [r7, #4]
 8037c98:	681b      	ldr	r3, [r3, #0]
 8037c9a:	681a      	ldr	r2, [r3, #0]
 8037c9c:	687b      	ldr	r3, [r7, #4]
 8037c9e:	681b      	ldr	r3, [r3, #0]
 8037ca0:	f042 0201 	orr.w	r2, r2, #1
 8037ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8037ca6:	e008      	b.n	8037cba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8037ca8:	687b      	ldr	r3, [r7, #4]
 8037caa:	681b      	ldr	r3, [r3, #0]
 8037cac:	681a      	ldr	r2, [r3, #0]
 8037cae:	687b      	ldr	r3, [r7, #4]
 8037cb0:	681b      	ldr	r3, [r3, #0]
 8037cb2:	f042 0201 	orr.w	r2, r2, #1
 8037cb6:	601a      	str	r2, [r3, #0]
 8037cb8:	e000      	b.n	8037cbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8037cba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8037cbc:	2300      	movs	r3, #0
}
 8037cbe:	4618      	mov	r0, r3
 8037cc0:	3714      	adds	r7, #20
 8037cc2:	46bd      	mov	sp, r7
 8037cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037cc8:	4770      	bx	lr
 8037cca:	bf00      	nop
 8037ccc:	40010000 	.word	0x40010000
 8037cd0:	40000400 	.word	0x40000400
 8037cd4:	40000800 	.word	0x40000800
 8037cd8:	40000c00 	.word	0x40000c00
 8037cdc:	40010400 	.word	0x40010400
 8037ce0:	40001800 	.word	0x40001800
 8037ce4:	40014000 	.word	0x40014000
 8037ce8:	00010007 	.word	0x00010007

08037cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8037cec:	b580      	push	{r7, lr}
 8037cee:	b082      	sub	sp, #8
 8037cf0:	af00      	add	r7, sp, #0
 8037cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8037cf4:	687b      	ldr	r3, [r7, #4]
 8037cf6:	681b      	ldr	r3, [r3, #0]
 8037cf8:	691b      	ldr	r3, [r3, #16]
 8037cfa:	f003 0302 	and.w	r3, r3, #2
 8037cfe:	2b02      	cmp	r3, #2
 8037d00:	d122      	bne.n	8037d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8037d02:	687b      	ldr	r3, [r7, #4]
 8037d04:	681b      	ldr	r3, [r3, #0]
 8037d06:	68db      	ldr	r3, [r3, #12]
 8037d08:	f003 0302 	and.w	r3, r3, #2
 8037d0c:	2b02      	cmp	r3, #2
 8037d0e:	d11b      	bne.n	8037d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8037d10:	687b      	ldr	r3, [r7, #4]
 8037d12:	681b      	ldr	r3, [r3, #0]
 8037d14:	f06f 0202 	mvn.w	r2, #2
 8037d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8037d1a:	687b      	ldr	r3, [r7, #4]
 8037d1c:	2201      	movs	r2, #1
 8037d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8037d20:	687b      	ldr	r3, [r7, #4]
 8037d22:	681b      	ldr	r3, [r3, #0]
 8037d24:	699b      	ldr	r3, [r3, #24]
 8037d26:	f003 0303 	and.w	r3, r3, #3
 8037d2a:	2b00      	cmp	r3, #0
 8037d2c:	d003      	beq.n	8037d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8037d2e:	6878      	ldr	r0, [r7, #4]
 8037d30:	f000 f9fe 	bl	8038130 <HAL_TIM_IC_CaptureCallback>
 8037d34:	e005      	b.n	8037d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8037d36:	6878      	ldr	r0, [r7, #4]
 8037d38:	f000 f9f0 	bl	803811c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8037d3c:	6878      	ldr	r0, [r7, #4]
 8037d3e:	f000 fa01 	bl	8038144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8037d42:	687b      	ldr	r3, [r7, #4]
 8037d44:	2200      	movs	r2, #0
 8037d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8037d48:	687b      	ldr	r3, [r7, #4]
 8037d4a:	681b      	ldr	r3, [r3, #0]
 8037d4c:	691b      	ldr	r3, [r3, #16]
 8037d4e:	f003 0304 	and.w	r3, r3, #4
 8037d52:	2b04      	cmp	r3, #4
 8037d54:	d122      	bne.n	8037d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8037d56:	687b      	ldr	r3, [r7, #4]
 8037d58:	681b      	ldr	r3, [r3, #0]
 8037d5a:	68db      	ldr	r3, [r3, #12]
 8037d5c:	f003 0304 	and.w	r3, r3, #4
 8037d60:	2b04      	cmp	r3, #4
 8037d62:	d11b      	bne.n	8037d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8037d64:	687b      	ldr	r3, [r7, #4]
 8037d66:	681b      	ldr	r3, [r3, #0]
 8037d68:	f06f 0204 	mvn.w	r2, #4
 8037d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8037d6e:	687b      	ldr	r3, [r7, #4]
 8037d70:	2202      	movs	r2, #2
 8037d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8037d74:	687b      	ldr	r3, [r7, #4]
 8037d76:	681b      	ldr	r3, [r3, #0]
 8037d78:	699b      	ldr	r3, [r3, #24]
 8037d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8037d7e:	2b00      	cmp	r3, #0
 8037d80:	d003      	beq.n	8037d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8037d82:	6878      	ldr	r0, [r7, #4]
 8037d84:	f000 f9d4 	bl	8038130 <HAL_TIM_IC_CaptureCallback>
 8037d88:	e005      	b.n	8037d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8037d8a:	6878      	ldr	r0, [r7, #4]
 8037d8c:	f000 f9c6 	bl	803811c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8037d90:	6878      	ldr	r0, [r7, #4]
 8037d92:	f000 f9d7 	bl	8038144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8037d96:	687b      	ldr	r3, [r7, #4]
 8037d98:	2200      	movs	r2, #0
 8037d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8037d9c:	687b      	ldr	r3, [r7, #4]
 8037d9e:	681b      	ldr	r3, [r3, #0]
 8037da0:	691b      	ldr	r3, [r3, #16]
 8037da2:	f003 0308 	and.w	r3, r3, #8
 8037da6:	2b08      	cmp	r3, #8
 8037da8:	d122      	bne.n	8037df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8037daa:	687b      	ldr	r3, [r7, #4]
 8037dac:	681b      	ldr	r3, [r3, #0]
 8037dae:	68db      	ldr	r3, [r3, #12]
 8037db0:	f003 0308 	and.w	r3, r3, #8
 8037db4:	2b08      	cmp	r3, #8
 8037db6:	d11b      	bne.n	8037df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8037db8:	687b      	ldr	r3, [r7, #4]
 8037dba:	681b      	ldr	r3, [r3, #0]
 8037dbc:	f06f 0208 	mvn.w	r2, #8
 8037dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8037dc2:	687b      	ldr	r3, [r7, #4]
 8037dc4:	2204      	movs	r2, #4
 8037dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8037dc8:	687b      	ldr	r3, [r7, #4]
 8037dca:	681b      	ldr	r3, [r3, #0]
 8037dcc:	69db      	ldr	r3, [r3, #28]
 8037dce:	f003 0303 	and.w	r3, r3, #3
 8037dd2:	2b00      	cmp	r3, #0
 8037dd4:	d003      	beq.n	8037dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8037dd6:	6878      	ldr	r0, [r7, #4]
 8037dd8:	f000 f9aa 	bl	8038130 <HAL_TIM_IC_CaptureCallback>
 8037ddc:	e005      	b.n	8037dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8037dde:	6878      	ldr	r0, [r7, #4]
 8037de0:	f000 f99c 	bl	803811c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8037de4:	6878      	ldr	r0, [r7, #4]
 8037de6:	f000 f9ad 	bl	8038144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8037dea:	687b      	ldr	r3, [r7, #4]
 8037dec:	2200      	movs	r2, #0
 8037dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8037df0:	687b      	ldr	r3, [r7, #4]
 8037df2:	681b      	ldr	r3, [r3, #0]
 8037df4:	691b      	ldr	r3, [r3, #16]
 8037df6:	f003 0310 	and.w	r3, r3, #16
 8037dfa:	2b10      	cmp	r3, #16
 8037dfc:	d122      	bne.n	8037e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8037dfe:	687b      	ldr	r3, [r7, #4]
 8037e00:	681b      	ldr	r3, [r3, #0]
 8037e02:	68db      	ldr	r3, [r3, #12]
 8037e04:	f003 0310 	and.w	r3, r3, #16
 8037e08:	2b10      	cmp	r3, #16
 8037e0a:	d11b      	bne.n	8037e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8037e0c:	687b      	ldr	r3, [r7, #4]
 8037e0e:	681b      	ldr	r3, [r3, #0]
 8037e10:	f06f 0210 	mvn.w	r2, #16
 8037e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8037e16:	687b      	ldr	r3, [r7, #4]
 8037e18:	2208      	movs	r2, #8
 8037e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8037e1c:	687b      	ldr	r3, [r7, #4]
 8037e1e:	681b      	ldr	r3, [r3, #0]
 8037e20:	69db      	ldr	r3, [r3, #28]
 8037e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8037e26:	2b00      	cmp	r3, #0
 8037e28:	d003      	beq.n	8037e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8037e2a:	6878      	ldr	r0, [r7, #4]
 8037e2c:	f000 f980 	bl	8038130 <HAL_TIM_IC_CaptureCallback>
 8037e30:	e005      	b.n	8037e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8037e32:	6878      	ldr	r0, [r7, #4]
 8037e34:	f000 f972 	bl	803811c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8037e38:	6878      	ldr	r0, [r7, #4]
 8037e3a:	f000 f983 	bl	8038144 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8037e3e:	687b      	ldr	r3, [r7, #4]
 8037e40:	2200      	movs	r2, #0
 8037e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8037e44:	687b      	ldr	r3, [r7, #4]
 8037e46:	681b      	ldr	r3, [r3, #0]
 8037e48:	691b      	ldr	r3, [r3, #16]
 8037e4a:	f003 0301 	and.w	r3, r3, #1
 8037e4e:	2b01      	cmp	r3, #1
 8037e50:	d10e      	bne.n	8037e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8037e52:	687b      	ldr	r3, [r7, #4]
 8037e54:	681b      	ldr	r3, [r3, #0]
 8037e56:	68db      	ldr	r3, [r3, #12]
 8037e58:	f003 0301 	and.w	r3, r3, #1
 8037e5c:	2b01      	cmp	r3, #1
 8037e5e:	d107      	bne.n	8037e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8037e60:	687b      	ldr	r3, [r7, #4]
 8037e62:	681b      	ldr	r3, [r3, #0]
 8037e64:	f06f 0201 	mvn.w	r2, #1
 8037e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8037e6a:	6878      	ldr	r0, [r7, #4]
 8037e6c:	f7f5 f96a 	bl	802d144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8037e70:	687b      	ldr	r3, [r7, #4]
 8037e72:	681b      	ldr	r3, [r3, #0]
 8037e74:	691b      	ldr	r3, [r3, #16]
 8037e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8037e7a:	2b80      	cmp	r3, #128	; 0x80
 8037e7c:	d10e      	bne.n	8037e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8037e7e:	687b      	ldr	r3, [r7, #4]
 8037e80:	681b      	ldr	r3, [r3, #0]
 8037e82:	68db      	ldr	r3, [r3, #12]
 8037e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8037e88:	2b80      	cmp	r3, #128	; 0x80
 8037e8a:	d107      	bne.n	8037e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8037e8c:	687b      	ldr	r3, [r7, #4]
 8037e8e:	681b      	ldr	r3, [r3, #0]
 8037e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8037e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8037e96:	6878      	ldr	r0, [r7, #4]
 8037e98:	f000 fb38 	bl	803850c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8037e9c:	687b      	ldr	r3, [r7, #4]
 8037e9e:	681b      	ldr	r3, [r3, #0]
 8037ea0:	691b      	ldr	r3, [r3, #16]
 8037ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8037ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8037eaa:	d10e      	bne.n	8037eca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8037eac:	687b      	ldr	r3, [r7, #4]
 8037eae:	681b      	ldr	r3, [r3, #0]
 8037eb0:	68db      	ldr	r3, [r3, #12]
 8037eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8037eb6:	2b80      	cmp	r3, #128	; 0x80
 8037eb8:	d107      	bne.n	8037eca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8037eba:	687b      	ldr	r3, [r7, #4]
 8037ebc:	681b      	ldr	r3, [r3, #0]
 8037ebe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8037ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8037ec4:	6878      	ldr	r0, [r7, #4]
 8037ec6:	f000 fb2b 	bl	8038520 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8037eca:	687b      	ldr	r3, [r7, #4]
 8037ecc:	681b      	ldr	r3, [r3, #0]
 8037ece:	691b      	ldr	r3, [r3, #16]
 8037ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037ed4:	2b40      	cmp	r3, #64	; 0x40
 8037ed6:	d10e      	bne.n	8037ef6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8037ed8:	687b      	ldr	r3, [r7, #4]
 8037eda:	681b      	ldr	r3, [r3, #0]
 8037edc:	68db      	ldr	r3, [r3, #12]
 8037ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037ee2:	2b40      	cmp	r3, #64	; 0x40
 8037ee4:	d107      	bne.n	8037ef6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8037ee6:	687b      	ldr	r3, [r7, #4]
 8037ee8:	681b      	ldr	r3, [r3, #0]
 8037eea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8037eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8037ef0:	6878      	ldr	r0, [r7, #4]
 8037ef2:	f000 f931 	bl	8038158 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8037ef6:	687b      	ldr	r3, [r7, #4]
 8037ef8:	681b      	ldr	r3, [r3, #0]
 8037efa:	691b      	ldr	r3, [r3, #16]
 8037efc:	f003 0320 	and.w	r3, r3, #32
 8037f00:	2b20      	cmp	r3, #32
 8037f02:	d10e      	bne.n	8037f22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8037f04:	687b      	ldr	r3, [r7, #4]
 8037f06:	681b      	ldr	r3, [r3, #0]
 8037f08:	68db      	ldr	r3, [r3, #12]
 8037f0a:	f003 0320 	and.w	r3, r3, #32
 8037f0e:	2b20      	cmp	r3, #32
 8037f10:	d107      	bne.n	8037f22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8037f12:	687b      	ldr	r3, [r7, #4]
 8037f14:	681b      	ldr	r3, [r3, #0]
 8037f16:	f06f 0220 	mvn.w	r2, #32
 8037f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8037f1c:	6878      	ldr	r0, [r7, #4]
 8037f1e:	f000 faeb 	bl	80384f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8037f22:	bf00      	nop
 8037f24:	3708      	adds	r7, #8
 8037f26:	46bd      	mov	sp, r7
 8037f28:	bd80      	pop	{r7, pc}
	...

08037f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8037f2c:	b580      	push	{r7, lr}
 8037f2e:	b084      	sub	sp, #16
 8037f30:	af00      	add	r7, sp, #0
 8037f32:	6078      	str	r0, [r7, #4]
 8037f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8037f36:	2300      	movs	r3, #0
 8037f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8037f3a:	687b      	ldr	r3, [r7, #4]
 8037f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8037f40:	2b01      	cmp	r3, #1
 8037f42:	d101      	bne.n	8037f48 <HAL_TIM_ConfigClockSource+0x1c>
 8037f44:	2302      	movs	r3, #2
 8037f46:	e0dc      	b.n	8038102 <HAL_TIM_ConfigClockSource+0x1d6>
 8037f48:	687b      	ldr	r3, [r7, #4]
 8037f4a:	2201      	movs	r2, #1
 8037f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8037f50:	687b      	ldr	r3, [r7, #4]
 8037f52:	2202      	movs	r2, #2
 8037f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8037f58:	687b      	ldr	r3, [r7, #4]
 8037f5a:	681b      	ldr	r3, [r3, #0]
 8037f5c:	689b      	ldr	r3, [r3, #8]
 8037f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8037f60:	68ba      	ldr	r2, [r7, #8]
 8037f62:	4b6a      	ldr	r3, [pc, #424]	; (803810c <HAL_TIM_ConfigClockSource+0x1e0>)
 8037f64:	4013      	ands	r3, r2
 8037f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8037f68:	68bb      	ldr	r3, [r7, #8]
 8037f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8037f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8037f70:	687b      	ldr	r3, [r7, #4]
 8037f72:	681b      	ldr	r3, [r3, #0]
 8037f74:	68ba      	ldr	r2, [r7, #8]
 8037f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8037f78:	683b      	ldr	r3, [r7, #0]
 8037f7a:	681b      	ldr	r3, [r3, #0]
 8037f7c:	4a64      	ldr	r2, [pc, #400]	; (8038110 <HAL_TIM_ConfigClockSource+0x1e4>)
 8037f7e:	4293      	cmp	r3, r2
 8037f80:	f000 80a9 	beq.w	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8037f84:	4a62      	ldr	r2, [pc, #392]	; (8038110 <HAL_TIM_ConfigClockSource+0x1e4>)
 8037f86:	4293      	cmp	r3, r2
 8037f88:	f200 80ae 	bhi.w	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037f8c:	4a61      	ldr	r2, [pc, #388]	; (8038114 <HAL_TIM_ConfigClockSource+0x1e8>)
 8037f8e:	4293      	cmp	r3, r2
 8037f90:	f000 80a1 	beq.w	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8037f94:	4a5f      	ldr	r2, [pc, #380]	; (8038114 <HAL_TIM_ConfigClockSource+0x1e8>)
 8037f96:	4293      	cmp	r3, r2
 8037f98:	f200 80a6 	bhi.w	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037f9c:	4a5e      	ldr	r2, [pc, #376]	; (8038118 <HAL_TIM_ConfigClockSource+0x1ec>)
 8037f9e:	4293      	cmp	r3, r2
 8037fa0:	f000 8099 	beq.w	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8037fa4:	4a5c      	ldr	r2, [pc, #368]	; (8038118 <HAL_TIM_ConfigClockSource+0x1ec>)
 8037fa6:	4293      	cmp	r3, r2
 8037fa8:	f200 809e 	bhi.w	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037fac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8037fb0:	f000 8091 	beq.w	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8037fb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8037fb8:	f200 8096 	bhi.w	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8037fc0:	f000 8089 	beq.w	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8037fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8037fc8:	f200 808e 	bhi.w	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037fd0:	d03e      	beq.n	8038050 <HAL_TIM_ConfigClockSource+0x124>
 8037fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8037fd6:	f200 8087 	bhi.w	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8037fde:	f000 8086 	beq.w	80380ee <HAL_TIM_ConfigClockSource+0x1c2>
 8037fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8037fe6:	d87f      	bhi.n	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037fe8:	2b70      	cmp	r3, #112	; 0x70
 8037fea:	d01a      	beq.n	8038022 <HAL_TIM_ConfigClockSource+0xf6>
 8037fec:	2b70      	cmp	r3, #112	; 0x70
 8037fee:	d87b      	bhi.n	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037ff0:	2b60      	cmp	r3, #96	; 0x60
 8037ff2:	d050      	beq.n	8038096 <HAL_TIM_ConfigClockSource+0x16a>
 8037ff4:	2b60      	cmp	r3, #96	; 0x60
 8037ff6:	d877      	bhi.n	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8037ff8:	2b50      	cmp	r3, #80	; 0x50
 8037ffa:	d03c      	beq.n	8038076 <HAL_TIM_ConfigClockSource+0x14a>
 8037ffc:	2b50      	cmp	r3, #80	; 0x50
 8037ffe:	d873      	bhi.n	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8038000:	2b40      	cmp	r3, #64	; 0x40
 8038002:	d058      	beq.n	80380b6 <HAL_TIM_ConfigClockSource+0x18a>
 8038004:	2b40      	cmp	r3, #64	; 0x40
 8038006:	d86f      	bhi.n	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8038008:	2b30      	cmp	r3, #48	; 0x30
 803800a:	d064      	beq.n	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 803800c:	2b30      	cmp	r3, #48	; 0x30
 803800e:	d86b      	bhi.n	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8038010:	2b20      	cmp	r3, #32
 8038012:	d060      	beq.n	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8038014:	2b20      	cmp	r3, #32
 8038016:	d867      	bhi.n	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8038018:	2b00      	cmp	r3, #0
 803801a:	d05c      	beq.n	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 803801c:	2b10      	cmp	r3, #16
 803801e:	d05a      	beq.n	80380d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8038020:	e062      	b.n	80380e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8038022:	687b      	ldr	r3, [r7, #4]
 8038024:	6818      	ldr	r0, [r3, #0]
 8038026:	683b      	ldr	r3, [r7, #0]
 8038028:	6899      	ldr	r1, [r3, #8]
 803802a:	683b      	ldr	r3, [r7, #0]
 803802c:	685a      	ldr	r2, [r3, #4]
 803802e:	683b      	ldr	r3, [r7, #0]
 8038030:	68db      	ldr	r3, [r3, #12]
 8038032:	f000 f9b3 	bl	803839c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8038036:	687b      	ldr	r3, [r7, #4]
 8038038:	681b      	ldr	r3, [r3, #0]
 803803a:	689b      	ldr	r3, [r3, #8]
 803803c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 803803e:	68bb      	ldr	r3, [r7, #8]
 8038040:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8038044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8038046:	687b      	ldr	r3, [r7, #4]
 8038048:	681b      	ldr	r3, [r3, #0]
 803804a:	68ba      	ldr	r2, [r7, #8]
 803804c:	609a      	str	r2, [r3, #8]
      break;
 803804e:	e04f      	b.n	80380f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8038050:	687b      	ldr	r3, [r7, #4]
 8038052:	6818      	ldr	r0, [r3, #0]
 8038054:	683b      	ldr	r3, [r7, #0]
 8038056:	6899      	ldr	r1, [r3, #8]
 8038058:	683b      	ldr	r3, [r7, #0]
 803805a:	685a      	ldr	r2, [r3, #4]
 803805c:	683b      	ldr	r3, [r7, #0]
 803805e:	68db      	ldr	r3, [r3, #12]
 8038060:	f000 f99c 	bl	803839c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8038064:	687b      	ldr	r3, [r7, #4]
 8038066:	681b      	ldr	r3, [r3, #0]
 8038068:	689a      	ldr	r2, [r3, #8]
 803806a:	687b      	ldr	r3, [r7, #4]
 803806c:	681b      	ldr	r3, [r3, #0]
 803806e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8038072:	609a      	str	r2, [r3, #8]
      break;
 8038074:	e03c      	b.n	80380f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8038076:	687b      	ldr	r3, [r7, #4]
 8038078:	6818      	ldr	r0, [r3, #0]
 803807a:	683b      	ldr	r3, [r7, #0]
 803807c:	6859      	ldr	r1, [r3, #4]
 803807e:	683b      	ldr	r3, [r7, #0]
 8038080:	68db      	ldr	r3, [r3, #12]
 8038082:	461a      	mov	r2, r3
 8038084:	f000 f90c 	bl	80382a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8038088:	687b      	ldr	r3, [r7, #4]
 803808a:	681b      	ldr	r3, [r3, #0]
 803808c:	2150      	movs	r1, #80	; 0x50
 803808e:	4618      	mov	r0, r3
 8038090:	f000 f966 	bl	8038360 <TIM_ITRx_SetConfig>
      break;
 8038094:	e02c      	b.n	80380f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8038096:	687b      	ldr	r3, [r7, #4]
 8038098:	6818      	ldr	r0, [r3, #0]
 803809a:	683b      	ldr	r3, [r7, #0]
 803809c:	6859      	ldr	r1, [r3, #4]
 803809e:	683b      	ldr	r3, [r7, #0]
 80380a0:	68db      	ldr	r3, [r3, #12]
 80380a2:	461a      	mov	r2, r3
 80380a4:	f000 f92b 	bl	80382fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80380a8:	687b      	ldr	r3, [r7, #4]
 80380aa:	681b      	ldr	r3, [r3, #0]
 80380ac:	2160      	movs	r1, #96	; 0x60
 80380ae:	4618      	mov	r0, r3
 80380b0:	f000 f956 	bl	8038360 <TIM_ITRx_SetConfig>
      break;
 80380b4:	e01c      	b.n	80380f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80380b6:	687b      	ldr	r3, [r7, #4]
 80380b8:	6818      	ldr	r0, [r3, #0]
 80380ba:	683b      	ldr	r3, [r7, #0]
 80380bc:	6859      	ldr	r1, [r3, #4]
 80380be:	683b      	ldr	r3, [r7, #0]
 80380c0:	68db      	ldr	r3, [r3, #12]
 80380c2:	461a      	mov	r2, r3
 80380c4:	f000 f8ec 	bl	80382a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80380c8:	687b      	ldr	r3, [r7, #4]
 80380ca:	681b      	ldr	r3, [r3, #0]
 80380cc:	2140      	movs	r1, #64	; 0x40
 80380ce:	4618      	mov	r0, r3
 80380d0:	f000 f946 	bl	8038360 <TIM_ITRx_SetConfig>
      break;
 80380d4:	e00c      	b.n	80380f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80380d6:	687b      	ldr	r3, [r7, #4]
 80380d8:	681a      	ldr	r2, [r3, #0]
 80380da:	683b      	ldr	r3, [r7, #0]
 80380dc:	681b      	ldr	r3, [r3, #0]
 80380de:	4619      	mov	r1, r3
 80380e0:	4610      	mov	r0, r2
 80380e2:	f000 f93d 	bl	8038360 <TIM_ITRx_SetConfig>
      break;
 80380e6:	e003      	b.n	80380f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80380e8:	2301      	movs	r3, #1
 80380ea:	73fb      	strb	r3, [r7, #15]
      break;
 80380ec:	e000      	b.n	80380f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80380ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80380f0:	687b      	ldr	r3, [r7, #4]
 80380f2:	2201      	movs	r2, #1
 80380f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80380f8:	687b      	ldr	r3, [r7, #4]
 80380fa:	2200      	movs	r2, #0
 80380fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8038100:	7bfb      	ldrb	r3, [r7, #15]
}
 8038102:	4618      	mov	r0, r3
 8038104:	3710      	adds	r7, #16
 8038106:	46bd      	mov	sp, r7
 8038108:	bd80      	pop	{r7, pc}
 803810a:	bf00      	nop
 803810c:	ffceff88 	.word	0xffceff88
 8038110:	00100040 	.word	0x00100040
 8038114:	00100030 	.word	0x00100030
 8038118:	00100020 	.word	0x00100020

0803811c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 803811c:	b480      	push	{r7}
 803811e:	b083      	sub	sp, #12
 8038120:	af00      	add	r7, sp, #0
 8038122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8038124:	bf00      	nop
 8038126:	370c      	adds	r7, #12
 8038128:	46bd      	mov	sp, r7
 803812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803812e:	4770      	bx	lr

08038130 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8038130:	b480      	push	{r7}
 8038132:	b083      	sub	sp, #12
 8038134:	af00      	add	r7, sp, #0
 8038136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8038138:	bf00      	nop
 803813a:	370c      	adds	r7, #12
 803813c:	46bd      	mov	sp, r7
 803813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038142:	4770      	bx	lr

08038144 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8038144:	b480      	push	{r7}
 8038146:	b083      	sub	sp, #12
 8038148:	af00      	add	r7, sp, #0
 803814a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 803814c:	bf00      	nop
 803814e:	370c      	adds	r7, #12
 8038150:	46bd      	mov	sp, r7
 8038152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038156:	4770      	bx	lr

08038158 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8038158:	b480      	push	{r7}
 803815a:	b083      	sub	sp, #12
 803815c:	af00      	add	r7, sp, #0
 803815e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8038160:	bf00      	nop
 8038162:	370c      	adds	r7, #12
 8038164:	46bd      	mov	sp, r7
 8038166:	f85d 7b04 	ldr.w	r7, [sp], #4
 803816a:	4770      	bx	lr

0803816c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 803816c:	b480      	push	{r7}
 803816e:	b085      	sub	sp, #20
 8038170:	af00      	add	r7, sp, #0
 8038172:	6078      	str	r0, [r7, #4]
 8038174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8038176:	687b      	ldr	r3, [r7, #4]
 8038178:	681b      	ldr	r3, [r3, #0]
 803817a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 803817c:	687b      	ldr	r3, [r7, #4]
 803817e:	4a40      	ldr	r2, [pc, #256]	; (8038280 <TIM_Base_SetConfig+0x114>)
 8038180:	4293      	cmp	r3, r2
 8038182:	d013      	beq.n	80381ac <TIM_Base_SetConfig+0x40>
 8038184:	687b      	ldr	r3, [r7, #4]
 8038186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803818a:	d00f      	beq.n	80381ac <TIM_Base_SetConfig+0x40>
 803818c:	687b      	ldr	r3, [r7, #4]
 803818e:	4a3d      	ldr	r2, [pc, #244]	; (8038284 <TIM_Base_SetConfig+0x118>)
 8038190:	4293      	cmp	r3, r2
 8038192:	d00b      	beq.n	80381ac <TIM_Base_SetConfig+0x40>
 8038194:	687b      	ldr	r3, [r7, #4]
 8038196:	4a3c      	ldr	r2, [pc, #240]	; (8038288 <TIM_Base_SetConfig+0x11c>)
 8038198:	4293      	cmp	r3, r2
 803819a:	d007      	beq.n	80381ac <TIM_Base_SetConfig+0x40>
 803819c:	687b      	ldr	r3, [r7, #4]
 803819e:	4a3b      	ldr	r2, [pc, #236]	; (803828c <TIM_Base_SetConfig+0x120>)
 80381a0:	4293      	cmp	r3, r2
 80381a2:	d003      	beq.n	80381ac <TIM_Base_SetConfig+0x40>
 80381a4:	687b      	ldr	r3, [r7, #4]
 80381a6:	4a3a      	ldr	r2, [pc, #232]	; (8038290 <TIM_Base_SetConfig+0x124>)
 80381a8:	4293      	cmp	r3, r2
 80381aa:	d108      	bne.n	80381be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80381ac:	68fb      	ldr	r3, [r7, #12]
 80381ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80381b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80381b4:	683b      	ldr	r3, [r7, #0]
 80381b6:	685b      	ldr	r3, [r3, #4]
 80381b8:	68fa      	ldr	r2, [r7, #12]
 80381ba:	4313      	orrs	r3, r2
 80381bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80381be:	687b      	ldr	r3, [r7, #4]
 80381c0:	4a2f      	ldr	r2, [pc, #188]	; (8038280 <TIM_Base_SetConfig+0x114>)
 80381c2:	4293      	cmp	r3, r2
 80381c4:	d01f      	beq.n	8038206 <TIM_Base_SetConfig+0x9a>
 80381c6:	687b      	ldr	r3, [r7, #4]
 80381c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80381cc:	d01b      	beq.n	8038206 <TIM_Base_SetConfig+0x9a>
 80381ce:	687b      	ldr	r3, [r7, #4]
 80381d0:	4a2c      	ldr	r2, [pc, #176]	; (8038284 <TIM_Base_SetConfig+0x118>)
 80381d2:	4293      	cmp	r3, r2
 80381d4:	d017      	beq.n	8038206 <TIM_Base_SetConfig+0x9a>
 80381d6:	687b      	ldr	r3, [r7, #4]
 80381d8:	4a2b      	ldr	r2, [pc, #172]	; (8038288 <TIM_Base_SetConfig+0x11c>)
 80381da:	4293      	cmp	r3, r2
 80381dc:	d013      	beq.n	8038206 <TIM_Base_SetConfig+0x9a>
 80381de:	687b      	ldr	r3, [r7, #4]
 80381e0:	4a2a      	ldr	r2, [pc, #168]	; (803828c <TIM_Base_SetConfig+0x120>)
 80381e2:	4293      	cmp	r3, r2
 80381e4:	d00f      	beq.n	8038206 <TIM_Base_SetConfig+0x9a>
 80381e6:	687b      	ldr	r3, [r7, #4]
 80381e8:	4a29      	ldr	r2, [pc, #164]	; (8038290 <TIM_Base_SetConfig+0x124>)
 80381ea:	4293      	cmp	r3, r2
 80381ec:	d00b      	beq.n	8038206 <TIM_Base_SetConfig+0x9a>
 80381ee:	687b      	ldr	r3, [r7, #4]
 80381f0:	4a28      	ldr	r2, [pc, #160]	; (8038294 <TIM_Base_SetConfig+0x128>)
 80381f2:	4293      	cmp	r3, r2
 80381f4:	d007      	beq.n	8038206 <TIM_Base_SetConfig+0x9a>
 80381f6:	687b      	ldr	r3, [r7, #4]
 80381f8:	4a27      	ldr	r2, [pc, #156]	; (8038298 <TIM_Base_SetConfig+0x12c>)
 80381fa:	4293      	cmp	r3, r2
 80381fc:	d003      	beq.n	8038206 <TIM_Base_SetConfig+0x9a>
 80381fe:	687b      	ldr	r3, [r7, #4]
 8038200:	4a26      	ldr	r2, [pc, #152]	; (803829c <TIM_Base_SetConfig+0x130>)
 8038202:	4293      	cmp	r3, r2
 8038204:	d108      	bne.n	8038218 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8038206:	68fb      	ldr	r3, [r7, #12]
 8038208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803820c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 803820e:	683b      	ldr	r3, [r7, #0]
 8038210:	68db      	ldr	r3, [r3, #12]
 8038212:	68fa      	ldr	r2, [r7, #12]
 8038214:	4313      	orrs	r3, r2
 8038216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8038218:	68fb      	ldr	r3, [r7, #12]
 803821a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 803821e:	683b      	ldr	r3, [r7, #0]
 8038220:	695b      	ldr	r3, [r3, #20]
 8038222:	4313      	orrs	r3, r2
 8038224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8038226:	687b      	ldr	r3, [r7, #4]
 8038228:	68fa      	ldr	r2, [r7, #12]
 803822a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 803822c:	683b      	ldr	r3, [r7, #0]
 803822e:	689a      	ldr	r2, [r3, #8]
 8038230:	687b      	ldr	r3, [r7, #4]
 8038232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8038234:	683b      	ldr	r3, [r7, #0]
 8038236:	681a      	ldr	r2, [r3, #0]
 8038238:	687b      	ldr	r3, [r7, #4]
 803823a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 803823c:	687b      	ldr	r3, [r7, #4]
 803823e:	4a10      	ldr	r2, [pc, #64]	; (8038280 <TIM_Base_SetConfig+0x114>)
 8038240:	4293      	cmp	r3, r2
 8038242:	d00f      	beq.n	8038264 <TIM_Base_SetConfig+0xf8>
 8038244:	687b      	ldr	r3, [r7, #4]
 8038246:	4a12      	ldr	r2, [pc, #72]	; (8038290 <TIM_Base_SetConfig+0x124>)
 8038248:	4293      	cmp	r3, r2
 803824a:	d00b      	beq.n	8038264 <TIM_Base_SetConfig+0xf8>
 803824c:	687b      	ldr	r3, [r7, #4]
 803824e:	4a11      	ldr	r2, [pc, #68]	; (8038294 <TIM_Base_SetConfig+0x128>)
 8038250:	4293      	cmp	r3, r2
 8038252:	d007      	beq.n	8038264 <TIM_Base_SetConfig+0xf8>
 8038254:	687b      	ldr	r3, [r7, #4]
 8038256:	4a10      	ldr	r2, [pc, #64]	; (8038298 <TIM_Base_SetConfig+0x12c>)
 8038258:	4293      	cmp	r3, r2
 803825a:	d003      	beq.n	8038264 <TIM_Base_SetConfig+0xf8>
 803825c:	687b      	ldr	r3, [r7, #4]
 803825e:	4a0f      	ldr	r2, [pc, #60]	; (803829c <TIM_Base_SetConfig+0x130>)
 8038260:	4293      	cmp	r3, r2
 8038262:	d103      	bne.n	803826c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8038264:	683b      	ldr	r3, [r7, #0]
 8038266:	691a      	ldr	r2, [r3, #16]
 8038268:	687b      	ldr	r3, [r7, #4]
 803826a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 803826c:	687b      	ldr	r3, [r7, #4]
 803826e:	2201      	movs	r2, #1
 8038270:	615a      	str	r2, [r3, #20]
}
 8038272:	bf00      	nop
 8038274:	3714      	adds	r7, #20
 8038276:	46bd      	mov	sp, r7
 8038278:	f85d 7b04 	ldr.w	r7, [sp], #4
 803827c:	4770      	bx	lr
 803827e:	bf00      	nop
 8038280:	40010000 	.word	0x40010000
 8038284:	40000400 	.word	0x40000400
 8038288:	40000800 	.word	0x40000800
 803828c:	40000c00 	.word	0x40000c00
 8038290:	40010400 	.word	0x40010400
 8038294:	40014000 	.word	0x40014000
 8038298:	40014400 	.word	0x40014400
 803829c:	40014800 	.word	0x40014800

080382a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80382a0:	b480      	push	{r7}
 80382a2:	b087      	sub	sp, #28
 80382a4:	af00      	add	r7, sp, #0
 80382a6:	60f8      	str	r0, [r7, #12]
 80382a8:	60b9      	str	r1, [r7, #8]
 80382aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80382ac:	68fb      	ldr	r3, [r7, #12]
 80382ae:	6a1b      	ldr	r3, [r3, #32]
 80382b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80382b2:	68fb      	ldr	r3, [r7, #12]
 80382b4:	6a1b      	ldr	r3, [r3, #32]
 80382b6:	f023 0201 	bic.w	r2, r3, #1
 80382ba:	68fb      	ldr	r3, [r7, #12]
 80382bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80382be:	68fb      	ldr	r3, [r7, #12]
 80382c0:	699b      	ldr	r3, [r3, #24]
 80382c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80382c4:	693b      	ldr	r3, [r7, #16]
 80382c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80382ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80382cc:	687b      	ldr	r3, [r7, #4]
 80382ce:	011b      	lsls	r3, r3, #4
 80382d0:	693a      	ldr	r2, [r7, #16]
 80382d2:	4313      	orrs	r3, r2
 80382d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80382d6:	697b      	ldr	r3, [r7, #20]
 80382d8:	f023 030a 	bic.w	r3, r3, #10
 80382dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80382de:	697a      	ldr	r2, [r7, #20]
 80382e0:	68bb      	ldr	r3, [r7, #8]
 80382e2:	4313      	orrs	r3, r2
 80382e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80382e6:	68fb      	ldr	r3, [r7, #12]
 80382e8:	693a      	ldr	r2, [r7, #16]
 80382ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80382ec:	68fb      	ldr	r3, [r7, #12]
 80382ee:	697a      	ldr	r2, [r7, #20]
 80382f0:	621a      	str	r2, [r3, #32]
}
 80382f2:	bf00      	nop
 80382f4:	371c      	adds	r7, #28
 80382f6:	46bd      	mov	sp, r7
 80382f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80382fc:	4770      	bx	lr

080382fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80382fe:	b480      	push	{r7}
 8038300:	b087      	sub	sp, #28
 8038302:	af00      	add	r7, sp, #0
 8038304:	60f8      	str	r0, [r7, #12]
 8038306:	60b9      	str	r1, [r7, #8]
 8038308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 803830a:	68fb      	ldr	r3, [r7, #12]
 803830c:	6a1b      	ldr	r3, [r3, #32]
 803830e:	f023 0210 	bic.w	r2, r3, #16
 8038312:	68fb      	ldr	r3, [r7, #12]
 8038314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8038316:	68fb      	ldr	r3, [r7, #12]
 8038318:	699b      	ldr	r3, [r3, #24]
 803831a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 803831c:	68fb      	ldr	r3, [r7, #12]
 803831e:	6a1b      	ldr	r3, [r3, #32]
 8038320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8038322:	697b      	ldr	r3, [r7, #20]
 8038324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8038328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 803832a:	687b      	ldr	r3, [r7, #4]
 803832c:	031b      	lsls	r3, r3, #12
 803832e:	697a      	ldr	r2, [r7, #20]
 8038330:	4313      	orrs	r3, r2
 8038332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8038334:	693b      	ldr	r3, [r7, #16]
 8038336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 803833a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 803833c:	68bb      	ldr	r3, [r7, #8]
 803833e:	011b      	lsls	r3, r3, #4
 8038340:	693a      	ldr	r2, [r7, #16]
 8038342:	4313      	orrs	r3, r2
 8038344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8038346:	68fb      	ldr	r3, [r7, #12]
 8038348:	697a      	ldr	r2, [r7, #20]
 803834a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 803834c:	68fb      	ldr	r3, [r7, #12]
 803834e:	693a      	ldr	r2, [r7, #16]
 8038350:	621a      	str	r2, [r3, #32]
}
 8038352:	bf00      	nop
 8038354:	371c      	adds	r7, #28
 8038356:	46bd      	mov	sp, r7
 8038358:	f85d 7b04 	ldr.w	r7, [sp], #4
 803835c:	4770      	bx	lr
	...

08038360 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8038360:	b480      	push	{r7}
 8038362:	b085      	sub	sp, #20
 8038364:	af00      	add	r7, sp, #0
 8038366:	6078      	str	r0, [r7, #4]
 8038368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 803836a:	687b      	ldr	r3, [r7, #4]
 803836c:	689b      	ldr	r3, [r3, #8]
 803836e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8038370:	68fa      	ldr	r2, [r7, #12]
 8038372:	4b09      	ldr	r3, [pc, #36]	; (8038398 <TIM_ITRx_SetConfig+0x38>)
 8038374:	4013      	ands	r3, r2
 8038376:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8038378:	683a      	ldr	r2, [r7, #0]
 803837a:	68fb      	ldr	r3, [r7, #12]
 803837c:	4313      	orrs	r3, r2
 803837e:	f043 0307 	orr.w	r3, r3, #7
 8038382:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8038384:	687b      	ldr	r3, [r7, #4]
 8038386:	68fa      	ldr	r2, [r7, #12]
 8038388:	609a      	str	r2, [r3, #8]
}
 803838a:	bf00      	nop
 803838c:	3714      	adds	r7, #20
 803838e:	46bd      	mov	sp, r7
 8038390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038394:	4770      	bx	lr
 8038396:	bf00      	nop
 8038398:	ffcfff8f 	.word	0xffcfff8f

0803839c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 803839c:	b480      	push	{r7}
 803839e:	b087      	sub	sp, #28
 80383a0:	af00      	add	r7, sp, #0
 80383a2:	60f8      	str	r0, [r7, #12]
 80383a4:	60b9      	str	r1, [r7, #8]
 80383a6:	607a      	str	r2, [r7, #4]
 80383a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80383aa:	68fb      	ldr	r3, [r7, #12]
 80383ac:	689b      	ldr	r3, [r3, #8]
 80383ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80383b0:	697b      	ldr	r3, [r7, #20]
 80383b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80383b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80383b8:	683b      	ldr	r3, [r7, #0]
 80383ba:	021a      	lsls	r2, r3, #8
 80383bc:	687b      	ldr	r3, [r7, #4]
 80383be:	431a      	orrs	r2, r3
 80383c0:	68bb      	ldr	r3, [r7, #8]
 80383c2:	4313      	orrs	r3, r2
 80383c4:	697a      	ldr	r2, [r7, #20]
 80383c6:	4313      	orrs	r3, r2
 80383c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80383ca:	68fb      	ldr	r3, [r7, #12]
 80383cc:	697a      	ldr	r2, [r7, #20]
 80383ce:	609a      	str	r2, [r3, #8]
}
 80383d0:	bf00      	nop
 80383d2:	371c      	adds	r7, #28
 80383d4:	46bd      	mov	sp, r7
 80383d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80383da:	4770      	bx	lr

080383dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80383dc:	b480      	push	{r7}
 80383de:	b085      	sub	sp, #20
 80383e0:	af00      	add	r7, sp, #0
 80383e2:	6078      	str	r0, [r7, #4]
 80383e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80383e6:	687b      	ldr	r3, [r7, #4]
 80383e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80383ec:	2b01      	cmp	r3, #1
 80383ee:	d101      	bne.n	80383f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80383f0:	2302      	movs	r3, #2
 80383f2:	e06d      	b.n	80384d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80383f4:	687b      	ldr	r3, [r7, #4]
 80383f6:	2201      	movs	r2, #1
 80383f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80383fc:	687b      	ldr	r3, [r7, #4]
 80383fe:	2202      	movs	r2, #2
 8038400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8038404:	687b      	ldr	r3, [r7, #4]
 8038406:	681b      	ldr	r3, [r3, #0]
 8038408:	685b      	ldr	r3, [r3, #4]
 803840a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 803840c:	687b      	ldr	r3, [r7, #4]
 803840e:	681b      	ldr	r3, [r3, #0]
 8038410:	689b      	ldr	r3, [r3, #8]
 8038412:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8038414:	687b      	ldr	r3, [r7, #4]
 8038416:	681b      	ldr	r3, [r3, #0]
 8038418:	4a30      	ldr	r2, [pc, #192]	; (80384dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 803841a:	4293      	cmp	r3, r2
 803841c:	d004      	beq.n	8038428 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 803841e:	687b      	ldr	r3, [r7, #4]
 8038420:	681b      	ldr	r3, [r3, #0]
 8038422:	4a2f      	ldr	r2, [pc, #188]	; (80384e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8038424:	4293      	cmp	r3, r2
 8038426:	d108      	bne.n	803843a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8038428:	68fb      	ldr	r3, [r7, #12]
 803842a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 803842e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8038430:	683b      	ldr	r3, [r7, #0]
 8038432:	685b      	ldr	r3, [r3, #4]
 8038434:	68fa      	ldr	r2, [r7, #12]
 8038436:	4313      	orrs	r3, r2
 8038438:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 803843a:	68fb      	ldr	r3, [r7, #12]
 803843c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8038440:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8038442:	683b      	ldr	r3, [r7, #0]
 8038444:	681b      	ldr	r3, [r3, #0]
 8038446:	68fa      	ldr	r2, [r7, #12]
 8038448:	4313      	orrs	r3, r2
 803844a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 803844c:	687b      	ldr	r3, [r7, #4]
 803844e:	681b      	ldr	r3, [r3, #0]
 8038450:	68fa      	ldr	r2, [r7, #12]
 8038452:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8038454:	687b      	ldr	r3, [r7, #4]
 8038456:	681b      	ldr	r3, [r3, #0]
 8038458:	4a20      	ldr	r2, [pc, #128]	; (80384dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 803845a:	4293      	cmp	r3, r2
 803845c:	d022      	beq.n	80384a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803845e:	687b      	ldr	r3, [r7, #4]
 8038460:	681b      	ldr	r3, [r3, #0]
 8038462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8038466:	d01d      	beq.n	80384a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8038468:	687b      	ldr	r3, [r7, #4]
 803846a:	681b      	ldr	r3, [r3, #0]
 803846c:	4a1d      	ldr	r2, [pc, #116]	; (80384e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 803846e:	4293      	cmp	r3, r2
 8038470:	d018      	beq.n	80384a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8038472:	687b      	ldr	r3, [r7, #4]
 8038474:	681b      	ldr	r3, [r3, #0]
 8038476:	4a1c      	ldr	r2, [pc, #112]	; (80384e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8038478:	4293      	cmp	r3, r2
 803847a:	d013      	beq.n	80384a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803847c:	687b      	ldr	r3, [r7, #4]
 803847e:	681b      	ldr	r3, [r3, #0]
 8038480:	4a1a      	ldr	r2, [pc, #104]	; (80384ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8038482:	4293      	cmp	r3, r2
 8038484:	d00e      	beq.n	80384a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8038486:	687b      	ldr	r3, [r7, #4]
 8038488:	681b      	ldr	r3, [r3, #0]
 803848a:	4a15      	ldr	r2, [pc, #84]	; (80384e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 803848c:	4293      	cmp	r3, r2
 803848e:	d009      	beq.n	80384a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8038490:	687b      	ldr	r3, [r7, #4]
 8038492:	681b      	ldr	r3, [r3, #0]
 8038494:	4a16      	ldr	r2, [pc, #88]	; (80384f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8038496:	4293      	cmp	r3, r2
 8038498:	d004      	beq.n	80384a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 803849a:	687b      	ldr	r3, [r7, #4]
 803849c:	681b      	ldr	r3, [r3, #0]
 803849e:	4a15      	ldr	r2, [pc, #84]	; (80384f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80384a0:	4293      	cmp	r3, r2
 80384a2:	d10c      	bne.n	80384be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80384a4:	68bb      	ldr	r3, [r7, #8]
 80384a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80384aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80384ac:	683b      	ldr	r3, [r7, #0]
 80384ae:	689b      	ldr	r3, [r3, #8]
 80384b0:	68ba      	ldr	r2, [r7, #8]
 80384b2:	4313      	orrs	r3, r2
 80384b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80384b6:	687b      	ldr	r3, [r7, #4]
 80384b8:	681b      	ldr	r3, [r3, #0]
 80384ba:	68ba      	ldr	r2, [r7, #8]
 80384bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80384be:	687b      	ldr	r3, [r7, #4]
 80384c0:	2201      	movs	r2, #1
 80384c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80384c6:	687b      	ldr	r3, [r7, #4]
 80384c8:	2200      	movs	r2, #0
 80384ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80384ce:	2300      	movs	r3, #0
}
 80384d0:	4618      	mov	r0, r3
 80384d2:	3714      	adds	r7, #20
 80384d4:	46bd      	mov	sp, r7
 80384d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80384da:	4770      	bx	lr
 80384dc:	40010000 	.word	0x40010000
 80384e0:	40010400 	.word	0x40010400
 80384e4:	40000400 	.word	0x40000400
 80384e8:	40000800 	.word	0x40000800
 80384ec:	40000c00 	.word	0x40000c00
 80384f0:	40001800 	.word	0x40001800
 80384f4:	40014000 	.word	0x40014000

080384f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80384f8:	b480      	push	{r7}
 80384fa:	b083      	sub	sp, #12
 80384fc:	af00      	add	r7, sp, #0
 80384fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8038500:	bf00      	nop
 8038502:	370c      	adds	r7, #12
 8038504:	46bd      	mov	sp, r7
 8038506:	f85d 7b04 	ldr.w	r7, [sp], #4
 803850a:	4770      	bx	lr

0803850c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 803850c:	b480      	push	{r7}
 803850e:	b083      	sub	sp, #12
 8038510:	af00      	add	r7, sp, #0
 8038512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8038514:	bf00      	nop
 8038516:	370c      	adds	r7, #12
 8038518:	46bd      	mov	sp, r7
 803851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803851e:	4770      	bx	lr

08038520 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8038520:	b480      	push	{r7}
 8038522:	b083      	sub	sp, #12
 8038524:	af00      	add	r7, sp, #0
 8038526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8038528:	bf00      	nop
 803852a:	370c      	adds	r7, #12
 803852c:	46bd      	mov	sp, r7
 803852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038532:	4770      	bx	lr

08038534 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8038534:	b580      	push	{r7, lr}
 8038536:	b082      	sub	sp, #8
 8038538:	af00      	add	r7, sp, #0
 803853a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 803853c:	687b      	ldr	r3, [r7, #4]
 803853e:	2b00      	cmp	r3, #0
 8038540:	d101      	bne.n	8038546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8038542:	2301      	movs	r3, #1
 8038544:	e042      	b.n	80385cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8038546:	687b      	ldr	r3, [r7, #4]
 8038548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803854c:	2b00      	cmp	r3, #0
 803854e:	d106      	bne.n	803855e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8038550:	687b      	ldr	r3, [r7, #4]
 8038552:	2200      	movs	r2, #0
 8038554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8038558:	6878      	ldr	r0, [r7, #4]
 803855a:	f7f5 fc65 	bl	802de28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 803855e:	687b      	ldr	r3, [r7, #4]
 8038560:	2224      	movs	r2, #36	; 0x24
 8038562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8038566:	687b      	ldr	r3, [r7, #4]
 8038568:	681b      	ldr	r3, [r3, #0]
 803856a:	681a      	ldr	r2, [r3, #0]
 803856c:	687b      	ldr	r3, [r7, #4]
 803856e:	681b      	ldr	r3, [r3, #0]
 8038570:	f022 0201 	bic.w	r2, r2, #1
 8038574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8038576:	6878      	ldr	r0, [r7, #4]
 8038578:	f000 fdb2 	bl	80390e0 <UART_SetConfig>
 803857c:	4603      	mov	r3, r0
 803857e:	2b01      	cmp	r3, #1
 8038580:	d101      	bne.n	8038586 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8038582:	2301      	movs	r3, #1
 8038584:	e022      	b.n	80385cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8038586:	687b      	ldr	r3, [r7, #4]
 8038588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803858a:	2b00      	cmp	r3, #0
 803858c:	d002      	beq.n	8038594 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 803858e:	6878      	ldr	r0, [r7, #4]
 8038590:	f001 fb0e 	bl	8039bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8038594:	687b      	ldr	r3, [r7, #4]
 8038596:	681b      	ldr	r3, [r3, #0]
 8038598:	685a      	ldr	r2, [r3, #4]
 803859a:	687b      	ldr	r3, [r7, #4]
 803859c:	681b      	ldr	r3, [r3, #0]
 803859e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80385a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80385a4:	687b      	ldr	r3, [r7, #4]
 80385a6:	681b      	ldr	r3, [r3, #0]
 80385a8:	689a      	ldr	r2, [r3, #8]
 80385aa:	687b      	ldr	r3, [r7, #4]
 80385ac:	681b      	ldr	r3, [r3, #0]
 80385ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80385b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80385b4:	687b      	ldr	r3, [r7, #4]
 80385b6:	681b      	ldr	r3, [r3, #0]
 80385b8:	681a      	ldr	r2, [r3, #0]
 80385ba:	687b      	ldr	r3, [r7, #4]
 80385bc:	681b      	ldr	r3, [r3, #0]
 80385be:	f042 0201 	orr.w	r2, r2, #1
 80385c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80385c4:	6878      	ldr	r0, [r7, #4]
 80385c6:	f001 fb95 	bl	8039cf4 <UART_CheckIdleState>
 80385ca:	4603      	mov	r3, r0
}
 80385cc:	4618      	mov	r0, r3
 80385ce:	3708      	adds	r7, #8
 80385d0:	46bd      	mov	sp, r7
 80385d2:	bd80      	pop	{r7, pc}

080385d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80385d4:	b580      	push	{r7, lr}
 80385d6:	b08a      	sub	sp, #40	; 0x28
 80385d8:	af02      	add	r7, sp, #8
 80385da:	60f8      	str	r0, [r7, #12]
 80385dc:	60b9      	str	r1, [r7, #8]
 80385de:	603b      	str	r3, [r7, #0]
 80385e0:	4613      	mov	r3, r2
 80385e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80385e4:	68fb      	ldr	r3, [r7, #12]
 80385e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80385ea:	2b20      	cmp	r3, #32
 80385ec:	f040 80c0 	bne.w	8038770 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80385f0:	68bb      	ldr	r3, [r7, #8]
 80385f2:	2b00      	cmp	r3, #0
 80385f4:	d002      	beq.n	80385fc <HAL_UART_Receive+0x28>
 80385f6:	88fb      	ldrh	r3, [r7, #6]
 80385f8:	2b00      	cmp	r3, #0
 80385fa:	d101      	bne.n	8038600 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80385fc:	2301      	movs	r3, #1
 80385fe:	e0b8      	b.n	8038772 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8038600:	68fb      	ldr	r3, [r7, #12]
 8038602:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8038606:	2b01      	cmp	r3, #1
 8038608:	d101      	bne.n	803860e <HAL_UART_Receive+0x3a>
 803860a:	2302      	movs	r3, #2
 803860c:	e0b1      	b.n	8038772 <HAL_UART_Receive+0x19e>
 803860e:	68fb      	ldr	r3, [r7, #12]
 8038610:	2201      	movs	r2, #1
 8038612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8038616:	68fb      	ldr	r3, [r7, #12]
 8038618:	2200      	movs	r2, #0
 803861a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 803861e:	68fb      	ldr	r3, [r7, #12]
 8038620:	2222      	movs	r2, #34	; 0x22
 8038622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038626:	68fb      	ldr	r3, [r7, #12]
 8038628:	2200      	movs	r2, #0
 803862a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 803862c:	f7f5 fe58 	bl	802e2e0 <HAL_GetTick>
 8038630:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8038632:	68fb      	ldr	r3, [r7, #12]
 8038634:	88fa      	ldrh	r2, [r7, #6]
 8038636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 803863a:	68fb      	ldr	r3, [r7, #12]
 803863c:	88fa      	ldrh	r2, [r7, #6]
 803863e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8038642:	68fb      	ldr	r3, [r7, #12]
 8038644:	689b      	ldr	r3, [r3, #8]
 8038646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803864a:	d10e      	bne.n	803866a <HAL_UART_Receive+0x96>
 803864c:	68fb      	ldr	r3, [r7, #12]
 803864e:	691b      	ldr	r3, [r3, #16]
 8038650:	2b00      	cmp	r3, #0
 8038652:	d105      	bne.n	8038660 <HAL_UART_Receive+0x8c>
 8038654:	68fb      	ldr	r3, [r7, #12]
 8038656:	f240 12ff 	movw	r2, #511	; 0x1ff
 803865a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803865e:	e02d      	b.n	80386bc <HAL_UART_Receive+0xe8>
 8038660:	68fb      	ldr	r3, [r7, #12]
 8038662:	22ff      	movs	r2, #255	; 0xff
 8038664:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8038668:	e028      	b.n	80386bc <HAL_UART_Receive+0xe8>
 803866a:	68fb      	ldr	r3, [r7, #12]
 803866c:	689b      	ldr	r3, [r3, #8]
 803866e:	2b00      	cmp	r3, #0
 8038670:	d10d      	bne.n	803868e <HAL_UART_Receive+0xba>
 8038672:	68fb      	ldr	r3, [r7, #12]
 8038674:	691b      	ldr	r3, [r3, #16]
 8038676:	2b00      	cmp	r3, #0
 8038678:	d104      	bne.n	8038684 <HAL_UART_Receive+0xb0>
 803867a:	68fb      	ldr	r3, [r7, #12]
 803867c:	22ff      	movs	r2, #255	; 0xff
 803867e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8038682:	e01b      	b.n	80386bc <HAL_UART_Receive+0xe8>
 8038684:	68fb      	ldr	r3, [r7, #12]
 8038686:	227f      	movs	r2, #127	; 0x7f
 8038688:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803868c:	e016      	b.n	80386bc <HAL_UART_Receive+0xe8>
 803868e:	68fb      	ldr	r3, [r7, #12]
 8038690:	689b      	ldr	r3, [r3, #8]
 8038692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8038696:	d10d      	bne.n	80386b4 <HAL_UART_Receive+0xe0>
 8038698:	68fb      	ldr	r3, [r7, #12]
 803869a:	691b      	ldr	r3, [r3, #16]
 803869c:	2b00      	cmp	r3, #0
 803869e:	d104      	bne.n	80386aa <HAL_UART_Receive+0xd6>
 80386a0:	68fb      	ldr	r3, [r7, #12]
 80386a2:	227f      	movs	r2, #127	; 0x7f
 80386a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80386a8:	e008      	b.n	80386bc <HAL_UART_Receive+0xe8>
 80386aa:	68fb      	ldr	r3, [r7, #12]
 80386ac:	223f      	movs	r2, #63	; 0x3f
 80386ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80386b2:	e003      	b.n	80386bc <HAL_UART_Receive+0xe8>
 80386b4:	68fb      	ldr	r3, [r7, #12]
 80386b6:	2200      	movs	r2, #0
 80386b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80386bc:	68fb      	ldr	r3, [r7, #12]
 80386be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80386c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80386c4:	68fb      	ldr	r3, [r7, #12]
 80386c6:	689b      	ldr	r3, [r3, #8]
 80386c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80386cc:	d108      	bne.n	80386e0 <HAL_UART_Receive+0x10c>
 80386ce:	68fb      	ldr	r3, [r7, #12]
 80386d0:	691b      	ldr	r3, [r3, #16]
 80386d2:	2b00      	cmp	r3, #0
 80386d4:	d104      	bne.n	80386e0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80386d6:	2300      	movs	r3, #0
 80386d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80386da:	68bb      	ldr	r3, [r7, #8]
 80386dc:	61bb      	str	r3, [r7, #24]
 80386de:	e003      	b.n	80386e8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80386e0:	68bb      	ldr	r3, [r7, #8]
 80386e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80386e4:	2300      	movs	r3, #0
 80386e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80386e8:	68fb      	ldr	r3, [r7, #12]
 80386ea:	2200      	movs	r2, #0
 80386ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80386f0:	e032      	b.n	8038758 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80386f2:	683b      	ldr	r3, [r7, #0]
 80386f4:	9300      	str	r3, [sp, #0]
 80386f6:	697b      	ldr	r3, [r7, #20]
 80386f8:	2200      	movs	r2, #0
 80386fa:	2120      	movs	r1, #32
 80386fc:	68f8      	ldr	r0, [r7, #12]
 80386fe:	f001 fb44 	bl	8039d8a <UART_WaitOnFlagUntilTimeout>
 8038702:	4603      	mov	r3, r0
 8038704:	2b00      	cmp	r3, #0
 8038706:	d001      	beq.n	803870c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8038708:	2303      	movs	r3, #3
 803870a:	e032      	b.n	8038772 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 803870c:	69fb      	ldr	r3, [r7, #28]
 803870e:	2b00      	cmp	r3, #0
 8038710:	d10c      	bne.n	803872c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8038712:	68fb      	ldr	r3, [r7, #12]
 8038714:	681b      	ldr	r3, [r3, #0]
 8038716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038718:	b29a      	uxth	r2, r3
 803871a:	8a7b      	ldrh	r3, [r7, #18]
 803871c:	4013      	ands	r3, r2
 803871e:	b29a      	uxth	r2, r3
 8038720:	69bb      	ldr	r3, [r7, #24]
 8038722:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8038724:	69bb      	ldr	r3, [r7, #24]
 8038726:	3302      	adds	r3, #2
 8038728:	61bb      	str	r3, [r7, #24]
 803872a:	e00c      	b.n	8038746 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 803872c:	68fb      	ldr	r3, [r7, #12]
 803872e:	681b      	ldr	r3, [r3, #0]
 8038730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038732:	b2da      	uxtb	r2, r3
 8038734:	8a7b      	ldrh	r3, [r7, #18]
 8038736:	b2db      	uxtb	r3, r3
 8038738:	4013      	ands	r3, r2
 803873a:	b2da      	uxtb	r2, r3
 803873c:	69fb      	ldr	r3, [r7, #28]
 803873e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8038740:	69fb      	ldr	r3, [r7, #28]
 8038742:	3301      	adds	r3, #1
 8038744:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8038746:	68fb      	ldr	r3, [r7, #12]
 8038748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803874c:	b29b      	uxth	r3, r3
 803874e:	3b01      	subs	r3, #1
 8038750:	b29a      	uxth	r2, r3
 8038752:	68fb      	ldr	r3, [r7, #12]
 8038754:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8038758:	68fb      	ldr	r3, [r7, #12]
 803875a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803875e:	b29b      	uxth	r3, r3
 8038760:	2b00      	cmp	r3, #0
 8038762:	d1c6      	bne.n	80386f2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8038764:	68fb      	ldr	r3, [r7, #12]
 8038766:	2220      	movs	r2, #32
 8038768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 803876c:	2300      	movs	r3, #0
 803876e:	e000      	b.n	8038772 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8038770:	2302      	movs	r3, #2
  }
}
 8038772:	4618      	mov	r0, r3
 8038774:	3720      	adds	r7, #32
 8038776:	46bd      	mov	sp, r7
 8038778:	bd80      	pop	{r7, pc}
	...

0803877c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 803877c:	b480      	push	{r7}
 803877e:	b091      	sub	sp, #68	; 0x44
 8038780:	af00      	add	r7, sp, #0
 8038782:	60f8      	str	r0, [r7, #12]
 8038784:	60b9      	str	r1, [r7, #8]
 8038786:	4613      	mov	r3, r2
 8038788:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 803878a:	68fb      	ldr	r3, [r7, #12]
 803878c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8038790:	2b20      	cmp	r3, #32
 8038792:	f040 808c 	bne.w	80388ae <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8038796:	68bb      	ldr	r3, [r7, #8]
 8038798:	2b00      	cmp	r3, #0
 803879a:	d002      	beq.n	80387a2 <HAL_UART_Transmit_IT+0x26>
 803879c:	88fb      	ldrh	r3, [r7, #6]
 803879e:	2b00      	cmp	r3, #0
 80387a0:	d101      	bne.n	80387a6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80387a2:	2301      	movs	r3, #1
 80387a4:	e084      	b.n	80388b0 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80387a6:	68fb      	ldr	r3, [r7, #12]
 80387a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80387ac:	2b01      	cmp	r3, #1
 80387ae:	d101      	bne.n	80387b4 <HAL_UART_Transmit_IT+0x38>
 80387b0:	2302      	movs	r3, #2
 80387b2:	e07d      	b.n	80388b0 <HAL_UART_Transmit_IT+0x134>
 80387b4:	68fb      	ldr	r3, [r7, #12]
 80387b6:	2201      	movs	r2, #1
 80387b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80387bc:	68fb      	ldr	r3, [r7, #12]
 80387be:	68ba      	ldr	r2, [r7, #8]
 80387c0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80387c2:	68fb      	ldr	r3, [r7, #12]
 80387c4:	88fa      	ldrh	r2, [r7, #6]
 80387c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80387ca:	68fb      	ldr	r3, [r7, #12]
 80387cc:	88fa      	ldrh	r2, [r7, #6]
 80387ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80387d2:	68fb      	ldr	r3, [r7, #12]
 80387d4:	2200      	movs	r2, #0
 80387d6:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80387d8:	68fb      	ldr	r3, [r7, #12]
 80387da:	2200      	movs	r2, #0
 80387dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80387e0:	68fb      	ldr	r3, [r7, #12]
 80387e2:	2221      	movs	r2, #33	; 0x21
 80387e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80387e8:	68fb      	ldr	r3, [r7, #12]
 80387ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80387ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80387f0:	d12e      	bne.n	8038850 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80387f2:	68fb      	ldr	r3, [r7, #12]
 80387f4:	689b      	ldr	r3, [r3, #8]
 80387f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80387fa:	d107      	bne.n	803880c <HAL_UART_Transmit_IT+0x90>
 80387fc:	68fb      	ldr	r3, [r7, #12]
 80387fe:	691b      	ldr	r3, [r3, #16]
 8038800:	2b00      	cmp	r3, #0
 8038802:	d103      	bne.n	803880c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8038804:	68fb      	ldr	r3, [r7, #12]
 8038806:	4a2d      	ldr	r2, [pc, #180]	; (80388bc <HAL_UART_Transmit_IT+0x140>)
 8038808:	675a      	str	r2, [r3, #116]	; 0x74
 803880a:	e002      	b.n	8038812 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 803880c:	68fb      	ldr	r3, [r7, #12]
 803880e:	4a2c      	ldr	r2, [pc, #176]	; (80388c0 <HAL_UART_Transmit_IT+0x144>)
 8038810:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8038812:	68fb      	ldr	r3, [r7, #12]
 8038814:	2200      	movs	r2, #0
 8038816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803881a:	68fb      	ldr	r3, [r7, #12]
 803881c:	681b      	ldr	r3, [r3, #0]
 803881e:	3308      	adds	r3, #8
 8038820:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038824:	e853 3f00 	ldrex	r3, [r3]
 8038828:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803882c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8038830:	63bb      	str	r3, [r7, #56]	; 0x38
 8038832:	68fb      	ldr	r3, [r7, #12]
 8038834:	681b      	ldr	r3, [r3, #0]
 8038836:	3308      	adds	r3, #8
 8038838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803883a:	637a      	str	r2, [r7, #52]	; 0x34
 803883c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803883e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8038840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8038842:	e841 2300 	strex	r3, r2, [r1]
 8038846:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8038848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803884a:	2b00      	cmp	r3, #0
 803884c:	d1e5      	bne.n	803881a <HAL_UART_Transmit_IT+0x9e>
 803884e:	e02c      	b.n	80388aa <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8038850:	68fb      	ldr	r3, [r7, #12]
 8038852:	689b      	ldr	r3, [r3, #8]
 8038854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8038858:	d107      	bne.n	803886a <HAL_UART_Transmit_IT+0xee>
 803885a:	68fb      	ldr	r3, [r7, #12]
 803885c:	691b      	ldr	r3, [r3, #16]
 803885e:	2b00      	cmp	r3, #0
 8038860:	d103      	bne.n	803886a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8038862:	68fb      	ldr	r3, [r7, #12]
 8038864:	4a17      	ldr	r2, [pc, #92]	; (80388c4 <HAL_UART_Transmit_IT+0x148>)
 8038866:	675a      	str	r2, [r3, #116]	; 0x74
 8038868:	e002      	b.n	8038870 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 803886a:	68fb      	ldr	r3, [r7, #12]
 803886c:	4a16      	ldr	r2, [pc, #88]	; (80388c8 <HAL_UART_Transmit_IT+0x14c>)
 803886e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8038870:	68fb      	ldr	r3, [r7, #12]
 8038872:	2200      	movs	r2, #0
 8038874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8038878:	68fb      	ldr	r3, [r7, #12]
 803887a:	681b      	ldr	r3, [r3, #0]
 803887c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803887e:	697b      	ldr	r3, [r7, #20]
 8038880:	e853 3f00 	ldrex	r3, [r3]
 8038884:	613b      	str	r3, [r7, #16]
   return(result);
 8038886:	693b      	ldr	r3, [r7, #16]
 8038888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803888c:	63fb      	str	r3, [r7, #60]	; 0x3c
 803888e:	68fb      	ldr	r3, [r7, #12]
 8038890:	681b      	ldr	r3, [r3, #0]
 8038892:	461a      	mov	r2, r3
 8038894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038896:	623b      	str	r3, [r7, #32]
 8038898:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803889a:	69f9      	ldr	r1, [r7, #28]
 803889c:	6a3a      	ldr	r2, [r7, #32]
 803889e:	e841 2300 	strex	r3, r2, [r1]
 80388a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80388a4:	69bb      	ldr	r3, [r7, #24]
 80388a6:	2b00      	cmp	r3, #0
 80388a8:	d1e6      	bne.n	8038878 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80388aa:	2300      	movs	r3, #0
 80388ac:	e000      	b.n	80388b0 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80388ae:	2302      	movs	r3, #2
  }
}
 80388b0:	4618      	mov	r0, r3
 80388b2:	3744      	adds	r7, #68	; 0x44
 80388b4:	46bd      	mov	sp, r7
 80388b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80388ba:	4770      	bx	lr
 80388bc:	0803a4c3 	.word	0x0803a4c3
 80388c0:	0803a3e3 	.word	0x0803a3e3
 80388c4:	0803a321 	.word	0x0803a321
 80388c8:	0803a269 	.word	0x0803a269

080388cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80388cc:	b580      	push	{r7, lr}
 80388ce:	b08a      	sub	sp, #40	; 0x28
 80388d0:	af00      	add	r7, sp, #0
 80388d2:	60f8      	str	r0, [r7, #12]
 80388d4:	60b9      	str	r1, [r7, #8]
 80388d6:	4613      	mov	r3, r2
 80388d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80388da:	68fb      	ldr	r3, [r7, #12]
 80388dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80388e0:	2b20      	cmp	r3, #32
 80388e2:	d142      	bne.n	803896a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80388e4:	68bb      	ldr	r3, [r7, #8]
 80388e6:	2b00      	cmp	r3, #0
 80388e8:	d002      	beq.n	80388f0 <HAL_UART_Receive_IT+0x24>
 80388ea:	88fb      	ldrh	r3, [r7, #6]
 80388ec:	2b00      	cmp	r3, #0
 80388ee:	d101      	bne.n	80388f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80388f0:	2301      	movs	r3, #1
 80388f2:	e03b      	b.n	803896c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80388f4:	68fb      	ldr	r3, [r7, #12]
 80388f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80388fa:	2b01      	cmp	r3, #1
 80388fc:	d101      	bne.n	8038902 <HAL_UART_Receive_IT+0x36>
 80388fe:	2302      	movs	r3, #2
 8038900:	e034      	b.n	803896c <HAL_UART_Receive_IT+0xa0>
 8038902:	68fb      	ldr	r3, [r7, #12]
 8038904:	2201      	movs	r2, #1
 8038906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803890a:	68fb      	ldr	r3, [r7, #12]
 803890c:	2200      	movs	r2, #0
 803890e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8038910:	68fb      	ldr	r3, [r7, #12]
 8038912:	681b      	ldr	r3, [r3, #0]
 8038914:	4a17      	ldr	r2, [pc, #92]	; (8038974 <HAL_UART_Receive_IT+0xa8>)
 8038916:	4293      	cmp	r3, r2
 8038918:	d01f      	beq.n	803895a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 803891a:	68fb      	ldr	r3, [r7, #12]
 803891c:	681b      	ldr	r3, [r3, #0]
 803891e:	685b      	ldr	r3, [r3, #4]
 8038920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8038924:	2b00      	cmp	r3, #0
 8038926:	d018      	beq.n	803895a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8038928:	68fb      	ldr	r3, [r7, #12]
 803892a:	681b      	ldr	r3, [r3, #0]
 803892c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803892e:	697b      	ldr	r3, [r7, #20]
 8038930:	e853 3f00 	ldrex	r3, [r3]
 8038934:	613b      	str	r3, [r7, #16]
   return(result);
 8038936:	693b      	ldr	r3, [r7, #16]
 8038938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 803893c:	627b      	str	r3, [r7, #36]	; 0x24
 803893e:	68fb      	ldr	r3, [r7, #12]
 8038940:	681b      	ldr	r3, [r3, #0]
 8038942:	461a      	mov	r2, r3
 8038944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038946:	623b      	str	r3, [r7, #32]
 8038948:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803894a:	69f9      	ldr	r1, [r7, #28]
 803894c:	6a3a      	ldr	r2, [r7, #32]
 803894e:	e841 2300 	strex	r3, r2, [r1]
 8038952:	61bb      	str	r3, [r7, #24]
   return(result);
 8038954:	69bb      	ldr	r3, [r7, #24]
 8038956:	2b00      	cmp	r3, #0
 8038958:	d1e6      	bne.n	8038928 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 803895a:	88fb      	ldrh	r3, [r7, #6]
 803895c:	461a      	mov	r2, r3
 803895e:	68b9      	ldr	r1, [r7, #8]
 8038960:	68f8      	ldr	r0, [r7, #12]
 8038962:	f001 fadb 	bl	8039f1c <UART_Start_Receive_IT>
 8038966:	4603      	mov	r3, r0
 8038968:	e000      	b.n	803896c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 803896a:	2302      	movs	r3, #2
  }
}
 803896c:	4618      	mov	r0, r3
 803896e:	3728      	adds	r7, #40	; 0x28
 8038970:	46bd      	mov	sp, r7
 8038972:	bd80      	pop	{r7, pc}
 8038974:	58000c00 	.word	0x58000c00

08038978 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8038978:	b580      	push	{r7, lr}
 803897a:	b0ba      	sub	sp, #232	; 0xe8
 803897c:	af00      	add	r7, sp, #0
 803897e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8038980:	687b      	ldr	r3, [r7, #4]
 8038982:	681b      	ldr	r3, [r3, #0]
 8038984:	69db      	ldr	r3, [r3, #28]
 8038986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 803898a:	687b      	ldr	r3, [r7, #4]
 803898c:	681b      	ldr	r3, [r3, #0]
 803898e:	681b      	ldr	r3, [r3, #0]
 8038990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8038994:	687b      	ldr	r3, [r7, #4]
 8038996:	681b      	ldr	r3, [r3, #0]
 8038998:	689b      	ldr	r3, [r3, #8]
 803899a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 803899e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80389a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80389a6:	4013      	ands	r3, r2
 80389a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80389ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80389b0:	2b00      	cmp	r3, #0
 80389b2:	d11b      	bne.n	80389ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80389b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80389b8:	f003 0320 	and.w	r3, r3, #32
 80389bc:	2b00      	cmp	r3, #0
 80389be:	d015      	beq.n	80389ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80389c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80389c4:	f003 0320 	and.w	r3, r3, #32
 80389c8:	2b00      	cmp	r3, #0
 80389ca:	d105      	bne.n	80389d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80389cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80389d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80389d4:	2b00      	cmp	r3, #0
 80389d6:	d009      	beq.n	80389ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80389d8:	687b      	ldr	r3, [r7, #4]
 80389da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80389dc:	2b00      	cmp	r3, #0
 80389de:	f000 835a 	beq.w	8039096 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80389e2:	687b      	ldr	r3, [r7, #4]
 80389e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80389e6:	6878      	ldr	r0, [r7, #4]
 80389e8:	4798      	blx	r3
      }
      return;
 80389ea:	e354      	b.n	8039096 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80389ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80389f0:	2b00      	cmp	r3, #0
 80389f2:	f000 811f 	beq.w	8038c34 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80389f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80389fa:	4b8b      	ldr	r3, [pc, #556]	; (8038c28 <HAL_UART_IRQHandler+0x2b0>)
 80389fc:	4013      	ands	r3, r2
 80389fe:	2b00      	cmp	r3, #0
 8038a00:	d106      	bne.n	8038a10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8038a02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8038a06:	4b89      	ldr	r3, [pc, #548]	; (8038c2c <HAL_UART_IRQHandler+0x2b4>)
 8038a08:	4013      	ands	r3, r2
 8038a0a:	2b00      	cmp	r3, #0
 8038a0c:	f000 8112 	beq.w	8038c34 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8038a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038a14:	f003 0301 	and.w	r3, r3, #1
 8038a18:	2b00      	cmp	r3, #0
 8038a1a:	d011      	beq.n	8038a40 <HAL_UART_IRQHandler+0xc8>
 8038a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038a24:	2b00      	cmp	r3, #0
 8038a26:	d00b      	beq.n	8038a40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8038a28:	687b      	ldr	r3, [r7, #4]
 8038a2a:	681b      	ldr	r3, [r3, #0]
 8038a2c:	2201      	movs	r2, #1
 8038a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8038a30:	687b      	ldr	r3, [r7, #4]
 8038a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038a36:	f043 0201 	orr.w	r2, r3, #1
 8038a3a:	687b      	ldr	r3, [r7, #4]
 8038a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038a44:	f003 0302 	and.w	r3, r3, #2
 8038a48:	2b00      	cmp	r3, #0
 8038a4a:	d011      	beq.n	8038a70 <HAL_UART_IRQHandler+0xf8>
 8038a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8038a50:	f003 0301 	and.w	r3, r3, #1
 8038a54:	2b00      	cmp	r3, #0
 8038a56:	d00b      	beq.n	8038a70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8038a58:	687b      	ldr	r3, [r7, #4]
 8038a5a:	681b      	ldr	r3, [r3, #0]
 8038a5c:	2202      	movs	r2, #2
 8038a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8038a60:	687b      	ldr	r3, [r7, #4]
 8038a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038a66:	f043 0204 	orr.w	r2, r3, #4
 8038a6a:	687b      	ldr	r3, [r7, #4]
 8038a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8038a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038a74:	f003 0304 	and.w	r3, r3, #4
 8038a78:	2b00      	cmp	r3, #0
 8038a7a:	d011      	beq.n	8038aa0 <HAL_UART_IRQHandler+0x128>
 8038a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8038a80:	f003 0301 	and.w	r3, r3, #1
 8038a84:	2b00      	cmp	r3, #0
 8038a86:	d00b      	beq.n	8038aa0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8038a88:	687b      	ldr	r3, [r7, #4]
 8038a8a:	681b      	ldr	r3, [r3, #0]
 8038a8c:	2204      	movs	r2, #4
 8038a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8038a90:	687b      	ldr	r3, [r7, #4]
 8038a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038a96:	f043 0202 	orr.w	r2, r3, #2
 8038a9a:	687b      	ldr	r3, [r7, #4]
 8038a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8038aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038aa4:	f003 0308 	and.w	r3, r3, #8
 8038aa8:	2b00      	cmp	r3, #0
 8038aaa:	d017      	beq.n	8038adc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8038aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038ab0:	f003 0320 	and.w	r3, r3, #32
 8038ab4:	2b00      	cmp	r3, #0
 8038ab6:	d105      	bne.n	8038ac4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8038ab8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8038abc:	4b5a      	ldr	r3, [pc, #360]	; (8038c28 <HAL_UART_IRQHandler+0x2b0>)
 8038abe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8038ac0:	2b00      	cmp	r3, #0
 8038ac2:	d00b      	beq.n	8038adc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8038ac4:	687b      	ldr	r3, [r7, #4]
 8038ac6:	681b      	ldr	r3, [r3, #0]
 8038ac8:	2208      	movs	r2, #8
 8038aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8038acc:	687b      	ldr	r3, [r7, #4]
 8038ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038ad2:	f043 0208 	orr.w	r2, r3, #8
 8038ad6:	687b      	ldr	r3, [r7, #4]
 8038ad8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8038adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8038ae4:	2b00      	cmp	r3, #0
 8038ae6:	d012      	beq.n	8038b0e <HAL_UART_IRQHandler+0x196>
 8038ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8038af0:	2b00      	cmp	r3, #0
 8038af2:	d00c      	beq.n	8038b0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8038af4:	687b      	ldr	r3, [r7, #4]
 8038af6:	681b      	ldr	r3, [r3, #0]
 8038af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8038afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8038afe:	687b      	ldr	r3, [r7, #4]
 8038b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038b04:	f043 0220 	orr.w	r2, r3, #32
 8038b08:	687b      	ldr	r3, [r7, #4]
 8038b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8038b0e:	687b      	ldr	r3, [r7, #4]
 8038b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038b14:	2b00      	cmp	r3, #0
 8038b16:	f000 82c0 	beq.w	803909a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8038b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038b1e:	f003 0320 	and.w	r3, r3, #32
 8038b22:	2b00      	cmp	r3, #0
 8038b24:	d013      	beq.n	8038b4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8038b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038b2a:	f003 0320 	and.w	r3, r3, #32
 8038b2e:	2b00      	cmp	r3, #0
 8038b30:	d105      	bne.n	8038b3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8038b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8038b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8038b3a:	2b00      	cmp	r3, #0
 8038b3c:	d007      	beq.n	8038b4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8038b3e:	687b      	ldr	r3, [r7, #4]
 8038b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8038b42:	2b00      	cmp	r3, #0
 8038b44:	d003      	beq.n	8038b4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8038b46:	687b      	ldr	r3, [r7, #4]
 8038b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8038b4a:	6878      	ldr	r0, [r7, #4]
 8038b4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8038b4e:	687b      	ldr	r3, [r7, #4]
 8038b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8038b54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8038b58:	687b      	ldr	r3, [r7, #4]
 8038b5a:	681b      	ldr	r3, [r3, #0]
 8038b5c:	689b      	ldr	r3, [r3, #8]
 8038b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038b62:	2b40      	cmp	r3, #64	; 0x40
 8038b64:	d005      	beq.n	8038b72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8038b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8038b6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8038b6e:	2b00      	cmp	r3, #0
 8038b70:	d04f      	beq.n	8038c12 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8038b72:	6878      	ldr	r0, [r7, #4]
 8038b74:	f001 fafc 	bl	803a170 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038b78:	687b      	ldr	r3, [r7, #4]
 8038b7a:	681b      	ldr	r3, [r3, #0]
 8038b7c:	689b      	ldr	r3, [r3, #8]
 8038b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038b82:	2b40      	cmp	r3, #64	; 0x40
 8038b84:	d141      	bne.n	8038c0a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8038b86:	687b      	ldr	r3, [r7, #4]
 8038b88:	681b      	ldr	r3, [r3, #0]
 8038b8a:	3308      	adds	r3, #8
 8038b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8038b94:	e853 3f00 	ldrex	r3, [r3]
 8038b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8038b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8038ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8038ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8038ba8:	687b      	ldr	r3, [r7, #4]
 8038baa:	681b      	ldr	r3, [r3, #0]
 8038bac:	3308      	adds	r3, #8
 8038bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8038bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8038bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8038bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8038bc2:	e841 2300 	strex	r3, r2, [r1]
 8038bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8038bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8038bce:	2b00      	cmp	r3, #0
 8038bd0:	d1d9      	bne.n	8038b86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8038bd2:	687b      	ldr	r3, [r7, #4]
 8038bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038bd6:	2b00      	cmp	r3, #0
 8038bd8:	d013      	beq.n	8038c02 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8038bda:	687b      	ldr	r3, [r7, #4]
 8038bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038bde:	4a14      	ldr	r2, [pc, #80]	; (8038c30 <HAL_UART_IRQHandler+0x2b8>)
 8038be0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8038be2:	687b      	ldr	r3, [r7, #4]
 8038be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038be6:	4618      	mov	r0, r3
 8038be8:	f7f7 f95a 	bl	802fea0 <HAL_DMA_Abort_IT>
 8038bec:	4603      	mov	r3, r0
 8038bee:	2b00      	cmp	r3, #0
 8038bf0:	d017      	beq.n	8038c22 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8038bf2:	687b      	ldr	r3, [r7, #4]
 8038bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8038bf8:	687a      	ldr	r2, [r7, #4]
 8038bfa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8038bfc:	4610      	mov	r0, r2
 8038bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038c00:	e00f      	b.n	8038c22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8038c02:	6878      	ldr	r0, [r7, #4]
 8038c04:	f000 fa56 	bl	80390b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038c08:	e00b      	b.n	8038c22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8038c0a:	6878      	ldr	r0, [r7, #4]
 8038c0c:	f000 fa52 	bl	80390b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038c10:	e007      	b.n	8038c22 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8038c12:	6878      	ldr	r0, [r7, #4]
 8038c14:	f000 fa4e 	bl	80390b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8038c18:	687b      	ldr	r3, [r7, #4]
 8038c1a:	2200      	movs	r2, #0
 8038c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8038c20:	e23b      	b.n	803909a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038c22:	bf00      	nop
    return;
 8038c24:	e239      	b.n	803909a <HAL_UART_IRQHandler+0x722>
 8038c26:	bf00      	nop
 8038c28:	10000001 	.word	0x10000001
 8038c2c:	04000120 	.word	0x04000120
 8038c30:	0803a23d 	.word	0x0803a23d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8038c34:	687b      	ldr	r3, [r7, #4]
 8038c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8038c38:	2b01      	cmp	r3, #1
 8038c3a:	f040 81ce 	bne.w	8038fda <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8038c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038c42:	f003 0310 	and.w	r3, r3, #16
 8038c46:	2b00      	cmp	r3, #0
 8038c48:	f000 81c7 	beq.w	8038fda <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8038c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8038c50:	f003 0310 	and.w	r3, r3, #16
 8038c54:	2b00      	cmp	r3, #0
 8038c56:	f000 81c0 	beq.w	8038fda <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8038c5a:	687b      	ldr	r3, [r7, #4]
 8038c5c:	681b      	ldr	r3, [r3, #0]
 8038c5e:	2210      	movs	r2, #16
 8038c60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8038c62:	687b      	ldr	r3, [r7, #4]
 8038c64:	681b      	ldr	r3, [r3, #0]
 8038c66:	689b      	ldr	r3, [r3, #8]
 8038c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038c6c:	2b40      	cmp	r3, #64	; 0x40
 8038c6e:	f040 813b 	bne.w	8038ee8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8038c72:	687b      	ldr	r3, [r7, #4]
 8038c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038c76:	681b      	ldr	r3, [r3, #0]
 8038c78:	4a8b      	ldr	r2, [pc, #556]	; (8038ea8 <HAL_UART_IRQHandler+0x530>)
 8038c7a:	4293      	cmp	r3, r2
 8038c7c:	d059      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038c7e:	687b      	ldr	r3, [r7, #4]
 8038c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038c82:	681b      	ldr	r3, [r3, #0]
 8038c84:	4a89      	ldr	r2, [pc, #548]	; (8038eac <HAL_UART_IRQHandler+0x534>)
 8038c86:	4293      	cmp	r3, r2
 8038c88:	d053      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038c8a:	687b      	ldr	r3, [r7, #4]
 8038c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038c8e:	681b      	ldr	r3, [r3, #0]
 8038c90:	4a87      	ldr	r2, [pc, #540]	; (8038eb0 <HAL_UART_IRQHandler+0x538>)
 8038c92:	4293      	cmp	r3, r2
 8038c94:	d04d      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038c96:	687b      	ldr	r3, [r7, #4]
 8038c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038c9a:	681b      	ldr	r3, [r3, #0]
 8038c9c:	4a85      	ldr	r2, [pc, #532]	; (8038eb4 <HAL_UART_IRQHandler+0x53c>)
 8038c9e:	4293      	cmp	r3, r2
 8038ca0:	d047      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038ca2:	687b      	ldr	r3, [r7, #4]
 8038ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038ca6:	681b      	ldr	r3, [r3, #0]
 8038ca8:	4a83      	ldr	r2, [pc, #524]	; (8038eb8 <HAL_UART_IRQHandler+0x540>)
 8038caa:	4293      	cmp	r3, r2
 8038cac:	d041      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038cae:	687b      	ldr	r3, [r7, #4]
 8038cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038cb2:	681b      	ldr	r3, [r3, #0]
 8038cb4:	4a81      	ldr	r2, [pc, #516]	; (8038ebc <HAL_UART_IRQHandler+0x544>)
 8038cb6:	4293      	cmp	r3, r2
 8038cb8:	d03b      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038cba:	687b      	ldr	r3, [r7, #4]
 8038cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038cbe:	681b      	ldr	r3, [r3, #0]
 8038cc0:	4a7f      	ldr	r2, [pc, #508]	; (8038ec0 <HAL_UART_IRQHandler+0x548>)
 8038cc2:	4293      	cmp	r3, r2
 8038cc4:	d035      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038cc6:	687b      	ldr	r3, [r7, #4]
 8038cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038cca:	681b      	ldr	r3, [r3, #0]
 8038ccc:	4a7d      	ldr	r2, [pc, #500]	; (8038ec4 <HAL_UART_IRQHandler+0x54c>)
 8038cce:	4293      	cmp	r3, r2
 8038cd0:	d02f      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038cd2:	687b      	ldr	r3, [r7, #4]
 8038cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038cd6:	681b      	ldr	r3, [r3, #0]
 8038cd8:	4a7b      	ldr	r2, [pc, #492]	; (8038ec8 <HAL_UART_IRQHandler+0x550>)
 8038cda:	4293      	cmp	r3, r2
 8038cdc:	d029      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038cde:	687b      	ldr	r3, [r7, #4]
 8038ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038ce2:	681b      	ldr	r3, [r3, #0]
 8038ce4:	4a79      	ldr	r2, [pc, #484]	; (8038ecc <HAL_UART_IRQHandler+0x554>)
 8038ce6:	4293      	cmp	r3, r2
 8038ce8:	d023      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038cea:	687b      	ldr	r3, [r7, #4]
 8038cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038cee:	681b      	ldr	r3, [r3, #0]
 8038cf0:	4a77      	ldr	r2, [pc, #476]	; (8038ed0 <HAL_UART_IRQHandler+0x558>)
 8038cf2:	4293      	cmp	r3, r2
 8038cf4:	d01d      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038cf6:	687b      	ldr	r3, [r7, #4]
 8038cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038cfa:	681b      	ldr	r3, [r3, #0]
 8038cfc:	4a75      	ldr	r2, [pc, #468]	; (8038ed4 <HAL_UART_IRQHandler+0x55c>)
 8038cfe:	4293      	cmp	r3, r2
 8038d00:	d017      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038d02:	687b      	ldr	r3, [r7, #4]
 8038d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038d06:	681b      	ldr	r3, [r3, #0]
 8038d08:	4a73      	ldr	r2, [pc, #460]	; (8038ed8 <HAL_UART_IRQHandler+0x560>)
 8038d0a:	4293      	cmp	r3, r2
 8038d0c:	d011      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038d0e:	687b      	ldr	r3, [r7, #4]
 8038d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038d12:	681b      	ldr	r3, [r3, #0]
 8038d14:	4a71      	ldr	r2, [pc, #452]	; (8038edc <HAL_UART_IRQHandler+0x564>)
 8038d16:	4293      	cmp	r3, r2
 8038d18:	d00b      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038d1a:	687b      	ldr	r3, [r7, #4]
 8038d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038d1e:	681b      	ldr	r3, [r3, #0]
 8038d20:	4a6f      	ldr	r2, [pc, #444]	; (8038ee0 <HAL_UART_IRQHandler+0x568>)
 8038d22:	4293      	cmp	r3, r2
 8038d24:	d005      	beq.n	8038d32 <HAL_UART_IRQHandler+0x3ba>
 8038d26:	687b      	ldr	r3, [r7, #4]
 8038d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038d2a:	681b      	ldr	r3, [r3, #0]
 8038d2c:	4a6d      	ldr	r2, [pc, #436]	; (8038ee4 <HAL_UART_IRQHandler+0x56c>)
 8038d2e:	4293      	cmp	r3, r2
 8038d30:	d105      	bne.n	8038d3e <HAL_UART_IRQHandler+0x3c6>
 8038d32:	687b      	ldr	r3, [r7, #4]
 8038d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038d36:	681b      	ldr	r3, [r3, #0]
 8038d38:	685b      	ldr	r3, [r3, #4]
 8038d3a:	b29b      	uxth	r3, r3
 8038d3c:	e004      	b.n	8038d48 <HAL_UART_IRQHandler+0x3d0>
 8038d3e:	687b      	ldr	r3, [r7, #4]
 8038d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038d42:	681b      	ldr	r3, [r3, #0]
 8038d44:	685b      	ldr	r3, [r3, #4]
 8038d46:	b29b      	uxth	r3, r3
 8038d48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8038d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8038d50:	2b00      	cmp	r3, #0
 8038d52:	f000 81a4 	beq.w	803909e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8038d56:	687b      	ldr	r3, [r7, #4]
 8038d58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8038d5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8038d60:	429a      	cmp	r2, r3
 8038d62:	f080 819c 	bcs.w	803909e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8038d66:	687b      	ldr	r3, [r7, #4]
 8038d68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8038d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8038d70:	687b      	ldr	r3, [r7, #4]
 8038d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038d74:	69db      	ldr	r3, [r3, #28]
 8038d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8038d7a:	f000 8086 	beq.w	8038e8a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8038d7e:	687b      	ldr	r3, [r7, #4]
 8038d80:	681b      	ldr	r3, [r3, #0]
 8038d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038d86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8038d8a:	e853 3f00 	ldrex	r3, [r3]
 8038d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8038d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8038d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8038d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8038d9e:	687b      	ldr	r3, [r7, #4]
 8038da0:	681b      	ldr	r3, [r3, #0]
 8038da2:	461a      	mov	r2, r3
 8038da4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8038da8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8038dac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038db0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8038db4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8038db8:	e841 2300 	strex	r3, r2, [r1]
 8038dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8038dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8038dc4:	2b00      	cmp	r3, #0
 8038dc6:	d1da      	bne.n	8038d7e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8038dc8:	687b      	ldr	r3, [r7, #4]
 8038dca:	681b      	ldr	r3, [r3, #0]
 8038dcc:	3308      	adds	r3, #8
 8038dce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8038dd2:	e853 3f00 	ldrex	r3, [r3]
 8038dd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8038dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8038dda:	f023 0301 	bic.w	r3, r3, #1
 8038dde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8038de2:	687b      	ldr	r3, [r7, #4]
 8038de4:	681b      	ldr	r3, [r3, #0]
 8038de6:	3308      	adds	r3, #8
 8038de8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8038dec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8038df0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038df2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8038df4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8038df8:	e841 2300 	strex	r3, r2, [r1]
 8038dfc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8038dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8038e00:	2b00      	cmp	r3, #0
 8038e02:	d1e1      	bne.n	8038dc8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8038e04:	687b      	ldr	r3, [r7, #4]
 8038e06:	681b      	ldr	r3, [r3, #0]
 8038e08:	3308      	adds	r3, #8
 8038e0a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8038e0e:	e853 3f00 	ldrex	r3, [r3]
 8038e12:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8038e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8038e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8038e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8038e1e:	687b      	ldr	r3, [r7, #4]
 8038e20:	681b      	ldr	r3, [r3, #0]
 8038e22:	3308      	adds	r3, #8
 8038e24:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8038e28:	66fa      	str	r2, [r7, #108]	; 0x6c
 8038e2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038e2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8038e2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8038e30:	e841 2300 	strex	r3, r2, [r1]
 8038e34:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8038e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8038e38:	2b00      	cmp	r3, #0
 8038e3a:	d1e3      	bne.n	8038e04 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8038e3c:	687b      	ldr	r3, [r7, #4]
 8038e3e:	2220      	movs	r2, #32
 8038e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038e44:	687b      	ldr	r3, [r7, #4]
 8038e46:	2200      	movs	r2, #0
 8038e48:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038e4a:	687b      	ldr	r3, [r7, #4]
 8038e4c:	681b      	ldr	r3, [r3, #0]
 8038e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038e52:	e853 3f00 	ldrex	r3, [r3]
 8038e56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8038e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8038e5a:	f023 0310 	bic.w	r3, r3, #16
 8038e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8038e62:	687b      	ldr	r3, [r7, #4]
 8038e64:	681b      	ldr	r3, [r3, #0]
 8038e66:	461a      	mov	r2, r3
 8038e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8038e6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8038e6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8038e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8038e74:	e841 2300 	strex	r3, r2, [r1]
 8038e78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8038e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8038e7c:	2b00      	cmp	r3, #0
 8038e7e:	d1e4      	bne.n	8038e4a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8038e80:	687b      	ldr	r3, [r7, #4]
 8038e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8038e84:	4618      	mov	r0, r3
 8038e86:	f7f6 fced 	bl	802f864 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8038e8a:	687b      	ldr	r3, [r7, #4]
 8038e8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8038e90:	687b      	ldr	r3, [r7, #4]
 8038e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038e96:	b29b      	uxth	r3, r3
 8038e98:	1ad3      	subs	r3, r2, r3
 8038e9a:	b29b      	uxth	r3, r3
 8038e9c:	4619      	mov	r1, r3
 8038e9e:	6878      	ldr	r0, [r7, #4]
 8038ea0:	f000 f912 	bl	80390c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8038ea4:	e0fb      	b.n	803909e <HAL_UART_IRQHandler+0x726>
 8038ea6:	bf00      	nop
 8038ea8:	40020010 	.word	0x40020010
 8038eac:	40020028 	.word	0x40020028
 8038eb0:	40020040 	.word	0x40020040
 8038eb4:	40020058 	.word	0x40020058
 8038eb8:	40020070 	.word	0x40020070
 8038ebc:	40020088 	.word	0x40020088
 8038ec0:	400200a0 	.word	0x400200a0
 8038ec4:	400200b8 	.word	0x400200b8
 8038ec8:	40020410 	.word	0x40020410
 8038ecc:	40020428 	.word	0x40020428
 8038ed0:	40020440 	.word	0x40020440
 8038ed4:	40020458 	.word	0x40020458
 8038ed8:	40020470 	.word	0x40020470
 8038edc:	40020488 	.word	0x40020488
 8038ee0:	400204a0 	.word	0x400204a0
 8038ee4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8038ee8:	687b      	ldr	r3, [r7, #4]
 8038eea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8038eee:	687b      	ldr	r3, [r7, #4]
 8038ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038ef4:	b29b      	uxth	r3, r3
 8038ef6:	1ad3      	subs	r3, r2, r3
 8038ef8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8038efc:	687b      	ldr	r3, [r7, #4]
 8038efe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8038f02:	b29b      	uxth	r3, r3
 8038f04:	2b00      	cmp	r3, #0
 8038f06:	f000 80cc 	beq.w	80390a2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8038f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8038f0e:	2b00      	cmp	r3, #0
 8038f10:	f000 80c7 	beq.w	80390a2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8038f14:	687b      	ldr	r3, [r7, #4]
 8038f16:	681b      	ldr	r3, [r3, #0]
 8038f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038f1c:	e853 3f00 	ldrex	r3, [r3]
 8038f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8038f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8038f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8038f2c:	687b      	ldr	r3, [r7, #4]
 8038f2e:	681b      	ldr	r3, [r3, #0]
 8038f30:	461a      	mov	r2, r3
 8038f32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8038f36:	647b      	str	r3, [r7, #68]	; 0x44
 8038f38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038f3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8038f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8038f3e:	e841 2300 	strex	r3, r2, [r1]
 8038f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8038f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038f46:	2b00      	cmp	r3, #0
 8038f48:	d1e4      	bne.n	8038f14 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8038f4a:	687b      	ldr	r3, [r7, #4]
 8038f4c:	681b      	ldr	r3, [r3, #0]
 8038f4e:	3308      	adds	r3, #8
 8038f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038f54:	e853 3f00 	ldrex	r3, [r3]
 8038f58:	623b      	str	r3, [r7, #32]
   return(result);
 8038f5a:	6a3a      	ldr	r2, [r7, #32]
 8038f5c:	4b54      	ldr	r3, [pc, #336]	; (80390b0 <HAL_UART_IRQHandler+0x738>)
 8038f5e:	4013      	ands	r3, r2
 8038f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8038f64:	687b      	ldr	r3, [r7, #4]
 8038f66:	681b      	ldr	r3, [r3, #0]
 8038f68:	3308      	adds	r3, #8
 8038f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8038f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8038f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8038f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8038f76:	e841 2300 	strex	r3, r2, [r1]
 8038f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8038f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038f7e:	2b00      	cmp	r3, #0
 8038f80:	d1e3      	bne.n	8038f4a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8038f82:	687b      	ldr	r3, [r7, #4]
 8038f84:	2220      	movs	r2, #32
 8038f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8038f8a:	687b      	ldr	r3, [r7, #4]
 8038f8c:	2200      	movs	r2, #0
 8038f8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8038f90:	687b      	ldr	r3, [r7, #4]
 8038f92:	2200      	movs	r2, #0
 8038f94:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8038f96:	687b      	ldr	r3, [r7, #4]
 8038f98:	681b      	ldr	r3, [r3, #0]
 8038f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8038f9c:	693b      	ldr	r3, [r7, #16]
 8038f9e:	e853 3f00 	ldrex	r3, [r3]
 8038fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8038fa4:	68fb      	ldr	r3, [r7, #12]
 8038fa6:	f023 0310 	bic.w	r3, r3, #16
 8038faa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8038fae:	687b      	ldr	r3, [r7, #4]
 8038fb0:	681b      	ldr	r3, [r3, #0]
 8038fb2:	461a      	mov	r2, r3
 8038fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8038fb8:	61fb      	str	r3, [r7, #28]
 8038fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8038fbc:	69b9      	ldr	r1, [r7, #24]
 8038fbe:	69fa      	ldr	r2, [r7, #28]
 8038fc0:	e841 2300 	strex	r3, r2, [r1]
 8038fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8038fc6:	697b      	ldr	r3, [r7, #20]
 8038fc8:	2b00      	cmp	r3, #0
 8038fca:	d1e4      	bne.n	8038f96 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8038fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8038fd0:	4619      	mov	r1, r3
 8038fd2:	6878      	ldr	r0, [r7, #4]
 8038fd4:	f000 f878 	bl	80390c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8038fd8:	e063      	b.n	80390a2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8038fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8038fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8038fe2:	2b00      	cmp	r3, #0
 8038fe4:	d00e      	beq.n	8039004 <HAL_UART_IRQHandler+0x68c>
 8038fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8038fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8038fee:	2b00      	cmp	r3, #0
 8038ff0:	d008      	beq.n	8039004 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8038ff2:	687b      	ldr	r3, [r7, #4]
 8038ff4:	681b      	ldr	r3, [r3, #0]
 8038ff6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8038ffa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8038ffc:	6878      	ldr	r0, [r7, #4]
 8038ffe:	f001 ff5d 	bl	803aebc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8039002:	e051      	b.n	80390a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8039004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8039008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803900c:	2b00      	cmp	r3, #0
 803900e:	d014      	beq.n	803903a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8039010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8039014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8039018:	2b00      	cmp	r3, #0
 803901a:	d105      	bne.n	8039028 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 803901c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8039020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8039024:	2b00      	cmp	r3, #0
 8039026:	d008      	beq.n	803903a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8039028:	687b      	ldr	r3, [r7, #4]
 803902a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803902c:	2b00      	cmp	r3, #0
 803902e:	d03a      	beq.n	80390a6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8039030:	687b      	ldr	r3, [r7, #4]
 8039032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8039034:	6878      	ldr	r0, [r7, #4]
 8039036:	4798      	blx	r3
    }
    return;
 8039038:	e035      	b.n	80390a6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 803903a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803903e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8039042:	2b00      	cmp	r3, #0
 8039044:	d009      	beq.n	803905a <HAL_UART_IRQHandler+0x6e2>
 8039046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803904a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803904e:	2b00      	cmp	r3, #0
 8039050:	d003      	beq.n	803905a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8039052:	6878      	ldr	r0, [r7, #4]
 8039054:	f001 faaa 	bl	803a5ac <UART_EndTransmit_IT>
    return;
 8039058:	e026      	b.n	80390a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 803905a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803905e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8039062:	2b00      	cmp	r3, #0
 8039064:	d009      	beq.n	803907a <HAL_UART_IRQHandler+0x702>
 8039066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803906a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 803906e:	2b00      	cmp	r3, #0
 8039070:	d003      	beq.n	803907a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8039072:	6878      	ldr	r0, [r7, #4]
 8039074:	f001 ff36 	bl	803aee4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8039078:	e016      	b.n	80390a8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 803907a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803907e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8039082:	2b00      	cmp	r3, #0
 8039084:	d010      	beq.n	80390a8 <HAL_UART_IRQHandler+0x730>
 8039086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803908a:	2b00      	cmp	r3, #0
 803908c:	da0c      	bge.n	80390a8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 803908e:	6878      	ldr	r0, [r7, #4]
 8039090:	f001 ff1e 	bl	803aed0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8039094:	e008      	b.n	80390a8 <HAL_UART_IRQHandler+0x730>
      return;
 8039096:	bf00      	nop
 8039098:	e006      	b.n	80390a8 <HAL_UART_IRQHandler+0x730>
    return;
 803909a:	bf00      	nop
 803909c:	e004      	b.n	80390a8 <HAL_UART_IRQHandler+0x730>
      return;
 803909e:	bf00      	nop
 80390a0:	e002      	b.n	80390a8 <HAL_UART_IRQHandler+0x730>
      return;
 80390a2:	bf00      	nop
 80390a4:	e000      	b.n	80390a8 <HAL_UART_IRQHandler+0x730>
    return;
 80390a6:	bf00      	nop
  }
}
 80390a8:	37e8      	adds	r7, #232	; 0xe8
 80390aa:	46bd      	mov	sp, r7
 80390ac:	bd80      	pop	{r7, pc}
 80390ae:	bf00      	nop
 80390b0:	effffffe 	.word	0xeffffffe

080390b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80390b4:	b480      	push	{r7}
 80390b6:	b083      	sub	sp, #12
 80390b8:	af00      	add	r7, sp, #0
 80390ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80390bc:	bf00      	nop
 80390be:	370c      	adds	r7, #12
 80390c0:	46bd      	mov	sp, r7
 80390c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390c6:	4770      	bx	lr

080390c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80390c8:	b480      	push	{r7}
 80390ca:	b083      	sub	sp, #12
 80390cc:	af00      	add	r7, sp, #0
 80390ce:	6078      	str	r0, [r7, #4]
 80390d0:	460b      	mov	r3, r1
 80390d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80390d4:	bf00      	nop
 80390d6:	370c      	adds	r7, #12
 80390d8:	46bd      	mov	sp, r7
 80390da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390de:	4770      	bx	lr

080390e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80390e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80390e4:	b092      	sub	sp, #72	; 0x48
 80390e6:	af00      	add	r7, sp, #0
 80390e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80390ea:	2300      	movs	r3, #0
 80390ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80390f0:	697b      	ldr	r3, [r7, #20]
 80390f2:	689a      	ldr	r2, [r3, #8]
 80390f4:	697b      	ldr	r3, [r7, #20]
 80390f6:	691b      	ldr	r3, [r3, #16]
 80390f8:	431a      	orrs	r2, r3
 80390fa:	697b      	ldr	r3, [r7, #20]
 80390fc:	695b      	ldr	r3, [r3, #20]
 80390fe:	431a      	orrs	r2, r3
 8039100:	697b      	ldr	r3, [r7, #20]
 8039102:	69db      	ldr	r3, [r3, #28]
 8039104:	4313      	orrs	r3, r2
 8039106:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8039108:	697b      	ldr	r3, [r7, #20]
 803910a:	681b      	ldr	r3, [r3, #0]
 803910c:	681a      	ldr	r2, [r3, #0]
 803910e:	4bbe      	ldr	r3, [pc, #760]	; (8039408 <UART_SetConfig+0x328>)
 8039110:	4013      	ands	r3, r2
 8039112:	697a      	ldr	r2, [r7, #20]
 8039114:	6812      	ldr	r2, [r2, #0]
 8039116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8039118:	430b      	orrs	r3, r1
 803911a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 803911c:	697b      	ldr	r3, [r7, #20]
 803911e:	681b      	ldr	r3, [r3, #0]
 8039120:	685b      	ldr	r3, [r3, #4]
 8039122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8039126:	697b      	ldr	r3, [r7, #20]
 8039128:	68da      	ldr	r2, [r3, #12]
 803912a:	697b      	ldr	r3, [r7, #20]
 803912c:	681b      	ldr	r3, [r3, #0]
 803912e:	430a      	orrs	r2, r1
 8039130:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8039132:	697b      	ldr	r3, [r7, #20]
 8039134:	699b      	ldr	r3, [r3, #24]
 8039136:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8039138:	697b      	ldr	r3, [r7, #20]
 803913a:	681b      	ldr	r3, [r3, #0]
 803913c:	4ab3      	ldr	r2, [pc, #716]	; (803940c <UART_SetConfig+0x32c>)
 803913e:	4293      	cmp	r3, r2
 8039140:	d004      	beq.n	803914c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8039142:	697b      	ldr	r3, [r7, #20]
 8039144:	6a1b      	ldr	r3, [r3, #32]
 8039146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8039148:	4313      	orrs	r3, r2
 803914a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 803914c:	697b      	ldr	r3, [r7, #20]
 803914e:	681b      	ldr	r3, [r3, #0]
 8039150:	689a      	ldr	r2, [r3, #8]
 8039152:	4baf      	ldr	r3, [pc, #700]	; (8039410 <UART_SetConfig+0x330>)
 8039154:	4013      	ands	r3, r2
 8039156:	697a      	ldr	r2, [r7, #20]
 8039158:	6812      	ldr	r2, [r2, #0]
 803915a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 803915c:	430b      	orrs	r3, r1
 803915e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8039160:	697b      	ldr	r3, [r7, #20]
 8039162:	681b      	ldr	r3, [r3, #0]
 8039164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039166:	f023 010f 	bic.w	r1, r3, #15
 803916a:	697b      	ldr	r3, [r7, #20]
 803916c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 803916e:	697b      	ldr	r3, [r7, #20]
 8039170:	681b      	ldr	r3, [r3, #0]
 8039172:	430a      	orrs	r2, r1
 8039174:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8039176:	697b      	ldr	r3, [r7, #20]
 8039178:	681b      	ldr	r3, [r3, #0]
 803917a:	4aa6      	ldr	r2, [pc, #664]	; (8039414 <UART_SetConfig+0x334>)
 803917c:	4293      	cmp	r3, r2
 803917e:	d177      	bne.n	8039270 <UART_SetConfig+0x190>
 8039180:	4ba5      	ldr	r3, [pc, #660]	; (8039418 <UART_SetConfig+0x338>)
 8039182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8039184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8039188:	2b28      	cmp	r3, #40	; 0x28
 803918a:	d86d      	bhi.n	8039268 <UART_SetConfig+0x188>
 803918c:	a201      	add	r2, pc, #4	; (adr r2, 8039194 <UART_SetConfig+0xb4>)
 803918e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039192:	bf00      	nop
 8039194:	08039239 	.word	0x08039239
 8039198:	08039269 	.word	0x08039269
 803919c:	08039269 	.word	0x08039269
 80391a0:	08039269 	.word	0x08039269
 80391a4:	08039269 	.word	0x08039269
 80391a8:	08039269 	.word	0x08039269
 80391ac:	08039269 	.word	0x08039269
 80391b0:	08039269 	.word	0x08039269
 80391b4:	08039241 	.word	0x08039241
 80391b8:	08039269 	.word	0x08039269
 80391bc:	08039269 	.word	0x08039269
 80391c0:	08039269 	.word	0x08039269
 80391c4:	08039269 	.word	0x08039269
 80391c8:	08039269 	.word	0x08039269
 80391cc:	08039269 	.word	0x08039269
 80391d0:	08039269 	.word	0x08039269
 80391d4:	08039249 	.word	0x08039249
 80391d8:	08039269 	.word	0x08039269
 80391dc:	08039269 	.word	0x08039269
 80391e0:	08039269 	.word	0x08039269
 80391e4:	08039269 	.word	0x08039269
 80391e8:	08039269 	.word	0x08039269
 80391ec:	08039269 	.word	0x08039269
 80391f0:	08039269 	.word	0x08039269
 80391f4:	08039251 	.word	0x08039251
 80391f8:	08039269 	.word	0x08039269
 80391fc:	08039269 	.word	0x08039269
 8039200:	08039269 	.word	0x08039269
 8039204:	08039269 	.word	0x08039269
 8039208:	08039269 	.word	0x08039269
 803920c:	08039269 	.word	0x08039269
 8039210:	08039269 	.word	0x08039269
 8039214:	08039259 	.word	0x08039259
 8039218:	08039269 	.word	0x08039269
 803921c:	08039269 	.word	0x08039269
 8039220:	08039269 	.word	0x08039269
 8039224:	08039269 	.word	0x08039269
 8039228:	08039269 	.word	0x08039269
 803922c:	08039269 	.word	0x08039269
 8039230:	08039269 	.word	0x08039269
 8039234:	08039261 	.word	0x08039261
 8039238:	2301      	movs	r3, #1
 803923a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803923e:	e222      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039240:	2304      	movs	r3, #4
 8039242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039246:	e21e      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039248:	2308      	movs	r3, #8
 803924a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803924e:	e21a      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039250:	2310      	movs	r3, #16
 8039252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039256:	e216      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039258:	2320      	movs	r3, #32
 803925a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803925e:	e212      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039260:	2340      	movs	r3, #64	; 0x40
 8039262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039266:	e20e      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039268:	2380      	movs	r3, #128	; 0x80
 803926a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803926e:	e20a      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039270:	697b      	ldr	r3, [r7, #20]
 8039272:	681b      	ldr	r3, [r3, #0]
 8039274:	4a69      	ldr	r2, [pc, #420]	; (803941c <UART_SetConfig+0x33c>)
 8039276:	4293      	cmp	r3, r2
 8039278:	d130      	bne.n	80392dc <UART_SetConfig+0x1fc>
 803927a:	4b67      	ldr	r3, [pc, #412]	; (8039418 <UART_SetConfig+0x338>)
 803927c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803927e:	f003 0307 	and.w	r3, r3, #7
 8039282:	2b05      	cmp	r3, #5
 8039284:	d826      	bhi.n	80392d4 <UART_SetConfig+0x1f4>
 8039286:	a201      	add	r2, pc, #4	; (adr r2, 803928c <UART_SetConfig+0x1ac>)
 8039288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803928c:	080392a5 	.word	0x080392a5
 8039290:	080392ad 	.word	0x080392ad
 8039294:	080392b5 	.word	0x080392b5
 8039298:	080392bd 	.word	0x080392bd
 803929c:	080392c5 	.word	0x080392c5
 80392a0:	080392cd 	.word	0x080392cd
 80392a4:	2300      	movs	r3, #0
 80392a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80392aa:	e1ec      	b.n	8039686 <UART_SetConfig+0x5a6>
 80392ac:	2304      	movs	r3, #4
 80392ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80392b2:	e1e8      	b.n	8039686 <UART_SetConfig+0x5a6>
 80392b4:	2308      	movs	r3, #8
 80392b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80392ba:	e1e4      	b.n	8039686 <UART_SetConfig+0x5a6>
 80392bc:	2310      	movs	r3, #16
 80392be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80392c2:	e1e0      	b.n	8039686 <UART_SetConfig+0x5a6>
 80392c4:	2320      	movs	r3, #32
 80392c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80392ca:	e1dc      	b.n	8039686 <UART_SetConfig+0x5a6>
 80392cc:	2340      	movs	r3, #64	; 0x40
 80392ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80392d2:	e1d8      	b.n	8039686 <UART_SetConfig+0x5a6>
 80392d4:	2380      	movs	r3, #128	; 0x80
 80392d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80392da:	e1d4      	b.n	8039686 <UART_SetConfig+0x5a6>
 80392dc:	697b      	ldr	r3, [r7, #20]
 80392de:	681b      	ldr	r3, [r3, #0]
 80392e0:	4a4f      	ldr	r2, [pc, #316]	; (8039420 <UART_SetConfig+0x340>)
 80392e2:	4293      	cmp	r3, r2
 80392e4:	d130      	bne.n	8039348 <UART_SetConfig+0x268>
 80392e6:	4b4c      	ldr	r3, [pc, #304]	; (8039418 <UART_SetConfig+0x338>)
 80392e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80392ea:	f003 0307 	and.w	r3, r3, #7
 80392ee:	2b05      	cmp	r3, #5
 80392f0:	d826      	bhi.n	8039340 <UART_SetConfig+0x260>
 80392f2:	a201      	add	r2, pc, #4	; (adr r2, 80392f8 <UART_SetConfig+0x218>)
 80392f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80392f8:	08039311 	.word	0x08039311
 80392fc:	08039319 	.word	0x08039319
 8039300:	08039321 	.word	0x08039321
 8039304:	08039329 	.word	0x08039329
 8039308:	08039331 	.word	0x08039331
 803930c:	08039339 	.word	0x08039339
 8039310:	2300      	movs	r3, #0
 8039312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039316:	e1b6      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039318:	2304      	movs	r3, #4
 803931a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803931e:	e1b2      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039320:	2308      	movs	r3, #8
 8039322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039326:	e1ae      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039328:	2310      	movs	r3, #16
 803932a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803932e:	e1aa      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039330:	2320      	movs	r3, #32
 8039332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039336:	e1a6      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039338:	2340      	movs	r3, #64	; 0x40
 803933a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803933e:	e1a2      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039340:	2380      	movs	r3, #128	; 0x80
 8039342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039346:	e19e      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039348:	697b      	ldr	r3, [r7, #20]
 803934a:	681b      	ldr	r3, [r3, #0]
 803934c:	4a35      	ldr	r2, [pc, #212]	; (8039424 <UART_SetConfig+0x344>)
 803934e:	4293      	cmp	r3, r2
 8039350:	d130      	bne.n	80393b4 <UART_SetConfig+0x2d4>
 8039352:	4b31      	ldr	r3, [pc, #196]	; (8039418 <UART_SetConfig+0x338>)
 8039354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8039356:	f003 0307 	and.w	r3, r3, #7
 803935a:	2b05      	cmp	r3, #5
 803935c:	d826      	bhi.n	80393ac <UART_SetConfig+0x2cc>
 803935e:	a201      	add	r2, pc, #4	; (adr r2, 8039364 <UART_SetConfig+0x284>)
 8039360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039364:	0803937d 	.word	0x0803937d
 8039368:	08039385 	.word	0x08039385
 803936c:	0803938d 	.word	0x0803938d
 8039370:	08039395 	.word	0x08039395
 8039374:	0803939d 	.word	0x0803939d
 8039378:	080393a5 	.word	0x080393a5
 803937c:	2300      	movs	r3, #0
 803937e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039382:	e180      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039384:	2304      	movs	r3, #4
 8039386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803938a:	e17c      	b.n	8039686 <UART_SetConfig+0x5a6>
 803938c:	2308      	movs	r3, #8
 803938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039392:	e178      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039394:	2310      	movs	r3, #16
 8039396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803939a:	e174      	b.n	8039686 <UART_SetConfig+0x5a6>
 803939c:	2320      	movs	r3, #32
 803939e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80393a2:	e170      	b.n	8039686 <UART_SetConfig+0x5a6>
 80393a4:	2340      	movs	r3, #64	; 0x40
 80393a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80393aa:	e16c      	b.n	8039686 <UART_SetConfig+0x5a6>
 80393ac:	2380      	movs	r3, #128	; 0x80
 80393ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80393b2:	e168      	b.n	8039686 <UART_SetConfig+0x5a6>
 80393b4:	697b      	ldr	r3, [r7, #20]
 80393b6:	681b      	ldr	r3, [r3, #0]
 80393b8:	4a1b      	ldr	r2, [pc, #108]	; (8039428 <UART_SetConfig+0x348>)
 80393ba:	4293      	cmp	r3, r2
 80393bc:	d142      	bne.n	8039444 <UART_SetConfig+0x364>
 80393be:	4b16      	ldr	r3, [pc, #88]	; (8039418 <UART_SetConfig+0x338>)
 80393c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80393c2:	f003 0307 	and.w	r3, r3, #7
 80393c6:	2b05      	cmp	r3, #5
 80393c8:	d838      	bhi.n	803943c <UART_SetConfig+0x35c>
 80393ca:	a201      	add	r2, pc, #4	; (adr r2, 80393d0 <UART_SetConfig+0x2f0>)
 80393cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80393d0:	080393e9 	.word	0x080393e9
 80393d4:	080393f1 	.word	0x080393f1
 80393d8:	080393f9 	.word	0x080393f9
 80393dc:	08039401 	.word	0x08039401
 80393e0:	0803942d 	.word	0x0803942d
 80393e4:	08039435 	.word	0x08039435
 80393e8:	2300      	movs	r3, #0
 80393ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80393ee:	e14a      	b.n	8039686 <UART_SetConfig+0x5a6>
 80393f0:	2304      	movs	r3, #4
 80393f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80393f6:	e146      	b.n	8039686 <UART_SetConfig+0x5a6>
 80393f8:	2308      	movs	r3, #8
 80393fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80393fe:	e142      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039400:	2310      	movs	r3, #16
 8039402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039406:	e13e      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039408:	cfff69f3 	.word	0xcfff69f3
 803940c:	58000c00 	.word	0x58000c00
 8039410:	11fff4ff 	.word	0x11fff4ff
 8039414:	40011000 	.word	0x40011000
 8039418:	58024400 	.word	0x58024400
 803941c:	40004400 	.word	0x40004400
 8039420:	40004800 	.word	0x40004800
 8039424:	40004c00 	.word	0x40004c00
 8039428:	40005000 	.word	0x40005000
 803942c:	2320      	movs	r3, #32
 803942e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039432:	e128      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039434:	2340      	movs	r3, #64	; 0x40
 8039436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803943a:	e124      	b.n	8039686 <UART_SetConfig+0x5a6>
 803943c:	2380      	movs	r3, #128	; 0x80
 803943e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039442:	e120      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039444:	697b      	ldr	r3, [r7, #20]
 8039446:	681b      	ldr	r3, [r3, #0]
 8039448:	4acb      	ldr	r2, [pc, #812]	; (8039778 <UART_SetConfig+0x698>)
 803944a:	4293      	cmp	r3, r2
 803944c:	d176      	bne.n	803953c <UART_SetConfig+0x45c>
 803944e:	4bcb      	ldr	r3, [pc, #812]	; (803977c <UART_SetConfig+0x69c>)
 8039450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8039452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8039456:	2b28      	cmp	r3, #40	; 0x28
 8039458:	d86c      	bhi.n	8039534 <UART_SetConfig+0x454>
 803945a:	a201      	add	r2, pc, #4	; (adr r2, 8039460 <UART_SetConfig+0x380>)
 803945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039460:	08039505 	.word	0x08039505
 8039464:	08039535 	.word	0x08039535
 8039468:	08039535 	.word	0x08039535
 803946c:	08039535 	.word	0x08039535
 8039470:	08039535 	.word	0x08039535
 8039474:	08039535 	.word	0x08039535
 8039478:	08039535 	.word	0x08039535
 803947c:	08039535 	.word	0x08039535
 8039480:	0803950d 	.word	0x0803950d
 8039484:	08039535 	.word	0x08039535
 8039488:	08039535 	.word	0x08039535
 803948c:	08039535 	.word	0x08039535
 8039490:	08039535 	.word	0x08039535
 8039494:	08039535 	.word	0x08039535
 8039498:	08039535 	.word	0x08039535
 803949c:	08039535 	.word	0x08039535
 80394a0:	08039515 	.word	0x08039515
 80394a4:	08039535 	.word	0x08039535
 80394a8:	08039535 	.word	0x08039535
 80394ac:	08039535 	.word	0x08039535
 80394b0:	08039535 	.word	0x08039535
 80394b4:	08039535 	.word	0x08039535
 80394b8:	08039535 	.word	0x08039535
 80394bc:	08039535 	.word	0x08039535
 80394c0:	0803951d 	.word	0x0803951d
 80394c4:	08039535 	.word	0x08039535
 80394c8:	08039535 	.word	0x08039535
 80394cc:	08039535 	.word	0x08039535
 80394d0:	08039535 	.word	0x08039535
 80394d4:	08039535 	.word	0x08039535
 80394d8:	08039535 	.word	0x08039535
 80394dc:	08039535 	.word	0x08039535
 80394e0:	08039525 	.word	0x08039525
 80394e4:	08039535 	.word	0x08039535
 80394e8:	08039535 	.word	0x08039535
 80394ec:	08039535 	.word	0x08039535
 80394f0:	08039535 	.word	0x08039535
 80394f4:	08039535 	.word	0x08039535
 80394f8:	08039535 	.word	0x08039535
 80394fc:	08039535 	.word	0x08039535
 8039500:	0803952d 	.word	0x0803952d
 8039504:	2301      	movs	r3, #1
 8039506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803950a:	e0bc      	b.n	8039686 <UART_SetConfig+0x5a6>
 803950c:	2304      	movs	r3, #4
 803950e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039512:	e0b8      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039514:	2308      	movs	r3, #8
 8039516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803951a:	e0b4      	b.n	8039686 <UART_SetConfig+0x5a6>
 803951c:	2310      	movs	r3, #16
 803951e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039522:	e0b0      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039524:	2320      	movs	r3, #32
 8039526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803952a:	e0ac      	b.n	8039686 <UART_SetConfig+0x5a6>
 803952c:	2340      	movs	r3, #64	; 0x40
 803952e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039532:	e0a8      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039534:	2380      	movs	r3, #128	; 0x80
 8039536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803953a:	e0a4      	b.n	8039686 <UART_SetConfig+0x5a6>
 803953c:	697b      	ldr	r3, [r7, #20]
 803953e:	681b      	ldr	r3, [r3, #0]
 8039540:	4a8f      	ldr	r2, [pc, #572]	; (8039780 <UART_SetConfig+0x6a0>)
 8039542:	4293      	cmp	r3, r2
 8039544:	d130      	bne.n	80395a8 <UART_SetConfig+0x4c8>
 8039546:	4b8d      	ldr	r3, [pc, #564]	; (803977c <UART_SetConfig+0x69c>)
 8039548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803954a:	f003 0307 	and.w	r3, r3, #7
 803954e:	2b05      	cmp	r3, #5
 8039550:	d826      	bhi.n	80395a0 <UART_SetConfig+0x4c0>
 8039552:	a201      	add	r2, pc, #4	; (adr r2, 8039558 <UART_SetConfig+0x478>)
 8039554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039558:	08039571 	.word	0x08039571
 803955c:	08039579 	.word	0x08039579
 8039560:	08039581 	.word	0x08039581
 8039564:	08039589 	.word	0x08039589
 8039568:	08039591 	.word	0x08039591
 803956c:	08039599 	.word	0x08039599
 8039570:	2300      	movs	r3, #0
 8039572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039576:	e086      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039578:	2304      	movs	r3, #4
 803957a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803957e:	e082      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039580:	2308      	movs	r3, #8
 8039582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039586:	e07e      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039588:	2310      	movs	r3, #16
 803958a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803958e:	e07a      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039590:	2320      	movs	r3, #32
 8039592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039596:	e076      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039598:	2340      	movs	r3, #64	; 0x40
 803959a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803959e:	e072      	b.n	8039686 <UART_SetConfig+0x5a6>
 80395a0:	2380      	movs	r3, #128	; 0x80
 80395a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80395a6:	e06e      	b.n	8039686 <UART_SetConfig+0x5a6>
 80395a8:	697b      	ldr	r3, [r7, #20]
 80395aa:	681b      	ldr	r3, [r3, #0]
 80395ac:	4a75      	ldr	r2, [pc, #468]	; (8039784 <UART_SetConfig+0x6a4>)
 80395ae:	4293      	cmp	r3, r2
 80395b0:	d130      	bne.n	8039614 <UART_SetConfig+0x534>
 80395b2:	4b72      	ldr	r3, [pc, #456]	; (803977c <UART_SetConfig+0x69c>)
 80395b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80395b6:	f003 0307 	and.w	r3, r3, #7
 80395ba:	2b05      	cmp	r3, #5
 80395bc:	d826      	bhi.n	803960c <UART_SetConfig+0x52c>
 80395be:	a201      	add	r2, pc, #4	; (adr r2, 80395c4 <UART_SetConfig+0x4e4>)
 80395c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80395c4:	080395dd 	.word	0x080395dd
 80395c8:	080395e5 	.word	0x080395e5
 80395cc:	080395ed 	.word	0x080395ed
 80395d0:	080395f5 	.word	0x080395f5
 80395d4:	080395fd 	.word	0x080395fd
 80395d8:	08039605 	.word	0x08039605
 80395dc:	2300      	movs	r3, #0
 80395de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80395e2:	e050      	b.n	8039686 <UART_SetConfig+0x5a6>
 80395e4:	2304      	movs	r3, #4
 80395e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80395ea:	e04c      	b.n	8039686 <UART_SetConfig+0x5a6>
 80395ec:	2308      	movs	r3, #8
 80395ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80395f2:	e048      	b.n	8039686 <UART_SetConfig+0x5a6>
 80395f4:	2310      	movs	r3, #16
 80395f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80395fa:	e044      	b.n	8039686 <UART_SetConfig+0x5a6>
 80395fc:	2320      	movs	r3, #32
 80395fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039602:	e040      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039604:	2340      	movs	r3, #64	; 0x40
 8039606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803960a:	e03c      	b.n	8039686 <UART_SetConfig+0x5a6>
 803960c:	2380      	movs	r3, #128	; 0x80
 803960e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039612:	e038      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039614:	697b      	ldr	r3, [r7, #20]
 8039616:	681b      	ldr	r3, [r3, #0]
 8039618:	4a5b      	ldr	r2, [pc, #364]	; (8039788 <UART_SetConfig+0x6a8>)
 803961a:	4293      	cmp	r3, r2
 803961c:	d130      	bne.n	8039680 <UART_SetConfig+0x5a0>
 803961e:	4b57      	ldr	r3, [pc, #348]	; (803977c <UART_SetConfig+0x69c>)
 8039620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8039622:	f003 0307 	and.w	r3, r3, #7
 8039626:	2b05      	cmp	r3, #5
 8039628:	d826      	bhi.n	8039678 <UART_SetConfig+0x598>
 803962a:	a201      	add	r2, pc, #4	; (adr r2, 8039630 <UART_SetConfig+0x550>)
 803962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039630:	08039649 	.word	0x08039649
 8039634:	08039651 	.word	0x08039651
 8039638:	08039659 	.word	0x08039659
 803963c:	08039661 	.word	0x08039661
 8039640:	08039669 	.word	0x08039669
 8039644:	08039671 	.word	0x08039671
 8039648:	2302      	movs	r3, #2
 803964a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803964e:	e01a      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039650:	2304      	movs	r3, #4
 8039652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039656:	e016      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039658:	2308      	movs	r3, #8
 803965a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803965e:	e012      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039660:	2310      	movs	r3, #16
 8039662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039666:	e00e      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039668:	2320      	movs	r3, #32
 803966a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803966e:	e00a      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039670:	2340      	movs	r3, #64	; 0x40
 8039672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8039676:	e006      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039678:	2380      	movs	r3, #128	; 0x80
 803967a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803967e:	e002      	b.n	8039686 <UART_SetConfig+0x5a6>
 8039680:	2380      	movs	r3, #128	; 0x80
 8039682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8039686:	697b      	ldr	r3, [r7, #20]
 8039688:	681b      	ldr	r3, [r3, #0]
 803968a:	4a3f      	ldr	r2, [pc, #252]	; (8039788 <UART_SetConfig+0x6a8>)
 803968c:	4293      	cmp	r3, r2
 803968e:	f040 80f8 	bne.w	8039882 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8039692:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8039696:	2b20      	cmp	r3, #32
 8039698:	dc46      	bgt.n	8039728 <UART_SetConfig+0x648>
 803969a:	2b02      	cmp	r3, #2
 803969c:	f2c0 8082 	blt.w	80397a4 <UART_SetConfig+0x6c4>
 80396a0:	3b02      	subs	r3, #2
 80396a2:	2b1e      	cmp	r3, #30
 80396a4:	d87e      	bhi.n	80397a4 <UART_SetConfig+0x6c4>
 80396a6:	a201      	add	r2, pc, #4	; (adr r2, 80396ac <UART_SetConfig+0x5cc>)
 80396a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80396ac:	0803972f 	.word	0x0803972f
 80396b0:	080397a5 	.word	0x080397a5
 80396b4:	08039737 	.word	0x08039737
 80396b8:	080397a5 	.word	0x080397a5
 80396bc:	080397a5 	.word	0x080397a5
 80396c0:	080397a5 	.word	0x080397a5
 80396c4:	08039747 	.word	0x08039747
 80396c8:	080397a5 	.word	0x080397a5
 80396cc:	080397a5 	.word	0x080397a5
 80396d0:	080397a5 	.word	0x080397a5
 80396d4:	080397a5 	.word	0x080397a5
 80396d8:	080397a5 	.word	0x080397a5
 80396dc:	080397a5 	.word	0x080397a5
 80396e0:	080397a5 	.word	0x080397a5
 80396e4:	08039757 	.word	0x08039757
 80396e8:	080397a5 	.word	0x080397a5
 80396ec:	080397a5 	.word	0x080397a5
 80396f0:	080397a5 	.word	0x080397a5
 80396f4:	080397a5 	.word	0x080397a5
 80396f8:	080397a5 	.word	0x080397a5
 80396fc:	080397a5 	.word	0x080397a5
 8039700:	080397a5 	.word	0x080397a5
 8039704:	080397a5 	.word	0x080397a5
 8039708:	080397a5 	.word	0x080397a5
 803970c:	080397a5 	.word	0x080397a5
 8039710:	080397a5 	.word	0x080397a5
 8039714:	080397a5 	.word	0x080397a5
 8039718:	080397a5 	.word	0x080397a5
 803971c:	080397a5 	.word	0x080397a5
 8039720:	080397a5 	.word	0x080397a5
 8039724:	08039797 	.word	0x08039797
 8039728:	2b40      	cmp	r3, #64	; 0x40
 803972a:	d037      	beq.n	803979c <UART_SetConfig+0x6bc>
 803972c:	e03a      	b.n	80397a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 803972e:	f7fc fcbf 	bl	80360b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8039732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8039734:	e03c      	b.n	80397b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8039736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803973a:	4618      	mov	r0, r3
 803973c:	f7fc fcce 	bl	80360dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8039740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039744:	e034      	b.n	80397b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8039746:	f107 0318 	add.w	r3, r7, #24
 803974a:	4618      	mov	r0, r3
 803974c:	f7fc fe1a 	bl	8036384 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8039750:	69fb      	ldr	r3, [r7, #28]
 8039752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039754:	e02c      	b.n	80397b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8039756:	4b09      	ldr	r3, [pc, #36]	; (803977c <UART_SetConfig+0x69c>)
 8039758:	681b      	ldr	r3, [r3, #0]
 803975a:	f003 0320 	and.w	r3, r3, #32
 803975e:	2b00      	cmp	r3, #0
 8039760:	d016      	beq.n	8039790 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8039762:	4b06      	ldr	r3, [pc, #24]	; (803977c <UART_SetConfig+0x69c>)
 8039764:	681b      	ldr	r3, [r3, #0]
 8039766:	08db      	lsrs	r3, r3, #3
 8039768:	f003 0303 	and.w	r3, r3, #3
 803976c:	4a07      	ldr	r2, [pc, #28]	; (803978c <UART_SetConfig+0x6ac>)
 803976e:	fa22 f303 	lsr.w	r3, r2, r3
 8039772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8039774:	e01c      	b.n	80397b0 <UART_SetConfig+0x6d0>
 8039776:	bf00      	nop
 8039778:	40011400 	.word	0x40011400
 803977c:	58024400 	.word	0x58024400
 8039780:	40007800 	.word	0x40007800
 8039784:	40007c00 	.word	0x40007c00
 8039788:	58000c00 	.word	0x58000c00
 803978c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8039790:	4b9d      	ldr	r3, [pc, #628]	; (8039a08 <UART_SetConfig+0x928>)
 8039792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039794:	e00c      	b.n	80397b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8039796:	4b9d      	ldr	r3, [pc, #628]	; (8039a0c <UART_SetConfig+0x92c>)
 8039798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803979a:	e009      	b.n	80397b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 803979c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80397a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80397a2:	e005      	b.n	80397b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80397a4:	2300      	movs	r3, #0
 80397a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80397a8:	2301      	movs	r3, #1
 80397aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80397ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80397b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80397b2:	2b00      	cmp	r3, #0
 80397b4:	f000 81de 	beq.w	8039b74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80397b8:	697b      	ldr	r3, [r7, #20]
 80397ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80397bc:	4a94      	ldr	r2, [pc, #592]	; (8039a10 <UART_SetConfig+0x930>)
 80397be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80397c2:	461a      	mov	r2, r3
 80397c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80397c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80397ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80397cc:	697b      	ldr	r3, [r7, #20]
 80397ce:	685a      	ldr	r2, [r3, #4]
 80397d0:	4613      	mov	r3, r2
 80397d2:	005b      	lsls	r3, r3, #1
 80397d4:	4413      	add	r3, r2
 80397d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80397d8:	429a      	cmp	r2, r3
 80397da:	d305      	bcc.n	80397e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80397dc:	697b      	ldr	r3, [r7, #20]
 80397de:	685b      	ldr	r3, [r3, #4]
 80397e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80397e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80397e4:	429a      	cmp	r2, r3
 80397e6:	d903      	bls.n	80397f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80397e8:	2301      	movs	r3, #1
 80397ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80397ee:	e1c1      	b.n	8039b74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80397f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80397f2:	2200      	movs	r2, #0
 80397f4:	60bb      	str	r3, [r7, #8]
 80397f6:	60fa      	str	r2, [r7, #12]
 80397f8:	697b      	ldr	r3, [r7, #20]
 80397fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80397fc:	4a84      	ldr	r2, [pc, #528]	; (8039a10 <UART_SetConfig+0x930>)
 80397fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8039802:	b29b      	uxth	r3, r3
 8039804:	2200      	movs	r2, #0
 8039806:	603b      	str	r3, [r7, #0]
 8039808:	607a      	str	r2, [r7, #4]
 803980a:	e9d7 2300 	ldrd	r2, r3, [r7]
 803980e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8039812:	f7e6 fdb5 	bl	8020380 <__aeabi_uldivmod>
 8039816:	4602      	mov	r2, r0
 8039818:	460b      	mov	r3, r1
 803981a:	4610      	mov	r0, r2
 803981c:	4619      	mov	r1, r3
 803981e:	f04f 0200 	mov.w	r2, #0
 8039822:	f04f 0300 	mov.w	r3, #0
 8039826:	020b      	lsls	r3, r1, #8
 8039828:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 803982c:	0202      	lsls	r2, r0, #8
 803982e:	6979      	ldr	r1, [r7, #20]
 8039830:	6849      	ldr	r1, [r1, #4]
 8039832:	0849      	lsrs	r1, r1, #1
 8039834:	2000      	movs	r0, #0
 8039836:	460c      	mov	r4, r1
 8039838:	4605      	mov	r5, r0
 803983a:	eb12 0804 	adds.w	r8, r2, r4
 803983e:	eb43 0905 	adc.w	r9, r3, r5
 8039842:	697b      	ldr	r3, [r7, #20]
 8039844:	685b      	ldr	r3, [r3, #4]
 8039846:	2200      	movs	r2, #0
 8039848:	469a      	mov	sl, r3
 803984a:	4693      	mov	fp, r2
 803984c:	4652      	mov	r2, sl
 803984e:	465b      	mov	r3, fp
 8039850:	4640      	mov	r0, r8
 8039852:	4649      	mov	r1, r9
 8039854:	f7e6 fd94 	bl	8020380 <__aeabi_uldivmod>
 8039858:	4602      	mov	r2, r0
 803985a:	460b      	mov	r3, r1
 803985c:	4613      	mov	r3, r2
 803985e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8039860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8039866:	d308      	bcc.n	803987a <UART_SetConfig+0x79a>
 8039868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803986a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 803986e:	d204      	bcs.n	803987a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8039870:	697b      	ldr	r3, [r7, #20]
 8039872:	681b      	ldr	r3, [r3, #0]
 8039874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8039876:	60da      	str	r2, [r3, #12]
 8039878:	e17c      	b.n	8039b74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 803987a:	2301      	movs	r3, #1
 803987c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8039880:	e178      	b.n	8039b74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8039882:	697b      	ldr	r3, [r7, #20]
 8039884:	69db      	ldr	r3, [r3, #28]
 8039886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803988a:	f040 80c5 	bne.w	8039a18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 803988e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8039892:	2b20      	cmp	r3, #32
 8039894:	dc48      	bgt.n	8039928 <UART_SetConfig+0x848>
 8039896:	2b00      	cmp	r3, #0
 8039898:	db7b      	blt.n	8039992 <UART_SetConfig+0x8b2>
 803989a:	2b20      	cmp	r3, #32
 803989c:	d879      	bhi.n	8039992 <UART_SetConfig+0x8b2>
 803989e:	a201      	add	r2, pc, #4	; (adr r2, 80398a4 <UART_SetConfig+0x7c4>)
 80398a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80398a4:	0803992f 	.word	0x0803992f
 80398a8:	08039937 	.word	0x08039937
 80398ac:	08039993 	.word	0x08039993
 80398b0:	08039993 	.word	0x08039993
 80398b4:	0803993f 	.word	0x0803993f
 80398b8:	08039993 	.word	0x08039993
 80398bc:	08039993 	.word	0x08039993
 80398c0:	08039993 	.word	0x08039993
 80398c4:	0803994f 	.word	0x0803994f
 80398c8:	08039993 	.word	0x08039993
 80398cc:	08039993 	.word	0x08039993
 80398d0:	08039993 	.word	0x08039993
 80398d4:	08039993 	.word	0x08039993
 80398d8:	08039993 	.word	0x08039993
 80398dc:	08039993 	.word	0x08039993
 80398e0:	08039993 	.word	0x08039993
 80398e4:	0803995f 	.word	0x0803995f
 80398e8:	08039993 	.word	0x08039993
 80398ec:	08039993 	.word	0x08039993
 80398f0:	08039993 	.word	0x08039993
 80398f4:	08039993 	.word	0x08039993
 80398f8:	08039993 	.word	0x08039993
 80398fc:	08039993 	.word	0x08039993
 8039900:	08039993 	.word	0x08039993
 8039904:	08039993 	.word	0x08039993
 8039908:	08039993 	.word	0x08039993
 803990c:	08039993 	.word	0x08039993
 8039910:	08039993 	.word	0x08039993
 8039914:	08039993 	.word	0x08039993
 8039918:	08039993 	.word	0x08039993
 803991c:	08039993 	.word	0x08039993
 8039920:	08039993 	.word	0x08039993
 8039924:	08039985 	.word	0x08039985
 8039928:	2b40      	cmp	r3, #64	; 0x40
 803992a:	d02e      	beq.n	803998a <UART_SetConfig+0x8aa>
 803992c:	e031      	b.n	8039992 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 803992e:	f7fb fc4d 	bl	80351cc <HAL_RCC_GetPCLK1Freq>
 8039932:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8039934:	e033      	b.n	803999e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8039936:	f7fb fc5f 	bl	80351f8 <HAL_RCC_GetPCLK2Freq>
 803993a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 803993c:	e02f      	b.n	803999e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 803993e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8039942:	4618      	mov	r0, r3
 8039944:	f7fc fbca 	bl	80360dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8039948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803994a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803994c:	e027      	b.n	803999e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 803994e:	f107 0318 	add.w	r3, r7, #24
 8039952:	4618      	mov	r0, r3
 8039954:	f7fc fd16 	bl	8036384 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8039958:	69fb      	ldr	r3, [r7, #28]
 803995a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803995c:	e01f      	b.n	803999e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 803995e:	4b2d      	ldr	r3, [pc, #180]	; (8039a14 <UART_SetConfig+0x934>)
 8039960:	681b      	ldr	r3, [r3, #0]
 8039962:	f003 0320 	and.w	r3, r3, #32
 8039966:	2b00      	cmp	r3, #0
 8039968:	d009      	beq.n	803997e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803996a:	4b2a      	ldr	r3, [pc, #168]	; (8039a14 <UART_SetConfig+0x934>)
 803996c:	681b      	ldr	r3, [r3, #0]
 803996e:	08db      	lsrs	r3, r3, #3
 8039970:	f003 0303 	and.w	r3, r3, #3
 8039974:	4a24      	ldr	r2, [pc, #144]	; (8039a08 <UART_SetConfig+0x928>)
 8039976:	fa22 f303 	lsr.w	r3, r2, r3
 803997a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 803997c:	e00f      	b.n	803999e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 803997e:	4b22      	ldr	r3, [pc, #136]	; (8039a08 <UART_SetConfig+0x928>)
 8039980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039982:	e00c      	b.n	803999e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8039984:	4b21      	ldr	r3, [pc, #132]	; (8039a0c <UART_SetConfig+0x92c>)
 8039986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039988:	e009      	b.n	803999e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 803998a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 803998e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039990:	e005      	b.n	803999e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8039992:	2300      	movs	r3, #0
 8039994:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8039996:	2301      	movs	r3, #1
 8039998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 803999c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 803999e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80399a0:	2b00      	cmp	r3, #0
 80399a2:	f000 80e7 	beq.w	8039b74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80399a6:	697b      	ldr	r3, [r7, #20]
 80399a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80399aa:	4a19      	ldr	r2, [pc, #100]	; (8039a10 <UART_SetConfig+0x930>)
 80399ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80399b0:	461a      	mov	r2, r3
 80399b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80399b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80399b8:	005a      	lsls	r2, r3, #1
 80399ba:	697b      	ldr	r3, [r7, #20]
 80399bc:	685b      	ldr	r3, [r3, #4]
 80399be:	085b      	lsrs	r3, r3, #1
 80399c0:	441a      	add	r2, r3
 80399c2:	697b      	ldr	r3, [r7, #20]
 80399c4:	685b      	ldr	r3, [r3, #4]
 80399c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80399ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80399cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80399ce:	2b0f      	cmp	r3, #15
 80399d0:	d916      	bls.n	8039a00 <UART_SetConfig+0x920>
 80399d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80399d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80399d8:	d212      	bcs.n	8039a00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80399da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80399dc:	b29b      	uxth	r3, r3
 80399de:	f023 030f 	bic.w	r3, r3, #15
 80399e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80399e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80399e6:	085b      	lsrs	r3, r3, #1
 80399e8:	b29b      	uxth	r3, r3
 80399ea:	f003 0307 	and.w	r3, r3, #7
 80399ee:	b29a      	uxth	r2, r3
 80399f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80399f2:	4313      	orrs	r3, r2
 80399f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80399f6:	697b      	ldr	r3, [r7, #20]
 80399f8:	681b      	ldr	r3, [r3, #0]
 80399fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80399fc:	60da      	str	r2, [r3, #12]
 80399fe:	e0b9      	b.n	8039b74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8039a00:	2301      	movs	r3, #1
 8039a02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8039a06:	e0b5      	b.n	8039b74 <UART_SetConfig+0xa94>
 8039a08:	03d09000 	.word	0x03d09000
 8039a0c:	003d0900 	.word	0x003d0900
 8039a10:	0805b834 	.word	0x0805b834
 8039a14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8039a18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8039a1c:	2b20      	cmp	r3, #32
 8039a1e:	dc49      	bgt.n	8039ab4 <UART_SetConfig+0x9d4>
 8039a20:	2b00      	cmp	r3, #0
 8039a22:	db7c      	blt.n	8039b1e <UART_SetConfig+0xa3e>
 8039a24:	2b20      	cmp	r3, #32
 8039a26:	d87a      	bhi.n	8039b1e <UART_SetConfig+0xa3e>
 8039a28:	a201      	add	r2, pc, #4	; (adr r2, 8039a30 <UART_SetConfig+0x950>)
 8039a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039a2e:	bf00      	nop
 8039a30:	08039abb 	.word	0x08039abb
 8039a34:	08039ac3 	.word	0x08039ac3
 8039a38:	08039b1f 	.word	0x08039b1f
 8039a3c:	08039b1f 	.word	0x08039b1f
 8039a40:	08039acb 	.word	0x08039acb
 8039a44:	08039b1f 	.word	0x08039b1f
 8039a48:	08039b1f 	.word	0x08039b1f
 8039a4c:	08039b1f 	.word	0x08039b1f
 8039a50:	08039adb 	.word	0x08039adb
 8039a54:	08039b1f 	.word	0x08039b1f
 8039a58:	08039b1f 	.word	0x08039b1f
 8039a5c:	08039b1f 	.word	0x08039b1f
 8039a60:	08039b1f 	.word	0x08039b1f
 8039a64:	08039b1f 	.word	0x08039b1f
 8039a68:	08039b1f 	.word	0x08039b1f
 8039a6c:	08039b1f 	.word	0x08039b1f
 8039a70:	08039aeb 	.word	0x08039aeb
 8039a74:	08039b1f 	.word	0x08039b1f
 8039a78:	08039b1f 	.word	0x08039b1f
 8039a7c:	08039b1f 	.word	0x08039b1f
 8039a80:	08039b1f 	.word	0x08039b1f
 8039a84:	08039b1f 	.word	0x08039b1f
 8039a88:	08039b1f 	.word	0x08039b1f
 8039a8c:	08039b1f 	.word	0x08039b1f
 8039a90:	08039b1f 	.word	0x08039b1f
 8039a94:	08039b1f 	.word	0x08039b1f
 8039a98:	08039b1f 	.word	0x08039b1f
 8039a9c:	08039b1f 	.word	0x08039b1f
 8039aa0:	08039b1f 	.word	0x08039b1f
 8039aa4:	08039b1f 	.word	0x08039b1f
 8039aa8:	08039b1f 	.word	0x08039b1f
 8039aac:	08039b1f 	.word	0x08039b1f
 8039ab0:	08039b11 	.word	0x08039b11
 8039ab4:	2b40      	cmp	r3, #64	; 0x40
 8039ab6:	d02e      	beq.n	8039b16 <UART_SetConfig+0xa36>
 8039ab8:	e031      	b.n	8039b1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8039aba:	f7fb fb87 	bl	80351cc <HAL_RCC_GetPCLK1Freq>
 8039abe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8039ac0:	e033      	b.n	8039b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8039ac2:	f7fb fb99 	bl	80351f8 <HAL_RCC_GetPCLK2Freq>
 8039ac6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8039ac8:	e02f      	b.n	8039b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8039aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8039ace:	4618      	mov	r0, r3
 8039ad0:	f7fc fb04 	bl	80360dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8039ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039ad8:	e027      	b.n	8039b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8039ada:	f107 0318 	add.w	r3, r7, #24
 8039ade:	4618      	mov	r0, r3
 8039ae0:	f7fc fc50 	bl	8036384 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8039ae4:	69fb      	ldr	r3, [r7, #28]
 8039ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039ae8:	e01f      	b.n	8039b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8039aea:	4b2d      	ldr	r3, [pc, #180]	; (8039ba0 <UART_SetConfig+0xac0>)
 8039aec:	681b      	ldr	r3, [r3, #0]
 8039aee:	f003 0320 	and.w	r3, r3, #32
 8039af2:	2b00      	cmp	r3, #0
 8039af4:	d009      	beq.n	8039b0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8039af6:	4b2a      	ldr	r3, [pc, #168]	; (8039ba0 <UART_SetConfig+0xac0>)
 8039af8:	681b      	ldr	r3, [r3, #0]
 8039afa:	08db      	lsrs	r3, r3, #3
 8039afc:	f003 0303 	and.w	r3, r3, #3
 8039b00:	4a28      	ldr	r2, [pc, #160]	; (8039ba4 <UART_SetConfig+0xac4>)
 8039b02:	fa22 f303 	lsr.w	r3, r2, r3
 8039b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8039b08:	e00f      	b.n	8039b2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8039b0a:	4b26      	ldr	r3, [pc, #152]	; (8039ba4 <UART_SetConfig+0xac4>)
 8039b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039b0e:	e00c      	b.n	8039b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8039b10:	4b25      	ldr	r3, [pc, #148]	; (8039ba8 <UART_SetConfig+0xac8>)
 8039b12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039b14:	e009      	b.n	8039b2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8039b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8039b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8039b1c:	e005      	b.n	8039b2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8039b1e:	2300      	movs	r3, #0
 8039b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8039b22:	2301      	movs	r3, #1
 8039b24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8039b28:	bf00      	nop
    }

    if (pclk != 0U)
 8039b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039b2c:	2b00      	cmp	r3, #0
 8039b2e:	d021      	beq.n	8039b74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8039b30:	697b      	ldr	r3, [r7, #20]
 8039b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8039b34:	4a1d      	ldr	r2, [pc, #116]	; (8039bac <UART_SetConfig+0xacc>)
 8039b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8039b3a:	461a      	mov	r2, r3
 8039b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039b3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8039b42:	697b      	ldr	r3, [r7, #20]
 8039b44:	685b      	ldr	r3, [r3, #4]
 8039b46:	085b      	lsrs	r3, r3, #1
 8039b48:	441a      	add	r2, r3
 8039b4a:	697b      	ldr	r3, [r7, #20]
 8039b4c:	685b      	ldr	r3, [r3, #4]
 8039b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8039b52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8039b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b56:	2b0f      	cmp	r3, #15
 8039b58:	d909      	bls.n	8039b6e <UART_SetConfig+0xa8e>
 8039b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8039b60:	d205      	bcs.n	8039b6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8039b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b64:	b29a      	uxth	r2, r3
 8039b66:	697b      	ldr	r3, [r7, #20]
 8039b68:	681b      	ldr	r3, [r3, #0]
 8039b6a:	60da      	str	r2, [r3, #12]
 8039b6c:	e002      	b.n	8039b74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8039b6e:	2301      	movs	r3, #1
 8039b70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8039b74:	697b      	ldr	r3, [r7, #20]
 8039b76:	2201      	movs	r2, #1
 8039b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8039b7c:	697b      	ldr	r3, [r7, #20]
 8039b7e:	2201      	movs	r2, #1
 8039b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8039b84:	697b      	ldr	r3, [r7, #20]
 8039b86:	2200      	movs	r2, #0
 8039b88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8039b8a:	697b      	ldr	r3, [r7, #20]
 8039b8c:	2200      	movs	r2, #0
 8039b8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8039b90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8039b94:	4618      	mov	r0, r3
 8039b96:	3748      	adds	r7, #72	; 0x48
 8039b98:	46bd      	mov	sp, r7
 8039b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8039b9e:	bf00      	nop
 8039ba0:	58024400 	.word	0x58024400
 8039ba4:	03d09000 	.word	0x03d09000
 8039ba8:	003d0900 	.word	0x003d0900
 8039bac:	0805b834 	.word	0x0805b834

08039bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8039bb0:	b480      	push	{r7}
 8039bb2:	b083      	sub	sp, #12
 8039bb4:	af00      	add	r7, sp, #0
 8039bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8039bb8:	687b      	ldr	r3, [r7, #4]
 8039bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039bbc:	f003 0301 	and.w	r3, r3, #1
 8039bc0:	2b00      	cmp	r3, #0
 8039bc2:	d00a      	beq.n	8039bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8039bc4:	687b      	ldr	r3, [r7, #4]
 8039bc6:	681b      	ldr	r3, [r3, #0]
 8039bc8:	685b      	ldr	r3, [r3, #4]
 8039bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8039bce:	687b      	ldr	r3, [r7, #4]
 8039bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039bd2:	687b      	ldr	r3, [r7, #4]
 8039bd4:	681b      	ldr	r3, [r3, #0]
 8039bd6:	430a      	orrs	r2, r1
 8039bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8039bda:	687b      	ldr	r3, [r7, #4]
 8039bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039bde:	f003 0302 	and.w	r3, r3, #2
 8039be2:	2b00      	cmp	r3, #0
 8039be4:	d00a      	beq.n	8039bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8039be6:	687b      	ldr	r3, [r7, #4]
 8039be8:	681b      	ldr	r3, [r3, #0]
 8039bea:	685b      	ldr	r3, [r3, #4]
 8039bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8039bf0:	687b      	ldr	r3, [r7, #4]
 8039bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8039bf4:	687b      	ldr	r3, [r7, #4]
 8039bf6:	681b      	ldr	r3, [r3, #0]
 8039bf8:	430a      	orrs	r2, r1
 8039bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8039bfc:	687b      	ldr	r3, [r7, #4]
 8039bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039c00:	f003 0304 	and.w	r3, r3, #4
 8039c04:	2b00      	cmp	r3, #0
 8039c06:	d00a      	beq.n	8039c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8039c08:	687b      	ldr	r3, [r7, #4]
 8039c0a:	681b      	ldr	r3, [r3, #0]
 8039c0c:	685b      	ldr	r3, [r3, #4]
 8039c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8039c12:	687b      	ldr	r3, [r7, #4]
 8039c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8039c16:	687b      	ldr	r3, [r7, #4]
 8039c18:	681b      	ldr	r3, [r3, #0]
 8039c1a:	430a      	orrs	r2, r1
 8039c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8039c1e:	687b      	ldr	r3, [r7, #4]
 8039c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039c22:	f003 0308 	and.w	r3, r3, #8
 8039c26:	2b00      	cmp	r3, #0
 8039c28:	d00a      	beq.n	8039c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8039c2a:	687b      	ldr	r3, [r7, #4]
 8039c2c:	681b      	ldr	r3, [r3, #0]
 8039c2e:	685b      	ldr	r3, [r3, #4]
 8039c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8039c34:	687b      	ldr	r3, [r7, #4]
 8039c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8039c38:	687b      	ldr	r3, [r7, #4]
 8039c3a:	681b      	ldr	r3, [r3, #0]
 8039c3c:	430a      	orrs	r2, r1
 8039c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8039c40:	687b      	ldr	r3, [r7, #4]
 8039c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039c44:	f003 0310 	and.w	r3, r3, #16
 8039c48:	2b00      	cmp	r3, #0
 8039c4a:	d00a      	beq.n	8039c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8039c4c:	687b      	ldr	r3, [r7, #4]
 8039c4e:	681b      	ldr	r3, [r3, #0]
 8039c50:	689b      	ldr	r3, [r3, #8]
 8039c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8039c56:	687b      	ldr	r3, [r7, #4]
 8039c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8039c5a:	687b      	ldr	r3, [r7, #4]
 8039c5c:	681b      	ldr	r3, [r3, #0]
 8039c5e:	430a      	orrs	r2, r1
 8039c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8039c62:	687b      	ldr	r3, [r7, #4]
 8039c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039c66:	f003 0320 	and.w	r3, r3, #32
 8039c6a:	2b00      	cmp	r3, #0
 8039c6c:	d00a      	beq.n	8039c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8039c6e:	687b      	ldr	r3, [r7, #4]
 8039c70:	681b      	ldr	r3, [r3, #0]
 8039c72:	689b      	ldr	r3, [r3, #8]
 8039c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8039c78:	687b      	ldr	r3, [r7, #4]
 8039c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8039c7c:	687b      	ldr	r3, [r7, #4]
 8039c7e:	681b      	ldr	r3, [r3, #0]
 8039c80:	430a      	orrs	r2, r1
 8039c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8039c84:	687b      	ldr	r3, [r7, #4]
 8039c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8039c8c:	2b00      	cmp	r3, #0
 8039c8e:	d01a      	beq.n	8039cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8039c90:	687b      	ldr	r3, [r7, #4]
 8039c92:	681b      	ldr	r3, [r3, #0]
 8039c94:	685b      	ldr	r3, [r3, #4]
 8039c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8039c9a:	687b      	ldr	r3, [r7, #4]
 8039c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8039c9e:	687b      	ldr	r3, [r7, #4]
 8039ca0:	681b      	ldr	r3, [r3, #0]
 8039ca2:	430a      	orrs	r2, r1
 8039ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8039ca6:	687b      	ldr	r3, [r7, #4]
 8039ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8039caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8039cae:	d10a      	bne.n	8039cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8039cb0:	687b      	ldr	r3, [r7, #4]
 8039cb2:	681b      	ldr	r3, [r3, #0]
 8039cb4:	685b      	ldr	r3, [r3, #4]
 8039cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8039cba:	687b      	ldr	r3, [r7, #4]
 8039cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8039cbe:	687b      	ldr	r3, [r7, #4]
 8039cc0:	681b      	ldr	r3, [r3, #0]
 8039cc2:	430a      	orrs	r2, r1
 8039cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8039cc6:	687b      	ldr	r3, [r7, #4]
 8039cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8039cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8039cce:	2b00      	cmp	r3, #0
 8039cd0:	d00a      	beq.n	8039ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8039cd2:	687b      	ldr	r3, [r7, #4]
 8039cd4:	681b      	ldr	r3, [r3, #0]
 8039cd6:	685b      	ldr	r3, [r3, #4]
 8039cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8039cdc:	687b      	ldr	r3, [r7, #4]
 8039cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8039ce0:	687b      	ldr	r3, [r7, #4]
 8039ce2:	681b      	ldr	r3, [r3, #0]
 8039ce4:	430a      	orrs	r2, r1
 8039ce6:	605a      	str	r2, [r3, #4]
  }
}
 8039ce8:	bf00      	nop
 8039cea:	370c      	adds	r7, #12
 8039cec:	46bd      	mov	sp, r7
 8039cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039cf2:	4770      	bx	lr

08039cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8039cf4:	b580      	push	{r7, lr}
 8039cf6:	b086      	sub	sp, #24
 8039cf8:	af02      	add	r7, sp, #8
 8039cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8039cfc:	687b      	ldr	r3, [r7, #4]
 8039cfe:	2200      	movs	r2, #0
 8039d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8039d04:	f7f4 faec 	bl	802e2e0 <HAL_GetTick>
 8039d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8039d0a:	687b      	ldr	r3, [r7, #4]
 8039d0c:	681b      	ldr	r3, [r3, #0]
 8039d0e:	681b      	ldr	r3, [r3, #0]
 8039d10:	f003 0308 	and.w	r3, r3, #8
 8039d14:	2b08      	cmp	r3, #8
 8039d16:	d10e      	bne.n	8039d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8039d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8039d1c:	9300      	str	r3, [sp, #0]
 8039d1e:	68fb      	ldr	r3, [r7, #12]
 8039d20:	2200      	movs	r2, #0
 8039d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8039d26:	6878      	ldr	r0, [r7, #4]
 8039d28:	f000 f82f 	bl	8039d8a <UART_WaitOnFlagUntilTimeout>
 8039d2c:	4603      	mov	r3, r0
 8039d2e:	2b00      	cmp	r3, #0
 8039d30:	d001      	beq.n	8039d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8039d32:	2303      	movs	r3, #3
 8039d34:	e025      	b.n	8039d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8039d36:	687b      	ldr	r3, [r7, #4]
 8039d38:	681b      	ldr	r3, [r3, #0]
 8039d3a:	681b      	ldr	r3, [r3, #0]
 8039d3c:	f003 0304 	and.w	r3, r3, #4
 8039d40:	2b04      	cmp	r3, #4
 8039d42:	d10e      	bne.n	8039d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8039d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8039d48:	9300      	str	r3, [sp, #0]
 8039d4a:	68fb      	ldr	r3, [r7, #12]
 8039d4c:	2200      	movs	r2, #0
 8039d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8039d52:	6878      	ldr	r0, [r7, #4]
 8039d54:	f000 f819 	bl	8039d8a <UART_WaitOnFlagUntilTimeout>
 8039d58:	4603      	mov	r3, r0
 8039d5a:	2b00      	cmp	r3, #0
 8039d5c:	d001      	beq.n	8039d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8039d5e:	2303      	movs	r3, #3
 8039d60:	e00f      	b.n	8039d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8039d62:	687b      	ldr	r3, [r7, #4]
 8039d64:	2220      	movs	r2, #32
 8039d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8039d6a:	687b      	ldr	r3, [r7, #4]
 8039d6c:	2220      	movs	r2, #32
 8039d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8039d72:	687b      	ldr	r3, [r7, #4]
 8039d74:	2200      	movs	r2, #0
 8039d76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8039d78:	687b      	ldr	r3, [r7, #4]
 8039d7a:	2200      	movs	r2, #0
 8039d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8039d80:	2300      	movs	r3, #0
}
 8039d82:	4618      	mov	r0, r3
 8039d84:	3710      	adds	r7, #16
 8039d86:	46bd      	mov	sp, r7
 8039d88:	bd80      	pop	{r7, pc}

08039d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8039d8a:	b580      	push	{r7, lr}
 8039d8c:	b09c      	sub	sp, #112	; 0x70
 8039d8e:	af00      	add	r7, sp, #0
 8039d90:	60f8      	str	r0, [r7, #12]
 8039d92:	60b9      	str	r1, [r7, #8]
 8039d94:	603b      	str	r3, [r7, #0]
 8039d96:	4613      	mov	r3, r2
 8039d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8039d9a:	e0a9      	b.n	8039ef0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8039d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8039d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8039da2:	f000 80a5 	beq.w	8039ef0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8039da6:	f7f4 fa9b 	bl	802e2e0 <HAL_GetTick>
 8039daa:	4602      	mov	r2, r0
 8039dac:	683b      	ldr	r3, [r7, #0]
 8039dae:	1ad3      	subs	r3, r2, r3
 8039db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8039db2:	429a      	cmp	r2, r3
 8039db4:	d302      	bcc.n	8039dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8039db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8039db8:	2b00      	cmp	r3, #0
 8039dba:	d140      	bne.n	8039e3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8039dbc:	68fb      	ldr	r3, [r7, #12]
 8039dbe:	681b      	ldr	r3, [r3, #0]
 8039dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8039dc4:	e853 3f00 	ldrex	r3, [r3]
 8039dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8039dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8039dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8039dd2:	68fb      	ldr	r3, [r7, #12]
 8039dd4:	681b      	ldr	r3, [r3, #0]
 8039dd6:	461a      	mov	r2, r3
 8039dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8039dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8039ddc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8039de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8039de2:	e841 2300 	strex	r3, r2, [r1]
 8039de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8039de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8039dea:	2b00      	cmp	r3, #0
 8039dec:	d1e6      	bne.n	8039dbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8039dee:	68fb      	ldr	r3, [r7, #12]
 8039df0:	681b      	ldr	r3, [r3, #0]
 8039df2:	3308      	adds	r3, #8
 8039df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039df8:	e853 3f00 	ldrex	r3, [r3]
 8039dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8039dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039e00:	f023 0301 	bic.w	r3, r3, #1
 8039e04:	663b      	str	r3, [r7, #96]	; 0x60
 8039e06:	68fb      	ldr	r3, [r7, #12]
 8039e08:	681b      	ldr	r3, [r3, #0]
 8039e0a:	3308      	adds	r3, #8
 8039e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8039e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8039e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8039e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8039e16:	e841 2300 	strex	r3, r2, [r1]
 8039e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8039e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8039e1e:	2b00      	cmp	r3, #0
 8039e20:	d1e5      	bne.n	8039dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8039e22:	68fb      	ldr	r3, [r7, #12]
 8039e24:	2220      	movs	r2, #32
 8039e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8039e2a:	68fb      	ldr	r3, [r7, #12]
 8039e2c:	2220      	movs	r2, #32
 8039e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8039e32:	68fb      	ldr	r3, [r7, #12]
 8039e34:	2200      	movs	r2, #0
 8039e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8039e3a:	2303      	movs	r3, #3
 8039e3c:	e069      	b.n	8039f12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8039e3e:	68fb      	ldr	r3, [r7, #12]
 8039e40:	681b      	ldr	r3, [r3, #0]
 8039e42:	681b      	ldr	r3, [r3, #0]
 8039e44:	f003 0304 	and.w	r3, r3, #4
 8039e48:	2b00      	cmp	r3, #0
 8039e4a:	d051      	beq.n	8039ef0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8039e4c:	68fb      	ldr	r3, [r7, #12]
 8039e4e:	681b      	ldr	r3, [r3, #0]
 8039e50:	69db      	ldr	r3, [r3, #28]
 8039e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8039e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8039e5a:	d149      	bne.n	8039ef0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8039e5c:	68fb      	ldr	r3, [r7, #12]
 8039e5e:	681b      	ldr	r3, [r3, #0]
 8039e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8039e64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8039e66:	68fb      	ldr	r3, [r7, #12]
 8039e68:	681b      	ldr	r3, [r3, #0]
 8039e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039e6e:	e853 3f00 	ldrex	r3, [r3]
 8039e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8039e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8039e76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8039e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8039e7c:	68fb      	ldr	r3, [r7, #12]
 8039e7e:	681b      	ldr	r3, [r3, #0]
 8039e80:	461a      	mov	r2, r3
 8039e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8039e84:	637b      	str	r3, [r7, #52]	; 0x34
 8039e86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039e88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8039e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8039e8c:	e841 2300 	strex	r3, r2, [r1]
 8039e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8039e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8039e94:	2b00      	cmp	r3, #0
 8039e96:	d1e6      	bne.n	8039e66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8039e98:	68fb      	ldr	r3, [r7, #12]
 8039e9a:	681b      	ldr	r3, [r3, #0]
 8039e9c:	3308      	adds	r3, #8
 8039e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039ea0:	697b      	ldr	r3, [r7, #20]
 8039ea2:	e853 3f00 	ldrex	r3, [r3]
 8039ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8039ea8:	693b      	ldr	r3, [r7, #16]
 8039eaa:	f023 0301 	bic.w	r3, r3, #1
 8039eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8039eb0:	68fb      	ldr	r3, [r7, #12]
 8039eb2:	681b      	ldr	r3, [r3, #0]
 8039eb4:	3308      	adds	r3, #8
 8039eb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8039eb8:	623a      	str	r2, [r7, #32]
 8039eba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039ebc:	69f9      	ldr	r1, [r7, #28]
 8039ebe:	6a3a      	ldr	r2, [r7, #32]
 8039ec0:	e841 2300 	strex	r3, r2, [r1]
 8039ec4:	61bb      	str	r3, [r7, #24]
   return(result);
 8039ec6:	69bb      	ldr	r3, [r7, #24]
 8039ec8:	2b00      	cmp	r3, #0
 8039eca:	d1e5      	bne.n	8039e98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8039ecc:	68fb      	ldr	r3, [r7, #12]
 8039ece:	2220      	movs	r2, #32
 8039ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8039ed4:	68fb      	ldr	r3, [r7, #12]
 8039ed6:	2220      	movs	r2, #32
 8039ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8039edc:	68fb      	ldr	r3, [r7, #12]
 8039ede:	2220      	movs	r2, #32
 8039ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8039ee4:	68fb      	ldr	r3, [r7, #12]
 8039ee6:	2200      	movs	r2, #0
 8039ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8039eec:	2303      	movs	r3, #3
 8039eee:	e010      	b.n	8039f12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8039ef0:	68fb      	ldr	r3, [r7, #12]
 8039ef2:	681b      	ldr	r3, [r3, #0]
 8039ef4:	69da      	ldr	r2, [r3, #28]
 8039ef6:	68bb      	ldr	r3, [r7, #8]
 8039ef8:	4013      	ands	r3, r2
 8039efa:	68ba      	ldr	r2, [r7, #8]
 8039efc:	429a      	cmp	r2, r3
 8039efe:	bf0c      	ite	eq
 8039f00:	2301      	moveq	r3, #1
 8039f02:	2300      	movne	r3, #0
 8039f04:	b2db      	uxtb	r3, r3
 8039f06:	461a      	mov	r2, r3
 8039f08:	79fb      	ldrb	r3, [r7, #7]
 8039f0a:	429a      	cmp	r2, r3
 8039f0c:	f43f af46 	beq.w	8039d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8039f10:	2300      	movs	r3, #0
}
 8039f12:	4618      	mov	r0, r3
 8039f14:	3770      	adds	r7, #112	; 0x70
 8039f16:	46bd      	mov	sp, r7
 8039f18:	bd80      	pop	{r7, pc}
	...

08039f1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8039f1c:	b480      	push	{r7}
 8039f1e:	b0a3      	sub	sp, #140	; 0x8c
 8039f20:	af00      	add	r7, sp, #0
 8039f22:	60f8      	str	r0, [r7, #12]
 8039f24:	60b9      	str	r1, [r7, #8]
 8039f26:	4613      	mov	r3, r2
 8039f28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8039f2a:	68fb      	ldr	r3, [r7, #12]
 8039f2c:	68ba      	ldr	r2, [r7, #8]
 8039f2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8039f30:	68fb      	ldr	r3, [r7, #12]
 8039f32:	88fa      	ldrh	r2, [r7, #6]
 8039f34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8039f38:	68fb      	ldr	r3, [r7, #12]
 8039f3a:	88fa      	ldrh	r2, [r7, #6]
 8039f3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8039f40:	68fb      	ldr	r3, [r7, #12]
 8039f42:	2200      	movs	r2, #0
 8039f44:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8039f46:	68fb      	ldr	r3, [r7, #12]
 8039f48:	689b      	ldr	r3, [r3, #8]
 8039f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8039f4e:	d10e      	bne.n	8039f6e <UART_Start_Receive_IT+0x52>
 8039f50:	68fb      	ldr	r3, [r7, #12]
 8039f52:	691b      	ldr	r3, [r3, #16]
 8039f54:	2b00      	cmp	r3, #0
 8039f56:	d105      	bne.n	8039f64 <UART_Start_Receive_IT+0x48>
 8039f58:	68fb      	ldr	r3, [r7, #12]
 8039f5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8039f5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039f62:	e02d      	b.n	8039fc0 <UART_Start_Receive_IT+0xa4>
 8039f64:	68fb      	ldr	r3, [r7, #12]
 8039f66:	22ff      	movs	r2, #255	; 0xff
 8039f68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039f6c:	e028      	b.n	8039fc0 <UART_Start_Receive_IT+0xa4>
 8039f6e:	68fb      	ldr	r3, [r7, #12]
 8039f70:	689b      	ldr	r3, [r3, #8]
 8039f72:	2b00      	cmp	r3, #0
 8039f74:	d10d      	bne.n	8039f92 <UART_Start_Receive_IT+0x76>
 8039f76:	68fb      	ldr	r3, [r7, #12]
 8039f78:	691b      	ldr	r3, [r3, #16]
 8039f7a:	2b00      	cmp	r3, #0
 8039f7c:	d104      	bne.n	8039f88 <UART_Start_Receive_IT+0x6c>
 8039f7e:	68fb      	ldr	r3, [r7, #12]
 8039f80:	22ff      	movs	r2, #255	; 0xff
 8039f82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039f86:	e01b      	b.n	8039fc0 <UART_Start_Receive_IT+0xa4>
 8039f88:	68fb      	ldr	r3, [r7, #12]
 8039f8a:	227f      	movs	r2, #127	; 0x7f
 8039f8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039f90:	e016      	b.n	8039fc0 <UART_Start_Receive_IT+0xa4>
 8039f92:	68fb      	ldr	r3, [r7, #12]
 8039f94:	689b      	ldr	r3, [r3, #8]
 8039f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8039f9a:	d10d      	bne.n	8039fb8 <UART_Start_Receive_IT+0x9c>
 8039f9c:	68fb      	ldr	r3, [r7, #12]
 8039f9e:	691b      	ldr	r3, [r3, #16]
 8039fa0:	2b00      	cmp	r3, #0
 8039fa2:	d104      	bne.n	8039fae <UART_Start_Receive_IT+0x92>
 8039fa4:	68fb      	ldr	r3, [r7, #12]
 8039fa6:	227f      	movs	r2, #127	; 0x7f
 8039fa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039fac:	e008      	b.n	8039fc0 <UART_Start_Receive_IT+0xa4>
 8039fae:	68fb      	ldr	r3, [r7, #12]
 8039fb0:	223f      	movs	r2, #63	; 0x3f
 8039fb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8039fb6:	e003      	b.n	8039fc0 <UART_Start_Receive_IT+0xa4>
 8039fb8:	68fb      	ldr	r3, [r7, #12]
 8039fba:	2200      	movs	r2, #0
 8039fbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8039fc0:	68fb      	ldr	r3, [r7, #12]
 8039fc2:	2200      	movs	r2, #0
 8039fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8039fc8:	68fb      	ldr	r3, [r7, #12]
 8039fca:	2222      	movs	r2, #34	; 0x22
 8039fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8039fd0:	68fb      	ldr	r3, [r7, #12]
 8039fd2:	681b      	ldr	r3, [r3, #0]
 8039fd4:	3308      	adds	r3, #8
 8039fd6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8039fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8039fda:	e853 3f00 	ldrex	r3, [r3]
 8039fde:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8039fe0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8039fe2:	f043 0301 	orr.w	r3, r3, #1
 8039fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8039fea:	68fb      	ldr	r3, [r7, #12]
 8039fec:	681b      	ldr	r3, [r3, #0]
 8039fee:	3308      	adds	r3, #8
 8039ff0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8039ff4:	673a      	str	r2, [r7, #112]	; 0x70
 8039ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8039ff8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8039ffa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8039ffc:	e841 2300 	strex	r3, r2, [r1]
 803a000:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 803a002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 803a004:	2b00      	cmp	r3, #0
 803a006:	d1e3      	bne.n	8039fd0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 803a008:	68fb      	ldr	r3, [r7, #12]
 803a00a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803a00c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803a010:	d153      	bne.n	803a0ba <UART_Start_Receive_IT+0x19e>
 803a012:	68fb      	ldr	r3, [r7, #12]
 803a014:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803a018:	88fa      	ldrh	r2, [r7, #6]
 803a01a:	429a      	cmp	r2, r3
 803a01c:	d34d      	bcc.n	803a0ba <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803a01e:	68fb      	ldr	r3, [r7, #12]
 803a020:	689b      	ldr	r3, [r3, #8]
 803a022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803a026:	d107      	bne.n	803a038 <UART_Start_Receive_IT+0x11c>
 803a028:	68fb      	ldr	r3, [r7, #12]
 803a02a:	691b      	ldr	r3, [r3, #16]
 803a02c:	2b00      	cmp	r3, #0
 803a02e:	d103      	bne.n	803a038 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 803a030:	68fb      	ldr	r3, [r7, #12]
 803a032:	4a4b      	ldr	r2, [pc, #300]	; (803a160 <UART_Start_Receive_IT+0x244>)
 803a034:	671a      	str	r2, [r3, #112]	; 0x70
 803a036:	e002      	b.n	803a03e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 803a038:	68fb      	ldr	r3, [r7, #12]
 803a03a:	4a4a      	ldr	r2, [pc, #296]	; (803a164 <UART_Start_Receive_IT+0x248>)
 803a03c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 803a03e:	68fb      	ldr	r3, [r7, #12]
 803a040:	2200      	movs	r2, #0
 803a042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 803a046:	68fb      	ldr	r3, [r7, #12]
 803a048:	691b      	ldr	r3, [r3, #16]
 803a04a:	2b00      	cmp	r3, #0
 803a04c:	d01a      	beq.n	803a084 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803a04e:	68fb      	ldr	r3, [r7, #12]
 803a050:	681b      	ldr	r3, [r3, #0]
 803a052:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803a056:	e853 3f00 	ldrex	r3, [r3]
 803a05a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803a05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803a05e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803a062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803a066:	68fb      	ldr	r3, [r7, #12]
 803a068:	681b      	ldr	r3, [r3, #0]
 803a06a:	461a      	mov	r2, r3
 803a06c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 803a070:	65fb      	str	r3, [r7, #92]	; 0x5c
 803a072:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a074:	6db9      	ldr	r1, [r7, #88]	; 0x58
 803a076:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 803a078:	e841 2300 	strex	r3, r2, [r1]
 803a07c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 803a07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803a080:	2b00      	cmp	r3, #0
 803a082:	d1e4      	bne.n	803a04e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803a084:	68fb      	ldr	r3, [r7, #12]
 803a086:	681b      	ldr	r3, [r3, #0]
 803a088:	3308      	adds	r3, #8
 803a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a08e:	e853 3f00 	ldrex	r3, [r3]
 803a092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803a09a:	67fb      	str	r3, [r7, #124]	; 0x7c
 803a09c:	68fb      	ldr	r3, [r7, #12]
 803a09e:	681b      	ldr	r3, [r3, #0]
 803a0a0:	3308      	adds	r3, #8
 803a0a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 803a0a4:	64ba      	str	r2, [r7, #72]	; 0x48
 803a0a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a0a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 803a0aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803a0ac:	e841 2300 	strex	r3, r2, [r1]
 803a0b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 803a0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803a0b4:	2b00      	cmp	r3, #0
 803a0b6:	d1e5      	bne.n	803a084 <UART_Start_Receive_IT+0x168>
 803a0b8:	e04a      	b.n	803a150 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803a0ba:	68fb      	ldr	r3, [r7, #12]
 803a0bc:	689b      	ldr	r3, [r3, #8]
 803a0be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803a0c2:	d107      	bne.n	803a0d4 <UART_Start_Receive_IT+0x1b8>
 803a0c4:	68fb      	ldr	r3, [r7, #12]
 803a0c6:	691b      	ldr	r3, [r3, #16]
 803a0c8:	2b00      	cmp	r3, #0
 803a0ca:	d103      	bne.n	803a0d4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 803a0cc:	68fb      	ldr	r3, [r7, #12]
 803a0ce:	4a26      	ldr	r2, [pc, #152]	; (803a168 <UART_Start_Receive_IT+0x24c>)
 803a0d0:	671a      	str	r2, [r3, #112]	; 0x70
 803a0d2:	e002      	b.n	803a0da <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 803a0d4:	68fb      	ldr	r3, [r7, #12]
 803a0d6:	4a25      	ldr	r2, [pc, #148]	; (803a16c <UART_Start_Receive_IT+0x250>)
 803a0d8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 803a0da:	68fb      	ldr	r3, [r7, #12]
 803a0dc:	2200      	movs	r2, #0
 803a0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 803a0e2:	68fb      	ldr	r3, [r7, #12]
 803a0e4:	691b      	ldr	r3, [r3, #16]
 803a0e6:	2b00      	cmp	r3, #0
 803a0e8:	d019      	beq.n	803a11e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 803a0ea:	68fb      	ldr	r3, [r7, #12]
 803a0ec:	681b      	ldr	r3, [r3, #0]
 803a0ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a0f2:	e853 3f00 	ldrex	r3, [r3]
 803a0f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a0fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 803a0fe:	677b      	str	r3, [r7, #116]	; 0x74
 803a100:	68fb      	ldr	r3, [r7, #12]
 803a102:	681b      	ldr	r3, [r3, #0]
 803a104:	461a      	mov	r2, r3
 803a106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803a108:	637b      	str	r3, [r7, #52]	; 0x34
 803a10a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a10c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 803a10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803a110:	e841 2300 	strex	r3, r2, [r1]
 803a114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 803a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803a118:	2b00      	cmp	r3, #0
 803a11a:	d1e6      	bne.n	803a0ea <UART_Start_Receive_IT+0x1ce>
 803a11c:	e018      	b.n	803a150 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803a11e:	68fb      	ldr	r3, [r7, #12]
 803a120:	681b      	ldr	r3, [r3, #0]
 803a122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a124:	697b      	ldr	r3, [r7, #20]
 803a126:	e853 3f00 	ldrex	r3, [r3]
 803a12a:	613b      	str	r3, [r7, #16]
   return(result);
 803a12c:	693b      	ldr	r3, [r7, #16]
 803a12e:	f043 0320 	orr.w	r3, r3, #32
 803a132:	67bb      	str	r3, [r7, #120]	; 0x78
 803a134:	68fb      	ldr	r3, [r7, #12]
 803a136:	681b      	ldr	r3, [r3, #0]
 803a138:	461a      	mov	r2, r3
 803a13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803a13c:	623b      	str	r3, [r7, #32]
 803a13e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a140:	69f9      	ldr	r1, [r7, #28]
 803a142:	6a3a      	ldr	r2, [r7, #32]
 803a144:	e841 2300 	strex	r3, r2, [r1]
 803a148:	61bb      	str	r3, [r7, #24]
   return(result);
 803a14a:	69bb      	ldr	r3, [r7, #24]
 803a14c:	2b00      	cmp	r3, #0
 803a14e:	d1e6      	bne.n	803a11e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 803a150:	2300      	movs	r3, #0
}
 803a152:	4618      	mov	r0, r3
 803a154:	378c      	adds	r7, #140	; 0x8c
 803a156:	46bd      	mov	sp, r7
 803a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a15c:	4770      	bx	lr
 803a15e:	bf00      	nop
 803a160:	0803abbd 	.word	0x0803abbd
 803a164:	0803a8c5 	.word	0x0803a8c5
 803a168:	0803a763 	.word	0x0803a763
 803a16c:	0803a603 	.word	0x0803a603

0803a170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 803a170:	b480      	push	{r7}
 803a172:	b095      	sub	sp, #84	; 0x54
 803a174:	af00      	add	r7, sp, #0
 803a176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803a178:	687b      	ldr	r3, [r7, #4]
 803a17a:	681b      	ldr	r3, [r3, #0]
 803a17c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a180:	e853 3f00 	ldrex	r3, [r3]
 803a184:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803a18c:	64fb      	str	r3, [r7, #76]	; 0x4c
 803a18e:	687b      	ldr	r3, [r7, #4]
 803a190:	681b      	ldr	r3, [r3, #0]
 803a192:	461a      	mov	r2, r3
 803a194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803a196:	643b      	str	r3, [r7, #64]	; 0x40
 803a198:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a19a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803a19c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803a19e:	e841 2300 	strex	r3, r2, [r1]
 803a1a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a1a6:	2b00      	cmp	r3, #0
 803a1a8:	d1e6      	bne.n	803a178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803a1aa:	687b      	ldr	r3, [r7, #4]
 803a1ac:	681b      	ldr	r3, [r3, #0]
 803a1ae:	3308      	adds	r3, #8
 803a1b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a1b2:	6a3b      	ldr	r3, [r7, #32]
 803a1b4:	e853 3f00 	ldrex	r3, [r3]
 803a1b8:	61fb      	str	r3, [r7, #28]
   return(result);
 803a1ba:	69fa      	ldr	r2, [r7, #28]
 803a1bc:	4b1e      	ldr	r3, [pc, #120]	; (803a238 <UART_EndRxTransfer+0xc8>)
 803a1be:	4013      	ands	r3, r2
 803a1c0:	64bb      	str	r3, [r7, #72]	; 0x48
 803a1c2:	687b      	ldr	r3, [r7, #4]
 803a1c4:	681b      	ldr	r3, [r3, #0]
 803a1c6:	3308      	adds	r3, #8
 803a1c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803a1ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 803a1cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a1ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803a1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a1d2:	e841 2300 	strex	r3, r2, [r1]
 803a1d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a1da:	2b00      	cmp	r3, #0
 803a1dc:	d1e5      	bne.n	803a1aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803a1de:	687b      	ldr	r3, [r7, #4]
 803a1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803a1e2:	2b01      	cmp	r3, #1
 803a1e4:	d118      	bne.n	803a218 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803a1e6:	687b      	ldr	r3, [r7, #4]
 803a1e8:	681b      	ldr	r3, [r3, #0]
 803a1ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a1ec:	68fb      	ldr	r3, [r7, #12]
 803a1ee:	e853 3f00 	ldrex	r3, [r3]
 803a1f2:	60bb      	str	r3, [r7, #8]
   return(result);
 803a1f4:	68bb      	ldr	r3, [r7, #8]
 803a1f6:	f023 0310 	bic.w	r3, r3, #16
 803a1fa:	647b      	str	r3, [r7, #68]	; 0x44
 803a1fc:	687b      	ldr	r3, [r7, #4]
 803a1fe:	681b      	ldr	r3, [r3, #0]
 803a200:	461a      	mov	r2, r3
 803a202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803a204:	61bb      	str	r3, [r7, #24]
 803a206:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a208:	6979      	ldr	r1, [r7, #20]
 803a20a:	69ba      	ldr	r2, [r7, #24]
 803a20c:	e841 2300 	strex	r3, r2, [r1]
 803a210:	613b      	str	r3, [r7, #16]
   return(result);
 803a212:	693b      	ldr	r3, [r7, #16]
 803a214:	2b00      	cmp	r3, #0
 803a216:	d1e6      	bne.n	803a1e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 803a218:	687b      	ldr	r3, [r7, #4]
 803a21a:	2220      	movs	r2, #32
 803a21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803a220:	687b      	ldr	r3, [r7, #4]
 803a222:	2200      	movs	r2, #0
 803a224:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 803a226:	687b      	ldr	r3, [r7, #4]
 803a228:	2200      	movs	r2, #0
 803a22a:	671a      	str	r2, [r3, #112]	; 0x70
}
 803a22c:	bf00      	nop
 803a22e:	3754      	adds	r7, #84	; 0x54
 803a230:	46bd      	mov	sp, r7
 803a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a236:	4770      	bx	lr
 803a238:	effffffe 	.word	0xeffffffe

0803a23c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 803a23c:	b580      	push	{r7, lr}
 803a23e:	b084      	sub	sp, #16
 803a240:	af00      	add	r7, sp, #0
 803a242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 803a244:	687b      	ldr	r3, [r7, #4]
 803a246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803a248:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 803a24a:	68fb      	ldr	r3, [r7, #12]
 803a24c:	2200      	movs	r2, #0
 803a24e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 803a252:	68fb      	ldr	r3, [r7, #12]
 803a254:	2200      	movs	r2, #0
 803a256:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 803a25a:	68f8      	ldr	r0, [r7, #12]
 803a25c:	f7fe ff2a 	bl	80390b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803a260:	bf00      	nop
 803a262:	3710      	adds	r7, #16
 803a264:	46bd      	mov	sp, r7
 803a266:	bd80      	pop	{r7, pc}

0803a268 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 803a268:	b480      	push	{r7}
 803a26a:	b08f      	sub	sp, #60	; 0x3c
 803a26c:	af00      	add	r7, sp, #0
 803a26e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803a270:	687b      	ldr	r3, [r7, #4]
 803a272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803a276:	2b21      	cmp	r3, #33	; 0x21
 803a278:	d14c      	bne.n	803a314 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 803a27a:	687b      	ldr	r3, [r7, #4]
 803a27c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a280:	b29b      	uxth	r3, r3
 803a282:	2b00      	cmp	r3, #0
 803a284:	d132      	bne.n	803a2ec <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 803a286:	687b      	ldr	r3, [r7, #4]
 803a288:	681b      	ldr	r3, [r3, #0]
 803a28a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a28c:	6a3b      	ldr	r3, [r7, #32]
 803a28e:	e853 3f00 	ldrex	r3, [r3]
 803a292:	61fb      	str	r3, [r7, #28]
   return(result);
 803a294:	69fb      	ldr	r3, [r7, #28]
 803a296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803a29a:	637b      	str	r3, [r7, #52]	; 0x34
 803a29c:	687b      	ldr	r3, [r7, #4]
 803a29e:	681b      	ldr	r3, [r3, #0]
 803a2a0:	461a      	mov	r2, r3
 803a2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 803a2a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a2a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803a2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a2ac:	e841 2300 	strex	r3, r2, [r1]
 803a2b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a2b4:	2b00      	cmp	r3, #0
 803a2b6:	d1e6      	bne.n	803a286 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803a2b8:	687b      	ldr	r3, [r7, #4]
 803a2ba:	681b      	ldr	r3, [r3, #0]
 803a2bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a2be:	68fb      	ldr	r3, [r7, #12]
 803a2c0:	e853 3f00 	ldrex	r3, [r3]
 803a2c4:	60bb      	str	r3, [r7, #8]
   return(result);
 803a2c6:	68bb      	ldr	r3, [r7, #8]
 803a2c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a2cc:	633b      	str	r3, [r7, #48]	; 0x30
 803a2ce:	687b      	ldr	r3, [r7, #4]
 803a2d0:	681b      	ldr	r3, [r3, #0]
 803a2d2:	461a      	mov	r2, r3
 803a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a2d6:	61bb      	str	r3, [r7, #24]
 803a2d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a2da:	6979      	ldr	r1, [r7, #20]
 803a2dc:	69ba      	ldr	r2, [r7, #24]
 803a2de:	e841 2300 	strex	r3, r2, [r1]
 803a2e2:	613b      	str	r3, [r7, #16]
   return(result);
 803a2e4:	693b      	ldr	r3, [r7, #16]
 803a2e6:	2b00      	cmp	r3, #0
 803a2e8:	d1e6      	bne.n	803a2b8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 803a2ea:	e013      	b.n	803a314 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 803a2ec:	687b      	ldr	r3, [r7, #4]
 803a2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a2f0:	781a      	ldrb	r2, [r3, #0]
 803a2f2:	687b      	ldr	r3, [r7, #4]
 803a2f4:	681b      	ldr	r3, [r3, #0]
 803a2f6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 803a2f8:	687b      	ldr	r3, [r7, #4]
 803a2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a2fc:	1c5a      	adds	r2, r3, #1
 803a2fe:	687b      	ldr	r3, [r7, #4]
 803a300:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 803a302:	687b      	ldr	r3, [r7, #4]
 803a304:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a308:	b29b      	uxth	r3, r3
 803a30a:	3b01      	subs	r3, #1
 803a30c:	b29a      	uxth	r2, r3
 803a30e:	687b      	ldr	r3, [r7, #4]
 803a310:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 803a314:	bf00      	nop
 803a316:	373c      	adds	r7, #60	; 0x3c
 803a318:	46bd      	mov	sp, r7
 803a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a31e:	4770      	bx	lr

0803a320 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 803a320:	b480      	push	{r7}
 803a322:	b091      	sub	sp, #68	; 0x44
 803a324:	af00      	add	r7, sp, #0
 803a326:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803a328:	687b      	ldr	r3, [r7, #4]
 803a32a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803a32e:	2b21      	cmp	r3, #33	; 0x21
 803a330:	d151      	bne.n	803a3d6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 803a332:	687b      	ldr	r3, [r7, #4]
 803a334:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a338:	b29b      	uxth	r3, r3
 803a33a:	2b00      	cmp	r3, #0
 803a33c:	d132      	bne.n	803a3a4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 803a33e:	687b      	ldr	r3, [r7, #4]
 803a340:	681b      	ldr	r3, [r3, #0]
 803a342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a346:	e853 3f00 	ldrex	r3, [r3]
 803a34a:	623b      	str	r3, [r7, #32]
   return(result);
 803a34c:	6a3b      	ldr	r3, [r7, #32]
 803a34e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 803a352:	63bb      	str	r3, [r7, #56]	; 0x38
 803a354:	687b      	ldr	r3, [r7, #4]
 803a356:	681b      	ldr	r3, [r3, #0]
 803a358:	461a      	mov	r2, r3
 803a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a35c:	633b      	str	r3, [r7, #48]	; 0x30
 803a35e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803a362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803a364:	e841 2300 	strex	r3, r2, [r1]
 803a368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a36c:	2b00      	cmp	r3, #0
 803a36e:	d1e6      	bne.n	803a33e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803a370:	687b      	ldr	r3, [r7, #4]
 803a372:	681b      	ldr	r3, [r3, #0]
 803a374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a376:	693b      	ldr	r3, [r7, #16]
 803a378:	e853 3f00 	ldrex	r3, [r3]
 803a37c:	60fb      	str	r3, [r7, #12]
   return(result);
 803a37e:	68fb      	ldr	r3, [r7, #12]
 803a380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a384:	637b      	str	r3, [r7, #52]	; 0x34
 803a386:	687b      	ldr	r3, [r7, #4]
 803a388:	681b      	ldr	r3, [r3, #0]
 803a38a:	461a      	mov	r2, r3
 803a38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a38e:	61fb      	str	r3, [r7, #28]
 803a390:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a392:	69b9      	ldr	r1, [r7, #24]
 803a394:	69fa      	ldr	r2, [r7, #28]
 803a396:	e841 2300 	strex	r3, r2, [r1]
 803a39a:	617b      	str	r3, [r7, #20]
   return(result);
 803a39c:	697b      	ldr	r3, [r7, #20]
 803a39e:	2b00      	cmp	r3, #0
 803a3a0:	d1e6      	bne.n	803a370 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 803a3a2:	e018      	b.n	803a3d6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 803a3a4:	687b      	ldr	r3, [r7, #4]
 803a3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 803a3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a3ac:	881b      	ldrh	r3, [r3, #0]
 803a3ae:	461a      	mov	r2, r3
 803a3b0:	687b      	ldr	r3, [r7, #4]
 803a3b2:	681b      	ldr	r3, [r3, #0]
 803a3b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 803a3b8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 803a3ba:	687b      	ldr	r3, [r7, #4]
 803a3bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a3be:	1c9a      	adds	r2, r3, #2
 803a3c0:	687b      	ldr	r3, [r7, #4]
 803a3c2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 803a3c4:	687b      	ldr	r3, [r7, #4]
 803a3c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a3ca:	b29b      	uxth	r3, r3
 803a3cc:	3b01      	subs	r3, #1
 803a3ce:	b29a      	uxth	r2, r3
 803a3d0:	687b      	ldr	r3, [r7, #4]
 803a3d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 803a3d6:	bf00      	nop
 803a3d8:	3744      	adds	r7, #68	; 0x44
 803a3da:	46bd      	mov	sp, r7
 803a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a3e0:	4770      	bx	lr

0803a3e2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803a3e2:	b480      	push	{r7}
 803a3e4:	b091      	sub	sp, #68	; 0x44
 803a3e6:	af00      	add	r7, sp, #0
 803a3e8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803a3ea:	687b      	ldr	r3, [r7, #4]
 803a3ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803a3f0:	2b21      	cmp	r3, #33	; 0x21
 803a3f2:	d160      	bne.n	803a4b6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803a3f4:	687b      	ldr	r3, [r7, #4]
 803a3f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803a3fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803a3fc:	e057      	b.n	803a4ae <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 803a3fe:	687b      	ldr	r3, [r7, #4]
 803a400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a404:	b29b      	uxth	r3, r3
 803a406:	2b00      	cmp	r3, #0
 803a408:	d133      	bne.n	803a472 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803a40a:	687b      	ldr	r3, [r7, #4]
 803a40c:	681b      	ldr	r3, [r3, #0]
 803a40e:	3308      	adds	r3, #8
 803a410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a414:	e853 3f00 	ldrex	r3, [r3]
 803a418:	623b      	str	r3, [r7, #32]
   return(result);
 803a41a:	6a3b      	ldr	r3, [r7, #32]
 803a41c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 803a420:	63bb      	str	r3, [r7, #56]	; 0x38
 803a422:	687b      	ldr	r3, [r7, #4]
 803a424:	681b      	ldr	r3, [r3, #0]
 803a426:	3308      	adds	r3, #8
 803a428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803a42a:	633a      	str	r2, [r7, #48]	; 0x30
 803a42c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803a430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803a432:	e841 2300 	strex	r3, r2, [r1]
 803a436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a43a:	2b00      	cmp	r3, #0
 803a43c:	d1e5      	bne.n	803a40a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803a43e:	687b      	ldr	r3, [r7, #4]
 803a440:	681b      	ldr	r3, [r3, #0]
 803a442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a444:	693b      	ldr	r3, [r7, #16]
 803a446:	e853 3f00 	ldrex	r3, [r3]
 803a44a:	60fb      	str	r3, [r7, #12]
   return(result);
 803a44c:	68fb      	ldr	r3, [r7, #12]
 803a44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a452:	637b      	str	r3, [r7, #52]	; 0x34
 803a454:	687b      	ldr	r3, [r7, #4]
 803a456:	681b      	ldr	r3, [r3, #0]
 803a458:	461a      	mov	r2, r3
 803a45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a45c:	61fb      	str	r3, [r7, #28]
 803a45e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a460:	69b9      	ldr	r1, [r7, #24]
 803a462:	69fa      	ldr	r2, [r7, #28]
 803a464:	e841 2300 	strex	r3, r2, [r1]
 803a468:	617b      	str	r3, [r7, #20]
   return(result);
 803a46a:	697b      	ldr	r3, [r7, #20]
 803a46c:	2b00      	cmp	r3, #0
 803a46e:	d1e6      	bne.n	803a43e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 803a470:	e021      	b.n	803a4b6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 803a472:	687b      	ldr	r3, [r7, #4]
 803a474:	681b      	ldr	r3, [r3, #0]
 803a476:	69db      	ldr	r3, [r3, #28]
 803a478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803a47c:	2b00      	cmp	r3, #0
 803a47e:	d013      	beq.n	803a4a8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 803a480:	687b      	ldr	r3, [r7, #4]
 803a482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a484:	781a      	ldrb	r2, [r3, #0]
 803a486:	687b      	ldr	r3, [r7, #4]
 803a488:	681b      	ldr	r3, [r3, #0]
 803a48a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 803a48c:	687b      	ldr	r3, [r7, #4]
 803a48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a490:	1c5a      	adds	r2, r3, #1
 803a492:	687b      	ldr	r3, [r7, #4]
 803a494:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 803a496:	687b      	ldr	r3, [r7, #4]
 803a498:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a49c:	b29b      	uxth	r3, r3
 803a49e:	3b01      	subs	r3, #1
 803a4a0:	b29a      	uxth	r2, r3
 803a4a2:	687b      	ldr	r3, [r7, #4]
 803a4a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803a4a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803a4aa:	3b01      	subs	r3, #1
 803a4ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803a4ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803a4b0:	2b00      	cmp	r3, #0
 803a4b2:	d1a4      	bne.n	803a3fe <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 803a4b4:	e7ff      	b.n	803a4b6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 803a4b6:	bf00      	nop
 803a4b8:	3744      	adds	r7, #68	; 0x44
 803a4ba:	46bd      	mov	sp, r7
 803a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a4c0:	4770      	bx	lr

0803a4c2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803a4c2:	b480      	push	{r7}
 803a4c4:	b091      	sub	sp, #68	; 0x44
 803a4c6:	af00      	add	r7, sp, #0
 803a4c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803a4ca:	687b      	ldr	r3, [r7, #4]
 803a4cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803a4d0:	2b21      	cmp	r3, #33	; 0x21
 803a4d2:	d165      	bne.n	803a5a0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803a4d4:	687b      	ldr	r3, [r7, #4]
 803a4d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 803a4da:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803a4dc:	e05c      	b.n	803a598 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 803a4de:	687b      	ldr	r3, [r7, #4]
 803a4e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a4e4:	b29b      	uxth	r3, r3
 803a4e6:	2b00      	cmp	r3, #0
 803a4e8:	d133      	bne.n	803a552 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 803a4ea:	687b      	ldr	r3, [r7, #4]
 803a4ec:	681b      	ldr	r3, [r3, #0]
 803a4ee:	3308      	adds	r3, #8
 803a4f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a4f2:	6a3b      	ldr	r3, [r7, #32]
 803a4f4:	e853 3f00 	ldrex	r3, [r3]
 803a4f8:	61fb      	str	r3, [r7, #28]
   return(result);
 803a4fa:	69fb      	ldr	r3, [r7, #28]
 803a4fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 803a500:	637b      	str	r3, [r7, #52]	; 0x34
 803a502:	687b      	ldr	r3, [r7, #4]
 803a504:	681b      	ldr	r3, [r3, #0]
 803a506:	3308      	adds	r3, #8
 803a508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803a50a:	62fa      	str	r2, [r7, #44]	; 0x2c
 803a50c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a50e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803a510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a512:	e841 2300 	strex	r3, r2, [r1]
 803a516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a51a:	2b00      	cmp	r3, #0
 803a51c:	d1e5      	bne.n	803a4ea <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803a51e:	687b      	ldr	r3, [r7, #4]
 803a520:	681b      	ldr	r3, [r3, #0]
 803a522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a524:	68fb      	ldr	r3, [r7, #12]
 803a526:	e853 3f00 	ldrex	r3, [r3]
 803a52a:	60bb      	str	r3, [r7, #8]
   return(result);
 803a52c:	68bb      	ldr	r3, [r7, #8]
 803a52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a532:	633b      	str	r3, [r7, #48]	; 0x30
 803a534:	687b      	ldr	r3, [r7, #4]
 803a536:	681b      	ldr	r3, [r3, #0]
 803a538:	461a      	mov	r2, r3
 803a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a53c:	61bb      	str	r3, [r7, #24]
 803a53e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a540:	6979      	ldr	r1, [r7, #20]
 803a542:	69ba      	ldr	r2, [r7, #24]
 803a544:	e841 2300 	strex	r3, r2, [r1]
 803a548:	613b      	str	r3, [r7, #16]
   return(result);
 803a54a:	693b      	ldr	r3, [r7, #16]
 803a54c:	2b00      	cmp	r3, #0
 803a54e:	d1e6      	bne.n	803a51e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 803a550:	e026      	b.n	803a5a0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 803a552:	687b      	ldr	r3, [r7, #4]
 803a554:	681b      	ldr	r3, [r3, #0]
 803a556:	69db      	ldr	r3, [r3, #28]
 803a558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803a55c:	2b00      	cmp	r3, #0
 803a55e:	d018      	beq.n	803a592 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 803a560:	687b      	ldr	r3, [r7, #4]
 803a562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a564:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 803a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a568:	881b      	ldrh	r3, [r3, #0]
 803a56a:	461a      	mov	r2, r3
 803a56c:	687b      	ldr	r3, [r7, #4]
 803a56e:	681b      	ldr	r3, [r3, #0]
 803a570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 803a574:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 803a576:	687b      	ldr	r3, [r7, #4]
 803a578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803a57a:	1c9a      	adds	r2, r3, #2
 803a57c:	687b      	ldr	r3, [r7, #4]
 803a57e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 803a580:	687b      	ldr	r3, [r7, #4]
 803a582:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 803a586:	b29b      	uxth	r3, r3
 803a588:	3b01      	subs	r3, #1
 803a58a:	b29a      	uxth	r2, r3
 803a58c:	687b      	ldr	r3, [r7, #4]
 803a58e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 803a592:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803a594:	3b01      	subs	r3, #1
 803a596:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803a598:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803a59a:	2b00      	cmp	r3, #0
 803a59c:	d19f      	bne.n	803a4de <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 803a59e:	e7ff      	b.n	803a5a0 <UART_TxISR_16BIT_FIFOEN+0xde>
 803a5a0:	bf00      	nop
 803a5a2:	3744      	adds	r7, #68	; 0x44
 803a5a4:	46bd      	mov	sp, r7
 803a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a5aa:	4770      	bx	lr

0803a5ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 803a5ac:	b580      	push	{r7, lr}
 803a5ae:	b088      	sub	sp, #32
 803a5b0:	af00      	add	r7, sp, #0
 803a5b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803a5b4:	687b      	ldr	r3, [r7, #4]
 803a5b6:	681b      	ldr	r3, [r3, #0]
 803a5b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a5ba:	68fb      	ldr	r3, [r7, #12]
 803a5bc:	e853 3f00 	ldrex	r3, [r3]
 803a5c0:	60bb      	str	r3, [r7, #8]
   return(result);
 803a5c2:	68bb      	ldr	r3, [r7, #8]
 803a5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803a5c8:	61fb      	str	r3, [r7, #28]
 803a5ca:	687b      	ldr	r3, [r7, #4]
 803a5cc:	681b      	ldr	r3, [r3, #0]
 803a5ce:	461a      	mov	r2, r3
 803a5d0:	69fb      	ldr	r3, [r7, #28]
 803a5d2:	61bb      	str	r3, [r7, #24]
 803a5d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a5d6:	6979      	ldr	r1, [r7, #20]
 803a5d8:	69ba      	ldr	r2, [r7, #24]
 803a5da:	e841 2300 	strex	r3, r2, [r1]
 803a5de:	613b      	str	r3, [r7, #16]
   return(result);
 803a5e0:	693b      	ldr	r3, [r7, #16]
 803a5e2:	2b00      	cmp	r3, #0
 803a5e4:	d1e6      	bne.n	803a5b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 803a5e6:	687b      	ldr	r3, [r7, #4]
 803a5e8:	2220      	movs	r2, #32
 803a5ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 803a5ee:	687b      	ldr	r3, [r7, #4]
 803a5f0:	2200      	movs	r2, #0
 803a5f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 803a5f4:	6878      	ldr	r0, [r7, #4]
 803a5f6:	f7f2 fd81 	bl	802d0fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803a5fa:	bf00      	nop
 803a5fc:	3720      	adds	r7, #32
 803a5fe:	46bd      	mov	sp, r7
 803a600:	bd80      	pop	{r7, pc}

0803a602 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 803a602:	b580      	push	{r7, lr}
 803a604:	b096      	sub	sp, #88	; 0x58
 803a606:	af00      	add	r7, sp, #0
 803a608:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 803a60a:	687b      	ldr	r3, [r7, #4]
 803a60c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803a610:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803a614:	687b      	ldr	r3, [r7, #4]
 803a616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803a61a:	2b22      	cmp	r3, #34	; 0x22
 803a61c:	f040 8095 	bne.w	803a74a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803a620:	687b      	ldr	r3, [r7, #4]
 803a622:	681b      	ldr	r3, [r3, #0]
 803a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a626:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 803a62a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 803a62e:	b2d9      	uxtb	r1, r3
 803a630:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803a634:	b2da      	uxtb	r2, r3
 803a636:	687b      	ldr	r3, [r7, #4]
 803a638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a63a:	400a      	ands	r2, r1
 803a63c:	b2d2      	uxtb	r2, r2
 803a63e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 803a640:	687b      	ldr	r3, [r7, #4]
 803a642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a644:	1c5a      	adds	r2, r3, #1
 803a646:	687b      	ldr	r3, [r7, #4]
 803a648:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 803a64a:	687b      	ldr	r3, [r7, #4]
 803a64c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a650:	b29b      	uxth	r3, r3
 803a652:	3b01      	subs	r3, #1
 803a654:	b29a      	uxth	r2, r3
 803a656:	687b      	ldr	r3, [r7, #4]
 803a658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 803a65c:	687b      	ldr	r3, [r7, #4]
 803a65e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a662:	b29b      	uxth	r3, r3
 803a664:	2b00      	cmp	r3, #0
 803a666:	d178      	bne.n	803a75a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803a668:	687b      	ldr	r3, [r7, #4]
 803a66a:	681b      	ldr	r3, [r3, #0]
 803a66c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a670:	e853 3f00 	ldrex	r3, [r3]
 803a674:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803a676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803a67c:	653b      	str	r3, [r7, #80]	; 0x50
 803a67e:	687b      	ldr	r3, [r7, #4]
 803a680:	681b      	ldr	r3, [r3, #0]
 803a682:	461a      	mov	r2, r3
 803a684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803a686:	647b      	str	r3, [r7, #68]	; 0x44
 803a688:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a68a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 803a68c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803a68e:	e841 2300 	strex	r3, r2, [r1]
 803a692:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803a694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803a696:	2b00      	cmp	r3, #0
 803a698:	d1e6      	bne.n	803a668 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803a69a:	687b      	ldr	r3, [r7, #4]
 803a69c:	681b      	ldr	r3, [r3, #0]
 803a69e:	3308      	adds	r3, #8
 803a6a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a6a4:	e853 3f00 	ldrex	r3, [r3]
 803a6a8:	623b      	str	r3, [r7, #32]
   return(result);
 803a6aa:	6a3b      	ldr	r3, [r7, #32]
 803a6ac:	f023 0301 	bic.w	r3, r3, #1
 803a6b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 803a6b2:	687b      	ldr	r3, [r7, #4]
 803a6b4:	681b      	ldr	r3, [r3, #0]
 803a6b6:	3308      	adds	r3, #8
 803a6b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 803a6ba:	633a      	str	r2, [r7, #48]	; 0x30
 803a6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a6be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803a6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803a6c2:	e841 2300 	strex	r3, r2, [r1]
 803a6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a6ca:	2b00      	cmp	r3, #0
 803a6cc:	d1e5      	bne.n	803a69a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 803a6ce:	687b      	ldr	r3, [r7, #4]
 803a6d0:	2220      	movs	r2, #32
 803a6d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803a6d6:	687b      	ldr	r3, [r7, #4]
 803a6d8:	2200      	movs	r2, #0
 803a6da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803a6dc:	687b      	ldr	r3, [r7, #4]
 803a6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803a6e0:	2b01      	cmp	r3, #1
 803a6e2:	d12e      	bne.n	803a742 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803a6e4:	687b      	ldr	r3, [r7, #4]
 803a6e6:	2200      	movs	r2, #0
 803a6e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803a6ea:	687b      	ldr	r3, [r7, #4]
 803a6ec:	681b      	ldr	r3, [r3, #0]
 803a6ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a6f0:	693b      	ldr	r3, [r7, #16]
 803a6f2:	e853 3f00 	ldrex	r3, [r3]
 803a6f6:	60fb      	str	r3, [r7, #12]
   return(result);
 803a6f8:	68fb      	ldr	r3, [r7, #12]
 803a6fa:	f023 0310 	bic.w	r3, r3, #16
 803a6fe:	64bb      	str	r3, [r7, #72]	; 0x48
 803a700:	687b      	ldr	r3, [r7, #4]
 803a702:	681b      	ldr	r3, [r3, #0]
 803a704:	461a      	mov	r2, r3
 803a706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803a708:	61fb      	str	r3, [r7, #28]
 803a70a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a70c:	69b9      	ldr	r1, [r7, #24]
 803a70e:	69fa      	ldr	r2, [r7, #28]
 803a710:	e841 2300 	strex	r3, r2, [r1]
 803a714:	617b      	str	r3, [r7, #20]
   return(result);
 803a716:	697b      	ldr	r3, [r7, #20]
 803a718:	2b00      	cmp	r3, #0
 803a71a:	d1e6      	bne.n	803a6ea <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803a71c:	687b      	ldr	r3, [r7, #4]
 803a71e:	681b      	ldr	r3, [r3, #0]
 803a720:	69db      	ldr	r3, [r3, #28]
 803a722:	f003 0310 	and.w	r3, r3, #16
 803a726:	2b10      	cmp	r3, #16
 803a728:	d103      	bne.n	803a732 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803a72a:	687b      	ldr	r3, [r7, #4]
 803a72c:	681b      	ldr	r3, [r3, #0]
 803a72e:	2210      	movs	r2, #16
 803a730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803a732:	687b      	ldr	r3, [r7, #4]
 803a734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803a738:	4619      	mov	r1, r3
 803a73a:	6878      	ldr	r0, [r7, #4]
 803a73c:	f7fe fcc4 	bl	80390c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803a740:	e00b      	b.n	803a75a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803a742:	6878      	ldr	r0, [r7, #4]
 803a744:	f7f2 fcb6 	bl	802d0b4 <HAL_UART_RxCpltCallback>
}
 803a748:	e007      	b.n	803a75a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803a74a:	687b      	ldr	r3, [r7, #4]
 803a74c:	681b      	ldr	r3, [r3, #0]
 803a74e:	699a      	ldr	r2, [r3, #24]
 803a750:	687b      	ldr	r3, [r7, #4]
 803a752:	681b      	ldr	r3, [r3, #0]
 803a754:	f042 0208 	orr.w	r2, r2, #8
 803a758:	619a      	str	r2, [r3, #24]
}
 803a75a:	bf00      	nop
 803a75c:	3758      	adds	r7, #88	; 0x58
 803a75e:	46bd      	mov	sp, r7
 803a760:	bd80      	pop	{r7, pc}

0803a762 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 803a762:	b580      	push	{r7, lr}
 803a764:	b096      	sub	sp, #88	; 0x58
 803a766:	af00      	add	r7, sp, #0
 803a768:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 803a76a:	687b      	ldr	r3, [r7, #4]
 803a76c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803a770:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803a774:	687b      	ldr	r3, [r7, #4]
 803a776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803a77a:	2b22      	cmp	r3, #34	; 0x22
 803a77c:	f040 8095 	bne.w	803a8aa <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803a780:	687b      	ldr	r3, [r7, #4]
 803a782:	681b      	ldr	r3, [r3, #0]
 803a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a786:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 803a78a:	687b      	ldr	r3, [r7, #4]
 803a78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a78e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 803a790:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 803a794:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 803a798:	4013      	ands	r3, r2
 803a79a:	b29a      	uxth	r2, r3
 803a79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803a79e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 803a7a0:	687b      	ldr	r3, [r7, #4]
 803a7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a7a4:	1c9a      	adds	r2, r3, #2
 803a7a6:	687b      	ldr	r3, [r7, #4]
 803a7a8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 803a7aa:	687b      	ldr	r3, [r7, #4]
 803a7ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a7b0:	b29b      	uxth	r3, r3
 803a7b2:	3b01      	subs	r3, #1
 803a7b4:	b29a      	uxth	r2, r3
 803a7b6:	687b      	ldr	r3, [r7, #4]
 803a7b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 803a7bc:	687b      	ldr	r3, [r7, #4]
 803a7be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a7c2:	b29b      	uxth	r3, r3
 803a7c4:	2b00      	cmp	r3, #0
 803a7c6:	d178      	bne.n	803a8ba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 803a7c8:	687b      	ldr	r3, [r7, #4]
 803a7ca:	681b      	ldr	r3, [r3, #0]
 803a7cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803a7d0:	e853 3f00 	ldrex	r3, [r3]
 803a7d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a7d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803a7dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 803a7de:	687b      	ldr	r3, [r7, #4]
 803a7e0:	681b      	ldr	r3, [r3, #0]
 803a7e2:	461a      	mov	r2, r3
 803a7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803a7e6:	643b      	str	r3, [r7, #64]	; 0x40
 803a7e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a7ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803a7ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803a7ee:	e841 2300 	strex	r3, r2, [r1]
 803a7f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803a7f6:	2b00      	cmp	r3, #0
 803a7f8:	d1e6      	bne.n	803a7c8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803a7fa:	687b      	ldr	r3, [r7, #4]
 803a7fc:	681b      	ldr	r3, [r3, #0]
 803a7fe:	3308      	adds	r3, #8
 803a800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a802:	6a3b      	ldr	r3, [r7, #32]
 803a804:	e853 3f00 	ldrex	r3, [r3]
 803a808:	61fb      	str	r3, [r7, #28]
   return(result);
 803a80a:	69fb      	ldr	r3, [r7, #28]
 803a80c:	f023 0301 	bic.w	r3, r3, #1
 803a810:	64bb      	str	r3, [r7, #72]	; 0x48
 803a812:	687b      	ldr	r3, [r7, #4]
 803a814:	681b      	ldr	r3, [r3, #0]
 803a816:	3308      	adds	r3, #8
 803a818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803a81a:	62fa      	str	r2, [r7, #44]	; 0x2c
 803a81c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a81e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803a820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a822:	e841 2300 	strex	r3, r2, [r1]
 803a826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a82a:	2b00      	cmp	r3, #0
 803a82c:	d1e5      	bne.n	803a7fa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 803a82e:	687b      	ldr	r3, [r7, #4]
 803a830:	2220      	movs	r2, #32
 803a832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803a836:	687b      	ldr	r3, [r7, #4]
 803a838:	2200      	movs	r2, #0
 803a83a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803a83c:	687b      	ldr	r3, [r7, #4]
 803a83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803a840:	2b01      	cmp	r3, #1
 803a842:	d12e      	bne.n	803a8a2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803a844:	687b      	ldr	r3, [r7, #4]
 803a846:	2200      	movs	r2, #0
 803a848:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803a84a:	687b      	ldr	r3, [r7, #4]
 803a84c:	681b      	ldr	r3, [r3, #0]
 803a84e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803a850:	68fb      	ldr	r3, [r7, #12]
 803a852:	e853 3f00 	ldrex	r3, [r3]
 803a856:	60bb      	str	r3, [r7, #8]
   return(result);
 803a858:	68bb      	ldr	r3, [r7, #8]
 803a85a:	f023 0310 	bic.w	r3, r3, #16
 803a85e:	647b      	str	r3, [r7, #68]	; 0x44
 803a860:	687b      	ldr	r3, [r7, #4]
 803a862:	681b      	ldr	r3, [r3, #0]
 803a864:	461a      	mov	r2, r3
 803a866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803a868:	61bb      	str	r3, [r7, #24]
 803a86a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803a86c:	6979      	ldr	r1, [r7, #20]
 803a86e:	69ba      	ldr	r2, [r7, #24]
 803a870:	e841 2300 	strex	r3, r2, [r1]
 803a874:	613b      	str	r3, [r7, #16]
   return(result);
 803a876:	693b      	ldr	r3, [r7, #16]
 803a878:	2b00      	cmp	r3, #0
 803a87a:	d1e6      	bne.n	803a84a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803a87c:	687b      	ldr	r3, [r7, #4]
 803a87e:	681b      	ldr	r3, [r3, #0]
 803a880:	69db      	ldr	r3, [r3, #28]
 803a882:	f003 0310 	and.w	r3, r3, #16
 803a886:	2b10      	cmp	r3, #16
 803a888:	d103      	bne.n	803a892 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803a88a:	687b      	ldr	r3, [r7, #4]
 803a88c:	681b      	ldr	r3, [r3, #0]
 803a88e:	2210      	movs	r2, #16
 803a890:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803a892:	687b      	ldr	r3, [r7, #4]
 803a894:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803a898:	4619      	mov	r1, r3
 803a89a:	6878      	ldr	r0, [r7, #4]
 803a89c:	f7fe fc14 	bl	80390c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803a8a0:	e00b      	b.n	803a8ba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803a8a2:	6878      	ldr	r0, [r7, #4]
 803a8a4:	f7f2 fc06 	bl	802d0b4 <HAL_UART_RxCpltCallback>
}
 803a8a8:	e007      	b.n	803a8ba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803a8aa:	687b      	ldr	r3, [r7, #4]
 803a8ac:	681b      	ldr	r3, [r3, #0]
 803a8ae:	699a      	ldr	r2, [r3, #24]
 803a8b0:	687b      	ldr	r3, [r7, #4]
 803a8b2:	681b      	ldr	r3, [r3, #0]
 803a8b4:	f042 0208 	orr.w	r2, r2, #8
 803a8b8:	619a      	str	r2, [r3, #24]
}
 803a8ba:	bf00      	nop
 803a8bc:	3758      	adds	r7, #88	; 0x58
 803a8be:	46bd      	mov	sp, r7
 803a8c0:	bd80      	pop	{r7, pc}
	...

0803a8c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803a8c4:	b580      	push	{r7, lr}
 803a8c6:	b0a6      	sub	sp, #152	; 0x98
 803a8c8:	af00      	add	r7, sp, #0
 803a8ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 803a8cc:	687b      	ldr	r3, [r7, #4]
 803a8ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803a8d2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803a8d6:	687b      	ldr	r3, [r7, #4]
 803a8d8:	681b      	ldr	r3, [r3, #0]
 803a8da:	69db      	ldr	r3, [r3, #28]
 803a8dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 803a8e0:	687b      	ldr	r3, [r7, #4]
 803a8e2:	681b      	ldr	r3, [r3, #0]
 803a8e4:	681b      	ldr	r3, [r3, #0]
 803a8e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803a8ea:	687b      	ldr	r3, [r7, #4]
 803a8ec:	681b      	ldr	r3, [r3, #0]
 803a8ee:	689b      	ldr	r3, [r3, #8]
 803a8f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803a8f4:	687b      	ldr	r3, [r7, #4]
 803a8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803a8fa:	2b22      	cmp	r3, #34	; 0x22
 803a8fc:	f040 814d 	bne.w	803ab9a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 803a900:	687b      	ldr	r3, [r7, #4]
 803a902:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803a906:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803a90a:	e0f4      	b.n	803aaf6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803a90c:	687b      	ldr	r3, [r7, #4]
 803a90e:	681b      	ldr	r3, [r3, #0]
 803a910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a912:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 803a916:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 803a91a:	b2d9      	uxtb	r1, r3
 803a91c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 803a920:	b2da      	uxtb	r2, r3
 803a922:	687b      	ldr	r3, [r7, #4]
 803a924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a926:	400a      	ands	r2, r1
 803a928:	b2d2      	uxtb	r2, r2
 803a92a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 803a92c:	687b      	ldr	r3, [r7, #4]
 803a92e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803a930:	1c5a      	adds	r2, r3, #1
 803a932:	687b      	ldr	r3, [r7, #4]
 803a934:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803a936:	687b      	ldr	r3, [r7, #4]
 803a938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803a93c:	b29b      	uxth	r3, r3
 803a93e:	3b01      	subs	r3, #1
 803a940:	b29a      	uxth	r2, r3
 803a942:	687b      	ldr	r3, [r7, #4]
 803a944:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 803a948:	687b      	ldr	r3, [r7, #4]
 803a94a:	681b      	ldr	r3, [r3, #0]
 803a94c:	69db      	ldr	r3, [r3, #28]
 803a94e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803a952:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a956:	f003 0307 	and.w	r3, r3, #7
 803a95a:	2b00      	cmp	r3, #0
 803a95c:	d053      	beq.n	803aa06 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 803a95e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a962:	f003 0301 	and.w	r3, r3, #1
 803a966:	2b00      	cmp	r3, #0
 803a968:	d011      	beq.n	803a98e <UART_RxISR_8BIT_FIFOEN+0xca>
 803a96a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803a96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803a972:	2b00      	cmp	r3, #0
 803a974:	d00b      	beq.n	803a98e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803a976:	687b      	ldr	r3, [r7, #4]
 803a978:	681b      	ldr	r3, [r3, #0]
 803a97a:	2201      	movs	r2, #1
 803a97c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 803a97e:	687b      	ldr	r3, [r7, #4]
 803a980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a984:	f043 0201 	orr.w	r2, r3, #1
 803a988:	687b      	ldr	r3, [r7, #4]
 803a98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803a98e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a992:	f003 0302 	and.w	r3, r3, #2
 803a996:	2b00      	cmp	r3, #0
 803a998:	d011      	beq.n	803a9be <UART_RxISR_8BIT_FIFOEN+0xfa>
 803a99a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803a99e:	f003 0301 	and.w	r3, r3, #1
 803a9a2:	2b00      	cmp	r3, #0
 803a9a4:	d00b      	beq.n	803a9be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803a9a6:	687b      	ldr	r3, [r7, #4]
 803a9a8:	681b      	ldr	r3, [r3, #0]
 803a9aa:	2202      	movs	r2, #2
 803a9ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 803a9ae:	687b      	ldr	r3, [r7, #4]
 803a9b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a9b4:	f043 0204 	orr.w	r2, r3, #4
 803a9b8:	687b      	ldr	r3, [r7, #4]
 803a9ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803a9be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803a9c2:	f003 0304 	and.w	r3, r3, #4
 803a9c6:	2b00      	cmp	r3, #0
 803a9c8:	d011      	beq.n	803a9ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 803a9ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803a9ce:	f003 0301 	and.w	r3, r3, #1
 803a9d2:	2b00      	cmp	r3, #0
 803a9d4:	d00b      	beq.n	803a9ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803a9d6:	687b      	ldr	r3, [r7, #4]
 803a9d8:	681b      	ldr	r3, [r3, #0]
 803a9da:	2204      	movs	r2, #4
 803a9dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 803a9de:	687b      	ldr	r3, [r7, #4]
 803a9e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a9e4:	f043 0202 	orr.w	r2, r3, #2
 803a9e8:	687b      	ldr	r3, [r7, #4]
 803a9ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803a9ee:	687b      	ldr	r3, [r7, #4]
 803a9f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803a9f4:	2b00      	cmp	r3, #0
 803a9f6:	d006      	beq.n	803aa06 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803a9f8:	6878      	ldr	r0, [r7, #4]
 803a9fa:	f7fe fb5b 	bl	80390b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 803a9fe:	687b      	ldr	r3, [r7, #4]
 803aa00:	2200      	movs	r2, #0
 803aa02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 803aa06:	687b      	ldr	r3, [r7, #4]
 803aa08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803aa0c:	b29b      	uxth	r3, r3
 803aa0e:	2b00      	cmp	r3, #0
 803aa10:	d171      	bne.n	803aaf6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803aa12:	687b      	ldr	r3, [r7, #4]
 803aa14:	681b      	ldr	r3, [r3, #0]
 803aa16:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803aa18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803aa1a:	e853 3f00 	ldrex	r3, [r3]
 803aa1e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 803aa20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 803aa22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803aa26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803aa2a:	687b      	ldr	r3, [r7, #4]
 803aa2c:	681b      	ldr	r3, [r3, #0]
 803aa2e:	461a      	mov	r2, r3
 803aa30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 803aa34:	66bb      	str	r3, [r7, #104]	; 0x68
 803aa36:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803aa38:	6e79      	ldr	r1, [r7, #100]	; 0x64
 803aa3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 803aa3c:	e841 2300 	strex	r3, r2, [r1]
 803aa40:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 803aa42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803aa44:	2b00      	cmp	r3, #0
 803aa46:	d1e4      	bne.n	803aa12 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803aa48:	687b      	ldr	r3, [r7, #4]
 803aa4a:	681b      	ldr	r3, [r3, #0]
 803aa4c:	3308      	adds	r3, #8
 803aa4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803aa50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803aa52:	e853 3f00 	ldrex	r3, [r3]
 803aa56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 803aa58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803aa5a:	4b56      	ldr	r3, [pc, #344]	; (803abb4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 803aa5c:	4013      	ands	r3, r2
 803aa5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 803aa60:	687b      	ldr	r3, [r7, #4]
 803aa62:	681b      	ldr	r3, [r3, #0]
 803aa64:	3308      	adds	r3, #8
 803aa66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 803aa68:	657a      	str	r2, [r7, #84]	; 0x54
 803aa6a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803aa6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 803aa6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 803aa70:	e841 2300 	strex	r3, r2, [r1]
 803aa74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803aa76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803aa78:	2b00      	cmp	r3, #0
 803aa7a:	d1e5      	bne.n	803aa48 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803aa7c:	687b      	ldr	r3, [r7, #4]
 803aa7e:	2220      	movs	r2, #32
 803aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803aa84:	687b      	ldr	r3, [r7, #4]
 803aa86:	2200      	movs	r2, #0
 803aa88:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803aa8a:	687b      	ldr	r3, [r7, #4]
 803aa8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803aa8e:	2b01      	cmp	r3, #1
 803aa90:	d12e      	bne.n	803aaf0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803aa92:	687b      	ldr	r3, [r7, #4]
 803aa94:	2200      	movs	r2, #0
 803aa96:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803aa98:	687b      	ldr	r3, [r7, #4]
 803aa9a:	681b      	ldr	r3, [r3, #0]
 803aa9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803aa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803aaa0:	e853 3f00 	ldrex	r3, [r3]
 803aaa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803aaa8:	f023 0310 	bic.w	r3, r3, #16
 803aaac:	67bb      	str	r3, [r7, #120]	; 0x78
 803aaae:	687b      	ldr	r3, [r7, #4]
 803aab0:	681b      	ldr	r3, [r3, #0]
 803aab2:	461a      	mov	r2, r3
 803aab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803aab6:	643b      	str	r3, [r7, #64]	; 0x40
 803aab8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803aaba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803aabc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803aabe:	e841 2300 	strex	r3, r2, [r1]
 803aac2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803aac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803aac6:	2b00      	cmp	r3, #0
 803aac8:	d1e6      	bne.n	803aa98 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803aaca:	687b      	ldr	r3, [r7, #4]
 803aacc:	681b      	ldr	r3, [r3, #0]
 803aace:	69db      	ldr	r3, [r3, #28]
 803aad0:	f003 0310 	and.w	r3, r3, #16
 803aad4:	2b10      	cmp	r3, #16
 803aad6:	d103      	bne.n	803aae0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803aad8:	687b      	ldr	r3, [r7, #4]
 803aada:	681b      	ldr	r3, [r3, #0]
 803aadc:	2210      	movs	r2, #16
 803aade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803aae0:	687b      	ldr	r3, [r7, #4]
 803aae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803aae6:	4619      	mov	r1, r3
 803aae8:	6878      	ldr	r0, [r7, #4]
 803aaea:	f7fe faed 	bl	80390c8 <HAL_UARTEx_RxEventCallback>
 803aaee:	e002      	b.n	803aaf6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 803aaf0:	6878      	ldr	r0, [r7, #4]
 803aaf2:	f7f2 fadf 	bl	802d0b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803aaf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 803aafa:	2b00      	cmp	r3, #0
 803aafc:	d006      	beq.n	803ab0c <UART_RxISR_8BIT_FIFOEN+0x248>
 803aafe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803ab02:	f003 0320 	and.w	r3, r3, #32
 803ab06:	2b00      	cmp	r3, #0
 803ab08:	f47f af00 	bne.w	803a90c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 803ab0c:	687b      	ldr	r3, [r7, #4]
 803ab0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803ab12:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 803ab16:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 803ab1a:	2b00      	cmp	r3, #0
 803ab1c:	d045      	beq.n	803abaa <UART_RxISR_8BIT_FIFOEN+0x2e6>
 803ab1e:	687b      	ldr	r3, [r7, #4]
 803ab20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803ab24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 803ab28:	429a      	cmp	r2, r3
 803ab2a:	d23e      	bcs.n	803abaa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803ab2c:	687b      	ldr	r3, [r7, #4]
 803ab2e:	681b      	ldr	r3, [r3, #0]
 803ab30:	3308      	adds	r3, #8
 803ab32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ab34:	6a3b      	ldr	r3, [r7, #32]
 803ab36:	e853 3f00 	ldrex	r3, [r3]
 803ab3a:	61fb      	str	r3, [r7, #28]
   return(result);
 803ab3c:	69fb      	ldr	r3, [r7, #28]
 803ab3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803ab42:	673b      	str	r3, [r7, #112]	; 0x70
 803ab44:	687b      	ldr	r3, [r7, #4]
 803ab46:	681b      	ldr	r3, [r3, #0]
 803ab48:	3308      	adds	r3, #8
 803ab4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 803ab4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 803ab4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ab50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803ab52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803ab54:	e841 2300 	strex	r3, r2, [r1]
 803ab58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803ab5c:	2b00      	cmp	r3, #0
 803ab5e:	d1e5      	bne.n	803ab2c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 803ab60:	687b      	ldr	r3, [r7, #4]
 803ab62:	4a15      	ldr	r2, [pc, #84]	; (803abb8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 803ab64:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803ab66:	687b      	ldr	r3, [r7, #4]
 803ab68:	681b      	ldr	r3, [r3, #0]
 803ab6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ab6c:	68fb      	ldr	r3, [r7, #12]
 803ab6e:	e853 3f00 	ldrex	r3, [r3]
 803ab72:	60bb      	str	r3, [r7, #8]
   return(result);
 803ab74:	68bb      	ldr	r3, [r7, #8]
 803ab76:	f043 0320 	orr.w	r3, r3, #32
 803ab7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 803ab7c:	687b      	ldr	r3, [r7, #4]
 803ab7e:	681b      	ldr	r3, [r3, #0]
 803ab80:	461a      	mov	r2, r3
 803ab82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803ab84:	61bb      	str	r3, [r7, #24]
 803ab86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ab88:	6979      	ldr	r1, [r7, #20]
 803ab8a:	69ba      	ldr	r2, [r7, #24]
 803ab8c:	e841 2300 	strex	r3, r2, [r1]
 803ab90:	613b      	str	r3, [r7, #16]
   return(result);
 803ab92:	693b      	ldr	r3, [r7, #16]
 803ab94:	2b00      	cmp	r3, #0
 803ab96:	d1e6      	bne.n	803ab66 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803ab98:	e007      	b.n	803abaa <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803ab9a:	687b      	ldr	r3, [r7, #4]
 803ab9c:	681b      	ldr	r3, [r3, #0]
 803ab9e:	699a      	ldr	r2, [r3, #24]
 803aba0:	687b      	ldr	r3, [r7, #4]
 803aba2:	681b      	ldr	r3, [r3, #0]
 803aba4:	f042 0208 	orr.w	r2, r2, #8
 803aba8:	619a      	str	r2, [r3, #24]
}
 803abaa:	bf00      	nop
 803abac:	3798      	adds	r7, #152	; 0x98
 803abae:	46bd      	mov	sp, r7
 803abb0:	bd80      	pop	{r7, pc}
 803abb2:	bf00      	nop
 803abb4:	effffffe 	.word	0xeffffffe
 803abb8:	0803a603 	.word	0x0803a603

0803abbc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803abbc:	b580      	push	{r7, lr}
 803abbe:	b0a8      	sub	sp, #160	; 0xa0
 803abc0:	af00      	add	r7, sp, #0
 803abc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 803abc4:	687b      	ldr	r3, [r7, #4]
 803abc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803abca:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803abce:	687b      	ldr	r3, [r7, #4]
 803abd0:	681b      	ldr	r3, [r3, #0]
 803abd2:	69db      	ldr	r3, [r3, #28]
 803abd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 803abd8:	687b      	ldr	r3, [r7, #4]
 803abda:	681b      	ldr	r3, [r3, #0]
 803abdc:	681b      	ldr	r3, [r3, #0]
 803abde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803abe2:	687b      	ldr	r3, [r7, #4]
 803abe4:	681b      	ldr	r3, [r3, #0]
 803abe6:	689b      	ldr	r3, [r3, #8]
 803abe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803abec:	687b      	ldr	r3, [r7, #4]
 803abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803abf2:	2b22      	cmp	r3, #34	; 0x22
 803abf4:	f040 8151 	bne.w	803ae9a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 803abf8:	687b      	ldr	r3, [r7, #4]
 803abfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803abfe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803ac02:	e0f8      	b.n	803adf6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 803ac04:	687b      	ldr	r3, [r7, #4]
 803ac06:	681b      	ldr	r3, [r3, #0]
 803ac08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803ac0a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 803ac0e:	687b      	ldr	r3, [r7, #4]
 803ac10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803ac12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 803ac16:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 803ac1a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 803ac1e:	4013      	ands	r3, r2
 803ac20:	b29a      	uxth	r2, r3
 803ac22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803ac26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 803ac28:	687b      	ldr	r3, [r7, #4]
 803ac2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803ac2c:	1c9a      	adds	r2, r3, #2
 803ac2e:	687b      	ldr	r3, [r7, #4]
 803ac30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 803ac32:	687b      	ldr	r3, [r7, #4]
 803ac34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803ac38:	b29b      	uxth	r3, r3
 803ac3a:	3b01      	subs	r3, #1
 803ac3c:	b29a      	uxth	r2, r3
 803ac3e:	687b      	ldr	r3, [r7, #4]
 803ac40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 803ac44:	687b      	ldr	r3, [r7, #4]
 803ac46:	681b      	ldr	r3, [r3, #0]
 803ac48:	69db      	ldr	r3, [r3, #28]
 803ac4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 803ac4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803ac52:	f003 0307 	and.w	r3, r3, #7
 803ac56:	2b00      	cmp	r3, #0
 803ac58:	d053      	beq.n	803ad02 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 803ac5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803ac5e:	f003 0301 	and.w	r3, r3, #1
 803ac62:	2b00      	cmp	r3, #0
 803ac64:	d011      	beq.n	803ac8a <UART_RxISR_16BIT_FIFOEN+0xce>
 803ac66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803ac6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803ac6e:	2b00      	cmp	r3, #0
 803ac70:	d00b      	beq.n	803ac8a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803ac72:	687b      	ldr	r3, [r7, #4]
 803ac74:	681b      	ldr	r3, [r3, #0]
 803ac76:	2201      	movs	r2, #1
 803ac78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 803ac7a:	687b      	ldr	r3, [r7, #4]
 803ac7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803ac80:	f043 0201 	orr.w	r2, r3, #1
 803ac84:	687b      	ldr	r3, [r7, #4]
 803ac86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803ac8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803ac8e:	f003 0302 	and.w	r3, r3, #2
 803ac92:	2b00      	cmp	r3, #0
 803ac94:	d011      	beq.n	803acba <UART_RxISR_16BIT_FIFOEN+0xfe>
 803ac96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 803ac9a:	f003 0301 	and.w	r3, r3, #1
 803ac9e:	2b00      	cmp	r3, #0
 803aca0:	d00b      	beq.n	803acba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803aca2:	687b      	ldr	r3, [r7, #4]
 803aca4:	681b      	ldr	r3, [r3, #0]
 803aca6:	2202      	movs	r2, #2
 803aca8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 803acaa:	687b      	ldr	r3, [r7, #4]
 803acac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803acb0:	f043 0204 	orr.w	r2, r3, #4
 803acb4:	687b      	ldr	r3, [r7, #4]
 803acb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 803acba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803acbe:	f003 0304 	and.w	r3, r3, #4
 803acc2:	2b00      	cmp	r3, #0
 803acc4:	d011      	beq.n	803acea <UART_RxISR_16BIT_FIFOEN+0x12e>
 803acc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 803acca:	f003 0301 	and.w	r3, r3, #1
 803acce:	2b00      	cmp	r3, #0
 803acd0:	d00b      	beq.n	803acea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803acd2:	687b      	ldr	r3, [r7, #4]
 803acd4:	681b      	ldr	r3, [r3, #0]
 803acd6:	2204      	movs	r2, #4
 803acd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 803acda:	687b      	ldr	r3, [r7, #4]
 803acdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803ace0:	f043 0202 	orr.w	r2, r3, #2
 803ace4:	687b      	ldr	r3, [r7, #4]
 803ace6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 803acea:	687b      	ldr	r3, [r7, #4]
 803acec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803acf0:	2b00      	cmp	r3, #0
 803acf2:	d006      	beq.n	803ad02 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803acf4:	6878      	ldr	r0, [r7, #4]
 803acf6:	f7fe f9dd 	bl	80390b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 803acfa:	687b      	ldr	r3, [r7, #4]
 803acfc:	2200      	movs	r2, #0
 803acfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 803ad02:	687b      	ldr	r3, [r7, #4]
 803ad04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803ad08:	b29b      	uxth	r3, r3
 803ad0a:	2b00      	cmp	r3, #0
 803ad0c:	d173      	bne.n	803adf6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803ad0e:	687b      	ldr	r3, [r7, #4]
 803ad10:	681b      	ldr	r3, [r3, #0]
 803ad12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ad14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803ad16:	e853 3f00 	ldrex	r3, [r3]
 803ad1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 803ad1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803ad1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803ad22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 803ad26:	687b      	ldr	r3, [r7, #4]
 803ad28:	681b      	ldr	r3, [r3, #0]
 803ad2a:	461a      	mov	r2, r3
 803ad2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 803ad30:	66fb      	str	r3, [r7, #108]	; 0x6c
 803ad32:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ad34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 803ad36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 803ad38:	e841 2300 	strex	r3, r2, [r1]
 803ad3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 803ad3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803ad40:	2b00      	cmp	r3, #0
 803ad42:	d1e4      	bne.n	803ad0e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 803ad44:	687b      	ldr	r3, [r7, #4]
 803ad46:	681b      	ldr	r3, [r3, #0]
 803ad48:	3308      	adds	r3, #8
 803ad4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ad4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803ad4e:	e853 3f00 	ldrex	r3, [r3]
 803ad52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803ad54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803ad56:	4b57      	ldr	r3, [pc, #348]	; (803aeb4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 803ad58:	4013      	ands	r3, r2
 803ad5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 803ad5e:	687b      	ldr	r3, [r7, #4]
 803ad60:	681b      	ldr	r3, [r3, #0]
 803ad62:	3308      	adds	r3, #8
 803ad64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 803ad68:	65ba      	str	r2, [r7, #88]	; 0x58
 803ad6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ad6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803ad6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803ad70:	e841 2300 	strex	r3, r2, [r1]
 803ad74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803ad76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803ad78:	2b00      	cmp	r3, #0
 803ad7a:	d1e3      	bne.n	803ad44 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803ad7c:	687b      	ldr	r3, [r7, #4]
 803ad7e:	2220      	movs	r2, #32
 803ad80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803ad84:	687b      	ldr	r3, [r7, #4]
 803ad86:	2200      	movs	r2, #0
 803ad88:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803ad8a:	687b      	ldr	r3, [r7, #4]
 803ad8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803ad8e:	2b01      	cmp	r3, #1
 803ad90:	d12e      	bne.n	803adf0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803ad92:	687b      	ldr	r3, [r7, #4]
 803ad94:	2200      	movs	r2, #0
 803ad96:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803ad98:	687b      	ldr	r3, [r7, #4]
 803ad9a:	681b      	ldr	r3, [r3, #0]
 803ad9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ad9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803ada0:	e853 3f00 	ldrex	r3, [r3]
 803ada4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803ada6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803ada8:	f023 0310 	bic.w	r3, r3, #16
 803adac:	67fb      	str	r3, [r7, #124]	; 0x7c
 803adae:	687b      	ldr	r3, [r7, #4]
 803adb0:	681b      	ldr	r3, [r3, #0]
 803adb2:	461a      	mov	r2, r3
 803adb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803adb6:	647b      	str	r3, [r7, #68]	; 0x44
 803adb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803adba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 803adbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803adbe:	e841 2300 	strex	r3, r2, [r1]
 803adc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803adc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803adc6:	2b00      	cmp	r3, #0
 803adc8:	d1e6      	bne.n	803ad98 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 803adca:	687b      	ldr	r3, [r7, #4]
 803adcc:	681b      	ldr	r3, [r3, #0]
 803adce:	69db      	ldr	r3, [r3, #28]
 803add0:	f003 0310 	and.w	r3, r3, #16
 803add4:	2b10      	cmp	r3, #16
 803add6:	d103      	bne.n	803ade0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 803add8:	687b      	ldr	r3, [r7, #4]
 803adda:	681b      	ldr	r3, [r3, #0]
 803addc:	2210      	movs	r2, #16
 803adde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803ade0:	687b      	ldr	r3, [r7, #4]
 803ade2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803ade6:	4619      	mov	r1, r3
 803ade8:	6878      	ldr	r0, [r7, #4]
 803adea:	f7fe f96d 	bl	80390c8 <HAL_UARTEx_RxEventCallback>
 803adee:	e002      	b.n	803adf6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 803adf0:	6878      	ldr	r0, [r7, #4]
 803adf2:	f7f2 f95f 	bl	802d0b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803adf6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 803adfa:	2b00      	cmp	r3, #0
 803adfc:	d006      	beq.n	803ae0c <UART_RxISR_16BIT_FIFOEN+0x250>
 803adfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803ae02:	f003 0320 	and.w	r3, r3, #32
 803ae06:	2b00      	cmp	r3, #0
 803ae08:	f47f aefc 	bne.w	803ac04 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 803ae0c:	687b      	ldr	r3, [r7, #4]
 803ae0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803ae12:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 803ae16:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 803ae1a:	2b00      	cmp	r3, #0
 803ae1c:	d045      	beq.n	803aeaa <UART_RxISR_16BIT_FIFOEN+0x2ee>
 803ae1e:	687b      	ldr	r3, [r7, #4]
 803ae20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 803ae24:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 803ae28:	429a      	cmp	r2, r3
 803ae2a:	d23e      	bcs.n	803aeaa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 803ae2c:	687b      	ldr	r3, [r7, #4]
 803ae2e:	681b      	ldr	r3, [r3, #0]
 803ae30:	3308      	adds	r3, #8
 803ae32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803ae36:	e853 3f00 	ldrex	r3, [r3]
 803ae3a:	623b      	str	r3, [r7, #32]
   return(result);
 803ae3c:	6a3b      	ldr	r3, [r7, #32]
 803ae3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 803ae42:	677b      	str	r3, [r7, #116]	; 0x74
 803ae44:	687b      	ldr	r3, [r7, #4]
 803ae46:	681b      	ldr	r3, [r3, #0]
 803ae48:	3308      	adds	r3, #8
 803ae4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 803ae4c:	633a      	str	r2, [r7, #48]	; 0x30
 803ae4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ae50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803ae52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803ae54:	e841 2300 	strex	r3, r2, [r1]
 803ae58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803ae5c:	2b00      	cmp	r3, #0
 803ae5e:	d1e5      	bne.n	803ae2c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 803ae60:	687b      	ldr	r3, [r7, #4]
 803ae62:	4a15      	ldr	r2, [pc, #84]	; (803aeb8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 803ae64:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803ae66:	687b      	ldr	r3, [r7, #4]
 803ae68:	681b      	ldr	r3, [r3, #0]
 803ae6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803ae6c:	693b      	ldr	r3, [r7, #16]
 803ae6e:	e853 3f00 	ldrex	r3, [r3]
 803ae72:	60fb      	str	r3, [r7, #12]
   return(result);
 803ae74:	68fb      	ldr	r3, [r7, #12]
 803ae76:	f043 0320 	orr.w	r3, r3, #32
 803ae7a:	673b      	str	r3, [r7, #112]	; 0x70
 803ae7c:	687b      	ldr	r3, [r7, #4]
 803ae7e:	681b      	ldr	r3, [r3, #0]
 803ae80:	461a      	mov	r2, r3
 803ae82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803ae84:	61fb      	str	r3, [r7, #28]
 803ae86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803ae88:	69b9      	ldr	r1, [r7, #24]
 803ae8a:	69fa      	ldr	r2, [r7, #28]
 803ae8c:	e841 2300 	strex	r3, r2, [r1]
 803ae90:	617b      	str	r3, [r7, #20]
   return(result);
 803ae92:	697b      	ldr	r3, [r7, #20]
 803ae94:	2b00      	cmp	r3, #0
 803ae96:	d1e6      	bne.n	803ae66 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 803ae98:	e007      	b.n	803aeaa <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 803ae9a:	687b      	ldr	r3, [r7, #4]
 803ae9c:	681b      	ldr	r3, [r3, #0]
 803ae9e:	699a      	ldr	r2, [r3, #24]
 803aea0:	687b      	ldr	r3, [r7, #4]
 803aea2:	681b      	ldr	r3, [r3, #0]
 803aea4:	f042 0208 	orr.w	r2, r2, #8
 803aea8:	619a      	str	r2, [r3, #24]
}
 803aeaa:	bf00      	nop
 803aeac:	37a0      	adds	r7, #160	; 0xa0
 803aeae:	46bd      	mov	sp, r7
 803aeb0:	bd80      	pop	{r7, pc}
 803aeb2:	bf00      	nop
 803aeb4:	effffffe 	.word	0xeffffffe
 803aeb8:	0803a763 	.word	0x0803a763

0803aebc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 803aebc:	b480      	push	{r7}
 803aebe:	b083      	sub	sp, #12
 803aec0:	af00      	add	r7, sp, #0
 803aec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 803aec4:	bf00      	nop
 803aec6:	370c      	adds	r7, #12
 803aec8:	46bd      	mov	sp, r7
 803aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aece:	4770      	bx	lr

0803aed0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 803aed0:	b480      	push	{r7}
 803aed2:	b083      	sub	sp, #12
 803aed4:	af00      	add	r7, sp, #0
 803aed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 803aed8:	bf00      	nop
 803aeda:	370c      	adds	r7, #12
 803aedc:	46bd      	mov	sp, r7
 803aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aee2:	4770      	bx	lr

0803aee4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 803aee4:	b480      	push	{r7}
 803aee6:	b083      	sub	sp, #12
 803aee8:	af00      	add	r7, sp, #0
 803aeea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 803aeec:	bf00      	nop
 803aeee:	370c      	adds	r7, #12
 803aef0:	46bd      	mov	sp, r7
 803aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803aef6:	4770      	bx	lr

0803aef8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 803aef8:	b580      	push	{r7, lr}
 803aefa:	b084      	sub	sp, #16
 803aefc:	af00      	add	r7, sp, #0
 803aefe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803af00:	687b      	ldr	r3, [r7, #4]
 803af02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803af06:	2b01      	cmp	r3, #1
 803af08:	d101      	bne.n	803af0e <HAL_UARTEx_EnableFifoMode+0x16>
 803af0a:	2302      	movs	r3, #2
 803af0c:	e02b      	b.n	803af66 <HAL_UARTEx_EnableFifoMode+0x6e>
 803af0e:	687b      	ldr	r3, [r7, #4]
 803af10:	2201      	movs	r2, #1
 803af12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803af16:	687b      	ldr	r3, [r7, #4]
 803af18:	2224      	movs	r2, #36	; 0x24
 803af1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803af1e:	687b      	ldr	r3, [r7, #4]
 803af20:	681b      	ldr	r3, [r3, #0]
 803af22:	681b      	ldr	r3, [r3, #0]
 803af24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803af26:	687b      	ldr	r3, [r7, #4]
 803af28:	681b      	ldr	r3, [r3, #0]
 803af2a:	681a      	ldr	r2, [r3, #0]
 803af2c:	687b      	ldr	r3, [r7, #4]
 803af2e:	681b      	ldr	r3, [r3, #0]
 803af30:	f022 0201 	bic.w	r2, r2, #1
 803af34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 803af36:	68fb      	ldr	r3, [r7, #12]
 803af38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803af3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 803af3e:	687b      	ldr	r3, [r7, #4]
 803af40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 803af44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803af46:	687b      	ldr	r3, [r7, #4]
 803af48:	681b      	ldr	r3, [r3, #0]
 803af4a:	68fa      	ldr	r2, [r7, #12]
 803af4c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803af4e:	6878      	ldr	r0, [r7, #4]
 803af50:	f000 f8c2 	bl	803b0d8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 803af54:	687b      	ldr	r3, [r7, #4]
 803af56:	2220      	movs	r2, #32
 803af58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803af5c:	687b      	ldr	r3, [r7, #4]
 803af5e:	2200      	movs	r2, #0
 803af60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803af64:	2300      	movs	r3, #0
}
 803af66:	4618      	mov	r0, r3
 803af68:	3710      	adds	r7, #16
 803af6a:	46bd      	mov	sp, r7
 803af6c:	bd80      	pop	{r7, pc}

0803af6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 803af6e:	b480      	push	{r7}
 803af70:	b085      	sub	sp, #20
 803af72:	af00      	add	r7, sp, #0
 803af74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803af76:	687b      	ldr	r3, [r7, #4]
 803af78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803af7c:	2b01      	cmp	r3, #1
 803af7e:	d101      	bne.n	803af84 <HAL_UARTEx_DisableFifoMode+0x16>
 803af80:	2302      	movs	r3, #2
 803af82:	e027      	b.n	803afd4 <HAL_UARTEx_DisableFifoMode+0x66>
 803af84:	687b      	ldr	r3, [r7, #4]
 803af86:	2201      	movs	r2, #1
 803af88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803af8c:	687b      	ldr	r3, [r7, #4]
 803af8e:	2224      	movs	r2, #36	; 0x24
 803af90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803af94:	687b      	ldr	r3, [r7, #4]
 803af96:	681b      	ldr	r3, [r3, #0]
 803af98:	681b      	ldr	r3, [r3, #0]
 803af9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803af9c:	687b      	ldr	r3, [r7, #4]
 803af9e:	681b      	ldr	r3, [r3, #0]
 803afa0:	681a      	ldr	r2, [r3, #0]
 803afa2:	687b      	ldr	r3, [r7, #4]
 803afa4:	681b      	ldr	r3, [r3, #0]
 803afa6:	f022 0201 	bic.w	r2, r2, #1
 803afaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 803afac:	68fb      	ldr	r3, [r7, #12]
 803afae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 803afb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 803afb4:	687b      	ldr	r3, [r7, #4]
 803afb6:	2200      	movs	r2, #0
 803afb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803afba:	687b      	ldr	r3, [r7, #4]
 803afbc:	681b      	ldr	r3, [r3, #0]
 803afbe:	68fa      	ldr	r2, [r7, #12]
 803afc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803afc2:	687b      	ldr	r3, [r7, #4]
 803afc4:	2220      	movs	r2, #32
 803afc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803afca:	687b      	ldr	r3, [r7, #4]
 803afcc:	2200      	movs	r2, #0
 803afce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803afd2:	2300      	movs	r3, #0
}
 803afd4:	4618      	mov	r0, r3
 803afd6:	3714      	adds	r7, #20
 803afd8:	46bd      	mov	sp, r7
 803afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 803afde:	4770      	bx	lr

0803afe0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 803afe0:	b580      	push	{r7, lr}
 803afe2:	b084      	sub	sp, #16
 803afe4:	af00      	add	r7, sp, #0
 803afe6:	6078      	str	r0, [r7, #4]
 803afe8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803afea:	687b      	ldr	r3, [r7, #4]
 803afec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803aff0:	2b01      	cmp	r3, #1
 803aff2:	d101      	bne.n	803aff8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 803aff4:	2302      	movs	r3, #2
 803aff6:	e02d      	b.n	803b054 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 803aff8:	687b      	ldr	r3, [r7, #4]
 803affa:	2201      	movs	r2, #1
 803affc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803b000:	687b      	ldr	r3, [r7, #4]
 803b002:	2224      	movs	r2, #36	; 0x24
 803b004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803b008:	687b      	ldr	r3, [r7, #4]
 803b00a:	681b      	ldr	r3, [r3, #0]
 803b00c:	681b      	ldr	r3, [r3, #0]
 803b00e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803b010:	687b      	ldr	r3, [r7, #4]
 803b012:	681b      	ldr	r3, [r3, #0]
 803b014:	681a      	ldr	r2, [r3, #0]
 803b016:	687b      	ldr	r3, [r7, #4]
 803b018:	681b      	ldr	r3, [r3, #0]
 803b01a:	f022 0201 	bic.w	r2, r2, #1
 803b01e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 803b020:	687b      	ldr	r3, [r7, #4]
 803b022:	681b      	ldr	r3, [r3, #0]
 803b024:	689b      	ldr	r3, [r3, #8]
 803b026:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 803b02a:	687b      	ldr	r3, [r7, #4]
 803b02c:	681b      	ldr	r3, [r3, #0]
 803b02e:	683a      	ldr	r2, [r7, #0]
 803b030:	430a      	orrs	r2, r1
 803b032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803b034:	6878      	ldr	r0, [r7, #4]
 803b036:	f000 f84f 	bl	803b0d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803b03a:	687b      	ldr	r3, [r7, #4]
 803b03c:	681b      	ldr	r3, [r3, #0]
 803b03e:	68fa      	ldr	r2, [r7, #12]
 803b040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803b042:	687b      	ldr	r3, [r7, #4]
 803b044:	2220      	movs	r2, #32
 803b046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803b04a:	687b      	ldr	r3, [r7, #4]
 803b04c:	2200      	movs	r2, #0
 803b04e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803b052:	2300      	movs	r3, #0
}
 803b054:	4618      	mov	r0, r3
 803b056:	3710      	adds	r7, #16
 803b058:	46bd      	mov	sp, r7
 803b05a:	bd80      	pop	{r7, pc}

0803b05c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 803b05c:	b580      	push	{r7, lr}
 803b05e:	b084      	sub	sp, #16
 803b060:	af00      	add	r7, sp, #0
 803b062:	6078      	str	r0, [r7, #4]
 803b064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 803b066:	687b      	ldr	r3, [r7, #4]
 803b068:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803b06c:	2b01      	cmp	r3, #1
 803b06e:	d101      	bne.n	803b074 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 803b070:	2302      	movs	r3, #2
 803b072:	e02d      	b.n	803b0d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 803b074:	687b      	ldr	r3, [r7, #4]
 803b076:	2201      	movs	r2, #1
 803b078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 803b07c:	687b      	ldr	r3, [r7, #4]
 803b07e:	2224      	movs	r2, #36	; 0x24
 803b080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803b084:	687b      	ldr	r3, [r7, #4]
 803b086:	681b      	ldr	r3, [r3, #0]
 803b088:	681b      	ldr	r3, [r3, #0]
 803b08a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 803b08c:	687b      	ldr	r3, [r7, #4]
 803b08e:	681b      	ldr	r3, [r3, #0]
 803b090:	681a      	ldr	r2, [r3, #0]
 803b092:	687b      	ldr	r3, [r7, #4]
 803b094:	681b      	ldr	r3, [r3, #0]
 803b096:	f022 0201 	bic.w	r2, r2, #1
 803b09a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 803b09c:	687b      	ldr	r3, [r7, #4]
 803b09e:	681b      	ldr	r3, [r3, #0]
 803b0a0:	689b      	ldr	r3, [r3, #8]
 803b0a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 803b0a6:	687b      	ldr	r3, [r7, #4]
 803b0a8:	681b      	ldr	r3, [r3, #0]
 803b0aa:	683a      	ldr	r2, [r7, #0]
 803b0ac:	430a      	orrs	r2, r1
 803b0ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 803b0b0:	6878      	ldr	r0, [r7, #4]
 803b0b2:	f000 f811 	bl	803b0d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 803b0b6:	687b      	ldr	r3, [r7, #4]
 803b0b8:	681b      	ldr	r3, [r3, #0]
 803b0ba:	68fa      	ldr	r2, [r7, #12]
 803b0bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803b0be:	687b      	ldr	r3, [r7, #4]
 803b0c0:	2220      	movs	r2, #32
 803b0c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 803b0c6:	687b      	ldr	r3, [r7, #4]
 803b0c8:	2200      	movs	r2, #0
 803b0ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803b0ce:	2300      	movs	r3, #0
}
 803b0d0:	4618      	mov	r0, r3
 803b0d2:	3710      	adds	r7, #16
 803b0d4:	46bd      	mov	sp, r7
 803b0d6:	bd80      	pop	{r7, pc}

0803b0d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 803b0d8:	b480      	push	{r7}
 803b0da:	b085      	sub	sp, #20
 803b0dc:	af00      	add	r7, sp, #0
 803b0de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 803b0e0:	687b      	ldr	r3, [r7, #4]
 803b0e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 803b0e4:	2b00      	cmp	r3, #0
 803b0e6:	d108      	bne.n	803b0fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 803b0e8:	687b      	ldr	r3, [r7, #4]
 803b0ea:	2201      	movs	r2, #1
 803b0ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 803b0f0:	687b      	ldr	r3, [r7, #4]
 803b0f2:	2201      	movs	r2, #1
 803b0f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 803b0f8:	e031      	b.n	803b15e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 803b0fa:	2310      	movs	r3, #16
 803b0fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 803b0fe:	2310      	movs	r3, #16
 803b100:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 803b102:	687b      	ldr	r3, [r7, #4]
 803b104:	681b      	ldr	r3, [r3, #0]
 803b106:	689b      	ldr	r3, [r3, #8]
 803b108:	0e5b      	lsrs	r3, r3, #25
 803b10a:	b2db      	uxtb	r3, r3
 803b10c:	f003 0307 	and.w	r3, r3, #7
 803b110:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 803b112:	687b      	ldr	r3, [r7, #4]
 803b114:	681b      	ldr	r3, [r3, #0]
 803b116:	689b      	ldr	r3, [r3, #8]
 803b118:	0f5b      	lsrs	r3, r3, #29
 803b11a:	b2db      	uxtb	r3, r3
 803b11c:	f003 0307 	and.w	r3, r3, #7
 803b120:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 803b122:	7bbb      	ldrb	r3, [r7, #14]
 803b124:	7b3a      	ldrb	r2, [r7, #12]
 803b126:	4911      	ldr	r1, [pc, #68]	; (803b16c <UARTEx_SetNbDataToProcess+0x94>)
 803b128:	5c8a      	ldrb	r2, [r1, r2]
 803b12a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 803b12e:	7b3a      	ldrb	r2, [r7, #12]
 803b130:	490f      	ldr	r1, [pc, #60]	; (803b170 <UARTEx_SetNbDataToProcess+0x98>)
 803b132:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 803b134:	fb93 f3f2 	sdiv	r3, r3, r2
 803b138:	b29a      	uxth	r2, r3
 803b13a:	687b      	ldr	r3, [r7, #4]
 803b13c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 803b140:	7bfb      	ldrb	r3, [r7, #15]
 803b142:	7b7a      	ldrb	r2, [r7, #13]
 803b144:	4909      	ldr	r1, [pc, #36]	; (803b16c <UARTEx_SetNbDataToProcess+0x94>)
 803b146:	5c8a      	ldrb	r2, [r1, r2]
 803b148:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 803b14c:	7b7a      	ldrb	r2, [r7, #13]
 803b14e:	4908      	ldr	r1, [pc, #32]	; (803b170 <UARTEx_SetNbDataToProcess+0x98>)
 803b150:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 803b152:	fb93 f3f2 	sdiv	r3, r3, r2
 803b156:	b29a      	uxth	r2, r3
 803b158:	687b      	ldr	r3, [r7, #4]
 803b15a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 803b15e:	bf00      	nop
 803b160:	3714      	adds	r7, #20
 803b162:	46bd      	mov	sp, r7
 803b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b168:	4770      	bx	lr
 803b16a:	bf00      	nop
 803b16c:	0805b84c 	.word	0x0805b84c
 803b170:	0805b854 	.word	0x0805b854

0803b174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 803b174:	b084      	sub	sp, #16
 803b176:	b580      	push	{r7, lr}
 803b178:	b084      	sub	sp, #16
 803b17a:	af00      	add	r7, sp, #0
 803b17c:	6078      	str	r0, [r7, #4]
 803b17e:	f107 001c 	add.w	r0, r7, #28
 803b182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 803b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803b188:	2b01      	cmp	r3, #1
 803b18a:	d120      	bne.n	803b1ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 803b18c:	687b      	ldr	r3, [r7, #4]
 803b18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803b190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803b194:	687b      	ldr	r3, [r7, #4]
 803b196:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 803b198:	687b      	ldr	r3, [r7, #4]
 803b19a:	68da      	ldr	r2, [r3, #12]
 803b19c:	4b2a      	ldr	r3, [pc, #168]	; (803b248 <USB_CoreInit+0xd4>)
 803b19e:	4013      	ands	r3, r2
 803b1a0:	687a      	ldr	r2, [r7, #4]
 803b1a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 803b1a4:	687b      	ldr	r3, [r7, #4]
 803b1a6:	68db      	ldr	r3, [r3, #12]
 803b1a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 803b1ac:	687b      	ldr	r3, [r7, #4]
 803b1ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 803b1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803b1b2:	2b01      	cmp	r3, #1
 803b1b4:	d105      	bne.n	803b1c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 803b1b6:	687b      	ldr	r3, [r7, #4]
 803b1b8:	68db      	ldr	r3, [r3, #12]
 803b1ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 803b1be:	687b      	ldr	r3, [r7, #4]
 803b1c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 803b1c2:	6878      	ldr	r0, [r7, #4]
 803b1c4:	f001 fc04 	bl	803c9d0 <USB_CoreReset>
 803b1c8:	4603      	mov	r3, r0
 803b1ca:	73fb      	strb	r3, [r7, #15]
 803b1cc:	e01a      	b.n	803b204 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 803b1ce:	687b      	ldr	r3, [r7, #4]
 803b1d0:	68db      	ldr	r3, [r3, #12]
 803b1d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803b1d6:	687b      	ldr	r3, [r7, #4]
 803b1d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 803b1da:	6878      	ldr	r0, [r7, #4]
 803b1dc:	f001 fbf8 	bl	803c9d0 <USB_CoreReset>
 803b1e0:	4603      	mov	r3, r0
 803b1e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 803b1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803b1e6:	2b00      	cmp	r3, #0
 803b1e8:	d106      	bne.n	803b1f8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 803b1ea:	687b      	ldr	r3, [r7, #4]
 803b1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803b1ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 803b1f2:	687b      	ldr	r3, [r7, #4]
 803b1f4:	639a      	str	r2, [r3, #56]	; 0x38
 803b1f6:	e005      	b.n	803b204 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 803b1f8:	687b      	ldr	r3, [r7, #4]
 803b1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803b1fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 803b200:	687b      	ldr	r3, [r7, #4]
 803b202:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 803b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803b206:	2b01      	cmp	r3, #1
 803b208:	d116      	bne.n	803b238 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 803b20a:	687b      	ldr	r3, [r7, #4]
 803b20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 803b20e:	b29a      	uxth	r2, r3
 803b210:	687b      	ldr	r3, [r7, #4]
 803b212:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 803b214:	687b      	ldr	r3, [r7, #4]
 803b216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 803b218:	4b0c      	ldr	r3, [pc, #48]	; (803b24c <USB_CoreInit+0xd8>)
 803b21a:	4313      	orrs	r3, r2
 803b21c:	687a      	ldr	r2, [r7, #4]
 803b21e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 803b220:	687b      	ldr	r3, [r7, #4]
 803b222:	689b      	ldr	r3, [r3, #8]
 803b224:	f043 0206 	orr.w	r2, r3, #6
 803b228:	687b      	ldr	r3, [r7, #4]
 803b22a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 803b22c:	687b      	ldr	r3, [r7, #4]
 803b22e:	689b      	ldr	r3, [r3, #8]
 803b230:	f043 0220 	orr.w	r2, r3, #32
 803b234:	687b      	ldr	r3, [r7, #4]
 803b236:	609a      	str	r2, [r3, #8]
  }

  return ret;
 803b238:	7bfb      	ldrb	r3, [r7, #15]
}
 803b23a:	4618      	mov	r0, r3
 803b23c:	3710      	adds	r7, #16
 803b23e:	46bd      	mov	sp, r7
 803b240:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803b244:	b004      	add	sp, #16
 803b246:	4770      	bx	lr
 803b248:	ffbdffbf 	.word	0xffbdffbf
 803b24c:	03ee0000 	.word	0x03ee0000

0803b250 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 803b250:	b480      	push	{r7}
 803b252:	b087      	sub	sp, #28
 803b254:	af00      	add	r7, sp, #0
 803b256:	60f8      	str	r0, [r7, #12]
 803b258:	60b9      	str	r1, [r7, #8]
 803b25a:	4613      	mov	r3, r2
 803b25c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 803b25e:	79fb      	ldrb	r3, [r7, #7]
 803b260:	2b02      	cmp	r3, #2
 803b262:	d165      	bne.n	803b330 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 803b264:	68bb      	ldr	r3, [r7, #8]
 803b266:	4a41      	ldr	r2, [pc, #260]	; (803b36c <USB_SetTurnaroundTime+0x11c>)
 803b268:	4293      	cmp	r3, r2
 803b26a:	d906      	bls.n	803b27a <USB_SetTurnaroundTime+0x2a>
 803b26c:	68bb      	ldr	r3, [r7, #8]
 803b26e:	4a40      	ldr	r2, [pc, #256]	; (803b370 <USB_SetTurnaroundTime+0x120>)
 803b270:	4293      	cmp	r3, r2
 803b272:	d202      	bcs.n	803b27a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 803b274:	230f      	movs	r3, #15
 803b276:	617b      	str	r3, [r7, #20]
 803b278:	e062      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 803b27a:	68bb      	ldr	r3, [r7, #8]
 803b27c:	4a3c      	ldr	r2, [pc, #240]	; (803b370 <USB_SetTurnaroundTime+0x120>)
 803b27e:	4293      	cmp	r3, r2
 803b280:	d306      	bcc.n	803b290 <USB_SetTurnaroundTime+0x40>
 803b282:	68bb      	ldr	r3, [r7, #8]
 803b284:	4a3b      	ldr	r2, [pc, #236]	; (803b374 <USB_SetTurnaroundTime+0x124>)
 803b286:	4293      	cmp	r3, r2
 803b288:	d202      	bcs.n	803b290 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 803b28a:	230e      	movs	r3, #14
 803b28c:	617b      	str	r3, [r7, #20]
 803b28e:	e057      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 803b290:	68bb      	ldr	r3, [r7, #8]
 803b292:	4a38      	ldr	r2, [pc, #224]	; (803b374 <USB_SetTurnaroundTime+0x124>)
 803b294:	4293      	cmp	r3, r2
 803b296:	d306      	bcc.n	803b2a6 <USB_SetTurnaroundTime+0x56>
 803b298:	68bb      	ldr	r3, [r7, #8]
 803b29a:	4a37      	ldr	r2, [pc, #220]	; (803b378 <USB_SetTurnaroundTime+0x128>)
 803b29c:	4293      	cmp	r3, r2
 803b29e:	d202      	bcs.n	803b2a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 803b2a0:	230d      	movs	r3, #13
 803b2a2:	617b      	str	r3, [r7, #20]
 803b2a4:	e04c      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 803b2a6:	68bb      	ldr	r3, [r7, #8]
 803b2a8:	4a33      	ldr	r2, [pc, #204]	; (803b378 <USB_SetTurnaroundTime+0x128>)
 803b2aa:	4293      	cmp	r3, r2
 803b2ac:	d306      	bcc.n	803b2bc <USB_SetTurnaroundTime+0x6c>
 803b2ae:	68bb      	ldr	r3, [r7, #8]
 803b2b0:	4a32      	ldr	r2, [pc, #200]	; (803b37c <USB_SetTurnaroundTime+0x12c>)
 803b2b2:	4293      	cmp	r3, r2
 803b2b4:	d802      	bhi.n	803b2bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 803b2b6:	230c      	movs	r3, #12
 803b2b8:	617b      	str	r3, [r7, #20]
 803b2ba:	e041      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 803b2bc:	68bb      	ldr	r3, [r7, #8]
 803b2be:	4a2f      	ldr	r2, [pc, #188]	; (803b37c <USB_SetTurnaroundTime+0x12c>)
 803b2c0:	4293      	cmp	r3, r2
 803b2c2:	d906      	bls.n	803b2d2 <USB_SetTurnaroundTime+0x82>
 803b2c4:	68bb      	ldr	r3, [r7, #8]
 803b2c6:	4a2e      	ldr	r2, [pc, #184]	; (803b380 <USB_SetTurnaroundTime+0x130>)
 803b2c8:	4293      	cmp	r3, r2
 803b2ca:	d802      	bhi.n	803b2d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 803b2cc:	230b      	movs	r3, #11
 803b2ce:	617b      	str	r3, [r7, #20]
 803b2d0:	e036      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 803b2d2:	68bb      	ldr	r3, [r7, #8]
 803b2d4:	4a2a      	ldr	r2, [pc, #168]	; (803b380 <USB_SetTurnaroundTime+0x130>)
 803b2d6:	4293      	cmp	r3, r2
 803b2d8:	d906      	bls.n	803b2e8 <USB_SetTurnaroundTime+0x98>
 803b2da:	68bb      	ldr	r3, [r7, #8]
 803b2dc:	4a29      	ldr	r2, [pc, #164]	; (803b384 <USB_SetTurnaroundTime+0x134>)
 803b2de:	4293      	cmp	r3, r2
 803b2e0:	d802      	bhi.n	803b2e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 803b2e2:	230a      	movs	r3, #10
 803b2e4:	617b      	str	r3, [r7, #20]
 803b2e6:	e02b      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 803b2e8:	68bb      	ldr	r3, [r7, #8]
 803b2ea:	4a26      	ldr	r2, [pc, #152]	; (803b384 <USB_SetTurnaroundTime+0x134>)
 803b2ec:	4293      	cmp	r3, r2
 803b2ee:	d906      	bls.n	803b2fe <USB_SetTurnaroundTime+0xae>
 803b2f0:	68bb      	ldr	r3, [r7, #8]
 803b2f2:	4a25      	ldr	r2, [pc, #148]	; (803b388 <USB_SetTurnaroundTime+0x138>)
 803b2f4:	4293      	cmp	r3, r2
 803b2f6:	d202      	bcs.n	803b2fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 803b2f8:	2309      	movs	r3, #9
 803b2fa:	617b      	str	r3, [r7, #20]
 803b2fc:	e020      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 803b2fe:	68bb      	ldr	r3, [r7, #8]
 803b300:	4a21      	ldr	r2, [pc, #132]	; (803b388 <USB_SetTurnaroundTime+0x138>)
 803b302:	4293      	cmp	r3, r2
 803b304:	d306      	bcc.n	803b314 <USB_SetTurnaroundTime+0xc4>
 803b306:	68bb      	ldr	r3, [r7, #8]
 803b308:	4a20      	ldr	r2, [pc, #128]	; (803b38c <USB_SetTurnaroundTime+0x13c>)
 803b30a:	4293      	cmp	r3, r2
 803b30c:	d802      	bhi.n	803b314 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 803b30e:	2308      	movs	r3, #8
 803b310:	617b      	str	r3, [r7, #20]
 803b312:	e015      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 803b314:	68bb      	ldr	r3, [r7, #8]
 803b316:	4a1d      	ldr	r2, [pc, #116]	; (803b38c <USB_SetTurnaroundTime+0x13c>)
 803b318:	4293      	cmp	r3, r2
 803b31a:	d906      	bls.n	803b32a <USB_SetTurnaroundTime+0xda>
 803b31c:	68bb      	ldr	r3, [r7, #8]
 803b31e:	4a1c      	ldr	r2, [pc, #112]	; (803b390 <USB_SetTurnaroundTime+0x140>)
 803b320:	4293      	cmp	r3, r2
 803b322:	d202      	bcs.n	803b32a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 803b324:	2307      	movs	r3, #7
 803b326:	617b      	str	r3, [r7, #20]
 803b328:	e00a      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 803b32a:	2306      	movs	r3, #6
 803b32c:	617b      	str	r3, [r7, #20]
 803b32e:	e007      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 803b330:	79fb      	ldrb	r3, [r7, #7]
 803b332:	2b00      	cmp	r3, #0
 803b334:	d102      	bne.n	803b33c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 803b336:	2309      	movs	r3, #9
 803b338:	617b      	str	r3, [r7, #20]
 803b33a:	e001      	b.n	803b340 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 803b33c:	2309      	movs	r3, #9
 803b33e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 803b340:	68fb      	ldr	r3, [r7, #12]
 803b342:	68db      	ldr	r3, [r3, #12]
 803b344:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 803b348:	68fb      	ldr	r3, [r7, #12]
 803b34a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 803b34c:	68fb      	ldr	r3, [r7, #12]
 803b34e:	68da      	ldr	r2, [r3, #12]
 803b350:	697b      	ldr	r3, [r7, #20]
 803b352:	029b      	lsls	r3, r3, #10
 803b354:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 803b358:	431a      	orrs	r2, r3
 803b35a:	68fb      	ldr	r3, [r7, #12]
 803b35c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 803b35e:	2300      	movs	r3, #0
}
 803b360:	4618      	mov	r0, r3
 803b362:	371c      	adds	r7, #28
 803b364:	46bd      	mov	sp, r7
 803b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b36a:	4770      	bx	lr
 803b36c:	00d8acbf 	.word	0x00d8acbf
 803b370:	00e4e1c0 	.word	0x00e4e1c0
 803b374:	00f42400 	.word	0x00f42400
 803b378:	01067380 	.word	0x01067380
 803b37c:	011a499f 	.word	0x011a499f
 803b380:	01312cff 	.word	0x01312cff
 803b384:	014ca43f 	.word	0x014ca43f
 803b388:	016e3600 	.word	0x016e3600
 803b38c:	01a6ab1f 	.word	0x01a6ab1f
 803b390:	01e84800 	.word	0x01e84800

0803b394 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 803b394:	b480      	push	{r7}
 803b396:	b083      	sub	sp, #12
 803b398:	af00      	add	r7, sp, #0
 803b39a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 803b39c:	687b      	ldr	r3, [r7, #4]
 803b39e:	689b      	ldr	r3, [r3, #8]
 803b3a0:	f043 0201 	orr.w	r2, r3, #1
 803b3a4:	687b      	ldr	r3, [r7, #4]
 803b3a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 803b3a8:	2300      	movs	r3, #0
}
 803b3aa:	4618      	mov	r0, r3
 803b3ac:	370c      	adds	r7, #12
 803b3ae:	46bd      	mov	sp, r7
 803b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3b4:	4770      	bx	lr

0803b3b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 803b3b6:	b480      	push	{r7}
 803b3b8:	b083      	sub	sp, #12
 803b3ba:	af00      	add	r7, sp, #0
 803b3bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 803b3be:	687b      	ldr	r3, [r7, #4]
 803b3c0:	689b      	ldr	r3, [r3, #8]
 803b3c2:	f023 0201 	bic.w	r2, r3, #1
 803b3c6:	687b      	ldr	r3, [r7, #4]
 803b3c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 803b3ca:	2300      	movs	r3, #0
}
 803b3cc:	4618      	mov	r0, r3
 803b3ce:	370c      	adds	r7, #12
 803b3d0:	46bd      	mov	sp, r7
 803b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b3d6:	4770      	bx	lr

0803b3d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 803b3d8:	b580      	push	{r7, lr}
 803b3da:	b084      	sub	sp, #16
 803b3dc:	af00      	add	r7, sp, #0
 803b3de:	6078      	str	r0, [r7, #4]
 803b3e0:	460b      	mov	r3, r1
 803b3e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 803b3e4:	2300      	movs	r3, #0
 803b3e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 803b3e8:	687b      	ldr	r3, [r7, #4]
 803b3ea:	68db      	ldr	r3, [r3, #12]
 803b3ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 803b3f0:	687b      	ldr	r3, [r7, #4]
 803b3f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 803b3f4:	78fb      	ldrb	r3, [r7, #3]
 803b3f6:	2b01      	cmp	r3, #1
 803b3f8:	d115      	bne.n	803b426 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 803b3fa:	687b      	ldr	r3, [r7, #4]
 803b3fc:	68db      	ldr	r3, [r3, #12]
 803b3fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 803b402:	687b      	ldr	r3, [r7, #4]
 803b404:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 803b406:	2001      	movs	r0, #1
 803b408:	f7f2 ff76 	bl	802e2f8 <HAL_Delay>
      ms++;
 803b40c:	68fb      	ldr	r3, [r7, #12]
 803b40e:	3301      	adds	r3, #1
 803b410:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 803b412:	6878      	ldr	r0, [r7, #4]
 803b414:	f001 fa4b 	bl	803c8ae <USB_GetMode>
 803b418:	4603      	mov	r3, r0
 803b41a:	2b01      	cmp	r3, #1
 803b41c:	d01e      	beq.n	803b45c <USB_SetCurrentMode+0x84>
 803b41e:	68fb      	ldr	r3, [r7, #12]
 803b420:	2b31      	cmp	r3, #49	; 0x31
 803b422:	d9f0      	bls.n	803b406 <USB_SetCurrentMode+0x2e>
 803b424:	e01a      	b.n	803b45c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 803b426:	78fb      	ldrb	r3, [r7, #3]
 803b428:	2b00      	cmp	r3, #0
 803b42a:	d115      	bne.n	803b458 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 803b42c:	687b      	ldr	r3, [r7, #4]
 803b42e:	68db      	ldr	r3, [r3, #12]
 803b430:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 803b434:	687b      	ldr	r3, [r7, #4]
 803b436:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 803b438:	2001      	movs	r0, #1
 803b43a:	f7f2 ff5d 	bl	802e2f8 <HAL_Delay>
      ms++;
 803b43e:	68fb      	ldr	r3, [r7, #12]
 803b440:	3301      	adds	r3, #1
 803b442:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 803b444:	6878      	ldr	r0, [r7, #4]
 803b446:	f001 fa32 	bl	803c8ae <USB_GetMode>
 803b44a:	4603      	mov	r3, r0
 803b44c:	2b00      	cmp	r3, #0
 803b44e:	d005      	beq.n	803b45c <USB_SetCurrentMode+0x84>
 803b450:	68fb      	ldr	r3, [r7, #12]
 803b452:	2b31      	cmp	r3, #49	; 0x31
 803b454:	d9f0      	bls.n	803b438 <USB_SetCurrentMode+0x60>
 803b456:	e001      	b.n	803b45c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 803b458:	2301      	movs	r3, #1
 803b45a:	e005      	b.n	803b468 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 803b45c:	68fb      	ldr	r3, [r7, #12]
 803b45e:	2b32      	cmp	r3, #50	; 0x32
 803b460:	d101      	bne.n	803b466 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 803b462:	2301      	movs	r3, #1
 803b464:	e000      	b.n	803b468 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 803b466:	2300      	movs	r3, #0
}
 803b468:	4618      	mov	r0, r3
 803b46a:	3710      	adds	r7, #16
 803b46c:	46bd      	mov	sp, r7
 803b46e:	bd80      	pop	{r7, pc}

0803b470 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 803b470:	b084      	sub	sp, #16
 803b472:	b580      	push	{r7, lr}
 803b474:	b086      	sub	sp, #24
 803b476:	af00      	add	r7, sp, #0
 803b478:	6078      	str	r0, [r7, #4]
 803b47a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 803b47e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 803b482:	2300      	movs	r3, #0
 803b484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b486:	687b      	ldr	r3, [r7, #4]
 803b488:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 803b48a:	2300      	movs	r3, #0
 803b48c:	613b      	str	r3, [r7, #16]
 803b48e:	e009      	b.n	803b4a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 803b490:	687a      	ldr	r2, [r7, #4]
 803b492:	693b      	ldr	r3, [r7, #16]
 803b494:	3340      	adds	r3, #64	; 0x40
 803b496:	009b      	lsls	r3, r3, #2
 803b498:	4413      	add	r3, r2
 803b49a:	2200      	movs	r2, #0
 803b49c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 803b49e:	693b      	ldr	r3, [r7, #16]
 803b4a0:	3301      	adds	r3, #1
 803b4a2:	613b      	str	r3, [r7, #16]
 803b4a4:	693b      	ldr	r3, [r7, #16]
 803b4a6:	2b0e      	cmp	r3, #14
 803b4a8:	d9f2      	bls.n	803b490 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 803b4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803b4ac:	2b00      	cmp	r3, #0
 803b4ae:	d11c      	bne.n	803b4ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803b4b0:	68fb      	ldr	r3, [r7, #12]
 803b4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b4b6:	685b      	ldr	r3, [r3, #4]
 803b4b8:	68fa      	ldr	r2, [r7, #12]
 803b4ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803b4be:	f043 0302 	orr.w	r3, r3, #2
 803b4c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 803b4c4:	687b      	ldr	r3, [r7, #4]
 803b4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803b4c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 803b4cc:	687b      	ldr	r3, [r7, #4]
 803b4ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 803b4d0:	687b      	ldr	r3, [r7, #4]
 803b4d2:	681b      	ldr	r3, [r3, #0]
 803b4d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 803b4d8:	687b      	ldr	r3, [r7, #4]
 803b4da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 803b4dc:	687b      	ldr	r3, [r7, #4]
 803b4de:	681b      	ldr	r3, [r3, #0]
 803b4e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 803b4e4:	687b      	ldr	r3, [r7, #4]
 803b4e6:	601a      	str	r2, [r3, #0]
 803b4e8:	e005      	b.n	803b4f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 803b4ea:	687b      	ldr	r3, [r7, #4]
 803b4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803b4ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 803b4f2:	687b      	ldr	r3, [r7, #4]
 803b4f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 803b4f6:	68fb      	ldr	r3, [r7, #12]
 803b4f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803b4fc:	461a      	mov	r2, r3
 803b4fe:	2300      	movs	r3, #0
 803b500:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 803b502:	68fb      	ldr	r3, [r7, #12]
 803b504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b508:	4619      	mov	r1, r3
 803b50a:	68fb      	ldr	r3, [r7, #12]
 803b50c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b510:	461a      	mov	r2, r3
 803b512:	680b      	ldr	r3, [r1, #0]
 803b514:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 803b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803b518:	2b01      	cmp	r3, #1
 803b51a:	d10c      	bne.n	803b536 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 803b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803b51e:	2b00      	cmp	r3, #0
 803b520:	d104      	bne.n	803b52c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 803b522:	2100      	movs	r1, #0
 803b524:	6878      	ldr	r0, [r7, #4]
 803b526:	f000 f965 	bl	803b7f4 <USB_SetDevSpeed>
 803b52a:	e008      	b.n	803b53e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 803b52c:	2101      	movs	r1, #1
 803b52e:	6878      	ldr	r0, [r7, #4]
 803b530:	f000 f960 	bl	803b7f4 <USB_SetDevSpeed>
 803b534:	e003      	b.n	803b53e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 803b536:	2103      	movs	r1, #3
 803b538:	6878      	ldr	r0, [r7, #4]
 803b53a:	f000 f95b 	bl	803b7f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 803b53e:	2110      	movs	r1, #16
 803b540:	6878      	ldr	r0, [r7, #4]
 803b542:	f000 f8f3 	bl	803b72c <USB_FlushTxFifo>
 803b546:	4603      	mov	r3, r0
 803b548:	2b00      	cmp	r3, #0
 803b54a:	d001      	beq.n	803b550 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 803b54c:	2301      	movs	r3, #1
 803b54e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 803b550:	6878      	ldr	r0, [r7, #4]
 803b552:	f000 f91f 	bl	803b794 <USB_FlushRxFifo>
 803b556:	4603      	mov	r3, r0
 803b558:	2b00      	cmp	r3, #0
 803b55a:	d001      	beq.n	803b560 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 803b55c:	2301      	movs	r3, #1
 803b55e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 803b560:	68fb      	ldr	r3, [r7, #12]
 803b562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b566:	461a      	mov	r2, r3
 803b568:	2300      	movs	r3, #0
 803b56a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 803b56c:	68fb      	ldr	r3, [r7, #12]
 803b56e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b572:	461a      	mov	r2, r3
 803b574:	2300      	movs	r3, #0
 803b576:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 803b578:	68fb      	ldr	r3, [r7, #12]
 803b57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b57e:	461a      	mov	r2, r3
 803b580:	2300      	movs	r3, #0
 803b582:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 803b584:	2300      	movs	r3, #0
 803b586:	613b      	str	r3, [r7, #16]
 803b588:	e043      	b.n	803b612 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803b58a:	693b      	ldr	r3, [r7, #16]
 803b58c:	015a      	lsls	r2, r3, #5
 803b58e:	68fb      	ldr	r3, [r7, #12]
 803b590:	4413      	add	r3, r2
 803b592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b596:	681b      	ldr	r3, [r3, #0]
 803b598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803b59c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803b5a0:	d118      	bne.n	803b5d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 803b5a2:	693b      	ldr	r3, [r7, #16]
 803b5a4:	2b00      	cmp	r3, #0
 803b5a6:	d10a      	bne.n	803b5be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 803b5a8:	693b      	ldr	r3, [r7, #16]
 803b5aa:	015a      	lsls	r2, r3, #5
 803b5ac:	68fb      	ldr	r3, [r7, #12]
 803b5ae:	4413      	add	r3, r2
 803b5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b5b4:	461a      	mov	r2, r3
 803b5b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803b5ba:	6013      	str	r3, [r2, #0]
 803b5bc:	e013      	b.n	803b5e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 803b5be:	693b      	ldr	r3, [r7, #16]
 803b5c0:	015a      	lsls	r2, r3, #5
 803b5c2:	68fb      	ldr	r3, [r7, #12]
 803b5c4:	4413      	add	r3, r2
 803b5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b5ca:	461a      	mov	r2, r3
 803b5cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803b5d0:	6013      	str	r3, [r2, #0]
 803b5d2:	e008      	b.n	803b5e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 803b5d4:	693b      	ldr	r3, [r7, #16]
 803b5d6:	015a      	lsls	r2, r3, #5
 803b5d8:	68fb      	ldr	r3, [r7, #12]
 803b5da:	4413      	add	r3, r2
 803b5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b5e0:	461a      	mov	r2, r3
 803b5e2:	2300      	movs	r3, #0
 803b5e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 803b5e6:	693b      	ldr	r3, [r7, #16]
 803b5e8:	015a      	lsls	r2, r3, #5
 803b5ea:	68fb      	ldr	r3, [r7, #12]
 803b5ec:	4413      	add	r3, r2
 803b5ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b5f2:	461a      	mov	r2, r3
 803b5f4:	2300      	movs	r3, #0
 803b5f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 803b5f8:	693b      	ldr	r3, [r7, #16]
 803b5fa:	015a      	lsls	r2, r3, #5
 803b5fc:	68fb      	ldr	r3, [r7, #12]
 803b5fe:	4413      	add	r3, r2
 803b600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b604:	461a      	mov	r2, r3
 803b606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803b60a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803b60c:	693b      	ldr	r3, [r7, #16]
 803b60e:	3301      	adds	r3, #1
 803b610:	613b      	str	r3, [r7, #16]
 803b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b614:	693a      	ldr	r2, [r7, #16]
 803b616:	429a      	cmp	r2, r3
 803b618:	d3b7      	bcc.n	803b58a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 803b61a:	2300      	movs	r3, #0
 803b61c:	613b      	str	r3, [r7, #16]
 803b61e:	e043      	b.n	803b6a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803b620:	693b      	ldr	r3, [r7, #16]
 803b622:	015a      	lsls	r2, r3, #5
 803b624:	68fb      	ldr	r3, [r7, #12]
 803b626:	4413      	add	r3, r2
 803b628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b62c:	681b      	ldr	r3, [r3, #0]
 803b62e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803b632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803b636:	d118      	bne.n	803b66a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 803b638:	693b      	ldr	r3, [r7, #16]
 803b63a:	2b00      	cmp	r3, #0
 803b63c:	d10a      	bne.n	803b654 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 803b63e:	693b      	ldr	r3, [r7, #16]
 803b640:	015a      	lsls	r2, r3, #5
 803b642:	68fb      	ldr	r3, [r7, #12]
 803b644:	4413      	add	r3, r2
 803b646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b64a:	461a      	mov	r2, r3
 803b64c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 803b650:	6013      	str	r3, [r2, #0]
 803b652:	e013      	b.n	803b67c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 803b654:	693b      	ldr	r3, [r7, #16]
 803b656:	015a      	lsls	r2, r3, #5
 803b658:	68fb      	ldr	r3, [r7, #12]
 803b65a:	4413      	add	r3, r2
 803b65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b660:	461a      	mov	r2, r3
 803b662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803b666:	6013      	str	r3, [r2, #0]
 803b668:	e008      	b.n	803b67c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 803b66a:	693b      	ldr	r3, [r7, #16]
 803b66c:	015a      	lsls	r2, r3, #5
 803b66e:	68fb      	ldr	r3, [r7, #12]
 803b670:	4413      	add	r3, r2
 803b672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b676:	461a      	mov	r2, r3
 803b678:	2300      	movs	r3, #0
 803b67a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 803b67c:	693b      	ldr	r3, [r7, #16]
 803b67e:	015a      	lsls	r2, r3, #5
 803b680:	68fb      	ldr	r3, [r7, #12]
 803b682:	4413      	add	r3, r2
 803b684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b688:	461a      	mov	r2, r3
 803b68a:	2300      	movs	r3, #0
 803b68c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 803b68e:	693b      	ldr	r3, [r7, #16]
 803b690:	015a      	lsls	r2, r3, #5
 803b692:	68fb      	ldr	r3, [r7, #12]
 803b694:	4413      	add	r3, r2
 803b696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b69a:	461a      	mov	r2, r3
 803b69c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 803b6a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803b6a2:	693b      	ldr	r3, [r7, #16]
 803b6a4:	3301      	adds	r3, #1
 803b6a6:	613b      	str	r3, [r7, #16]
 803b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803b6aa:	693a      	ldr	r2, [r7, #16]
 803b6ac:	429a      	cmp	r2, r3
 803b6ae:	d3b7      	bcc.n	803b620 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 803b6b0:	68fb      	ldr	r3, [r7, #12]
 803b6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b6b6:	691b      	ldr	r3, [r3, #16]
 803b6b8:	68fa      	ldr	r2, [r7, #12]
 803b6ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803b6be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803b6c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 803b6c4:	687b      	ldr	r3, [r7, #4]
 803b6c6:	2200      	movs	r2, #0
 803b6c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 803b6ca:	687b      	ldr	r3, [r7, #4]
 803b6cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 803b6d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 803b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803b6d4:	2b00      	cmp	r3, #0
 803b6d6:	d105      	bne.n	803b6e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 803b6d8:	687b      	ldr	r3, [r7, #4]
 803b6da:	699b      	ldr	r3, [r3, #24]
 803b6dc:	f043 0210 	orr.w	r2, r3, #16
 803b6e0:	687b      	ldr	r3, [r7, #4]
 803b6e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 803b6e4:	687b      	ldr	r3, [r7, #4]
 803b6e6:	699a      	ldr	r2, [r3, #24]
 803b6e8:	4b0e      	ldr	r3, [pc, #56]	; (803b724 <USB_DevInit+0x2b4>)
 803b6ea:	4313      	orrs	r3, r2
 803b6ec:	687a      	ldr	r2, [r7, #4]
 803b6ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 803b6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803b6f2:	2b00      	cmp	r3, #0
 803b6f4:	d005      	beq.n	803b702 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 803b6f6:	687b      	ldr	r3, [r7, #4]
 803b6f8:	699b      	ldr	r3, [r3, #24]
 803b6fa:	f043 0208 	orr.w	r2, r3, #8
 803b6fe:	687b      	ldr	r3, [r7, #4]
 803b700:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 803b702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803b704:	2b01      	cmp	r3, #1
 803b706:	d105      	bne.n	803b714 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 803b708:	687b      	ldr	r3, [r7, #4]
 803b70a:	699a      	ldr	r2, [r3, #24]
 803b70c:	4b06      	ldr	r3, [pc, #24]	; (803b728 <USB_DevInit+0x2b8>)
 803b70e:	4313      	orrs	r3, r2
 803b710:	687a      	ldr	r2, [r7, #4]
 803b712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 803b714:	7dfb      	ldrb	r3, [r7, #23]
}
 803b716:	4618      	mov	r0, r3
 803b718:	3718      	adds	r7, #24
 803b71a:	46bd      	mov	sp, r7
 803b71c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803b720:	b004      	add	sp, #16
 803b722:	4770      	bx	lr
 803b724:	803c3800 	.word	0x803c3800
 803b728:	40000004 	.word	0x40000004

0803b72c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 803b72c:	b480      	push	{r7}
 803b72e:	b085      	sub	sp, #20
 803b730:	af00      	add	r7, sp, #0
 803b732:	6078      	str	r0, [r7, #4]
 803b734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803b736:	2300      	movs	r3, #0
 803b738:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803b73a:	68fb      	ldr	r3, [r7, #12]
 803b73c:	3301      	adds	r3, #1
 803b73e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803b740:	68fb      	ldr	r3, [r7, #12]
 803b742:	4a13      	ldr	r2, [pc, #76]	; (803b790 <USB_FlushTxFifo+0x64>)
 803b744:	4293      	cmp	r3, r2
 803b746:	d901      	bls.n	803b74c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 803b748:	2303      	movs	r3, #3
 803b74a:	e01b      	b.n	803b784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803b74c:	687b      	ldr	r3, [r7, #4]
 803b74e:	691b      	ldr	r3, [r3, #16]
 803b750:	2b00      	cmp	r3, #0
 803b752:	daf2      	bge.n	803b73a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 803b754:	2300      	movs	r3, #0
 803b756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 803b758:	683b      	ldr	r3, [r7, #0]
 803b75a:	019b      	lsls	r3, r3, #6
 803b75c:	f043 0220 	orr.w	r2, r3, #32
 803b760:	687b      	ldr	r3, [r7, #4]
 803b762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803b764:	68fb      	ldr	r3, [r7, #12]
 803b766:	3301      	adds	r3, #1
 803b768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803b76a:	68fb      	ldr	r3, [r7, #12]
 803b76c:	4a08      	ldr	r2, [pc, #32]	; (803b790 <USB_FlushTxFifo+0x64>)
 803b76e:	4293      	cmp	r3, r2
 803b770:	d901      	bls.n	803b776 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 803b772:	2303      	movs	r3, #3
 803b774:	e006      	b.n	803b784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 803b776:	687b      	ldr	r3, [r7, #4]
 803b778:	691b      	ldr	r3, [r3, #16]
 803b77a:	f003 0320 	and.w	r3, r3, #32
 803b77e:	2b20      	cmp	r3, #32
 803b780:	d0f0      	beq.n	803b764 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 803b782:	2300      	movs	r3, #0
}
 803b784:	4618      	mov	r0, r3
 803b786:	3714      	adds	r7, #20
 803b788:	46bd      	mov	sp, r7
 803b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b78e:	4770      	bx	lr
 803b790:	00030d40 	.word	0x00030d40

0803b794 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 803b794:	b480      	push	{r7}
 803b796:	b085      	sub	sp, #20
 803b798:	af00      	add	r7, sp, #0
 803b79a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803b79c:	2300      	movs	r3, #0
 803b79e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803b7a0:	68fb      	ldr	r3, [r7, #12]
 803b7a2:	3301      	adds	r3, #1
 803b7a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803b7a6:	68fb      	ldr	r3, [r7, #12]
 803b7a8:	4a11      	ldr	r2, [pc, #68]	; (803b7f0 <USB_FlushRxFifo+0x5c>)
 803b7aa:	4293      	cmp	r3, r2
 803b7ac:	d901      	bls.n	803b7b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 803b7ae:	2303      	movs	r3, #3
 803b7b0:	e018      	b.n	803b7e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803b7b2:	687b      	ldr	r3, [r7, #4]
 803b7b4:	691b      	ldr	r3, [r3, #16]
 803b7b6:	2b00      	cmp	r3, #0
 803b7b8:	daf2      	bge.n	803b7a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 803b7ba:	2300      	movs	r3, #0
 803b7bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 803b7be:	687b      	ldr	r3, [r7, #4]
 803b7c0:	2210      	movs	r2, #16
 803b7c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803b7c4:	68fb      	ldr	r3, [r7, #12]
 803b7c6:	3301      	adds	r3, #1
 803b7c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803b7ca:	68fb      	ldr	r3, [r7, #12]
 803b7cc:	4a08      	ldr	r2, [pc, #32]	; (803b7f0 <USB_FlushRxFifo+0x5c>)
 803b7ce:	4293      	cmp	r3, r2
 803b7d0:	d901      	bls.n	803b7d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 803b7d2:	2303      	movs	r3, #3
 803b7d4:	e006      	b.n	803b7e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 803b7d6:	687b      	ldr	r3, [r7, #4]
 803b7d8:	691b      	ldr	r3, [r3, #16]
 803b7da:	f003 0310 	and.w	r3, r3, #16
 803b7de:	2b10      	cmp	r3, #16
 803b7e0:	d0f0      	beq.n	803b7c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 803b7e2:	2300      	movs	r3, #0
}
 803b7e4:	4618      	mov	r0, r3
 803b7e6:	3714      	adds	r7, #20
 803b7e8:	46bd      	mov	sp, r7
 803b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b7ee:	4770      	bx	lr
 803b7f0:	00030d40 	.word	0x00030d40

0803b7f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 803b7f4:	b480      	push	{r7}
 803b7f6:	b085      	sub	sp, #20
 803b7f8:	af00      	add	r7, sp, #0
 803b7fa:	6078      	str	r0, [r7, #4]
 803b7fc:	460b      	mov	r3, r1
 803b7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b800:	687b      	ldr	r3, [r7, #4]
 803b802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 803b804:	68fb      	ldr	r3, [r7, #12]
 803b806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b80a:	681a      	ldr	r2, [r3, #0]
 803b80c:	78fb      	ldrb	r3, [r7, #3]
 803b80e:	68f9      	ldr	r1, [r7, #12]
 803b810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b814:	4313      	orrs	r3, r2
 803b816:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 803b818:	2300      	movs	r3, #0
}
 803b81a:	4618      	mov	r0, r3
 803b81c:	3714      	adds	r7, #20
 803b81e:	46bd      	mov	sp, r7
 803b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b824:	4770      	bx	lr

0803b826 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 803b826:	b480      	push	{r7}
 803b828:	b087      	sub	sp, #28
 803b82a:	af00      	add	r7, sp, #0
 803b82c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b82e:	687b      	ldr	r3, [r7, #4]
 803b830:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 803b832:	693b      	ldr	r3, [r7, #16]
 803b834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b838:	689b      	ldr	r3, [r3, #8]
 803b83a:	f003 0306 	and.w	r3, r3, #6
 803b83e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 803b840:	68fb      	ldr	r3, [r7, #12]
 803b842:	2b00      	cmp	r3, #0
 803b844:	d102      	bne.n	803b84c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 803b846:	2300      	movs	r3, #0
 803b848:	75fb      	strb	r3, [r7, #23]
 803b84a:	e00a      	b.n	803b862 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 803b84c:	68fb      	ldr	r3, [r7, #12]
 803b84e:	2b02      	cmp	r3, #2
 803b850:	d002      	beq.n	803b858 <USB_GetDevSpeed+0x32>
 803b852:	68fb      	ldr	r3, [r7, #12]
 803b854:	2b06      	cmp	r3, #6
 803b856:	d102      	bne.n	803b85e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 803b858:	2302      	movs	r3, #2
 803b85a:	75fb      	strb	r3, [r7, #23]
 803b85c:	e001      	b.n	803b862 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 803b85e:	230f      	movs	r3, #15
 803b860:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 803b862:	7dfb      	ldrb	r3, [r7, #23]
}
 803b864:	4618      	mov	r0, r3
 803b866:	371c      	adds	r7, #28
 803b868:	46bd      	mov	sp, r7
 803b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b86e:	4770      	bx	lr

0803b870 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803b870:	b480      	push	{r7}
 803b872:	b085      	sub	sp, #20
 803b874:	af00      	add	r7, sp, #0
 803b876:	6078      	str	r0, [r7, #4]
 803b878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b87a:	687b      	ldr	r3, [r7, #4]
 803b87c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803b87e:	683b      	ldr	r3, [r7, #0]
 803b880:	781b      	ldrb	r3, [r3, #0]
 803b882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803b884:	683b      	ldr	r3, [r7, #0]
 803b886:	785b      	ldrb	r3, [r3, #1]
 803b888:	2b01      	cmp	r3, #1
 803b88a:	d139      	bne.n	803b900 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 803b88c:	68fb      	ldr	r3, [r7, #12]
 803b88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b892:	69da      	ldr	r2, [r3, #28]
 803b894:	683b      	ldr	r3, [r7, #0]
 803b896:	781b      	ldrb	r3, [r3, #0]
 803b898:	f003 030f 	and.w	r3, r3, #15
 803b89c:	2101      	movs	r1, #1
 803b89e:	fa01 f303 	lsl.w	r3, r1, r3
 803b8a2:	b29b      	uxth	r3, r3
 803b8a4:	68f9      	ldr	r1, [r7, #12]
 803b8a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b8aa:	4313      	orrs	r3, r2
 803b8ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 803b8ae:	68bb      	ldr	r3, [r7, #8]
 803b8b0:	015a      	lsls	r2, r3, #5
 803b8b2:	68fb      	ldr	r3, [r7, #12]
 803b8b4:	4413      	add	r3, r2
 803b8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b8ba:	681b      	ldr	r3, [r3, #0]
 803b8bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803b8c0:	2b00      	cmp	r3, #0
 803b8c2:	d153      	bne.n	803b96c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803b8c4:	68bb      	ldr	r3, [r7, #8]
 803b8c6:	015a      	lsls	r2, r3, #5
 803b8c8:	68fb      	ldr	r3, [r7, #12]
 803b8ca:	4413      	add	r3, r2
 803b8cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b8d0:	681a      	ldr	r2, [r3, #0]
 803b8d2:	683b      	ldr	r3, [r7, #0]
 803b8d4:	68db      	ldr	r3, [r3, #12]
 803b8d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803b8da:	683b      	ldr	r3, [r7, #0]
 803b8dc:	791b      	ldrb	r3, [r3, #4]
 803b8de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803b8e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803b8e2:	68bb      	ldr	r3, [r7, #8]
 803b8e4:	059b      	lsls	r3, r3, #22
 803b8e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803b8e8:	431a      	orrs	r2, r3
 803b8ea:	68bb      	ldr	r3, [r7, #8]
 803b8ec:	0159      	lsls	r1, r3, #5
 803b8ee:	68fb      	ldr	r3, [r7, #12]
 803b8f0:	440b      	add	r3, r1
 803b8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b8f6:	4619      	mov	r1, r3
 803b8f8:	4b20      	ldr	r3, [pc, #128]	; (803b97c <USB_ActivateEndpoint+0x10c>)
 803b8fa:	4313      	orrs	r3, r2
 803b8fc:	600b      	str	r3, [r1, #0]
 803b8fe:	e035      	b.n	803b96c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 803b900:	68fb      	ldr	r3, [r7, #12]
 803b902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b906:	69da      	ldr	r2, [r3, #28]
 803b908:	683b      	ldr	r3, [r7, #0]
 803b90a:	781b      	ldrb	r3, [r3, #0]
 803b90c:	f003 030f 	and.w	r3, r3, #15
 803b910:	2101      	movs	r1, #1
 803b912:	fa01 f303 	lsl.w	r3, r1, r3
 803b916:	041b      	lsls	r3, r3, #16
 803b918:	68f9      	ldr	r1, [r7, #12]
 803b91a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803b91e:	4313      	orrs	r3, r2
 803b920:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 803b922:	68bb      	ldr	r3, [r7, #8]
 803b924:	015a      	lsls	r2, r3, #5
 803b926:	68fb      	ldr	r3, [r7, #12]
 803b928:	4413      	add	r3, r2
 803b92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b92e:	681b      	ldr	r3, [r3, #0]
 803b930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803b934:	2b00      	cmp	r3, #0
 803b936:	d119      	bne.n	803b96c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 803b938:	68bb      	ldr	r3, [r7, #8]
 803b93a:	015a      	lsls	r2, r3, #5
 803b93c:	68fb      	ldr	r3, [r7, #12]
 803b93e:	4413      	add	r3, r2
 803b940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b944:	681a      	ldr	r2, [r3, #0]
 803b946:	683b      	ldr	r3, [r7, #0]
 803b948:	68db      	ldr	r3, [r3, #12]
 803b94a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 803b94e:	683b      	ldr	r3, [r7, #0]
 803b950:	791b      	ldrb	r3, [r3, #4]
 803b952:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 803b954:	430b      	orrs	r3, r1
 803b956:	431a      	orrs	r2, r3
 803b958:	68bb      	ldr	r3, [r7, #8]
 803b95a:	0159      	lsls	r1, r3, #5
 803b95c:	68fb      	ldr	r3, [r7, #12]
 803b95e:	440b      	add	r3, r1
 803b960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803b964:	4619      	mov	r1, r3
 803b966:	4b05      	ldr	r3, [pc, #20]	; (803b97c <USB_ActivateEndpoint+0x10c>)
 803b968:	4313      	orrs	r3, r2
 803b96a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 803b96c:	2300      	movs	r3, #0
}
 803b96e:	4618      	mov	r0, r3
 803b970:	3714      	adds	r7, #20
 803b972:	46bd      	mov	sp, r7
 803b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b978:	4770      	bx	lr
 803b97a:	bf00      	nop
 803b97c:	10008000 	.word	0x10008000

0803b980 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803b980:	b480      	push	{r7}
 803b982:	b085      	sub	sp, #20
 803b984:	af00      	add	r7, sp, #0
 803b986:	6078      	str	r0, [r7, #4]
 803b988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803b98a:	687b      	ldr	r3, [r7, #4]
 803b98c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803b98e:	683b      	ldr	r3, [r7, #0]
 803b990:	781b      	ldrb	r3, [r3, #0]
 803b992:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 803b994:	683b      	ldr	r3, [r7, #0]
 803b996:	785b      	ldrb	r3, [r3, #1]
 803b998:	2b01      	cmp	r3, #1
 803b99a:	d161      	bne.n	803ba60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803b99c:	68bb      	ldr	r3, [r7, #8]
 803b99e:	015a      	lsls	r2, r3, #5
 803b9a0:	68fb      	ldr	r3, [r7, #12]
 803b9a2:	4413      	add	r3, r2
 803b9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b9a8:	681b      	ldr	r3, [r3, #0]
 803b9aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803b9ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803b9b2:	d11f      	bne.n	803b9f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 803b9b4:	68bb      	ldr	r3, [r7, #8]
 803b9b6:	015a      	lsls	r2, r3, #5
 803b9b8:	68fb      	ldr	r3, [r7, #12]
 803b9ba:	4413      	add	r3, r2
 803b9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b9c0:	681b      	ldr	r3, [r3, #0]
 803b9c2:	68ba      	ldr	r2, [r7, #8]
 803b9c4:	0151      	lsls	r1, r2, #5
 803b9c6:	68fa      	ldr	r2, [r7, #12]
 803b9c8:	440a      	add	r2, r1
 803b9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b9ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803b9d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 803b9d4:	68bb      	ldr	r3, [r7, #8]
 803b9d6:	015a      	lsls	r2, r3, #5
 803b9d8:	68fb      	ldr	r3, [r7, #12]
 803b9da:	4413      	add	r3, r2
 803b9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803b9e0:	681b      	ldr	r3, [r3, #0]
 803b9e2:	68ba      	ldr	r2, [r7, #8]
 803b9e4:	0151      	lsls	r1, r2, #5
 803b9e6:	68fa      	ldr	r2, [r7, #12]
 803b9e8:	440a      	add	r2, r1
 803b9ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803b9ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803b9f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803b9f4:	68fb      	ldr	r3, [r7, #12]
 803b9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803b9fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803b9fc:	683b      	ldr	r3, [r7, #0]
 803b9fe:	781b      	ldrb	r3, [r3, #0]
 803ba00:	f003 030f 	and.w	r3, r3, #15
 803ba04:	2101      	movs	r1, #1
 803ba06:	fa01 f303 	lsl.w	r3, r1, r3
 803ba0a:	b29b      	uxth	r3, r3
 803ba0c:	43db      	mvns	r3, r3
 803ba0e:	68f9      	ldr	r1, [r7, #12]
 803ba10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803ba14:	4013      	ands	r3, r2
 803ba16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803ba18:	68fb      	ldr	r3, [r7, #12]
 803ba1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803ba1e:	69da      	ldr	r2, [r3, #28]
 803ba20:	683b      	ldr	r3, [r7, #0]
 803ba22:	781b      	ldrb	r3, [r3, #0]
 803ba24:	f003 030f 	and.w	r3, r3, #15
 803ba28:	2101      	movs	r1, #1
 803ba2a:	fa01 f303 	lsl.w	r3, r1, r3
 803ba2e:	b29b      	uxth	r3, r3
 803ba30:	43db      	mvns	r3, r3
 803ba32:	68f9      	ldr	r1, [r7, #12]
 803ba34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803ba38:	4013      	ands	r3, r2
 803ba3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 803ba3c:	68bb      	ldr	r3, [r7, #8]
 803ba3e:	015a      	lsls	r2, r3, #5
 803ba40:	68fb      	ldr	r3, [r7, #12]
 803ba42:	4413      	add	r3, r2
 803ba44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ba48:	681a      	ldr	r2, [r3, #0]
 803ba4a:	68bb      	ldr	r3, [r7, #8]
 803ba4c:	0159      	lsls	r1, r3, #5
 803ba4e:	68fb      	ldr	r3, [r7, #12]
 803ba50:	440b      	add	r3, r1
 803ba52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803ba56:	4619      	mov	r1, r3
 803ba58:	4b35      	ldr	r3, [pc, #212]	; (803bb30 <USB_DeactivateEndpoint+0x1b0>)
 803ba5a:	4013      	ands	r3, r2
 803ba5c:	600b      	str	r3, [r1, #0]
 803ba5e:	e060      	b.n	803bb22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803ba60:	68bb      	ldr	r3, [r7, #8]
 803ba62:	015a      	lsls	r2, r3, #5
 803ba64:	68fb      	ldr	r3, [r7, #12]
 803ba66:	4413      	add	r3, r2
 803ba68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803ba6c:	681b      	ldr	r3, [r3, #0]
 803ba6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803ba72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803ba76:	d11f      	bne.n	803bab8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 803ba78:	68bb      	ldr	r3, [r7, #8]
 803ba7a:	015a      	lsls	r2, r3, #5
 803ba7c:	68fb      	ldr	r3, [r7, #12]
 803ba7e:	4413      	add	r3, r2
 803ba80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803ba84:	681b      	ldr	r3, [r3, #0]
 803ba86:	68ba      	ldr	r2, [r7, #8]
 803ba88:	0151      	lsls	r1, r2, #5
 803ba8a:	68fa      	ldr	r2, [r7, #12]
 803ba8c:	440a      	add	r2, r1
 803ba8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803ba92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803ba96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 803ba98:	68bb      	ldr	r3, [r7, #8]
 803ba9a:	015a      	lsls	r2, r3, #5
 803ba9c:	68fb      	ldr	r3, [r7, #12]
 803ba9e:	4413      	add	r3, r2
 803baa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803baa4:	681b      	ldr	r3, [r3, #0]
 803baa6:	68ba      	ldr	r2, [r7, #8]
 803baa8:	0151      	lsls	r1, r2, #5
 803baaa:	68fa      	ldr	r2, [r7, #12]
 803baac:	440a      	add	r2, r1
 803baae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803bab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 803bab8:	68fb      	ldr	r3, [r7, #12]
 803baba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803babe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 803bac0:	683b      	ldr	r3, [r7, #0]
 803bac2:	781b      	ldrb	r3, [r3, #0]
 803bac4:	f003 030f 	and.w	r3, r3, #15
 803bac8:	2101      	movs	r1, #1
 803baca:	fa01 f303 	lsl.w	r3, r1, r3
 803bace:	041b      	lsls	r3, r3, #16
 803bad0:	43db      	mvns	r3, r3
 803bad2:	68f9      	ldr	r1, [r7, #12]
 803bad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803bad8:	4013      	ands	r3, r2
 803bada:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 803badc:	68fb      	ldr	r3, [r7, #12]
 803bade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803bae2:	69da      	ldr	r2, [r3, #28]
 803bae4:	683b      	ldr	r3, [r7, #0]
 803bae6:	781b      	ldrb	r3, [r3, #0]
 803bae8:	f003 030f 	and.w	r3, r3, #15
 803baec:	2101      	movs	r1, #1
 803baee:	fa01 f303 	lsl.w	r3, r1, r3
 803baf2:	041b      	lsls	r3, r3, #16
 803baf4:	43db      	mvns	r3, r3
 803baf6:	68f9      	ldr	r1, [r7, #12]
 803baf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803bafc:	4013      	ands	r3, r2
 803bafe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 803bb00:	68bb      	ldr	r3, [r7, #8]
 803bb02:	015a      	lsls	r2, r3, #5
 803bb04:	68fb      	ldr	r3, [r7, #12]
 803bb06:	4413      	add	r3, r2
 803bb08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bb0c:	681a      	ldr	r2, [r3, #0]
 803bb0e:	68bb      	ldr	r3, [r7, #8]
 803bb10:	0159      	lsls	r1, r3, #5
 803bb12:	68fb      	ldr	r3, [r7, #12]
 803bb14:	440b      	add	r3, r1
 803bb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bb1a:	4619      	mov	r1, r3
 803bb1c:	4b05      	ldr	r3, [pc, #20]	; (803bb34 <USB_DeactivateEndpoint+0x1b4>)
 803bb1e:	4013      	ands	r3, r2
 803bb20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 803bb22:	2300      	movs	r3, #0
}
 803bb24:	4618      	mov	r0, r3
 803bb26:	3714      	adds	r7, #20
 803bb28:	46bd      	mov	sp, r7
 803bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bb2e:	4770      	bx	lr
 803bb30:	ec337800 	.word	0xec337800
 803bb34:	eff37800 	.word	0xeff37800

0803bb38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 803bb38:	b580      	push	{r7, lr}
 803bb3a:	b08a      	sub	sp, #40	; 0x28
 803bb3c:	af02      	add	r7, sp, #8
 803bb3e:	60f8      	str	r0, [r7, #12]
 803bb40:	60b9      	str	r1, [r7, #8]
 803bb42:	4613      	mov	r3, r2
 803bb44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803bb46:	68fb      	ldr	r3, [r7, #12]
 803bb48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 803bb4a:	68bb      	ldr	r3, [r7, #8]
 803bb4c:	781b      	ldrb	r3, [r3, #0]
 803bb4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 803bb50:	68bb      	ldr	r3, [r7, #8]
 803bb52:	785b      	ldrb	r3, [r3, #1]
 803bb54:	2b01      	cmp	r3, #1
 803bb56:	f040 8163 	bne.w	803be20 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 803bb5a:	68bb      	ldr	r3, [r7, #8]
 803bb5c:	699b      	ldr	r3, [r3, #24]
 803bb5e:	2b00      	cmp	r3, #0
 803bb60:	d132      	bne.n	803bbc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803bb62:	69bb      	ldr	r3, [r7, #24]
 803bb64:	015a      	lsls	r2, r3, #5
 803bb66:	69fb      	ldr	r3, [r7, #28]
 803bb68:	4413      	add	r3, r2
 803bb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bb6e:	691a      	ldr	r2, [r3, #16]
 803bb70:	69bb      	ldr	r3, [r7, #24]
 803bb72:	0159      	lsls	r1, r3, #5
 803bb74:	69fb      	ldr	r3, [r7, #28]
 803bb76:	440b      	add	r3, r1
 803bb78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bb7c:	4619      	mov	r1, r3
 803bb7e:	4ba5      	ldr	r3, [pc, #660]	; (803be14 <USB_EPStartXfer+0x2dc>)
 803bb80:	4013      	ands	r3, r2
 803bb82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803bb84:	69bb      	ldr	r3, [r7, #24]
 803bb86:	015a      	lsls	r2, r3, #5
 803bb88:	69fb      	ldr	r3, [r7, #28]
 803bb8a:	4413      	add	r3, r2
 803bb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bb90:	691b      	ldr	r3, [r3, #16]
 803bb92:	69ba      	ldr	r2, [r7, #24]
 803bb94:	0151      	lsls	r1, r2, #5
 803bb96:	69fa      	ldr	r2, [r7, #28]
 803bb98:	440a      	add	r2, r1
 803bb9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bb9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803bba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803bba4:	69bb      	ldr	r3, [r7, #24]
 803bba6:	015a      	lsls	r2, r3, #5
 803bba8:	69fb      	ldr	r3, [r7, #28]
 803bbaa:	4413      	add	r3, r2
 803bbac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbb0:	691a      	ldr	r2, [r3, #16]
 803bbb2:	69bb      	ldr	r3, [r7, #24]
 803bbb4:	0159      	lsls	r1, r3, #5
 803bbb6:	69fb      	ldr	r3, [r7, #28]
 803bbb8:	440b      	add	r3, r1
 803bbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbbe:	4619      	mov	r1, r3
 803bbc0:	4b95      	ldr	r3, [pc, #596]	; (803be18 <USB_EPStartXfer+0x2e0>)
 803bbc2:	4013      	ands	r3, r2
 803bbc4:	610b      	str	r3, [r1, #16]
 803bbc6:	e074      	b.n	803bcb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803bbc8:	69bb      	ldr	r3, [r7, #24]
 803bbca:	015a      	lsls	r2, r3, #5
 803bbcc:	69fb      	ldr	r3, [r7, #28]
 803bbce:	4413      	add	r3, r2
 803bbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbd4:	691a      	ldr	r2, [r3, #16]
 803bbd6:	69bb      	ldr	r3, [r7, #24]
 803bbd8:	0159      	lsls	r1, r3, #5
 803bbda:	69fb      	ldr	r3, [r7, #28]
 803bbdc:	440b      	add	r3, r1
 803bbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbe2:	4619      	mov	r1, r3
 803bbe4:	4b8c      	ldr	r3, [pc, #560]	; (803be18 <USB_EPStartXfer+0x2e0>)
 803bbe6:	4013      	ands	r3, r2
 803bbe8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803bbea:	69bb      	ldr	r3, [r7, #24]
 803bbec:	015a      	lsls	r2, r3, #5
 803bbee:	69fb      	ldr	r3, [r7, #28]
 803bbf0:	4413      	add	r3, r2
 803bbf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bbf6:	691a      	ldr	r2, [r3, #16]
 803bbf8:	69bb      	ldr	r3, [r7, #24]
 803bbfa:	0159      	lsls	r1, r3, #5
 803bbfc:	69fb      	ldr	r3, [r7, #28]
 803bbfe:	440b      	add	r3, r1
 803bc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc04:	4619      	mov	r1, r3
 803bc06:	4b83      	ldr	r3, [pc, #524]	; (803be14 <USB_EPStartXfer+0x2dc>)
 803bc08:	4013      	ands	r3, r2
 803bc0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 803bc0c:	69bb      	ldr	r3, [r7, #24]
 803bc0e:	015a      	lsls	r2, r3, #5
 803bc10:	69fb      	ldr	r3, [r7, #28]
 803bc12:	4413      	add	r3, r2
 803bc14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 803bc1a:	68bb      	ldr	r3, [r7, #8]
 803bc1c:	6999      	ldr	r1, [r3, #24]
 803bc1e:	68bb      	ldr	r3, [r7, #8]
 803bc20:	68db      	ldr	r3, [r3, #12]
 803bc22:	440b      	add	r3, r1
 803bc24:	1e59      	subs	r1, r3, #1
 803bc26:	68bb      	ldr	r3, [r7, #8]
 803bc28:	68db      	ldr	r3, [r3, #12]
 803bc2a:	fbb1 f3f3 	udiv	r3, r1, r3
 803bc2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 803bc30:	4b7a      	ldr	r3, [pc, #488]	; (803be1c <USB_EPStartXfer+0x2e4>)
 803bc32:	400b      	ands	r3, r1
 803bc34:	69b9      	ldr	r1, [r7, #24]
 803bc36:	0148      	lsls	r0, r1, #5
 803bc38:	69f9      	ldr	r1, [r7, #28]
 803bc3a:	4401      	add	r1, r0
 803bc3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803bc40:	4313      	orrs	r3, r2
 803bc42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803bc44:	69bb      	ldr	r3, [r7, #24]
 803bc46:	015a      	lsls	r2, r3, #5
 803bc48:	69fb      	ldr	r3, [r7, #28]
 803bc4a:	4413      	add	r3, r2
 803bc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc50:	691a      	ldr	r2, [r3, #16]
 803bc52:	68bb      	ldr	r3, [r7, #8]
 803bc54:	699b      	ldr	r3, [r3, #24]
 803bc56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803bc5a:	69b9      	ldr	r1, [r7, #24]
 803bc5c:	0148      	lsls	r0, r1, #5
 803bc5e:	69f9      	ldr	r1, [r7, #28]
 803bc60:	4401      	add	r1, r0
 803bc62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803bc66:	4313      	orrs	r3, r2
 803bc68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 803bc6a:	68bb      	ldr	r3, [r7, #8]
 803bc6c:	791b      	ldrb	r3, [r3, #4]
 803bc6e:	2b01      	cmp	r3, #1
 803bc70:	d11f      	bne.n	803bcb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 803bc72:	69bb      	ldr	r3, [r7, #24]
 803bc74:	015a      	lsls	r2, r3, #5
 803bc76:	69fb      	ldr	r3, [r7, #28]
 803bc78:	4413      	add	r3, r2
 803bc7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc7e:	691b      	ldr	r3, [r3, #16]
 803bc80:	69ba      	ldr	r2, [r7, #24]
 803bc82:	0151      	lsls	r1, r2, #5
 803bc84:	69fa      	ldr	r2, [r7, #28]
 803bc86:	440a      	add	r2, r1
 803bc88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bc8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 803bc90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 803bc92:	69bb      	ldr	r3, [r7, #24]
 803bc94:	015a      	lsls	r2, r3, #5
 803bc96:	69fb      	ldr	r3, [r7, #28]
 803bc98:	4413      	add	r3, r2
 803bc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bc9e:	691b      	ldr	r3, [r3, #16]
 803bca0:	69ba      	ldr	r2, [r7, #24]
 803bca2:	0151      	lsls	r1, r2, #5
 803bca4:	69fa      	ldr	r2, [r7, #28]
 803bca6:	440a      	add	r2, r1
 803bca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bcac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803bcb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 803bcb2:	79fb      	ldrb	r3, [r7, #7]
 803bcb4:	2b01      	cmp	r3, #1
 803bcb6:	d14b      	bne.n	803bd50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 803bcb8:	68bb      	ldr	r3, [r7, #8]
 803bcba:	695b      	ldr	r3, [r3, #20]
 803bcbc:	2b00      	cmp	r3, #0
 803bcbe:	d009      	beq.n	803bcd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 803bcc0:	69bb      	ldr	r3, [r7, #24]
 803bcc2:	015a      	lsls	r2, r3, #5
 803bcc4:	69fb      	ldr	r3, [r7, #28]
 803bcc6:	4413      	add	r3, r2
 803bcc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bccc:	461a      	mov	r2, r3
 803bcce:	68bb      	ldr	r3, [r7, #8]
 803bcd0:	695b      	ldr	r3, [r3, #20]
 803bcd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 803bcd4:	68bb      	ldr	r3, [r7, #8]
 803bcd6:	791b      	ldrb	r3, [r3, #4]
 803bcd8:	2b01      	cmp	r3, #1
 803bcda:	d128      	bne.n	803bd2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803bcdc:	69fb      	ldr	r3, [r7, #28]
 803bcde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803bce2:	689b      	ldr	r3, [r3, #8]
 803bce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803bce8:	2b00      	cmp	r3, #0
 803bcea:	d110      	bne.n	803bd0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803bcec:	69bb      	ldr	r3, [r7, #24]
 803bcee:	015a      	lsls	r2, r3, #5
 803bcf0:	69fb      	ldr	r3, [r7, #28]
 803bcf2:	4413      	add	r3, r2
 803bcf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bcf8:	681b      	ldr	r3, [r3, #0]
 803bcfa:	69ba      	ldr	r2, [r7, #24]
 803bcfc:	0151      	lsls	r1, r2, #5
 803bcfe:	69fa      	ldr	r2, [r7, #28]
 803bd00:	440a      	add	r2, r1
 803bd02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bd06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803bd0a:	6013      	str	r3, [r2, #0]
 803bd0c:	e00f      	b.n	803bd2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803bd0e:	69bb      	ldr	r3, [r7, #24]
 803bd10:	015a      	lsls	r2, r3, #5
 803bd12:	69fb      	ldr	r3, [r7, #28]
 803bd14:	4413      	add	r3, r2
 803bd16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bd1a:	681b      	ldr	r3, [r3, #0]
 803bd1c:	69ba      	ldr	r2, [r7, #24]
 803bd1e:	0151      	lsls	r1, r2, #5
 803bd20:	69fa      	ldr	r2, [r7, #28]
 803bd22:	440a      	add	r2, r1
 803bd24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bd28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803bd2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803bd2e:	69bb      	ldr	r3, [r7, #24]
 803bd30:	015a      	lsls	r2, r3, #5
 803bd32:	69fb      	ldr	r3, [r7, #28]
 803bd34:	4413      	add	r3, r2
 803bd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bd3a:	681b      	ldr	r3, [r3, #0]
 803bd3c:	69ba      	ldr	r2, [r7, #24]
 803bd3e:	0151      	lsls	r1, r2, #5
 803bd40:	69fa      	ldr	r2, [r7, #28]
 803bd42:	440a      	add	r2, r1
 803bd44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bd48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803bd4c:	6013      	str	r3, [r2, #0]
 803bd4e:	e137      	b.n	803bfc0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803bd50:	69bb      	ldr	r3, [r7, #24]
 803bd52:	015a      	lsls	r2, r3, #5
 803bd54:	69fb      	ldr	r3, [r7, #28]
 803bd56:	4413      	add	r3, r2
 803bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bd5c:	681b      	ldr	r3, [r3, #0]
 803bd5e:	69ba      	ldr	r2, [r7, #24]
 803bd60:	0151      	lsls	r1, r2, #5
 803bd62:	69fa      	ldr	r2, [r7, #28]
 803bd64:	440a      	add	r2, r1
 803bd66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bd6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803bd6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 803bd70:	68bb      	ldr	r3, [r7, #8]
 803bd72:	791b      	ldrb	r3, [r3, #4]
 803bd74:	2b01      	cmp	r3, #1
 803bd76:	d015      	beq.n	803bda4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 803bd78:	68bb      	ldr	r3, [r7, #8]
 803bd7a:	699b      	ldr	r3, [r3, #24]
 803bd7c:	2b00      	cmp	r3, #0
 803bd7e:	f000 811f 	beq.w	803bfc0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803bd82:	69fb      	ldr	r3, [r7, #28]
 803bd84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803bd88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803bd8a:	68bb      	ldr	r3, [r7, #8]
 803bd8c:	781b      	ldrb	r3, [r3, #0]
 803bd8e:	f003 030f 	and.w	r3, r3, #15
 803bd92:	2101      	movs	r1, #1
 803bd94:	fa01 f303 	lsl.w	r3, r1, r3
 803bd98:	69f9      	ldr	r1, [r7, #28]
 803bd9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803bd9e:	4313      	orrs	r3, r2
 803bda0:	634b      	str	r3, [r1, #52]	; 0x34
 803bda2:	e10d      	b.n	803bfc0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803bda4:	69fb      	ldr	r3, [r7, #28]
 803bda6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803bdaa:	689b      	ldr	r3, [r3, #8]
 803bdac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803bdb0:	2b00      	cmp	r3, #0
 803bdb2:	d110      	bne.n	803bdd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803bdb4:	69bb      	ldr	r3, [r7, #24]
 803bdb6:	015a      	lsls	r2, r3, #5
 803bdb8:	69fb      	ldr	r3, [r7, #28]
 803bdba:	4413      	add	r3, r2
 803bdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bdc0:	681b      	ldr	r3, [r3, #0]
 803bdc2:	69ba      	ldr	r2, [r7, #24]
 803bdc4:	0151      	lsls	r1, r2, #5
 803bdc6:	69fa      	ldr	r2, [r7, #28]
 803bdc8:	440a      	add	r2, r1
 803bdca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bdce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803bdd2:	6013      	str	r3, [r2, #0]
 803bdd4:	e00f      	b.n	803bdf6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803bdd6:	69bb      	ldr	r3, [r7, #24]
 803bdd8:	015a      	lsls	r2, r3, #5
 803bdda:	69fb      	ldr	r3, [r7, #28]
 803bddc:	4413      	add	r3, r2
 803bdde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803bde2:	681b      	ldr	r3, [r3, #0]
 803bde4:	69ba      	ldr	r2, [r7, #24]
 803bde6:	0151      	lsls	r1, r2, #5
 803bde8:	69fa      	ldr	r2, [r7, #28]
 803bdea:	440a      	add	r2, r1
 803bdec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803bdf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803bdf4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 803bdf6:	68bb      	ldr	r3, [r7, #8]
 803bdf8:	6919      	ldr	r1, [r3, #16]
 803bdfa:	68bb      	ldr	r3, [r7, #8]
 803bdfc:	781a      	ldrb	r2, [r3, #0]
 803bdfe:	68bb      	ldr	r3, [r7, #8]
 803be00:	699b      	ldr	r3, [r3, #24]
 803be02:	b298      	uxth	r0, r3
 803be04:	79fb      	ldrb	r3, [r7, #7]
 803be06:	9300      	str	r3, [sp, #0]
 803be08:	4603      	mov	r3, r0
 803be0a:	68f8      	ldr	r0, [r7, #12]
 803be0c:	f000 faea 	bl	803c3e4 <USB_WritePacket>
 803be10:	e0d6      	b.n	803bfc0 <USB_EPStartXfer+0x488>
 803be12:	bf00      	nop
 803be14:	e007ffff 	.word	0xe007ffff
 803be18:	fff80000 	.word	0xfff80000
 803be1c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 803be20:	69bb      	ldr	r3, [r7, #24]
 803be22:	015a      	lsls	r2, r3, #5
 803be24:	69fb      	ldr	r3, [r7, #28]
 803be26:	4413      	add	r3, r2
 803be28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803be2c:	691a      	ldr	r2, [r3, #16]
 803be2e:	69bb      	ldr	r3, [r7, #24]
 803be30:	0159      	lsls	r1, r3, #5
 803be32:	69fb      	ldr	r3, [r7, #28]
 803be34:	440b      	add	r3, r1
 803be36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803be3a:	4619      	mov	r1, r3
 803be3c:	4b63      	ldr	r3, [pc, #396]	; (803bfcc <USB_EPStartXfer+0x494>)
 803be3e:	4013      	ands	r3, r2
 803be40:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803be42:	69bb      	ldr	r3, [r7, #24]
 803be44:	015a      	lsls	r2, r3, #5
 803be46:	69fb      	ldr	r3, [r7, #28]
 803be48:	4413      	add	r3, r2
 803be4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803be4e:	691a      	ldr	r2, [r3, #16]
 803be50:	69bb      	ldr	r3, [r7, #24]
 803be52:	0159      	lsls	r1, r3, #5
 803be54:	69fb      	ldr	r3, [r7, #28]
 803be56:	440b      	add	r3, r1
 803be58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803be5c:	4619      	mov	r1, r3
 803be5e:	4b5c      	ldr	r3, [pc, #368]	; (803bfd0 <USB_EPStartXfer+0x498>)
 803be60:	4013      	ands	r3, r2
 803be62:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 803be64:	68bb      	ldr	r3, [r7, #8]
 803be66:	699b      	ldr	r3, [r3, #24]
 803be68:	2b00      	cmp	r3, #0
 803be6a:	d123      	bne.n	803beb4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 803be6c:	69bb      	ldr	r3, [r7, #24]
 803be6e:	015a      	lsls	r2, r3, #5
 803be70:	69fb      	ldr	r3, [r7, #28]
 803be72:	4413      	add	r3, r2
 803be74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803be78:	691a      	ldr	r2, [r3, #16]
 803be7a:	68bb      	ldr	r3, [r7, #8]
 803be7c:	68db      	ldr	r3, [r3, #12]
 803be7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803be82:	69b9      	ldr	r1, [r7, #24]
 803be84:	0148      	lsls	r0, r1, #5
 803be86:	69f9      	ldr	r1, [r7, #28]
 803be88:	4401      	add	r1, r0
 803be8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803be8e:	4313      	orrs	r3, r2
 803be90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803be92:	69bb      	ldr	r3, [r7, #24]
 803be94:	015a      	lsls	r2, r3, #5
 803be96:	69fb      	ldr	r3, [r7, #28]
 803be98:	4413      	add	r3, r2
 803be9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803be9e:	691b      	ldr	r3, [r3, #16]
 803bea0:	69ba      	ldr	r2, [r7, #24]
 803bea2:	0151      	lsls	r1, r2, #5
 803bea4:	69fa      	ldr	r2, [r7, #28]
 803bea6:	440a      	add	r2, r1
 803bea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803beac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803beb0:	6113      	str	r3, [r2, #16]
 803beb2:	e037      	b.n	803bf24 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 803beb4:	68bb      	ldr	r3, [r7, #8]
 803beb6:	699a      	ldr	r2, [r3, #24]
 803beb8:	68bb      	ldr	r3, [r7, #8]
 803beba:	68db      	ldr	r3, [r3, #12]
 803bebc:	4413      	add	r3, r2
 803bebe:	1e5a      	subs	r2, r3, #1
 803bec0:	68bb      	ldr	r3, [r7, #8]
 803bec2:	68db      	ldr	r3, [r3, #12]
 803bec4:	fbb2 f3f3 	udiv	r3, r2, r3
 803bec8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 803beca:	68bb      	ldr	r3, [r7, #8]
 803becc:	68db      	ldr	r3, [r3, #12]
 803bece:	8afa      	ldrh	r2, [r7, #22]
 803bed0:	fb03 f202 	mul.w	r2, r3, r2
 803bed4:	68bb      	ldr	r3, [r7, #8]
 803bed6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 803bed8:	69bb      	ldr	r3, [r7, #24]
 803beda:	015a      	lsls	r2, r3, #5
 803bedc:	69fb      	ldr	r3, [r7, #28]
 803bede:	4413      	add	r3, r2
 803bee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bee4:	691a      	ldr	r2, [r3, #16]
 803bee6:	8afb      	ldrh	r3, [r7, #22]
 803bee8:	04d9      	lsls	r1, r3, #19
 803beea:	4b3a      	ldr	r3, [pc, #232]	; (803bfd4 <USB_EPStartXfer+0x49c>)
 803beec:	400b      	ands	r3, r1
 803beee:	69b9      	ldr	r1, [r7, #24]
 803bef0:	0148      	lsls	r0, r1, #5
 803bef2:	69f9      	ldr	r1, [r7, #28]
 803bef4:	4401      	add	r1, r0
 803bef6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803befa:	4313      	orrs	r3, r2
 803befc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 803befe:	69bb      	ldr	r3, [r7, #24]
 803bf00:	015a      	lsls	r2, r3, #5
 803bf02:	69fb      	ldr	r3, [r7, #28]
 803bf04:	4413      	add	r3, r2
 803bf06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bf0a:	691a      	ldr	r2, [r3, #16]
 803bf0c:	68bb      	ldr	r3, [r7, #8]
 803bf0e:	69db      	ldr	r3, [r3, #28]
 803bf10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803bf14:	69b9      	ldr	r1, [r7, #24]
 803bf16:	0148      	lsls	r0, r1, #5
 803bf18:	69f9      	ldr	r1, [r7, #28]
 803bf1a:	4401      	add	r1, r0
 803bf1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803bf20:	4313      	orrs	r3, r2
 803bf22:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 803bf24:	79fb      	ldrb	r3, [r7, #7]
 803bf26:	2b01      	cmp	r3, #1
 803bf28:	d10d      	bne.n	803bf46 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 803bf2a:	68bb      	ldr	r3, [r7, #8]
 803bf2c:	691b      	ldr	r3, [r3, #16]
 803bf2e:	2b00      	cmp	r3, #0
 803bf30:	d009      	beq.n	803bf46 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 803bf32:	68bb      	ldr	r3, [r7, #8]
 803bf34:	6919      	ldr	r1, [r3, #16]
 803bf36:	69bb      	ldr	r3, [r7, #24]
 803bf38:	015a      	lsls	r2, r3, #5
 803bf3a:	69fb      	ldr	r3, [r7, #28]
 803bf3c:	4413      	add	r3, r2
 803bf3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bf42:	460a      	mov	r2, r1
 803bf44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 803bf46:	68bb      	ldr	r3, [r7, #8]
 803bf48:	791b      	ldrb	r3, [r3, #4]
 803bf4a:	2b01      	cmp	r3, #1
 803bf4c:	d128      	bne.n	803bfa0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803bf4e:	69fb      	ldr	r3, [r7, #28]
 803bf50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803bf54:	689b      	ldr	r3, [r3, #8]
 803bf56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803bf5a:	2b00      	cmp	r3, #0
 803bf5c:	d110      	bne.n	803bf80 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 803bf5e:	69bb      	ldr	r3, [r7, #24]
 803bf60:	015a      	lsls	r2, r3, #5
 803bf62:	69fb      	ldr	r3, [r7, #28]
 803bf64:	4413      	add	r3, r2
 803bf66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bf6a:	681b      	ldr	r3, [r3, #0]
 803bf6c:	69ba      	ldr	r2, [r7, #24]
 803bf6e:	0151      	lsls	r1, r2, #5
 803bf70:	69fa      	ldr	r2, [r7, #28]
 803bf72:	440a      	add	r2, r1
 803bf74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bf78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803bf7c:	6013      	str	r3, [r2, #0]
 803bf7e:	e00f      	b.n	803bfa0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 803bf80:	69bb      	ldr	r3, [r7, #24]
 803bf82:	015a      	lsls	r2, r3, #5
 803bf84:	69fb      	ldr	r3, [r7, #28]
 803bf86:	4413      	add	r3, r2
 803bf88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bf8c:	681b      	ldr	r3, [r3, #0]
 803bf8e:	69ba      	ldr	r2, [r7, #24]
 803bf90:	0151      	lsls	r1, r2, #5
 803bf92:	69fa      	ldr	r2, [r7, #28]
 803bf94:	440a      	add	r2, r1
 803bf96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bf9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803bf9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803bfa0:	69bb      	ldr	r3, [r7, #24]
 803bfa2:	015a      	lsls	r2, r3, #5
 803bfa4:	69fb      	ldr	r3, [r7, #28]
 803bfa6:	4413      	add	r3, r2
 803bfa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803bfac:	681b      	ldr	r3, [r3, #0]
 803bfae:	69ba      	ldr	r2, [r7, #24]
 803bfb0:	0151      	lsls	r1, r2, #5
 803bfb2:	69fa      	ldr	r2, [r7, #28]
 803bfb4:	440a      	add	r2, r1
 803bfb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803bfba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803bfbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803bfc0:	2300      	movs	r3, #0
}
 803bfc2:	4618      	mov	r0, r3
 803bfc4:	3720      	adds	r7, #32
 803bfc6:	46bd      	mov	sp, r7
 803bfc8:	bd80      	pop	{r7, pc}
 803bfca:	bf00      	nop
 803bfcc:	fff80000 	.word	0xfff80000
 803bfd0:	e007ffff 	.word	0xe007ffff
 803bfd4:	1ff80000 	.word	0x1ff80000

0803bfd8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 803bfd8:	b480      	push	{r7}
 803bfda:	b087      	sub	sp, #28
 803bfdc:	af00      	add	r7, sp, #0
 803bfde:	60f8      	str	r0, [r7, #12]
 803bfe0:	60b9      	str	r1, [r7, #8]
 803bfe2:	4613      	mov	r3, r2
 803bfe4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803bfe6:	68fb      	ldr	r3, [r7, #12]
 803bfe8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 803bfea:	68bb      	ldr	r3, [r7, #8]
 803bfec:	781b      	ldrb	r3, [r3, #0]
 803bfee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 803bff0:	68bb      	ldr	r3, [r7, #8]
 803bff2:	785b      	ldrb	r3, [r3, #1]
 803bff4:	2b01      	cmp	r3, #1
 803bff6:	f040 80ce 	bne.w	803c196 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 803bffa:	68bb      	ldr	r3, [r7, #8]
 803bffc:	699b      	ldr	r3, [r3, #24]
 803bffe:	2b00      	cmp	r3, #0
 803c000:	d132      	bne.n	803c068 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803c002:	693b      	ldr	r3, [r7, #16]
 803c004:	015a      	lsls	r2, r3, #5
 803c006:	697b      	ldr	r3, [r7, #20]
 803c008:	4413      	add	r3, r2
 803c00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c00e:	691a      	ldr	r2, [r3, #16]
 803c010:	693b      	ldr	r3, [r7, #16]
 803c012:	0159      	lsls	r1, r3, #5
 803c014:	697b      	ldr	r3, [r7, #20]
 803c016:	440b      	add	r3, r1
 803c018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c01c:	4619      	mov	r1, r3
 803c01e:	4b9a      	ldr	r3, [pc, #616]	; (803c288 <USB_EP0StartXfer+0x2b0>)
 803c020:	4013      	ands	r3, r2
 803c022:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803c024:	693b      	ldr	r3, [r7, #16]
 803c026:	015a      	lsls	r2, r3, #5
 803c028:	697b      	ldr	r3, [r7, #20]
 803c02a:	4413      	add	r3, r2
 803c02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c030:	691b      	ldr	r3, [r3, #16]
 803c032:	693a      	ldr	r2, [r7, #16]
 803c034:	0151      	lsls	r1, r2, #5
 803c036:	697a      	ldr	r2, [r7, #20]
 803c038:	440a      	add	r2, r1
 803c03a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c03e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803c042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803c044:	693b      	ldr	r3, [r7, #16]
 803c046:	015a      	lsls	r2, r3, #5
 803c048:	697b      	ldr	r3, [r7, #20]
 803c04a:	4413      	add	r3, r2
 803c04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c050:	691a      	ldr	r2, [r3, #16]
 803c052:	693b      	ldr	r3, [r7, #16]
 803c054:	0159      	lsls	r1, r3, #5
 803c056:	697b      	ldr	r3, [r7, #20]
 803c058:	440b      	add	r3, r1
 803c05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c05e:	4619      	mov	r1, r3
 803c060:	4b8a      	ldr	r3, [pc, #552]	; (803c28c <USB_EP0StartXfer+0x2b4>)
 803c062:	4013      	ands	r3, r2
 803c064:	610b      	str	r3, [r1, #16]
 803c066:	e04e      	b.n	803c106 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803c068:	693b      	ldr	r3, [r7, #16]
 803c06a:	015a      	lsls	r2, r3, #5
 803c06c:	697b      	ldr	r3, [r7, #20]
 803c06e:	4413      	add	r3, r2
 803c070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c074:	691a      	ldr	r2, [r3, #16]
 803c076:	693b      	ldr	r3, [r7, #16]
 803c078:	0159      	lsls	r1, r3, #5
 803c07a:	697b      	ldr	r3, [r7, #20]
 803c07c:	440b      	add	r3, r1
 803c07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c082:	4619      	mov	r1, r3
 803c084:	4b81      	ldr	r3, [pc, #516]	; (803c28c <USB_EP0StartXfer+0x2b4>)
 803c086:	4013      	ands	r3, r2
 803c088:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803c08a:	693b      	ldr	r3, [r7, #16]
 803c08c:	015a      	lsls	r2, r3, #5
 803c08e:	697b      	ldr	r3, [r7, #20]
 803c090:	4413      	add	r3, r2
 803c092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c096:	691a      	ldr	r2, [r3, #16]
 803c098:	693b      	ldr	r3, [r7, #16]
 803c09a:	0159      	lsls	r1, r3, #5
 803c09c:	697b      	ldr	r3, [r7, #20]
 803c09e:	440b      	add	r3, r1
 803c0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c0a4:	4619      	mov	r1, r3
 803c0a6:	4b78      	ldr	r3, [pc, #480]	; (803c288 <USB_EP0StartXfer+0x2b0>)
 803c0a8:	4013      	ands	r3, r2
 803c0aa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 803c0ac:	68bb      	ldr	r3, [r7, #8]
 803c0ae:	699a      	ldr	r2, [r3, #24]
 803c0b0:	68bb      	ldr	r3, [r7, #8]
 803c0b2:	68db      	ldr	r3, [r3, #12]
 803c0b4:	429a      	cmp	r2, r3
 803c0b6:	d903      	bls.n	803c0c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 803c0b8:	68bb      	ldr	r3, [r7, #8]
 803c0ba:	68da      	ldr	r2, [r3, #12]
 803c0bc:	68bb      	ldr	r3, [r7, #8]
 803c0be:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803c0c0:	693b      	ldr	r3, [r7, #16]
 803c0c2:	015a      	lsls	r2, r3, #5
 803c0c4:	697b      	ldr	r3, [r7, #20]
 803c0c6:	4413      	add	r3, r2
 803c0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c0cc:	691b      	ldr	r3, [r3, #16]
 803c0ce:	693a      	ldr	r2, [r7, #16]
 803c0d0:	0151      	lsls	r1, r2, #5
 803c0d2:	697a      	ldr	r2, [r7, #20]
 803c0d4:	440a      	add	r2, r1
 803c0d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c0da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803c0de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 803c0e0:	693b      	ldr	r3, [r7, #16]
 803c0e2:	015a      	lsls	r2, r3, #5
 803c0e4:	697b      	ldr	r3, [r7, #20]
 803c0e6:	4413      	add	r3, r2
 803c0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c0ec:	691a      	ldr	r2, [r3, #16]
 803c0ee:	68bb      	ldr	r3, [r7, #8]
 803c0f0:	699b      	ldr	r3, [r3, #24]
 803c0f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803c0f6:	6939      	ldr	r1, [r7, #16]
 803c0f8:	0148      	lsls	r0, r1, #5
 803c0fa:	6979      	ldr	r1, [r7, #20]
 803c0fc:	4401      	add	r1, r0
 803c0fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803c102:	4313      	orrs	r3, r2
 803c104:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 803c106:	79fb      	ldrb	r3, [r7, #7]
 803c108:	2b01      	cmp	r3, #1
 803c10a:	d11e      	bne.n	803c14a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 803c10c:	68bb      	ldr	r3, [r7, #8]
 803c10e:	695b      	ldr	r3, [r3, #20]
 803c110:	2b00      	cmp	r3, #0
 803c112:	d009      	beq.n	803c128 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 803c114:	693b      	ldr	r3, [r7, #16]
 803c116:	015a      	lsls	r2, r3, #5
 803c118:	697b      	ldr	r3, [r7, #20]
 803c11a:	4413      	add	r3, r2
 803c11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c120:	461a      	mov	r2, r3
 803c122:	68bb      	ldr	r3, [r7, #8]
 803c124:	695b      	ldr	r3, [r3, #20]
 803c126:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803c128:	693b      	ldr	r3, [r7, #16]
 803c12a:	015a      	lsls	r2, r3, #5
 803c12c:	697b      	ldr	r3, [r7, #20]
 803c12e:	4413      	add	r3, r2
 803c130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c134:	681b      	ldr	r3, [r3, #0]
 803c136:	693a      	ldr	r2, [r7, #16]
 803c138:	0151      	lsls	r1, r2, #5
 803c13a:	697a      	ldr	r2, [r7, #20]
 803c13c:	440a      	add	r2, r1
 803c13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803c146:	6013      	str	r3, [r2, #0]
 803c148:	e097      	b.n	803c27a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 803c14a:	693b      	ldr	r3, [r7, #16]
 803c14c:	015a      	lsls	r2, r3, #5
 803c14e:	697b      	ldr	r3, [r7, #20]
 803c150:	4413      	add	r3, r2
 803c152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c156:	681b      	ldr	r3, [r3, #0]
 803c158:	693a      	ldr	r2, [r7, #16]
 803c15a:	0151      	lsls	r1, r2, #5
 803c15c:	697a      	ldr	r2, [r7, #20]
 803c15e:	440a      	add	r2, r1
 803c160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803c168:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 803c16a:	68bb      	ldr	r3, [r7, #8]
 803c16c:	699b      	ldr	r3, [r3, #24]
 803c16e:	2b00      	cmp	r3, #0
 803c170:	f000 8083 	beq.w	803c27a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803c174:	697b      	ldr	r3, [r7, #20]
 803c176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c17a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803c17c:	68bb      	ldr	r3, [r7, #8]
 803c17e:	781b      	ldrb	r3, [r3, #0]
 803c180:	f003 030f 	and.w	r3, r3, #15
 803c184:	2101      	movs	r1, #1
 803c186:	fa01 f303 	lsl.w	r3, r1, r3
 803c18a:	6979      	ldr	r1, [r7, #20]
 803c18c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c190:	4313      	orrs	r3, r2
 803c192:	634b      	str	r3, [r1, #52]	; 0x34
 803c194:	e071      	b.n	803c27a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 803c196:	693b      	ldr	r3, [r7, #16]
 803c198:	015a      	lsls	r2, r3, #5
 803c19a:	697b      	ldr	r3, [r7, #20]
 803c19c:	4413      	add	r3, r2
 803c19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c1a2:	691a      	ldr	r2, [r3, #16]
 803c1a4:	693b      	ldr	r3, [r7, #16]
 803c1a6:	0159      	lsls	r1, r3, #5
 803c1a8:	697b      	ldr	r3, [r7, #20]
 803c1aa:	440b      	add	r3, r1
 803c1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c1b0:	4619      	mov	r1, r3
 803c1b2:	4b36      	ldr	r3, [pc, #216]	; (803c28c <USB_EP0StartXfer+0x2b4>)
 803c1b4:	4013      	ands	r3, r2
 803c1b6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 803c1b8:	693b      	ldr	r3, [r7, #16]
 803c1ba:	015a      	lsls	r2, r3, #5
 803c1bc:	697b      	ldr	r3, [r7, #20]
 803c1be:	4413      	add	r3, r2
 803c1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c1c4:	691a      	ldr	r2, [r3, #16]
 803c1c6:	693b      	ldr	r3, [r7, #16]
 803c1c8:	0159      	lsls	r1, r3, #5
 803c1ca:	697b      	ldr	r3, [r7, #20]
 803c1cc:	440b      	add	r3, r1
 803c1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c1d2:	4619      	mov	r1, r3
 803c1d4:	4b2c      	ldr	r3, [pc, #176]	; (803c288 <USB_EP0StartXfer+0x2b0>)
 803c1d6:	4013      	ands	r3, r2
 803c1d8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 803c1da:	68bb      	ldr	r3, [r7, #8]
 803c1dc:	699b      	ldr	r3, [r3, #24]
 803c1de:	2b00      	cmp	r3, #0
 803c1e0:	d003      	beq.n	803c1ea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 803c1e2:	68bb      	ldr	r3, [r7, #8]
 803c1e4:	68da      	ldr	r2, [r3, #12]
 803c1e6:	68bb      	ldr	r3, [r7, #8]
 803c1e8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 803c1ea:	68bb      	ldr	r3, [r7, #8]
 803c1ec:	68da      	ldr	r2, [r3, #12]
 803c1ee:	68bb      	ldr	r3, [r7, #8]
 803c1f0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803c1f2:	693b      	ldr	r3, [r7, #16]
 803c1f4:	015a      	lsls	r2, r3, #5
 803c1f6:	697b      	ldr	r3, [r7, #20]
 803c1f8:	4413      	add	r3, r2
 803c1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c1fe:	691b      	ldr	r3, [r3, #16]
 803c200:	693a      	ldr	r2, [r7, #16]
 803c202:	0151      	lsls	r1, r2, #5
 803c204:	697a      	ldr	r2, [r7, #20]
 803c206:	440a      	add	r2, r1
 803c208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c20c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803c210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 803c212:	693b      	ldr	r3, [r7, #16]
 803c214:	015a      	lsls	r2, r3, #5
 803c216:	697b      	ldr	r3, [r7, #20]
 803c218:	4413      	add	r3, r2
 803c21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c21e:	691a      	ldr	r2, [r3, #16]
 803c220:	68bb      	ldr	r3, [r7, #8]
 803c222:	69db      	ldr	r3, [r3, #28]
 803c224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803c228:	6939      	ldr	r1, [r7, #16]
 803c22a:	0148      	lsls	r0, r1, #5
 803c22c:	6979      	ldr	r1, [r7, #20]
 803c22e:	4401      	add	r1, r0
 803c230:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 803c234:	4313      	orrs	r3, r2
 803c236:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 803c238:	79fb      	ldrb	r3, [r7, #7]
 803c23a:	2b01      	cmp	r3, #1
 803c23c:	d10d      	bne.n	803c25a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 803c23e:	68bb      	ldr	r3, [r7, #8]
 803c240:	691b      	ldr	r3, [r3, #16]
 803c242:	2b00      	cmp	r3, #0
 803c244:	d009      	beq.n	803c25a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 803c246:	68bb      	ldr	r3, [r7, #8]
 803c248:	6919      	ldr	r1, [r3, #16]
 803c24a:	693b      	ldr	r3, [r7, #16]
 803c24c:	015a      	lsls	r2, r3, #5
 803c24e:	697b      	ldr	r3, [r7, #20]
 803c250:	4413      	add	r3, r2
 803c252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c256:	460a      	mov	r2, r1
 803c258:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 803c25a:	693b      	ldr	r3, [r7, #16]
 803c25c:	015a      	lsls	r2, r3, #5
 803c25e:	697b      	ldr	r3, [r7, #20]
 803c260:	4413      	add	r3, r2
 803c262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c266:	681b      	ldr	r3, [r3, #0]
 803c268:	693a      	ldr	r2, [r7, #16]
 803c26a:	0151      	lsls	r1, r2, #5
 803c26c:	697a      	ldr	r2, [r7, #20]
 803c26e:	440a      	add	r2, r1
 803c270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c274:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 803c278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803c27a:	2300      	movs	r3, #0
}
 803c27c:	4618      	mov	r0, r3
 803c27e:	371c      	adds	r7, #28
 803c280:	46bd      	mov	sp, r7
 803c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c286:	4770      	bx	lr
 803c288:	e007ffff 	.word	0xe007ffff
 803c28c:	fff80000 	.word	0xfff80000

0803c290 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803c290:	b480      	push	{r7}
 803c292:	b087      	sub	sp, #28
 803c294:	af00      	add	r7, sp, #0
 803c296:	6078      	str	r0, [r7, #4]
 803c298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 803c29a:	2300      	movs	r3, #0
 803c29c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 803c29e:	2300      	movs	r3, #0
 803c2a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c2a2:	687b      	ldr	r3, [r7, #4]
 803c2a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 803c2a6:	683b      	ldr	r3, [r7, #0]
 803c2a8:	785b      	ldrb	r3, [r3, #1]
 803c2aa:	2b01      	cmp	r3, #1
 803c2ac:	d14a      	bne.n	803c344 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 803c2ae:	683b      	ldr	r3, [r7, #0]
 803c2b0:	781b      	ldrb	r3, [r3, #0]
 803c2b2:	015a      	lsls	r2, r3, #5
 803c2b4:	693b      	ldr	r3, [r7, #16]
 803c2b6:	4413      	add	r3, r2
 803c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c2bc:	681b      	ldr	r3, [r3, #0]
 803c2be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c2c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c2c6:	f040 8086 	bne.w	803c3d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 803c2ca:	683b      	ldr	r3, [r7, #0]
 803c2cc:	781b      	ldrb	r3, [r3, #0]
 803c2ce:	015a      	lsls	r2, r3, #5
 803c2d0:	693b      	ldr	r3, [r7, #16]
 803c2d2:	4413      	add	r3, r2
 803c2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c2d8:	681b      	ldr	r3, [r3, #0]
 803c2da:	683a      	ldr	r2, [r7, #0]
 803c2dc:	7812      	ldrb	r2, [r2, #0]
 803c2de:	0151      	lsls	r1, r2, #5
 803c2e0:	693a      	ldr	r2, [r7, #16]
 803c2e2:	440a      	add	r2, r1
 803c2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c2e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803c2ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 803c2ee:	683b      	ldr	r3, [r7, #0]
 803c2f0:	781b      	ldrb	r3, [r3, #0]
 803c2f2:	015a      	lsls	r2, r3, #5
 803c2f4:	693b      	ldr	r3, [r7, #16]
 803c2f6:	4413      	add	r3, r2
 803c2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c2fc:	681b      	ldr	r3, [r3, #0]
 803c2fe:	683a      	ldr	r2, [r7, #0]
 803c300:	7812      	ldrb	r2, [r2, #0]
 803c302:	0151      	lsls	r1, r2, #5
 803c304:	693a      	ldr	r2, [r7, #16]
 803c306:	440a      	add	r2, r1
 803c308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c30c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803c310:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803c312:	68fb      	ldr	r3, [r7, #12]
 803c314:	3301      	adds	r3, #1
 803c316:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 803c318:	68fb      	ldr	r3, [r7, #12]
 803c31a:	f242 7210 	movw	r2, #10000	; 0x2710
 803c31e:	4293      	cmp	r3, r2
 803c320:	d902      	bls.n	803c328 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 803c322:	2301      	movs	r3, #1
 803c324:	75fb      	strb	r3, [r7, #23]
          break;
 803c326:	e056      	b.n	803c3d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 803c328:	683b      	ldr	r3, [r7, #0]
 803c32a:	781b      	ldrb	r3, [r3, #0]
 803c32c:	015a      	lsls	r2, r3, #5
 803c32e:	693b      	ldr	r3, [r7, #16]
 803c330:	4413      	add	r3, r2
 803c332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c336:	681b      	ldr	r3, [r3, #0]
 803c338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c33c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c340:	d0e7      	beq.n	803c312 <USB_EPStopXfer+0x82>
 803c342:	e048      	b.n	803c3d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803c344:	683b      	ldr	r3, [r7, #0]
 803c346:	781b      	ldrb	r3, [r3, #0]
 803c348:	015a      	lsls	r2, r3, #5
 803c34a:	693b      	ldr	r3, [r7, #16]
 803c34c:	4413      	add	r3, r2
 803c34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c352:	681b      	ldr	r3, [r3, #0]
 803c354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c35c:	d13b      	bne.n	803c3d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 803c35e:	683b      	ldr	r3, [r7, #0]
 803c360:	781b      	ldrb	r3, [r3, #0]
 803c362:	015a      	lsls	r2, r3, #5
 803c364:	693b      	ldr	r3, [r7, #16]
 803c366:	4413      	add	r3, r2
 803c368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c36c:	681b      	ldr	r3, [r3, #0]
 803c36e:	683a      	ldr	r2, [r7, #0]
 803c370:	7812      	ldrb	r2, [r2, #0]
 803c372:	0151      	lsls	r1, r2, #5
 803c374:	693a      	ldr	r2, [r7, #16]
 803c376:	440a      	add	r2, r1
 803c378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c37c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803c380:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 803c382:	683b      	ldr	r3, [r7, #0]
 803c384:	781b      	ldrb	r3, [r3, #0]
 803c386:	015a      	lsls	r2, r3, #5
 803c388:	693b      	ldr	r3, [r7, #16]
 803c38a:	4413      	add	r3, r2
 803c38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c390:	681b      	ldr	r3, [r3, #0]
 803c392:	683a      	ldr	r2, [r7, #0]
 803c394:	7812      	ldrb	r2, [r2, #0]
 803c396:	0151      	lsls	r1, r2, #5
 803c398:	693a      	ldr	r2, [r7, #16]
 803c39a:	440a      	add	r2, r1
 803c39c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c3a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803c3a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 803c3a6:	68fb      	ldr	r3, [r7, #12]
 803c3a8:	3301      	adds	r3, #1
 803c3aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 803c3ac:	68fb      	ldr	r3, [r7, #12]
 803c3ae:	f242 7210 	movw	r2, #10000	; 0x2710
 803c3b2:	4293      	cmp	r3, r2
 803c3b4:	d902      	bls.n	803c3bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 803c3b6:	2301      	movs	r3, #1
 803c3b8:	75fb      	strb	r3, [r7, #23]
          break;
 803c3ba:	e00c      	b.n	803c3d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 803c3bc:	683b      	ldr	r3, [r7, #0]
 803c3be:	781b      	ldrb	r3, [r3, #0]
 803c3c0:	015a      	lsls	r2, r3, #5
 803c3c2:	693b      	ldr	r3, [r7, #16]
 803c3c4:	4413      	add	r3, r2
 803c3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c3ca:	681b      	ldr	r3, [r3, #0]
 803c3cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c3d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c3d4:	d0e7      	beq.n	803c3a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 803c3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 803c3d8:	4618      	mov	r0, r3
 803c3da:	371c      	adds	r7, #28
 803c3dc:	46bd      	mov	sp, r7
 803c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c3e2:	4770      	bx	lr

0803c3e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 803c3e4:	b480      	push	{r7}
 803c3e6:	b089      	sub	sp, #36	; 0x24
 803c3e8:	af00      	add	r7, sp, #0
 803c3ea:	60f8      	str	r0, [r7, #12]
 803c3ec:	60b9      	str	r1, [r7, #8]
 803c3ee:	4611      	mov	r1, r2
 803c3f0:	461a      	mov	r2, r3
 803c3f2:	460b      	mov	r3, r1
 803c3f4:	71fb      	strb	r3, [r7, #7]
 803c3f6:	4613      	mov	r3, r2
 803c3f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c3fa:	68fb      	ldr	r3, [r7, #12]
 803c3fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 803c3fe:	68bb      	ldr	r3, [r7, #8]
 803c400:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 803c402:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 803c406:	2b00      	cmp	r3, #0
 803c408:	d123      	bne.n	803c452 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 803c40a:	88bb      	ldrh	r3, [r7, #4]
 803c40c:	3303      	adds	r3, #3
 803c40e:	089b      	lsrs	r3, r3, #2
 803c410:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 803c412:	2300      	movs	r3, #0
 803c414:	61bb      	str	r3, [r7, #24]
 803c416:	e018      	b.n	803c44a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 803c418:	79fb      	ldrb	r3, [r7, #7]
 803c41a:	031a      	lsls	r2, r3, #12
 803c41c:	697b      	ldr	r3, [r7, #20]
 803c41e:	4413      	add	r3, r2
 803c420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803c424:	461a      	mov	r2, r3
 803c426:	69fb      	ldr	r3, [r7, #28]
 803c428:	681b      	ldr	r3, [r3, #0]
 803c42a:	6013      	str	r3, [r2, #0]
      pSrc++;
 803c42c:	69fb      	ldr	r3, [r7, #28]
 803c42e:	3301      	adds	r3, #1
 803c430:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803c432:	69fb      	ldr	r3, [r7, #28]
 803c434:	3301      	adds	r3, #1
 803c436:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803c438:	69fb      	ldr	r3, [r7, #28]
 803c43a:	3301      	adds	r3, #1
 803c43c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 803c43e:	69fb      	ldr	r3, [r7, #28]
 803c440:	3301      	adds	r3, #1
 803c442:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 803c444:	69bb      	ldr	r3, [r7, #24]
 803c446:	3301      	adds	r3, #1
 803c448:	61bb      	str	r3, [r7, #24]
 803c44a:	69ba      	ldr	r2, [r7, #24]
 803c44c:	693b      	ldr	r3, [r7, #16]
 803c44e:	429a      	cmp	r2, r3
 803c450:	d3e2      	bcc.n	803c418 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 803c452:	2300      	movs	r3, #0
}
 803c454:	4618      	mov	r0, r3
 803c456:	3724      	adds	r7, #36	; 0x24
 803c458:	46bd      	mov	sp, r7
 803c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c45e:	4770      	bx	lr

0803c460 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 803c460:	b480      	push	{r7}
 803c462:	b08b      	sub	sp, #44	; 0x2c
 803c464:	af00      	add	r7, sp, #0
 803c466:	60f8      	str	r0, [r7, #12]
 803c468:	60b9      	str	r1, [r7, #8]
 803c46a:	4613      	mov	r3, r2
 803c46c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c46e:	68fb      	ldr	r3, [r7, #12]
 803c470:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 803c472:	68bb      	ldr	r3, [r7, #8]
 803c474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 803c476:	88fb      	ldrh	r3, [r7, #6]
 803c478:	089b      	lsrs	r3, r3, #2
 803c47a:	b29b      	uxth	r3, r3
 803c47c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 803c47e:	88fb      	ldrh	r3, [r7, #6]
 803c480:	f003 0303 	and.w	r3, r3, #3
 803c484:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 803c486:	2300      	movs	r3, #0
 803c488:	623b      	str	r3, [r7, #32]
 803c48a:	e014      	b.n	803c4b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 803c48c:	69bb      	ldr	r3, [r7, #24]
 803c48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803c492:	681a      	ldr	r2, [r3, #0]
 803c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c496:	601a      	str	r2, [r3, #0]
    pDest++;
 803c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c49a:	3301      	adds	r3, #1
 803c49c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c4a0:	3301      	adds	r3, #1
 803c4a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c4a6:	3301      	adds	r3, #1
 803c4a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 803c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c4ac:	3301      	adds	r3, #1
 803c4ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 803c4b0:	6a3b      	ldr	r3, [r7, #32]
 803c4b2:	3301      	adds	r3, #1
 803c4b4:	623b      	str	r3, [r7, #32]
 803c4b6:	6a3a      	ldr	r2, [r7, #32]
 803c4b8:	697b      	ldr	r3, [r7, #20]
 803c4ba:	429a      	cmp	r2, r3
 803c4bc:	d3e6      	bcc.n	803c48c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 803c4be:	8bfb      	ldrh	r3, [r7, #30]
 803c4c0:	2b00      	cmp	r3, #0
 803c4c2:	d01e      	beq.n	803c502 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 803c4c4:	2300      	movs	r3, #0
 803c4c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 803c4c8:	69bb      	ldr	r3, [r7, #24]
 803c4ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 803c4ce:	461a      	mov	r2, r3
 803c4d0:	f107 0310 	add.w	r3, r7, #16
 803c4d4:	6812      	ldr	r2, [r2, #0]
 803c4d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 803c4d8:	693a      	ldr	r2, [r7, #16]
 803c4da:	6a3b      	ldr	r3, [r7, #32]
 803c4dc:	b2db      	uxtb	r3, r3
 803c4de:	00db      	lsls	r3, r3, #3
 803c4e0:	fa22 f303 	lsr.w	r3, r2, r3
 803c4e4:	b2da      	uxtb	r2, r3
 803c4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c4e8:	701a      	strb	r2, [r3, #0]
      i++;
 803c4ea:	6a3b      	ldr	r3, [r7, #32]
 803c4ec:	3301      	adds	r3, #1
 803c4ee:	623b      	str	r3, [r7, #32]
      pDest++;
 803c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803c4f2:	3301      	adds	r3, #1
 803c4f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 803c4f6:	8bfb      	ldrh	r3, [r7, #30]
 803c4f8:	3b01      	subs	r3, #1
 803c4fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 803c4fc:	8bfb      	ldrh	r3, [r7, #30]
 803c4fe:	2b00      	cmp	r3, #0
 803c500:	d1ea      	bne.n	803c4d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 803c502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803c504:	4618      	mov	r0, r3
 803c506:	372c      	adds	r7, #44	; 0x2c
 803c508:	46bd      	mov	sp, r7
 803c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c50e:	4770      	bx	lr

0803c510 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803c510:	b480      	push	{r7}
 803c512:	b085      	sub	sp, #20
 803c514:	af00      	add	r7, sp, #0
 803c516:	6078      	str	r0, [r7, #4]
 803c518:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c51a:	687b      	ldr	r3, [r7, #4]
 803c51c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803c51e:	683b      	ldr	r3, [r7, #0]
 803c520:	781b      	ldrb	r3, [r3, #0]
 803c522:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803c524:	683b      	ldr	r3, [r7, #0]
 803c526:	785b      	ldrb	r3, [r3, #1]
 803c528:	2b01      	cmp	r3, #1
 803c52a:	d12c      	bne.n	803c586 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 803c52c:	68bb      	ldr	r3, [r7, #8]
 803c52e:	015a      	lsls	r2, r3, #5
 803c530:	68fb      	ldr	r3, [r7, #12]
 803c532:	4413      	add	r3, r2
 803c534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c538:	681b      	ldr	r3, [r3, #0]
 803c53a:	2b00      	cmp	r3, #0
 803c53c:	db12      	blt.n	803c564 <USB_EPSetStall+0x54>
 803c53e:	68bb      	ldr	r3, [r7, #8]
 803c540:	2b00      	cmp	r3, #0
 803c542:	d00f      	beq.n	803c564 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 803c544:	68bb      	ldr	r3, [r7, #8]
 803c546:	015a      	lsls	r2, r3, #5
 803c548:	68fb      	ldr	r3, [r7, #12]
 803c54a:	4413      	add	r3, r2
 803c54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c550:	681b      	ldr	r3, [r3, #0]
 803c552:	68ba      	ldr	r2, [r7, #8]
 803c554:	0151      	lsls	r1, r2, #5
 803c556:	68fa      	ldr	r2, [r7, #12]
 803c558:	440a      	add	r2, r1
 803c55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c55e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803c562:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 803c564:	68bb      	ldr	r3, [r7, #8]
 803c566:	015a      	lsls	r2, r3, #5
 803c568:	68fb      	ldr	r3, [r7, #12]
 803c56a:	4413      	add	r3, r2
 803c56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c570:	681b      	ldr	r3, [r3, #0]
 803c572:	68ba      	ldr	r2, [r7, #8]
 803c574:	0151      	lsls	r1, r2, #5
 803c576:	68fa      	ldr	r2, [r7, #12]
 803c578:	440a      	add	r2, r1
 803c57a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c57e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803c582:	6013      	str	r3, [r2, #0]
 803c584:	e02b      	b.n	803c5de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 803c586:	68bb      	ldr	r3, [r7, #8]
 803c588:	015a      	lsls	r2, r3, #5
 803c58a:	68fb      	ldr	r3, [r7, #12]
 803c58c:	4413      	add	r3, r2
 803c58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c592:	681b      	ldr	r3, [r3, #0]
 803c594:	2b00      	cmp	r3, #0
 803c596:	db12      	blt.n	803c5be <USB_EPSetStall+0xae>
 803c598:	68bb      	ldr	r3, [r7, #8]
 803c59a:	2b00      	cmp	r3, #0
 803c59c:	d00f      	beq.n	803c5be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 803c59e:	68bb      	ldr	r3, [r7, #8]
 803c5a0:	015a      	lsls	r2, r3, #5
 803c5a2:	68fb      	ldr	r3, [r7, #12]
 803c5a4:	4413      	add	r3, r2
 803c5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c5aa:	681b      	ldr	r3, [r3, #0]
 803c5ac:	68ba      	ldr	r2, [r7, #8]
 803c5ae:	0151      	lsls	r1, r2, #5
 803c5b0:	68fa      	ldr	r2, [r7, #12]
 803c5b2:	440a      	add	r2, r1
 803c5b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c5b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 803c5bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 803c5be:	68bb      	ldr	r3, [r7, #8]
 803c5c0:	015a      	lsls	r2, r3, #5
 803c5c2:	68fb      	ldr	r3, [r7, #12]
 803c5c4:	4413      	add	r3, r2
 803c5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c5ca:	681b      	ldr	r3, [r3, #0]
 803c5cc:	68ba      	ldr	r2, [r7, #8]
 803c5ce:	0151      	lsls	r1, r2, #5
 803c5d0:	68fa      	ldr	r2, [r7, #12]
 803c5d2:	440a      	add	r2, r1
 803c5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c5d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 803c5dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803c5de:	2300      	movs	r3, #0
}
 803c5e0:	4618      	mov	r0, r3
 803c5e2:	3714      	adds	r7, #20
 803c5e4:	46bd      	mov	sp, r7
 803c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c5ea:	4770      	bx	lr

0803c5ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 803c5ec:	b480      	push	{r7}
 803c5ee:	b085      	sub	sp, #20
 803c5f0:	af00      	add	r7, sp, #0
 803c5f2:	6078      	str	r0, [r7, #4]
 803c5f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c5f6:	687b      	ldr	r3, [r7, #4]
 803c5f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 803c5fa:	683b      	ldr	r3, [r7, #0]
 803c5fc:	781b      	ldrb	r3, [r3, #0]
 803c5fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803c600:	683b      	ldr	r3, [r7, #0]
 803c602:	785b      	ldrb	r3, [r3, #1]
 803c604:	2b01      	cmp	r3, #1
 803c606:	d128      	bne.n	803c65a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 803c608:	68bb      	ldr	r3, [r7, #8]
 803c60a:	015a      	lsls	r2, r3, #5
 803c60c:	68fb      	ldr	r3, [r7, #12]
 803c60e:	4413      	add	r3, r2
 803c610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c614:	681b      	ldr	r3, [r3, #0]
 803c616:	68ba      	ldr	r2, [r7, #8]
 803c618:	0151      	lsls	r1, r2, #5
 803c61a:	68fa      	ldr	r2, [r7, #12]
 803c61c:	440a      	add	r2, r1
 803c61e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803c626:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803c628:	683b      	ldr	r3, [r7, #0]
 803c62a:	791b      	ldrb	r3, [r3, #4]
 803c62c:	2b03      	cmp	r3, #3
 803c62e:	d003      	beq.n	803c638 <USB_EPClearStall+0x4c>
 803c630:	683b      	ldr	r3, [r7, #0]
 803c632:	791b      	ldrb	r3, [r3, #4]
 803c634:	2b02      	cmp	r3, #2
 803c636:	d138      	bne.n	803c6aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803c638:	68bb      	ldr	r3, [r7, #8]
 803c63a:	015a      	lsls	r2, r3, #5
 803c63c:	68fb      	ldr	r3, [r7, #12]
 803c63e:	4413      	add	r3, r2
 803c640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c644:	681b      	ldr	r3, [r3, #0]
 803c646:	68ba      	ldr	r2, [r7, #8]
 803c648:	0151      	lsls	r1, r2, #5
 803c64a:	68fa      	ldr	r2, [r7, #12]
 803c64c:	440a      	add	r2, r1
 803c64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 803c652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803c656:	6013      	str	r3, [r2, #0]
 803c658:	e027      	b.n	803c6aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 803c65a:	68bb      	ldr	r3, [r7, #8]
 803c65c:	015a      	lsls	r2, r3, #5
 803c65e:	68fb      	ldr	r3, [r7, #12]
 803c660:	4413      	add	r3, r2
 803c662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c666:	681b      	ldr	r3, [r3, #0]
 803c668:	68ba      	ldr	r2, [r7, #8]
 803c66a:	0151      	lsls	r1, r2, #5
 803c66c:	68fa      	ldr	r2, [r7, #12]
 803c66e:	440a      	add	r2, r1
 803c670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c674:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 803c678:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 803c67a:	683b      	ldr	r3, [r7, #0]
 803c67c:	791b      	ldrb	r3, [r3, #4]
 803c67e:	2b03      	cmp	r3, #3
 803c680:	d003      	beq.n	803c68a <USB_EPClearStall+0x9e>
 803c682:	683b      	ldr	r3, [r7, #0]
 803c684:	791b      	ldrb	r3, [r3, #4]
 803c686:	2b02      	cmp	r3, #2
 803c688:	d10f      	bne.n	803c6aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 803c68a:	68bb      	ldr	r3, [r7, #8]
 803c68c:	015a      	lsls	r2, r3, #5
 803c68e:	68fb      	ldr	r3, [r7, #12]
 803c690:	4413      	add	r3, r2
 803c692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c696:	681b      	ldr	r3, [r3, #0]
 803c698:	68ba      	ldr	r2, [r7, #8]
 803c69a:	0151      	lsls	r1, r2, #5
 803c69c:	68fa      	ldr	r2, [r7, #12]
 803c69e:	440a      	add	r2, r1
 803c6a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c6a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803c6a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 803c6aa:	2300      	movs	r3, #0
}
 803c6ac:	4618      	mov	r0, r3
 803c6ae:	3714      	adds	r7, #20
 803c6b0:	46bd      	mov	sp, r7
 803c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c6b6:	4770      	bx	lr

0803c6b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 803c6b8:	b480      	push	{r7}
 803c6ba:	b085      	sub	sp, #20
 803c6bc:	af00      	add	r7, sp, #0
 803c6be:	6078      	str	r0, [r7, #4]
 803c6c0:	460b      	mov	r3, r1
 803c6c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c6c4:	687b      	ldr	r3, [r7, #4]
 803c6c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 803c6c8:	68fb      	ldr	r3, [r7, #12]
 803c6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c6ce:	681b      	ldr	r3, [r3, #0]
 803c6d0:	68fa      	ldr	r2, [r7, #12]
 803c6d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c6d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 803c6da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 803c6dc:	68fb      	ldr	r3, [r7, #12]
 803c6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c6e2:	681a      	ldr	r2, [r3, #0]
 803c6e4:	78fb      	ldrb	r3, [r7, #3]
 803c6e6:	011b      	lsls	r3, r3, #4
 803c6e8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 803c6ec:	68f9      	ldr	r1, [r7, #12]
 803c6ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803c6f2:	4313      	orrs	r3, r2
 803c6f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 803c6f6:	2300      	movs	r3, #0
}
 803c6f8:	4618      	mov	r0, r3
 803c6fa:	3714      	adds	r7, #20
 803c6fc:	46bd      	mov	sp, r7
 803c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c702:	4770      	bx	lr

0803c704 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 803c704:	b480      	push	{r7}
 803c706:	b085      	sub	sp, #20
 803c708:	af00      	add	r7, sp, #0
 803c70a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c70c:	687b      	ldr	r3, [r7, #4]
 803c70e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803c710:	68fb      	ldr	r3, [r7, #12]
 803c712:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803c716:	681b      	ldr	r3, [r3, #0]
 803c718:	68fa      	ldr	r2, [r7, #12]
 803c71a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803c71e:	f023 0303 	bic.w	r3, r3, #3
 803c722:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 803c724:	68fb      	ldr	r3, [r7, #12]
 803c726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c72a:	685b      	ldr	r3, [r3, #4]
 803c72c:	68fa      	ldr	r2, [r7, #12]
 803c72e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c732:	f023 0302 	bic.w	r3, r3, #2
 803c736:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803c738:	2300      	movs	r3, #0
}
 803c73a:	4618      	mov	r0, r3
 803c73c:	3714      	adds	r7, #20
 803c73e:	46bd      	mov	sp, r7
 803c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c744:	4770      	bx	lr

0803c746 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 803c746:	b480      	push	{r7}
 803c748:	b085      	sub	sp, #20
 803c74a:	af00      	add	r7, sp, #0
 803c74c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c74e:	687b      	ldr	r3, [r7, #4]
 803c750:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 803c752:	68fb      	ldr	r3, [r7, #12]
 803c754:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803c758:	681b      	ldr	r3, [r3, #0]
 803c75a:	68fa      	ldr	r2, [r7, #12]
 803c75c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803c760:	f023 0303 	bic.w	r3, r3, #3
 803c764:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803c766:	68fb      	ldr	r3, [r7, #12]
 803c768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c76c:	685b      	ldr	r3, [r3, #4]
 803c76e:	68fa      	ldr	r2, [r7, #12]
 803c770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c774:	f043 0302 	orr.w	r3, r3, #2
 803c778:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803c77a:	2300      	movs	r3, #0
}
 803c77c:	4618      	mov	r0, r3
 803c77e:	3714      	adds	r7, #20
 803c780:	46bd      	mov	sp, r7
 803c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c786:	4770      	bx	lr

0803c788 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 803c788:	b480      	push	{r7}
 803c78a:	b085      	sub	sp, #20
 803c78c:	af00      	add	r7, sp, #0
 803c78e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 803c790:	687b      	ldr	r3, [r7, #4]
 803c792:	695b      	ldr	r3, [r3, #20]
 803c794:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 803c796:	687b      	ldr	r3, [r7, #4]
 803c798:	699b      	ldr	r3, [r3, #24]
 803c79a:	68fa      	ldr	r2, [r7, #12]
 803c79c:	4013      	ands	r3, r2
 803c79e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 803c7a0:	68fb      	ldr	r3, [r7, #12]
}
 803c7a2:	4618      	mov	r0, r3
 803c7a4:	3714      	adds	r7, #20
 803c7a6:	46bd      	mov	sp, r7
 803c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c7ac:	4770      	bx	lr

0803c7ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803c7ae:	b480      	push	{r7}
 803c7b0:	b085      	sub	sp, #20
 803c7b2:	af00      	add	r7, sp, #0
 803c7b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c7b6:	687b      	ldr	r3, [r7, #4]
 803c7b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803c7ba:	68fb      	ldr	r3, [r7, #12]
 803c7bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c7c0:	699b      	ldr	r3, [r3, #24]
 803c7c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803c7c4:	68fb      	ldr	r3, [r7, #12]
 803c7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c7ca:	69db      	ldr	r3, [r3, #28]
 803c7cc:	68ba      	ldr	r2, [r7, #8]
 803c7ce:	4013      	ands	r3, r2
 803c7d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 803c7d2:	68bb      	ldr	r3, [r7, #8]
 803c7d4:	0c1b      	lsrs	r3, r3, #16
}
 803c7d6:	4618      	mov	r0, r3
 803c7d8:	3714      	adds	r7, #20
 803c7da:	46bd      	mov	sp, r7
 803c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c7e0:	4770      	bx	lr

0803c7e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803c7e2:	b480      	push	{r7}
 803c7e4:	b085      	sub	sp, #20
 803c7e6:	af00      	add	r7, sp, #0
 803c7e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c7ea:	687b      	ldr	r3, [r7, #4]
 803c7ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 803c7ee:	68fb      	ldr	r3, [r7, #12]
 803c7f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c7f4:	699b      	ldr	r3, [r3, #24]
 803c7f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803c7f8:	68fb      	ldr	r3, [r7, #12]
 803c7fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c7fe:	69db      	ldr	r3, [r3, #28]
 803c800:	68ba      	ldr	r2, [r7, #8]
 803c802:	4013      	ands	r3, r2
 803c804:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 803c806:	68bb      	ldr	r3, [r7, #8]
 803c808:	b29b      	uxth	r3, r3
}
 803c80a:	4618      	mov	r0, r3
 803c80c:	3714      	adds	r7, #20
 803c80e:	46bd      	mov	sp, r7
 803c810:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c814:	4770      	bx	lr

0803c816 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803c816:	b480      	push	{r7}
 803c818:	b085      	sub	sp, #20
 803c81a:	af00      	add	r7, sp, #0
 803c81c:	6078      	str	r0, [r7, #4]
 803c81e:	460b      	mov	r3, r1
 803c820:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c822:	687b      	ldr	r3, [r7, #4]
 803c824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 803c826:	78fb      	ldrb	r3, [r7, #3]
 803c828:	015a      	lsls	r2, r3, #5
 803c82a:	68fb      	ldr	r3, [r7, #12]
 803c82c:	4413      	add	r3, r2
 803c82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c832:	689b      	ldr	r3, [r3, #8]
 803c834:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 803c836:	68fb      	ldr	r3, [r7, #12]
 803c838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c83c:	695b      	ldr	r3, [r3, #20]
 803c83e:	68ba      	ldr	r2, [r7, #8]
 803c840:	4013      	ands	r3, r2
 803c842:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803c844:	68bb      	ldr	r3, [r7, #8]
}
 803c846:	4618      	mov	r0, r3
 803c848:	3714      	adds	r7, #20
 803c84a:	46bd      	mov	sp, r7
 803c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c850:	4770      	bx	lr

0803c852 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 803c852:	b480      	push	{r7}
 803c854:	b087      	sub	sp, #28
 803c856:	af00      	add	r7, sp, #0
 803c858:	6078      	str	r0, [r7, #4]
 803c85a:	460b      	mov	r3, r1
 803c85c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c85e:	687b      	ldr	r3, [r7, #4]
 803c860:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803c862:	697b      	ldr	r3, [r7, #20]
 803c864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c868:	691b      	ldr	r3, [r3, #16]
 803c86a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 803c86c:	697b      	ldr	r3, [r7, #20]
 803c86e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803c874:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 803c876:	78fb      	ldrb	r3, [r7, #3]
 803c878:	f003 030f 	and.w	r3, r3, #15
 803c87c:	68fa      	ldr	r2, [r7, #12]
 803c87e:	fa22 f303 	lsr.w	r3, r2, r3
 803c882:	01db      	lsls	r3, r3, #7
 803c884:	b2db      	uxtb	r3, r3
 803c886:	693a      	ldr	r2, [r7, #16]
 803c888:	4313      	orrs	r3, r2
 803c88a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 803c88c:	78fb      	ldrb	r3, [r7, #3]
 803c88e:	015a      	lsls	r2, r3, #5
 803c890:	697b      	ldr	r3, [r7, #20]
 803c892:	4413      	add	r3, r2
 803c894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c898:	689b      	ldr	r3, [r3, #8]
 803c89a:	693a      	ldr	r2, [r7, #16]
 803c89c:	4013      	ands	r3, r2
 803c89e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 803c8a0:	68bb      	ldr	r3, [r7, #8]
}
 803c8a2:	4618      	mov	r0, r3
 803c8a4:	371c      	adds	r7, #28
 803c8a6:	46bd      	mov	sp, r7
 803c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c8ac:	4770      	bx	lr

0803c8ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 803c8ae:	b480      	push	{r7}
 803c8b0:	b083      	sub	sp, #12
 803c8b2:	af00      	add	r7, sp, #0
 803c8b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803c8b6:	687b      	ldr	r3, [r7, #4]
 803c8b8:	695b      	ldr	r3, [r3, #20]
 803c8ba:	f003 0301 	and.w	r3, r3, #1
}
 803c8be:	4618      	mov	r0, r3
 803c8c0:	370c      	adds	r7, #12
 803c8c2:	46bd      	mov	sp, r7
 803c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c8c8:	4770      	bx	lr
	...

0803c8cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 803c8cc:	b480      	push	{r7}
 803c8ce:	b085      	sub	sp, #20
 803c8d0:	af00      	add	r7, sp, #0
 803c8d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c8d4:	687b      	ldr	r3, [r7, #4]
 803c8d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 803c8d8:	68fb      	ldr	r3, [r7, #12]
 803c8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c8de:	681a      	ldr	r2, [r3, #0]
 803c8e0:	68fb      	ldr	r3, [r7, #12]
 803c8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803c8e6:	4619      	mov	r1, r3
 803c8e8:	4b09      	ldr	r3, [pc, #36]	; (803c910 <USB_ActivateSetup+0x44>)
 803c8ea:	4013      	ands	r3, r2
 803c8ec:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 803c8ee:	68fb      	ldr	r3, [r7, #12]
 803c8f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803c8f4:	685b      	ldr	r3, [r3, #4]
 803c8f6:	68fa      	ldr	r2, [r7, #12]
 803c8f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803c8fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803c900:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 803c902:	2300      	movs	r3, #0
}
 803c904:	4618      	mov	r0, r3
 803c906:	3714      	adds	r7, #20
 803c908:	46bd      	mov	sp, r7
 803c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c90e:	4770      	bx	lr
 803c910:	fffff800 	.word	0xfffff800

0803c914 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 803c914:	b480      	push	{r7}
 803c916:	b087      	sub	sp, #28
 803c918:	af00      	add	r7, sp, #0
 803c91a:	60f8      	str	r0, [r7, #12]
 803c91c:	460b      	mov	r3, r1
 803c91e:	607a      	str	r2, [r7, #4]
 803c920:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803c922:	68fb      	ldr	r3, [r7, #12]
 803c924:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803c926:	68fb      	ldr	r3, [r7, #12]
 803c928:	333c      	adds	r3, #60	; 0x3c
 803c92a:	3304      	adds	r3, #4
 803c92c:	681b      	ldr	r3, [r3, #0]
 803c92e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 803c930:	693b      	ldr	r3, [r7, #16]
 803c932:	4a26      	ldr	r2, [pc, #152]	; (803c9cc <USB_EP0_OutStart+0xb8>)
 803c934:	4293      	cmp	r3, r2
 803c936:	d90a      	bls.n	803c94e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 803c938:	697b      	ldr	r3, [r7, #20]
 803c93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c93e:	681b      	ldr	r3, [r3, #0]
 803c940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803c944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803c948:	d101      	bne.n	803c94e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 803c94a:	2300      	movs	r3, #0
 803c94c:	e037      	b.n	803c9be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 803c94e:	697b      	ldr	r3, [r7, #20]
 803c950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c954:	461a      	mov	r2, r3
 803c956:	2300      	movs	r3, #0
 803c958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803c95a:	697b      	ldr	r3, [r7, #20]
 803c95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c960:	691b      	ldr	r3, [r3, #16]
 803c962:	697a      	ldr	r2, [r7, #20]
 803c964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803c96c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 803c96e:	697b      	ldr	r3, [r7, #20]
 803c970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c974:	691b      	ldr	r3, [r3, #16]
 803c976:	697a      	ldr	r2, [r7, #20]
 803c978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c97c:	f043 0318 	orr.w	r3, r3, #24
 803c980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803c982:	697b      	ldr	r3, [r7, #20]
 803c984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c988:	691b      	ldr	r3, [r3, #16]
 803c98a:	697a      	ldr	r2, [r7, #20]
 803c98c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c990:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 803c994:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803c996:	7afb      	ldrb	r3, [r7, #11]
 803c998:	2b01      	cmp	r3, #1
 803c99a:	d10f      	bne.n	803c9bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 803c99c:	697b      	ldr	r3, [r7, #20]
 803c99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c9a2:	461a      	mov	r2, r3
 803c9a4:	687b      	ldr	r3, [r7, #4]
 803c9a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 803c9a8:	697b      	ldr	r3, [r7, #20]
 803c9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803c9ae:	681b      	ldr	r3, [r3, #0]
 803c9b0:	697a      	ldr	r2, [r7, #20]
 803c9b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803c9b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 803c9ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 803c9bc:	2300      	movs	r3, #0
}
 803c9be:	4618      	mov	r0, r3
 803c9c0:	371c      	adds	r7, #28
 803c9c2:	46bd      	mov	sp, r7
 803c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c9c8:	4770      	bx	lr
 803c9ca:	bf00      	nop
 803c9cc:	4f54300a 	.word	0x4f54300a

0803c9d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 803c9d0:	b480      	push	{r7}
 803c9d2:	b085      	sub	sp, #20
 803c9d4:	af00      	add	r7, sp, #0
 803c9d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 803c9d8:	2300      	movs	r3, #0
 803c9da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 803c9dc:	68fb      	ldr	r3, [r7, #12]
 803c9de:	3301      	adds	r3, #1
 803c9e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803c9e2:	68fb      	ldr	r3, [r7, #12]
 803c9e4:	4a13      	ldr	r2, [pc, #76]	; (803ca34 <USB_CoreReset+0x64>)
 803c9e6:	4293      	cmp	r3, r2
 803c9e8:	d901      	bls.n	803c9ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 803c9ea:	2303      	movs	r3, #3
 803c9ec:	e01b      	b.n	803ca26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803c9ee:	687b      	ldr	r3, [r7, #4]
 803c9f0:	691b      	ldr	r3, [r3, #16]
 803c9f2:	2b00      	cmp	r3, #0
 803c9f4:	daf2      	bge.n	803c9dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 803c9f6:	2300      	movs	r3, #0
 803c9f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 803c9fa:	687b      	ldr	r3, [r7, #4]
 803c9fc:	691b      	ldr	r3, [r3, #16]
 803c9fe:	f043 0201 	orr.w	r2, r3, #1
 803ca02:	687b      	ldr	r3, [r7, #4]
 803ca04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803ca06:	68fb      	ldr	r3, [r7, #12]
 803ca08:	3301      	adds	r3, #1
 803ca0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803ca0c:	68fb      	ldr	r3, [r7, #12]
 803ca0e:	4a09      	ldr	r2, [pc, #36]	; (803ca34 <USB_CoreReset+0x64>)
 803ca10:	4293      	cmp	r3, r2
 803ca12:	d901      	bls.n	803ca18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 803ca14:	2303      	movs	r3, #3
 803ca16:	e006      	b.n	803ca26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 803ca18:	687b      	ldr	r3, [r7, #4]
 803ca1a:	691b      	ldr	r3, [r3, #16]
 803ca1c:	f003 0301 	and.w	r3, r3, #1
 803ca20:	2b01      	cmp	r3, #1
 803ca22:	d0f0      	beq.n	803ca06 <USB_CoreReset+0x36>

  return HAL_OK;
 803ca24:	2300      	movs	r3, #0
}
 803ca26:	4618      	mov	r0, r3
 803ca28:	3714      	adds	r7, #20
 803ca2a:	46bd      	mov	sp, r7
 803ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ca30:	4770      	bx	lr
 803ca32:	bf00      	nop
 803ca34:	00030d40 	.word	0x00030d40

0803ca38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803ca38:	b580      	push	{r7, lr}
 803ca3a:	b084      	sub	sp, #16
 803ca3c:	af00      	add	r7, sp, #0
 803ca3e:	6078      	str	r0, [r7, #4]
 803ca40:	460b      	mov	r3, r1
 803ca42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 803ca44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 803ca48:	f002 fc54 	bl	803f2f4 <USBD_static_malloc>
 803ca4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 803ca4e:	68fb      	ldr	r3, [r7, #12]
 803ca50:	2b00      	cmp	r3, #0
 803ca52:	d109      	bne.n	803ca68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803ca54:	687b      	ldr	r3, [r7, #4]
 803ca56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ca5a:	687b      	ldr	r3, [r7, #4]
 803ca5c:	32b0      	adds	r2, #176	; 0xb0
 803ca5e:	2100      	movs	r1, #0
 803ca60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 803ca64:	2302      	movs	r3, #2
 803ca66:	e0d4      	b.n	803cc12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 803ca68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 803ca6c:	2100      	movs	r1, #0
 803ca6e:	68f8      	ldr	r0, [r7, #12]
 803ca70:	f002 fd42 	bl	803f4f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 803ca74:	687b      	ldr	r3, [r7, #4]
 803ca76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ca7a:	687b      	ldr	r3, [r7, #4]
 803ca7c:	32b0      	adds	r2, #176	; 0xb0
 803ca7e:	68f9      	ldr	r1, [r7, #12]
 803ca80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 803ca84:	687b      	ldr	r3, [r7, #4]
 803ca86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ca8a:	687b      	ldr	r3, [r7, #4]
 803ca8c:	32b0      	adds	r2, #176	; 0xb0
 803ca8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803ca92:	687b      	ldr	r3, [r7, #4]
 803ca94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ca98:	687b      	ldr	r3, [r7, #4]
 803ca9a:	7c1b      	ldrb	r3, [r3, #16]
 803ca9c:	2b00      	cmp	r3, #0
 803ca9e:	d138      	bne.n	803cb12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803caa0:	4b5e      	ldr	r3, [pc, #376]	; (803cc1c <USBD_CDC_Init+0x1e4>)
 803caa2:	7819      	ldrb	r1, [r3, #0]
 803caa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 803caa8:	2202      	movs	r2, #2
 803caaa:	6878      	ldr	r0, [r7, #4]
 803caac:	f002 faff 	bl	803f0ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803cab0:	4b5a      	ldr	r3, [pc, #360]	; (803cc1c <USBD_CDC_Init+0x1e4>)
 803cab2:	781b      	ldrb	r3, [r3, #0]
 803cab4:	f003 020f 	and.w	r2, r3, #15
 803cab8:	6879      	ldr	r1, [r7, #4]
 803caba:	4613      	mov	r3, r2
 803cabc:	009b      	lsls	r3, r3, #2
 803cabe:	4413      	add	r3, r2
 803cac0:	009b      	lsls	r3, r3, #2
 803cac2:	440b      	add	r3, r1
 803cac4:	3324      	adds	r3, #36	; 0x24
 803cac6:	2201      	movs	r2, #1
 803cac8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803caca:	4b55      	ldr	r3, [pc, #340]	; (803cc20 <USBD_CDC_Init+0x1e8>)
 803cacc:	7819      	ldrb	r1, [r3, #0]
 803cace:	f44f 7300 	mov.w	r3, #512	; 0x200
 803cad2:	2202      	movs	r2, #2
 803cad4:	6878      	ldr	r0, [r7, #4]
 803cad6:	f002 faea 	bl	803f0ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803cada:	4b51      	ldr	r3, [pc, #324]	; (803cc20 <USBD_CDC_Init+0x1e8>)
 803cadc:	781b      	ldrb	r3, [r3, #0]
 803cade:	f003 020f 	and.w	r2, r3, #15
 803cae2:	6879      	ldr	r1, [r7, #4]
 803cae4:	4613      	mov	r3, r2
 803cae6:	009b      	lsls	r3, r3, #2
 803cae8:	4413      	add	r3, r2
 803caea:	009b      	lsls	r3, r3, #2
 803caec:	440b      	add	r3, r1
 803caee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803caf2:	2201      	movs	r2, #1
 803caf4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803caf6:	4b4b      	ldr	r3, [pc, #300]	; (803cc24 <USBD_CDC_Init+0x1ec>)
 803caf8:	781b      	ldrb	r3, [r3, #0]
 803cafa:	f003 020f 	and.w	r2, r3, #15
 803cafe:	6879      	ldr	r1, [r7, #4]
 803cb00:	4613      	mov	r3, r2
 803cb02:	009b      	lsls	r3, r3, #2
 803cb04:	4413      	add	r3, r2
 803cb06:	009b      	lsls	r3, r3, #2
 803cb08:	440b      	add	r3, r1
 803cb0a:	3326      	adds	r3, #38	; 0x26
 803cb0c:	2210      	movs	r2, #16
 803cb0e:	801a      	strh	r2, [r3, #0]
 803cb10:	e035      	b.n	803cb7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 803cb12:	4b42      	ldr	r3, [pc, #264]	; (803cc1c <USBD_CDC_Init+0x1e4>)
 803cb14:	7819      	ldrb	r1, [r3, #0]
 803cb16:	2340      	movs	r3, #64	; 0x40
 803cb18:	2202      	movs	r2, #2
 803cb1a:	6878      	ldr	r0, [r7, #4]
 803cb1c:	f002 fac7 	bl	803f0ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 803cb20:	4b3e      	ldr	r3, [pc, #248]	; (803cc1c <USBD_CDC_Init+0x1e4>)
 803cb22:	781b      	ldrb	r3, [r3, #0]
 803cb24:	f003 020f 	and.w	r2, r3, #15
 803cb28:	6879      	ldr	r1, [r7, #4]
 803cb2a:	4613      	mov	r3, r2
 803cb2c:	009b      	lsls	r3, r3, #2
 803cb2e:	4413      	add	r3, r2
 803cb30:	009b      	lsls	r3, r3, #2
 803cb32:	440b      	add	r3, r1
 803cb34:	3324      	adds	r3, #36	; 0x24
 803cb36:	2201      	movs	r2, #1
 803cb38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 803cb3a:	4b39      	ldr	r3, [pc, #228]	; (803cc20 <USBD_CDC_Init+0x1e8>)
 803cb3c:	7819      	ldrb	r1, [r3, #0]
 803cb3e:	2340      	movs	r3, #64	; 0x40
 803cb40:	2202      	movs	r2, #2
 803cb42:	6878      	ldr	r0, [r7, #4]
 803cb44:	f002 fab3 	bl	803f0ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 803cb48:	4b35      	ldr	r3, [pc, #212]	; (803cc20 <USBD_CDC_Init+0x1e8>)
 803cb4a:	781b      	ldrb	r3, [r3, #0]
 803cb4c:	f003 020f 	and.w	r2, r3, #15
 803cb50:	6879      	ldr	r1, [r7, #4]
 803cb52:	4613      	mov	r3, r2
 803cb54:	009b      	lsls	r3, r3, #2
 803cb56:	4413      	add	r3, r2
 803cb58:	009b      	lsls	r3, r3, #2
 803cb5a:	440b      	add	r3, r1
 803cb5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803cb60:	2201      	movs	r2, #1
 803cb62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 803cb64:	4b2f      	ldr	r3, [pc, #188]	; (803cc24 <USBD_CDC_Init+0x1ec>)
 803cb66:	781b      	ldrb	r3, [r3, #0]
 803cb68:	f003 020f 	and.w	r2, r3, #15
 803cb6c:	6879      	ldr	r1, [r7, #4]
 803cb6e:	4613      	mov	r3, r2
 803cb70:	009b      	lsls	r3, r3, #2
 803cb72:	4413      	add	r3, r2
 803cb74:	009b      	lsls	r3, r3, #2
 803cb76:	440b      	add	r3, r1
 803cb78:	3326      	adds	r3, #38	; 0x26
 803cb7a:	2210      	movs	r2, #16
 803cb7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 803cb7e:	4b29      	ldr	r3, [pc, #164]	; (803cc24 <USBD_CDC_Init+0x1ec>)
 803cb80:	7819      	ldrb	r1, [r3, #0]
 803cb82:	2308      	movs	r3, #8
 803cb84:	2203      	movs	r2, #3
 803cb86:	6878      	ldr	r0, [r7, #4]
 803cb88:	f002 fa91 	bl	803f0ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 803cb8c:	4b25      	ldr	r3, [pc, #148]	; (803cc24 <USBD_CDC_Init+0x1ec>)
 803cb8e:	781b      	ldrb	r3, [r3, #0]
 803cb90:	f003 020f 	and.w	r2, r3, #15
 803cb94:	6879      	ldr	r1, [r7, #4]
 803cb96:	4613      	mov	r3, r2
 803cb98:	009b      	lsls	r3, r3, #2
 803cb9a:	4413      	add	r3, r2
 803cb9c:	009b      	lsls	r3, r3, #2
 803cb9e:	440b      	add	r3, r1
 803cba0:	3324      	adds	r3, #36	; 0x24
 803cba2:	2201      	movs	r2, #1
 803cba4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803cba6:	68fb      	ldr	r3, [r7, #12]
 803cba8:	2200      	movs	r2, #0
 803cbaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 803cbae:	687b      	ldr	r3, [r7, #4]
 803cbb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cbb4:	687a      	ldr	r2, [r7, #4]
 803cbb6:	33b0      	adds	r3, #176	; 0xb0
 803cbb8:	009b      	lsls	r3, r3, #2
 803cbba:	4413      	add	r3, r2
 803cbbc:	685b      	ldr	r3, [r3, #4]
 803cbbe:	681b      	ldr	r3, [r3, #0]
 803cbc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803cbc2:	68fb      	ldr	r3, [r7, #12]
 803cbc4:	2200      	movs	r2, #0
 803cbc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 803cbca:	68fb      	ldr	r3, [r7, #12]
 803cbcc:	2200      	movs	r2, #0
 803cbce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 803cbd2:	68fb      	ldr	r3, [r7, #12]
 803cbd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 803cbd8:	2b00      	cmp	r3, #0
 803cbda:	d101      	bne.n	803cbe0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 803cbdc:	2302      	movs	r3, #2
 803cbde:	e018      	b.n	803cc12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803cbe0:	687b      	ldr	r3, [r7, #4]
 803cbe2:	7c1b      	ldrb	r3, [r3, #16]
 803cbe4:	2b00      	cmp	r3, #0
 803cbe6:	d10a      	bne.n	803cbfe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803cbe8:	4b0d      	ldr	r3, [pc, #52]	; (803cc20 <USBD_CDC_Init+0x1e8>)
 803cbea:	7819      	ldrb	r1, [r3, #0]
 803cbec:	68fb      	ldr	r3, [r7, #12]
 803cbee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803cbf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 803cbf6:	6878      	ldr	r0, [r7, #4]
 803cbf8:	f002 fb48 	bl	803f28c <USBD_LL_PrepareReceive>
 803cbfc:	e008      	b.n	803cc10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803cbfe:	4b08      	ldr	r3, [pc, #32]	; (803cc20 <USBD_CDC_Init+0x1e8>)
 803cc00:	7819      	ldrb	r1, [r3, #0]
 803cc02:	68fb      	ldr	r3, [r7, #12]
 803cc04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803cc08:	2340      	movs	r3, #64	; 0x40
 803cc0a:	6878      	ldr	r0, [r7, #4]
 803cc0c:	f002 fb3e 	bl	803f28c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803cc10:	2300      	movs	r3, #0
}
 803cc12:	4618      	mov	r0, r3
 803cc14:	3710      	adds	r7, #16
 803cc16:	46bd      	mov	sp, r7
 803cc18:	bd80      	pop	{r7, pc}
 803cc1a:	bf00      	nop
 803cc1c:	2400009b 	.word	0x2400009b
 803cc20:	2400009c 	.word	0x2400009c
 803cc24:	2400009d 	.word	0x2400009d

0803cc28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803cc28:	b580      	push	{r7, lr}
 803cc2a:	b082      	sub	sp, #8
 803cc2c:	af00      	add	r7, sp, #0
 803cc2e:	6078      	str	r0, [r7, #4]
 803cc30:	460b      	mov	r3, r1
 803cc32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 803cc34:	4b3a      	ldr	r3, [pc, #232]	; (803cd20 <USBD_CDC_DeInit+0xf8>)
 803cc36:	781b      	ldrb	r3, [r3, #0]
 803cc38:	4619      	mov	r1, r3
 803cc3a:	6878      	ldr	r0, [r7, #4]
 803cc3c:	f002 fa5d 	bl	803f0fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 803cc40:	4b37      	ldr	r3, [pc, #220]	; (803cd20 <USBD_CDC_DeInit+0xf8>)
 803cc42:	781b      	ldrb	r3, [r3, #0]
 803cc44:	f003 020f 	and.w	r2, r3, #15
 803cc48:	6879      	ldr	r1, [r7, #4]
 803cc4a:	4613      	mov	r3, r2
 803cc4c:	009b      	lsls	r3, r3, #2
 803cc4e:	4413      	add	r3, r2
 803cc50:	009b      	lsls	r3, r3, #2
 803cc52:	440b      	add	r3, r1
 803cc54:	3324      	adds	r3, #36	; 0x24
 803cc56:	2200      	movs	r2, #0
 803cc58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 803cc5a:	4b32      	ldr	r3, [pc, #200]	; (803cd24 <USBD_CDC_DeInit+0xfc>)
 803cc5c:	781b      	ldrb	r3, [r3, #0]
 803cc5e:	4619      	mov	r1, r3
 803cc60:	6878      	ldr	r0, [r7, #4]
 803cc62:	f002 fa4a 	bl	803f0fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 803cc66:	4b2f      	ldr	r3, [pc, #188]	; (803cd24 <USBD_CDC_DeInit+0xfc>)
 803cc68:	781b      	ldrb	r3, [r3, #0]
 803cc6a:	f003 020f 	and.w	r2, r3, #15
 803cc6e:	6879      	ldr	r1, [r7, #4]
 803cc70:	4613      	mov	r3, r2
 803cc72:	009b      	lsls	r3, r3, #2
 803cc74:	4413      	add	r3, r2
 803cc76:	009b      	lsls	r3, r3, #2
 803cc78:	440b      	add	r3, r1
 803cc7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803cc7e:	2200      	movs	r2, #0
 803cc80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803cc82:	4b29      	ldr	r3, [pc, #164]	; (803cd28 <USBD_CDC_DeInit+0x100>)
 803cc84:	781b      	ldrb	r3, [r3, #0]
 803cc86:	4619      	mov	r1, r3
 803cc88:	6878      	ldr	r0, [r7, #4]
 803cc8a:	f002 fa36 	bl	803f0fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 803cc8e:	4b26      	ldr	r3, [pc, #152]	; (803cd28 <USBD_CDC_DeInit+0x100>)
 803cc90:	781b      	ldrb	r3, [r3, #0]
 803cc92:	f003 020f 	and.w	r2, r3, #15
 803cc96:	6879      	ldr	r1, [r7, #4]
 803cc98:	4613      	mov	r3, r2
 803cc9a:	009b      	lsls	r3, r3, #2
 803cc9c:	4413      	add	r3, r2
 803cc9e:	009b      	lsls	r3, r3, #2
 803cca0:	440b      	add	r3, r1
 803cca2:	3324      	adds	r3, #36	; 0x24
 803cca4:	2200      	movs	r2, #0
 803cca6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 803cca8:	4b1f      	ldr	r3, [pc, #124]	; (803cd28 <USBD_CDC_DeInit+0x100>)
 803ccaa:	781b      	ldrb	r3, [r3, #0]
 803ccac:	f003 020f 	and.w	r2, r3, #15
 803ccb0:	6879      	ldr	r1, [r7, #4]
 803ccb2:	4613      	mov	r3, r2
 803ccb4:	009b      	lsls	r3, r3, #2
 803ccb6:	4413      	add	r3, r2
 803ccb8:	009b      	lsls	r3, r3, #2
 803ccba:	440b      	add	r3, r1
 803ccbc:	3326      	adds	r3, #38	; 0x26
 803ccbe:	2200      	movs	r2, #0
 803ccc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803ccc2:	687b      	ldr	r3, [r7, #4]
 803ccc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ccc8:	687b      	ldr	r3, [r7, #4]
 803ccca:	32b0      	adds	r2, #176	; 0xb0
 803cccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ccd0:	2b00      	cmp	r3, #0
 803ccd2:	d01f      	beq.n	803cd14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 803ccd4:	687b      	ldr	r3, [r7, #4]
 803ccd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803ccda:	687a      	ldr	r2, [r7, #4]
 803ccdc:	33b0      	adds	r3, #176	; 0xb0
 803ccde:	009b      	lsls	r3, r3, #2
 803cce0:	4413      	add	r3, r2
 803cce2:	685b      	ldr	r3, [r3, #4]
 803cce4:	685b      	ldr	r3, [r3, #4]
 803cce6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 803cce8:	687b      	ldr	r3, [r7, #4]
 803ccea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803ccee:	687b      	ldr	r3, [r7, #4]
 803ccf0:	32b0      	adds	r2, #176	; 0xb0
 803ccf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ccf6:	4618      	mov	r0, r3
 803ccf8:	f002 fb0a 	bl	803f310 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 803ccfc:	687b      	ldr	r3, [r7, #4]
 803ccfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cd02:	687b      	ldr	r3, [r7, #4]
 803cd04:	32b0      	adds	r2, #176	; 0xb0
 803cd06:	2100      	movs	r1, #0
 803cd08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 803cd0c:	687b      	ldr	r3, [r7, #4]
 803cd0e:	2200      	movs	r2, #0
 803cd10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 803cd14:	2300      	movs	r3, #0
}
 803cd16:	4618      	mov	r0, r3
 803cd18:	3708      	adds	r7, #8
 803cd1a:	46bd      	mov	sp, r7
 803cd1c:	bd80      	pop	{r7, pc}
 803cd1e:	bf00      	nop
 803cd20:	2400009b 	.word	0x2400009b
 803cd24:	2400009c 	.word	0x2400009c
 803cd28:	2400009d 	.word	0x2400009d

0803cd2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 803cd2c:	b580      	push	{r7, lr}
 803cd2e:	b086      	sub	sp, #24
 803cd30:	af00      	add	r7, sp, #0
 803cd32:	6078      	str	r0, [r7, #4]
 803cd34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803cd36:	687b      	ldr	r3, [r7, #4]
 803cd38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cd3c:	687b      	ldr	r3, [r7, #4]
 803cd3e:	32b0      	adds	r2, #176	; 0xb0
 803cd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cd44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 803cd46:	2300      	movs	r3, #0
 803cd48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 803cd4a:	2300      	movs	r3, #0
 803cd4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 803cd4e:	2300      	movs	r3, #0
 803cd50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 803cd52:	693b      	ldr	r3, [r7, #16]
 803cd54:	2b00      	cmp	r3, #0
 803cd56:	d101      	bne.n	803cd5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 803cd58:	2303      	movs	r3, #3
 803cd5a:	e0bf      	b.n	803cedc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803cd5c:	683b      	ldr	r3, [r7, #0]
 803cd5e:	781b      	ldrb	r3, [r3, #0]
 803cd60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803cd64:	2b00      	cmp	r3, #0
 803cd66:	d050      	beq.n	803ce0a <USBD_CDC_Setup+0xde>
 803cd68:	2b20      	cmp	r3, #32
 803cd6a:	f040 80af 	bne.w	803cecc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 803cd6e:	683b      	ldr	r3, [r7, #0]
 803cd70:	88db      	ldrh	r3, [r3, #6]
 803cd72:	2b00      	cmp	r3, #0
 803cd74:	d03a      	beq.n	803cdec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 803cd76:	683b      	ldr	r3, [r7, #0]
 803cd78:	781b      	ldrb	r3, [r3, #0]
 803cd7a:	b25b      	sxtb	r3, r3
 803cd7c:	2b00      	cmp	r3, #0
 803cd7e:	da1b      	bge.n	803cdb8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803cd80:	687b      	ldr	r3, [r7, #4]
 803cd82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cd86:	687a      	ldr	r2, [r7, #4]
 803cd88:	33b0      	adds	r3, #176	; 0xb0
 803cd8a:	009b      	lsls	r3, r3, #2
 803cd8c:	4413      	add	r3, r2
 803cd8e:	685b      	ldr	r3, [r3, #4]
 803cd90:	689b      	ldr	r3, [r3, #8]
 803cd92:	683a      	ldr	r2, [r7, #0]
 803cd94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803cd96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803cd98:	683a      	ldr	r2, [r7, #0]
 803cd9a:	88d2      	ldrh	r2, [r2, #6]
 803cd9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 803cd9e:	683b      	ldr	r3, [r7, #0]
 803cda0:	88db      	ldrh	r3, [r3, #6]
 803cda2:	2b07      	cmp	r3, #7
 803cda4:	bf28      	it	cs
 803cda6:	2307      	movcs	r3, #7
 803cda8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 803cdaa:	693b      	ldr	r3, [r7, #16]
 803cdac:	89fa      	ldrh	r2, [r7, #14]
 803cdae:	4619      	mov	r1, r3
 803cdb0:	6878      	ldr	r0, [r7, #4]
 803cdb2:	f001 fd43 	bl	803e83c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803cdb6:	e090      	b.n	803ceda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 803cdb8:	683b      	ldr	r3, [r7, #0]
 803cdba:	785a      	ldrb	r2, [r3, #1]
 803cdbc:	693b      	ldr	r3, [r7, #16]
 803cdbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803cdc2:	683b      	ldr	r3, [r7, #0]
 803cdc4:	88db      	ldrh	r3, [r3, #6]
 803cdc6:	2b3f      	cmp	r3, #63	; 0x3f
 803cdc8:	d803      	bhi.n	803cdd2 <USBD_CDC_Setup+0xa6>
 803cdca:	683b      	ldr	r3, [r7, #0]
 803cdcc:	88db      	ldrh	r3, [r3, #6]
 803cdce:	b2da      	uxtb	r2, r3
 803cdd0:	e000      	b.n	803cdd4 <USBD_CDC_Setup+0xa8>
 803cdd2:	2240      	movs	r2, #64	; 0x40
 803cdd4:	693b      	ldr	r3, [r7, #16]
 803cdd6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 803cdda:	6939      	ldr	r1, [r7, #16]
 803cddc:	693b      	ldr	r3, [r7, #16]
 803cdde:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 803cde2:	461a      	mov	r2, r3
 803cde4:	6878      	ldr	r0, [r7, #4]
 803cde6:	f001 fd55 	bl	803e894 <USBD_CtlPrepareRx>
      break;
 803cdea:	e076      	b.n	803ceda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 803cdec:	687b      	ldr	r3, [r7, #4]
 803cdee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cdf2:	687a      	ldr	r2, [r7, #4]
 803cdf4:	33b0      	adds	r3, #176	; 0xb0
 803cdf6:	009b      	lsls	r3, r3, #2
 803cdf8:	4413      	add	r3, r2
 803cdfa:	685b      	ldr	r3, [r3, #4]
 803cdfc:	689b      	ldr	r3, [r3, #8]
 803cdfe:	683a      	ldr	r2, [r7, #0]
 803ce00:	7850      	ldrb	r0, [r2, #1]
 803ce02:	2200      	movs	r2, #0
 803ce04:	6839      	ldr	r1, [r7, #0]
 803ce06:	4798      	blx	r3
      break;
 803ce08:	e067      	b.n	803ceda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803ce0a:	683b      	ldr	r3, [r7, #0]
 803ce0c:	785b      	ldrb	r3, [r3, #1]
 803ce0e:	2b0b      	cmp	r3, #11
 803ce10:	d851      	bhi.n	803ceb6 <USBD_CDC_Setup+0x18a>
 803ce12:	a201      	add	r2, pc, #4	; (adr r2, 803ce18 <USBD_CDC_Setup+0xec>)
 803ce14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ce18:	0803ce49 	.word	0x0803ce49
 803ce1c:	0803cec5 	.word	0x0803cec5
 803ce20:	0803ceb7 	.word	0x0803ceb7
 803ce24:	0803ceb7 	.word	0x0803ceb7
 803ce28:	0803ceb7 	.word	0x0803ceb7
 803ce2c:	0803ceb7 	.word	0x0803ceb7
 803ce30:	0803ceb7 	.word	0x0803ceb7
 803ce34:	0803ceb7 	.word	0x0803ceb7
 803ce38:	0803ceb7 	.word	0x0803ceb7
 803ce3c:	0803ceb7 	.word	0x0803ceb7
 803ce40:	0803ce73 	.word	0x0803ce73
 803ce44:	0803ce9d 	.word	0x0803ce9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ce48:	687b      	ldr	r3, [r7, #4]
 803ce4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ce4e:	b2db      	uxtb	r3, r3
 803ce50:	2b03      	cmp	r3, #3
 803ce52:	d107      	bne.n	803ce64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 803ce54:	f107 030a 	add.w	r3, r7, #10
 803ce58:	2202      	movs	r2, #2
 803ce5a:	4619      	mov	r1, r3
 803ce5c:	6878      	ldr	r0, [r7, #4]
 803ce5e:	f001 fced 	bl	803e83c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803ce62:	e032      	b.n	803ceca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803ce64:	6839      	ldr	r1, [r7, #0]
 803ce66:	6878      	ldr	r0, [r7, #4]
 803ce68:	f001 fc77 	bl	803e75a <USBD_CtlError>
            ret = USBD_FAIL;
 803ce6c:	2303      	movs	r3, #3
 803ce6e:	75fb      	strb	r3, [r7, #23]
          break;
 803ce70:	e02b      	b.n	803ceca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ce72:	687b      	ldr	r3, [r7, #4]
 803ce74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ce78:	b2db      	uxtb	r3, r3
 803ce7a:	2b03      	cmp	r3, #3
 803ce7c:	d107      	bne.n	803ce8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 803ce7e:	f107 030d 	add.w	r3, r7, #13
 803ce82:	2201      	movs	r2, #1
 803ce84:	4619      	mov	r1, r3
 803ce86:	6878      	ldr	r0, [r7, #4]
 803ce88:	f001 fcd8 	bl	803e83c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803ce8c:	e01d      	b.n	803ceca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803ce8e:	6839      	ldr	r1, [r7, #0]
 803ce90:	6878      	ldr	r0, [r7, #4]
 803ce92:	f001 fc62 	bl	803e75a <USBD_CtlError>
            ret = USBD_FAIL;
 803ce96:	2303      	movs	r3, #3
 803ce98:	75fb      	strb	r3, [r7, #23]
          break;
 803ce9a:	e016      	b.n	803ceca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 803ce9c:	687b      	ldr	r3, [r7, #4]
 803ce9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803cea2:	b2db      	uxtb	r3, r3
 803cea4:	2b03      	cmp	r3, #3
 803cea6:	d00f      	beq.n	803cec8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 803cea8:	6839      	ldr	r1, [r7, #0]
 803ceaa:	6878      	ldr	r0, [r7, #4]
 803ceac:	f001 fc55 	bl	803e75a <USBD_CtlError>
            ret = USBD_FAIL;
 803ceb0:	2303      	movs	r3, #3
 803ceb2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 803ceb4:	e008      	b.n	803cec8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803ceb6:	6839      	ldr	r1, [r7, #0]
 803ceb8:	6878      	ldr	r0, [r7, #4]
 803ceba:	f001 fc4e 	bl	803e75a <USBD_CtlError>
          ret = USBD_FAIL;
 803cebe:	2303      	movs	r3, #3
 803cec0:	75fb      	strb	r3, [r7, #23]
          break;
 803cec2:	e002      	b.n	803ceca <USBD_CDC_Setup+0x19e>
          break;
 803cec4:	bf00      	nop
 803cec6:	e008      	b.n	803ceda <USBD_CDC_Setup+0x1ae>
          break;
 803cec8:	bf00      	nop
      }
      break;
 803ceca:	e006      	b.n	803ceda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 803cecc:	6839      	ldr	r1, [r7, #0]
 803cece:	6878      	ldr	r0, [r7, #4]
 803ced0:	f001 fc43 	bl	803e75a <USBD_CtlError>
      ret = USBD_FAIL;
 803ced4:	2303      	movs	r3, #3
 803ced6:	75fb      	strb	r3, [r7, #23]
      break;
 803ced8:	bf00      	nop
  }

  return (uint8_t)ret;
 803ceda:	7dfb      	ldrb	r3, [r7, #23]
}
 803cedc:	4618      	mov	r0, r3
 803cede:	3718      	adds	r7, #24
 803cee0:	46bd      	mov	sp, r7
 803cee2:	bd80      	pop	{r7, pc}

0803cee4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803cee4:	b580      	push	{r7, lr}
 803cee6:	b084      	sub	sp, #16
 803cee8:	af00      	add	r7, sp, #0
 803ceea:	6078      	str	r0, [r7, #4]
 803ceec:	460b      	mov	r3, r1
 803ceee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 803cef0:	687b      	ldr	r3, [r7, #4]
 803cef2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803cef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803cef8:	687b      	ldr	r3, [r7, #4]
 803cefa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cefe:	687b      	ldr	r3, [r7, #4]
 803cf00:	32b0      	adds	r2, #176	; 0xb0
 803cf02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cf06:	2b00      	cmp	r3, #0
 803cf08:	d101      	bne.n	803cf0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 803cf0a:	2303      	movs	r3, #3
 803cf0c:	e065      	b.n	803cfda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803cf0e:	687b      	ldr	r3, [r7, #4]
 803cf10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cf14:	687b      	ldr	r3, [r7, #4]
 803cf16:	32b0      	adds	r2, #176	; 0xb0
 803cf18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cf1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803cf1e:	78fb      	ldrb	r3, [r7, #3]
 803cf20:	f003 020f 	and.w	r2, r3, #15
 803cf24:	6879      	ldr	r1, [r7, #4]
 803cf26:	4613      	mov	r3, r2
 803cf28:	009b      	lsls	r3, r3, #2
 803cf2a:	4413      	add	r3, r2
 803cf2c:	009b      	lsls	r3, r3, #2
 803cf2e:	440b      	add	r3, r1
 803cf30:	3318      	adds	r3, #24
 803cf32:	681b      	ldr	r3, [r3, #0]
 803cf34:	2b00      	cmp	r3, #0
 803cf36:	d02f      	beq.n	803cf98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 803cf38:	78fb      	ldrb	r3, [r7, #3]
 803cf3a:	f003 020f 	and.w	r2, r3, #15
 803cf3e:	6879      	ldr	r1, [r7, #4]
 803cf40:	4613      	mov	r3, r2
 803cf42:	009b      	lsls	r3, r3, #2
 803cf44:	4413      	add	r3, r2
 803cf46:	009b      	lsls	r3, r3, #2
 803cf48:	440b      	add	r3, r1
 803cf4a:	3318      	adds	r3, #24
 803cf4c:	681a      	ldr	r2, [r3, #0]
 803cf4e:	78fb      	ldrb	r3, [r7, #3]
 803cf50:	f003 010f 	and.w	r1, r3, #15
 803cf54:	68f8      	ldr	r0, [r7, #12]
 803cf56:	460b      	mov	r3, r1
 803cf58:	00db      	lsls	r3, r3, #3
 803cf5a:	440b      	add	r3, r1
 803cf5c:	009b      	lsls	r3, r3, #2
 803cf5e:	4403      	add	r3, r0
 803cf60:	3348      	adds	r3, #72	; 0x48
 803cf62:	681b      	ldr	r3, [r3, #0]
 803cf64:	fbb2 f1f3 	udiv	r1, r2, r3
 803cf68:	fb01 f303 	mul.w	r3, r1, r3
 803cf6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 803cf6e:	2b00      	cmp	r3, #0
 803cf70:	d112      	bne.n	803cf98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803cf72:	78fb      	ldrb	r3, [r7, #3]
 803cf74:	f003 020f 	and.w	r2, r3, #15
 803cf78:	6879      	ldr	r1, [r7, #4]
 803cf7a:	4613      	mov	r3, r2
 803cf7c:	009b      	lsls	r3, r3, #2
 803cf7e:	4413      	add	r3, r2
 803cf80:	009b      	lsls	r3, r3, #2
 803cf82:	440b      	add	r3, r1
 803cf84:	3318      	adds	r3, #24
 803cf86:	2200      	movs	r2, #0
 803cf88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 803cf8a:	78f9      	ldrb	r1, [r7, #3]
 803cf8c:	2300      	movs	r3, #0
 803cf8e:	2200      	movs	r2, #0
 803cf90:	6878      	ldr	r0, [r7, #4]
 803cf92:	f002 f95a 	bl	803f24a <USBD_LL_Transmit>
 803cf96:	e01f      	b.n	803cfd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 803cf98:	68bb      	ldr	r3, [r7, #8]
 803cf9a:	2200      	movs	r2, #0
 803cf9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 803cfa0:	687b      	ldr	r3, [r7, #4]
 803cfa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cfa6:	687a      	ldr	r2, [r7, #4]
 803cfa8:	33b0      	adds	r3, #176	; 0xb0
 803cfaa:	009b      	lsls	r3, r3, #2
 803cfac:	4413      	add	r3, r2
 803cfae:	685b      	ldr	r3, [r3, #4]
 803cfb0:	691b      	ldr	r3, [r3, #16]
 803cfb2:	2b00      	cmp	r3, #0
 803cfb4:	d010      	beq.n	803cfd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803cfb6:	687b      	ldr	r3, [r7, #4]
 803cfb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803cfbc:	687a      	ldr	r2, [r7, #4]
 803cfbe:	33b0      	adds	r3, #176	; 0xb0
 803cfc0:	009b      	lsls	r3, r3, #2
 803cfc2:	4413      	add	r3, r2
 803cfc4:	685b      	ldr	r3, [r3, #4]
 803cfc6:	691b      	ldr	r3, [r3, #16]
 803cfc8:	68ba      	ldr	r2, [r7, #8]
 803cfca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 803cfce:	68ba      	ldr	r2, [r7, #8]
 803cfd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 803cfd4:	78fa      	ldrb	r2, [r7, #3]
 803cfd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 803cfd8:	2300      	movs	r3, #0
}
 803cfda:	4618      	mov	r0, r3
 803cfdc:	3710      	adds	r7, #16
 803cfde:	46bd      	mov	sp, r7
 803cfe0:	bd80      	pop	{r7, pc}

0803cfe2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803cfe2:	b580      	push	{r7, lr}
 803cfe4:	b084      	sub	sp, #16
 803cfe6:	af00      	add	r7, sp, #0
 803cfe8:	6078      	str	r0, [r7, #4]
 803cfea:	460b      	mov	r3, r1
 803cfec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803cfee:	687b      	ldr	r3, [r7, #4]
 803cff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803cff4:	687b      	ldr	r3, [r7, #4]
 803cff6:	32b0      	adds	r2, #176	; 0xb0
 803cff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803cffc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803cffe:	687b      	ldr	r3, [r7, #4]
 803d000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d004:	687b      	ldr	r3, [r7, #4]
 803d006:	32b0      	adds	r2, #176	; 0xb0
 803d008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d00c:	2b00      	cmp	r3, #0
 803d00e:	d101      	bne.n	803d014 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 803d010:	2303      	movs	r3, #3
 803d012:	e01a      	b.n	803d04a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 803d014:	78fb      	ldrb	r3, [r7, #3]
 803d016:	4619      	mov	r1, r3
 803d018:	6878      	ldr	r0, [r7, #4]
 803d01a:	f002 f958 	bl	803f2ce <USBD_LL_GetRxDataSize>
 803d01e:	4602      	mov	r2, r0
 803d020:	68fb      	ldr	r3, [r7, #12]
 803d022:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 803d026:	687b      	ldr	r3, [r7, #4]
 803d028:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803d02c:	687a      	ldr	r2, [r7, #4]
 803d02e:	33b0      	adds	r3, #176	; 0xb0
 803d030:	009b      	lsls	r3, r3, #2
 803d032:	4413      	add	r3, r2
 803d034:	685b      	ldr	r3, [r3, #4]
 803d036:	68db      	ldr	r3, [r3, #12]
 803d038:	68fa      	ldr	r2, [r7, #12]
 803d03a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 803d03e:	68fa      	ldr	r2, [r7, #12]
 803d040:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 803d044:	4611      	mov	r1, r2
 803d046:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 803d048:	2300      	movs	r3, #0
}
 803d04a:	4618      	mov	r0, r3
 803d04c:	3710      	adds	r7, #16
 803d04e:	46bd      	mov	sp, r7
 803d050:	bd80      	pop	{r7, pc}

0803d052 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 803d052:	b580      	push	{r7, lr}
 803d054:	b084      	sub	sp, #16
 803d056:	af00      	add	r7, sp, #0
 803d058:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803d05a:	687b      	ldr	r3, [r7, #4]
 803d05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d060:	687b      	ldr	r3, [r7, #4]
 803d062:	32b0      	adds	r2, #176	; 0xb0
 803d064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d068:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803d06a:	68fb      	ldr	r3, [r7, #12]
 803d06c:	2b00      	cmp	r3, #0
 803d06e:	d101      	bne.n	803d074 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 803d070:	2303      	movs	r3, #3
 803d072:	e025      	b.n	803d0c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 803d074:	687b      	ldr	r3, [r7, #4]
 803d076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803d07a:	687a      	ldr	r2, [r7, #4]
 803d07c:	33b0      	adds	r3, #176	; 0xb0
 803d07e:	009b      	lsls	r3, r3, #2
 803d080:	4413      	add	r3, r2
 803d082:	685b      	ldr	r3, [r3, #4]
 803d084:	2b00      	cmp	r3, #0
 803d086:	d01a      	beq.n	803d0be <USBD_CDC_EP0_RxReady+0x6c>
 803d088:	68fb      	ldr	r3, [r7, #12]
 803d08a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 803d08e:	2bff      	cmp	r3, #255	; 0xff
 803d090:	d015      	beq.n	803d0be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803d092:	687b      	ldr	r3, [r7, #4]
 803d094:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803d098:	687a      	ldr	r2, [r7, #4]
 803d09a:	33b0      	adds	r3, #176	; 0xb0
 803d09c:	009b      	lsls	r3, r3, #2
 803d09e:	4413      	add	r3, r2
 803d0a0:	685b      	ldr	r3, [r3, #4]
 803d0a2:	689b      	ldr	r3, [r3, #8]
 803d0a4:	68fa      	ldr	r2, [r7, #12]
 803d0a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 803d0aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 803d0ac:	68fa      	ldr	r2, [r7, #12]
 803d0ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 803d0b2:	b292      	uxth	r2, r2
 803d0b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 803d0b6:	68fb      	ldr	r3, [r7, #12]
 803d0b8:	22ff      	movs	r2, #255	; 0xff
 803d0ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 803d0be:	2300      	movs	r3, #0
}
 803d0c0:	4618      	mov	r0, r3
 803d0c2:	3710      	adds	r7, #16
 803d0c4:	46bd      	mov	sp, r7
 803d0c6:	bd80      	pop	{r7, pc}

0803d0c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 803d0c8:	b580      	push	{r7, lr}
 803d0ca:	b086      	sub	sp, #24
 803d0cc:	af00      	add	r7, sp, #0
 803d0ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803d0d0:	2182      	movs	r1, #130	; 0x82
 803d0d2:	4818      	ldr	r0, [pc, #96]	; (803d134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803d0d4:	f000 fd09 	bl	803daea <USBD_GetEpDesc>
 803d0d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803d0da:	2101      	movs	r1, #1
 803d0dc:	4815      	ldr	r0, [pc, #84]	; (803d134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803d0de:	f000 fd04 	bl	803daea <USBD_GetEpDesc>
 803d0e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803d0e4:	2181      	movs	r1, #129	; 0x81
 803d0e6:	4813      	ldr	r0, [pc, #76]	; (803d134 <USBD_CDC_GetFSCfgDesc+0x6c>)
 803d0e8:	f000 fcff 	bl	803daea <USBD_GetEpDesc>
 803d0ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803d0ee:	697b      	ldr	r3, [r7, #20]
 803d0f0:	2b00      	cmp	r3, #0
 803d0f2:	d002      	beq.n	803d0fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803d0f4:	697b      	ldr	r3, [r7, #20]
 803d0f6:	2210      	movs	r2, #16
 803d0f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803d0fa:	693b      	ldr	r3, [r7, #16]
 803d0fc:	2b00      	cmp	r3, #0
 803d0fe:	d006      	beq.n	803d10e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803d100:	693b      	ldr	r3, [r7, #16]
 803d102:	2200      	movs	r2, #0
 803d104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803d108:	711a      	strb	r2, [r3, #4]
 803d10a:	2200      	movs	r2, #0
 803d10c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803d10e:	68fb      	ldr	r3, [r7, #12]
 803d110:	2b00      	cmp	r3, #0
 803d112:	d006      	beq.n	803d122 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803d114:	68fb      	ldr	r3, [r7, #12]
 803d116:	2200      	movs	r2, #0
 803d118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803d11c:	711a      	strb	r2, [r3, #4]
 803d11e:	2200      	movs	r2, #0
 803d120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803d122:	687b      	ldr	r3, [r7, #4]
 803d124:	2243      	movs	r2, #67	; 0x43
 803d126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803d128:	4b02      	ldr	r3, [pc, #8]	; (803d134 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 803d12a:	4618      	mov	r0, r3
 803d12c:	3718      	adds	r7, #24
 803d12e:	46bd      	mov	sp, r7
 803d130:	bd80      	pop	{r7, pc}
 803d132:	bf00      	nop
 803d134:	24000058 	.word	0x24000058

0803d138 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 803d138:	b580      	push	{r7, lr}
 803d13a:	b086      	sub	sp, #24
 803d13c:	af00      	add	r7, sp, #0
 803d13e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803d140:	2182      	movs	r1, #130	; 0x82
 803d142:	4818      	ldr	r0, [pc, #96]	; (803d1a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803d144:	f000 fcd1 	bl	803daea <USBD_GetEpDesc>
 803d148:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803d14a:	2101      	movs	r1, #1
 803d14c:	4815      	ldr	r0, [pc, #84]	; (803d1a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803d14e:	f000 fccc 	bl	803daea <USBD_GetEpDesc>
 803d152:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803d154:	2181      	movs	r1, #129	; 0x81
 803d156:	4813      	ldr	r0, [pc, #76]	; (803d1a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 803d158:	f000 fcc7 	bl	803daea <USBD_GetEpDesc>
 803d15c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803d15e:	697b      	ldr	r3, [r7, #20]
 803d160:	2b00      	cmp	r3, #0
 803d162:	d002      	beq.n	803d16a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 803d164:	697b      	ldr	r3, [r7, #20]
 803d166:	2210      	movs	r2, #16
 803d168:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803d16a:	693b      	ldr	r3, [r7, #16]
 803d16c:	2b00      	cmp	r3, #0
 803d16e:	d006      	beq.n	803d17e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803d170:	693b      	ldr	r3, [r7, #16]
 803d172:	2200      	movs	r2, #0
 803d174:	711a      	strb	r2, [r3, #4]
 803d176:	2200      	movs	r2, #0
 803d178:	f042 0202 	orr.w	r2, r2, #2
 803d17c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803d17e:	68fb      	ldr	r3, [r7, #12]
 803d180:	2b00      	cmp	r3, #0
 803d182:	d006      	beq.n	803d192 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 803d184:	68fb      	ldr	r3, [r7, #12]
 803d186:	2200      	movs	r2, #0
 803d188:	711a      	strb	r2, [r3, #4]
 803d18a:	2200      	movs	r2, #0
 803d18c:	f042 0202 	orr.w	r2, r2, #2
 803d190:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803d192:	687b      	ldr	r3, [r7, #4]
 803d194:	2243      	movs	r2, #67	; 0x43
 803d196:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803d198:	4b02      	ldr	r3, [pc, #8]	; (803d1a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 803d19a:	4618      	mov	r0, r3
 803d19c:	3718      	adds	r7, #24
 803d19e:	46bd      	mov	sp, r7
 803d1a0:	bd80      	pop	{r7, pc}
 803d1a2:	bf00      	nop
 803d1a4:	24000058 	.word	0x24000058

0803d1a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 803d1a8:	b580      	push	{r7, lr}
 803d1aa:	b086      	sub	sp, #24
 803d1ac:	af00      	add	r7, sp, #0
 803d1ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 803d1b0:	2182      	movs	r1, #130	; 0x82
 803d1b2:	4818      	ldr	r0, [pc, #96]	; (803d214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803d1b4:	f000 fc99 	bl	803daea <USBD_GetEpDesc>
 803d1b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 803d1ba:	2101      	movs	r1, #1
 803d1bc:	4815      	ldr	r0, [pc, #84]	; (803d214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803d1be:	f000 fc94 	bl	803daea <USBD_GetEpDesc>
 803d1c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 803d1c4:	2181      	movs	r1, #129	; 0x81
 803d1c6:	4813      	ldr	r0, [pc, #76]	; (803d214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 803d1c8:	f000 fc8f 	bl	803daea <USBD_GetEpDesc>
 803d1cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 803d1ce:	697b      	ldr	r3, [r7, #20]
 803d1d0:	2b00      	cmp	r3, #0
 803d1d2:	d002      	beq.n	803d1da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 803d1d4:	697b      	ldr	r3, [r7, #20]
 803d1d6:	2210      	movs	r2, #16
 803d1d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 803d1da:	693b      	ldr	r3, [r7, #16]
 803d1dc:	2b00      	cmp	r3, #0
 803d1de:	d006      	beq.n	803d1ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803d1e0:	693b      	ldr	r3, [r7, #16]
 803d1e2:	2200      	movs	r2, #0
 803d1e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803d1e8:	711a      	strb	r2, [r3, #4]
 803d1ea:	2200      	movs	r2, #0
 803d1ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 803d1ee:	68fb      	ldr	r3, [r7, #12]
 803d1f0:	2b00      	cmp	r3, #0
 803d1f2:	d006      	beq.n	803d202 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 803d1f4:	68fb      	ldr	r3, [r7, #12]
 803d1f6:	2200      	movs	r2, #0
 803d1f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803d1fc:	711a      	strb	r2, [r3, #4]
 803d1fe:	2200      	movs	r2, #0
 803d200:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 803d202:	687b      	ldr	r3, [r7, #4]
 803d204:	2243      	movs	r2, #67	; 0x43
 803d206:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 803d208:	4b02      	ldr	r3, [pc, #8]	; (803d214 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 803d20a:	4618      	mov	r0, r3
 803d20c:	3718      	adds	r7, #24
 803d20e:	46bd      	mov	sp, r7
 803d210:	bd80      	pop	{r7, pc}
 803d212:	bf00      	nop
 803d214:	24000058 	.word	0x24000058

0803d218 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 803d218:	b480      	push	{r7}
 803d21a:	b083      	sub	sp, #12
 803d21c:	af00      	add	r7, sp, #0
 803d21e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 803d220:	687b      	ldr	r3, [r7, #4]
 803d222:	220a      	movs	r2, #10
 803d224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 803d226:	4b03      	ldr	r3, [pc, #12]	; (803d234 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 803d228:	4618      	mov	r0, r3
 803d22a:	370c      	adds	r7, #12
 803d22c:	46bd      	mov	sp, r7
 803d22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d232:	4770      	bx	lr
 803d234:	24000014 	.word	0x24000014

0803d238 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 803d238:	b480      	push	{r7}
 803d23a:	b083      	sub	sp, #12
 803d23c:	af00      	add	r7, sp, #0
 803d23e:	6078      	str	r0, [r7, #4]
 803d240:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 803d242:	683b      	ldr	r3, [r7, #0]
 803d244:	2b00      	cmp	r3, #0
 803d246:	d101      	bne.n	803d24c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 803d248:	2303      	movs	r3, #3
 803d24a:	e009      	b.n	803d260 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 803d24c:	687b      	ldr	r3, [r7, #4]
 803d24e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803d252:	687a      	ldr	r2, [r7, #4]
 803d254:	33b0      	adds	r3, #176	; 0xb0
 803d256:	009b      	lsls	r3, r3, #2
 803d258:	4413      	add	r3, r2
 803d25a:	683a      	ldr	r2, [r7, #0]
 803d25c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 803d25e:	2300      	movs	r3, #0
}
 803d260:	4618      	mov	r0, r3
 803d262:	370c      	adds	r7, #12
 803d264:	46bd      	mov	sp, r7
 803d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d26a:	4770      	bx	lr

0803d26c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 803d26c:	b480      	push	{r7}
 803d26e:	b087      	sub	sp, #28
 803d270:	af00      	add	r7, sp, #0
 803d272:	60f8      	str	r0, [r7, #12]
 803d274:	60b9      	str	r1, [r7, #8]
 803d276:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803d278:	68fb      	ldr	r3, [r7, #12]
 803d27a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d27e:	68fb      	ldr	r3, [r7, #12]
 803d280:	32b0      	adds	r2, #176	; 0xb0
 803d282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d286:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 803d288:	697b      	ldr	r3, [r7, #20]
 803d28a:	2b00      	cmp	r3, #0
 803d28c:	d101      	bne.n	803d292 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 803d28e:	2303      	movs	r3, #3
 803d290:	e008      	b.n	803d2a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 803d292:	697b      	ldr	r3, [r7, #20]
 803d294:	68ba      	ldr	r2, [r7, #8]
 803d296:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 803d29a:	697b      	ldr	r3, [r7, #20]
 803d29c:	687a      	ldr	r2, [r7, #4]
 803d29e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 803d2a2:	2300      	movs	r3, #0
}
 803d2a4:	4618      	mov	r0, r3
 803d2a6:	371c      	adds	r7, #28
 803d2a8:	46bd      	mov	sp, r7
 803d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d2ae:	4770      	bx	lr

0803d2b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 803d2b0:	b480      	push	{r7}
 803d2b2:	b085      	sub	sp, #20
 803d2b4:	af00      	add	r7, sp, #0
 803d2b6:	6078      	str	r0, [r7, #4]
 803d2b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803d2ba:	687b      	ldr	r3, [r7, #4]
 803d2bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d2c0:	687b      	ldr	r3, [r7, #4]
 803d2c2:	32b0      	adds	r2, #176	; 0xb0
 803d2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d2c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 803d2ca:	68fb      	ldr	r3, [r7, #12]
 803d2cc:	2b00      	cmp	r3, #0
 803d2ce:	d101      	bne.n	803d2d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 803d2d0:	2303      	movs	r3, #3
 803d2d2:	e004      	b.n	803d2de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 803d2d4:	68fb      	ldr	r3, [r7, #12]
 803d2d6:	683a      	ldr	r2, [r7, #0]
 803d2d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 803d2dc:	2300      	movs	r3, #0
}
 803d2de:	4618      	mov	r0, r3
 803d2e0:	3714      	adds	r7, #20
 803d2e2:	46bd      	mov	sp, r7
 803d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d2e8:	4770      	bx	lr
	...

0803d2ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 803d2ec:	b580      	push	{r7, lr}
 803d2ee:	b084      	sub	sp, #16
 803d2f0:	af00      	add	r7, sp, #0
 803d2f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 803d2f4:	687b      	ldr	r3, [r7, #4]
 803d2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d2fa:	687b      	ldr	r3, [r7, #4]
 803d2fc:	32b0      	adds	r2, #176	; 0xb0
 803d2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d302:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 803d304:	687b      	ldr	r3, [r7, #4]
 803d306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d30a:	687b      	ldr	r3, [r7, #4]
 803d30c:	32b0      	adds	r2, #176	; 0xb0
 803d30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d312:	2b00      	cmp	r3, #0
 803d314:	d101      	bne.n	803d31a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 803d316:	2303      	movs	r3, #3
 803d318:	e018      	b.n	803d34c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 803d31a:	687b      	ldr	r3, [r7, #4]
 803d31c:	7c1b      	ldrb	r3, [r3, #16]
 803d31e:	2b00      	cmp	r3, #0
 803d320:	d10a      	bne.n	803d338 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803d322:	4b0c      	ldr	r3, [pc, #48]	; (803d354 <USBD_CDC_ReceivePacket+0x68>)
 803d324:	7819      	ldrb	r1, [r3, #0]
 803d326:	68fb      	ldr	r3, [r7, #12]
 803d328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803d32c:	f44f 7300 	mov.w	r3, #512	; 0x200
 803d330:	6878      	ldr	r0, [r7, #4]
 803d332:	f001 ffab 	bl	803f28c <USBD_LL_PrepareReceive>
 803d336:	e008      	b.n	803d34a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 803d338:	4b06      	ldr	r3, [pc, #24]	; (803d354 <USBD_CDC_ReceivePacket+0x68>)
 803d33a:	7819      	ldrb	r1, [r3, #0]
 803d33c:	68fb      	ldr	r3, [r7, #12]
 803d33e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803d342:	2340      	movs	r3, #64	; 0x40
 803d344:	6878      	ldr	r0, [r7, #4]
 803d346:	f001 ffa1 	bl	803f28c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 803d34a:	2300      	movs	r3, #0
}
 803d34c:	4618      	mov	r0, r3
 803d34e:	3710      	adds	r7, #16
 803d350:	46bd      	mov	sp, r7
 803d352:	bd80      	pop	{r7, pc}
 803d354:	2400009c 	.word	0x2400009c

0803d358 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 803d358:	b580      	push	{r7, lr}
 803d35a:	b086      	sub	sp, #24
 803d35c:	af00      	add	r7, sp, #0
 803d35e:	60f8      	str	r0, [r7, #12]
 803d360:	60b9      	str	r1, [r7, #8]
 803d362:	4613      	mov	r3, r2
 803d364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 803d366:	68fb      	ldr	r3, [r7, #12]
 803d368:	2b00      	cmp	r3, #0
 803d36a:	d101      	bne.n	803d370 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803d36c:	2303      	movs	r3, #3
 803d36e:	e01f      	b.n	803d3b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 803d370:	68fb      	ldr	r3, [r7, #12]
 803d372:	2200      	movs	r2, #0
 803d374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 803d378:	68fb      	ldr	r3, [r7, #12]
 803d37a:	2200      	movs	r2, #0
 803d37c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 803d380:	68fb      	ldr	r3, [r7, #12]
 803d382:	2200      	movs	r2, #0
 803d384:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 803d388:	68bb      	ldr	r3, [r7, #8]
 803d38a:	2b00      	cmp	r3, #0
 803d38c:	d003      	beq.n	803d396 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 803d38e:	68fb      	ldr	r3, [r7, #12]
 803d390:	68ba      	ldr	r2, [r7, #8]
 803d392:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803d396:	68fb      	ldr	r3, [r7, #12]
 803d398:	2201      	movs	r2, #1
 803d39a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 803d39e:	68fb      	ldr	r3, [r7, #12]
 803d3a0:	79fa      	ldrb	r2, [r7, #7]
 803d3a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 803d3a4:	68f8      	ldr	r0, [r7, #12]
 803d3a6:	f001 fe17 	bl	803efd8 <USBD_LL_Init>
 803d3aa:	4603      	mov	r3, r0
 803d3ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 803d3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 803d3b0:	4618      	mov	r0, r3
 803d3b2:	3718      	adds	r7, #24
 803d3b4:	46bd      	mov	sp, r7
 803d3b6:	bd80      	pop	{r7, pc}

0803d3b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 803d3b8:	b580      	push	{r7, lr}
 803d3ba:	b084      	sub	sp, #16
 803d3bc:	af00      	add	r7, sp, #0
 803d3be:	6078      	str	r0, [r7, #4]
 803d3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803d3c2:	2300      	movs	r3, #0
 803d3c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 803d3c6:	683b      	ldr	r3, [r7, #0]
 803d3c8:	2b00      	cmp	r3, #0
 803d3ca:	d101      	bne.n	803d3d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 803d3cc:	2303      	movs	r3, #3
 803d3ce:	e025      	b.n	803d41c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 803d3d0:	687b      	ldr	r3, [r7, #4]
 803d3d2:	683a      	ldr	r2, [r7, #0]
 803d3d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 803d3d8:	687b      	ldr	r3, [r7, #4]
 803d3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d3de:	687b      	ldr	r3, [r7, #4]
 803d3e0:	32ae      	adds	r2, #174	; 0xae
 803d3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803d3e8:	2b00      	cmp	r3, #0
 803d3ea:	d00f      	beq.n	803d40c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 803d3ec:	687b      	ldr	r3, [r7, #4]
 803d3ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d3f2:	687b      	ldr	r3, [r7, #4]
 803d3f4:	32ae      	adds	r2, #174	; 0xae
 803d3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803d3fc:	f107 020e 	add.w	r2, r7, #14
 803d400:	4610      	mov	r0, r2
 803d402:	4798      	blx	r3
 803d404:	4602      	mov	r2, r0
 803d406:	687b      	ldr	r3, [r7, #4]
 803d408:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 803d40c:	687b      	ldr	r3, [r7, #4]
 803d40e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 803d412:	1c5a      	adds	r2, r3, #1
 803d414:	687b      	ldr	r3, [r7, #4]
 803d416:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 803d41a:	2300      	movs	r3, #0
}
 803d41c:	4618      	mov	r0, r3
 803d41e:	3710      	adds	r7, #16
 803d420:	46bd      	mov	sp, r7
 803d422:	bd80      	pop	{r7, pc}

0803d424 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 803d424:	b580      	push	{r7, lr}
 803d426:	b082      	sub	sp, #8
 803d428:	af00      	add	r7, sp, #0
 803d42a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 803d42c:	6878      	ldr	r0, [r7, #4]
 803d42e:	f001 fe23 	bl	803f078 <USBD_LL_Start>
 803d432:	4603      	mov	r3, r0
}
 803d434:	4618      	mov	r0, r3
 803d436:	3708      	adds	r7, #8
 803d438:	46bd      	mov	sp, r7
 803d43a:	bd80      	pop	{r7, pc}

0803d43c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 803d43c:	b480      	push	{r7}
 803d43e:	b083      	sub	sp, #12
 803d440:	af00      	add	r7, sp, #0
 803d442:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803d444:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 803d446:	4618      	mov	r0, r3
 803d448:	370c      	adds	r7, #12
 803d44a:	46bd      	mov	sp, r7
 803d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d450:	4770      	bx	lr

0803d452 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803d452:	b580      	push	{r7, lr}
 803d454:	b084      	sub	sp, #16
 803d456:	af00      	add	r7, sp, #0
 803d458:	6078      	str	r0, [r7, #4]
 803d45a:	460b      	mov	r3, r1
 803d45c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803d45e:	2300      	movs	r3, #0
 803d460:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803d462:	687b      	ldr	r3, [r7, #4]
 803d464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d468:	2b00      	cmp	r3, #0
 803d46a:	d009      	beq.n	803d480 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 803d46c:	687b      	ldr	r3, [r7, #4]
 803d46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d472:	681b      	ldr	r3, [r3, #0]
 803d474:	78fa      	ldrb	r2, [r7, #3]
 803d476:	4611      	mov	r1, r2
 803d478:	6878      	ldr	r0, [r7, #4]
 803d47a:	4798      	blx	r3
 803d47c:	4603      	mov	r3, r0
 803d47e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803d480:	7bfb      	ldrb	r3, [r7, #15]
}
 803d482:	4618      	mov	r0, r3
 803d484:	3710      	adds	r7, #16
 803d486:	46bd      	mov	sp, r7
 803d488:	bd80      	pop	{r7, pc}

0803d48a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 803d48a:	b580      	push	{r7, lr}
 803d48c:	b084      	sub	sp, #16
 803d48e:	af00      	add	r7, sp, #0
 803d490:	6078      	str	r0, [r7, #4]
 803d492:	460b      	mov	r3, r1
 803d494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 803d496:	2300      	movs	r3, #0
 803d498:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 803d49a:	687b      	ldr	r3, [r7, #4]
 803d49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d4a0:	685b      	ldr	r3, [r3, #4]
 803d4a2:	78fa      	ldrb	r2, [r7, #3]
 803d4a4:	4611      	mov	r1, r2
 803d4a6:	6878      	ldr	r0, [r7, #4]
 803d4a8:	4798      	blx	r3
 803d4aa:	4603      	mov	r3, r0
 803d4ac:	2b00      	cmp	r3, #0
 803d4ae:	d001      	beq.n	803d4b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 803d4b0:	2303      	movs	r3, #3
 803d4b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803d4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 803d4b6:	4618      	mov	r0, r3
 803d4b8:	3710      	adds	r7, #16
 803d4ba:	46bd      	mov	sp, r7
 803d4bc:	bd80      	pop	{r7, pc}

0803d4be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 803d4be:	b580      	push	{r7, lr}
 803d4c0:	b084      	sub	sp, #16
 803d4c2:	af00      	add	r7, sp, #0
 803d4c4:	6078      	str	r0, [r7, #4]
 803d4c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 803d4c8:	687b      	ldr	r3, [r7, #4]
 803d4ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803d4ce:	6839      	ldr	r1, [r7, #0]
 803d4d0:	4618      	mov	r0, r3
 803d4d2:	f001 f908 	bl	803e6e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 803d4d6:	687b      	ldr	r3, [r7, #4]
 803d4d8:	2201      	movs	r2, #1
 803d4da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 803d4de:	687b      	ldr	r3, [r7, #4]
 803d4e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 803d4e4:	461a      	mov	r2, r3
 803d4e6:	687b      	ldr	r3, [r7, #4]
 803d4e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 803d4ec:	687b      	ldr	r3, [r7, #4]
 803d4ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803d4f2:	f003 031f 	and.w	r3, r3, #31
 803d4f6:	2b02      	cmp	r3, #2
 803d4f8:	d01a      	beq.n	803d530 <USBD_LL_SetupStage+0x72>
 803d4fa:	2b02      	cmp	r3, #2
 803d4fc:	d822      	bhi.n	803d544 <USBD_LL_SetupStage+0x86>
 803d4fe:	2b00      	cmp	r3, #0
 803d500:	d002      	beq.n	803d508 <USBD_LL_SetupStage+0x4a>
 803d502:	2b01      	cmp	r3, #1
 803d504:	d00a      	beq.n	803d51c <USBD_LL_SetupStage+0x5e>
 803d506:	e01d      	b.n	803d544 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 803d508:	687b      	ldr	r3, [r7, #4]
 803d50a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803d50e:	4619      	mov	r1, r3
 803d510:	6878      	ldr	r0, [r7, #4]
 803d512:	f000 fb5f 	bl	803dbd4 <USBD_StdDevReq>
 803d516:	4603      	mov	r3, r0
 803d518:	73fb      	strb	r3, [r7, #15]
      break;
 803d51a:	e020      	b.n	803d55e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 803d51c:	687b      	ldr	r3, [r7, #4]
 803d51e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803d522:	4619      	mov	r1, r3
 803d524:	6878      	ldr	r0, [r7, #4]
 803d526:	f000 fbc7 	bl	803dcb8 <USBD_StdItfReq>
 803d52a:	4603      	mov	r3, r0
 803d52c:	73fb      	strb	r3, [r7, #15]
      break;
 803d52e:	e016      	b.n	803d55e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 803d530:	687b      	ldr	r3, [r7, #4]
 803d532:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 803d536:	4619      	mov	r1, r3
 803d538:	6878      	ldr	r0, [r7, #4]
 803d53a:	f000 fc29 	bl	803dd90 <USBD_StdEPReq>
 803d53e:	4603      	mov	r3, r0
 803d540:	73fb      	strb	r3, [r7, #15]
      break;
 803d542:	e00c      	b.n	803d55e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 803d544:	687b      	ldr	r3, [r7, #4]
 803d546:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803d54a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 803d54e:	b2db      	uxtb	r3, r3
 803d550:	4619      	mov	r1, r3
 803d552:	6878      	ldr	r0, [r7, #4]
 803d554:	f001 fdf0 	bl	803f138 <USBD_LL_StallEP>
 803d558:	4603      	mov	r3, r0
 803d55a:	73fb      	strb	r3, [r7, #15]
      break;
 803d55c:	bf00      	nop
  }

  return ret;
 803d55e:	7bfb      	ldrb	r3, [r7, #15]
}
 803d560:	4618      	mov	r0, r3
 803d562:	3710      	adds	r7, #16
 803d564:	46bd      	mov	sp, r7
 803d566:	bd80      	pop	{r7, pc}

0803d568 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 803d568:	b580      	push	{r7, lr}
 803d56a:	b086      	sub	sp, #24
 803d56c:	af00      	add	r7, sp, #0
 803d56e:	60f8      	str	r0, [r7, #12]
 803d570:	460b      	mov	r3, r1
 803d572:	607a      	str	r2, [r7, #4]
 803d574:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 803d576:	2300      	movs	r3, #0
 803d578:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 803d57a:	7afb      	ldrb	r3, [r7, #11]
 803d57c:	2b00      	cmp	r3, #0
 803d57e:	d16e      	bne.n	803d65e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 803d580:	68fb      	ldr	r3, [r7, #12]
 803d582:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 803d586:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 803d588:	68fb      	ldr	r3, [r7, #12]
 803d58a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803d58e:	2b03      	cmp	r3, #3
 803d590:	f040 8098 	bne.w	803d6c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 803d594:	693b      	ldr	r3, [r7, #16]
 803d596:	689a      	ldr	r2, [r3, #8]
 803d598:	693b      	ldr	r3, [r7, #16]
 803d59a:	68db      	ldr	r3, [r3, #12]
 803d59c:	429a      	cmp	r2, r3
 803d59e:	d913      	bls.n	803d5c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 803d5a0:	693b      	ldr	r3, [r7, #16]
 803d5a2:	689a      	ldr	r2, [r3, #8]
 803d5a4:	693b      	ldr	r3, [r7, #16]
 803d5a6:	68db      	ldr	r3, [r3, #12]
 803d5a8:	1ad2      	subs	r2, r2, r3
 803d5aa:	693b      	ldr	r3, [r7, #16]
 803d5ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 803d5ae:	693b      	ldr	r3, [r7, #16]
 803d5b0:	68da      	ldr	r2, [r3, #12]
 803d5b2:	693b      	ldr	r3, [r7, #16]
 803d5b4:	689b      	ldr	r3, [r3, #8]
 803d5b6:	4293      	cmp	r3, r2
 803d5b8:	bf28      	it	cs
 803d5ba:	4613      	movcs	r3, r2
 803d5bc:	461a      	mov	r2, r3
 803d5be:	6879      	ldr	r1, [r7, #4]
 803d5c0:	68f8      	ldr	r0, [r7, #12]
 803d5c2:	f001 f984 	bl	803e8ce <USBD_CtlContinueRx>
 803d5c6:	e07d      	b.n	803d6c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 803d5c8:	68fb      	ldr	r3, [r7, #12]
 803d5ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 803d5ce:	f003 031f 	and.w	r3, r3, #31
 803d5d2:	2b02      	cmp	r3, #2
 803d5d4:	d014      	beq.n	803d600 <USBD_LL_DataOutStage+0x98>
 803d5d6:	2b02      	cmp	r3, #2
 803d5d8:	d81d      	bhi.n	803d616 <USBD_LL_DataOutStage+0xae>
 803d5da:	2b00      	cmp	r3, #0
 803d5dc:	d002      	beq.n	803d5e4 <USBD_LL_DataOutStage+0x7c>
 803d5de:	2b01      	cmp	r3, #1
 803d5e0:	d003      	beq.n	803d5ea <USBD_LL_DataOutStage+0x82>
 803d5e2:	e018      	b.n	803d616 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 803d5e4:	2300      	movs	r3, #0
 803d5e6:	75bb      	strb	r3, [r7, #22]
            break;
 803d5e8:	e018      	b.n	803d61c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 803d5ea:	68fb      	ldr	r3, [r7, #12]
 803d5ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803d5f0:	b2db      	uxtb	r3, r3
 803d5f2:	4619      	mov	r1, r3
 803d5f4:	68f8      	ldr	r0, [r7, #12]
 803d5f6:	f000 fa5e 	bl	803dab6 <USBD_CoreFindIF>
 803d5fa:	4603      	mov	r3, r0
 803d5fc:	75bb      	strb	r3, [r7, #22]
            break;
 803d5fe:	e00d      	b.n	803d61c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 803d600:	68fb      	ldr	r3, [r7, #12]
 803d602:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 803d606:	b2db      	uxtb	r3, r3
 803d608:	4619      	mov	r1, r3
 803d60a:	68f8      	ldr	r0, [r7, #12]
 803d60c:	f000 fa60 	bl	803dad0 <USBD_CoreFindEP>
 803d610:	4603      	mov	r3, r0
 803d612:	75bb      	strb	r3, [r7, #22]
            break;
 803d614:	e002      	b.n	803d61c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 803d616:	2300      	movs	r3, #0
 803d618:	75bb      	strb	r3, [r7, #22]
            break;
 803d61a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 803d61c:	7dbb      	ldrb	r3, [r7, #22]
 803d61e:	2b00      	cmp	r3, #0
 803d620:	d119      	bne.n	803d656 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d622:	68fb      	ldr	r3, [r7, #12]
 803d624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d628:	b2db      	uxtb	r3, r3
 803d62a:	2b03      	cmp	r3, #3
 803d62c:	d113      	bne.n	803d656 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 803d62e:	7dba      	ldrb	r2, [r7, #22]
 803d630:	68fb      	ldr	r3, [r7, #12]
 803d632:	32ae      	adds	r2, #174	; 0xae
 803d634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d638:	691b      	ldr	r3, [r3, #16]
 803d63a:	2b00      	cmp	r3, #0
 803d63c:	d00b      	beq.n	803d656 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 803d63e:	7dba      	ldrb	r2, [r7, #22]
 803d640:	68fb      	ldr	r3, [r7, #12]
 803d642:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 803d646:	7dba      	ldrb	r2, [r7, #22]
 803d648:	68fb      	ldr	r3, [r7, #12]
 803d64a:	32ae      	adds	r2, #174	; 0xae
 803d64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d650:	691b      	ldr	r3, [r3, #16]
 803d652:	68f8      	ldr	r0, [r7, #12]
 803d654:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 803d656:	68f8      	ldr	r0, [r7, #12]
 803d658:	f001 f94a 	bl	803e8f0 <USBD_CtlSendStatus>
 803d65c:	e032      	b.n	803d6c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 803d65e:	7afb      	ldrb	r3, [r7, #11]
 803d660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803d664:	b2db      	uxtb	r3, r3
 803d666:	4619      	mov	r1, r3
 803d668:	68f8      	ldr	r0, [r7, #12]
 803d66a:	f000 fa31 	bl	803dad0 <USBD_CoreFindEP>
 803d66e:	4603      	mov	r3, r0
 803d670:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803d672:	7dbb      	ldrb	r3, [r7, #22]
 803d674:	2bff      	cmp	r3, #255	; 0xff
 803d676:	d025      	beq.n	803d6c4 <USBD_LL_DataOutStage+0x15c>
 803d678:	7dbb      	ldrb	r3, [r7, #22]
 803d67a:	2b00      	cmp	r3, #0
 803d67c:	d122      	bne.n	803d6c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d67e:	68fb      	ldr	r3, [r7, #12]
 803d680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d684:	b2db      	uxtb	r3, r3
 803d686:	2b03      	cmp	r3, #3
 803d688:	d117      	bne.n	803d6ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 803d68a:	7dba      	ldrb	r2, [r7, #22]
 803d68c:	68fb      	ldr	r3, [r7, #12]
 803d68e:	32ae      	adds	r2, #174	; 0xae
 803d690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d694:	699b      	ldr	r3, [r3, #24]
 803d696:	2b00      	cmp	r3, #0
 803d698:	d00f      	beq.n	803d6ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 803d69a:	7dba      	ldrb	r2, [r7, #22]
 803d69c:	68fb      	ldr	r3, [r7, #12]
 803d69e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 803d6a2:	7dba      	ldrb	r2, [r7, #22]
 803d6a4:	68fb      	ldr	r3, [r7, #12]
 803d6a6:	32ae      	adds	r2, #174	; 0xae
 803d6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d6ac:	699b      	ldr	r3, [r3, #24]
 803d6ae:	7afa      	ldrb	r2, [r7, #11]
 803d6b0:	4611      	mov	r1, r2
 803d6b2:	68f8      	ldr	r0, [r7, #12]
 803d6b4:	4798      	blx	r3
 803d6b6:	4603      	mov	r3, r0
 803d6b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803d6ba:	7dfb      	ldrb	r3, [r7, #23]
 803d6bc:	2b00      	cmp	r3, #0
 803d6be:	d001      	beq.n	803d6c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 803d6c0:	7dfb      	ldrb	r3, [r7, #23]
 803d6c2:	e000      	b.n	803d6c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 803d6c4:	2300      	movs	r3, #0
}
 803d6c6:	4618      	mov	r0, r3
 803d6c8:	3718      	adds	r7, #24
 803d6ca:	46bd      	mov	sp, r7
 803d6cc:	bd80      	pop	{r7, pc}

0803d6ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803d6ce:	b580      	push	{r7, lr}
 803d6d0:	b086      	sub	sp, #24
 803d6d2:	af00      	add	r7, sp, #0
 803d6d4:	60f8      	str	r0, [r7, #12]
 803d6d6:	460b      	mov	r3, r1
 803d6d8:	607a      	str	r2, [r7, #4]
 803d6da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 803d6dc:	7afb      	ldrb	r3, [r7, #11]
 803d6de:	2b00      	cmp	r3, #0
 803d6e0:	d16f      	bne.n	803d7c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 803d6e2:	68fb      	ldr	r3, [r7, #12]
 803d6e4:	3314      	adds	r3, #20
 803d6e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803d6e8:	68fb      	ldr	r3, [r7, #12]
 803d6ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803d6ee:	2b02      	cmp	r3, #2
 803d6f0:	d15a      	bne.n	803d7a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 803d6f2:	693b      	ldr	r3, [r7, #16]
 803d6f4:	689a      	ldr	r2, [r3, #8]
 803d6f6:	693b      	ldr	r3, [r7, #16]
 803d6f8:	68db      	ldr	r3, [r3, #12]
 803d6fa:	429a      	cmp	r2, r3
 803d6fc:	d914      	bls.n	803d728 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803d6fe:	693b      	ldr	r3, [r7, #16]
 803d700:	689a      	ldr	r2, [r3, #8]
 803d702:	693b      	ldr	r3, [r7, #16]
 803d704:	68db      	ldr	r3, [r3, #12]
 803d706:	1ad2      	subs	r2, r2, r3
 803d708:	693b      	ldr	r3, [r7, #16]
 803d70a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803d70c:	693b      	ldr	r3, [r7, #16]
 803d70e:	689b      	ldr	r3, [r3, #8]
 803d710:	461a      	mov	r2, r3
 803d712:	6879      	ldr	r1, [r7, #4]
 803d714:	68f8      	ldr	r0, [r7, #12]
 803d716:	f001 f8ac 	bl	803e872 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803d71a:	2300      	movs	r3, #0
 803d71c:	2200      	movs	r2, #0
 803d71e:	2100      	movs	r1, #0
 803d720:	68f8      	ldr	r0, [r7, #12]
 803d722:	f001 fdb3 	bl	803f28c <USBD_LL_PrepareReceive>
 803d726:	e03f      	b.n	803d7a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803d728:	693b      	ldr	r3, [r7, #16]
 803d72a:	68da      	ldr	r2, [r3, #12]
 803d72c:	693b      	ldr	r3, [r7, #16]
 803d72e:	689b      	ldr	r3, [r3, #8]
 803d730:	429a      	cmp	r2, r3
 803d732:	d11c      	bne.n	803d76e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803d734:	693b      	ldr	r3, [r7, #16]
 803d736:	685a      	ldr	r2, [r3, #4]
 803d738:	693b      	ldr	r3, [r7, #16]
 803d73a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803d73c:	429a      	cmp	r2, r3
 803d73e:	d316      	bcc.n	803d76e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803d740:	693b      	ldr	r3, [r7, #16]
 803d742:	685a      	ldr	r2, [r3, #4]
 803d744:	68fb      	ldr	r3, [r7, #12]
 803d746:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803d74a:	429a      	cmp	r2, r3
 803d74c:	d20f      	bcs.n	803d76e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803d74e:	2200      	movs	r2, #0
 803d750:	2100      	movs	r1, #0
 803d752:	68f8      	ldr	r0, [r7, #12]
 803d754:	f001 f88d 	bl	803e872 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803d758:	68fb      	ldr	r3, [r7, #12]
 803d75a:	2200      	movs	r2, #0
 803d75c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803d760:	2300      	movs	r3, #0
 803d762:	2200      	movs	r2, #0
 803d764:	2100      	movs	r1, #0
 803d766:	68f8      	ldr	r0, [r7, #12]
 803d768:	f001 fd90 	bl	803f28c <USBD_LL_PrepareReceive>
 803d76c:	e01c      	b.n	803d7a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d76e:	68fb      	ldr	r3, [r7, #12]
 803d770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d774:	b2db      	uxtb	r3, r3
 803d776:	2b03      	cmp	r3, #3
 803d778:	d10f      	bne.n	803d79a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803d77a:	68fb      	ldr	r3, [r7, #12]
 803d77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d780:	68db      	ldr	r3, [r3, #12]
 803d782:	2b00      	cmp	r3, #0
 803d784:	d009      	beq.n	803d79a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803d786:	68fb      	ldr	r3, [r7, #12]
 803d788:	2200      	movs	r2, #0
 803d78a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803d78e:	68fb      	ldr	r3, [r7, #12]
 803d790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d794:	68db      	ldr	r3, [r3, #12]
 803d796:	68f8      	ldr	r0, [r7, #12]
 803d798:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803d79a:	2180      	movs	r1, #128	; 0x80
 803d79c:	68f8      	ldr	r0, [r7, #12]
 803d79e:	f001 fccb 	bl	803f138 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803d7a2:	68f8      	ldr	r0, [r7, #12]
 803d7a4:	f001 f8b7 	bl	803e916 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803d7a8:	68fb      	ldr	r3, [r7, #12]
 803d7aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803d7ae:	2b00      	cmp	r3, #0
 803d7b0:	d03a      	beq.n	803d828 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803d7b2:	68f8      	ldr	r0, [r7, #12]
 803d7b4:	f7ff fe42 	bl	803d43c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803d7b8:	68fb      	ldr	r3, [r7, #12]
 803d7ba:	2200      	movs	r2, #0
 803d7bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803d7c0:	e032      	b.n	803d828 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803d7c2:	7afb      	ldrb	r3, [r7, #11]
 803d7c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803d7c8:	b2db      	uxtb	r3, r3
 803d7ca:	4619      	mov	r1, r3
 803d7cc:	68f8      	ldr	r0, [r7, #12]
 803d7ce:	f000 f97f 	bl	803dad0 <USBD_CoreFindEP>
 803d7d2:	4603      	mov	r3, r0
 803d7d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803d7d6:	7dfb      	ldrb	r3, [r7, #23]
 803d7d8:	2bff      	cmp	r3, #255	; 0xff
 803d7da:	d025      	beq.n	803d828 <USBD_LL_DataInStage+0x15a>
 803d7dc:	7dfb      	ldrb	r3, [r7, #23]
 803d7de:	2b00      	cmp	r3, #0
 803d7e0:	d122      	bne.n	803d828 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d7e2:	68fb      	ldr	r3, [r7, #12]
 803d7e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d7e8:	b2db      	uxtb	r3, r3
 803d7ea:	2b03      	cmp	r3, #3
 803d7ec:	d11c      	bne.n	803d828 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803d7ee:	7dfa      	ldrb	r2, [r7, #23]
 803d7f0:	68fb      	ldr	r3, [r7, #12]
 803d7f2:	32ae      	adds	r2, #174	; 0xae
 803d7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d7f8:	695b      	ldr	r3, [r3, #20]
 803d7fa:	2b00      	cmp	r3, #0
 803d7fc:	d014      	beq.n	803d828 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803d7fe:	7dfa      	ldrb	r2, [r7, #23]
 803d800:	68fb      	ldr	r3, [r7, #12]
 803d802:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803d806:	7dfa      	ldrb	r2, [r7, #23]
 803d808:	68fb      	ldr	r3, [r7, #12]
 803d80a:	32ae      	adds	r2, #174	; 0xae
 803d80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d810:	695b      	ldr	r3, [r3, #20]
 803d812:	7afa      	ldrb	r2, [r7, #11]
 803d814:	4611      	mov	r1, r2
 803d816:	68f8      	ldr	r0, [r7, #12]
 803d818:	4798      	blx	r3
 803d81a:	4603      	mov	r3, r0
 803d81c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803d81e:	7dbb      	ldrb	r3, [r7, #22]
 803d820:	2b00      	cmp	r3, #0
 803d822:	d001      	beq.n	803d828 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803d824:	7dbb      	ldrb	r3, [r7, #22]
 803d826:	e000      	b.n	803d82a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803d828:	2300      	movs	r3, #0
}
 803d82a:	4618      	mov	r0, r3
 803d82c:	3718      	adds	r7, #24
 803d82e:	46bd      	mov	sp, r7
 803d830:	bd80      	pop	{r7, pc}

0803d832 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803d832:	b580      	push	{r7, lr}
 803d834:	b084      	sub	sp, #16
 803d836:	af00      	add	r7, sp, #0
 803d838:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803d83a:	2300      	movs	r3, #0
 803d83c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803d83e:	687b      	ldr	r3, [r7, #4]
 803d840:	2201      	movs	r2, #1
 803d842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803d846:	687b      	ldr	r3, [r7, #4]
 803d848:	2200      	movs	r2, #0
 803d84a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803d84e:	687b      	ldr	r3, [r7, #4]
 803d850:	2200      	movs	r2, #0
 803d852:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803d854:	687b      	ldr	r3, [r7, #4]
 803d856:	2200      	movs	r2, #0
 803d858:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803d85c:	687b      	ldr	r3, [r7, #4]
 803d85e:	2200      	movs	r2, #0
 803d860:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803d864:	687b      	ldr	r3, [r7, #4]
 803d866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d86a:	2b00      	cmp	r3, #0
 803d86c:	d014      	beq.n	803d898 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803d86e:	687b      	ldr	r3, [r7, #4]
 803d870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d874:	685b      	ldr	r3, [r3, #4]
 803d876:	2b00      	cmp	r3, #0
 803d878:	d00e      	beq.n	803d898 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803d87a:	687b      	ldr	r3, [r7, #4]
 803d87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d880:	685b      	ldr	r3, [r3, #4]
 803d882:	687a      	ldr	r2, [r7, #4]
 803d884:	6852      	ldr	r2, [r2, #4]
 803d886:	b2d2      	uxtb	r2, r2
 803d888:	4611      	mov	r1, r2
 803d88a:	6878      	ldr	r0, [r7, #4]
 803d88c:	4798      	blx	r3
 803d88e:	4603      	mov	r3, r0
 803d890:	2b00      	cmp	r3, #0
 803d892:	d001      	beq.n	803d898 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803d894:	2303      	movs	r3, #3
 803d896:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803d898:	2340      	movs	r3, #64	; 0x40
 803d89a:	2200      	movs	r2, #0
 803d89c:	2100      	movs	r1, #0
 803d89e:	6878      	ldr	r0, [r7, #4]
 803d8a0:	f001 fc05 	bl	803f0ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803d8a4:	687b      	ldr	r3, [r7, #4]
 803d8a6:	2201      	movs	r2, #1
 803d8a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803d8ac:	687b      	ldr	r3, [r7, #4]
 803d8ae:	2240      	movs	r2, #64	; 0x40
 803d8b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803d8b4:	2340      	movs	r3, #64	; 0x40
 803d8b6:	2200      	movs	r2, #0
 803d8b8:	2180      	movs	r1, #128	; 0x80
 803d8ba:	6878      	ldr	r0, [r7, #4]
 803d8bc:	f001 fbf7 	bl	803f0ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803d8c0:	687b      	ldr	r3, [r7, #4]
 803d8c2:	2201      	movs	r2, #1
 803d8c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803d8c6:	687b      	ldr	r3, [r7, #4]
 803d8c8:	2240      	movs	r2, #64	; 0x40
 803d8ca:	621a      	str	r2, [r3, #32]

  return ret;
 803d8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 803d8ce:	4618      	mov	r0, r3
 803d8d0:	3710      	adds	r7, #16
 803d8d2:	46bd      	mov	sp, r7
 803d8d4:	bd80      	pop	{r7, pc}

0803d8d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803d8d6:	b480      	push	{r7}
 803d8d8:	b083      	sub	sp, #12
 803d8da:	af00      	add	r7, sp, #0
 803d8dc:	6078      	str	r0, [r7, #4]
 803d8de:	460b      	mov	r3, r1
 803d8e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803d8e2:	687b      	ldr	r3, [r7, #4]
 803d8e4:	78fa      	ldrb	r2, [r7, #3]
 803d8e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803d8e8:	2300      	movs	r3, #0
}
 803d8ea:	4618      	mov	r0, r3
 803d8ec:	370c      	adds	r7, #12
 803d8ee:	46bd      	mov	sp, r7
 803d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d8f4:	4770      	bx	lr

0803d8f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803d8f6:	b480      	push	{r7}
 803d8f8:	b083      	sub	sp, #12
 803d8fa:	af00      	add	r7, sp, #0
 803d8fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803d8fe:	687b      	ldr	r3, [r7, #4]
 803d900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d904:	b2da      	uxtb	r2, r3
 803d906:	687b      	ldr	r3, [r7, #4]
 803d908:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803d90c:	687b      	ldr	r3, [r7, #4]
 803d90e:	2204      	movs	r2, #4
 803d910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803d914:	2300      	movs	r3, #0
}
 803d916:	4618      	mov	r0, r3
 803d918:	370c      	adds	r7, #12
 803d91a:	46bd      	mov	sp, r7
 803d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d920:	4770      	bx	lr

0803d922 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803d922:	b480      	push	{r7}
 803d924:	b083      	sub	sp, #12
 803d926:	af00      	add	r7, sp, #0
 803d928:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803d92a:	687b      	ldr	r3, [r7, #4]
 803d92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d930:	b2db      	uxtb	r3, r3
 803d932:	2b04      	cmp	r3, #4
 803d934:	d106      	bne.n	803d944 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803d936:	687b      	ldr	r3, [r7, #4]
 803d938:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803d93c:	b2da      	uxtb	r2, r3
 803d93e:	687b      	ldr	r3, [r7, #4]
 803d940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803d944:	2300      	movs	r3, #0
}
 803d946:	4618      	mov	r0, r3
 803d948:	370c      	adds	r7, #12
 803d94a:	46bd      	mov	sp, r7
 803d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d950:	4770      	bx	lr

0803d952 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803d952:	b580      	push	{r7, lr}
 803d954:	b082      	sub	sp, #8
 803d956:	af00      	add	r7, sp, #0
 803d958:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d95a:	687b      	ldr	r3, [r7, #4]
 803d95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d960:	b2db      	uxtb	r3, r3
 803d962:	2b03      	cmp	r3, #3
 803d964:	d110      	bne.n	803d988 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803d966:	687b      	ldr	r3, [r7, #4]
 803d968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d96c:	2b00      	cmp	r3, #0
 803d96e:	d00b      	beq.n	803d988 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803d970:	687b      	ldr	r3, [r7, #4]
 803d972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d976:	69db      	ldr	r3, [r3, #28]
 803d978:	2b00      	cmp	r3, #0
 803d97a:	d005      	beq.n	803d988 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803d97c:	687b      	ldr	r3, [r7, #4]
 803d97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803d982:	69db      	ldr	r3, [r3, #28]
 803d984:	6878      	ldr	r0, [r7, #4]
 803d986:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803d988:	2300      	movs	r3, #0
}
 803d98a:	4618      	mov	r0, r3
 803d98c:	3708      	adds	r7, #8
 803d98e:	46bd      	mov	sp, r7
 803d990:	bd80      	pop	{r7, pc}

0803d992 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803d992:	b580      	push	{r7, lr}
 803d994:	b082      	sub	sp, #8
 803d996:	af00      	add	r7, sp, #0
 803d998:	6078      	str	r0, [r7, #4]
 803d99a:	460b      	mov	r3, r1
 803d99c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803d99e:	687b      	ldr	r3, [r7, #4]
 803d9a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d9a4:	687b      	ldr	r3, [r7, #4]
 803d9a6:	32ae      	adds	r2, #174	; 0xae
 803d9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d9ac:	2b00      	cmp	r3, #0
 803d9ae:	d101      	bne.n	803d9b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803d9b0:	2303      	movs	r3, #3
 803d9b2:	e01c      	b.n	803d9ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803d9b4:	687b      	ldr	r3, [r7, #4]
 803d9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803d9ba:	b2db      	uxtb	r3, r3
 803d9bc:	2b03      	cmp	r3, #3
 803d9be:	d115      	bne.n	803d9ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803d9c0:	687b      	ldr	r3, [r7, #4]
 803d9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d9c6:	687b      	ldr	r3, [r7, #4]
 803d9c8:	32ae      	adds	r2, #174	; 0xae
 803d9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d9ce:	6a1b      	ldr	r3, [r3, #32]
 803d9d0:	2b00      	cmp	r3, #0
 803d9d2:	d00b      	beq.n	803d9ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803d9d4:	687b      	ldr	r3, [r7, #4]
 803d9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803d9da:	687b      	ldr	r3, [r7, #4]
 803d9dc:	32ae      	adds	r2, #174	; 0xae
 803d9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803d9e2:	6a1b      	ldr	r3, [r3, #32]
 803d9e4:	78fa      	ldrb	r2, [r7, #3]
 803d9e6:	4611      	mov	r1, r2
 803d9e8:	6878      	ldr	r0, [r7, #4]
 803d9ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803d9ec:	2300      	movs	r3, #0
}
 803d9ee:	4618      	mov	r0, r3
 803d9f0:	3708      	adds	r7, #8
 803d9f2:	46bd      	mov	sp, r7
 803d9f4:	bd80      	pop	{r7, pc}

0803d9f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803d9f6:	b580      	push	{r7, lr}
 803d9f8:	b082      	sub	sp, #8
 803d9fa:	af00      	add	r7, sp, #0
 803d9fc:	6078      	str	r0, [r7, #4]
 803d9fe:	460b      	mov	r3, r1
 803da00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803da02:	687b      	ldr	r3, [r7, #4]
 803da04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803da08:	687b      	ldr	r3, [r7, #4]
 803da0a:	32ae      	adds	r2, #174	; 0xae
 803da0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803da10:	2b00      	cmp	r3, #0
 803da12:	d101      	bne.n	803da18 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803da14:	2303      	movs	r3, #3
 803da16:	e01c      	b.n	803da52 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803da18:	687b      	ldr	r3, [r7, #4]
 803da1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803da1e:	b2db      	uxtb	r3, r3
 803da20:	2b03      	cmp	r3, #3
 803da22:	d115      	bne.n	803da50 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803da24:	687b      	ldr	r3, [r7, #4]
 803da26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803da2a:	687b      	ldr	r3, [r7, #4]
 803da2c:	32ae      	adds	r2, #174	; 0xae
 803da2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803da32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803da34:	2b00      	cmp	r3, #0
 803da36:	d00b      	beq.n	803da50 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803da38:	687b      	ldr	r3, [r7, #4]
 803da3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803da3e:	687b      	ldr	r3, [r7, #4]
 803da40:	32ae      	adds	r2, #174	; 0xae
 803da42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803da46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803da48:	78fa      	ldrb	r2, [r7, #3]
 803da4a:	4611      	mov	r1, r2
 803da4c:	6878      	ldr	r0, [r7, #4]
 803da4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803da50:	2300      	movs	r3, #0
}
 803da52:	4618      	mov	r0, r3
 803da54:	3708      	adds	r7, #8
 803da56:	46bd      	mov	sp, r7
 803da58:	bd80      	pop	{r7, pc}

0803da5a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803da5a:	b480      	push	{r7}
 803da5c:	b083      	sub	sp, #12
 803da5e:	af00      	add	r7, sp, #0
 803da60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803da62:	2300      	movs	r3, #0
}
 803da64:	4618      	mov	r0, r3
 803da66:	370c      	adds	r7, #12
 803da68:	46bd      	mov	sp, r7
 803da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803da6e:	4770      	bx	lr

0803da70 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803da70:	b580      	push	{r7, lr}
 803da72:	b084      	sub	sp, #16
 803da74:	af00      	add	r7, sp, #0
 803da76:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803da78:	2300      	movs	r3, #0
 803da7a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803da7c:	687b      	ldr	r3, [r7, #4]
 803da7e:	2201      	movs	r2, #1
 803da80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803da84:	687b      	ldr	r3, [r7, #4]
 803da86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803da8a:	2b00      	cmp	r3, #0
 803da8c:	d00e      	beq.n	803daac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803da8e:	687b      	ldr	r3, [r7, #4]
 803da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803da94:	685b      	ldr	r3, [r3, #4]
 803da96:	687a      	ldr	r2, [r7, #4]
 803da98:	6852      	ldr	r2, [r2, #4]
 803da9a:	b2d2      	uxtb	r2, r2
 803da9c:	4611      	mov	r1, r2
 803da9e:	6878      	ldr	r0, [r7, #4]
 803daa0:	4798      	blx	r3
 803daa2:	4603      	mov	r3, r0
 803daa4:	2b00      	cmp	r3, #0
 803daa6:	d001      	beq.n	803daac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803daa8:	2303      	movs	r3, #3
 803daaa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803daac:	7bfb      	ldrb	r3, [r7, #15]
}
 803daae:	4618      	mov	r0, r3
 803dab0:	3710      	adds	r7, #16
 803dab2:	46bd      	mov	sp, r7
 803dab4:	bd80      	pop	{r7, pc}

0803dab6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803dab6:	b480      	push	{r7}
 803dab8:	b083      	sub	sp, #12
 803daba:	af00      	add	r7, sp, #0
 803dabc:	6078      	str	r0, [r7, #4]
 803dabe:	460b      	mov	r3, r1
 803dac0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803dac2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803dac4:	4618      	mov	r0, r3
 803dac6:	370c      	adds	r7, #12
 803dac8:	46bd      	mov	sp, r7
 803daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dace:	4770      	bx	lr

0803dad0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803dad0:	b480      	push	{r7}
 803dad2:	b083      	sub	sp, #12
 803dad4:	af00      	add	r7, sp, #0
 803dad6:	6078      	str	r0, [r7, #4]
 803dad8:	460b      	mov	r3, r1
 803dada:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803dadc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803dade:	4618      	mov	r0, r3
 803dae0:	370c      	adds	r7, #12
 803dae2:	46bd      	mov	sp, r7
 803dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dae8:	4770      	bx	lr

0803daea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803daea:	b580      	push	{r7, lr}
 803daec:	b086      	sub	sp, #24
 803daee:	af00      	add	r7, sp, #0
 803daf0:	6078      	str	r0, [r7, #4]
 803daf2:	460b      	mov	r3, r1
 803daf4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803daf6:	687b      	ldr	r3, [r7, #4]
 803daf8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803dafa:	687b      	ldr	r3, [r7, #4]
 803dafc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803dafe:	2300      	movs	r3, #0
 803db00:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803db02:	68fb      	ldr	r3, [r7, #12]
 803db04:	885b      	ldrh	r3, [r3, #2]
 803db06:	b29a      	uxth	r2, r3
 803db08:	68fb      	ldr	r3, [r7, #12]
 803db0a:	781b      	ldrb	r3, [r3, #0]
 803db0c:	b29b      	uxth	r3, r3
 803db0e:	429a      	cmp	r2, r3
 803db10:	d920      	bls.n	803db54 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803db12:	68fb      	ldr	r3, [r7, #12]
 803db14:	781b      	ldrb	r3, [r3, #0]
 803db16:	b29b      	uxth	r3, r3
 803db18:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803db1a:	e013      	b.n	803db44 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803db1c:	f107 030a 	add.w	r3, r7, #10
 803db20:	4619      	mov	r1, r3
 803db22:	6978      	ldr	r0, [r7, #20]
 803db24:	f000 f81b 	bl	803db5e <USBD_GetNextDesc>
 803db28:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803db2a:	697b      	ldr	r3, [r7, #20]
 803db2c:	785b      	ldrb	r3, [r3, #1]
 803db2e:	2b05      	cmp	r3, #5
 803db30:	d108      	bne.n	803db44 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803db32:	697b      	ldr	r3, [r7, #20]
 803db34:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803db36:	693b      	ldr	r3, [r7, #16]
 803db38:	789b      	ldrb	r3, [r3, #2]
 803db3a:	78fa      	ldrb	r2, [r7, #3]
 803db3c:	429a      	cmp	r2, r3
 803db3e:	d008      	beq.n	803db52 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803db40:	2300      	movs	r3, #0
 803db42:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803db44:	68fb      	ldr	r3, [r7, #12]
 803db46:	885b      	ldrh	r3, [r3, #2]
 803db48:	b29a      	uxth	r2, r3
 803db4a:	897b      	ldrh	r3, [r7, #10]
 803db4c:	429a      	cmp	r2, r3
 803db4e:	d8e5      	bhi.n	803db1c <USBD_GetEpDesc+0x32>
 803db50:	e000      	b.n	803db54 <USBD_GetEpDesc+0x6a>
          break;
 803db52:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803db54:	693b      	ldr	r3, [r7, #16]
}
 803db56:	4618      	mov	r0, r3
 803db58:	3718      	adds	r7, #24
 803db5a:	46bd      	mov	sp, r7
 803db5c:	bd80      	pop	{r7, pc}

0803db5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803db5e:	b480      	push	{r7}
 803db60:	b085      	sub	sp, #20
 803db62:	af00      	add	r7, sp, #0
 803db64:	6078      	str	r0, [r7, #4]
 803db66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803db68:	687b      	ldr	r3, [r7, #4]
 803db6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803db6c:	683b      	ldr	r3, [r7, #0]
 803db6e:	881a      	ldrh	r2, [r3, #0]
 803db70:	68fb      	ldr	r3, [r7, #12]
 803db72:	781b      	ldrb	r3, [r3, #0]
 803db74:	b29b      	uxth	r3, r3
 803db76:	4413      	add	r3, r2
 803db78:	b29a      	uxth	r2, r3
 803db7a:	683b      	ldr	r3, [r7, #0]
 803db7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803db7e:	68fb      	ldr	r3, [r7, #12]
 803db80:	781b      	ldrb	r3, [r3, #0]
 803db82:	461a      	mov	r2, r3
 803db84:	687b      	ldr	r3, [r7, #4]
 803db86:	4413      	add	r3, r2
 803db88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803db8a:	68fb      	ldr	r3, [r7, #12]
}
 803db8c:	4618      	mov	r0, r3
 803db8e:	3714      	adds	r7, #20
 803db90:	46bd      	mov	sp, r7
 803db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 803db96:	4770      	bx	lr

0803db98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803db98:	b480      	push	{r7}
 803db9a:	b087      	sub	sp, #28
 803db9c:	af00      	add	r7, sp, #0
 803db9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803dba0:	687b      	ldr	r3, [r7, #4]
 803dba2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803dba4:	697b      	ldr	r3, [r7, #20]
 803dba6:	781b      	ldrb	r3, [r3, #0]
 803dba8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803dbaa:	697b      	ldr	r3, [r7, #20]
 803dbac:	3301      	adds	r3, #1
 803dbae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803dbb0:	697b      	ldr	r3, [r7, #20]
 803dbb2:	781b      	ldrb	r3, [r3, #0]
 803dbb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803dbb6:	8a3b      	ldrh	r3, [r7, #16]
 803dbb8:	021b      	lsls	r3, r3, #8
 803dbba:	b21a      	sxth	r2, r3
 803dbbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803dbc0:	4313      	orrs	r3, r2
 803dbc2:	b21b      	sxth	r3, r3
 803dbc4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803dbc6:	89fb      	ldrh	r3, [r7, #14]
}
 803dbc8:	4618      	mov	r0, r3
 803dbca:	371c      	adds	r7, #28
 803dbcc:	46bd      	mov	sp, r7
 803dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dbd2:	4770      	bx	lr

0803dbd4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803dbd4:	b580      	push	{r7, lr}
 803dbd6:	b084      	sub	sp, #16
 803dbd8:	af00      	add	r7, sp, #0
 803dbda:	6078      	str	r0, [r7, #4]
 803dbdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803dbde:	2300      	movs	r3, #0
 803dbe0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803dbe2:	683b      	ldr	r3, [r7, #0]
 803dbe4:	781b      	ldrb	r3, [r3, #0]
 803dbe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803dbea:	2b40      	cmp	r3, #64	; 0x40
 803dbec:	d005      	beq.n	803dbfa <USBD_StdDevReq+0x26>
 803dbee:	2b40      	cmp	r3, #64	; 0x40
 803dbf0:	d857      	bhi.n	803dca2 <USBD_StdDevReq+0xce>
 803dbf2:	2b00      	cmp	r3, #0
 803dbf4:	d00f      	beq.n	803dc16 <USBD_StdDevReq+0x42>
 803dbf6:	2b20      	cmp	r3, #32
 803dbf8:	d153      	bne.n	803dca2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803dbfa:	687b      	ldr	r3, [r7, #4]
 803dbfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803dc00:	687b      	ldr	r3, [r7, #4]
 803dc02:	32ae      	adds	r2, #174	; 0xae
 803dc04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803dc08:	689b      	ldr	r3, [r3, #8]
 803dc0a:	6839      	ldr	r1, [r7, #0]
 803dc0c:	6878      	ldr	r0, [r7, #4]
 803dc0e:	4798      	blx	r3
 803dc10:	4603      	mov	r3, r0
 803dc12:	73fb      	strb	r3, [r7, #15]
      break;
 803dc14:	e04a      	b.n	803dcac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803dc16:	683b      	ldr	r3, [r7, #0]
 803dc18:	785b      	ldrb	r3, [r3, #1]
 803dc1a:	2b09      	cmp	r3, #9
 803dc1c:	d83b      	bhi.n	803dc96 <USBD_StdDevReq+0xc2>
 803dc1e:	a201      	add	r2, pc, #4	; (adr r2, 803dc24 <USBD_StdDevReq+0x50>)
 803dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803dc24:	0803dc79 	.word	0x0803dc79
 803dc28:	0803dc8d 	.word	0x0803dc8d
 803dc2c:	0803dc97 	.word	0x0803dc97
 803dc30:	0803dc83 	.word	0x0803dc83
 803dc34:	0803dc97 	.word	0x0803dc97
 803dc38:	0803dc57 	.word	0x0803dc57
 803dc3c:	0803dc4d 	.word	0x0803dc4d
 803dc40:	0803dc97 	.word	0x0803dc97
 803dc44:	0803dc6f 	.word	0x0803dc6f
 803dc48:	0803dc61 	.word	0x0803dc61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803dc4c:	6839      	ldr	r1, [r7, #0]
 803dc4e:	6878      	ldr	r0, [r7, #4]
 803dc50:	f000 fa3c 	bl	803e0cc <USBD_GetDescriptor>
          break;
 803dc54:	e024      	b.n	803dca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803dc56:	6839      	ldr	r1, [r7, #0]
 803dc58:	6878      	ldr	r0, [r7, #4]
 803dc5a:	f000 fba1 	bl	803e3a0 <USBD_SetAddress>
          break;
 803dc5e:	e01f      	b.n	803dca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803dc60:	6839      	ldr	r1, [r7, #0]
 803dc62:	6878      	ldr	r0, [r7, #4]
 803dc64:	f000 fbe0 	bl	803e428 <USBD_SetConfig>
 803dc68:	4603      	mov	r3, r0
 803dc6a:	73fb      	strb	r3, [r7, #15]
          break;
 803dc6c:	e018      	b.n	803dca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803dc6e:	6839      	ldr	r1, [r7, #0]
 803dc70:	6878      	ldr	r0, [r7, #4]
 803dc72:	f000 fc83 	bl	803e57c <USBD_GetConfig>
          break;
 803dc76:	e013      	b.n	803dca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803dc78:	6839      	ldr	r1, [r7, #0]
 803dc7a:	6878      	ldr	r0, [r7, #4]
 803dc7c:	f000 fcb4 	bl	803e5e8 <USBD_GetStatus>
          break;
 803dc80:	e00e      	b.n	803dca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803dc82:	6839      	ldr	r1, [r7, #0]
 803dc84:	6878      	ldr	r0, [r7, #4]
 803dc86:	f000 fce3 	bl	803e650 <USBD_SetFeature>
          break;
 803dc8a:	e009      	b.n	803dca0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803dc8c:	6839      	ldr	r1, [r7, #0]
 803dc8e:	6878      	ldr	r0, [r7, #4]
 803dc90:	f000 fd07 	bl	803e6a2 <USBD_ClrFeature>
          break;
 803dc94:	e004      	b.n	803dca0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803dc96:	6839      	ldr	r1, [r7, #0]
 803dc98:	6878      	ldr	r0, [r7, #4]
 803dc9a:	f000 fd5e 	bl	803e75a <USBD_CtlError>
          break;
 803dc9e:	bf00      	nop
      }
      break;
 803dca0:	e004      	b.n	803dcac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803dca2:	6839      	ldr	r1, [r7, #0]
 803dca4:	6878      	ldr	r0, [r7, #4]
 803dca6:	f000 fd58 	bl	803e75a <USBD_CtlError>
      break;
 803dcaa:	bf00      	nop
  }

  return ret;
 803dcac:	7bfb      	ldrb	r3, [r7, #15]
}
 803dcae:	4618      	mov	r0, r3
 803dcb0:	3710      	adds	r7, #16
 803dcb2:	46bd      	mov	sp, r7
 803dcb4:	bd80      	pop	{r7, pc}
 803dcb6:	bf00      	nop

0803dcb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803dcb8:	b580      	push	{r7, lr}
 803dcba:	b084      	sub	sp, #16
 803dcbc:	af00      	add	r7, sp, #0
 803dcbe:	6078      	str	r0, [r7, #4]
 803dcc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803dcc2:	2300      	movs	r3, #0
 803dcc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803dcc6:	683b      	ldr	r3, [r7, #0]
 803dcc8:	781b      	ldrb	r3, [r3, #0]
 803dcca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803dcce:	2b40      	cmp	r3, #64	; 0x40
 803dcd0:	d005      	beq.n	803dcde <USBD_StdItfReq+0x26>
 803dcd2:	2b40      	cmp	r3, #64	; 0x40
 803dcd4:	d852      	bhi.n	803dd7c <USBD_StdItfReq+0xc4>
 803dcd6:	2b00      	cmp	r3, #0
 803dcd8:	d001      	beq.n	803dcde <USBD_StdItfReq+0x26>
 803dcda:	2b20      	cmp	r3, #32
 803dcdc:	d14e      	bne.n	803dd7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803dcde:	687b      	ldr	r3, [r7, #4]
 803dce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803dce4:	b2db      	uxtb	r3, r3
 803dce6:	3b01      	subs	r3, #1
 803dce8:	2b02      	cmp	r3, #2
 803dcea:	d840      	bhi.n	803dd6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803dcec:	683b      	ldr	r3, [r7, #0]
 803dcee:	889b      	ldrh	r3, [r3, #4]
 803dcf0:	b2db      	uxtb	r3, r3
 803dcf2:	2b01      	cmp	r3, #1
 803dcf4:	d836      	bhi.n	803dd64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803dcf6:	683b      	ldr	r3, [r7, #0]
 803dcf8:	889b      	ldrh	r3, [r3, #4]
 803dcfa:	b2db      	uxtb	r3, r3
 803dcfc:	4619      	mov	r1, r3
 803dcfe:	6878      	ldr	r0, [r7, #4]
 803dd00:	f7ff fed9 	bl	803dab6 <USBD_CoreFindIF>
 803dd04:	4603      	mov	r3, r0
 803dd06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803dd08:	7bbb      	ldrb	r3, [r7, #14]
 803dd0a:	2bff      	cmp	r3, #255	; 0xff
 803dd0c:	d01d      	beq.n	803dd4a <USBD_StdItfReq+0x92>
 803dd0e:	7bbb      	ldrb	r3, [r7, #14]
 803dd10:	2b00      	cmp	r3, #0
 803dd12:	d11a      	bne.n	803dd4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803dd14:	7bba      	ldrb	r2, [r7, #14]
 803dd16:	687b      	ldr	r3, [r7, #4]
 803dd18:	32ae      	adds	r2, #174	; 0xae
 803dd1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803dd1e:	689b      	ldr	r3, [r3, #8]
 803dd20:	2b00      	cmp	r3, #0
 803dd22:	d00f      	beq.n	803dd44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803dd24:	7bba      	ldrb	r2, [r7, #14]
 803dd26:	687b      	ldr	r3, [r7, #4]
 803dd28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803dd2c:	7bba      	ldrb	r2, [r7, #14]
 803dd2e:	687b      	ldr	r3, [r7, #4]
 803dd30:	32ae      	adds	r2, #174	; 0xae
 803dd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803dd36:	689b      	ldr	r3, [r3, #8]
 803dd38:	6839      	ldr	r1, [r7, #0]
 803dd3a:	6878      	ldr	r0, [r7, #4]
 803dd3c:	4798      	blx	r3
 803dd3e:	4603      	mov	r3, r0
 803dd40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803dd42:	e004      	b.n	803dd4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803dd44:	2303      	movs	r3, #3
 803dd46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803dd48:	e001      	b.n	803dd4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803dd4a:	2303      	movs	r3, #3
 803dd4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803dd4e:	683b      	ldr	r3, [r7, #0]
 803dd50:	88db      	ldrh	r3, [r3, #6]
 803dd52:	2b00      	cmp	r3, #0
 803dd54:	d110      	bne.n	803dd78 <USBD_StdItfReq+0xc0>
 803dd56:	7bfb      	ldrb	r3, [r7, #15]
 803dd58:	2b00      	cmp	r3, #0
 803dd5a:	d10d      	bne.n	803dd78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803dd5c:	6878      	ldr	r0, [r7, #4]
 803dd5e:	f000 fdc7 	bl	803e8f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803dd62:	e009      	b.n	803dd78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803dd64:	6839      	ldr	r1, [r7, #0]
 803dd66:	6878      	ldr	r0, [r7, #4]
 803dd68:	f000 fcf7 	bl	803e75a <USBD_CtlError>
          break;
 803dd6c:	e004      	b.n	803dd78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803dd6e:	6839      	ldr	r1, [r7, #0]
 803dd70:	6878      	ldr	r0, [r7, #4]
 803dd72:	f000 fcf2 	bl	803e75a <USBD_CtlError>
          break;
 803dd76:	e000      	b.n	803dd7a <USBD_StdItfReq+0xc2>
          break;
 803dd78:	bf00      	nop
      }
      break;
 803dd7a:	e004      	b.n	803dd86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803dd7c:	6839      	ldr	r1, [r7, #0]
 803dd7e:	6878      	ldr	r0, [r7, #4]
 803dd80:	f000 fceb 	bl	803e75a <USBD_CtlError>
      break;
 803dd84:	bf00      	nop
  }

  return ret;
 803dd86:	7bfb      	ldrb	r3, [r7, #15]
}
 803dd88:	4618      	mov	r0, r3
 803dd8a:	3710      	adds	r7, #16
 803dd8c:	46bd      	mov	sp, r7
 803dd8e:	bd80      	pop	{r7, pc}

0803dd90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803dd90:	b580      	push	{r7, lr}
 803dd92:	b084      	sub	sp, #16
 803dd94:	af00      	add	r7, sp, #0
 803dd96:	6078      	str	r0, [r7, #4]
 803dd98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803dd9a:	2300      	movs	r3, #0
 803dd9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803dd9e:	683b      	ldr	r3, [r7, #0]
 803dda0:	889b      	ldrh	r3, [r3, #4]
 803dda2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803dda4:	683b      	ldr	r3, [r7, #0]
 803dda6:	781b      	ldrb	r3, [r3, #0]
 803dda8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803ddac:	2b40      	cmp	r3, #64	; 0x40
 803ddae:	d007      	beq.n	803ddc0 <USBD_StdEPReq+0x30>
 803ddb0:	2b40      	cmp	r3, #64	; 0x40
 803ddb2:	f200 817f 	bhi.w	803e0b4 <USBD_StdEPReq+0x324>
 803ddb6:	2b00      	cmp	r3, #0
 803ddb8:	d02a      	beq.n	803de10 <USBD_StdEPReq+0x80>
 803ddba:	2b20      	cmp	r3, #32
 803ddbc:	f040 817a 	bne.w	803e0b4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803ddc0:	7bbb      	ldrb	r3, [r7, #14]
 803ddc2:	4619      	mov	r1, r3
 803ddc4:	6878      	ldr	r0, [r7, #4]
 803ddc6:	f7ff fe83 	bl	803dad0 <USBD_CoreFindEP>
 803ddca:	4603      	mov	r3, r0
 803ddcc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803ddce:	7b7b      	ldrb	r3, [r7, #13]
 803ddd0:	2bff      	cmp	r3, #255	; 0xff
 803ddd2:	f000 8174 	beq.w	803e0be <USBD_StdEPReq+0x32e>
 803ddd6:	7b7b      	ldrb	r3, [r7, #13]
 803ddd8:	2b00      	cmp	r3, #0
 803ddda:	f040 8170 	bne.w	803e0be <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803ddde:	7b7a      	ldrb	r2, [r7, #13]
 803dde0:	687b      	ldr	r3, [r7, #4]
 803dde2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803dde6:	7b7a      	ldrb	r2, [r7, #13]
 803dde8:	687b      	ldr	r3, [r7, #4]
 803ddea:	32ae      	adds	r2, #174	; 0xae
 803ddec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ddf0:	689b      	ldr	r3, [r3, #8]
 803ddf2:	2b00      	cmp	r3, #0
 803ddf4:	f000 8163 	beq.w	803e0be <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803ddf8:	7b7a      	ldrb	r2, [r7, #13]
 803ddfa:	687b      	ldr	r3, [r7, #4]
 803ddfc:	32ae      	adds	r2, #174	; 0xae
 803ddfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803de02:	689b      	ldr	r3, [r3, #8]
 803de04:	6839      	ldr	r1, [r7, #0]
 803de06:	6878      	ldr	r0, [r7, #4]
 803de08:	4798      	blx	r3
 803de0a:	4603      	mov	r3, r0
 803de0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803de0e:	e156      	b.n	803e0be <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803de10:	683b      	ldr	r3, [r7, #0]
 803de12:	785b      	ldrb	r3, [r3, #1]
 803de14:	2b03      	cmp	r3, #3
 803de16:	d008      	beq.n	803de2a <USBD_StdEPReq+0x9a>
 803de18:	2b03      	cmp	r3, #3
 803de1a:	f300 8145 	bgt.w	803e0a8 <USBD_StdEPReq+0x318>
 803de1e:	2b00      	cmp	r3, #0
 803de20:	f000 809b 	beq.w	803df5a <USBD_StdEPReq+0x1ca>
 803de24:	2b01      	cmp	r3, #1
 803de26:	d03c      	beq.n	803dea2 <USBD_StdEPReq+0x112>
 803de28:	e13e      	b.n	803e0a8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803de2a:	687b      	ldr	r3, [r7, #4]
 803de2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803de30:	b2db      	uxtb	r3, r3
 803de32:	2b02      	cmp	r3, #2
 803de34:	d002      	beq.n	803de3c <USBD_StdEPReq+0xac>
 803de36:	2b03      	cmp	r3, #3
 803de38:	d016      	beq.n	803de68 <USBD_StdEPReq+0xd8>
 803de3a:	e02c      	b.n	803de96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803de3c:	7bbb      	ldrb	r3, [r7, #14]
 803de3e:	2b00      	cmp	r3, #0
 803de40:	d00d      	beq.n	803de5e <USBD_StdEPReq+0xce>
 803de42:	7bbb      	ldrb	r3, [r7, #14]
 803de44:	2b80      	cmp	r3, #128	; 0x80
 803de46:	d00a      	beq.n	803de5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803de48:	7bbb      	ldrb	r3, [r7, #14]
 803de4a:	4619      	mov	r1, r3
 803de4c:	6878      	ldr	r0, [r7, #4]
 803de4e:	f001 f973 	bl	803f138 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803de52:	2180      	movs	r1, #128	; 0x80
 803de54:	6878      	ldr	r0, [r7, #4]
 803de56:	f001 f96f 	bl	803f138 <USBD_LL_StallEP>
 803de5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803de5c:	e020      	b.n	803dea0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803de5e:	6839      	ldr	r1, [r7, #0]
 803de60:	6878      	ldr	r0, [r7, #4]
 803de62:	f000 fc7a 	bl	803e75a <USBD_CtlError>
              break;
 803de66:	e01b      	b.n	803dea0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803de68:	683b      	ldr	r3, [r7, #0]
 803de6a:	885b      	ldrh	r3, [r3, #2]
 803de6c:	2b00      	cmp	r3, #0
 803de6e:	d10e      	bne.n	803de8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803de70:	7bbb      	ldrb	r3, [r7, #14]
 803de72:	2b00      	cmp	r3, #0
 803de74:	d00b      	beq.n	803de8e <USBD_StdEPReq+0xfe>
 803de76:	7bbb      	ldrb	r3, [r7, #14]
 803de78:	2b80      	cmp	r3, #128	; 0x80
 803de7a:	d008      	beq.n	803de8e <USBD_StdEPReq+0xfe>
 803de7c:	683b      	ldr	r3, [r7, #0]
 803de7e:	88db      	ldrh	r3, [r3, #6]
 803de80:	2b00      	cmp	r3, #0
 803de82:	d104      	bne.n	803de8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803de84:	7bbb      	ldrb	r3, [r7, #14]
 803de86:	4619      	mov	r1, r3
 803de88:	6878      	ldr	r0, [r7, #4]
 803de8a:	f001 f955 	bl	803f138 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803de8e:	6878      	ldr	r0, [r7, #4]
 803de90:	f000 fd2e 	bl	803e8f0 <USBD_CtlSendStatus>

              break;
 803de94:	e004      	b.n	803dea0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803de96:	6839      	ldr	r1, [r7, #0]
 803de98:	6878      	ldr	r0, [r7, #4]
 803de9a:	f000 fc5e 	bl	803e75a <USBD_CtlError>
              break;
 803de9e:	bf00      	nop
          }
          break;
 803dea0:	e107      	b.n	803e0b2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803dea2:	687b      	ldr	r3, [r7, #4]
 803dea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803dea8:	b2db      	uxtb	r3, r3
 803deaa:	2b02      	cmp	r3, #2
 803deac:	d002      	beq.n	803deb4 <USBD_StdEPReq+0x124>
 803deae:	2b03      	cmp	r3, #3
 803deb0:	d016      	beq.n	803dee0 <USBD_StdEPReq+0x150>
 803deb2:	e04b      	b.n	803df4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803deb4:	7bbb      	ldrb	r3, [r7, #14]
 803deb6:	2b00      	cmp	r3, #0
 803deb8:	d00d      	beq.n	803ded6 <USBD_StdEPReq+0x146>
 803deba:	7bbb      	ldrb	r3, [r7, #14]
 803debc:	2b80      	cmp	r3, #128	; 0x80
 803debe:	d00a      	beq.n	803ded6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803dec0:	7bbb      	ldrb	r3, [r7, #14]
 803dec2:	4619      	mov	r1, r3
 803dec4:	6878      	ldr	r0, [r7, #4]
 803dec6:	f001 f937 	bl	803f138 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803deca:	2180      	movs	r1, #128	; 0x80
 803decc:	6878      	ldr	r0, [r7, #4]
 803dece:	f001 f933 	bl	803f138 <USBD_LL_StallEP>
 803ded2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803ded4:	e040      	b.n	803df58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803ded6:	6839      	ldr	r1, [r7, #0]
 803ded8:	6878      	ldr	r0, [r7, #4]
 803deda:	f000 fc3e 	bl	803e75a <USBD_CtlError>
              break;
 803dede:	e03b      	b.n	803df58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803dee0:	683b      	ldr	r3, [r7, #0]
 803dee2:	885b      	ldrh	r3, [r3, #2]
 803dee4:	2b00      	cmp	r3, #0
 803dee6:	d136      	bne.n	803df56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803dee8:	7bbb      	ldrb	r3, [r7, #14]
 803deea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803deee:	2b00      	cmp	r3, #0
 803def0:	d004      	beq.n	803defc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803def2:	7bbb      	ldrb	r3, [r7, #14]
 803def4:	4619      	mov	r1, r3
 803def6:	6878      	ldr	r0, [r7, #4]
 803def8:	f001 f93d 	bl	803f176 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803defc:	6878      	ldr	r0, [r7, #4]
 803defe:	f000 fcf7 	bl	803e8f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803df02:	7bbb      	ldrb	r3, [r7, #14]
 803df04:	4619      	mov	r1, r3
 803df06:	6878      	ldr	r0, [r7, #4]
 803df08:	f7ff fde2 	bl	803dad0 <USBD_CoreFindEP>
 803df0c:	4603      	mov	r3, r0
 803df0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803df10:	7b7b      	ldrb	r3, [r7, #13]
 803df12:	2bff      	cmp	r3, #255	; 0xff
 803df14:	d01f      	beq.n	803df56 <USBD_StdEPReq+0x1c6>
 803df16:	7b7b      	ldrb	r3, [r7, #13]
 803df18:	2b00      	cmp	r3, #0
 803df1a:	d11c      	bne.n	803df56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803df1c:	7b7a      	ldrb	r2, [r7, #13]
 803df1e:	687b      	ldr	r3, [r7, #4]
 803df20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803df24:	7b7a      	ldrb	r2, [r7, #13]
 803df26:	687b      	ldr	r3, [r7, #4]
 803df28:	32ae      	adds	r2, #174	; 0xae
 803df2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803df2e:	689b      	ldr	r3, [r3, #8]
 803df30:	2b00      	cmp	r3, #0
 803df32:	d010      	beq.n	803df56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803df34:	7b7a      	ldrb	r2, [r7, #13]
 803df36:	687b      	ldr	r3, [r7, #4]
 803df38:	32ae      	adds	r2, #174	; 0xae
 803df3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803df3e:	689b      	ldr	r3, [r3, #8]
 803df40:	6839      	ldr	r1, [r7, #0]
 803df42:	6878      	ldr	r0, [r7, #4]
 803df44:	4798      	blx	r3
 803df46:	4603      	mov	r3, r0
 803df48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803df4a:	e004      	b.n	803df56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803df4c:	6839      	ldr	r1, [r7, #0]
 803df4e:	6878      	ldr	r0, [r7, #4]
 803df50:	f000 fc03 	bl	803e75a <USBD_CtlError>
              break;
 803df54:	e000      	b.n	803df58 <USBD_StdEPReq+0x1c8>
              break;
 803df56:	bf00      	nop
          }
          break;
 803df58:	e0ab      	b.n	803e0b2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803df5a:	687b      	ldr	r3, [r7, #4]
 803df5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803df60:	b2db      	uxtb	r3, r3
 803df62:	2b02      	cmp	r3, #2
 803df64:	d002      	beq.n	803df6c <USBD_StdEPReq+0x1dc>
 803df66:	2b03      	cmp	r3, #3
 803df68:	d032      	beq.n	803dfd0 <USBD_StdEPReq+0x240>
 803df6a:	e097      	b.n	803e09c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803df6c:	7bbb      	ldrb	r3, [r7, #14]
 803df6e:	2b00      	cmp	r3, #0
 803df70:	d007      	beq.n	803df82 <USBD_StdEPReq+0x1f2>
 803df72:	7bbb      	ldrb	r3, [r7, #14]
 803df74:	2b80      	cmp	r3, #128	; 0x80
 803df76:	d004      	beq.n	803df82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803df78:	6839      	ldr	r1, [r7, #0]
 803df7a:	6878      	ldr	r0, [r7, #4]
 803df7c:	f000 fbed 	bl	803e75a <USBD_CtlError>
                break;
 803df80:	e091      	b.n	803e0a6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803df82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803df86:	2b00      	cmp	r3, #0
 803df88:	da0b      	bge.n	803dfa2 <USBD_StdEPReq+0x212>
 803df8a:	7bbb      	ldrb	r3, [r7, #14]
 803df8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803df90:	4613      	mov	r3, r2
 803df92:	009b      	lsls	r3, r3, #2
 803df94:	4413      	add	r3, r2
 803df96:	009b      	lsls	r3, r3, #2
 803df98:	3310      	adds	r3, #16
 803df9a:	687a      	ldr	r2, [r7, #4]
 803df9c:	4413      	add	r3, r2
 803df9e:	3304      	adds	r3, #4
 803dfa0:	e00b      	b.n	803dfba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803dfa2:	7bbb      	ldrb	r3, [r7, #14]
 803dfa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803dfa8:	4613      	mov	r3, r2
 803dfaa:	009b      	lsls	r3, r3, #2
 803dfac:	4413      	add	r3, r2
 803dfae:	009b      	lsls	r3, r3, #2
 803dfb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803dfb4:	687a      	ldr	r2, [r7, #4]
 803dfb6:	4413      	add	r3, r2
 803dfb8:	3304      	adds	r3, #4
 803dfba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803dfbc:	68bb      	ldr	r3, [r7, #8]
 803dfbe:	2200      	movs	r2, #0
 803dfc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803dfc2:	68bb      	ldr	r3, [r7, #8]
 803dfc4:	2202      	movs	r2, #2
 803dfc6:	4619      	mov	r1, r3
 803dfc8:	6878      	ldr	r0, [r7, #4]
 803dfca:	f000 fc37 	bl	803e83c <USBD_CtlSendData>
              break;
 803dfce:	e06a      	b.n	803e0a6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803dfd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803dfd4:	2b00      	cmp	r3, #0
 803dfd6:	da11      	bge.n	803dffc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803dfd8:	7bbb      	ldrb	r3, [r7, #14]
 803dfda:	f003 020f 	and.w	r2, r3, #15
 803dfde:	6879      	ldr	r1, [r7, #4]
 803dfe0:	4613      	mov	r3, r2
 803dfe2:	009b      	lsls	r3, r3, #2
 803dfe4:	4413      	add	r3, r2
 803dfe6:	009b      	lsls	r3, r3, #2
 803dfe8:	440b      	add	r3, r1
 803dfea:	3324      	adds	r3, #36	; 0x24
 803dfec:	881b      	ldrh	r3, [r3, #0]
 803dfee:	2b00      	cmp	r3, #0
 803dff0:	d117      	bne.n	803e022 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803dff2:	6839      	ldr	r1, [r7, #0]
 803dff4:	6878      	ldr	r0, [r7, #4]
 803dff6:	f000 fbb0 	bl	803e75a <USBD_CtlError>
                  break;
 803dffa:	e054      	b.n	803e0a6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803dffc:	7bbb      	ldrb	r3, [r7, #14]
 803dffe:	f003 020f 	and.w	r2, r3, #15
 803e002:	6879      	ldr	r1, [r7, #4]
 803e004:	4613      	mov	r3, r2
 803e006:	009b      	lsls	r3, r3, #2
 803e008:	4413      	add	r3, r2
 803e00a:	009b      	lsls	r3, r3, #2
 803e00c:	440b      	add	r3, r1
 803e00e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803e012:	881b      	ldrh	r3, [r3, #0]
 803e014:	2b00      	cmp	r3, #0
 803e016:	d104      	bne.n	803e022 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803e018:	6839      	ldr	r1, [r7, #0]
 803e01a:	6878      	ldr	r0, [r7, #4]
 803e01c:	f000 fb9d 	bl	803e75a <USBD_CtlError>
                  break;
 803e020:	e041      	b.n	803e0a6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803e022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803e026:	2b00      	cmp	r3, #0
 803e028:	da0b      	bge.n	803e042 <USBD_StdEPReq+0x2b2>
 803e02a:	7bbb      	ldrb	r3, [r7, #14]
 803e02c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803e030:	4613      	mov	r3, r2
 803e032:	009b      	lsls	r3, r3, #2
 803e034:	4413      	add	r3, r2
 803e036:	009b      	lsls	r3, r3, #2
 803e038:	3310      	adds	r3, #16
 803e03a:	687a      	ldr	r2, [r7, #4]
 803e03c:	4413      	add	r3, r2
 803e03e:	3304      	adds	r3, #4
 803e040:	e00b      	b.n	803e05a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803e042:	7bbb      	ldrb	r3, [r7, #14]
 803e044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803e048:	4613      	mov	r3, r2
 803e04a:	009b      	lsls	r3, r3, #2
 803e04c:	4413      	add	r3, r2
 803e04e:	009b      	lsls	r3, r3, #2
 803e050:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803e054:	687a      	ldr	r2, [r7, #4]
 803e056:	4413      	add	r3, r2
 803e058:	3304      	adds	r3, #4
 803e05a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803e05c:	7bbb      	ldrb	r3, [r7, #14]
 803e05e:	2b00      	cmp	r3, #0
 803e060:	d002      	beq.n	803e068 <USBD_StdEPReq+0x2d8>
 803e062:	7bbb      	ldrb	r3, [r7, #14]
 803e064:	2b80      	cmp	r3, #128	; 0x80
 803e066:	d103      	bne.n	803e070 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803e068:	68bb      	ldr	r3, [r7, #8]
 803e06a:	2200      	movs	r2, #0
 803e06c:	601a      	str	r2, [r3, #0]
 803e06e:	e00e      	b.n	803e08e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803e070:	7bbb      	ldrb	r3, [r7, #14]
 803e072:	4619      	mov	r1, r3
 803e074:	6878      	ldr	r0, [r7, #4]
 803e076:	f001 f89d 	bl	803f1b4 <USBD_LL_IsStallEP>
 803e07a:	4603      	mov	r3, r0
 803e07c:	2b00      	cmp	r3, #0
 803e07e:	d003      	beq.n	803e088 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803e080:	68bb      	ldr	r3, [r7, #8]
 803e082:	2201      	movs	r2, #1
 803e084:	601a      	str	r2, [r3, #0]
 803e086:	e002      	b.n	803e08e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803e088:	68bb      	ldr	r3, [r7, #8]
 803e08a:	2200      	movs	r2, #0
 803e08c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803e08e:	68bb      	ldr	r3, [r7, #8]
 803e090:	2202      	movs	r2, #2
 803e092:	4619      	mov	r1, r3
 803e094:	6878      	ldr	r0, [r7, #4]
 803e096:	f000 fbd1 	bl	803e83c <USBD_CtlSendData>
              break;
 803e09a:	e004      	b.n	803e0a6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803e09c:	6839      	ldr	r1, [r7, #0]
 803e09e:	6878      	ldr	r0, [r7, #4]
 803e0a0:	f000 fb5b 	bl	803e75a <USBD_CtlError>
              break;
 803e0a4:	bf00      	nop
          }
          break;
 803e0a6:	e004      	b.n	803e0b2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803e0a8:	6839      	ldr	r1, [r7, #0]
 803e0aa:	6878      	ldr	r0, [r7, #4]
 803e0ac:	f000 fb55 	bl	803e75a <USBD_CtlError>
          break;
 803e0b0:	bf00      	nop
      }
      break;
 803e0b2:	e005      	b.n	803e0c0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803e0b4:	6839      	ldr	r1, [r7, #0]
 803e0b6:	6878      	ldr	r0, [r7, #4]
 803e0b8:	f000 fb4f 	bl	803e75a <USBD_CtlError>
      break;
 803e0bc:	e000      	b.n	803e0c0 <USBD_StdEPReq+0x330>
      break;
 803e0be:	bf00      	nop
  }

  return ret;
 803e0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 803e0c2:	4618      	mov	r0, r3
 803e0c4:	3710      	adds	r7, #16
 803e0c6:	46bd      	mov	sp, r7
 803e0c8:	bd80      	pop	{r7, pc}
	...

0803e0cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e0cc:	b580      	push	{r7, lr}
 803e0ce:	b084      	sub	sp, #16
 803e0d0:	af00      	add	r7, sp, #0
 803e0d2:	6078      	str	r0, [r7, #4]
 803e0d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803e0d6:	2300      	movs	r3, #0
 803e0d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803e0da:	2300      	movs	r3, #0
 803e0dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803e0de:	2300      	movs	r3, #0
 803e0e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803e0e2:	683b      	ldr	r3, [r7, #0]
 803e0e4:	885b      	ldrh	r3, [r3, #2]
 803e0e6:	0a1b      	lsrs	r3, r3, #8
 803e0e8:	b29b      	uxth	r3, r3
 803e0ea:	3b01      	subs	r3, #1
 803e0ec:	2b06      	cmp	r3, #6
 803e0ee:	f200 8128 	bhi.w	803e342 <USBD_GetDescriptor+0x276>
 803e0f2:	a201      	add	r2, pc, #4	; (adr r2, 803e0f8 <USBD_GetDescriptor+0x2c>)
 803e0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803e0f8:	0803e115 	.word	0x0803e115
 803e0fc:	0803e12d 	.word	0x0803e12d
 803e100:	0803e16d 	.word	0x0803e16d
 803e104:	0803e343 	.word	0x0803e343
 803e108:	0803e343 	.word	0x0803e343
 803e10c:	0803e2e3 	.word	0x0803e2e3
 803e110:	0803e30f 	.word	0x0803e30f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803e114:	687b      	ldr	r3, [r7, #4]
 803e116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e11a:	681b      	ldr	r3, [r3, #0]
 803e11c:	687a      	ldr	r2, [r7, #4]
 803e11e:	7c12      	ldrb	r2, [r2, #16]
 803e120:	f107 0108 	add.w	r1, r7, #8
 803e124:	4610      	mov	r0, r2
 803e126:	4798      	blx	r3
 803e128:	60f8      	str	r0, [r7, #12]
      break;
 803e12a:	e112      	b.n	803e352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803e12c:	687b      	ldr	r3, [r7, #4]
 803e12e:	7c1b      	ldrb	r3, [r3, #16]
 803e130:	2b00      	cmp	r3, #0
 803e132:	d10d      	bne.n	803e150 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803e134:	687b      	ldr	r3, [r7, #4]
 803e136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803e13c:	f107 0208 	add.w	r2, r7, #8
 803e140:	4610      	mov	r0, r2
 803e142:	4798      	blx	r3
 803e144:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803e146:	68fb      	ldr	r3, [r7, #12]
 803e148:	3301      	adds	r3, #1
 803e14a:	2202      	movs	r2, #2
 803e14c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803e14e:	e100      	b.n	803e352 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803e150:	687b      	ldr	r3, [r7, #4]
 803e152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803e158:	f107 0208 	add.w	r2, r7, #8
 803e15c:	4610      	mov	r0, r2
 803e15e:	4798      	blx	r3
 803e160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803e162:	68fb      	ldr	r3, [r7, #12]
 803e164:	3301      	adds	r3, #1
 803e166:	2202      	movs	r2, #2
 803e168:	701a      	strb	r2, [r3, #0]
      break;
 803e16a:	e0f2      	b.n	803e352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803e16c:	683b      	ldr	r3, [r7, #0]
 803e16e:	885b      	ldrh	r3, [r3, #2]
 803e170:	b2db      	uxtb	r3, r3
 803e172:	2b05      	cmp	r3, #5
 803e174:	f200 80ac 	bhi.w	803e2d0 <USBD_GetDescriptor+0x204>
 803e178:	a201      	add	r2, pc, #4	; (adr r2, 803e180 <USBD_GetDescriptor+0xb4>)
 803e17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803e17e:	bf00      	nop
 803e180:	0803e199 	.word	0x0803e199
 803e184:	0803e1cd 	.word	0x0803e1cd
 803e188:	0803e201 	.word	0x0803e201
 803e18c:	0803e235 	.word	0x0803e235
 803e190:	0803e269 	.word	0x0803e269
 803e194:	0803e29d 	.word	0x0803e29d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803e198:	687b      	ldr	r3, [r7, #4]
 803e19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e19e:	685b      	ldr	r3, [r3, #4]
 803e1a0:	2b00      	cmp	r3, #0
 803e1a2:	d00b      	beq.n	803e1bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803e1a4:	687b      	ldr	r3, [r7, #4]
 803e1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e1aa:	685b      	ldr	r3, [r3, #4]
 803e1ac:	687a      	ldr	r2, [r7, #4]
 803e1ae:	7c12      	ldrb	r2, [r2, #16]
 803e1b0:	f107 0108 	add.w	r1, r7, #8
 803e1b4:	4610      	mov	r0, r2
 803e1b6:	4798      	blx	r3
 803e1b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803e1ba:	e091      	b.n	803e2e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803e1bc:	6839      	ldr	r1, [r7, #0]
 803e1be:	6878      	ldr	r0, [r7, #4]
 803e1c0:	f000 facb 	bl	803e75a <USBD_CtlError>
            err++;
 803e1c4:	7afb      	ldrb	r3, [r7, #11]
 803e1c6:	3301      	adds	r3, #1
 803e1c8:	72fb      	strb	r3, [r7, #11]
          break;
 803e1ca:	e089      	b.n	803e2e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803e1cc:	687b      	ldr	r3, [r7, #4]
 803e1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e1d2:	689b      	ldr	r3, [r3, #8]
 803e1d4:	2b00      	cmp	r3, #0
 803e1d6:	d00b      	beq.n	803e1f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803e1d8:	687b      	ldr	r3, [r7, #4]
 803e1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e1de:	689b      	ldr	r3, [r3, #8]
 803e1e0:	687a      	ldr	r2, [r7, #4]
 803e1e2:	7c12      	ldrb	r2, [r2, #16]
 803e1e4:	f107 0108 	add.w	r1, r7, #8
 803e1e8:	4610      	mov	r0, r2
 803e1ea:	4798      	blx	r3
 803e1ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803e1ee:	e077      	b.n	803e2e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803e1f0:	6839      	ldr	r1, [r7, #0]
 803e1f2:	6878      	ldr	r0, [r7, #4]
 803e1f4:	f000 fab1 	bl	803e75a <USBD_CtlError>
            err++;
 803e1f8:	7afb      	ldrb	r3, [r7, #11]
 803e1fa:	3301      	adds	r3, #1
 803e1fc:	72fb      	strb	r3, [r7, #11]
          break;
 803e1fe:	e06f      	b.n	803e2e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803e200:	687b      	ldr	r3, [r7, #4]
 803e202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e206:	68db      	ldr	r3, [r3, #12]
 803e208:	2b00      	cmp	r3, #0
 803e20a:	d00b      	beq.n	803e224 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803e20c:	687b      	ldr	r3, [r7, #4]
 803e20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e212:	68db      	ldr	r3, [r3, #12]
 803e214:	687a      	ldr	r2, [r7, #4]
 803e216:	7c12      	ldrb	r2, [r2, #16]
 803e218:	f107 0108 	add.w	r1, r7, #8
 803e21c:	4610      	mov	r0, r2
 803e21e:	4798      	blx	r3
 803e220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803e222:	e05d      	b.n	803e2e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803e224:	6839      	ldr	r1, [r7, #0]
 803e226:	6878      	ldr	r0, [r7, #4]
 803e228:	f000 fa97 	bl	803e75a <USBD_CtlError>
            err++;
 803e22c:	7afb      	ldrb	r3, [r7, #11]
 803e22e:	3301      	adds	r3, #1
 803e230:	72fb      	strb	r3, [r7, #11]
          break;
 803e232:	e055      	b.n	803e2e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803e234:	687b      	ldr	r3, [r7, #4]
 803e236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e23a:	691b      	ldr	r3, [r3, #16]
 803e23c:	2b00      	cmp	r3, #0
 803e23e:	d00b      	beq.n	803e258 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803e240:	687b      	ldr	r3, [r7, #4]
 803e242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e246:	691b      	ldr	r3, [r3, #16]
 803e248:	687a      	ldr	r2, [r7, #4]
 803e24a:	7c12      	ldrb	r2, [r2, #16]
 803e24c:	f107 0108 	add.w	r1, r7, #8
 803e250:	4610      	mov	r0, r2
 803e252:	4798      	blx	r3
 803e254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803e256:	e043      	b.n	803e2e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803e258:	6839      	ldr	r1, [r7, #0]
 803e25a:	6878      	ldr	r0, [r7, #4]
 803e25c:	f000 fa7d 	bl	803e75a <USBD_CtlError>
            err++;
 803e260:	7afb      	ldrb	r3, [r7, #11]
 803e262:	3301      	adds	r3, #1
 803e264:	72fb      	strb	r3, [r7, #11]
          break;
 803e266:	e03b      	b.n	803e2e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803e268:	687b      	ldr	r3, [r7, #4]
 803e26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e26e:	695b      	ldr	r3, [r3, #20]
 803e270:	2b00      	cmp	r3, #0
 803e272:	d00b      	beq.n	803e28c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803e274:	687b      	ldr	r3, [r7, #4]
 803e276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e27a:	695b      	ldr	r3, [r3, #20]
 803e27c:	687a      	ldr	r2, [r7, #4]
 803e27e:	7c12      	ldrb	r2, [r2, #16]
 803e280:	f107 0108 	add.w	r1, r7, #8
 803e284:	4610      	mov	r0, r2
 803e286:	4798      	blx	r3
 803e288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803e28a:	e029      	b.n	803e2e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803e28c:	6839      	ldr	r1, [r7, #0]
 803e28e:	6878      	ldr	r0, [r7, #4]
 803e290:	f000 fa63 	bl	803e75a <USBD_CtlError>
            err++;
 803e294:	7afb      	ldrb	r3, [r7, #11]
 803e296:	3301      	adds	r3, #1
 803e298:	72fb      	strb	r3, [r7, #11]
          break;
 803e29a:	e021      	b.n	803e2e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803e29c:	687b      	ldr	r3, [r7, #4]
 803e29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e2a2:	699b      	ldr	r3, [r3, #24]
 803e2a4:	2b00      	cmp	r3, #0
 803e2a6:	d00b      	beq.n	803e2c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803e2a8:	687b      	ldr	r3, [r7, #4]
 803e2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803e2ae:	699b      	ldr	r3, [r3, #24]
 803e2b0:	687a      	ldr	r2, [r7, #4]
 803e2b2:	7c12      	ldrb	r2, [r2, #16]
 803e2b4:	f107 0108 	add.w	r1, r7, #8
 803e2b8:	4610      	mov	r0, r2
 803e2ba:	4798      	blx	r3
 803e2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803e2be:	e00f      	b.n	803e2e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803e2c0:	6839      	ldr	r1, [r7, #0]
 803e2c2:	6878      	ldr	r0, [r7, #4]
 803e2c4:	f000 fa49 	bl	803e75a <USBD_CtlError>
            err++;
 803e2c8:	7afb      	ldrb	r3, [r7, #11]
 803e2ca:	3301      	adds	r3, #1
 803e2cc:	72fb      	strb	r3, [r7, #11]
          break;
 803e2ce:	e007      	b.n	803e2e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803e2d0:	6839      	ldr	r1, [r7, #0]
 803e2d2:	6878      	ldr	r0, [r7, #4]
 803e2d4:	f000 fa41 	bl	803e75a <USBD_CtlError>
          err++;
 803e2d8:	7afb      	ldrb	r3, [r7, #11]
 803e2da:	3301      	adds	r3, #1
 803e2dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803e2de:	bf00      	nop
      }
      break;
 803e2e0:	e037      	b.n	803e352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803e2e2:	687b      	ldr	r3, [r7, #4]
 803e2e4:	7c1b      	ldrb	r3, [r3, #16]
 803e2e6:	2b00      	cmp	r3, #0
 803e2e8:	d109      	bne.n	803e2fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803e2ea:	687b      	ldr	r3, [r7, #4]
 803e2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803e2f2:	f107 0208 	add.w	r2, r7, #8
 803e2f6:	4610      	mov	r0, r2
 803e2f8:	4798      	blx	r3
 803e2fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803e2fc:	e029      	b.n	803e352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803e2fe:	6839      	ldr	r1, [r7, #0]
 803e300:	6878      	ldr	r0, [r7, #4]
 803e302:	f000 fa2a 	bl	803e75a <USBD_CtlError>
        err++;
 803e306:	7afb      	ldrb	r3, [r7, #11]
 803e308:	3301      	adds	r3, #1
 803e30a:	72fb      	strb	r3, [r7, #11]
      break;
 803e30c:	e021      	b.n	803e352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803e30e:	687b      	ldr	r3, [r7, #4]
 803e310:	7c1b      	ldrb	r3, [r3, #16]
 803e312:	2b00      	cmp	r3, #0
 803e314:	d10d      	bne.n	803e332 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803e316:	687b      	ldr	r3, [r7, #4]
 803e318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803e31e:	f107 0208 	add.w	r2, r7, #8
 803e322:	4610      	mov	r0, r2
 803e324:	4798      	blx	r3
 803e326:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803e328:	68fb      	ldr	r3, [r7, #12]
 803e32a:	3301      	adds	r3, #1
 803e32c:	2207      	movs	r2, #7
 803e32e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803e330:	e00f      	b.n	803e352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803e332:	6839      	ldr	r1, [r7, #0]
 803e334:	6878      	ldr	r0, [r7, #4]
 803e336:	f000 fa10 	bl	803e75a <USBD_CtlError>
        err++;
 803e33a:	7afb      	ldrb	r3, [r7, #11]
 803e33c:	3301      	adds	r3, #1
 803e33e:	72fb      	strb	r3, [r7, #11]
      break;
 803e340:	e007      	b.n	803e352 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803e342:	6839      	ldr	r1, [r7, #0]
 803e344:	6878      	ldr	r0, [r7, #4]
 803e346:	f000 fa08 	bl	803e75a <USBD_CtlError>
      err++;
 803e34a:	7afb      	ldrb	r3, [r7, #11]
 803e34c:	3301      	adds	r3, #1
 803e34e:	72fb      	strb	r3, [r7, #11]
      break;
 803e350:	bf00      	nop
  }

  if (err != 0U)
 803e352:	7afb      	ldrb	r3, [r7, #11]
 803e354:	2b00      	cmp	r3, #0
 803e356:	d11e      	bne.n	803e396 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803e358:	683b      	ldr	r3, [r7, #0]
 803e35a:	88db      	ldrh	r3, [r3, #6]
 803e35c:	2b00      	cmp	r3, #0
 803e35e:	d016      	beq.n	803e38e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803e360:	893b      	ldrh	r3, [r7, #8]
 803e362:	2b00      	cmp	r3, #0
 803e364:	d00e      	beq.n	803e384 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803e366:	683b      	ldr	r3, [r7, #0]
 803e368:	88da      	ldrh	r2, [r3, #6]
 803e36a:	893b      	ldrh	r3, [r7, #8]
 803e36c:	4293      	cmp	r3, r2
 803e36e:	bf28      	it	cs
 803e370:	4613      	movcs	r3, r2
 803e372:	b29b      	uxth	r3, r3
 803e374:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803e376:	893b      	ldrh	r3, [r7, #8]
 803e378:	461a      	mov	r2, r3
 803e37a:	68f9      	ldr	r1, [r7, #12]
 803e37c:	6878      	ldr	r0, [r7, #4]
 803e37e:	f000 fa5d 	bl	803e83c <USBD_CtlSendData>
 803e382:	e009      	b.n	803e398 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803e384:	6839      	ldr	r1, [r7, #0]
 803e386:	6878      	ldr	r0, [r7, #4]
 803e388:	f000 f9e7 	bl	803e75a <USBD_CtlError>
 803e38c:	e004      	b.n	803e398 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803e38e:	6878      	ldr	r0, [r7, #4]
 803e390:	f000 faae 	bl	803e8f0 <USBD_CtlSendStatus>
 803e394:	e000      	b.n	803e398 <USBD_GetDescriptor+0x2cc>
    return;
 803e396:	bf00      	nop
  }
}
 803e398:	3710      	adds	r7, #16
 803e39a:	46bd      	mov	sp, r7
 803e39c:	bd80      	pop	{r7, pc}
 803e39e:	bf00      	nop

0803e3a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e3a0:	b580      	push	{r7, lr}
 803e3a2:	b084      	sub	sp, #16
 803e3a4:	af00      	add	r7, sp, #0
 803e3a6:	6078      	str	r0, [r7, #4]
 803e3a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803e3aa:	683b      	ldr	r3, [r7, #0]
 803e3ac:	889b      	ldrh	r3, [r3, #4]
 803e3ae:	2b00      	cmp	r3, #0
 803e3b0:	d131      	bne.n	803e416 <USBD_SetAddress+0x76>
 803e3b2:	683b      	ldr	r3, [r7, #0]
 803e3b4:	88db      	ldrh	r3, [r3, #6]
 803e3b6:	2b00      	cmp	r3, #0
 803e3b8:	d12d      	bne.n	803e416 <USBD_SetAddress+0x76>
 803e3ba:	683b      	ldr	r3, [r7, #0]
 803e3bc:	885b      	ldrh	r3, [r3, #2]
 803e3be:	2b7f      	cmp	r3, #127	; 0x7f
 803e3c0:	d829      	bhi.n	803e416 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803e3c2:	683b      	ldr	r3, [r7, #0]
 803e3c4:	885b      	ldrh	r3, [r3, #2]
 803e3c6:	b2db      	uxtb	r3, r3
 803e3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803e3cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e3ce:	687b      	ldr	r3, [r7, #4]
 803e3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e3d4:	b2db      	uxtb	r3, r3
 803e3d6:	2b03      	cmp	r3, #3
 803e3d8:	d104      	bne.n	803e3e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803e3da:	6839      	ldr	r1, [r7, #0]
 803e3dc:	6878      	ldr	r0, [r7, #4]
 803e3de:	f000 f9bc 	bl	803e75a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e3e2:	e01d      	b.n	803e420 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803e3e4:	687b      	ldr	r3, [r7, #4]
 803e3e6:	7bfa      	ldrb	r2, [r7, #15]
 803e3e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803e3ec:	7bfb      	ldrb	r3, [r7, #15]
 803e3ee:	4619      	mov	r1, r3
 803e3f0:	6878      	ldr	r0, [r7, #4]
 803e3f2:	f000 ff0b 	bl	803f20c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803e3f6:	6878      	ldr	r0, [r7, #4]
 803e3f8:	f000 fa7a 	bl	803e8f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803e3fc:	7bfb      	ldrb	r3, [r7, #15]
 803e3fe:	2b00      	cmp	r3, #0
 803e400:	d004      	beq.n	803e40c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803e402:	687b      	ldr	r3, [r7, #4]
 803e404:	2202      	movs	r2, #2
 803e406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e40a:	e009      	b.n	803e420 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803e40c:	687b      	ldr	r3, [r7, #4]
 803e40e:	2201      	movs	r2, #1
 803e410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803e414:	e004      	b.n	803e420 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803e416:	6839      	ldr	r1, [r7, #0]
 803e418:	6878      	ldr	r0, [r7, #4]
 803e41a:	f000 f99e 	bl	803e75a <USBD_CtlError>
  }
}
 803e41e:	bf00      	nop
 803e420:	bf00      	nop
 803e422:	3710      	adds	r7, #16
 803e424:	46bd      	mov	sp, r7
 803e426:	bd80      	pop	{r7, pc}

0803e428 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e428:	b580      	push	{r7, lr}
 803e42a:	b084      	sub	sp, #16
 803e42c:	af00      	add	r7, sp, #0
 803e42e:	6078      	str	r0, [r7, #4]
 803e430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803e432:	2300      	movs	r3, #0
 803e434:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803e436:	683b      	ldr	r3, [r7, #0]
 803e438:	885b      	ldrh	r3, [r3, #2]
 803e43a:	b2da      	uxtb	r2, r3
 803e43c:	4b4e      	ldr	r3, [pc, #312]	; (803e578 <USBD_SetConfig+0x150>)
 803e43e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803e440:	4b4d      	ldr	r3, [pc, #308]	; (803e578 <USBD_SetConfig+0x150>)
 803e442:	781b      	ldrb	r3, [r3, #0]
 803e444:	2b01      	cmp	r3, #1
 803e446:	d905      	bls.n	803e454 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803e448:	6839      	ldr	r1, [r7, #0]
 803e44a:	6878      	ldr	r0, [r7, #4]
 803e44c:	f000 f985 	bl	803e75a <USBD_CtlError>
    return USBD_FAIL;
 803e450:	2303      	movs	r3, #3
 803e452:	e08c      	b.n	803e56e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803e454:	687b      	ldr	r3, [r7, #4]
 803e456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e45a:	b2db      	uxtb	r3, r3
 803e45c:	2b02      	cmp	r3, #2
 803e45e:	d002      	beq.n	803e466 <USBD_SetConfig+0x3e>
 803e460:	2b03      	cmp	r3, #3
 803e462:	d029      	beq.n	803e4b8 <USBD_SetConfig+0x90>
 803e464:	e075      	b.n	803e552 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803e466:	4b44      	ldr	r3, [pc, #272]	; (803e578 <USBD_SetConfig+0x150>)
 803e468:	781b      	ldrb	r3, [r3, #0]
 803e46a:	2b00      	cmp	r3, #0
 803e46c:	d020      	beq.n	803e4b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803e46e:	4b42      	ldr	r3, [pc, #264]	; (803e578 <USBD_SetConfig+0x150>)
 803e470:	781b      	ldrb	r3, [r3, #0]
 803e472:	461a      	mov	r2, r3
 803e474:	687b      	ldr	r3, [r7, #4]
 803e476:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803e478:	4b3f      	ldr	r3, [pc, #252]	; (803e578 <USBD_SetConfig+0x150>)
 803e47a:	781b      	ldrb	r3, [r3, #0]
 803e47c:	4619      	mov	r1, r3
 803e47e:	6878      	ldr	r0, [r7, #4]
 803e480:	f7fe ffe7 	bl	803d452 <USBD_SetClassConfig>
 803e484:	4603      	mov	r3, r0
 803e486:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803e488:	7bfb      	ldrb	r3, [r7, #15]
 803e48a:	2b00      	cmp	r3, #0
 803e48c:	d008      	beq.n	803e4a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803e48e:	6839      	ldr	r1, [r7, #0]
 803e490:	6878      	ldr	r0, [r7, #4]
 803e492:	f000 f962 	bl	803e75a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803e496:	687b      	ldr	r3, [r7, #4]
 803e498:	2202      	movs	r2, #2
 803e49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803e49e:	e065      	b.n	803e56c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803e4a0:	6878      	ldr	r0, [r7, #4]
 803e4a2:	f000 fa25 	bl	803e8f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803e4a6:	687b      	ldr	r3, [r7, #4]
 803e4a8:	2203      	movs	r2, #3
 803e4aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803e4ae:	e05d      	b.n	803e56c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803e4b0:	6878      	ldr	r0, [r7, #4]
 803e4b2:	f000 fa1d 	bl	803e8f0 <USBD_CtlSendStatus>
      break;
 803e4b6:	e059      	b.n	803e56c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803e4b8:	4b2f      	ldr	r3, [pc, #188]	; (803e578 <USBD_SetConfig+0x150>)
 803e4ba:	781b      	ldrb	r3, [r3, #0]
 803e4bc:	2b00      	cmp	r3, #0
 803e4be:	d112      	bne.n	803e4e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803e4c0:	687b      	ldr	r3, [r7, #4]
 803e4c2:	2202      	movs	r2, #2
 803e4c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803e4c8:	4b2b      	ldr	r3, [pc, #172]	; (803e578 <USBD_SetConfig+0x150>)
 803e4ca:	781b      	ldrb	r3, [r3, #0]
 803e4cc:	461a      	mov	r2, r3
 803e4ce:	687b      	ldr	r3, [r7, #4]
 803e4d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803e4d2:	4b29      	ldr	r3, [pc, #164]	; (803e578 <USBD_SetConfig+0x150>)
 803e4d4:	781b      	ldrb	r3, [r3, #0]
 803e4d6:	4619      	mov	r1, r3
 803e4d8:	6878      	ldr	r0, [r7, #4]
 803e4da:	f7fe ffd6 	bl	803d48a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803e4de:	6878      	ldr	r0, [r7, #4]
 803e4e0:	f000 fa06 	bl	803e8f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803e4e4:	e042      	b.n	803e56c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803e4e6:	4b24      	ldr	r3, [pc, #144]	; (803e578 <USBD_SetConfig+0x150>)
 803e4e8:	781b      	ldrb	r3, [r3, #0]
 803e4ea:	461a      	mov	r2, r3
 803e4ec:	687b      	ldr	r3, [r7, #4]
 803e4ee:	685b      	ldr	r3, [r3, #4]
 803e4f0:	429a      	cmp	r2, r3
 803e4f2:	d02a      	beq.n	803e54a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803e4f4:	687b      	ldr	r3, [r7, #4]
 803e4f6:	685b      	ldr	r3, [r3, #4]
 803e4f8:	b2db      	uxtb	r3, r3
 803e4fa:	4619      	mov	r1, r3
 803e4fc:	6878      	ldr	r0, [r7, #4]
 803e4fe:	f7fe ffc4 	bl	803d48a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803e502:	4b1d      	ldr	r3, [pc, #116]	; (803e578 <USBD_SetConfig+0x150>)
 803e504:	781b      	ldrb	r3, [r3, #0]
 803e506:	461a      	mov	r2, r3
 803e508:	687b      	ldr	r3, [r7, #4]
 803e50a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803e50c:	4b1a      	ldr	r3, [pc, #104]	; (803e578 <USBD_SetConfig+0x150>)
 803e50e:	781b      	ldrb	r3, [r3, #0]
 803e510:	4619      	mov	r1, r3
 803e512:	6878      	ldr	r0, [r7, #4]
 803e514:	f7fe ff9d 	bl	803d452 <USBD_SetClassConfig>
 803e518:	4603      	mov	r3, r0
 803e51a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803e51c:	7bfb      	ldrb	r3, [r7, #15]
 803e51e:	2b00      	cmp	r3, #0
 803e520:	d00f      	beq.n	803e542 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803e522:	6839      	ldr	r1, [r7, #0]
 803e524:	6878      	ldr	r0, [r7, #4]
 803e526:	f000 f918 	bl	803e75a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803e52a:	687b      	ldr	r3, [r7, #4]
 803e52c:	685b      	ldr	r3, [r3, #4]
 803e52e:	b2db      	uxtb	r3, r3
 803e530:	4619      	mov	r1, r3
 803e532:	6878      	ldr	r0, [r7, #4]
 803e534:	f7fe ffa9 	bl	803d48a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803e538:	687b      	ldr	r3, [r7, #4]
 803e53a:	2202      	movs	r2, #2
 803e53c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803e540:	e014      	b.n	803e56c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803e542:	6878      	ldr	r0, [r7, #4]
 803e544:	f000 f9d4 	bl	803e8f0 <USBD_CtlSendStatus>
      break;
 803e548:	e010      	b.n	803e56c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803e54a:	6878      	ldr	r0, [r7, #4]
 803e54c:	f000 f9d0 	bl	803e8f0 <USBD_CtlSendStatus>
      break;
 803e550:	e00c      	b.n	803e56c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803e552:	6839      	ldr	r1, [r7, #0]
 803e554:	6878      	ldr	r0, [r7, #4]
 803e556:	f000 f900 	bl	803e75a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803e55a:	4b07      	ldr	r3, [pc, #28]	; (803e578 <USBD_SetConfig+0x150>)
 803e55c:	781b      	ldrb	r3, [r3, #0]
 803e55e:	4619      	mov	r1, r3
 803e560:	6878      	ldr	r0, [r7, #4]
 803e562:	f7fe ff92 	bl	803d48a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803e566:	2303      	movs	r3, #3
 803e568:	73fb      	strb	r3, [r7, #15]
      break;
 803e56a:	bf00      	nop
  }

  return ret;
 803e56c:	7bfb      	ldrb	r3, [r7, #15]
}
 803e56e:	4618      	mov	r0, r3
 803e570:	3710      	adds	r7, #16
 803e572:	46bd      	mov	sp, r7
 803e574:	bd80      	pop	{r7, pc}
 803e576:	bf00      	nop
 803e578:	24001bd0 	.word	0x24001bd0

0803e57c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e57c:	b580      	push	{r7, lr}
 803e57e:	b082      	sub	sp, #8
 803e580:	af00      	add	r7, sp, #0
 803e582:	6078      	str	r0, [r7, #4]
 803e584:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803e586:	683b      	ldr	r3, [r7, #0]
 803e588:	88db      	ldrh	r3, [r3, #6]
 803e58a:	2b01      	cmp	r3, #1
 803e58c:	d004      	beq.n	803e598 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803e58e:	6839      	ldr	r1, [r7, #0]
 803e590:	6878      	ldr	r0, [r7, #4]
 803e592:	f000 f8e2 	bl	803e75a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803e596:	e023      	b.n	803e5e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803e598:	687b      	ldr	r3, [r7, #4]
 803e59a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e59e:	b2db      	uxtb	r3, r3
 803e5a0:	2b02      	cmp	r3, #2
 803e5a2:	dc02      	bgt.n	803e5aa <USBD_GetConfig+0x2e>
 803e5a4:	2b00      	cmp	r3, #0
 803e5a6:	dc03      	bgt.n	803e5b0 <USBD_GetConfig+0x34>
 803e5a8:	e015      	b.n	803e5d6 <USBD_GetConfig+0x5a>
 803e5aa:	2b03      	cmp	r3, #3
 803e5ac:	d00b      	beq.n	803e5c6 <USBD_GetConfig+0x4a>
 803e5ae:	e012      	b.n	803e5d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803e5b0:	687b      	ldr	r3, [r7, #4]
 803e5b2:	2200      	movs	r2, #0
 803e5b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803e5b6:	687b      	ldr	r3, [r7, #4]
 803e5b8:	3308      	adds	r3, #8
 803e5ba:	2201      	movs	r2, #1
 803e5bc:	4619      	mov	r1, r3
 803e5be:	6878      	ldr	r0, [r7, #4]
 803e5c0:	f000 f93c 	bl	803e83c <USBD_CtlSendData>
        break;
 803e5c4:	e00c      	b.n	803e5e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803e5c6:	687b      	ldr	r3, [r7, #4]
 803e5c8:	3304      	adds	r3, #4
 803e5ca:	2201      	movs	r2, #1
 803e5cc:	4619      	mov	r1, r3
 803e5ce:	6878      	ldr	r0, [r7, #4]
 803e5d0:	f000 f934 	bl	803e83c <USBD_CtlSendData>
        break;
 803e5d4:	e004      	b.n	803e5e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803e5d6:	6839      	ldr	r1, [r7, #0]
 803e5d8:	6878      	ldr	r0, [r7, #4]
 803e5da:	f000 f8be 	bl	803e75a <USBD_CtlError>
        break;
 803e5de:	bf00      	nop
}
 803e5e0:	bf00      	nop
 803e5e2:	3708      	adds	r7, #8
 803e5e4:	46bd      	mov	sp, r7
 803e5e6:	bd80      	pop	{r7, pc}

0803e5e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e5e8:	b580      	push	{r7, lr}
 803e5ea:	b082      	sub	sp, #8
 803e5ec:	af00      	add	r7, sp, #0
 803e5ee:	6078      	str	r0, [r7, #4]
 803e5f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803e5f2:	687b      	ldr	r3, [r7, #4]
 803e5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e5f8:	b2db      	uxtb	r3, r3
 803e5fa:	3b01      	subs	r3, #1
 803e5fc:	2b02      	cmp	r3, #2
 803e5fe:	d81e      	bhi.n	803e63e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803e600:	683b      	ldr	r3, [r7, #0]
 803e602:	88db      	ldrh	r3, [r3, #6]
 803e604:	2b02      	cmp	r3, #2
 803e606:	d004      	beq.n	803e612 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803e608:	6839      	ldr	r1, [r7, #0]
 803e60a:	6878      	ldr	r0, [r7, #4]
 803e60c:	f000 f8a5 	bl	803e75a <USBD_CtlError>
        break;
 803e610:	e01a      	b.n	803e648 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803e612:	687b      	ldr	r3, [r7, #4]
 803e614:	2201      	movs	r2, #1
 803e616:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803e618:	687b      	ldr	r3, [r7, #4]
 803e61a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803e61e:	2b00      	cmp	r3, #0
 803e620:	d005      	beq.n	803e62e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803e622:	687b      	ldr	r3, [r7, #4]
 803e624:	68db      	ldr	r3, [r3, #12]
 803e626:	f043 0202 	orr.w	r2, r3, #2
 803e62a:	687b      	ldr	r3, [r7, #4]
 803e62c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803e62e:	687b      	ldr	r3, [r7, #4]
 803e630:	330c      	adds	r3, #12
 803e632:	2202      	movs	r2, #2
 803e634:	4619      	mov	r1, r3
 803e636:	6878      	ldr	r0, [r7, #4]
 803e638:	f000 f900 	bl	803e83c <USBD_CtlSendData>
      break;
 803e63c:	e004      	b.n	803e648 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803e63e:	6839      	ldr	r1, [r7, #0]
 803e640:	6878      	ldr	r0, [r7, #4]
 803e642:	f000 f88a 	bl	803e75a <USBD_CtlError>
      break;
 803e646:	bf00      	nop
  }
}
 803e648:	bf00      	nop
 803e64a:	3708      	adds	r7, #8
 803e64c:	46bd      	mov	sp, r7
 803e64e:	bd80      	pop	{r7, pc}

0803e650 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e650:	b580      	push	{r7, lr}
 803e652:	b082      	sub	sp, #8
 803e654:	af00      	add	r7, sp, #0
 803e656:	6078      	str	r0, [r7, #4]
 803e658:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803e65a:	683b      	ldr	r3, [r7, #0]
 803e65c:	885b      	ldrh	r3, [r3, #2]
 803e65e:	2b01      	cmp	r3, #1
 803e660:	d107      	bne.n	803e672 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803e662:	687b      	ldr	r3, [r7, #4]
 803e664:	2201      	movs	r2, #1
 803e666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803e66a:	6878      	ldr	r0, [r7, #4]
 803e66c:	f000 f940 	bl	803e8f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803e670:	e013      	b.n	803e69a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803e672:	683b      	ldr	r3, [r7, #0]
 803e674:	885b      	ldrh	r3, [r3, #2]
 803e676:	2b02      	cmp	r3, #2
 803e678:	d10b      	bne.n	803e692 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803e67a:	683b      	ldr	r3, [r7, #0]
 803e67c:	889b      	ldrh	r3, [r3, #4]
 803e67e:	0a1b      	lsrs	r3, r3, #8
 803e680:	b29b      	uxth	r3, r3
 803e682:	b2da      	uxtb	r2, r3
 803e684:	687b      	ldr	r3, [r7, #4]
 803e686:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803e68a:	6878      	ldr	r0, [r7, #4]
 803e68c:	f000 f930 	bl	803e8f0 <USBD_CtlSendStatus>
}
 803e690:	e003      	b.n	803e69a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803e692:	6839      	ldr	r1, [r7, #0]
 803e694:	6878      	ldr	r0, [r7, #4]
 803e696:	f000 f860 	bl	803e75a <USBD_CtlError>
}
 803e69a:	bf00      	nop
 803e69c:	3708      	adds	r7, #8
 803e69e:	46bd      	mov	sp, r7
 803e6a0:	bd80      	pop	{r7, pc}

0803e6a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e6a2:	b580      	push	{r7, lr}
 803e6a4:	b082      	sub	sp, #8
 803e6a6:	af00      	add	r7, sp, #0
 803e6a8:	6078      	str	r0, [r7, #4]
 803e6aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803e6ac:	687b      	ldr	r3, [r7, #4]
 803e6ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803e6b2:	b2db      	uxtb	r3, r3
 803e6b4:	3b01      	subs	r3, #1
 803e6b6:	2b02      	cmp	r3, #2
 803e6b8:	d80b      	bhi.n	803e6d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803e6ba:	683b      	ldr	r3, [r7, #0]
 803e6bc:	885b      	ldrh	r3, [r3, #2]
 803e6be:	2b01      	cmp	r3, #1
 803e6c0:	d10c      	bne.n	803e6dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803e6c2:	687b      	ldr	r3, [r7, #4]
 803e6c4:	2200      	movs	r2, #0
 803e6c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803e6ca:	6878      	ldr	r0, [r7, #4]
 803e6cc:	f000 f910 	bl	803e8f0 <USBD_CtlSendStatus>
      }
      break;
 803e6d0:	e004      	b.n	803e6dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803e6d2:	6839      	ldr	r1, [r7, #0]
 803e6d4:	6878      	ldr	r0, [r7, #4]
 803e6d6:	f000 f840 	bl	803e75a <USBD_CtlError>
      break;
 803e6da:	e000      	b.n	803e6de <USBD_ClrFeature+0x3c>
      break;
 803e6dc:	bf00      	nop
  }
}
 803e6de:	bf00      	nop
 803e6e0:	3708      	adds	r7, #8
 803e6e2:	46bd      	mov	sp, r7
 803e6e4:	bd80      	pop	{r7, pc}

0803e6e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803e6e6:	b580      	push	{r7, lr}
 803e6e8:	b084      	sub	sp, #16
 803e6ea:	af00      	add	r7, sp, #0
 803e6ec:	6078      	str	r0, [r7, #4]
 803e6ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803e6f0:	683b      	ldr	r3, [r7, #0]
 803e6f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803e6f4:	68fb      	ldr	r3, [r7, #12]
 803e6f6:	781a      	ldrb	r2, [r3, #0]
 803e6f8:	687b      	ldr	r3, [r7, #4]
 803e6fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803e6fc:	68fb      	ldr	r3, [r7, #12]
 803e6fe:	3301      	adds	r3, #1
 803e700:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803e702:	68fb      	ldr	r3, [r7, #12]
 803e704:	781a      	ldrb	r2, [r3, #0]
 803e706:	687b      	ldr	r3, [r7, #4]
 803e708:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803e70a:	68fb      	ldr	r3, [r7, #12]
 803e70c:	3301      	adds	r3, #1
 803e70e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803e710:	68f8      	ldr	r0, [r7, #12]
 803e712:	f7ff fa41 	bl	803db98 <SWAPBYTE>
 803e716:	4603      	mov	r3, r0
 803e718:	461a      	mov	r2, r3
 803e71a:	687b      	ldr	r3, [r7, #4]
 803e71c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803e71e:	68fb      	ldr	r3, [r7, #12]
 803e720:	3301      	adds	r3, #1
 803e722:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803e724:	68fb      	ldr	r3, [r7, #12]
 803e726:	3301      	adds	r3, #1
 803e728:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803e72a:	68f8      	ldr	r0, [r7, #12]
 803e72c:	f7ff fa34 	bl	803db98 <SWAPBYTE>
 803e730:	4603      	mov	r3, r0
 803e732:	461a      	mov	r2, r3
 803e734:	687b      	ldr	r3, [r7, #4]
 803e736:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803e738:	68fb      	ldr	r3, [r7, #12]
 803e73a:	3301      	adds	r3, #1
 803e73c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803e73e:	68fb      	ldr	r3, [r7, #12]
 803e740:	3301      	adds	r3, #1
 803e742:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803e744:	68f8      	ldr	r0, [r7, #12]
 803e746:	f7ff fa27 	bl	803db98 <SWAPBYTE>
 803e74a:	4603      	mov	r3, r0
 803e74c:	461a      	mov	r2, r3
 803e74e:	687b      	ldr	r3, [r7, #4]
 803e750:	80da      	strh	r2, [r3, #6]
}
 803e752:	bf00      	nop
 803e754:	3710      	adds	r7, #16
 803e756:	46bd      	mov	sp, r7
 803e758:	bd80      	pop	{r7, pc}

0803e75a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803e75a:	b580      	push	{r7, lr}
 803e75c:	b082      	sub	sp, #8
 803e75e:	af00      	add	r7, sp, #0
 803e760:	6078      	str	r0, [r7, #4]
 803e762:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803e764:	2180      	movs	r1, #128	; 0x80
 803e766:	6878      	ldr	r0, [r7, #4]
 803e768:	f000 fce6 	bl	803f138 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803e76c:	2100      	movs	r1, #0
 803e76e:	6878      	ldr	r0, [r7, #4]
 803e770:	f000 fce2 	bl	803f138 <USBD_LL_StallEP>
}
 803e774:	bf00      	nop
 803e776:	3708      	adds	r7, #8
 803e778:	46bd      	mov	sp, r7
 803e77a:	bd80      	pop	{r7, pc}

0803e77c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803e77c:	b580      	push	{r7, lr}
 803e77e:	b086      	sub	sp, #24
 803e780:	af00      	add	r7, sp, #0
 803e782:	60f8      	str	r0, [r7, #12]
 803e784:	60b9      	str	r1, [r7, #8]
 803e786:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803e788:	2300      	movs	r3, #0
 803e78a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803e78c:	68fb      	ldr	r3, [r7, #12]
 803e78e:	2b00      	cmp	r3, #0
 803e790:	d036      	beq.n	803e800 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803e792:	68fb      	ldr	r3, [r7, #12]
 803e794:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803e796:	6938      	ldr	r0, [r7, #16]
 803e798:	f000 f836 	bl	803e808 <USBD_GetLen>
 803e79c:	4603      	mov	r3, r0
 803e79e:	3301      	adds	r3, #1
 803e7a0:	b29b      	uxth	r3, r3
 803e7a2:	005b      	lsls	r3, r3, #1
 803e7a4:	b29a      	uxth	r2, r3
 803e7a6:	687b      	ldr	r3, [r7, #4]
 803e7a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803e7aa:	7dfb      	ldrb	r3, [r7, #23]
 803e7ac:	68ba      	ldr	r2, [r7, #8]
 803e7ae:	4413      	add	r3, r2
 803e7b0:	687a      	ldr	r2, [r7, #4]
 803e7b2:	7812      	ldrb	r2, [r2, #0]
 803e7b4:	701a      	strb	r2, [r3, #0]
  idx++;
 803e7b6:	7dfb      	ldrb	r3, [r7, #23]
 803e7b8:	3301      	adds	r3, #1
 803e7ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803e7bc:	7dfb      	ldrb	r3, [r7, #23]
 803e7be:	68ba      	ldr	r2, [r7, #8]
 803e7c0:	4413      	add	r3, r2
 803e7c2:	2203      	movs	r2, #3
 803e7c4:	701a      	strb	r2, [r3, #0]
  idx++;
 803e7c6:	7dfb      	ldrb	r3, [r7, #23]
 803e7c8:	3301      	adds	r3, #1
 803e7ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803e7cc:	e013      	b.n	803e7f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803e7ce:	7dfb      	ldrb	r3, [r7, #23]
 803e7d0:	68ba      	ldr	r2, [r7, #8]
 803e7d2:	4413      	add	r3, r2
 803e7d4:	693a      	ldr	r2, [r7, #16]
 803e7d6:	7812      	ldrb	r2, [r2, #0]
 803e7d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803e7da:	693b      	ldr	r3, [r7, #16]
 803e7dc:	3301      	adds	r3, #1
 803e7de:	613b      	str	r3, [r7, #16]
    idx++;
 803e7e0:	7dfb      	ldrb	r3, [r7, #23]
 803e7e2:	3301      	adds	r3, #1
 803e7e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803e7e6:	7dfb      	ldrb	r3, [r7, #23]
 803e7e8:	68ba      	ldr	r2, [r7, #8]
 803e7ea:	4413      	add	r3, r2
 803e7ec:	2200      	movs	r2, #0
 803e7ee:	701a      	strb	r2, [r3, #0]
    idx++;
 803e7f0:	7dfb      	ldrb	r3, [r7, #23]
 803e7f2:	3301      	adds	r3, #1
 803e7f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803e7f6:	693b      	ldr	r3, [r7, #16]
 803e7f8:	781b      	ldrb	r3, [r3, #0]
 803e7fa:	2b00      	cmp	r3, #0
 803e7fc:	d1e7      	bne.n	803e7ce <USBD_GetString+0x52>
 803e7fe:	e000      	b.n	803e802 <USBD_GetString+0x86>
    return;
 803e800:	bf00      	nop
  }
}
 803e802:	3718      	adds	r7, #24
 803e804:	46bd      	mov	sp, r7
 803e806:	bd80      	pop	{r7, pc}

0803e808 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803e808:	b480      	push	{r7}
 803e80a:	b085      	sub	sp, #20
 803e80c:	af00      	add	r7, sp, #0
 803e80e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803e810:	2300      	movs	r3, #0
 803e812:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803e814:	687b      	ldr	r3, [r7, #4]
 803e816:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803e818:	e005      	b.n	803e826 <USBD_GetLen+0x1e>
  {
    len++;
 803e81a:	7bfb      	ldrb	r3, [r7, #15]
 803e81c:	3301      	adds	r3, #1
 803e81e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803e820:	68bb      	ldr	r3, [r7, #8]
 803e822:	3301      	adds	r3, #1
 803e824:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803e826:	68bb      	ldr	r3, [r7, #8]
 803e828:	781b      	ldrb	r3, [r3, #0]
 803e82a:	2b00      	cmp	r3, #0
 803e82c:	d1f5      	bne.n	803e81a <USBD_GetLen+0x12>
  }

  return len;
 803e82e:	7bfb      	ldrb	r3, [r7, #15]
}
 803e830:	4618      	mov	r0, r3
 803e832:	3714      	adds	r7, #20
 803e834:	46bd      	mov	sp, r7
 803e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e83a:	4770      	bx	lr

0803e83c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803e83c:	b580      	push	{r7, lr}
 803e83e:	b084      	sub	sp, #16
 803e840:	af00      	add	r7, sp, #0
 803e842:	60f8      	str	r0, [r7, #12]
 803e844:	60b9      	str	r1, [r7, #8]
 803e846:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803e848:	68fb      	ldr	r3, [r7, #12]
 803e84a:	2202      	movs	r2, #2
 803e84c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803e850:	68fb      	ldr	r3, [r7, #12]
 803e852:	687a      	ldr	r2, [r7, #4]
 803e854:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803e856:	68fb      	ldr	r3, [r7, #12]
 803e858:	687a      	ldr	r2, [r7, #4]
 803e85a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803e85c:	687b      	ldr	r3, [r7, #4]
 803e85e:	68ba      	ldr	r2, [r7, #8]
 803e860:	2100      	movs	r1, #0
 803e862:	68f8      	ldr	r0, [r7, #12]
 803e864:	f000 fcf1 	bl	803f24a <USBD_LL_Transmit>

  return USBD_OK;
 803e868:	2300      	movs	r3, #0
}
 803e86a:	4618      	mov	r0, r3
 803e86c:	3710      	adds	r7, #16
 803e86e:	46bd      	mov	sp, r7
 803e870:	bd80      	pop	{r7, pc}

0803e872 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803e872:	b580      	push	{r7, lr}
 803e874:	b084      	sub	sp, #16
 803e876:	af00      	add	r7, sp, #0
 803e878:	60f8      	str	r0, [r7, #12]
 803e87a:	60b9      	str	r1, [r7, #8]
 803e87c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803e87e:	687b      	ldr	r3, [r7, #4]
 803e880:	68ba      	ldr	r2, [r7, #8]
 803e882:	2100      	movs	r1, #0
 803e884:	68f8      	ldr	r0, [r7, #12]
 803e886:	f000 fce0 	bl	803f24a <USBD_LL_Transmit>

  return USBD_OK;
 803e88a:	2300      	movs	r3, #0
}
 803e88c:	4618      	mov	r0, r3
 803e88e:	3710      	adds	r7, #16
 803e890:	46bd      	mov	sp, r7
 803e892:	bd80      	pop	{r7, pc}

0803e894 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803e894:	b580      	push	{r7, lr}
 803e896:	b084      	sub	sp, #16
 803e898:	af00      	add	r7, sp, #0
 803e89a:	60f8      	str	r0, [r7, #12]
 803e89c:	60b9      	str	r1, [r7, #8]
 803e89e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803e8a0:	68fb      	ldr	r3, [r7, #12]
 803e8a2:	2203      	movs	r2, #3
 803e8a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803e8a8:	68fb      	ldr	r3, [r7, #12]
 803e8aa:	687a      	ldr	r2, [r7, #4]
 803e8ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803e8b0:	68fb      	ldr	r3, [r7, #12]
 803e8b2:	687a      	ldr	r2, [r7, #4]
 803e8b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803e8b8:	687b      	ldr	r3, [r7, #4]
 803e8ba:	68ba      	ldr	r2, [r7, #8]
 803e8bc:	2100      	movs	r1, #0
 803e8be:	68f8      	ldr	r0, [r7, #12]
 803e8c0:	f000 fce4 	bl	803f28c <USBD_LL_PrepareReceive>

  return USBD_OK;
 803e8c4:	2300      	movs	r3, #0
}
 803e8c6:	4618      	mov	r0, r3
 803e8c8:	3710      	adds	r7, #16
 803e8ca:	46bd      	mov	sp, r7
 803e8cc:	bd80      	pop	{r7, pc}

0803e8ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803e8ce:	b580      	push	{r7, lr}
 803e8d0:	b084      	sub	sp, #16
 803e8d2:	af00      	add	r7, sp, #0
 803e8d4:	60f8      	str	r0, [r7, #12]
 803e8d6:	60b9      	str	r1, [r7, #8]
 803e8d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803e8da:	687b      	ldr	r3, [r7, #4]
 803e8dc:	68ba      	ldr	r2, [r7, #8]
 803e8de:	2100      	movs	r1, #0
 803e8e0:	68f8      	ldr	r0, [r7, #12]
 803e8e2:	f000 fcd3 	bl	803f28c <USBD_LL_PrepareReceive>

  return USBD_OK;
 803e8e6:	2300      	movs	r3, #0
}
 803e8e8:	4618      	mov	r0, r3
 803e8ea:	3710      	adds	r7, #16
 803e8ec:	46bd      	mov	sp, r7
 803e8ee:	bd80      	pop	{r7, pc}

0803e8f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803e8f0:	b580      	push	{r7, lr}
 803e8f2:	b082      	sub	sp, #8
 803e8f4:	af00      	add	r7, sp, #0
 803e8f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803e8f8:	687b      	ldr	r3, [r7, #4]
 803e8fa:	2204      	movs	r2, #4
 803e8fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803e900:	2300      	movs	r3, #0
 803e902:	2200      	movs	r2, #0
 803e904:	2100      	movs	r1, #0
 803e906:	6878      	ldr	r0, [r7, #4]
 803e908:	f000 fc9f 	bl	803f24a <USBD_LL_Transmit>

  return USBD_OK;
 803e90c:	2300      	movs	r3, #0
}
 803e90e:	4618      	mov	r0, r3
 803e910:	3708      	adds	r7, #8
 803e912:	46bd      	mov	sp, r7
 803e914:	bd80      	pop	{r7, pc}

0803e916 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803e916:	b580      	push	{r7, lr}
 803e918:	b082      	sub	sp, #8
 803e91a:	af00      	add	r7, sp, #0
 803e91c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803e91e:	687b      	ldr	r3, [r7, #4]
 803e920:	2205      	movs	r2, #5
 803e922:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803e926:	2300      	movs	r3, #0
 803e928:	2200      	movs	r2, #0
 803e92a:	2100      	movs	r1, #0
 803e92c:	6878      	ldr	r0, [r7, #4]
 803e92e:	f000 fcad 	bl	803f28c <USBD_LL_PrepareReceive>

  return USBD_OK;
 803e932:	2300      	movs	r3, #0
}
 803e934:	4618      	mov	r0, r3
 803e936:	3708      	adds	r7, #8
 803e938:	46bd      	mov	sp, r7
 803e93a:	bd80      	pop	{r7, pc}

0803e93c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803e93c:	b580      	push	{r7, lr}
 803e93e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803e940:	2200      	movs	r2, #0
 803e942:	4913      	ldr	r1, [pc, #76]	; (803e990 <MX_USB_DEVICE_Init+0x54>)
 803e944:	4813      	ldr	r0, [pc, #76]	; (803e994 <MX_USB_DEVICE_Init+0x58>)
 803e946:	f7fe fd07 	bl	803d358 <USBD_Init>
 803e94a:	4603      	mov	r3, r0
 803e94c:	2b00      	cmp	r3, #0
 803e94e:	d001      	beq.n	803e954 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803e950:	f7ee fc10 	bl	802d174 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803e954:	4910      	ldr	r1, [pc, #64]	; (803e998 <MX_USB_DEVICE_Init+0x5c>)
 803e956:	480f      	ldr	r0, [pc, #60]	; (803e994 <MX_USB_DEVICE_Init+0x58>)
 803e958:	f7fe fd2e 	bl	803d3b8 <USBD_RegisterClass>
 803e95c:	4603      	mov	r3, r0
 803e95e:	2b00      	cmp	r3, #0
 803e960:	d001      	beq.n	803e966 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803e962:	f7ee fc07 	bl	802d174 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803e966:	490d      	ldr	r1, [pc, #52]	; (803e99c <MX_USB_DEVICE_Init+0x60>)
 803e968:	480a      	ldr	r0, [pc, #40]	; (803e994 <MX_USB_DEVICE_Init+0x58>)
 803e96a:	f7fe fc65 	bl	803d238 <USBD_CDC_RegisterInterface>
 803e96e:	4603      	mov	r3, r0
 803e970:	2b00      	cmp	r3, #0
 803e972:	d001      	beq.n	803e978 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803e974:	f7ee fbfe 	bl	802d174 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803e978:	4806      	ldr	r0, [pc, #24]	; (803e994 <MX_USB_DEVICE_Init+0x58>)
 803e97a:	f7fe fd53 	bl	803d424 <USBD_Start>
 803e97e:	4603      	mov	r3, r0
 803e980:	2b00      	cmp	r3, #0
 803e982:	d001      	beq.n	803e988 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803e984:	f7ee fbf6 	bl	802d174 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803e988:	f7f5 fc82 	bl	8034290 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803e98c:	bf00      	nop
 803e98e:	bd80      	pop	{r7, pc}
 803e990:	240000b4 	.word	0x240000b4
 803e994:	24001bd4 	.word	0x24001bd4
 803e998:	24000020 	.word	0x24000020
 803e99c:	240000a0 	.word	0x240000a0

0803e9a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803e9a0:	b580      	push	{r7, lr}
 803e9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803e9a4:	2200      	movs	r2, #0
 803e9a6:	4905      	ldr	r1, [pc, #20]	; (803e9bc <CDC_Init_FS+0x1c>)
 803e9a8:	4805      	ldr	r0, [pc, #20]	; (803e9c0 <CDC_Init_FS+0x20>)
 803e9aa:	f7fe fc5f 	bl	803d26c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803e9ae:	4905      	ldr	r1, [pc, #20]	; (803e9c4 <CDC_Init_FS+0x24>)
 803e9b0:	4803      	ldr	r0, [pc, #12]	; (803e9c0 <CDC_Init_FS+0x20>)
 803e9b2:	f7fe fc7d 	bl	803d2b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803e9b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803e9b8:	4618      	mov	r0, r3
 803e9ba:	bd80      	pop	{r7, pc}
 803e9bc:	240026b0 	.word	0x240026b0
 803e9c0:	24001bd4 	.word	0x24001bd4
 803e9c4:	24001eb0 	.word	0x24001eb0

0803e9c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803e9c8:	b480      	push	{r7}
 803e9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803e9cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803e9ce:	4618      	mov	r0, r3
 803e9d0:	46bd      	mov	sp, r7
 803e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e9d6:	4770      	bx	lr

0803e9d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803e9d8:	b480      	push	{r7}
 803e9da:	b083      	sub	sp, #12
 803e9dc:	af00      	add	r7, sp, #0
 803e9de:	4603      	mov	r3, r0
 803e9e0:	6039      	str	r1, [r7, #0]
 803e9e2:	71fb      	strb	r3, [r7, #7]
 803e9e4:	4613      	mov	r3, r2
 803e9e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803e9e8:	79fb      	ldrb	r3, [r7, #7]
 803e9ea:	2b23      	cmp	r3, #35	; 0x23
 803e9ec:	d84a      	bhi.n	803ea84 <CDC_Control_FS+0xac>
 803e9ee:	a201      	add	r2, pc, #4	; (adr r2, 803e9f4 <CDC_Control_FS+0x1c>)
 803e9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803e9f4:	0803ea85 	.word	0x0803ea85
 803e9f8:	0803ea85 	.word	0x0803ea85
 803e9fc:	0803ea85 	.word	0x0803ea85
 803ea00:	0803ea85 	.word	0x0803ea85
 803ea04:	0803ea85 	.word	0x0803ea85
 803ea08:	0803ea85 	.word	0x0803ea85
 803ea0c:	0803ea85 	.word	0x0803ea85
 803ea10:	0803ea85 	.word	0x0803ea85
 803ea14:	0803ea85 	.word	0x0803ea85
 803ea18:	0803ea85 	.word	0x0803ea85
 803ea1c:	0803ea85 	.word	0x0803ea85
 803ea20:	0803ea85 	.word	0x0803ea85
 803ea24:	0803ea85 	.word	0x0803ea85
 803ea28:	0803ea85 	.word	0x0803ea85
 803ea2c:	0803ea85 	.word	0x0803ea85
 803ea30:	0803ea85 	.word	0x0803ea85
 803ea34:	0803ea85 	.word	0x0803ea85
 803ea38:	0803ea85 	.word	0x0803ea85
 803ea3c:	0803ea85 	.word	0x0803ea85
 803ea40:	0803ea85 	.word	0x0803ea85
 803ea44:	0803ea85 	.word	0x0803ea85
 803ea48:	0803ea85 	.word	0x0803ea85
 803ea4c:	0803ea85 	.word	0x0803ea85
 803ea50:	0803ea85 	.word	0x0803ea85
 803ea54:	0803ea85 	.word	0x0803ea85
 803ea58:	0803ea85 	.word	0x0803ea85
 803ea5c:	0803ea85 	.word	0x0803ea85
 803ea60:	0803ea85 	.word	0x0803ea85
 803ea64:	0803ea85 	.word	0x0803ea85
 803ea68:	0803ea85 	.word	0x0803ea85
 803ea6c:	0803ea85 	.word	0x0803ea85
 803ea70:	0803ea85 	.word	0x0803ea85
 803ea74:	0803ea85 	.word	0x0803ea85
 803ea78:	0803ea85 	.word	0x0803ea85
 803ea7c:	0803ea85 	.word	0x0803ea85
 803ea80:	0803ea85 	.word	0x0803ea85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803ea84:	bf00      	nop
  }

  return (USBD_OK);
 803ea86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803ea88:	4618      	mov	r0, r3
 803ea8a:	370c      	adds	r7, #12
 803ea8c:	46bd      	mov	sp, r7
 803ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ea92:	4770      	bx	lr

0803ea94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803ea94:	b580      	push	{r7, lr}
 803ea96:	b082      	sub	sp, #8
 803ea98:	af00      	add	r7, sp, #0
 803ea9a:	6078      	str	r0, [r7, #4]
 803ea9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803ea9e:	6879      	ldr	r1, [r7, #4]
 803eaa0:	4805      	ldr	r0, [pc, #20]	; (803eab8 <CDC_Receive_FS+0x24>)
 803eaa2:	f7fe fc05 	bl	803d2b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803eaa6:	4804      	ldr	r0, [pc, #16]	; (803eab8 <CDC_Receive_FS+0x24>)
 803eaa8:	f7fe fc20 	bl	803d2ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803eaac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803eaae:	4618      	mov	r0, r3
 803eab0:	3708      	adds	r7, #8
 803eab2:	46bd      	mov	sp, r7
 803eab4:	bd80      	pop	{r7, pc}
 803eab6:	bf00      	nop
 803eab8:	24001bd4 	.word	0x24001bd4

0803eabc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803eabc:	b480      	push	{r7}
 803eabe:	b087      	sub	sp, #28
 803eac0:	af00      	add	r7, sp, #0
 803eac2:	60f8      	str	r0, [r7, #12]
 803eac4:	60b9      	str	r1, [r7, #8]
 803eac6:	4613      	mov	r3, r2
 803eac8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803eaca:	2300      	movs	r3, #0
 803eacc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803eace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803ead2:	4618      	mov	r0, r3
 803ead4:	371c      	adds	r7, #28
 803ead6:	46bd      	mov	sp, r7
 803ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803eadc:	4770      	bx	lr
	...

0803eae0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803eae0:	b480      	push	{r7}
 803eae2:	b083      	sub	sp, #12
 803eae4:	af00      	add	r7, sp, #0
 803eae6:	4603      	mov	r3, r0
 803eae8:	6039      	str	r1, [r7, #0]
 803eaea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803eaec:	683b      	ldr	r3, [r7, #0]
 803eaee:	2212      	movs	r2, #18
 803eaf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803eaf2:	4b03      	ldr	r3, [pc, #12]	; (803eb00 <USBD_FS_DeviceDescriptor+0x20>)
}
 803eaf4:	4618      	mov	r0, r3
 803eaf6:	370c      	adds	r7, #12
 803eaf8:	46bd      	mov	sp, r7
 803eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803eafe:	4770      	bx	lr
 803eb00:	240000d0 	.word	0x240000d0

0803eb04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803eb04:	b480      	push	{r7}
 803eb06:	b083      	sub	sp, #12
 803eb08:	af00      	add	r7, sp, #0
 803eb0a:	4603      	mov	r3, r0
 803eb0c:	6039      	str	r1, [r7, #0]
 803eb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803eb10:	683b      	ldr	r3, [r7, #0]
 803eb12:	2204      	movs	r2, #4
 803eb14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803eb16:	4b03      	ldr	r3, [pc, #12]	; (803eb24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803eb18:	4618      	mov	r0, r3
 803eb1a:	370c      	adds	r7, #12
 803eb1c:	46bd      	mov	sp, r7
 803eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803eb22:	4770      	bx	lr
 803eb24:	240000e4 	.word	0x240000e4

0803eb28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803eb28:	b580      	push	{r7, lr}
 803eb2a:	b082      	sub	sp, #8
 803eb2c:	af00      	add	r7, sp, #0
 803eb2e:	4603      	mov	r3, r0
 803eb30:	6039      	str	r1, [r7, #0]
 803eb32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803eb34:	79fb      	ldrb	r3, [r7, #7]
 803eb36:	2b00      	cmp	r3, #0
 803eb38:	d105      	bne.n	803eb46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803eb3a:	683a      	ldr	r2, [r7, #0]
 803eb3c:	4907      	ldr	r1, [pc, #28]	; (803eb5c <USBD_FS_ProductStrDescriptor+0x34>)
 803eb3e:	4808      	ldr	r0, [pc, #32]	; (803eb60 <USBD_FS_ProductStrDescriptor+0x38>)
 803eb40:	f7ff fe1c 	bl	803e77c <USBD_GetString>
 803eb44:	e004      	b.n	803eb50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803eb46:	683a      	ldr	r2, [r7, #0]
 803eb48:	4904      	ldr	r1, [pc, #16]	; (803eb5c <USBD_FS_ProductStrDescriptor+0x34>)
 803eb4a:	4805      	ldr	r0, [pc, #20]	; (803eb60 <USBD_FS_ProductStrDescriptor+0x38>)
 803eb4c:	f7ff fe16 	bl	803e77c <USBD_GetString>
  }
  return USBD_StrDesc;
 803eb50:	4b02      	ldr	r3, [pc, #8]	; (803eb5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 803eb52:	4618      	mov	r0, r3
 803eb54:	3708      	adds	r7, #8
 803eb56:	46bd      	mov	sp, r7
 803eb58:	bd80      	pop	{r7, pc}
 803eb5a:	bf00      	nop
 803eb5c:	24002eb0 	.word	0x24002eb0
 803eb60:	0804115c 	.word	0x0804115c

0803eb64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803eb64:	b580      	push	{r7, lr}
 803eb66:	b082      	sub	sp, #8
 803eb68:	af00      	add	r7, sp, #0
 803eb6a:	4603      	mov	r3, r0
 803eb6c:	6039      	str	r1, [r7, #0]
 803eb6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803eb70:	683a      	ldr	r2, [r7, #0]
 803eb72:	4904      	ldr	r1, [pc, #16]	; (803eb84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803eb74:	4804      	ldr	r0, [pc, #16]	; (803eb88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803eb76:	f7ff fe01 	bl	803e77c <USBD_GetString>
  return USBD_StrDesc;
 803eb7a:	4b02      	ldr	r3, [pc, #8]	; (803eb84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803eb7c:	4618      	mov	r0, r3
 803eb7e:	3708      	adds	r7, #8
 803eb80:	46bd      	mov	sp, r7
 803eb82:	bd80      	pop	{r7, pc}
 803eb84:	24002eb0 	.word	0x24002eb0
 803eb88:	08041174 	.word	0x08041174

0803eb8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803eb8c:	b580      	push	{r7, lr}
 803eb8e:	b082      	sub	sp, #8
 803eb90:	af00      	add	r7, sp, #0
 803eb92:	4603      	mov	r3, r0
 803eb94:	6039      	str	r1, [r7, #0]
 803eb96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803eb98:	683b      	ldr	r3, [r7, #0]
 803eb9a:	221a      	movs	r2, #26
 803eb9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803eb9e:	f000 f843 	bl	803ec28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803eba2:	4b02      	ldr	r3, [pc, #8]	; (803ebac <USBD_FS_SerialStrDescriptor+0x20>)
}
 803eba4:	4618      	mov	r0, r3
 803eba6:	3708      	adds	r7, #8
 803eba8:	46bd      	mov	sp, r7
 803ebaa:	bd80      	pop	{r7, pc}
 803ebac:	240000e8 	.word	0x240000e8

0803ebb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803ebb0:	b580      	push	{r7, lr}
 803ebb2:	b082      	sub	sp, #8
 803ebb4:	af00      	add	r7, sp, #0
 803ebb6:	4603      	mov	r3, r0
 803ebb8:	6039      	str	r1, [r7, #0]
 803ebba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803ebbc:	79fb      	ldrb	r3, [r7, #7]
 803ebbe:	2b00      	cmp	r3, #0
 803ebc0:	d105      	bne.n	803ebce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803ebc2:	683a      	ldr	r2, [r7, #0]
 803ebc4:	4907      	ldr	r1, [pc, #28]	; (803ebe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 803ebc6:	4808      	ldr	r0, [pc, #32]	; (803ebe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 803ebc8:	f7ff fdd8 	bl	803e77c <USBD_GetString>
 803ebcc:	e004      	b.n	803ebd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803ebce:	683a      	ldr	r2, [r7, #0]
 803ebd0:	4904      	ldr	r1, [pc, #16]	; (803ebe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 803ebd2:	4805      	ldr	r0, [pc, #20]	; (803ebe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 803ebd4:	f7ff fdd2 	bl	803e77c <USBD_GetString>
  }
  return USBD_StrDesc;
 803ebd8:	4b02      	ldr	r3, [pc, #8]	; (803ebe4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803ebda:	4618      	mov	r0, r3
 803ebdc:	3708      	adds	r7, #8
 803ebde:	46bd      	mov	sp, r7
 803ebe0:	bd80      	pop	{r7, pc}
 803ebe2:	bf00      	nop
 803ebe4:	24002eb0 	.word	0x24002eb0
 803ebe8:	08041188 	.word	0x08041188

0803ebec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803ebec:	b580      	push	{r7, lr}
 803ebee:	b082      	sub	sp, #8
 803ebf0:	af00      	add	r7, sp, #0
 803ebf2:	4603      	mov	r3, r0
 803ebf4:	6039      	str	r1, [r7, #0]
 803ebf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803ebf8:	79fb      	ldrb	r3, [r7, #7]
 803ebfa:	2b00      	cmp	r3, #0
 803ebfc:	d105      	bne.n	803ec0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803ebfe:	683a      	ldr	r2, [r7, #0]
 803ec00:	4907      	ldr	r1, [pc, #28]	; (803ec20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803ec02:	4808      	ldr	r0, [pc, #32]	; (803ec24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803ec04:	f7ff fdba 	bl	803e77c <USBD_GetString>
 803ec08:	e004      	b.n	803ec14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803ec0a:	683a      	ldr	r2, [r7, #0]
 803ec0c:	4904      	ldr	r1, [pc, #16]	; (803ec20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803ec0e:	4805      	ldr	r0, [pc, #20]	; (803ec24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 803ec10:	f7ff fdb4 	bl	803e77c <USBD_GetString>
  }
  return USBD_StrDesc;
 803ec14:	4b02      	ldr	r3, [pc, #8]	; (803ec20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803ec16:	4618      	mov	r0, r3
 803ec18:	3708      	adds	r7, #8
 803ec1a:	46bd      	mov	sp, r7
 803ec1c:	bd80      	pop	{r7, pc}
 803ec1e:	bf00      	nop
 803ec20:	24002eb0 	.word	0x24002eb0
 803ec24:	08041194 	.word	0x08041194

0803ec28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803ec28:	b580      	push	{r7, lr}
 803ec2a:	b084      	sub	sp, #16
 803ec2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803ec2e:	4b0f      	ldr	r3, [pc, #60]	; (803ec6c <Get_SerialNum+0x44>)
 803ec30:	681b      	ldr	r3, [r3, #0]
 803ec32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803ec34:	4b0e      	ldr	r3, [pc, #56]	; (803ec70 <Get_SerialNum+0x48>)
 803ec36:	681b      	ldr	r3, [r3, #0]
 803ec38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803ec3a:	4b0e      	ldr	r3, [pc, #56]	; (803ec74 <Get_SerialNum+0x4c>)
 803ec3c:	681b      	ldr	r3, [r3, #0]
 803ec3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803ec40:	68fa      	ldr	r2, [r7, #12]
 803ec42:	687b      	ldr	r3, [r7, #4]
 803ec44:	4413      	add	r3, r2
 803ec46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803ec48:	68fb      	ldr	r3, [r7, #12]
 803ec4a:	2b00      	cmp	r3, #0
 803ec4c:	d009      	beq.n	803ec62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803ec4e:	2208      	movs	r2, #8
 803ec50:	4909      	ldr	r1, [pc, #36]	; (803ec78 <Get_SerialNum+0x50>)
 803ec52:	68f8      	ldr	r0, [r7, #12]
 803ec54:	f000 f814 	bl	803ec80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803ec58:	2204      	movs	r2, #4
 803ec5a:	4908      	ldr	r1, [pc, #32]	; (803ec7c <Get_SerialNum+0x54>)
 803ec5c:	68b8      	ldr	r0, [r7, #8]
 803ec5e:	f000 f80f 	bl	803ec80 <IntToUnicode>
  }
}
 803ec62:	bf00      	nop
 803ec64:	3710      	adds	r7, #16
 803ec66:	46bd      	mov	sp, r7
 803ec68:	bd80      	pop	{r7, pc}
 803ec6a:	bf00      	nop
 803ec6c:	1ff1e800 	.word	0x1ff1e800
 803ec70:	1ff1e804 	.word	0x1ff1e804
 803ec74:	1ff1e808 	.word	0x1ff1e808
 803ec78:	240000ea 	.word	0x240000ea
 803ec7c:	240000fa 	.word	0x240000fa

0803ec80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803ec80:	b480      	push	{r7}
 803ec82:	b087      	sub	sp, #28
 803ec84:	af00      	add	r7, sp, #0
 803ec86:	60f8      	str	r0, [r7, #12]
 803ec88:	60b9      	str	r1, [r7, #8]
 803ec8a:	4613      	mov	r3, r2
 803ec8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803ec8e:	2300      	movs	r3, #0
 803ec90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803ec92:	2300      	movs	r3, #0
 803ec94:	75fb      	strb	r3, [r7, #23]
 803ec96:	e027      	b.n	803ece8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803ec98:	68fb      	ldr	r3, [r7, #12]
 803ec9a:	0f1b      	lsrs	r3, r3, #28
 803ec9c:	2b09      	cmp	r3, #9
 803ec9e:	d80b      	bhi.n	803ecb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803eca0:	68fb      	ldr	r3, [r7, #12]
 803eca2:	0f1b      	lsrs	r3, r3, #28
 803eca4:	b2da      	uxtb	r2, r3
 803eca6:	7dfb      	ldrb	r3, [r7, #23]
 803eca8:	005b      	lsls	r3, r3, #1
 803ecaa:	4619      	mov	r1, r3
 803ecac:	68bb      	ldr	r3, [r7, #8]
 803ecae:	440b      	add	r3, r1
 803ecb0:	3230      	adds	r2, #48	; 0x30
 803ecb2:	b2d2      	uxtb	r2, r2
 803ecb4:	701a      	strb	r2, [r3, #0]
 803ecb6:	e00a      	b.n	803ecce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803ecb8:	68fb      	ldr	r3, [r7, #12]
 803ecba:	0f1b      	lsrs	r3, r3, #28
 803ecbc:	b2da      	uxtb	r2, r3
 803ecbe:	7dfb      	ldrb	r3, [r7, #23]
 803ecc0:	005b      	lsls	r3, r3, #1
 803ecc2:	4619      	mov	r1, r3
 803ecc4:	68bb      	ldr	r3, [r7, #8]
 803ecc6:	440b      	add	r3, r1
 803ecc8:	3237      	adds	r2, #55	; 0x37
 803ecca:	b2d2      	uxtb	r2, r2
 803eccc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803ecce:	68fb      	ldr	r3, [r7, #12]
 803ecd0:	011b      	lsls	r3, r3, #4
 803ecd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803ecd4:	7dfb      	ldrb	r3, [r7, #23]
 803ecd6:	005b      	lsls	r3, r3, #1
 803ecd8:	3301      	adds	r3, #1
 803ecda:	68ba      	ldr	r2, [r7, #8]
 803ecdc:	4413      	add	r3, r2
 803ecde:	2200      	movs	r2, #0
 803ece0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803ece2:	7dfb      	ldrb	r3, [r7, #23]
 803ece4:	3301      	adds	r3, #1
 803ece6:	75fb      	strb	r3, [r7, #23]
 803ece8:	7dfa      	ldrb	r2, [r7, #23]
 803ecea:	79fb      	ldrb	r3, [r7, #7]
 803ecec:	429a      	cmp	r2, r3
 803ecee:	d3d3      	bcc.n	803ec98 <IntToUnicode+0x18>
  }
}
 803ecf0:	bf00      	nop
 803ecf2:	bf00      	nop
 803ecf4:	371c      	adds	r7, #28
 803ecf6:	46bd      	mov	sp, r7
 803ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ecfc:	4770      	bx	lr
	...

0803ed00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803ed00:	b580      	push	{r7, lr}
 803ed02:	b0b8      	sub	sp, #224	; 0xe0
 803ed04:	af00      	add	r7, sp, #0
 803ed06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803ed08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803ed0c:	2200      	movs	r2, #0
 803ed0e:	601a      	str	r2, [r3, #0]
 803ed10:	605a      	str	r2, [r3, #4]
 803ed12:	609a      	str	r2, [r3, #8]
 803ed14:	60da      	str	r2, [r3, #12]
 803ed16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803ed18:	f107 0310 	add.w	r3, r7, #16
 803ed1c:	22bc      	movs	r2, #188	; 0xbc
 803ed1e:	2100      	movs	r1, #0
 803ed20:	4618      	mov	r0, r3
 803ed22:	f000 fbe9 	bl	803f4f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803ed26:	687b      	ldr	r3, [r7, #4]
 803ed28:	681b      	ldr	r3, [r3, #0]
 803ed2a:	4a2f      	ldr	r2, [pc, #188]	; (803ede8 <HAL_PCD_MspInit+0xe8>)
 803ed2c:	4293      	cmp	r3, r2
 803ed2e:	d156      	bne.n	803edde <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803ed30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803ed34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803ed36:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803ed3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803ed3e:	f107 0310 	add.w	r3, r7, #16
 803ed42:	4618      	mov	r0, r3
 803ed44:	f7f6 fa6e 	bl	8035224 <HAL_RCCEx_PeriphCLKConfig>
 803ed48:	4603      	mov	r3, r0
 803ed4a:	2b00      	cmp	r3, #0
 803ed4c:	d001      	beq.n	803ed52 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803ed4e:	f7ee fa11 	bl	802d174 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803ed52:	f7f5 fa9d 	bl	8034290 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803ed56:	4b25      	ldr	r3, [pc, #148]	; (803edec <HAL_PCD_MspInit+0xec>)
 803ed58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803ed5c:	4a23      	ldr	r2, [pc, #140]	; (803edec <HAL_PCD_MspInit+0xec>)
 803ed5e:	f043 0301 	orr.w	r3, r3, #1
 803ed62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803ed66:	4b21      	ldr	r3, [pc, #132]	; (803edec <HAL_PCD_MspInit+0xec>)
 803ed68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803ed6c:	f003 0301 	and.w	r3, r3, #1
 803ed70:	60fb      	str	r3, [r7, #12]
 803ed72:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803ed74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803ed78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803ed7c:	2302      	movs	r3, #2
 803ed7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803ed82:	2300      	movs	r3, #0
 803ed84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803ed88:	2300      	movs	r3, #0
 803ed8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803ed8e:	230a      	movs	r3, #10
 803ed90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803ed94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803ed98:	4619      	mov	r1, r3
 803ed9a:	4815      	ldr	r0, [pc, #84]	; (803edf0 <HAL_PCD_MspInit+0xf0>)
 803ed9c:	f7f2 fdf2 	bl	8031984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803eda0:	4b12      	ldr	r3, [pc, #72]	; (803edec <HAL_PCD_MspInit+0xec>)
 803eda2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803eda6:	4a11      	ldr	r2, [pc, #68]	; (803edec <HAL_PCD_MspInit+0xec>)
 803eda8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803edac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803edb0:	4b0e      	ldr	r3, [pc, #56]	; (803edec <HAL_PCD_MspInit+0xec>)
 803edb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803edb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803edba:	60bb      	str	r3, [r7, #8]
 803edbc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803edbe:	2200      	movs	r2, #0
 803edc0:	2100      	movs	r1, #0
 803edc2:	2062      	movs	r0, #98	; 0x62
 803edc4:	f7ef fd8b 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803edc8:	2062      	movs	r0, #98	; 0x62
 803edca:	f7ef fda2 	bl	802e912 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803edce:	2200      	movs	r2, #0
 803edd0:	2100      	movs	r1, #0
 803edd2:	2065      	movs	r0, #101	; 0x65
 803edd4:	f7ef fd83 	bl	802e8de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803edd8:	2065      	movs	r0, #101	; 0x65
 803edda:	f7ef fd9a 	bl	802e912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803edde:	bf00      	nop
 803ede0:	37e0      	adds	r7, #224	; 0xe0
 803ede2:	46bd      	mov	sp, r7
 803ede4:	bd80      	pop	{r7, pc}
 803ede6:	bf00      	nop
 803ede8:	40080000 	.word	0x40080000
 803edec:	58024400 	.word	0x58024400
 803edf0:	58020000 	.word	0x58020000

0803edf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803edf4:	b580      	push	{r7, lr}
 803edf6:	b082      	sub	sp, #8
 803edf8:	af00      	add	r7, sp, #0
 803edfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803edfc:	687b      	ldr	r3, [r7, #4]
 803edfe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803ee02:	687b      	ldr	r3, [r7, #4]
 803ee04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803ee08:	4619      	mov	r1, r3
 803ee0a:	4610      	mov	r0, r2
 803ee0c:	f7fe fb57 	bl	803d4be <USBD_LL_SetupStage>
}
 803ee10:	bf00      	nop
 803ee12:	3708      	adds	r7, #8
 803ee14:	46bd      	mov	sp, r7
 803ee16:	bd80      	pop	{r7, pc}

0803ee18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ee18:	b580      	push	{r7, lr}
 803ee1a:	b082      	sub	sp, #8
 803ee1c:	af00      	add	r7, sp, #0
 803ee1e:	6078      	str	r0, [r7, #4]
 803ee20:	460b      	mov	r3, r1
 803ee22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803ee24:	687b      	ldr	r3, [r7, #4]
 803ee26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803ee2a:	78fa      	ldrb	r2, [r7, #3]
 803ee2c:	6879      	ldr	r1, [r7, #4]
 803ee2e:	4613      	mov	r3, r2
 803ee30:	00db      	lsls	r3, r3, #3
 803ee32:	4413      	add	r3, r2
 803ee34:	009b      	lsls	r3, r3, #2
 803ee36:	440b      	add	r3, r1
 803ee38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803ee3c:	681a      	ldr	r2, [r3, #0]
 803ee3e:	78fb      	ldrb	r3, [r7, #3]
 803ee40:	4619      	mov	r1, r3
 803ee42:	f7fe fb91 	bl	803d568 <USBD_LL_DataOutStage>
}
 803ee46:	bf00      	nop
 803ee48:	3708      	adds	r7, #8
 803ee4a:	46bd      	mov	sp, r7
 803ee4c:	bd80      	pop	{r7, pc}

0803ee4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ee4e:	b580      	push	{r7, lr}
 803ee50:	b082      	sub	sp, #8
 803ee52:	af00      	add	r7, sp, #0
 803ee54:	6078      	str	r0, [r7, #4]
 803ee56:	460b      	mov	r3, r1
 803ee58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803ee5a:	687b      	ldr	r3, [r7, #4]
 803ee5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803ee60:	78fa      	ldrb	r2, [r7, #3]
 803ee62:	6879      	ldr	r1, [r7, #4]
 803ee64:	4613      	mov	r3, r2
 803ee66:	00db      	lsls	r3, r3, #3
 803ee68:	4413      	add	r3, r2
 803ee6a:	009b      	lsls	r3, r3, #2
 803ee6c:	440b      	add	r3, r1
 803ee6e:	334c      	adds	r3, #76	; 0x4c
 803ee70:	681a      	ldr	r2, [r3, #0]
 803ee72:	78fb      	ldrb	r3, [r7, #3]
 803ee74:	4619      	mov	r1, r3
 803ee76:	f7fe fc2a 	bl	803d6ce <USBD_LL_DataInStage>
}
 803ee7a:	bf00      	nop
 803ee7c:	3708      	adds	r7, #8
 803ee7e:	46bd      	mov	sp, r7
 803ee80:	bd80      	pop	{r7, pc}

0803ee82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ee82:	b580      	push	{r7, lr}
 803ee84:	b082      	sub	sp, #8
 803ee86:	af00      	add	r7, sp, #0
 803ee88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803ee8a:	687b      	ldr	r3, [r7, #4]
 803ee8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ee90:	4618      	mov	r0, r3
 803ee92:	f7fe fd5e 	bl	803d952 <USBD_LL_SOF>
}
 803ee96:	bf00      	nop
 803ee98:	3708      	adds	r7, #8
 803ee9a:	46bd      	mov	sp, r7
 803ee9c:	bd80      	pop	{r7, pc}

0803ee9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ee9e:	b580      	push	{r7, lr}
 803eea0:	b084      	sub	sp, #16
 803eea2:	af00      	add	r7, sp, #0
 803eea4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803eea6:	2301      	movs	r3, #1
 803eea8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803eeaa:	687b      	ldr	r3, [r7, #4]
 803eeac:	68db      	ldr	r3, [r3, #12]
 803eeae:	2b00      	cmp	r3, #0
 803eeb0:	d102      	bne.n	803eeb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803eeb2:	2300      	movs	r3, #0
 803eeb4:	73fb      	strb	r3, [r7, #15]
 803eeb6:	e008      	b.n	803eeca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803eeb8:	687b      	ldr	r3, [r7, #4]
 803eeba:	68db      	ldr	r3, [r3, #12]
 803eebc:	2b02      	cmp	r3, #2
 803eebe:	d102      	bne.n	803eec6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803eec0:	2301      	movs	r3, #1
 803eec2:	73fb      	strb	r3, [r7, #15]
 803eec4:	e001      	b.n	803eeca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803eec6:	f7ee f955 	bl	802d174 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803eeca:	687b      	ldr	r3, [r7, #4]
 803eecc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803eed0:	7bfa      	ldrb	r2, [r7, #15]
 803eed2:	4611      	mov	r1, r2
 803eed4:	4618      	mov	r0, r3
 803eed6:	f7fe fcfe 	bl	803d8d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803eeda:	687b      	ldr	r3, [r7, #4]
 803eedc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803eee0:	4618      	mov	r0, r3
 803eee2:	f7fe fca6 	bl	803d832 <USBD_LL_Reset>
}
 803eee6:	bf00      	nop
 803eee8:	3710      	adds	r7, #16
 803eeea:	46bd      	mov	sp, r7
 803eeec:	bd80      	pop	{r7, pc}
	...

0803eef0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803eef0:	b580      	push	{r7, lr}
 803eef2:	b082      	sub	sp, #8
 803eef4:	af00      	add	r7, sp, #0
 803eef6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803eef8:	687b      	ldr	r3, [r7, #4]
 803eefa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803eefe:	4618      	mov	r0, r3
 803ef00:	f7fe fcf9 	bl	803d8f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803ef04:	687b      	ldr	r3, [r7, #4]
 803ef06:	681b      	ldr	r3, [r3, #0]
 803ef08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803ef0c:	681b      	ldr	r3, [r3, #0]
 803ef0e:	687a      	ldr	r2, [r7, #4]
 803ef10:	6812      	ldr	r2, [r2, #0]
 803ef12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803ef16:	f043 0301 	orr.w	r3, r3, #1
 803ef1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803ef1c:	687b      	ldr	r3, [r7, #4]
 803ef1e:	6a1b      	ldr	r3, [r3, #32]
 803ef20:	2b00      	cmp	r3, #0
 803ef22:	d005      	beq.n	803ef30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803ef24:	4b04      	ldr	r3, [pc, #16]	; (803ef38 <HAL_PCD_SuspendCallback+0x48>)
 803ef26:	691b      	ldr	r3, [r3, #16]
 803ef28:	4a03      	ldr	r2, [pc, #12]	; (803ef38 <HAL_PCD_SuspendCallback+0x48>)
 803ef2a:	f043 0306 	orr.w	r3, r3, #6
 803ef2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803ef30:	bf00      	nop
 803ef32:	3708      	adds	r7, #8
 803ef34:	46bd      	mov	sp, r7
 803ef36:	bd80      	pop	{r7, pc}
 803ef38:	e000ed00 	.word	0xe000ed00

0803ef3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ef3c:	b580      	push	{r7, lr}
 803ef3e:	b082      	sub	sp, #8
 803ef40:	af00      	add	r7, sp, #0
 803ef42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803ef44:	687b      	ldr	r3, [r7, #4]
 803ef46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ef4a:	4618      	mov	r0, r3
 803ef4c:	f7fe fce9 	bl	803d922 <USBD_LL_Resume>
}
 803ef50:	bf00      	nop
 803ef52:	3708      	adds	r7, #8
 803ef54:	46bd      	mov	sp, r7
 803ef56:	bd80      	pop	{r7, pc}

0803ef58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ef58:	b580      	push	{r7, lr}
 803ef5a:	b082      	sub	sp, #8
 803ef5c:	af00      	add	r7, sp, #0
 803ef5e:	6078      	str	r0, [r7, #4]
 803ef60:	460b      	mov	r3, r1
 803ef62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803ef64:	687b      	ldr	r3, [r7, #4]
 803ef66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ef6a:	78fa      	ldrb	r2, [r7, #3]
 803ef6c:	4611      	mov	r1, r2
 803ef6e:	4618      	mov	r0, r3
 803ef70:	f7fe fd41 	bl	803d9f6 <USBD_LL_IsoOUTIncomplete>
}
 803ef74:	bf00      	nop
 803ef76:	3708      	adds	r7, #8
 803ef78:	46bd      	mov	sp, r7
 803ef7a:	bd80      	pop	{r7, pc}

0803ef7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803ef7c:	b580      	push	{r7, lr}
 803ef7e:	b082      	sub	sp, #8
 803ef80:	af00      	add	r7, sp, #0
 803ef82:	6078      	str	r0, [r7, #4]
 803ef84:	460b      	mov	r3, r1
 803ef86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803ef88:	687b      	ldr	r3, [r7, #4]
 803ef8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803ef8e:	78fa      	ldrb	r2, [r7, #3]
 803ef90:	4611      	mov	r1, r2
 803ef92:	4618      	mov	r0, r3
 803ef94:	f7fe fcfd 	bl	803d992 <USBD_LL_IsoINIncomplete>
}
 803ef98:	bf00      	nop
 803ef9a:	3708      	adds	r7, #8
 803ef9c:	46bd      	mov	sp, r7
 803ef9e:	bd80      	pop	{r7, pc}

0803efa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803efa0:	b580      	push	{r7, lr}
 803efa2:	b082      	sub	sp, #8
 803efa4:	af00      	add	r7, sp, #0
 803efa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803efa8:	687b      	ldr	r3, [r7, #4]
 803efaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803efae:	4618      	mov	r0, r3
 803efb0:	f7fe fd53 	bl	803da5a <USBD_LL_DevConnected>
}
 803efb4:	bf00      	nop
 803efb6:	3708      	adds	r7, #8
 803efb8:	46bd      	mov	sp, r7
 803efba:	bd80      	pop	{r7, pc}

0803efbc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803efbc:	b580      	push	{r7, lr}
 803efbe:	b082      	sub	sp, #8
 803efc0:	af00      	add	r7, sp, #0
 803efc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803efc4:	687b      	ldr	r3, [r7, #4]
 803efc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803efca:	4618      	mov	r0, r3
 803efcc:	f7fe fd50 	bl	803da70 <USBD_LL_DevDisconnected>
}
 803efd0:	bf00      	nop
 803efd2:	3708      	adds	r7, #8
 803efd4:	46bd      	mov	sp, r7
 803efd6:	bd80      	pop	{r7, pc}

0803efd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803efd8:	b580      	push	{r7, lr}
 803efda:	b082      	sub	sp, #8
 803efdc:	af00      	add	r7, sp, #0
 803efde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803efe0:	687b      	ldr	r3, [r7, #4]
 803efe2:	781b      	ldrb	r3, [r3, #0]
 803efe4:	2b00      	cmp	r3, #0
 803efe6:	d13e      	bne.n	803f066 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803efe8:	4a21      	ldr	r2, [pc, #132]	; (803f070 <USBD_LL_Init+0x98>)
 803efea:	687b      	ldr	r3, [r7, #4]
 803efec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803eff0:	687b      	ldr	r3, [r7, #4]
 803eff2:	4a1f      	ldr	r2, [pc, #124]	; (803f070 <USBD_LL_Init+0x98>)
 803eff4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803eff8:	4b1d      	ldr	r3, [pc, #116]	; (803f070 <USBD_LL_Init+0x98>)
 803effa:	4a1e      	ldr	r2, [pc, #120]	; (803f074 <USBD_LL_Init+0x9c>)
 803effc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803effe:	4b1c      	ldr	r3, [pc, #112]	; (803f070 <USBD_LL_Init+0x98>)
 803f000:	2209      	movs	r2, #9
 803f002:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803f004:	4b1a      	ldr	r3, [pc, #104]	; (803f070 <USBD_LL_Init+0x98>)
 803f006:	2202      	movs	r2, #2
 803f008:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803f00a:	4b19      	ldr	r3, [pc, #100]	; (803f070 <USBD_LL_Init+0x98>)
 803f00c:	2200      	movs	r2, #0
 803f00e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803f010:	4b17      	ldr	r3, [pc, #92]	; (803f070 <USBD_LL_Init+0x98>)
 803f012:	2202      	movs	r2, #2
 803f014:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803f016:	4b16      	ldr	r3, [pc, #88]	; (803f070 <USBD_LL_Init+0x98>)
 803f018:	2200      	movs	r2, #0
 803f01a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803f01c:	4b14      	ldr	r3, [pc, #80]	; (803f070 <USBD_LL_Init+0x98>)
 803f01e:	2200      	movs	r2, #0
 803f020:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803f022:	4b13      	ldr	r3, [pc, #76]	; (803f070 <USBD_LL_Init+0x98>)
 803f024:	2200      	movs	r2, #0
 803f026:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803f028:	4b11      	ldr	r3, [pc, #68]	; (803f070 <USBD_LL_Init+0x98>)
 803f02a:	2200      	movs	r2, #0
 803f02c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803f02e:	4b10      	ldr	r3, [pc, #64]	; (803f070 <USBD_LL_Init+0x98>)
 803f030:	2200      	movs	r2, #0
 803f032:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803f034:	4b0e      	ldr	r3, [pc, #56]	; (803f070 <USBD_LL_Init+0x98>)
 803f036:	2200      	movs	r2, #0
 803f038:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803f03a:	480d      	ldr	r0, [pc, #52]	; (803f070 <USBD_LL_Init+0x98>)
 803f03c:	f7f3 fe18 	bl	8032c70 <HAL_PCD_Init>
 803f040:	4603      	mov	r3, r0
 803f042:	2b00      	cmp	r3, #0
 803f044:	d001      	beq.n	803f04a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803f046:	f7ee f895 	bl	802d174 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803f04a:	2180      	movs	r1, #128	; 0x80
 803f04c:	4808      	ldr	r0, [pc, #32]	; (803f070 <USBD_LL_Init+0x98>)
 803f04e:	f7f5 f8a4 	bl	803419a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803f052:	2240      	movs	r2, #64	; 0x40
 803f054:	2100      	movs	r1, #0
 803f056:	4806      	ldr	r0, [pc, #24]	; (803f070 <USBD_LL_Init+0x98>)
 803f058:	f7f5 f858 	bl	803410c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803f05c:	2280      	movs	r2, #128	; 0x80
 803f05e:	2101      	movs	r1, #1
 803f060:	4803      	ldr	r0, [pc, #12]	; (803f070 <USBD_LL_Init+0x98>)
 803f062:	f7f5 f853 	bl	803410c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803f066:	2300      	movs	r3, #0
}
 803f068:	4618      	mov	r0, r3
 803f06a:	3708      	adds	r7, #8
 803f06c:	46bd      	mov	sp, r7
 803f06e:	bd80      	pop	{r7, pc}
 803f070:	240030b0 	.word	0x240030b0
 803f074:	40080000 	.word	0x40080000

0803f078 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803f078:	b580      	push	{r7, lr}
 803f07a:	b084      	sub	sp, #16
 803f07c:	af00      	add	r7, sp, #0
 803f07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803f080:	2300      	movs	r3, #0
 803f082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f084:	2300      	movs	r3, #0
 803f086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803f088:	687b      	ldr	r3, [r7, #4]
 803f08a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803f08e:	4618      	mov	r0, r3
 803f090:	f7f3 ff12 	bl	8032eb8 <HAL_PCD_Start>
 803f094:	4603      	mov	r3, r0
 803f096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803f098:	7bfb      	ldrb	r3, [r7, #15]
 803f09a:	4618      	mov	r0, r3
 803f09c:	f000 f942 	bl	803f324 <USBD_Get_USB_Status>
 803f0a0:	4603      	mov	r3, r0
 803f0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803f0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 803f0a6:	4618      	mov	r0, r3
 803f0a8:	3710      	adds	r7, #16
 803f0aa:	46bd      	mov	sp, r7
 803f0ac:	bd80      	pop	{r7, pc}

0803f0ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803f0ae:	b580      	push	{r7, lr}
 803f0b0:	b084      	sub	sp, #16
 803f0b2:	af00      	add	r7, sp, #0
 803f0b4:	6078      	str	r0, [r7, #4]
 803f0b6:	4608      	mov	r0, r1
 803f0b8:	4611      	mov	r1, r2
 803f0ba:	461a      	mov	r2, r3
 803f0bc:	4603      	mov	r3, r0
 803f0be:	70fb      	strb	r3, [r7, #3]
 803f0c0:	460b      	mov	r3, r1
 803f0c2:	70bb      	strb	r3, [r7, #2]
 803f0c4:	4613      	mov	r3, r2
 803f0c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803f0c8:	2300      	movs	r3, #0
 803f0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f0cc:	2300      	movs	r3, #0
 803f0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803f0d0:	687b      	ldr	r3, [r7, #4]
 803f0d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803f0d6:	78bb      	ldrb	r3, [r7, #2]
 803f0d8:	883a      	ldrh	r2, [r7, #0]
 803f0da:	78f9      	ldrb	r1, [r7, #3]
 803f0dc:	f7f4 fc10 	bl	8033900 <HAL_PCD_EP_Open>
 803f0e0:	4603      	mov	r3, r0
 803f0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803f0e4:	7bfb      	ldrb	r3, [r7, #15]
 803f0e6:	4618      	mov	r0, r3
 803f0e8:	f000 f91c 	bl	803f324 <USBD_Get_USB_Status>
 803f0ec:	4603      	mov	r3, r0
 803f0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803f0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 803f0f2:	4618      	mov	r0, r3
 803f0f4:	3710      	adds	r7, #16
 803f0f6:	46bd      	mov	sp, r7
 803f0f8:	bd80      	pop	{r7, pc}

0803f0fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803f0fa:	b580      	push	{r7, lr}
 803f0fc:	b084      	sub	sp, #16
 803f0fe:	af00      	add	r7, sp, #0
 803f100:	6078      	str	r0, [r7, #4]
 803f102:	460b      	mov	r3, r1
 803f104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803f106:	2300      	movs	r3, #0
 803f108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f10a:	2300      	movs	r3, #0
 803f10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803f10e:	687b      	ldr	r3, [r7, #4]
 803f110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803f114:	78fa      	ldrb	r2, [r7, #3]
 803f116:	4611      	mov	r1, r2
 803f118:	4618      	mov	r0, r3
 803f11a:	f7f4 fc59 	bl	80339d0 <HAL_PCD_EP_Close>
 803f11e:	4603      	mov	r3, r0
 803f120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803f122:	7bfb      	ldrb	r3, [r7, #15]
 803f124:	4618      	mov	r0, r3
 803f126:	f000 f8fd 	bl	803f324 <USBD_Get_USB_Status>
 803f12a:	4603      	mov	r3, r0
 803f12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803f12e:	7bbb      	ldrb	r3, [r7, #14]
}
 803f130:	4618      	mov	r0, r3
 803f132:	3710      	adds	r7, #16
 803f134:	46bd      	mov	sp, r7
 803f136:	bd80      	pop	{r7, pc}

0803f138 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803f138:	b580      	push	{r7, lr}
 803f13a:	b084      	sub	sp, #16
 803f13c:	af00      	add	r7, sp, #0
 803f13e:	6078      	str	r0, [r7, #4]
 803f140:	460b      	mov	r3, r1
 803f142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803f144:	2300      	movs	r3, #0
 803f146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f148:	2300      	movs	r3, #0
 803f14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803f14c:	687b      	ldr	r3, [r7, #4]
 803f14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803f152:	78fa      	ldrb	r2, [r7, #3]
 803f154:	4611      	mov	r1, r2
 803f156:	4618      	mov	r0, r3
 803f158:	f7f4 fd31 	bl	8033bbe <HAL_PCD_EP_SetStall>
 803f15c:	4603      	mov	r3, r0
 803f15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803f160:	7bfb      	ldrb	r3, [r7, #15]
 803f162:	4618      	mov	r0, r3
 803f164:	f000 f8de 	bl	803f324 <USBD_Get_USB_Status>
 803f168:	4603      	mov	r3, r0
 803f16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803f16c:	7bbb      	ldrb	r3, [r7, #14]
}
 803f16e:	4618      	mov	r0, r3
 803f170:	3710      	adds	r7, #16
 803f172:	46bd      	mov	sp, r7
 803f174:	bd80      	pop	{r7, pc}

0803f176 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803f176:	b580      	push	{r7, lr}
 803f178:	b084      	sub	sp, #16
 803f17a:	af00      	add	r7, sp, #0
 803f17c:	6078      	str	r0, [r7, #4]
 803f17e:	460b      	mov	r3, r1
 803f180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803f182:	2300      	movs	r3, #0
 803f184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f186:	2300      	movs	r3, #0
 803f188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803f18a:	687b      	ldr	r3, [r7, #4]
 803f18c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803f190:	78fa      	ldrb	r2, [r7, #3]
 803f192:	4611      	mov	r1, r2
 803f194:	4618      	mov	r0, r3
 803f196:	f7f4 fd76 	bl	8033c86 <HAL_PCD_EP_ClrStall>
 803f19a:	4603      	mov	r3, r0
 803f19c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803f19e:	7bfb      	ldrb	r3, [r7, #15]
 803f1a0:	4618      	mov	r0, r3
 803f1a2:	f000 f8bf 	bl	803f324 <USBD_Get_USB_Status>
 803f1a6:	4603      	mov	r3, r0
 803f1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803f1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 803f1ac:	4618      	mov	r0, r3
 803f1ae:	3710      	adds	r7, #16
 803f1b0:	46bd      	mov	sp, r7
 803f1b2:	bd80      	pop	{r7, pc}

0803f1b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803f1b4:	b480      	push	{r7}
 803f1b6:	b085      	sub	sp, #20
 803f1b8:	af00      	add	r7, sp, #0
 803f1ba:	6078      	str	r0, [r7, #4]
 803f1bc:	460b      	mov	r3, r1
 803f1be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803f1c0:	687b      	ldr	r3, [r7, #4]
 803f1c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803f1c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803f1c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803f1cc:	2b00      	cmp	r3, #0
 803f1ce:	da0b      	bge.n	803f1e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803f1d0:	78fb      	ldrb	r3, [r7, #3]
 803f1d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803f1d6:	68f9      	ldr	r1, [r7, #12]
 803f1d8:	4613      	mov	r3, r2
 803f1da:	00db      	lsls	r3, r3, #3
 803f1dc:	4413      	add	r3, r2
 803f1de:	009b      	lsls	r3, r3, #2
 803f1e0:	440b      	add	r3, r1
 803f1e2:	333e      	adds	r3, #62	; 0x3e
 803f1e4:	781b      	ldrb	r3, [r3, #0]
 803f1e6:	e00b      	b.n	803f200 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803f1e8:	78fb      	ldrb	r3, [r7, #3]
 803f1ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803f1ee:	68f9      	ldr	r1, [r7, #12]
 803f1f0:	4613      	mov	r3, r2
 803f1f2:	00db      	lsls	r3, r3, #3
 803f1f4:	4413      	add	r3, r2
 803f1f6:	009b      	lsls	r3, r3, #2
 803f1f8:	440b      	add	r3, r1
 803f1fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803f1fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 803f200:	4618      	mov	r0, r3
 803f202:	3714      	adds	r7, #20
 803f204:	46bd      	mov	sp, r7
 803f206:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f20a:	4770      	bx	lr

0803f20c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803f20c:	b580      	push	{r7, lr}
 803f20e:	b084      	sub	sp, #16
 803f210:	af00      	add	r7, sp, #0
 803f212:	6078      	str	r0, [r7, #4]
 803f214:	460b      	mov	r3, r1
 803f216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803f218:	2300      	movs	r3, #0
 803f21a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f21c:	2300      	movs	r3, #0
 803f21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803f220:	687b      	ldr	r3, [r7, #4]
 803f222:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803f226:	78fa      	ldrb	r2, [r7, #3]
 803f228:	4611      	mov	r1, r2
 803f22a:	4618      	mov	r0, r3
 803f22c:	f7f4 fb43 	bl	80338b6 <HAL_PCD_SetAddress>
 803f230:	4603      	mov	r3, r0
 803f232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803f234:	7bfb      	ldrb	r3, [r7, #15]
 803f236:	4618      	mov	r0, r3
 803f238:	f000 f874 	bl	803f324 <USBD_Get_USB_Status>
 803f23c:	4603      	mov	r3, r0
 803f23e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803f240:	7bbb      	ldrb	r3, [r7, #14]
}
 803f242:	4618      	mov	r0, r3
 803f244:	3710      	adds	r7, #16
 803f246:	46bd      	mov	sp, r7
 803f248:	bd80      	pop	{r7, pc}

0803f24a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803f24a:	b580      	push	{r7, lr}
 803f24c:	b086      	sub	sp, #24
 803f24e:	af00      	add	r7, sp, #0
 803f250:	60f8      	str	r0, [r7, #12]
 803f252:	607a      	str	r2, [r7, #4]
 803f254:	603b      	str	r3, [r7, #0]
 803f256:	460b      	mov	r3, r1
 803f258:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803f25a:	2300      	movs	r3, #0
 803f25c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f25e:	2300      	movs	r3, #0
 803f260:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803f262:	68fb      	ldr	r3, [r7, #12]
 803f264:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803f268:	7af9      	ldrb	r1, [r7, #11]
 803f26a:	683b      	ldr	r3, [r7, #0]
 803f26c:	687a      	ldr	r2, [r7, #4]
 803f26e:	f7f4 fc5c 	bl	8033b2a <HAL_PCD_EP_Transmit>
 803f272:	4603      	mov	r3, r0
 803f274:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803f276:	7dfb      	ldrb	r3, [r7, #23]
 803f278:	4618      	mov	r0, r3
 803f27a:	f000 f853 	bl	803f324 <USBD_Get_USB_Status>
 803f27e:	4603      	mov	r3, r0
 803f280:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803f282:	7dbb      	ldrb	r3, [r7, #22]
}
 803f284:	4618      	mov	r0, r3
 803f286:	3718      	adds	r7, #24
 803f288:	46bd      	mov	sp, r7
 803f28a:	bd80      	pop	{r7, pc}

0803f28c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803f28c:	b580      	push	{r7, lr}
 803f28e:	b086      	sub	sp, #24
 803f290:	af00      	add	r7, sp, #0
 803f292:	60f8      	str	r0, [r7, #12]
 803f294:	607a      	str	r2, [r7, #4]
 803f296:	603b      	str	r3, [r7, #0]
 803f298:	460b      	mov	r3, r1
 803f29a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803f29c:	2300      	movs	r3, #0
 803f29e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f2a0:	2300      	movs	r3, #0
 803f2a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803f2a4:	68fb      	ldr	r3, [r7, #12]
 803f2a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803f2aa:	7af9      	ldrb	r1, [r7, #11]
 803f2ac:	683b      	ldr	r3, [r7, #0]
 803f2ae:	687a      	ldr	r2, [r7, #4]
 803f2b0:	f7f4 fbd8 	bl	8033a64 <HAL_PCD_EP_Receive>
 803f2b4:	4603      	mov	r3, r0
 803f2b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803f2b8:	7dfb      	ldrb	r3, [r7, #23]
 803f2ba:	4618      	mov	r0, r3
 803f2bc:	f000 f832 	bl	803f324 <USBD_Get_USB_Status>
 803f2c0:	4603      	mov	r3, r0
 803f2c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803f2c4:	7dbb      	ldrb	r3, [r7, #22]
}
 803f2c6:	4618      	mov	r0, r3
 803f2c8:	3718      	adds	r7, #24
 803f2ca:	46bd      	mov	sp, r7
 803f2cc:	bd80      	pop	{r7, pc}

0803f2ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803f2ce:	b580      	push	{r7, lr}
 803f2d0:	b082      	sub	sp, #8
 803f2d2:	af00      	add	r7, sp, #0
 803f2d4:	6078      	str	r0, [r7, #4]
 803f2d6:	460b      	mov	r3, r1
 803f2d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803f2da:	687b      	ldr	r3, [r7, #4]
 803f2dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803f2e0:	78fa      	ldrb	r2, [r7, #3]
 803f2e2:	4611      	mov	r1, r2
 803f2e4:	4618      	mov	r0, r3
 803f2e6:	f7f4 fc08 	bl	8033afa <HAL_PCD_EP_GetRxCount>
 803f2ea:	4603      	mov	r3, r0
}
 803f2ec:	4618      	mov	r0, r3
 803f2ee:	3708      	adds	r7, #8
 803f2f0:	46bd      	mov	sp, r7
 803f2f2:	bd80      	pop	{r7, pc}

0803f2f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803f2f4:	b480      	push	{r7}
 803f2f6:	b083      	sub	sp, #12
 803f2f8:	af00      	add	r7, sp, #0
 803f2fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803f2fc:	4b03      	ldr	r3, [pc, #12]	; (803f30c <USBD_static_malloc+0x18>)
}
 803f2fe:	4618      	mov	r0, r3
 803f300:	370c      	adds	r7, #12
 803f302:	46bd      	mov	sp, r7
 803f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f308:	4770      	bx	lr
 803f30a:	bf00      	nop
 803f30c:	240035bc 	.word	0x240035bc

0803f310 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803f310:	b480      	push	{r7}
 803f312:	b083      	sub	sp, #12
 803f314:	af00      	add	r7, sp, #0
 803f316:	6078      	str	r0, [r7, #4]

}
 803f318:	bf00      	nop
 803f31a:	370c      	adds	r7, #12
 803f31c:	46bd      	mov	sp, r7
 803f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f322:	4770      	bx	lr

0803f324 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803f324:	b480      	push	{r7}
 803f326:	b085      	sub	sp, #20
 803f328:	af00      	add	r7, sp, #0
 803f32a:	4603      	mov	r3, r0
 803f32c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803f32e:	2300      	movs	r3, #0
 803f330:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803f332:	79fb      	ldrb	r3, [r7, #7]
 803f334:	2b03      	cmp	r3, #3
 803f336:	d817      	bhi.n	803f368 <USBD_Get_USB_Status+0x44>
 803f338:	a201      	add	r2, pc, #4	; (adr r2, 803f340 <USBD_Get_USB_Status+0x1c>)
 803f33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803f33e:	bf00      	nop
 803f340:	0803f351 	.word	0x0803f351
 803f344:	0803f357 	.word	0x0803f357
 803f348:	0803f35d 	.word	0x0803f35d
 803f34c:	0803f363 	.word	0x0803f363
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803f350:	2300      	movs	r3, #0
 803f352:	73fb      	strb	r3, [r7, #15]
    break;
 803f354:	e00b      	b.n	803f36e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803f356:	2303      	movs	r3, #3
 803f358:	73fb      	strb	r3, [r7, #15]
    break;
 803f35a:	e008      	b.n	803f36e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803f35c:	2301      	movs	r3, #1
 803f35e:	73fb      	strb	r3, [r7, #15]
    break;
 803f360:	e005      	b.n	803f36e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803f362:	2303      	movs	r3, #3
 803f364:	73fb      	strb	r3, [r7, #15]
    break;
 803f366:	e002      	b.n	803f36e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803f368:	2303      	movs	r3, #3
 803f36a:	73fb      	strb	r3, [r7, #15]
    break;
 803f36c:	bf00      	nop
  }
  return usb_status;
 803f36e:	7bfb      	ldrb	r3, [r7, #15]
}
 803f370:	4618      	mov	r0, r3
 803f372:	3714      	adds	r7, #20
 803f374:	46bd      	mov	sp, r7
 803f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f37a:	4770      	bx	lr

0803f37c <_ZdlPvj>:
 803f37c:	f000 b817 	b.w	803f3ae <_ZdlPv>

0803f380 <_Znwj>:
 803f380:	2801      	cmp	r0, #1
 803f382:	bf38      	it	cc
 803f384:	2001      	movcc	r0, #1
 803f386:	b510      	push	{r4, lr}
 803f388:	4604      	mov	r4, r0
 803f38a:	4620      	mov	r0, r4
 803f38c:	f000 f87c 	bl	803f488 <malloc>
 803f390:	b930      	cbnz	r0, 803f3a0 <_Znwj+0x20>
 803f392:	f000 f80f 	bl	803f3b4 <_ZSt15get_new_handlerv>
 803f396:	b908      	cbnz	r0, 803f39c <_Znwj+0x1c>
 803f398:	f000 f814 	bl	803f3c4 <abort>
 803f39c:	4780      	blx	r0
 803f39e:	e7f4      	b.n	803f38a <_Znwj+0xa>
 803f3a0:	bd10      	pop	{r4, pc}

0803f3a2 <_ZSt17__throw_bad_allocv>:
 803f3a2:	b508      	push	{r3, lr}
 803f3a4:	f000 f80e 	bl	803f3c4 <abort>

0803f3a8 <_ZSt20__throw_length_errorPKc>:
 803f3a8:	b508      	push	{r3, lr}
 803f3aa:	f000 f80b 	bl	803f3c4 <abort>

0803f3ae <_ZdlPv>:
 803f3ae:	f000 b873 	b.w	803f498 <free>
	...

0803f3b4 <_ZSt15get_new_handlerv>:
 803f3b4:	4b02      	ldr	r3, [pc, #8]	; (803f3c0 <_ZSt15get_new_handlerv+0xc>)
 803f3b6:	6818      	ldr	r0, [r3, #0]
 803f3b8:	f3bf 8f5b 	dmb	ish
 803f3bc:	4770      	bx	lr
 803f3be:	bf00      	nop
 803f3c0:	240037dc 	.word	0x240037dc

0803f3c4 <abort>:
 803f3c4:	b508      	push	{r3, lr}
 803f3c6:	2006      	movs	r0, #6
 803f3c8:	f000 fca4 	bl	803fd14 <raise>
 803f3cc:	2001      	movs	r0, #1
 803f3ce:	f7ee f90f 	bl	802d5f0 <_exit>
	...

0803f3d4 <__assert_func>:
 803f3d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803f3d6:	4614      	mov	r4, r2
 803f3d8:	461a      	mov	r2, r3
 803f3da:	4b09      	ldr	r3, [pc, #36]	; (803f400 <__assert_func+0x2c>)
 803f3dc:	681b      	ldr	r3, [r3, #0]
 803f3de:	4605      	mov	r5, r0
 803f3e0:	68d8      	ldr	r0, [r3, #12]
 803f3e2:	b14c      	cbz	r4, 803f3f8 <__assert_func+0x24>
 803f3e4:	4b07      	ldr	r3, [pc, #28]	; (803f404 <__assert_func+0x30>)
 803f3e6:	9100      	str	r1, [sp, #0]
 803f3e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803f3ec:	4906      	ldr	r1, [pc, #24]	; (803f408 <__assert_func+0x34>)
 803f3ee:	462b      	mov	r3, r5
 803f3f0:	f000 f814 	bl	803f41c <fiprintf>
 803f3f4:	f7ff ffe6 	bl	803f3c4 <abort>
 803f3f8:	4b04      	ldr	r3, [pc, #16]	; (803f40c <__assert_func+0x38>)
 803f3fa:	461c      	mov	r4, r3
 803f3fc:	e7f3      	b.n	803f3e6 <__assert_func+0x12>
 803f3fe:	bf00      	nop
 803f400:	24000104 	.word	0x24000104
 803f404:	0805b85c 	.word	0x0805b85c
 803f408:	0805b869 	.word	0x0805b869
 803f40c:	0805b897 	.word	0x0805b897

0803f410 <__errno>:
 803f410:	4b01      	ldr	r3, [pc, #4]	; (803f418 <__errno+0x8>)
 803f412:	6818      	ldr	r0, [r3, #0]
 803f414:	4770      	bx	lr
 803f416:	bf00      	nop
 803f418:	24000104 	.word	0x24000104

0803f41c <fiprintf>:
 803f41c:	b40e      	push	{r1, r2, r3}
 803f41e:	b503      	push	{r0, r1, lr}
 803f420:	4601      	mov	r1, r0
 803f422:	ab03      	add	r3, sp, #12
 803f424:	4805      	ldr	r0, [pc, #20]	; (803f43c <fiprintf+0x20>)
 803f426:	f853 2b04 	ldr.w	r2, [r3], #4
 803f42a:	6800      	ldr	r0, [r0, #0]
 803f42c:	9301      	str	r3, [sp, #4]
 803f42e:	f000 f975 	bl	803f71c <_vfiprintf_r>
 803f432:	b002      	add	sp, #8
 803f434:	f85d eb04 	ldr.w	lr, [sp], #4
 803f438:	b003      	add	sp, #12
 803f43a:	4770      	bx	lr
 803f43c:	24000104 	.word	0x24000104

0803f440 <__libc_init_array>:
 803f440:	b570      	push	{r4, r5, r6, lr}
 803f442:	4d0d      	ldr	r5, [pc, #52]	; (803f478 <__libc_init_array+0x38>)
 803f444:	4c0d      	ldr	r4, [pc, #52]	; (803f47c <__libc_init_array+0x3c>)
 803f446:	1b64      	subs	r4, r4, r5
 803f448:	10a4      	asrs	r4, r4, #2
 803f44a:	2600      	movs	r6, #0
 803f44c:	42a6      	cmp	r6, r4
 803f44e:	d109      	bne.n	803f464 <__libc_init_array+0x24>
 803f450:	4d0b      	ldr	r5, [pc, #44]	; (803f480 <__libc_init_array+0x40>)
 803f452:	4c0c      	ldr	r4, [pc, #48]	; (803f484 <__libc_init_array+0x44>)
 803f454:	f001 f812 	bl	804047c <_init>
 803f458:	1b64      	subs	r4, r4, r5
 803f45a:	10a4      	asrs	r4, r4, #2
 803f45c:	2600      	movs	r6, #0
 803f45e:	42a6      	cmp	r6, r4
 803f460:	d105      	bne.n	803f46e <__libc_init_array+0x2e>
 803f462:	bd70      	pop	{r4, r5, r6, pc}
 803f464:	f855 3b04 	ldr.w	r3, [r5], #4
 803f468:	4798      	blx	r3
 803f46a:	3601      	adds	r6, #1
 803f46c:	e7ee      	b.n	803f44c <__libc_init_array+0xc>
 803f46e:	f855 3b04 	ldr.w	r3, [r5], #4
 803f472:	4798      	blx	r3
 803f474:	3601      	adds	r6, #1
 803f476:	e7f2      	b.n	803f45e <__libc_init_array+0x1e>
 803f478:	0805b938 	.word	0x0805b938
 803f47c:	0805b938 	.word	0x0805b938
 803f480:	0805b938 	.word	0x0805b938
 803f484:	0805b940 	.word	0x0805b940

0803f488 <malloc>:
 803f488:	4b02      	ldr	r3, [pc, #8]	; (803f494 <malloc+0xc>)
 803f48a:	4601      	mov	r1, r0
 803f48c:	6818      	ldr	r0, [r3, #0]
 803f48e:	f000 b8a7 	b.w	803f5e0 <_malloc_r>
 803f492:	bf00      	nop
 803f494:	24000104 	.word	0x24000104

0803f498 <free>:
 803f498:	4b02      	ldr	r3, [pc, #8]	; (803f4a4 <free+0xc>)
 803f49a:	4601      	mov	r1, r0
 803f49c:	6818      	ldr	r0, [r3, #0]
 803f49e:	f000 b833 	b.w	803f508 <_free_r>
 803f4a2:	bf00      	nop
 803f4a4:	24000104 	.word	0x24000104

0803f4a8 <memcpy>:
 803f4a8:	440a      	add	r2, r1
 803f4aa:	4291      	cmp	r1, r2
 803f4ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803f4b0:	d100      	bne.n	803f4b4 <memcpy+0xc>
 803f4b2:	4770      	bx	lr
 803f4b4:	b510      	push	{r4, lr}
 803f4b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 803f4ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 803f4be:	4291      	cmp	r1, r2
 803f4c0:	d1f9      	bne.n	803f4b6 <memcpy+0xe>
 803f4c2:	bd10      	pop	{r4, pc}

0803f4c4 <memmove>:
 803f4c4:	4288      	cmp	r0, r1
 803f4c6:	b510      	push	{r4, lr}
 803f4c8:	eb01 0402 	add.w	r4, r1, r2
 803f4cc:	d902      	bls.n	803f4d4 <memmove+0x10>
 803f4ce:	4284      	cmp	r4, r0
 803f4d0:	4623      	mov	r3, r4
 803f4d2:	d807      	bhi.n	803f4e4 <memmove+0x20>
 803f4d4:	1e43      	subs	r3, r0, #1
 803f4d6:	42a1      	cmp	r1, r4
 803f4d8:	d008      	beq.n	803f4ec <memmove+0x28>
 803f4da:	f811 2b01 	ldrb.w	r2, [r1], #1
 803f4de:	f803 2f01 	strb.w	r2, [r3, #1]!
 803f4e2:	e7f8      	b.n	803f4d6 <memmove+0x12>
 803f4e4:	4402      	add	r2, r0
 803f4e6:	4601      	mov	r1, r0
 803f4e8:	428a      	cmp	r2, r1
 803f4ea:	d100      	bne.n	803f4ee <memmove+0x2a>
 803f4ec:	bd10      	pop	{r4, pc}
 803f4ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803f4f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803f4f6:	e7f7      	b.n	803f4e8 <memmove+0x24>

0803f4f8 <memset>:
 803f4f8:	4402      	add	r2, r0
 803f4fa:	4603      	mov	r3, r0
 803f4fc:	4293      	cmp	r3, r2
 803f4fe:	d100      	bne.n	803f502 <memset+0xa>
 803f500:	4770      	bx	lr
 803f502:	f803 1b01 	strb.w	r1, [r3], #1
 803f506:	e7f9      	b.n	803f4fc <memset+0x4>

0803f508 <_free_r>:
 803f508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803f50a:	2900      	cmp	r1, #0
 803f50c:	d044      	beq.n	803f598 <_free_r+0x90>
 803f50e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803f512:	9001      	str	r0, [sp, #4]
 803f514:	2b00      	cmp	r3, #0
 803f516:	f1a1 0404 	sub.w	r4, r1, #4
 803f51a:	bfb8      	it	lt
 803f51c:	18e4      	addlt	r4, r4, r3
 803f51e:	f000 fef5 	bl	804030c <__malloc_lock>
 803f522:	4a1e      	ldr	r2, [pc, #120]	; (803f59c <_free_r+0x94>)
 803f524:	9801      	ldr	r0, [sp, #4]
 803f526:	6813      	ldr	r3, [r2, #0]
 803f528:	b933      	cbnz	r3, 803f538 <_free_r+0x30>
 803f52a:	6063      	str	r3, [r4, #4]
 803f52c:	6014      	str	r4, [r2, #0]
 803f52e:	b003      	add	sp, #12
 803f530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803f534:	f000 bef0 	b.w	8040318 <__malloc_unlock>
 803f538:	42a3      	cmp	r3, r4
 803f53a:	d908      	bls.n	803f54e <_free_r+0x46>
 803f53c:	6825      	ldr	r5, [r4, #0]
 803f53e:	1961      	adds	r1, r4, r5
 803f540:	428b      	cmp	r3, r1
 803f542:	bf01      	itttt	eq
 803f544:	6819      	ldreq	r1, [r3, #0]
 803f546:	685b      	ldreq	r3, [r3, #4]
 803f548:	1949      	addeq	r1, r1, r5
 803f54a:	6021      	streq	r1, [r4, #0]
 803f54c:	e7ed      	b.n	803f52a <_free_r+0x22>
 803f54e:	461a      	mov	r2, r3
 803f550:	685b      	ldr	r3, [r3, #4]
 803f552:	b10b      	cbz	r3, 803f558 <_free_r+0x50>
 803f554:	42a3      	cmp	r3, r4
 803f556:	d9fa      	bls.n	803f54e <_free_r+0x46>
 803f558:	6811      	ldr	r1, [r2, #0]
 803f55a:	1855      	adds	r5, r2, r1
 803f55c:	42a5      	cmp	r5, r4
 803f55e:	d10b      	bne.n	803f578 <_free_r+0x70>
 803f560:	6824      	ldr	r4, [r4, #0]
 803f562:	4421      	add	r1, r4
 803f564:	1854      	adds	r4, r2, r1
 803f566:	42a3      	cmp	r3, r4
 803f568:	6011      	str	r1, [r2, #0]
 803f56a:	d1e0      	bne.n	803f52e <_free_r+0x26>
 803f56c:	681c      	ldr	r4, [r3, #0]
 803f56e:	685b      	ldr	r3, [r3, #4]
 803f570:	6053      	str	r3, [r2, #4]
 803f572:	4421      	add	r1, r4
 803f574:	6011      	str	r1, [r2, #0]
 803f576:	e7da      	b.n	803f52e <_free_r+0x26>
 803f578:	d902      	bls.n	803f580 <_free_r+0x78>
 803f57a:	230c      	movs	r3, #12
 803f57c:	6003      	str	r3, [r0, #0]
 803f57e:	e7d6      	b.n	803f52e <_free_r+0x26>
 803f580:	6825      	ldr	r5, [r4, #0]
 803f582:	1961      	adds	r1, r4, r5
 803f584:	428b      	cmp	r3, r1
 803f586:	bf04      	itt	eq
 803f588:	6819      	ldreq	r1, [r3, #0]
 803f58a:	685b      	ldreq	r3, [r3, #4]
 803f58c:	6063      	str	r3, [r4, #4]
 803f58e:	bf04      	itt	eq
 803f590:	1949      	addeq	r1, r1, r5
 803f592:	6021      	streq	r1, [r4, #0]
 803f594:	6054      	str	r4, [r2, #4]
 803f596:	e7ca      	b.n	803f52e <_free_r+0x26>
 803f598:	b003      	add	sp, #12
 803f59a:	bd30      	pop	{r4, r5, pc}
 803f59c:	240037e0 	.word	0x240037e0

0803f5a0 <sbrk_aligned>:
 803f5a0:	b570      	push	{r4, r5, r6, lr}
 803f5a2:	4e0e      	ldr	r6, [pc, #56]	; (803f5dc <sbrk_aligned+0x3c>)
 803f5a4:	460c      	mov	r4, r1
 803f5a6:	6831      	ldr	r1, [r6, #0]
 803f5a8:	4605      	mov	r5, r0
 803f5aa:	b911      	cbnz	r1, 803f5b2 <sbrk_aligned+0x12>
 803f5ac:	f000 fb7a 	bl	803fca4 <_sbrk_r>
 803f5b0:	6030      	str	r0, [r6, #0]
 803f5b2:	4621      	mov	r1, r4
 803f5b4:	4628      	mov	r0, r5
 803f5b6:	f000 fb75 	bl	803fca4 <_sbrk_r>
 803f5ba:	1c43      	adds	r3, r0, #1
 803f5bc:	d00a      	beq.n	803f5d4 <sbrk_aligned+0x34>
 803f5be:	1cc4      	adds	r4, r0, #3
 803f5c0:	f024 0403 	bic.w	r4, r4, #3
 803f5c4:	42a0      	cmp	r0, r4
 803f5c6:	d007      	beq.n	803f5d8 <sbrk_aligned+0x38>
 803f5c8:	1a21      	subs	r1, r4, r0
 803f5ca:	4628      	mov	r0, r5
 803f5cc:	f000 fb6a 	bl	803fca4 <_sbrk_r>
 803f5d0:	3001      	adds	r0, #1
 803f5d2:	d101      	bne.n	803f5d8 <sbrk_aligned+0x38>
 803f5d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803f5d8:	4620      	mov	r0, r4
 803f5da:	bd70      	pop	{r4, r5, r6, pc}
 803f5dc:	240037e4 	.word	0x240037e4

0803f5e0 <_malloc_r>:
 803f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803f5e4:	1ccd      	adds	r5, r1, #3
 803f5e6:	f025 0503 	bic.w	r5, r5, #3
 803f5ea:	3508      	adds	r5, #8
 803f5ec:	2d0c      	cmp	r5, #12
 803f5ee:	bf38      	it	cc
 803f5f0:	250c      	movcc	r5, #12
 803f5f2:	2d00      	cmp	r5, #0
 803f5f4:	4607      	mov	r7, r0
 803f5f6:	db01      	blt.n	803f5fc <_malloc_r+0x1c>
 803f5f8:	42a9      	cmp	r1, r5
 803f5fa:	d905      	bls.n	803f608 <_malloc_r+0x28>
 803f5fc:	230c      	movs	r3, #12
 803f5fe:	603b      	str	r3, [r7, #0]
 803f600:	2600      	movs	r6, #0
 803f602:	4630      	mov	r0, r6
 803f604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803f608:	4e2e      	ldr	r6, [pc, #184]	; (803f6c4 <_malloc_r+0xe4>)
 803f60a:	f000 fe7f 	bl	804030c <__malloc_lock>
 803f60e:	6833      	ldr	r3, [r6, #0]
 803f610:	461c      	mov	r4, r3
 803f612:	bb34      	cbnz	r4, 803f662 <_malloc_r+0x82>
 803f614:	4629      	mov	r1, r5
 803f616:	4638      	mov	r0, r7
 803f618:	f7ff ffc2 	bl	803f5a0 <sbrk_aligned>
 803f61c:	1c43      	adds	r3, r0, #1
 803f61e:	4604      	mov	r4, r0
 803f620:	d14d      	bne.n	803f6be <_malloc_r+0xde>
 803f622:	6834      	ldr	r4, [r6, #0]
 803f624:	4626      	mov	r6, r4
 803f626:	2e00      	cmp	r6, #0
 803f628:	d140      	bne.n	803f6ac <_malloc_r+0xcc>
 803f62a:	6823      	ldr	r3, [r4, #0]
 803f62c:	4631      	mov	r1, r6
 803f62e:	4638      	mov	r0, r7
 803f630:	eb04 0803 	add.w	r8, r4, r3
 803f634:	f000 fb36 	bl	803fca4 <_sbrk_r>
 803f638:	4580      	cmp	r8, r0
 803f63a:	d13a      	bne.n	803f6b2 <_malloc_r+0xd2>
 803f63c:	6821      	ldr	r1, [r4, #0]
 803f63e:	3503      	adds	r5, #3
 803f640:	1a6d      	subs	r5, r5, r1
 803f642:	f025 0503 	bic.w	r5, r5, #3
 803f646:	3508      	adds	r5, #8
 803f648:	2d0c      	cmp	r5, #12
 803f64a:	bf38      	it	cc
 803f64c:	250c      	movcc	r5, #12
 803f64e:	4629      	mov	r1, r5
 803f650:	4638      	mov	r0, r7
 803f652:	f7ff ffa5 	bl	803f5a0 <sbrk_aligned>
 803f656:	3001      	adds	r0, #1
 803f658:	d02b      	beq.n	803f6b2 <_malloc_r+0xd2>
 803f65a:	6823      	ldr	r3, [r4, #0]
 803f65c:	442b      	add	r3, r5
 803f65e:	6023      	str	r3, [r4, #0]
 803f660:	e00e      	b.n	803f680 <_malloc_r+0xa0>
 803f662:	6822      	ldr	r2, [r4, #0]
 803f664:	1b52      	subs	r2, r2, r5
 803f666:	d41e      	bmi.n	803f6a6 <_malloc_r+0xc6>
 803f668:	2a0b      	cmp	r2, #11
 803f66a:	d916      	bls.n	803f69a <_malloc_r+0xba>
 803f66c:	1961      	adds	r1, r4, r5
 803f66e:	42a3      	cmp	r3, r4
 803f670:	6025      	str	r5, [r4, #0]
 803f672:	bf18      	it	ne
 803f674:	6059      	strne	r1, [r3, #4]
 803f676:	6863      	ldr	r3, [r4, #4]
 803f678:	bf08      	it	eq
 803f67a:	6031      	streq	r1, [r6, #0]
 803f67c:	5162      	str	r2, [r4, r5]
 803f67e:	604b      	str	r3, [r1, #4]
 803f680:	4638      	mov	r0, r7
 803f682:	f104 060b 	add.w	r6, r4, #11
 803f686:	f000 fe47 	bl	8040318 <__malloc_unlock>
 803f68a:	f026 0607 	bic.w	r6, r6, #7
 803f68e:	1d23      	adds	r3, r4, #4
 803f690:	1af2      	subs	r2, r6, r3
 803f692:	d0b6      	beq.n	803f602 <_malloc_r+0x22>
 803f694:	1b9b      	subs	r3, r3, r6
 803f696:	50a3      	str	r3, [r4, r2]
 803f698:	e7b3      	b.n	803f602 <_malloc_r+0x22>
 803f69a:	6862      	ldr	r2, [r4, #4]
 803f69c:	42a3      	cmp	r3, r4
 803f69e:	bf0c      	ite	eq
 803f6a0:	6032      	streq	r2, [r6, #0]
 803f6a2:	605a      	strne	r2, [r3, #4]
 803f6a4:	e7ec      	b.n	803f680 <_malloc_r+0xa0>
 803f6a6:	4623      	mov	r3, r4
 803f6a8:	6864      	ldr	r4, [r4, #4]
 803f6aa:	e7b2      	b.n	803f612 <_malloc_r+0x32>
 803f6ac:	4634      	mov	r4, r6
 803f6ae:	6876      	ldr	r6, [r6, #4]
 803f6b0:	e7b9      	b.n	803f626 <_malloc_r+0x46>
 803f6b2:	230c      	movs	r3, #12
 803f6b4:	603b      	str	r3, [r7, #0]
 803f6b6:	4638      	mov	r0, r7
 803f6b8:	f000 fe2e 	bl	8040318 <__malloc_unlock>
 803f6bc:	e7a1      	b.n	803f602 <_malloc_r+0x22>
 803f6be:	6025      	str	r5, [r4, #0]
 803f6c0:	e7de      	b.n	803f680 <_malloc_r+0xa0>
 803f6c2:	bf00      	nop
 803f6c4:	240037e0 	.word	0x240037e0

0803f6c8 <__sfputc_r>:
 803f6c8:	6893      	ldr	r3, [r2, #8]
 803f6ca:	3b01      	subs	r3, #1
 803f6cc:	2b00      	cmp	r3, #0
 803f6ce:	b410      	push	{r4}
 803f6d0:	6093      	str	r3, [r2, #8]
 803f6d2:	da08      	bge.n	803f6e6 <__sfputc_r+0x1e>
 803f6d4:	6994      	ldr	r4, [r2, #24]
 803f6d6:	42a3      	cmp	r3, r4
 803f6d8:	db01      	blt.n	803f6de <__sfputc_r+0x16>
 803f6da:	290a      	cmp	r1, #10
 803f6dc:	d103      	bne.n	803f6e6 <__sfputc_r+0x1e>
 803f6de:	f85d 4b04 	ldr.w	r4, [sp], #4
 803f6e2:	f000 bb33 	b.w	803fd4c <__swbuf_r>
 803f6e6:	6813      	ldr	r3, [r2, #0]
 803f6e8:	1c58      	adds	r0, r3, #1
 803f6ea:	6010      	str	r0, [r2, #0]
 803f6ec:	7019      	strb	r1, [r3, #0]
 803f6ee:	4608      	mov	r0, r1
 803f6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 803f6f4:	4770      	bx	lr

0803f6f6 <__sfputs_r>:
 803f6f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f6f8:	4606      	mov	r6, r0
 803f6fa:	460f      	mov	r7, r1
 803f6fc:	4614      	mov	r4, r2
 803f6fe:	18d5      	adds	r5, r2, r3
 803f700:	42ac      	cmp	r4, r5
 803f702:	d101      	bne.n	803f708 <__sfputs_r+0x12>
 803f704:	2000      	movs	r0, #0
 803f706:	e007      	b.n	803f718 <__sfputs_r+0x22>
 803f708:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f70c:	463a      	mov	r2, r7
 803f70e:	4630      	mov	r0, r6
 803f710:	f7ff ffda 	bl	803f6c8 <__sfputc_r>
 803f714:	1c43      	adds	r3, r0, #1
 803f716:	d1f3      	bne.n	803f700 <__sfputs_r+0xa>
 803f718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803f71c <_vfiprintf_r>:
 803f71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803f720:	460d      	mov	r5, r1
 803f722:	b09d      	sub	sp, #116	; 0x74
 803f724:	4614      	mov	r4, r2
 803f726:	4698      	mov	r8, r3
 803f728:	4606      	mov	r6, r0
 803f72a:	b118      	cbz	r0, 803f734 <_vfiprintf_r+0x18>
 803f72c:	6983      	ldr	r3, [r0, #24]
 803f72e:	b90b      	cbnz	r3, 803f734 <_vfiprintf_r+0x18>
 803f730:	f000 fce6 	bl	8040100 <__sinit>
 803f734:	4b89      	ldr	r3, [pc, #548]	; (803f95c <_vfiprintf_r+0x240>)
 803f736:	429d      	cmp	r5, r3
 803f738:	d11b      	bne.n	803f772 <_vfiprintf_r+0x56>
 803f73a:	6875      	ldr	r5, [r6, #4]
 803f73c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803f73e:	07d9      	lsls	r1, r3, #31
 803f740:	d405      	bmi.n	803f74e <_vfiprintf_r+0x32>
 803f742:	89ab      	ldrh	r3, [r5, #12]
 803f744:	059a      	lsls	r2, r3, #22
 803f746:	d402      	bmi.n	803f74e <_vfiprintf_r+0x32>
 803f748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803f74a:	f000 fd77 	bl	804023c <__retarget_lock_acquire_recursive>
 803f74e:	89ab      	ldrh	r3, [r5, #12]
 803f750:	071b      	lsls	r3, r3, #28
 803f752:	d501      	bpl.n	803f758 <_vfiprintf_r+0x3c>
 803f754:	692b      	ldr	r3, [r5, #16]
 803f756:	b9eb      	cbnz	r3, 803f794 <_vfiprintf_r+0x78>
 803f758:	4629      	mov	r1, r5
 803f75a:	4630      	mov	r0, r6
 803f75c:	f000 fb48 	bl	803fdf0 <__swsetup_r>
 803f760:	b1c0      	cbz	r0, 803f794 <_vfiprintf_r+0x78>
 803f762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803f764:	07dc      	lsls	r4, r3, #31
 803f766:	d50e      	bpl.n	803f786 <_vfiprintf_r+0x6a>
 803f768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803f76c:	b01d      	add	sp, #116	; 0x74
 803f76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803f772:	4b7b      	ldr	r3, [pc, #492]	; (803f960 <_vfiprintf_r+0x244>)
 803f774:	429d      	cmp	r5, r3
 803f776:	d101      	bne.n	803f77c <_vfiprintf_r+0x60>
 803f778:	68b5      	ldr	r5, [r6, #8]
 803f77a:	e7df      	b.n	803f73c <_vfiprintf_r+0x20>
 803f77c:	4b79      	ldr	r3, [pc, #484]	; (803f964 <_vfiprintf_r+0x248>)
 803f77e:	429d      	cmp	r5, r3
 803f780:	bf08      	it	eq
 803f782:	68f5      	ldreq	r5, [r6, #12]
 803f784:	e7da      	b.n	803f73c <_vfiprintf_r+0x20>
 803f786:	89ab      	ldrh	r3, [r5, #12]
 803f788:	0598      	lsls	r0, r3, #22
 803f78a:	d4ed      	bmi.n	803f768 <_vfiprintf_r+0x4c>
 803f78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803f78e:	f000 fd56 	bl	804023e <__retarget_lock_release_recursive>
 803f792:	e7e9      	b.n	803f768 <_vfiprintf_r+0x4c>
 803f794:	2300      	movs	r3, #0
 803f796:	9309      	str	r3, [sp, #36]	; 0x24
 803f798:	2320      	movs	r3, #32
 803f79a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803f79e:	f8cd 800c 	str.w	r8, [sp, #12]
 803f7a2:	2330      	movs	r3, #48	; 0x30
 803f7a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803f968 <_vfiprintf_r+0x24c>
 803f7a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803f7ac:	f04f 0901 	mov.w	r9, #1
 803f7b0:	4623      	mov	r3, r4
 803f7b2:	469a      	mov	sl, r3
 803f7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 803f7b8:	b10a      	cbz	r2, 803f7be <_vfiprintf_r+0xa2>
 803f7ba:	2a25      	cmp	r2, #37	; 0x25
 803f7bc:	d1f9      	bne.n	803f7b2 <_vfiprintf_r+0x96>
 803f7be:	ebba 0b04 	subs.w	fp, sl, r4
 803f7c2:	d00b      	beq.n	803f7dc <_vfiprintf_r+0xc0>
 803f7c4:	465b      	mov	r3, fp
 803f7c6:	4622      	mov	r2, r4
 803f7c8:	4629      	mov	r1, r5
 803f7ca:	4630      	mov	r0, r6
 803f7cc:	f7ff ff93 	bl	803f6f6 <__sfputs_r>
 803f7d0:	3001      	adds	r0, #1
 803f7d2:	f000 80aa 	beq.w	803f92a <_vfiprintf_r+0x20e>
 803f7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803f7d8:	445a      	add	r2, fp
 803f7da:	9209      	str	r2, [sp, #36]	; 0x24
 803f7dc:	f89a 3000 	ldrb.w	r3, [sl]
 803f7e0:	2b00      	cmp	r3, #0
 803f7e2:	f000 80a2 	beq.w	803f92a <_vfiprintf_r+0x20e>
 803f7e6:	2300      	movs	r3, #0
 803f7e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803f7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803f7f0:	f10a 0a01 	add.w	sl, sl, #1
 803f7f4:	9304      	str	r3, [sp, #16]
 803f7f6:	9307      	str	r3, [sp, #28]
 803f7f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803f7fc:	931a      	str	r3, [sp, #104]	; 0x68
 803f7fe:	4654      	mov	r4, sl
 803f800:	2205      	movs	r2, #5
 803f802:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f806:	4858      	ldr	r0, [pc, #352]	; (803f968 <_vfiprintf_r+0x24c>)
 803f808:	f7e0 fd6a 	bl	80202e0 <memchr>
 803f80c:	9a04      	ldr	r2, [sp, #16]
 803f80e:	b9d8      	cbnz	r0, 803f848 <_vfiprintf_r+0x12c>
 803f810:	06d1      	lsls	r1, r2, #27
 803f812:	bf44      	itt	mi
 803f814:	2320      	movmi	r3, #32
 803f816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803f81a:	0713      	lsls	r3, r2, #28
 803f81c:	bf44      	itt	mi
 803f81e:	232b      	movmi	r3, #43	; 0x2b
 803f820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803f824:	f89a 3000 	ldrb.w	r3, [sl]
 803f828:	2b2a      	cmp	r3, #42	; 0x2a
 803f82a:	d015      	beq.n	803f858 <_vfiprintf_r+0x13c>
 803f82c:	9a07      	ldr	r2, [sp, #28]
 803f82e:	4654      	mov	r4, sl
 803f830:	2000      	movs	r0, #0
 803f832:	f04f 0c0a 	mov.w	ip, #10
 803f836:	4621      	mov	r1, r4
 803f838:	f811 3b01 	ldrb.w	r3, [r1], #1
 803f83c:	3b30      	subs	r3, #48	; 0x30
 803f83e:	2b09      	cmp	r3, #9
 803f840:	d94e      	bls.n	803f8e0 <_vfiprintf_r+0x1c4>
 803f842:	b1b0      	cbz	r0, 803f872 <_vfiprintf_r+0x156>
 803f844:	9207      	str	r2, [sp, #28]
 803f846:	e014      	b.n	803f872 <_vfiprintf_r+0x156>
 803f848:	eba0 0308 	sub.w	r3, r0, r8
 803f84c:	fa09 f303 	lsl.w	r3, r9, r3
 803f850:	4313      	orrs	r3, r2
 803f852:	9304      	str	r3, [sp, #16]
 803f854:	46a2      	mov	sl, r4
 803f856:	e7d2      	b.n	803f7fe <_vfiprintf_r+0xe2>
 803f858:	9b03      	ldr	r3, [sp, #12]
 803f85a:	1d19      	adds	r1, r3, #4
 803f85c:	681b      	ldr	r3, [r3, #0]
 803f85e:	9103      	str	r1, [sp, #12]
 803f860:	2b00      	cmp	r3, #0
 803f862:	bfbb      	ittet	lt
 803f864:	425b      	neglt	r3, r3
 803f866:	f042 0202 	orrlt.w	r2, r2, #2
 803f86a:	9307      	strge	r3, [sp, #28]
 803f86c:	9307      	strlt	r3, [sp, #28]
 803f86e:	bfb8      	it	lt
 803f870:	9204      	strlt	r2, [sp, #16]
 803f872:	7823      	ldrb	r3, [r4, #0]
 803f874:	2b2e      	cmp	r3, #46	; 0x2e
 803f876:	d10c      	bne.n	803f892 <_vfiprintf_r+0x176>
 803f878:	7863      	ldrb	r3, [r4, #1]
 803f87a:	2b2a      	cmp	r3, #42	; 0x2a
 803f87c:	d135      	bne.n	803f8ea <_vfiprintf_r+0x1ce>
 803f87e:	9b03      	ldr	r3, [sp, #12]
 803f880:	1d1a      	adds	r2, r3, #4
 803f882:	681b      	ldr	r3, [r3, #0]
 803f884:	9203      	str	r2, [sp, #12]
 803f886:	2b00      	cmp	r3, #0
 803f888:	bfb8      	it	lt
 803f88a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803f88e:	3402      	adds	r4, #2
 803f890:	9305      	str	r3, [sp, #20]
 803f892:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803f978 <_vfiprintf_r+0x25c>
 803f896:	7821      	ldrb	r1, [r4, #0]
 803f898:	2203      	movs	r2, #3
 803f89a:	4650      	mov	r0, sl
 803f89c:	f7e0 fd20 	bl	80202e0 <memchr>
 803f8a0:	b140      	cbz	r0, 803f8b4 <_vfiprintf_r+0x198>
 803f8a2:	2340      	movs	r3, #64	; 0x40
 803f8a4:	eba0 000a 	sub.w	r0, r0, sl
 803f8a8:	fa03 f000 	lsl.w	r0, r3, r0
 803f8ac:	9b04      	ldr	r3, [sp, #16]
 803f8ae:	4303      	orrs	r3, r0
 803f8b0:	3401      	adds	r4, #1
 803f8b2:	9304      	str	r3, [sp, #16]
 803f8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f8b8:	482c      	ldr	r0, [pc, #176]	; (803f96c <_vfiprintf_r+0x250>)
 803f8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803f8be:	2206      	movs	r2, #6
 803f8c0:	f7e0 fd0e 	bl	80202e0 <memchr>
 803f8c4:	2800      	cmp	r0, #0
 803f8c6:	d03f      	beq.n	803f948 <_vfiprintf_r+0x22c>
 803f8c8:	4b29      	ldr	r3, [pc, #164]	; (803f970 <_vfiprintf_r+0x254>)
 803f8ca:	bb1b      	cbnz	r3, 803f914 <_vfiprintf_r+0x1f8>
 803f8cc:	9b03      	ldr	r3, [sp, #12]
 803f8ce:	3307      	adds	r3, #7
 803f8d0:	f023 0307 	bic.w	r3, r3, #7
 803f8d4:	3308      	adds	r3, #8
 803f8d6:	9303      	str	r3, [sp, #12]
 803f8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803f8da:	443b      	add	r3, r7
 803f8dc:	9309      	str	r3, [sp, #36]	; 0x24
 803f8de:	e767      	b.n	803f7b0 <_vfiprintf_r+0x94>
 803f8e0:	fb0c 3202 	mla	r2, ip, r2, r3
 803f8e4:	460c      	mov	r4, r1
 803f8e6:	2001      	movs	r0, #1
 803f8e8:	e7a5      	b.n	803f836 <_vfiprintf_r+0x11a>
 803f8ea:	2300      	movs	r3, #0
 803f8ec:	3401      	adds	r4, #1
 803f8ee:	9305      	str	r3, [sp, #20]
 803f8f0:	4619      	mov	r1, r3
 803f8f2:	f04f 0c0a 	mov.w	ip, #10
 803f8f6:	4620      	mov	r0, r4
 803f8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 803f8fc:	3a30      	subs	r2, #48	; 0x30
 803f8fe:	2a09      	cmp	r2, #9
 803f900:	d903      	bls.n	803f90a <_vfiprintf_r+0x1ee>
 803f902:	2b00      	cmp	r3, #0
 803f904:	d0c5      	beq.n	803f892 <_vfiprintf_r+0x176>
 803f906:	9105      	str	r1, [sp, #20]
 803f908:	e7c3      	b.n	803f892 <_vfiprintf_r+0x176>
 803f90a:	fb0c 2101 	mla	r1, ip, r1, r2
 803f90e:	4604      	mov	r4, r0
 803f910:	2301      	movs	r3, #1
 803f912:	e7f0      	b.n	803f8f6 <_vfiprintf_r+0x1da>
 803f914:	ab03      	add	r3, sp, #12
 803f916:	9300      	str	r3, [sp, #0]
 803f918:	462a      	mov	r2, r5
 803f91a:	4b16      	ldr	r3, [pc, #88]	; (803f974 <_vfiprintf_r+0x258>)
 803f91c:	a904      	add	r1, sp, #16
 803f91e:	4630      	mov	r0, r6
 803f920:	f3af 8000 	nop.w
 803f924:	4607      	mov	r7, r0
 803f926:	1c78      	adds	r0, r7, #1
 803f928:	d1d6      	bne.n	803f8d8 <_vfiprintf_r+0x1bc>
 803f92a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803f92c:	07d9      	lsls	r1, r3, #31
 803f92e:	d405      	bmi.n	803f93c <_vfiprintf_r+0x220>
 803f930:	89ab      	ldrh	r3, [r5, #12]
 803f932:	059a      	lsls	r2, r3, #22
 803f934:	d402      	bmi.n	803f93c <_vfiprintf_r+0x220>
 803f936:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803f938:	f000 fc81 	bl	804023e <__retarget_lock_release_recursive>
 803f93c:	89ab      	ldrh	r3, [r5, #12]
 803f93e:	065b      	lsls	r3, r3, #25
 803f940:	f53f af12 	bmi.w	803f768 <_vfiprintf_r+0x4c>
 803f944:	9809      	ldr	r0, [sp, #36]	; 0x24
 803f946:	e711      	b.n	803f76c <_vfiprintf_r+0x50>
 803f948:	ab03      	add	r3, sp, #12
 803f94a:	9300      	str	r3, [sp, #0]
 803f94c:	462a      	mov	r2, r5
 803f94e:	4b09      	ldr	r3, [pc, #36]	; (803f974 <_vfiprintf_r+0x258>)
 803f950:	a904      	add	r1, sp, #16
 803f952:	4630      	mov	r0, r6
 803f954:	f000 f880 	bl	803fa58 <_printf_i>
 803f958:	e7e4      	b.n	803f924 <_vfiprintf_r+0x208>
 803f95a:	bf00      	nop
 803f95c:	0805b8f0 	.word	0x0805b8f0
 803f960:	0805b910 	.word	0x0805b910
 803f964:	0805b8d0 	.word	0x0805b8d0
 803f968:	0805b89c 	.word	0x0805b89c
 803f96c:	0805b8a6 	.word	0x0805b8a6
 803f970:	00000000 	.word	0x00000000
 803f974:	0803f6f7 	.word	0x0803f6f7
 803f978:	0805b8a2 	.word	0x0805b8a2

0803f97c <_printf_common>:
 803f97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803f980:	4616      	mov	r6, r2
 803f982:	4699      	mov	r9, r3
 803f984:	688a      	ldr	r2, [r1, #8]
 803f986:	690b      	ldr	r3, [r1, #16]
 803f988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803f98c:	4293      	cmp	r3, r2
 803f98e:	bfb8      	it	lt
 803f990:	4613      	movlt	r3, r2
 803f992:	6033      	str	r3, [r6, #0]
 803f994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803f998:	4607      	mov	r7, r0
 803f99a:	460c      	mov	r4, r1
 803f99c:	b10a      	cbz	r2, 803f9a2 <_printf_common+0x26>
 803f99e:	3301      	adds	r3, #1
 803f9a0:	6033      	str	r3, [r6, #0]
 803f9a2:	6823      	ldr	r3, [r4, #0]
 803f9a4:	0699      	lsls	r1, r3, #26
 803f9a6:	bf42      	ittt	mi
 803f9a8:	6833      	ldrmi	r3, [r6, #0]
 803f9aa:	3302      	addmi	r3, #2
 803f9ac:	6033      	strmi	r3, [r6, #0]
 803f9ae:	6825      	ldr	r5, [r4, #0]
 803f9b0:	f015 0506 	ands.w	r5, r5, #6
 803f9b4:	d106      	bne.n	803f9c4 <_printf_common+0x48>
 803f9b6:	f104 0a19 	add.w	sl, r4, #25
 803f9ba:	68e3      	ldr	r3, [r4, #12]
 803f9bc:	6832      	ldr	r2, [r6, #0]
 803f9be:	1a9b      	subs	r3, r3, r2
 803f9c0:	42ab      	cmp	r3, r5
 803f9c2:	dc26      	bgt.n	803fa12 <_printf_common+0x96>
 803f9c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803f9c8:	1e13      	subs	r3, r2, #0
 803f9ca:	6822      	ldr	r2, [r4, #0]
 803f9cc:	bf18      	it	ne
 803f9ce:	2301      	movne	r3, #1
 803f9d0:	0692      	lsls	r2, r2, #26
 803f9d2:	d42b      	bmi.n	803fa2c <_printf_common+0xb0>
 803f9d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803f9d8:	4649      	mov	r1, r9
 803f9da:	4638      	mov	r0, r7
 803f9dc:	47c0      	blx	r8
 803f9de:	3001      	adds	r0, #1
 803f9e0:	d01e      	beq.n	803fa20 <_printf_common+0xa4>
 803f9e2:	6823      	ldr	r3, [r4, #0]
 803f9e4:	68e5      	ldr	r5, [r4, #12]
 803f9e6:	6832      	ldr	r2, [r6, #0]
 803f9e8:	f003 0306 	and.w	r3, r3, #6
 803f9ec:	2b04      	cmp	r3, #4
 803f9ee:	bf08      	it	eq
 803f9f0:	1aad      	subeq	r5, r5, r2
 803f9f2:	68a3      	ldr	r3, [r4, #8]
 803f9f4:	6922      	ldr	r2, [r4, #16]
 803f9f6:	bf0c      	ite	eq
 803f9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803f9fc:	2500      	movne	r5, #0
 803f9fe:	4293      	cmp	r3, r2
 803fa00:	bfc4      	itt	gt
 803fa02:	1a9b      	subgt	r3, r3, r2
 803fa04:	18ed      	addgt	r5, r5, r3
 803fa06:	2600      	movs	r6, #0
 803fa08:	341a      	adds	r4, #26
 803fa0a:	42b5      	cmp	r5, r6
 803fa0c:	d11a      	bne.n	803fa44 <_printf_common+0xc8>
 803fa0e:	2000      	movs	r0, #0
 803fa10:	e008      	b.n	803fa24 <_printf_common+0xa8>
 803fa12:	2301      	movs	r3, #1
 803fa14:	4652      	mov	r2, sl
 803fa16:	4649      	mov	r1, r9
 803fa18:	4638      	mov	r0, r7
 803fa1a:	47c0      	blx	r8
 803fa1c:	3001      	adds	r0, #1
 803fa1e:	d103      	bne.n	803fa28 <_printf_common+0xac>
 803fa20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803fa24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803fa28:	3501      	adds	r5, #1
 803fa2a:	e7c6      	b.n	803f9ba <_printf_common+0x3e>
 803fa2c:	18e1      	adds	r1, r4, r3
 803fa2e:	1c5a      	adds	r2, r3, #1
 803fa30:	2030      	movs	r0, #48	; 0x30
 803fa32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803fa36:	4422      	add	r2, r4
 803fa38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803fa3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803fa40:	3302      	adds	r3, #2
 803fa42:	e7c7      	b.n	803f9d4 <_printf_common+0x58>
 803fa44:	2301      	movs	r3, #1
 803fa46:	4622      	mov	r2, r4
 803fa48:	4649      	mov	r1, r9
 803fa4a:	4638      	mov	r0, r7
 803fa4c:	47c0      	blx	r8
 803fa4e:	3001      	adds	r0, #1
 803fa50:	d0e6      	beq.n	803fa20 <_printf_common+0xa4>
 803fa52:	3601      	adds	r6, #1
 803fa54:	e7d9      	b.n	803fa0a <_printf_common+0x8e>
	...

0803fa58 <_printf_i>:
 803fa58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803fa5c:	7e0f      	ldrb	r7, [r1, #24]
 803fa5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803fa60:	2f78      	cmp	r7, #120	; 0x78
 803fa62:	4691      	mov	r9, r2
 803fa64:	4680      	mov	r8, r0
 803fa66:	460c      	mov	r4, r1
 803fa68:	469a      	mov	sl, r3
 803fa6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803fa6e:	d807      	bhi.n	803fa80 <_printf_i+0x28>
 803fa70:	2f62      	cmp	r7, #98	; 0x62
 803fa72:	d80a      	bhi.n	803fa8a <_printf_i+0x32>
 803fa74:	2f00      	cmp	r7, #0
 803fa76:	f000 80d8 	beq.w	803fc2a <_printf_i+0x1d2>
 803fa7a:	2f58      	cmp	r7, #88	; 0x58
 803fa7c:	f000 80a3 	beq.w	803fbc6 <_printf_i+0x16e>
 803fa80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803fa84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803fa88:	e03a      	b.n	803fb00 <_printf_i+0xa8>
 803fa8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803fa8e:	2b15      	cmp	r3, #21
 803fa90:	d8f6      	bhi.n	803fa80 <_printf_i+0x28>
 803fa92:	a101      	add	r1, pc, #4	; (adr r1, 803fa98 <_printf_i+0x40>)
 803fa94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803fa98:	0803faf1 	.word	0x0803faf1
 803fa9c:	0803fb05 	.word	0x0803fb05
 803faa0:	0803fa81 	.word	0x0803fa81
 803faa4:	0803fa81 	.word	0x0803fa81
 803faa8:	0803fa81 	.word	0x0803fa81
 803faac:	0803fa81 	.word	0x0803fa81
 803fab0:	0803fb05 	.word	0x0803fb05
 803fab4:	0803fa81 	.word	0x0803fa81
 803fab8:	0803fa81 	.word	0x0803fa81
 803fabc:	0803fa81 	.word	0x0803fa81
 803fac0:	0803fa81 	.word	0x0803fa81
 803fac4:	0803fc11 	.word	0x0803fc11
 803fac8:	0803fb35 	.word	0x0803fb35
 803facc:	0803fbf3 	.word	0x0803fbf3
 803fad0:	0803fa81 	.word	0x0803fa81
 803fad4:	0803fa81 	.word	0x0803fa81
 803fad8:	0803fc33 	.word	0x0803fc33
 803fadc:	0803fa81 	.word	0x0803fa81
 803fae0:	0803fb35 	.word	0x0803fb35
 803fae4:	0803fa81 	.word	0x0803fa81
 803fae8:	0803fa81 	.word	0x0803fa81
 803faec:	0803fbfb 	.word	0x0803fbfb
 803faf0:	682b      	ldr	r3, [r5, #0]
 803faf2:	1d1a      	adds	r2, r3, #4
 803faf4:	681b      	ldr	r3, [r3, #0]
 803faf6:	602a      	str	r2, [r5, #0]
 803faf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803fafc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803fb00:	2301      	movs	r3, #1
 803fb02:	e0a3      	b.n	803fc4c <_printf_i+0x1f4>
 803fb04:	6820      	ldr	r0, [r4, #0]
 803fb06:	6829      	ldr	r1, [r5, #0]
 803fb08:	0606      	lsls	r6, r0, #24
 803fb0a:	f101 0304 	add.w	r3, r1, #4
 803fb0e:	d50a      	bpl.n	803fb26 <_printf_i+0xce>
 803fb10:	680e      	ldr	r6, [r1, #0]
 803fb12:	602b      	str	r3, [r5, #0]
 803fb14:	2e00      	cmp	r6, #0
 803fb16:	da03      	bge.n	803fb20 <_printf_i+0xc8>
 803fb18:	232d      	movs	r3, #45	; 0x2d
 803fb1a:	4276      	negs	r6, r6
 803fb1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803fb20:	485e      	ldr	r0, [pc, #376]	; (803fc9c <_printf_i+0x244>)
 803fb22:	230a      	movs	r3, #10
 803fb24:	e019      	b.n	803fb5a <_printf_i+0x102>
 803fb26:	680e      	ldr	r6, [r1, #0]
 803fb28:	602b      	str	r3, [r5, #0]
 803fb2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 803fb2e:	bf18      	it	ne
 803fb30:	b236      	sxthne	r6, r6
 803fb32:	e7ef      	b.n	803fb14 <_printf_i+0xbc>
 803fb34:	682b      	ldr	r3, [r5, #0]
 803fb36:	6820      	ldr	r0, [r4, #0]
 803fb38:	1d19      	adds	r1, r3, #4
 803fb3a:	6029      	str	r1, [r5, #0]
 803fb3c:	0601      	lsls	r1, r0, #24
 803fb3e:	d501      	bpl.n	803fb44 <_printf_i+0xec>
 803fb40:	681e      	ldr	r6, [r3, #0]
 803fb42:	e002      	b.n	803fb4a <_printf_i+0xf2>
 803fb44:	0646      	lsls	r6, r0, #25
 803fb46:	d5fb      	bpl.n	803fb40 <_printf_i+0xe8>
 803fb48:	881e      	ldrh	r6, [r3, #0]
 803fb4a:	4854      	ldr	r0, [pc, #336]	; (803fc9c <_printf_i+0x244>)
 803fb4c:	2f6f      	cmp	r7, #111	; 0x6f
 803fb4e:	bf0c      	ite	eq
 803fb50:	2308      	moveq	r3, #8
 803fb52:	230a      	movne	r3, #10
 803fb54:	2100      	movs	r1, #0
 803fb56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803fb5a:	6865      	ldr	r5, [r4, #4]
 803fb5c:	60a5      	str	r5, [r4, #8]
 803fb5e:	2d00      	cmp	r5, #0
 803fb60:	bfa2      	ittt	ge
 803fb62:	6821      	ldrge	r1, [r4, #0]
 803fb64:	f021 0104 	bicge.w	r1, r1, #4
 803fb68:	6021      	strge	r1, [r4, #0]
 803fb6a:	b90e      	cbnz	r6, 803fb70 <_printf_i+0x118>
 803fb6c:	2d00      	cmp	r5, #0
 803fb6e:	d04d      	beq.n	803fc0c <_printf_i+0x1b4>
 803fb70:	4615      	mov	r5, r2
 803fb72:	fbb6 f1f3 	udiv	r1, r6, r3
 803fb76:	fb03 6711 	mls	r7, r3, r1, r6
 803fb7a:	5dc7      	ldrb	r7, [r0, r7]
 803fb7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803fb80:	4637      	mov	r7, r6
 803fb82:	42bb      	cmp	r3, r7
 803fb84:	460e      	mov	r6, r1
 803fb86:	d9f4      	bls.n	803fb72 <_printf_i+0x11a>
 803fb88:	2b08      	cmp	r3, #8
 803fb8a:	d10b      	bne.n	803fba4 <_printf_i+0x14c>
 803fb8c:	6823      	ldr	r3, [r4, #0]
 803fb8e:	07de      	lsls	r6, r3, #31
 803fb90:	d508      	bpl.n	803fba4 <_printf_i+0x14c>
 803fb92:	6923      	ldr	r3, [r4, #16]
 803fb94:	6861      	ldr	r1, [r4, #4]
 803fb96:	4299      	cmp	r1, r3
 803fb98:	bfde      	ittt	le
 803fb9a:	2330      	movle	r3, #48	; 0x30
 803fb9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 803fba0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803fba4:	1b52      	subs	r2, r2, r5
 803fba6:	6122      	str	r2, [r4, #16]
 803fba8:	f8cd a000 	str.w	sl, [sp]
 803fbac:	464b      	mov	r3, r9
 803fbae:	aa03      	add	r2, sp, #12
 803fbb0:	4621      	mov	r1, r4
 803fbb2:	4640      	mov	r0, r8
 803fbb4:	f7ff fee2 	bl	803f97c <_printf_common>
 803fbb8:	3001      	adds	r0, #1
 803fbba:	d14c      	bne.n	803fc56 <_printf_i+0x1fe>
 803fbbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803fbc0:	b004      	add	sp, #16
 803fbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803fbc6:	4835      	ldr	r0, [pc, #212]	; (803fc9c <_printf_i+0x244>)
 803fbc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803fbcc:	6829      	ldr	r1, [r5, #0]
 803fbce:	6823      	ldr	r3, [r4, #0]
 803fbd0:	f851 6b04 	ldr.w	r6, [r1], #4
 803fbd4:	6029      	str	r1, [r5, #0]
 803fbd6:	061d      	lsls	r5, r3, #24
 803fbd8:	d514      	bpl.n	803fc04 <_printf_i+0x1ac>
 803fbda:	07df      	lsls	r7, r3, #31
 803fbdc:	bf44      	itt	mi
 803fbde:	f043 0320 	orrmi.w	r3, r3, #32
 803fbe2:	6023      	strmi	r3, [r4, #0]
 803fbe4:	b91e      	cbnz	r6, 803fbee <_printf_i+0x196>
 803fbe6:	6823      	ldr	r3, [r4, #0]
 803fbe8:	f023 0320 	bic.w	r3, r3, #32
 803fbec:	6023      	str	r3, [r4, #0]
 803fbee:	2310      	movs	r3, #16
 803fbf0:	e7b0      	b.n	803fb54 <_printf_i+0xfc>
 803fbf2:	6823      	ldr	r3, [r4, #0]
 803fbf4:	f043 0320 	orr.w	r3, r3, #32
 803fbf8:	6023      	str	r3, [r4, #0]
 803fbfa:	2378      	movs	r3, #120	; 0x78
 803fbfc:	4828      	ldr	r0, [pc, #160]	; (803fca0 <_printf_i+0x248>)
 803fbfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803fc02:	e7e3      	b.n	803fbcc <_printf_i+0x174>
 803fc04:	0659      	lsls	r1, r3, #25
 803fc06:	bf48      	it	mi
 803fc08:	b2b6      	uxthmi	r6, r6
 803fc0a:	e7e6      	b.n	803fbda <_printf_i+0x182>
 803fc0c:	4615      	mov	r5, r2
 803fc0e:	e7bb      	b.n	803fb88 <_printf_i+0x130>
 803fc10:	682b      	ldr	r3, [r5, #0]
 803fc12:	6826      	ldr	r6, [r4, #0]
 803fc14:	6961      	ldr	r1, [r4, #20]
 803fc16:	1d18      	adds	r0, r3, #4
 803fc18:	6028      	str	r0, [r5, #0]
 803fc1a:	0635      	lsls	r5, r6, #24
 803fc1c:	681b      	ldr	r3, [r3, #0]
 803fc1e:	d501      	bpl.n	803fc24 <_printf_i+0x1cc>
 803fc20:	6019      	str	r1, [r3, #0]
 803fc22:	e002      	b.n	803fc2a <_printf_i+0x1d2>
 803fc24:	0670      	lsls	r0, r6, #25
 803fc26:	d5fb      	bpl.n	803fc20 <_printf_i+0x1c8>
 803fc28:	8019      	strh	r1, [r3, #0]
 803fc2a:	2300      	movs	r3, #0
 803fc2c:	6123      	str	r3, [r4, #16]
 803fc2e:	4615      	mov	r5, r2
 803fc30:	e7ba      	b.n	803fba8 <_printf_i+0x150>
 803fc32:	682b      	ldr	r3, [r5, #0]
 803fc34:	1d1a      	adds	r2, r3, #4
 803fc36:	602a      	str	r2, [r5, #0]
 803fc38:	681d      	ldr	r5, [r3, #0]
 803fc3a:	6862      	ldr	r2, [r4, #4]
 803fc3c:	2100      	movs	r1, #0
 803fc3e:	4628      	mov	r0, r5
 803fc40:	f7e0 fb4e 	bl	80202e0 <memchr>
 803fc44:	b108      	cbz	r0, 803fc4a <_printf_i+0x1f2>
 803fc46:	1b40      	subs	r0, r0, r5
 803fc48:	6060      	str	r0, [r4, #4]
 803fc4a:	6863      	ldr	r3, [r4, #4]
 803fc4c:	6123      	str	r3, [r4, #16]
 803fc4e:	2300      	movs	r3, #0
 803fc50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803fc54:	e7a8      	b.n	803fba8 <_printf_i+0x150>
 803fc56:	6923      	ldr	r3, [r4, #16]
 803fc58:	462a      	mov	r2, r5
 803fc5a:	4649      	mov	r1, r9
 803fc5c:	4640      	mov	r0, r8
 803fc5e:	47d0      	blx	sl
 803fc60:	3001      	adds	r0, #1
 803fc62:	d0ab      	beq.n	803fbbc <_printf_i+0x164>
 803fc64:	6823      	ldr	r3, [r4, #0]
 803fc66:	079b      	lsls	r3, r3, #30
 803fc68:	d413      	bmi.n	803fc92 <_printf_i+0x23a>
 803fc6a:	68e0      	ldr	r0, [r4, #12]
 803fc6c:	9b03      	ldr	r3, [sp, #12]
 803fc6e:	4298      	cmp	r0, r3
 803fc70:	bfb8      	it	lt
 803fc72:	4618      	movlt	r0, r3
 803fc74:	e7a4      	b.n	803fbc0 <_printf_i+0x168>
 803fc76:	2301      	movs	r3, #1
 803fc78:	4632      	mov	r2, r6
 803fc7a:	4649      	mov	r1, r9
 803fc7c:	4640      	mov	r0, r8
 803fc7e:	47d0      	blx	sl
 803fc80:	3001      	adds	r0, #1
 803fc82:	d09b      	beq.n	803fbbc <_printf_i+0x164>
 803fc84:	3501      	adds	r5, #1
 803fc86:	68e3      	ldr	r3, [r4, #12]
 803fc88:	9903      	ldr	r1, [sp, #12]
 803fc8a:	1a5b      	subs	r3, r3, r1
 803fc8c:	42ab      	cmp	r3, r5
 803fc8e:	dcf2      	bgt.n	803fc76 <_printf_i+0x21e>
 803fc90:	e7eb      	b.n	803fc6a <_printf_i+0x212>
 803fc92:	2500      	movs	r5, #0
 803fc94:	f104 0619 	add.w	r6, r4, #25
 803fc98:	e7f5      	b.n	803fc86 <_printf_i+0x22e>
 803fc9a:	bf00      	nop
 803fc9c:	0805b8ad 	.word	0x0805b8ad
 803fca0:	0805b8be 	.word	0x0805b8be

0803fca4 <_sbrk_r>:
 803fca4:	b538      	push	{r3, r4, r5, lr}
 803fca6:	4d06      	ldr	r5, [pc, #24]	; (803fcc0 <_sbrk_r+0x1c>)
 803fca8:	2300      	movs	r3, #0
 803fcaa:	4604      	mov	r4, r0
 803fcac:	4608      	mov	r0, r1
 803fcae:	602b      	str	r3, [r5, #0]
 803fcb0:	f7ed fd16 	bl	802d6e0 <_sbrk>
 803fcb4:	1c43      	adds	r3, r0, #1
 803fcb6:	d102      	bne.n	803fcbe <_sbrk_r+0x1a>
 803fcb8:	682b      	ldr	r3, [r5, #0]
 803fcba:	b103      	cbz	r3, 803fcbe <_sbrk_r+0x1a>
 803fcbc:	6023      	str	r3, [r4, #0]
 803fcbe:	bd38      	pop	{r3, r4, r5, pc}
 803fcc0:	240037ec 	.word	0x240037ec

0803fcc4 <_raise_r>:
 803fcc4:	291f      	cmp	r1, #31
 803fcc6:	b538      	push	{r3, r4, r5, lr}
 803fcc8:	4604      	mov	r4, r0
 803fcca:	460d      	mov	r5, r1
 803fccc:	d904      	bls.n	803fcd8 <_raise_r+0x14>
 803fcce:	2316      	movs	r3, #22
 803fcd0:	6003      	str	r3, [r0, #0]
 803fcd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803fcd6:	bd38      	pop	{r3, r4, r5, pc}
 803fcd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803fcda:	b112      	cbz	r2, 803fce2 <_raise_r+0x1e>
 803fcdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803fce0:	b94b      	cbnz	r3, 803fcf6 <_raise_r+0x32>
 803fce2:	4620      	mov	r0, r4
 803fce4:	f000 f830 	bl	803fd48 <_getpid_r>
 803fce8:	462a      	mov	r2, r5
 803fcea:	4601      	mov	r1, r0
 803fcec:	4620      	mov	r0, r4
 803fcee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803fcf2:	f000 b817 	b.w	803fd24 <_kill_r>
 803fcf6:	2b01      	cmp	r3, #1
 803fcf8:	d00a      	beq.n	803fd10 <_raise_r+0x4c>
 803fcfa:	1c59      	adds	r1, r3, #1
 803fcfc:	d103      	bne.n	803fd06 <_raise_r+0x42>
 803fcfe:	2316      	movs	r3, #22
 803fd00:	6003      	str	r3, [r0, #0]
 803fd02:	2001      	movs	r0, #1
 803fd04:	e7e7      	b.n	803fcd6 <_raise_r+0x12>
 803fd06:	2400      	movs	r4, #0
 803fd08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803fd0c:	4628      	mov	r0, r5
 803fd0e:	4798      	blx	r3
 803fd10:	2000      	movs	r0, #0
 803fd12:	e7e0      	b.n	803fcd6 <_raise_r+0x12>

0803fd14 <raise>:
 803fd14:	4b02      	ldr	r3, [pc, #8]	; (803fd20 <raise+0xc>)
 803fd16:	4601      	mov	r1, r0
 803fd18:	6818      	ldr	r0, [r3, #0]
 803fd1a:	f7ff bfd3 	b.w	803fcc4 <_raise_r>
 803fd1e:	bf00      	nop
 803fd20:	24000104 	.word	0x24000104

0803fd24 <_kill_r>:
 803fd24:	b538      	push	{r3, r4, r5, lr}
 803fd26:	4d07      	ldr	r5, [pc, #28]	; (803fd44 <_kill_r+0x20>)
 803fd28:	2300      	movs	r3, #0
 803fd2a:	4604      	mov	r4, r0
 803fd2c:	4608      	mov	r0, r1
 803fd2e:	4611      	mov	r1, r2
 803fd30:	602b      	str	r3, [r5, #0]
 803fd32:	f7ed fc4d 	bl	802d5d0 <_kill>
 803fd36:	1c43      	adds	r3, r0, #1
 803fd38:	d102      	bne.n	803fd40 <_kill_r+0x1c>
 803fd3a:	682b      	ldr	r3, [r5, #0]
 803fd3c:	b103      	cbz	r3, 803fd40 <_kill_r+0x1c>
 803fd3e:	6023      	str	r3, [r4, #0]
 803fd40:	bd38      	pop	{r3, r4, r5, pc}
 803fd42:	bf00      	nop
 803fd44:	240037ec 	.word	0x240037ec

0803fd48 <_getpid_r>:
 803fd48:	f7ed bc3a 	b.w	802d5c0 <_getpid>

0803fd4c <__swbuf_r>:
 803fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803fd4e:	460e      	mov	r6, r1
 803fd50:	4614      	mov	r4, r2
 803fd52:	4605      	mov	r5, r0
 803fd54:	b118      	cbz	r0, 803fd5e <__swbuf_r+0x12>
 803fd56:	6983      	ldr	r3, [r0, #24]
 803fd58:	b90b      	cbnz	r3, 803fd5e <__swbuf_r+0x12>
 803fd5a:	f000 f9d1 	bl	8040100 <__sinit>
 803fd5e:	4b21      	ldr	r3, [pc, #132]	; (803fde4 <__swbuf_r+0x98>)
 803fd60:	429c      	cmp	r4, r3
 803fd62:	d12b      	bne.n	803fdbc <__swbuf_r+0x70>
 803fd64:	686c      	ldr	r4, [r5, #4]
 803fd66:	69a3      	ldr	r3, [r4, #24]
 803fd68:	60a3      	str	r3, [r4, #8]
 803fd6a:	89a3      	ldrh	r3, [r4, #12]
 803fd6c:	071a      	lsls	r2, r3, #28
 803fd6e:	d52f      	bpl.n	803fdd0 <__swbuf_r+0x84>
 803fd70:	6923      	ldr	r3, [r4, #16]
 803fd72:	b36b      	cbz	r3, 803fdd0 <__swbuf_r+0x84>
 803fd74:	6923      	ldr	r3, [r4, #16]
 803fd76:	6820      	ldr	r0, [r4, #0]
 803fd78:	1ac0      	subs	r0, r0, r3
 803fd7a:	6963      	ldr	r3, [r4, #20]
 803fd7c:	b2f6      	uxtb	r6, r6
 803fd7e:	4283      	cmp	r3, r0
 803fd80:	4637      	mov	r7, r6
 803fd82:	dc04      	bgt.n	803fd8e <__swbuf_r+0x42>
 803fd84:	4621      	mov	r1, r4
 803fd86:	4628      	mov	r0, r5
 803fd88:	f000 f926 	bl	803ffd8 <_fflush_r>
 803fd8c:	bb30      	cbnz	r0, 803fddc <__swbuf_r+0x90>
 803fd8e:	68a3      	ldr	r3, [r4, #8]
 803fd90:	3b01      	subs	r3, #1
 803fd92:	60a3      	str	r3, [r4, #8]
 803fd94:	6823      	ldr	r3, [r4, #0]
 803fd96:	1c5a      	adds	r2, r3, #1
 803fd98:	6022      	str	r2, [r4, #0]
 803fd9a:	701e      	strb	r6, [r3, #0]
 803fd9c:	6963      	ldr	r3, [r4, #20]
 803fd9e:	3001      	adds	r0, #1
 803fda0:	4283      	cmp	r3, r0
 803fda2:	d004      	beq.n	803fdae <__swbuf_r+0x62>
 803fda4:	89a3      	ldrh	r3, [r4, #12]
 803fda6:	07db      	lsls	r3, r3, #31
 803fda8:	d506      	bpl.n	803fdb8 <__swbuf_r+0x6c>
 803fdaa:	2e0a      	cmp	r6, #10
 803fdac:	d104      	bne.n	803fdb8 <__swbuf_r+0x6c>
 803fdae:	4621      	mov	r1, r4
 803fdb0:	4628      	mov	r0, r5
 803fdb2:	f000 f911 	bl	803ffd8 <_fflush_r>
 803fdb6:	b988      	cbnz	r0, 803fddc <__swbuf_r+0x90>
 803fdb8:	4638      	mov	r0, r7
 803fdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803fdbc:	4b0a      	ldr	r3, [pc, #40]	; (803fde8 <__swbuf_r+0x9c>)
 803fdbe:	429c      	cmp	r4, r3
 803fdc0:	d101      	bne.n	803fdc6 <__swbuf_r+0x7a>
 803fdc2:	68ac      	ldr	r4, [r5, #8]
 803fdc4:	e7cf      	b.n	803fd66 <__swbuf_r+0x1a>
 803fdc6:	4b09      	ldr	r3, [pc, #36]	; (803fdec <__swbuf_r+0xa0>)
 803fdc8:	429c      	cmp	r4, r3
 803fdca:	bf08      	it	eq
 803fdcc:	68ec      	ldreq	r4, [r5, #12]
 803fdce:	e7ca      	b.n	803fd66 <__swbuf_r+0x1a>
 803fdd0:	4621      	mov	r1, r4
 803fdd2:	4628      	mov	r0, r5
 803fdd4:	f000 f80c 	bl	803fdf0 <__swsetup_r>
 803fdd8:	2800      	cmp	r0, #0
 803fdda:	d0cb      	beq.n	803fd74 <__swbuf_r+0x28>
 803fddc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803fde0:	e7ea      	b.n	803fdb8 <__swbuf_r+0x6c>
 803fde2:	bf00      	nop
 803fde4:	0805b8f0 	.word	0x0805b8f0
 803fde8:	0805b910 	.word	0x0805b910
 803fdec:	0805b8d0 	.word	0x0805b8d0

0803fdf0 <__swsetup_r>:
 803fdf0:	4b32      	ldr	r3, [pc, #200]	; (803febc <__swsetup_r+0xcc>)
 803fdf2:	b570      	push	{r4, r5, r6, lr}
 803fdf4:	681d      	ldr	r5, [r3, #0]
 803fdf6:	4606      	mov	r6, r0
 803fdf8:	460c      	mov	r4, r1
 803fdfa:	b125      	cbz	r5, 803fe06 <__swsetup_r+0x16>
 803fdfc:	69ab      	ldr	r3, [r5, #24]
 803fdfe:	b913      	cbnz	r3, 803fe06 <__swsetup_r+0x16>
 803fe00:	4628      	mov	r0, r5
 803fe02:	f000 f97d 	bl	8040100 <__sinit>
 803fe06:	4b2e      	ldr	r3, [pc, #184]	; (803fec0 <__swsetup_r+0xd0>)
 803fe08:	429c      	cmp	r4, r3
 803fe0a:	d10f      	bne.n	803fe2c <__swsetup_r+0x3c>
 803fe0c:	686c      	ldr	r4, [r5, #4]
 803fe0e:	89a3      	ldrh	r3, [r4, #12]
 803fe10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803fe14:	0719      	lsls	r1, r3, #28
 803fe16:	d42c      	bmi.n	803fe72 <__swsetup_r+0x82>
 803fe18:	06dd      	lsls	r5, r3, #27
 803fe1a:	d411      	bmi.n	803fe40 <__swsetup_r+0x50>
 803fe1c:	2309      	movs	r3, #9
 803fe1e:	6033      	str	r3, [r6, #0]
 803fe20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803fe24:	81a3      	strh	r3, [r4, #12]
 803fe26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803fe2a:	e03e      	b.n	803feaa <__swsetup_r+0xba>
 803fe2c:	4b25      	ldr	r3, [pc, #148]	; (803fec4 <__swsetup_r+0xd4>)
 803fe2e:	429c      	cmp	r4, r3
 803fe30:	d101      	bne.n	803fe36 <__swsetup_r+0x46>
 803fe32:	68ac      	ldr	r4, [r5, #8]
 803fe34:	e7eb      	b.n	803fe0e <__swsetup_r+0x1e>
 803fe36:	4b24      	ldr	r3, [pc, #144]	; (803fec8 <__swsetup_r+0xd8>)
 803fe38:	429c      	cmp	r4, r3
 803fe3a:	bf08      	it	eq
 803fe3c:	68ec      	ldreq	r4, [r5, #12]
 803fe3e:	e7e6      	b.n	803fe0e <__swsetup_r+0x1e>
 803fe40:	0758      	lsls	r0, r3, #29
 803fe42:	d512      	bpl.n	803fe6a <__swsetup_r+0x7a>
 803fe44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803fe46:	b141      	cbz	r1, 803fe5a <__swsetup_r+0x6a>
 803fe48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803fe4c:	4299      	cmp	r1, r3
 803fe4e:	d002      	beq.n	803fe56 <__swsetup_r+0x66>
 803fe50:	4630      	mov	r0, r6
 803fe52:	f7ff fb59 	bl	803f508 <_free_r>
 803fe56:	2300      	movs	r3, #0
 803fe58:	6363      	str	r3, [r4, #52]	; 0x34
 803fe5a:	89a3      	ldrh	r3, [r4, #12]
 803fe5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803fe60:	81a3      	strh	r3, [r4, #12]
 803fe62:	2300      	movs	r3, #0
 803fe64:	6063      	str	r3, [r4, #4]
 803fe66:	6923      	ldr	r3, [r4, #16]
 803fe68:	6023      	str	r3, [r4, #0]
 803fe6a:	89a3      	ldrh	r3, [r4, #12]
 803fe6c:	f043 0308 	orr.w	r3, r3, #8
 803fe70:	81a3      	strh	r3, [r4, #12]
 803fe72:	6923      	ldr	r3, [r4, #16]
 803fe74:	b94b      	cbnz	r3, 803fe8a <__swsetup_r+0x9a>
 803fe76:	89a3      	ldrh	r3, [r4, #12]
 803fe78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803fe7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803fe80:	d003      	beq.n	803fe8a <__swsetup_r+0x9a>
 803fe82:	4621      	mov	r1, r4
 803fe84:	4630      	mov	r0, r6
 803fe86:	f000 fa01 	bl	804028c <__smakebuf_r>
 803fe8a:	89a0      	ldrh	r0, [r4, #12]
 803fe8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803fe90:	f010 0301 	ands.w	r3, r0, #1
 803fe94:	d00a      	beq.n	803feac <__swsetup_r+0xbc>
 803fe96:	2300      	movs	r3, #0
 803fe98:	60a3      	str	r3, [r4, #8]
 803fe9a:	6963      	ldr	r3, [r4, #20]
 803fe9c:	425b      	negs	r3, r3
 803fe9e:	61a3      	str	r3, [r4, #24]
 803fea0:	6923      	ldr	r3, [r4, #16]
 803fea2:	b943      	cbnz	r3, 803feb6 <__swsetup_r+0xc6>
 803fea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803fea8:	d1ba      	bne.n	803fe20 <__swsetup_r+0x30>
 803feaa:	bd70      	pop	{r4, r5, r6, pc}
 803feac:	0781      	lsls	r1, r0, #30
 803feae:	bf58      	it	pl
 803feb0:	6963      	ldrpl	r3, [r4, #20]
 803feb2:	60a3      	str	r3, [r4, #8]
 803feb4:	e7f4      	b.n	803fea0 <__swsetup_r+0xb0>
 803feb6:	2000      	movs	r0, #0
 803feb8:	e7f7      	b.n	803feaa <__swsetup_r+0xba>
 803feba:	bf00      	nop
 803febc:	24000104 	.word	0x24000104
 803fec0:	0805b8f0 	.word	0x0805b8f0
 803fec4:	0805b910 	.word	0x0805b910
 803fec8:	0805b8d0 	.word	0x0805b8d0

0803fecc <__sflush_r>:
 803fecc:	898a      	ldrh	r2, [r1, #12]
 803fece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803fed2:	4605      	mov	r5, r0
 803fed4:	0710      	lsls	r0, r2, #28
 803fed6:	460c      	mov	r4, r1
 803fed8:	d458      	bmi.n	803ff8c <__sflush_r+0xc0>
 803feda:	684b      	ldr	r3, [r1, #4]
 803fedc:	2b00      	cmp	r3, #0
 803fede:	dc05      	bgt.n	803feec <__sflush_r+0x20>
 803fee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803fee2:	2b00      	cmp	r3, #0
 803fee4:	dc02      	bgt.n	803feec <__sflush_r+0x20>
 803fee6:	2000      	movs	r0, #0
 803fee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803feec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803feee:	2e00      	cmp	r6, #0
 803fef0:	d0f9      	beq.n	803fee6 <__sflush_r+0x1a>
 803fef2:	2300      	movs	r3, #0
 803fef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803fef8:	682f      	ldr	r7, [r5, #0]
 803fefa:	602b      	str	r3, [r5, #0]
 803fefc:	d032      	beq.n	803ff64 <__sflush_r+0x98>
 803fefe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803ff00:	89a3      	ldrh	r3, [r4, #12]
 803ff02:	075a      	lsls	r2, r3, #29
 803ff04:	d505      	bpl.n	803ff12 <__sflush_r+0x46>
 803ff06:	6863      	ldr	r3, [r4, #4]
 803ff08:	1ac0      	subs	r0, r0, r3
 803ff0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803ff0c:	b10b      	cbz	r3, 803ff12 <__sflush_r+0x46>
 803ff0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803ff10:	1ac0      	subs	r0, r0, r3
 803ff12:	2300      	movs	r3, #0
 803ff14:	4602      	mov	r2, r0
 803ff16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803ff18:	6a21      	ldr	r1, [r4, #32]
 803ff1a:	4628      	mov	r0, r5
 803ff1c:	47b0      	blx	r6
 803ff1e:	1c43      	adds	r3, r0, #1
 803ff20:	89a3      	ldrh	r3, [r4, #12]
 803ff22:	d106      	bne.n	803ff32 <__sflush_r+0x66>
 803ff24:	6829      	ldr	r1, [r5, #0]
 803ff26:	291d      	cmp	r1, #29
 803ff28:	d82c      	bhi.n	803ff84 <__sflush_r+0xb8>
 803ff2a:	4a2a      	ldr	r2, [pc, #168]	; (803ffd4 <__sflush_r+0x108>)
 803ff2c:	40ca      	lsrs	r2, r1
 803ff2e:	07d6      	lsls	r6, r2, #31
 803ff30:	d528      	bpl.n	803ff84 <__sflush_r+0xb8>
 803ff32:	2200      	movs	r2, #0
 803ff34:	6062      	str	r2, [r4, #4]
 803ff36:	04d9      	lsls	r1, r3, #19
 803ff38:	6922      	ldr	r2, [r4, #16]
 803ff3a:	6022      	str	r2, [r4, #0]
 803ff3c:	d504      	bpl.n	803ff48 <__sflush_r+0x7c>
 803ff3e:	1c42      	adds	r2, r0, #1
 803ff40:	d101      	bne.n	803ff46 <__sflush_r+0x7a>
 803ff42:	682b      	ldr	r3, [r5, #0]
 803ff44:	b903      	cbnz	r3, 803ff48 <__sflush_r+0x7c>
 803ff46:	6560      	str	r0, [r4, #84]	; 0x54
 803ff48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803ff4a:	602f      	str	r7, [r5, #0]
 803ff4c:	2900      	cmp	r1, #0
 803ff4e:	d0ca      	beq.n	803fee6 <__sflush_r+0x1a>
 803ff50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803ff54:	4299      	cmp	r1, r3
 803ff56:	d002      	beq.n	803ff5e <__sflush_r+0x92>
 803ff58:	4628      	mov	r0, r5
 803ff5a:	f7ff fad5 	bl	803f508 <_free_r>
 803ff5e:	2000      	movs	r0, #0
 803ff60:	6360      	str	r0, [r4, #52]	; 0x34
 803ff62:	e7c1      	b.n	803fee8 <__sflush_r+0x1c>
 803ff64:	6a21      	ldr	r1, [r4, #32]
 803ff66:	2301      	movs	r3, #1
 803ff68:	4628      	mov	r0, r5
 803ff6a:	47b0      	blx	r6
 803ff6c:	1c41      	adds	r1, r0, #1
 803ff6e:	d1c7      	bne.n	803ff00 <__sflush_r+0x34>
 803ff70:	682b      	ldr	r3, [r5, #0]
 803ff72:	2b00      	cmp	r3, #0
 803ff74:	d0c4      	beq.n	803ff00 <__sflush_r+0x34>
 803ff76:	2b1d      	cmp	r3, #29
 803ff78:	d001      	beq.n	803ff7e <__sflush_r+0xb2>
 803ff7a:	2b16      	cmp	r3, #22
 803ff7c:	d101      	bne.n	803ff82 <__sflush_r+0xb6>
 803ff7e:	602f      	str	r7, [r5, #0]
 803ff80:	e7b1      	b.n	803fee6 <__sflush_r+0x1a>
 803ff82:	89a3      	ldrh	r3, [r4, #12]
 803ff84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803ff88:	81a3      	strh	r3, [r4, #12]
 803ff8a:	e7ad      	b.n	803fee8 <__sflush_r+0x1c>
 803ff8c:	690f      	ldr	r7, [r1, #16]
 803ff8e:	2f00      	cmp	r7, #0
 803ff90:	d0a9      	beq.n	803fee6 <__sflush_r+0x1a>
 803ff92:	0793      	lsls	r3, r2, #30
 803ff94:	680e      	ldr	r6, [r1, #0]
 803ff96:	bf08      	it	eq
 803ff98:	694b      	ldreq	r3, [r1, #20]
 803ff9a:	600f      	str	r7, [r1, #0]
 803ff9c:	bf18      	it	ne
 803ff9e:	2300      	movne	r3, #0
 803ffa0:	eba6 0807 	sub.w	r8, r6, r7
 803ffa4:	608b      	str	r3, [r1, #8]
 803ffa6:	f1b8 0f00 	cmp.w	r8, #0
 803ffaa:	dd9c      	ble.n	803fee6 <__sflush_r+0x1a>
 803ffac:	6a21      	ldr	r1, [r4, #32]
 803ffae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803ffb0:	4643      	mov	r3, r8
 803ffb2:	463a      	mov	r2, r7
 803ffb4:	4628      	mov	r0, r5
 803ffb6:	47b0      	blx	r6
 803ffb8:	2800      	cmp	r0, #0
 803ffba:	dc06      	bgt.n	803ffca <__sflush_r+0xfe>
 803ffbc:	89a3      	ldrh	r3, [r4, #12]
 803ffbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803ffc2:	81a3      	strh	r3, [r4, #12]
 803ffc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803ffc8:	e78e      	b.n	803fee8 <__sflush_r+0x1c>
 803ffca:	4407      	add	r7, r0
 803ffcc:	eba8 0800 	sub.w	r8, r8, r0
 803ffd0:	e7e9      	b.n	803ffa6 <__sflush_r+0xda>
 803ffd2:	bf00      	nop
 803ffd4:	20400001 	.word	0x20400001

0803ffd8 <_fflush_r>:
 803ffd8:	b538      	push	{r3, r4, r5, lr}
 803ffda:	690b      	ldr	r3, [r1, #16]
 803ffdc:	4605      	mov	r5, r0
 803ffde:	460c      	mov	r4, r1
 803ffe0:	b913      	cbnz	r3, 803ffe8 <_fflush_r+0x10>
 803ffe2:	2500      	movs	r5, #0
 803ffe4:	4628      	mov	r0, r5
 803ffe6:	bd38      	pop	{r3, r4, r5, pc}
 803ffe8:	b118      	cbz	r0, 803fff2 <_fflush_r+0x1a>
 803ffea:	6983      	ldr	r3, [r0, #24]
 803ffec:	b90b      	cbnz	r3, 803fff2 <_fflush_r+0x1a>
 803ffee:	f000 f887 	bl	8040100 <__sinit>
 803fff2:	4b14      	ldr	r3, [pc, #80]	; (8040044 <_fflush_r+0x6c>)
 803fff4:	429c      	cmp	r4, r3
 803fff6:	d11b      	bne.n	8040030 <_fflush_r+0x58>
 803fff8:	686c      	ldr	r4, [r5, #4]
 803fffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803fffe:	2b00      	cmp	r3, #0
 8040000:	d0ef      	beq.n	803ffe2 <_fflush_r+0xa>
 8040002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8040004:	07d0      	lsls	r0, r2, #31
 8040006:	d404      	bmi.n	8040012 <_fflush_r+0x3a>
 8040008:	0599      	lsls	r1, r3, #22
 804000a:	d402      	bmi.n	8040012 <_fflush_r+0x3a>
 804000c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804000e:	f000 f915 	bl	804023c <__retarget_lock_acquire_recursive>
 8040012:	4628      	mov	r0, r5
 8040014:	4621      	mov	r1, r4
 8040016:	f7ff ff59 	bl	803fecc <__sflush_r>
 804001a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804001c:	07da      	lsls	r2, r3, #31
 804001e:	4605      	mov	r5, r0
 8040020:	d4e0      	bmi.n	803ffe4 <_fflush_r+0xc>
 8040022:	89a3      	ldrh	r3, [r4, #12]
 8040024:	059b      	lsls	r3, r3, #22
 8040026:	d4dd      	bmi.n	803ffe4 <_fflush_r+0xc>
 8040028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804002a:	f000 f908 	bl	804023e <__retarget_lock_release_recursive>
 804002e:	e7d9      	b.n	803ffe4 <_fflush_r+0xc>
 8040030:	4b05      	ldr	r3, [pc, #20]	; (8040048 <_fflush_r+0x70>)
 8040032:	429c      	cmp	r4, r3
 8040034:	d101      	bne.n	804003a <_fflush_r+0x62>
 8040036:	68ac      	ldr	r4, [r5, #8]
 8040038:	e7df      	b.n	803fffa <_fflush_r+0x22>
 804003a:	4b04      	ldr	r3, [pc, #16]	; (804004c <_fflush_r+0x74>)
 804003c:	429c      	cmp	r4, r3
 804003e:	bf08      	it	eq
 8040040:	68ec      	ldreq	r4, [r5, #12]
 8040042:	e7da      	b.n	803fffa <_fflush_r+0x22>
 8040044:	0805b8f0 	.word	0x0805b8f0
 8040048:	0805b910 	.word	0x0805b910
 804004c:	0805b8d0 	.word	0x0805b8d0

08040050 <std>:
 8040050:	2300      	movs	r3, #0
 8040052:	b510      	push	{r4, lr}
 8040054:	4604      	mov	r4, r0
 8040056:	e9c0 3300 	strd	r3, r3, [r0]
 804005a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804005e:	6083      	str	r3, [r0, #8]
 8040060:	8181      	strh	r1, [r0, #12]
 8040062:	6643      	str	r3, [r0, #100]	; 0x64
 8040064:	81c2      	strh	r2, [r0, #14]
 8040066:	6183      	str	r3, [r0, #24]
 8040068:	4619      	mov	r1, r3
 804006a:	2208      	movs	r2, #8
 804006c:	305c      	adds	r0, #92	; 0x5c
 804006e:	f7ff fa43 	bl	803f4f8 <memset>
 8040072:	4b05      	ldr	r3, [pc, #20]	; (8040088 <std+0x38>)
 8040074:	6263      	str	r3, [r4, #36]	; 0x24
 8040076:	4b05      	ldr	r3, [pc, #20]	; (804008c <std+0x3c>)
 8040078:	62a3      	str	r3, [r4, #40]	; 0x28
 804007a:	4b05      	ldr	r3, [pc, #20]	; (8040090 <std+0x40>)
 804007c:	62e3      	str	r3, [r4, #44]	; 0x2c
 804007e:	4b05      	ldr	r3, [pc, #20]	; (8040094 <std+0x44>)
 8040080:	6224      	str	r4, [r4, #32]
 8040082:	6323      	str	r3, [r4, #48]	; 0x30
 8040084:	bd10      	pop	{r4, pc}
 8040086:	bf00      	nop
 8040088:	08040325 	.word	0x08040325
 804008c:	08040347 	.word	0x08040347
 8040090:	0804037f 	.word	0x0804037f
 8040094:	080403a3 	.word	0x080403a3

08040098 <_cleanup_r>:
 8040098:	4901      	ldr	r1, [pc, #4]	; (80400a0 <_cleanup_r+0x8>)
 804009a:	f000 b8af 	b.w	80401fc <_fwalk_reent>
 804009e:	bf00      	nop
 80400a0:	0803ffd9 	.word	0x0803ffd9

080400a4 <__sfmoreglue>:
 80400a4:	b570      	push	{r4, r5, r6, lr}
 80400a6:	2268      	movs	r2, #104	; 0x68
 80400a8:	1e4d      	subs	r5, r1, #1
 80400aa:	4355      	muls	r5, r2
 80400ac:	460e      	mov	r6, r1
 80400ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80400b2:	f7ff fa95 	bl	803f5e0 <_malloc_r>
 80400b6:	4604      	mov	r4, r0
 80400b8:	b140      	cbz	r0, 80400cc <__sfmoreglue+0x28>
 80400ba:	2100      	movs	r1, #0
 80400bc:	e9c0 1600 	strd	r1, r6, [r0]
 80400c0:	300c      	adds	r0, #12
 80400c2:	60a0      	str	r0, [r4, #8]
 80400c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80400c8:	f7ff fa16 	bl	803f4f8 <memset>
 80400cc:	4620      	mov	r0, r4
 80400ce:	bd70      	pop	{r4, r5, r6, pc}

080400d0 <__sfp_lock_acquire>:
 80400d0:	4801      	ldr	r0, [pc, #4]	; (80400d8 <__sfp_lock_acquire+0x8>)
 80400d2:	f000 b8b3 	b.w	804023c <__retarget_lock_acquire_recursive>
 80400d6:	bf00      	nop
 80400d8:	240037e9 	.word	0x240037e9

080400dc <__sfp_lock_release>:
 80400dc:	4801      	ldr	r0, [pc, #4]	; (80400e4 <__sfp_lock_release+0x8>)
 80400de:	f000 b8ae 	b.w	804023e <__retarget_lock_release_recursive>
 80400e2:	bf00      	nop
 80400e4:	240037e9 	.word	0x240037e9

080400e8 <__sinit_lock_acquire>:
 80400e8:	4801      	ldr	r0, [pc, #4]	; (80400f0 <__sinit_lock_acquire+0x8>)
 80400ea:	f000 b8a7 	b.w	804023c <__retarget_lock_acquire_recursive>
 80400ee:	bf00      	nop
 80400f0:	240037ea 	.word	0x240037ea

080400f4 <__sinit_lock_release>:
 80400f4:	4801      	ldr	r0, [pc, #4]	; (80400fc <__sinit_lock_release+0x8>)
 80400f6:	f000 b8a2 	b.w	804023e <__retarget_lock_release_recursive>
 80400fa:	bf00      	nop
 80400fc:	240037ea 	.word	0x240037ea

08040100 <__sinit>:
 8040100:	b510      	push	{r4, lr}
 8040102:	4604      	mov	r4, r0
 8040104:	f7ff fff0 	bl	80400e8 <__sinit_lock_acquire>
 8040108:	69a3      	ldr	r3, [r4, #24]
 804010a:	b11b      	cbz	r3, 8040114 <__sinit+0x14>
 804010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8040110:	f7ff bff0 	b.w	80400f4 <__sinit_lock_release>
 8040114:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8040118:	6523      	str	r3, [r4, #80]	; 0x50
 804011a:	4b13      	ldr	r3, [pc, #76]	; (8040168 <__sinit+0x68>)
 804011c:	4a13      	ldr	r2, [pc, #76]	; (804016c <__sinit+0x6c>)
 804011e:	681b      	ldr	r3, [r3, #0]
 8040120:	62a2      	str	r2, [r4, #40]	; 0x28
 8040122:	42a3      	cmp	r3, r4
 8040124:	bf04      	itt	eq
 8040126:	2301      	moveq	r3, #1
 8040128:	61a3      	streq	r3, [r4, #24]
 804012a:	4620      	mov	r0, r4
 804012c:	f000 f820 	bl	8040170 <__sfp>
 8040130:	6060      	str	r0, [r4, #4]
 8040132:	4620      	mov	r0, r4
 8040134:	f000 f81c 	bl	8040170 <__sfp>
 8040138:	60a0      	str	r0, [r4, #8]
 804013a:	4620      	mov	r0, r4
 804013c:	f000 f818 	bl	8040170 <__sfp>
 8040140:	2200      	movs	r2, #0
 8040142:	60e0      	str	r0, [r4, #12]
 8040144:	2104      	movs	r1, #4
 8040146:	6860      	ldr	r0, [r4, #4]
 8040148:	f7ff ff82 	bl	8040050 <std>
 804014c:	68a0      	ldr	r0, [r4, #8]
 804014e:	2201      	movs	r2, #1
 8040150:	2109      	movs	r1, #9
 8040152:	f7ff ff7d 	bl	8040050 <std>
 8040156:	68e0      	ldr	r0, [r4, #12]
 8040158:	2202      	movs	r2, #2
 804015a:	2112      	movs	r1, #18
 804015c:	f7ff ff78 	bl	8040050 <std>
 8040160:	2301      	movs	r3, #1
 8040162:	61a3      	str	r3, [r4, #24]
 8040164:	e7d2      	b.n	804010c <__sinit+0xc>
 8040166:	bf00      	nop
 8040168:	0805b898 	.word	0x0805b898
 804016c:	08040099 	.word	0x08040099

08040170 <__sfp>:
 8040170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8040172:	4607      	mov	r7, r0
 8040174:	f7ff ffac 	bl	80400d0 <__sfp_lock_acquire>
 8040178:	4b1e      	ldr	r3, [pc, #120]	; (80401f4 <__sfp+0x84>)
 804017a:	681e      	ldr	r6, [r3, #0]
 804017c:	69b3      	ldr	r3, [r6, #24]
 804017e:	b913      	cbnz	r3, 8040186 <__sfp+0x16>
 8040180:	4630      	mov	r0, r6
 8040182:	f7ff ffbd 	bl	8040100 <__sinit>
 8040186:	3648      	adds	r6, #72	; 0x48
 8040188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804018c:	3b01      	subs	r3, #1
 804018e:	d503      	bpl.n	8040198 <__sfp+0x28>
 8040190:	6833      	ldr	r3, [r6, #0]
 8040192:	b30b      	cbz	r3, 80401d8 <__sfp+0x68>
 8040194:	6836      	ldr	r6, [r6, #0]
 8040196:	e7f7      	b.n	8040188 <__sfp+0x18>
 8040198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804019c:	b9d5      	cbnz	r5, 80401d4 <__sfp+0x64>
 804019e:	4b16      	ldr	r3, [pc, #88]	; (80401f8 <__sfp+0x88>)
 80401a0:	60e3      	str	r3, [r4, #12]
 80401a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80401a6:	6665      	str	r5, [r4, #100]	; 0x64
 80401a8:	f000 f847 	bl	804023a <__retarget_lock_init_recursive>
 80401ac:	f7ff ff96 	bl	80400dc <__sfp_lock_release>
 80401b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80401b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80401b8:	6025      	str	r5, [r4, #0]
 80401ba:	61a5      	str	r5, [r4, #24]
 80401bc:	2208      	movs	r2, #8
 80401be:	4629      	mov	r1, r5
 80401c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80401c4:	f7ff f998 	bl	803f4f8 <memset>
 80401c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80401cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80401d0:	4620      	mov	r0, r4
 80401d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80401d4:	3468      	adds	r4, #104	; 0x68
 80401d6:	e7d9      	b.n	804018c <__sfp+0x1c>
 80401d8:	2104      	movs	r1, #4
 80401da:	4638      	mov	r0, r7
 80401dc:	f7ff ff62 	bl	80400a4 <__sfmoreglue>
 80401e0:	4604      	mov	r4, r0
 80401e2:	6030      	str	r0, [r6, #0]
 80401e4:	2800      	cmp	r0, #0
 80401e6:	d1d5      	bne.n	8040194 <__sfp+0x24>
 80401e8:	f7ff ff78 	bl	80400dc <__sfp_lock_release>
 80401ec:	230c      	movs	r3, #12
 80401ee:	603b      	str	r3, [r7, #0]
 80401f0:	e7ee      	b.n	80401d0 <__sfp+0x60>
 80401f2:	bf00      	nop
 80401f4:	0805b898 	.word	0x0805b898
 80401f8:	ffff0001 	.word	0xffff0001

080401fc <_fwalk_reent>:
 80401fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8040200:	4606      	mov	r6, r0
 8040202:	4688      	mov	r8, r1
 8040204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8040208:	2700      	movs	r7, #0
 804020a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804020e:	f1b9 0901 	subs.w	r9, r9, #1
 8040212:	d505      	bpl.n	8040220 <_fwalk_reent+0x24>
 8040214:	6824      	ldr	r4, [r4, #0]
 8040216:	2c00      	cmp	r4, #0
 8040218:	d1f7      	bne.n	804020a <_fwalk_reent+0xe>
 804021a:	4638      	mov	r0, r7
 804021c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8040220:	89ab      	ldrh	r3, [r5, #12]
 8040222:	2b01      	cmp	r3, #1
 8040224:	d907      	bls.n	8040236 <_fwalk_reent+0x3a>
 8040226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804022a:	3301      	adds	r3, #1
 804022c:	d003      	beq.n	8040236 <_fwalk_reent+0x3a>
 804022e:	4629      	mov	r1, r5
 8040230:	4630      	mov	r0, r6
 8040232:	47c0      	blx	r8
 8040234:	4307      	orrs	r7, r0
 8040236:	3568      	adds	r5, #104	; 0x68
 8040238:	e7e9      	b.n	804020e <_fwalk_reent+0x12>

0804023a <__retarget_lock_init_recursive>:
 804023a:	4770      	bx	lr

0804023c <__retarget_lock_acquire_recursive>:
 804023c:	4770      	bx	lr

0804023e <__retarget_lock_release_recursive>:
 804023e:	4770      	bx	lr

08040240 <__swhatbuf_r>:
 8040240:	b570      	push	{r4, r5, r6, lr}
 8040242:	460e      	mov	r6, r1
 8040244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8040248:	2900      	cmp	r1, #0
 804024a:	b096      	sub	sp, #88	; 0x58
 804024c:	4614      	mov	r4, r2
 804024e:	461d      	mov	r5, r3
 8040250:	da08      	bge.n	8040264 <__swhatbuf_r+0x24>
 8040252:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8040256:	2200      	movs	r2, #0
 8040258:	602a      	str	r2, [r5, #0]
 804025a:	061a      	lsls	r2, r3, #24
 804025c:	d410      	bmi.n	8040280 <__swhatbuf_r+0x40>
 804025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8040262:	e00e      	b.n	8040282 <__swhatbuf_r+0x42>
 8040264:	466a      	mov	r2, sp
 8040266:	f000 f8c3 	bl	80403f0 <_fstat_r>
 804026a:	2800      	cmp	r0, #0
 804026c:	dbf1      	blt.n	8040252 <__swhatbuf_r+0x12>
 804026e:	9a01      	ldr	r2, [sp, #4]
 8040270:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8040274:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8040278:	425a      	negs	r2, r3
 804027a:	415a      	adcs	r2, r3
 804027c:	602a      	str	r2, [r5, #0]
 804027e:	e7ee      	b.n	804025e <__swhatbuf_r+0x1e>
 8040280:	2340      	movs	r3, #64	; 0x40
 8040282:	2000      	movs	r0, #0
 8040284:	6023      	str	r3, [r4, #0]
 8040286:	b016      	add	sp, #88	; 0x58
 8040288:	bd70      	pop	{r4, r5, r6, pc}
	...

0804028c <__smakebuf_r>:
 804028c:	898b      	ldrh	r3, [r1, #12]
 804028e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8040290:	079d      	lsls	r5, r3, #30
 8040292:	4606      	mov	r6, r0
 8040294:	460c      	mov	r4, r1
 8040296:	d507      	bpl.n	80402a8 <__smakebuf_r+0x1c>
 8040298:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804029c:	6023      	str	r3, [r4, #0]
 804029e:	6123      	str	r3, [r4, #16]
 80402a0:	2301      	movs	r3, #1
 80402a2:	6163      	str	r3, [r4, #20]
 80402a4:	b002      	add	sp, #8
 80402a6:	bd70      	pop	{r4, r5, r6, pc}
 80402a8:	ab01      	add	r3, sp, #4
 80402aa:	466a      	mov	r2, sp
 80402ac:	f7ff ffc8 	bl	8040240 <__swhatbuf_r>
 80402b0:	9900      	ldr	r1, [sp, #0]
 80402b2:	4605      	mov	r5, r0
 80402b4:	4630      	mov	r0, r6
 80402b6:	f7ff f993 	bl	803f5e0 <_malloc_r>
 80402ba:	b948      	cbnz	r0, 80402d0 <__smakebuf_r+0x44>
 80402bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80402c0:	059a      	lsls	r2, r3, #22
 80402c2:	d4ef      	bmi.n	80402a4 <__smakebuf_r+0x18>
 80402c4:	f023 0303 	bic.w	r3, r3, #3
 80402c8:	f043 0302 	orr.w	r3, r3, #2
 80402cc:	81a3      	strh	r3, [r4, #12]
 80402ce:	e7e3      	b.n	8040298 <__smakebuf_r+0xc>
 80402d0:	4b0d      	ldr	r3, [pc, #52]	; (8040308 <__smakebuf_r+0x7c>)
 80402d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80402d4:	89a3      	ldrh	r3, [r4, #12]
 80402d6:	6020      	str	r0, [r4, #0]
 80402d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80402dc:	81a3      	strh	r3, [r4, #12]
 80402de:	9b00      	ldr	r3, [sp, #0]
 80402e0:	6163      	str	r3, [r4, #20]
 80402e2:	9b01      	ldr	r3, [sp, #4]
 80402e4:	6120      	str	r0, [r4, #16]
 80402e6:	b15b      	cbz	r3, 8040300 <__smakebuf_r+0x74>
 80402e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80402ec:	4630      	mov	r0, r6
 80402ee:	f000 f891 	bl	8040414 <_isatty_r>
 80402f2:	b128      	cbz	r0, 8040300 <__smakebuf_r+0x74>
 80402f4:	89a3      	ldrh	r3, [r4, #12]
 80402f6:	f023 0303 	bic.w	r3, r3, #3
 80402fa:	f043 0301 	orr.w	r3, r3, #1
 80402fe:	81a3      	strh	r3, [r4, #12]
 8040300:	89a0      	ldrh	r0, [r4, #12]
 8040302:	4305      	orrs	r5, r0
 8040304:	81a5      	strh	r5, [r4, #12]
 8040306:	e7cd      	b.n	80402a4 <__smakebuf_r+0x18>
 8040308:	08040099 	.word	0x08040099

0804030c <__malloc_lock>:
 804030c:	4801      	ldr	r0, [pc, #4]	; (8040314 <__malloc_lock+0x8>)
 804030e:	f7ff bf95 	b.w	804023c <__retarget_lock_acquire_recursive>
 8040312:	bf00      	nop
 8040314:	240037e8 	.word	0x240037e8

08040318 <__malloc_unlock>:
 8040318:	4801      	ldr	r0, [pc, #4]	; (8040320 <__malloc_unlock+0x8>)
 804031a:	f7ff bf90 	b.w	804023e <__retarget_lock_release_recursive>
 804031e:	bf00      	nop
 8040320:	240037e8 	.word	0x240037e8

08040324 <__sread>:
 8040324:	b510      	push	{r4, lr}
 8040326:	460c      	mov	r4, r1
 8040328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804032c:	f000 f894 	bl	8040458 <_read_r>
 8040330:	2800      	cmp	r0, #0
 8040332:	bfab      	itete	ge
 8040334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8040336:	89a3      	ldrhlt	r3, [r4, #12]
 8040338:	181b      	addge	r3, r3, r0
 804033a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804033e:	bfac      	ite	ge
 8040340:	6563      	strge	r3, [r4, #84]	; 0x54
 8040342:	81a3      	strhlt	r3, [r4, #12]
 8040344:	bd10      	pop	{r4, pc}

08040346 <__swrite>:
 8040346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804034a:	461f      	mov	r7, r3
 804034c:	898b      	ldrh	r3, [r1, #12]
 804034e:	05db      	lsls	r3, r3, #23
 8040350:	4605      	mov	r5, r0
 8040352:	460c      	mov	r4, r1
 8040354:	4616      	mov	r6, r2
 8040356:	d505      	bpl.n	8040364 <__swrite+0x1e>
 8040358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804035c:	2302      	movs	r3, #2
 804035e:	2200      	movs	r2, #0
 8040360:	f000 f868 	bl	8040434 <_lseek_r>
 8040364:	89a3      	ldrh	r3, [r4, #12]
 8040366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804036a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804036e:	81a3      	strh	r3, [r4, #12]
 8040370:	4632      	mov	r2, r6
 8040372:	463b      	mov	r3, r7
 8040374:	4628      	mov	r0, r5
 8040376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804037a:	f000 b817 	b.w	80403ac <_write_r>

0804037e <__sseek>:
 804037e:	b510      	push	{r4, lr}
 8040380:	460c      	mov	r4, r1
 8040382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8040386:	f000 f855 	bl	8040434 <_lseek_r>
 804038a:	1c43      	adds	r3, r0, #1
 804038c:	89a3      	ldrh	r3, [r4, #12]
 804038e:	bf15      	itete	ne
 8040390:	6560      	strne	r0, [r4, #84]	; 0x54
 8040392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8040396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804039a:	81a3      	strheq	r3, [r4, #12]
 804039c:	bf18      	it	ne
 804039e:	81a3      	strhne	r3, [r4, #12]
 80403a0:	bd10      	pop	{r4, pc}

080403a2 <__sclose>:
 80403a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80403a6:	f000 b813 	b.w	80403d0 <_close_r>
	...

080403ac <_write_r>:
 80403ac:	b538      	push	{r3, r4, r5, lr}
 80403ae:	4d07      	ldr	r5, [pc, #28]	; (80403cc <_write_r+0x20>)
 80403b0:	4604      	mov	r4, r0
 80403b2:	4608      	mov	r0, r1
 80403b4:	4611      	mov	r1, r2
 80403b6:	2200      	movs	r2, #0
 80403b8:	602a      	str	r2, [r5, #0]
 80403ba:	461a      	mov	r2, r3
 80403bc:	f7ed f93f 	bl	802d63e <_write>
 80403c0:	1c43      	adds	r3, r0, #1
 80403c2:	d102      	bne.n	80403ca <_write_r+0x1e>
 80403c4:	682b      	ldr	r3, [r5, #0]
 80403c6:	b103      	cbz	r3, 80403ca <_write_r+0x1e>
 80403c8:	6023      	str	r3, [r4, #0]
 80403ca:	bd38      	pop	{r3, r4, r5, pc}
 80403cc:	240037ec 	.word	0x240037ec

080403d0 <_close_r>:
 80403d0:	b538      	push	{r3, r4, r5, lr}
 80403d2:	4d06      	ldr	r5, [pc, #24]	; (80403ec <_close_r+0x1c>)
 80403d4:	2300      	movs	r3, #0
 80403d6:	4604      	mov	r4, r0
 80403d8:	4608      	mov	r0, r1
 80403da:	602b      	str	r3, [r5, #0]
 80403dc:	f7ed f94b 	bl	802d676 <_close>
 80403e0:	1c43      	adds	r3, r0, #1
 80403e2:	d102      	bne.n	80403ea <_close_r+0x1a>
 80403e4:	682b      	ldr	r3, [r5, #0]
 80403e6:	b103      	cbz	r3, 80403ea <_close_r+0x1a>
 80403e8:	6023      	str	r3, [r4, #0]
 80403ea:	bd38      	pop	{r3, r4, r5, pc}
 80403ec:	240037ec 	.word	0x240037ec

080403f0 <_fstat_r>:
 80403f0:	b538      	push	{r3, r4, r5, lr}
 80403f2:	4d07      	ldr	r5, [pc, #28]	; (8040410 <_fstat_r+0x20>)
 80403f4:	2300      	movs	r3, #0
 80403f6:	4604      	mov	r4, r0
 80403f8:	4608      	mov	r0, r1
 80403fa:	4611      	mov	r1, r2
 80403fc:	602b      	str	r3, [r5, #0]
 80403fe:	f7ed f946 	bl	802d68e <_fstat>
 8040402:	1c43      	adds	r3, r0, #1
 8040404:	d102      	bne.n	804040c <_fstat_r+0x1c>
 8040406:	682b      	ldr	r3, [r5, #0]
 8040408:	b103      	cbz	r3, 804040c <_fstat_r+0x1c>
 804040a:	6023      	str	r3, [r4, #0]
 804040c:	bd38      	pop	{r3, r4, r5, pc}
 804040e:	bf00      	nop
 8040410:	240037ec 	.word	0x240037ec

08040414 <_isatty_r>:
 8040414:	b538      	push	{r3, r4, r5, lr}
 8040416:	4d06      	ldr	r5, [pc, #24]	; (8040430 <_isatty_r+0x1c>)
 8040418:	2300      	movs	r3, #0
 804041a:	4604      	mov	r4, r0
 804041c:	4608      	mov	r0, r1
 804041e:	602b      	str	r3, [r5, #0]
 8040420:	f7ed f945 	bl	802d6ae <_isatty>
 8040424:	1c43      	adds	r3, r0, #1
 8040426:	d102      	bne.n	804042e <_isatty_r+0x1a>
 8040428:	682b      	ldr	r3, [r5, #0]
 804042a:	b103      	cbz	r3, 804042e <_isatty_r+0x1a>
 804042c:	6023      	str	r3, [r4, #0]
 804042e:	bd38      	pop	{r3, r4, r5, pc}
 8040430:	240037ec 	.word	0x240037ec

08040434 <_lseek_r>:
 8040434:	b538      	push	{r3, r4, r5, lr}
 8040436:	4d07      	ldr	r5, [pc, #28]	; (8040454 <_lseek_r+0x20>)
 8040438:	4604      	mov	r4, r0
 804043a:	4608      	mov	r0, r1
 804043c:	4611      	mov	r1, r2
 804043e:	2200      	movs	r2, #0
 8040440:	602a      	str	r2, [r5, #0]
 8040442:	461a      	mov	r2, r3
 8040444:	f7ed f93e 	bl	802d6c4 <_lseek>
 8040448:	1c43      	adds	r3, r0, #1
 804044a:	d102      	bne.n	8040452 <_lseek_r+0x1e>
 804044c:	682b      	ldr	r3, [r5, #0]
 804044e:	b103      	cbz	r3, 8040452 <_lseek_r+0x1e>
 8040450:	6023      	str	r3, [r4, #0]
 8040452:	bd38      	pop	{r3, r4, r5, pc}
 8040454:	240037ec 	.word	0x240037ec

08040458 <_read_r>:
 8040458:	b538      	push	{r3, r4, r5, lr}
 804045a:	4d07      	ldr	r5, [pc, #28]	; (8040478 <_read_r+0x20>)
 804045c:	4604      	mov	r4, r0
 804045e:	4608      	mov	r0, r1
 8040460:	4611      	mov	r1, r2
 8040462:	2200      	movs	r2, #0
 8040464:	602a      	str	r2, [r5, #0]
 8040466:	461a      	mov	r2, r3
 8040468:	f7ed f8cc 	bl	802d604 <_read>
 804046c:	1c43      	adds	r3, r0, #1
 804046e:	d102      	bne.n	8040476 <_read_r+0x1e>
 8040470:	682b      	ldr	r3, [r5, #0]
 8040472:	b103      	cbz	r3, 8040476 <_read_r+0x1e>
 8040474:	6023      	str	r3, [r4, #0]
 8040476:	bd38      	pop	{r3, r4, r5, pc}
 8040478:	240037ec 	.word	0x240037ec

0804047c <_init>:
 804047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804047e:	bf00      	nop
 8040480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8040482:	bc08      	pop	{r3}
 8040484:	469e      	mov	lr, r3
 8040486:	4770      	bx	lr

08040488 <_fini>:
 8040488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804048a:	bf00      	nop
 804048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804048e:	bc08      	pop	{r3}
 8040490:	469e      	mov	lr, r3
 8040492:	4770      	bx	lr
