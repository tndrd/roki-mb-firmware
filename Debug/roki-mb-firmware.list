
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cb9c  080202a0  080202a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001b7f0  0803ce3c  0803ce3c  0002ce3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0805862c  0805862c  0004862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08058634  08058634  00048634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0805863c  0805863c  0004863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  24000000  08058644  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00026680  24000168  080587ac  00050168  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  240267e8  080587ac  000567e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004c24e  00000000  00000000  00050196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076d6  00000000  00000000  0009c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003100  00000000  00000000  000a3ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002e80  00000000  00000000  000a6bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045507  00000000  00000000  000a9a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000399a2  00000000  00000000  000eef47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00189c55  00000000  00000000  001288e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002b253e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000df38  00000000  00000000  002b2590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202a0 <__do_global_dtors_aux>:
 80202a0:	b510      	push	{r4, lr}
 80202a2:	4c05      	ldr	r4, [pc, #20]	; (80202b8 <__do_global_dtors_aux+0x18>)
 80202a4:	7823      	ldrb	r3, [r4, #0]
 80202a6:	b933      	cbnz	r3, 80202b6 <__do_global_dtors_aux+0x16>
 80202a8:	4b04      	ldr	r3, [pc, #16]	; (80202bc <__do_global_dtors_aux+0x1c>)
 80202aa:	b113      	cbz	r3, 80202b2 <__do_global_dtors_aux+0x12>
 80202ac:	4804      	ldr	r0, [pc, #16]	; (80202c0 <__do_global_dtors_aux+0x20>)
 80202ae:	f3af 8000 	nop.w
 80202b2:	2301      	movs	r3, #1
 80202b4:	7023      	strb	r3, [r4, #0]
 80202b6:	bd10      	pop	{r4, pc}
 80202b8:	24000168 	.word	0x24000168
 80202bc:	00000000 	.word	0x00000000
 80202c0:	0803ce24 	.word	0x0803ce24

080202c4 <frame_dummy>:
 80202c4:	b508      	push	{r3, lr}
 80202c6:	4b03      	ldr	r3, [pc, #12]	; (80202d4 <frame_dummy+0x10>)
 80202c8:	b11b      	cbz	r3, 80202d2 <frame_dummy+0xe>
 80202ca:	4903      	ldr	r1, [pc, #12]	; (80202d8 <frame_dummy+0x14>)
 80202cc:	4803      	ldr	r0, [pc, #12]	; (80202dc <frame_dummy+0x18>)
 80202ce:	f3af 8000 	nop.w
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	00000000 	.word	0x00000000
 80202d8:	2400016c 	.word	0x2400016c
 80202dc:	0803ce24 	.word	0x0803ce24

080202e0 <memchr>:
 80202e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80202e4:	2a10      	cmp	r2, #16
 80202e6:	db2b      	blt.n	8020340 <memchr+0x60>
 80202e8:	f010 0f07 	tst.w	r0, #7
 80202ec:	d008      	beq.n	8020300 <memchr+0x20>
 80202ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80202f2:	3a01      	subs	r2, #1
 80202f4:	428b      	cmp	r3, r1
 80202f6:	d02d      	beq.n	8020354 <memchr+0x74>
 80202f8:	f010 0f07 	tst.w	r0, #7
 80202fc:	b342      	cbz	r2, 8020350 <memchr+0x70>
 80202fe:	d1f6      	bne.n	80202ee <memchr+0xe>
 8020300:	b4f0      	push	{r4, r5, r6, r7}
 8020302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802030a:	f022 0407 	bic.w	r4, r2, #7
 802030e:	f07f 0700 	mvns.w	r7, #0
 8020312:	2300      	movs	r3, #0
 8020314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020318:	3c08      	subs	r4, #8
 802031a:	ea85 0501 	eor.w	r5, r5, r1
 802031e:	ea86 0601 	eor.w	r6, r6, r1
 8020322:	fa85 f547 	uadd8	r5, r5, r7
 8020326:	faa3 f587 	sel	r5, r3, r7
 802032a:	fa86 f647 	uadd8	r6, r6, r7
 802032e:	faa5 f687 	sel	r6, r5, r7
 8020332:	b98e      	cbnz	r6, 8020358 <memchr+0x78>
 8020334:	d1ee      	bne.n	8020314 <memchr+0x34>
 8020336:	bcf0      	pop	{r4, r5, r6, r7}
 8020338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802033c:	f002 0207 	and.w	r2, r2, #7
 8020340:	b132      	cbz	r2, 8020350 <memchr+0x70>
 8020342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020346:	3a01      	subs	r2, #1
 8020348:	ea83 0301 	eor.w	r3, r3, r1
 802034c:	b113      	cbz	r3, 8020354 <memchr+0x74>
 802034e:	d1f8      	bne.n	8020342 <memchr+0x62>
 8020350:	2000      	movs	r0, #0
 8020352:	4770      	bx	lr
 8020354:	3801      	subs	r0, #1
 8020356:	4770      	bx	lr
 8020358:	2d00      	cmp	r5, #0
 802035a:	bf06      	itte	eq
 802035c:	4635      	moveq	r5, r6
 802035e:	3803      	subeq	r0, #3
 8020360:	3807      	subne	r0, #7
 8020362:	f015 0f01 	tst.w	r5, #1
 8020366:	d107      	bne.n	8020378 <memchr+0x98>
 8020368:	3001      	adds	r0, #1
 802036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802036e:	bf02      	ittt	eq
 8020370:	3001      	addeq	r0, #1
 8020372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020376:	3001      	addeq	r0, #1
 8020378:	bcf0      	pop	{r4, r5, r6, r7}
 802037a:	3801      	subs	r0, #1
 802037c:	4770      	bx	lr
 802037e:	bf00      	nop

08020380 <__aeabi_uldivmod>:
 8020380:	b953      	cbnz	r3, 8020398 <__aeabi_uldivmod+0x18>
 8020382:	b94a      	cbnz	r2, 8020398 <__aeabi_uldivmod+0x18>
 8020384:	2900      	cmp	r1, #0
 8020386:	bf08      	it	eq
 8020388:	2800      	cmpeq	r0, #0
 802038a:	bf1c      	itt	ne
 802038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8020390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8020394:	f000 b974 	b.w	8020680 <__aeabi_idiv0>
 8020398:	f1ad 0c08 	sub.w	ip, sp, #8
 802039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80203a0:	f000 f806 	bl	80203b0 <__udivmoddi4>
 80203a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80203a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80203ac:	b004      	add	sp, #16
 80203ae:	4770      	bx	lr

080203b0 <__udivmoddi4>:
 80203b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80203b4:	9d08      	ldr	r5, [sp, #32]
 80203b6:	4604      	mov	r4, r0
 80203b8:	468e      	mov	lr, r1
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d14d      	bne.n	802045a <__udivmoddi4+0xaa>
 80203be:	428a      	cmp	r2, r1
 80203c0:	4694      	mov	ip, r2
 80203c2:	d969      	bls.n	8020498 <__udivmoddi4+0xe8>
 80203c4:	fab2 f282 	clz	r2, r2
 80203c8:	b152      	cbz	r2, 80203e0 <__udivmoddi4+0x30>
 80203ca:	fa01 f302 	lsl.w	r3, r1, r2
 80203ce:	f1c2 0120 	rsb	r1, r2, #32
 80203d2:	fa20 f101 	lsr.w	r1, r0, r1
 80203d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80203da:	ea41 0e03 	orr.w	lr, r1, r3
 80203de:	4094      	lsls	r4, r2
 80203e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80203e4:	0c21      	lsrs	r1, r4, #16
 80203e6:	fbbe f6f8 	udiv	r6, lr, r8
 80203ea:	fa1f f78c 	uxth.w	r7, ip
 80203ee:	fb08 e316 	mls	r3, r8, r6, lr
 80203f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80203f6:	fb06 f107 	mul.w	r1, r6, r7
 80203fa:	4299      	cmp	r1, r3
 80203fc:	d90a      	bls.n	8020414 <__udivmoddi4+0x64>
 80203fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8020406:	f080 811f 	bcs.w	8020648 <__udivmoddi4+0x298>
 802040a:	4299      	cmp	r1, r3
 802040c:	f240 811c 	bls.w	8020648 <__udivmoddi4+0x298>
 8020410:	3e02      	subs	r6, #2
 8020412:	4463      	add	r3, ip
 8020414:	1a5b      	subs	r3, r3, r1
 8020416:	b2a4      	uxth	r4, r4
 8020418:	fbb3 f0f8 	udiv	r0, r3, r8
 802041c:	fb08 3310 	mls	r3, r8, r0, r3
 8020420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020424:	fb00 f707 	mul.w	r7, r0, r7
 8020428:	42a7      	cmp	r7, r4
 802042a:	d90a      	bls.n	8020442 <__udivmoddi4+0x92>
 802042c:	eb1c 0404 	adds.w	r4, ip, r4
 8020430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020434:	f080 810a 	bcs.w	802064c <__udivmoddi4+0x29c>
 8020438:	42a7      	cmp	r7, r4
 802043a:	f240 8107 	bls.w	802064c <__udivmoddi4+0x29c>
 802043e:	4464      	add	r4, ip
 8020440:	3802      	subs	r0, #2
 8020442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020446:	1be4      	subs	r4, r4, r7
 8020448:	2600      	movs	r6, #0
 802044a:	b11d      	cbz	r5, 8020454 <__udivmoddi4+0xa4>
 802044c:	40d4      	lsrs	r4, r2
 802044e:	2300      	movs	r3, #0
 8020450:	e9c5 4300 	strd	r4, r3, [r5]
 8020454:	4631      	mov	r1, r6
 8020456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802045a:	428b      	cmp	r3, r1
 802045c:	d909      	bls.n	8020472 <__udivmoddi4+0xc2>
 802045e:	2d00      	cmp	r5, #0
 8020460:	f000 80ef 	beq.w	8020642 <__udivmoddi4+0x292>
 8020464:	2600      	movs	r6, #0
 8020466:	e9c5 0100 	strd	r0, r1, [r5]
 802046a:	4630      	mov	r0, r6
 802046c:	4631      	mov	r1, r6
 802046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020472:	fab3 f683 	clz	r6, r3
 8020476:	2e00      	cmp	r6, #0
 8020478:	d14a      	bne.n	8020510 <__udivmoddi4+0x160>
 802047a:	428b      	cmp	r3, r1
 802047c:	d302      	bcc.n	8020484 <__udivmoddi4+0xd4>
 802047e:	4282      	cmp	r2, r0
 8020480:	f200 80f9 	bhi.w	8020676 <__udivmoddi4+0x2c6>
 8020484:	1a84      	subs	r4, r0, r2
 8020486:	eb61 0303 	sbc.w	r3, r1, r3
 802048a:	2001      	movs	r0, #1
 802048c:	469e      	mov	lr, r3
 802048e:	2d00      	cmp	r5, #0
 8020490:	d0e0      	beq.n	8020454 <__udivmoddi4+0xa4>
 8020492:	e9c5 4e00 	strd	r4, lr, [r5]
 8020496:	e7dd      	b.n	8020454 <__udivmoddi4+0xa4>
 8020498:	b902      	cbnz	r2, 802049c <__udivmoddi4+0xec>
 802049a:	deff      	udf	#255	; 0xff
 802049c:	fab2 f282 	clz	r2, r2
 80204a0:	2a00      	cmp	r2, #0
 80204a2:	f040 8092 	bne.w	80205ca <__udivmoddi4+0x21a>
 80204a6:	eba1 010c 	sub.w	r1, r1, ip
 80204aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204ae:	fa1f fe8c 	uxth.w	lr, ip
 80204b2:	2601      	movs	r6, #1
 80204b4:	0c20      	lsrs	r0, r4, #16
 80204b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80204ba:	fb07 1113 	mls	r1, r7, r3, r1
 80204be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80204c2:	fb0e f003 	mul.w	r0, lr, r3
 80204c6:	4288      	cmp	r0, r1
 80204c8:	d908      	bls.n	80204dc <__udivmoddi4+0x12c>
 80204ca:	eb1c 0101 	adds.w	r1, ip, r1
 80204ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80204d2:	d202      	bcs.n	80204da <__udivmoddi4+0x12a>
 80204d4:	4288      	cmp	r0, r1
 80204d6:	f200 80cb 	bhi.w	8020670 <__udivmoddi4+0x2c0>
 80204da:	4643      	mov	r3, r8
 80204dc:	1a09      	subs	r1, r1, r0
 80204de:	b2a4      	uxth	r4, r4
 80204e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80204e4:	fb07 1110 	mls	r1, r7, r0, r1
 80204e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80204ec:	fb0e fe00 	mul.w	lr, lr, r0
 80204f0:	45a6      	cmp	lr, r4
 80204f2:	d908      	bls.n	8020506 <__udivmoddi4+0x156>
 80204f4:	eb1c 0404 	adds.w	r4, ip, r4
 80204f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80204fc:	d202      	bcs.n	8020504 <__udivmoddi4+0x154>
 80204fe:	45a6      	cmp	lr, r4
 8020500:	f200 80bb 	bhi.w	802067a <__udivmoddi4+0x2ca>
 8020504:	4608      	mov	r0, r1
 8020506:	eba4 040e 	sub.w	r4, r4, lr
 802050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802050e:	e79c      	b.n	802044a <__udivmoddi4+0x9a>
 8020510:	f1c6 0720 	rsb	r7, r6, #32
 8020514:	40b3      	lsls	r3, r6
 8020516:	fa22 fc07 	lsr.w	ip, r2, r7
 802051a:	ea4c 0c03 	orr.w	ip, ip, r3
 802051e:	fa20 f407 	lsr.w	r4, r0, r7
 8020522:	fa01 f306 	lsl.w	r3, r1, r6
 8020526:	431c      	orrs	r4, r3
 8020528:	40f9      	lsrs	r1, r7
 802052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802052e:	fa00 f306 	lsl.w	r3, r0, r6
 8020532:	fbb1 f8f9 	udiv	r8, r1, r9
 8020536:	0c20      	lsrs	r0, r4, #16
 8020538:	fa1f fe8c 	uxth.w	lr, ip
 802053c:	fb09 1118 	mls	r1, r9, r8, r1
 8020540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020544:	fb08 f00e 	mul.w	r0, r8, lr
 8020548:	4288      	cmp	r0, r1
 802054a:	fa02 f206 	lsl.w	r2, r2, r6
 802054e:	d90b      	bls.n	8020568 <__udivmoddi4+0x1b8>
 8020550:	eb1c 0101 	adds.w	r1, ip, r1
 8020554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8020558:	f080 8088 	bcs.w	802066c <__udivmoddi4+0x2bc>
 802055c:	4288      	cmp	r0, r1
 802055e:	f240 8085 	bls.w	802066c <__udivmoddi4+0x2bc>
 8020562:	f1a8 0802 	sub.w	r8, r8, #2
 8020566:	4461      	add	r1, ip
 8020568:	1a09      	subs	r1, r1, r0
 802056a:	b2a4      	uxth	r4, r4
 802056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020570:	fb09 1110 	mls	r1, r9, r0, r1
 8020574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020578:	fb00 fe0e 	mul.w	lr, r0, lr
 802057c:	458e      	cmp	lr, r1
 802057e:	d908      	bls.n	8020592 <__udivmoddi4+0x1e2>
 8020580:	eb1c 0101 	adds.w	r1, ip, r1
 8020584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8020588:	d26c      	bcs.n	8020664 <__udivmoddi4+0x2b4>
 802058a:	458e      	cmp	lr, r1
 802058c:	d96a      	bls.n	8020664 <__udivmoddi4+0x2b4>
 802058e:	3802      	subs	r0, #2
 8020590:	4461      	add	r1, ip
 8020592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020596:	fba0 9402 	umull	r9, r4, r0, r2
 802059a:	eba1 010e 	sub.w	r1, r1, lr
 802059e:	42a1      	cmp	r1, r4
 80205a0:	46c8      	mov	r8, r9
 80205a2:	46a6      	mov	lr, r4
 80205a4:	d356      	bcc.n	8020654 <__udivmoddi4+0x2a4>
 80205a6:	d053      	beq.n	8020650 <__udivmoddi4+0x2a0>
 80205a8:	b15d      	cbz	r5, 80205c2 <__udivmoddi4+0x212>
 80205aa:	ebb3 0208 	subs.w	r2, r3, r8
 80205ae:	eb61 010e 	sbc.w	r1, r1, lr
 80205b2:	fa01 f707 	lsl.w	r7, r1, r7
 80205b6:	fa22 f306 	lsr.w	r3, r2, r6
 80205ba:	40f1      	lsrs	r1, r6
 80205bc:	431f      	orrs	r7, r3
 80205be:	e9c5 7100 	strd	r7, r1, [r5]
 80205c2:	2600      	movs	r6, #0
 80205c4:	4631      	mov	r1, r6
 80205c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205ca:	f1c2 0320 	rsb	r3, r2, #32
 80205ce:	40d8      	lsrs	r0, r3
 80205d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80205d4:	fa21 f303 	lsr.w	r3, r1, r3
 80205d8:	4091      	lsls	r1, r2
 80205da:	4301      	orrs	r1, r0
 80205dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80205e0:	fa1f fe8c 	uxth.w	lr, ip
 80205e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80205e8:	fb07 3610 	mls	r6, r7, r0, r3
 80205ec:	0c0b      	lsrs	r3, r1, #16
 80205ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80205f2:	fb00 f60e 	mul.w	r6, r0, lr
 80205f6:	429e      	cmp	r6, r3
 80205f8:	fa04 f402 	lsl.w	r4, r4, r2
 80205fc:	d908      	bls.n	8020610 <__udivmoddi4+0x260>
 80205fe:	eb1c 0303 	adds.w	r3, ip, r3
 8020602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8020606:	d22f      	bcs.n	8020668 <__udivmoddi4+0x2b8>
 8020608:	429e      	cmp	r6, r3
 802060a:	d92d      	bls.n	8020668 <__udivmoddi4+0x2b8>
 802060c:	3802      	subs	r0, #2
 802060e:	4463      	add	r3, ip
 8020610:	1b9b      	subs	r3, r3, r6
 8020612:	b289      	uxth	r1, r1
 8020614:	fbb3 f6f7 	udiv	r6, r3, r7
 8020618:	fb07 3316 	mls	r3, r7, r6, r3
 802061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020620:	fb06 f30e 	mul.w	r3, r6, lr
 8020624:	428b      	cmp	r3, r1
 8020626:	d908      	bls.n	802063a <__udivmoddi4+0x28a>
 8020628:	eb1c 0101 	adds.w	r1, ip, r1
 802062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8020630:	d216      	bcs.n	8020660 <__udivmoddi4+0x2b0>
 8020632:	428b      	cmp	r3, r1
 8020634:	d914      	bls.n	8020660 <__udivmoddi4+0x2b0>
 8020636:	3e02      	subs	r6, #2
 8020638:	4461      	add	r1, ip
 802063a:	1ac9      	subs	r1, r1, r3
 802063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020640:	e738      	b.n	80204b4 <__udivmoddi4+0x104>
 8020642:	462e      	mov	r6, r5
 8020644:	4628      	mov	r0, r5
 8020646:	e705      	b.n	8020454 <__udivmoddi4+0xa4>
 8020648:	4606      	mov	r6, r0
 802064a:	e6e3      	b.n	8020414 <__udivmoddi4+0x64>
 802064c:	4618      	mov	r0, r3
 802064e:	e6f8      	b.n	8020442 <__udivmoddi4+0x92>
 8020650:	454b      	cmp	r3, r9
 8020652:	d2a9      	bcs.n	80205a8 <__udivmoddi4+0x1f8>
 8020654:	ebb9 0802 	subs.w	r8, r9, r2
 8020658:	eb64 0e0c 	sbc.w	lr, r4, ip
 802065c:	3801      	subs	r0, #1
 802065e:	e7a3      	b.n	80205a8 <__udivmoddi4+0x1f8>
 8020660:	4646      	mov	r6, r8
 8020662:	e7ea      	b.n	802063a <__udivmoddi4+0x28a>
 8020664:	4620      	mov	r0, r4
 8020666:	e794      	b.n	8020592 <__udivmoddi4+0x1e2>
 8020668:	4640      	mov	r0, r8
 802066a:	e7d1      	b.n	8020610 <__udivmoddi4+0x260>
 802066c:	46d0      	mov	r8, sl
 802066e:	e77b      	b.n	8020568 <__udivmoddi4+0x1b8>
 8020670:	3b02      	subs	r3, #2
 8020672:	4461      	add	r1, ip
 8020674:	e732      	b.n	80204dc <__udivmoddi4+0x12c>
 8020676:	4630      	mov	r0, r6
 8020678:	e709      	b.n	802048e <__udivmoddi4+0xde>
 802067a:	4464      	add	r4, ip
 802067c:	3802      	subs	r0, #2
 802067e:	e742      	b.n	8020506 <__udivmoddi4+0x156>

08020680 <__aeabi_idiv0>:
 8020680:	4770      	bx	lr
 8020682:	bf00      	nop

08020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8020684:	b580      	push	{r7, lr}
 8020686:	b082      	sub	sp, #8
 8020688:	af00      	add	r7, sp, #0
 802068a:	6078      	str	r0, [r7, #4]
 802068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 802068e:	687b      	ldr	r3, [r7, #4]
 8020690:	683a      	ldr	r2, [r7, #0]
 8020692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802069c:	461a      	mov	r2, r3
 802069e:	2300      	movs	r3, #0
 80206a0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
	assert(spiHandle);
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d105      	bne.n	80206b6 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x32>
 80206aa:	4b05      	ldr	r3, [pc, #20]	; (80206c0 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x3c>)
 80206ac:	4a05      	ldr	r2, [pc, #20]	; (80206c4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x40>)
 80206ae:	210c      	movs	r1, #12
 80206b0:	4805      	ldr	r0, [pc, #20]	; (80206c8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x44>)
 80206b2:	f01b fb63 	bl	803bd7c <__assert_func>
}
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	4618      	mov	r0, r3
 80206ba:	3708      	adds	r7, #8
 80206bc:	46bd      	mov	sp, r7
 80206be:	bd80      	pop	{r7, pc}
 80206c0:	0803ce3c 	.word	0x0803ce3c
 80206c4:	0803ce48 	.word	0x0803ce48
 80206c8:	0803ce74 	.word	0x0803ce74

080206cc <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80206cc:	b590      	push	{r4, r7, lr}
 80206ce:	b08b      	sub	sp, #44	; 0x2c
 80206d0:	af04      	add	r7, sp, #16
 80206d2:	60f8      	str	r0, [r7, #12]
 80206d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80206d8:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80206de:	230c      	movs	r3, #12
 80206e0:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fac5 	bl	8020c7c <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, bhy2_spi_read, bhy2_spi_write,
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	9302      	str	r3, [sp, #8]
 80206f6:	2300      	movs	r3, #0
 80206f8:	9301      	str	r3, [sp, #4]
 80206fa:	2340      	movs	r3, #64	; 0x40
 80206fc:	9300      	str	r3, [sp, #0]
 80206fe:	4b99      	ldr	r3, [pc, #612]	; (8020964 <_ZN10BHYWrapper4InitEfm+0x298>)
 8020700:	4a99      	ldr	r2, [pc, #612]	; (8020968 <_ZN10BHYWrapper4InitEfm+0x29c>)
 8020702:	499a      	ldr	r1, [pc, #616]	; (802096c <_ZN10BHYWrapper4InitEfm+0x2a0>)
 8020704:	2001      	movs	r0, #1
 8020706:	f007 fb00 	bl	8027d0a <bhy2_init>
 802070a:	4603      	mov	r3, r0
 802070c:	2b00      	cmp	r3, #0
 802070e:	bf14      	ite	ne
 8020710:	2301      	movne	r3, #1
 8020712:	2300      	moveq	r3, #0
 8020714:	b2db      	uxtb	r3, r3
 8020716:	2b00      	cmp	r3, #0
 8020718:	d001      	beq.n	802071e <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 802071a:	2301      	movs	r3, #1
 802071c:	e11d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	4618      	mov	r0, r3
 8020722:	f007 fada 	bl	8027cda <bhy2_soft_reset>
 8020726:	4603      	mov	r3, r0
 8020728:	2b00      	cmp	r3, #0
 802072a:	bf14      	ite	ne
 802072c:	2301      	movne	r3, #1
 802072e:	2300      	moveq	r3, #0
 8020730:	b2db      	uxtb	r3, r3
 8020732:	2b00      	cmp	r3, #0
 8020734:	d001      	beq.n	802073a <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 8020736:	2302      	movs	r3, #2
 8020738:	e10f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 802073a:	68fa      	ldr	r2, [r7, #12]
 802073c:	f107 0316 	add.w	r3, r7, #22
 8020740:	4611      	mov	r1, r2
 8020742:	4618      	mov	r0, r3
 8020744:	f007 f9b5 	bl	8027ab2 <bhy2_get_product_id>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	bf14      	ite	ne
 802074e:	2301      	movne	r3, #1
 8020750:	2300      	moveq	r3, #0
 8020752:	b2db      	uxtb	r3, r3
 8020754:	2b00      	cmp	r3, #0
 8020756:	d001      	beq.n	802075c <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 8020758:	2303      	movs	r3, #3
 802075a:	e0fe      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 802075c:	7dbb      	ldrb	r3, [r7, #22]
 802075e:	2b89      	cmp	r3, #137	; 0x89
 8020760:	d001      	beq.n	8020766 <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8020762:	2304      	movs	r3, #4
 8020764:	e0f9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 8020766:	7cfb      	ldrb	r3, [r7, #19]
 8020768:	68fa      	ldr	r2, [r7, #12]
 802076a:	4611      	mov	r1, r2
 802076c:	4618      	mov	r0, r3
 802076e:	f007 fa47 	bl	8027c00 <bhy2_set_host_interrupt_ctrl>
 8020772:	4603      	mov	r3, r0
 8020774:	2b00      	cmp	r3, #0
 8020776:	bf14      	ite	ne
 8020778:	2301      	movne	r3, #1
 802077a:	2300      	moveq	r3, #0
 802077c:	b2db      	uxtb	r3, r3
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8020782:	2305      	movs	r3, #5
 8020784:	e0e9      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 8020786:	68fa      	ldr	r2, [r7, #12]
 8020788:	f107 0313 	add.w	r3, r7, #19
 802078c:	4611      	mov	r1, r2
 802078e:	4618      	mov	r0, r3
 8020790:	f007 fa52 	bl	8027c38 <bhy2_get_host_interrupt_ctrl>
 8020794:	4603      	mov	r3, r0
 8020796:	2b00      	cmp	r3, #0
 8020798:	bf14      	ite	ne
 802079a:	2301      	movne	r3, #1
 802079c:	2300      	moveq	r3, #0
 802079e:	b2db      	uxtb	r3, r3
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 80207a4:	2306      	movs	r3, #6
 80207a6:	e0d8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 80207a8:	68fa      	ldr	r2, [r7, #12]
 80207aa:	7dfb      	ldrb	r3, [r7, #23]
 80207ac:	4611      	mov	r1, r2
 80207ae:	4618      	mov	r0, r3
 80207b0:	f007 fa77 	bl	8027ca2 <bhy2_set_host_intf_ctrl>
 80207b4:	4603      	mov	r3, r0
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	bf14      	ite	ne
 80207ba:	2301      	movne	r3, #1
 80207bc:	2300      	moveq	r3, #0
 80207be:	b2db      	uxtb	r3, r3
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d001      	beq.n	80207c8 <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80207c4:	2307      	movs	r3, #7
 80207c6:	e0c8      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80207c8:	68fa      	ldr	r2, [r7, #12]
 80207ca:	f107 0312 	add.w	r3, r7, #18
 80207ce:	4611      	mov	r1, r2
 80207d0:	4618      	mov	r0, r3
 80207d2:	f007 f9a2 	bl	8027b1a <bhy2_get_boot_status>
 80207d6:	4603      	mov	r3, r0
 80207d8:	2b00      	cmp	r3, #0
 80207da:	bf14      	ite	ne
 80207dc:	2301      	movne	r3, #1
 80207de:	2300      	moveq	r3, #0
 80207e0:	b2db      	uxtb	r3, r3
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d001      	beq.n	80207ea <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80207e6:	2308      	movs	r3, #8
 80207e8:	e0b7      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80207ea:	7cbb      	ldrb	r3, [r7, #18]
 80207ec:	f003 0310 	and.w	r3, r3, #16
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d101      	bne.n	80207f8 <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80207f4:	2309      	movs	r3, #9
 80207f6:	e0b0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	461a      	mov	r2, r3
 80207fc:	495c      	ldr	r1, [pc, #368]	; (8020970 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80207fe:	485d      	ldr	r0, [pc, #372]	; (8020974 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 8020800:	f007 f9c7 	bl	8027b92 <bhy2_upload_firmware_to_ram>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	bf14      	ite	ne
 802080a:	2301      	movne	r3, #1
 802080c:	2300      	moveq	r3, #0
 802080e:	b2db      	uxtb	r3, r3
 8020810:	2b00      	cmp	r3, #0
 8020812:	d001      	beq.n	8020818 <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8020814:	2309      	movs	r3, #9
 8020816:	e0a0      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020818:	68fa      	ldr	r2, [r7, #12]
 802081a:	f107 0311 	add.w	r3, r7, #17
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f007 fb59 	bl	8027ed8 <bhy2_get_error_value>
 8020826:	4603      	mov	r3, r0
 8020828:	2b00      	cmp	r3, #0
 802082a:	bf14      	ite	ne
 802082c:	2301      	movne	r3, #1
 802082e:	2300      	moveq	r3, #0
 8020830:	b2db      	uxtb	r3, r3
 8020832:	2b00      	cmp	r3, #0
 8020834:	d001      	beq.n	802083a <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 8020836:	230a      	movs	r3, #10
 8020838:	e08f      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 802083a:	7c7b      	ldrb	r3, [r7, #17]
 802083c:	2b00      	cmp	r3, #0
 802083e:	d001      	beq.n	8020844 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8020840:	230b      	movs	r3, #11
 8020842:	e08a      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	4618      	mov	r0, r3
 8020848:	f007 f9c2 	bl	8027bd0 <bhy2_boot_from_ram>
 802084c:	4603      	mov	r3, r0
 802084e:	2b00      	cmp	r3, #0
 8020850:	bf14      	ite	ne
 8020852:	2301      	movne	r3, #1
 8020854:	2300      	moveq	r3, #0
 8020856:	b2db      	uxtb	r3, r3
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 802085c:	230c      	movs	r3, #12
 802085e:	e07c      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8020860:	68fa      	ldr	r2, [r7, #12]
 8020862:	f107 0311 	add.w	r3, r7, #17
 8020866:	4611      	mov	r1, r2
 8020868:	4618      	mov	r0, r3
 802086a:	f007 fb35 	bl	8027ed8 <bhy2_get_error_value>
 802086e:	4603      	mov	r3, r0
 8020870:	2b00      	cmp	r3, #0
 8020872:	bf14      	ite	ne
 8020874:	2301      	movne	r3, #1
 8020876:	2300      	moveq	r3, #0
 8020878:	b2db      	uxtb	r3, r3
 802087a:	2b00      	cmp	r3, #0
 802087c:	d001      	beq.n	8020882 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 802087e:	230d      	movs	r3, #13
 8020880:	e06b      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8020882:	7c7b      	ldrb	r3, [r7, #17]
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 8020888:	230e      	movs	r3, #14
 802088a:	e066      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 802088c:	68fa      	ldr	r2, [r7, #12]
 802088e:	f107 0314 	add.w	r3, r7, #20
 8020892:	4611      	mov	r1, r2
 8020894:	4618      	mov	r0, r3
 8020896:	f007 f926 	bl	8027ae6 <bhy2_get_kernel_version>
 802089a:	4603      	mov	r3, r0
 802089c:	2b00      	cmp	r3, #0
 802089e:	bf14      	ite	ne
 80208a0:	2301      	movne	r3, #1
 80208a2:	2300      	moveq	r3, #0
 80208a4:	b2db      	uxtb	r3, r3
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	d001      	beq.n	80208ae <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 80208aa:	230f      	movs	r3, #15
 80208ac:	e055      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80208ae:	8abb      	ldrh	r3, [r7, #20]
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d101      	bne.n	80208b8 <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80208b4:	2310      	movs	r3, #16
 80208b6:	e050      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80208b8:	68fb      	ldr	r3, [r7, #12]
 80208ba:	f241 123c 	movw	r2, #4412	; 0x113c
 80208be:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80208c0:	68fb      	ldr	r3, [r7, #12]
 80208c2:	492d      	ldr	r1, [pc, #180]	; (8020978 <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80208c4:	2025      	movs	r0, #37	; 0x25
 80208c6:	f007 fa4a 	bl	8027d5e <bhy2_register_fifo_parse_callback>
 80208ca:	4603      	mov	r3, r0
 80208cc:	2b00      	cmp	r3, #0
 80208ce:	bf14      	ite	ne
 80208d0:	2301      	movne	r3, #1
 80208d2:	2300      	moveq	r3, #0
 80208d4:	b2db      	uxtb	r3, r3
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d001      	beq.n	80208de <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80208da:	2311      	movs	r3, #17
 80208dc:	e03d      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208e4:	4618      	mov	r0, r3
 80208e6:	f000 f9a4 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80208ea:	4604      	mov	r4, r0
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80208f2:	4618      	mov	r0, r3
 80208f4:	f000 f9aa 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80208f8:	4601      	mov	r1, r0
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	461a      	mov	r2, r3
 80208fe:	4620      	mov	r0, r4
 8020900:	f006 ff85 	bl	802780e <bhy2_get_and_process_fifo>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	bf14      	ite	ne
 802090a:	2301      	movne	r3, #1
 802090c:	2300      	moveq	r3, #0
 802090e:	b2db      	uxtb	r3, r3
 8020910:	2b00      	cmp	r3, #0
 8020912:	d001      	beq.n	8020918 <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8020914:	2312      	movs	r3, #18
 8020916:	e020      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f007 fa4e 	bl	8027dbc <bhy2_update_virtual_sensor_list>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	bf14      	ite	ne
 8020926:	2301      	movne	r3, #1
 8020928:	2300      	moveq	r3, #0
 802092a:	b2db      	uxtb	r3, r3
 802092c:	2b00      	cmp	r3, #0
 802092e:	d001      	beq.n	8020934 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8020930:	2310      	movs	r3, #16
 8020932:	e012      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	461a      	mov	r2, r3
 8020938:	6879      	ldr	r1, [r7, #4]
 802093a:	ed97 0a02 	vldr	s0, [r7, #8]
 802093e:	2025      	movs	r0, #37	; 0x25
 8020940:	f007 f896 	bl	8027a70 <bhy2_set_virt_sensor_cfg>
 8020944:	4603      	mov	r3, r0
 8020946:	2b00      	cmp	r3, #0
 8020948:	bf14      	ite	ne
 802094a:	2301      	movne	r3, #1
 802094c:	2300      	moveq	r3, #0
 802094e:	b2db      	uxtb	r3, r3
 8020950:	2b00      	cmp	r3, #0
 8020952:	d001      	beq.n	8020958 <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8020954:	2311      	movs	r3, #17
 8020956:	e000      	b.n	802095a <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 8020958:	2300      	movs	r3, #0
}
 802095a:	4618      	mov	r0, r3
 802095c:	371c      	adds	r7, #28
 802095e:	46bd      	mov	sp, r7
 8020960:	bd90      	pop	{r4, r7, pc}
 8020962:	bf00      	nop
 8020964:	08020e4d 	.word	0x08020e4d
 8020968:	08020dc9 	.word	0x08020dc9
 802096c:	08020d4d 	.word	0x08020d4d
 8020970:	0001a66c 	.word	0x0001a66c
 8020974:	0803dea0 	.word	0x0803dea0
 8020978:	08020a31 	.word	0x08020a31

0802097c <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 802097c:	b590      	push	{r4, r7, lr}
 802097e:	b085      	sub	sp, #20
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8020984:	2300      	movs	r3, #0
 8020986:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 8020988:	687a      	ldr	r2, [r7, #4]
 802098a:	f107 030f 	add.w	r3, r7, #15
 802098e:	4611      	mov	r1, r2
 8020990:	4618      	mov	r0, r3
 8020992:	f007 f96c 	bl	8027c6e <bhy2_get_interrupt_status>

	if (interruptStatus) {
 8020996:	7bfb      	ldrb	r3, [r7, #15]
 8020998:	2b00      	cmp	r3, #0
 802099a:	d028      	beq.n	80209ee <_ZN10BHYWrapper4PollEv+0x72>
		assert(
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209a2:	4618      	mov	r0, r3
 80209a4:	f000 f945 	bl	8020c32 <_ZNSt5arrayIhLj2048EE4dataEv>
 80209a8:	4604      	mov	r4, r0
 80209aa:	687b      	ldr	r3, [r7, #4]
 80209ac:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 f94b 	bl	8020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80209b6:	4601      	mov	r1, r0
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	461a      	mov	r2, r3
 80209bc:	4620      	mov	r0, r4
 80209be:	f006 ff26 	bl	802780e <bhy2_get_and_process_fifo>
 80209c2:	4603      	mov	r3, r0
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d005      	beq.n	80209d4 <_ZN10BHYWrapper4PollEv+0x58>
 80209c8:	4b0b      	ldr	r3, [pc, #44]	; (80209f8 <_ZN10BHYWrapper4PollEv+0x7c>)
 80209ca:	4a0c      	ldr	r2, [pc, #48]	; (80209fc <_ZN10BHYWrapper4PollEv+0x80>)
 80209cc:	2166      	movs	r1, #102	; 0x66
 80209ce:	480c      	ldr	r0, [pc, #48]	; (8020a00 <_ZN10BHYWrapper4PollEv+0x84>)
 80209d0:	f01b f9d4 	bl	803bd7c <__assert_func>
				bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2) == BHY2_OK);
		frameSeq++;
 80209d4:	687b      	ldr	r3, [r7, #4]
 80209d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80209da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80209de:	3301      	adds	r3, #1
 80209e0:	687a      	ldr	r2, [r7, #4]
 80209e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80209e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
		return true;
 80209ea:	2301      	movs	r3, #1
 80209ec:	e000      	b.n	80209f0 <_ZN10BHYWrapper4PollEv+0x74>
	}

	return false;
 80209ee:	2300      	movs	r3, #0
}
 80209f0:	4618      	mov	r0, r3
 80209f2:	3714      	adds	r7, #20
 80209f4:	46bd      	mov	sp, r7
 80209f6:	bd90      	pop	{r4, r7, pc}
 80209f8:	0803ce90 	.word	0x0803ce90
 80209fc:	0803cee4 	.word	0x0803cee4
 8020a00:	0803ce74 	.word	0x0803ce74

08020a04 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 8020a04:	b4b0      	push	{r4, r5, r7}
 8020a06:	b083      	sub	sp, #12
 8020a08:	af00      	add	r7, sp, #0
 8020a0a:	6078      	str	r0, [r7, #4]
 8020a0c:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020a16:	4615      	mov	r5, r2
 8020a18:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 8020a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a20:	6823      	ldr	r3, [r4, #0]
 8020a22:	602b      	str	r3, [r5, #0]
}
 8020a24:	6878      	ldr	r0, [r7, #4]
 8020a26:	370c      	adds	r7, #12
 8020a28:	46bd      	mov	sp, r7
 8020a2a:	bcb0      	pop	{r4, r5, r7}
 8020a2c:	4770      	bx	lr
	...

08020a30 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 8020a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020a34:	b08e      	sub	sp, #56	; 0x38
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	60f8      	str	r0, [r7, #12]
 8020a3a:	60b9      	str	r1, [r7, #8]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 8020a3c:	68bb      	ldr	r3, [r7, #8]
 8020a3e:	637b      	str	r3, [r7, #52]	; 0x34
	bhy2_data_quaternion qtData;

	assert(frame);
 8020a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a42:	2b00      	cmp	r3, #0
 8020a44:	d105      	bne.n	8020a52 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x22>
 8020a46:	4b40      	ldr	r3, [pc, #256]	; (8020b48 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x118>)
 8020a48:	4a40      	ldr	r2, [pc, #256]	; (8020b4c <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x11c>)
 8020a4a:	2178      	movs	r1, #120	; 0x78
 8020a4c:	4840      	ldr	r0, [pc, #256]	; (8020b50 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x120>)
 8020a4e:	f01b f995 	bl	803bd7c <__assert_func>
	auto &timestamp = frame->Timestamp;
 8020a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a54:	3308      	adds	r3, #8
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
	auto &quaternion = frame->Orientation;
 8020a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (cbInfo->data_size != CallbackDataSize)
 8020a5c:	68fb      	ldr	r3, [r7, #12]
 8020a5e:	789b      	ldrb	r3, [r3, #2]
 8020a60:	2b0b      	cmp	r3, #11
 8020a62:	d167      	bne.n	8020b34 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x104>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8020a64:	68fb      	ldr	r3, [r7, #12]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f107 0214 	add.w	r2, r7, #20
 8020a6c:	4611      	mov	r1, r2
 8020a6e:	4618      	mov	r0, r3
 8020a70:	f008 fbb9 	bl	80291e6 <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8020a74:	68fb      	ldr	r3, [r7, #12]
 8020a76:	781a      	ldrb	r2, [r3, #0]
 8020a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a7a:	741a      	strb	r2, [r3, #16]

	uint64_t timeData = *cbInfo->time_stamp * 15625; /* Store the last timestamp */
 8020a7c:	68fb      	ldr	r3, [r7, #12]
 8020a7e:	689b      	ldr	r3, [r3, #8]
 8020a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020a84:	4602      	mov	r2, r0
 8020a86:	460b      	mov	r3, r1
 8020a88:	f04f 0a00 	mov.w	sl, #0
 8020a8c:	f04f 0b00 	mov.w	fp, #0
 8020a90:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8020a94:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8020a98:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8020a9c:	4652      	mov	r2, sl
 8020a9e:	465b      	mov	r3, fp
 8020aa0:	ebb2 0800 	subs.w	r8, r2, r0
 8020aa4:	eb63 0901 	sbc.w	r9, r3, r1
 8020aa8:	f04f 0200 	mov.w	r2, #0
 8020aac:	f04f 0300 	mov.w	r3, #0
 8020ab0:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8020ab4:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8020ab8:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8020abc:	ebb2 0408 	subs.w	r4, r2, r8
 8020ac0:	eb63 0509 	sbc.w	r5, r3, r9
 8020ac4:	f04f 0200 	mov.w	r2, #0
 8020ac8:	f04f 0300 	mov.w	r3, #0
 8020acc:	00eb      	lsls	r3, r5, #3
 8020ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8020ad2:	00e2      	lsls	r2, r4, #3
 8020ad4:	4614      	mov	r4, r2
 8020ad6:	461d      	mov	r5, r3
 8020ad8:	1823      	adds	r3, r4, r0
 8020ada:	603b      	str	r3, [r7, #0]
 8020adc:	eb45 0301 	adc.w	r3, r5, r1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020ae6:	e9c7 3408 	strd	r3, r4, [r7, #32]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8020aea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020aee:	a314      	add	r3, pc, #80	; (adr r3, 8020b40 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x110>)
 8020af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020af4:	f7ff fc44 	bl	8020380 <__aeabi_uldivmod>
 8020af8:	4602      	mov	r2, r0
 8020afa:	460b      	mov	r3, r1
 8020afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020afe:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8020b00:	6a3a      	ldr	r2, [r7, #32]
 8020b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	4913      	ldr	r1, [pc, #76]	; (8020b54 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x124>)
 8020b08:	fb01 f303 	mul.w	r3, r1, r3
 8020b0c:	1ad2      	subs	r2, r2, r3
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	605a      	str	r2, [r3, #4]
	quaternion.X = qtData.x;
 8020b12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8020b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b18:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8020b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b20:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8020b22:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8020b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b28:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8020b2a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8020b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b30:	80da      	strh	r2, [r3, #6]
 8020b32:	e000      	b.n	8020b36 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x106>
		return;
 8020b34:	bf00      	nop
	/*
	 quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
	 / 3.141592653589793f; */
}
 8020b36:	3738      	adds	r7, #56	; 0x38
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020b3e:	bf00      	nop
 8020b40:	3b9aca00 	.word	0x3b9aca00
 8020b44:	00000000 	.word	0x00000000
 8020b48:	0803cefc 	.word	0x0803cefc
 8020b4c:	0803cf04 	.word	0x0803cf04
 8020b50:	0803ce74 	.word	0x0803ce74
 8020b54:	3b9aca00 	.word	0x3b9aca00

08020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>:

void BHYWrapper::BHYFrame::SerializeTo(uint8_t *dest, uint8_t *size) {
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b086      	sub	sp, #24
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]
	assert(dest);
 8020b64:	68bb      	ldr	r3, [r7, #8]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d105      	bne.n	8020b76 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x1e>
 8020b6a:	4b26      	ldr	r3, [pc, #152]	; (8020c04 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xac>)
 8020b6c:	4a26      	ldr	r2, [pc, #152]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b6e:	2191      	movs	r1, #145	; 0x91
 8020b70:	4826      	ldr	r0, [pc, #152]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b72:	f01b f903 	bl	803bd7c <__assert_func>
	assert(size);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d105      	bne.n	8020b88 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0x30>
 8020b7c:	4b24      	ldr	r3, [pc, #144]	; (8020c10 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb8>)
 8020b7e:	4a22      	ldr	r2, [pc, #136]	; (8020c08 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb0>)
 8020b80:	2192      	movs	r1, #146	; 0x92
 8020b82:	4822      	ldr	r0, [pc, #136]	; (8020c0c <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_+0xb4>)
 8020b84:	f01b f8fa 	bl	803bd7c <__assert_func>

	uint8_t *ptr = dest;
 8020b88:	68bb      	ldr	r3, [r7, #8]
 8020b8a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.X;
 8020b8c:	68fb      	ldr	r3, [r7, #12]
 8020b8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020b92:	697b      	ldr	r3, [r7, #20]
 8020b94:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020b96:	697b      	ldr	r3, [r7, #20]
 8020b98:	3302      	adds	r3, #2
 8020b9a:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Y;
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	3302      	adds	r3, #2
 8020baa:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.Z;
 8020bac:	68fb      	ldr	r3, [r7, #12]
 8020bae:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	3302      	adds	r3, #2
 8020bba:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<int16_t*>(ptr) = Orientation.W;
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	801a      	strh	r2, [r3, #0]
	ptr += sizeof(int16_t);
 8020bc6:	697b      	ldr	r3, [r7, #20]
 8020bc8:	3302      	adds	r3, #2
 8020bca:	617b      	str	r3, [r7, #20]
	/*
	 *reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
	 ptr += sizeof(float);
	 */

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8020bcc:	68fb      	ldr	r3, [r7, #12]
 8020bce:	689a      	ldr	r2, [r3, #8]
 8020bd0:	697b      	ldr	r3, [r7, #20]
 8020bd2:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020bd4:	697b      	ldr	r3, [r7, #20]
 8020bd6:	3304      	adds	r3, #4
 8020bd8:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8020bda:	68fb      	ldr	r3, [r7, #12]
 8020bdc:	68da      	ldr	r2, [r3, #12]
 8020bde:	697b      	ldr	r3, [r7, #20]
 8020be0:	601a      	str	r2, [r3, #0]
	ptr += sizeof(uint32_t);
 8020be2:	697b      	ldr	r3, [r7, #20]
 8020be4:	3304      	adds	r3, #4
 8020be6:	617b      	str	r3, [r7, #20]

	*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8020be8:	68fb      	ldr	r3, [r7, #12]
 8020bea:	7c1a      	ldrb	r2, [r3, #16]
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	701a      	strb	r2, [r3, #0]
	ptr += sizeof(uint8_t);
 8020bf0:	697b      	ldr	r3, [r7, #20]
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	617b      	str	r3, [r7, #20]

	*size = Size;
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2211      	movs	r2, #17
 8020bfa:	701a      	strb	r2, [r3, #0]
}
 8020bfc:	bf00      	nop
 8020bfe:	3718      	adds	r7, #24
 8020c00:	46bd      	mov	sp, r7
 8020c02:	bd80      	pop	{r7, pc}
 8020c04:	0803cf50 	.word	0x0803cf50
 8020c08:	0803cf58 	.word	0x0803cf58
 8020c0c:	0803ce74 	.word	0x0803ce74
 8020c10:	0803cf94 	.word	0x0803cf94

08020c14 <_ZNK10BHYWrapper6GetSeqEv>:

size_t BHYWrapper::GetSeq() const {
 8020c14:	b480      	push	{r7}
 8020c16:	b083      	sub	sp, #12
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
	return frameSeq;
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8020c22:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
}
 8020c26:	4618      	mov	r0, r3
 8020c28:	370c      	adds	r7, #12
 8020c2a:	46bd      	mov	sp, r7
 8020c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c30:	4770      	bx	lr

08020c32 <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8020c32:	b580      	push	{r7, lr}
 8020c34:	b082      	sub	sp, #8
 8020c36:	af00      	add	r7, sp, #0
 8020c38:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	f000 f811 	bl	8020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8020c42:	4603      	mov	r3, r0
 8020c44:	4618      	mov	r0, r3
 8020c46:	3708      	adds	r7, #8
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}

08020c4c <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8020c4c:	b480      	push	{r7}
 8020c4e:	b083      	sub	sp, #12
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
 8020c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c58:	4618      	mov	r0, r3
 8020c5a:	370c      	adds	r7, #12
 8020c5c:	46bd      	mov	sp, r7
 8020c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c62:	4770      	bx	lr

08020c64 <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8020c64:	b480      	push	{r7}
 8020c66:	b083      	sub	sp, #12
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8020c6c:	687b      	ldr	r3, [r7, #4]
 8020c6e:	4618      	mov	r0, r3
 8020c70:	370c      	adds	r7, #12
 8020c72:	46bd      	mov	sp, r7
 8020c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c78:	4770      	bx	lr
	...

08020c7c <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8020c7c:	b480      	push	{r7}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8020c84:	4a04      	ldr	r2, [pc, #16]	; (8020c98 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8020c86:	687b      	ldr	r3, [r7, #4]
 8020c88:	6013      	str	r3, [r2, #0]
}
 8020c8a:	bf00      	nop
 8020c8c:	370c      	adds	r7, #12
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop
 8020c98:	24000184 	.word	0x24000184

08020c9c <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8020c9c:	b580      	push	{r7, lr}
 8020c9e:	b082      	sub	sp, #8
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	460b      	mov	r3, r1
 8020ca6:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	HAL_SPI_Transmit_DMA( mSPI, data, size );
 8020ca8:	4b11      	ldr	r3, [pc, #68]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020caa:	681b      	ldr	r3, [r3, #0]
 8020cac:	887a      	ldrh	r2, [r7, #2]
 8020cae:	6879      	ldr	r1, [r7, #4]
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	f012 fbf9 	bl	80334a8 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020cb6:	4b0e      	ldr	r3, [pc, #56]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	4618      	mov	r0, r3
 8020cbc:	f013 fa82 	bl	80341c4 <HAL_SPI_GetState>
 8020cc0:	4603      	mov	r3, r0
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	bf14      	ite	ne
 8020cc6:	2301      	movne	r3, #1
 8020cc8:	2300      	moveq	r3, #0
 8020cca:	b2db      	uxtb	r3, r3
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d000      	beq.n	8020cd2 <_Z11spiTransmitPht+0x36>
 8020cd0:	e7f1      	b.n	8020cb6 <_Z11spiTransmitPht+0x1a>
	//HAL_SPI_Transmit(mSPI, data, size, 5);
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020cd2:	4b07      	ldr	r3, [pc, #28]	; (8020cf0 <_Z11spiTransmitPht+0x54>)
 8020cd4:	681b      	ldr	r3, [r3, #0]
 8020cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	bf0c      	ite	eq
 8020cde:	2301      	moveq	r3, #1
 8020ce0:	2300      	movne	r3, #0
 8020ce2:	b2db      	uxtb	r3, r3
 8020ce4:	b25b      	sxtb	r3, r3
  }
 8020ce6:	4618      	mov	r0, r3
 8020ce8:	3708      	adds	r7, #8
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}
 8020cee:	bf00      	nop
 8020cf0:	24000184 	.word	0x24000184

08020cf4 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8020cf4:	b580      	push	{r7, lr}
 8020cf6:	b082      	sub	sp, #8
 8020cf8:	af00      	add	r7, sp, #0
 8020cfa:	6078      	str	r0, [r7, #4]
 8020cfc:	460b      	mov	r3, r1
 8020cfe:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
	//HAL_SPI_Receive(mSPI, data, size,  5);
	HAL_SPI_Receive_DMA( mSPI, data, size );
 8020d00:	4b11      	ldr	r3, [pc, #68]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	887a      	ldrh	r2, [r7, #2]
 8020d06:	6879      	ldr	r1, [r7, #4]
 8020d08:	4618      	mov	r0, r3
 8020d0a:	f012 fd17 	bl	803373c <HAL_SPI_Receive_DMA>
  //Ожидать завершения приема
	while (HAL_SPI_GetState(mSPI) != HAL_SPI_STATE_READY);
 8020d0e:	4b0e      	ldr	r3, [pc, #56]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d10:	681b      	ldr	r3, [r3, #0]
 8020d12:	4618      	mov	r0, r3
 8020d14:	f013 fa56 	bl	80341c4 <HAL_SPI_GetState>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b01      	cmp	r3, #1
 8020d1c:	bf14      	ite	ne
 8020d1e:	2301      	movne	r3, #1
 8020d20:	2300      	moveq	r3, #0
 8020d22:	b2db      	uxtb	r3, r3
 8020d24:	2b00      	cmp	r3, #0
 8020d26:	d000      	beq.n	8020d2a <_Z9spiReceivPht+0x36>
 8020d28:	e7f1      	b.n	8020d0e <_Z9spiReceivPht+0x1a>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8020d2a:	4b07      	ldr	r3, [pc, #28]	; (8020d48 <_Z9spiReceivPht+0x54>)
 8020d2c:	681b      	ldr	r3, [r3, #0]
 8020d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	bf0c      	ite	eq
 8020d36:	2301      	moveq	r3, #1
 8020d38:	2300      	movne	r3, #0
 8020d3a:	b2db      	uxtb	r3, r3
 8020d3c:	b25b      	sxtb	r3, r3
  }
 8020d3e:	4618      	mov	r0, r3
 8020d40:	3708      	adds	r7, #8
 8020d42:	46bd      	mov	sp, r7
 8020d44:	bd80      	pop	{r7, pc}
 8020d46:	bf00      	nop
 8020d48:	24000184 	.word	0x24000184

08020d4c <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020d4c:	b580      	push	{r7, lr}
 8020d4e:	b084      	sub	sp, #16
 8020d50:	af00      	add	r7, sp, #0
 8020d52:	60b9      	str	r1, [r7, #8]
 8020d54:	607a      	str	r2, [r7, #4]
 8020d56:	603b      	str	r3, [r7, #0]
 8020d58:	4603      	mov	r3, r0
 8020d5a:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  //HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020d5c:	4b19      	ldr	r3, [pc, #100]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020d62:	619a      	str	r2, [r3, #24]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8020d64:	f107 030f 	add.w	r3, r7, #15
 8020d68:	2101      	movs	r1, #1
 8020d6a:	4618      	mov	r0, r3
 8020d6c:	f7ff ff96 	bl	8020c9c <_Z11spiTransmitPht>
 8020d70:	4603      	mov	r3, r0
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	bf0c      	ite	eq
 8020d76:	2301      	moveq	r3, #1
 8020d78:	2300      	movne	r3, #0
 8020d7a:	b2db      	uxtb	r3, r3
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	d002      	beq.n	8020d86 <_Z13bhy2_spi_readhPhmPv+0x3a>
    return IMU_ERR_SPI;
 8020d80:	f06f 0301 	mvn.w	r3, #1
 8020d84:	e019      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	b29b      	uxth	r3, r3
 8020d8a:	4619      	mov	r1, r3
 8020d8c:	68b8      	ldr	r0, [r7, #8]
 8020d8e:	f7ff ffb1 	bl	8020cf4 <_Z9spiReceivPht>
 8020d92:	4603      	mov	r3, r0
 8020d94:	2b00      	cmp	r3, #0
 8020d96:	bf14      	ite	ne
 8020d98:	2301      	movne	r3, #1
 8020d9a:	2300      	moveq	r3, #0
 8020d9c:	b2db      	uxtb	r3, r3
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d005      	beq.n	8020dae <_Z13bhy2_spi_readhPhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020da2:	4b08      	ldr	r3, [pc, #32]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020da4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020da8:	619a      	str	r2, [r3, #24]
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8020daa:	2300      	movs	r3, #0
 8020dac:	e005      	b.n	8020dba <_Z13bhy2_spi_readhPhmPv+0x6e>
  }
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020dae:	4b05      	ldr	r3, [pc, #20]	; (8020dc4 <_Z13bhy2_spi_readhPhmPv+0x78>)
 8020db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020db4:	619a      	str	r2, [r3, #24]
  //Выставляем CS в 1


  return IMU_ERR_SPI;
 8020db6:	f06f 0301 	mvn.w	r3, #1
  }
 8020dba:	4618      	mov	r0, r3
 8020dbc:	3710      	adds	r7, #16
 8020dbe:	46bd      	mov	sp, r7
 8020dc0:	bd80      	pop	{r7, pc}
 8020dc2:	bf00      	nop
 8020dc4:	58021000 	.word	0x58021000

08020dc8 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	b084      	sub	sp, #16
 8020dcc:	af00      	add	r7, sp, #0
 8020dce:	60b9      	str	r1, [r7, #8]
 8020dd0:	607a      	str	r2, [r7, #4]
 8020dd2:	603b      	str	r3, [r7, #0]
 8020dd4:	4603      	mov	r3, r0
 8020dd6:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	2b40      	cmp	r3, #64	; 0x40
 8020ddc:	d902      	bls.n	8020de4 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8020dde:	f06f 0303 	mvn.w	r3, #3
 8020de2:	e028      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr; //записываем в старший бит адреса 0 для записи данных
 8020de4:	4a16      	ldr	r2, [pc, #88]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020de6:	7bfb      	ldrb	r3, [r7, #15]
 8020de8:	7013      	strb	r3, [r2, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8020dea:	4b16      	ldr	r3, [pc, #88]	; (8020e44 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8020dec:	687a      	ldr	r2, [r7, #4]
 8020dee:	68b9      	ldr	r1, [r7, #8]
 8020df0:	4618      	mov	r0, r3
 8020df2:	f01b f82d 	bl	803be50 <memcpy>
  //memcpy( buffer + 1, reg_data, length );
  //Выставляем CS в 0
  //GPIOA->BSRR = (uint32_t)SPI_CS_Pin << (16U);
  GPIOE->BSRR = (uint32_t)IMU_CS_Pin << (16U);
 8020df6:	4b14      	ldr	r3, [pc, #80]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020df8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020dfc:	619a      	str	r2, [r3, #24]
  //if( spiTransmit( buffer + 1, length + 1 ) )
  if( spiTransmit( buffer, length + 1) )
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	3301      	adds	r3, #1
 8020e04:	b29b      	uxth	r3, r3
 8020e06:	4619      	mov	r1, r3
 8020e08:	480d      	ldr	r0, [pc, #52]	; (8020e40 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8020e0a:	f7ff ff47 	bl	8020c9c <_Z11spiTransmitPht>
 8020e0e:	4603      	mov	r3, r0
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	bf14      	ite	ne
 8020e14:	2301      	movne	r3, #1
 8020e16:	2300      	moveq	r3, #0
 8020e18:	b2db      	uxtb	r3, r3
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d005      	beq.n	8020e2a <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
	  //Выставляем CS в 1
	  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
	  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e1e:	4b0a      	ldr	r3, [pc, #40]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e24:	619a      	str	r2, [r3, #24]
	  return IMU_ERR_OK;
 8020e26:	2300      	movs	r3, #0
 8020e28:	e005      	b.n	8020e36 <_Z14bhy2_spi_writehPKhmPv+0x6e>
  }
  //Выставляем CS в 1
  //SPI_CS_GPIO_Port->BSRR = (uint32_t)SPI_CS_Pin;
  IMU_CS_GPIO_Port->BSRR = (uint32_t)IMU_CS_Pin;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8020e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8020e30:	619a      	str	r2, [r3, #24]
  return IMU_ERR_I2C;
 8020e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8020e36:	4618      	mov	r0, r3
 8020e38:	3710      	adds	r7, #16
 8020e3a:	46bd      	mov	sp, r7
 8020e3c:	bd80      	pop	{r7, pc}
 8020e3e:	bf00      	nop
 8020e40:	24000188 	.word	0x24000188
 8020e44:	24000189 	.word	0x24000189
 8020e48:	58021000 	.word	0x58021000

08020e4c <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8020e4c:	b580      	push	{r7, lr}
 8020e4e:	b082      	sub	sp, #8
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	6078      	str	r0, [r7, #4]
 8020e54:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020e5c:	d308      	bcc.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	4a0b      	ldr	r2, [pc, #44]	; (8020e90 <_Z13bhy2_delay_usmPv+0x44>)
 8020e62:	fba2 2303 	umull	r2, r3, r2, r3
 8020e66:	099b      	lsrs	r3, r3, #6
 8020e68:	4618      	mov	r0, r3
 8020e6a:	f009 ff19 	bl	802aca0 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8020e6e:	e00b      	b.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	1e5a      	subs	r2, r3, #1
 8020e74:	607a      	str	r2, [r7, #4]
 8020e76:	2b00      	cmp	r3, #0
 8020e78:	bf14      	ite	ne
 8020e7a:	2301      	movne	r3, #1
 8020e7c:	2300      	moveq	r3, #0
 8020e7e:	b2db      	uxtb	r3, r3
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d001      	beq.n	8020e88 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8020e84:	bf00      	nop
    while( us-- ) {
 8020e86:	e7f3      	b.n	8020e70 <_Z13bhy2_delay_usmPv+0x24>
  }
 8020e88:	bf00      	nop
 8020e8a:	3708      	adds	r7, #8
 8020e8c:	46bd      	mov	sp, r7
 8020e8e:	bd80      	pop	{r7, pc}
 8020e90:	10624dd3 	.word	0x10624dd3

08020e94 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8020e94:	b480      	push	{r7}
 8020e96:	b083      	sub	sp, #12
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	bfb8      	it	lt
 8020ea2:	425b      	neglt	r3, r3
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	370c      	adds	r7, #12
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr

08020eb0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
 8020eb8:	6039      	str	r1, [r7, #0]
 8020eba:	683b      	ldr	r3, [r7, #0]
 8020ebc:	4618      	mov	r0, r3
 8020ebe:	370c      	adds	r7, #12
 8020ec0:	46bd      	mov	sp, r7
 8020ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ec6:	4770      	bx	lr

08020ec8 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8020ec8:	b480      	push	{r7}
 8020eca:	b083      	sub	sp, #12
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ed6:	d205      	bcs.n	8020ee4 <_ZSt16__deque_buf_sizej+0x1c>
 8020ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8020ee2:	e000      	b.n	8020ee6 <_ZSt16__deque_buf_sizej+0x1e>
 8020ee4:	2301      	movs	r3, #1
 8020ee6:	4618      	mov	r0, r3
 8020ee8:	370c      	adds	r7, #12
 8020eea:	46bd      	mov	sp, r7
 8020eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef0:	4770      	bx	lr

08020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>:
		static constexpr Type Async = 1;
		static constexpr Type Info = 2;
		static constexpr Type SetPeriod = 3;
		static constexpr Type ResetQueue = 4;

		static uint8_t Serialize(Type mode) {
 8020ef2:	b480      	push	{r7}
 8020ef4:	b083      	sub	sp, #12
 8020ef6:	af00      	add	r7, sp, #0
 8020ef8:	4603      	mov	r3, r0
 8020efa:	71fb      	strb	r3, [r7, #7]
			return mode;
 8020efc:	79fb      	ldrb	r3, [r7, #7]
		}
 8020efe:	4618      	mov	r0, r3
 8020f00:	370c      	adds	r7, #12
 8020f02:	46bd      	mov	sp, r7
 8020f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f08:	4770      	bx	lr

08020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>:
		static Type Deserialize(uint8_t val) {
 8020f0a:	b480      	push	{r7}
 8020f0c:	b083      	sub	sp, #12
 8020f0e:	af00      	add	r7, sp, #0
 8020f10:	4603      	mov	r3, r0
 8020f12:	71fb      	strb	r3, [r7, #7]
			return val;
 8020f14:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f16:	4618      	mov	r0, r3
 8020f18:	370c      	adds	r7, #12
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f20:	4770      	bx	lr

08020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>:
		static constexpr Type NACK = 2;
		static constexpr Type Unknown = 3;
		static constexpr Type BadPeriod = 4;
		static constexpr Type QueueFull = 5;

		static uint8_t Serialize(Type error) {
 8020f22:	b480      	push	{r7}
 8020f24:	b083      	sub	sp, #12
 8020f26:	af00      	add	r7, sp, #0
 8020f28:	4603      	mov	r3, r0
 8020f2a:	71fb      	strb	r3, [r7, #7]
			return error;
 8020f2c:	79fb      	ldrb	r3, [r7, #7]
		}
 8020f2e:	4618      	mov	r0, r3
 8020f30:	370c      	adds	r7, #12
 8020f32:	46bd      	mov	sp, r7
 8020f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f38:	4770      	bx	lr
	...

08020f3c <_ZN11QueueSender4Info11SerializeToEPPh>:
		uint16_t NumRequests;
		uint16_t NumResponces;

		static constexpr size_t Size = 2 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8020f3c:	b580      	push	{r7, lr}
 8020f3e:	b082      	sub	sp, #8
 8020f40:	af00      	add	r7, sp, #0
 8020f42:	6078      	str	r0, [r7, #4]
 8020f44:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	2b00      	cmp	r3, #0
 8020f4a:	d105      	bne.n	8020f58 <_ZN11QueueSender4Info11SerializeToEPPh+0x1c>
 8020f4c:	4b13      	ldr	r3, [pc, #76]	; (8020f9c <_ZN11QueueSender4Info11SerializeToEPPh+0x60>)
 8020f4e:	4a14      	ldr	r2, [pc, #80]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f50:	21a9      	movs	r1, #169	; 0xa9
 8020f52:	4814      	ldr	r0, [pc, #80]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f54:	f01a ff12 	bl	803bd7c <__assert_func>
			assert(*ptr);
 8020f58:	683b      	ldr	r3, [r7, #0]
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d105      	bne.n	8020f6c <_ZN11QueueSender4Info11SerializeToEPPh+0x30>
 8020f60:	4b11      	ldr	r3, [pc, #68]	; (8020fa8 <_ZN11QueueSender4Info11SerializeToEPPh+0x6c>)
 8020f62:	4a0f      	ldr	r2, [pc, #60]	; (8020fa0 <_ZN11QueueSender4Info11SerializeToEPPh+0x64>)
 8020f64:	21aa      	movs	r1, #170	; 0xaa
 8020f66:	480f      	ldr	r0, [pc, #60]	; (8020fa4 <_ZN11QueueSender4Info11SerializeToEPPh+0x68>)
 8020f68:	f01a ff08 	bl	803bd7c <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = NumRequests;
 8020f6c:	683b      	ldr	r3, [r7, #0]
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	687a      	ldr	r2, [r7, #4]
 8020f72:	8812      	ldrh	r2, [r2, #0]
 8020f74:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f76:	683b      	ldr	r3, [r7, #0]
 8020f78:	681b      	ldr	r3, [r3, #0]
 8020f7a:	1c9a      	adds	r2, r3, #2
 8020f7c:	683b      	ldr	r3, [r7, #0]
 8020f7e:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumResponces;
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	687a      	ldr	r2, [r7, #4]
 8020f86:	8852      	ldrh	r2, [r2, #2]
 8020f88:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 8020f8a:	683b      	ldr	r3, [r7, #0]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	1c9a      	adds	r2, r3, #2
 8020f90:	683b      	ldr	r3, [r7, #0]
 8020f92:	601a      	str	r2, [r3, #0]
		}
 8020f94:	bf00      	nop
 8020f96:	3708      	adds	r7, #8
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}
 8020f9c:	0803cf9c 	.word	0x0803cf9c
 8020fa0:	0803cfa0 	.word	0x0803cfa0
 8020fa4:	0803cfd0 	.word	0x0803cfd0
 8020fa8:	0803cfec 	.word	0x0803cfec

08020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>:
class FixedQueue {
 8020fac:	b480      	push	{r7}
 8020fae:	b083      	sub	sp, #12
 8020fb0:	af00      	add	r7, sp, #0
 8020fb2:	6078      	str	r0, [r7, #4]
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	601a      	str	r2, [r3, #0]
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	605a      	str	r2, [r3, #4]
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	609a      	str	r2, [r3, #8]
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	4618      	mov	r0, r3
 8020fca:	370c      	adds	r7, #12
 8020fcc:	46bd      	mov	sp, r7
 8020fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd2:	4770      	bx	lr

08020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>:
 8020fd4:	b480      	push	{r7}
 8020fd6:	b083      	sub	sp, #12
 8020fd8:	af00      	add	r7, sp, #0
 8020fda:	6078      	str	r0, [r7, #4]
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	2200      	movs	r2, #0
 8020fe0:	601a      	str	r2, [r3, #0]
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	2200      	movs	r2, #0
 8020fe6:	605a      	str	r2, [r3, #4]
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	2200      	movs	r2, #0
 8020fec:	609a      	str	r2, [r3, #8]
 8020fee:	687b      	ldr	r3, [r7, #4]
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	370c      	adds	r7, #12
 8020ff4:	46bd      	mov	sp, r7
 8020ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffa:	4770      	bx	lr

08020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>:
	};

public:
	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS, uint8_t sendPeriod) :
 8020ffc:	b580      	push	{r7, lr}
 8020ffe:	b084      	sub	sp, #16
 8021000:	af00      	add	r7, sp, #0
 8021002:	60f8      	str	r0, [r7, #12]
 8021004:	60b9      	str	r1, [r7, #8]
 8021006:	607a      	str	r2, [r7, #4]
 8021008:	70fb      	strb	r3, [r7, #3]
			UartHandle { uart }, TimeoutS { timeoutS }, SendPeriod { sendPeriod } {
 802100a:	68fb      	ldr	r3, [r7, #12]
 802100c:	4618      	mov	r0, r3
 802100e:	f7ff ffcd 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8021012:	68fa      	ldr	r2, [r7, #12]
 8021014:	4b22      	ldr	r3, [pc, #136]	; (80210a0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa4>)
 8021016:	4413      	add	r3, r2
 8021018:	4618      	mov	r0, r3
 802101a:	f7ff ffdb 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 802101e:	68fb      	ldr	r3, [r7, #12]
 8021020:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021024:	2200      	movs	r2, #0
 8021026:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 802102a:	68fb      	ldr	r3, [r7, #12]
 802102c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021030:	2200      	movs	r2, #0
 8021032:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802103c:	461a      	mov	r2, r3
 802103e:	68bb      	ldr	r3, [r7, #8]
 8021040:	f8c2 37e8 	str.w	r3, [r2, #2024]	; 0x7e8
 8021044:	68fb      	ldr	r3, [r7, #12]
 8021046:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802104a:	461a      	mov	r2, r3
 802104c:	687b      	ldr	r3, [r7, #4]
 802104e:	f8c2 37ec 	str.w	r3, [r2, #2028]	; 0x7ec
 8021052:	68fb      	ldr	r3, [r7, #12]
 8021054:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021058:	461a      	mov	r2, r3
 802105a:	78fb      	ldrb	r3, [r7, #3]
 802105c:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
 8021060:	68fb      	ldr	r3, [r7, #12]
 8021062:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021066:	2200      	movs	r2, #0
 8021068:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 802106c:	68fb      	ldr	r3, [r7, #12]
 802106e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021072:	2201      	movs	r2, #1
 8021074:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8021078:	68fb      	ldr	r3, [r7, #12]
 802107a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802107e:	2200      	movs	r2, #0
 8021080:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		assert(uart != NULL);
 8021084:	68bb      	ldr	r3, [r7, #8]
 8021086:	2b00      	cmp	r3, #0
 8021088:	d105      	bne.n	8021096 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0x9a>
 802108a:	4b06      	ldr	r3, [pc, #24]	; (80210a4 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xa8>)
 802108c:	4a06      	ldr	r2, [pc, #24]	; (80210a8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xac>)
 802108e:	21b9      	movs	r1, #185	; 0xb9
 8021090:	4806      	ldr	r0, [pc, #24]	; (80210ac <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh+0xb0>)
 8021092:	f01a fe73 	bl	803bd7c <__assert_func>
	}
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	4618      	mov	r0, r3
 802109a:	3710      	adds	r7, #16
 802109c:	46bd      	mov	sp, r7
 802109e:	bd80      	pop	{r7, pc}
 80210a0:	00020b7c 	.word	0x00020b7c
 80210a4:	0803cff4 	.word	0x0803cff4
 80210a8:	0803d004 	.word	0x0803d004
 80210ac:	0803cfd0 	.word	0x0803cfd0

080210b0 <_ZN11QueueSender10AddRequestERK7Request>:

	void AddRequest(const Request &request) {
 80210b0:	b590      	push	{r4, r7, lr}
 80210b2:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 80210b6:	af00      	add	r7, sp, #0
 80210b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210bc:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80210c0:	6018      	str	r0, [r3, #0]
 80210c2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210c6:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80210ca:	6019      	str	r1, [r3, #0]
		switch (MessageMode::Deserialize(request.MetaInfo)) {
 80210cc:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80210d0:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80210da:	4618      	mov	r0, r3
 80210dc:	f7ff ff15 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 80210e0:	4603      	mov	r3, r0
 80210e2:	2b04      	cmp	r3, #4
 80210e4:	f200 80aa 	bhi.w	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
 80210e8:	a201      	add	r2, pc, #4	; (adr r2, 80210f0 <_ZN11QueueSender10AddRequestERK7Request+0x40>)
 80210ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210ee:	bf00      	nop
 80210f0:	08021141 	.word	0x08021141
 80210f4:	08021105 	.word	0x08021105
 80210f8:	08021197 	.word	0x08021197
 80210fc:	080211cb 	.word	0x080211cb
 8021100:	08021207 	.word	0x08021207
		case MessageMode::Async:
			Responces.Push(CreateAsyncResponce(request));
 8021104:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021108:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802110c:	681b      	ldr	r3, [r3, #0]
 802110e:	4c4e      	ldr	r4, [pc, #312]	; (8021248 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 8021110:	441c      	add	r4, r3
 8021112:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021116:	f5a3 6084 	sub.w	r0, r3, #1056	; 0x420
 802111a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802111e:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 8021122:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021126:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802112a:	6812      	ldr	r2, [r2, #0]
 802112c:	6819      	ldr	r1, [r3, #0]
 802112e:	f000 fcd9 	bl	8021ae4 <_ZN11QueueSender19CreateAsyncResponceERK7Request>
 8021132:	f107 0308 	add.w	r3, r7, #8
 8021136:	4619      	mov	r1, r3
 8021138:	4620      	mov	r0, r4
 802113a:	f002 f9eb 	bl	8023514 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 802113e:	e07d      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::Sync:
			if (HasPriorityRequest)
 8021140:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021144:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021148:	681b      	ldr	r3, [r3, #0]
 802114a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802114e:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 8021152:	2b00      	cmp	r3, #0
 8021154:	d171      	bne.n	802123a <_ZN11QueueSender10AddRequestERK7Request+0x18a>
				break;

			PriorityRequest = request;
 8021156:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802115a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802115e:	681b      	ldr	r3, [r3, #0]
 8021160:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021164:	4619      	mov	r1, r3
 8021166:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802116a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 802116e:	681a      	ldr	r2, [r3, #0]
 8021170:	f501 63bb 	add.w	r3, r1, #1496	; 0x5d8
 8021174:	4611      	mov	r1, r2
 8021176:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802117a:	4618      	mov	r0, r3
 802117c:	f01a fe68 	bl	803be50 <memcpy>
			HasPriorityRequest = true;
 8021180:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021184:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021188:	681b      	ldr	r3, [r3, #0]
 802118a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802118e:	2201      	movs	r2, #1
 8021190:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			break;
 8021194:	e052      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>

		case MessageMode::Info:
			Responces.Push(CreateInfoResponce());
 8021196:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802119a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802119e:	681b      	ldr	r3, [r3, #0]
 80211a0:	4c29      	ldr	r4, [pc, #164]	; (8021248 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 80211a2:	441c      	add	r4, r3
 80211a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211a8:	f5a3 7246 	sub.w	r2, r3, #792	; 0x318
 80211ac:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211b0:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211b4:	6819      	ldr	r1, [r3, #0]
 80211b6:	4610      	mov	r0, r2
 80211b8:	f000 fba1 	bl	80218fe <_ZNK11QueueSender18CreateInfoResponceEv>
 80211bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80211c0:	4619      	mov	r1, r3
 80211c2:	4620      	mov	r0, r4
 80211c4:	f002 f9a6 	bl	8023514 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 80211c8:	e038      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::SetPeriod:
			Responces.Push(ProcessSetPeriodRequest(request));
 80211ca:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211ce:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	4c1c      	ldr	r4, [pc, #112]	; (8021248 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 80211d6:	441c      	add	r4, r3
 80211d8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211dc:	f5a3 7004 	sub.w	r0, r3, #528	; 0x210
 80211e0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211e4:	f5a3 6285 	sub.w	r2, r3, #1064	; 0x428
 80211e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80211ec:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 80211f0:	6812      	ldr	r2, [r2, #0]
 80211f2:	6819      	ldr	r1, [r3, #0]
 80211f4:	f000 fc0a 	bl	8021a0c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>
 80211f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80211fc:	4619      	mov	r1, r3
 80211fe:	4620      	mov	r0, r4
 8021200:	f002 f988 	bl	8023514 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 8021204:	e01a      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
		case MessageMode::ResetQueue:
			Responces.Push(ResetQueue());
 8021206:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802120a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	4c0d      	ldr	r4, [pc, #52]	; (8021248 <_ZN11QueueSender10AddRequestERK7Request+0x198>)
 8021212:	441c      	add	r4, r3
 8021214:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021218:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 802121c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8021220:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8021224:	6819      	ldr	r1, [r3, #0]
 8021226:	4610      	mov	r0, r2
 8021228:	f000 fbaf 	bl	802198a <_ZN11QueueSender10ResetQueueEv>
 802122c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8021230:	4619      	mov	r1, r3
 8021232:	4620      	mov	r0, r4
 8021234:	f002 f96e 	bl	8023514 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>
			break;
 8021238:	e000      	b.n	802123c <_ZN11QueueSender10AddRequestERK7Request+0x18c>
				break;
 802123a:	bf00      	nop
		}
	}
 802123c:	bf00      	nop
 802123e:	f207 472c 	addw	r7, r7, #1068	; 0x42c
 8021242:	46bd      	mov	sp, r7
 8021244:	bd90      	pop	{r4, r7, pc}
 8021246:	bf00      	nop
 8021248:	00020b7c 	.word	0x00020b7c

0802124c <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 802124c:	b580      	push	{r7, lr}
 802124e:	b082      	sub	sp, #8
 8021250:	af00      	add	r7, sp, #0
 8021252:	6078      	str	r0, [r7, #4]
		return !Responces.Empty();
 8021254:	687a      	ldr	r2, [r7, #4]
 8021256:	4b06      	ldr	r3, [pc, #24]	; (8021270 <_ZNK11QueueSender11HasResponceEv+0x24>)
 8021258:	4413      	add	r3, r2
 802125a:	4618      	mov	r0, r3
 802125c:	f002 f99c 	bl	8023598 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>
 8021260:	4603      	mov	r3, r0
 8021262:	f083 0301 	eor.w	r3, r3, #1
 8021266:	b2db      	uxtb	r3, r3
	}
 8021268:	4618      	mov	r0, r3
 802126a:	3708      	adds	r7, #8
 802126c:	46bd      	mov	sp, r7
 802126e:	bd80      	pop	{r7, pc}
 8021270:	00020b7c 	.word	0x00020b7c

08021274 <_ZN11QueueSender9TickTimerEv>:

	void TickTimer() {
 8021274:	b480      	push	{r7}
 8021276:	b083      	sub	sp, #12
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
		SendTick = (SendTick + 1) % SendPeriod;
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021282:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 8021286:	3301      	adds	r3, #1
 8021288:	687a      	ldr	r2, [r7, #4]
 802128a:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 802128e:	f892 27f0 	ldrb.w	r2, [r2, #2032]	; 0x7f0
 8021292:	fb93 f1f2 	sdiv	r1, r3, r2
 8021296:	fb01 f202 	mul.w	r2, r1, r2
 802129a:	1a9b      	subs	r3, r3, r2
 802129c:	b2da      	uxtb	r2, r3
 802129e:	687b      	ldr	r3, [r7, #4]
 80212a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212a4:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
		if (SendTick != 0)
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212ae:	f893 37f1 	ldrb.w	r3, [r3, #2033]	; 0x7f1
 80212b2:	2b00      	cmp	r3, #0
 80212b4:	d106      	bne.n	80212c4 <_ZN11QueueSender9TickTimerEv+0x50>
			return;

		TimerReady = true;
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212bc:	2201      	movs	r2, #1
 80212be:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 80212c2:	e000      	b.n	80212c6 <_ZN11QueueSender9TickTimerEv+0x52>
			return;
 80212c4:	bf00      	nop
	}
 80212c6:	370c      	adds	r7, #12
 80212c8:	46bd      	mov	sp, r7
 80212ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ce:	4770      	bx	lr

080212d0 <_ZN11QueueSender13SetSendPeriodEh>:

	void SetSendPeriod(uint8_t periodMs) {
 80212d0:	b580      	push	{r7, lr}
 80212d2:	b082      	sub	sp, #8
 80212d4:	af00      	add	r7, sp, #0
 80212d6:	6078      	str	r0, [r7, #4]
 80212d8:	460b      	mov	r3, r1
 80212da:	70fb      	strb	r3, [r7, #3]
		assert(periodMs);
 80212dc:	78fb      	ldrb	r3, [r7, #3]
 80212de:	2b00      	cmp	r3, #0
 80212e0:	d105      	bne.n	80212ee <_ZN11QueueSender13SetSendPeriodEh+0x1e>
 80212e2:	4b08      	ldr	r3, [pc, #32]	; (8021304 <_ZN11QueueSender13SetSendPeriodEh+0x34>)
 80212e4:	4a08      	ldr	r2, [pc, #32]	; (8021308 <_ZN11QueueSender13SetSendPeriodEh+0x38>)
 80212e6:	21e2      	movs	r1, #226	; 0xe2
 80212e8:	4808      	ldr	r0, [pc, #32]	; (802130c <_ZN11QueueSender13SetSendPeriodEh+0x3c>)
 80212ea:	f01a fd47 	bl	803bd7c <__assert_func>
		SendPeriod = periodMs;
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80212f4:	461a      	mov	r2, r3
 80212f6:	78fb      	ldrb	r3, [r7, #3]
 80212f8:	f882 37f0 	strb.w	r3, [r2, #2032]	; 0x7f0
	}
 80212fc:	bf00      	nop
 80212fe:	3708      	adds	r7, #8
 8021300:	46bd      	mov	sp, r7
 8021302:	bd80      	pop	{r7, pc}
 8021304:	0803d044 	.word	0x0803d044
 8021308:	0803d050 	.word	0x0803d050
 802130c:	0803cfd0 	.word	0x0803cfd0

08021310 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8021310:	b580      	push	{r7, lr}
 8021312:	b082      	sub	sp, #8
 8021314:	af00      	add	r7, sp, #0
 8021316:	6078      	str	r0, [r7, #4]
 8021318:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 802131a:	6838      	ldr	r0, [r7, #0]
 802131c:	f7ff ff96 	bl	802124c <_ZNK11QueueSender11HasResponceEv>
 8021320:	4603      	mov	r3, r0
 8021322:	2b00      	cmp	r3, #0
 8021324:	d105      	bne.n	8021332 <_ZN11QueueSender11GetResponceEv+0x22>
 8021326:	4b10      	ldr	r3, [pc, #64]	; (8021368 <_ZN11QueueSender11GetResponceEv+0x58>)
 8021328:	4a10      	ldr	r2, [pc, #64]	; (802136c <_ZN11QueueSender11GetResponceEv+0x5c>)
 802132a:	21e7      	movs	r1, #231	; 0xe7
 802132c:	4810      	ldr	r0, [pc, #64]	; (8021370 <_ZN11QueueSender11GetResponceEv+0x60>)
 802132e:	f01a fd25 	bl	803bd7c <__assert_func>
		Responce responce = Responces.Front();
 8021332:	683a      	ldr	r2, [r7, #0]
 8021334:	4b0f      	ldr	r3, [pc, #60]	; (8021374 <_ZN11QueueSender11GetResponceEv+0x64>)
 8021336:	4413      	add	r3, r2
 8021338:	4618      	mov	r0, r3
 802133a:	f002 f93f 	bl	80235bc <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv>
 802133e:	4602      	mov	r2, r0
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	4618      	mov	r0, r3
 8021344:	4611      	mov	r1, r2
 8021346:	f44f 7384 	mov.w	r3, #264	; 0x108
 802134a:	461a      	mov	r2, r3
 802134c:	f01a fd80 	bl	803be50 <memcpy>
		Responces.Pop();
 8021350:	683a      	ldr	r2, [r7, #0]
 8021352:	4b08      	ldr	r3, [pc, #32]	; (8021374 <_ZN11QueueSender11GetResponceEv+0x64>)
 8021354:	4413      	add	r3, r2
 8021356:	4618      	mov	r0, r3
 8021358:	f002 f952 	bl	8023600 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>
		return responce;
 802135c:	bf00      	nop
	}
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	3708      	adds	r7, #8
 8021362:	46bd      	mov	sp, r7
 8021364:	bd80      	pop	{r7, pc}
 8021366:	bf00      	nop
 8021368:	0803d07c 	.word	0x0803d07c
 802136c:	0803d08c 	.word	0x0803d08c
 8021370:	0803cfd0 	.word	0x0803cfd0
 8021374:	00020b7c 	.word	0x00020b7c

08021378 <_ZN11QueueSender22ProcessPriorityRequestEv>:

	void ProcessPriorityRequest() {
 8021378:	b5b0      	push	{r4, r5, r7, lr}
 802137a:	b0cc      	sub	sp, #304	; 0x130
 802137c:	af02      	add	r7, sp, #8
 802137e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021382:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021386:	6018      	str	r0, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021388:	b672      	cpsid	i
}
 802138a:	bf00      	nop
		__disable_irq();
		if (HasPriorityRequest && !WaitResponce && TransmitComplete) {
 802138c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021390:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802139a:	f893 36e4 	ldrb.w	r3, [r3, #1764]	; 0x6e4
 802139e:	2b00      	cmp	r3, #0
 80213a0:	f000 80ef 	beq.w	8021582 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
 80213a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213ac:	681b      	ldr	r3, [r3, #0]
 80213ae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213b2:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80213b6:	f083 0301 	eor.w	r3, r3, #1
 80213ba:	b2db      	uxtb	r3, r3
 80213bc:	2b00      	cmp	r3, #0
 80213be:	f000 80e0 	beq.w	8021582 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
 80213c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213c6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213ca:	681b      	ldr	r3, [r3, #0]
 80213cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213d0:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	f000 80d4 	beq.w	8021582 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20a>
			HasPriorityRequest = false;
 80213da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213de:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213e8:	2200      	movs	r2, #0
 80213ea:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
			WaitResponce = true;
 80213ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80213f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80213f6:	681b      	ldr	r3, [r3, #0]
 80213f8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80213fc:	2201      	movs	r2, #1
 80213fe:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 8021402:	b662      	cpsie	i
}
 8021404:	bf00      	nop
			__enable_irq();

			auto &request = PriorityRequest;
 8021406:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802140a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802140e:	681a      	ldr	r2, [r3, #0]
 8021410:	4b5f      	ldr	r3, [pc, #380]	; (8021590 <_ZN11QueueSender22ProcessPriorityRequestEv+0x218>)
 8021412:	4413      	add	r3, r2
 8021414:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			auto &data = request.Data;
 8021418:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802141c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

			assert(
 8021420:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8021424:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021428:	4618      	mov	r0, r3
 802142a:	f7ff fd6e 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 802142e:	4603      	mov	r3, r0
 8021430:	2b00      	cmp	r3, #0
 8021432:	d005      	beq.n	8021440 <_ZN11QueueSender22ProcessPriorityRequestEv+0xc8>
 8021434:	4b57      	ldr	r3, [pc, #348]	; (8021594 <_ZN11QueueSender22ProcessPriorityRequestEv+0x21c>)
 8021436:	4a58      	ldr	r2, [pc, #352]	; (8021598 <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 8021438:	21f7      	movs	r1, #247	; 0xf7
 802143a:	4858      	ldr	r0, [pc, #352]	; (802159c <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 802143c:	f01a fc9e 	bl	803bd7c <__assert_func>
  __ASM volatile ("cpsid i" : : : "memory");
 8021440:	b672      	cpsid	i
}
 8021442:	bf00      	nop
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Sync);
			__disable_irq();
			TransmitComplete = false;
 8021444:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021448:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802144c:	681b      	ldr	r3, [r3, #0]
 802144e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021452:	2200      	movs	r2, #0
 8021454:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
  __ASM volatile ("cpsie i" : : : "memory");
 8021458:	b662      	cpsie	i
}
 802145a:	bf00      	nop
			__enable_irq();

			assert(
 802145c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021460:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021464:	681b      	ldr	r3, [r3, #0]
 8021466:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802146a:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802146e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8021472:	f002 f8f3 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8021476:	4601      	mov	r1, r0
 8021478:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802147c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021480:	b29b      	uxth	r3, r3
 8021482:	461a      	mov	r2, r3
 8021484:	4620      	mov	r0, r4
 8021486:	f013 fe4d 	bl	8035124 <HAL_UART_Transmit_IT>
 802148a:	4603      	mov	r3, r0
 802148c:	2b00      	cmp	r3, #0
 802148e:	d005      	beq.n	802149c <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
 8021490:	4b43      	ldr	r3, [pc, #268]	; (80215a0 <_ZN11QueueSender22ProcessPriorityRequestEv+0x228>)
 8021492:	4a41      	ldr	r2, [pc, #260]	; (8021598 <_ZN11QueueSender22ProcessPriorityRequestEv+0x220>)
 8021494:	21fe      	movs	r1, #254	; 0xfe
 8021496:	4841      	ldr	r0, [pc, #260]	; (802159c <_ZN11QueueSender22ProcessPriorityRequestEv+0x224>)
 8021498:	f01a fc70 	bl	803bd7c <__assert_func>
					HAL_UART_Transmit_IT(UartHandle, data.data(),
							request.RequestSize) == HAL_OK);

			while (!TransmitComplete)
 802149c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214aa:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	d100      	bne.n	80214b4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x13c>
 80214b2:	e7f3      	b.n	802149c <_ZN11QueueSender22ProcessPriorityRequestEv+0x124>
				;

			ErrorCode::Type error = Receive(request.ResponceSize);
 80214b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80214b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80214bc:	b2da      	uxtb	r2, r3
 80214be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214c2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214c6:	4611      	mov	r1, r2
 80214c8:	6818      	ldr	r0, [r3, #0]
 80214ca:	f000 f93d 	bl	8021748 <_ZN11QueueSender7ReceiveEh>
 80214ce:	4603      	mov	r3, r0
 80214d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

			if (error == ErrorCode::NACK) {
 80214d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80214d8:	2b02      	cmp	r3, #2
 80214da:	d11e      	bne.n	802151a <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a2>
				uint32_t delayMS = 5;
 80214dc:	2305      	movs	r3, #5
 80214de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				HAL_Delay(delayMS);
 80214e2:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80214e6:	f009 fbdb 	bl	802aca0 <HAL_Delay>

				uint8_t dummy;
				while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80214ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80214ee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80214f8:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80214fc:	f107 010f 	add.w	r1, r7, #15
 8021500:	2300      	movs	r3, #0
 8021502:	2201      	movs	r2, #1
 8021504:	f013 fd3a 	bl	8034f7c <HAL_UART_Receive>
 8021508:	4603      	mov	r3, r0
 802150a:	2b00      	cmp	r3, #0
 802150c:	bf0c      	ite	eq
 802150e:	2301      	moveq	r3, #1
 8021510:	2300      	movne	r3, #0
 8021512:	b2db      	uxtb	r3, r3
 8021514:	2b00      	cmp	r3, #0
 8021516:	d000      	beq.n	802151a <_ZN11QueueSender22ProcessPriorityRequestEv+0x1a2>
 8021518:	e7e7      	b.n	80214ea <_ZN11QueueSender22ProcessPriorityRequestEv+0x172>
					;
			}

			Responces.Push(
 802151a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802151e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	4c1f      	ldr	r4, [pc, #124]	; (80215a4 <_ZN11QueueSender22ProcessPriorityRequestEv+0x22c>)
 8021526:	441c      	add	r4, r3
					CreateResponce(CurrentResponceBuffer, request.ResponceSize,
 8021528:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802152c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	4a1d      	ldr	r2, [pc, #116]	; (80215a8 <_ZN11QueueSender22ProcessPriorityRequestEv+0x230>)
 8021534:	441a      	add	r2, r3
							MessageMode::Sync, error));
 8021536:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 802153a:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 802153e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021542:	f5a3 708c 	sub.w	r0, r3, #280	; 0x118
 8021546:	f507 7394 	add.w	r3, r7, #296	; 0x128
 802154a:	f5a3 7192 	sub.w	r1, r3, #292	; 0x124
 802154e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8021552:	9301      	str	r3, [sp, #4]
 8021554:	2300      	movs	r3, #0
 8021556:	9300      	str	r3, [sp, #0]
 8021558:	462b      	mov	r3, r5
 802155a:	6809      	ldr	r1, [r1, #0]
 802155c:	f000 f9a0 	bl	80218a0 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
			Responces.Push(
 8021560:	f107 0310 	add.w	r3, r7, #16
 8021564:	4619      	mov	r1, r3
 8021566:	4620      	mov	r0, r4
 8021568:	f001 ffd4 	bl	8023514 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>

			WaitResponce = false;
 802156c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8021570:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8021574:	681b      	ldr	r3, [r3, #0]
 8021576:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802157a:	2200      	movs	r2, #0
 802157c:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8021580:	e001      	b.n	8021586 <_ZN11QueueSender22ProcessPriorityRequestEv+0x20e>
  __ASM volatile ("cpsie i" : : : "memory");
 8021582:	b662      	cpsie	i
}
 8021584:	bf00      	nop
		} else {
			__enable_irq();
		}
	}
 8021586:	bf00      	nop
 8021588:	f507 7794 	add.w	r7, r7, #296	; 0x128
 802158c:	46bd      	mov	sp, r7
 802158e:	bdb0      	pop	{r4, r5, r7, pc}
 8021590:	000215d8 	.word	0x000215d8
 8021594:	0803d0b0 	.word	0x0803d0b0
 8021598:	0803d0f0 	.word	0x0803d0f0
 802159c:	0803cfd0 	.word	0x0803cfd0
 80215a0:	0803d11c 	.word	0x0803d11c
 80215a4:	00020b7c 	.word	0x00020b7c
 80215a8:	000216e6 	.word	0x000216e6

080215ac <_ZN11QueueSender15ProcessRequestsEv>:

	void ProcessRequests() {
 80215ac:	b590      	push	{r4, r7, lr}
 80215ae:	b089      	sub	sp, #36	; 0x24
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80215b4:	b672      	cpsid	i
}
 80215b6:	bf00      	nop
		__disable_irq();
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215be:	f893 37f3 	ldrb.w	r3, [r3, #2035]	; 0x7f3
				&& TransmitComplete) {
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d01c      	beq.n	8021600 <_ZN11QueueSender15ProcessRequestsEv+0x54>
		if (TimerReady && !Requests.Empty() && !WaitResponce
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	4618      	mov	r0, r3
 80215ca:	f002 f854 	bl	8023676 <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>
 80215ce:	4603      	mov	r3, r0
 80215d0:	f083 0301 	eor.w	r3, r3, #1
 80215d4:	b2db      	uxtb	r3, r3
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d012      	beq.n	8021600 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215e0:	f893 36e5 	ldrb.w	r3, [r3, #1765]	; 0x6e5
 80215e4:	f083 0301 	eor.w	r3, r3, #1
 80215e8:	b2db      	uxtb	r3, r3
 80215ea:	2b00      	cmp	r3, #0
 80215ec:	d008      	beq.n	8021600 <_ZN11QueueSender15ProcessRequestsEv+0x54>
				&& TransmitComplete) {
 80215ee:	687b      	ldr	r3, [r7, #4]
 80215f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80215f4:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d001      	beq.n	8021600 <_ZN11QueueSender15ProcessRequestsEv+0x54>
 80215fc:	2301      	movs	r3, #1
 80215fe:	e000      	b.n	8021602 <_ZN11QueueSender15ProcessRequestsEv+0x56>
 8021600:	2300      	movs	r3, #0
		if (TimerReady && !Requests.Empty() && !WaitResponce
 8021602:	2b00      	cmp	r3, #0
 8021604:	f000 8091 	beq.w	802172a <_ZN11QueueSender15ProcessRequestsEv+0x17e>

			WaitResponce = true;
 8021608:	687b      	ldr	r3, [r7, #4]
 802160a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802160e:	2201      	movs	r2, #1
 8021610:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
  __ASM volatile ("cpsie i" : : : "memory");
 8021614:	b662      	cpsie	i
}
 8021616:	bf00      	nop
			__enable_irq();

			auto &request = Requests.Front();
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	4618      	mov	r0, r3
 802161c:	f002 f83c 	bl	8023698 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv>
 8021620:	61b8      	str	r0, [r7, #24]
			auto &data = request.Data;
 8021622:	69bb      	ldr	r3, [r7, #24]
 8021624:	617b      	str	r3, [r7, #20]

			assert(
 8021626:	69bb      	ldr	r3, [r7, #24]
 8021628:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802162c:	4618      	mov	r0, r3
 802162e:	f7ff fc6c 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021632:	4603      	mov	r3, r0
 8021634:	2b01      	cmp	r3, #1
 8021636:	d006      	beq.n	8021646 <_ZN11QueueSender15ProcessRequestsEv+0x9a>
 8021638:	4b3f      	ldr	r3, [pc, #252]	; (8021738 <_ZN11QueueSender15ProcessRequestsEv+0x18c>)
 802163a:	4a40      	ldr	r2, [pc, #256]	; (802173c <_ZN11QueueSender15ProcessRequestsEv+0x190>)
 802163c:	f240 1125 	movw	r1, #293	; 0x125
 8021640:	483f      	ldr	r0, [pc, #252]	; (8021740 <_ZN11QueueSender15ProcessRequestsEv+0x194>)
 8021642:	f01a fb9b 	bl	803bd7c <__assert_func>
					MessageMode::Deserialize(request.MetaInfo)
							== MessageMode::Async);

			const size_t nAttempts = 5;
 8021646:	2305      	movs	r3, #5
 8021648:	613b      	str	r3, [r7, #16]
			const uint32_t delayMS = 5;
 802164a:	2305      	movs	r3, #5
 802164c:	60fb      	str	r3, [r7, #12]
			size_t i = 0;
 802164e:	2300      	movs	r3, #0
 8021650:	61fb      	str	r3, [r7, #28]

			while (i++ < nAttempts) {
 8021652:	69fb      	ldr	r3, [r7, #28]
 8021654:	1c5a      	adds	r2, r3, #1
 8021656:	61fa      	str	r2, [r7, #28]
 8021658:	2b04      	cmp	r3, #4
 802165a:	bf94      	ite	ls
 802165c:	2301      	movls	r3, #1
 802165e:	2300      	movhi	r3, #0
 8021660:	b2db      	uxtb	r3, r3
 8021662:	2b00      	cmp	r3, #0
 8021664:	d050      	beq.n	8021708 <_ZN11QueueSender15ProcessRequestsEv+0x15c>

				TransmitComplete = false;
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802166c:	2200      	movs	r2, #0
 802166e:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2

				assert(
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021678:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 802167c:	6978      	ldr	r0, [r7, #20]
 802167e:	f002 f82d 	bl	80236dc <_ZNKSt5arrayIhLj256EE4dataEv>
 8021682:	4601      	mov	r1, r0
 8021684:	69bb      	ldr	r3, [r7, #24]
 8021686:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802168a:	b29b      	uxth	r3, r3
 802168c:	461a      	mov	r2, r3
 802168e:	4620      	mov	r0, r4
 8021690:	f013 fd48 	bl	8035124 <HAL_UART_Transmit_IT>
 8021694:	4603      	mov	r3, r0
 8021696:	2b00      	cmp	r3, #0
 8021698:	d006      	beq.n	80216a8 <_ZN11QueueSender15ProcessRequestsEv+0xfc>
 802169a:	4b2a      	ldr	r3, [pc, #168]	; (8021744 <_ZN11QueueSender15ProcessRequestsEv+0x198>)
 802169c:	4a27      	ldr	r2, [pc, #156]	; (802173c <_ZN11QueueSender15ProcessRequestsEv+0x190>)
 802169e:	f240 1131 	movw	r1, #305	; 0x131
 80216a2:	4827      	ldr	r0, [pc, #156]	; (8021740 <_ZN11QueueSender15ProcessRequestsEv+0x194>)
 80216a4:	f01a fb6a 	bl	803bd7c <__assert_func>
						HAL_UART_Transmit_IT(UartHandle, data.data(),
								request.RequestSize) == HAL_OK);

				while (!TransmitComplete)
 80216a8:	687b      	ldr	r3, [r7, #4]
 80216aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216ae:	f893 37f2 	ldrb.w	r3, [r3, #2034]	; 0x7f2
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d100      	bne.n	80216b8 <_ZN11QueueSender15ProcessRequestsEv+0x10c>
 80216b6:	e7f7      	b.n	80216a8 <_ZN11QueueSender15ProcessRequestsEv+0xfc>
					;

				ErrorCode::Type error = Receive(request.ResponceSize);
 80216b8:	69bb      	ldr	r3, [r7, #24]
 80216ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80216be:	b2db      	uxtb	r3, r3
 80216c0:	4619      	mov	r1, r3
 80216c2:	6878      	ldr	r0, [r7, #4]
 80216c4:	f000 f840 	bl	8021748 <_ZN11QueueSender7ReceiveEh>
 80216c8:	4603      	mov	r3, r0
 80216ca:	72fb      	strb	r3, [r7, #11]
				if (error == ErrorCode::Success)
 80216cc:	7afb      	ldrb	r3, [r7, #11]
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d019      	beq.n	8021706 <_ZN11QueueSender15ProcessRequestsEv+0x15a>
					break;
				HAL_Delay(delayMS);
 80216d2:	2005      	movs	r0, #5
 80216d4:	f009 fae4 	bl	802aca0 <HAL_Delay>
				if (error == ErrorCode::NACK) {
 80216d8:	7afb      	ldrb	r3, [r7, #11]
 80216da:	2b02      	cmp	r3, #2
 80216dc:	d1b9      	bne.n	8021652 <_ZN11QueueSender15ProcessRequestsEv+0xa6>
					uint8_t dummy;
					while (HAL_UART_Receive(UartHandle, &dummy, 1, 0) == HAL_OK)
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80216e4:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
 80216e8:	f107 010a 	add.w	r1, r7, #10
 80216ec:	2300      	movs	r3, #0
 80216ee:	2201      	movs	r2, #1
 80216f0:	f013 fc44 	bl	8034f7c <HAL_UART_Receive>
 80216f4:	4603      	mov	r3, r0
 80216f6:	2b00      	cmp	r3, #0
 80216f8:	bf0c      	ite	eq
 80216fa:	2301      	moveq	r3, #1
 80216fc:	2300      	movne	r3, #0
 80216fe:	b2db      	uxtb	r3, r3
 8021700:	2b00      	cmp	r3, #0
 8021702:	d0a6      	beq.n	8021652 <_ZN11QueueSender15ProcessRequestsEv+0xa6>
 8021704:	e7eb      	b.n	80216de <_ZN11QueueSender15ProcessRequestsEv+0x132>
					break;
 8021706:	bf00      	nop
						;
				}
			}

			Requests.Pop();
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	4618      	mov	r0, r3
 802170c:	f001 fff4 	bl	80236f8 <_ZN10FixedQueueI7RequestLj500EE3PopEv>
			WaitResponce = false;
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021716:	2200      	movs	r2, #0
 8021718:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
			TimerReady = false;
 802171c:	687b      	ldr	r3, [r7, #4]
 802171e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021722:	2200      	movs	r2, #0
 8021724:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
		} else {
			__enable_irq();
		}
	}
 8021728:	e001      	b.n	802172e <_ZN11QueueSender15ProcessRequestsEv+0x182>
  __ASM volatile ("cpsie i" : : : "memory");
 802172a:	b662      	cpsie	i
}
 802172c:	bf00      	nop
 802172e:	bf00      	nop
 8021730:	3724      	adds	r7, #36	; 0x24
 8021732:	46bd      	mov	sp, r7
 8021734:	bd90      	pop	{r4, r7, pc}
 8021736:	bf00      	nop
 8021738:	0803d16c 	.word	0x0803d16c
 802173c:	0803d1b0 	.word	0x0803d1b0
 8021740:	0803cfd0 	.word	0x0803cfd0
 8021744:	0803d11c 	.word	0x0803d11c

08021748 <_ZN11QueueSender7ReceiveEh>:

	ErrorCode::Type Receive(uint8_t size) {
 8021748:	b590      	push	{r4, r7, lr}
 802174a:	b085      	sub	sp, #20
 802174c:	af00      	add	r7, sp, #0
 802174e:	6078      	str	r0, [r7, #4]
 8021750:	460b      	mov	r3, r1
 8021752:	70fb      	strb	r3, [r7, #3]
		assert(size >= 4);
 8021754:	78fb      	ldrb	r3, [r7, #3]
 8021756:	2b03      	cmp	r3, #3
 8021758:	d806      	bhi.n	8021768 <_ZN11QueueSender7ReceiveEh+0x20>
 802175a:	4b33      	ldr	r3, [pc, #204]	; (8021828 <_ZN11QueueSender7ReceiveEh+0xe0>)
 802175c:	4a33      	ldr	r2, [pc, #204]	; (802182c <_ZN11QueueSender7ReceiveEh+0xe4>)
 802175e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8021762:	4833      	ldr	r0, [pc, #204]	; (8021830 <_ZN11QueueSender7ReceiveEh+0xe8>)
 8021764:	f01a fb0a 	bl	803bd7c <__assert_func>

		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 802176e:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 8021772:	687a      	ldr	r2, [r7, #4]
 8021774:	4b2f      	ldr	r3, [pc, #188]	; (8021834 <_ZN11QueueSender7ReceiveEh+0xec>)
 8021776:	4413      	add	r3, r2
 8021778:	4618      	mov	r0, r3
 802177a:	f001 ff6f 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 802177e:	4601      	mov	r1, r0
				TimeoutS);
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021786:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		auto ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data(), 4,
 802178a:	2204      	movs	r2, #4
 802178c:	4620      	mov	r0, r4
 802178e:	f013 fbf5 	bl	8034f7c <HAL_UART_Receive>
 8021792:	4603      	mov	r3, r0
 8021794:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 8021796:	7bfb      	ldrb	r3, [r7, #15]
 8021798:	2b03      	cmp	r3, #3
 802179a:	d101      	bne.n	80217a0 <_ZN11QueueSender7ReceiveEh+0x58>
			return ErrorCode::Timeout;
 802179c:	2301      	movs	r3, #1
 802179e:	e03f      	b.n	8021820 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (IsNack(CurrentResponceBuffer.data()))
 80217a0:	687a      	ldr	r2, [r7, #4]
 80217a2:	4b24      	ldr	r3, [pc, #144]	; (8021834 <_ZN11QueueSender7ReceiveEh+0xec>)
 80217a4:	4413      	add	r3, r2
 80217a6:	4618      	mov	r0, r3
 80217a8:	f001 ff58 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 80217ac:	4603      	mov	r3, r0
 80217ae:	4619      	mov	r1, r3
 80217b0:	6878      	ldr	r0, [r7, #4]
 80217b2:	f000 f841 	bl	8021838 <_ZN11QueueSender6IsNackEPKh>
 80217b6:	4603      	mov	r3, r0
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	d001      	beq.n	80217c0 <_ZN11QueueSender7ReceiveEh+0x78>
			return ErrorCode::NACK;
 80217bc:	2302      	movs	r3, #2
 80217be:	e02f      	b.n	8021820 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 80217c0:	7bfb      	ldrb	r3, [r7, #15]
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	d001      	beq.n	80217ca <_ZN11QueueSender7ReceiveEh+0x82>
			return ErrorCode::Unknown;
 80217c6:	2303      	movs	r3, #3
 80217c8:	e02a      	b.n	8021820 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (size == 4)
 80217ca:	78fb      	ldrb	r3, [r7, #3]
 80217cc:	2b04      	cmp	r3, #4
 80217ce:	d101      	bne.n	80217d4 <_ZN11QueueSender7ReceiveEh+0x8c>
			return ErrorCode::Success;
 80217d0:	2300      	movs	r3, #0
 80217d2:	e025      	b.n	8021820 <_ZN11QueueSender7ReceiveEh+0xd8>

		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217da:	f8d3 47e8 	ldr.w	r4, [r3, #2024]	; 0x7e8
 80217de:	687a      	ldr	r2, [r7, #4]
 80217e0:	4b14      	ldr	r3, [pc, #80]	; (8021834 <_ZN11QueueSender7ReceiveEh+0xec>)
 80217e2:	4413      	add	r3, r2
 80217e4:	4618      	mov	r0, r3
 80217e6:	f001 ff39 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 80217ea:	4603      	mov	r3, r0
 80217ec:	1d19      	adds	r1, r3, #4
 80217ee:	78fb      	ldrb	r3, [r7, #3]
 80217f0:	b29b      	uxth	r3, r3
 80217f2:	3b04      	subs	r3, #4
 80217f4:	b29a      	uxth	r2, r3
				size - 4, TimeoutS);
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80217fc:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	; 0x7ec
		ret = HAL_UART_Receive(UartHandle, CurrentResponceBuffer.data() + 4,
 8021800:	4620      	mov	r0, r4
 8021802:	f013 fbbb 	bl	8034f7c <HAL_UART_Receive>
 8021806:	4603      	mov	r3, r0
 8021808:	73fb      	strb	r3, [r7, #15]

		if (ret == HAL_TIMEOUT)
 802180a:	7bfb      	ldrb	r3, [r7, #15]
 802180c:	2b03      	cmp	r3, #3
 802180e:	d101      	bne.n	8021814 <_ZN11QueueSender7ReceiveEh+0xcc>
			return ErrorCode::Timeout;
 8021810:	2301      	movs	r3, #1
 8021812:	e005      	b.n	8021820 <_ZN11QueueSender7ReceiveEh+0xd8>

		if (ret != HAL_OK)
 8021814:	7bfb      	ldrb	r3, [r7, #15]
 8021816:	2b00      	cmp	r3, #0
 8021818:	d001      	beq.n	802181e <_ZN11QueueSender7ReceiveEh+0xd6>
			return ErrorCode::Unknown;
 802181a:	2303      	movs	r3, #3
 802181c:	e000      	b.n	8021820 <_ZN11QueueSender7ReceiveEh+0xd8>

		return ErrorCode::Success;
 802181e:	2300      	movs	r3, #0
	}
 8021820:	4618      	mov	r0, r3
 8021822:	3714      	adds	r7, #20
 8021824:	46bd      	mov	sp, r7
 8021826:	bd90      	pop	{r4, r7, pc}
 8021828:	0803d1d4 	.word	0x0803d1d4
 802182c:	0803d1e0 	.word	0x0803d1e0
 8021830:	0803cfd0 	.word	0x0803cfd0
 8021834:	000216e6 	.word	0x000216e6

08021838 <_ZN11QueueSender6IsNackEPKh>:

	bool IsNack(const uint8_t *data) {
 8021838:	b580      	push	{r7, lr}
 802183a:	b084      	sub	sp, #16
 802183c:	af00      	add	r7, sp, #0
 802183e:	6078      	str	r0, [r7, #4]
 8021840:	6039      	str	r1, [r7, #0]
		assert(data);
 8021842:	683b      	ldr	r3, [r7, #0]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d106      	bne.n	8021856 <_ZN11QueueSender6IsNackEPKh+0x1e>
 8021848:	4b11      	ldr	r3, [pc, #68]	; (8021890 <_ZN11QueueSender6IsNackEPKh+0x58>)
 802184a:	4a12      	ldr	r2, [pc, #72]	; (8021894 <_ZN11QueueSender6IsNackEPKh+0x5c>)
 802184c:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8021850:	4811      	ldr	r0, [pc, #68]	; (8021898 <_ZN11QueueSender6IsNackEPKh+0x60>)
 8021852:	f01a fa93 	bl	803bd7c <__assert_func>
		uint8_t kondoNACK[4] = { 0x4, 0xFE, 0x15, 0x17 };
 8021856:	4b11      	ldr	r3, [pc, #68]	; (802189c <_ZN11QueueSender6IsNackEPKh+0x64>)
 8021858:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < 4; ++i)
 802185a:	2300      	movs	r3, #0
 802185c:	60fb      	str	r3, [r7, #12]
 802185e:	68fb      	ldr	r3, [r7, #12]
 8021860:	2b03      	cmp	r3, #3
 8021862:	dc10      	bgt.n	8021886 <_ZN11QueueSender6IsNackEPKh+0x4e>
			if (data[i] != kondoNACK[i])
 8021864:	68fb      	ldr	r3, [r7, #12]
 8021866:	683a      	ldr	r2, [r7, #0]
 8021868:	4413      	add	r3, r2
 802186a:	781a      	ldrb	r2, [r3, #0]
 802186c:	f107 0108 	add.w	r1, r7, #8
 8021870:	68fb      	ldr	r3, [r7, #12]
 8021872:	440b      	add	r3, r1
 8021874:	781b      	ldrb	r3, [r3, #0]
 8021876:	429a      	cmp	r2, r3
 8021878:	d001      	beq.n	802187e <_ZN11QueueSender6IsNackEPKh+0x46>
				return false;
 802187a:	2300      	movs	r3, #0
 802187c:	e004      	b.n	8021888 <_ZN11QueueSender6IsNackEPKh+0x50>
		for (int i = 0; i < 4; ++i)
 802187e:	68fb      	ldr	r3, [r7, #12]
 8021880:	3301      	adds	r3, #1
 8021882:	60fb      	str	r3, [r7, #12]
 8021884:	e7eb      	b.n	802185e <_ZN11QueueSender6IsNackEPKh+0x26>

		return true;
 8021886:	2301      	movs	r3, #1
	}
 8021888:	4618      	mov	r0, r3
 802188a:	3710      	adds	r7, #16
 802188c:	46bd      	mov	sp, r7
 802188e:	bd80      	pop	{r7, pc}
 8021890:	0803d21c 	.word	0x0803d21c
 8021894:	0803d224 	.word	0x0803d224
 8021898:	0803cfd0 	.word	0x0803cfd0
 802189c:	1715fe04 	.word	0x1715fe04

080218a0 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>:

	Responce CreateResponce(const Responce::BufferT &data, size_t ResponceSize,
 80218a0:	b580      	push	{r7, lr}
 80218a2:	b084      	sub	sp, #16
 80218a4:	af00      	add	r7, sp, #0
 80218a6:	60f8      	str	r0, [r7, #12]
 80218a8:	60b9      	str	r1, [r7, #8]
 80218aa:	607a      	str	r2, [r7, #4]
 80218ac:	603b      	str	r3, [r7, #0]
			MessageMode::Type messageMode, ErrorCode::Type error) const {
		Responce responce;
		responce.Data = data;
 80218ae:	68fa      	ldr	r2, [r7, #12]
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	4610      	mov	r0, r2
 80218b4:	4619      	mov	r1, r3
 80218b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80218ba:	461a      	mov	r2, r3
 80218bc:	f01a fac8 	bl	803be50 <memcpy>
		responce.ResponceSize = ResponceSize;
 80218c0:	68fb      	ldr	r3, [r7, #12]
 80218c2:	683a      	ldr	r2, [r7, #0]
 80218c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.PeripheryID = Periphery::Body;
 80218c8:	68fb      	ldr	r3, [r7, #12]
 80218ca:	2200      	movs	r2, #0
 80218cc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.Error = ErrorCode::Serialize(error);
 80218d0:	7f3b      	ldrb	r3, [r7, #28]
 80218d2:	4618      	mov	r0, r3
 80218d4:	f7ff fb25 	bl	8020f22 <_ZN11QueueSender9ErrorCode9SerializeEh>
 80218d8:	4603      	mov	r3, r0
 80218da:	461a      	mov	r2, r3
 80218dc:	68fb      	ldr	r3, [r7, #12]
 80218de:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.MetaInfo = MessageMode::Serialize(messageMode);
 80218e2:	7e3b      	ldrb	r3, [r7, #24]
 80218e4:	4618      	mov	r0, r3
 80218e6:	f7ff fb04 	bl	8020ef2 <_ZN11QueueSender11MessageMode9SerializeEh>
 80218ea:	4603      	mov	r3, r0
 80218ec:	461a      	mov	r2, r3
 80218ee:	68fb      	ldr	r3, [r7, #12]
 80218f0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		return responce;
 80218f4:	bf00      	nop
	}
 80218f6:	68f8      	ldr	r0, [r7, #12]
 80218f8:	3710      	adds	r7, #16
 80218fa:	46bd      	mov	sp, r7
 80218fc:	bd80      	pop	{r7, pc}

080218fe <_ZNK11QueueSender18CreateInfoResponceEv>:

	Responce CreateInfoResponce() const {
 80218fe:	b580      	push	{r7, lr}
 8021900:	b0c6      	sub	sp, #280	; 0x118
 8021902:	af02      	add	r7, sp, #8
 8021904:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021908:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802190c:	6018      	str	r0, [r3, #0]
 802190e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021912:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021916:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		uint8_t *ptr = data.data();
 8021918:	f107 030c 	add.w	r3, r7, #12
 802191c:	4618      	mov	r0, r3
 802191e:	f001 fe9d 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8021922:	4602      	mov	r2, r0
 8021924:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802192c:	601a      	str	r2, [r3, #0]
		GetInfo().SerializeTo(&ptr);
 802192e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021932:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021936:	6818      	ldr	r0, [r3, #0]
 8021938:	f000 f962 	bl	8021c00 <_ZNK11QueueSender7GetInfoEv>
 802193c:	4603      	mov	r3, r0
 802193e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8021942:	f107 0208 	add.w	r2, r7, #8
 8021946:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 802194a:	4611      	mov	r1, r2
 802194c:	4618      	mov	r0, r3
 802194e:	f7ff faf5 	bl	8020f3c <_ZN11QueueSender4Info11SerializeToEPPh>

		return CreateResponce(data, Info::Size, MessageMode::Info,
				ErrorCode::Success);
 8021952:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 802195a:	6818      	ldr	r0, [r3, #0]
 802195c:	f107 020c 	add.w	r2, r7, #12
 8021960:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8021964:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021968:	2300      	movs	r3, #0
 802196a:	9301      	str	r3, [sp, #4]
 802196c:	2302      	movs	r3, #2
 802196e:	9300      	str	r3, [sp, #0]
 8021970:	2304      	movs	r3, #4
 8021972:	6809      	ldr	r1, [r1, #0]
 8021974:	f7ff ff94 	bl	80218a0 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 802197c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021980:	6818      	ldr	r0, [r3, #0]
 8021982:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8021986:	46bd      	mov	sp, r7
 8021988:	bd80      	pop	{r7, pc}

0802198a <_ZN11QueueSender10ResetQueueEv>:

	Responce ResetQueue() {
 802198a:	b580      	push	{r7, lr}
 802198c:	b0c4      	sub	sp, #272	; 0x110
 802198e:	af02      	add	r7, sp, #8
 8021990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8021994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021998:	6018      	str	r0, [r3, #0]
 802199a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802199e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80219a2:	6019      	str	r1, [r3, #0]
		Responce::BufferT data;
		Requests.Clear();
 80219a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80219ac:	681b      	ldr	r3, [r3, #0]
 80219ae:	4618      	mov	r0, r3
 80219b0:	f001 fed0 	bl	8023754 <_ZN10FixedQueueI7RequestLj500EE5ClearEv>

		return CreateResponce(data, 1, MessageMode::ResetQueue, ErrorCode::Success);
 80219b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80219bc:	6818      	ldr	r0, [r3, #0]
 80219be:	f107 0208 	add.w	r2, r7, #8
 80219c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219c6:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 80219ca:	2300      	movs	r3, #0
 80219cc:	9301      	str	r3, [sp, #4]
 80219ce:	2304      	movs	r3, #4
 80219d0:	9300      	str	r3, [sp, #0]
 80219d2:	2301      	movs	r3, #1
 80219d4:	6809      	ldr	r1, [r1, #0]
 80219d6:	f7ff ff63 	bl	80218a0 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 80219da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80219de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80219e2:	6818      	ldr	r0, [r3, #0]
 80219e4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80219e8:	46bd      	mov	sp, r7
 80219ea:	bd80      	pop	{r7, pc}

080219ec <_ZNKSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) const noexcept
 80219ec:	b580      	push	{r7, lr}
 80219ee:	b082      	sub	sp, #8
 80219f0:	af00      	add	r7, sp, #0
 80219f2:	6078      	str	r0, [r7, #4]
 80219f4:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80219f6:	687b      	ldr	r3, [r7, #4]
 80219f8:	6839      	ldr	r1, [r7, #0]
 80219fa:	4618      	mov	r0, r3
 80219fc:	f001 fec4 	bl	8023788 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8021a00:	4603      	mov	r3, r0
 8021a02:	4618      	mov	r0, r3
 8021a04:	3708      	adds	r7, #8
 8021a06:	46bd      	mov	sp, r7
 8021a08:	bd80      	pop	{r7, pc}
	...

08021a0c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request>:

	Responce ProcessSetPeriodRequest(const Request &request) {
 8021a0c:	b580      	push	{r7, lr}
 8021a0e:	b0c8      	sub	sp, #288	; 0x120
 8021a10:	af02      	add	r7, sp, #8
 8021a12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021a1a:	6018      	str	r0, [r3, #0]
 8021a1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021a24:	6019      	str	r1, [r3, #0]
 8021a26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021a2e:	601a      	str	r2, [r3, #0]
		assert(
 8021a30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021a38:	681b      	ldr	r3, [r3, #0]
 8021a3a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021a3e:	4618      	mov	r0, r3
 8021a40:	f7ff fa63 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021a44:	4603      	mov	r3, r0
 8021a46:	2b03      	cmp	r3, #3
 8021a48:	d006      	beq.n	8021a58 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x4c>
 8021a4a:	4b23      	ldr	r3, [pc, #140]	; (8021ad8 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xcc>)
 8021a4c:	4a23      	ldr	r2, [pc, #140]	; (8021adc <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd0>)
 8021a4e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021a52:	4823      	ldr	r0, [pc, #140]	; (8021ae0 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0xd4>)
 8021a54:	f01a f992 	bl	803bd7c <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::SetPeriod);
		Responce::BufferT data;

		uint8_t newPeriod = request.Data[0];
 8021a58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	2100      	movs	r1, #0
 8021a64:	4618      	mov	r0, r3
 8021a66:	f7ff ffc1 	bl	80219ec <_ZNKSt5arrayIhLj256EEixEj>
 8021a6a:	4603      	mov	r3, r0
 8021a6c:	781b      	ldrb	r3, [r3, #0]
 8021a6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

		ErrorCode::Type error = ErrorCode::Success;
 8021a72:	2300      	movs	r3, #0
 8021a74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (newPeriod == 0)
 8021a78:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d103      	bne.n	8021a88 <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x7c>
			error = ErrorCode::BadPeriod;
 8021a80:	2304      	movs	r3, #4
 8021a82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021a86:	e009      	b.n	8021a9c <_ZN11QueueSender23ProcessSetPeriodRequestERK7Request+0x90>
		else
			SetSendPeriod(newPeriod);
 8021a88:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8021a8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021a90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021a94:	4611      	mov	r1, r2
 8021a96:	6818      	ldr	r0, [r3, #0]
 8021a98:	f7ff fc1a 	bl	80212d0 <_ZN11QueueSender13SetSendPeriodEh>

		return CreateResponce(data, 1, MessageMode::SetPeriod, error);
 8021a9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021aa0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021aa4:	6818      	ldr	r0, [r3, #0]
 8021aa6:	f107 0214 	add.w	r2, r7, #20
 8021aaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021aae:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021ab2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021ab6:	9301      	str	r3, [sp, #4]
 8021ab8:	2303      	movs	r3, #3
 8021aba:	9300      	str	r3, [sp, #0]
 8021abc:	2301      	movs	r3, #1
 8021abe:	6809      	ldr	r1, [r1, #0]
 8021ac0:	f7ff feee 	bl	80218a0 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021ac4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021ac8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021acc:	6818      	ldr	r0, [r3, #0]
 8021ace:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021ad2:	46bd      	mov	sp, r7
 8021ad4:	bd80      	pop	{r7, pc}
 8021ad6:	bf00      	nop
 8021ad8:	0803d250 	.word	0x0803d250
 8021adc:	0803d298 	.word	0x0803d298
 8021ae0:	0803cfd0 	.word	0x0803cfd0

08021ae4 <_ZN11QueueSender19CreateAsyncResponceERK7Request>:

	Responce CreateAsyncResponce(const Request &request) {
 8021ae4:	b580      	push	{r7, lr}
 8021ae6:	b0c8      	sub	sp, #288	; 0x120
 8021ae8:	af02      	add	r7, sp, #8
 8021aea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021aee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021af2:	6018      	str	r0, [r3, #0]
 8021af4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021af8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021afc:	6019      	str	r1, [r3, #0]
 8021afe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b02:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b06:	601a      	str	r2, [r3, #0]
		assert(
 8021b08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b0c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b10:	681b      	ldr	r3, [r3, #0]
 8021b12:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8021b16:	4618      	mov	r0, r3
 8021b18:	f7ff f9f7 	bl	8020f0a <_ZN11QueueSender11MessageMode11DeserializeEh>
 8021b1c:	4603      	mov	r3, r0
 8021b1e:	2b01      	cmp	r3, #1
 8021b20:	d006      	beq.n	8021b30 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x4c>
 8021b22:	4b27      	ldr	r3, [pc, #156]	; (8021bc0 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xdc>)
 8021b24:	4a27      	ldr	r2, [pc, #156]	; (8021bc4 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe0>)
 8021b26:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8021b2a:	4827      	ldr	r0, [pc, #156]	; (8021bc8 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0xe4>)
 8021b2c:	f01a f926 	bl	803bd7c <__assert_func>
				MessageMode::Deserialize(request.MetaInfo)
						== MessageMode::Async);
		ErrorCode::Type error = ErrorCode::Success;
 8021b30:	2300      	movs	r3, #0
 8021b32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (Requests.Full())
 8021b36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	4618      	mov	r0, r3
 8021b42:	f001 fe2f 	bl	80237a4 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>
 8021b46:	4603      	mov	r3, r0
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	d003      	beq.n	8021b54 <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x70>
			error = ErrorCode::QueueFull;
 8021b4c:	2305      	movs	r3, #5
 8021b4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8021b52:	e00c      	b.n	8021b6e <_ZN11QueueSender19CreateAsyncResponceERK7Request+0x8a>
		else
			Requests.Push(request);
 8021b54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8021b5c:	681a      	ldr	r2, [r3, #0]
 8021b5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8021b66:	6819      	ldr	r1, [r3, #0]
 8021b68:	4610      	mov	r0, r2
 8021b6a:	f001 fe2d 	bl	80237c8 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>

		return CreateResponce({0}, 1, MessageMode::Async, error);
 8021b6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8021b76:	4618      	mov	r0, r3
 8021b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021b7c:	461a      	mov	r2, r3
 8021b7e:	2100      	movs	r1, #0
 8021b80:	f01a f98e 	bl	803bea0 <memset>
 8021b84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021b8c:	6818      	ldr	r0, [r3, #0]
 8021b8e:	f107 0214 	add.w	r2, r7, #20
 8021b92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021b96:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8021b9a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8021b9e:	9301      	str	r3, [sp, #4]
 8021ba0:	2301      	movs	r3, #1
 8021ba2:	9300      	str	r3, [sp, #0]
 8021ba4:	2301      	movs	r3, #1
 8021ba6:	6809      	ldr	r1, [r1, #0]
 8021ba8:	f7ff fe7a 	bl	80218a0 <_ZNK11QueueSender14CreateResponceERKSt5arrayIhLj256EEjhh>
	}
 8021bac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8021bb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8021bb4:	6818      	ldr	r0, [r3, #0]
 8021bb6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8021bba:	46bd      	mov	sp, r7
 8021bbc:	bd80      	pop	{r7, pc}
 8021bbe:	bf00      	nop
 8021bc0:	0803d16c 	.word	0x0803d16c
 8021bc4:	0803d2d8 	.word	0x0803d2d8
 8021bc8:	0803cfd0 	.word	0x0803cfd0

08021bcc <_ZN11QueueSender16ProcessResponcesEv>:

	void ProcessResponces() {
 8021bcc:	b480      	push	{r7}
 8021bce:	b083      	sub	sp, #12
 8021bd0:	af00      	add	r7, sp, #0
 8021bd2:	6078      	str	r0, [r7, #4]
		//WaitResponce = false;
	}
 8021bd4:	bf00      	nop
 8021bd6:	370c      	adds	r7, #12
 8021bd8:	46bd      	mov	sp, r7
 8021bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bde:	4770      	bx	lr

08021be0 <_ZN11QueueSender14FinishTransmitEv>:

	void FinishTransmit() {
 8021be0:	b480      	push	{r7}
 8021be2:	b083      	sub	sp, #12
 8021be4:	af00      	add	r7, sp, #0
 8021be6:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8021bee:	2201      	movs	r2, #1
 8021bf0:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
	}
 8021bf4:	bf00      	nop
 8021bf6:	370c      	adds	r7, #12
 8021bf8:	46bd      	mov	sp, r7
 8021bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bfe:	4770      	bx	lr

08021c00 <_ZNK11QueueSender7GetInfoEv>:

	Info GetInfo() const {
 8021c00:	b580      	push	{r7, lr}
 8021c02:	b084      	sub	sp, #16
 8021c04:	af00      	add	r7, sp, #0
 8021c06:	6078      	str	r0, [r7, #4]
		return {Requests.GetSize(), Responces.GetSize()};
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	4618      	mov	r0, r3
 8021c0c:	f001 fe1e 	bl	802384c <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>
 8021c10:	4603      	mov	r3, r0
 8021c12:	b29b      	uxth	r3, r3
 8021c14:	81bb      	strh	r3, [r7, #12]
 8021c16:	687a      	ldr	r2, [r7, #4]
 8021c18:	4b09      	ldr	r3, [pc, #36]	; (8021c40 <_ZNK11QueueSender7GetInfoEv+0x40>)
 8021c1a:	4413      	add	r3, r2
 8021c1c:	4618      	mov	r0, r3
 8021c1e:	f001 fe21 	bl	8023864 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>
 8021c22:	4603      	mov	r3, r0
 8021c24:	b29b      	uxth	r3, r3
 8021c26:	81fb      	strh	r3, [r7, #14]
 8021c28:	2300      	movs	r3, #0
 8021c2a:	89ba      	ldrh	r2, [r7, #12]
 8021c2c:	f362 030f 	bfi	r3, r2, #0, #16
 8021c30:	89fa      	ldrh	r2, [r7, #14]
 8021c32:	f362 431f 	bfi	r3, r2, #16, #16
	}
 8021c36:	4618      	mov	r0, r3
 8021c38:	3710      	adds	r7, #16
 8021c3a:	46bd      	mov	sp, r7
 8021c3c:	bd80      	pop	{r7, pc}
 8021c3e:	bf00      	nop
 8021c40:	00020b7c 	.word	0x00020b7c

08021c44 <_ZN10FixedQueueI7RequestLj10EEC1Ev>:
class FixedQueue {
 8021c44:	b480      	push	{r7}
 8021c46:	b083      	sub	sp, #12
 8021c48:	af00      	add	r7, sp, #0
 8021c4a:	6078      	str	r0, [r7, #4]
 8021c4c:	687b      	ldr	r3, [r7, #4]
 8021c4e:	2200      	movs	r2, #0
 8021c50:	601a      	str	r2, [r3, #0]
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	2200      	movs	r2, #0
 8021c56:	605a      	str	r2, [r3, #4]
 8021c58:	687b      	ldr	r3, [r7, #4]
 8021c5a:	2200      	movs	r2, #0
 8021c5c:	609a      	str	r2, [r3, #8]
 8021c5e:	687b      	ldr	r3, [r7, #4]
 8021c60:	4618      	mov	r0, r3
 8021c62:	370c      	adds	r7, #12
 8021c64:	46bd      	mov	sp, r7
 8021c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c6a:	4770      	bx	lr

08021c6c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:

	bool TransmitComplete = true;
public:
	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 8021c6c:	b580      	push	{r7, lr}
 8021c6e:	b084      	sub	sp, #16
 8021c70:	af00      	add	r7, sp, #0
 8021c72:	60f8      	str	r0, [r7, #12]
 8021c74:	60b9      	str	r1, [r7, #8]
 8021c76:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8021c78:	68fb      	ldr	r3, [r7, #12]
 8021c7a:	4618      	mov	r0, r3
 8021c7c:	f7ff ffe2 	bl	8021c44 <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8021c80:	68fb      	ldr	r3, [r7, #12]
 8021c82:	68ba      	ldr	r2, [r7, #8]
 8021c84:	f8c3 2a84 	str.w	r2, [r3, #2692]	; 0xa84
 8021c88:	68fb      	ldr	r3, [r7, #12]
 8021c8a:	687a      	ldr	r2, [r7, #4]
 8021c8c:	f8c3 2a88 	str.w	r2, [r3, #2696]	; 0xa88
 8021c90:	68fb      	ldr	r3, [r7, #12]
 8021c92:	2201      	movs	r2, #1
 8021c94:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
		assert(uart != NULL);
 8021c98:	68bb      	ldr	r3, [r7, #8]
 8021c9a:	2b00      	cmp	r3, #0
 8021c9c:	d106      	bne.n	8021cac <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x40>
 8021c9e:	4b06      	ldr	r3, [pc, #24]	; (8021cb8 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x4c>)
 8021ca0:	4a06      	ldr	r2, [pc, #24]	; (8021cbc <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>)
 8021ca2:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8021ca6:	4806      	ldr	r0, [pc, #24]	; (8021cc0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x54>)
 8021ca8:	f01a f868 	bl	803bd7c <__assert_func>
	}
 8021cac:	68fb      	ldr	r3, [r7, #12]
 8021cae:	4618      	mov	r0, r3
 8021cb0:	3710      	adds	r7, #16
 8021cb2:	46bd      	mov	sp, r7
 8021cb4:	bd80      	pop	{r7, pc}
 8021cb6:	bf00      	nop
 8021cb8:	0803cff4 	.word	0x0803cff4
 8021cbc:	0803d314 	.word	0x0803d314
 8021cc0:	0803cfd0 	.word	0x0803cfd0

08021cc4 <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 8021cc4:	b580      	push	{r7, lr}
 8021cc6:	b082      	sub	sp, #8
 8021cc8:	af00      	add	r7, sp, #0
 8021cca:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	2200      	movs	r2, #0
 8021cd0:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
		assert(HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1) == HAL_OK);
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021ce0:	2201      	movs	r2, #1
 8021ce2:	4619      	mov	r1, r3
 8021ce4:	f013 fac6 	bl	8035274 <HAL_UART_Receive_IT>
 8021ce8:	4603      	mov	r3, r0
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	d006      	beq.n	8021cfc <_ZN13HeadInterface14ResetReadStateEv+0x38>
 8021cee:	4b05      	ldr	r3, [pc, #20]	; (8021d04 <_ZN13HeadInterface14ResetReadStateEv+0x40>)
 8021cf0:	4a05      	ldr	r2, [pc, #20]	; (8021d08 <_ZN13HeadInterface14ResetReadStateEv+0x44>)
 8021cf2:	f240 11db 	movw	r1, #475	; 0x1db
 8021cf6:	4805      	ldr	r0, [pc, #20]	; (8021d0c <_ZN13HeadInterface14ResetReadStateEv+0x48>)
 8021cf8:	f01a f840 	bl	803bd7c <__assert_func>
	}
 8021cfc:	bf00      	nop
 8021cfe:	3708      	adds	r7, #8
 8021d00:	46bd      	mov	sp, r7
 8021d02:	bd80      	pop	{r7, pc}
 8021d04:	0803d350 	.word	0x0803d350
 8021d08:	0803d38c 	.word	0x0803d38c
 8021d0c:	0803cfd0 	.word	0x0803cfd0

08021d10 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8021d10:	b580      	push	{r7, lr}
 8021d12:	b082      	sub	sp, #8
 8021d14:	af00      	add	r7, sp, #0
 8021d16:	6078      	str	r0, [r7, #4]
		return !Requests.Empty();
 8021d18:	687b      	ldr	r3, [r7, #4]
 8021d1a:	4618      	mov	r0, r3
 8021d1c:	f001 fdae 	bl	802387c <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>
 8021d20:	4603      	mov	r3, r0
 8021d22:	f083 0301 	eor.w	r3, r3, #1
 8021d26:	b2db      	uxtb	r3, r3
	}
 8021d28:	4618      	mov	r0, r3
 8021d2a:	3708      	adds	r7, #8
 8021d2c:	46bd      	mov	sp, r7
 8021d2e:	bd80      	pop	{r7, pc}

08021d30 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8021d30:	b590      	push	{r4, r7, lr}
 8021d32:	b095      	sub	sp, #84	; 0x54
 8021d34:	af00      	add	r7, sp, #0
 8021d36:	6078      	str	r0, [r7, #4]
 8021d38:	6039      	str	r1, [r7, #0]

		while (!TransmitComplete) {
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	f893 3ca0 	ldrb.w	r3, [r3, #3232]	; 0xca0
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d100      	bne.n	8021d46 <_ZN13HeadInterface4SendERK8Responce+0x16>
 8021d44:	e7f9      	b.n	8021d3a <_ZN13HeadInterface4SendERK8Responce+0xa>
		}

		uint8_t *ptr = CurrentResponceBuffer.data();
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021d4c:	4618      	mov	r0, r3
 8021d4e:	f001 fc85 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8021d52:	64f8      	str	r0, [r7, #76]	; 0x4c

		*(ptr++) = SOM1Val;
 8021d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d56:	1c5a      	adds	r2, r3, #1
 8021d58:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021d5a:	22ff      	movs	r2, #255	; 0xff
 8021d5c:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 8021d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d60:	1c5a      	adds	r2, r3, #1
 8021d62:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021d64:	22aa      	movs	r2, #170	; 0xaa
 8021d66:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 8021d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d6a:	1c5a      	adds	r2, r3, #1
 8021d6c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021d6e:	683a      	ldr	r2, [r7, #0]
 8021d70:	f892 2104 	ldrb.w	r2, [r2, #260]	; 0x104
 8021d74:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 8021d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d78:	1c5a      	adds	r2, r3, #1
 8021d7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021d7c:	683a      	ldr	r2, [r7, #0]
 8021d7e:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8021d82:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 8021d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021d86:	1c5a      	adds	r2, r3, #1
 8021d88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8021d8a:	683a      	ldr	r2, [r7, #0]
 8021d8c:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8021d90:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.ResponceSize);
 8021d92:	683b      	ldr	r3, [r7, #0]
 8021d94:	4618      	mov	r0, r3
 8021d96:	f001 fca1 	bl	80236dc <_ZNKSt5arrayIhLj256EE4dataEv>
 8021d9a:	4601      	mov	r1, r0
 8021d9c:	683b      	ldr	r3, [r7, #0]
 8021d9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021da2:	461a      	mov	r2, r3
 8021da4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8021da6:	f01a f853 	bl	803be50 <memcpy>

		ptr += responce.ResponceSize;
 8021daa:	683b      	ldr	r3, [r7, #0]
 8021dac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8021db2:	4413      	add	r3, r2
 8021db4:	64fb      	str	r3, [r7, #76]	; 0x4c
		*ptr = SOM3Val;
 8021db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021db8:	22af      	movs	r2, #175	; 0xaf
 8021dba:	701a      	strb	r2, [r3, #0]

		//ResetReadState();

		TransmitComplete = false;
 8021dbc:	687b      	ldr	r3, [r7, #4]
 8021dbe:	2200      	movs	r2, #0
 8021dc0:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0

		size_t sz = responce.ResponceSize + 3 + 3;
 8021dc4:	683b      	ldr	r3, [r7, #0]
 8021dc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021dca:	3306      	adds	r3, #6
 8021dcc:	64bb      	str	r3, [r7, #72]	; 0x48
		uint8_t testBuf[64];
		memcpy(testBuf, CurrentResponceBuffer.data(), sz);
 8021dce:	687b      	ldr	r3, [r7, #4]
 8021dd0:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021dd4:	4618      	mov	r0, r3
 8021dd6:	f001 fc41 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8021dda:	4601      	mov	r1, r0
 8021ddc:	f107 0308 	add.w	r3, r7, #8
 8021de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021de2:	4618      	mov	r0, r3
 8021de4:	f01a f834 	bl	803be50 <memcpy>

		assert(
 8021de8:	687b      	ldr	r3, [r7, #4]
 8021dea:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8021df4:	4618      	mov	r0, r3
 8021df6:	f001 fc31 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8021dfa:	4601      	mov	r1, r0
 8021dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021dfe:	b29b      	uxth	r3, r3
 8021e00:	461a      	mov	r2, r3
 8021e02:	4620      	mov	r0, r4
 8021e04:	f013 f98e 	bl	8035124 <HAL_UART_Transmit_IT>
 8021e08:	4603      	mov	r3, r0
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	d006      	beq.n	8021e1c <_ZN13HeadInterface4SendERK8Responce+0xec>
 8021e0e:	4b05      	ldr	r3, [pc, #20]	; (8021e24 <_ZN13HeadInterface4SendERK8Responce+0xf4>)
 8021e10:	4a05      	ldr	r2, [pc, #20]	; (8021e28 <_ZN13HeadInterface4SendERK8Responce+0xf8>)
 8021e12:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8021e16:	4805      	ldr	r0, [pc, #20]	; (8021e2c <_ZN13HeadInterface4SendERK8Responce+0xfc>)
 8021e18:	f019 ffb0 	bl	803bd7c <__assert_func>
				HAL_UART_Transmit_IT(UartHandle, CurrentResponceBuffer.data(),
						sz) == HAL_OK);
	}
 8021e1c:	bf00      	nop
 8021e1e:	3754      	adds	r7, #84	; 0x54
 8021e20:	46bd      	mov	sp, r7
 8021e22:	bd90      	pop	{r4, r7, pc}
 8021e24:	0803d3b4 	.word	0x0803d3b4
 8021e28:	0803d404 	.word	0x0803d404
 8021e2c:	0803cfd0 	.word	0x0803cfd0

08021e30 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8021e30:	b580      	push	{r7, lr}
 8021e32:	b082      	sub	sp, #8
 8021e34:	af00      	add	r7, sp, #0
 8021e36:	6078      	str	r0, [r7, #4]
 8021e38:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 8021e3a:	6838      	ldr	r0, [r7, #0]
 8021e3c:	f7ff ff68 	bl	8021d10 <_ZNK13HeadInterface10HasRequestEv>
 8021e40:	4603      	mov	r3, r0
 8021e42:	2b00      	cmp	r3, #0
 8021e44:	d106      	bne.n	8021e54 <_ZN13HeadInterface10GetRequestEv+0x24>
 8021e46:	4b0e      	ldr	r3, [pc, #56]	; (8021e80 <_ZN13HeadInterface10GetRequestEv+0x50>)
 8021e48:	4a0e      	ldr	r2, [pc, #56]	; (8021e84 <_ZN13HeadInterface10GetRequestEv+0x54>)
 8021e4a:	f240 2102 	movw	r1, #514	; 0x202
 8021e4e:	480e      	ldr	r0, [pc, #56]	; (8021e88 <_ZN13HeadInterface10GetRequestEv+0x58>)
 8021e50:	f019 ff94 	bl	803bd7c <__assert_func>
		Request request = Requests.Front();
 8021e54:	683b      	ldr	r3, [r7, #0]
 8021e56:	4618      	mov	r0, r3
 8021e58:	f001 fd22 	bl	80238a0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv>
 8021e5c:	4602      	mov	r2, r0
 8021e5e:	687b      	ldr	r3, [r7, #4]
 8021e60:	4618      	mov	r0, r3
 8021e62:	4611      	mov	r1, r2
 8021e64:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8021e68:	461a      	mov	r2, r3
 8021e6a:	f019 fff1 	bl	803be50 <memcpy>
		Requests.Pop();
 8021e6e:	683b      	ldr	r3, [r7, #0]
 8021e70:	4618      	mov	r0, r3
 8021e72:	f001 fd37 	bl	80238e4 <_ZN10FixedQueueI7RequestLj10EE3PopEv>
		return request;
 8021e76:	bf00      	nop
	}
 8021e78:	6878      	ldr	r0, [r7, #4]
 8021e7a:	3708      	adds	r7, #8
 8021e7c:	46bd      	mov	sp, r7
 8021e7e:	bd80      	pop	{r7, pc}
 8021e80:	0803d430 	.word	0x0803d430
 8021e84:	0803d440 	.word	0x0803d440
 8021e88:	0803cfd0 	.word	0x0803cfd0

08021e8c <_ZN13HeadInterface14FinishTransmitEv>:

	void FinishTransmit() {
 8021e8c:	b480      	push	{r7}
 8021e8e:	b083      	sub	sp, #12
 8021e90:	af00      	add	r7, sp, #0
 8021e92:	6078      	str	r0, [r7, #4]
		TransmitComplete = true;
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	2201      	movs	r2, #1
 8021e98:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
	}
 8021e9c:	bf00      	nop
 8021e9e:	370c      	adds	r7, #12
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ea6:	4770      	bx	lr

08021ea8 <_ZN13HeadInterface19ProcessRecievedDataEv>:

	void ProcessRecievedData() {
 8021ea8:	b590      	push	{r4, r7, lr}
 8021eaa:	b085      	sub	sp, #20
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	6078      	str	r0, [r7, #4]
		static size_t nRequests = 0;

		switch (CurrentState) {
 8021eb0:	687b      	ldr	r3, [r7, #4]
 8021eb2:	f8d3 3a90 	ldr.w	r3, [r3, #2704]	; 0xa90
 8021eb6:	2b07      	cmp	r3, #7
 8021eb8:	f200 80cc 	bhi.w	8022054 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1ac>
 8021ebc:	a201      	add	r2, pc, #4	; (adr r2, 8021ec4 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1c>)
 8021ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ec2:	bf00      	nop
 8021ec4:	08021ee5 	.word	0x08021ee5
 8021ec8:	08021f15 	.word	0x08021f15
 8021ecc:	08021f45 	.word	0x08021f45
 8021ed0:	08021f6f 	.word	0x08021f6f
 8021ed4:	08021f9b 	.word	0x08021f9b
 8021ed8:	08021fc7 	.word	0x08021fc7
 8021edc:	08022001 	.word	0x08022001
 8021ee0:	0802201f 	.word	0x0802201f
		case ReadState::SOM1: {
			if (CurrentValue == SOM1Val) {
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021eea:	2bff      	cmp	r3, #255	; 0xff
 8021eec:	d10e      	bne.n	8021f0c <_ZN13HeadInterface19ProcessRecievedDataEv+0x64>
				CurrentState = ReadState::SOM2;
 8021eee:	687b      	ldr	r3, [r7, #4]
 8021ef0:	2201      	movs	r2, #1
 8021ef2:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021ef6:	687b      	ldr	r3, [r7, #4]
 8021ef8:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021efc:	687b      	ldr	r3, [r7, #4]
 8021efe:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f02:	2201      	movs	r2, #1
 8021f04:	4619      	mov	r1, r3
 8021f06:	f013 f9b5 	bl	8035274 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021f0a:	e0a7      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021f0c:	6878      	ldr	r0, [r7, #4]
 8021f0e:	f7ff fed9 	bl	8021cc4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021f12:	e0a3      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM2: {
			if (CurrentValue == SOM2Val) {
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f1a:	2baa      	cmp	r3, #170	; 0xaa
 8021f1c:	d10e      	bne.n	8021f3c <_ZN13HeadInterface19ProcessRecievedDataEv+0x94>
				CurrentState = ReadState::PERIPHERY_ID;
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	2202      	movs	r2, #2
 8021f22:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
				HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f32:	2201      	movs	r2, #1
 8021f34:	4619      	mov	r1, r3
 8021f36:	f013 f99d 	bl	8035274 <HAL_UART_Receive_IT>
			} else
				ResetReadState();
			break;
 8021f3a:	e08f      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
				ResetReadState();
 8021f3c:	6878      	ldr	r0, [r7, #4]
 8021f3e:	f7ff fec1 	bl	8021cc4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8021f42:	e08b      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::PERIPHERY_ID: {
			CurrentRequest.PeripheryID = CurrentValue;
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	f883 2b9d 	strb.w	r2, [r3, #2973]	; 0xb9d
			CurrentState = ReadState::REQUEST_SIZE;
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	2203      	movs	r2, #3
 8021f54:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f64:	2201      	movs	r2, #1
 8021f66:	4619      	mov	r1, r3
 8021f68:	f013 f984 	bl	8035274 <HAL_UART_Receive_IT>
			break;
 8021f6c:	e076      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::REQUEST_SIZE: {
			CurrentRequest.RequestSize = CurrentValue;
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021f74:	461a      	mov	r2, r3
 8021f76:	687b      	ldr	r3, [r7, #4]
 8021f78:	f8c3 2b94 	str.w	r2, [r3, #2964]	; 0xb94
			CurrentState = ReadState::RESPONCE_SIZE;
 8021f7c:	687b      	ldr	r3, [r7, #4]
 8021f7e:	2204      	movs	r2, #4
 8021f80:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021f84:	687b      	ldr	r3, [r7, #4]
 8021f86:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021f8a:	687b      	ldr	r3, [r7, #4]
 8021f8c:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021f90:	2201      	movs	r2, #1
 8021f92:	4619      	mov	r1, r3
 8021f94:	f013 f96e 	bl	8035274 <HAL_UART_Receive_IT>
			break;
 8021f98:	e060      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::RESPONCE_SIZE: {
			CurrentRequest.ResponceSize = CurrentValue;
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8021fa0:	461a      	mov	r2, r3
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	f8c3 2b98 	str.w	r2, [r3, #2968]	; 0xb98
			CurrentState = ReadState::META;
 8021fa8:	687b      	ldr	r3, [r7, #4]
 8021faa:	2205      	movs	r2, #5
 8021fac:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 8021fb6:	687b      	ldr	r3, [r7, #4]
 8021fb8:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8021fbc:	2201      	movs	r2, #1
 8021fbe:	4619      	mov	r1, r3
 8021fc0:	f013 f958 	bl	8035274 <HAL_UART_Receive_IT>
			break;
 8021fc4:	e04a      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::META: {
			CurrentRequest.MetaInfo = CurrentValue;
 8021fc6:	687b      	ldr	r3, [r7, #4]
 8021fc8:	f893 2a8c 	ldrb.w	r2, [r3, #2700]	; 0xa8c
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	f883 2b9c 	strb.w	r2, [r3, #2972]	; 0xb9c
			CurrentState = ReadState::DATA;
 8021fd2:	687b      	ldr	r3, [r7, #4]
 8021fd4:	2206      	movs	r2, #6
 8021fd6:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	f8d3 4a84 	ldr.w	r4, [r3, #2692]	; 0xa84
 8021fe0:	687b      	ldr	r3, [r7, #4]
 8021fe2:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8021fe6:	4618      	mov	r0, r3
 8021fe8:	f001 fb38 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8021fec:	4601      	mov	r1, r0
					CurrentRequest.RequestSize);
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	f8d3 3b94 	ldr.w	r3, [r3, #2964]	; 0xb94
			HAL_UART_Receive_IT(UartHandle, CurrentRequest.Data.data(),
 8021ff4:	b29b      	uxth	r3, r3
 8021ff6:	461a      	mov	r2, r3
 8021ff8:	4620      	mov	r0, r4
 8021ffa:	f013 f93b 	bl	8035274 <HAL_UART_Receive_IT>
			break;
 8021ffe:	e02d      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::DATA: {
			CurrentState = ReadState::SOM3;
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	2207      	movs	r2, #7
 8022004:	f8c3 2a90 	str.w	r2, [r3, #2704]	; 0xa90
			HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	f8d3 0a84 	ldr.w	r0, [r3, #2692]	; 0xa84
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8022014:	2201      	movs	r2, #1
 8022016:	4619      	mov	r1, r3
 8022018:	f013 f92c 	bl	8035274 <HAL_UART_Receive_IT>
			break;
 802201c:	e01e      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		case ReadState::SOM3: {
			if (CurrentValue == SOM3Val) {
 802201e:	687b      	ldr	r3, [r7, #4]
 8022020:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8022024:	2baf      	cmp	r3, #175	; 0xaf
 8022026:	d111      	bne.n	802204c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1a4>
				size_t sz = Requests.GetSize();
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	4618      	mov	r0, r3
 802202c:	f001 fc88 	bl	8023940 <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>
 8022030:	60f8      	str	r0, [r7, #12]
				Requests.Push(CurrentRequest);
 8022032:	687a      	ldr	r2, [r7, #4]
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 802203a:	4619      	mov	r1, r3
 802203c:	4610      	mov	r0, r2
 802203e:	f001 fc8b 	bl	8023958 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>
				nRequests++;
 8022042:	4b08      	ldr	r3, [pc, #32]	; (8022064 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 8022044:	681b      	ldr	r3, [r3, #0]
 8022046:	3301      	adds	r3, #1
 8022048:	4a06      	ldr	r2, [pc, #24]	; (8022064 <_ZN13HeadInterface19ProcessRecievedDataEv+0x1bc>)
 802204a:	6013      	str	r3, [r2, #0]
				//CurrentRequest = { };
			}
			ResetReadState();
 802204c:	6878      	ldr	r0, [r7, #4]
 802204e:	f7ff fe39 	bl	8021cc4 <_ZN13HeadInterface14ResetReadStateEv>
			break;
 8022052:	e003      	b.n	802205c <_ZN13HeadInterface19ProcessRecievedDataEv+0x1b4>
		}
		default:
			ResetReadState();
 8022054:	6878      	ldr	r0, [r7, #4]
 8022056:	f7ff fe35 	bl	8021cc4 <_ZN13HeadInterface14ResetReadStateEv>
		}
	}
 802205a:	bf00      	nop
 802205c:	bf00      	nop
 802205e:	3714      	adds	r7, #20
 8022060:	46bd      	mov	sp, r7
 8022062:	bd90      	pop	{r4, r7, pc}
 8022064:	240001cc 	.word	0x240001cc

08022068 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>:
		uint16_t NumAv;
		uint16_t MaxFrames;

		static constexpr size_t Size = 3 * sizeof(uint16_t);

		void SerializeTo(uint8_t **ptr) {
 8022068:	b580      	push	{r7, lr}
 802206a:	b082      	sub	sp, #8
 802206c:	af00      	add	r7, sp, #0
 802206e:	6078      	str	r0, [r7, #4]
 8022070:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8022072:	683b      	ldr	r3, [r7, #0]
 8022074:	2b00      	cmp	r3, #0
 8022076:	d106      	bne.n	8022086 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x1e>
 8022078:	4b19      	ldr	r3, [pc, #100]	; (80220e0 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x78>)
 802207a:	4a1a      	ldr	r2, [pc, #104]	; (80220e4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 802207c:	f240 215e 	movw	r1, #606	; 0x25e
 8022080:	4819      	ldr	r0, [pc, #100]	; (80220e8 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8022082:	f019 fe7b 	bl	803bd7c <__assert_func>
			assert(*ptr);
 8022086:	683b      	ldr	r3, [r7, #0]
 8022088:	681b      	ldr	r3, [r3, #0]
 802208a:	2b00      	cmp	r3, #0
 802208c:	d106      	bne.n	802209c <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x34>
 802208e:	4b17      	ldr	r3, [pc, #92]	; (80220ec <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x84>)
 8022090:	4a14      	ldr	r2, [pc, #80]	; (80220e4 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x7c>)
 8022092:	f240 215f 	movw	r1, #607	; 0x25f
 8022096:	4814      	ldr	r0, [pc, #80]	; (80220e8 <_ZN17IMUFrameContainer4Info11SerializeToEPPh+0x80>)
 8022098:	f019 fe70 	bl	803bd7c <__assert_func>

			*reinterpret_cast<uint16_t*>(*ptr) = First;
 802209c:	683b      	ldr	r3, [r7, #0]
 802209e:	681b      	ldr	r3, [r3, #0]
 80220a0:	687a      	ldr	r2, [r7, #4]
 80220a2:	8812      	ldrh	r2, [r2, #0]
 80220a4:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 80220a6:	683b      	ldr	r3, [r7, #0]
 80220a8:	681b      	ldr	r3, [r3, #0]
 80220aa:	1c9a      	adds	r2, r3, #2
 80220ac:	683b      	ldr	r3, [r7, #0]
 80220ae:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = NumAv;
 80220b0:	683b      	ldr	r3, [r7, #0]
 80220b2:	681b      	ldr	r3, [r3, #0]
 80220b4:	687a      	ldr	r2, [r7, #4]
 80220b6:	8852      	ldrh	r2, [r2, #2]
 80220b8:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 80220ba:	683b      	ldr	r3, [r7, #0]
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	1c9a      	adds	r2, r3, #2
 80220c0:	683b      	ldr	r3, [r7, #0]
 80220c2:	601a      	str	r2, [r3, #0]

			*reinterpret_cast<uint16_t*>(*ptr) = MaxFrames;
 80220c4:	683b      	ldr	r3, [r7, #0]
 80220c6:	681b      	ldr	r3, [r3, #0]
 80220c8:	687a      	ldr	r2, [r7, #4]
 80220ca:	8892      	ldrh	r2, [r2, #4]
 80220cc:	801a      	strh	r2, [r3, #0]
			*ptr += sizeof(uint16_t);
 80220ce:	683b      	ldr	r3, [r7, #0]
 80220d0:	681b      	ldr	r3, [r3, #0]
 80220d2:	1c9a      	adds	r2, r3, #2
 80220d4:	683b      	ldr	r3, [r7, #0]
 80220d6:	601a      	str	r2, [r3, #0]
		}
 80220d8:	bf00      	nop
 80220da:	3708      	adds	r7, #8
 80220dc:	46bd      	mov	sp, r7
 80220de:	bd80      	pop	{r7, pc}
 80220e0:	0803cf9c 	.word	0x0803cf9c
 80220e4:	0803d464 	.word	0x0803d464
 80220e8:	0803cfd0 	.word	0x0803cfd0
 80220ec:	0803cfec 	.word	0x0803cfec

080220f0 <_ZN17IMUFrameContainer5ResetEv>:
	};

public:
	void Reset() {
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b084      	sub	sp, #16
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6078      	str	r0, [r7, #4]
		FrameQueue = { };
 80220f8:	6878      	ldr	r0, [r7, #4]
 80220fa:	2300      	movs	r3, #0
 80220fc:	60bb      	str	r3, [r7, #8]
 80220fe:	2300      	movs	r3, #0
 8022100:	60fb      	str	r3, [r7, #12]
 8022102:	f107 0308 	add.w	r3, r7, #8
 8022106:	e893 0006 	ldmia.w	r3, {r1, r2}
 802210a:	f001 fc67 	bl	80239dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>
		FirstSeq = 0;
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	2200      	movs	r2, #0
 8022112:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8022114:	bf00      	nop
 8022116:	3710      	adds	r7, #16
 8022118:	46bd      	mov	sp, r7
 802211a:	bd80      	pop	{r7, pc}

0802211c <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:

	void Add(const BHYWrapper::BHYFrame &frame) {
 802211c:	b580      	push	{r7, lr}
 802211e:	b082      	sub	sp, #8
 8022120:	af00      	add	r7, sp, #0
 8022122:	6078      	str	r0, [r7, #4]
 8022124:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front(frame);
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	6839      	ldr	r1, [r7, #0]
 802212a:	4618      	mov	r0, r3
 802212c:	f001 fc71 	bl	8023a12 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>
		if (FrameQueue.size() > MaxFrames)
 8022130:	687b      	ldr	r3, [r7, #4]
 8022132:	4618      	mov	r0, r3
 8022134:	f001 fc8f 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022138:	4602      	mov	r2, r0
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802213e:	429a      	cmp	r2, r3
 8022140:	bf8c      	ite	hi
 8022142:	2301      	movhi	r3, #1
 8022144:	2300      	movls	r3, #0
 8022146:	b2db      	uxtb	r3, r3
 8022148:	2b00      	cmp	r3, #0
 802214a:	d002      	beq.n	8022152 <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE+0x36>
			Remove();
 802214c:	6878      	ldr	r0, [r7, #4]
 802214e:	f000 f804 	bl	802215a <_ZN17IMUFrameContainer6RemoveEv>
	}
 8022152:	bf00      	nop
 8022154:	3708      	adds	r7, #8
 8022156:	46bd      	mov	sp, r7
 8022158:	bd80      	pop	{r7, pc}

0802215a <_ZN17IMUFrameContainer6RemoveEv>:

	void Remove() {
 802215a:	b580      	push	{r7, lr}
 802215c:	b082      	sub	sp, #8
 802215e:	af00      	add	r7, sp, #0
 8022160:	6078      	str	r0, [r7, #4]
		FrameQueue.pop_back();
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	4618      	mov	r0, r3
 8022166:	f001 fc88 	bl	8023a7a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
		FirstSeq++;
 802216a:	687b      	ldr	r3, [r7, #4]
 802216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802216e:	1c5a      	adds	r2, r3, #1
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	629a      	str	r2, [r3, #40]	; 0x28
	}
 8022174:	bf00      	nop
 8022176:	3708      	adds	r7, #8
 8022178:	46bd      	mov	sp, r7
 802217a:	bd80      	pop	{r7, pc}

0802217c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 802217c:	b5b0      	push	{r4, r5, r7, lr}
 802217e:	b08a      	sub	sp, #40	; 0x28
 8022180:	af00      	add	r7, sp, #0
 8022182:	60f8      	str	r0, [r7, #12]
 8022184:	60b9      	str	r1, [r7, #8]
 8022186:	607a      	str	r2, [r7, #4]
		if (FrameQueue.empty())
 8022188:	68fb      	ldr	r3, [r7, #12]
 802218a:	4618      	mov	r0, r3
 802218c:	f001 fc98 	bl	8023ac0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022190:	4603      	mov	r3, r0
 8022192:	2b00      	cmp	r3, #0
 8022194:	d001      	beq.n	802219a <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x1e>
			return false;
 8022196:	2300      	movs	r3, #0
 8022198:	e038      	b.n	802220c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		if (seq < FirstSeq || seq > FrameQueue.size() + FirstSeq - 1)
 802219a:	68fb      	ldr	r3, [r7, #12]
 802219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802219e:	68ba      	ldr	r2, [r7, #8]
 80221a0:	429a      	cmp	r2, r3
 80221a2:	d30b      	bcc.n	80221bc <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x40>
 80221a4:	68fb      	ldr	r3, [r7, #12]
 80221a6:	4618      	mov	r0, r3
 80221a8:	f001 fc55 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80221ac:	4602      	mov	r2, r0
 80221ae:	68fb      	ldr	r3, [r7, #12]
 80221b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221b2:	4413      	add	r3, r2
 80221b4:	3b01      	subs	r3, #1
 80221b6:	68ba      	ldr	r2, [r7, #8]
 80221b8:	429a      	cmp	r2, r3
 80221ba:	d901      	bls.n	80221c0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x44>
 80221bc:	2301      	movs	r3, #1
 80221be:	e000      	b.n	80221c2 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x46>
 80221c0:	2300      	movs	r3, #0
 80221c2:	2b00      	cmp	r3, #0
 80221c4:	d001      	beq.n	80221ca <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x4e>
			return false;
 80221c6:	2300      	movs	r3, #0
 80221c8:	e020      	b.n	802220c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x90>

		auto imuFrame = FrameQueue[(FrameQueue.size() - 1) - (seq - FirstSeq)];
 80221ca:	68fc      	ldr	r4, [r7, #12]
 80221cc:	68fb      	ldr	r3, [r7, #12]
 80221ce:	4618      	mov	r0, r3
 80221d0:	f001 fc41 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 80221d4:	4601      	mov	r1, r0
 80221d6:	68fb      	ldr	r3, [r7, #12]
 80221d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80221da:	68bb      	ldr	r3, [r7, #8]
 80221dc:	1ad3      	subs	r3, r2, r3
 80221de:	440b      	add	r3, r1
 80221e0:	3b01      	subs	r3, #1
 80221e2:	4619      	mov	r1, r3
 80221e4:	4620      	mov	r0, r4
 80221e6:	f001 fc7d 	bl	8023ae4 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 80221ea:	4603      	mov	r3, r0
 80221ec:	f107 0414 	add.w	r4, r7, #20
 80221f0:	461d      	mov	r5, r3
 80221f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80221f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80221f6:	682b      	ldr	r3, [r5, #0]
 80221f8:	6023      	str	r3, [r4, #0]
		//assert(imuFrame.Seq == seq);

		frame = imuFrame;
 80221fa:	687b      	ldr	r3, [r7, #4]
 80221fc:	461d      	mov	r5, r3
 80221fe:	f107 0414 	add.w	r4, r7, #20
 8022202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8022204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8022206:	6823      	ldr	r3, [r4, #0]
 8022208:	602b      	str	r3, [r5, #0]
		return true;
 802220a:	2301      	movs	r3, #1
	}
 802220c:	4618      	mov	r0, r3
 802220e:	3728      	adds	r7, #40	; 0x28
 8022210:	46bd      	mov	sp, r7
 8022212:	bdb0      	pop	{r4, r5, r7, pc}

08022214 <_ZNK17IMUFrameContainer7GetInfoEv>:
		if (FrameQueue.empty())
			return false;
		return Get(FrameQueue.size() - 1, frame);
	}

	Info GetInfo() const {
 8022214:	b580      	push	{r7, lr}
 8022216:	b082      	sub	sp, #8
 8022218:	af00      	add	r7, sp, #0
 802221a:	6078      	str	r0, [r7, #4]
 802221c:	6039      	str	r1, [r7, #0]
		return {FirstSeq, FrameQueue.size(), MaxFrames};
 802221e:	683b      	ldr	r3, [r7, #0]
 8022220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022222:	b29a      	uxth	r2, r3
 8022224:	687b      	ldr	r3, [r7, #4]
 8022226:	801a      	strh	r2, [r3, #0]
 8022228:	683b      	ldr	r3, [r7, #0]
 802222a:	4618      	mov	r0, r3
 802222c:	f001 fc13 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022230:	4603      	mov	r3, r0
 8022232:	b29a      	uxth	r2, r3
 8022234:	687b      	ldr	r3, [r7, #4]
 8022236:	805a      	strh	r2, [r3, #2]
 8022238:	683b      	ldr	r3, [r7, #0]
 802223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802223c:	b29a      	uxth	r2, r3
 802223e:	687b      	ldr	r3, [r7, #4]
 8022240:	809a      	strh	r2, [r3, #4]
	}
 8022242:	6878      	ldr	r0, [r7, #4]
 8022244:	3708      	adds	r7, #8
 8022246:	46bd      	mov	sp, r7
 8022248:	bd80      	pop	{r7, pc}

0802224a <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>:

	std::queue<size_t> StrobeQueue;
	size_t CurrentSeq = 0;

public:
	void ProcessStrobe(const BHYWrapper &IMU) {
 802224a:	b580      	push	{r7, lr}
 802224c:	b086      	sub	sp, #24
 802224e:	af00      	add	r7, sp, #0
 8022250:	6078      	str	r0, [r7, #4]
 8022252:	6039      	str	r1, [r7, #0]
		uint32_t currentTime = HAL_GetTick();
 8022254:	f008 fd18 	bl	802ac88 <HAL_GetTick>
 8022258:	6178      	str	r0, [r7, #20]

		switch (State) {
 802225a:	687b      	ldr	r3, [r7, #4]
 802225c:	689b      	ldr	r3, [r3, #8]
 802225e:	2b00      	cmp	r3, #0
 8022260:	d04e      	beq.n	8022300 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xb6>
 8022262:	2b01      	cmp	r3, #1
 8022264:	d154      	bne.n	8022310 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		case PulseState::Down: {
			State = PulseState::Up;
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	2200      	movs	r2, #0
 802226a:	609a      	str	r2, [r3, #8]

			uint32_t startTime = RiseTime;
 802226c:	687b      	ldr	r3, [r7, #4]
 802226e:	685b      	ldr	r3, [r3, #4]
 8022270:	613b      	str	r3, [r7, #16]
			RiseTime = currentTime;
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	697a      	ldr	r2, [r7, #20]
 8022276:	605a      	str	r2, [r3, #4]

			if (!FallTime || !RiseTime)
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	681b      	ldr	r3, [r3, #0]
 802227c:	2b00      	cmp	r3, #0
 802227e:	d046      	beq.n	802230e <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	685b      	ldr	r3, [r3, #4]
 8022284:	2b00      	cmp	r3, #0
 8022286:	d042      	beq.n	802230e <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc4>
				return;

			uint32_t duration = currentTime - startTime;
 8022288:	697a      	ldr	r2, [r7, #20]
 802228a:	693b      	ldr	r3, [r7, #16]
 802228c:	1ad3      	subs	r3, r2, r3
 802228e:	60fb      	str	r3, [r7, #12]

			StrobeDuration += duration;
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	ed93 7a05 	vldr	s14, [r3, #20]
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	ee07 3a90 	vmov	s15, r3
 802229c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80222a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	edc3 7a05 	vstr	s15, [r3, #20]
			StrobeDuration /= 2;
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80222b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80222b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	edc3 7a05 	vstr	s15, [r3, #20]

			if (std::abs(long(duration - TargetDuration))
 80222be:	687b      	ldr	r3, [r7, #4]
 80222c0:	691b      	ldr	r3, [r3, #16]
 80222c2:	68fa      	ldr	r2, [r7, #12]
 80222c4:	1ad3      	subs	r3, r2, r3
 80222c6:	4618      	mov	r0, r3
 80222c8:	f7fe fde4 	bl	8020e94 <_ZSt3absl>
 80222cc:	4602      	mov	r2, r0
					< long(DurationThreshold))
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	68db      	ldr	r3, [r3, #12]
 80222d2:	429a      	cmp	r2, r3
 80222d4:	bfb4      	ite	lt
 80222d6:	2301      	movlt	r3, #1
 80222d8:	2300      	movge	r3, #0
 80222da:	b2db      	uxtb	r3, r3
			if (std::abs(long(duration - TargetDuration))
 80222dc:	2b00      	cmp	r3, #0
 80222de:	d008      	beq.n	80222f2 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xa8>
				StrobeQueue.push(CurrentSeq);
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	f103 0218 	add.w	r2, r3, #24
 80222e6:	687b      	ldr	r3, [r7, #4]
 80222e8:	3340      	adds	r3, #64	; 0x40
 80222ea:	4619      	mov	r1, r3
 80222ec:	4610      	mov	r0, r2
 80222ee:	f001 fc0a 	bl	8023b06 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>

			CurrentSeq = IMU.GetSeq();
 80222f2:	6838      	ldr	r0, [r7, #0]
 80222f4:	f7fe fc8e 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 80222f8:	4602      	mov	r2, r0
 80222fa:	687b      	ldr	r3, [r7, #4]
 80222fc:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80222fe:	e007      	b.n	8022310 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
		}
		case PulseState::Up:
			State = PulseState::Down;
 8022300:	687b      	ldr	r3, [r7, #4]
 8022302:	2201      	movs	r2, #1
 8022304:	609a      	str	r2, [r3, #8]
			FallTime = currentTime;
 8022306:	687b      	ldr	r3, [r7, #4]
 8022308:	697a      	ldr	r2, [r7, #20]
 802230a:	601a      	str	r2, [r3, #0]
			break;
 802230c:	e000      	b.n	8022310 <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper+0xc6>
				return;
 802230e:	bf00      	nop
		}
	}
 8022310:	3718      	adds	r7, #24
 8022312:	46bd      	mov	sp, r7
 8022314:	bd80      	pop	{r7, pc}

08022316 <_ZN20StrobeDurationFilter9ConfigureEhh>:

	void Configure(uint8_t targetDuration, uint8_t durationThreshold) {
 8022316:	b480      	push	{r7}
 8022318:	b083      	sub	sp, #12
 802231a:	af00      	add	r7, sp, #0
 802231c:	6078      	str	r0, [r7, #4]
 802231e:	460b      	mov	r3, r1
 8022320:	70fb      	strb	r3, [r7, #3]
 8022322:	4613      	mov	r3, r2
 8022324:	70bb      	strb	r3, [r7, #2]
		TargetDuration = targetDuration;
 8022326:	78fa      	ldrb	r2, [r7, #3]
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	611a      	str	r2, [r3, #16]
		DurationThreshold = durationThreshold;
 802232c:	78ba      	ldrb	r2, [r7, #2]
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	60da      	str	r2, [r3, #12]
	}
 8022332:	bf00      	nop
 8022334:	370c      	adds	r7, #12
 8022336:	46bd      	mov	sp, r7
 8022338:	f85d 7b04 	ldr.w	r7, [sp], #4
 802233c:	4770      	bx	lr

0802233e <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>:

	float GetStrobeDuration() const {
 802233e:	b480      	push	{r7}
 8022340:	b083      	sub	sp, #12
 8022342:	af00      	add	r7, sp, #0
 8022344:	6078      	str	r0, [r7, #4]
		return StrobeDuration;
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	695b      	ldr	r3, [r3, #20]
 802234a:	ee07 3a90 	vmov	s15, r3
	}
 802234e:	eeb0 0a67 	vmov.f32	s0, s15
 8022352:	370c      	adds	r7, #12
 8022354:	46bd      	mov	sp, r7
 8022356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802235a:	4770      	bx	lr

0802235c <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>:

	void ResetStrobeDuration() {
 802235c:	b480      	push	{r7}
 802235e:	b083      	sub	sp, #12
 8022360:	af00      	add	r7, sp, #0
 8022362:	6078      	str	r0, [r7, #4]
		StrobeDuration = 1;
 8022364:	687b      	ldr	r3, [r7, #4]
 8022366:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 802236a:	615a      	str	r2, [r3, #20]
	}
 802236c:	bf00      	nop
 802236e:	370c      	adds	r7, #12
 8022370:	46bd      	mov	sp, r7
 8022372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022376:	4770      	bx	lr

08022378 <_ZNK20StrobeDurationFilter9GetStrobeEv>:

	size_t GetStrobe() const {
 8022378:	b580      	push	{r7, lr}
 802237a:	b082      	sub	sp, #8
 802237c:	af00      	add	r7, sp, #0
 802237e:	6078      	str	r0, [r7, #4]
		assert(HasStrobe());
 8022380:	6878      	ldr	r0, [r7, #4]
 8022382:	f000 f81b 	bl	80223bc <_ZNK20StrobeDurationFilter9HasStrobeEv>
 8022386:	4603      	mov	r3, r0
 8022388:	2b00      	cmp	r3, #0
 802238a:	d106      	bne.n	802239a <_ZNK20StrobeDurationFilter9GetStrobeEv+0x22>
 802238c:	4b08      	ldr	r3, [pc, #32]	; (80223b0 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x38>)
 802238e:	4a09      	ldr	r2, [pc, #36]	; (80223b4 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x3c>)
 8022390:	f240 21d7 	movw	r1, #727	; 0x2d7
 8022394:	4808      	ldr	r0, [pc, #32]	; (80223b8 <_ZNK20StrobeDurationFilter9GetStrobeEv+0x40>)
 8022396:	f019 fcf1 	bl	803bd7c <__assert_func>
		return StrobeQueue.front();
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	3318      	adds	r3, #24
 802239e:	4618      	mov	r0, r3
 80223a0:	f001 fbbf 	bl	8023b22 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>
 80223a4:	4603      	mov	r3, r0
 80223a6:	681b      	ldr	r3, [r3, #0]
	}
 80223a8:	4618      	mov	r0, r3
 80223aa:	3708      	adds	r7, #8
 80223ac:	46bd      	mov	sp, r7
 80223ae:	bd80      	pop	{r7, pc}
 80223b0:	0803d49c 	.word	0x0803d49c
 80223b4:	0803d4a8 	.word	0x0803d4a8
 80223b8:	0803cfd0 	.word	0x0803cfd0

080223bc <_ZNK20StrobeDurationFilter9HasStrobeEv>:

	bool HasStrobe() const {
 80223bc:	b580      	push	{r7, lr}
 80223be:	b082      	sub	sp, #8
 80223c0:	af00      	add	r7, sp, #0
 80223c2:	6078      	str	r0, [r7, #4]
		return !StrobeQueue.empty();
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	3318      	adds	r3, #24
 80223c8:	4618      	mov	r0, r3
 80223ca:	f001 fbb7 	bl	8023b3c <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>
 80223ce:	4603      	mov	r3, r0
 80223d0:	f083 0301 	eor.w	r3, r3, #1
 80223d4:	b2db      	uxtb	r3, r3
	}
 80223d6:	4618      	mov	r0, r3
 80223d8:	3708      	adds	r7, #8
 80223da:	46bd      	mov	sp, r7
 80223dc:	bd80      	pop	{r7, pc}

080223de <_ZN20StrobeDurationFilter9PopStrobeEv>:

	void PopStrobe() {
 80223de:	b580      	push	{r7, lr}
 80223e0:	b082      	sub	sp, #8
 80223e2:	af00      	add	r7, sp, #0
 80223e4:	6078      	str	r0, [r7, #4]
		StrobeQueue.pop();
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	3318      	adds	r3, #24
 80223ea:	4618      	mov	r0, r3
 80223ec:	f001 fbb3 	bl	8023b56 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>
	}
 80223f0:	bf00      	nop
 80223f2:	3708      	adds	r7, #8
 80223f4:	46bd      	mov	sp, r7
 80223f6:	bd80      	pop	{r7, pc}

080223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>:
		static constexpr Type Reset = 3;
		static constexpr Type SetOffset = 4;
		static constexpr Type StrobeWidth = 5;
		static constexpr Type ConfigureFilter = 6;

		static uint8_t Serialize(Type mode) {
 80223f8:	b480      	push	{r7}
 80223fa:	b083      	sub	sp, #12
 80223fc:	af00      	add	r7, sp, #0
 80223fe:	4603      	mov	r3, r0
 8022400:	71fb      	strb	r3, [r7, #7]
			return mode;
 8022402:	79fb      	ldrb	r3, [r7, #7]
		}
 8022404:	4618      	mov	r0, r3
 8022406:	370c      	adds	r7, #12
 8022408:	46bd      	mov	sp, r7
 802240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802240e:	4770      	bx	lr

08022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>:
		static Type Deserialize(uint8_t meta) {
 8022410:	b480      	push	{r7}
 8022412:	b083      	sub	sp, #12
 8022414:	af00      	add	r7, sp, #0
 8022416:	4603      	mov	r3, r0
 8022418:	71fb      	strb	r3, [r7, #7]
			return meta;
 802241a:	79fb      	ldrb	r3, [r7, #7]
		}
 802241c:	4618      	mov	r0, r3
 802241e:	370c      	adds	r7, #12
 8022420:	46bd      	mov	sp, r7
 8022422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022426:	4770      	bx	lr

08022428 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>:
		static constexpr Type BadRequest = 3;
		static constexpr Type BadOffset = 4;
	};

private:
	Responce GetFrameBySeq(const Request &request,
 8022428:	b580      	push	{r7, lr}
 802242a:	b08c      	sub	sp, #48	; 0x30
 802242c:	af00      	add	r7, sp, #0
 802242e:	60f8      	str	r0, [r7, #12]
 8022430:	60b9      	str	r1, [r7, #8]
 8022432:	607a      	str	r2, [r7, #4]
 8022434:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802243c:	4618      	mov	r0, r3
 802243e:	f7ff ffe7 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022442:	4603      	mov	r3, r0
 8022444:	2b00      	cmp	r3, #0
 8022446:	d006      	beq.n	8022456 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x2e>
 8022448:	4b28      	ldr	r3, [pc, #160]	; (80224ec <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc4>)
 802244a:	4a29      	ldr	r2, [pc, #164]	; (80224f0 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xc8>)
 802244c:	f44f 7141 	mov.w	r1, #772	; 0x304
 8022450:	4828      	ldr	r0, [pc, #160]	; (80224f4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xcc>)
 8022452:	f019 fc93 	bl	803bd7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::FrameBySeq);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022456:	68fb      	ldr	r3, [r7, #12]
 8022458:	2201      	movs	r2, #1
 802245a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::FrameBySeq);
 802245e:	2000      	movs	r0, #0
 8022460:	f7ff ffca 	bl	80223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022464:	4603      	mov	r3, r0
 8022466:	461a      	mov	r2, r3
 8022468:	68fb      	ldr	r3, [r7, #12]
 802246a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 802246e:	68fb      	ldr	r3, [r7, #12]
 8022470:	2211      	movs	r2, #17
 8022472:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802247c:	2b02      	cmp	r3, #2
 802247e:	d004      	beq.n	802248a <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022480:	68fb      	ldr	r3, [r7, #12]
 8022482:	2203      	movs	r2, #3
 8022484:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022488:	e02c      	b.n	80224e4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	4618      	mov	r0, r3
 802248e:	f001 f925 	bl	80236dc <_ZNKSt5arrayIhLj256EE4dataEv>
 8022492:	4603      	mov	r3, r0
 8022494:	881b      	ldrh	r3, [r3, #0]
 8022496:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8022498:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802249a:	f107 0218 	add.w	r2, r7, #24
 802249e:	4619      	mov	r1, r3
 80224a0:	6838      	ldr	r0, [r7, #0]
 80224a2:	f7ff fe6b 	bl	802217c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 80224a6:	4603      	mov	r3, r0
 80224a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 80224ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80224b0:	f083 0301 	eor.w	r3, r3, #1
 80224b4:	b2db      	uxtb	r3, r3
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d004      	beq.n	80224c4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0x9c>
			responce.Error = ErrorCodes::FrameUnavailable;
 80224ba:	68fb      	ldr	r3, [r7, #12]
 80224bc:	2201      	movs	r2, #1
 80224be:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80224c2:	e00f      	b.n	80224e4 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer+0xbc>
		}

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 80224c4:	68f8      	ldr	r0, [r7, #12]
 80224c6:	f001 f8c9 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 80224ca:	4601      	mov	r1, r0
 80224cc:	f107 0217 	add.w	r2, r7, #23
 80224d0:	f107 0318 	add.w	r3, r7, #24
 80224d4:	4618      	mov	r0, r3
 80224d6:	f7fe fb3f 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>
		responce.Error = ErrorCodes::Success;
 80224da:	68fb      	ldr	r3, [r7, #12]
 80224dc:	2200      	movs	r2, #0
 80224de:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80224e2:	bf00      	nop
	}
 80224e4:	68f8      	ldr	r0, [r7, #12]
 80224e6:	3730      	adds	r7, #48	; 0x30
 80224e8:	46bd      	mov	sp, r7
 80224ea:	bd80      	pop	{r7, pc}
 80224ec:	0803d4d8 	.word	0x0803d4d8
 80224f0:	0803d520 	.word	0x0803d520
 80224f4:	0803cfd0 	.word	0x0803cfd0

080224f8 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>:

	Responce GetInfo(const Request &request,
 80224f8:	b580      	push	{r7, lr}
 80224fa:	b088      	sub	sp, #32
 80224fc:	af00      	add	r7, sp, #0
 80224fe:	60f8      	str	r0, [r7, #12]
 8022500:	60b9      	str	r1, [r7, #8]
 8022502:	607a      	str	r2, [r7, #4]
 8022504:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(RequestMode::Deserialize(request.MetaInfo) == RequestMode::Info);
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802250c:	4618      	mov	r0, r3
 802250e:	f7ff ff7f 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022512:	4603      	mov	r3, r0
 8022514:	2b01      	cmp	r3, #1
 8022516:	d006      	beq.n	8022526 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x2e>
 8022518:	4b1e      	ldr	r3, [pc, #120]	; (8022594 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x9c>)
 802251a:	4a1f      	ldr	r2, [pc, #124]	; (8022598 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa0>)
 802251c:	f240 3126 	movw	r1, #806	; 0x326
 8022520:	481e      	ldr	r0, [pc, #120]	; (802259c <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0xa4>)
 8022522:	f019 fc2b 	bl	803bd7c <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022526:	68fb      	ldr	r3, [r7, #12]
 8022528:	2201      	movs	r2, #1
 802252a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Info);
 802252e:	2001      	movs	r0, #1
 8022530:	f7ff ff62 	bl	80223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022534:	4603      	mov	r3, r0
 8022536:	461a      	mov	r2, r3
 8022538:	68fb      	ldr	r3, [r7, #12]
 802253a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = IMUFrameContainer::Info::Size;
 802253e:	68fb      	ldr	r3, [r7, #12]
 8022540:	2206      	movs	r2, #6
 8022542:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 802254c:	2b01      	cmp	r3, #1
 802254e:	d004      	beq.n	802255a <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022550:	68fb      	ldr	r3, [r7, #12]
 8022552:	2203      	movs	r2, #3
 8022554:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022558:	e017      	b.n	802258a <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer+0x92>
		}

		uint8_t *ptr = responce.Data.data();
 802255a:	68f8      	ldr	r0, [r7, #12]
 802255c:	f001 f87e 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8022560:	4603      	mov	r3, r0
 8022562:	61fb      	str	r3, [r7, #28]
		auto info = container.GetInfo();
 8022564:	f107 0314 	add.w	r3, r7, #20
 8022568:	6839      	ldr	r1, [r7, #0]
 802256a:	4618      	mov	r0, r3
 802256c:	f7ff fe52 	bl	8022214 <_ZNK17IMUFrameContainer7GetInfoEv>

		info.SerializeTo(&ptr);
 8022570:	f107 021c 	add.w	r2, r7, #28
 8022574:	f107 0314 	add.w	r3, r7, #20
 8022578:	4611      	mov	r1, r2
 802257a:	4618      	mov	r0, r3
 802257c:	f7ff fd74 	bl	8022068 <_ZN17IMUFrameContainer4Info11SerializeToEPPh>

		responce.Error = ErrorCodes::Success;
 8022580:	68fb      	ldr	r3, [r7, #12]
 8022582:	2200      	movs	r2, #0
 8022584:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022588:	bf00      	nop
	}
 802258a:	68f8      	ldr	r0, [r7, #12]
 802258c:	3720      	adds	r7, #32
 802258e:	46bd      	mov	sp, r7
 8022590:	bd80      	pop	{r7, pc}
 8022592:	bf00      	nop
 8022594:	0803d574 	.word	0x0803d574
 8022598:	0803d5b4 	.word	0x0803d5b4
 802259c:	0803cfd0 	.word	0x0803cfd0

080225a0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>:

	Responce GetLatestFrame(const Request &request, const BHYWrapper &IMU) {
 80225a0:	b580      	push	{r7, lr}
 80225a2:	b08a      	sub	sp, #40	; 0x28
 80225a4:	af00      	add	r7, sp, #0
 80225a6:	60f8      	str	r0, [r7, #12]
 80225a8:	60b9      	str	r1, [r7, #8]
 80225aa:	607a      	str	r2, [r7, #4]
 80225ac:	603b      	str	r3, [r7, #0]
		assert(
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80225b4:	4618      	mov	r0, r3
 80225b6:	f7ff ff2b 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80225ba:	4603      	mov	r3, r0
 80225bc:	2b02      	cmp	r3, #2
 80225be:	d006      	beq.n	80225ce <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x2e>
 80225c0:	4b1d      	ldr	r3, [pc, #116]	; (8022638 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x98>)
 80225c2:	4a1e      	ldr	r2, [pc, #120]	; (802263c <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x9c>)
 80225c4:	f240 313d 	movw	r1, #829	; 0x33d
 80225c8:	481d      	ldr	r0, [pc, #116]	; (8022640 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0xa0>)
 80225ca:	f019 fbd7 	bl	803bd7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::LatestFrame);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80225ce:	68fb      	ldr	r3, [r7, #12]
 80225d0:	2201      	movs	r2, #1
 80225d2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::LatestFrame);
 80225d6:	2002      	movs	r0, #2
 80225d8:	f7ff ff0e 	bl	80223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80225dc:	4603      	mov	r3, r0
 80225de:	461a      	mov	r2, r3
 80225e0:	68fb      	ldr	r3, [r7, #12]
 80225e2:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = BHYWrapper::BHYFrame::Size;
 80225e6:	68fb      	ldr	r3, [r7, #12]
 80225e8:	2211      	movs	r2, #17
 80225ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80225f4:	2b01      	cmp	r3, #1
 80225f6:	d004      	beq.n	8022602 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80225f8:	68fb      	ldr	r3, [r7, #12]
 80225fa:	2203      	movs	r2, #3
 80225fc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022600:	e015      	b.n	802262e <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper+0x8e>
		}

		BHYWrapper::BHYFrame imuFrame = IMU.GetFrame();
 8022602:	f107 0314 	add.w	r3, r7, #20
 8022606:	6839      	ldr	r1, [r7, #0]
 8022608:	4618      	mov	r0, r3
 802260a:	f7fe f9fb 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>

		uint8_t sz;
		imuFrame.SerializeTo(responce.Data.data(), &sz);
 802260e:	68f8      	ldr	r0, [r7, #12]
 8022610:	f001 f824 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8022614:	4601      	mov	r1, r0
 8022616:	f107 0213 	add.w	r2, r7, #19
 802261a:	f107 0314 	add.w	r3, r7, #20
 802261e:	4618      	mov	r0, r3
 8022620:	f7fe fa9a 	bl	8020b58 <_ZN10BHYWrapper8BHYFrame11SerializeToEPhS1_>

		responce.Error = ErrorCodes::Success;
 8022624:	68fb      	ldr	r3, [r7, #12]
 8022626:	2200      	movs	r2, #0
 8022628:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 802262c:	bf00      	nop
	}
 802262e:	68f8      	ldr	r0, [r7, #12]
 8022630:	3728      	adds	r7, #40	; 0x28
 8022632:	46bd      	mov	sp, r7
 8022634:	bd80      	pop	{r7, pc}
 8022636:	bf00      	nop
 8022638:	0803d604 	.word	0x0803d604
 802263c:	0803d64c 	.word	0x0803d64c
 8022640:	0803cfd0 	.word	0x0803cfd0

08022644 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>:

	Responce DoReset(const Request &request, IMUFrameContainer &container,
 8022644:	b580      	push	{r7, lr}
 8022646:	b084      	sub	sp, #16
 8022648:	af00      	add	r7, sp, #0
 802264a:	60f8      	str	r0, [r7, #12]
 802264c:	60b9      	str	r1, [r7, #8]
 802264e:	607a      	str	r2, [r7, #4]
 8022650:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022658:	4618      	mov	r0, r3
 802265a:	f7ff fed9 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802265e:	4603      	mov	r3, r0
 8022660:	2b03      	cmp	r3, #3
 8022662:	d006      	beq.n	8022672 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x2e>
 8022664:	4b17      	ldr	r3, [pc, #92]	; (80226c4 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x80>)
 8022666:	4a18      	ldr	r2, [pc, #96]	; (80226c8 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x84>)
 8022668:	f240 3157 	movw	r1, #855	; 0x357
 802266c:	4817      	ldr	r0, [pc, #92]	; (80226cc <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x88>)
 802266e:	f019 fb85 	bl	803bd7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::Reset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022672:	68fb      	ldr	r3, [r7, #12]
 8022674:	2201      	movs	r2, #1
 8022676:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::Reset);
 802267a:	2003      	movs	r0, #3
 802267c:	f7ff febc 	bl	80223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022680:	4603      	mov	r3, r0
 8022682:	461a      	mov	r2, r3
 8022684:	68fb      	ldr	r3, [r7, #12]
 8022686:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 802268a:	68fb      	ldr	r3, [r7, #12]
 802268c:	2201      	movs	r2, #1
 802268e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022698:	2b01      	cmp	r3, #1
 802269a:	d004      	beq.n	80226a6 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 802269c:	68fb      	ldr	r3, [r7, #12]
 802269e:	2203      	movs	r2, #3
 80226a0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80226a4:	e00a      	b.n	80226bc <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter+0x78>
		}

		container.Reset();
 80226a6:	6838      	ldr	r0, [r7, #0]
 80226a8:	f7ff fd22 	bl	80220f0 <_ZN17IMUFrameContainer5ResetEv>
		sFilter.ResetStrobeDuration();
 80226ac:	69b8      	ldr	r0, [r7, #24]
 80226ae:	f7ff fe55 	bl	802235c <_ZN20StrobeDurationFilter19ResetStrobeDurationEv>

		responce.Error = ErrorCodes::Success;
 80226b2:	68fb      	ldr	r3, [r7, #12]
 80226b4:	2200      	movs	r2, #0
 80226b6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80226ba:	bf00      	nop
	}
 80226bc:	68f8      	ldr	r0, [r7, #12]
 80226be:	3710      	adds	r7, #16
 80226c0:	46bd      	mov	sp, r7
 80226c2:	bd80      	pop	{r7, pc}
 80226c4:	0803d69c 	.word	0x0803d69c
 80226c8:	0803d6e0 	.word	0x0803d6e0
 80226cc:	0803cfd0 	.word	0x0803cfd0

080226d0 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>:

	Responce SetOffset(const Request &request, size_t &strobeOffset) {
 80226d0:	b580      	push	{r7, lr}
 80226d2:	b086      	sub	sp, #24
 80226d4:	af00      	add	r7, sp, #0
 80226d6:	60f8      	str	r0, [r7, #12]
 80226d8:	60b9      	str	r1, [r7, #8]
 80226da:	607a      	str	r2, [r7, #4]
 80226dc:	603b      	str	r3, [r7, #0]
		assert(
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80226e4:	4618      	mov	r0, r3
 80226e6:	f7ff fe93 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 80226ea:	4603      	mov	r3, r0
 80226ec:	2b04      	cmp	r3, #4
 80226ee:	d006      	beq.n	80226fe <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x2e>
 80226f0:	4b1a      	ldr	r3, [pc, #104]	; (802275c <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x8c>)
 80226f2:	4a1b      	ldr	r2, [pc, #108]	; (8022760 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x90>)
 80226f4:	f240 316e 	movw	r1, #878	; 0x36e
 80226f8:	481a      	ldr	r0, [pc, #104]	; (8022764 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x94>)
 80226fa:	f019 fb3f 	bl	803bd7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::SetOffset);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80226fe:	68fb      	ldr	r3, [r7, #12]
 8022700:	2201      	movs	r2, #1
 8022702:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::SetOffset);
 8022706:	2004      	movs	r0, #4
 8022708:	f7ff fe76 	bl	80223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 802270c:	4603      	mov	r3, r0
 802270e:	461a      	mov	r2, r3
 8022710:	68fb      	ldr	r3, [r7, #12]
 8022712:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 8022716:	68fb      	ldr	r3, [r7, #12]
 8022718:	2201      	movs	r2, #1
 802271a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022724:	2b01      	cmp	r3, #1
 8022726:	d004      	beq.n	8022732 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x62>
			responce.Error = ErrorCodes::BadRequest;
 8022728:	68fb      	ldr	r3, [r7, #12]
 802272a:	2203      	movs	r2, #3
 802272c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022730:	e00f      	b.n	8022752 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj+0x82>
		}

		uint8_t newOffset = request.Data[0];
 8022732:	687b      	ldr	r3, [r7, #4]
 8022734:	2100      	movs	r1, #0
 8022736:	4618      	mov	r0, r3
 8022738:	f7ff f958 	bl	80219ec <_ZNKSt5arrayIhLj256EEixEj>
 802273c:	4603      	mov	r3, r0
 802273e:	781b      	ldrb	r3, [r3, #0]
 8022740:	75fb      	strb	r3, [r7, #23]

		strobeOffset = newOffset;
 8022742:	7dfa      	ldrb	r2, [r7, #23]
 8022744:	683b      	ldr	r3, [r7, #0]
 8022746:	601a      	str	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 8022748:	68fb      	ldr	r3, [r7, #12]
 802274a:	2200      	movs	r2, #0
 802274c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 8022750:	bf00      	nop
	}
 8022752:	68f8      	ldr	r0, [r7, #12]
 8022754:	3718      	adds	r7, #24
 8022756:	46bd      	mov	sp, r7
 8022758:	bd80      	pop	{r7, pc}
 802275a:	bf00      	nop
 802275c:	0803d740 	.word	0x0803d740
 8022760:	0803d788 	.word	0x0803d788
 8022764:	0803cfd0 	.word	0x0803cfd0

08022768 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>:

	Responce ConfigureFilter(const Request &request,
 8022768:	b580      	push	{r7, lr}
 802276a:	b086      	sub	sp, #24
 802276c:	af00      	add	r7, sp, #0
 802276e:	60f8      	str	r0, [r7, #12]
 8022770:	60b9      	str	r1, [r7, #8]
 8022772:	607a      	str	r2, [r7, #4]
 8022774:	603b      	str	r3, [r7, #0]
			StrobeDurationFilter &sFilter) {
		assert(
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 802277c:	4618      	mov	r0, r3
 802277e:	f7ff fe47 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 8022782:	4603      	mov	r3, r0
 8022784:	2b06      	cmp	r3, #6
 8022786:	d006      	beq.n	8022796 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x2e>
 8022788:	4b1f      	ldr	r3, [pc, #124]	; (8022808 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa0>)
 802278a:	4a20      	ldr	r2, [pc, #128]	; (802280c <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa4>)
 802278c:	f240 3186 	movw	r1, #902	; 0x386
 8022790:	481f      	ldr	r0, [pc, #124]	; (8022810 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0xa8>)
 8022792:	f019 faf3 	bl	803bd7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::ConfigureFilter);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022796:	68fb      	ldr	r3, [r7, #12]
 8022798:	2201      	movs	r2, #1
 802279a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
 802279e:	2006      	movs	r0, #6
 80227a0:	f7ff fe2a 	bl	80223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 80227a4:	4603      	mov	r3, r0
 80227a6:	461a      	mov	r2, r3
 80227a8:	68fb      	ldr	r3, [r7, #12]
 80227aa:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
				RequestMode::ConfigureFilter);
		responce.ResponceSize = 1;
 80227ae:	68fb      	ldr	r3, [r7, #12]
 80227b0:	2201      	movs	r2, #1
 80227b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 2) {
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80227bc:	2b02      	cmp	r3, #2
 80227be:	d004      	beq.n	80227ca <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 80227c0:	68fb      	ldr	r3, [r7, #12]
 80227c2:	2203      	movs	r2, #3
 80227c4:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 80227c8:	e01a      	b.n	8022800 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter+0x98>
		}

		uint8_t targetDuration = request.Data[0];
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	2100      	movs	r1, #0
 80227ce:	4618      	mov	r0, r3
 80227d0:	f7ff f90c 	bl	80219ec <_ZNKSt5arrayIhLj256EEixEj>
 80227d4:	4603      	mov	r3, r0
 80227d6:	781b      	ldrb	r3, [r3, #0]
 80227d8:	75fb      	strb	r3, [r7, #23]
		uint8_t durationThreshold = request.Data[1];
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	2101      	movs	r1, #1
 80227de:	4618      	mov	r0, r3
 80227e0:	f7ff f904 	bl	80219ec <_ZNKSt5arrayIhLj256EEixEj>
 80227e4:	4603      	mov	r3, r0
 80227e6:	781b      	ldrb	r3, [r3, #0]
 80227e8:	75bb      	strb	r3, [r7, #22]

		sFilter.Configure(targetDuration, durationThreshold);
 80227ea:	7dba      	ldrb	r2, [r7, #22]
 80227ec:	7dfb      	ldrb	r3, [r7, #23]
 80227ee:	4619      	mov	r1, r3
 80227f0:	6838      	ldr	r0, [r7, #0]
 80227f2:	f7ff fd90 	bl	8022316 <_ZN20StrobeDurationFilter9ConfigureEhh>
		responce.Error = ErrorCodes::Success;
 80227f6:	68fb      	ldr	r3, [r7, #12]
 80227f8:	2200      	movs	r2, #0
 80227fa:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80227fe:	bf00      	nop
	}
 8022800:	68f8      	ldr	r0, [r7, #12]
 8022802:	3718      	adds	r7, #24
 8022804:	46bd      	mov	sp, r7
 8022806:	bd80      	pop	{r7, pc}
 8022808:	0803d7c8 	.word	0x0803d7c8
 802280c:	0803d814 	.word	0x0803d814
 8022810:	0803cfd0 	.word	0x0803cfd0

08022814 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>:

	Responce StrobeWidth(const Request &request,
 8022814:	b580      	push	{r7, lr}
 8022816:	b088      	sub	sp, #32
 8022818:	af00      	add	r7, sp, #0
 802281a:	6178      	str	r0, [r7, #20]
 802281c:	6139      	str	r1, [r7, #16]
 802281e:	60fa      	str	r2, [r7, #12]
 8022820:	60bb      	str	r3, [r7, #8]
			const StrobeDurationFilter &sFilter) {
		assert(
 8022822:	68fb      	ldr	r3, [r7, #12]
 8022824:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022828:	4618      	mov	r0, r3
 802282a:	f7ff fdf1 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802282e:	4603      	mov	r3, r0
 8022830:	2b05      	cmp	r3, #5
 8022832:	d006      	beq.n	8022842 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x2e>
 8022834:	4b28      	ldr	r3, [pc, #160]	; (80228d8 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc4>)
 8022836:	4a29      	ldr	r2, [pc, #164]	; (80228dc <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xc8>)
 8022838:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 802283c:	4828      	ldr	r0, [pc, #160]	; (80228e0 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xcc>)
 802283e:	f019 fa9d 	bl	803bd7c <__assert_func>
				RequestMode::Deserialize(request.MetaInfo)
						== RequestMode::StrobeWidth);

		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 8022842:	697b      	ldr	r3, [r7, #20]
 8022844:	2201      	movs	r2, #1
 8022846:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(RequestMode::StrobeWidth);
 802284a:	2005      	movs	r0, #5
 802284c:	f7ff fdd4 	bl	80223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022850:	4603      	mov	r3, r0
 8022852:	461a      	mov	r2, r3
 8022854:	697b      	ldr	r3, [r7, #20]
 8022856:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = 1;
 802285a:	697b      	ldr	r3, [r7, #20]
 802285c:	2201      	movs	r2, #1
 802285e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (request.RequestSize != 1) {
 8022862:	68fb      	ldr	r3, [r7, #12]
 8022864:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8022868:	2b01      	cmp	r3, #1
 802286a:	d004      	beq.n	8022876 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x62>
			responce.Error = ErrorCodes::BadRequest;
 802286c:	697b      	ldr	r3, [r7, #20]
 802286e:	2203      	movs	r2, #3
 8022870:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			return responce;
 8022874:	e02c      	b.n	80228d0 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xbc>
		}

		float strobeWidth = sFilter.GetStrobeDuration();
 8022876:	68b8      	ldr	r0, [r7, #8]
 8022878:	f7ff fd61 	bl	802233e <_ZNK20StrobeDurationFilter17GetStrobeDurationEv>
 802287c:	ed87 0a07 	vstr	s0, [r7, #28]

		if (strobeWidth < 0)
 8022880:	edd7 7a07 	vldr	s15, [r7, #28]
 8022884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802288c:	d502      	bpl.n	8022894 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x80>
			strobeWidth = 0;
 802288e:	f04f 0300 	mov.w	r3, #0
 8022892:	61fb      	str	r3, [r7, #28]
		if (strobeWidth > 255)
 8022894:	edd7 7a07 	vldr	s15, [r7, #28]
 8022898:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80228e4 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd0>
 802289c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80228a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228a4:	dd01      	ble.n	80228aa <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0x96>
			strobeWidth = 255;
 80228a6:	4b10      	ldr	r3, [pc, #64]	; (80228e8 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter+0xd4>)
 80228a8:	61fb      	str	r3, [r7, #28]

		responce.Data[0] = static_cast<uint8_t>(strobeWidth);
 80228aa:	2100      	movs	r1, #0
 80228ac:	6978      	ldr	r0, [r7, #20]
 80228ae:	f001 f95e 	bl	8023b6e <_ZNSt5arrayIhLj256EEixEj>
 80228b2:	4603      	mov	r3, r0
 80228b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80228b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80228bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80228c0:	793a      	ldrb	r2, [r7, #4]
 80228c2:	b2d2      	uxtb	r2, r2
 80228c4:	701a      	strb	r2, [r3, #0]
		responce.Error = ErrorCodes::Success;
 80228c6:	697b      	ldr	r3, [r7, #20]
 80228c8:	2200      	movs	r2, #0
 80228ca:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

		return responce;
 80228ce:	bf00      	nop
	}
 80228d0:	6978      	ldr	r0, [r7, #20]
 80228d2:	3720      	adds	r7, #32
 80228d4:	46bd      	mov	sp, r7
 80228d6:	bd80      	pop	{r7, pc}
 80228d8:	0803d868 	.word	0x0803d868
 80228dc:	0803d8b0 	.word	0x0803d8b0
 80228e0:	0803cfd0 	.word	0x0803cfd0
 80228e4:	437f0000 	.word	0x437f0000
 80228e8:	437f0000 	.word	0x437f0000

080228ec <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>:

	Responce UnknownModeResponce(const Request &request) {
 80228ec:	b580      	push	{r7, lr}
 80228ee:	b084      	sub	sp, #16
 80228f0:	af00      	add	r7, sp, #0
 80228f2:	60f8      	str	r0, [r7, #12]
 80228f4:	60b9      	str	r1, [r7, #8]
 80228f6:	607a      	str	r2, [r7, #4]
		Responce responce;
		responce.PeripheryID = Periphery::Imu;
 80228f8:	68fb      	ldr	r3, [r7, #12]
 80228fa:	2201      	movs	r2, #1
 80228fc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = RequestMode::Serialize(
				RequestMode::Deserialize(request.MetaInfo));
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
		responce.MetaInfo = RequestMode::Serialize(
 8022906:	4618      	mov	r0, r3
 8022908:	f7ff fd82 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802290c:	4603      	mov	r3, r0
 802290e:	4618      	mov	r0, r3
 8022910:	f7ff fd72 	bl	80223f8 <_ZN17IMURequestHandler11RequestMode9SerializeEh>
 8022914:	4603      	mov	r3, r0
 8022916:	461a      	mov	r2, r3
 8022918:	68fb      	ldr	r3, [r7, #12]
 802291a:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.ResponceSize = request.ResponceSize;
 802291e:	687b      	ldr	r3, [r7, #4]
 8022920:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8022924:	68fb      	ldr	r3, [r7, #12]
 8022926:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		responce.Error = ErrorCodes::UnknownMode;
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	2202      	movs	r2, #2
 802292e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		return responce;
 8022932:	bf00      	nop
	}
 8022934:	68f8      	ldr	r0, [r7, #12]
 8022936:	3710      	adds	r7, #16
 8022938:	46bd      	mov	sp, r7
 802293a:	bd80      	pop	{r7, pc}

0802293c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>:

public:
	Responce Handle(const Request &request, IMUFrameContainer &container,
 802293c:	b580      	push	{r7, lr}
 802293e:	b086      	sub	sp, #24
 8022940:	af02      	add	r7, sp, #8
 8022942:	60f8      	str	r0, [r7, #12]
 8022944:	60b9      	str	r1, [r7, #8]
 8022946:	607a      	str	r2, [r7, #4]
 8022948:	603b      	str	r3, [r7, #0]
			const BHYWrapper &IMU, size_t &strobeOffset,
			StrobeDurationFilter &sFilter) {
		assert(request.PeripheryID == Periphery::Imu);
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8022950:	2b01      	cmp	r3, #1
 8022952:	d006      	beq.n	8022962 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x26>
 8022954:	4b2f      	ldr	r3, [pc, #188]	; (8022a14 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xd8>)
 8022956:	4a30      	ldr	r2, [pc, #192]	; (8022a18 <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xdc>)
 8022958:	f240 31c9 	movw	r1, #969	; 0x3c9
 802295c:	482f      	ldr	r0, [pc, #188]	; (8022a1c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xe0>)
 802295e:	f019 fa0d 	bl	803bd7c <__assert_func>

		switch (RequestMode::Deserialize(request.MetaInfo)) {
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8022968:	4618      	mov	r0, r3
 802296a:	f7ff fd51 	bl	8022410 <_ZN17IMURequestHandler11RequestMode11DeserializeEh>
 802296e:	4603      	mov	r3, r0
 8022970:	2b06      	cmp	r3, #6
 8022972:	d844      	bhi.n	80229fe <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xc2>
 8022974:	a201      	add	r2, pc, #4	; (adr r2, 802297c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0x40>)
 8022976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802297a:	bf00      	nop
 802297c:	08022999 	.word	0x08022999
 8022980:	080229a7 	.word	0x080229a7
 8022984:	080229b5 	.word	0x080229b5
 8022988:	080229c3 	.word	0x080229c3
 802298c:	080229d5 	.word	0x080229d5
 8022990:	080229e3 	.word	0x080229e3
 8022994:	080229f1 	.word	0x080229f1
		case RequestMode::FrameBySeq:
			return GetFrameBySeq(request, container);
 8022998:	68f8      	ldr	r0, [r7, #12]
 802299a:	683b      	ldr	r3, [r7, #0]
 802299c:	687a      	ldr	r2, [r7, #4]
 802299e:	68b9      	ldr	r1, [r7, #8]
 80229a0:	f7ff fd42 	bl	8022428 <_ZN17IMURequestHandler13GetFrameBySeqERK7RequestRK17IMUFrameContainer>
 80229a4:	e031      	b.n	8022a0a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Info:
			return GetInfo(request, container);
 80229a6:	68f8      	ldr	r0, [r7, #12]
 80229a8:	683b      	ldr	r3, [r7, #0]
 80229aa:	687a      	ldr	r2, [r7, #4]
 80229ac:	68b9      	ldr	r1, [r7, #8]
 80229ae:	f7ff fda3 	bl	80224f8 <_ZN17IMURequestHandler7GetInfoERK7RequestRK17IMUFrameContainer>
 80229b2:	e02a      	b.n	8022a0a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::LatestFrame:
			return GetLatestFrame(request, IMU);
 80229b4:	68f8      	ldr	r0, [r7, #12]
 80229b6:	69bb      	ldr	r3, [r7, #24]
 80229b8:	687a      	ldr	r2, [r7, #4]
 80229ba:	68b9      	ldr	r1, [r7, #8]
 80229bc:	f7ff fdf0 	bl	80225a0 <_ZN17IMURequestHandler14GetLatestFrameERK7RequestRK10BHYWrapper>
 80229c0:	e023      	b.n	8022a0a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::Reset:
			return DoReset(request, container, sFilter);
 80229c2:	68f8      	ldr	r0, [r7, #12]
 80229c4:	6a3b      	ldr	r3, [r7, #32]
 80229c6:	9300      	str	r3, [sp, #0]
 80229c8:	683b      	ldr	r3, [r7, #0]
 80229ca:	687a      	ldr	r2, [r7, #4]
 80229cc:	68b9      	ldr	r1, [r7, #8]
 80229ce:	f7ff fe39 	bl	8022644 <_ZN17IMURequestHandler7DoResetERK7RequestR17IMUFrameContainerR20StrobeDurationFilter>
 80229d2:	e01a      	b.n	8022a0a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::SetOffset:
			return SetOffset(request, strobeOffset);
 80229d4:	68f8      	ldr	r0, [r7, #12]
 80229d6:	69fb      	ldr	r3, [r7, #28]
 80229d8:	687a      	ldr	r2, [r7, #4]
 80229da:	68b9      	ldr	r1, [r7, #8]
 80229dc:	f7ff fe78 	bl	80226d0 <_ZN17IMURequestHandler9SetOffsetERK7RequestRj>
 80229e0:	e013      	b.n	8022a0a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::StrobeWidth:
			return StrobeWidth(request, sFilter);
 80229e2:	68f8      	ldr	r0, [r7, #12]
 80229e4:	6a3b      	ldr	r3, [r7, #32]
 80229e6:	687a      	ldr	r2, [r7, #4]
 80229e8:	68b9      	ldr	r1, [r7, #8]
 80229ea:	f7ff ff13 	bl	8022814 <_ZN17IMURequestHandler11StrobeWidthERK7RequestRK20StrobeDurationFilter>
 80229ee:	e00c      	b.n	8022a0a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		case RequestMode::ConfigureFilter:
			return ConfigureFilter(request, sFilter);
 80229f0:	68f8      	ldr	r0, [r7, #12]
 80229f2:	6a3b      	ldr	r3, [r7, #32]
 80229f4:	687a      	ldr	r2, [r7, #4]
 80229f6:	68b9      	ldr	r1, [r7, #8]
 80229f8:	f7ff feb6 	bl	8022768 <_ZN17IMURequestHandler15ConfigureFilterERK7RequestR20StrobeDurationFilter>
 80229fc:	e005      	b.n	8022a0a <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter+0xce>
		default:
			return UnknownModeResponce(request);
 80229fe:	68fb      	ldr	r3, [r7, #12]
 8022a00:	687a      	ldr	r2, [r7, #4]
 8022a02:	68b9      	ldr	r1, [r7, #8]
 8022a04:	4618      	mov	r0, r3
 8022a06:	f7ff ff71 	bl	80228ec <_ZN17IMURequestHandler19UnknownModeResponceERK7Request>
		}
	}
 8022a0a:	68f8      	ldr	r0, [r7, #12]
 8022a0c:	3710      	adds	r7, #16
 8022a0e:	46bd      	mov	sp, r7
 8022a10:	bd80      	pop	{r7, pc}
 8022a12:	bf00      	nop
 8022a14:	0803d908 	.word	0x0803d908
 8022a18:	0803d930 	.word	0x0803d930
 8022a1c:	0803cfd0 	.word	0x0803cfd0

08022a20 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>:
	std::deque<BHYWrapper::BHYFrame> Queue;
	size_t MaxSize = 800 / 5;
	size_t FirstSeq = 0;

public:
	void Add(const BHYWrapper::BHYFrame &frame, size_t seq) {
 8022a20:	b580      	push	{r7, lr}
 8022a22:	b084      	sub	sp, #16
 8022a24:	af00      	add	r7, sp, #0
 8022a26:	60f8      	str	r0, [r7, #12]
 8022a28:	60b9      	str	r1, [r7, #8]
 8022a2a:	607a      	str	r2, [r7, #4]
		if (Queue.empty()) {
 8022a2c:	68fb      	ldr	r3, [r7, #12]
 8022a2e:	4618      	mov	r0, r3
 8022a30:	f001 f846 	bl	8023ac0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022a34:	4603      	mov	r3, r0
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d002      	beq.n	8022a40 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x20>
			FirstSeq = seq;
 8022a3a:	68fb      	ldr	r3, [r7, #12]
 8022a3c:	687a      	ldr	r2, [r7, #4]
 8022a3e:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		Queue.push_front(frame);
 8022a40:	68fb      	ldr	r3, [r7, #12]
 8022a42:	68b9      	ldr	r1, [r7, #8]
 8022a44:	4618      	mov	r0, r3
 8022a46:	f000 ffe4 	bl	8023a12 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>

		if (Queue.size() > MaxSize) {
 8022a4a:	68fb      	ldr	r3, [r7, #12]
 8022a4c:	4618      	mov	r0, r3
 8022a4e:	f001 f802 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022a52:	4602      	mov	r2, r0
 8022a54:	68fb      	ldr	r3, [r7, #12]
 8022a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a58:	429a      	cmp	r2, r3
 8022a5a:	bf8c      	ite	hi
 8022a5c:	2301      	movhi	r3, #1
 8022a5e:	2300      	movls	r3, #0
 8022a60:	b2db      	uxtb	r3, r3
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	d008      	beq.n	8022a78 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj+0x58>
			Queue.pop_back();
 8022a66:	68fb      	ldr	r3, [r7, #12]
 8022a68:	4618      	mov	r0, r3
 8022a6a:	f001 f806 	bl	8023a7a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>
			FirstSeq++;
 8022a6e:	68fb      	ldr	r3, [r7, #12]
 8022a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a72:	1c5a      	adds	r2, r3, #1
 8022a74:	68fb      	ldr	r3, [r7, #12]
 8022a76:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
 8022a78:	bf00      	nop
 8022a7a:	3710      	adds	r7, #16
 8022a7c:	46bd      	mov	sp, r7
 8022a7e:	bd80      	pop	{r7, pc}

08022a80 <_ZNK12IMUFrameMemo3HasEj>:

	bool Has(size_t seq) const {
 8022a80:	b590      	push	{r4, r7, lr}
 8022a82:	b083      	sub	sp, #12
 8022a84:	af00      	add	r7, sp, #0
 8022a86:	6078      	str	r0, [r7, #4]
 8022a88:	6039      	str	r1, [r7, #0]
		if (Queue.empty())
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	4618      	mov	r0, r3
 8022a8e:	f001 f817 	bl	8023ac0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>
 8022a92:	4603      	mov	r3, r0
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	d001      	beq.n	8022a9c <_ZNK12IMUFrameMemo3HasEj+0x1c>
			return false;
 8022a98:	2300      	movs	r3, #0
 8022a9a:	e012      	b.n	8022ac2 <_ZNK12IMUFrameMemo3HasEj+0x42>

		if (seq < FirstSeq + Queue.size())
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	4618      	mov	r0, r3
 8022aa4:	f000 ffd7 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022aa8:	4603      	mov	r3, r0
 8022aaa:	4423      	add	r3, r4
 8022aac:	683a      	ldr	r2, [r7, #0]
 8022aae:	429a      	cmp	r2, r3
 8022ab0:	bf34      	ite	cc
 8022ab2:	2301      	movcc	r3, #1
 8022ab4:	2300      	movcs	r3, #0
 8022ab6:	b2db      	uxtb	r3, r3
 8022ab8:	2b00      	cmp	r3, #0
 8022aba:	d001      	beq.n	8022ac0 <_ZNK12IMUFrameMemo3HasEj+0x40>
			return true;
 8022abc:	2301      	movs	r3, #1
 8022abe:	e000      	b.n	8022ac2 <_ZNK12IMUFrameMemo3HasEj+0x42>

		return false;
 8022ac0:	2300      	movs	r3, #0
	}
 8022ac2:	4618      	mov	r0, r3
 8022ac4:	370c      	adds	r7, #12
 8022ac6:	46bd      	mov	sp, r7
 8022ac8:	bd90      	pop	{r4, r7, pc}
	...

08022acc <_ZNK12IMUFrameMemo3GetEj>:

	BHYWrapper::BHYFrame Get(size_t seq) const {
 8022acc:	b5b0      	push	{r4, r5, r7, lr}
 8022ace:	b084      	sub	sp, #16
 8022ad0:	af00      	add	r7, sp, #0
 8022ad2:	60f8      	str	r0, [r7, #12]
 8022ad4:	60b9      	str	r1, [r7, #8]
 8022ad6:	607a      	str	r2, [r7, #4]
		assert(Has(seq));
 8022ad8:	6879      	ldr	r1, [r7, #4]
 8022ada:	68b8      	ldr	r0, [r7, #8]
 8022adc:	f7ff ffd0 	bl	8022a80 <_ZNK12IMUFrameMemo3HasEj>
 8022ae0:	4603      	mov	r3, r0
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d106      	bne.n	8022af4 <_ZNK12IMUFrameMemo3GetEj+0x28>
 8022ae6:	4b1a      	ldr	r3, [pc, #104]	; (8022b50 <_ZNK12IMUFrameMemo3GetEj+0x84>)
 8022ae8:	4a1a      	ldr	r2, [pc, #104]	; (8022b54 <_ZNK12IMUFrameMemo3GetEj+0x88>)
 8022aea:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8022aee:	481a      	ldr	r0, [pc, #104]	; (8022b58 <_ZNK12IMUFrameMemo3GetEj+0x8c>)
 8022af0:	f019 f944 	bl	803bd7c <__assert_func>

		if (seq < FirstSeq) {
 8022af4:	68bb      	ldr	r3, [r7, #8]
 8022af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022af8:	687a      	ldr	r2, [r7, #4]
 8022afa:	429a      	cmp	r2, r3
 8022afc:	d20c      	bcs.n	8022b18 <_ZNK12IMUFrameMemo3GetEj+0x4c>
			return Queue.front();
 8022afe:	68bb      	ldr	r3, [r7, #8]
 8022b00:	4618      	mov	r0, r3
 8022b02:	f001 f843 	bl	8023b8c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>
 8022b06:	4602      	mov	r2, r0
 8022b08:	68fb      	ldr	r3, [r7, #12]
 8022b0a:	461c      	mov	r4, r3
 8022b0c:	4615      	mov	r5, r2
 8022b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022b12:	682b      	ldr	r3, [r5, #0]
 8022b14:	6023      	str	r3, [r4, #0]
 8022b16:	e017      	b.n	8022b48 <_ZNK12IMUFrameMemo3GetEj+0x7c>
		}

		return Queue[(Queue.size() - 1) - (seq - FirstSeq)];
 8022b18:	68bc      	ldr	r4, [r7, #8]
 8022b1a:	68bb      	ldr	r3, [r7, #8]
 8022b1c:	4618      	mov	r0, r3
 8022b1e:	f000 ff9a 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8022b22:	4601      	mov	r1, r0
 8022b24:	68bb      	ldr	r3, [r7, #8]
 8022b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	1ad3      	subs	r3, r2, r3
 8022b2c:	440b      	add	r3, r1
 8022b2e:	3b01      	subs	r3, #1
 8022b30:	4619      	mov	r1, r3
 8022b32:	4620      	mov	r0, r4
 8022b34:	f000 ffd6 	bl	8023ae4 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>
 8022b38:	4602      	mov	r2, r0
 8022b3a:	68fb      	ldr	r3, [r7, #12]
 8022b3c:	461c      	mov	r4, r3
 8022b3e:	4615      	mov	r5, r2
 8022b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022b44:	682b      	ldr	r3, [r5, #0]
 8022b46:	6023      	str	r3, [r4, #0]
	}
 8022b48:	68f8      	ldr	r0, [r7, #12]
 8022b4a:	3710      	adds	r7, #16
 8022b4c:	46bd      	mov	sp, r7
 8022b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8022b50:	0803d9ac 	.word	0x0803d9ac
 8022b54:	0803d9b8 	.word	0x0803d9b8
 8022b58:	0803cfd0 	.word	0x0803cfd0

08022b5c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>:
private:
	struct Version {
		uint8_t Major;
		uint8_t Minor;

		void SerializeTo(uint8_t **ptr) {
 8022b5c:	b580      	push	{r7, lr}
 8022b5e:	b082      	sub	sp, #8
 8022b60:	af00      	add	r7, sp, #0
 8022b62:	6078      	str	r0, [r7, #4]
 8022b64:	6039      	str	r1, [r7, #0]
			assert(ptr);
 8022b66:	683b      	ldr	r3, [r7, #0]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d106      	bne.n	8022b7a <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x1e>
 8022b6c:	4b14      	ldr	r3, [pc, #80]	; (8022bc0 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x64>)
 8022b6e:	4a15      	ldr	r2, [pc, #84]	; (8022bc4 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022b70:	f240 410f 	movw	r1, #1039	; 0x40f
 8022b74:	4814      	ldr	r0, [pc, #80]	; (8022bc8 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022b76:	f019 f901 	bl	803bd7c <__assert_func>
			assert(*ptr);
 8022b7a:	683b      	ldr	r3, [r7, #0]
 8022b7c:	681b      	ldr	r3, [r3, #0]
 8022b7e:	2b00      	cmp	r3, #0
 8022b80:	d106      	bne.n	8022b90 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x34>
 8022b82:	4b12      	ldr	r3, [pc, #72]	; (8022bcc <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x70>)
 8022b84:	4a0f      	ldr	r2, [pc, #60]	; (8022bc4 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x68>)
 8022b86:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8022b8a:	480f      	ldr	r0, [pc, #60]	; (8022bc8 <_ZN18AcknowledgeHandler7Version11SerializeToEPPh+0x6c>)
 8022b8c:	f019 f8f6 	bl	803bd7c <__assert_func>

			**ptr = Major;
 8022b90:	683b      	ldr	r3, [r7, #0]
 8022b92:	681b      	ldr	r3, [r3, #0]
 8022b94:	687a      	ldr	r2, [r7, #4]
 8022b96:	7812      	ldrb	r2, [r2, #0]
 8022b98:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022b9a:	683b      	ldr	r3, [r7, #0]
 8022b9c:	681b      	ldr	r3, [r3, #0]
 8022b9e:	1c5a      	adds	r2, r3, #1
 8022ba0:	683b      	ldr	r3, [r7, #0]
 8022ba2:	601a      	str	r2, [r3, #0]

			**ptr = Minor;
 8022ba4:	683b      	ldr	r3, [r7, #0]
 8022ba6:	681b      	ldr	r3, [r3, #0]
 8022ba8:	687a      	ldr	r2, [r7, #4]
 8022baa:	7852      	ldrb	r2, [r2, #1]
 8022bac:	701a      	strb	r2, [r3, #0]
			*ptr += sizeof(uint8_t);
 8022bae:	683b      	ldr	r3, [r7, #0]
 8022bb0:	681b      	ldr	r3, [r3, #0]
 8022bb2:	1c5a      	adds	r2, r3, #1
 8022bb4:	683b      	ldr	r3, [r7, #0]
 8022bb6:	601a      	str	r2, [r3, #0]
		}
 8022bb8:	bf00      	nop
 8022bba:	3708      	adds	r7, #8
 8022bbc:	46bd      	mov	sp, r7
 8022bbe:	bd80      	pop	{r7, pc}
 8022bc0:	0803cf9c 	.word	0x0803cf9c
 8022bc4:	0803d9f0 	.word	0x0803d9f0
 8022bc8:	0803cfd0 	.word	0x0803cfd0
 8022bcc:	0803cfec 	.word	0x0803cfec

08022bd0 <_ZN18AcknowledgeHandlerC1Ehh>:
	};

	Version CurrentVersion;

public:
	AcknowledgeHandler(uint8_t versionMaj, uint8_t versionMin) {
 8022bd0:	b480      	push	{r7}
 8022bd2:	b083      	sub	sp, #12
 8022bd4:	af00      	add	r7, sp, #0
 8022bd6:	6078      	str	r0, [r7, #4]
 8022bd8:	460b      	mov	r3, r1
 8022bda:	70fb      	strb	r3, [r7, #3]
 8022bdc:	4613      	mov	r3, r2
 8022bde:	70bb      	strb	r3, [r7, #2]
		CurrentVersion.Major = versionMaj;
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	78fa      	ldrb	r2, [r7, #3]
 8022be4:	701a      	strb	r2, [r3, #0]
		CurrentVersion.Minor = versionMin;
 8022be6:	687b      	ldr	r3, [r7, #4]
 8022be8:	78ba      	ldrb	r2, [r7, #2]
 8022bea:	705a      	strb	r2, [r3, #1]
	}
 8022bec:	687b      	ldr	r3, [r7, #4]
 8022bee:	4618      	mov	r0, r3
 8022bf0:	370c      	adds	r7, #12
 8022bf2:	46bd      	mov	sp, r7
 8022bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bf8:	4770      	bx	lr
	...

08022bfc <_ZN18AcknowledgeHandler6HandleERK7Request>:

	Responce Handle(const Request &request) {
 8022bfc:	b580      	push	{r7, lr}
 8022bfe:	b086      	sub	sp, #24
 8022c00:	af00      	add	r7, sp, #0
 8022c02:	60f8      	str	r0, [r7, #12]
 8022c04:	60b9      	str	r1, [r7, #8]
 8022c06:	607a      	str	r2, [r7, #4]
		assert(request.PeripheryID == Periphery::Ack);
 8022c08:	687b      	ldr	r3, [r7, #4]
 8022c0a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8022c0e:	2b02      	cmp	r3, #2
 8022c10:	d006      	beq.n	8022c20 <_ZN18AcknowledgeHandler6HandleERK7Request+0x24>
 8022c12:	4b14      	ldr	r3, [pc, #80]	; (8022c64 <_ZN18AcknowledgeHandler6HandleERK7Request+0x68>)
 8022c14:	4a14      	ldr	r2, [pc, #80]	; (8022c68 <_ZN18AcknowledgeHandler6HandleERK7Request+0x6c>)
 8022c16:	f240 4123 	movw	r1, #1059	; 0x423
 8022c1a:	4814      	ldr	r0, [pc, #80]	; (8022c6c <_ZN18AcknowledgeHandler6HandleERK7Request+0x70>)
 8022c1c:	f019 f8ae 	bl	803bd7c <__assert_func>

		Responce responce;
		responce.PeripheryID = Periphery::Ack;
 8022c20:	68fb      	ldr	r3, [r7, #12]
 8022c22:	2202      	movs	r2, #2
 8022c24:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		responce.MetaInfo = 0;
 8022c28:	68fb      	ldr	r3, [r7, #12]
 8022c2a:	2200      	movs	r2, #0
 8022c2c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		responce.Error = 0;
 8022c30:	68fb      	ldr	r3, [r7, #12]
 8022c32:	2200      	movs	r2, #0
 8022c34:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
		responce.ResponceSize = 2;
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	2202      	movs	r2, #2
 8022c3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		uint8_t *ptr = responce.Data.data();
 8022c40:	68f8      	ldr	r0, [r7, #12]
 8022c42:	f000 fd0b 	bl	802365c <_ZNSt5arrayIhLj256EE4dataEv>
 8022c46:	4603      	mov	r3, r0
 8022c48:	617b      	str	r3, [r7, #20]
		CurrentVersion.SerializeTo(&ptr);
 8022c4a:	68bb      	ldr	r3, [r7, #8]
 8022c4c:	f107 0214 	add.w	r2, r7, #20
 8022c50:	4611      	mov	r1, r2
 8022c52:	4618      	mov	r0, r3
 8022c54:	f7ff ff82 	bl	8022b5c <_ZN18AcknowledgeHandler7Version11SerializeToEPPh>

		return responce;
 8022c58:	bf00      	nop
	}
 8022c5a:	68f8      	ldr	r0, [r7, #12]
 8022c5c:	3718      	adds	r7, #24
 8022c5e:	46bd      	mov	sp, r7
 8022c60:	bd80      	pop	{r7, pc}
 8022c62:	bf00      	nop
 8022c64:	0803da2c 	.word	0x0803da2c
 8022c68:	0803da54 	.word	0x0803da54
 8022c6c:	0803cfd0 	.word	0x0803cfd0

08022c70 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8022c70:	b580      	push	{r7, lr}
 8022c72:	b082      	sub	sp, #8
 8022c74:	af00      	add	r7, sp, #0
 8022c76:	6078      	str	r0, [r7, #4]
 8022c78:	687b      	ldr	r3, [r7, #4]
 8022c7a:	4618      	mov	r0, r3
 8022c7c:	f000 ffa6 	bl	8023bcc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	4618      	mov	r0, r3
 8022c84:	3708      	adds	r7, #8
 8022c86:	46bd      	mov	sp, r7
 8022c88:	bd80      	pop	{r7, pc}

08022c8a <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8022c8a:	b580      	push	{r7, lr}
 8022c8c:	b082      	sub	sp, #8
 8022c8e:	af00      	add	r7, sp, #0
 8022c90:	6078      	str	r0, [r7, #4]
 8022c92:	687b      	ldr	r3, [r7, #4]
 8022c94:	4618      	mov	r0, r3
 8022c96:	f7ff ffeb 	bl	8022c70 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022c9a:	687b      	ldr	r3, [r7, #4]
 8022c9c:	2200      	movs	r2, #0
 8022c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8022ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8022ca8:	687b      	ldr	r3, [r7, #4]
 8022caa:	4618      	mov	r0, r3
 8022cac:	3708      	adds	r7, #8
 8022cae:	46bd      	mov	sp, r7
 8022cb0:	bd80      	pop	{r7, pc}

08022cb2 <_ZN17IMUFrameContainerD1Ev>:
 8022cb2:	b580      	push	{r7, lr}
 8022cb4:	b082      	sub	sp, #8
 8022cb6:	af00      	add	r7, sp, #0
 8022cb8:	6078      	str	r0, [r7, #4]
 8022cba:	687b      	ldr	r3, [r7, #4]
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	f000 ffb8 	bl	8023c32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	4618      	mov	r0, r3
 8022cc6:	3708      	adds	r7, #8
 8022cc8:	46bd      	mov	sp, r7
 8022cca:	bd80      	pop	{r7, pc}

08022ccc <_ZN12IMUFrameMemoC1Ev>:
class IMUFrameMemo {
 8022ccc:	b580      	push	{r7, lr}
 8022cce:	b082      	sub	sp, #8
 8022cd0:	af00      	add	r7, sp, #0
 8022cd2:	6078      	str	r0, [r7, #4]
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	f7ff ffca 	bl	8022c70 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	22a0      	movs	r2, #160	; 0xa0
 8022ce0:	629a      	str	r2, [r3, #40]	; 0x28
 8022ce2:	687b      	ldr	r3, [r7, #4]
 8022ce4:	2200      	movs	r2, #0
 8022ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8022ce8:	687b      	ldr	r3, [r7, #4]
 8022cea:	4618      	mov	r0, r3
 8022cec:	3708      	adds	r7, #8
 8022cee:	46bd      	mov	sp, r7
 8022cf0:	bd80      	pop	{r7, pc}

08022cf2 <_ZN12IMUFrameMemoD1Ev>:
 8022cf2:	b580      	push	{r7, lr}
 8022cf4:	b082      	sub	sp, #8
 8022cf6:	af00      	add	r7, sp, #0
 8022cf8:	6078      	str	r0, [r7, #4]
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	4618      	mov	r0, r3
 8022cfe:	f000 ff98 	bl	8023c32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	4618      	mov	r0, r3
 8022d06:	3708      	adds	r7, #8
 8022d08:	46bd      	mov	sp, r7
 8022d0a:	bd80      	pop	{r7, pc}

08022d0c <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8022d0c:	b580      	push	{r7, lr}
 8022d0e:	b082      	sub	sp, #8
 8022d10:	af00      	add	r7, sp, #0
 8022d12:	6078      	str	r0, [r7, #4]
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	4618      	mov	r0, r3
 8022d18:	f000 ffd1 	bl	8023cbe <_ZNSt5dequeIjSaIjEED1Ev>
 8022d1c:	687b      	ldr	r3, [r7, #4]
 8022d1e:	4618      	mov	r0, r3
 8022d20:	3708      	adds	r7, #8
 8022d22:	46bd      	mov	sp, r7
 8022d24:	bd80      	pop	{r7, pc}

08022d26 <_ZN20StrobeDurationFilterC1Ev>:
class StrobeDurationFilter {
 8022d26:	b580      	push	{r7, lr}
 8022d28:	b082      	sub	sp, #8
 8022d2a:	af00      	add	r7, sp, #0
 8022d2c:	6078      	str	r0, [r7, #4]
 8022d2e:	687b      	ldr	r3, [r7, #4]
 8022d30:	2200      	movs	r2, #0
 8022d32:	601a      	str	r2, [r3, #0]
 8022d34:	687b      	ldr	r3, [r7, #4]
 8022d36:	2200      	movs	r2, #0
 8022d38:	605a      	str	r2, [r3, #4]
 8022d3a:	687b      	ldr	r3, [r7, #4]
 8022d3c:	2201      	movs	r2, #1
 8022d3e:	609a      	str	r2, [r3, #8]
 8022d40:	687b      	ldr	r3, [r7, #4]
 8022d42:	2200      	movs	r2, #0
 8022d44:	60da      	str	r2, [r3, #12]
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	2200      	movs	r2, #0
 8022d4a:	611a      	str	r2, [r3, #16]
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8022d52:	615a      	str	r2, [r3, #20]
 8022d54:	687b      	ldr	r3, [r7, #4]
 8022d56:	3318      	adds	r3, #24
 8022d58:	4618      	mov	r0, r3
 8022d5a:	f000 ff9c 	bl	8023c96 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>
 8022d5e:	687b      	ldr	r3, [r7, #4]
 8022d60:	2200      	movs	r2, #0
 8022d62:	641a      	str	r2, [r3, #64]	; 0x40
 8022d64:	687b      	ldr	r3, [r7, #4]
 8022d66:	4618      	mov	r0, r3
 8022d68:	3708      	adds	r7, #8
 8022d6a:	46bd      	mov	sp, r7
 8022d6c:	bd80      	pop	{r7, pc}

08022d6e <_ZN20StrobeDurationFilterD1Ev>:
 8022d6e:	b580      	push	{r7, lr}
 8022d70:	b082      	sub	sp, #8
 8022d72:	af00      	add	r7, sp, #0
 8022d74:	6078      	str	r0, [r7, #4]
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	3318      	adds	r3, #24
 8022d7a:	4618      	mov	r0, r3
 8022d7c:	f7ff ffc6 	bl	8022d0c <_ZNSt5queueIjSt5dequeIjSaIjEEED1Ev>
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	4618      	mov	r0, r3
 8022d84:	3708      	adds	r7, #8
 8022d86:	46bd      	mov	sp, r7
 8022d88:	bd80      	pop	{r7, pc}
	...

08022d8c <_ZN18MotherboardContextC1E17MotherboardConfig>:
	StrobeDurationFilter StrobeFilter;
	size_t StrobeOffset;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 8022d8c:	b084      	sub	sp, #16
 8022d8e:	b580      	push	{r7, lr}
 8022d90:	b082      	sub	sp, #8
 8022d92:	af00      	add	r7, sp, #0
 8022d94:	6078      	str	r0, [r7, #4]
 8022d96:	f107 0014 	add.w	r0, r7, #20
 8022d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			HeadService { conf.HeadServiceUart, conf.HeadTimeout }, HeadStream {
					conf.HeadStreamUart, conf.HeadTimeout }, Body {
					conf.BodyUart, conf.BodyTimeout, conf.BodyPeriod }, FrameContainer { }, IMU {
					conf.IMUSpi }, IMUHandler { }, AckHandler {
					conf.VersionMajor, conf.VersionMinor }, StrobeOffset {
					conf.StrobeOffset } {
 8022d9e:	687b      	ldr	r3, [r7, #4]
 8022da0:	6979      	ldr	r1, [r7, #20]
 8022da2:	69fa      	ldr	r2, [r7, #28]
 8022da4:	4618      	mov	r0, r3
 8022da6:	f7fe ff61 	bl	8021c6c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022daa:	687b      	ldr	r3, [r7, #4]
 8022dac:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022db0:	69b9      	ldr	r1, [r7, #24]
 8022db2:	69fa      	ldr	r2, [r7, #28]
 8022db4:	4618      	mov	r0, r3
 8022db6:	f7fe ff59 	bl	8021c6c <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 8022dba:	687a      	ldr	r2, [r7, #4]
 8022dbc:	f641 1348 	movw	r3, #6472	; 0x1948
 8022dc0:	4413      	add	r3, r2
 8022dc2:	f897 1034 	ldrb.w	r1, [r7, #52]	; 0x34
 8022dc6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8022dca:	4618      	mov	r0, r3
 8022dcc:	f7ff ff00 	bl	8022bd0 <_ZN18AcknowledgeHandlerC1Ehh>
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	f641 104c 	movw	r0, #6476	; 0x194c
 8022dd6:	4418      	add	r0, r3
 8022dd8:	6a39      	ldr	r1, [r7, #32]
 8022dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022de0:	f7fe f90c 	bl	8020ffc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefjh>
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8022dea:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8022dee:	2230      	movs	r2, #48	; 0x30
 8022df0:	2100      	movs	r1, #0
 8022df2:	4618      	mov	r0, r3
 8022df4:	f019 f854 	bl	803bea0 <memset>
 8022df8:	687a      	ldr	r2, [r7, #4]
 8022dfa:	4b16      	ldr	r3, [pc, #88]	; (8022e54 <_ZN18MotherboardContextC1E17MotherboardConfig+0xc8>)
 8022dfc:	4413      	add	r3, r2
 8022dfe:	4618      	mov	r0, r3
 8022e00:	f7ff ff43 	bl	8022c8a <_ZN17IMUFrameContainerC1Ev>
 8022e04:	687a      	ldr	r2, [r7, #4]
 8022e06:	4b14      	ldr	r3, [pc, #80]	; (8022e58 <_ZN18MotherboardContextC1E17MotherboardConfig+0xcc>)
 8022e08:	4413      	add	r3, r2
 8022e0a:	4618      	mov	r0, r3
 8022e0c:	f7ff ff5e 	bl	8022ccc <_ZN12IMUFrameMemoC1Ev>
 8022e10:	687a      	ldr	r2, [r7, #4]
 8022e12:	4b12      	ldr	r3, [pc, #72]	; (8022e5c <_ZN18MotherboardContextC1E17MotherboardConfig+0xd0>)
 8022e14:	4413      	add	r3, r2
 8022e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022e18:	4611      	mov	r1, r2
 8022e1a:	4618      	mov	r0, r3
 8022e1c:	f7fd fc32 	bl	8020684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 8022e20:	687a      	ldr	r2, [r7, #4]
 8022e22:	4b0f      	ldr	r3, [pc, #60]	; (8022e60 <_ZN18MotherboardContextC1E17MotherboardConfig+0xd4>)
 8022e24:	4413      	add	r3, r2
 8022e26:	4618      	mov	r0, r3
 8022e28:	f7ff ff7d 	bl	8022d26 <_ZN20StrobeDurationFilterC1Ev>
 8022e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022e2e:	687a      	ldr	r2, [r7, #4]
 8022e30:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 8022e34:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8022e38:	687b      	ldr	r3, [r7, #4]
 8022e3a:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022e3e:	2200      	movs	r2, #0
 8022e40:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	4618      	mov	r0, r3
 8022e48:	3708      	adds	r7, #8
 8022e4a:	46bd      	mov	sp, r7
 8022e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022e50:	b004      	add	sp, #16
 8022e52:	4770      	bx	lr
 8022e54:	00023140 	.word	0x00023140
 8022e58:	00023170 	.word	0x00023170
 8022e5c:	000231a0 	.word	0x000231a0
 8022e60:	000242fc 	.word	0x000242fc

08022e64 <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8022e64:	b580      	push	{r7, lr}
 8022e66:	b082      	sub	sp, #8
 8022e68:	af00      	add	r7, sp, #0
 8022e6a:	6078      	str	r0, [r7, #4]
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	4618      	mov	r0, r3
 8022e70:	f7fe fee8 	bl	8021c44 <_ZN10FixedQueueI7RequestLj10EEC1Ev>
 8022e74:	687b      	ldr	r3, [r7, #4]
 8022e76:	2201      	movs	r2, #1
 8022e78:	f883 2ca0 	strb.w	r2, [r3, #3232]	; 0xca0
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	4618      	mov	r0, r3
 8022e80:	3708      	adds	r7, #8
 8022e82:	46bd      	mov	sp, r7
 8022e84:	bd80      	pop	{r7, pc}
	...

08022e88 <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 8022e88:	b580      	push	{r7, lr}
 8022e8a:	b082      	sub	sp, #8
 8022e8c:	af00      	add	r7, sp, #0
 8022e8e:	6078      	str	r0, [r7, #4]
 8022e90:	687b      	ldr	r3, [r7, #4]
 8022e92:	4618      	mov	r0, r3
 8022e94:	f7fe f88a 	bl	8020fac <_ZN10FixedQueueI7RequestLj500EEC1Ev>
 8022e98:	687a      	ldr	r2, [r7, #4]
 8022e9a:	4b17      	ldr	r3, [pc, #92]	; (8022ef8 <_ZN11QueueSenderC1Ev+0x70>)
 8022e9c:	4413      	add	r3, r2
 8022e9e:	4618      	mov	r0, r3
 8022ea0:	f7fe f898 	bl	8020fd4 <_ZN10FixedQueueI8ResponceLj10EEC1Ev>
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022eaa:	2200      	movs	r2, #0
 8022eac:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 8022eb0:	687b      	ldr	r3, [r7, #4]
 8022eb2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022eb6:	2200      	movs	r2, #0
 8022eb8:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8022ebc:	687b      	ldr	r3, [r7, #4]
 8022ebe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022ec2:	2201      	movs	r2, #1
 8022ec4:	f883 27f0 	strb.w	r2, [r3, #2032]	; 0x7f0
 8022ec8:	687b      	ldr	r3, [r7, #4]
 8022eca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022ece:	2200      	movs	r2, #0
 8022ed0:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8022ed4:	687b      	ldr	r3, [r7, #4]
 8022ed6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022eda:	2201      	movs	r2, #1
 8022edc:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8022ee0:	687b      	ldr	r3, [r7, #4]
 8022ee2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8022ee6:	2200      	movs	r2, #0
 8022ee8:	f883 27f3 	strb.w	r2, [r3, #2035]	; 0x7f3
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	4618      	mov	r0, r3
 8022ef0:	3708      	adds	r7, #8
 8022ef2:	46bd      	mov	sp, r7
 8022ef4:	bd80      	pop	{r7, pc}
 8022ef6:	bf00      	nop
 8022ef8:	00020b7c 	.word	0x00020b7c

08022efc <_ZN10BHYWrapperC1Ev>:

		void SerializeTo(uint8_t* dest, uint8_t* size);
	};

	BHYWrapper(SPI_HandleTypeDef *spiHandle);
	BHYWrapper() = default;
 8022efc:	b480      	push	{r7}
 8022efe:	b083      	sub	sp, #12
 8022f00:	af00      	add	r7, sp, #0
 8022f02:	6078      	str	r0, [r7, #4]
 8022f04:	687b      	ldr	r3, [r7, #4]
 8022f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8022f0a:	461a      	mov	r2, r3
 8022f0c:	2300      	movs	r3, #0
 8022f0e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	4618      	mov	r0, r3
 8022f16:	370c      	adds	r7, #12
 8022f18:	46bd      	mov	sp, r7
 8022f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f1e:	4770      	bx	lr

08022f20 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8022f20:	b580      	push	{r7, lr}
 8022f22:	b082      	sub	sp, #8
 8022f24:	af00      	add	r7, sp, #0
 8022f26:	6078      	str	r0, [r7, #4]
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	4618      	mov	r0, r3
 8022f2c:	f7ff ff9a 	bl	8022e64 <_ZN13HeadInterfaceC1Ev>
 8022f30:	687b      	ldr	r3, [r7, #4]
 8022f32:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8022f36:	4618      	mov	r0, r3
 8022f38:	f7ff ff94 	bl	8022e64 <_ZN13HeadInterfaceC1Ev>
 8022f3c:	687a      	ldr	r2, [r7, #4]
 8022f3e:	f641 1348 	movw	r3, #6472	; 0x1948
 8022f42:	4413      	add	r3, r2
 8022f44:	2200      	movs	r2, #0
 8022f46:	2100      	movs	r1, #0
 8022f48:	4618      	mov	r0, r3
 8022f4a:	f7ff fe41 	bl	8022bd0 <_ZN18AcknowledgeHandlerC1Ehh>
 8022f4e:	687a      	ldr	r2, [r7, #4]
 8022f50:	f641 134c 	movw	r3, #6476	; 0x194c
 8022f54:	4413      	add	r3, r2
 8022f56:	4618      	mov	r0, r3
 8022f58:	f7ff ff96 	bl	8022e88 <_ZN11QueueSenderC1Ev>
 8022f5c:	687a      	ldr	r2, [r7, #4]
 8022f5e:	4b11      	ldr	r3, [pc, #68]	; (8022fa4 <_ZN18MotherboardContextC1Ev+0x84>)
 8022f60:	4413      	add	r3, r2
 8022f62:	4618      	mov	r0, r3
 8022f64:	f7ff fe91 	bl	8022c8a <_ZN17IMUFrameContainerC1Ev>
 8022f68:	687a      	ldr	r2, [r7, #4]
 8022f6a:	4b0f      	ldr	r3, [pc, #60]	; (8022fa8 <_ZN18MotherboardContextC1Ev+0x88>)
 8022f6c:	4413      	add	r3, r2
 8022f6e:	4618      	mov	r0, r3
 8022f70:	f7ff feac 	bl	8022ccc <_ZN12IMUFrameMemoC1Ev>
 8022f74:	687a      	ldr	r2, [r7, #4]
 8022f76:	4b0d      	ldr	r3, [pc, #52]	; (8022fac <_ZN18MotherboardContextC1Ev+0x8c>)
 8022f78:	4413      	add	r3, r2
 8022f7a:	4618      	mov	r0, r3
 8022f7c:	f7ff ffbe 	bl	8022efc <_ZN10BHYWrapperC1Ev>
 8022f80:	687a      	ldr	r2, [r7, #4]
 8022f82:	4b0b      	ldr	r3, [pc, #44]	; (8022fb0 <_ZN18MotherboardContextC1Ev+0x90>)
 8022f84:	4413      	add	r3, r2
 8022f86:	4618      	mov	r0, r3
 8022f88:	f7ff fecd 	bl	8022d26 <_ZN20StrobeDurationFilterC1Ev>
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8022f92:	2200      	movs	r2, #0
 8022f94:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8022f98:	687b      	ldr	r3, [r7, #4]
 8022f9a:	4618      	mov	r0, r3
 8022f9c:	3708      	adds	r7, #8
 8022f9e:	46bd      	mov	sp, r7
 8022fa0:	bd80      	pop	{r7, pc}
 8022fa2:	bf00      	nop
 8022fa4:	00023140 	.word	0x00023140
 8022fa8:	00023170 	.word	0x00023170
 8022fac:	000231a0 	.word	0x000231a0
 8022fb0:	000242fc 	.word	0x000242fc

08022fb4 <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 8022fb4:	b580      	push	{r7, lr}
 8022fb6:	b082      	sub	sp, #8
 8022fb8:	af00      	add	r7, sp, #0
 8022fba:	6078      	str	r0, [r7, #4]
 8022fbc:	687a      	ldr	r2, [r7, #4]
 8022fbe:	4b0b      	ldr	r3, [pc, #44]	; (8022fec <_ZN18MotherboardContextD1Ev+0x38>)
 8022fc0:	4413      	add	r3, r2
 8022fc2:	4618      	mov	r0, r3
 8022fc4:	f7ff fed3 	bl	8022d6e <_ZN20StrobeDurationFilterD1Ev>
 8022fc8:	687a      	ldr	r2, [r7, #4]
 8022fca:	4b09      	ldr	r3, [pc, #36]	; (8022ff0 <_ZN18MotherboardContextD1Ev+0x3c>)
 8022fcc:	4413      	add	r3, r2
 8022fce:	4618      	mov	r0, r3
 8022fd0:	f7ff fe8f 	bl	8022cf2 <_ZN12IMUFrameMemoD1Ev>
 8022fd4:	687a      	ldr	r2, [r7, #4]
 8022fd6:	4b07      	ldr	r3, [pc, #28]	; (8022ff4 <_ZN18MotherboardContextD1Ev+0x40>)
 8022fd8:	4413      	add	r3, r2
 8022fda:	4618      	mov	r0, r3
 8022fdc:	f7ff fe69 	bl	8022cb2 <_ZN17IMUFrameContainerD1Ev>
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	4618      	mov	r0, r3
 8022fe4:	3708      	adds	r7, #8
 8022fe6:	46bd      	mov	sp, r7
 8022fe8:	bd80      	pop	{r7, pc}
 8022fea:	bf00      	nop
 8022fec:	000242fc 	.word	0x000242fc
 8022ff0:	00023170 	.word	0x00023170
 8022ff4:	00023140 	.word	0x00023140

08022ff8 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 8022ff8:	b580      	push	{r7, lr}
 8022ffa:	b082      	sub	sp, #8
 8022ffc:	af00      	add	r7, sp, #0
 8022ffe:	6078      	str	r0, [r7, #4]
 8023000:	6039      	str	r1, [r7, #0]
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	683a      	ldr	r2, [r7, #0]
 8023006:	4611      	mov	r1, r2
 8023008:	4618      	mov	r0, r3
 802300a:	f000 fe7d 	bl	8023d08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 802300e:	683b      	ldr	r3, [r7, #0]
 8023010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	629a      	str	r2, [r3, #40]	; 0x28
 8023016:	683b      	ldr	r3, [r7, #0]
 8023018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	62da      	str	r2, [r3, #44]	; 0x2c
 802301e:	687b      	ldr	r3, [r7, #4]
 8023020:	4618      	mov	r0, r3
 8023022:	3708      	adds	r7, #8
 8023024:	46bd      	mov	sp, r7
 8023026:	bd80      	pop	{r7, pc}

08023028 <_ZN12IMUFrameMemoaSEOS_>:
class IMUFrameMemo {
 8023028:	b580      	push	{r7, lr}
 802302a:	b082      	sub	sp, #8
 802302c:	af00      	add	r7, sp, #0
 802302e:	6078      	str	r0, [r7, #4]
 8023030:	6039      	str	r1, [r7, #0]
 8023032:	687b      	ldr	r3, [r7, #4]
 8023034:	683a      	ldr	r2, [r7, #0]
 8023036:	4611      	mov	r1, r2
 8023038:	4618      	mov	r0, r3
 802303a:	f000 fe65 	bl	8023d08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>
 802303e:	683b      	ldr	r3, [r7, #0]
 8023040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	629a      	str	r2, [r3, #40]	; 0x28
 8023046:	683b      	ldr	r3, [r7, #0]
 8023048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	62da      	str	r2, [r3, #44]	; 0x2c
 802304e:	687b      	ldr	r3, [r7, #4]
 8023050:	4618      	mov	r0, r3
 8023052:	3708      	adds	r7, #8
 8023054:	46bd      	mov	sp, r7
 8023056:	bd80      	pop	{r7, pc}

08023058 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>:
 8023058:	b580      	push	{r7, lr}
 802305a:	b082      	sub	sp, #8
 802305c:	af00      	add	r7, sp, #0
 802305e:	6078      	str	r0, [r7, #4]
 8023060:	6039      	str	r1, [r7, #0]
 8023062:	687b      	ldr	r3, [r7, #4]
 8023064:	683a      	ldr	r2, [r7, #0]
 8023066:	4611      	mov	r1, r2
 8023068:	4618      	mov	r0, r3
 802306a:	f000 fe60 	bl	8023d2e <_ZNSt5dequeIjSaIjEEaSEOS1_>
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	4618      	mov	r0, r3
 8023072:	3708      	adds	r7, #8
 8023074:	46bd      	mov	sp, r7
 8023076:	bd80      	pop	{r7, pc}

08023078 <_ZN20StrobeDurationFilteraSEOS_>:
class StrobeDurationFilter {
 8023078:	b580      	push	{r7, lr}
 802307a:	b082      	sub	sp, #8
 802307c:	af00      	add	r7, sp, #0
 802307e:	6078      	str	r0, [r7, #4]
 8023080:	6039      	str	r1, [r7, #0]
 8023082:	683b      	ldr	r3, [r7, #0]
 8023084:	681a      	ldr	r2, [r3, #0]
 8023086:	687b      	ldr	r3, [r7, #4]
 8023088:	601a      	str	r2, [r3, #0]
 802308a:	683b      	ldr	r3, [r7, #0]
 802308c:	685a      	ldr	r2, [r3, #4]
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	605a      	str	r2, [r3, #4]
 8023092:	683b      	ldr	r3, [r7, #0]
 8023094:	689a      	ldr	r2, [r3, #8]
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	609a      	str	r2, [r3, #8]
 802309a:	683b      	ldr	r3, [r7, #0]
 802309c:	68da      	ldr	r2, [r3, #12]
 802309e:	687b      	ldr	r3, [r7, #4]
 80230a0:	60da      	str	r2, [r3, #12]
 80230a2:	683b      	ldr	r3, [r7, #0]
 80230a4:	691a      	ldr	r2, [r3, #16]
 80230a6:	687b      	ldr	r3, [r7, #4]
 80230a8:	611a      	str	r2, [r3, #16]
 80230aa:	683b      	ldr	r3, [r7, #0]
 80230ac:	695a      	ldr	r2, [r3, #20]
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	615a      	str	r2, [r3, #20]
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	f103 0218 	add.w	r2, r3, #24
 80230b8:	683b      	ldr	r3, [r7, #0]
 80230ba:	3318      	adds	r3, #24
 80230bc:	4619      	mov	r1, r3
 80230be:	4610      	mov	r0, r2
 80230c0:	f7ff ffca 	bl	8023058 <_ZNSt5queueIjSt5dequeIjSaIjEEEaSEOS3_>
 80230c4:	683b      	ldr	r3, [r7, #0]
 80230c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	641a      	str	r2, [r3, #64]	; 0x40
 80230cc:	687b      	ldr	r3, [r7, #4]
 80230ce:	4618      	mov	r0, r3
 80230d0:	3708      	adds	r7, #8
 80230d2:	46bd      	mov	sp, r7
 80230d4:	bd80      	pop	{r7, pc}
	...

080230d8 <_ZN18MotherboardContextaSEOS_>:
 80230d8:	b580      	push	{r7, lr}
 80230da:	b082      	sub	sp, #8
 80230dc:	af00      	add	r7, sp, #0
 80230de:	6078      	str	r0, [r7, #4]
 80230e0:	6039      	str	r1, [r7, #0]
 80230e2:	687a      	ldr	r2, [r7, #4]
 80230e4:	683b      	ldr	r3, [r7, #0]
 80230e6:	4610      	mov	r0, r2
 80230e8:	4619      	mov	r1, r3
 80230ea:	f640 43a1 	movw	r3, #3233	; 0xca1
 80230ee:	461a      	mov	r2, r3
 80230f0:	f018 feae 	bl	803be50 <memcpy>
 80230f4:	687a      	ldr	r2, [r7, #4]
 80230f6:	683b      	ldr	r3, [r7, #0]
 80230f8:	f602 40a4 	addw	r0, r2, #3236	; 0xca4
 80230fc:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8023100:	f640 42a1 	movw	r2, #3233	; 0xca1
 8023104:	4619      	mov	r1, r3
 8023106:	f018 fea3 	bl	803be50 <memcpy>
 802310a:	687b      	ldr	r3, [r7, #4]
 802310c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023110:	461a      	mov	r2, r3
 8023112:	683b      	ldr	r3, [r7, #0]
 8023114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023118:	f8b3 3948 	ldrh.w	r3, [r3, #2376]	; 0x948
 802311c:	f8a2 3948 	strh.w	r3, [r2, #2376]	; 0x948
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8023126:	4619      	mov	r1, r3
 8023128:	683b      	ldr	r3, [r7, #0]
 802312a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802312e:	461a      	mov	r2, r3
 8023130:	f601 134c 	addw	r3, r1, #2380	; 0x94c
 8023134:	f602 114c 	addw	r1, r2, #2380	; 0x94c
 8023138:	4a25      	ldr	r2, [pc, #148]	; (80231d0 <_ZN18MotherboardContextaSEOS_+0xf8>)
 802313a:	4618      	mov	r0, r3
 802313c:	f018 fe88 	bl	803be50 <memcpy>
 8023140:	687a      	ldr	r2, [r7, #4]
 8023142:	4b24      	ldr	r3, [pc, #144]	; (80231d4 <_ZN18MotherboardContextaSEOS_+0xfc>)
 8023144:	4413      	add	r3, r2
 8023146:	6839      	ldr	r1, [r7, #0]
 8023148:	4a22      	ldr	r2, [pc, #136]	; (80231d4 <_ZN18MotherboardContextaSEOS_+0xfc>)
 802314a:	440a      	add	r2, r1
 802314c:	4611      	mov	r1, r2
 802314e:	4618      	mov	r0, r3
 8023150:	f7ff ff52 	bl	8022ff8 <_ZN17IMUFrameContaineraSEOS_>
 8023154:	687a      	ldr	r2, [r7, #4]
 8023156:	4b20      	ldr	r3, [pc, #128]	; (80231d8 <_ZN18MotherboardContextaSEOS_+0x100>)
 8023158:	4413      	add	r3, r2
 802315a:	6839      	ldr	r1, [r7, #0]
 802315c:	4a1e      	ldr	r2, [pc, #120]	; (80231d8 <_ZN18MotherboardContextaSEOS_+0x100>)
 802315e:	440a      	add	r2, r1
 8023160:	4611      	mov	r1, r2
 8023162:	4618      	mov	r0, r3
 8023164:	f7ff ff60 	bl	8023028 <_ZN12IMUFrameMemoaSEOS_>
 8023168:	687b      	ldr	r3, [r7, #4]
 802316a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 802316e:	4619      	mov	r1, r3
 8023170:	683b      	ldr	r3, [r7, #0]
 8023172:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8023176:	461a      	mov	r2, r3
 8023178:	f501 73d0 	add.w	r3, r1, #416	; 0x1a0
 802317c:	f502 71d0 	add.w	r1, r2, #416	; 0x1a0
 8023180:	f241 1254 	movw	r2, #4436	; 0x1154
 8023184:	4618      	mov	r0, r3
 8023186:	f018 fe63 	bl	803be50 <memcpy>
 802318a:	687a      	ldr	r2, [r7, #4]
 802318c:	4b13      	ldr	r3, [pc, #76]	; (80231dc <_ZN18MotherboardContextaSEOS_+0x104>)
 802318e:	4413      	add	r3, r2
 8023190:	6839      	ldr	r1, [r7, #0]
 8023192:	4a12      	ldr	r2, [pc, #72]	; (80231dc <_ZN18MotherboardContextaSEOS_+0x104>)
 8023194:	440a      	add	r2, r1
 8023196:	4611      	mov	r1, r2
 8023198:	4618      	mov	r0, r3
 802319a:	f7ff ff6d 	bl	8023078 <_ZN20StrobeDurationFilteraSEOS_>
 802319e:	683b      	ldr	r3, [r7, #0]
 80231a0:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80231a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80231a8:	687a      	ldr	r2, [r7, #4]
 80231aa:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
 80231ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 80231b2:	683b      	ldr	r3, [r7, #0]
 80231b4:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80231b8:	f893 2344 	ldrb.w	r2, [r3, #836]	; 0x344
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80231c2:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 80231c6:	687b      	ldr	r3, [r7, #4]
 80231c8:	4618      	mov	r0, r3
 80231ca:	3708      	adds	r7, #8
 80231cc:	46bd      	mov	sp, r7
 80231ce:	bd80      	pop	{r7, pc}
 80231d0:	000217f4 	.word	0x000217f4
 80231d4:	00023140 	.word	0x00023140
 80231d8:	00023170 	.word	0x00023170
 80231dc:	000242fc 	.word	0x000242fc

080231e0 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 80231e0:	b084      	sub	sp, #16
 80231e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80231e4:	f5ad 3d10 	sub.w	sp, sp, #147456	; 0x24000
 80231e8:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
 80231ec:	af06      	add	r7, sp, #24
 80231ee:	4c20      	ldr	r4, [pc, #128]	; (8023270 <MotherboardInit+0x90>)
 80231f0:	443c      	add	r4, r7
 80231f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 80231f6:	4e1f      	ldr	r6, [pc, #124]	; (8023274 <MotherboardInit+0x94>)
 80231f8:	4b1f      	ldr	r3, [pc, #124]	; (8023278 <MotherboardInit+0x98>)
 80231fa:	4433      	add	r3, r6
 80231fc:	19de      	adds	r6, r3, r7
 80231fe:	466d      	mov	r5, sp
 8023200:	4c1e      	ldr	r4, [pc, #120]	; (802327c <MotherboardInit+0x9c>)
 8023202:	443c      	add	r4, r7
 8023204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8023206:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023208:	e894 0003 	ldmia.w	r4, {r0, r1}
 802320c:	e885 0003 	stmia.w	r5, {r0, r1}
 8023210:	4b17      	ldr	r3, [pc, #92]	; (8023270 <MotherboardInit+0x90>)
 8023212:	443b      	add	r3, r7
 8023214:	cb0e      	ldmia	r3, {r1, r2, r3}
 8023216:	4630      	mov	r0, r6
 8023218:	f7ff fdb8 	bl	8022d8c <_ZN18MotherboardContextC1E17MotherboardConfig>
 802321c:	4b15      	ldr	r3, [pc, #84]	; (8023274 <MotherboardInit+0x94>)
 802321e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023222:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8023226:	443b      	add	r3, r7
 8023228:	4619      	mov	r1, r3
 802322a:	4815      	ldr	r0, [pc, #84]	; (8023280 <MotherboardInit+0xa0>)
 802322c:	f7ff ff54 	bl	80230d8 <_ZN18MotherboardContextaSEOS_>
 8023230:	4b10      	ldr	r3, [pc, #64]	; (8023274 <MotherboardInit+0x94>)
 8023232:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023236:	f503 7352 	add.w	r3, r3, #840	; 0x348
 802323a:	443b      	add	r3, r7
 802323c:	4618      	mov	r0, r3
 802323e:	f7ff feb9 	bl	8022fb4 <_ZN18MotherboardContextD1Ev>

	mbctx.HeadService.ResetReadState();
 8023242:	480f      	ldr	r0, [pc, #60]	; (8023280 <MotherboardInit+0xa0>)
 8023244:	f7fe fd3e 	bl	8021cc4 <_ZN13HeadInterface14ResetReadStateEv>
	mbctx.HeadStream.ResetReadState();
 8023248:	480e      	ldr	r0, [pc, #56]	; (8023284 <MotherboardInit+0xa4>)
 802324a:	f7fe fd3b 	bl	8021cc4 <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 802324e:	2100      	movs	r1, #0
 8023250:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8023288 <MotherboardInit+0xa8>
 8023254:	480d      	ldr	r0, [pc, #52]	; (802328c <MotherboardInit+0xac>)
 8023256:	f7fd fa39 	bl	80206cc <_ZN10BHYWrapper4InitEfm>
 802325a:	4603      	mov	r3, r0
}
 802325c:	4618      	mov	r0, r3
 802325e:	f507 3710 	add.w	r7, r7, #147456	; 0x24000
 8023262:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 8023266:	46bd      	mov	sp, r7
 8023268:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802326c:	b004      	add	sp, #16
 802326e:	4770      	bx	lr
 8023270:	00024360 	.word	0x00024360
 8023274:	fffdbcb8 	.word	0xfffdbcb8
 8023278:	00024348 	.word	0x00024348
 802327c:	0002436c 	.word	0x0002436c
 8023280:	240001d0 	.word	0x240001d0
 8023284:	24000e74 	.word	0x24000e74
 8023288:	44480000 	.word	0x44480000
 802328c:	24023370 	.word	0x24023370

08023290 <MotherboardTick>:

int MotherboardTick() {
 8023290:	b580      	push	{r7, lr}
 8023292:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8023296:	af04      	add	r7, sp, #16
	if (mbctx.StrobeFilter.HasStrobe()) {
 8023298:	485f      	ldr	r0, [pc, #380]	; (8023418 <MotherboardTick+0x188>)
 802329a:	f7ff f88f 	bl	80223bc <_ZNK20StrobeDurationFilter9HasStrobeEv>
 802329e:	4603      	mov	r3, r0
 80232a0:	2b00      	cmp	r3, #0
 80232a2:	d026      	beq.n	80232f2 <MotherboardTick+0x62>
		size_t targetSeq = mbctx.StrobeFilter.GetStrobe() + mbctx.StrobeOffset;
 80232a4:	485c      	ldr	r0, [pc, #368]	; (8023418 <MotherboardTick+0x188>)
 80232a6:	f7ff f867 	bl	8022378 <_ZNK20StrobeDurationFilter9GetStrobeEv>
 80232aa:	4602      	mov	r2, r0
 80232ac:	4b5b      	ldr	r3, [pc, #364]	; (802341c <MotherboardTick+0x18c>)
 80232ae:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80232b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80232b6:	4413      	add	r3, r2
 80232b8:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
		if (mbctx.FrameMemo.Has(targetSeq)) {
 80232bc:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 80232c0:	4857      	ldr	r0, [pc, #348]	; (8023420 <MotherboardTick+0x190>)
 80232c2:	f7ff fbdd 	bl	8022a80 <_ZNK12IMUFrameMemo3HasEj>
 80232c6:	4603      	mov	r3, r0
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	d012      	beq.n	80232f2 <MotherboardTick+0x62>
			mbctx.FrameContainer.Add(mbctx.FrameMemo.Get(targetSeq));
 80232cc:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80232d0:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80232d4:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 80232d8:	4951      	ldr	r1, [pc, #324]	; (8023420 <MotherboardTick+0x190>)
 80232da:	4618      	mov	r0, r3
 80232dc:	f7ff fbf6 	bl	8022acc <_ZNK12IMUFrameMemo3GetEj>
 80232e0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80232e4:	4619      	mov	r1, r3
 80232e6:	484f      	ldr	r0, [pc, #316]	; (8023424 <MotherboardTick+0x194>)
 80232e8:	f7fe ff18 	bl	802211c <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
			mbctx.StrobeFilter.PopStrobe();
 80232ec:	484a      	ldr	r0, [pc, #296]	; (8023418 <MotherboardTick+0x188>)
 80232ee:	f7ff f876 	bl	80223de <_ZN20StrobeDurationFilter9PopStrobeEv>
		}
	}

	if (mbctx.UpdateIMU && mbctx.IMU.Poll()) {
 80232f2:	4b4a      	ldr	r3, [pc, #296]	; (802341c <MotherboardTick+0x18c>)
 80232f4:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80232f8:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d007      	beq.n	8023310 <MotherboardTick+0x80>
 8023300:	4849      	ldr	r0, [pc, #292]	; (8023428 <MotherboardTick+0x198>)
 8023302:	f7fd fb3b 	bl	802097c <_ZN10BHYWrapper4PollEv>
 8023306:	4603      	mov	r3, r0
 8023308:	2b00      	cmp	r3, #0
 802330a:	d001      	beq.n	8023310 <MotherboardTick+0x80>
 802330c:	2301      	movs	r3, #1
 802330e:	e000      	b.n	8023312 <MotherboardTick+0x82>
 8023310:	2300      	movs	r3, #0
 8023312:	2b00      	cmp	r3, #0
 8023314:	d017      	beq.n	8023346 <MotherboardTick+0xb6>
		mbctx.FrameMemo.Add(mbctx.IMU.GetFrame(), mbctx.IMU.GetSeq());
 8023316:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802331a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 802331e:	4942      	ldr	r1, [pc, #264]	; (8023428 <MotherboardTick+0x198>)
 8023320:	4618      	mov	r0, r3
 8023322:	f7fd fb6f 	bl	8020a04 <_ZNK10BHYWrapper8GetFrameEv>
 8023326:	4840      	ldr	r0, [pc, #256]	; (8023428 <MotherboardTick+0x198>)
 8023328:	f7fd fc74 	bl	8020c14 <_ZNK10BHYWrapper6GetSeqEv>
 802332c:	4602      	mov	r2, r0
 802332e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8023332:	4619      	mov	r1, r3
 8023334:	483a      	ldr	r0, [pc, #232]	; (8023420 <MotherboardTick+0x190>)
 8023336:	f7ff fb73 	bl	8022a20 <_ZN12IMUFrameMemo3AddERKN10BHYWrapper8BHYFrameEj>
		mbctx.UpdateIMU = false;
 802333a:	4b38      	ldr	r3, [pc, #224]	; (802341c <MotherboardTick+0x18c>)
 802333c:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 8023340:	2200      	movs	r2, #0
 8023342:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
	}

	if (mbctx.HeadService.HasRequest()) {
 8023346:	4835      	ldr	r0, [pc, #212]	; (802341c <MotherboardTick+0x18c>)
 8023348:	f7fe fce2 	bl	8021d10 <_ZNK13HeadInterface10HasRequestEv>
 802334c:	4603      	mov	r3, r0
 802334e:	2b00      	cmp	r3, #0
 8023350:	d042      	beq.n	80233d8 <MotherboardTick+0x148>
		Request request = mbctx.HeadService.GetRequest();
 8023352:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023356:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 802335a:	4930      	ldr	r1, [pc, #192]	; (802341c <MotherboardTick+0x18c>)
 802335c:	4618      	mov	r0, r3
 802335e:	f7fe fd67 	bl	8021e30 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 8023362:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023366:	f5a3 638a 	sub.w	r3, r3, #1104	; 0x450
 802336a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 802336e:	2b02      	cmp	r3, #2
 8023370:	d006      	beq.n	8023380 <MotherboardTick+0xf0>
 8023372:	2b02      	cmp	r3, #2
 8023374:	dc30      	bgt.n	80233d8 <MotherboardTick+0x148>
 8023376:	2b00      	cmp	r3, #0
 8023378:	d012      	beq.n	80233a0 <MotherboardTick+0x110>
 802337a:	2b01      	cmp	r3, #1
 802337c:	d016      	beq.n	80233ac <MotherboardTick+0x11c>
 802337e:	e02b      	b.n	80233d8 <MotherboardTick+0x148>
		case Periphery::Ack:
			mbctx.HeadService.Send(mbctx.AckHandler.Handle(request));
 8023380:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8023384:	f5a3 7347 	sub.w	r3, r3, #796	; 0x31c
 8023388:	463a      	mov	r2, r7
 802338a:	4928      	ldr	r1, [pc, #160]	; (802342c <MotherboardTick+0x19c>)
 802338c:	4618      	mov	r0, r3
 802338e:	f7ff fc35 	bl	8022bfc <_ZN18AcknowledgeHandler6HandleERK7Request>
 8023392:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8023396:	4619      	mov	r1, r3
 8023398:	4820      	ldr	r0, [pc, #128]	; (802341c <MotherboardTick+0x18c>)
 802339a:	f7fe fcc9 	bl	8021d30 <_ZN13HeadInterface4SendERK8Responce>
			break;
 802339e:	e01b      	b.n	80233d8 <MotherboardTick+0x148>

		case Periphery::Body:
			mbctx.Body.AddRequest(request);
 80233a0:	463b      	mov	r3, r7
 80233a2:	4619      	mov	r1, r3
 80233a4:	4822      	ldr	r0, [pc, #136]	; (8023430 <MotherboardTick+0x1a0>)
 80233a6:	f7fd fe83 	bl	80210b0 <_ZN11QueueSender10AddRequestERK7Request>
			break;
 80233aa:	e015      	b.n	80233d8 <MotherboardTick+0x148>
		case Periphery::Imu:
			mbctx.HeadService.Send(
					mbctx.IMUHandler.Handle(request, mbctx.FrameContainer,
							mbctx.IMU, mbctx.StrobeOffset, mbctx.StrobeFilter));
 80233ac:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80233b0:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 80233b4:	463a      	mov	r2, r7
 80233b6:	4b18      	ldr	r3, [pc, #96]	; (8023418 <MotherboardTick+0x188>)
 80233b8:	9302      	str	r3, [sp, #8]
 80233ba:	4b1e      	ldr	r3, [pc, #120]	; (8023434 <MotherboardTick+0x1a4>)
 80233bc:	9301      	str	r3, [sp, #4]
 80233be:	4b1a      	ldr	r3, [pc, #104]	; (8023428 <MotherboardTick+0x198>)
 80233c0:	9300      	str	r3, [sp, #0]
 80233c2:	4b18      	ldr	r3, [pc, #96]	; (8023424 <MotherboardTick+0x194>)
 80233c4:	491c      	ldr	r1, [pc, #112]	; (8023438 <MotherboardTick+0x1a8>)
 80233c6:	f7ff fab9 	bl	802293c <_ZN17IMURequestHandler6HandleERK7RequestR17IMUFrameContainerRK10BHYWrapperRjR20StrobeDurationFilter>
			mbctx.HeadService.Send(
 80233ca:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80233ce:	4619      	mov	r1, r3
 80233d0:	4812      	ldr	r0, [pc, #72]	; (802341c <MotherboardTick+0x18c>)
 80233d2:	f7fe fcad 	bl	8021d30 <_ZN13HeadInterface4SendERK8Responce>
			break;
 80233d6:	bf00      	nop
		}
	}

	if (mbctx.Body.HasResponce()) {
 80233d8:	4815      	ldr	r0, [pc, #84]	; (8023430 <MotherboardTick+0x1a0>)
 80233da:	f7fd ff37 	bl	802124c <_ZNK11QueueSender11HasResponceEv>
 80233de:	4603      	mov	r3, r0
 80233e0:	2b00      	cmp	r3, #0
 80233e2:	d00d      	beq.n	8023400 <MotherboardTick+0x170>
		mbctx.HeadService.Send(mbctx.Body.GetResponce());
 80233e4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80233e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80233ec:	4910      	ldr	r1, [pc, #64]	; (8023430 <MotherboardTick+0x1a0>)
 80233ee:	4618      	mov	r0, r3
 80233f0:	f7fd ff8e 	bl	8021310 <_ZN11QueueSender11GetResponceEv>
 80233f4:	f507 7351 	add.w	r3, r7, #836	; 0x344
 80233f8:	4619      	mov	r1, r3
 80233fa:	4808      	ldr	r0, [pc, #32]	; (802341c <MotherboardTick+0x18c>)
 80233fc:	f7fe fc98 	bl	8021d30 <_ZN13HeadInterface4SendERK8Responce>
	}

	mbctx.Body.ProcessPriorityRequest();
 8023400:	480b      	ldr	r0, [pc, #44]	; (8023430 <MotherboardTick+0x1a0>)
 8023402:	f7fd ffb9 	bl	8021378 <_ZN11QueueSender22ProcessPriorityRequestEv>
	mbctx.Body.ProcessRequests();
 8023406:	480a      	ldr	r0, [pc, #40]	; (8023430 <MotherboardTick+0x1a0>)
 8023408:	f7fe f8d0 	bl	80215ac <_ZN11QueueSender15ProcessRequestsEv>

	return 0;
 802340c:	2300      	movs	r3, #0
}
 802340e:	4618      	mov	r0, r3
 8023410:	f507 678a 	add.w	r7, r7, #1104	; 0x450
 8023414:	46bd      	mov	sp, r7
 8023416:	bd80      	pop	{r7, pc}
 8023418:	240244cc 	.word	0x240244cc
 802341c:	240001d0 	.word	0x240001d0
 8023420:	24023340 	.word	0x24023340
 8023424:	24023310 	.word	0x24023310
 8023428:	24023370 	.word	0x24023370
 802342c:	24001b18 	.word	0x24001b18
 8023430:	24001b1c 	.word	0x24001b1c
 8023434:	24024510 	.word	0x24024510
 8023438:	240244c8 	.word	0x240244c8

0802343c <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 802343c:	b580      	push	{r7, lr}
 802343e:	af00      	add	r7, sp, #0
	static bool firstEntry = true;
	if (firstEntry) {
 8023440:	4b06      	ldr	r3, [pc, #24]	; (802345c <MotherboardOnStrobe+0x20>)
 8023442:	781b      	ldrb	r3, [r3, #0]
 8023444:	2b00      	cmp	r3, #0
 8023446:	d003      	beq.n	8023450 <MotherboardOnStrobe+0x14>
		firstEntry = false;
 8023448:	4b04      	ldr	r3, [pc, #16]	; (802345c <MotherboardOnStrobe+0x20>)
 802344a:	2200      	movs	r2, #0
 802344c:	701a      	strb	r2, [r3, #0]
		return;
 802344e:	e003      	b.n	8023458 <MotherboardOnStrobe+0x1c>
	}

	mbctx.StrobeFilter.ProcessStrobe(mbctx.IMU);
 8023450:	4903      	ldr	r1, [pc, #12]	; (8023460 <MotherboardOnStrobe+0x24>)
 8023452:	4804      	ldr	r0, [pc, #16]	; (8023464 <MotherboardOnStrobe+0x28>)
 8023454:	f7fe fef9 	bl	802224a <_ZN20StrobeDurationFilter13ProcessStrobeERK10BHYWrapper>
}
 8023458:	bd80      	pop	{r7, pc}
 802345a:	bf00      	nop
 802345c:	24000000 	.word	0x24000000
 8023460:	24023370 	.word	0x24023370
 8023464:	240244cc 	.word	0x240244cc

08023468 <MotherboardOnBodyRecieveComplete>:

void MotherboardOnBodyRecieveComplete() {
 8023468:	b580      	push	{r7, lr}
 802346a:	af00      	add	r7, sp, #0
	mbctx.Body.ProcessResponces();
 802346c:	4802      	ldr	r0, [pc, #8]	; (8023478 <MotherboardOnBodyRecieveComplete+0x10>)
 802346e:	f7fe fbad 	bl	8021bcc <_ZN11QueueSender16ProcessResponcesEv>
}
 8023472:	bf00      	nop
 8023474:	bd80      	pop	{r7, pc}
 8023476:	bf00      	nop
 8023478:	24001b1c 	.word	0x24001b1c

0802347c <MotherboardOnHeadServiceRecieveComplete>:

void MotherboardOnHeadServiceRecieveComplete() {
 802347c:	b580      	push	{r7, lr}
 802347e:	af00      	add	r7, sp, #0
	mbctx.HeadService.ProcessRecievedData();
 8023480:	4802      	ldr	r0, [pc, #8]	; (802348c <MotherboardOnHeadServiceRecieveComplete+0x10>)
 8023482:	f7fe fd11 	bl	8021ea8 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 8023486:	bf00      	nop
 8023488:	bd80      	pop	{r7, pc}
 802348a:	bf00      	nop
 802348c:	240001d0 	.word	0x240001d0

08023490 <MotherboardOnHeadStreamRecieveComplete>:

void MotherboardOnHeadStreamRecieveComplete() {
 8023490:	b580      	push	{r7, lr}
 8023492:	af00      	add	r7, sp, #0
	mbctx.HeadStream.ProcessRecievedData();
 8023494:	4802      	ldr	r0, [pc, #8]	; (80234a0 <MotherboardOnHeadStreamRecieveComplete+0x10>)
 8023496:	f7fe fd07 	bl	8021ea8 <_ZN13HeadInterface19ProcessRecievedDataEv>
}
 802349a:	bf00      	nop
 802349c:	bd80      	pop	{r7, pc}
 802349e:	bf00      	nop
 80234a0:	24000e74 	.word	0x24000e74

080234a4 <MotherboardOnHeadServiceTransmitComplete>:

void MotherboardOnHeadServiceTransmitComplete() {
 80234a4:	b580      	push	{r7, lr}
 80234a6:	af00      	add	r7, sp, #0
	mbctx.HeadService.FinishTransmit();
 80234a8:	4802      	ldr	r0, [pc, #8]	; (80234b4 <MotherboardOnHeadServiceTransmitComplete+0x10>)
 80234aa:	f7fe fcef 	bl	8021e8c <_ZN13HeadInterface14FinishTransmitEv>
}
 80234ae:	bf00      	nop
 80234b0:	bd80      	pop	{r7, pc}
 80234b2:	bf00      	nop
 80234b4:	240001d0 	.word	0x240001d0

080234b8 <MotherboardOnHeadStreamTransmitComplete>:

void MotherboardOnHeadStreamTransmitComplete() {
 80234b8:	b580      	push	{r7, lr}
 80234ba:	af00      	add	r7, sp, #0
	mbctx.HeadStream.FinishTransmit();
 80234bc:	4802      	ldr	r0, [pc, #8]	; (80234c8 <MotherboardOnHeadStreamTransmitComplete+0x10>)
 80234be:	f7fe fce5 	bl	8021e8c <_ZN13HeadInterface14FinishTransmitEv>
}
 80234c2:	bf00      	nop
 80234c4:	bd80      	pop	{r7, pc}
 80234c6:	bf00      	nop
 80234c8:	24000e74 	.word	0x24000e74

080234cc <MotherboardOnBodyTransmitComplete>:

void MotherboardOnBodyTransmitComplete() {
 80234cc:	b580      	push	{r7, lr}
 80234ce:	af00      	add	r7, sp, #0
	mbctx.Body.FinishTransmit();
 80234d0:	4802      	ldr	r0, [pc, #8]	; (80234dc <MotherboardOnBodyTransmitComplete+0x10>)
 80234d2:	f7fe fb85 	bl	8021be0 <_ZN11QueueSender14FinishTransmitEv>
}
 80234d6:	bf00      	nop
 80234d8:	bd80      	pop	{r7, pc}
 80234da:	bf00      	nop
 80234dc:	24001b1c 	.word	0x24001b1c

080234e0 <MotherboardOnBodyTimerTick>:
void MotherboardOnBodyTimerTick() {
 80234e0:	b580      	push	{r7, lr}
 80234e2:	af00      	add	r7, sp, #0
	mbctx.Body.TickTimer();
 80234e4:	4802      	ldr	r0, [pc, #8]	; (80234f0 <MotherboardOnBodyTimerTick+0x10>)
 80234e6:	f7fd fec5 	bl	8021274 <_ZN11QueueSender9TickTimerEv>
}
 80234ea:	bf00      	nop
 80234ec:	bd80      	pop	{r7, pc}
 80234ee:	bf00      	nop
 80234f0:	24001b1c 	.word	0x24001b1c

080234f4 <MotherboardOnImuTimerTick>:

void MotherboardOnImuTimerTick() {
 80234f4:	b480      	push	{r7}
 80234f6:	af00      	add	r7, sp, #0
	mbctx.UpdateIMU = true;
 80234f8:	4b05      	ldr	r3, [pc, #20]	; (8023510 <MotherboardOnImuTimerTick+0x1c>)
 80234fa:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
 80234fe:	2201      	movs	r2, #1
 8023500:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
}
 8023504:	bf00      	nop
 8023506:	46bd      	mov	sp, r7
 8023508:	f85d 7b04 	ldr.w	r7, [sp], #4
 802350c:	4770      	bx	lr
 802350e:	bf00      	nop
 8023510:	240001d0 	.word	0x240001d0

08023514 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 8023514:	b580      	push	{r7, lr}
 8023516:	b082      	sub	sp, #8
 8023518:	af00      	add	r7, sp, #0
 802351a:	6078      	str	r0, [r7, #4]
 802351c:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 802351e:	687b      	ldr	r3, [r7, #4]
 8023520:	681b      	ldr	r3, [r3, #0]
 8023522:	2b0a      	cmp	r3, #10
 8023524:	d105      	bne.n	8023532 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x1e>
 8023526:	4b18      	ldr	r3, [pc, #96]	; (8023588 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x74>)
 8023528:	4a18      	ldr	r2, [pc, #96]	; (802358c <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x78>)
 802352a:	2142      	movs	r1, #66	; 0x42
 802352c:	4818      	ldr	r0, [pc, #96]	; (8023590 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x7c>)
 802352e:	f018 fc25 	bl	803bd7c <__assert_func>
		Buffer[Head] = rhs;
 8023532:	687b      	ldr	r3, [r7, #4]
 8023534:	f103 020c 	add.w	r2, r3, #12
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	685b      	ldr	r3, [r3, #4]
 802353c:	4619      	mov	r1, r3
 802353e:	4610      	mov	r0, r2
 8023540:	f000 fc08 	bl	8023d54 <_ZNSt5arrayI8ResponceLj10EEixEj>
 8023544:	4602      	mov	r2, r0
 8023546:	683b      	ldr	r3, [r7, #0]
 8023548:	4610      	mov	r0, r2
 802354a:	4619      	mov	r1, r3
 802354c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8023550:	461a      	mov	r2, r3
 8023552:	f018 fc7d 	bl	803be50 <memcpy>
		Head = (Head + 1) % Capacity;
 8023556:	687b      	ldr	r3, [r7, #4]
 8023558:	685b      	ldr	r3, [r3, #4]
 802355a:	1c59      	adds	r1, r3, #1
 802355c:	4b0d      	ldr	r3, [pc, #52]	; (8023594 <_ZN10FixedQueueI8ResponceLj10EE4PushERKS0_+0x80>)
 802355e:	fba3 2301 	umull	r2, r3, r3, r1
 8023562:	08da      	lsrs	r2, r3, #3
 8023564:	4613      	mov	r3, r2
 8023566:	009b      	lsls	r3, r3, #2
 8023568:	4413      	add	r3, r2
 802356a:	005b      	lsls	r3, r3, #1
 802356c:	1aca      	subs	r2, r1, r3
 802356e:	687b      	ldr	r3, [r7, #4]
 8023570:	605a      	str	r2, [r3, #4]
		Size++;
 8023572:	687b      	ldr	r3, [r7, #4]
 8023574:	681b      	ldr	r3, [r3, #0]
 8023576:	1c5a      	adds	r2, r3, #1
 8023578:	687b      	ldr	r3, [r7, #4]
 802357a:	601a      	str	r2, [r3, #0]
		return true;
 802357c:	2301      	movs	r3, #1
	}
 802357e:	4618      	mov	r0, r3
 8023580:	3708      	adds	r7, #8
 8023582:	46bd      	mov	sp, r7
 8023584:	bd80      	pop	{r7, pc}
 8023586:	bf00      	nop
 8023588:	0803da88 	.word	0x0803da88
 802358c:	0803da9c 	.word	0x0803da9c
 8023590:	0803cfd0 	.word	0x0803cfd0
 8023594:	cccccccd 	.word	0xcccccccd

08023598 <_ZNK10FixedQueueI8ResponceLj10EE5EmptyEv>:
	bool Empty() const {
 8023598:	b480      	push	{r7}
 802359a:	b083      	sub	sp, #12
 802359c:	af00      	add	r7, sp, #0
 802359e:	6078      	str	r0, [r7, #4]
		return Size == 0;
 80235a0:	687b      	ldr	r3, [r7, #4]
 80235a2:	681b      	ldr	r3, [r3, #0]
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	bf0c      	ite	eq
 80235a8:	2301      	moveq	r3, #1
 80235aa:	2300      	movne	r3, #0
 80235ac:	b2db      	uxtb	r3, r3
	}
 80235ae:	4618      	mov	r0, r3
 80235b0:	370c      	adds	r7, #12
 80235b2:	46bd      	mov	sp, r7
 80235b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235b8:	4770      	bx	lr
	...

080235bc <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv>:
	const T& Front() const {
 80235bc:	b580      	push	{r7, lr}
 80235be:	b082      	sub	sp, #8
 80235c0:	af00      	add	r7, sp, #0
 80235c2:	6078      	str	r0, [r7, #4]
		assert(Size);
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	d105      	bne.n	80235d8 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x1c>
 80235cc:	4b09      	ldr	r3, [pc, #36]	; (80235f4 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x38>)
 80235ce:	4a0a      	ldr	r2, [pc, #40]	; (80235f8 <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x3c>)
 80235d0:	2152      	movs	r1, #82	; 0x52
 80235d2:	480a      	ldr	r0, [pc, #40]	; (80235fc <_ZNK10FixedQueueI8ResponceLj10EE5FrontEv+0x40>)
 80235d4:	f018 fbd2 	bl	803bd7c <__assert_func>
		return Buffer[Tail];
 80235d8:	687b      	ldr	r3, [r7, #4]
 80235da:	f103 020c 	add.w	r2, r3, #12
 80235de:	687b      	ldr	r3, [r7, #4]
 80235e0:	689b      	ldr	r3, [r3, #8]
 80235e2:	4619      	mov	r1, r3
 80235e4:	4610      	mov	r0, r2
 80235e6:	f000 fbc4 	bl	8023d72 <_ZNKSt5arrayI8ResponceLj10EEixEj>
 80235ea:	4603      	mov	r3, r0
	}
 80235ec:	4618      	mov	r0, r3
 80235ee:	3708      	adds	r7, #8
 80235f0:	46bd      	mov	sp, r7
 80235f2:	bd80      	pop	{r7, pc}
 80235f4:	0803dafc 	.word	0x0803dafc
 80235f8:	0803db04 	.word	0x0803db04
 80235fc:	0803cfd0 	.word	0x0803cfd0

08023600 <_ZN10FixedQueueI8ResponceLj10EE3PopEv>:
	bool Pop() {
 8023600:	b580      	push	{r7, lr}
 8023602:	b082      	sub	sp, #8
 8023604:	af00      	add	r7, sp, #0
 8023606:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	681b      	ldr	r3, [r3, #0]
 802360c:	2b00      	cmp	r3, #0
 802360e:	d105      	bne.n	802361c <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x1c>
 8023610:	4b0e      	ldr	r3, [pc, #56]	; (802364c <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x4c>)
 8023612:	4a0f      	ldr	r2, [pc, #60]	; (8023650 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x50>)
 8023614:	214c      	movs	r1, #76	; 0x4c
 8023616:	480f      	ldr	r0, [pc, #60]	; (8023654 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x54>)
 8023618:	f018 fbb0 	bl	803bd7c <__assert_func>
		Tail = (Tail + 1) % Capacity;
 802361c:	687b      	ldr	r3, [r7, #4]
 802361e:	689b      	ldr	r3, [r3, #8]
 8023620:	1c59      	adds	r1, r3, #1
 8023622:	4b0d      	ldr	r3, [pc, #52]	; (8023658 <_ZN10FixedQueueI8ResponceLj10EE3PopEv+0x58>)
 8023624:	fba3 2301 	umull	r2, r3, r3, r1
 8023628:	08da      	lsrs	r2, r3, #3
 802362a:	4613      	mov	r3, r2
 802362c:	009b      	lsls	r3, r3, #2
 802362e:	4413      	add	r3, r2
 8023630:	005b      	lsls	r3, r3, #1
 8023632:	1aca      	subs	r2, r1, r3
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	609a      	str	r2, [r3, #8]
		Size--;
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	681b      	ldr	r3, [r3, #0]
 802363c:	1e5a      	subs	r2, r3, #1
 802363e:	687b      	ldr	r3, [r7, #4]
 8023640:	601a      	str	r2, [r3, #0]
	}
 8023642:	bf00      	nop
 8023644:	4618      	mov	r0, r3
 8023646:	3708      	adds	r7, #8
 8023648:	46bd      	mov	sp, r7
 802364a:	bd80      	pop	{r7, pc}
 802364c:	0803db64 	.word	0x0803db64
 8023650:	0803db70 	.word	0x0803db70
 8023654:	0803cfd0 	.word	0x0803cfd0
 8023658:	cccccccd 	.word	0xcccccccd

0802365c <_ZNSt5arrayIhLj256EE4dataEv>:
      data() noexcept
 802365c:	b580      	push	{r7, lr}
 802365e:	b082      	sub	sp, #8
 8023660:	af00      	add	r7, sp, #0
 8023662:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	4618      	mov	r0, r3
 8023668:	f000 fb92 	bl	8023d90 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 802366c:	4603      	mov	r3, r0
 802366e:	4618      	mov	r0, r3
 8023670:	3708      	adds	r7, #8
 8023672:	46bd      	mov	sp, r7
 8023674:	bd80      	pop	{r7, pc}

08023676 <_ZNK10FixedQueueI7RequestLj500EE5EmptyEv>:
	bool Empty() const {
 8023676:	b480      	push	{r7}
 8023678:	b083      	sub	sp, #12
 802367a:	af00      	add	r7, sp, #0
 802367c:	6078      	str	r0, [r7, #4]
		return Size == 0;
 802367e:	687b      	ldr	r3, [r7, #4]
 8023680:	681b      	ldr	r3, [r3, #0]
 8023682:	2b00      	cmp	r3, #0
 8023684:	bf0c      	ite	eq
 8023686:	2301      	moveq	r3, #1
 8023688:	2300      	movne	r3, #0
 802368a:	b2db      	uxtb	r3, r3
	}
 802368c:	4618      	mov	r0, r3
 802368e:	370c      	adds	r7, #12
 8023690:	46bd      	mov	sp, r7
 8023692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023696:	4770      	bx	lr

08023698 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv>:
	const T& Front() const {
 8023698:	b580      	push	{r7, lr}
 802369a:	b082      	sub	sp, #8
 802369c:	af00      	add	r7, sp, #0
 802369e:	6078      	str	r0, [r7, #4]
		assert(Size);
 80236a0:	687b      	ldr	r3, [r7, #4]
 80236a2:	681b      	ldr	r3, [r3, #0]
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	d105      	bne.n	80236b4 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x1c>
 80236a8:	4b09      	ldr	r3, [pc, #36]	; (80236d0 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x38>)
 80236aa:	4a0a      	ldr	r2, [pc, #40]	; (80236d4 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x3c>)
 80236ac:	2152      	movs	r1, #82	; 0x52
 80236ae:	480a      	ldr	r0, [pc, #40]	; (80236d8 <_ZNK10FixedQueueI7RequestLj500EE5FrontEv+0x40>)
 80236b0:	f018 fb64 	bl	803bd7c <__assert_func>
		return Buffer[Tail];
 80236b4:	687b      	ldr	r3, [r7, #4]
 80236b6:	f103 020c 	add.w	r2, r3, #12
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	689b      	ldr	r3, [r3, #8]
 80236be:	4619      	mov	r1, r3
 80236c0:	4610      	mov	r0, r2
 80236c2:	f000 fb70 	bl	8023da6 <_ZNKSt5arrayI7RequestLj500EEixEj>
 80236c6:	4603      	mov	r3, r0
	}
 80236c8:	4618      	mov	r0, r3
 80236ca:	3708      	adds	r7, #8
 80236cc:	46bd      	mov	sp, r7
 80236ce:	bd80      	pop	{r7, pc}
 80236d0:	0803dafc 	.word	0x0803dafc
 80236d4:	0803dbc4 	.word	0x0803dbc4
 80236d8:	0803cfd0 	.word	0x0803cfd0

080236dc <_ZNKSt5arrayIhLj256EE4dataEv>:

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
 80236dc:	b580      	push	{r7, lr}
 80236de:	b082      	sub	sp, #8
 80236e0:	af00      	add	r7, sp, #0
 80236e2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 80236e4:	687b      	ldr	r3, [r7, #4]
 80236e6:	4618      	mov	r0, r3
 80236e8:	f000 fb52 	bl	8023d90 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>
 80236ec:	4603      	mov	r3, r0
 80236ee:	4618      	mov	r0, r3
 80236f0:	3708      	adds	r7, #8
 80236f2:	46bd      	mov	sp, r7
 80236f4:	bd80      	pop	{r7, pc}
	...

080236f8 <_ZN10FixedQueueI7RequestLj500EE3PopEv>:
	bool Pop() {
 80236f8:	b580      	push	{r7, lr}
 80236fa:	b082      	sub	sp, #8
 80236fc:	af00      	add	r7, sp, #0
 80236fe:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 8023700:	687b      	ldr	r3, [r7, #4]
 8023702:	681b      	ldr	r3, [r3, #0]
 8023704:	2b00      	cmp	r3, #0
 8023706:	d105      	bne.n	8023714 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x1c>
 8023708:	4b0e      	ldr	r3, [pc, #56]	; (8023744 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x4c>)
 802370a:	4a0f      	ldr	r2, [pc, #60]	; (8023748 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x50>)
 802370c:	214c      	movs	r1, #76	; 0x4c
 802370e:	480f      	ldr	r0, [pc, #60]	; (802374c <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x54>)
 8023710:	f018 fb34 	bl	803bd7c <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023714:	687b      	ldr	r3, [r7, #4]
 8023716:	689b      	ldr	r3, [r3, #8]
 8023718:	1c5a      	adds	r2, r3, #1
 802371a:	4b0d      	ldr	r3, [pc, #52]	; (8023750 <_ZN10FixedQueueI7RequestLj500EE3PopEv+0x58>)
 802371c:	fba3 1302 	umull	r1, r3, r3, r2
 8023720:	095b      	lsrs	r3, r3, #5
 8023722:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8023726:	fb01 f303 	mul.w	r3, r1, r3
 802372a:	1ad3      	subs	r3, r2, r3
 802372c:	687a      	ldr	r2, [r7, #4]
 802372e:	6093      	str	r3, [r2, #8]
		Size--;
 8023730:	687b      	ldr	r3, [r7, #4]
 8023732:	681b      	ldr	r3, [r3, #0]
 8023734:	1e5a      	subs	r2, r3, #1
 8023736:	687b      	ldr	r3, [r7, #4]
 8023738:	601a      	str	r2, [r3, #0]
	}
 802373a:	bf00      	nop
 802373c:	4618      	mov	r0, r3
 802373e:	3708      	adds	r7, #8
 8023740:	46bd      	mov	sp, r7
 8023742:	bd80      	pop	{r7, pc}
 8023744:	0803db64 	.word	0x0803db64
 8023748:	0803dc24 	.word	0x0803dc24
 802374c:	0803cfd0 	.word	0x0803cfd0
 8023750:	10624dd3 	.word	0x10624dd3

08023754 <_ZN10FixedQueueI7RequestLj500EE5ClearEv>:
	void Clear() {
 8023754:	b580      	push	{r7, lr}
 8023756:	b082      	sub	sp, #8
 8023758:	af00      	add	r7, sp, #0
 802375a:	6078      	str	r0, [r7, #4]
		Buffer = std::array<T, Capacity>{};
 802375c:	687b      	ldr	r3, [r7, #4]
 802375e:	330c      	adds	r3, #12
 8023760:	4a08      	ldr	r2, [pc, #32]	; (8023784 <_ZN10FixedQueueI7RequestLj500EE5ClearEv+0x30>)
 8023762:	2100      	movs	r1, #0
 8023764:	4618      	mov	r0, r3
 8023766:	f018 fb9b 	bl	803bea0 <memset>
		Size = 0;
 802376a:	687b      	ldr	r3, [r7, #4]
 802376c:	2200      	movs	r2, #0
 802376e:	601a      	str	r2, [r3, #0]
		Head = 0;
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	2200      	movs	r2, #0
 8023774:	605a      	str	r2, [r3, #4]
		Tail = 0;
 8023776:	687b      	ldr	r3, [r7, #4]
 8023778:	2200      	movs	r2, #0
 802377a:	609a      	str	r2, [r3, #8]
	}
 802377c:	bf00      	nop
 802377e:	3708      	adds	r7, #8
 8023780:	46bd      	mov	sp, r7
 8023782:	bd80      	pop	{r7, pc}
 8023784:	00020b70 	.word	0x00020b70

08023788 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8023788:	b480      	push	{r7}
 802378a:	b083      	sub	sp, #12
 802378c:	af00      	add	r7, sp, #0
 802378e:	6078      	str	r0, [r7, #4]
 8023790:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8023792:	687a      	ldr	r2, [r7, #4]
 8023794:	683b      	ldr	r3, [r7, #0]
 8023796:	4413      	add	r3, r2
 8023798:	4618      	mov	r0, r3
 802379a:	370c      	adds	r7, #12
 802379c:	46bd      	mov	sp, r7
 802379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237a2:	4770      	bx	lr

080237a4 <_ZNK10FixedQueueI7RequestLj500EE4FullEv>:
	bool Full() const {
 80237a4:	b480      	push	{r7}
 80237a6:	b083      	sub	sp, #12
 80237a8:	af00      	add	r7, sp, #0
 80237aa:	6078      	str	r0, [r7, #4]
		return Size == Capacity;
 80237ac:	687b      	ldr	r3, [r7, #4]
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80237b4:	bf0c      	ite	eq
 80237b6:	2301      	moveq	r3, #1
 80237b8:	2300      	movne	r3, #0
 80237ba:	b2db      	uxtb	r3, r3
	}
 80237bc:	4618      	mov	r0, r3
 80237be:	370c      	adds	r7, #12
 80237c0:	46bd      	mov	sp, r7
 80237c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237c6:	4770      	bx	lr

080237c8 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_>:
	bool Push(const T &rhs) {
 80237c8:	b580      	push	{r7, lr}
 80237ca:	b082      	sub	sp, #8
 80237cc:	af00      	add	r7, sp, #0
 80237ce:	6078      	str	r0, [r7, #4]
 80237d0:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 80237d2:	687b      	ldr	r3, [r7, #4]
 80237d4:	681b      	ldr	r3, [r3, #0]
 80237d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80237da:	d105      	bne.n	80237e8 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x20>
 80237dc:	4b17      	ldr	r3, [pc, #92]	; (802383c <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x74>)
 80237de:	4a18      	ldr	r2, [pc, #96]	; (8023840 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x78>)
 80237e0:	2142      	movs	r1, #66	; 0x42
 80237e2:	4818      	ldr	r0, [pc, #96]	; (8023844 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x7c>)
 80237e4:	f018 faca 	bl	803bd7c <__assert_func>
		Buffer[Head] = rhs;
 80237e8:	687b      	ldr	r3, [r7, #4]
 80237ea:	f103 020c 	add.w	r2, r3, #12
 80237ee:	687b      	ldr	r3, [r7, #4]
 80237f0:	685b      	ldr	r3, [r3, #4]
 80237f2:	4619      	mov	r1, r3
 80237f4:	4610      	mov	r0, r2
 80237f6:	f000 fae5 	bl	8023dc4 <_ZNSt5arrayI7RequestLj500EEixEj>
 80237fa:	4602      	mov	r2, r0
 80237fc:	683b      	ldr	r3, [r7, #0]
 80237fe:	4610      	mov	r0, r2
 8023800:	4619      	mov	r1, r3
 8023802:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8023806:	461a      	mov	r2, r3
 8023808:	f018 fb22 	bl	803be50 <memcpy>
		Head = (Head + 1) % Capacity;
 802380c:	687b      	ldr	r3, [r7, #4]
 802380e:	685b      	ldr	r3, [r3, #4]
 8023810:	1c5a      	adds	r2, r3, #1
 8023812:	4b0d      	ldr	r3, [pc, #52]	; (8023848 <_ZN10FixedQueueI7RequestLj500EE4PushERKS0_+0x80>)
 8023814:	fba3 1302 	umull	r1, r3, r3, r2
 8023818:	095b      	lsrs	r3, r3, #5
 802381a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 802381e:	fb01 f303 	mul.w	r3, r1, r3
 8023822:	1ad3      	subs	r3, r2, r3
 8023824:	687a      	ldr	r2, [r7, #4]
 8023826:	6053      	str	r3, [r2, #4]
		Size++;
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	681b      	ldr	r3, [r3, #0]
 802382c:	1c5a      	adds	r2, r3, #1
 802382e:	687b      	ldr	r3, [r7, #4]
 8023830:	601a      	str	r2, [r3, #0]
		return true;
 8023832:	2301      	movs	r3, #1
	}
 8023834:	4618      	mov	r0, r3
 8023836:	3708      	adds	r7, #8
 8023838:	46bd      	mov	sp, r7
 802383a:	bd80      	pop	{r7, pc}
 802383c:	0803da88 	.word	0x0803da88
 8023840:	0803dc78 	.word	0x0803dc78
 8023844:	0803cfd0 	.word	0x0803cfd0
 8023848:	10624dd3 	.word	0x10624dd3

0802384c <_ZNK10FixedQueueI7RequestLj500EE7GetSizeEv>:
	size_t GetSize() const {
 802384c:	b480      	push	{r7}
 802384e:	b083      	sub	sp, #12
 8023850:	af00      	add	r7, sp, #0
 8023852:	6078      	str	r0, [r7, #4]
		return Size;
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	681b      	ldr	r3, [r3, #0]
	}
 8023858:	4618      	mov	r0, r3
 802385a:	370c      	adds	r7, #12
 802385c:	46bd      	mov	sp, r7
 802385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023862:	4770      	bx	lr

08023864 <_ZNK10FixedQueueI8ResponceLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023864:	b480      	push	{r7}
 8023866:	b083      	sub	sp, #12
 8023868:	af00      	add	r7, sp, #0
 802386a:	6078      	str	r0, [r7, #4]
		return Size;
 802386c:	687b      	ldr	r3, [r7, #4]
 802386e:	681b      	ldr	r3, [r3, #0]
	}
 8023870:	4618      	mov	r0, r3
 8023872:	370c      	adds	r7, #12
 8023874:	46bd      	mov	sp, r7
 8023876:	f85d 7b04 	ldr.w	r7, [sp], #4
 802387a:	4770      	bx	lr

0802387c <_ZNK10FixedQueueI7RequestLj10EE5EmptyEv>:
	bool Empty() const {
 802387c:	b480      	push	{r7}
 802387e:	b083      	sub	sp, #12
 8023880:	af00      	add	r7, sp, #0
 8023882:	6078      	str	r0, [r7, #4]
		return Size == 0;
 8023884:	687b      	ldr	r3, [r7, #4]
 8023886:	681b      	ldr	r3, [r3, #0]
 8023888:	2b00      	cmp	r3, #0
 802388a:	bf0c      	ite	eq
 802388c:	2301      	moveq	r3, #1
 802388e:	2300      	movne	r3, #0
 8023890:	b2db      	uxtb	r3, r3
	}
 8023892:	4618      	mov	r0, r3
 8023894:	370c      	adds	r7, #12
 8023896:	46bd      	mov	sp, r7
 8023898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802389c:	4770      	bx	lr
	...

080238a0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv>:
	const T& Front() const {
 80238a0:	b580      	push	{r7, lr}
 80238a2:	b082      	sub	sp, #8
 80238a4:	af00      	add	r7, sp, #0
 80238a6:	6078      	str	r0, [r7, #4]
		assert(Size);
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	681b      	ldr	r3, [r3, #0]
 80238ac:	2b00      	cmp	r3, #0
 80238ae:	d105      	bne.n	80238bc <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x1c>
 80238b0:	4b09      	ldr	r3, [pc, #36]	; (80238d8 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x38>)
 80238b2:	4a0a      	ldr	r2, [pc, #40]	; (80238dc <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x3c>)
 80238b4:	2152      	movs	r1, #82	; 0x52
 80238b6:	480a      	ldr	r0, [pc, #40]	; (80238e0 <_ZNK10FixedQueueI7RequestLj10EE5FrontEv+0x40>)
 80238b8:	f018 fa60 	bl	803bd7c <__assert_func>
		return Buffer[Tail];
 80238bc:	687b      	ldr	r3, [r7, #4]
 80238be:	f103 020c 	add.w	r2, r3, #12
 80238c2:	687b      	ldr	r3, [r7, #4]
 80238c4:	689b      	ldr	r3, [r3, #8]
 80238c6:	4619      	mov	r1, r3
 80238c8:	4610      	mov	r0, r2
 80238ca:	f000 fa8a 	bl	8023de2 <_ZNKSt5arrayI7RequestLj10EEixEj>
 80238ce:	4603      	mov	r3, r0
	}
 80238d0:	4618      	mov	r0, r3
 80238d2:	3708      	adds	r7, #8
 80238d4:	46bd      	mov	sp, r7
 80238d6:	bd80      	pop	{r7, pc}
 80238d8:	0803dafc 	.word	0x0803dafc
 80238dc:	0803dcd8 	.word	0x0803dcd8
 80238e0:	0803cfd0 	.word	0x0803cfd0

080238e4 <_ZN10FixedQueueI7RequestLj10EE3PopEv>:
	bool Pop() {
 80238e4:	b580      	push	{r7, lr}
 80238e6:	b082      	sub	sp, #8
 80238e8:	af00      	add	r7, sp, #0
 80238ea:	6078      	str	r0, [r7, #4]
		assert(Size != 0);
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	681b      	ldr	r3, [r3, #0]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d105      	bne.n	8023900 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x1c>
 80238f4:	4b0e      	ldr	r3, [pc, #56]	; (8023930 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x4c>)
 80238f6:	4a0f      	ldr	r2, [pc, #60]	; (8023934 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x50>)
 80238f8:	214c      	movs	r1, #76	; 0x4c
 80238fa:	480f      	ldr	r0, [pc, #60]	; (8023938 <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x54>)
 80238fc:	f018 fa3e 	bl	803bd7c <__assert_func>
		Tail = (Tail + 1) % Capacity;
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	689b      	ldr	r3, [r3, #8]
 8023904:	1c59      	adds	r1, r3, #1
 8023906:	4b0d      	ldr	r3, [pc, #52]	; (802393c <_ZN10FixedQueueI7RequestLj10EE3PopEv+0x58>)
 8023908:	fba3 2301 	umull	r2, r3, r3, r1
 802390c:	08da      	lsrs	r2, r3, #3
 802390e:	4613      	mov	r3, r2
 8023910:	009b      	lsls	r3, r3, #2
 8023912:	4413      	add	r3, r2
 8023914:	005b      	lsls	r3, r3, #1
 8023916:	1aca      	subs	r2, r1, r3
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	609a      	str	r2, [r3, #8]
		Size--;
 802391c:	687b      	ldr	r3, [r7, #4]
 802391e:	681b      	ldr	r3, [r3, #0]
 8023920:	1e5a      	subs	r2, r3, #1
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	601a      	str	r2, [r3, #0]
	}
 8023926:	bf00      	nop
 8023928:	4618      	mov	r0, r3
 802392a:	3708      	adds	r7, #8
 802392c:	46bd      	mov	sp, r7
 802392e:	bd80      	pop	{r7, pc}
 8023930:	0803db64 	.word	0x0803db64
 8023934:	0803dd38 	.word	0x0803dd38
 8023938:	0803cfd0 	.word	0x0803cfd0
 802393c:	cccccccd 	.word	0xcccccccd

08023940 <_ZNK10FixedQueueI7RequestLj10EE7GetSizeEv>:
	size_t GetSize() const {
 8023940:	b480      	push	{r7}
 8023942:	b083      	sub	sp, #12
 8023944:	af00      	add	r7, sp, #0
 8023946:	6078      	str	r0, [r7, #4]
		return Size;
 8023948:	687b      	ldr	r3, [r7, #4]
 802394a:	681b      	ldr	r3, [r3, #0]
	}
 802394c:	4618      	mov	r0, r3
 802394e:	370c      	adds	r7, #12
 8023950:	46bd      	mov	sp, r7
 8023952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023956:	4770      	bx	lr

08023958 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_>:
	bool Push(const T &rhs) {
 8023958:	b580      	push	{r7, lr}
 802395a:	b082      	sub	sp, #8
 802395c:	af00      	add	r7, sp, #0
 802395e:	6078      	str	r0, [r7, #4]
 8023960:	6039      	str	r1, [r7, #0]
		assert(Size != Capacity);
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	2b0a      	cmp	r3, #10
 8023968:	d105      	bne.n	8023976 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x1e>
 802396a:	4b18      	ldr	r3, [pc, #96]	; (80239cc <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x74>)
 802396c:	4a18      	ldr	r2, [pc, #96]	; (80239d0 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x78>)
 802396e:	2142      	movs	r1, #66	; 0x42
 8023970:	4818      	ldr	r0, [pc, #96]	; (80239d4 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x7c>)
 8023972:	f018 fa03 	bl	803bd7c <__assert_func>
		Buffer[Head] = rhs;
 8023976:	687b      	ldr	r3, [r7, #4]
 8023978:	f103 020c 	add.w	r2, r3, #12
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	685b      	ldr	r3, [r3, #4]
 8023980:	4619      	mov	r1, r3
 8023982:	4610      	mov	r0, r2
 8023984:	f000 fa3c 	bl	8023e00 <_ZNSt5arrayI7RequestLj10EEixEj>
 8023988:	4602      	mov	r2, r0
 802398a:	683b      	ldr	r3, [r7, #0]
 802398c:	4610      	mov	r0, r2
 802398e:	4619      	mov	r1, r3
 8023990:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8023994:	461a      	mov	r2, r3
 8023996:	f018 fa5b 	bl	803be50 <memcpy>
		Head = (Head + 1) % Capacity;
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	685b      	ldr	r3, [r3, #4]
 802399e:	1c59      	adds	r1, r3, #1
 80239a0:	4b0d      	ldr	r3, [pc, #52]	; (80239d8 <_ZN10FixedQueueI7RequestLj10EE4PushERKS0_+0x80>)
 80239a2:	fba3 2301 	umull	r2, r3, r3, r1
 80239a6:	08da      	lsrs	r2, r3, #3
 80239a8:	4613      	mov	r3, r2
 80239aa:	009b      	lsls	r3, r3, #2
 80239ac:	4413      	add	r3, r2
 80239ae:	005b      	lsls	r3, r3, #1
 80239b0:	1aca      	subs	r2, r1, r3
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	605a      	str	r2, [r3, #4]
		Size++;
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	681b      	ldr	r3, [r3, #0]
 80239ba:	1c5a      	adds	r2, r3, #1
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	601a      	str	r2, [r3, #0]
		return true;
 80239c0:	2301      	movs	r3, #1
	}
 80239c2:	4618      	mov	r0, r3
 80239c4:	3708      	adds	r7, #8
 80239c6:	46bd      	mov	sp, r7
 80239c8:	bd80      	pop	{r7, pc}
 80239ca:	bf00      	nop
 80239cc:	0803da88 	.word	0x0803da88
 80239d0:	0803dd8c 	.word	0x0803dd8c
 80239d4:	0803cfd0 	.word	0x0803cfd0
 80239d8:	cccccccd 	.word	0xcccccccd

080239dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSESt16initializer_listIS1_E>:
       *  Note that the assignment completely changes the %deque and that the
       *  resulting %deque's size is the same as the number of elements
       *  assigned.
       */
      deque&
      operator=(initializer_list<value_type> __l)
 80239dc:	b5b0      	push	{r4, r5, r7, lr}
 80239de:	b086      	sub	sp, #24
 80239e0:	af00      	add	r7, sp, #0
 80239e2:	60f8      	str	r0, [r7, #12]
 80239e4:	1d3b      	adds	r3, r7, #4
 80239e6:	e883 0006 	stmia.w	r3, {r1, r2}
      {
	_M_assign_aux(__l.begin(), __l.end(),
 80239ea:	1d3b      	adds	r3, r7, #4
 80239ec:	4618      	mov	r0, r3
 80239ee:	f000 fa16 	bl	8023e1e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 80239f2:	4604      	mov	r4, r0
 80239f4:	1d3b      	adds	r3, r7, #4
 80239f6:	4618      	mov	r0, r3
 80239f8:	f000 fa1d 	bl	8023e36 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>
 80239fc:	4602      	mov	r2, r0
 80239fe:	462b      	mov	r3, r5
 8023a00:	4621      	mov	r1, r4
 8023a02:	68f8      	ldr	r0, [r7, #12]
 8023a04:	f000 fa2c 	bl	8023e60 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>
		      random_access_iterator_tag());
	return *this;
 8023a08:	68fb      	ldr	r3, [r7, #12]
      }
 8023a0a:	4618      	mov	r0, r3
 8023a0c:	3718      	adds	r7, #24
 8023a0e:	46bd      	mov	sp, r7
 8023a10:	bdb0      	pop	{r4, r5, r7, pc}

08023a12 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_>:
       *  element at the front of the %deque and assigns the given
       *  data to it.  Due to the nature of a %deque this operation
       *  can be done in constant time.
       */
      void
      push_front(const value_type& __x)
 8023a12:	b580      	push	{r7, lr}
 8023a14:	b082      	sub	sp, #8
 8023a16:	af00      	add	r7, sp, #0
 8023a18:	6078      	str	r0, [r7, #4]
 8023a1a:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	689a      	ldr	r2, [r3, #8]
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	68db      	ldr	r3, [r3, #12]
 8023a24:	429a      	cmp	r2, r3
 8023a26:	d00e      	beq.n	8023a46 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x34>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8023a28:	6878      	ldr	r0, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8023a2e:	3b14      	subs	r3, #20
 8023a30:	683a      	ldr	r2, [r7, #0]
 8023a32:	4619      	mov	r1, r3
 8023a34:	f000 fa79 	bl	8023f2a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
				     __x);
	    --this->_M_impl._M_start._M_cur;
 8023a38:	687b      	ldr	r3, [r7, #4]
 8023a3a:	689b      	ldr	r3, [r3, #8]
 8023a3c:	f1a3 0214 	sub.w	r2, r3, #20
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_push_front_aux(__x);
      }
 8023a44:	e003      	b.n	8023a4e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE10push_frontERKS1_+0x3c>
	  _M_push_front_aux(__x);
 8023a46:	6839      	ldr	r1, [r7, #0]
 8023a48:	6878      	ldr	r0, [r7, #4]
 8023a4a:	f000 fa81 	bl	8023f50 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>
      }
 8023a4e:	bf00      	nop
 8023a50:	3708      	adds	r7, #8
 8023a52:	46bd      	mov	sp, r7
 8023a54:	bd80      	pop	{r7, pc}

08023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8023a56:	b580      	push	{r7, lr}
 8023a58:	b082      	sub	sp, #8
 8023a5a:	af00      	add	r7, sp, #0
 8023a5c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	f103 0218 	add.w	r2, r3, #24
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	3308      	adds	r3, #8
 8023a68:	4619      	mov	r1, r3
 8023a6a:	4610      	mov	r0, r2
 8023a6c:	f000 fab6 	bl	8023fdc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023a70:	4603      	mov	r3, r0
 8023a72:	4618      	mov	r0, r3
 8023a74:	3708      	adds	r7, #8
 8023a76:	46bd      	mov	sp, r7
 8023a78:	bd80      	pop	{r7, pc}

08023a7a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv>:
       *
       *  Note that no data is returned, and if the last element's data is
       *  needed, it should be retrieved before pop_back() is called.
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
 8023a7a:	b580      	push	{r7, lr}
 8023a7c:	b082      	sub	sp, #8
 8023a7e:	af00      	add	r7, sp, #0
 8023a80:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_finish._M_cur
 8023a82:	687b      	ldr	r3, [r7, #4]
 8023a84:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_first)
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	69db      	ldr	r3, [r3, #28]
	if (this->_M_impl._M_finish._M_cur
 8023a8a:	429a      	cmp	r2, r3
 8023a8c:	d011      	beq.n	8023ab2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x38>
	  {
	    --this->_M_impl._M_finish._M_cur;
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	699b      	ldr	r3, [r3, #24]
 8023a92:	f1a3 0214 	sub.w	r2, r3, #20
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	619a      	str	r2, [r3, #24]
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	4618      	mov	r0, r3
 8023a9e:	f000 fac9 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023aa2:	4602      	mov	r2, r0
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	699b      	ldr	r3, [r3, #24]
 8023aa8:	4619      	mov	r1, r3
 8023aaa:	4610      	mov	r0, r2
 8023aac:	f000 facd 	bl	802404a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
				   this->_M_impl._M_finish._M_cur);
	  }
	else
	  _M_pop_back_aux();
      }
 8023ab0:	e002      	b.n	8023ab8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8pop_backEv+0x3e>
	  _M_pop_back_aux();
 8023ab2:	6878      	ldr	r0, [r7, #4]
 8023ab4:	f000 fad6 	bl	8024064 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>
      }
 8023ab8:	bf00      	nop
 8023aba:	3708      	adds	r7, #8
 8023abc:	46bd      	mov	sp, r7
 8023abe:	bd80      	pop	{r7, pc}

08023ac0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8023ac0:	b580      	push	{r7, lr}
 8023ac2:	b082      	sub	sp, #8
 8023ac4:	af00      	add	r7, sp, #0
 8023ac6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8023ac8:	687b      	ldr	r3, [r7, #4]
 8023aca:	f103 0218 	add.w	r2, r3, #24
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	3308      	adds	r3, #8
 8023ad2:	4619      	mov	r1, r3
 8023ad4:	4610      	mov	r0, r2
 8023ad6:	f000 faef 	bl	80240b8 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8023ada:	4603      	mov	r3, r0
 8023adc:	4618      	mov	r0, r3
 8023ade:	3708      	adds	r7, #8
 8023ae0:	46bd      	mov	sp, r7
 8023ae2:	bd80      	pop	{r7, pc}

08023ae4 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8023ae4:	b580      	push	{r7, lr}
 8023ae6:	b082      	sub	sp, #8
 8023ae8:	af00      	add	r7, sp, #0
 8023aea:	6078      	str	r0, [r7, #4]
 8023aec:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	3308      	adds	r3, #8
 8023af2:	683a      	ldr	r2, [r7, #0]
 8023af4:	4611      	mov	r1, r2
 8023af6:	4618      	mov	r0, r3
 8023af8:	f000 faf2 	bl	80240e0 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>
 8023afc:	4603      	mov	r3, r0
      }
 8023afe:	4618      	mov	r0, r3
 8023b00:	3708      	adds	r7, #8
 8023b02:	46bd      	mov	sp, r7
 8023b04:	bd80      	pop	{r7, pc}

08023b06 <_ZNSt5queueIjSt5dequeIjSaIjEEE4pushERKj>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8023b06:	b580      	push	{r7, lr}
 8023b08:	b082      	sub	sp, #8
 8023b0a:	af00      	add	r7, sp, #0
 8023b0c:	6078      	str	r0, [r7, #4]
 8023b0e:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8023b10:	687b      	ldr	r3, [r7, #4]
 8023b12:	6839      	ldr	r1, [r7, #0]
 8023b14:	4618      	mov	r0, r3
 8023b16:	f000 faf9 	bl	802410c <_ZNSt5dequeIjSaIjEE9push_backERKj>
 8023b1a:	bf00      	nop
 8023b1c:	3708      	adds	r7, #8
 8023b1e:	46bd      	mov	sp, r7
 8023b20:	bd80      	pop	{r7, pc}

08023b22 <_ZNKSt5queueIjSt5dequeIjSaIjEEE5frontEv>:
      front() const
 8023b22:	b580      	push	{r7, lr}
 8023b24:	b082      	sub	sp, #8
 8023b26:	af00      	add	r7, sp, #0
 8023b28:	6078      	str	r0, [r7, #4]
	return c.front();
 8023b2a:	687b      	ldr	r3, [r7, #4]
 8023b2c:	4618      	mov	r0, r3
 8023b2e:	f000 fb0e 	bl	802414e <_ZNKSt5dequeIjSaIjEE5frontEv>
 8023b32:	4603      	mov	r3, r0
      }
 8023b34:	4618      	mov	r0, r3
 8023b36:	3708      	adds	r7, #8
 8023b38:	46bd      	mov	sp, r7
 8023b3a:	bd80      	pop	{r7, pc}

08023b3c <_ZNKSt5queueIjSt5dequeIjSaIjEEE5emptyEv>:
      empty() const
 8023b3c:	b580      	push	{r7, lr}
 8023b3e:	b082      	sub	sp, #8
 8023b40:	af00      	add	r7, sp, #0
 8023b42:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	4618      	mov	r0, r3
 8023b48:	f000 fb15 	bl	8024176 <_ZNKSt5dequeIjSaIjEE5emptyEv>
 8023b4c:	4603      	mov	r3, r0
 8023b4e:	4618      	mov	r0, r3
 8023b50:	3708      	adds	r7, #8
 8023b52:	46bd      	mov	sp, r7
 8023b54:	bd80      	pop	{r7, pc}

08023b56 <_ZNSt5queueIjSt5dequeIjSaIjEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8023b56:	b580      	push	{r7, lr}
 8023b58:	b082      	sub	sp, #8
 8023b5a:	af00      	add	r7, sp, #0
 8023b5c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	4618      	mov	r0, r3
 8023b62:	f000 fb1a 	bl	802419a <_ZNSt5dequeIjSaIjEE9pop_frontEv>
      }
 8023b66:	bf00      	nop
 8023b68:	3708      	adds	r7, #8
 8023b6a:	46bd      	mov	sp, r7
 8023b6c:	bd80      	pop	{r7, pc}

08023b6e <_ZNSt5arrayIhLj256EEixEj>:
      operator[](size_type __n) noexcept
 8023b6e:	b580      	push	{r7, lr}
 8023b70:	b082      	sub	sp, #8
 8023b72:	af00      	add	r7, sp, #0
 8023b74:	6078      	str	r0, [r7, #4]
 8023b76:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	6839      	ldr	r1, [r7, #0]
 8023b7c:	4618      	mov	r0, r3
 8023b7e:	f7ff fe03 	bl	8023788 <_ZNSt14__array_traitsIhLj256EE6_S_refERA256_Khj>
 8023b82:	4603      	mov	r3, r0
 8023b84:	4618      	mov	r0, r3
 8023b86:	3708      	adds	r7, #8
 8023b88:	46bd      	mov	sp, r7
 8023b8a:	bd80      	pop	{r7, pc}

08023b8c <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 8023b8c:	b580      	push	{r7, lr}
 8023b8e:	b086      	sub	sp, #24
 8023b90:	af00      	add	r7, sp, #0
 8023b92:	6078      	str	r0, [r7, #4]
	return *begin();
 8023b94:	f107 0308 	add.w	r3, r7, #8
 8023b98:	6879      	ldr	r1, [r7, #4]
 8023b9a:	4618      	mov	r0, r3
 8023b9c:	f000 fb20 	bl	80241e0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023ba0:	f107 0308 	add.w	r3, r7, #8
 8023ba4:	4618      	mov	r0, r3
 8023ba6:	f000 fb2a 	bl	80241fe <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>
 8023baa:	4603      	mov	r3, r0
      }
 8023bac:	4618      	mov	r0, r3
 8023bae:	3718      	adds	r7, #24
 8023bb0:	46bd      	mov	sp, r7
 8023bb2:	bd80      	pop	{r7, pc}

08023bb4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8023bb4:	b580      	push	{r7, lr}
 8023bb6:	b082      	sub	sp, #8
 8023bb8:	af00      	add	r7, sp, #0
 8023bba:	6078      	str	r0, [r7, #4]
 8023bbc:	6878      	ldr	r0, [r7, #4]
 8023bbe:	f000 fb3a 	bl	8024236 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	4618      	mov	r0, r3
 8023bc6:	3708      	adds	r7, #8
 8023bc8:	46bd      	mov	sp, r7
 8023bca:	bd80      	pop	{r7, pc}

08023bcc <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EEC1Ev>:
      _Deque_base()
 8023bcc:	b580      	push	{r7, lr}
 8023bce:	b082      	sub	sp, #8
 8023bd0:	af00      	add	r7, sp, #0
 8023bd2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8023bd4:	687b      	ldr	r3, [r7, #4]
 8023bd6:	4618      	mov	r0, r3
 8023bd8:	f000 fb1d 	bl	8024216 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8023bdc:	2100      	movs	r1, #0
 8023bde:	6878      	ldr	r0, [r7, #4]
 8023be0:	f000 fb35 	bl	802424e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	4618      	mov	r0, r3
 8023be8:	3708      	adds	r7, #8
 8023bea:	46bd      	mov	sp, r7
 8023bec:	bd80      	pop	{r7, pc}

08023bee <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8023bee:	b580      	push	{r7, lr}
 8023bf0:	b082      	sub	sp, #8
 8023bf2:	af00      	add	r7, sp, #0
 8023bf4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8023bf6:	687b      	ldr	r3, [r7, #4]
 8023bf8:	681b      	ldr	r3, [r3, #0]
 8023bfa:	2b00      	cmp	r3, #0
 8023bfc:	d010      	beq.n	8023c20 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023bfe:	687b      	ldr	r3, [r7, #4]
 8023c00:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8023c02:	687b      	ldr	r3, [r7, #4]
 8023c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8023c06:	3304      	adds	r3, #4
 8023c08:	461a      	mov	r2, r3
 8023c0a:	6878      	ldr	r0, [r7, #4]
 8023c0c:	f000 fb85 	bl	802431a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	6819      	ldr	r1, [r3, #0]
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	685b      	ldr	r3, [r3, #4]
 8023c18:	461a      	mov	r2, r3
 8023c1a:	6878      	ldr	r0, [r7, #4]
 8023c1c:	f000 fb97 	bl	802434e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	4618      	mov	r0, r3
 8023c24:	f7ff ffc6 	bl	8023bb4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implD1Ev>
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	4618      	mov	r0, r3
 8023c2c:	3708      	adds	r7, #8
 8023c2e:	46bd      	mov	sp, r7
 8023c30:	bd80      	pop	{r7, pc}

08023c32 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>:
      ~deque()
 8023c32:	b580      	push	{r7, lr}
 8023c34:	b08a      	sub	sp, #40	; 0x28
 8023c36:	af00      	add	r7, sp, #0
 8023c38:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023c3a:	f107 0308 	add.w	r3, r7, #8
 8023c3e:	6879      	ldr	r1, [r7, #4]
 8023c40:	4618      	mov	r0, r3
 8023c42:	f000 fba0 	bl	8024386 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023c46:	f107 0318 	add.w	r3, r7, #24
 8023c4a:	6879      	ldr	r1, [r7, #4]
 8023c4c:	4618      	mov	r0, r3
 8023c4e:	f000 fba9 	bl	80243a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	4618      	mov	r0, r3
 8023c56:	f000 f9ed 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8023c5a:	4603      	mov	r3, r0
 8023c5c:	f107 0218 	add.w	r2, r7, #24
 8023c60:	f107 0108 	add.w	r1, r7, #8
 8023c64:	6878      	ldr	r0, [r7, #4]
 8023c66:	f000 fbc8 	bl	80243fa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8023c6a:	687b      	ldr	r3, [r7, #4]
 8023c6c:	4618      	mov	r0, r3
 8023c6e:	f7ff ffbe 	bl	8023bee <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EED1Ev>
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	4618      	mov	r0, r3
 8023c76:	3728      	adds	r7, #40	; 0x28
 8023c78:	46bd      	mov	sp, r7
 8023c7a:	bd80      	pop	{r7, pc}

08023c7c <_ZNSt5dequeIjSaIjEEC1Ev>:
      deque() = default;
 8023c7c:	b580      	push	{r7, lr}
 8023c7e:	b082      	sub	sp, #8
 8023c80:	af00      	add	r7, sp, #0
 8023c82:	6078      	str	r0, [r7, #4]
 8023c84:	687b      	ldr	r3, [r7, #4]
 8023c86:	4618      	mov	r0, r3
 8023c88:	f000 fbd0 	bl	802442c <_ZNSt11_Deque_baseIjSaIjEEC1Ev>
 8023c8c:	687b      	ldr	r3, [r7, #4]
 8023c8e:	4618      	mov	r0, r3
 8023c90:	3708      	adds	r7, #8
 8023c92:	46bd      	mov	sp, r7
 8023c94:	bd80      	pop	{r7, pc}

08023c96 <_ZNSt5queueIjSt5dequeIjSaIjEEEC1IS2_vEEv>:
	queue()
 8023c96:	b580      	push	{r7, lr}
 8023c98:	b082      	sub	sp, #8
 8023c9a:	af00      	add	r7, sp, #0
 8023c9c:	6078      	str	r0, [r7, #4]
	: c() { }
 8023c9e:	687b      	ldr	r3, [r7, #4]
 8023ca0:	4618      	mov	r0, r3
 8023ca2:	2328      	movs	r3, #40	; 0x28
 8023ca4:	461a      	mov	r2, r3
 8023ca6:	2100      	movs	r1, #0
 8023ca8:	f018 f8fa 	bl	803bea0 <memset>
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	4618      	mov	r0, r3
 8023cb0:	f7ff ffe4 	bl	8023c7c <_ZNSt5dequeIjSaIjEEC1Ev>
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	4618      	mov	r0, r3
 8023cb8:	3708      	adds	r7, #8
 8023cba:	46bd      	mov	sp, r7
 8023cbc:	bd80      	pop	{r7, pc}

08023cbe <_ZNSt5dequeIjSaIjEED1Ev>:
      ~deque()
 8023cbe:	b580      	push	{r7, lr}
 8023cc0:	b08a      	sub	sp, #40	; 0x28
 8023cc2:	af00      	add	r7, sp, #0
 8023cc4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8023cc6:	f107 0308 	add.w	r3, r7, #8
 8023cca:	6879      	ldr	r1, [r7, #4]
 8023ccc:	4618      	mov	r0, r3
 8023cce:	f000 fbe0 	bl	8024492 <_ZNSt5dequeIjSaIjEE5beginEv>
 8023cd2:	f107 0318 	add.w	r3, r7, #24
 8023cd6:	6879      	ldr	r1, [r7, #4]
 8023cd8:	4618      	mov	r0, r3
 8023cda:	f000 fbe9 	bl	80244b0 <_ZNSt5dequeIjSaIjEE3endEv>
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	4618      	mov	r0, r3
 8023ce2:	f000 fbf4 	bl	80244ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8023ce6:	4603      	mov	r3, r0
 8023ce8:	f107 0218 	add.w	r2, r7, #24
 8023cec:	f107 0108 	add.w	r1, r7, #8
 8023cf0:	6878      	ldr	r0, [r7, #4]
 8023cf2:	f000 fc13 	bl	802451c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
 8023cf6:	687b      	ldr	r3, [r7, #4]
 8023cf8:	4618      	mov	r0, r3
 8023cfa:	f000 fba8 	bl	802444e <_ZNSt11_Deque_baseIjSaIjEED1Ev>
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	4618      	mov	r0, r3
 8023d02:	3728      	adds	r7, #40	; 0x28
 8023d04:	46bd      	mov	sp, r7
 8023d06:	bd80      	pop	{r7, pc}

08023d08 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EEaSEOS3_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023d08:	b590      	push	{r4, r7, lr}
 8023d0a:	b083      	sub	sp, #12
 8023d0c:	af00      	add	r7, sp, #0
 8023d0e:	6078      	str	r0, [r7, #4]
 8023d10:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023d12:	6838      	ldr	r0, [r7, #0]
 8023d14:	f000 fc0f 	bl	8024536 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8023d18:	4603      	mov	r3, r0
 8023d1a:	4622      	mov	r2, r4
 8023d1c:	4619      	mov	r1, r3
 8023d1e:	6878      	ldr	r0, [r7, #4]
 8023d20:	f000 fc14 	bl	802454c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>
	return *this;
 8023d24:	687b      	ldr	r3, [r7, #4]
      }
 8023d26:	4618      	mov	r0, r3
 8023d28:	370c      	adds	r7, #12
 8023d2a:	46bd      	mov	sp, r7
 8023d2c:	bd90      	pop	{r4, r7, pc}

08023d2e <_ZNSt5dequeIjSaIjEEaSEOS1_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8023d2e:	b590      	push	{r4, r7, lr}
 8023d30:	b083      	sub	sp, #12
 8023d32:	af00      	add	r7, sp, #0
 8023d34:	6078      	str	r0, [r7, #4]
 8023d36:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8023d38:	6838      	ldr	r0, [r7, #0]
 8023d3a:	f000 fc28 	bl	802458e <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>
 8023d3e:	4603      	mov	r3, r0
 8023d40:	4622      	mov	r2, r4
 8023d42:	4619      	mov	r1, r3
 8023d44:	6878      	ldr	r0, [r7, #4]
 8023d46:	f000 fc2d 	bl	80245a4 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>
	return *this;
 8023d4a:	687b      	ldr	r3, [r7, #4]
      }
 8023d4c:	4618      	mov	r0, r3
 8023d4e:	370c      	adds	r7, #12
 8023d50:	46bd      	mov	sp, r7
 8023d52:	bd90      	pop	{r4, r7, pc}

08023d54 <_ZNSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023d54:	b580      	push	{r7, lr}
 8023d56:	b082      	sub	sp, #8
 8023d58:	af00      	add	r7, sp, #0
 8023d5a:	6078      	str	r0, [r7, #4]
 8023d5c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	6839      	ldr	r1, [r7, #0]
 8023d62:	4618      	mov	r0, r3
 8023d64:	f000 fc3f 	bl	80245e6 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8023d68:	4603      	mov	r3, r0
 8023d6a:	4618      	mov	r0, r3
 8023d6c:	3708      	adds	r7, #8
 8023d6e:	46bd      	mov	sp, r7
 8023d70:	bd80      	pop	{r7, pc}

08023d72 <_ZNKSt5arrayI8ResponceLj10EEixEj>:
      operator[](size_type __n) const noexcept
 8023d72:	b580      	push	{r7, lr}
 8023d74:	b082      	sub	sp, #8
 8023d76:	af00      	add	r7, sp, #0
 8023d78:	6078      	str	r0, [r7, #4]
 8023d7a:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023d7c:	687b      	ldr	r3, [r7, #4]
 8023d7e:	6839      	ldr	r1, [r7, #0]
 8023d80:	4618      	mov	r0, r3
 8023d82:	f000 fc30 	bl	80245e6 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>
 8023d86:	4603      	mov	r3, r0
 8023d88:	4618      	mov	r0, r3
 8023d8a:	3708      	adds	r7, #8
 8023d8c:	46bd      	mov	sp, r7
 8023d8e:	bd80      	pop	{r7, pc}

08023d90 <_ZNSt14__array_traitsIhLj256EE6_S_ptrERA256_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8023d90:	b480      	push	{r7}
 8023d92:	b083      	sub	sp, #12
 8023d94:	af00      	add	r7, sp, #0
 8023d96:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8023d98:	687b      	ldr	r3, [r7, #4]
 8023d9a:	4618      	mov	r0, r3
 8023d9c:	370c      	adds	r7, #12
 8023d9e:	46bd      	mov	sp, r7
 8023da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023da4:	4770      	bx	lr

08023da6 <_ZNKSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) const noexcept
 8023da6:	b580      	push	{r7, lr}
 8023da8:	b082      	sub	sp, #8
 8023daa:	af00      	add	r7, sp, #0
 8023dac:	6078      	str	r0, [r7, #4]
 8023dae:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023db0:	687b      	ldr	r3, [r7, #4]
 8023db2:	6839      	ldr	r1, [r7, #0]
 8023db4:	4618      	mov	r0, r3
 8023db6:	f000 fc28 	bl	802460a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 8023dba:	4603      	mov	r3, r0
 8023dbc:	4618      	mov	r0, r3
 8023dbe:	3708      	adds	r7, #8
 8023dc0:	46bd      	mov	sp, r7
 8023dc2:	bd80      	pop	{r7, pc}

08023dc4 <_ZNSt5arrayI7RequestLj500EEixEj>:
      operator[](size_type __n) noexcept
 8023dc4:	b580      	push	{r7, lr}
 8023dc6:	b082      	sub	sp, #8
 8023dc8:	af00      	add	r7, sp, #0
 8023dca:	6078      	str	r0, [r7, #4]
 8023dcc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023dce:	687b      	ldr	r3, [r7, #4]
 8023dd0:	6839      	ldr	r1, [r7, #0]
 8023dd2:	4618      	mov	r0, r3
 8023dd4:	f000 fc19 	bl	802460a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>
 8023dd8:	4603      	mov	r3, r0
 8023dda:	4618      	mov	r0, r3
 8023ddc:	3708      	adds	r7, #8
 8023dde:	46bd      	mov	sp, r7
 8023de0:	bd80      	pop	{r7, pc}

08023de2 <_ZNKSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) const noexcept
 8023de2:	b580      	push	{r7, lr}
 8023de4:	b082      	sub	sp, #8
 8023de6:	af00      	add	r7, sp, #0
 8023de8:	6078      	str	r0, [r7, #4]
 8023dea:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023dec:	687b      	ldr	r3, [r7, #4]
 8023dee:	6839      	ldr	r1, [r7, #0]
 8023df0:	4618      	mov	r0, r3
 8023df2:	f000 fc1c 	bl	802462e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8023df6:	4603      	mov	r3, r0
 8023df8:	4618      	mov	r0, r3
 8023dfa:	3708      	adds	r7, #8
 8023dfc:	46bd      	mov	sp, r7
 8023dfe:	bd80      	pop	{r7, pc}

08023e00 <_ZNSt5arrayI7RequestLj10EEixEj>:
      operator[](size_type __n) noexcept
 8023e00:	b580      	push	{r7, lr}
 8023e02:	b082      	sub	sp, #8
 8023e04:	af00      	add	r7, sp, #0
 8023e06:	6078      	str	r0, [r7, #4]
 8023e08:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 8023e0a:	687b      	ldr	r3, [r7, #4]
 8023e0c:	6839      	ldr	r1, [r7, #0]
 8023e0e:	4618      	mov	r0, r3
 8023e10:	f000 fc0d 	bl	802462e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>
 8023e14:	4603      	mov	r3, r0
 8023e16:	4618      	mov	r0, r3
 8023e18:	3708      	adds	r7, #8
 8023e1a:	46bd      	mov	sp, r7
 8023e1c:	bd80      	pop	{r7, pc}

08023e1e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8023e1e:	b480      	push	{r7}
 8023e20:	b083      	sub	sp, #12
 8023e22:	af00      	add	r7, sp, #0
 8023e24:	6078      	str	r0, [r7, #4]
 8023e26:	687b      	ldr	r3, [r7, #4]
 8023e28:	681b      	ldr	r3, [r3, #0]
 8023e2a:	4618      	mov	r0, r3
 8023e2c:	370c      	adds	r7, #12
 8023e2e:	46bd      	mov	sp, r7
 8023e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e34:	4770      	bx	lr

08023e36 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8023e36:	b590      	push	{r4, r7, lr}
 8023e38:	b083      	sub	sp, #12
 8023e3a:	af00      	add	r7, sp, #0
 8023e3c:	6078      	str	r0, [r7, #4]
 8023e3e:	6878      	ldr	r0, [r7, #4]
 8023e40:	f7ff ffed 	bl	8023e1e <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE5beginEv>
 8023e44:	4604      	mov	r4, r0
 8023e46:	6878      	ldr	r0, [r7, #4]
 8023e48:	f000 fc03 	bl	8024652 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>
 8023e4c:	4602      	mov	r2, r0
 8023e4e:	4613      	mov	r3, r2
 8023e50:	009b      	lsls	r3, r3, #2
 8023e52:	4413      	add	r3, r2
 8023e54:	009b      	lsls	r3, r3, #2
 8023e56:	4423      	add	r3, r4
 8023e58:	4618      	mov	r0, r3
 8023e5a:	370c      	adds	r7, #12
 8023e5c:	46bd      	mov	sp, r7
 8023e5e:	bd90      	pop	{r4, r7, pc}

08023e60 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag>:
		      std::input_iterator_tag);

      // called by the second assign_dispatch above
      template<typename _ForwardIterator>
	void
	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 8023e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e62:	b09f      	sub	sp, #124	; 0x7c
 8023e64:	af02      	add	r7, sp, #8
 8023e66:	60f8      	str	r0, [r7, #12]
 8023e68:	60b9      	str	r1, [r7, #8]
 8023e6a:	607a      	str	r2, [r7, #4]
 8023e6c:	703b      	strb	r3, [r7, #0]
		      std::forward_iterator_tag)
	{
	  const size_type __len = std::distance(__first, __last);
 8023e6e:	68bb      	ldr	r3, [r7, #8]
 8023e70:	6879      	ldr	r1, [r7, #4]
 8023e72:	4618      	mov	r0, r3
 8023e74:	f000 fbf9 	bl	802466a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8023e78:	4603      	mov	r3, r0
 8023e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  if (__len > size())
 8023e7c:	68f8      	ldr	r0, [r7, #12]
 8023e7e:	f7ff fdea 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023e82:	4602      	mov	r2, r0
 8023e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8023e86:	4293      	cmp	r3, r2
 8023e88:	bf8c      	ite	hi
 8023e8a:	2301      	movhi	r3, #1
 8023e8c:	2300      	movls	r3, #0
 8023e8e:	b2db      	uxtb	r3, r3
 8023e90:	2b00      	cmp	r3, #0
 8023e92:	d031      	beq.n	8023ef8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0x98>
	    {
	      _ForwardIterator __mid = __first;
 8023e94:	68bb      	ldr	r3, [r7, #8]
 8023e96:	617b      	str	r3, [r7, #20]
	      std::advance(__mid, size());
 8023e98:	68f8      	ldr	r0, [r7, #12]
 8023e9a:	f7ff fddc 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023e9e:	4602      	mov	r2, r0
 8023ea0:	f107 0314 	add.w	r3, r7, #20
 8023ea4:	4611      	mov	r1, r2
 8023ea6:	4618      	mov	r0, r3
 8023ea8:	f000 fbf3 	bl	8024692 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>
	      std::copy(__first, __mid, begin());
 8023eac:	68bc      	ldr	r4, [r7, #8]
 8023eae:	697d      	ldr	r5, [r7, #20]
 8023eb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023eb4:	68f9      	ldr	r1, [r7, #12]
 8023eb6:	4618      	mov	r0, r3
 8023eb8:	f000 fa65 	bl	8024386 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023ebc:	f107 0018 	add.w	r0, r7, #24
 8023ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8023ec4:	462a      	mov	r2, r5
 8023ec6:	4621      	mov	r1, r4
 8023ec8:	f000 fbf6 	bl	80246b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8023ed0:	68f9      	ldr	r1, [r7, #12]
 8023ed2:	4618      	mov	r0, r3
 8023ed4:	f000 fa66 	bl	80243a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 8023ed8:	697c      	ldr	r4, [r7, #20]
				  std::__iterator_category(__first));
 8023eda:	f107 0308 	add.w	r3, r7, #8
 8023ede:	4618      	mov	r0, r3
 8023ee0:	f000 fc0a 	bl	80246f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
	      _M_range_insert_aux(end(), __mid, __last,
 8023ee4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8023ee8:	f88d 6000 	strb.w	r6, [sp]
 8023eec:	687b      	ldr	r3, [r7, #4]
 8023eee:	4622      	mov	r2, r4
 8023ef0:	68f8      	ldr	r0, [r7, #12]
 8023ef2:	f000 fc0c 	bl	802470e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>
	    }
	  else
	    _M_erase_at_end(std::copy(__first, __last, begin()));
	}
 8023ef6:	e014      	b.n	8023f22 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_assign_auxIPKS1_EEvT_S7_St20forward_iterator_tag+0xc2>
	    _M_erase_at_end(std::copy(__first, __last, begin()));
 8023ef8:	68bc      	ldr	r4, [r7, #8]
 8023efa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023efe:	68f9      	ldr	r1, [r7, #12]
 8023f00:	4618      	mov	r0, r3
 8023f02:	f000 fa40 	bl	8024386 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8023f06:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8023f0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023f0e:	687a      	ldr	r2, [r7, #4]
 8023f10:	4621      	mov	r1, r4
 8023f12:	f000 fbd1 	bl	80246b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 8023f16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8023f1a:	4619      	mov	r1, r3
 8023f1c:	68f8      	ldr	r0, [r7, #12]
 8023f1e:	f000 fc73 	bl	8024808 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
	}
 8023f22:	bf00      	nop
 8023f24:	3774      	adds	r7, #116	; 0x74
 8023f26:	46bd      	mov	sp, r7
 8023f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023f2a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8023f2a:	b580      	push	{r7, lr}
 8023f2c:	b084      	sub	sp, #16
 8023f2e:	af00      	add	r7, sp, #0
 8023f30:	60f8      	str	r0, [r7, #12]
 8023f32:	60b9      	str	r1, [r7, #8]
 8023f34:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8023f36:	6878      	ldr	r0, [r7, #4]
 8023f38:	f000 fc99 	bl	802486e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023f3c:	4603      	mov	r3, r0
 8023f3e:	461a      	mov	r2, r3
 8023f40:	68b9      	ldr	r1, [r7, #8]
 8023f42:	68f8      	ldr	r0, [r7, #12]
 8023f44:	f000 fc9e 	bl	8024884 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8023f48:	bf00      	nop
 8023f4a:	3710      	adds	r7, #16
 8023f4c:	46bd      	mov	sp, r7
 8023f4e:	bd80      	pop	{r7, pc}

08023f50 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8023f50:	b5b0      	push	{r4, r5, r7, lr}
 8023f52:	b082      	sub	sp, #8
 8023f54:	af00      	add	r7, sp, #0
 8023f56:	6078      	str	r0, [r7, #4]
 8023f58:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8023f5a:	6878      	ldr	r0, [r7, #4]
 8023f5c:	f7ff fd7b 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8023f60:	4604      	mov	r4, r0
 8023f62:	6878      	ldr	r0, [r7, #4]
 8023f64:	f000 fca7 	bl	80248b6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8023f68:	4603      	mov	r3, r0
 8023f6a:	429c      	cmp	r4, r3
 8023f6c:	bf0c      	ite	eq
 8023f6e:	2301      	moveq	r3, #1
 8023f70:	2300      	movne	r3, #0
 8023f72:	b2db      	uxtb	r3, r3
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	d002      	beq.n	8023f7e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8023f78:	4817      	ldr	r0, [pc, #92]	; (8023fd8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_push_front_auxIJRKS1_EEEvDpOT_+0x88>)
 8023f7a:	f017 fee9 	bl	803bd50 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 8023f7e:	2101      	movs	r1, #1
 8023f80:	6878      	ldr	r0, [r7, #4]
 8023f82:	f000 fca9 	bl	80248d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8023f86:	687a      	ldr	r2, [r7, #4]
 8023f88:	687b      	ldr	r3, [r7, #4]
 8023f8a:	695b      	ldr	r3, [r3, #20]
 8023f8c:	1f1c      	subs	r4, r3, #4
 8023f8e:	4610      	mov	r0, r2
 8023f90:	f000 fcba 	bl	8024908 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8023f94:	4603      	mov	r3, r0
 8023f96:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	f103 0208 	add.w	r2, r3, #8
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	695b      	ldr	r3, [r3, #20]
 8023fa2:	3b04      	subs	r3, #4
 8023fa4:	4619      	mov	r1, r3
 8023fa6:	4610      	mov	r0, r2
 8023fa8:	f000 fcc0 	bl	802492c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8023fac:	687b      	ldr	r3, [r7, #4]
 8023fae:	691b      	ldr	r3, [r3, #16]
 8023fb0:	f1a3 0214 	sub.w	r2, r3, #20
 8023fb4:	687b      	ldr	r3, [r7, #4]
 8023fb6:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8023fb8:	687c      	ldr	r4, [r7, #4]
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	689d      	ldr	r5, [r3, #8]
 8023fbe:	6838      	ldr	r0, [r7, #0]
 8023fc0:	f000 fc55 	bl	802486e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8023fc4:	4603      	mov	r3, r0
 8023fc6:	461a      	mov	r2, r3
 8023fc8:	4629      	mov	r1, r5
 8023fca:	4620      	mov	r0, r4
 8023fcc:	f7ff ffad 	bl	8023f2a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 8023fd0:	bf00      	nop
 8023fd2:	3708      	adds	r7, #8
 8023fd4:	46bd      	mov	sp, r7
 8023fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8023fd8:	0803dde8 	.word	0x0803dde8

08023fdc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023fdc:	b580      	push	{r7, lr}
 8023fde:	b082      	sub	sp, #8
 8023fe0:	af00      	add	r7, sp, #0
 8023fe2:	6078      	str	r0, [r7, #4]
 8023fe4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8023fe6:	f000 fcd0 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8023fea:	4603      	mov	r3, r0
 8023fec:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8023fee:	687b      	ldr	r3, [r7, #4]
 8023ff0:	68da      	ldr	r2, [r3, #12]
 8023ff2:	683b      	ldr	r3, [r7, #0]
 8023ff4:	68db      	ldr	r3, [r3, #12]
 8023ff6:	1ad3      	subs	r3, r2, r3
 8023ff8:	109b      	asrs	r3, r3, #2
 8023ffa:	3b01      	subs	r3, #1
 8023ffc:	fb01 f303 	mul.w	r3, r1, r3
 8024000:	687a      	ldr	r2, [r7, #4]
 8024002:	6811      	ldr	r1, [r2, #0]
 8024004:	687a      	ldr	r2, [r7, #4]
 8024006:	6852      	ldr	r2, [r2, #4]
 8024008:	1a8a      	subs	r2, r1, r2
 802400a:	1092      	asrs	r2, r2, #2
 802400c:	4908      	ldr	r1, [pc, #32]	; (8024030 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 802400e:	fb01 f202 	mul.w	r2, r1, r2
 8024012:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8024014:	683a      	ldr	r2, [r7, #0]
 8024016:	6891      	ldr	r1, [r2, #8]
 8024018:	683a      	ldr	r2, [r7, #0]
 802401a:	6812      	ldr	r2, [r2, #0]
 802401c:	1a8a      	subs	r2, r1, r2
 802401e:	1092      	asrs	r2, r2, #2
 8024020:	4903      	ldr	r1, [pc, #12]	; (8024030 <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_+0x54>)
 8024022:	fb01 f202 	mul.w	r2, r1, r2
 8024026:	4413      	add	r3, r2
      }
 8024028:	4618      	mov	r0, r3
 802402a:	3708      	adds	r7, #8
 802402c:	46bd      	mov	sp, r7
 802402e:	bd80      	pop	{r7, pc}
 8024030:	cccccccd 	.word	0xcccccccd

08024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8024034:	b480      	push	{r7}
 8024036:	b083      	sub	sp, #12
 8024038:	af00      	add	r7, sp, #0
 802403a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802403c:	687b      	ldr	r3, [r7, #4]
 802403e:	4618      	mov	r0, r3
 8024040:	370c      	adds	r7, #12
 8024042:	46bd      	mov	sp, r7
 8024044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024048:	4770      	bx	lr

0802404a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 802404a:	b580      	push	{r7, lr}
 802404c:	b082      	sub	sp, #8
 802404e:	af00      	add	r7, sp, #0
 8024050:	6078      	str	r0, [r7, #4]
 8024052:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8024054:	6839      	ldr	r1, [r7, #0]
 8024056:	6878      	ldr	r0, [r7, #4]
 8024058:	f000 fc9f 	bl	802499a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 802405c:	bf00      	nop
 802405e:	3708      	adds	r7, #8
 8024060:	46bd      	mov	sp, r7
 8024062:	bd80      	pop	{r7, pc}

08024064 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_pop_back_auxEv>:

  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8024064:	b580      	push	{r7, lr}
 8024066:	b082      	sub	sp, #8
 8024068:	af00      	add	r7, sp, #0
 802406a:	6078      	str	r0, [r7, #4]
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
 802406c:	687a      	ldr	r2, [r7, #4]
 802406e:	687b      	ldr	r3, [r7, #4]
 8024070:	69db      	ldr	r3, [r3, #28]
 8024072:	4619      	mov	r1, r3
 8024074:	4610      	mov	r0, r2
 8024076:	f000 fc75 	bl	8024964 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 802407a:	687b      	ldr	r3, [r7, #4]
 802407c:	f103 0218 	add.w	r2, r3, #24
 8024080:	687b      	ldr	r3, [r7, #4]
 8024082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024084:	3b04      	subs	r3, #4
 8024086:	4619      	mov	r1, r3
 8024088:	4610      	mov	r0, r2
 802408a:	f000 fc4f 	bl	802492c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	6a1b      	ldr	r3, [r3, #32]
 8024092:	f1a3 0214 	sub.w	r2, r3, #20
 8024096:	687b      	ldr	r3, [r7, #4]
 8024098:	619a      	str	r2, [r3, #24]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 802409a:	687b      	ldr	r3, [r7, #4]
 802409c:	4618      	mov	r0, r3
 802409e:	f7ff ffc9 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80240a2:	4602      	mov	r2, r0
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	699b      	ldr	r3, [r3, #24]
 80240a8:	4619      	mov	r1, r3
 80240aa:	4610      	mov	r0, r2
 80240ac:	f7ff ffcd 	bl	802404a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE7destroyIS1_EEvRS2_PT_>
			     this->_M_impl._M_finish._M_cur);
    }
 80240b0:	bf00      	nop
 80240b2:	3708      	adds	r7, #8
 80240b4:	46bd      	mov	sp, r7
 80240b6:	bd80      	pop	{r7, pc}

080240b8 <_ZSteqRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80240b8:	b480      	push	{r7}
 80240ba:	b083      	sub	sp, #12
 80240bc:	af00      	add	r7, sp, #0
 80240be:	6078      	str	r0, [r7, #4]
 80240c0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	681a      	ldr	r2, [r3, #0]
 80240c6:	683b      	ldr	r3, [r7, #0]
 80240c8:	681b      	ldr	r3, [r3, #0]
 80240ca:	429a      	cmp	r2, r3
 80240cc:	bf0c      	ite	eq
 80240ce:	2301      	moveq	r3, #1
 80240d0:	2300      	movne	r3, #0
 80240d2:	b2db      	uxtb	r3, r3
 80240d4:	4618      	mov	r0, r3
 80240d6:	370c      	adds	r7, #12
 80240d8:	46bd      	mov	sp, r7
 80240da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240de:	4770      	bx	lr

080240e0 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 80240e0:	b580      	push	{r7, lr}
 80240e2:	b086      	sub	sp, #24
 80240e4:	af00      	add	r7, sp, #0
 80240e6:	6078      	str	r0, [r7, #4]
 80240e8:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 80240ea:	f107 0308 	add.w	r3, r7, #8
 80240ee:	683a      	ldr	r2, [r7, #0]
 80240f0:	6879      	ldr	r1, [r7, #4]
 80240f2:	4618      	mov	r0, r3
 80240f4:	f000 fc5c 	bl	80249b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80240f8:	f107 0308 	add.w	r3, r7, #8
 80240fc:	4618      	mov	r0, r3
 80240fe:	f000 fc6a 	bl	80249d6 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>
 8024102:	4603      	mov	r3, r0
 8024104:	4618      	mov	r0, r3
 8024106:	3718      	adds	r7, #24
 8024108:	46bd      	mov	sp, r7
 802410a:	bd80      	pop	{r7, pc}

0802410c <_ZNSt5dequeIjSaIjEE9push_backERKj>:
      push_back(const value_type& __x)
 802410c:	b580      	push	{r7, lr}
 802410e:	b082      	sub	sp, #8
 8024110:	af00      	add	r7, sp, #0
 8024112:	6078      	str	r0, [r7, #4]
 8024114:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8024116:	687b      	ldr	r3, [r7, #4]
 8024118:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 802411a:	687b      	ldr	r3, [r7, #4]
 802411c:	6a1b      	ldr	r3, [r3, #32]
 802411e:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8024120:	429a      	cmp	r2, r3
 8024122:	d00c      	beq.n	802413e <_ZNSt5dequeIjSaIjEE9push_backERKj+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8024124:	6878      	ldr	r0, [r7, #4]
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	699b      	ldr	r3, [r3, #24]
 802412a:	683a      	ldr	r2, [r7, #0]
 802412c:	4619      	mov	r1, r3
 802412e:	f000 fc5e 	bl	80249ee <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8024132:	687b      	ldr	r3, [r7, #4]
 8024134:	699b      	ldr	r3, [r3, #24]
 8024136:	1d1a      	adds	r2, r3, #4
 8024138:	687b      	ldr	r3, [r7, #4]
 802413a:	619a      	str	r2, [r3, #24]
      }
 802413c:	e003      	b.n	8024146 <_ZNSt5dequeIjSaIjEE9push_backERKj+0x3a>
	  _M_push_back_aux(__x);
 802413e:	6839      	ldr	r1, [r7, #0]
 8024140:	6878      	ldr	r0, [r7, #4]
 8024142:	f000 fc67 	bl	8024a14 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>
      }
 8024146:	bf00      	nop
 8024148:	3708      	adds	r7, #8
 802414a:	46bd      	mov	sp, r7
 802414c:	bd80      	pop	{r7, pc}

0802414e <_ZNKSt5dequeIjSaIjEE5frontEv>:
      front() const _GLIBCXX_NOEXCEPT
 802414e:	b580      	push	{r7, lr}
 8024150:	b086      	sub	sp, #24
 8024152:	af00      	add	r7, sp, #0
 8024154:	6078      	str	r0, [r7, #4]
	return *begin();
 8024156:	f107 0308 	add.w	r3, r7, #8
 802415a:	6879      	ldr	r1, [r7, #4]
 802415c:	4618      	mov	r0, r3
 802415e:	f000 fc9d 	bl	8024a9c <_ZNKSt5dequeIjSaIjEE5beginEv>
 8024162:	f107 0308 	add.w	r3, r7, #8
 8024166:	4618      	mov	r0, r3
 8024168:	f000 fca7 	bl	8024aba <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>
 802416c:	4603      	mov	r3, r0
      }
 802416e:	4618      	mov	r0, r3
 8024170:	3718      	adds	r7, #24
 8024172:	46bd      	mov	sp, r7
 8024174:	bd80      	pop	{r7, pc}

08024176 <_ZNKSt5dequeIjSaIjEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8024176:	b580      	push	{r7, lr}
 8024178:	b082      	sub	sp, #8
 802417a:	af00      	add	r7, sp, #0
 802417c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 802417e:	687b      	ldr	r3, [r7, #4]
 8024180:	f103 0218 	add.w	r2, r3, #24
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	3308      	adds	r3, #8
 8024188:	4619      	mov	r1, r3
 802418a:	4610      	mov	r0, r2
 802418c:	f000 fca1 	bl	8024ad2 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>
 8024190:	4603      	mov	r3, r0
 8024192:	4618      	mov	r0, r3
 8024194:	3708      	adds	r7, #8
 8024196:	46bd      	mov	sp, r7
 8024198:	bd80      	pop	{r7, pc}

0802419a <_ZNSt5dequeIjSaIjEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 802419a:	b580      	push	{r7, lr}
 802419c:	b082      	sub	sp, #8
 802419e:	af00      	add	r7, sp, #0
 80241a0:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80241a2:	687b      	ldr	r3, [r7, #4]
 80241a4:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80241a6:	687b      	ldr	r3, [r7, #4]
 80241a8:	691b      	ldr	r3, [r3, #16]
 80241aa:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 80241ac:	429a      	cmp	r2, r3
 80241ae:	d010      	beq.n	80241d2 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80241b0:	687b      	ldr	r3, [r7, #4]
 80241b2:	4618      	mov	r0, r3
 80241b4:	f000 f98b 	bl	80244ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80241b8:	4602      	mov	r2, r0
 80241ba:	687b      	ldr	r3, [r7, #4]
 80241bc:	689b      	ldr	r3, [r3, #8]
 80241be:	4619      	mov	r1, r3
 80241c0:	4610      	mov	r0, r2
 80241c2:	f000 fc9a 	bl	8024afa <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 80241c6:	687b      	ldr	r3, [r7, #4]
 80241c8:	689b      	ldr	r3, [r3, #8]
 80241ca:	1d1a      	adds	r2, r3, #4
 80241cc:	687b      	ldr	r3, [r7, #4]
 80241ce:	609a      	str	r2, [r3, #8]
      }
 80241d0:	e002      	b.n	80241d8 <_ZNSt5dequeIjSaIjEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 80241d2:	6878      	ldr	r0, [r7, #4]
 80241d4:	f000 fc9e 	bl	8024b14 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>
      }
 80241d8:	bf00      	nop
 80241da:	3708      	adds	r7, #8
 80241dc:	46bd      	mov	sp, r7
 80241de:	bd80      	pop	{r7, pc}

080241e0 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80241e0:	b580      	push	{r7, lr}
 80241e2:	b082      	sub	sp, #8
 80241e4:	af00      	add	r7, sp, #0
 80241e6:	6078      	str	r0, [r7, #4]
 80241e8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80241ea:	683b      	ldr	r3, [r7, #0]
 80241ec:	3308      	adds	r3, #8
 80241ee:	4619      	mov	r1, r3
 80241f0:	6878      	ldr	r0, [r7, #4]
 80241f2:	f000 fcb7 	bl	8024b64 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>
 80241f6:	6878      	ldr	r0, [r7, #4]
 80241f8:	3708      	adds	r7, #8
 80241fa:	46bd      	mov	sp, r7
 80241fc:	bd80      	pop	{r7, pc}

080241fe <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80241fe:	b480      	push	{r7}
 8024200:	b083      	sub	sp, #12
 8024202:	af00      	add	r7, sp, #0
 8024204:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024206:	687b      	ldr	r3, [r7, #4]
 8024208:	681b      	ldr	r3, [r3, #0]
 802420a:	4618      	mov	r0, r3
 802420c:	370c      	adds	r7, #12
 802420e:	46bd      	mov	sp, r7
 8024210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024214:	4770      	bx	lr

08024216 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024216:	b580      	push	{r7, lr}
 8024218:	b082      	sub	sp, #8
 802421a:	af00      	add	r7, sp, #0
 802421c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 802421e:	6878      	ldr	r0, [r7, #4]
 8024220:	f000 fcbc 	bl	8024b9c <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	4618      	mov	r0, r3
 8024228:	f000 fcc4 	bl	8024bb4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 802422c:	687b      	ldr	r3, [r7, #4]
 802422e:	4618      	mov	r0, r3
 8024230:	3708      	adds	r7, #8
 8024232:	46bd      	mov	sp, r7
 8024234:	bd80      	pop	{r7, pc}

08024236 <_ZNSaIN10BHYWrapper8BHYFrameEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8024236:	b580      	push	{r7, lr}
 8024238:	b082      	sub	sp, #8
 802423a:	af00      	add	r7, sp, #0
 802423c:	6078      	str	r0, [r7, #4]
 802423e:	6878      	ldr	r0, [r7, #4]
 8024240:	f000 fcd1 	bl	8024be6 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	4618      	mov	r0, r3
 8024248:	3708      	adds	r7, #8
 802424a:	46bd      	mov	sp, r7
 802424c:	bd80      	pop	{r7, pc}

0802424e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 802424e:	b590      	push	{r4, r7, lr}
 8024250:	b089      	sub	sp, #36	; 0x24
 8024252:	af00      	add	r7, sp, #0
 8024254:	6078      	str	r0, [r7, #4]
 8024256:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024258:	2014      	movs	r0, #20
 802425a:	f7fc fe35 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 802425e:	4602      	mov	r2, r0
 8024260:	683b      	ldr	r3, [r7, #0]
 8024262:	fbb3 f3f2 	udiv	r3, r3, r2
 8024266:	3301      	adds	r3, #1
 8024268:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 802426a:	2308      	movs	r3, #8
 802426c:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 802426e:	69fb      	ldr	r3, [r7, #28]
 8024270:	3302      	adds	r3, #2
 8024272:	613b      	str	r3, [r7, #16]
 8024274:	f107 0210 	add.w	r2, r7, #16
 8024278:	f107 030c 	add.w	r3, r7, #12
 802427c:	4611      	mov	r1, r2
 802427e:	4618      	mov	r0, r3
 8024280:	f000 fcbc 	bl	8024bfc <_ZSt3maxIjERKT_S2_S2_>
 8024284:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024286:	681a      	ldr	r2, [r3, #0]
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 802428c:	687b      	ldr	r3, [r7, #4]
 802428e:	685b      	ldr	r3, [r3, #4]
 8024290:	4619      	mov	r1, r3
 8024292:	6878      	ldr	r0, [r7, #4]
 8024294:	f000 fcc6 	bl	8024c24 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 8024298:	4602      	mov	r2, r0
 802429a:	687b      	ldr	r3, [r7, #4]
 802429c:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 802429e:	687b      	ldr	r3, [r7, #4]
 80242a0:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80242a2:	687b      	ldr	r3, [r7, #4]
 80242a4:	6859      	ldr	r1, [r3, #4]
 80242a6:	69fb      	ldr	r3, [r7, #28]
 80242a8:	1acb      	subs	r3, r1, r3
 80242aa:	085b      	lsrs	r3, r3, #1
 80242ac:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80242ae:	4413      	add	r3, r2
 80242b0:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80242b2:	69fb      	ldr	r3, [r7, #28]
 80242b4:	009b      	lsls	r3, r3, #2
 80242b6:	69ba      	ldr	r2, [r7, #24]
 80242b8:	4413      	add	r3, r2
 80242ba:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80242bc:	697a      	ldr	r2, [r7, #20]
 80242be:	69b9      	ldr	r1, [r7, #24]
 80242c0:	6878      	ldr	r0, [r7, #4]
 80242c2:	f000 fccc 	bl	8024c5e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	3308      	adds	r3, #8
 80242ca:	69b9      	ldr	r1, [r7, #24]
 80242cc:	4618      	mov	r0, r3
 80242ce:	f000 fb2d 	bl	802492c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80242d2:	687b      	ldr	r3, [r7, #4]
 80242d4:	f103 0218 	add.w	r2, r3, #24
 80242d8:	697b      	ldr	r3, [r7, #20]
 80242da:	3b04      	subs	r3, #4
 80242dc:	4619      	mov	r1, r3
 80242de:	4610      	mov	r0, r2
 80242e0:	f000 fb24 	bl	802492c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80242e4:	687b      	ldr	r3, [r7, #4]
 80242e6:	68da      	ldr	r2, [r3, #12]
 80242e8:	687b      	ldr	r3, [r7, #4]
 80242ea:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80242ec:	687b      	ldr	r3, [r7, #4]
 80242ee:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80242f0:	2014      	movs	r0, #20
 80242f2:	f7fc fde9 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80242f6:	4602      	mov	r2, r0
 80242f8:	683b      	ldr	r3, [r7, #0]
 80242fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80242fe:	fb01 f202 	mul.w	r2, r1, r2
 8024302:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8024304:	4613      	mov	r3, r2
 8024306:	009b      	lsls	r3, r3, #2
 8024308:	4413      	add	r3, r2
 802430a:	009b      	lsls	r3, r3, #2
 802430c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	619a      	str	r2, [r3, #24]
    }
 8024312:	bf00      	nop
 8024314:	3724      	adds	r7, #36	; 0x24
 8024316:	46bd      	mov	sp, r7
 8024318:	bd90      	pop	{r4, r7, pc}

0802431a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 802431a:	b580      	push	{r7, lr}
 802431c:	b086      	sub	sp, #24
 802431e:	af00      	add	r7, sp, #0
 8024320:	60f8      	str	r0, [r7, #12]
 8024322:	60b9      	str	r1, [r7, #8]
 8024324:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024326:	68bb      	ldr	r3, [r7, #8]
 8024328:	617b      	str	r3, [r7, #20]
 802432a:	697a      	ldr	r2, [r7, #20]
 802432c:	687b      	ldr	r3, [r7, #4]
 802432e:	429a      	cmp	r2, r3
 8024330:	d209      	bcs.n	8024346 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8024332:	697b      	ldr	r3, [r7, #20]
 8024334:	681b      	ldr	r3, [r3, #0]
 8024336:	4619      	mov	r1, r3
 8024338:	68f8      	ldr	r0, [r7, #12]
 802433a:	f000 fb13 	bl	8024964 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 802433e:	697b      	ldr	r3, [r7, #20]
 8024340:	3304      	adds	r3, #4
 8024342:	617b      	str	r3, [r7, #20]
 8024344:	e7f1      	b.n	802432a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8024346:	bf00      	nop
 8024348:	3718      	adds	r7, #24
 802434a:	46bd      	mov	sp, r7
 802434c:	bd80      	pop	{r7, pc}

0802434e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 802434e:	b580      	push	{r7, lr}
 8024350:	b086      	sub	sp, #24
 8024352:	af00      	add	r7, sp, #0
 8024354:	60f8      	str	r0, [r7, #12]
 8024356:	60b9      	str	r1, [r7, #8]
 8024358:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 802435a:	f107 0314 	add.w	r3, r7, #20
 802435e:	68f9      	ldr	r1, [r7, #12]
 8024360:	4618      	mov	r0, r3
 8024362:	f000 fc96 	bl	8024c92 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024366:	f107 0314 	add.w	r3, r7, #20
 802436a:	687a      	ldr	r2, [r7, #4]
 802436c:	68b9      	ldr	r1, [r7, #8]
 802436e:	4618      	mov	r0, r3
 8024370:	f000 fcac 	bl	8024ccc <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024374:	f107 0314 	add.w	r3, r7, #20
 8024378:	4618      	mov	r0, r3
 802437a:	f000 fc9b 	bl	8024cb4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
      }
 802437e:	bf00      	nop
 8024380:	3718      	adds	r7, #24
 8024382:	46bd      	mov	sp, r7
 8024384:	bd80      	pop	{r7, pc}

08024386 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024386:	b580      	push	{r7, lr}
 8024388:	b082      	sub	sp, #8
 802438a:	af00      	add	r7, sp, #0
 802438c:	6078      	str	r0, [r7, #4]
 802438e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024390:	683b      	ldr	r3, [r7, #0]
 8024392:	3308      	adds	r3, #8
 8024394:	4619      	mov	r1, r3
 8024396:	6878      	ldr	r0, [r7, #4]
 8024398:	f000 f813 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802439c:	6878      	ldr	r0, [r7, #4]
 802439e:	3708      	adds	r7, #8
 80243a0:	46bd      	mov	sp, r7
 80243a2:	bd80      	pop	{r7, pc}

080243a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80243a4:	b580      	push	{r7, lr}
 80243a6:	b082      	sub	sp, #8
 80243a8:	af00      	add	r7, sp, #0
 80243aa:	6078      	str	r0, [r7, #4]
 80243ac:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80243ae:	683b      	ldr	r3, [r7, #0]
 80243b0:	3318      	adds	r3, #24
 80243b2:	4619      	mov	r1, r3
 80243b4:	6878      	ldr	r0, [r7, #4]
 80243b6:	f000 f804 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80243ba:	6878      	ldr	r0, [r7, #4]
 80243bc:	3708      	adds	r7, #8
 80243be:	46bd      	mov	sp, r7
 80243c0:	bd80      	pop	{r7, pc}

080243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80243c2:	b480      	push	{r7}
 80243c4:	b083      	sub	sp, #12
 80243c6:	af00      	add	r7, sp, #0
 80243c8:	6078      	str	r0, [r7, #4]
 80243ca:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80243cc:	683b      	ldr	r3, [r7, #0]
 80243ce:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80243d4:	683b      	ldr	r3, [r7, #0]
 80243d6:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80243d8:	687b      	ldr	r3, [r7, #4]
 80243da:	605a      	str	r2, [r3, #4]
 80243dc:	683b      	ldr	r3, [r7, #0]
 80243de:	689a      	ldr	r2, [r3, #8]
 80243e0:	687b      	ldr	r3, [r7, #4]
 80243e2:	609a      	str	r2, [r3, #8]
 80243e4:	683b      	ldr	r3, [r7, #0]
 80243e6:	68da      	ldr	r2, [r3, #12]
 80243e8:	687b      	ldr	r3, [r7, #4]
 80243ea:	60da      	str	r2, [r3, #12]
 80243ec:	687b      	ldr	r3, [r7, #4]
 80243ee:	4618      	mov	r0, r3
 80243f0:	370c      	adds	r7, #12
 80243f2:	46bd      	mov	sp, r7
 80243f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243f8:	4770      	bx	lr

080243fa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80243fa:	b480      	push	{r7}
 80243fc:	b08d      	sub	sp, #52	; 0x34
 80243fe:	af00      	add	r7, sp, #0
 8024400:	60f8      	str	r0, [r7, #12]
 8024402:	60b9      	str	r1, [r7, #8]
 8024404:	607a      	str	r2, [r7, #4]
 8024406:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8024408:	bf00      	nop
 802440a:	3734      	adds	r7, #52	; 0x34
 802440c:	46bd      	mov	sp, r7
 802440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024412:	4770      	bx	lr

08024414 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8024414:	b580      	push	{r7, lr}
 8024416:	b082      	sub	sp, #8
 8024418:	af00      	add	r7, sp, #0
 802441a:	6078      	str	r0, [r7, #4]
 802441c:	6878      	ldr	r0, [r7, #4]
 802441e:	f000 fc74 	bl	8024d0a <_ZNSaIjED1Ev>
 8024422:	687b      	ldr	r3, [r7, #4]
 8024424:	4618      	mov	r0, r3
 8024426:	3708      	adds	r7, #8
 8024428:	46bd      	mov	sp, r7
 802442a:	bd80      	pop	{r7, pc}

0802442c <_ZNSt11_Deque_baseIjSaIjEEC1Ev>:
      _Deque_base()
 802442c:	b580      	push	{r7, lr}
 802442e:	b082      	sub	sp, #8
 8024430:	af00      	add	r7, sp, #0
 8024432:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	4618      	mov	r0, r3
 8024438:	f000 fc57 	bl	8024cea <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 802443c:	2100      	movs	r1, #0
 802443e:	6878      	ldr	r0, [r7, #4]
 8024440:	f000 fc6f 	bl	8024d22 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	4618      	mov	r0, r3
 8024448:	3708      	adds	r7, #8
 802444a:	46bd      	mov	sp, r7
 802444c:	bd80      	pop	{r7, pc}

0802444e <_ZNSt11_Deque_baseIjSaIjEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 802444e:	b580      	push	{r7, lr}
 8024450:	b082      	sub	sp, #8
 8024452:	af00      	add	r7, sp, #0
 8024454:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8024456:	687b      	ldr	r3, [r7, #4]
 8024458:	681b      	ldr	r3, [r3, #0]
 802445a:	2b00      	cmp	r3, #0
 802445c:	d010      	beq.n	8024480 <_ZNSt11_Deque_baseIjSaIjEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 802445e:	687b      	ldr	r3, [r7, #4]
 8024460:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8024462:	687b      	ldr	r3, [r7, #4]
 8024464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8024466:	3304      	adds	r3, #4
 8024468:	461a      	mov	r2, r3
 802446a:	6878      	ldr	r0, [r7, #4]
 802446c:	f000 fcbc 	bl	8024de8 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8024470:	687b      	ldr	r3, [r7, #4]
 8024472:	6819      	ldr	r1, [r3, #0]
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	685b      	ldr	r3, [r3, #4]
 8024478:	461a      	mov	r2, r3
 802447a:	6878      	ldr	r0, [r7, #4]
 802447c:	f000 fcce 	bl	8024e1c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
    }
 8024480:	687b      	ldr	r3, [r7, #4]
 8024482:	4618      	mov	r0, r3
 8024484:	f7ff ffc6 	bl	8024414 <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implD1Ev>
 8024488:	687b      	ldr	r3, [r7, #4]
 802448a:	4618      	mov	r0, r3
 802448c:	3708      	adds	r7, #8
 802448e:	46bd      	mov	sp, r7
 8024490:	bd80      	pop	{r7, pc}

08024492 <_ZNSt5dequeIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8024492:	b580      	push	{r7, lr}
 8024494:	b082      	sub	sp, #8
 8024496:	af00      	add	r7, sp, #0
 8024498:	6078      	str	r0, [r7, #4]
 802449a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 802449c:	683b      	ldr	r3, [r7, #0]
 802449e:	3308      	adds	r3, #8
 80244a0:	4619      	mov	r1, r3
 80244a2:	6878      	ldr	r0, [r7, #4]
 80244a4:	f000 f81e 	bl	80244e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80244a8:	6878      	ldr	r0, [r7, #4]
 80244aa:	3708      	adds	r7, #8
 80244ac:	46bd      	mov	sp, r7
 80244ae:	bd80      	pop	{r7, pc}

080244b0 <_ZNSt5dequeIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80244b0:	b580      	push	{r7, lr}
 80244b2:	b082      	sub	sp, #8
 80244b4:	af00      	add	r7, sp, #0
 80244b6:	6078      	str	r0, [r7, #4]
 80244b8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80244ba:	683b      	ldr	r3, [r7, #0]
 80244bc:	3318      	adds	r3, #24
 80244be:	4619      	mov	r1, r3
 80244c0:	6878      	ldr	r0, [r7, #4]
 80244c2:	f000 f80f 	bl	80244e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 80244c6:	6878      	ldr	r0, [r7, #4]
 80244c8:	3708      	adds	r7, #8
 80244ca:	46bd      	mov	sp, r7
 80244cc:	bd80      	pop	{r7, pc}

080244ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80244ce:	b480      	push	{r7}
 80244d0:	b083      	sub	sp, #12
 80244d2:	af00      	add	r7, sp, #0
 80244d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80244d6:	687b      	ldr	r3, [r7, #4]
 80244d8:	4618      	mov	r0, r3
 80244da:	370c      	adds	r7, #12
 80244dc:	46bd      	mov	sp, r7
 80244de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244e2:	4770      	bx	lr

080244e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80244e4:	b480      	push	{r7}
 80244e6:	b083      	sub	sp, #12
 80244e8:	af00      	add	r7, sp, #0
 80244ea:	6078      	str	r0, [r7, #4]
 80244ec:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80244ee:	683b      	ldr	r3, [r7, #0]
 80244f0:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80244f2:	687b      	ldr	r3, [r7, #4]
 80244f4:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80244f6:	683b      	ldr	r3, [r7, #0]
 80244f8:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80244fa:	687b      	ldr	r3, [r7, #4]
 80244fc:	605a      	str	r2, [r3, #4]
 80244fe:	683b      	ldr	r3, [r7, #0]
 8024500:	689a      	ldr	r2, [r3, #8]
 8024502:	687b      	ldr	r3, [r7, #4]
 8024504:	609a      	str	r2, [r3, #8]
 8024506:	683b      	ldr	r3, [r7, #0]
 8024508:	68da      	ldr	r2, [r3, #12]
 802450a:	687b      	ldr	r3, [r7, #4]
 802450c:	60da      	str	r2, [r3, #12]
 802450e:	687b      	ldr	r3, [r7, #4]
 8024510:	4618      	mov	r0, r3
 8024512:	370c      	adds	r7, #12
 8024514:	46bd      	mov	sp, r7
 8024516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802451a:	4770      	bx	lr

0802451c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 802451c:	b480      	push	{r7}
 802451e:	b08d      	sub	sp, #52	; 0x34
 8024520:	af00      	add	r7, sp, #0
 8024522:	60f8      	str	r0, [r7, #12]
 8024524:	60b9      	str	r1, [r7, #8]
 8024526:	607a      	str	r2, [r7, #4]
 8024528:	603b      	str	r3, [r7, #0]
      }
 802452a:	bf00      	nop
 802452c:	3734      	adds	r7, #52	; 0x34
 802452e:	46bd      	mov	sp, r7
 8024530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024534:	4770      	bx	lr

08024536 <_ZSt4moveIRSt5dequeIN10BHYWrapper8BHYFrameESaIS2_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8024536:	b480      	push	{r7}
 8024538:	b083      	sub	sp, #12
 802453a:	af00      	add	r7, sp, #0
 802453c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802453e:	687b      	ldr	r3, [r7, #4]
 8024540:	4618      	mov	r0, r3
 8024542:	370c      	adds	r7, #12
 8024544:	46bd      	mov	sp, r7
 8024546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802454a:	4770      	bx	lr

0802454c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_move_assign1EOS3_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 802454c:	b590      	push	{r4, r7, lr}
 802454e:	b085      	sub	sp, #20
 8024550:	af00      	add	r7, sp, #0
 8024552:	60f8      	str	r0, [r7, #12]
 8024554:	60b9      	str	r1, [r7, #8]
 8024556:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8024558:	68fb      	ldr	r3, [r7, #12]
 802455a:	68ba      	ldr	r2, [r7, #8]
 802455c:	4611      	mov	r1, r2
 802455e:	4618      	mov	r0, r3
 8024560:	f000 fc78 	bl	8024e54 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>
	__x.clear();
 8024564:	68b8      	ldr	r0, [r7, #8]
 8024566:	f000 fc82 	bl	8024e6e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 802456a:	68fb      	ldr	r3, [r7, #12]
 802456c:	4618      	mov	r0, r3
 802456e:	f7ff fd61 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024572:	4604      	mov	r4, r0
 8024574:	68bb      	ldr	r3, [r7, #8]
 8024576:	4618      	mov	r0, r3
 8024578:	f7ff fd5c 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802457c:	4603      	mov	r3, r0
 802457e:	4619      	mov	r1, r3
 8024580:	4620      	mov	r0, r4
 8024582:	f000 fc88 	bl	8024e96 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>
      }
 8024586:	bf00      	nop
 8024588:	3714      	adds	r7, #20
 802458a:	46bd      	mov	sp, r7
 802458c:	bd90      	pop	{r4, r7, pc}

0802458e <_ZSt4moveIRSt5dequeIjSaIjEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 802458e:	b480      	push	{r7}
 8024590:	b083      	sub	sp, #12
 8024592:	af00      	add	r7, sp, #0
 8024594:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8024596:	687b      	ldr	r3, [r7, #4]
 8024598:	4618      	mov	r0, r3
 802459a:	370c      	adds	r7, #12
 802459c:	46bd      	mov	sp, r7
 802459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245a2:	4770      	bx	lr

080245a4 <_ZNSt5dequeIjSaIjEE15_M_move_assign1EOS1_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 80245a4:	b590      	push	{r4, r7, lr}
 80245a6:	b085      	sub	sp, #20
 80245a8:	af00      	add	r7, sp, #0
 80245aa:	60f8      	str	r0, [r7, #12]
 80245ac:	60b9      	str	r1, [r7, #8]
 80245ae:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 80245b0:	68fb      	ldr	r3, [r7, #12]
 80245b2:	68ba      	ldr	r2, [r7, #8]
 80245b4:	4611      	mov	r1, r2
 80245b6:	4618      	mov	r0, r3
 80245b8:	f000 fc7b 	bl	8024eb2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>
	__x.clear();
 80245bc:	68b8      	ldr	r0, [r7, #8]
 80245be:	f000 fc85 	bl	8024ecc <_ZNSt5dequeIjSaIjEE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 80245c2:	68fb      	ldr	r3, [r7, #12]
 80245c4:	4618      	mov	r0, r3
 80245c6:	f7ff ff82 	bl	80244ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80245ca:	4604      	mov	r4, r0
 80245cc:	68bb      	ldr	r3, [r7, #8]
 80245ce:	4618      	mov	r0, r3
 80245d0:	f7ff ff7d 	bl	80244ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80245d4:	4603      	mov	r3, r0
 80245d6:	4619      	mov	r1, r3
 80245d8:	4620      	mov	r0, r4
 80245da:	f000 fc8b 	bl	8024ef4 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>
      }
 80245de:	bf00      	nop
 80245e0:	3714      	adds	r7, #20
 80245e2:	46bd      	mov	sp, r7
 80245e4:	bd90      	pop	{r4, r7, pc}

080245e6 <_ZNSt14__array_traitsI8ResponceLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80245e6:	b480      	push	{r7}
 80245e8:	b083      	sub	sp, #12
 80245ea:	af00      	add	r7, sp, #0
 80245ec:	6078      	str	r0, [r7, #4]
 80245ee:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80245f0:	683a      	ldr	r2, [r7, #0]
 80245f2:	4613      	mov	r3, r2
 80245f4:	015b      	lsls	r3, r3, #5
 80245f6:	4413      	add	r3, r2
 80245f8:	00db      	lsls	r3, r3, #3
 80245fa:	687a      	ldr	r2, [r7, #4]
 80245fc:	4413      	add	r3, r2
 80245fe:	4618      	mov	r0, r3
 8024600:	370c      	adds	r7, #12
 8024602:	46bd      	mov	sp, r7
 8024604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024608:	4770      	bx	lr

0802460a <_ZNSt14__array_traitsI7RequestLj500EE6_S_refERA500_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802460a:	b480      	push	{r7}
 802460c:	b083      	sub	sp, #12
 802460e:	af00      	add	r7, sp, #0
 8024610:	6078      	str	r0, [r7, #4]
 8024612:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024614:	683b      	ldr	r3, [r7, #0]
 8024616:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802461a:	fb02 f303 	mul.w	r3, r2, r3
 802461e:	687a      	ldr	r2, [r7, #4]
 8024620:	4413      	add	r3, r2
 8024622:	4618      	mov	r0, r3
 8024624:	370c      	adds	r7, #12
 8024626:	46bd      	mov	sp, r7
 8024628:	f85d 7b04 	ldr.w	r7, [sp], #4
 802462c:	4770      	bx	lr

0802462e <_ZNSt14__array_traitsI7RequestLj10EE6_S_refERA10_KS0_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 802462e:	b480      	push	{r7}
 8024630:	b083      	sub	sp, #12
 8024632:	af00      	add	r7, sp, #0
 8024634:	6078      	str	r0, [r7, #4]
 8024636:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8024638:	683b      	ldr	r3, [r7, #0]
 802463a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 802463e:	fb02 f303 	mul.w	r3, r2, r3
 8024642:	687a      	ldr	r2, [r7, #4]
 8024644:	4413      	add	r3, r2
 8024646:	4618      	mov	r0, r3
 8024648:	370c      	adds	r7, #12
 802464a:	46bd      	mov	sp, r7
 802464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024650:	4770      	bx	lr

08024652 <_ZNKSt16initializer_listIN10BHYWrapper8BHYFrameEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8024652:	b480      	push	{r7}
 8024654:	b083      	sub	sp, #12
 8024656:	af00      	add	r7, sp, #0
 8024658:	6078      	str	r0, [r7, #4]
 802465a:	687b      	ldr	r3, [r7, #4]
 802465c:	685b      	ldr	r3, [r3, #4]
 802465e:	4618      	mov	r0, r3
 8024660:	370c      	adds	r7, #12
 8024662:	46bd      	mov	sp, r7
 8024664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024668:	4770      	bx	lr

0802466a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 802466a:	b5b0      	push	{r4, r5, r7, lr}
 802466c:	b082      	sub	sp, #8
 802466e:	af00      	add	r7, sp, #0
 8024670:	6078      	str	r0, [r7, #4]
 8024672:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8024674:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8024676:	1d3b      	adds	r3, r7, #4
 8024678:	4618      	mov	r0, r3
 802467a:	f000 f83d 	bl	80246f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
      return std::__distance(__first, __last,
 802467e:	462a      	mov	r2, r5
 8024680:	6839      	ldr	r1, [r7, #0]
 8024682:	4620      	mov	r0, r4
 8024684:	f000 fc44 	bl	8024f10 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>
 8024688:	4603      	mov	r3, r0
    }
 802468a:	4618      	mov	r0, r3
 802468c:	3708      	adds	r7, #8
 802468e:	46bd      	mov	sp, r7
 8024690:	bdb0      	pop	{r4, r5, r7, pc}

08024692 <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8024692:	b590      	push	{r4, r7, lr}
 8024694:	b085      	sub	sp, #20
 8024696:	af00      	add	r7, sp, #0
 8024698:	6078      	str	r0, [r7, #4]
 802469a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 802469c:	683b      	ldr	r3, [r7, #0]
 802469e:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 80246a0:	6878      	ldr	r0, [r7, #4]
 80246a2:	f000 f829 	bl	80246f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 80246a6:	4622      	mov	r2, r4
 80246a8:	68f9      	ldr	r1, [r7, #12]
 80246aa:	6878      	ldr	r0, [r7, #4]
 80246ac:	f000 fc46 	bl	8024f3c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 80246b0:	bf00      	nop
 80246b2:	3714      	adds	r7, #20
 80246b4:	46bd      	mov	sp, r7
 80246b6:	bd90      	pop	{r4, r7, pc}

080246b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80246b8:	b5b0      	push	{r4, r5, r7, lr}
 80246ba:	b088      	sub	sp, #32
 80246bc:	af00      	add	r7, sp, #0
 80246be:	60f8      	str	r0, [r7, #12]
 80246c0:	60b9      	str	r1, [r7, #8]
 80246c2:	607a      	str	r2, [r7, #4]
 80246c4:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80246c6:	68b8      	ldr	r0, [r7, #8]
 80246c8:	f000 fc4e 	bl	8024f68 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80246cc:	4604      	mov	r4, r0
 80246ce:	6878      	ldr	r0, [r7, #4]
 80246d0:	f000 fc4a 	bl	8024f68 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 80246d4:	4605      	mov	r5, r0
 80246d6:	f107 0310 	add.w	r3, r7, #16
 80246da:	6839      	ldr	r1, [r7, #0]
 80246dc:	4618      	mov	r0, r3
 80246de:	f7ff fe70 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80246e2:	68f8      	ldr	r0, [r7, #12]
 80246e4:	f107 0310 	add.w	r3, r7, #16
 80246e8:	462a      	mov	r2, r5
 80246ea:	4621      	mov	r1, r4
 80246ec:	f000 fc47 	bl	8024f7e <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>
    }
 80246f0:	68f8      	ldr	r0, [r7, #12]
 80246f2:	3720      	adds	r7, #32
 80246f4:	46bd      	mov	sp, r7
 80246f6:	bdb0      	pop	{r4, r5, r7, pc}

080246f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80246f8:	b480      	push	{r7}
 80246fa:	b083      	sub	sp, #12
 80246fc:	af00      	add	r7, sp, #0
 80246fe:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8024700:	bf00      	nop
 8024702:	4618      	mov	r0, r3
 8024704:	370c      	adds	r7, #12
 8024706:	46bd      	mov	sp, r7
 8024708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802470c:	4770      	bx	lr

0802470e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag>:
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 802470e:	b590      	push	{r4, r7, lr}
 8024710:	b0a5      	sub	sp, #148	; 0x94
 8024712:	af02      	add	r7, sp, #8
 8024714:	60f8      	str	r0, [r7, #12]
 8024716:	60b9      	str	r1, [r7, #8]
 8024718:	607a      	str	r2, [r7, #4]
 802471a:	603b      	str	r3, [r7, #0]
      _M_range_insert_aux(iterator __pos,
			  _ForwardIterator __first, _ForwardIterator __last,
			  std::forward_iterator_tag)
      {
	const size_type __n = std::distance(__first, __last);
 802471c:	6839      	ldr	r1, [r7, #0]
 802471e:	6878      	ldr	r0, [r7, #4]
 8024720:	f7ff ffa3 	bl	802466a <_ZSt8distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_>
 8024724:	4603      	mov	r3, r0
 8024726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 802472a:	68bb      	ldr	r3, [r7, #8]
 802472c:	681a      	ldr	r2, [r3, #0]
 802472e:	68fb      	ldr	r3, [r7, #12]
 8024730:	689b      	ldr	r3, [r3, #8]
 8024732:	429a      	cmp	r2, r3
 8024734:	d126      	bne.n	8024784 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0x76>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 8024736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802473a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802473e:	68f9      	ldr	r1, [r7, #12]
 8024740:	4618      	mov	r0, r3
 8024742:	f000 fc4d 	bl	8024fe0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    __try
	      {
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024746:	f107 0224 	add.w	r2, r7, #36	; 0x24
 802474a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802474e:	4611      	mov	r1, r2
 8024750:	4618      	mov	r0, r3
 8024752:	f7ff fe36 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 8024756:	68fb      	ldr	r3, [r7, #12]
 8024758:	4618      	mov	r0, r3
 802475a:	f7ff fc6b 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802475e:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last, __new_start,
 8024760:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8024764:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8024768:	9200      	str	r2, [sp, #0]
 802476a:	683a      	ldr	r2, [r7, #0]
 802476c:	6879      	ldr	r1, [r7, #4]
 802476e:	f000 fc61 	bl	8025034 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_start = __new_start;
 8024772:	68fb      	ldr	r3, [r7, #12]
 8024774:	f103 0408 	add.w	r4, r3, #8
 8024778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802477c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802477e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		__throw_exception_again;
	      }
	  }
	else
	  _M_insert_aux(__pos, __first, __last, __n);
      }
 8024782:	e03d      	b.n	8024800 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 8024784:	68bb      	ldr	r3, [r7, #8]
 8024786:	681a      	ldr	r2, [r3, #0]
 8024788:	68fb      	ldr	r3, [r7, #12]
 802478a:	699b      	ldr	r3, [r3, #24]
 802478c:	429a      	cmp	r2, r3
 802478e:	d127      	bne.n	80247e0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xd2>
	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 8024790:	f107 0314 	add.w	r3, r7, #20
 8024794:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8024798:	68f9      	ldr	r1, [r7, #12]
 802479a:	4618      	mov	r0, r3
 802479c:	f000 fc62 	bl	8025064 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
					    this->_M_impl._M_finish,
 80247a0:	68fb      	ldr	r3, [r7, #12]
 80247a2:	f103 0218 	add.w	r2, r3, #24
		std::__uninitialized_copy_a(__first, __last,
 80247a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80247aa:	4611      	mov	r1, r2
 80247ac:	4618      	mov	r0, r3
 80247ae:	f7ff fe08 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					    _M_get_Tp_allocator());
 80247b2:	68fb      	ldr	r3, [r7, #12]
 80247b4:	4618      	mov	r0, r3
 80247b6:	f7ff fc3d 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80247ba:	4602      	mov	r2, r0
		std::__uninitialized_copy_a(__first, __last,
 80247bc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80247c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80247c4:	9200      	str	r2, [sp, #0]
 80247c6:	683a      	ldr	r2, [r7, #0]
 80247c8:	6879      	ldr	r1, [r7, #4]
 80247ca:	f000 fc33 	bl	8025034 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
		this->_M_impl._M_finish = __new_finish;
 80247ce:	68fb      	ldr	r3, [r7, #12]
 80247d0:	f103 0418 	add.w	r4, r3, #24
 80247d4:	f107 0314 	add.w	r3, r7, #20
 80247d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80247da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80247de:	e00f      	b.n	8024800 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE19_M_range_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_St20forward_iterator_tag+0xf2>
	  _M_insert_aux(__pos, __first, __last, __n);
 80247e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80247e4:	68b9      	ldr	r1, [r7, #8]
 80247e6:	4618      	mov	r0, r3
 80247e8:	f7ff fdeb 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80247ec:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80247f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80247f4:	9300      	str	r3, [sp, #0]
 80247f6:	683b      	ldr	r3, [r7, #0]
 80247f8:	687a      	ldr	r2, [r7, #4]
 80247fa:	68f8      	ldr	r0, [r7, #12]
 80247fc:	f000 fc5c 	bl	80250b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>
      }
 8024800:	bf00      	nop
 8024802:	378c      	adds	r7, #140	; 0x8c
 8024804:	46bd      	mov	sp, r7
 8024806:	bd90      	pop	{r4, r7, pc}

08024808 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>:
      _M_erase_at_end(iterator __pos)
 8024808:	b590      	push	{r4, r7, lr}
 802480a:	b08b      	sub	sp, #44	; 0x2c
 802480c:	af00      	add	r7, sp, #0
 802480e:	6078      	str	r0, [r7, #4]
 8024810:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8024812:	f107 0308 	add.w	r3, r7, #8
 8024816:	6839      	ldr	r1, [r7, #0]
 8024818:	4618      	mov	r0, r3
 802481a:	f7ff fdd2 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802481e:	f107 0318 	add.w	r3, r7, #24
 8024822:	6879      	ldr	r1, [r7, #4]
 8024824:	4618      	mov	r0, r3
 8024826:	f7ff fdbd 	bl	80243a4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE3endEv>
 802482a:	687b      	ldr	r3, [r7, #4]
 802482c:	4618      	mov	r0, r3
 802482e:	f7ff fc01 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024832:	4603      	mov	r3, r0
 8024834:	f107 0218 	add.w	r2, r7, #24
 8024838:	f107 0108 	add.w	r1, r7, #8
 802483c:	6878      	ldr	r0, [r7, #4]
 802483e:	f7ff fddc 	bl	80243fa <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
	_M_destroy_nodes(__pos._M_node + 1,
 8024842:	6878      	ldr	r0, [r7, #4]
 8024844:	683b      	ldr	r3, [r7, #0]
 8024846:	68db      	ldr	r3, [r3, #12]
 8024848:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 802484e:	3304      	adds	r3, #4
 8024850:	461a      	mov	r2, r3
 8024852:	f7ff fd62 	bl	802431a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	this->_M_impl._M_finish = __pos;
 8024856:	687b      	ldr	r3, [r7, #4]
 8024858:	683a      	ldr	r2, [r7, #0]
 802485a:	f103 0418 	add.w	r4, r3, #24
 802485e:	4613      	mov	r3, r2
 8024860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8024862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8024866:	bf00      	nop
 8024868:	372c      	adds	r7, #44	; 0x2c
 802486a:	46bd      	mov	sp, r7
 802486c:	bd90      	pop	{r4, r7, pc}

0802486e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802486e:	b480      	push	{r7}
 8024870:	b083      	sub	sp, #12
 8024872:	af00      	add	r7, sp, #0
 8024874:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8024876:	687b      	ldr	r3, [r7, #4]
 8024878:	4618      	mov	r0, r3
 802487a:	370c      	adds	r7, #12
 802487c:	46bd      	mov	sp, r7
 802487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024882:	4770      	bx	lr

08024884 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8024884:	b5b0      	push	{r4, r5, r7, lr}
 8024886:	b084      	sub	sp, #16
 8024888:	af00      	add	r7, sp, #0
 802488a:	60f8      	str	r0, [r7, #12]
 802488c:	60b9      	str	r1, [r7, #8]
 802488e:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8024890:	6878      	ldr	r0, [r7, #4]
 8024892:	f7ff ffec 	bl	802486e <_ZSt7forwardIRKN10BHYWrapper8BHYFrameEEOT_RNSt16remove_referenceIS4_E4typeE>
 8024896:	4605      	mov	r5, r0
 8024898:	68bb      	ldr	r3, [r7, #8]
 802489a:	4619      	mov	r1, r3
 802489c:	2014      	movs	r0, #20
 802489e:	f7fc fb07 	bl	8020eb0 <_ZnwjPv>
 80248a2:	4603      	mov	r3, r0
 80248a4:	461c      	mov	r4, r3
 80248a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80248a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80248aa:	682b      	ldr	r3, [r5, #0]
 80248ac:	6023      	str	r3, [r4, #0]
 80248ae:	bf00      	nop
 80248b0:	3710      	adds	r7, #16
 80248b2:	46bd      	mov	sp, r7
 80248b4:	bdb0      	pop	{r4, r5, r7, pc}

080248b6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80248b6:	b580      	push	{r7, lr}
 80248b8:	b082      	sub	sp, #8
 80248ba:	af00      	add	r7, sp, #0
 80248bc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80248be:	687b      	ldr	r3, [r7, #4]
 80248c0:	4618      	mov	r0, r3
 80248c2:	f000 ff06 	bl	80256d2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80248c6:	4603      	mov	r3, r0
 80248c8:	4618      	mov	r0, r3
 80248ca:	f000 fee8 	bl	802569e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>
 80248ce:	4603      	mov	r3, r0
 80248d0:	4618      	mov	r0, r3
 80248d2:	3708      	adds	r7, #8
 80248d4:	46bd      	mov	sp, r7
 80248d6:	bd80      	pop	{r7, pc}

080248d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 80248d8:	b580      	push	{r7, lr}
 80248da:	b082      	sub	sp, #8
 80248dc:	af00      	add	r7, sp, #0
 80248de:	6078      	str	r0, [r7, #4]
 80248e0:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80248e2:	687b      	ldr	r3, [r7, #4]
 80248e4:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	681b      	ldr	r3, [r3, #0]
 80248ea:	1ad3      	subs	r3, r2, r3
 80248ec:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80248ee:	461a      	mov	r2, r3
 80248f0:	683b      	ldr	r3, [r7, #0]
 80248f2:	4293      	cmp	r3, r2
 80248f4:	d904      	bls.n	8024900 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80248f6:	2201      	movs	r2, #1
 80248f8:	6839      	ldr	r1, [r7, #0]
 80248fa:	6878      	ldr	r0, [r7, #4]
 80248fc:	f000 fef4 	bl	80256e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8024900:	bf00      	nop
 8024902:	3708      	adds	r7, #8
 8024904:	46bd      	mov	sp, r7
 8024906:	bd80      	pop	{r7, pc}

08024908 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8024908:	b590      	push	{r4, r7, lr}
 802490a:	b083      	sub	sp, #12
 802490c:	af00      	add	r7, sp, #0
 802490e:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8024910:	687c      	ldr	r4, [r7, #4]
 8024912:	2014      	movs	r0, #20
 8024914:	f7fc fad8 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024918:	4603      	mov	r3, r0
 802491a:	4619      	mov	r1, r3
 802491c:	4620      	mov	r0, r4
 802491e:	f000 ff7d 	bl	802581c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>
 8024922:	4603      	mov	r3, r0
      }
 8024924:	4618      	mov	r0, r3
 8024926:	370c      	adds	r7, #12
 8024928:	46bd      	mov	sp, r7
 802492a:	bd90      	pop	{r4, r7, pc}

0802492c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 802492c:	b590      	push	{r4, r7, lr}
 802492e:	b083      	sub	sp, #12
 8024930:	af00      	add	r7, sp, #0
 8024932:	6078      	str	r0, [r7, #4]
 8024934:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	683a      	ldr	r2, [r7, #0]
 802493a:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 802493c:	683b      	ldr	r3, [r7, #0]
 802493e:	681a      	ldr	r2, [r3, #0]
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8024944:	687b      	ldr	r3, [r7, #4]
 8024946:	685c      	ldr	r4, [r3, #4]
 8024948:	f000 f81f 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802494c:	4602      	mov	r2, r0
 802494e:	4613      	mov	r3, r2
 8024950:	009b      	lsls	r3, r3, #2
 8024952:	4413      	add	r3, r2
 8024954:	009b      	lsls	r3, r3, #2
 8024956:	18e2      	adds	r2, r4, r3
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	609a      	str	r2, [r3, #8]
      }
 802495c:	bf00      	nop
 802495e:	370c      	adds	r7, #12
 8024960:	46bd      	mov	sp, r7
 8024962:	bd90      	pop	{r4, r7, pc}

08024964 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8024964:	b590      	push	{r4, r7, lr}
 8024966:	b083      	sub	sp, #12
 8024968:	af00      	add	r7, sp, #0
 802496a:	6078      	str	r0, [r7, #4]
 802496c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 802496e:	687c      	ldr	r4, [r7, #4]
 8024970:	2014      	movs	r0, #20
 8024972:	f7fc faa9 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024976:	4603      	mov	r3, r0
 8024978:	461a      	mov	r2, r3
 802497a:	6839      	ldr	r1, [r7, #0]
 802497c:	4620      	mov	r0, r4
 802497e:	f000 ff5c 	bl	802583a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>
      }
 8024982:	bf00      	nop
 8024984:	370c      	adds	r7, #12
 8024986:	46bd      	mov	sp, r7
 8024988:	bd90      	pop	{r4, r7, pc}

0802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 802498a:	b580      	push	{r7, lr}
 802498c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 802498e:	2014      	movs	r0, #20
 8024990:	f7fc fa9a 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024994:	4603      	mov	r3, r0
 8024996:	4618      	mov	r0, r3
 8024998:	bd80      	pop	{r7, pc}

0802499a <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE7destroyIS2_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 802499a:	b480      	push	{r7}
 802499c:	b083      	sub	sp, #12
 802499e:	af00      	add	r7, sp, #0
 80249a0:	6078      	str	r0, [r7, #4]
 80249a2:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80249a4:	bf00      	nop
 80249a6:	370c      	adds	r7, #12
 80249a8:	46bd      	mov	sp, r7
 80249aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249ae:	4770      	bx	lr

080249b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 80249b0:	b580      	push	{r7, lr}
 80249b2:	b084      	sub	sp, #16
 80249b4:	af00      	add	r7, sp, #0
 80249b6:	60f8      	str	r0, [r7, #12]
 80249b8:	60b9      	str	r1, [r7, #8]
 80249ba:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 80249bc:	68b9      	ldr	r1, [r7, #8]
 80249be:	68f8      	ldr	r0, [r7, #12]
 80249c0:	f7ff fcff 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp += __n;
 80249c4:	6879      	ldr	r1, [r7, #4]
 80249c6:	68f8      	ldr	r0, [r7, #12]
 80249c8:	f000 ff46 	bl	8025858 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	return __tmp;
 80249cc:	bf00      	nop
      }
 80249ce:	68f8      	ldr	r0, [r7, #12]
 80249d0:	3710      	adds	r7, #16
 80249d2:	46bd      	mov	sp, r7
 80249d4:	bd80      	pop	{r7, pc}

080249d6 <_ZNKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80249d6:	b480      	push	{r7}
 80249d8:	b083      	sub	sp, #12
 80249da:	af00      	add	r7, sp, #0
 80249dc:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80249de:	687b      	ldr	r3, [r7, #4]
 80249e0:	681b      	ldr	r3, [r3, #0]
 80249e2:	4618      	mov	r0, r3
 80249e4:	370c      	adds	r7, #12
 80249e6:	46bd      	mov	sp, r7
 80249e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249ec:	4770      	bx	lr

080249ee <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80249ee:	b580      	push	{r7, lr}
 80249f0:	b084      	sub	sp, #16
 80249f2:	af00      	add	r7, sp, #0
 80249f4:	60f8      	str	r0, [r7, #12]
 80249f6:	60b9      	str	r1, [r7, #8]
 80249f8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80249fa:	6878      	ldr	r0, [r7, #4]
 80249fc:	f000 ff90 	bl	8025920 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024a00:	4603      	mov	r3, r0
 8024a02:	461a      	mov	r2, r3
 8024a04:	68b9      	ldr	r1, [r7, #8]
 8024a06:	68f8      	ldr	r0, [r7, #12]
 8024a08:	f000 ff95 	bl	8025936 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>
	}
 8024a0c:	bf00      	nop
 8024a0e:	3710      	adds	r7, #16
 8024a10:	46bd      	mov	sp, r7
 8024a12:	bd80      	pop	{r7, pc}

08024a14 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8024a14:	b5b0      	push	{r4, r5, r7, lr}
 8024a16:	b082      	sub	sp, #8
 8024a18:	af00      	add	r7, sp, #0
 8024a1a:	6078      	str	r0, [r7, #4]
 8024a1c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8024a1e:	6878      	ldr	r0, [r7, #4]
 8024a20:	f000 ff9f 	bl	8025962 <_ZNKSt5dequeIjSaIjEE4sizeEv>
 8024a24:	4604      	mov	r4, r0
 8024a26:	6878      	ldr	r0, [r7, #4]
 8024a28:	f000 ffad 	bl	8025986 <_ZNKSt5dequeIjSaIjEE8max_sizeEv>
 8024a2c:	4603      	mov	r3, r0
 8024a2e:	429c      	cmp	r4, r3
 8024a30:	bf0c      	ite	eq
 8024a32:	2301      	moveq	r3, #1
 8024a34:	2300      	movne	r3, #0
 8024a36:	b2db      	uxtb	r3, r3
 8024a38:	2b00      	cmp	r3, #0
 8024a3a:	d002      	beq.n	8024a42 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x2e>
	  __throw_length_error(
 8024a3c:	4816      	ldr	r0, [pc, #88]	; (8024a98 <_ZNSt5dequeIjSaIjEE16_M_push_back_auxIJRKjEEEvDpOT_+0x84>)
 8024a3e:	f017 f987 	bl	803bd50 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8024a42:	2101      	movs	r1, #1
 8024a44:	6878      	ldr	r0, [r7, #4]
 8024a46:	f000 ffaf 	bl	80259a8 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8024a4a:	687a      	ldr	r2, [r7, #4]
 8024a4c:	687b      	ldr	r3, [r7, #4]
 8024a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a50:	1d1c      	adds	r4, r3, #4
 8024a52:	4610      	mov	r0, r2
 8024a54:	f000 ffc3 	bl	80259de <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8024a58:	4603      	mov	r3, r0
 8024a5a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8024a5c:	687c      	ldr	r4, [r7, #4]
 8024a5e:	687b      	ldr	r3, [r7, #4]
 8024a60:	699d      	ldr	r5, [r3, #24]
 8024a62:	6838      	ldr	r0, [r7, #0]
 8024a64:	f000 ff5c 	bl	8025920 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8024a68:	4603      	mov	r3, r0
 8024a6a:	461a      	mov	r2, r3
 8024a6c:	4629      	mov	r1, r5
 8024a6e:	4620      	mov	r0, r4
 8024a70:	f7ff ffbd 	bl	80249ee <_ZNSt16allocator_traitsISaIjEE9constructIjJRKjEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8024a74:	687b      	ldr	r3, [r7, #4]
 8024a76:	f103 0218 	add.w	r2, r3, #24
 8024a7a:	687b      	ldr	r3, [r7, #4]
 8024a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a7e:	3304      	adds	r3, #4
 8024a80:	4619      	mov	r1, r3
 8024a82:	4610      	mov	r0, r2
 8024a84:	f000 ffbd 	bl	8025a02 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8024a88:	687b      	ldr	r3, [r7, #4]
 8024a8a:	69da      	ldr	r2, [r3, #28]
 8024a8c:	687b      	ldr	r3, [r7, #4]
 8024a8e:	619a      	str	r2, [r3, #24]
      }
 8024a90:	bf00      	nop
 8024a92:	3708      	adds	r7, #8
 8024a94:	46bd      	mov	sp, r7
 8024a96:	bdb0      	pop	{r4, r5, r7, pc}
 8024a98:	0803dde8 	.word	0x0803dde8

08024a9c <_ZNKSt5dequeIjSaIjEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8024a9c:	b580      	push	{r7, lr}
 8024a9e:	b082      	sub	sp, #8
 8024aa0:	af00      	add	r7, sp, #0
 8024aa2:	6078      	str	r0, [r7, #4]
 8024aa4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8024aa6:	683b      	ldr	r3, [r7, #0]
 8024aa8:	3308      	adds	r3, #8
 8024aaa:	4619      	mov	r1, r3
 8024aac:	6878      	ldr	r0, [r7, #4]
 8024aae:	f000 ffd4 	bl	8025a5a <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>
 8024ab2:	6878      	ldr	r0, [r7, #4]
 8024ab4:	3708      	adds	r7, #8
 8024ab6:	46bd      	mov	sp, r7
 8024ab8:	bd80      	pop	{r7, pc}

08024aba <_ZNKSt15_Deque_iteratorIjRKjPS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8024aba:	b480      	push	{r7}
 8024abc:	b083      	sub	sp, #12
 8024abe:	af00      	add	r7, sp, #0
 8024ac0:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8024ac2:	687b      	ldr	r3, [r7, #4]
 8024ac4:	681b      	ldr	r3, [r3, #0]
 8024ac6:	4618      	mov	r0, r3
 8024ac8:	370c      	adds	r7, #12
 8024aca:	46bd      	mov	sp, r7
 8024acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ad0:	4770      	bx	lr

08024ad2 <_ZSteqRKSt15_Deque_iteratorIjRjPjES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8024ad2:	b480      	push	{r7}
 8024ad4:	b083      	sub	sp, #12
 8024ad6:	af00      	add	r7, sp, #0
 8024ad8:	6078      	str	r0, [r7, #4]
 8024ada:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8024adc:	687b      	ldr	r3, [r7, #4]
 8024ade:	681a      	ldr	r2, [r3, #0]
 8024ae0:	683b      	ldr	r3, [r7, #0]
 8024ae2:	681b      	ldr	r3, [r3, #0]
 8024ae4:	429a      	cmp	r2, r3
 8024ae6:	bf0c      	ite	eq
 8024ae8:	2301      	moveq	r3, #1
 8024aea:	2300      	movne	r3, #0
 8024aec:	b2db      	uxtb	r3, r3
 8024aee:	4618      	mov	r0, r3
 8024af0:	370c      	adds	r7, #12
 8024af2:	46bd      	mov	sp, r7
 8024af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024af8:	4770      	bx	lr

08024afa <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8024afa:	b580      	push	{r7, lr}
 8024afc:	b082      	sub	sp, #8
 8024afe:	af00      	add	r7, sp, #0
 8024b00:	6078      	str	r0, [r7, #4]
 8024b02:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8024b04:	6839      	ldr	r1, [r7, #0]
 8024b06:	6878      	ldr	r0, [r7, #4]
 8024b08:	f000 ffc3 	bl	8025a92 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>
	}
 8024b0c:	bf00      	nop
 8024b0e:	3708      	adds	r7, #8
 8024b10:	46bd      	mov	sp, r7
 8024b12:	bd80      	pop	{r7, pc}

08024b14 <_ZNSt5dequeIjSaIjEE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 8024b14:	b580      	push	{r7, lr}
 8024b16:	b082      	sub	sp, #8
 8024b18:	af00      	add	r7, sp, #0
 8024b1a:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8024b1c:	687b      	ldr	r3, [r7, #4]
 8024b1e:	4618      	mov	r0, r3
 8024b20:	f7ff fcd5 	bl	80244ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8024b24:	4602      	mov	r2, r0
 8024b26:	687b      	ldr	r3, [r7, #4]
 8024b28:	689b      	ldr	r3, [r3, #8]
 8024b2a:	4619      	mov	r1, r3
 8024b2c:	4610      	mov	r0, r2
 8024b2e:	f7ff ffe4 	bl	8024afa <_ZNSt16allocator_traitsISaIjEE7destroyIjEEvRS0_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8024b32:	687a      	ldr	r2, [r7, #4]
 8024b34:	687b      	ldr	r3, [r7, #4]
 8024b36:	68db      	ldr	r3, [r3, #12]
 8024b38:	4619      	mov	r1, r3
 8024b3a:	4610      	mov	r0, r2
 8024b3c:	f000 ff7a 	bl	8025a34 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	f103 0208 	add.w	r2, r3, #8
 8024b46:	687b      	ldr	r3, [r7, #4]
 8024b48:	695b      	ldr	r3, [r3, #20]
 8024b4a:	3304      	adds	r3, #4
 8024b4c:	4619      	mov	r1, r3
 8024b4e:	4610      	mov	r0, r2
 8024b50:	f000 ff57 	bl	8025a02 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8024b54:	687b      	ldr	r3, [r7, #4]
 8024b56:	68da      	ldr	r2, [r3, #12]
 8024b58:	687b      	ldr	r3, [r7, #4]
 8024b5a:	609a      	str	r2, [r3, #8]
    }
 8024b5c:	bf00      	nop
 8024b5e:	3708      	adds	r7, #8
 8024b60:	46bd      	mov	sp, r7
 8024b62:	bd80      	pop	{r7, pc}

08024b64 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERKS1_PS2_EC1IS_IS1_RS1_PS1_EvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8024b64:	b480      	push	{r7}
 8024b66:	b083      	sub	sp, #12
 8024b68:	af00      	add	r7, sp, #0
 8024b6a:	6078      	str	r0, [r7, #4]
 8024b6c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024b6e:	683b      	ldr	r3, [r7, #0]
 8024b70:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024b72:	687b      	ldr	r3, [r7, #4]
 8024b74:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8024b76:	683b      	ldr	r3, [r7, #0]
 8024b78:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8024b7a:	687b      	ldr	r3, [r7, #4]
 8024b7c:	605a      	str	r2, [r3, #4]
 8024b7e:	683b      	ldr	r3, [r7, #0]
 8024b80:	689a      	ldr	r2, [r3, #8]
 8024b82:	687b      	ldr	r3, [r7, #4]
 8024b84:	609a      	str	r2, [r3, #8]
 8024b86:	683b      	ldr	r3, [r7, #0]
 8024b88:	68da      	ldr	r2, [r3, #12]
 8024b8a:	687b      	ldr	r3, [r7, #4]
 8024b8c:	60da      	str	r2, [r3, #12]
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	4618      	mov	r0, r3
 8024b92:	370c      	adds	r7, #12
 8024b94:	46bd      	mov	sp, r7
 8024b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b9a:	4770      	bx	lr

08024b9c <_ZNSaIN10BHYWrapper8BHYFrameEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8024b9c:	b580      	push	{r7, lr}
 8024b9e:	b082      	sub	sp, #8
 8024ba0:	af00      	add	r7, sp, #0
 8024ba2:	6078      	str	r0, [r7, #4]
 8024ba4:	6878      	ldr	r0, [r7, #4]
 8024ba6:	f000 ff7f 	bl	8025aa8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>
 8024baa:	687b      	ldr	r3, [r7, #4]
 8024bac:	4618      	mov	r0, r3
 8024bae:	3708      	adds	r7, #8
 8024bb0:	46bd      	mov	sp, r7
 8024bb2:	bd80      	pop	{r7, pc}

08024bb4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8024bb4:	b580      	push	{r7, lr}
 8024bb6:	b082      	sub	sp, #8
 8024bb8:	af00      	add	r7, sp, #0
 8024bba:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	2200      	movs	r2, #0
 8024bc0:	601a      	str	r2, [r3, #0]
 8024bc2:	687b      	ldr	r3, [r7, #4]
 8024bc4:	2200      	movs	r2, #0
 8024bc6:	605a      	str	r2, [r3, #4]
 8024bc8:	687b      	ldr	r3, [r7, #4]
 8024bca:	3308      	adds	r3, #8
 8024bcc:	4618      	mov	r0, r3
 8024bce:	f000 ff76 	bl	8025abe <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	3318      	adds	r3, #24
 8024bd6:	4618      	mov	r0, r3
 8024bd8:	f000 ff71 	bl	8025abe <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>
	{ }
 8024bdc:	687b      	ldr	r3, [r7, #4]
 8024bde:	4618      	mov	r0, r3
 8024be0:	3708      	adds	r7, #8
 8024be2:	46bd      	mov	sp, r7
 8024be4:	bd80      	pop	{r7, pc}

08024be6 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8024be6:	b480      	push	{r7}
 8024be8:	b083      	sub	sp, #12
 8024bea:	af00      	add	r7, sp, #0
 8024bec:	6078      	str	r0, [r7, #4]
 8024bee:	687b      	ldr	r3, [r7, #4]
 8024bf0:	4618      	mov	r0, r3
 8024bf2:	370c      	adds	r7, #12
 8024bf4:	46bd      	mov	sp, r7
 8024bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bfa:	4770      	bx	lr

08024bfc <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8024bfc:	b480      	push	{r7}
 8024bfe:	b083      	sub	sp, #12
 8024c00:	af00      	add	r7, sp, #0
 8024c02:	6078      	str	r0, [r7, #4]
 8024c04:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8024c06:	687b      	ldr	r3, [r7, #4]
 8024c08:	681a      	ldr	r2, [r3, #0]
 8024c0a:	683b      	ldr	r3, [r7, #0]
 8024c0c:	681b      	ldr	r3, [r3, #0]
 8024c0e:	429a      	cmp	r2, r3
 8024c10:	d201      	bcs.n	8024c16 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8024c12:	683b      	ldr	r3, [r7, #0]
 8024c14:	e000      	b.n	8024c18 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8024c16:	687b      	ldr	r3, [r7, #4]
    }
 8024c18:	4618      	mov	r0, r3
 8024c1a:	370c      	adds	r7, #12
 8024c1c:	46bd      	mov	sp, r7
 8024c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c22:	4770      	bx	lr

08024c24 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8024c24:	b590      	push	{r4, r7, lr}
 8024c26:	b085      	sub	sp, #20
 8024c28:	af00      	add	r7, sp, #0
 8024c2a:	6078      	str	r0, [r7, #4]
 8024c2c:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024c2e:	f107 030c 	add.w	r3, r7, #12
 8024c32:	6879      	ldr	r1, [r7, #4]
 8024c34:	4618      	mov	r0, r3
 8024c36:	f000 f82c 	bl	8024c92 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024c3a:	f107 030c 	add.w	r3, r7, #12
 8024c3e:	6839      	ldr	r1, [r7, #0]
 8024c40:	4618      	mov	r0, r3
 8024c42:	f000 ff53 	bl	8025aec <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>
 8024c46:	4604      	mov	r4, r0
 8024c48:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024c4a:	f107 030c 	add.w	r3, r7, #12
 8024c4e:	4618      	mov	r0, r3
 8024c50:	f000 f830 	bl	8024cb4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8024c54:	4623      	mov	r3, r4
      }
 8024c56:	4618      	mov	r0, r3
 8024c58:	3714      	adds	r7, #20
 8024c5a:	46bd      	mov	sp, r7
 8024c5c:	bd90      	pop	{r4, r7, pc}

08024c5e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8024c5e:	b580      	push	{r7, lr}
 8024c60:	b086      	sub	sp, #24
 8024c62:	af00      	add	r7, sp, #0
 8024c64:	60f8      	str	r0, [r7, #12]
 8024c66:	60b9      	str	r1, [r7, #8]
 8024c68:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024c6a:	68bb      	ldr	r3, [r7, #8]
 8024c6c:	617b      	str	r3, [r7, #20]
 8024c6e:	697a      	ldr	r2, [r7, #20]
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	429a      	cmp	r2, r3
 8024c74:	d209      	bcs.n	8024c8a <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 8024c76:	68f8      	ldr	r0, [r7, #12]
 8024c78:	f7ff fe46 	bl	8024908 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8024c7c:	4602      	mov	r2, r0
 8024c7e:	697b      	ldr	r3, [r7, #20]
 8024c80:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8024c82:	697b      	ldr	r3, [r7, #20]
 8024c84:	3304      	adds	r3, #4
 8024c86:	617b      	str	r3, [r7, #20]
 8024c88:	e7f1      	b.n	8024c6e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 8024c8a:	bf00      	nop
 8024c8c:	3718      	adds	r7, #24
 8024c8e:	46bd      	mov	sp, r7
 8024c90:	bd80      	pop	{r7, pc}

08024c92 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8024c92:	b580      	push	{r7, lr}
 8024c94:	b082      	sub	sp, #8
 8024c96:	af00      	add	r7, sp, #0
 8024c98:	6078      	str	r0, [r7, #4]
 8024c9a:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8024c9c:	6838      	ldr	r0, [r7, #0]
 8024c9e:	f000 fd18 	bl	80256d2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8024ca2:	4603      	mov	r3, r0
 8024ca4:	4619      	mov	r1, r3
 8024ca6:	6878      	ldr	r0, [r7, #4]
 8024ca8:	f000 ff2f 	bl	8025b0a <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>
 8024cac:	6878      	ldr	r0, [r7, #4]
 8024cae:	3708      	adds	r7, #8
 8024cb0:	46bd      	mov	sp, r7
 8024cb2:	bd80      	pop	{r7, pc}

08024cb4 <_ZNSaIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024cb4:	b580      	push	{r7, lr}
 8024cb6:	b082      	sub	sp, #8
 8024cb8:	af00      	add	r7, sp, #0
 8024cba:	6078      	str	r0, [r7, #4]
 8024cbc:	6878      	ldr	r0, [r7, #4]
 8024cbe:	f000 ff31 	bl	8025b24 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>
 8024cc2:	687b      	ldr	r3, [r7, #4]
 8024cc4:	4618      	mov	r0, r3
 8024cc6:	3708      	adds	r7, #8
 8024cc8:	46bd      	mov	sp, r7
 8024cca:	bd80      	pop	{r7, pc}

08024ccc <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8024ccc:	b580      	push	{r7, lr}
 8024cce:	b084      	sub	sp, #16
 8024cd0:	af00      	add	r7, sp, #0
 8024cd2:	60f8      	str	r0, [r7, #12]
 8024cd4:	60b9      	str	r1, [r7, #8]
 8024cd6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8024cd8:	687a      	ldr	r2, [r7, #4]
 8024cda:	68b9      	ldr	r1, [r7, #8]
 8024cdc:	68f8      	ldr	r0, [r7, #12]
 8024cde:	f000 ff2c 	bl	8025b3a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>
 8024ce2:	bf00      	nop
 8024ce4:	3710      	adds	r7, #16
 8024ce6:	46bd      	mov	sp, r7
 8024ce8:	bd80      	pop	{r7, pc}

08024cea <_ZNSt11_Deque_baseIjSaIjEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8024cea:	b580      	push	{r7, lr}
 8024cec:	b082      	sub	sp, #8
 8024cee:	af00      	add	r7, sp, #0
 8024cf0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8024cf2:	6878      	ldr	r0, [r7, #4]
 8024cf4:	f000 ff39 	bl	8025b6a <_ZNSaIjEC1Ev>
 8024cf8:	687b      	ldr	r3, [r7, #4]
 8024cfa:	4618      	mov	r0, r3
 8024cfc:	f000 ff41 	bl	8025b82 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
	{ }
 8024d00:	687b      	ldr	r3, [r7, #4]
 8024d02:	4618      	mov	r0, r3
 8024d04:	3708      	adds	r7, #8
 8024d06:	46bd      	mov	sp, r7
 8024d08:	bd80      	pop	{r7, pc}

08024d0a <_ZNSaIjED1Ev>:
 8024d0a:	b580      	push	{r7, lr}
 8024d0c:	b082      	sub	sp, #8
 8024d0e:	af00      	add	r7, sp, #0
 8024d10:	6078      	str	r0, [r7, #4]
 8024d12:	6878      	ldr	r0, [r7, #4]
 8024d14:	f000 ff4e 	bl	8025bb4 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	4618      	mov	r0, r3
 8024d1c:	3708      	adds	r7, #8
 8024d1e:	46bd      	mov	sp, r7
 8024d20:	bd80      	pop	{r7, pc}

08024d22 <_ZNSt11_Deque_baseIjSaIjEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8024d22:	b590      	push	{r4, r7, lr}
 8024d24:	b089      	sub	sp, #36	; 0x24
 8024d26:	af00      	add	r7, sp, #0
 8024d28:	6078      	str	r0, [r7, #4]
 8024d2a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8024d2c:	2004      	movs	r0, #4
 8024d2e:	f7fc f8cb 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024d32:	4602      	mov	r2, r0
 8024d34:	683b      	ldr	r3, [r7, #0]
 8024d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8024d3a:	3301      	adds	r3, #1
 8024d3c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024d3e:	2308      	movs	r3, #8
 8024d40:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8024d42:	69fb      	ldr	r3, [r7, #28]
 8024d44:	3302      	adds	r3, #2
 8024d46:	613b      	str	r3, [r7, #16]
 8024d48:	f107 0210 	add.w	r2, r7, #16
 8024d4c:	f107 030c 	add.w	r3, r7, #12
 8024d50:	4611      	mov	r1, r2
 8024d52:	4618      	mov	r0, r3
 8024d54:	f7ff ff52 	bl	8024bfc <_ZSt3maxIjERKT_S2_S2_>
 8024d58:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8024d5a:	681a      	ldr	r2, [r3, #0]
 8024d5c:	687b      	ldr	r3, [r7, #4]
 8024d5e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	685b      	ldr	r3, [r3, #4]
 8024d64:	4619      	mov	r1, r3
 8024d66:	6878      	ldr	r0, [r7, #4]
 8024d68:	f000 ff2f 	bl	8025bca <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8024d6c:	4602      	mov	r2, r0
 8024d6e:	687b      	ldr	r3, [r7, #4]
 8024d70:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024d72:	687b      	ldr	r3, [r7, #4]
 8024d74:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8024d76:	687b      	ldr	r3, [r7, #4]
 8024d78:	6859      	ldr	r1, [r3, #4]
 8024d7a:	69fb      	ldr	r3, [r7, #28]
 8024d7c:	1acb      	subs	r3, r1, r3
 8024d7e:	085b      	lsrs	r3, r3, #1
 8024d80:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8024d82:	4413      	add	r3, r2
 8024d84:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8024d86:	69fb      	ldr	r3, [r7, #28]
 8024d88:	009b      	lsls	r3, r3, #2
 8024d8a:	69ba      	ldr	r2, [r7, #24]
 8024d8c:	4413      	add	r3, r2
 8024d8e:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8024d90:	697a      	ldr	r2, [r7, #20]
 8024d92:	69b9      	ldr	r1, [r7, #24]
 8024d94:	6878      	ldr	r0, [r7, #4]
 8024d96:	f000 ff35 	bl	8025c04 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8024d9a:	687b      	ldr	r3, [r7, #4]
 8024d9c:	3308      	adds	r3, #8
 8024d9e:	69b9      	ldr	r1, [r7, #24]
 8024da0:	4618      	mov	r0, r3
 8024da2:	f000 fe2e 	bl	8025a02 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8024da6:	687b      	ldr	r3, [r7, #4]
 8024da8:	f103 0218 	add.w	r2, r3, #24
 8024dac:	697b      	ldr	r3, [r7, #20]
 8024dae:	3b04      	subs	r3, #4
 8024db0:	4619      	mov	r1, r3
 8024db2:	4610      	mov	r0, r2
 8024db4:	f000 fe25 	bl	8025a02 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8024db8:	687b      	ldr	r3, [r7, #4]
 8024dba:	68da      	ldr	r2, [r3, #12]
 8024dbc:	687b      	ldr	r3, [r7, #4]
 8024dbe:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024dc0:	687b      	ldr	r3, [r7, #4]
 8024dc2:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8024dc4:	2004      	movs	r0, #4
 8024dc6:	f7fc f87f 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8024dca:	4602      	mov	r2, r0
 8024dcc:	683b      	ldr	r3, [r7, #0]
 8024dce:	fbb3 f1f2 	udiv	r1, r3, r2
 8024dd2:	fb01 f202 	mul.w	r2, r1, r2
 8024dd6:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8024dd8:	009b      	lsls	r3, r3, #2
 8024dda:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8024ddc:	687b      	ldr	r3, [r7, #4]
 8024dde:	619a      	str	r2, [r3, #24]
    }
 8024de0:	bf00      	nop
 8024de2:	3724      	adds	r7, #36	; 0x24
 8024de4:	46bd      	mov	sp, r7
 8024de6:	bd90      	pop	{r4, r7, pc}

08024de8 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8024de8:	b580      	push	{r7, lr}
 8024dea:	b086      	sub	sp, #24
 8024dec:	af00      	add	r7, sp, #0
 8024dee:	60f8      	str	r0, [r7, #12]
 8024df0:	60b9      	str	r1, [r7, #8]
 8024df2:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024df4:	68bb      	ldr	r3, [r7, #8]
 8024df6:	617b      	str	r3, [r7, #20]
 8024df8:	697a      	ldr	r2, [r7, #20]
 8024dfa:	687b      	ldr	r3, [r7, #4]
 8024dfc:	429a      	cmp	r2, r3
 8024dfe:	d209      	bcs.n	8024e14 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x2c>
	_M_deallocate_node(*__n);
 8024e00:	697b      	ldr	r3, [r7, #20]
 8024e02:	681b      	ldr	r3, [r3, #0]
 8024e04:	4619      	mov	r1, r3
 8024e06:	68f8      	ldr	r0, [r7, #12]
 8024e08:	f000 fe14 	bl	8025a34 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8024e0c:	697b      	ldr	r3, [r7, #20]
 8024e0e:	3304      	adds	r3, #4
 8024e10:	617b      	str	r3, [r7, #20]
 8024e12:	e7f1      	b.n	8024df8 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_+0x10>
    }
 8024e14:	bf00      	nop
 8024e16:	3718      	adds	r7, #24
 8024e18:	46bd      	mov	sp, r7
 8024e1a:	bd80      	pop	{r7, pc}

08024e1c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8024e1c:	b580      	push	{r7, lr}
 8024e1e:	b086      	sub	sp, #24
 8024e20:	af00      	add	r7, sp, #0
 8024e22:	60f8      	str	r0, [r7, #12]
 8024e24:	60b9      	str	r1, [r7, #8]
 8024e26:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024e28:	f107 0314 	add.w	r3, r7, #20
 8024e2c:	68f9      	ldr	r1, [r7, #12]
 8024e2e:	4618      	mov	r0, r3
 8024e30:	f000 ff02 	bl	8025c38 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8024e34:	f107 0314 	add.w	r3, r7, #20
 8024e38:	687a      	ldr	r2, [r7, #4]
 8024e3a:	68b9      	ldr	r1, [r7, #8]
 8024e3c:	4618      	mov	r0, r3
 8024e3e:	f000 ff18 	bl	8025c72 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8024e42:	f107 0314 	add.w	r3, r7, #20
 8024e46:	4618      	mov	r0, r3
 8024e48:	f000 ff07 	bl	8025c5a <_ZNSaIPjED1Ev>
      }
 8024e4c:	bf00      	nop
 8024e4e:	3718      	adds	r7, #24
 8024e50:	46bd      	mov	sp, r7
 8024e52:	bd80      	pop	{r7, pc}

08024e54 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_data12_M_swap_dataERS4_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024e54:	b580      	push	{r7, lr}
 8024e56:	b082      	sub	sp, #8
 8024e58:	af00      	add	r7, sp, #0
 8024e5a:	6078      	str	r0, [r7, #4]
 8024e5c:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024e5e:	6839      	ldr	r1, [r7, #0]
 8024e60:	6878      	ldr	r0, [r7, #4]
 8024e62:	f000 ff15 	bl	8025c90 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
	}
 8024e66:	bf00      	nop
 8024e68:	3708      	adds	r7, #8
 8024e6a:	46bd      	mov	sp, r7
 8024e6c:	bd80      	pop	{r7, pc}

08024e6e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024e6e:	b580      	push	{r7, lr}
 8024e70:	b086      	sub	sp, #24
 8024e72:	af00      	add	r7, sp, #0
 8024e74:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024e76:	f107 0308 	add.w	r3, r7, #8
 8024e7a:	6879      	ldr	r1, [r7, #4]
 8024e7c:	4618      	mov	r0, r3
 8024e7e:	f7ff fa82 	bl	8024386 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE5beginEv>
 8024e82:	f107 0308 	add.w	r3, r7, #8
 8024e86:	4619      	mov	r1, r3
 8024e88:	6878      	ldr	r0, [r7, #4]
 8024e8a:	f7ff fcbd 	bl	8024808 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE15_M_erase_at_endESt15_Deque_iteratorIS1_RS1_PS1_E>
 8024e8e:	bf00      	nop
 8024e90:	3718      	adds	r7, #24
 8024e92:	46bd      	mov	sp, r7
 8024e94:	bd80      	pop	{r7, pc}

08024e96 <_ZSt15__alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_>:
    { }
#endif

  template<typename _Alloc>
    _GLIBCXX14_CONSTEXPR inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024e96:	b580      	push	{r7, lr}
 8024e98:	b082      	sub	sp, #8
 8024e9a:	af00      	add	r7, sp, #0
 8024e9c:	6078      	str	r0, [r7, #4]
 8024e9e:	6039      	str	r1, [r7, #0]
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
#if __cplusplus >= 201703L
      if constexpr (__pocma::value)
	__one = std::move(__two);
#else
      __do_alloc_on_move(__one, __two, __pocma());
 8024ea0:	461a      	mov	r2, r3
 8024ea2:	6839      	ldr	r1, [r7, #0]
 8024ea4:	6878      	ldr	r0, [r7, #4]
 8024ea6:	f000 ff26 	bl	8025cf6 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>
#endif
    }
 8024eaa:	bf00      	nop
 8024eac:	3708      	adds	r7, #8
 8024eae:	46bd      	mov	sp, r7
 8024eb0:	bd80      	pop	{r7, pc}

08024eb2 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8024eb2:	b580      	push	{r7, lr}
 8024eb4:	b082      	sub	sp, #8
 8024eb6:	af00      	add	r7, sp, #0
 8024eb8:	6078      	str	r0, [r7, #4]
 8024eba:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8024ebc:	6839      	ldr	r1, [r7, #0]
 8024ebe:	6878      	ldr	r0, [r7, #4]
 8024ec0:	f000 ff26 	bl	8025d10 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
	}
 8024ec4:	bf00      	nop
 8024ec6:	3708      	adds	r7, #8
 8024ec8:	46bd      	mov	sp, r7
 8024eca:	bd80      	pop	{r7, pc}

08024ecc <_ZNSt5dequeIjSaIjEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8024ecc:	b580      	push	{r7, lr}
 8024ece:	b086      	sub	sp, #24
 8024ed0:	af00      	add	r7, sp, #0
 8024ed2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8024ed4:	f107 0308 	add.w	r3, r7, #8
 8024ed8:	6879      	ldr	r1, [r7, #4]
 8024eda:	4618      	mov	r0, r3
 8024edc:	f7ff fad9 	bl	8024492 <_ZNSt5dequeIjSaIjEE5beginEv>
 8024ee0:	f107 0308 	add.w	r3, r7, #8
 8024ee4:	4619      	mov	r1, r3
 8024ee6:	6878      	ldr	r0, [r7, #4]
 8024ee8:	f000 ff45 	bl	8025d76 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>
 8024eec:	bf00      	nop
 8024eee:	3718      	adds	r7, #24
 8024ef0:	46bd      	mov	sp, r7
 8024ef2:	bd80      	pop	{r7, pc}

08024ef4 <_ZSt15__alloc_on_moveISaIjEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8024ef4:	b580      	push	{r7, lr}
 8024ef6:	b082      	sub	sp, #8
 8024ef8:	af00      	add	r7, sp, #0
 8024efa:	6078      	str	r0, [r7, #4]
 8024efc:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8024efe:	461a      	mov	r2, r3
 8024f00:	6839      	ldr	r1, [r7, #0]
 8024f02:	6878      	ldr	r0, [r7, #4]
 8024f04:	f000 ff6a 	bl	8025ddc <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>
    }
 8024f08:	bf00      	nop
 8024f0a:	3708      	adds	r7, #8
 8024f0c:	46bd      	mov	sp, r7
 8024f0e:	bd80      	pop	{r7, pc}

08024f10 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8024f10:	b480      	push	{r7}
 8024f12:	b085      	sub	sp, #20
 8024f14:	af00      	add	r7, sp, #0
 8024f16:	60f8      	str	r0, [r7, #12]
 8024f18:	60b9      	str	r1, [r7, #8]
 8024f1a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8024f1c:	68ba      	ldr	r2, [r7, #8]
 8024f1e:	68fb      	ldr	r3, [r7, #12]
 8024f20:	1ad3      	subs	r3, r2, r3
 8024f22:	109b      	asrs	r3, r3, #2
 8024f24:	4a04      	ldr	r2, [pc, #16]	; (8024f38 <_ZSt10__distanceIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E15difference_typeES5_S5_St26random_access_iterator_tag+0x28>)
 8024f26:	fb02 f303 	mul.w	r3, r2, r3
    }
 8024f2a:	4618      	mov	r0, r3
 8024f2c:	3714      	adds	r7, #20
 8024f2e:	46bd      	mov	sp, r7
 8024f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f34:	4770      	bx	lr
 8024f36:	bf00      	nop
 8024f38:	cccccccd 	.word	0xcccccccd

08024f3c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8024f3c:	b480      	push	{r7}
 8024f3e:	b085      	sub	sp, #20
 8024f40:	af00      	add	r7, sp, #0
 8024f42:	60f8      	str	r0, [r7, #12]
 8024f44:	60b9      	str	r1, [r7, #8]
 8024f46:	713a      	strb	r2, [r7, #4]
	__i += __n;
 8024f48:	68fb      	ldr	r3, [r7, #12]
 8024f4a:	6819      	ldr	r1, [r3, #0]
 8024f4c:	68ba      	ldr	r2, [r7, #8]
 8024f4e:	4613      	mov	r3, r2
 8024f50:	009b      	lsls	r3, r3, #2
 8024f52:	4413      	add	r3, r2
 8024f54:	009b      	lsls	r3, r3, #2
 8024f56:	18ca      	adds	r2, r1, r3
 8024f58:	68fb      	ldr	r3, [r7, #12]
 8024f5a:	601a      	str	r2, [r3, #0]
    }
 8024f5c:	bf00      	nop
 8024f5e:	3714      	adds	r7, #20
 8024f60:	46bd      	mov	sp, r7
 8024f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f66:	4770      	bx	lr

08024f68 <_ZSt12__miter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8024f68:	b480      	push	{r7}
 8024f6a:	b083      	sub	sp, #12
 8024f6c:	af00      	add	r7, sp, #0
 8024f6e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8024f70:	687b      	ldr	r3, [r7, #4]
 8024f72:	4618      	mov	r0, r3
 8024f74:	370c      	adds	r7, #12
 8024f76:	46bd      	mov	sp, r7
 8024f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f7c:	4770      	bx	lr

08024f7e <_ZSt13__copy_move_aILb0EPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8024f7e:	b5b0      	push	{r4, r5, r7, lr}
 8024f80:	b090      	sub	sp, #64	; 0x40
 8024f82:	af00      	add	r7, sp, #0
 8024f84:	60f8      	str	r0, [r7, #12]
 8024f86:	60b9      	str	r1, [r7, #8]
 8024f88:	607a      	str	r2, [r7, #4]
 8024f8a:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 8024f8c:	68b8      	ldr	r0, [r7, #8]
 8024f8e:	f000 ff32 	bl	8025df6 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024f92:	4604      	mov	r4, r0
 8024f94:	6878      	ldr	r0, [r7, #4]
 8024f96:	f000 ff2e 	bl	8025df6 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>
 8024f9a:	4605      	mov	r5, r0
 8024f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8024fa0:	6839      	ldr	r1, [r7, #0]
 8024fa2:	4618      	mov	r0, r3
 8024fa4:	f7ff fa0d 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8024fa8:	f107 0320 	add.w	r3, r7, #32
 8024fac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8024fb0:	4611      	mov	r1, r2
 8024fb2:	4618      	mov	r0, r3
 8024fb4:	f000 ff2a 	bl	8025e0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8024fb8:	f107 0010 	add.w	r0, r7, #16
 8024fbc:	f107 0320 	add.w	r3, r7, #32
 8024fc0:	462a      	mov	r2, r5
 8024fc2:	4621      	mov	r1, r4
 8024fc4:	f000 ff44 	bl	8025e50 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>
 8024fc8:	68fb      	ldr	r3, [r7, #12]
 8024fca:	f107 0210 	add.w	r2, r7, #16
 8024fce:	6839      	ldr	r1, [r7, #0]
 8024fd0:	4618      	mov	r0, r3
 8024fd2:	f000 ff8f 	bl	8025ef4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8024fd6:	68f8      	ldr	r0, [r7, #12]
 8024fd8:	3740      	adds	r7, #64	; 0x40
 8024fda:	46bd      	mov	sp, r7
 8024fdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08024fe0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>:
      _M_reserve_elements_at_front(size_type __n)
 8024fe0:	b580      	push	{r7, lr}
 8024fe2:	b086      	sub	sp, #24
 8024fe4:	af00      	add	r7, sp, #0
 8024fe6:	60f8      	str	r0, [r7, #12]
 8024fe8:	60b9      	str	r1, [r7, #8]
 8024fea:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8024fec:	68bb      	ldr	r3, [r7, #8]
 8024fee:	689a      	ldr	r2, [r3, #8]
				      - this->_M_impl._M_start._M_first;
 8024ff0:	68bb      	ldr	r3, [r7, #8]
 8024ff2:	68db      	ldr	r3, [r3, #12]
 8024ff4:	1ad3      	subs	r3, r2, r3
 8024ff6:	109b      	asrs	r3, r3, #2
 8024ff8:	4a0d      	ldr	r2, [pc, #52]	; (8025030 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x50>)
 8024ffa:	fb02 f303 	mul.w	r3, r2, r3
	const size_type __vacancies = this->_M_impl._M_start._M_cur
 8024ffe:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8025000:	687a      	ldr	r2, [r7, #4]
 8025002:	697b      	ldr	r3, [r7, #20]
 8025004:	429a      	cmp	r2, r3
 8025006:	d906      	bls.n	8025016 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj+0x36>
	  _M_new_elements_at_front(__n - __vacancies);
 8025008:	687a      	ldr	r2, [r7, #4]
 802500a:	697b      	ldr	r3, [r7, #20]
 802500c:	1ad3      	subs	r3, r2, r3
 802500e:	4619      	mov	r1, r3
 8025010:	68b8      	ldr	r0, [r7, #8]
 8025012:	f000 ff7d 	bl	8025f10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>
	return this->_M_impl._M_start - difference_type(__n);
 8025016:	68bb      	ldr	r3, [r7, #8]
 8025018:	f103 0108 	add.w	r1, r3, #8
 802501c:	687a      	ldr	r2, [r7, #4]
 802501e:	68fb      	ldr	r3, [r7, #12]
 8025020:	4618      	mov	r0, r3
 8025022:	f000 ffbb 	bl	8025f9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 8025026:	68f8      	ldr	r0, [r7, #12]
 8025028:	3718      	adds	r7, #24
 802502a:	46bd      	mov	sp, r7
 802502c:	bd80      	pop	{r7, pc}
 802502e:	bf00      	nop
 8025030:	cccccccd 	.word	0xcccccccd

08025034 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8025034:	b580      	push	{r7, lr}
 8025036:	b088      	sub	sp, #32
 8025038:	af00      	add	r7, sp, #0
 802503a:	60f8      	str	r0, [r7, #12]
 802503c:	60b9      	str	r1, [r7, #8]
 802503e:	607a      	str	r2, [r7, #4]
 8025040:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8025042:	f107 0310 	add.w	r3, r7, #16
 8025046:	6839      	ldr	r1, [r7, #0]
 8025048:	4618      	mov	r0, r3
 802504a:	f7ff f9ba 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802504e:	68f8      	ldr	r0, [r7, #12]
 8025050:	f107 0310 	add.w	r3, r7, #16
 8025054:	687a      	ldr	r2, [r7, #4]
 8025056:	68b9      	ldr	r1, [r7, #8]
 8025058:	f000 ffb3 	bl	8025fc2 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 802505c:	68f8      	ldr	r0, [r7, #12]
 802505e:	3720      	adds	r7, #32
 8025060:	46bd      	mov	sp, r7
 8025062:	bd80      	pop	{r7, pc}

08025064 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>:
      _M_reserve_elements_at_back(size_type __n)
 8025064:	b580      	push	{r7, lr}
 8025066:	b086      	sub	sp, #24
 8025068:	af00      	add	r7, sp, #0
 802506a:	60f8      	str	r0, [r7, #12]
 802506c:	60b9      	str	r1, [r7, #8]
 802506e:	607a      	str	r2, [r7, #4]
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8025070:	68bb      	ldr	r3, [r7, #8]
 8025072:	6a1a      	ldr	r2, [r3, #32]
				       - this->_M_impl._M_finish._M_cur) - 1;
 8025074:	68bb      	ldr	r3, [r7, #8]
 8025076:	699b      	ldr	r3, [r3, #24]
 8025078:	1ad3      	subs	r3, r2, r3
 802507a:	109b      	asrs	r3, r3, #2
 802507c:	4a0d      	ldr	r2, [pc, #52]	; (80250b4 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x50>)
 802507e:	fb02 f303 	mul.w	r3, r2, r3
 8025082:	3b01      	subs	r3, #1
	const size_type __vacancies = (this->_M_impl._M_finish._M_last
 8025084:	617b      	str	r3, [r7, #20]
	if (__n > __vacancies)
 8025086:	687a      	ldr	r2, [r7, #4]
 8025088:	697b      	ldr	r3, [r7, #20]
 802508a:	429a      	cmp	r2, r3
 802508c:	d906      	bls.n	802509c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj+0x38>
	  _M_new_elements_at_back(__n - __vacancies);
 802508e:	687a      	ldr	r2, [r7, #4]
 8025090:	697b      	ldr	r3, [r7, #20]
 8025092:	1ad3      	subs	r3, r2, r3
 8025094:	4619      	mov	r1, r3
 8025096:	68b8      	ldr	r0, [r7, #8]
 8025098:	f000 ffae 	bl	8025ff8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>
	return this->_M_impl._M_finish + difference_type(__n);
 802509c:	68bb      	ldr	r3, [r7, #8]
 802509e:	f103 0118 	add.w	r1, r3, #24
 80250a2:	687a      	ldr	r2, [r7, #4]
 80250a4:	68fb      	ldr	r3, [r7, #12]
 80250a6:	4618      	mov	r0, r3
 80250a8:	f7ff fc82 	bl	80249b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
      }
 80250ac:	68f8      	ldr	r0, [r7, #12]
 80250ae:	3718      	adds	r7, #24
 80250b0:	46bd      	mov	sp, r7
 80250b2:	bd80      	pop	{r7, pc}
 80250b4:	cccccccd 	.word	0xcccccccd

080250b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j>:
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
 80250b8:	b5b0      	push	{r4, r5, r7, lr}
 80250ba:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 80250be:	af04      	add	r7, sp, #16
 80250c0:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 80250c4:	f5a4 7427 	sub.w	r4, r4, #668	; 0x29c
 80250c8:	6020      	str	r0, [r4, #0]
 80250ca:	f507 702a 	add.w	r0, r7, #680	; 0x2a8
 80250ce:	f5a0 7028 	sub.w	r0, r0, #672	; 0x2a0
 80250d2:	6001      	str	r1, [r0, #0]
 80250d4:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80250d8:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80250dc:	600a      	str	r2, [r1, #0]
 80250de:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80250e2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80250e6:	6013      	str	r3, [r2, #0]
      _M_insert_aux(iterator __pos,
		    _ForwardIterator __first, _ForwardIterator __last,
		    size_type __n)
      {
	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 80250e8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250ec:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80250f0:	681b      	ldr	r3, [r3, #0]
 80250f2:	f103 0208 	add.w	r2, r3, #8
 80250f6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80250fa:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80250fe:	4611      	mov	r1, r2
 8025100:	6818      	ldr	r0, [r3, #0]
 8025102:	f7fe ff6b 	bl	8023fdc <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_ES6_>
 8025106:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
	const size_type __length = size();
 802510a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802510e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025112:	6818      	ldr	r0, [r3, #0]
 8025114:	f7fe fc9f 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025118:	f8c7 02a0 	str.w	r0, [r7, #672]	; 0x2a0
	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 802511c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8025120:	085a      	lsrs	r2, r3, #1
 8025122:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025126:	429a      	cmp	r2, r3
 8025128:	f240 8158 	bls.w	80253dc <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x324>
	  {
	    iterator __new_start = _M_reserve_elements_at_front(__n);
 802512c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025130:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8025134:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025138:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802513c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025140:	6819      	ldr	r1, [r3, #0]
 8025142:	f7ff ff4d 	bl	8024fe0 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE28_M_reserve_elements_at_frontEj>
	    iterator __old_start = this->_M_impl._M_start;
 8025146:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802514a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802514e:	681b      	ldr	r3, [r3, #0]
 8025150:	f103 0208 	add.w	r2, r3, #8
 8025154:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025158:	4611      	mov	r1, r2
 802515a:	4618      	mov	r0, r3
 802515c:	f7ff f931 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    __pos = this->_M_impl._M_start + __elemsbefore;
 8025160:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025164:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025168:	681b      	ldr	r3, [r3, #0]
 802516a:	f103 0108 	add.w	r1, r3, #8
 802516e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025172:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8025176:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 802517a:	4618      	mov	r0, r3
 802517c:	f7ff fc18 	bl	80249b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 8025180:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025184:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025188:	681a      	ldr	r2, [r3, #0]
 802518a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802518e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8025192:	4614      	mov	r4, r2
 8025194:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    __try
	      {
		if (__elemsbefore >= difference_type(__n))
 802519a:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 802519e:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80251a2:	429a      	cmp	r2, r3
 80251a4:	f2c0 8098 	blt.w	80252d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x220>
		  {
		    iterator __start_n = (this->_M_impl._M_start
 80251a8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251ac:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80251b0:	681b      	ldr	r3, [r3, #0]
 80251b2:	f103 0108 	add.w	r1, r3, #8
 80251b6:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80251ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80251c2:	4618      	mov	r0, r3
 80251c4:	f7ff fbf4 	bl	80249b0 <_ZStplRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
					  + difference_type(__n));
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 80251c8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80251cc:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80251d0:	681b      	ldr	r3, [r3, #0]
 80251d2:	f103 0208 	add.w	r2, r3, #8
 80251d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80251da:	4611      	mov	r1, r2
 80251dc:	4618      	mov	r0, r3
 80251de:	f7ff f8f0 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80251e2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80251e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80251ea:	4611      	mov	r1, r2
 80251ec:	4618      	mov	r0, r3
 80251ee:	f7ff f8e8 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80251f2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80251f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80251fa:	4611      	mov	r1, r2
 80251fc:	4618      	mov	r0, r3
 80251fe:	f7ff f8e0 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						__start_n, __new_start,
						_M_get_Tp_allocator());
 8025202:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025206:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802520a:	681b      	ldr	r3, [r3, #0]
 802520c:	4618      	mov	r0, r3
 802520e:	f7fe ff11 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025212:	4604      	mov	r4, r0
		    std::__uninitialized_move_a(this->_M_impl._M_start,
 8025214:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025218:	f5a3 7007 	sub.w	r0, r3, #540	; 0x21c
 802521c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8025220:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8025224:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8025228:	9400      	str	r4, [sp, #0]
 802522a:	f000 ff29 	bl	8026080 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		    this->_M_impl._M_start = __new_start;
 802522e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025232:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025236:	681b      	ldr	r3, [r3, #0]
 8025238:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802523c:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8025240:	f103 0408 	add.w	r4, r3, #8
 8025244:	4613      	mov	r3, r2
 8025246:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 802524c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8025250:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8025254:	4611      	mov	r1, r2
 8025256:	4618      	mov	r0, r3
 8025258:	f7ff f8b3 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802525c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025260:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025264:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8025268:	6819      	ldr	r1, [r3, #0]
 802526a:	4610      	mov	r0, r2
 802526c:	f7ff f8a9 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025270:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025274:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8025278:	4611      	mov	r1, r2
 802527a:	4618      	mov	r0, r3
 802527c:	f7ff f8a1 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025280:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025284:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8025288:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 802528c:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8025290:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8025294:	f000 ff2d 	bl	80260f2 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		    std::copy(__first, __last, __pos - difference_type(__n));
 8025298:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 802529c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252a0:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80252a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252a8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80252ac:	6819      	ldr	r1, [r3, #0]
 80252ae:	f000 fe75 	bl	8025f9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 80252b2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252b6:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80252ba:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80252be:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80252c2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80252c6:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 80252ca:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 80252ce:	6812      	ldr	r2, [r2, #0]
 80252d0:	6809      	ldr	r1, [r1, #0]
 80252d2:	f7ff f9f1 	bl	80246b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
			       __new_finish._M_node + 1);
	      __throw_exception_again;
	    }
	}
      }
 80252d6:	e1dd      	b.n	8025694 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		    _ForwardIterator __mid = __first;
 80252d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80252dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80252e0:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80252e4:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80252e8:	6812      	ldr	r2, [r2, #0]
 80252ea:	601a      	str	r2, [r3, #0]
		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 80252ec:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80252f0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80252f4:	1ad2      	subs	r2, r2, r3
 80252f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80252fa:	4611      	mov	r1, r2
 80252fc:	4618      	mov	r0, r3
 80252fe:	f000 ff2e 	bl	802615e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 8025302:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025306:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802530a:	681b      	ldr	r3, [r3, #0]
 802530c:	f103 0208 	add.w	r2, r3, #8
 8025310:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8025314:	4611      	mov	r1, r2
 8025316:	4618      	mov	r0, r3
 8025318:	f7ff f853 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802531c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025320:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025324:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8025328:	6819      	ldr	r1, [r3, #0]
 802532a:	4610      	mov	r0, r2
 802532c:	f7ff f849 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025330:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025334:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8025338:	681c      	ldr	r4, [r3, #0]
 802533a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802533e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8025342:	4611      	mov	r1, r2
 8025344:	4618      	mov	r0, r3
 8025346:	f7ff f83c 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						   _M_get_Tp_allocator());
 802534a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802534e:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025352:	681b      	ldr	r3, [r3, #0]
 8025354:	4618      	mov	r0, r3
 8025356:	f7fe fe6d 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 802535a:	4602      	mov	r2, r0
		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 802535c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025360:	f5a3 70be 	sub.w	r0, r3, #380	; 0x17c
 8025364:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025368:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 802536c:	f507 75a6 	add.w	r5, r7, #332	; 0x14c
 8025370:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8025374:	9202      	str	r2, [sp, #8]
 8025376:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 802537a:	9201      	str	r2, [sp, #4]
 802537c:	9400      	str	r4, [sp, #0]
 802537e:	681b      	ldr	r3, [r3, #0]
 8025380:	462a      	mov	r2, r5
 8025382:	f000 feff 	bl	8026184 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>
		    this->_M_impl._M_start = __new_start;
 8025386:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802538a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802538e:	681b      	ldr	r3, [r3, #0]
 8025390:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025394:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 8025398:	f103 0408 	add.w	r4, r3, #8
 802539c:	4613      	mov	r3, r2
 802539e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80253a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		    std::copy(__mid, __last, __old_start);
 80253a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253a8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80253ac:	681c      	ldr	r4, [r3, #0]
 80253ae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80253b2:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80253b6:	4611      	mov	r1, r2
 80253b8:	4618      	mov	r0, r3
 80253ba:	f7ff f802 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80253be:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253c2:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80253c6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80253ca:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80253ce:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80253d2:	6812      	ldr	r2, [r2, #0]
 80253d4:	4621      	mov	r1, r4
 80253d6:	f7ff f96f 	bl	80246b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 80253da:	e15b      	b.n	8025694 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 80253dc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253e0:	f5a3 701c 	sub.w	r0, r3, #624	; 0x270
 80253e4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253e8:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253ec:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 80253f0:	6819      	ldr	r1, [r3, #0]
 80253f2:	f7ff fe37 	bl	8025064 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE27_M_reserve_elements_at_backEj>
	  iterator __old_finish = this->_M_impl._M_finish;
 80253f6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80253fa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80253fe:	681b      	ldr	r3, [r3, #0]
 8025400:	f103 0218 	add.w	r2, r3, #24
 8025404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025408:	4611      	mov	r1, r2
 802540a:	4618      	mov	r0, r3
 802540c:	f7fe ffd9 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	    difference_type(__length) - __elemsbefore;
 8025410:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
	  const difference_type __elemsafter =
 8025414:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8025418:	1ad3      	subs	r3, r2, r3
 802541a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	  __pos = this->_M_impl._M_finish - __elemsafter;
 802541e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025422:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025426:	681b      	ldr	r3, [r3, #0]
 8025428:	f103 0118 	add.w	r1, r3, #24
 802542c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025430:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025434:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8025438:	4618      	mov	r0, r3
 802543a:	f000 fdaf 	bl	8025f9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
 802543e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025442:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025446:	681a      	ldr	r2, [r3, #0]
 8025448:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802544c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8025450:	4614      	mov	r4, r2
 8025452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      if (__elemsafter > difference_type(__n))
 8025458:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 802545c:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8025460:	429a      	cmp	r2, r3
 8025462:	f340 8096 	ble.w	8025592 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x4da>
		  iterator __finish_n = (this->_M_impl._M_finish
 8025466:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802546a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802546e:	681b      	ldr	r3, [r3, #0]
 8025470:	f103 0118 	add.w	r1, r3, #24
 8025474:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 8025478:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802547c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8025480:	4618      	mov	r0, r3
 8025482:	f000 fd8b 	bl	8025f9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>
		  std::__uninitialized_move_a(__finish_n,
 8025486:	f107 0218 	add.w	r2, r7, #24
 802548a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 802548e:	4611      	mov	r1, r2
 8025490:	4618      	mov	r0, r3
 8025492:	f7fe ff96 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 8025496:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802549a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80254a4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80254a8:	4611      	mov	r1, r2
 80254aa:	4618      	mov	r0, r3
 80254ac:	f7fe ff89 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      this->_M_impl._M_finish,
 80254b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254b4:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80254b8:	681b      	ldr	r3, [r3, #0]
 80254ba:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_move_a(__finish_n,
 80254be:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80254c2:	4611      	mov	r1, r2
 80254c4:	4618      	mov	r0, r3
 80254c6:	f7fe ff7c 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
					      _M_get_Tp_allocator());
 80254ca:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254ce:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80254d2:	681b      	ldr	r3, [r3, #0]
 80254d4:	4618      	mov	r0, r3
 80254d6:	f7fe fdad 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 80254da:	4604      	mov	r4, r0
		  std::__uninitialized_move_a(__finish_n,
 80254dc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254e0:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80254e4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80254e8:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 80254ec:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 80254f0:	9400      	str	r4, [sp, #0]
 80254f2:	f000 fdc5 	bl	8026080 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
		  this->_M_impl._M_finish = __new_finish;
 80254f6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80254fa:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80254fe:	681b      	ldr	r3, [r3, #0]
 8025500:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025504:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8025508:	f103 0418 	add.w	r4, r3, #24
 802550c:	4613      	mov	r3, r2
 802550e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 8025514:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025518:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 802551c:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 8025520:	6819      	ldr	r1, [r3, #0]
 8025522:	4610      	mov	r0, r2
 8025524:	f7fe ff4d 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025528:	f107 0218 	add.w	r2, r7, #24
 802552c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8025530:	4611      	mov	r1, r2
 8025532:	4618      	mov	r0, r3
 8025534:	f7fe ff45 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025538:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802553c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8025540:	4611      	mov	r1, r2
 8025542:	4618      	mov	r0, r3
 8025544:	f7fe ff3d 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025548:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 802554c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8025550:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8025554:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8025558:	f000 fe54 	bl	8026204 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>
		  std::copy(__first, __last, __pos);
 802555c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025560:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025564:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8025568:	6819      	ldr	r1, [r3, #0]
 802556a:	4610      	mov	r0, r2
 802556c:	f7fe ff29 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025570:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8025574:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8025578:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802557c:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025580:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8025584:	f5a1 7129 	sub.w	r1, r1, #676	; 0x2a4
 8025588:	6812      	ldr	r2, [r2, #0]
 802558a:	6809      	ldr	r1, [r1, #0]
 802558c:	f7ff f894 	bl	80246b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8025590:	e080      	b.n	8025694 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE13_M_insert_auxIPKS1_EEvSt15_Deque_iteratorIS1_RS1_PS1_ET_SB_j+0x5dc>
		  _ForwardIterator __mid = __first;
 8025592:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025596:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 802559a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802559e:	f5a2 7229 	sub.w	r2, r2, #676	; 0x2a4
 80255a2:	6812      	ldr	r2, [r2, #0]
 80255a4:	601a      	str	r2, [r3, #0]
		  std::advance(__mid, __elemsafter);
 80255a6:	f107 0314 	add.w	r3, r7, #20
 80255aa:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 80255ae:	4618      	mov	r0, r3
 80255b0:	f000 fdd5 	bl	802615e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80255b4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255b8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80255bc:	681c      	ldr	r4, [r3, #0]
 80255be:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255c2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80255c6:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 80255ca:	6819      	ldr	r1, [r3, #0]
 80255cc:	4610      	mov	r0, r2
 80255ce:	f7fe fef8 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80255d2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255d6:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80255da:	681b      	ldr	r3, [r3, #0]
 80255dc:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80255e0:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80255e4:	4611      	mov	r1, r2
 80255e6:	4618      	mov	r0, r3
 80255e8:	f7fe feeb 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 this->_M_impl._M_finish,
 80255ec:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80255f0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80255f4:	681b      	ldr	r3, [r3, #0]
 80255f6:	f103 0218 	add.w	r2, r3, #24
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 80255fa:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80255fe:	4611      	mov	r1, r2
 8025600:	4618      	mov	r0, r3
 8025602:	f7fe fede 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
						 _M_get_Tp_allocator());
 8025606:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802560a:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 802560e:	681b      	ldr	r3, [r3, #0]
 8025610:	4618      	mov	r0, r3
 8025612:	f7fe fd0f 	bl	8024034 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>
 8025616:	4603      	mov	r3, r0
		  std::__uninitialized_copy_move(__mid, __last, __pos,
 8025618:	f507 700f 	add.w	r0, r7, #572	; 0x23c
 802561c:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8025620:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025624:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 8025628:	9302      	str	r3, [sp, #8]
 802562a:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 802562e:	9301      	str	r3, [sp, #4]
 8025630:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8025634:	9300      	str	r3, [sp, #0]
 8025636:	460b      	mov	r3, r1
 8025638:	6812      	ldr	r2, [r2, #0]
 802563a:	4621      	mov	r1, r4
 802563c:	f000 fe18 	bl	8026270 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>
		  this->_M_impl._M_finish = __new_finish;
 8025640:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025644:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8025648:	681b      	ldr	r3, [r3, #0]
 802564a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 802564e:	f5a2 721c 	sub.w	r2, r2, #624	; 0x270
 8025652:	f103 0418 	add.w	r4, r3, #24
 8025656:	4613      	mov	r3, r2
 8025658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802565a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  std::copy(__first, __mid, __pos);
 802565e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8025662:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8025666:	681c      	ldr	r4, [r3, #0]
 8025668:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 802566c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8025670:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8025674:	6819      	ldr	r1, [r3, #0]
 8025676:	4610      	mov	r0, r2
 8025678:	f7fe fea3 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802567c:	f507 701f 	add.w	r0, r7, #636	; 0x27c
 8025680:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8025684:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8025688:	f5a2 7129 	sub.w	r1, r2, #676	; 0x2a4
 802568c:	4622      	mov	r2, r4
 802568e:	6809      	ldr	r1, [r1, #0]
 8025690:	f7ff f812 	bl	80246b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
      }
 8025694:	bf00      	nop
 8025696:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 802569a:	46bd      	mov	sp, r7
 802569c:	bdb0      	pop	{r4, r5, r7, pc}

0802569e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 802569e:	b580      	push	{r7, lr}
 80256a0:	b084      	sub	sp, #16
 80256a2:	af00      	add	r7, sp, #0
 80256a4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80256a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80256aa:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80256ac:	6878      	ldr	r0, [r7, #4]
 80256ae:	f000 fe1f 	bl	80262f0 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>
 80256b2:	4603      	mov	r3, r0
 80256b4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80256b6:	f107 0208 	add.w	r2, r7, #8
 80256ba:	f107 030c 	add.w	r3, r7, #12
 80256be:	4611      	mov	r1, r2
 80256c0:	4618      	mov	r0, r3
 80256c2:	f000 fe21 	bl	8026308 <_ZSt3minIjERKT_S2_S2_>
 80256c6:	4603      	mov	r3, r0
 80256c8:	681b      	ldr	r3, [r3, #0]
      }
 80256ca:	4618      	mov	r0, r3
 80256cc:	3710      	adds	r7, #16
 80256ce:	46bd      	mov	sp, r7
 80256d0:	bd80      	pop	{r7, pc}

080256d2 <_ZNKSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80256d2:	b480      	push	{r7}
 80256d4:	b083      	sub	sp, #12
 80256d6:	af00      	add	r7, sp, #0
 80256d8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80256da:	687b      	ldr	r3, [r7, #4]
 80256dc:	4618      	mov	r0, r3
 80256de:	370c      	adds	r7, #12
 80256e0:	46bd      	mov	sp, r7
 80256e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256e6:	4770      	bx	lr

080256e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80256e8:	b590      	push	{r4, r7, lr}
 80256ea:	b08b      	sub	sp, #44	; 0x2c
 80256ec:	af00      	add	r7, sp, #0
 80256ee:	60f8      	str	r0, [r7, #12]
 80256f0:	60b9      	str	r1, [r7, #8]
 80256f2:	4613      	mov	r3, r2
 80256f4:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80256f6:	68fb      	ldr	r3, [r7, #12]
 80256f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80256fa:	68fb      	ldr	r3, [r7, #12]
 80256fc:	695b      	ldr	r3, [r3, #20]
 80256fe:	1ad3      	subs	r3, r2, r3
 8025700:	109b      	asrs	r3, r3, #2
 8025702:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8025704:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8025706:	68bb      	ldr	r3, [r7, #8]
 8025708:	6a3a      	ldr	r2, [r7, #32]
 802570a:	4413      	add	r3, r2
 802570c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 802570e:	68fb      	ldr	r3, [r7, #12]
 8025710:	685a      	ldr	r2, [r3, #4]
 8025712:	69fb      	ldr	r3, [r7, #28]
 8025714:	005b      	lsls	r3, r3, #1
 8025716:	429a      	cmp	r2, r3
 8025718:	d92d      	bls.n	8025776 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802571a:	68fb      	ldr	r3, [r7, #12]
 802571c:	681a      	ldr	r2, [r3, #0]
 802571e:	68fb      	ldr	r3, [r7, #12]
 8025720:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8025722:	69fb      	ldr	r3, [r7, #28]
 8025724:	1acb      	subs	r3, r1, r3
 8025726:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8025728:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802572a:	79fb      	ldrb	r3, [r7, #7]
 802572c:	2b00      	cmp	r3, #0
 802572e:	d002      	beq.n	8025736 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x4e>
 8025730:	68bb      	ldr	r3, [r7, #8]
 8025732:	009b      	lsls	r3, r3, #2
 8025734:	e000      	b.n	8025738 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x50>
 8025736:	2300      	movs	r3, #0
 8025738:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 802573a:	4413      	add	r3, r2
 802573c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 802573e:	68fb      	ldr	r3, [r7, #12]
 8025740:	695b      	ldr	r3, [r3, #20]
 8025742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025744:	429a      	cmp	r2, r3
 8025746:	d209      	bcs.n	802575c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8025748:	68fb      	ldr	r3, [r7, #12]
 802574a:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 802574c:	68fb      	ldr	r3, [r7, #12]
 802574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8025750:	3304      	adds	r3, #4
 8025752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025754:	4619      	mov	r1, r3
 8025756:	f000 fdeb 	bl	8026330 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 802575a:	e048      	b.n	80257ee <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802575c:	68fb      	ldr	r3, [r7, #12]
 802575e:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8025760:	68fb      	ldr	r3, [r7, #12]
 8025762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8025764:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8025766:	6a3b      	ldr	r3, [r7, #32]
 8025768:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802576c:	4413      	add	r3, r2
 802576e:	461a      	mov	r2, r3
 8025770:	f000 fdf6 	bl	8026360 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
 8025774:	e03b      	b.n	80257ee <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8025776:	68fb      	ldr	r3, [r7, #12]
 8025778:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802577a:	68fb      	ldr	r3, [r7, #12]
 802577c:	3304      	adds	r3, #4
 802577e:	f107 0208 	add.w	r2, r7, #8
 8025782:	4611      	mov	r1, r2
 8025784:	4618      	mov	r0, r3
 8025786:	f7ff fa39 	bl	8024bfc <_ZSt3maxIjERKT_S2_S2_>
 802578a:	4603      	mov	r3, r0
 802578c:	681b      	ldr	r3, [r3, #0]
 802578e:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8025790:	3302      	adds	r3, #2
 8025792:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8025794:	68fb      	ldr	r3, [r7, #12]
 8025796:	69b9      	ldr	r1, [r7, #24]
 8025798:	4618      	mov	r0, r3
 802579a:	f7ff fa43 	bl	8024c24 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE15_M_allocate_mapEj>
 802579e:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80257a0:	69ba      	ldr	r2, [r7, #24]
 80257a2:	69fb      	ldr	r3, [r7, #28]
 80257a4:	1ad3      	subs	r3, r2, r3
 80257a6:	085b      	lsrs	r3, r3, #1
 80257a8:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80257aa:	79fb      	ldrb	r3, [r7, #7]
 80257ac:	2b00      	cmp	r3, #0
 80257ae:	d002      	beq.n	80257b6 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xce>
 80257b0:	68bb      	ldr	r3, [r7, #8]
 80257b2:	009b      	lsls	r3, r3, #2
 80257b4:	e000      	b.n	80257b8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb+0xd0>
 80257b6:	2300      	movs	r3, #0
 80257b8:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80257ba:	697a      	ldr	r2, [r7, #20]
 80257bc:	4413      	add	r3, r2
 80257be:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80257c0:	68fb      	ldr	r3, [r7, #12]
 80257c2:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80257c4:	68fb      	ldr	r3, [r7, #12]
 80257c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80257c8:	3304      	adds	r3, #4
 80257ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80257cc:	4619      	mov	r1, r3
 80257ce:	f000 fdaf 	bl	8026330 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80257d2:	68f8      	ldr	r0, [r7, #12]
 80257d4:	68fb      	ldr	r3, [r7, #12]
 80257d6:	6819      	ldr	r1, [r3, #0]
 80257d8:	68fb      	ldr	r3, [r7, #12]
 80257da:	685b      	ldr	r3, [r3, #4]
 80257dc:	461a      	mov	r2, r3
 80257de:	f7fe fdb6 	bl	802434e <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 80257e2:	68fb      	ldr	r3, [r7, #12]
 80257e4:	697a      	ldr	r2, [r7, #20]
 80257e6:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80257e8:	68fb      	ldr	r3, [r7, #12]
 80257ea:	69ba      	ldr	r2, [r7, #24]
 80257ec:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80257ee:	68fb      	ldr	r3, [r7, #12]
 80257f0:	3308      	adds	r3, #8
 80257f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80257f4:	4618      	mov	r0, r3
 80257f6:	f7ff f899 	bl	802492c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80257fa:	68fb      	ldr	r3, [r7, #12]
 80257fc:	f103 0018 	add.w	r0, r3, #24
 8025800:	6a3a      	ldr	r2, [r7, #32]
 8025802:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8025806:	4413      	add	r3, r2
 8025808:	009b      	lsls	r3, r3, #2
 802580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802580c:	4413      	add	r3, r2
 802580e:	4619      	mov	r1, r3
 8025810:	f7ff f88c 	bl	802492c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
    }
 8025814:	bf00      	nop
 8025816:	372c      	adds	r7, #44	; 0x2c
 8025818:	46bd      	mov	sp, r7
 802581a:	bd90      	pop	{r4, r7, pc}

0802581c <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 802581c:	b580      	push	{r7, lr}
 802581e:	b082      	sub	sp, #8
 8025820:	af00      	add	r7, sp, #0
 8025822:	6078      	str	r0, [r7, #4]
 8025824:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025826:	2200      	movs	r2, #0
 8025828:	6839      	ldr	r1, [r7, #0]
 802582a:	6878      	ldr	r0, [r7, #4]
 802582c:	f000 fdb0 	bl	8026390 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025830:	4603      	mov	r3, r0
 8025832:	4618      	mov	r0, r3
 8025834:	3708      	adds	r7, #8
 8025836:	46bd      	mov	sp, r7
 8025838:	bd80      	pop	{r7, pc}

0802583a <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802583a:	b580      	push	{r7, lr}
 802583c:	b084      	sub	sp, #16
 802583e:	af00      	add	r7, sp, #0
 8025840:	60f8      	str	r0, [r7, #12]
 8025842:	60b9      	str	r1, [r7, #8]
 8025844:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025846:	687a      	ldr	r2, [r7, #4]
 8025848:	68b9      	ldr	r1, [r7, #8]
 802584a:	68f8      	ldr	r0, [r7, #12]
 802584c:	f000 fdc1 	bl	80263d2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>
 8025850:	bf00      	nop
 8025852:	3710      	adds	r7, #16
 8025854:	46bd      	mov	sp, r7
 8025856:	bd80      	pop	{r7, pc}

08025858 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8025858:	b590      	push	{r4, r7, lr}
 802585a:	b085      	sub	sp, #20
 802585c:	af00      	add	r7, sp, #0
 802585e:	6078      	str	r0, [r7, #4]
 8025860:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8025862:	687b      	ldr	r3, [r7, #4]
 8025864:	681a      	ldr	r2, [r3, #0]
 8025866:	687b      	ldr	r3, [r7, #4]
 8025868:	685b      	ldr	r3, [r3, #4]
 802586a:	1ad3      	subs	r3, r2, r3
 802586c:	109b      	asrs	r3, r3, #2
 802586e:	4a2b      	ldr	r2, [pc, #172]	; (802591c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xc4>)
 8025870:	fb02 f303 	mul.w	r3, r2, r3
 8025874:	461a      	mov	r2, r3
 8025876:	683b      	ldr	r3, [r7, #0]
 8025878:	4413      	add	r3, r2
 802587a:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 802587c:	68fb      	ldr	r3, [r7, #12]
 802587e:	2b00      	cmp	r3, #0
 8025880:	db08      	blt.n	8025894 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8025882:	f7ff f882 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8025886:	4603      	mov	r3, r0
 8025888:	461a      	mov	r2, r3
 802588a:	68fb      	ldr	r3, [r7, #12]
 802588c:	4293      	cmp	r3, r2
 802588e:	da01      	bge.n	8025894 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3c>
 8025890:	2301      	movs	r3, #1
 8025892:	e000      	b.n	8025896 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x3e>
 8025894:	2300      	movs	r3, #0
 8025896:	2b00      	cmp	r3, #0
 8025898:	d00a      	beq.n	80258b0 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x58>
	  _M_cur += __n;
 802589a:	687b      	ldr	r3, [r7, #4]
 802589c:	6819      	ldr	r1, [r3, #0]
 802589e:	683a      	ldr	r2, [r7, #0]
 80258a0:	4613      	mov	r3, r2
 80258a2:	009b      	lsls	r3, r3, #2
 80258a4:	4413      	add	r3, r2
 80258a6:	009b      	lsls	r3, r3, #2
 80258a8:	18ca      	adds	r2, r1, r3
 80258aa:	687b      	ldr	r3, [r7, #4]
 80258ac:	601a      	str	r2, [r3, #0]
 80258ae:	e02f      	b.n	8025910 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80258b0:	68fb      	ldr	r3, [r7, #12]
 80258b2:	2b00      	cmp	r3, #0
 80258b4:	dd07      	ble.n	80258c6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x6e>
 80258b6:	f7ff f868 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80258ba:	4603      	mov	r3, r0
 80258bc:	461a      	mov	r2, r3
 80258be:	68fb      	ldr	r3, [r7, #12]
 80258c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80258c4:	e007      	b.n	80258d6 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 80258c6:	68fb      	ldr	r3, [r7, #12]
 80258c8:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 80258ca:	f7ff f85e 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80258ce:	4603      	mov	r3, r0
 80258d0:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80258d4:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 80258d6:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 80258d8:	687b      	ldr	r3, [r7, #4]
 80258da:	68da      	ldr	r2, [r3, #12]
 80258dc:	68bb      	ldr	r3, [r7, #8]
 80258de:	009b      	lsls	r3, r3, #2
 80258e0:	4413      	add	r3, r2
 80258e2:	4619      	mov	r1, r3
 80258e4:	6878      	ldr	r0, [r7, #4]
 80258e6:	f7ff f821 	bl	802492c <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_first + (__offset - __node_offset
 80258ea:	687b      	ldr	r3, [r7, #4]
 80258ec:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 80258ee:	f7ff f84c 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80258f2:	4603      	mov	r3, r0
 80258f4:	461a      	mov	r2, r3
 80258f6:	68bb      	ldr	r3, [r7, #8]
 80258f8:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 80258fc:	68fa      	ldr	r2, [r7, #12]
 80258fe:	1ad3      	subs	r3, r2, r3
 8025900:	461a      	mov	r2, r3
 8025902:	4613      	mov	r3, r2
 8025904:	009b      	lsls	r3, r3, #2
 8025906:	4413      	add	r3, r2
 8025908:	009b      	lsls	r3, r3, #2
 802590a:	18e2      	adds	r2, r4, r3
 802590c:	687b      	ldr	r3, [r7, #4]
 802590e:	601a      	str	r2, [r3, #0]
	return *this;
 8025910:	687b      	ldr	r3, [r7, #4]
      }
 8025912:	4618      	mov	r0, r3
 8025914:	3714      	adds	r7, #20
 8025916:	46bd      	mov	sp, r7
 8025918:	bd90      	pop	{r4, r7, pc}
 802591a:	bf00      	nop
 802591c:	cccccccd 	.word	0xcccccccd

08025920 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8025920:	b480      	push	{r7}
 8025922:	b083      	sub	sp, #12
 8025924:	af00      	add	r7, sp, #0
 8025926:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8025928:	687b      	ldr	r3, [r7, #4]
 802592a:	4618      	mov	r0, r3
 802592c:	370c      	adds	r7, #12
 802592e:	46bd      	mov	sp, r7
 8025930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025934:	4770      	bx	lr

08025936 <_ZN9__gnu_cxx13new_allocatorIjE9constructIjJRKjEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8025936:	b590      	push	{r4, r7, lr}
 8025938:	b085      	sub	sp, #20
 802593a:	af00      	add	r7, sp, #0
 802593c:	60f8      	str	r0, [r7, #12]
 802593e:	60b9      	str	r1, [r7, #8]
 8025940:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8025942:	6878      	ldr	r0, [r7, #4]
 8025944:	f7ff ffec 	bl	8025920 <_ZSt7forwardIRKjEOT_RNSt16remove_referenceIS2_E4typeE>
 8025948:	4603      	mov	r3, r0
 802594a:	681c      	ldr	r4, [r3, #0]
 802594c:	68bb      	ldr	r3, [r7, #8]
 802594e:	4619      	mov	r1, r3
 8025950:	2004      	movs	r0, #4
 8025952:	f7fb faad 	bl	8020eb0 <_ZnwjPv>
 8025956:	4603      	mov	r3, r0
 8025958:	601c      	str	r4, [r3, #0]
 802595a:	bf00      	nop
 802595c:	3714      	adds	r7, #20
 802595e:	46bd      	mov	sp, r7
 8025960:	bd90      	pop	{r4, r7, pc}

08025962 <_ZNKSt5dequeIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8025962:	b580      	push	{r7, lr}
 8025964:	b082      	sub	sp, #8
 8025966:	af00      	add	r7, sp, #0
 8025968:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 802596a:	687b      	ldr	r3, [r7, #4]
 802596c:	f103 0218 	add.w	r2, r3, #24
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	3308      	adds	r3, #8
 8025974:	4619      	mov	r1, r3
 8025976:	4610      	mov	r0, r2
 8025978:	f000 fd3e 	bl	80263f8 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>
 802597c:	4603      	mov	r3, r0
 802597e:	4618      	mov	r0, r3
 8025980:	3708      	adds	r7, #8
 8025982:	46bd      	mov	sp, r7
 8025984:	bd80      	pop	{r7, pc}

08025986 <_ZNKSt5dequeIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8025986:	b580      	push	{r7, lr}
 8025988:	b082      	sub	sp, #8
 802598a:	af00      	add	r7, sp, #0
 802598c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 802598e:	687b      	ldr	r3, [r7, #4]
 8025990:	4618      	mov	r0, r3
 8025992:	f000 fd6f 	bl	8026474 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025996:	4603      	mov	r3, r0
 8025998:	4618      	mov	r0, r3
 802599a:	f000 fd51 	bl	8026440 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>
 802599e:	4603      	mov	r3, r0
 80259a0:	4618      	mov	r0, r3
 80259a2:	3708      	adds	r7, #8
 80259a4:	46bd      	mov	sp, r7
 80259a6:	bd80      	pop	{r7, pc}

080259a8 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80259a8:	b580      	push	{r7, lr}
 80259aa:	b082      	sub	sp, #8
 80259ac:	af00      	add	r7, sp, #0
 80259ae:	6078      	str	r0, [r7, #4]
 80259b0:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80259b2:	683b      	ldr	r3, [r7, #0]
 80259b4:	1c5a      	adds	r2, r3, #1
 80259b6:	687b      	ldr	r3, [r7, #4]
 80259b8:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80259ba:	6879      	ldr	r1, [r7, #4]
 80259bc:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80259be:	6879      	ldr	r1, [r7, #4]
 80259c0:	6809      	ldr	r1, [r1, #0]
 80259c2:	1a41      	subs	r1, r0, r1
 80259c4:	1089      	asrs	r1, r1, #2
 80259c6:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80259c8:	429a      	cmp	r2, r3
 80259ca:	d904      	bls.n	80259d6 <_ZNSt5dequeIjSaIjEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80259cc:	2200      	movs	r2, #0
 80259ce:	6839      	ldr	r1, [r7, #0]
 80259d0:	6878      	ldr	r0, [r7, #4]
 80259d2:	f000 fd5a 	bl	802648a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>
      }
 80259d6:	bf00      	nop
 80259d8:	3708      	adds	r7, #8
 80259da:	46bd      	mov	sp, r7
 80259dc:	bd80      	pop	{r7, pc}

080259de <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80259de:	b590      	push	{r4, r7, lr}
 80259e0:	b083      	sub	sp, #12
 80259e2:	af00      	add	r7, sp, #0
 80259e4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80259e6:	687c      	ldr	r4, [r7, #4]
 80259e8:	2004      	movs	r0, #4
 80259ea:	f7fb fa6d 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80259ee:	4603      	mov	r3, r0
 80259f0:	4619      	mov	r1, r3
 80259f2:	4620      	mov	r0, r4
 80259f4:	f000 fde3 	bl	80265be <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 80259f8:	4603      	mov	r3, r0
      }
 80259fa:	4618      	mov	r0, r3
 80259fc:	370c      	adds	r7, #12
 80259fe:	46bd      	mov	sp, r7
 8025a00:	bd90      	pop	{r4, r7, pc}

08025a02 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8025a02:	b590      	push	{r4, r7, lr}
 8025a04:	b083      	sub	sp, #12
 8025a06:	af00      	add	r7, sp, #0
 8025a08:	6078      	str	r0, [r7, #4]
 8025a0a:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8025a0c:	687b      	ldr	r3, [r7, #4]
 8025a0e:	683a      	ldr	r2, [r7, #0]
 8025a10:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8025a12:	683b      	ldr	r3, [r7, #0]
 8025a14:	681a      	ldr	r2, [r3, #0]
 8025a16:	687b      	ldr	r3, [r7, #4]
 8025a18:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8025a1a:	687b      	ldr	r3, [r7, #4]
 8025a1c:	685c      	ldr	r4, [r3, #4]
 8025a1e:	f000 fddd 	bl	80265dc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8025a22:	4603      	mov	r3, r0
 8025a24:	009b      	lsls	r3, r3, #2
 8025a26:	18e2      	adds	r2, r4, r3
 8025a28:	687b      	ldr	r3, [r7, #4]
 8025a2a:	609a      	str	r2, [r3, #8]
      }
 8025a2c:	bf00      	nop
 8025a2e:	370c      	adds	r7, #12
 8025a30:	46bd      	mov	sp, r7
 8025a32:	bd90      	pop	{r4, r7, pc}

08025a34 <_ZNSt11_Deque_baseIjSaIjEE18_M_deallocate_nodeEPj>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8025a34:	b590      	push	{r4, r7, lr}
 8025a36:	b083      	sub	sp, #12
 8025a38:	af00      	add	r7, sp, #0
 8025a3a:	6078      	str	r0, [r7, #4]
 8025a3c:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8025a3e:	687c      	ldr	r4, [r7, #4]
 8025a40:	2004      	movs	r0, #4
 8025a42:	f7fb fa41 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025a46:	4603      	mov	r3, r0
 8025a48:	461a      	mov	r2, r3
 8025a4a:	6839      	ldr	r1, [r7, #0]
 8025a4c:	4620      	mov	r0, r4
 8025a4e:	f000 fdcd 	bl	80265ec <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 8025a52:	bf00      	nop
 8025a54:	370c      	adds	r7, #12
 8025a56:	46bd      	mov	sp, r7
 8025a58:	bd90      	pop	{r4, r7, pc}

08025a5a <_ZNSt15_Deque_iteratorIjRKjPS0_EC1IS_IjRjPjEvEERKT_>:
       _Deque_iterator(const _Iter& __x) noexcept
 8025a5a:	b480      	push	{r7}
 8025a5c:	b083      	sub	sp, #12
 8025a5e:	af00      	add	r7, sp, #0
 8025a60:	6078      	str	r0, [r7, #4]
 8025a62:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025a64:	683b      	ldr	r3, [r7, #0]
 8025a66:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025a68:	687b      	ldr	r3, [r7, #4]
 8025a6a:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8025a6c:	683b      	ldr	r3, [r7, #0]
 8025a6e:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8025a70:	687b      	ldr	r3, [r7, #4]
 8025a72:	605a      	str	r2, [r3, #4]
 8025a74:	683b      	ldr	r3, [r7, #0]
 8025a76:	689a      	ldr	r2, [r3, #8]
 8025a78:	687b      	ldr	r3, [r7, #4]
 8025a7a:	609a      	str	r2, [r3, #8]
 8025a7c:	683b      	ldr	r3, [r7, #0]
 8025a7e:	68da      	ldr	r2, [r3, #12]
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	60da      	str	r2, [r3, #12]
 8025a84:	687b      	ldr	r3, [r7, #4]
 8025a86:	4618      	mov	r0, r3
 8025a88:	370c      	adds	r7, #12
 8025a8a:	46bd      	mov	sp, r7
 8025a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a90:	4770      	bx	lr

08025a92 <_ZN9__gnu_cxx13new_allocatorIjE7destroyIjEEvPT_>:
	destroy(_Up* __p)
 8025a92:	b480      	push	{r7}
 8025a94:	b083      	sub	sp, #12
 8025a96:	af00      	add	r7, sp, #0
 8025a98:	6078      	str	r0, [r7, #4]
 8025a9a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8025a9c:	bf00      	nop
 8025a9e:	370c      	adds	r7, #12
 8025aa0:	46bd      	mov	sp, r7
 8025aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025aa6:	4770      	bx	lr

08025aa8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025aa8:	b480      	push	{r7}
 8025aaa:	b083      	sub	sp, #12
 8025aac:	af00      	add	r7, sp, #0
 8025aae:	6078      	str	r0, [r7, #4]
 8025ab0:	687b      	ldr	r3, [r7, #4]
 8025ab2:	4618      	mov	r0, r3
 8025ab4:	370c      	adds	r7, #12
 8025ab6:	46bd      	mov	sp, r7
 8025ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025abc:	4770      	bx	lr

08025abe <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8025abe:	b480      	push	{r7}
 8025ac0:	b083      	sub	sp, #12
 8025ac2:	af00      	add	r7, sp, #0
 8025ac4:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8025ac6:	687b      	ldr	r3, [r7, #4]
 8025ac8:	2200      	movs	r2, #0
 8025aca:	601a      	str	r2, [r3, #0]
 8025acc:	687b      	ldr	r3, [r7, #4]
 8025ace:	2200      	movs	r2, #0
 8025ad0:	605a      	str	r2, [r3, #4]
 8025ad2:	687b      	ldr	r3, [r7, #4]
 8025ad4:	2200      	movs	r2, #0
 8025ad6:	609a      	str	r2, [r3, #8]
 8025ad8:	687b      	ldr	r3, [r7, #4]
 8025ada:	2200      	movs	r2, #0
 8025adc:	60da      	str	r2, [r3, #12]
 8025ade:	687b      	ldr	r3, [r7, #4]
 8025ae0:	4618      	mov	r0, r3
 8025ae2:	370c      	adds	r7, #12
 8025ae4:	46bd      	mov	sp, r7
 8025ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025aea:	4770      	bx	lr

08025aec <_ZNSt16allocator_traitsISaIPN10BHYWrapper8BHYFrameEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8025aec:	b580      	push	{r7, lr}
 8025aee:	b082      	sub	sp, #8
 8025af0:	af00      	add	r7, sp, #0
 8025af2:	6078      	str	r0, [r7, #4]
 8025af4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8025af6:	2200      	movs	r2, #0
 8025af8:	6839      	ldr	r1, [r7, #0]
 8025afa:	6878      	ldr	r0, [r7, #4]
 8025afc:	f000 fd85 	bl	802660a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>
 8025b00:	4603      	mov	r3, r0
 8025b02:	4618      	mov	r0, r3
 8025b04:	3708      	adds	r7, #8
 8025b06:	46bd      	mov	sp, r7
 8025b08:	bd80      	pop	{r7, pc}

08025b0a <_ZNSaIPN10BHYWrapper8BHYFrameEEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8025b0a:	b580      	push	{r7, lr}
 8025b0c:	b082      	sub	sp, #8
 8025b0e:	af00      	add	r7, sp, #0
 8025b10:	6078      	str	r0, [r7, #4]
 8025b12:	6039      	str	r1, [r7, #0]
 8025b14:	6878      	ldr	r0, [r7, #4]
 8025b16:	f000 fd96 	bl	8026646 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>
 8025b1a:	687b      	ldr	r3, [r7, #4]
 8025b1c:	4618      	mov	r0, r3
 8025b1e:	3708      	adds	r7, #8
 8025b20:	46bd      	mov	sp, r7
 8025b22:	bd80      	pop	{r7, pc}

08025b24 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025b24:	b480      	push	{r7}
 8025b26:	b083      	sub	sp, #12
 8025b28:	af00      	add	r7, sp, #0
 8025b2a:	6078      	str	r0, [r7, #4]
 8025b2c:	687b      	ldr	r3, [r7, #4]
 8025b2e:	4618      	mov	r0, r3
 8025b30:	370c      	adds	r7, #12
 8025b32:	46bd      	mov	sp, r7
 8025b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b38:	4770      	bx	lr

08025b3a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8025b3a:	b580      	push	{r7, lr}
 8025b3c:	b084      	sub	sp, #16
 8025b3e:	af00      	add	r7, sp, #0
 8025b40:	60f8      	str	r0, [r7, #12]
 8025b42:	60b9      	str	r1, [r7, #8]
 8025b44:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025b46:	687b      	ldr	r3, [r7, #4]
 8025b48:	009b      	lsls	r3, r3, #2
 8025b4a:	4619      	mov	r1, r3
 8025b4c:	68b8      	ldr	r0, [r7, #8]
 8025b4e:	f016 f8e9 	bl	803bd24 <_ZdlPvj>
      }
 8025b52:	bf00      	nop
 8025b54:	3710      	adds	r7, #16
 8025b56:	46bd      	mov	sp, r7
 8025b58:	bd80      	pop	{r7, pc}

08025b5a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8025b5a:	b580      	push	{r7, lr}
 8025b5c:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8025b5e:	2014      	movs	r0, #20
 8025b60:	f7fb f9b2 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 8025b64:	4603      	mov	r3, r0
 8025b66:	4618      	mov	r0, r3
 8025b68:	bd80      	pop	{r7, pc}

08025b6a <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8025b6a:	b580      	push	{r7, lr}
 8025b6c:	b082      	sub	sp, #8
 8025b6e:	af00      	add	r7, sp, #0
 8025b70:	6078      	str	r0, [r7, #4]
 8025b72:	6878      	ldr	r0, [r7, #4]
 8025b74:	f000 fd72 	bl	802665c <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 8025b78:	687b      	ldr	r3, [r7, #4]
 8025b7a:	4618      	mov	r0, r3
 8025b7c:	3708      	adds	r7, #8
 8025b7e:	46bd      	mov	sp, r7
 8025b80:	bd80      	pop	{r7, pc}

08025b82 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8025b82:	b580      	push	{r7, lr}
 8025b84:	b082      	sub	sp, #8
 8025b86:	af00      	add	r7, sp, #0
 8025b88:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8025b8a:	687b      	ldr	r3, [r7, #4]
 8025b8c:	2200      	movs	r2, #0
 8025b8e:	601a      	str	r2, [r3, #0]
 8025b90:	687b      	ldr	r3, [r7, #4]
 8025b92:	2200      	movs	r2, #0
 8025b94:	605a      	str	r2, [r3, #4]
 8025b96:	687b      	ldr	r3, [r7, #4]
 8025b98:	3308      	adds	r3, #8
 8025b9a:	4618      	mov	r0, r3
 8025b9c:	f000 fd69 	bl	8026672 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	3318      	adds	r3, #24
 8025ba4:	4618      	mov	r0, r3
 8025ba6:	f000 fd64 	bl	8026672 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>
	{ }
 8025baa:	687b      	ldr	r3, [r7, #4]
 8025bac:	4618      	mov	r0, r3
 8025bae:	3708      	adds	r7, #8
 8025bb0:	46bd      	mov	sp, r7
 8025bb2:	bd80      	pop	{r7, pc}

08025bb4 <_ZN9__gnu_cxx13new_allocatorIjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025bb4:	b480      	push	{r7}
 8025bb6:	b083      	sub	sp, #12
 8025bb8:	af00      	add	r7, sp, #0
 8025bba:	6078      	str	r0, [r7, #4]
 8025bbc:	687b      	ldr	r3, [r7, #4]
 8025bbe:	4618      	mov	r0, r3
 8025bc0:	370c      	adds	r7, #12
 8025bc2:	46bd      	mov	sp, r7
 8025bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bc8:	4770      	bx	lr

08025bca <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8025bca:	b590      	push	{r4, r7, lr}
 8025bcc:	b085      	sub	sp, #20
 8025bce:	af00      	add	r7, sp, #0
 8025bd0:	6078      	str	r0, [r7, #4]
 8025bd2:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025bd4:	f107 030c 	add.w	r3, r7, #12
 8025bd8:	6879      	ldr	r1, [r7, #4]
 8025bda:	4618      	mov	r0, r3
 8025bdc:	f000 f82c 	bl	8025c38 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025be0:	f107 030c 	add.w	r3, r7, #12
 8025be4:	6839      	ldr	r1, [r7, #0]
 8025be6:	4618      	mov	r0, r3
 8025be8:	f000 fd5a 	bl	80266a0 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>
 8025bec:	4604      	mov	r4, r0
 8025bee:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8025bf0:	f107 030c 	add.w	r3, r7, #12
 8025bf4:	4618      	mov	r0, r3
 8025bf6:	f000 f830 	bl	8025c5a <_ZNSaIPjED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8025bfa:	4623      	mov	r3, r4
      }
 8025bfc:	4618      	mov	r0, r3
 8025bfe:	3714      	adds	r7, #20
 8025c00:	46bd      	mov	sp, r7
 8025c02:	bd90      	pop	{r4, r7, pc}

08025c04 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_>:
    _Deque_base<_Tp, _Alloc>::
 8025c04:	b580      	push	{r7, lr}
 8025c06:	b086      	sub	sp, #24
 8025c08:	af00      	add	r7, sp, #0
 8025c0a:	60f8      	str	r0, [r7, #12]
 8025c0c:	60b9      	str	r1, [r7, #8]
 8025c0e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025c10:	68bb      	ldr	r3, [r7, #8]
 8025c12:	617b      	str	r3, [r7, #20]
 8025c14:	697a      	ldr	r2, [r7, #20]
 8025c16:	687b      	ldr	r3, [r7, #4]
 8025c18:	429a      	cmp	r2, r3
 8025c1a:	d209      	bcs.n	8025c30 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8025c1c:	68f8      	ldr	r0, [r7, #12]
 8025c1e:	f7ff fede 	bl	80259de <_ZNSt11_Deque_baseIjSaIjEE16_M_allocate_nodeEv>
 8025c22:	4602      	mov	r2, r0
 8025c24:	697b      	ldr	r3, [r7, #20]
 8025c26:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8025c28:	697b      	ldr	r3, [r7, #20]
 8025c2a:	3304      	adds	r3, #4
 8025c2c:	617b      	str	r3, [r7, #20]
 8025c2e:	e7f1      	b.n	8025c14 <_ZNSt11_Deque_baseIjSaIjEE15_M_create_nodesEPPjS3_+0x10>
    }
 8025c30:	bf00      	nop
 8025c32:	3718      	adds	r7, #24
 8025c34:	46bd      	mov	sp, r7
 8025c36:	bd80      	pop	{r7, pc}

08025c38 <_ZNKSt11_Deque_baseIjSaIjEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8025c38:	b580      	push	{r7, lr}
 8025c3a:	b082      	sub	sp, #8
 8025c3c:	af00      	add	r7, sp, #0
 8025c3e:	6078      	str	r0, [r7, #4]
 8025c40:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8025c42:	6838      	ldr	r0, [r7, #0]
 8025c44:	f000 fc16 	bl	8026474 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025c48:	4603      	mov	r3, r0
 8025c4a:	4619      	mov	r1, r3
 8025c4c:	6878      	ldr	r0, [r7, #4]
 8025c4e:	f000 fd36 	bl	80266be <_ZNSaIPjEC1IjEERKSaIT_E>
 8025c52:	6878      	ldr	r0, [r7, #4]
 8025c54:	3708      	adds	r7, #8
 8025c56:	46bd      	mov	sp, r7
 8025c58:	bd80      	pop	{r7, pc}

08025c5a <_ZNSaIPjED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8025c5a:	b580      	push	{r7, lr}
 8025c5c:	b082      	sub	sp, #8
 8025c5e:	af00      	add	r7, sp, #0
 8025c60:	6078      	str	r0, [r7, #4]
 8025c62:	6878      	ldr	r0, [r7, #4]
 8025c64:	f000 fd38 	bl	80266d8 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>
 8025c68:	687b      	ldr	r3, [r7, #4]
 8025c6a:	4618      	mov	r0, r3
 8025c6c:	3708      	adds	r7, #8
 8025c6e:	46bd      	mov	sp, r7
 8025c70:	bd80      	pop	{r7, pc}

08025c72 <_ZNSt16allocator_traitsISaIPjEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025c72:	b580      	push	{r7, lr}
 8025c74:	b084      	sub	sp, #16
 8025c76:	af00      	add	r7, sp, #0
 8025c78:	60f8      	str	r0, [r7, #12]
 8025c7a:	60b9      	str	r1, [r7, #8]
 8025c7c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8025c7e:	687a      	ldr	r2, [r7, #4]
 8025c80:	68b9      	ldr	r1, [r7, #8]
 8025c82:	68f8      	ldr	r0, [r7, #12]
 8025c84:	f000 fd33 	bl	80266ee <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>
 8025c88:	bf00      	nop
 8025c8a:	3710      	adds	r7, #16
 8025c8c:	46bd      	mov	sp, r7
 8025c8e:	bd80      	pop	{r7, pc}

08025c90 <_ZSt4swapINSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8025c90:	b5b0      	push	{r4, r5, r7, lr}
 8025c92:	b08c      	sub	sp, #48	; 0x30
 8025c94:	af00      	add	r7, sp, #0
 8025c96:	6078      	str	r0, [r7, #4]
 8025c98:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025c9a:	6878      	ldr	r0, [r7, #4]
 8025c9c:	f000 fd37 	bl	802670e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025ca0:	4602      	mov	r2, r0
 8025ca2:	f107 0308 	add.w	r3, r7, #8
 8025ca6:	4611      	mov	r1, r2
 8025ca8:	4618      	mov	r0, r3
 8025caa:	f000 fd5f 	bl	802676c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>
      __a = _GLIBCXX_MOVE(__b);
 8025cae:	6838      	ldr	r0, [r7, #0]
 8025cb0:	f000 fd2d 	bl	802670e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025cb4:	4602      	mov	r2, r0
 8025cb6:	687b      	ldr	r3, [r7, #4]
 8025cb8:	461c      	mov	r4, r3
 8025cba:	4615      	mov	r5, r2
 8025cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025cc4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025cc8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025ccc:	f107 0308 	add.w	r3, r7, #8
 8025cd0:	4618      	mov	r0, r3
 8025cd2:	f000 fd1c 	bl	802670e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>
 8025cd6:	4602      	mov	r2, r0
 8025cd8:	683b      	ldr	r3, [r7, #0]
 8025cda:	461c      	mov	r4, r3
 8025cdc:	4615      	mov	r5, r2
 8025cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025ce6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025cea:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025cee:	bf00      	nop
 8025cf0:	3730      	adds	r7, #48	; 0x30
 8025cf2:	46bd      	mov	sp, r7
 8025cf4:	bdb0      	pop	{r4, r5, r7, pc}

08025cf6 <_ZSt18__do_alloc_on_moveISaIN10BHYWrapper8BHYFrameEEEvRT_S4_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025cf6:	b580      	push	{r7, lr}
 8025cf8:	b084      	sub	sp, #16
 8025cfa:	af00      	add	r7, sp, #0
 8025cfc:	60f8      	str	r0, [r7, #12]
 8025cfe:	60b9      	str	r1, [r7, #8]
 8025d00:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025d02:	68b8      	ldr	r0, [r7, #8]
 8025d04:	f000 fd51 	bl	80267aa <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>
 8025d08:	bf00      	nop
 8025d0a:	3710      	adds	r7, #16
 8025d0c:	46bd      	mov	sp, r7
 8025d0e:	bd80      	pop	{r7, pc}

08025d10 <_ZSt4swapINSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8025d10:	b5b0      	push	{r4, r5, r7, lr}
 8025d12:	b08c      	sub	sp, #48	; 0x30
 8025d14:	af00      	add	r7, sp, #0
 8025d16:	6078      	str	r0, [r7, #4]
 8025d18:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8025d1a:	6878      	ldr	r0, [r7, #4]
 8025d1c:	f000 fd50 	bl	80267c0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025d20:	4602      	mov	r2, r0
 8025d22:	f107 0308 	add.w	r3, r7, #8
 8025d26:	4611      	mov	r1, r2
 8025d28:	4618      	mov	r0, r3
 8025d2a:	f000 fd78 	bl	802681e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 8025d2e:	6838      	ldr	r0, [r7, #0]
 8025d30:	f000 fd46 	bl	80267c0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025d34:	4602      	mov	r2, r0
 8025d36:	687b      	ldr	r3, [r7, #4]
 8025d38:	461c      	mov	r4, r3
 8025d3a:	4615      	mov	r5, r2
 8025d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d48:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8025d4c:	f107 0308 	add.w	r3, r7, #8
 8025d50:	4618      	mov	r0, r3
 8025d52:	f000 fd35 	bl	80267c0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>
 8025d56:	4602      	mov	r2, r0
 8025d58:	683b      	ldr	r3, [r7, #0]
 8025d5a:	461c      	mov	r4, r3
 8025d5c:	4615      	mov	r5, r2
 8025d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8025d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8025d66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8025d6a:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 8025d6e:	bf00      	nop
 8025d70:	3730      	adds	r7, #48	; 0x30
 8025d72:	46bd      	mov	sp, r7
 8025d74:	bdb0      	pop	{r4, r5, r7, pc}

08025d76 <_ZNSt5dequeIjSaIjEE15_M_erase_at_endESt15_Deque_iteratorIjRjPjE>:
      _M_erase_at_end(iterator __pos)
 8025d76:	b590      	push	{r4, r7, lr}
 8025d78:	b08b      	sub	sp, #44	; 0x2c
 8025d7a:	af00      	add	r7, sp, #0
 8025d7c:	6078      	str	r0, [r7, #4]
 8025d7e:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8025d80:	f107 0308 	add.w	r3, r7, #8
 8025d84:	6839      	ldr	r1, [r7, #0]
 8025d86:	4618      	mov	r0, r3
 8025d88:	f7fe fbac 	bl	80244e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8025d8c:	f107 0318 	add.w	r3, r7, #24
 8025d90:	6879      	ldr	r1, [r7, #4]
 8025d92:	4618      	mov	r0, r3
 8025d94:	f7fe fb8c 	bl	80244b0 <_ZNSt5dequeIjSaIjEE3endEv>
 8025d98:	687b      	ldr	r3, [r7, #4]
 8025d9a:	4618      	mov	r0, r3
 8025d9c:	f7fe fb97 	bl	80244ce <_ZNSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 8025da0:	4603      	mov	r3, r0
 8025da2:	f107 0218 	add.w	r2, r7, #24
 8025da6:	f107 0108 	add.w	r1, r7, #8
 8025daa:	6878      	ldr	r0, [r7, #4]
 8025dac:	f7fe fbb6 	bl	802451c <_ZNSt5dequeIjSaIjEE15_M_destroy_dataESt15_Deque_iteratorIjRjPjES5_RKS0_>
	_M_destroy_nodes(__pos._M_node + 1,
 8025db0:	6878      	ldr	r0, [r7, #4]
 8025db2:	683b      	ldr	r3, [r7, #0]
 8025db4:	68db      	ldr	r3, [r3, #12]
 8025db6:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8025db8:	687b      	ldr	r3, [r7, #4]
 8025dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8025dbc:	3304      	adds	r3, #4
 8025dbe:	461a      	mov	r2, r3
 8025dc0:	f7ff f812 	bl	8024de8 <_ZNSt11_Deque_baseIjSaIjEE16_M_destroy_nodesEPPjS3_>
	this->_M_impl._M_finish = __pos;
 8025dc4:	687b      	ldr	r3, [r7, #4]
 8025dc6:	683a      	ldr	r2, [r7, #0]
 8025dc8:	f103 0418 	add.w	r4, r3, #24
 8025dcc:	4613      	mov	r3, r2
 8025dce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8025dd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8025dd4:	bf00      	nop
 8025dd6:	372c      	adds	r7, #44	; 0x2c
 8025dd8:	46bd      	mov	sp, r7
 8025dda:	bd90      	pop	{r4, r7, pc}

08025ddc <_ZSt18__do_alloc_on_moveISaIjEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8025ddc:	b580      	push	{r7, lr}
 8025dde:	b084      	sub	sp, #16
 8025de0:	af00      	add	r7, sp, #0
 8025de2:	60f8      	str	r0, [r7, #12]
 8025de4:	60b9      	str	r1, [r7, #8]
 8025de6:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8025de8:	68b8      	ldr	r0, [r7, #8]
 8025dea:	f000 fd37 	bl	802685c <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>
 8025dee:	bf00      	nop
 8025df0:	3710      	adds	r7, #16
 8025df2:	46bd      	mov	sp, r7
 8025df4:	bd80      	pop	{r7, pc}

08025df6 <_ZSt12__niter_baseIPKN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8025df6:	b480      	push	{r7}
 8025df8:	b083      	sub	sp, #12
 8025dfa:	af00      	add	r7, sp, #0
 8025dfc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8025dfe:	687b      	ldr	r3, [r7, #4]
 8025e00:	4618      	mov	r0, r3
 8025e02:	370c      	adds	r7, #12
 8025e04:	46bd      	mov	sp, r7
 8025e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e0a:	4770      	bx	lr

08025e0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __niter_base(_Iterator __it)
 8025e0c:	b580      	push	{r7, lr}
 8025e0e:	b082      	sub	sp, #8
 8025e10:	af00      	add	r7, sp, #0
 8025e12:	6078      	str	r0, [r7, #4]
 8025e14:	6039      	str	r1, [r7, #0]
    { return __it; }
 8025e16:	6839      	ldr	r1, [r7, #0]
 8025e18:	6878      	ldr	r0, [r7, #4]
 8025e1a:	f7fe fad2 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025e1e:	6878      	ldr	r0, [r7, #4]
 8025e20:	3708      	adds	r7, #8
 8025e22:	46bd      	mov	sp, r7
 8025e24:	bd80      	pop	{r7, pc}

08025e26 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8025e26:	b480      	push	{r7}
 8025e28:	b083      	sub	sp, #12
 8025e2a:	af00      	add	r7, sp, #0
 8025e2c:	6078      	str	r0, [r7, #4]
 8025e2e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8025e30:	683b      	ldr	r3, [r7, #0]
 8025e32:	681a      	ldr	r2, [r3, #0]
 8025e34:	687b      	ldr	r3, [r7, #4]
 8025e36:	681b      	ldr	r3, [r3, #0]
 8025e38:	429a      	cmp	r2, r3
 8025e3a:	da01      	bge.n	8025e40 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8025e3c:	683b      	ldr	r3, [r7, #0]
 8025e3e:	e000      	b.n	8025e42 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8025e40:	687b      	ldr	r3, [r7, #4]
    }
 8025e42:	4618      	mov	r0, r3
 8025e44:	370c      	adds	r7, #12
 8025e46:	46bd      	mov	sp, r7
 8025e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e4c:	4770      	bx	lr
	...

08025e50 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
 8025e50:	b580      	push	{r7, lr}
 8025e52:	b088      	sub	sp, #32
 8025e54:	af00      	add	r7, sp, #0
 8025e56:	60f8      	str	r0, [r7, #12]
 8025e58:	60b9      	str	r1, [r7, #8]
 8025e5a:	607a      	str	r2, [r7, #4]
 8025e5c:	603b      	str	r3, [r7, #0]
		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 8025e5e:	687a      	ldr	r2, [r7, #4]
 8025e60:	68bb      	ldr	r3, [r7, #8]
 8025e62:	1ad3      	subs	r3, r2, r3
 8025e64:	109b      	asrs	r3, r3, #2
 8025e66:	4a22      	ldr	r2, [pc, #136]	; (8025ef0 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025e68:	fb02 f303 	mul.w	r3, r2, r3
 8025e6c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025e6e:	697b      	ldr	r3, [r7, #20]
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	dd34      	ble.n	8025ede <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x8e>
	{
	  const difference_type __clen
	    = std::min(__len, __result._M_last - __result._M_cur);
 8025e74:	683b      	ldr	r3, [r7, #0]
 8025e76:	689a      	ldr	r2, [r3, #8]
 8025e78:	683b      	ldr	r3, [r7, #0]
 8025e7a:	681b      	ldr	r3, [r3, #0]
 8025e7c:	1ad3      	subs	r3, r2, r3
 8025e7e:	109b      	asrs	r3, r3, #2
 8025e80:	4a1b      	ldr	r2, [pc, #108]	; (8025ef0 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0xa0>)
 8025e82:	fb02 f303 	mul.w	r3, r2, r3
 8025e86:	61bb      	str	r3, [r7, #24]
 8025e88:	f107 0218 	add.w	r2, r7, #24
 8025e8c:	f107 0314 	add.w	r3, r7, #20
 8025e90:	4611      	mov	r1, r2
 8025e92:	4618      	mov	r0, r3
 8025e94:	f7ff ffc7 	bl	8025e26 <_ZSt3minIiERKT_S2_S2_>
 8025e98:	4603      	mov	r3, r0
	  const difference_type __clen
 8025e9a:	681b      	ldr	r3, [r3, #0]
 8025e9c:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8025e9e:	69fa      	ldr	r2, [r7, #28]
 8025ea0:	4613      	mov	r3, r2
 8025ea2:	009b      	lsls	r3, r3, #2
 8025ea4:	4413      	add	r3, r2
 8025ea6:	009b      	lsls	r3, r3, #2
 8025ea8:	461a      	mov	r2, r3
 8025eaa:	68bb      	ldr	r3, [r7, #8]
 8025eac:	1899      	adds	r1, r3, r2
 8025eae:	683b      	ldr	r3, [r7, #0]
 8025eb0:	681b      	ldr	r3, [r3, #0]
 8025eb2:	461a      	mov	r2, r3
 8025eb4:	68b8      	ldr	r0, [r7, #8]
 8025eb6:	f000 fcdc 	bl	8026872 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
				       __result._M_cur);

	  __first += __clen;
 8025eba:	69fa      	ldr	r2, [r7, #28]
 8025ebc:	4613      	mov	r3, r2
 8025ebe:	009b      	lsls	r3, r3, #2
 8025ec0:	4413      	add	r3, r2
 8025ec2:	009b      	lsls	r3, r3, #2
 8025ec4:	461a      	mov	r2, r3
 8025ec6:	68bb      	ldr	r3, [r7, #8]
 8025ec8:	4413      	add	r3, r2
 8025eca:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 8025ecc:	69f9      	ldr	r1, [r7, #28]
 8025ece:	6838      	ldr	r0, [r7, #0]
 8025ed0:	f7ff fcc2 	bl	8025858 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 8025ed4:	697a      	ldr	r2, [r7, #20]
 8025ed6:	69fb      	ldr	r3, [r7, #28]
 8025ed8:	1ad3      	subs	r3, r2, r3
 8025eda:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8025edc:	e7c7      	b.n	8025e6e <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS7_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSD_PSD_EE6__typeES7_S7_SG_+0x1e>
	}

      return __result;
 8025ede:	6839      	ldr	r1, [r7, #0]
 8025ee0:	68f8      	ldr	r0, [r7, #12]
 8025ee2:	f7fe fa6e 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 8025ee6:	68f8      	ldr	r0, [r7, #12]
 8025ee8:	3720      	adds	r7, #32
 8025eea:	46bd      	mov	sp, r7
 8025eec:	bd80      	pop	{r7, pc}
 8025eee:	bf00      	nop
 8025ef0:	cccccccd 	.word	0xcccccccd

08025ef4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8025ef4:	b580      	push	{r7, lr}
 8025ef6:	b084      	sub	sp, #16
 8025ef8:	af00      	add	r7, sp, #0
 8025efa:	60f8      	str	r0, [r7, #12]
 8025efc:	60b9      	str	r1, [r7, #8]
 8025efe:	607a      	str	r2, [r7, #4]
    { return __res; }
 8025f00:	6879      	ldr	r1, [r7, #4]
 8025f02:	68f8      	ldr	r0, [r7, #12]
 8025f04:	f7fe fa5d 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025f08:	68f8      	ldr	r0, [r7, #12]
 8025f0a:	3710      	adds	r7, #16
 8025f0c:	46bd      	mov	sp, r7
 8025f0e:	bd80      	pop	{r7, pc}

08025f10 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj>:
    deque<_Tp, _Alloc>::
 8025f10:	b590      	push	{r4, r7, lr}
 8025f12:	b085      	sub	sp, #20
 8025f14:	af00      	add	r7, sp, #0
 8025f16:	6078      	str	r0, [r7, #4]
 8025f18:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8025f1a:	6878      	ldr	r0, [r7, #4]
 8025f1c:	f7fe fccb 	bl	80248b6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8025f20:	4604      	mov	r4, r0
 8025f22:	6878      	ldr	r0, [r7, #4]
 8025f24:	f7fd fd97 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8025f28:	4603      	mov	r3, r0
 8025f2a:	1ae3      	subs	r3, r4, r3
 8025f2c:	683a      	ldr	r2, [r7, #0]
 8025f2e:	429a      	cmp	r2, r3
 8025f30:	bf8c      	ite	hi
 8025f32:	2301      	movhi	r3, #1
 8025f34:	2300      	movls	r3, #0
 8025f36:	b2db      	uxtb	r3, r3
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	d002      	beq.n	8025f42 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 8025f3c:	4816      	ldr	r0, [pc, #88]	; (8025f98 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x88>)
 8025f3e:	f015 ff07 	bl	803bd50 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025f42:	f7ff fe0a 	bl	8025b5a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025f46:	4602      	mov	r2, r0
 8025f48:	683b      	ldr	r3, [r7, #0]
 8025f4a:	4413      	add	r3, r2
 8025f4c:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8025f4e:	f7ff fe04 	bl	8025b5a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 8025f52:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 8025f54:	fbb4 f3f3 	udiv	r3, r4, r3
 8025f58:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_front(__new_nodes);
 8025f5a:	68b9      	ldr	r1, [r7, #8]
 8025f5c:	6878      	ldr	r0, [r7, #4]
 8025f5e:	f7fe fcbb 	bl	80248d8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_reserve_map_at_frontEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025f62:	2301      	movs	r3, #1
 8025f64:	60fb      	str	r3, [r7, #12]
 8025f66:	68fa      	ldr	r2, [r7, #12]
 8025f68:	68bb      	ldr	r3, [r7, #8]
 8025f6a:	429a      	cmp	r2, r3
 8025f6c:	d80f      	bhi.n	8025f8e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x7e>
	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 8025f6e:	6879      	ldr	r1, [r7, #4]
 8025f70:	687b      	ldr	r3, [r7, #4]
 8025f72:	695a      	ldr	r2, [r3, #20]
 8025f74:	68fb      	ldr	r3, [r7, #12]
 8025f76:	009b      	lsls	r3, r3, #2
 8025f78:	425b      	negs	r3, r3
 8025f7a:	18d4      	adds	r4, r2, r3
 8025f7c:	4608      	mov	r0, r1
 8025f7e:	f7fe fcc3 	bl	8024908 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8025f82:	4603      	mov	r3, r0
 8025f84:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 8025f86:	68fb      	ldr	r3, [r7, #12]
 8025f88:	3301      	adds	r3, #1
 8025f8a:	60fb      	str	r3, [r7, #12]
 8025f8c:	e7eb      	b.n	8025f66 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE24_M_new_elements_at_frontEj+0x56>
    }
 8025f8e:	bf00      	nop
 8025f90:	3714      	adds	r7, #20
 8025f92:	46bd      	mov	sp, r7
 8025f94:	bd90      	pop	{r4, r7, pc}
 8025f96:	bf00      	nop
 8025f98:	0803de18 	.word	0x0803de18

08025f9c <_ZStmiRKSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_Ei>:
      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8025f9c:	b580      	push	{r7, lr}
 8025f9e:	b084      	sub	sp, #16
 8025fa0:	af00      	add	r7, sp, #0
 8025fa2:	60f8      	str	r0, [r7, #12]
 8025fa4:	60b9      	str	r1, [r7, #8]
 8025fa6:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8025fa8:	68b9      	ldr	r1, [r7, #8]
 8025faa:	68f8      	ldr	r0, [r7, #12]
 8025fac:	f7fe fa09 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
	__tmp -= __n;
 8025fb0:	6879      	ldr	r1, [r7, #4]
 8025fb2:	68f8      	ldr	r0, [r7, #12]
 8025fb4:	f000 fc6d 	bl	8026892 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	return __tmp;
 8025fb8:	bf00      	nop
      }
 8025fba:	68f8      	ldr	r0, [r7, #12]
 8025fbc:	3710      	adds	r7, #16
 8025fbe:	46bd      	mov	sp, r7
 8025fc0:	bd80      	pop	{r7, pc}

08025fc2 <_ZSt18uninitialized_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8025fc2:	b580      	push	{r7, lr}
 8025fc4:	b08a      	sub	sp, #40	; 0x28
 8025fc6:	af00      	add	r7, sp, #0
 8025fc8:	60f8      	str	r0, [r7, #12]
 8025fca:	60b9      	str	r1, [r7, #8]
 8025fcc:	607a      	str	r2, [r7, #4]
 8025fce:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8025fd0:	2301      	movs	r3, #1
 8025fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__uninit_copy(__first, __last, __result);
 8025fd6:	f107 0314 	add.w	r3, r7, #20
 8025fda:	6839      	ldr	r1, [r7, #0]
 8025fdc:	4618      	mov	r0, r3
 8025fde:	f7fe f9f0 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8025fe2:	68f8      	ldr	r0, [r7, #12]
 8025fe4:	f107 0314 	add.w	r3, r7, #20
 8025fe8:	687a      	ldr	r2, [r7, #4]
 8025fea:	68b9      	ldr	r1, [r7, #8]
 8025fec:	f000 fc61 	bl	80268b2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>
    }
 8025ff0:	68f8      	ldr	r0, [r7, #12]
 8025ff2:	3728      	adds	r7, #40	; 0x28
 8025ff4:	46bd      	mov	sp, r7
 8025ff6:	bd80      	pop	{r7, pc}

08025ff8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj>:
    deque<_Tp, _Alloc>::
 8025ff8:	b590      	push	{r4, r7, lr}
 8025ffa:	b085      	sub	sp, #20
 8025ffc:	af00      	add	r7, sp, #0
 8025ffe:	6078      	str	r0, [r7, #4]
 8026000:	6039      	str	r1, [r7, #0]
      if (this->max_size() - this->size() < __new_elems)
 8026002:	6878      	ldr	r0, [r7, #4]
 8026004:	f7fe fc57 	bl	80248b6 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE8max_sizeEv>
 8026008:	4604      	mov	r4, r0
 802600a:	6878      	ldr	r0, [r7, #4]
 802600c:	f7fd fd23 	bl	8023a56 <_ZNKSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE4sizeEv>
 8026010:	4603      	mov	r3, r0
 8026012:	1ae3      	subs	r3, r4, r3
 8026014:	683a      	ldr	r2, [r7, #0]
 8026016:	429a      	cmp	r2, r3
 8026018:	bf8c      	ite	hi
 802601a:	2301      	movhi	r3, #1
 802601c:	2300      	movls	r3, #0
 802601e:	b2db      	uxtb	r3, r3
 8026020:	2b00      	cmp	r3, #0
 8026022:	d002      	beq.n	802602a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x32>
	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 8026024:	4815      	ldr	r0, [pc, #84]	; (802607c <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x84>)
 8026026:	f015 fe93 	bl	803bd50 <_ZSt20__throw_length_errorPKc>
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802602a:	f7ff fd96 	bl	8025b5a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802602e:	4602      	mov	r2, r0
 8026030:	683b      	ldr	r3, [r7, #0]
 8026032:	4413      	add	r3, r2
 8026034:	1e5c      	subs	r4, r3, #1
				     / _S_buffer_size());
 8026036:	f7ff fd90 	bl	8025b5a <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE14_S_buffer_sizeEv>
 802603a:	4603      	mov	r3, r0
      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 802603c:	fbb4 f3f3 	udiv	r3, r4, r3
 8026040:	60bb      	str	r3, [r7, #8]
      _M_reserve_map_at_back(__new_nodes);
 8026042:	68b9      	ldr	r1, [r7, #8]
 8026044:	6878      	ldr	r0, [r7, #4]
 8026046:	f000 fc4c 	bl	80268e2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802604a:	2301      	movs	r3, #1
 802604c:	60fb      	str	r3, [r7, #12]
 802604e:	68fa      	ldr	r2, [r7, #12]
 8026050:	68bb      	ldr	r3, [r7, #8]
 8026052:	429a      	cmp	r2, r3
 8026054:	d80e      	bhi.n	8026074 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x7c>
	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 8026056:	6879      	ldr	r1, [r7, #4]
 8026058:	687b      	ldr	r3, [r7, #4]
 802605a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802605c:	68fb      	ldr	r3, [r7, #12]
 802605e:	009b      	lsls	r3, r3, #2
 8026060:	18d4      	adds	r4, r2, r3
 8026062:	4608      	mov	r0, r1
 8026064:	f7fe fc50 	bl	8024908 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_M_allocate_nodeEv>
 8026068:	4603      	mov	r3, r0
 802606a:	6023      	str	r3, [r4, #0]
	  for (__i = 1; __i <= __new_nodes; ++__i)
 802606c:	68fb      	ldr	r3, [r7, #12]
 802606e:	3301      	adds	r3, #1
 8026070:	60fb      	str	r3, [r7, #12]
 8026072:	e7ec      	b.n	802604e <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE23_M_new_elements_at_backEj+0x56>
    }
 8026074:	bf00      	nop
 8026076:	3714      	adds	r7, #20
 8026078:	46bd      	mov	sp, r7
 802607a:	bd90      	pop	{r4, r7, pc}
 802607c:	0803de38 	.word	0x0803de38

08026080 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 8026080:	b590      	push	{r4, r7, lr}
 8026082:	b09b      	sub	sp, #108	; 0x6c
 8026084:	af02      	add	r7, sp, #8
 8026086:	60f8      	str	r0, [r7, #12]
 8026088:	60b9      	str	r1, [r7, #8]
 802608a:	607a      	str	r2, [r7, #4]
 802608c:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
					 __result, __alloc);
 802608e:	f107 0320 	add.w	r3, r7, #32
 8026092:	68b9      	ldr	r1, [r7, #8]
 8026094:	4618      	mov	r0, r3
 8026096:	f7fe f994 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802609a:	f107 0310 	add.w	r3, r7, #16
 802609e:	f107 0220 	add.w	r2, r7, #32
 80260a2:	4611      	mov	r1, r2
 80260a4:	4618      	mov	r0, r3
 80260a6:	f000 fc37 	bl	8026918 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 80260aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80260ae:	6879      	ldr	r1, [r7, #4]
 80260b0:	4618      	mov	r0, r3
 80260b2:	f7fe f986 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80260ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80260be:	4611      	mov	r1, r2
 80260c0:	4618      	mov	r0, r3
 80260c2:	f000 fc29 	bl	8026918 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>
 80260c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80260ca:	6839      	ldr	r1, [r7, #0]
 80260cc:	4618      	mov	r0, r3
 80260ce:	f7fe f978 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80260d2:	68f8      	ldr	r0, [r7, #12]
 80260d4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80260d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80260dc:	f107 0110 	add.w	r1, r7, #16
 80260e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80260e2:	9300      	str	r3, [sp, #0]
 80260e4:	4623      	mov	r3, r4
 80260e6:	f000 fc40 	bl	802696a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>
    }
 80260ea:	68f8      	ldr	r0, [r7, #12]
 80260ec:	3764      	adds	r7, #100	; 0x64
 80260ee:	46bd      	mov	sp, r7
 80260f0:	bd90      	pop	{r4, r7, pc}

080260f2 <_ZSt4moveISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 80260f2:	b580      	push	{r7, lr}
 80260f4:	b098      	sub	sp, #96	; 0x60
 80260f6:	af00      	add	r7, sp, #0
 80260f8:	60f8      	str	r0, [r7, #12]
 80260fa:	60b9      	str	r1, [r7, #8]
 80260fc:	607a      	str	r2, [r7, #4]
 80260fe:	603b      	str	r3, [r7, #0]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
				      std::__miter_base(__last), __result);
 8026100:	f107 0320 	add.w	r3, r7, #32
 8026104:	68b9      	ldr	r1, [r7, #8]
 8026106:	4618      	mov	r0, r3
 8026108:	f7fe f95b 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802610c:	f107 0310 	add.w	r3, r7, #16
 8026110:	f107 0220 	add.w	r2, r7, #32
 8026114:	4611      	mov	r1, r2
 8026116:	4618      	mov	r0, r3
 8026118:	f000 fc4d 	bl	80269b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802611c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026120:	6879      	ldr	r1, [r7, #4]
 8026122:	4618      	mov	r0, r3
 8026124:	f7fe f94d 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026128:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802612c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026130:	4611      	mov	r1, r2
 8026132:	4618      	mov	r0, r3
 8026134:	f000 fc3f 	bl	80269b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026138:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802613c:	6839      	ldr	r1, [r7, #0]
 802613e:	4618      	mov	r0, r3
 8026140:	f7fe f93f 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026144:	68f8      	ldr	r0, [r7, #12]
 8026146:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802614a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802614e:	f107 0110 	add.w	r1, r7, #16
 8026152:	f000 fc3d 	bl	80269d0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8026156:	68f8      	ldr	r0, [r7, #12]
 8026158:	3760      	adds	r7, #96	; 0x60
 802615a:	46bd      	mov	sp, r7
 802615c:	bd80      	pop	{r7, pc}

0802615e <_ZSt7advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_>:
    advance(_InputIterator& __i, _Distance __n)
 802615e:	b590      	push	{r4, r7, lr}
 8026160:	b085      	sub	sp, #20
 8026162:	af00      	add	r7, sp, #0
 8026164:	6078      	str	r0, [r7, #4]
 8026166:	6039      	str	r1, [r7, #0]
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8026168:	683b      	ldr	r3, [r7, #0]
 802616a:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 802616c:	6878      	ldr	r0, [r7, #4]
 802616e:	f7fe fac3 	bl	80246f8 <_ZSt19__iterator_categoryIPKN10BHYWrapper8BHYFrameEENSt15iterator_traitsIT_E17iterator_categoryERKS5_>
 8026172:	4622      	mov	r2, r4
 8026174:	68f9      	ldr	r1, [r7, #12]
 8026176:	6878      	ldr	r0, [r7, #4]
 8026178:	f7fe fee0 	bl	8024f3c <_ZSt9__advanceIPKN10BHYWrapper8BHYFrameEiEvRT_T0_St26random_access_iterator_tag>
    }
 802617c:	bf00      	nop
 802617e:	3714      	adds	r7, #20
 8026180:	46bd      	mov	sp, r7
 8026182:	bd90      	pop	{r4, r7, pc}

08026184 <_ZSt25__uninitialized_move_copyISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EPKS2_S5_SaIS2_EET1_T_SA_T0_SB_S9_RT2_>:
  //  copies [first2, last2) into
  //  [result, result + (last1 - first1) + (last2 - first2)).
  template<typename _InputIterator1, typename _InputIterator2,
	   typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
 8026184:	b590      	push	{r4, r7, lr}
 8026186:	b0a3      	sub	sp, #140	; 0x8c
 8026188:	af02      	add	r7, sp, #8
 802618a:	60f8      	str	r0, [r7, #12]
 802618c:	60b9      	str	r1, [r7, #8]
 802618e:	607a      	str	r2, [r7, #4]
 8026190:	603b      	str	r3, [r7, #0]
			      _InputIterator2 __first2,
			      _InputIterator2 __last2,
			      _ForwardIterator __result,
			      _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 8026192:	f107 0320 	add.w	r3, r7, #32
 8026196:	68b9      	ldr	r1, [r7, #8]
 8026198:	4618      	mov	r0, r3
 802619a:	f7fe f912 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802619e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80261a2:	6879      	ldr	r1, [r7, #4]
 80261a4:	4618      	mov	r0, r3
 80261a6:	f7fe f90c 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80261ae:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80261b2:	4618      	mov	r0, r3
 80261b4:	f7fe f905 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261b8:	f107 0010 	add.w	r0, r7, #16
 80261bc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80261c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80261c4:	f107 0120 	add.w	r1, r7, #32
 80261c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80261cc:	9300      	str	r3, [sp, #0]
 80261ce:	4623      	mov	r3, r4
 80261d0:	f7ff ff56 	bl	8026080 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
							   __result,
							   __alloc);
      __try
	{
	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 80261d4:	f107 0210 	add.w	r2, r7, #16
 80261d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80261dc:	4611      	mov	r1, r2
 80261de:	4618      	mov	r0, r3
 80261e0:	f7fe f8ef 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80261e4:	68f8      	ldr	r0, [r7, #12]
 80261e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80261ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80261ee:	9300      	str	r3, [sp, #0]
 80261f0:	4613      	mov	r3, r2
 80261f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80261f6:	6839      	ldr	r1, [r7, #0]
 80261f8:	f7fe ff1c 	bl	8025034 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
      __catch(...)
	{
	  std::_Destroy(__result, __mid, __alloc);
	  __throw_exception_again;
	}
    }
 80261fc:	68f8      	ldr	r0, [r7, #12]
 80261fe:	3784      	adds	r7, #132	; 0x84
 8026200:	46bd      	mov	sp, r7
 8026202:	bd90      	pop	{r4, r7, pc}

08026204 <_ZSt13move_backwardISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET0_T_S7_S6_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026204:	b580      	push	{r7, lr}
 8026206:	b098      	sub	sp, #96	; 0x60
 8026208:	af00      	add	r7, sp, #0
 802620a:	60f8      	str	r0, [r7, #12]
 802620c:	60b9      	str	r1, [r7, #8]
 802620e:	607a      	str	r2, [r7, #4]
 8026210:	603b      	str	r3, [r7, #0]
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
 8026212:	f107 0320 	add.w	r3, r7, #32
 8026216:	68b9      	ldr	r1, [r7, #8]
 8026218:	4618      	mov	r0, r3
 802621a:	f7fe f8d2 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802621e:	f107 0310 	add.w	r3, r7, #16
 8026222:	f107 0220 	add.w	r2, r7, #32
 8026226:	4611      	mov	r1, r2
 8026228:	4618      	mov	r0, r3
 802622a:	f000 fbc4 	bl	80269b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802622e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026232:	6879      	ldr	r1, [r7, #4]
 8026234:	4618      	mov	r0, r3
 8026236:	f7fe f8c4 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802623a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802623e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026242:	4611      	mov	r1, r2
 8026244:	4618      	mov	r0, r3
 8026246:	f000 fbb6 	bl	80269b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 802624a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802624e:	6839      	ldr	r1, [r7, #0]
 8026250:	4618      	mov	r0, r3
 8026252:	f7fe f8b6 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026256:	68f8      	ldr	r0, [r7, #12]
 8026258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802625c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026260:	f107 0110 	add.w	r1, r7, #16
 8026264:	f000 fbfa 	bl	8026a5c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 8026268:	68f8      	ldr	r0, [r7, #12]
 802626a:	3760      	adds	r7, #96	; 0x60
 802626c:	46bd      	mov	sp, r7
 802626e:	bd80      	pop	{r7, pc}

08026270 <_ZSt25__uninitialized_copy_moveIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES7_SaIS1_EET1_T_SA_T0_SB_S9_RT2_>:
    __uninitialized_copy_move(_InputIterator1 __first1,
 8026270:	b590      	push	{r4, r7, lr}
 8026272:	b0a3      	sub	sp, #140	; 0x8c
 8026274:	af02      	add	r7, sp, #8
 8026276:	60f8      	str	r0, [r7, #12]
 8026278:	60b9      	str	r1, [r7, #8]
 802627a:	607a      	str	r2, [r7, #4]
 802627c:	603b      	str	r3, [r7, #0]
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 802627e:	f107 0320 	add.w	r3, r7, #32
 8026282:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8026286:	4618      	mov	r0, r3
 8026288:	f7fe f89b 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802628c:	f107 0010 	add.w	r0, r7, #16
 8026290:	f107 0220 	add.w	r2, r7, #32
 8026294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8026298:	9300      	str	r3, [sp, #0]
 802629a:	4613      	mov	r3, r2
 802629c:	687a      	ldr	r2, [r7, #4]
 802629e:	68b9      	ldr	r1, [r7, #8]
 80262a0:	f7fe fec8 	bl	8025034 <_ZSt22__uninitialized_copy_aIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_ES1_ET0_T_S9_S8_RSaIT1_E>
	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 80262a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80262a8:	6839      	ldr	r1, [r7, #0]
 80262aa:	4618      	mov	r0, r3
 80262ac:	f7fe f889 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80262b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80262b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80262b8:	4618      	mov	r0, r3
 80262ba:	f7fe f882 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80262be:	f107 0210 	add.w	r2, r7, #16
 80262c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80262c6:	4611      	mov	r1, r2
 80262c8:	4618      	mov	r0, r3
 80262ca:	f7fe f87a 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80262ce:	68f8      	ldr	r0, [r7, #12]
 80262d0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80262d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80262d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80262dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80262e0:	9300      	str	r3, [sp, #0]
 80262e2:	4623      	mov	r3, r4
 80262e4:	f7ff fecc 	bl	8026080 <_ZSt22__uninitialized_move_aISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_SaIS2_EET0_T_S8_S7_RT1_>
    }
 80262e8:	68f8      	ldr	r0, [r7, #12]
 80262ea:	3784      	adds	r7, #132	; 0x84
 80262ec:	46bd      	mov	sp, r7
 80262ee:	bd90      	pop	{r4, r7, pc}

080262f0 <_ZNSt16allocator_traitsISaIN10BHYWrapper8BHYFrameEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80262f0:	b580      	push	{r7, lr}
 80262f2:	b082      	sub	sp, #8
 80262f4:	af00      	add	r7, sp, #0
 80262f6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80262f8:	6878      	ldr	r0, [r7, #4]
 80262fa:	f000 fbf5 	bl	8026ae8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>
 80262fe:	4603      	mov	r3, r0
      }
 8026300:	4618      	mov	r0, r3
 8026302:	3708      	adds	r7, #8
 8026304:	46bd      	mov	sp, r7
 8026306:	bd80      	pop	{r7, pc}

08026308 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8026308:	b480      	push	{r7}
 802630a:	b083      	sub	sp, #12
 802630c:	af00      	add	r7, sp, #0
 802630e:	6078      	str	r0, [r7, #4]
 8026310:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8026312:	683b      	ldr	r3, [r7, #0]
 8026314:	681a      	ldr	r2, [r3, #0]
 8026316:	687b      	ldr	r3, [r7, #4]
 8026318:	681b      	ldr	r3, [r3, #0]
 802631a:	429a      	cmp	r2, r3
 802631c:	d201      	bcs.n	8026322 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 802631e:	683b      	ldr	r3, [r7, #0]
 8026320:	e000      	b.n	8026324 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8026322:	687b      	ldr	r3, [r7, #4]
    }
 8026324:	4618      	mov	r0, r3
 8026326:	370c      	adds	r7, #12
 8026328:	46bd      	mov	sp, r7
 802632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802632e:	4770      	bx	lr

08026330 <_ZSt4copyIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8026330:	b590      	push	{r4, r7, lr}
 8026332:	b085      	sub	sp, #20
 8026334:	af00      	add	r7, sp, #0
 8026336:	60f8      	str	r0, [r7, #12]
 8026338:	60b9      	str	r1, [r7, #8]
 802633a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802633c:	68f8      	ldr	r0, [r7, #12]
 802633e:	f000 fbdf 	bl	8026b00 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026342:	4604      	mov	r4, r0
 8026344:	68b8      	ldr	r0, [r7, #8]
 8026346:	f000 fbdb 	bl	8026b00 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802634a:	4603      	mov	r3, r0
 802634c:	687a      	ldr	r2, [r7, #4]
 802634e:	4619      	mov	r1, r3
 8026350:	4620      	mov	r0, r4
 8026352:	f000 fbe0 	bl	8026b16 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026356:	4603      	mov	r3, r0
    }
 8026358:	4618      	mov	r0, r3
 802635a:	3714      	adds	r7, #20
 802635c:	46bd      	mov	sp, r7
 802635e:	bd90      	pop	{r4, r7, pc}

08026360 <_ZSt13copy_backwardIPPN10BHYWrapper8BHYFrameES3_ET0_T_S5_S4_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026360:	b590      	push	{r4, r7, lr}
 8026362:	b085      	sub	sp, #20
 8026364:	af00      	add	r7, sp, #0
 8026366:	60f8      	str	r0, [r7, #12]
 8026368:	60b9      	str	r1, [r7, #8]
 802636a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 802636c:	68f8      	ldr	r0, [r7, #12]
 802636e:	f000 fbc7 	bl	8026b00 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026372:	4604      	mov	r4, r0
 8026374:	68b8      	ldr	r0, [r7, #8]
 8026376:	f000 fbc3 	bl	8026b00 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 802637a:	4603      	mov	r3, r0
 802637c:	687a      	ldr	r2, [r7, #4]
 802637e:	4619      	mov	r1, r3
 8026380:	4620      	mov	r0, r4
 8026382:	f000 fbeb 	bl	8026b5c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026386:	4603      	mov	r3, r0
    }
 8026388:	4618      	mov	r0, r3
 802638a:	3714      	adds	r7, #20
 802638c:	46bd      	mov	sp, r7
 802638e:	bd90      	pop	{r4, r7, pc}

08026390 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026390:	b580      	push	{r7, lr}
 8026392:	b084      	sub	sp, #16
 8026394:	af00      	add	r7, sp, #0
 8026396:	60f8      	str	r0, [r7, #12]
 8026398:	60b9      	str	r1, [r7, #8]
 802639a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802639c:	68f8      	ldr	r0, [r7, #12]
 802639e:	f000 fc01 	bl	8026ba4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 80263a2:	4602      	mov	r2, r0
 80263a4:	68bb      	ldr	r3, [r7, #8]
 80263a6:	4293      	cmp	r3, r2
 80263a8:	bf8c      	ite	hi
 80263aa:	2301      	movhi	r3, #1
 80263ac:	2300      	movls	r3, #0
 80263ae:	b2db      	uxtb	r3, r3
 80263b0:	2b00      	cmp	r3, #0
 80263b2:	d001      	beq.n	80263b8 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80263b4:	f015 fcc9 	bl	803bd4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80263b8:	68ba      	ldr	r2, [r7, #8]
 80263ba:	4613      	mov	r3, r2
 80263bc:	009b      	lsls	r3, r3, #2
 80263be:	4413      	add	r3, r2
 80263c0:	009b      	lsls	r3, r3, #2
 80263c2:	4618      	mov	r0, r3
 80263c4:	f015 fcb0 	bl	803bd28 <_Znwj>
 80263c8:	4603      	mov	r3, r0
      }
 80263ca:	4618      	mov	r0, r3
 80263cc:	3710      	adds	r7, #16
 80263ce:	46bd      	mov	sp, r7
 80263d0:	bd80      	pop	{r7, pc}

080263d2 <_ZN9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80263d2:	b580      	push	{r7, lr}
 80263d4:	b084      	sub	sp, #16
 80263d6:	af00      	add	r7, sp, #0
 80263d8:	60f8      	str	r0, [r7, #12]
 80263da:	60b9      	str	r1, [r7, #8]
 80263dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80263de:	687a      	ldr	r2, [r7, #4]
 80263e0:	4613      	mov	r3, r2
 80263e2:	009b      	lsls	r3, r3, #2
 80263e4:	4413      	add	r3, r2
 80263e6:	009b      	lsls	r3, r3, #2
 80263e8:	4619      	mov	r1, r3
 80263ea:	68b8      	ldr	r0, [r7, #8]
 80263ec:	f015 fc9a 	bl	803bd24 <_ZdlPvj>
      }
 80263f0:	bf00      	nop
 80263f2:	3710      	adds	r7, #16
 80263f4:	46bd      	mov	sp, r7
 80263f6:	bd80      	pop	{r7, pc}

080263f8 <_ZStmiRKSt15_Deque_iteratorIjRjPjES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80263f8:	b580      	push	{r7, lr}
 80263fa:	b082      	sub	sp, #8
 80263fc:	af00      	add	r7, sp, #0
 80263fe:	6078      	str	r0, [r7, #4]
 8026400:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8026402:	f000 f8eb 	bl	80265dc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>
 8026406:	4603      	mov	r3, r0
 8026408:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 802640a:	687b      	ldr	r3, [r7, #4]
 802640c:	68da      	ldr	r2, [r3, #12]
 802640e:	683b      	ldr	r3, [r7, #0]
 8026410:	68db      	ldr	r3, [r3, #12]
 8026412:	1ad3      	subs	r3, r2, r3
 8026414:	109b      	asrs	r3, r3, #2
 8026416:	3b01      	subs	r3, #1
 8026418:	fb01 f303 	mul.w	r3, r1, r3
 802641c:	687a      	ldr	r2, [r7, #4]
 802641e:	6811      	ldr	r1, [r2, #0]
 8026420:	687a      	ldr	r2, [r7, #4]
 8026422:	6852      	ldr	r2, [r2, #4]
 8026424:	1a8a      	subs	r2, r1, r2
 8026426:	1092      	asrs	r2, r2, #2
 8026428:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 802642a:	683a      	ldr	r2, [r7, #0]
 802642c:	6891      	ldr	r1, [r2, #8]
 802642e:	683a      	ldr	r2, [r7, #0]
 8026430:	6812      	ldr	r2, [r2, #0]
 8026432:	1a8a      	subs	r2, r1, r2
 8026434:	1092      	asrs	r2, r2, #2
 8026436:	4413      	add	r3, r2
      }
 8026438:	4618      	mov	r0, r3
 802643a:	3708      	adds	r7, #8
 802643c:	46bd      	mov	sp, r7
 802643e:	bd80      	pop	{r7, pc}

08026440 <_ZNSt5dequeIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8026440:	b580      	push	{r7, lr}
 8026442:	b084      	sub	sp, #16
 8026444:	af00      	add	r7, sp, #0
 8026446:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8026448:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 802644c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 802644e:	6878      	ldr	r0, [r7, #4]
 8026450:	f000 fbb6 	bl	8026bc0 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 8026454:	4603      	mov	r3, r0
 8026456:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8026458:	f107 0208 	add.w	r2, r7, #8
 802645c:	f107 030c 	add.w	r3, r7, #12
 8026460:	4611      	mov	r1, r2
 8026462:	4618      	mov	r0, r3
 8026464:	f7ff ff50 	bl	8026308 <_ZSt3minIjERKT_S2_S2_>
 8026468:	4603      	mov	r3, r0
 802646a:	681b      	ldr	r3, [r3, #0]
      }
 802646c:	4618      	mov	r0, r3
 802646e:	3710      	adds	r7, #16
 8026470:	46bd      	mov	sp, r7
 8026472:	bd80      	pop	{r7, pc}

08026474 <_ZNKSt11_Deque_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8026474:	b480      	push	{r7}
 8026476:	b083      	sub	sp, #12
 8026478:	af00      	add	r7, sp, #0
 802647a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802647c:	687b      	ldr	r3, [r7, #4]
 802647e:	4618      	mov	r0, r3
 8026480:	370c      	adds	r7, #12
 8026482:	46bd      	mov	sp, r7
 8026484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026488:	4770      	bx	lr

0802648a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 802648a:	b590      	push	{r4, r7, lr}
 802648c:	b08b      	sub	sp, #44	; 0x2c
 802648e:	af00      	add	r7, sp, #0
 8026490:	60f8      	str	r0, [r7, #12]
 8026492:	60b9      	str	r1, [r7, #8]
 8026494:	4613      	mov	r3, r2
 8026496:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8026498:	68fb      	ldr	r3, [r7, #12]
 802649a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802649c:	68fb      	ldr	r3, [r7, #12]
 802649e:	695b      	ldr	r3, [r3, #20]
 80264a0:	1ad3      	subs	r3, r2, r3
 80264a2:	109b      	asrs	r3, r3, #2
 80264a4:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 80264a6:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80264a8:	68bb      	ldr	r3, [r7, #8]
 80264aa:	6a3a      	ldr	r2, [r7, #32]
 80264ac:	4413      	add	r3, r2
 80264ae:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80264b0:	68fb      	ldr	r3, [r7, #12]
 80264b2:	685a      	ldr	r2, [r3, #4]
 80264b4:	69fb      	ldr	r3, [r7, #28]
 80264b6:	005b      	lsls	r3, r3, #1
 80264b8:	429a      	cmp	r2, r3
 80264ba:	d92d      	bls.n	8026518 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80264bc:	68fb      	ldr	r3, [r7, #12]
 80264be:	681a      	ldr	r2, [r3, #0]
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 80264c4:	69fb      	ldr	r3, [r7, #28]
 80264c6:	1acb      	subs	r3, r1, r3
 80264c8:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80264ca:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80264cc:	79fb      	ldrb	r3, [r7, #7]
 80264ce:	2b00      	cmp	r3, #0
 80264d0:	d002      	beq.n	80264d8 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x4e>
 80264d2:	68bb      	ldr	r3, [r7, #8]
 80264d4:	009b      	lsls	r3, r3, #2
 80264d6:	e000      	b.n	80264da <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x50>
 80264d8:	2300      	movs	r3, #0
 80264da:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80264dc:	4413      	add	r3, r2
 80264de:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80264e0:	68fb      	ldr	r3, [r7, #12]
 80264e2:	695b      	ldr	r3, [r3, #20]
 80264e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80264e6:	429a      	cmp	r2, r3
 80264e8:	d209      	bcs.n	80264fe <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80264ea:	68fb      	ldr	r3, [r7, #12]
 80264ec:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80264ee:	68fb      	ldr	r3, [r7, #12]
 80264f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80264f2:	3304      	adds	r3, #4
 80264f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80264f6:	4619      	mov	r1, r3
 80264f8:	f000 fb6e 	bl	8026bd8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
 80264fc:	e048      	b.n	8026590 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80264fe:	68fb      	ldr	r3, [r7, #12]
 8026500:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8026502:	68fb      	ldr	r3, [r7, #12]
 8026504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8026506:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8026508:	6a3b      	ldr	r3, [r7, #32]
 802650a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 802650c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802650e:	4413      	add	r3, r2
 8026510:	461a      	mov	r2, r3
 8026512:	f000 fb79 	bl	8026c08 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>
 8026516:	e03b      	b.n	8026590 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026518:	68fb      	ldr	r3, [r7, #12]
 802651a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 802651c:	68fb      	ldr	r3, [r7, #12]
 802651e:	3304      	adds	r3, #4
 8026520:	f107 0208 	add.w	r2, r7, #8
 8026524:	4611      	mov	r1, r2
 8026526:	4618      	mov	r0, r3
 8026528:	f7fe fb68 	bl	8024bfc <_ZSt3maxIjERKT_S2_S2_>
 802652c:	4603      	mov	r3, r0
 802652e:	681b      	ldr	r3, [r3, #0]
 8026530:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8026532:	3302      	adds	r3, #2
 8026534:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8026536:	68fb      	ldr	r3, [r7, #12]
 8026538:	69b9      	ldr	r1, [r7, #24]
 802653a:	4618      	mov	r0, r3
 802653c:	f7ff fb45 	bl	8025bca <_ZNSt11_Deque_baseIjSaIjEE15_M_allocate_mapEj>
 8026540:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8026542:	69ba      	ldr	r2, [r7, #24]
 8026544:	69fb      	ldr	r3, [r7, #28]
 8026546:	1ad3      	subs	r3, r2, r3
 8026548:	085b      	lsrs	r3, r3, #1
 802654a:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 802654c:	79fb      	ldrb	r3, [r7, #7]
 802654e:	2b00      	cmp	r3, #0
 8026550:	d002      	beq.n	8026558 <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xce>
 8026552:	68bb      	ldr	r3, [r7, #8]
 8026554:	009b      	lsls	r3, r3, #2
 8026556:	e000      	b.n	802655a <_ZNSt5dequeIjSaIjEE17_M_reallocate_mapEjb+0xd0>
 8026558:	2300      	movs	r3, #0
 802655a:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 802655c:	697a      	ldr	r2, [r7, #20]
 802655e:	4413      	add	r3, r2
 8026560:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8026562:	68fb      	ldr	r3, [r7, #12]
 8026564:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8026566:	68fb      	ldr	r3, [r7, #12]
 8026568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 802656a:	3304      	adds	r3, #4
 802656c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802656e:	4619      	mov	r1, r3
 8026570:	f000 fb32 	bl	8026bd8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8026574:	68f8      	ldr	r0, [r7, #12]
 8026576:	68fb      	ldr	r3, [r7, #12]
 8026578:	6819      	ldr	r1, [r3, #0]
 802657a:	68fb      	ldr	r3, [r7, #12]
 802657c:	685b      	ldr	r3, [r3, #4]
 802657e:	461a      	mov	r2, r3
 8026580:	f7fe fc4c 	bl	8024e1c <_ZNSt11_Deque_baseIjSaIjEE17_M_deallocate_mapEPPjj>
	  this->_M_impl._M_map = __new_map;
 8026584:	68fb      	ldr	r3, [r7, #12]
 8026586:	697a      	ldr	r2, [r7, #20]
 8026588:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 802658a:	68fb      	ldr	r3, [r7, #12]
 802658c:	69ba      	ldr	r2, [r7, #24]
 802658e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8026590:	68fb      	ldr	r3, [r7, #12]
 8026592:	3308      	adds	r3, #8
 8026594:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8026596:	4618      	mov	r0, r3
 8026598:	f7ff fa33 	bl	8025a02 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 802659c:	68fb      	ldr	r3, [r7, #12]
 802659e:	f103 0018 	add.w	r0, r3, #24
 80265a2:	6a3a      	ldr	r2, [r7, #32]
 80265a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80265a8:	4413      	add	r3, r2
 80265aa:	009b      	lsls	r3, r3, #2
 80265ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80265ae:	4413      	add	r3, r2
 80265b0:	4619      	mov	r1, r3
 80265b2:	f7ff fa26 	bl	8025a02 <_ZNSt15_Deque_iteratorIjRjPjE11_M_set_nodeEPS1_>
    }
 80265b6:	bf00      	nop
 80265b8:	372c      	adds	r7, #44	; 0x2c
 80265ba:	46bd      	mov	sp, r7
 80265bc:	bd90      	pop	{r4, r7, pc}

080265be <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80265be:	b580      	push	{r7, lr}
 80265c0:	b082      	sub	sp, #8
 80265c2:	af00      	add	r7, sp, #0
 80265c4:	6078      	str	r0, [r7, #4]
 80265c6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80265c8:	2200      	movs	r2, #0
 80265ca:	6839      	ldr	r1, [r7, #0]
 80265cc:	6878      	ldr	r0, [r7, #4]
 80265ce:	f000 fb33 	bl	8026c38 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 80265d2:	4603      	mov	r3, r0
 80265d4:	4618      	mov	r0, r3
 80265d6:	3708      	adds	r7, #8
 80265d8:	46bd      	mov	sp, r7
 80265da:	bd80      	pop	{r7, pc}

080265dc <_ZNSt15_Deque_iteratorIjRjPjE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80265dc:	b580      	push	{r7, lr}
 80265de:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80265e0:	2004      	movs	r0, #4
 80265e2:	f7fa fc71 	bl	8020ec8 <_ZSt16__deque_buf_sizej>
 80265e6:	4603      	mov	r3, r0
 80265e8:	4618      	mov	r0, r3
 80265ea:	bd80      	pop	{r7, pc}

080265ec <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80265ec:	b580      	push	{r7, lr}
 80265ee:	b084      	sub	sp, #16
 80265f0:	af00      	add	r7, sp, #0
 80265f2:	60f8      	str	r0, [r7, #12]
 80265f4:	60b9      	str	r1, [r7, #8]
 80265f6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80265f8:	687a      	ldr	r2, [r7, #4]
 80265fa:	68b9      	ldr	r1, [r7, #8]
 80265fc:	68f8      	ldr	r0, [r7, #12]
 80265fe:	f000 fb39 	bl	8026c74 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
 8026602:	bf00      	nop
 8026604:	3710      	adds	r7, #16
 8026606:	46bd      	mov	sp, r7
 8026608:	bd80      	pop	{r7, pc}

0802660a <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802660a:	b580      	push	{r7, lr}
 802660c:	b084      	sub	sp, #16
 802660e:	af00      	add	r7, sp, #0
 8026610:	60f8      	str	r0, [r7, #12]
 8026612:	60b9      	str	r1, [r7, #8]
 8026614:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026616:	68f8      	ldr	r0, [r7, #12]
 8026618:	f000 fb3c 	bl	8026c94 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 802661c:	4602      	mov	r2, r0
 802661e:	68bb      	ldr	r3, [r7, #8]
 8026620:	4293      	cmp	r3, r2
 8026622:	bf8c      	ite	hi
 8026624:	2301      	movhi	r3, #1
 8026626:	2300      	movls	r3, #0
 8026628:	b2db      	uxtb	r3, r3
 802662a:	2b00      	cmp	r3, #0
 802662c:	d001      	beq.n	8026632 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802662e:	f015 fb8c 	bl	803bd4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026632:	68bb      	ldr	r3, [r7, #8]
 8026634:	009b      	lsls	r3, r3, #2
 8026636:	4618      	mov	r0, r3
 8026638:	f015 fb76 	bl	803bd28 <_Znwj>
 802663c:	4603      	mov	r3, r0
      }
 802663e:	4618      	mov	r0, r3
 8026640:	3710      	adds	r7, #16
 8026642:	46bd      	mov	sp, r7
 8026644:	bd80      	pop	{r7, pc}

08026646 <_ZN9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026646:	b480      	push	{r7}
 8026648:	b083      	sub	sp, #12
 802664a:	af00      	add	r7, sp, #0
 802664c:	6078      	str	r0, [r7, #4]
 802664e:	687b      	ldr	r3, [r7, #4]
 8026650:	4618      	mov	r0, r3
 8026652:	370c      	adds	r7, #12
 8026654:	46bd      	mov	sp, r7
 8026656:	f85d 7b04 	ldr.w	r7, [sp], #4
 802665a:	4770      	bx	lr

0802665c <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 802665c:	b480      	push	{r7}
 802665e:	b083      	sub	sp, #12
 8026660:	af00      	add	r7, sp, #0
 8026662:	6078      	str	r0, [r7, #4]
 8026664:	687b      	ldr	r3, [r7, #4]
 8026666:	4618      	mov	r0, r3
 8026668:	370c      	adds	r7, #12
 802666a:	46bd      	mov	sp, r7
 802666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026670:	4770      	bx	lr

08026672 <_ZNSt15_Deque_iteratorIjRjPjEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8026672:	b480      	push	{r7}
 8026674:	b083      	sub	sp, #12
 8026676:	af00      	add	r7, sp, #0
 8026678:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 802667a:	687b      	ldr	r3, [r7, #4]
 802667c:	2200      	movs	r2, #0
 802667e:	601a      	str	r2, [r3, #0]
 8026680:	687b      	ldr	r3, [r7, #4]
 8026682:	2200      	movs	r2, #0
 8026684:	605a      	str	r2, [r3, #4]
 8026686:	687b      	ldr	r3, [r7, #4]
 8026688:	2200      	movs	r2, #0
 802668a:	609a      	str	r2, [r3, #8]
 802668c:	687b      	ldr	r3, [r7, #4]
 802668e:	2200      	movs	r2, #0
 8026690:	60da      	str	r2, [r3, #12]
 8026692:	687b      	ldr	r3, [r7, #4]
 8026694:	4618      	mov	r0, r3
 8026696:	370c      	adds	r7, #12
 8026698:	46bd      	mov	sp, r7
 802669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802669e:	4770      	bx	lr

080266a0 <_ZNSt16allocator_traitsISaIPjEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80266a0:	b580      	push	{r7, lr}
 80266a2:	b082      	sub	sp, #8
 80266a4:	af00      	add	r7, sp, #0
 80266a6:	6078      	str	r0, [r7, #4]
 80266a8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80266aa:	2200      	movs	r2, #0
 80266ac:	6839      	ldr	r1, [r7, #0]
 80266ae:	6878      	ldr	r0, [r7, #4]
 80266b0:	f000 fafc 	bl	8026cac <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>
 80266b4:	4603      	mov	r3, r0
 80266b6:	4618      	mov	r0, r3
 80266b8:	3708      	adds	r7, #8
 80266ba:	46bd      	mov	sp, r7
 80266bc:	bd80      	pop	{r7, pc}

080266be <_ZNSaIPjEC1IjEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80266be:	b580      	push	{r7, lr}
 80266c0:	b082      	sub	sp, #8
 80266c2:	af00      	add	r7, sp, #0
 80266c4:	6078      	str	r0, [r7, #4]
 80266c6:	6039      	str	r1, [r7, #0]
 80266c8:	6878      	ldr	r0, [r7, #4]
 80266ca:	f000 fb0d 	bl	8026ce8 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>
 80266ce:	687b      	ldr	r3, [r7, #4]
 80266d0:	4618      	mov	r0, r3
 80266d2:	3708      	adds	r7, #8
 80266d4:	46bd      	mov	sp, r7
 80266d6:	bd80      	pop	{r7, pc}

080266d8 <_ZN9__gnu_cxx13new_allocatorIPjED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80266d8:	b480      	push	{r7}
 80266da:	b083      	sub	sp, #12
 80266dc:	af00      	add	r7, sp, #0
 80266de:	6078      	str	r0, [r7, #4]
 80266e0:	687b      	ldr	r3, [r7, #4]
 80266e2:	4618      	mov	r0, r3
 80266e4:	370c      	adds	r7, #12
 80266e6:	46bd      	mov	sp, r7
 80266e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266ec:	4770      	bx	lr

080266ee <_ZN9__gnu_cxx13new_allocatorIPjE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80266ee:	b580      	push	{r7, lr}
 80266f0:	b084      	sub	sp, #16
 80266f2:	af00      	add	r7, sp, #0
 80266f4:	60f8      	str	r0, [r7, #12]
 80266f6:	60b9      	str	r1, [r7, #8]
 80266f8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80266fa:	687b      	ldr	r3, [r7, #4]
 80266fc:	009b      	lsls	r3, r3, #2
 80266fe:	4619      	mov	r1, r3
 8026700:	68b8      	ldr	r0, [r7, #8]
 8026702:	f015 fb0f 	bl	803bd24 <_ZdlPvj>
      }
 8026706:	bf00      	nop
 8026708:	3710      	adds	r7, #16
 802670a:	46bd      	mov	sp, r7
 802670c:	bd80      	pop	{r7, pc}

0802670e <_ZSt4moveIRNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS2_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 802670e:	b480      	push	{r7}
 8026710:	b083      	sub	sp, #12
 8026712:	af00      	add	r7, sp, #0
 8026714:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026716:	687b      	ldr	r3, [r7, #4]
 8026718:	4618      	mov	r0, r3
 802671a:	370c      	adds	r7, #12
 802671c:	46bd      	mov	sp, r7
 802671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026722:	4770      	bx	lr

08026724 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8026724:	b580      	push	{r7, lr}
 8026726:	b082      	sub	sp, #8
 8026728:	af00      	add	r7, sp, #0
 802672a:	6078      	str	r0, [r7, #4]
 802672c:	6039      	str	r1, [r7, #0]
 802672e:	683b      	ldr	r3, [r7, #0]
 8026730:	681a      	ldr	r2, [r3, #0]
 8026732:	687b      	ldr	r3, [r7, #4]
 8026734:	601a      	str	r2, [r3, #0]
 8026736:	683b      	ldr	r3, [r7, #0]
 8026738:	685a      	ldr	r2, [r3, #4]
 802673a:	687b      	ldr	r3, [r7, #4]
 802673c:	605a      	str	r2, [r3, #4]
 802673e:	687b      	ldr	r3, [r7, #4]
 8026740:	f103 0208 	add.w	r2, r3, #8
 8026744:	683b      	ldr	r3, [r7, #0]
 8026746:	3308      	adds	r3, #8
 8026748:	4619      	mov	r1, r3
 802674a:	4610      	mov	r0, r2
 802674c:	f7fd fe39 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026750:	687b      	ldr	r3, [r7, #4]
 8026752:	f103 0218 	add.w	r2, r3, #24
 8026756:	683b      	ldr	r3, [r7, #0]
 8026758:	3318      	adds	r3, #24
 802675a:	4619      	mov	r1, r3
 802675c:	4610      	mov	r0, r2
 802675e:	f7fd fe30 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026762:	687b      	ldr	r3, [r7, #4]
 8026764:	4618      	mov	r0, r3
 8026766:	3708      	adds	r7, #8
 8026768:	46bd      	mov	sp, r7
 802676a:	bd80      	pop	{r7, pc}

0802676c <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1EOS4_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 802676c:	b5b0      	push	{r4, r5, r7, lr}
 802676e:	b08c      	sub	sp, #48	; 0x30
 8026770:	af00      	add	r7, sp, #0
 8026772:	6078      	str	r0, [r7, #4]
 8026774:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8026776:	6839      	ldr	r1, [r7, #0]
 8026778:	6878      	ldr	r0, [r7, #4]
 802677a:	f7ff ffd3 	bl	8026724 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1ERKS4_>
	{ __x = _Deque_impl_data(); }
 802677e:	f107 0308 	add.w	r3, r7, #8
 8026782:	4618      	mov	r0, r3
 8026784:	f7fe fa16 	bl	8024bb4 <_ZNSt11_Deque_baseIN10BHYWrapper8BHYFrameESaIS1_EE16_Deque_impl_dataC1Ev>
 8026788:	683b      	ldr	r3, [r7, #0]
 802678a:	461d      	mov	r5, r3
 802678c:	f107 0408 	add.w	r4, r7, #8
 8026790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026798:	e894 0003 	ldmia.w	r4, {r0, r1}
 802679c:	e885 0003 	stmia.w	r5, {r0, r1}
 80267a0:	687b      	ldr	r3, [r7, #4]
 80267a2:	4618      	mov	r0, r3
 80267a4:	3730      	adds	r7, #48	; 0x30
 80267a6:	46bd      	mov	sp, r7
 80267a8:	bdb0      	pop	{r4, r5, r7, pc}

080267aa <_ZSt4moveIRSaIN10BHYWrapper8BHYFrameEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80267aa:	b480      	push	{r7}
 80267ac:	b083      	sub	sp, #12
 80267ae:	af00      	add	r7, sp, #0
 80267b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80267b2:	687b      	ldr	r3, [r7, #4]
 80267b4:	4618      	mov	r0, r3
 80267b6:	370c      	adds	r7, #12
 80267b8:	46bd      	mov	sp, r7
 80267ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267be:	4770      	bx	lr

080267c0 <_ZSt4moveIRNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80267c0:	b480      	push	{r7}
 80267c2:	b083      	sub	sp, #12
 80267c4:	af00      	add	r7, sp, #0
 80267c6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80267c8:	687b      	ldr	r3, [r7, #4]
 80267ca:	4618      	mov	r0, r3
 80267cc:	370c      	adds	r7, #12
 80267ce:	46bd      	mov	sp, r7
 80267d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267d4:	4770      	bx	lr

080267d6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 80267d6:	b580      	push	{r7, lr}
 80267d8:	b082      	sub	sp, #8
 80267da:	af00      	add	r7, sp, #0
 80267dc:	6078      	str	r0, [r7, #4]
 80267de:	6039      	str	r1, [r7, #0]
 80267e0:	683b      	ldr	r3, [r7, #0]
 80267e2:	681a      	ldr	r2, [r3, #0]
 80267e4:	687b      	ldr	r3, [r7, #4]
 80267e6:	601a      	str	r2, [r3, #0]
 80267e8:	683b      	ldr	r3, [r7, #0]
 80267ea:	685a      	ldr	r2, [r3, #4]
 80267ec:	687b      	ldr	r3, [r7, #4]
 80267ee:	605a      	str	r2, [r3, #4]
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	f103 0208 	add.w	r2, r3, #8
 80267f6:	683b      	ldr	r3, [r7, #0]
 80267f8:	3308      	adds	r3, #8
 80267fa:	4619      	mov	r1, r3
 80267fc:	4610      	mov	r0, r2
 80267fe:	f7fd fe71 	bl	80244e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8026802:	687b      	ldr	r3, [r7, #4]
 8026804:	f103 0218 	add.w	r2, r3, #24
 8026808:	683b      	ldr	r3, [r7, #0]
 802680a:	3318      	adds	r3, #24
 802680c:	4619      	mov	r1, r3
 802680e:	4610      	mov	r0, r2
 8026810:	f7fd fe68 	bl	80244e4 <_ZNSt15_Deque_iteratorIjRjPjEC1ERKS2_>
 8026814:	687b      	ldr	r3, [r7, #4]
 8026816:	4618      	mov	r0, r3
 8026818:	3708      	adds	r7, #8
 802681a:	46bd      	mov	sp, r7
 802681c:	bd80      	pop	{r7, pc}

0802681e <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1EOS2_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 802681e:	b5b0      	push	{r4, r5, r7, lr}
 8026820:	b08c      	sub	sp, #48	; 0x30
 8026822:	af00      	add	r7, sp, #0
 8026824:	6078      	str	r0, [r7, #4]
 8026826:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8026828:	6839      	ldr	r1, [r7, #0]
 802682a:	6878      	ldr	r0, [r7, #4]
 802682c:	f7ff ffd3 	bl	80267d6 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1ERKS2_>
	{ __x = _Deque_impl_data(); }
 8026830:	f107 0308 	add.w	r3, r7, #8
 8026834:	4618      	mov	r0, r3
 8026836:	f7ff f9a4 	bl	8025b82 <_ZNSt11_Deque_baseIjSaIjEE16_Deque_impl_dataC1Ev>
 802683a:	683b      	ldr	r3, [r7, #0]
 802683c:	461d      	mov	r5, r3
 802683e:	f107 0408 	add.w	r4, r7, #8
 8026842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802684a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802684e:	e885 0003 	stmia.w	r5, {r0, r1}
 8026852:	687b      	ldr	r3, [r7, #4]
 8026854:	4618      	mov	r0, r3
 8026856:	3730      	adds	r7, #48	; 0x30
 8026858:	46bd      	mov	sp, r7
 802685a:	bdb0      	pop	{r4, r5, r7, pc}

0802685c <_ZSt4moveIRSaIjEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 802685c:	b480      	push	{r7}
 802685e:	b083      	sub	sp, #12
 8026860:	af00      	add	r7, sp, #0
 8026862:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026864:	687b      	ldr	r3, [r7, #4]
 8026866:	4618      	mov	r0, r3
 8026868:	370c      	adds	r7, #12
 802686a:	46bd      	mov	sp, r7
 802686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026870:	4770      	bx	lr

08026872 <_ZSt14__copy_move_a1ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026872:	b580      	push	{r7, lr}
 8026874:	b084      	sub	sp, #16
 8026876:	af00      	add	r7, sp, #0
 8026878:	60f8      	str	r0, [r7, #12]
 802687a:	60b9      	str	r1, [r7, #8]
 802687c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802687e:	687a      	ldr	r2, [r7, #4]
 8026880:	68b9      	ldr	r1, [r7, #8]
 8026882:	68f8      	ldr	r0, [r7, #12]
 8026884:	f000 fa3b 	bl	8026cfe <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>
 8026888:	4603      	mov	r3, r0
 802688a:	4618      	mov	r0, r3
 802688c:	3710      	adds	r7, #16
 802688e:	46bd      	mov	sp, r7
 8026890:	bd80      	pop	{r7, pc}

08026892 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>:
      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 8026892:	b580      	push	{r7, lr}
 8026894:	b082      	sub	sp, #8
 8026896:	af00      	add	r7, sp, #0
 8026898:	6078      	str	r0, [r7, #4]
 802689a:	6039      	str	r1, [r7, #0]
      { return *this += -__n; }
 802689c:	683b      	ldr	r3, [r7, #0]
 802689e:	425b      	negs	r3, r3
 80268a0:	4619      	mov	r1, r3
 80268a2:	6878      	ldr	r0, [r7, #4]
 80268a4:	f7fe ffd8 	bl	8025858 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
 80268a8:	4603      	mov	r3, r0
 80268aa:	4618      	mov	r0, r3
 80268ac:	3708      	adds	r7, #8
 80268ae:	46bd      	mov	sp, r7
 80268b0:	bd80      	pop	{r7, pc}

080268b2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS3_RS3_PS3_EEET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80268b2:	b580      	push	{r7, lr}
 80268b4:	b088      	sub	sp, #32
 80268b6:	af00      	add	r7, sp, #0
 80268b8:	60f8      	str	r0, [r7, #12]
 80268ba:	60b9      	str	r1, [r7, #8]
 80268bc:	607a      	str	r2, [r7, #4]
 80268be:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 80268c0:	f107 0310 	add.w	r3, r7, #16
 80268c4:	6839      	ldr	r1, [r7, #0]
 80268c6:	4618      	mov	r0, r3
 80268c8:	f7fd fd7b 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80268cc:	68f8      	ldr	r0, [r7, #12]
 80268ce:	f107 0310 	add.w	r3, r7, #16
 80268d2:	687a      	ldr	r2, [r7, #4]
 80268d4:	68b9      	ldr	r1, [r7, #8]
 80268d6:	f7fd feef 	bl	80246b8 <_ZSt4copyIPKN10BHYWrapper8BHYFrameESt15_Deque_iteratorIS1_RS1_PS1_EET0_T_S9_S8_>
 80268da:	68f8      	ldr	r0, [r7, #12]
 80268dc:	3720      	adds	r7, #32
 80268de:	46bd      	mov	sp, r7
 80268e0:	bd80      	pop	{r7, pc}

080268e2 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80268e2:	b580      	push	{r7, lr}
 80268e4:	b082      	sub	sp, #8
 80268e6:	af00      	add	r7, sp, #0
 80268e8:	6078      	str	r0, [r7, #4]
 80268ea:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80268ec:	683b      	ldr	r3, [r7, #0]
 80268ee:	1c5a      	adds	r2, r3, #1
 80268f0:	687b      	ldr	r3, [r7, #4]
 80268f2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80268f4:	6879      	ldr	r1, [r7, #4]
 80268f6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80268f8:	6879      	ldr	r1, [r7, #4]
 80268fa:	6809      	ldr	r1, [r1, #0]
 80268fc:	1a41      	subs	r1, r0, r1
 80268fe:	1089      	asrs	r1, r1, #2
 8026900:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8026902:	429a      	cmp	r2, r3
 8026904:	d904      	bls.n	8026910 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8026906:	2200      	movs	r2, #0
 8026908:	6839      	ldr	r1, [r7, #0]
 802690a:	6878      	ldr	r0, [r7, #4]
 802690c:	f7fe feec 	bl	80256e8 <_ZNSt5dequeIN10BHYWrapper8BHYFrameESaIS1_EE17_M_reallocate_mapEjb>
      }
 8026910:	bf00      	nop
 8026912:	3708      	adds	r7, #8
 8026914:	46bd      	mov	sp, r7
 8026916:	bd80      	pop	{r7, pc}

08026918 <_ZSt18make_move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EESt13move_iteratorIT_ES7_>:
	      const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
 8026918:	b580      	push	{r7, lr}
 802691a:	b086      	sub	sp, #24
 802691c:	af00      	add	r7, sp, #0
 802691e:	6078      	str	r0, [r7, #4]
 8026920:	6039      	str	r1, [r7, #0]
    { return move_iterator<_Iterator>(std::move(__i)); }
 8026922:	6838      	ldr	r0, [r7, #0]
 8026924:	f000 f9fb 	bl	8026d1e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8026928:	4602      	mov	r2, r0
 802692a:	f107 0308 	add.w	r3, r7, #8
 802692e:	4611      	mov	r1, r2
 8026930:	4618      	mov	r0, r3
 8026932:	f7fd fd46 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026936:	f107 0308 	add.w	r3, r7, #8
 802693a:	4619      	mov	r1, r3
 802693c:	6878      	ldr	r0, [r7, #4]
 802693e:	f000 f9f9 	bl	8026d34 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>
 8026942:	6878      	ldr	r0, [r7, #4]
 8026944:	3718      	adds	r7, #24
 8026946:	46bd      	mov	sp, r7
 8026948:	bd80      	pop	{r7, pc}

0802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>:
    class move_iterator
 802694a:	b580      	push	{r7, lr}
 802694c:	b082      	sub	sp, #8
 802694e:	af00      	add	r7, sp, #0
 8026950:	6078      	str	r0, [r7, #4]
 8026952:	6039      	str	r1, [r7, #0]
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	683a      	ldr	r2, [r7, #0]
 8026958:	4611      	mov	r1, r2
 802695a:	4618      	mov	r0, r3
 802695c:	f7fd fd31 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026960:	687b      	ldr	r3, [r7, #4]
 8026962:	4618      	mov	r0, r3
 8026964:	3708      	adds	r7, #8
 8026966:	46bd      	mov	sp, r7
 8026968:	bd80      	pop	{r7, pc}

0802696a <_ZSt22__uninitialized_copy_aISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_S3_ET0_T_S9_S8_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 802696a:	b580      	push	{r7, lr}
 802696c:	b090      	sub	sp, #64	; 0x40
 802696e:	af00      	add	r7, sp, #0
 8026970:	60f8      	str	r0, [r7, #12]
 8026972:	60b9      	str	r1, [r7, #8]
 8026974:	607a      	str	r2, [r7, #4]
 8026976:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8026978:	f107 0310 	add.w	r3, r7, #16
 802697c:	68b9      	ldr	r1, [r7, #8]
 802697e:	4618      	mov	r0, r3
 8026980:	f7ff ffe3 	bl	802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026984:	f107 0320 	add.w	r3, r7, #32
 8026988:	6879      	ldr	r1, [r7, #4]
 802698a:	4618      	mov	r0, r3
 802698c:	f7ff ffdd 	bl	802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026994:	6839      	ldr	r1, [r7, #0]
 8026996:	4618      	mov	r0, r3
 8026998:	f7fd fd13 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802699c:	68f8      	ldr	r0, [r7, #12]
 802699e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80269a2:	f107 0220 	add.w	r2, r7, #32
 80269a6:	f107 0110 	add.w	r1, r7, #16
 80269aa:	f000 f9d6 	bl	8026d5a <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 80269ae:	68f8      	ldr	r0, [r7, #12]
 80269b0:	3740      	adds	r7, #64	; 0x40
 80269b2:	46bd      	mov	sp, r7
 80269b4:	bd80      	pop	{r7, pc}

080269b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>:
    __miter_base(_Iterator __it)
 80269b6:	b580      	push	{r7, lr}
 80269b8:	b082      	sub	sp, #8
 80269ba:	af00      	add	r7, sp, #0
 80269bc:	6078      	str	r0, [r7, #4]
 80269be:	6039      	str	r1, [r7, #0]
    { return __it; }
 80269c0:	6839      	ldr	r1, [r7, #0]
 80269c2:	6878      	ldr	r0, [r7, #4]
 80269c4:	f7fd fcfd 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269c8:	6878      	ldr	r0, [r7, #4]
 80269ca:	3708      	adds	r7, #8
 80269cc:	46bd      	mov	sp, r7
 80269ce:	bd80      	pop	{r7, pc}

080269d0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80269d0:	b580      	push	{r7, lr}
 80269d2:	b0a0      	sub	sp, #128	; 0x80
 80269d4:	af00      	add	r7, sp, #0
 80269d6:	60f8      	str	r0, [r7, #12]
 80269d8:	60b9      	str	r1, [r7, #8]
 80269da:	607a      	str	r2, [r7, #4]
 80269dc:	603b      	str	r3, [r7, #0]
					     std::__niter_base(__result)));
 80269de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80269e2:	68b9      	ldr	r1, [r7, #8]
 80269e4:	4618      	mov	r0, r3
 80269e6:	f7fd fcec 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80269ea:	f107 0320 	add.w	r3, r7, #32
 80269ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80269f2:	4611      	mov	r1, r2
 80269f4:	4618      	mov	r0, r3
 80269f6:	f7ff fa09 	bl	8025e0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 80269fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80269fe:	6879      	ldr	r1, [r7, #4]
 8026a00:	4618      	mov	r0, r3
 8026a02:	f7fd fcde 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026a0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8026a0e:	4611      	mov	r1, r2
 8026a10:	4618      	mov	r0, r3
 8026a12:	f7ff f9fb 	bl	8025e0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8026a1a:	6839      	ldr	r1, [r7, #0]
 8026a1c:	4618      	mov	r0, r3
 8026a1e:	f7fd fcd0 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026a26:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8026a2a:	4611      	mov	r1, r2
 8026a2c:	4618      	mov	r0, r3
 8026a2e:	f7ff f9ed 	bl	8025e0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a32:	f107 0010 	add.w	r0, r7, #16
 8026a36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026a3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026a3e:	f107 0120 	add.w	r1, r7, #32
 8026a42:	f000 f9b3 	bl	8026dac <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026a46:	68fb      	ldr	r3, [r7, #12]
 8026a48:	f107 0210 	add.w	r2, r7, #16
 8026a4c:	6839      	ldr	r1, [r7, #0]
 8026a4e:	4618      	mov	r0, r3
 8026a50:	f7ff fa50 	bl	8025ef4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026a54:	68f8      	ldr	r0, [r7, #12]
 8026a56:	3780      	adds	r7, #128	; 0x80
 8026a58:	46bd      	mov	sp, r7
 8026a5a:	bd80      	pop	{r7, pc}

08026a5c <_ZSt22__copy_move_backward_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026a5c:	b580      	push	{r7, lr}
 8026a5e:	b0a0      	sub	sp, #128	; 0x80
 8026a60:	af00      	add	r7, sp, #0
 8026a62:	60f8      	str	r0, [r7, #12]
 8026a64:	60b9      	str	r1, [r7, #8]
 8026a66:	607a      	str	r2, [r7, #4]
 8026a68:	603b      	str	r3, [r7, #0]
		   std::__niter_base(__result)));
 8026a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026a6e:	68b9      	ldr	r1, [r7, #8]
 8026a70:	4618      	mov	r0, r3
 8026a72:	f7fd fca6 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a76:	f107 0320 	add.w	r3, r7, #32
 8026a7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8026a7e:	4611      	mov	r1, r2
 8026a80:	4618      	mov	r0, r3
 8026a82:	f7ff f9c3 	bl	8025e0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026a86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8026a8a:	6879      	ldr	r1, [r7, #4]
 8026a8c:	4618      	mov	r0, r3
 8026a8e:	f7fd fc98 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026a92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8026a96:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8026a9a:	4611      	mov	r1, r2
 8026a9c:	4618      	mov	r0, r3
 8026a9e:	f7ff f9b5 	bl	8025e0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026aa2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8026aa6:	6839      	ldr	r1, [r7, #0]
 8026aa8:	4618      	mov	r0, r3
 8026aaa:	f7fd fc8a 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026aae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026ab2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8026ab6:	4611      	mov	r1, r2
 8026ab8:	4618      	mov	r0, r3
 8026aba:	f7ff f9a7 	bl	8025e0c <_ZSt12__niter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8026abe:	f107 0010 	add.w	r0, r7, #16
 8026ac2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8026ac6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8026aca:	f107 0120 	add.w	r1, r7, #32
 8026ace:	f000 f993 	bl	8026df8 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>
 8026ad2:	68fb      	ldr	r3, [r7, #12]
 8026ad4:	f107 0210 	add.w	r2, r7, #16
 8026ad8:	6839      	ldr	r1, [r7, #0]
 8026ada:	4618      	mov	r0, r3
 8026adc:	f7ff fa0a 	bl	8025ef4 <_ZSt12__niter_wrapISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_RKS6_S6_>
    }
 8026ae0:	68f8      	ldr	r0, [r7, #12]
 8026ae2:	3780      	adds	r7, #128	; 0x80
 8026ae4:	46bd      	mov	sp, r7
 8026ae6:	bd80      	pop	{r7, pc}

08026ae8 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026ae8:	b580      	push	{r7, lr}
 8026aea:	b082      	sub	sp, #8
 8026aec:	af00      	add	r7, sp, #0
 8026aee:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026af0:	6878      	ldr	r0, [r7, #4]
 8026af2:	f000 f857 	bl	8026ba4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>
 8026af6:	4603      	mov	r3, r0
 8026af8:	4618      	mov	r0, r3
 8026afa:	3708      	adds	r7, #8
 8026afc:	46bd      	mov	sp, r7
 8026afe:	bd80      	pop	{r7, pc}

08026b00 <_ZSt12__miter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __miter_base(_Iterator __it)
 8026b00:	b480      	push	{r7}
 8026b02:	b083      	sub	sp, #12
 8026b04:	af00      	add	r7, sp, #0
 8026b06:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026b08:	687b      	ldr	r3, [r7, #4]
 8026b0a:	4618      	mov	r0, r3
 8026b0c:	370c      	adds	r7, #12
 8026b0e:	46bd      	mov	sp, r7
 8026b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b14:	4770      	bx	lr

08026b16 <_ZSt13__copy_move_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026b16:	b5b0      	push	{r4, r5, r7, lr}
 8026b18:	b084      	sub	sp, #16
 8026b1a:	af00      	add	r7, sp, #0
 8026b1c:	60f8      	str	r0, [r7, #12]
 8026b1e:	60b9      	str	r1, [r7, #8]
 8026b20:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026b22:	68f8      	ldr	r0, [r7, #12]
 8026b24:	f000 f98e 	bl	8026e44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b28:	4604      	mov	r4, r0
 8026b2a:	68b8      	ldr	r0, [r7, #8]
 8026b2c:	f000 f98a 	bl	8026e44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b30:	4605      	mov	r5, r0
 8026b32:	687b      	ldr	r3, [r7, #4]
 8026b34:	4618      	mov	r0, r3
 8026b36:	f000 f985 	bl	8026e44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b3a:	4603      	mov	r3, r0
 8026b3c:	461a      	mov	r2, r3
 8026b3e:	4629      	mov	r1, r5
 8026b40:	4620      	mov	r0, r4
 8026b42:	f000 f98a 	bl	8026e5a <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026b46:	4602      	mov	r2, r0
 8026b48:	1d3b      	adds	r3, r7, #4
 8026b4a:	4611      	mov	r1, r2
 8026b4c:	4618      	mov	r0, r3
 8026b4e:	f000 f994 	bl	8026e7a <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026b52:	4603      	mov	r3, r0
    }
 8026b54:	4618      	mov	r0, r3
 8026b56:	3710      	adds	r7, #16
 8026b58:	46bd      	mov	sp, r7
 8026b5a:	bdb0      	pop	{r4, r5, r7, pc}

08026b5c <_ZSt22__copy_move_backward_aILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026b5c:	b5b0      	push	{r4, r5, r7, lr}
 8026b5e:	b084      	sub	sp, #16
 8026b60:	af00      	add	r7, sp, #0
 8026b62:	60f8      	str	r0, [r7, #12]
 8026b64:	60b9      	str	r1, [r7, #8]
 8026b66:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026b68:	68f8      	ldr	r0, [r7, #12]
 8026b6a:	f000 f96b 	bl	8026e44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b6e:	4604      	mov	r4, r0
 8026b70:	68b8      	ldr	r0, [r7, #8]
 8026b72:	f000 f967 	bl	8026e44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b76:	4605      	mov	r5, r0
 8026b78:	687b      	ldr	r3, [r7, #4]
 8026b7a:	4618      	mov	r0, r3
 8026b7c:	f000 f962 	bl	8026e44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>
 8026b80:	4603      	mov	r3, r0
 8026b82:	461a      	mov	r2, r3
 8026b84:	4629      	mov	r1, r5
 8026b86:	4620      	mov	r0, r4
 8026b88:	f000 f983 	bl	8026e92 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026b8c:	4602      	mov	r2, r0
 8026b8e:	1d3b      	adds	r3, r7, #4
 8026b90:	4611      	mov	r1, r2
 8026b92:	4618      	mov	r0, r3
 8026b94:	f000 f971 	bl	8026e7a <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>
 8026b98:	4603      	mov	r3, r0
    }
 8026b9a:	4618      	mov	r0, r3
 8026b9c:	3710      	adds	r7, #16
 8026b9e:	46bd      	mov	sp, r7
 8026ba0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08026ba4 <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026ba4:	b480      	push	{r7}
 8026ba6:	b083      	sub	sp, #12
 8026ba8:	af00      	add	r7, sp, #0
 8026baa:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026bac:	4b03      	ldr	r3, [pc, #12]	; (8026bbc <_ZNK9__gnu_cxx13new_allocatorIN10BHYWrapper8BHYFrameEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8026bae:	4618      	mov	r0, r3
 8026bb0:	370c      	adds	r7, #12
 8026bb2:	46bd      	mov	sp, r7
 8026bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bb8:	4770      	bx	lr
 8026bba:	bf00      	nop
 8026bbc:	06666666 	.word	0x06666666

08026bc0 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8026bc0:	b580      	push	{r7, lr}
 8026bc2:	b082      	sub	sp, #8
 8026bc4:	af00      	add	r7, sp, #0
 8026bc6:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8026bc8:	6878      	ldr	r0, [r7, #4]
 8026bca:	f000 f972 	bl	8026eb2 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>
 8026bce:	4603      	mov	r3, r0
      }
 8026bd0:	4618      	mov	r0, r3
 8026bd2:	3708      	adds	r7, #8
 8026bd4:	46bd      	mov	sp, r7
 8026bd6:	bd80      	pop	{r7, pc}

08026bd8 <_ZSt4copyIPPjS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8026bd8:	b590      	push	{r4, r7, lr}
 8026bda:	b085      	sub	sp, #20
 8026bdc:	af00      	add	r7, sp, #0
 8026bde:	60f8      	str	r0, [r7, #12]
 8026be0:	60b9      	str	r1, [r7, #8]
 8026be2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026be4:	68f8      	ldr	r0, [r7, #12]
 8026be6:	f000 f970 	bl	8026eca <_ZSt12__miter_baseIPPjET_S2_>
 8026bea:	4604      	mov	r4, r0
 8026bec:	68b8      	ldr	r0, [r7, #8]
 8026bee:	f000 f96c 	bl	8026eca <_ZSt12__miter_baseIPPjET_S2_>
 8026bf2:	4603      	mov	r3, r0
 8026bf4:	687a      	ldr	r2, [r7, #4]
 8026bf6:	4619      	mov	r1, r3
 8026bf8:	4620      	mov	r0, r4
 8026bfa:	f000 f971 	bl	8026ee0 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026bfe:	4603      	mov	r3, r0
    }
 8026c00:	4618      	mov	r0, r3
 8026c02:	3714      	adds	r7, #20
 8026c04:	46bd      	mov	sp, r7
 8026c06:	bd90      	pop	{r4, r7, pc}

08026c08 <_ZSt13copy_backwardIPPjS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8026c08:	b590      	push	{r4, r7, lr}
 8026c0a:	b085      	sub	sp, #20
 8026c0c:	af00      	add	r7, sp, #0
 8026c0e:	60f8      	str	r0, [r7, #12]
 8026c10:	60b9      	str	r1, [r7, #8]
 8026c12:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8026c14:	68f8      	ldr	r0, [r7, #12]
 8026c16:	f000 f958 	bl	8026eca <_ZSt12__miter_baseIPPjET_S2_>
 8026c1a:	4604      	mov	r4, r0
 8026c1c:	68b8      	ldr	r0, [r7, #8]
 8026c1e:	f000 f954 	bl	8026eca <_ZSt12__miter_baseIPPjET_S2_>
 8026c22:	4603      	mov	r3, r0
 8026c24:	687a      	ldr	r2, [r7, #4]
 8026c26:	4619      	mov	r1, r3
 8026c28:	4620      	mov	r0, r4
 8026c2a:	f000 f97c 	bl	8026f26 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>
 8026c2e:	4603      	mov	r3, r0
    }
 8026c30:	4618      	mov	r0, r3
 8026c32:	3714      	adds	r7, #20
 8026c34:	46bd      	mov	sp, r7
 8026c36:	bd90      	pop	{r4, r7, pc}

08026c38 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026c38:	b580      	push	{r7, lr}
 8026c3a:	b084      	sub	sp, #16
 8026c3c:	af00      	add	r7, sp, #0
 8026c3e:	60f8      	str	r0, [r7, #12]
 8026c40:	60b9      	str	r1, [r7, #8]
 8026c42:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026c44:	68f8      	ldr	r0, [r7, #12]
 8026c46:	f000 f991 	bl	8026f6c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026c4a:	4602      	mov	r2, r0
 8026c4c:	68bb      	ldr	r3, [r7, #8]
 8026c4e:	4293      	cmp	r3, r2
 8026c50:	bf8c      	ite	hi
 8026c52:	2301      	movhi	r3, #1
 8026c54:	2300      	movls	r3, #0
 8026c56:	b2db      	uxtb	r3, r3
 8026c58:	2b00      	cmp	r3, #0
 8026c5a:	d001      	beq.n	8026c60 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026c5c:	f015 f875 	bl	803bd4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026c60:	68bb      	ldr	r3, [r7, #8]
 8026c62:	009b      	lsls	r3, r3, #2
 8026c64:	4618      	mov	r0, r3
 8026c66:	f015 f85f 	bl	803bd28 <_Znwj>
 8026c6a:	4603      	mov	r3, r0
      }
 8026c6c:	4618      	mov	r0, r3
 8026c6e:	3710      	adds	r7, #16
 8026c70:	46bd      	mov	sp, r7
 8026c72:	bd80      	pop	{r7, pc}

08026c74 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 8026c74:	b580      	push	{r7, lr}
 8026c76:	b084      	sub	sp, #16
 8026c78:	af00      	add	r7, sp, #0
 8026c7a:	60f8      	str	r0, [r7, #12]
 8026c7c:	60b9      	str	r1, [r7, #8]
 8026c7e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8026c80:	687b      	ldr	r3, [r7, #4]
 8026c82:	009b      	lsls	r3, r3, #2
 8026c84:	4619      	mov	r1, r3
 8026c86:	68b8      	ldr	r0, [r7, #8]
 8026c88:	f015 f84c 	bl	803bd24 <_ZdlPvj>
      }
 8026c8c:	bf00      	nop
 8026c8e:	3710      	adds	r7, #16
 8026c90:	46bd      	mov	sp, r7
 8026c92:	bd80      	pop	{r7, pc}

08026c94 <_ZNK9__gnu_cxx13new_allocatorIPN10BHYWrapper8BHYFrameEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026c94:	b480      	push	{r7}
 8026c96:	b083      	sub	sp, #12
 8026c98:	af00      	add	r7, sp, #0
 8026c9a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026c9c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026ca0:	4618      	mov	r0, r3
 8026ca2:	370c      	adds	r7, #12
 8026ca4:	46bd      	mov	sp, r7
 8026ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026caa:	4770      	bx	lr

08026cac <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8026cac:	b580      	push	{r7, lr}
 8026cae:	b084      	sub	sp, #16
 8026cb0:	af00      	add	r7, sp, #0
 8026cb2:	60f8      	str	r0, [r7, #12]
 8026cb4:	60b9      	str	r1, [r7, #8]
 8026cb6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8026cb8:	68f8      	ldr	r0, [r7, #12]
 8026cba:	f000 f963 	bl	8026f84 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>
 8026cbe:	4602      	mov	r2, r0
 8026cc0:	68bb      	ldr	r3, [r7, #8]
 8026cc2:	4293      	cmp	r3, r2
 8026cc4:	bf8c      	ite	hi
 8026cc6:	2301      	movhi	r3, #1
 8026cc8:	2300      	movls	r3, #0
 8026cca:	b2db      	uxtb	r3, r3
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	d001      	beq.n	8026cd4 <_ZN9__gnu_cxx13new_allocatorIPjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8026cd0:	f015 f83b 	bl	803bd4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8026cd4:	68bb      	ldr	r3, [r7, #8]
 8026cd6:	009b      	lsls	r3, r3, #2
 8026cd8:	4618      	mov	r0, r3
 8026cda:	f015 f825 	bl	803bd28 <_Znwj>
 8026cde:	4603      	mov	r3, r0
      }
 8026ce0:	4618      	mov	r0, r3
 8026ce2:	3710      	adds	r7, #16
 8026ce4:	46bd      	mov	sp, r7
 8026ce6:	bd80      	pop	{r7, pc}

08026ce8 <_ZN9__gnu_cxx13new_allocatorIPjEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8026ce8:	b480      	push	{r7}
 8026cea:	b083      	sub	sp, #12
 8026cec:	af00      	add	r7, sp, #0
 8026cee:	6078      	str	r0, [r7, #4]
 8026cf0:	687b      	ldr	r3, [r7, #4]
 8026cf2:	4618      	mov	r0, r3
 8026cf4:	370c      	adds	r7, #12
 8026cf6:	46bd      	mov	sp, r7
 8026cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cfc:	4770      	bx	lr

08026cfe <_ZSt14__copy_move_a2ILb0EPKN10BHYWrapper8BHYFrameEPS1_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8026cfe:	b580      	push	{r7, lr}
 8026d00:	b084      	sub	sp, #16
 8026d02:	af00      	add	r7, sp, #0
 8026d04:	60f8      	str	r0, [r7, #12]
 8026d06:	60b9      	str	r1, [r7, #8]
 8026d08:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8026d0a:	687a      	ldr	r2, [r7, #4]
 8026d0c:	68b9      	ldr	r1, [r7, #8]
 8026d0e:	68f8      	ldr	r0, [r7, #12]
 8026d10:	f000 f944 	bl	8026f9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 8026d14:	4603      	mov	r3, r0
    }
 8026d16:	4618      	mov	r0, r3
 8026d18:	3710      	adds	r7, #16
 8026d1a:	46bd      	mov	sp, r7
 8026d1c:	bd80      	pop	{r7, pc}

08026d1e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8026d1e:	b480      	push	{r7}
 8026d20:	b083      	sub	sp, #12
 8026d22:	af00      	add	r7, sp, #0
 8026d24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8026d26:	687b      	ldr	r3, [r7, #4]
 8026d28:	4618      	mov	r0, r3
 8026d2a:	370c      	adds	r7, #12
 8026d2c:	46bd      	mov	sp, r7
 8026d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d32:	4770      	bx	lr

08026d34 <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ES5_>:
      move_iterator(iterator_type __i)
 8026d34:	b590      	push	{r4, r7, lr}
 8026d36:	b083      	sub	sp, #12
 8026d38:	af00      	add	r7, sp, #0
 8026d3a:	6078      	str	r0, [r7, #4]
 8026d3c:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8026d3e:	687c      	ldr	r4, [r7, #4]
 8026d40:	6838      	ldr	r0, [r7, #0]
 8026d42:	f7ff ffec 	bl	8026d1e <_ZSt4moveIRSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEONSt16remove_referenceIT_E4typeEOS8_>
 8026d46:	4603      	mov	r3, r0
 8026d48:	4619      	mov	r1, r3
 8026d4a:	4620      	mov	r0, r4
 8026d4c:	f7fd fb39 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d50:	687b      	ldr	r3, [r7, #4]
 8026d52:	4618      	mov	r0, r3
 8026d54:	370c      	adds	r7, #12
 8026d56:	46bd      	mov	sp, r7
 8026d58:	bd90      	pop	{r4, r7, pc}

08026d5a <_ZSt18uninitialized_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8026d5a:	b580      	push	{r7, lr}
 8026d5c:	b092      	sub	sp, #72	; 0x48
 8026d5e:	af00      	add	r7, sp, #0
 8026d60:	60f8      	str	r0, [r7, #12]
 8026d62:	60b9      	str	r1, [r7, #8]
 8026d64:	607a      	str	r2, [r7, #4]
 8026d66:	603b      	str	r3, [r7, #0]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8026d68:	2301      	movs	r3, #1
 8026d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	__uninit_copy(__first, __last, __result);
 8026d6e:	f107 0314 	add.w	r3, r7, #20
 8026d72:	68b9      	ldr	r1, [r7, #8]
 8026d74:	4618      	mov	r0, r3
 8026d76:	f7ff fde8 	bl	802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026d7e:	6879      	ldr	r1, [r7, #4]
 8026d80:	4618      	mov	r0, r3
 8026d82:	f7ff fde2 	bl	802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8026d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026d8a:	6839      	ldr	r1, [r7, #0]
 8026d8c:	4618      	mov	r0, r3
 8026d8e:	f7fd fb18 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026d92:	68f8      	ldr	r0, [r7, #12]
 8026d94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026d98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8026d9c:	f107 0114 	add.w	r1, r7, #20
 8026da0:	f000 f926 	bl	8026ff0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>
    }
 8026da4:	68f8      	ldr	r0, [r7, #12]
 8026da6:	3748      	adds	r7, #72	; 0x48
 8026da8:	46bd      	mov	sp, r7
 8026daa:	bd80      	pop	{r7, pc}

08026dac <_ZSt14__copy_move_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
 8026dac:	b580      	push	{r7, lr}
 8026dae:	b090      	sub	sp, #64	; 0x40
 8026db0:	af00      	add	r7, sp, #0
 8026db2:	60f8      	str	r0, [r7, #12]
 8026db4:	60b9      	str	r1, [r7, #8]
 8026db6:	607a      	str	r2, [r7, #4]
 8026db8:	603b      	str	r3, [r7, #0]
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }
 8026dba:	f107 0310 	add.w	r3, r7, #16
 8026dbe:	68b9      	ldr	r1, [r7, #8]
 8026dc0:	4618      	mov	r0, r3
 8026dc2:	f7fd fafe 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026dc6:	f107 0320 	add.w	r3, r7, #32
 8026dca:	6879      	ldr	r1, [r7, #4]
 8026dcc:	4618      	mov	r0, r3
 8026dce:	f7fd faf8 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026dd6:	6839      	ldr	r1, [r7, #0]
 8026dd8:	4618      	mov	r0, r3
 8026dda:	f7fd faf2 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026dde:	68f8      	ldr	r0, [r7, #12]
 8026de0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026de4:	f107 0220 	add.w	r2, r7, #32
 8026de8:	f107 0110 	add.w	r1, r7, #16
 8026dec:	f000 f926 	bl	802703c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026df0:	68f8      	ldr	r0, [r7, #12]
 8026df2:	3740      	adds	r7, #64	; 0x40
 8026df4:	46bd      	mov	sp, r7
 8026df6:	bd80      	pop	{r7, pc}

08026df8 <_ZSt23__copy_move_backward_a1ILb1EN10BHYWrapper8BHYFrameERS1_PS1_S1_ESt15_Deque_iteratorIT3_RS5_PS5_ES4_IT0_T1_T2_ESC_S8_>:
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
 8026df8:	b580      	push	{r7, lr}
 8026dfa:	b090      	sub	sp, #64	; 0x40
 8026dfc:	af00      	add	r7, sp, #0
 8026dfe:	60f8      	str	r0, [r7, #12]
 8026e00:	60b9      	str	r1, [r7, #8]
 8026e02:	607a      	str	r2, [r7, #4]
 8026e04:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
		_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
		_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }
 8026e06:	f107 0310 	add.w	r3, r7, #16
 8026e0a:	68b9      	ldr	r1, [r7, #8]
 8026e0c:	4618      	mov	r0, r3
 8026e0e:	f7fd fad8 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e12:	f107 0320 	add.w	r3, r7, #32
 8026e16:	6879      	ldr	r1, [r7, #4]
 8026e18:	4618      	mov	r0, r3
 8026e1a:	f7fd fad2 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e22:	6839      	ldr	r1, [r7, #0]
 8026e24:	4618      	mov	r0, r3
 8026e26:	f7fd facc 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8026e2a:	68f8      	ldr	r0, [r7, #12]
 8026e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e30:	f107 0220 	add.w	r2, r7, #32
 8026e34:	f107 0110 	add.w	r1, r7, #16
 8026e38:	f000 f97b 	bl	8027132 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>
 8026e3c:	68f8      	ldr	r0, [r7, #12]
 8026e3e:	3740      	adds	r7, #64	; 0x40
 8026e40:	46bd      	mov	sp, r7
 8026e42:	bd80      	pop	{r7, pc}

08026e44 <_ZSt12__niter_baseIPPN10BHYWrapper8BHYFrameEET_S4_>:
    __niter_base(_Iterator __it)
 8026e44:	b480      	push	{r7}
 8026e46:	b083      	sub	sp, #12
 8026e48:	af00      	add	r7, sp, #0
 8026e4a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026e4c:	687b      	ldr	r3, [r7, #4]
 8026e4e:	4618      	mov	r0, r3
 8026e50:	370c      	adds	r7, #12
 8026e52:	46bd      	mov	sp, r7
 8026e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e58:	4770      	bx	lr

08026e5a <_ZSt14__copy_move_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8026e5a:	b580      	push	{r7, lr}
 8026e5c:	b084      	sub	sp, #16
 8026e5e:	af00      	add	r7, sp, #0
 8026e60:	60f8      	str	r0, [r7, #12]
 8026e62:	60b9      	str	r1, [r7, #8]
 8026e64:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8026e66:	687a      	ldr	r2, [r7, #4]
 8026e68:	68b9      	ldr	r1, [r7, #8]
 8026e6a:	68f8      	ldr	r0, [r7, #12]
 8026e6c:	f000 f9dc 	bl	8027228 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026e70:	4603      	mov	r3, r0
 8026e72:	4618      	mov	r0, r3
 8026e74:	3710      	adds	r7, #16
 8026e76:	46bd      	mov	sp, r7
 8026e78:	bd80      	pop	{r7, pc}

08026e7a <_ZSt12__niter_wrapIPPN10BHYWrapper8BHYFrameEET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8026e7a:	b480      	push	{r7}
 8026e7c:	b083      	sub	sp, #12
 8026e7e:	af00      	add	r7, sp, #0
 8026e80:	6078      	str	r0, [r7, #4]
 8026e82:	6039      	str	r1, [r7, #0]
    { return __res; }
 8026e84:	683b      	ldr	r3, [r7, #0]
 8026e86:	4618      	mov	r0, r3
 8026e88:	370c      	adds	r7, #12
 8026e8a:	46bd      	mov	sp, r7
 8026e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e90:	4770      	bx	lr

08026e92 <_ZSt23__copy_move_backward_a1ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 8026e92:	b580      	push	{r7, lr}
 8026e94:	b084      	sub	sp, #16
 8026e96:	af00      	add	r7, sp, #0
 8026e98:	60f8      	str	r0, [r7, #12]
 8026e9a:	60b9      	str	r1, [r7, #8]
 8026e9c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8026e9e:	687a      	ldr	r2, [r7, #4]
 8026ea0:	68b9      	ldr	r1, [r7, #8]
 8026ea2:	68f8      	ldr	r0, [r7, #12]
 8026ea4:	f000 f9d0 	bl	8027248 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>
 8026ea8:	4603      	mov	r3, r0
 8026eaa:	4618      	mov	r0, r3
 8026eac:	3710      	adds	r7, #16
 8026eae:	46bd      	mov	sp, r7
 8026eb0:	bd80      	pop	{r7, pc}

08026eb2 <_ZNK9__gnu_cxx13new_allocatorIjE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8026eb2:	b580      	push	{r7, lr}
 8026eb4:	b082      	sub	sp, #8
 8026eb6:	af00      	add	r7, sp, #0
 8026eb8:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8026eba:	6878      	ldr	r0, [r7, #4]
 8026ebc:	f000 f856 	bl	8026f6c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8026ec0:	4603      	mov	r3, r0
 8026ec2:	4618      	mov	r0, r3
 8026ec4:	3708      	adds	r7, #8
 8026ec6:	46bd      	mov	sp, r7
 8026ec8:	bd80      	pop	{r7, pc}

08026eca <_ZSt12__miter_baseIPPjET_S2_>:
    __miter_base(_Iterator __it)
 8026eca:	b480      	push	{r7}
 8026ecc:	b083      	sub	sp, #12
 8026ece:	af00      	add	r7, sp, #0
 8026ed0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8026ed2:	687b      	ldr	r3, [r7, #4]
 8026ed4:	4618      	mov	r0, r3
 8026ed6:	370c      	adds	r7, #12
 8026ed8:	46bd      	mov	sp, r7
 8026eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ede:	4770      	bx	lr

08026ee0 <_ZSt13__copy_move_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8026ee0:	b5b0      	push	{r4, r5, r7, lr}
 8026ee2:	b084      	sub	sp, #16
 8026ee4:	af00      	add	r7, sp, #0
 8026ee6:	60f8      	str	r0, [r7, #12]
 8026ee8:	60b9      	str	r1, [r7, #8]
 8026eea:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026eec:	68f8      	ldr	r0, [r7, #12]
 8026eee:	f000 f9bb 	bl	8027268 <_ZSt12__niter_baseIPPjET_S2_>
 8026ef2:	4604      	mov	r4, r0
 8026ef4:	68b8      	ldr	r0, [r7, #8]
 8026ef6:	f000 f9b7 	bl	8027268 <_ZSt12__niter_baseIPPjET_S2_>
 8026efa:	4605      	mov	r5, r0
 8026efc:	687b      	ldr	r3, [r7, #4]
 8026efe:	4618      	mov	r0, r3
 8026f00:	f000 f9b2 	bl	8027268 <_ZSt12__niter_baseIPPjET_S2_>
 8026f04:	4603      	mov	r3, r0
 8026f06:	461a      	mov	r2, r3
 8026f08:	4629      	mov	r1, r5
 8026f0a:	4620      	mov	r0, r4
 8026f0c:	f000 f9b7 	bl	802727e <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026f10:	4602      	mov	r2, r0
 8026f12:	1d3b      	adds	r3, r7, #4
 8026f14:	4611      	mov	r1, r2
 8026f16:	4618      	mov	r0, r3
 8026f18:	f000 f9c1 	bl	802729e <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026f1c:	4603      	mov	r3, r0
    }
 8026f1e:	4618      	mov	r0, r3
 8026f20:	3710      	adds	r7, #16
 8026f22:	46bd      	mov	sp, r7
 8026f24:	bdb0      	pop	{r4, r5, r7, pc}

08026f26 <_ZSt22__copy_move_backward_aILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8026f26:	b5b0      	push	{r4, r5, r7, lr}
 8026f28:	b084      	sub	sp, #16
 8026f2a:	af00      	add	r7, sp, #0
 8026f2c:	60f8      	str	r0, [r7, #12]
 8026f2e:	60b9      	str	r1, [r7, #8]
 8026f30:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8026f32:	68f8      	ldr	r0, [r7, #12]
 8026f34:	f000 f998 	bl	8027268 <_ZSt12__niter_baseIPPjET_S2_>
 8026f38:	4604      	mov	r4, r0
 8026f3a:	68b8      	ldr	r0, [r7, #8]
 8026f3c:	f000 f994 	bl	8027268 <_ZSt12__niter_baseIPPjET_S2_>
 8026f40:	4605      	mov	r5, r0
 8026f42:	687b      	ldr	r3, [r7, #4]
 8026f44:	4618      	mov	r0, r3
 8026f46:	f000 f98f 	bl	8027268 <_ZSt12__niter_baseIPPjET_S2_>
 8026f4a:	4603      	mov	r3, r0
 8026f4c:	461a      	mov	r2, r3
 8026f4e:	4629      	mov	r1, r5
 8026f50:	4620      	mov	r0, r4
 8026f52:	f000 f9b0 	bl	80272b6 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>
 8026f56:	4602      	mov	r2, r0
 8026f58:	1d3b      	adds	r3, r7, #4
 8026f5a:	4611      	mov	r1, r2
 8026f5c:	4618      	mov	r0, r3
 8026f5e:	f000 f99e 	bl	802729e <_ZSt12__niter_wrapIPPjET_RKS2_S2_>
 8026f62:	4603      	mov	r3, r0
    }
 8026f64:	4618      	mov	r0, r3
 8026f66:	3710      	adds	r7, #16
 8026f68:	46bd      	mov	sp, r7
 8026f6a:	bdb0      	pop	{r4, r5, r7, pc}

08026f6c <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026f6c:	b480      	push	{r7}
 8026f6e:	b083      	sub	sp, #12
 8026f70:	af00      	add	r7, sp, #0
 8026f72:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026f74:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026f78:	4618      	mov	r0, r3
 8026f7a:	370c      	adds	r7, #12
 8026f7c:	46bd      	mov	sp, r7
 8026f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f82:	4770      	bx	lr

08026f84 <_ZNK9__gnu_cxx13new_allocatorIPjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8026f84:	b480      	push	{r7}
 8026f86:	b083      	sub	sp, #12
 8026f88:	af00      	add	r7, sp, #0
 8026f8a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8026f8c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8026f90:	4618      	mov	r0, r3
 8026f92:	370c      	adds	r7, #12
 8026f94:	46bd      	mov	sp, r7
 8026f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f9a:	4770      	bx	lr

08026f9c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8026f9c:	b580      	push	{r7, lr}
 8026f9e:	b086      	sub	sp, #24
 8026fa0:	af00      	add	r7, sp, #0
 8026fa2:	60f8      	str	r0, [r7, #12]
 8026fa4:	60b9      	str	r1, [r7, #8]
 8026fa6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8026fa8:	68ba      	ldr	r2, [r7, #8]
 8026faa:	68fb      	ldr	r3, [r7, #12]
 8026fac:	1ad3      	subs	r3, r2, r3
 8026fae:	109b      	asrs	r3, r3, #2
 8026fb0:	4a0e      	ldr	r2, [pc, #56]	; (8026fec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 8026fb2:	fb02 f303 	mul.w	r3, r2, r3
 8026fb6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8026fb8:	697b      	ldr	r3, [r7, #20]
 8026fba:	2b00      	cmp	r3, #0
 8026fbc:	d009      	beq.n	8026fd2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8026fbe:	697a      	ldr	r2, [r7, #20]
 8026fc0:	4613      	mov	r3, r2
 8026fc2:	009b      	lsls	r3, r3, #2
 8026fc4:	4413      	add	r3, r2
 8026fc6:	009b      	lsls	r3, r3, #2
 8026fc8:	461a      	mov	r2, r3
 8026fca:	68f9      	ldr	r1, [r7, #12]
 8026fcc:	6878      	ldr	r0, [r7, #4]
 8026fce:	f014 ff4d 	bl	803be6c <memmove>
	  return __result + _Num;
 8026fd2:	697a      	ldr	r2, [r7, #20]
 8026fd4:	4613      	mov	r3, r2
 8026fd6:	009b      	lsls	r3, r3, #2
 8026fd8:	4413      	add	r3, r2
 8026fda:	009b      	lsls	r3, r3, #2
 8026fdc:	461a      	mov	r2, r3
 8026fde:	687b      	ldr	r3, [r7, #4]
 8026fe0:	4413      	add	r3, r2
	}
 8026fe2:	4618      	mov	r0, r3
 8026fe4:	3718      	adds	r7, #24
 8026fe6:	46bd      	mov	sp, r7
 8026fe8:	bd80      	pop	{r7, pc}
 8026fea:	bf00      	nop
 8026fec:	cccccccd 	.word	0xcccccccd

08026ff0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS5_PS5_EES8_EET0_T_SB_SA_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8026ff0:	b580      	push	{r7, lr}
 8026ff2:	b090      	sub	sp, #64	; 0x40
 8026ff4:	af00      	add	r7, sp, #0
 8026ff6:	60f8      	str	r0, [r7, #12]
 8026ff8:	60b9      	str	r1, [r7, #8]
 8026ffa:	607a      	str	r2, [r7, #4]
 8026ffc:	603b      	str	r3, [r7, #0]
        { return std::copy(__first, __last, __result); }
 8026ffe:	f107 0310 	add.w	r3, r7, #16
 8027002:	68b9      	ldr	r1, [r7, #8]
 8027004:	4618      	mov	r0, r3
 8027006:	f7ff fca0 	bl	802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802700a:	f107 0320 	add.w	r3, r7, #32
 802700e:	6879      	ldr	r1, [r7, #4]
 8027010:	4618      	mov	r0, r3
 8027012:	f7ff fc9a 	bl	802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 8027016:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802701a:	6839      	ldr	r1, [r7, #0]
 802701c:	4618      	mov	r0, r3
 802701e:	f7fd f9d0 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027022:	68f8      	ldr	r0, [r7, #12]
 8027024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027028:	f107 0220 	add.w	r2, r7, #32
 802702c:	f107 0110 	add.w	r1, r7, #16
 8027030:	f000 f951 	bl	80272d6 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>
 8027034:	68f8      	ldr	r0, [r7, #12]
 8027036:	3740      	adds	r7, #64	; 0x40
 8027038:	46bd      	mov	sp, r7
 802703a:	bd80      	pop	{r7, pc}

0802703c <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_dit(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
 802703c:	b5b0      	push	{r4, r5, r7, lr}
 802703e:	b09e      	sub	sp, #120	; 0x78
 8027040:	af00      	add	r7, sp, #0
 8027042:	60f8      	str	r0, [r7, #12]
 8027044:	60b9      	str	r1, [r7, #8]
 8027046:	607a      	str	r2, [r7, #4]
 8027048:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 802704a:	68bb      	ldr	r3, [r7, #8]
 802704c:	68da      	ldr	r2, [r3, #12]
 802704e:	687b      	ldr	r3, [r7, #4]
 8027050:	68db      	ldr	r3, [r3, #12]
 8027052:	429a      	cmp	r2, r3
 8027054:	d058      	beq.n	8027108 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result
 8027056:	68bb      	ldr	r3, [r7, #8]
 8027058:	681c      	ldr	r4, [r3, #0]
 802705a:	68bb      	ldr	r3, [r7, #8]
 802705c:	689d      	ldr	r5, [r3, #8]
 802705e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027062:	6839      	ldr	r1, [r7, #0]
 8027064:	4618      	mov	r0, r3
 8027066:	f7fd f9ac 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802706a:	f107 0014 	add.w	r0, r7, #20
 802706e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027072:	462a      	mov	r2, r5
 8027074:	4621      	mov	r1, r4
 8027076:	f000 f965 	bl	8027344 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 802707a:	683b      	ldr	r3, [r7, #0]
 802707c:	461c      	mov	r4, r3
 802707e:	f107 0314 	add.w	r3, r7, #20
 8027082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8027084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 8027088:	68bb      	ldr	r3, [r7, #8]
 802708a:	68db      	ldr	r3, [r3, #12]
 802708c:	3304      	adds	r3, #4
 802708e:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __last._M_node; ++__node)
 8027090:	687b      	ldr	r3, [r7, #4]
 8027092:	68db      	ldr	r3, [r3, #12]
 8027094:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8027096:	429a      	cmp	r2, r3
 8027098:	d024      	beq.n	80270e4 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result
 802709a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802709c:	681d      	ldr	r5, [r3, #0]
 802709e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80270a0:	681c      	ldr	r4, [r3, #0]
					     *__node + _Iter::_S_buffer_size(),
 80270a2:	f7fd fc72 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 80270a6:	4602      	mov	r2, r0
 80270a8:	4613      	mov	r3, r2
 80270aa:	009b      	lsls	r3, r3, #2
 80270ac:	4413      	add	r3, r2
 80270ae:	009b      	lsls	r3, r3, #2
	    __result
 80270b0:	441c      	add	r4, r3
 80270b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80270b6:	6839      	ldr	r1, [r7, #0]
 80270b8:	4618      	mov	r0, r3
 80270ba:	f7fd f982 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80270be:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80270c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80270c6:	4622      	mov	r2, r4
 80270c8:	4629      	mov	r1, r5
 80270ca:	f000 f93b 	bl	8027344 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80270ce:	683b      	ldr	r3, [r7, #0]
 80270d0:	461c      	mov	r4, r3
 80270d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80270d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80270d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
 80270dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80270de:	3304      	adds	r3, #4
 80270e0:	677b      	str	r3, [r7, #116]	; 0x74
 80270e2:	e7d5      	b.n	8027090 <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
					      __result);
 80270e4:	687b      	ldr	r3, [r7, #4]
 80270e6:	685c      	ldr	r4, [r3, #4]
 80270e8:	687b      	ldr	r3, [r7, #4]
 80270ea:	681d      	ldr	r5, [r3, #0]
 80270ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80270f0:	6839      	ldr	r1, [r7, #0]
 80270f2:	4618      	mov	r0, r3
 80270f4:	f7fd f965 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80270f8:	68f8      	ldr	r0, [r7, #12]
 80270fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80270fe:	462a      	mov	r2, r5
 8027100:	4621      	mov	r1, r4
 8027102:	f000 f91f 	bl	8027344 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8027106:	e010      	b.n	802712a <_ZSt15__copy_move_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
					  __result);
 8027108:	68bb      	ldr	r3, [r7, #8]
 802710a:	681c      	ldr	r4, [r3, #0]
 802710c:	687b      	ldr	r3, [r7, #4]
 802710e:	681d      	ldr	r5, [r3, #0]
 8027110:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027114:	6839      	ldr	r1, [r7, #0]
 8027116:	4618      	mov	r0, r3
 8027118:	f7fd f953 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 802711c:	68f8      	ldr	r0, [r7, #12]
 802711e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027122:	462a      	mov	r2, r5
 8027124:	4621      	mov	r1, r4
 8027126:	f000 f90d 	bl	8027344 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 802712a:	68f8      	ldr	r0, [r7, #12]
 802712c:	3778      	adds	r7, #120	; 0x78
 802712e:	46bd      	mov	sp, r7
 8027130:	bdb0      	pop	{r4, r5, r7, pc}

08027132 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_>:
    __copy_move_backward_dit(
 8027132:	b5b0      	push	{r4, r5, r7, lr}
 8027134:	b09e      	sub	sp, #120	; 0x78
 8027136:	af00      	add	r7, sp, #0
 8027138:	60f8      	str	r0, [r7, #12]
 802713a:	60b9      	str	r1, [r7, #8]
 802713c:	607a      	str	r2, [r7, #4]
 802713e:	603b      	str	r3, [r7, #0]
      if (__first._M_node != __last._M_node)
 8027140:	68bb      	ldr	r3, [r7, #8]
 8027142:	68da      	ldr	r2, [r3, #12]
 8027144:	687b      	ldr	r3, [r7, #4]
 8027146:	68db      	ldr	r3, [r3, #12]
 8027148:	429a      	cmp	r2, r3
 802714a:	d058      	beq.n	80271fe <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xcc>
	  __result = std::__copy_move_backward_a1<_IsMove>(
 802714c:	687b      	ldr	r3, [r7, #4]
 802714e:	685c      	ldr	r4, [r3, #4]
 8027150:	687b      	ldr	r3, [r7, #4]
 8027152:	681d      	ldr	r5, [r3, #0]
 8027154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027158:	6839      	ldr	r1, [r7, #0]
 802715a:	4618      	mov	r0, r3
 802715c:	f7fd f931 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027160:	f107 0014 	add.w	r0, r7, #20
 8027164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027168:	462a      	mov	r2, r5
 802716a:	4621      	mov	r1, r4
 802716c:	f000 f93c 	bl	80273e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 8027170:	683b      	ldr	r3, [r7, #0]
 8027172:	461c      	mov	r4, r3
 8027174:	f107 0314 	add.w	r3, r7, #20
 8027178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802717a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 802717e:	687b      	ldr	r3, [r7, #4]
 8027180:	68db      	ldr	r3, [r3, #12]
 8027182:	3b04      	subs	r3, #4
 8027184:	677b      	str	r3, [r7, #116]	; 0x74
	       __node != __first._M_node; --__node)
 8027186:	68bb      	ldr	r3, [r7, #8]
 8027188:	68db      	ldr	r3, [r3, #12]
 802718a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802718c:	429a      	cmp	r2, r3
 802718e:	d024      	beq.n	80271da <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xa8>
	    __result = std::__copy_move_backward_a1<_IsMove>(
 8027190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027192:	681d      	ldr	r5, [r3, #0]
 8027194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8027196:	681c      	ldr	r4, [r3, #0]
		*__node, *__node + _Iter::_S_buffer_size(), __result);
 8027198:	f7fd fbf7 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 802719c:	4602      	mov	r2, r0
 802719e:	4613      	mov	r3, r2
 80271a0:	009b      	lsls	r3, r3, #2
 80271a2:	4413      	add	r3, r2
 80271a4:	009b      	lsls	r3, r3, #2
	    __result = std::__copy_move_backward_a1<_IsMove>(
 80271a6:	441c      	add	r4, r3
 80271a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80271ac:	6839      	ldr	r1, [r7, #0]
 80271ae:	4618      	mov	r0, r3
 80271b0:	f7fd f907 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271b4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80271b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80271bc:	4622      	mov	r2, r4
 80271be:	4629      	mov	r1, r5
 80271c0:	f000 f912 	bl	80273e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
 80271c4:	683b      	ldr	r3, [r7, #0]
 80271c6:	461c      	mov	r4, r3
 80271c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80271cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80271ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
 80271d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80271d4:	3b04      	subs	r3, #4
 80271d6:	677b      	str	r3, [r7, #116]	; 0x74
 80271d8:	e7d5      	b.n	8027186 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0x54>
			__first._M_cur, __first._M_last, __result);
 80271da:	68bb      	ldr	r3, [r7, #8]
 80271dc:	681c      	ldr	r4, [r3, #0]
 80271de:	68bb      	ldr	r3, [r7, #8]
 80271e0:	689d      	ldr	r5, [r3, #8]
 80271e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80271e6:	6839      	ldr	r1, [r7, #0]
 80271e8:	4618      	mov	r0, r3
 80271ea:	f7fd f8ea 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 80271ee:	68f8      	ldr	r0, [r7, #12]
 80271f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80271f4:	462a      	mov	r2, r5
 80271f6:	4621      	mov	r1, r4
 80271f8:	f000 f8f6 	bl	80273e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 80271fc:	e010      	b.n	8027220 <_ZSt24__copy_move_backward_ditILb1EN10BHYWrapper8BHYFrameERS1_PS1_St15_Deque_iteratorIS1_S2_S3_EET3_S4_IT0_T1_T2_ESA_S6_+0xee>
		__first._M_cur, __last._M_cur, __result);
 80271fe:	68bb      	ldr	r3, [r7, #8]
 8027200:	681c      	ldr	r4, [r3, #0]
 8027202:	687b      	ldr	r3, [r7, #4]
 8027204:	681d      	ldr	r5, [r3, #0]
 8027206:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802720a:	6839      	ldr	r1, [r7, #0]
 802720c:	4618      	mov	r0, r3
 802720e:	f7fd f8d8 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027212:	68f8      	ldr	r0, [r7, #12]
 8027214:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8027218:	462a      	mov	r2, r5
 802721a:	4621      	mov	r1, r4
 802721c:	f000 f8e4 	bl	80273e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>
    }
 8027220:	68f8      	ldr	r0, [r7, #12]
 8027222:	3778      	adds	r7, #120	; 0x78
 8027224:	46bd      	mov	sp, r7
 8027226:	bdb0      	pop	{r4, r5, r7, pc}

08027228 <_ZSt14__copy_move_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027228:	b580      	push	{r7, lr}
 802722a:	b084      	sub	sp, #16
 802722c:	af00      	add	r7, sp, #0
 802722e:	60f8      	str	r0, [r7, #12]
 8027230:	60b9      	str	r1, [r7, #8]
 8027232:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027234:	687a      	ldr	r2, [r7, #4]
 8027236:	68b9      	ldr	r1, [r7, #8]
 8027238:	68f8      	ldr	r0, [r7, #12]
 802723a:	f000 f93b 	bl	80274b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802723e:	4603      	mov	r3, r0
    }
 8027240:	4618      	mov	r0, r3
 8027242:	3710      	adds	r7, #16
 8027244:	46bd      	mov	sp, r7
 8027246:	bd80      	pop	{r7, pc}

08027248 <_ZSt23__copy_move_backward_a2ILb0EPPN10BHYWrapper8BHYFrameES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027248:	b580      	push	{r7, lr}
 802724a:	b084      	sub	sp, #16
 802724c:	af00      	add	r7, sp, #0
 802724e:	60f8      	str	r0, [r7, #12]
 8027250:	60b9      	str	r1, [r7, #8]
 8027252:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8027254:	687a      	ldr	r2, [r7, #4]
 8027256:	68b9      	ldr	r1, [r7, #8]
 8027258:	68f8      	ldr	r0, [r7, #12]
 802725a:	f000 f948 	bl	80274ee <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>
 802725e:	4603      	mov	r3, r0
    }
 8027260:	4618      	mov	r0, r3
 8027262:	3710      	adds	r7, #16
 8027264:	46bd      	mov	sp, r7
 8027266:	bd80      	pop	{r7, pc}

08027268 <_ZSt12__niter_baseIPPjET_S2_>:
    __niter_base(_Iterator __it)
 8027268:	b480      	push	{r7}
 802726a:	b083      	sub	sp, #12
 802726c:	af00      	add	r7, sp, #0
 802726e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8027270:	687b      	ldr	r3, [r7, #4]
 8027272:	4618      	mov	r0, r3
 8027274:	370c      	adds	r7, #12
 8027276:	46bd      	mov	sp, r7
 8027278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802727c:	4770      	bx	lr

0802727e <_ZSt14__copy_move_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802727e:	b580      	push	{r7, lr}
 8027280:	b084      	sub	sp, #16
 8027282:	af00      	add	r7, sp, #0
 8027284:	60f8      	str	r0, [r7, #12]
 8027286:	60b9      	str	r1, [r7, #8]
 8027288:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 802728a:	687a      	ldr	r2, [r7, #4]
 802728c:	68b9      	ldr	r1, [r7, #8]
 802728e:	68f8      	ldr	r0, [r7, #12]
 8027290:	f000 f94f 	bl	8027532 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 8027294:	4603      	mov	r3, r0
 8027296:	4618      	mov	r0, r3
 8027298:	3710      	adds	r7, #16
 802729a:	46bd      	mov	sp, r7
 802729c:	bd80      	pop	{r7, pc}

0802729e <_ZSt12__niter_wrapIPPjET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 802729e:	b480      	push	{r7}
 80272a0:	b083      	sub	sp, #12
 80272a2:	af00      	add	r7, sp, #0
 80272a4:	6078      	str	r0, [r7, #4]
 80272a6:	6039      	str	r1, [r7, #0]
    { return __res; }
 80272a8:	683b      	ldr	r3, [r7, #0]
 80272aa:	4618      	mov	r0, r3
 80272ac:	370c      	adds	r7, #12
 80272ae:	46bd      	mov	sp, r7
 80272b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80272b4:	4770      	bx	lr

080272b6 <_ZSt23__copy_move_backward_a1ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80272b6:	b580      	push	{r7, lr}
 80272b8:	b084      	sub	sp, #16
 80272ba:	af00      	add	r7, sp, #0
 80272bc:	60f8      	str	r0, [r7, #12]
 80272be:	60b9      	str	r1, [r7, #8]
 80272c0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80272c2:	687a      	ldr	r2, [r7, #4]
 80272c4:	68b9      	ldr	r1, [r7, #8]
 80272c6:	68f8      	ldr	r0, [r7, #12]
 80272c8:	f000 f943 	bl	8027552 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>
 80272cc:	4603      	mov	r3, r0
 80272ce:	4618      	mov	r0, r3
 80272d0:	3710      	adds	r7, #16
 80272d2:	46bd      	mov	sp, r7
 80272d4:	bd80      	pop	{r7, pc}

080272d6 <_ZSt4copyISt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS3_PS3_EES6_ET0_T_S9_S8_>:
    copy(_II __first, _II __last, _OI __result)
 80272d6:	b580      	push	{r7, lr}
 80272d8:	b098      	sub	sp, #96	; 0x60
 80272da:	af00      	add	r7, sp, #0
 80272dc:	60f8      	str	r0, [r7, #12]
 80272de:	60b9      	str	r1, [r7, #8]
 80272e0:	607a      	str	r2, [r7, #4]
 80272e2:	603b      	str	r3, [r7, #0]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80272e4:	f107 0320 	add.w	r3, r7, #32
 80272e8:	68b9      	ldr	r1, [r7, #8]
 80272ea:	4618      	mov	r0, r3
 80272ec:	f7ff fb2d 	bl	802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 80272f0:	f107 0310 	add.w	r3, r7, #16
 80272f4:	f107 0220 	add.w	r2, r7, #32
 80272f8:	4611      	mov	r1, r2
 80272fa:	4618      	mov	r0, r3
 80272fc:	f000 f939 	bl	8027572 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8027300:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8027304:	6879      	ldr	r1, [r7, #4]
 8027306:	4618      	mov	r0, r3
 8027308:	f7ff fb1f 	bl	802694a <_ZNSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEC1ERKS6_>
 802730c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8027310:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8027314:	4611      	mov	r1, r2
 8027316:	4618      	mov	r0, r3
 8027318:	f000 f92b 	bl	8027572 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 802731c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8027320:	6839      	ldr	r1, [r7, #0]
 8027322:	4618      	mov	r0, r3
 8027324:	f7fd f84d 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027328:	68f8      	ldr	r0, [r7, #12]
 802732a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802732e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8027332:	f107 0110 	add.w	r1, r7, #16
 8027336:	f7ff fb4b 	bl	80269d0 <_ZSt13__copy_move_aILb1ESt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_ES5_ET1_T0_S7_S6_>
    }
 802733a:	68f8      	ldr	r0, [r7, #12]
 802733c:	3760      	adds	r7, #96	; 0x60
 802733e:	46bd      	mov	sp, r7
 8027340:	bd80      	pop	{r7, pc}
	...

08027344 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:
    __copy_move_a1(_II __first, _II __last,
 8027344:	b580      	push	{r7, lr}
 8027346:	b088      	sub	sp, #32
 8027348:	af00      	add	r7, sp, #0
 802734a:	60f8      	str	r0, [r7, #12]
 802734c:	60b9      	str	r1, [r7, #8]
 802734e:	607a      	str	r2, [r7, #4]
 8027350:	603b      	str	r3, [r7, #0]
      difference_type __len = __last - __first;
 8027352:	687a      	ldr	r2, [r7, #4]
 8027354:	68bb      	ldr	r3, [r7, #8]
 8027356:	1ad3      	subs	r3, r2, r3
 8027358:	109b      	asrs	r3, r3, #2
 802735a:	4a22      	ldr	r2, [pc, #136]	; (80273e4 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 802735c:	fb02 f303 	mul.w	r3, r2, r3
 8027360:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8027362:	697b      	ldr	r3, [r7, #20]
 8027364:	2b00      	cmp	r3, #0
 8027366:	dd34      	ble.n	80273d2 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x8e>
	    = std::min(__len, __result._M_last - __result._M_cur);
 8027368:	683b      	ldr	r3, [r7, #0]
 802736a:	689a      	ldr	r2, [r3, #8]
 802736c:	683b      	ldr	r3, [r7, #0]
 802736e:	681b      	ldr	r3, [r3, #0]
 8027370:	1ad3      	subs	r3, r2, r3
 8027372:	109b      	asrs	r3, r3, #2
 8027374:	4a1b      	ldr	r2, [pc, #108]	; (80273e4 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xa0>)
 8027376:	fb02 f303 	mul.w	r3, r2, r3
 802737a:	61bb      	str	r3, [r7, #24]
 802737c:	f107 0218 	add.w	r2, r7, #24
 8027380:	f107 0314 	add.w	r3, r7, #20
 8027384:	4611      	mov	r1, r2
 8027386:	4618      	mov	r0, r3
 8027388:	f7fe fd4d 	bl	8025e26 <_ZSt3minIiERKT_S2_S2_>
 802738c:	4603      	mov	r3, r0
	  const difference_type __clen
 802738e:	681b      	ldr	r3, [r3, #0]
 8027390:	61fb      	str	r3, [r7, #28]
	  std::__copy_move_a1<_IsMove>(__first, __first + __clen,
 8027392:	69fa      	ldr	r2, [r7, #28]
 8027394:	4613      	mov	r3, r2
 8027396:	009b      	lsls	r3, r3, #2
 8027398:	4413      	add	r3, r2
 802739a:	009b      	lsls	r3, r3, #2
 802739c:	461a      	mov	r2, r3
 802739e:	68bb      	ldr	r3, [r7, #8]
 80273a0:	1899      	adds	r1, r3, r2
 80273a2:	683b      	ldr	r3, [r7, #0]
 80273a4:	681b      	ldr	r3, [r3, #0]
 80273a6:	461a      	mov	r2, r3
 80273a8:	68b8      	ldr	r0, [r7, #8]
 80273aa:	f000 f8f8 	bl	802759e <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
	  __first += __clen;
 80273ae:	69fa      	ldr	r2, [r7, #28]
 80273b0:	4613      	mov	r3, r2
 80273b2:	009b      	lsls	r3, r3, #2
 80273b4:	4413      	add	r3, r2
 80273b6:	009b      	lsls	r3, r3, #2
 80273b8:	461a      	mov	r2, r3
 80273ba:	68bb      	ldr	r3, [r7, #8]
 80273bc:	4413      	add	r3, r2
 80273be:	60bb      	str	r3, [r7, #8]
	  __result += __clen;
 80273c0:	69f9      	ldr	r1, [r7, #28]
 80273c2:	6838      	ldr	r0, [r7, #0]
 80273c4:	f7fe fa48 	bl	8025858 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EpLEi>
	  __len -= __clen;
 80273c8:	697a      	ldr	r2, [r7, #20]
 80273ca:	69fb      	ldr	r3, [r7, #28]
 80273cc:	1ad3      	subs	r3, r2, r3
 80273ce:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 80273d0:	e7c7      	b.n	8027362 <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
      return __result;
 80273d2:	6839      	ldr	r1, [r7, #0]
 80273d4:	68f8      	ldr	r0, [r7, #12]
 80273d6:	f7fc fff4 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80273da:	68f8      	ldr	r0, [r7, #12]
 80273dc:	3720      	adds	r7, #32
 80273de:	46bd      	mov	sp, r7
 80273e0:	bd80      	pop	{r7, pc}
 80273e2:	bf00      	nop
 80273e4:	cccccccd 	.word	0xcccccccd

080273e8 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_>:

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
 80273e8:	b580      	push	{r7, lr}
 80273ea:	b088      	sub	sp, #32
 80273ec:	af00      	add	r7, sp, #0
 80273ee:	60f8      	str	r0, [r7, #12]
 80273f0:	60b9      	str	r1, [r7, #8]
 80273f2:	607a      	str	r2, [r7, #4]
 80273f4:	603b      	str	r3, [r7, #0]
		_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
 80273f6:	687a      	ldr	r2, [r7, #4]
 80273f8:	68bb      	ldr	r3, [r7, #8]
 80273fa:	1ad3      	subs	r3, r2, r3
 80273fc:	109b      	asrs	r3, r3, #2
 80273fe:	4a2c      	ldr	r2, [pc, #176]	; (80274b0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 8027400:	fb02 f303 	mul.w	r3, r2, r3
 8027404:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 8027406:	697b      	ldr	r3, [r7, #20]
 8027408:	2b00      	cmp	r3, #0
 802740a:	dd49      	ble.n	80274a0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xb8>
	{
	  difference_type __rlen = __result._M_cur - __result._M_first;
 802740c:	683b      	ldr	r3, [r7, #0]
 802740e:	681a      	ldr	r2, [r3, #0]
 8027410:	683b      	ldr	r3, [r7, #0]
 8027412:	685b      	ldr	r3, [r3, #4]
 8027414:	1ad3      	subs	r3, r2, r3
 8027416:	109b      	asrs	r3, r3, #2
 8027418:	4a25      	ldr	r2, [pc, #148]	; (80274b0 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0xc8>)
 802741a:	fb02 f303 	mul.w	r3, r2, r3
 802741e:	613b      	str	r3, [r7, #16]
	  _Tp* __rend = __result._M_cur;
 8027420:	683b      	ldr	r3, [r7, #0]
 8027422:	681b      	ldr	r3, [r3, #0]
 8027424:	61fb      	str	r3, [r7, #28]
	  if (!__rlen)
 8027426:	693b      	ldr	r3, [r7, #16]
 8027428:	2b00      	cmp	r3, #0
 802742a:	d10f      	bne.n	802744c <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x64>
	    {
	      __rlen = _Iter::_S_buffer_size();
 802742c:	f7fd faad 	bl	802498a <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_E14_S_buffer_sizeEv>
 8027430:	4603      	mov	r3, r0
 8027432:	613b      	str	r3, [r7, #16]
	      __rend = *(__result._M_node - 1) + __rlen;
 8027434:	683b      	ldr	r3, [r7, #0]
 8027436:	68db      	ldr	r3, [r3, #12]
 8027438:	3b04      	subs	r3, #4
 802743a:	681a      	ldr	r2, [r3, #0]
 802743c:	693b      	ldr	r3, [r7, #16]
 802743e:	4619      	mov	r1, r3
 8027440:	460b      	mov	r3, r1
 8027442:	009b      	lsls	r3, r3, #2
 8027444:	440b      	add	r3, r1
 8027446:	009b      	lsls	r3, r3, #2
 8027448:	4413      	add	r3, r2
 802744a:	61fb      	str	r3, [r7, #28]
	    }

	  const difference_type __clen = std::min(__len, __rlen);
 802744c:	f107 0210 	add.w	r2, r7, #16
 8027450:	f107 0314 	add.w	r3, r7, #20
 8027454:	4611      	mov	r1, r2
 8027456:	4618      	mov	r0, r3
 8027458:	f7fe fce5 	bl	8025e26 <_ZSt3minIiERKT_S2_S2_>
 802745c:	4603      	mov	r3, r0
 802745e:	681b      	ldr	r3, [r3, #0]
 8027460:	61bb      	str	r3, [r7, #24]
	  std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);
 8027462:	69ba      	ldr	r2, [r7, #24]
 8027464:	4613      	mov	r3, r2
 8027466:	009b      	lsls	r3, r3, #2
 8027468:	4413      	add	r3, r2
 802746a:	009b      	lsls	r3, r3, #2
 802746c:	425b      	negs	r3, r3
 802746e:	687a      	ldr	r2, [r7, #4]
 8027470:	4413      	add	r3, r2
 8027472:	69fa      	ldr	r2, [r7, #28]
 8027474:	6879      	ldr	r1, [r7, #4]
 8027476:	4618      	mov	r0, r3
 8027478:	f000 f8a1 	bl	80275be <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>

	  __last -= __clen;
 802747c:	69ba      	ldr	r2, [r7, #24]
 802747e:	4613      	mov	r3, r2
 8027480:	009b      	lsls	r3, r3, #2
 8027482:	4413      	add	r3, r2
 8027484:	009b      	lsls	r3, r3, #2
 8027486:	425b      	negs	r3, r3
 8027488:	687a      	ldr	r2, [r7, #4]
 802748a:	4413      	add	r3, r2
 802748c:	607b      	str	r3, [r7, #4]
	  __result -= __clen;
 802748e:	69b9      	ldr	r1, [r7, #24]
 8027490:	6838      	ldr	r0, [r7, #0]
 8027492:	f7ff f9fe 	bl	8026892 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EmIEi>
	  __len -= __clen;
 8027496:	697a      	ldr	r2, [r7, #20]
 8027498:	69bb      	ldr	r3, [r7, #24]
 802749a:	1ad3      	subs	r3, r2, r3
 802749c:	617b      	str	r3, [r7, #20]
      while (__len > 0)
 802749e:	e7b2      	b.n	8027406 <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES1_EN9__gnu_cxx11__enable_ifIXsrSt23__is_random_access_iterIT0_NSt15iterator_traitsIS6_E17iterator_categoryEE7__valueESt15_Deque_iteratorIT1_RSC_PSC_EE6__typeES6_S6_SF_+0x1e>
	}

      return __result;
 80274a0:	6839      	ldr	r1, [r7, #0]
 80274a2:	68f8      	ldr	r0, [r7, #12]
 80274a4:	f7fc ff8d 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
    }
 80274a8:	68f8      	ldr	r0, [r7, #12]
 80274aa:	3720      	adds	r7, #32
 80274ac:	46bd      	mov	sp, r7
 80274ae:	bd80      	pop	{r7, pc}
 80274b0:	cccccccd 	.word	0xcccccccd

080274b4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80274b4:	b580      	push	{r7, lr}
 80274b6:	b086      	sub	sp, #24
 80274b8:	af00      	add	r7, sp, #0
 80274ba:	60f8      	str	r0, [r7, #12]
 80274bc:	60b9      	str	r1, [r7, #8]
 80274be:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80274c0:	68ba      	ldr	r2, [r7, #8]
 80274c2:	68fb      	ldr	r3, [r7, #12]
 80274c4:	1ad3      	subs	r3, r2, r3
 80274c6:	109b      	asrs	r3, r3, #2
 80274c8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80274ca:	697b      	ldr	r3, [r7, #20]
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	d006      	beq.n	80274de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80274d0:	697b      	ldr	r3, [r7, #20]
 80274d2:	009b      	lsls	r3, r3, #2
 80274d4:	461a      	mov	r2, r3
 80274d6:	68f9      	ldr	r1, [r7, #12]
 80274d8:	6878      	ldr	r0, [r7, #4]
 80274da:	f014 fcc7 	bl	803be6c <memmove>
	  return __result + _Num;
 80274de:	697b      	ldr	r3, [r7, #20]
 80274e0:	009b      	lsls	r3, r3, #2
 80274e2:	687a      	ldr	r2, [r7, #4]
 80274e4:	4413      	add	r3, r2
	}
 80274e6:	4618      	mov	r0, r3
 80274e8:	3718      	adds	r7, #24
 80274ea:	46bd      	mov	sp, r7
 80274ec:	bd80      	pop	{r7, pc}

080274ee <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80274ee:	b580      	push	{r7, lr}
 80274f0:	b086      	sub	sp, #24
 80274f2:	af00      	add	r7, sp, #0
 80274f4:	60f8      	str	r0, [r7, #12]
 80274f6:	60b9      	str	r1, [r7, #8]
 80274f8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80274fa:	68ba      	ldr	r2, [r7, #8]
 80274fc:	68fb      	ldr	r3, [r7, #12]
 80274fe:	1ad3      	subs	r3, r2, r3
 8027500:	109b      	asrs	r3, r3, #2
 8027502:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027504:	697b      	ldr	r3, [r7, #20]
 8027506:	2b00      	cmp	r3, #0
 8027508:	d00a      	beq.n	8027520 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPN10BHYWrapper8BHYFrameEEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802750a:	697b      	ldr	r3, [r7, #20]
 802750c:	009b      	lsls	r3, r3, #2
 802750e:	425b      	negs	r3, r3
 8027510:	687a      	ldr	r2, [r7, #4]
 8027512:	18d0      	adds	r0, r2, r3
 8027514:	697b      	ldr	r3, [r7, #20]
 8027516:	009b      	lsls	r3, r3, #2
 8027518:	461a      	mov	r2, r3
 802751a:	68f9      	ldr	r1, [r7, #12]
 802751c:	f014 fca6 	bl	803be6c <memmove>
	  return __result - _Num;
 8027520:	697b      	ldr	r3, [r7, #20]
 8027522:	009b      	lsls	r3, r3, #2
 8027524:	425b      	negs	r3, r3
 8027526:	687a      	ldr	r2, [r7, #4]
 8027528:	4413      	add	r3, r2
	}
 802752a:	4618      	mov	r0, r3
 802752c:	3718      	adds	r7, #24
 802752e:	46bd      	mov	sp, r7
 8027530:	bd80      	pop	{r7, pc}

08027532 <_ZSt14__copy_move_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027532:	b580      	push	{r7, lr}
 8027534:	b084      	sub	sp, #16
 8027536:	af00      	add	r7, sp, #0
 8027538:	60f8      	str	r0, [r7, #12]
 802753a:	60b9      	str	r1, [r7, #8]
 802753c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 802753e:	687a      	ldr	r2, [r7, #4]
 8027540:	68b9      	ldr	r1, [r7, #8]
 8027542:	68f8      	ldr	r0, [r7, #12]
 8027544:	f000 f84b 	bl	80275de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>
 8027548:	4603      	mov	r3, r0
    }
 802754a:	4618      	mov	r0, r3
 802754c:	3710      	adds	r7, #16
 802754e:	46bd      	mov	sp, r7
 8027550:	bd80      	pop	{r7, pc}

08027552 <_ZSt23__copy_move_backward_a2ILb0EPPjS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027552:	b580      	push	{r7, lr}
 8027554:	b084      	sub	sp, #16
 8027556:	af00      	add	r7, sp, #0
 8027558:	60f8      	str	r0, [r7, #12]
 802755a:	60b9      	str	r1, [r7, #8]
 802755c:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 802755e:	687a      	ldr	r2, [r7, #4]
 8027560:	68b9      	ldr	r1, [r7, #8]
 8027562:	68f8      	ldr	r0, [r7, #12]
 8027564:	f000 f858 	bl	8027618 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>
 8027568:	4603      	mov	r3, r0
    }
 802756a:	4618      	mov	r0, r3
 802756c:	3710      	adds	r7, #16
 802756e:	46bd      	mov	sp, r7
 8027570:	bd80      	pop	{r7, pc}

08027572 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8027572:	b580      	push	{r7, lr}
 8027574:	b086      	sub	sp, #24
 8027576:	af00      	add	r7, sp, #0
 8027578:	6078      	str	r0, [r7, #4]
 802757a:	6039      	str	r1, [r7, #0]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 802757c:	f107 0308 	add.w	r3, r7, #8
 8027580:	6839      	ldr	r1, [r7, #0]
 8027582:	4618      	mov	r0, r3
 8027584:	f000 f86a 	bl	802765c <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>
 8027588:	687b      	ldr	r3, [r7, #4]
 802758a:	f107 0208 	add.w	r2, r7, #8
 802758e:	4611      	mov	r1, r2
 8027590:	4618      	mov	r0, r3
 8027592:	f7ff fa10 	bl	80269b6 <_ZSt12__miter_baseISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EET_S6_>
 8027596:	6878      	ldr	r0, [r7, #4]
 8027598:	3718      	adds	r7, #24
 802759a:	46bd      	mov	sp, r7
 802759c:	bd80      	pop	{r7, pc}

0802759e <_ZSt14__copy_move_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 802759e:	b580      	push	{r7, lr}
 80275a0:	b084      	sub	sp, #16
 80275a2:	af00      	add	r7, sp, #0
 80275a4:	60f8      	str	r0, [r7, #12]
 80275a6:	60b9      	str	r1, [r7, #8]
 80275a8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80275aa:	687a      	ldr	r2, [r7, #4]
 80275ac:	68b9      	ldr	r1, [r7, #8]
 80275ae:	68f8      	ldr	r0, [r7, #12]
 80275b0:	f000 f862 	bl	8027678 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 80275b4:	4603      	mov	r3, r0
 80275b6:	4618      	mov	r0, r3
 80275b8:	3710      	adds	r7, #16
 80275ba:	46bd      	mov	sp, r7
 80275bc:	bd80      	pop	{r7, pc}

080275be <_ZSt23__copy_move_backward_a1ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80275be:	b580      	push	{r7, lr}
 80275c0:	b084      	sub	sp, #16
 80275c2:	af00      	add	r7, sp, #0
 80275c4:	60f8      	str	r0, [r7, #12]
 80275c6:	60b9      	str	r1, [r7, #8]
 80275c8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80275ca:	687a      	ldr	r2, [r7, #4]
 80275cc:	68b9      	ldr	r1, [r7, #8]
 80275ce:	68f8      	ldr	r0, [r7, #12]
 80275d0:	f000 f862 	bl	8027698 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>
 80275d4:	4603      	mov	r3, r0
 80275d6:	4618      	mov	r0, r3
 80275d8:	3710      	adds	r7, #16
 80275da:	46bd      	mov	sp, r7
 80275dc:	bd80      	pop	{r7, pc}

080275de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80275de:	b580      	push	{r7, lr}
 80275e0:	b086      	sub	sp, #24
 80275e2:	af00      	add	r7, sp, #0
 80275e4:	60f8      	str	r0, [r7, #12]
 80275e6:	60b9      	str	r1, [r7, #8]
 80275e8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80275ea:	68ba      	ldr	r2, [r7, #8]
 80275ec:	68fb      	ldr	r3, [r7, #12]
 80275ee:	1ad3      	subs	r3, r2, r3
 80275f0:	109b      	asrs	r3, r3, #2
 80275f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80275f4:	697b      	ldr	r3, [r7, #20]
 80275f6:	2b00      	cmp	r3, #0
 80275f8:	d006      	beq.n	8027608 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPjEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80275fa:	697b      	ldr	r3, [r7, #20]
 80275fc:	009b      	lsls	r3, r3, #2
 80275fe:	461a      	mov	r2, r3
 8027600:	68f9      	ldr	r1, [r7, #12]
 8027602:	6878      	ldr	r0, [r7, #4]
 8027604:	f014 fc32 	bl	803be6c <memmove>
	  return __result + _Num;
 8027608:	697b      	ldr	r3, [r7, #20]
 802760a:	009b      	lsls	r3, r3, #2
 802760c:	687a      	ldr	r2, [r7, #4]
 802760e:	4413      	add	r3, r2
	}
 8027610:	4618      	mov	r0, r3
 8027612:	3718      	adds	r7, #24
 8027614:	46bd      	mov	sp, r7
 8027616:	bd80      	pop	{r7, pc}

08027618 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8027618:	b580      	push	{r7, lr}
 802761a:	b086      	sub	sp, #24
 802761c:	af00      	add	r7, sp, #0
 802761e:	60f8      	str	r0, [r7, #12]
 8027620:	60b9      	str	r1, [r7, #8]
 8027622:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027624:	68ba      	ldr	r2, [r7, #8]
 8027626:	68fb      	ldr	r3, [r7, #12]
 8027628:	1ad3      	subs	r3, r2, r3
 802762a:	109b      	asrs	r3, r3, #2
 802762c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 802762e:	697b      	ldr	r3, [r7, #20]
 8027630:	2b00      	cmp	r3, #0
 8027632:	d00a      	beq.n	802764a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPjEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8027634:	697b      	ldr	r3, [r7, #20]
 8027636:	009b      	lsls	r3, r3, #2
 8027638:	425b      	negs	r3, r3
 802763a:	687a      	ldr	r2, [r7, #4]
 802763c:	18d0      	adds	r0, r2, r3
 802763e:	697b      	ldr	r3, [r7, #20]
 8027640:	009b      	lsls	r3, r3, #2
 8027642:	461a      	mov	r2, r3
 8027644:	68f9      	ldr	r1, [r7, #12]
 8027646:	f014 fc11 	bl	803be6c <memmove>
	  return __result - _Num;
 802764a:	697b      	ldr	r3, [r7, #20]
 802764c:	009b      	lsls	r3, r3, #2
 802764e:	425b      	negs	r3, r3
 8027650:	687a      	ldr	r2, [r7, #4]
 8027652:	4413      	add	r3, r2
	}
 8027654:	4618      	mov	r0, r3
 8027656:	3718      	adds	r7, #24
 8027658:	46bd      	mov	sp, r7
 802765a:	bd80      	pop	{r7, pc}

0802765c <_ZNKSt13move_iteratorISt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS2_PS2_EE4baseEv>:
      base() const
 802765c:	b580      	push	{r7, lr}
 802765e:	b082      	sub	sp, #8
 8027660:	af00      	add	r7, sp, #0
 8027662:	6078      	str	r0, [r7, #4]
 8027664:	6039      	str	r1, [r7, #0]
      { return _M_current; }
 8027666:	683b      	ldr	r3, [r7, #0]
 8027668:	4619      	mov	r1, r3
 802766a:	6878      	ldr	r0, [r7, #4]
 802766c:	f7fc fea9 	bl	80243c2 <_ZNSt15_Deque_iteratorIN10BHYWrapper8BHYFrameERS1_PS1_EC1ERKS4_>
 8027670:	6878      	ldr	r0, [r7, #4]
 8027672:	3708      	adds	r7, #8
 8027674:	46bd      	mov	sp, r7
 8027676:	bd80      	pop	{r7, pc}

08027678 <_ZSt14__copy_move_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8027678:	b580      	push	{r7, lr}
 802767a:	b084      	sub	sp, #16
 802767c:	af00      	add	r7, sp, #0
 802767e:	60f8      	str	r0, [r7, #12]
 8027680:	60b9      	str	r1, [r7, #8]
 8027682:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8027684:	687a      	ldr	r2, [r7, #4]
 8027686:	68b9      	ldr	r1, [r7, #8]
 8027688:	68f8      	ldr	r0, [r7, #12]
 802768a:	f000 f815 	bl	80276b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 802768e:	4603      	mov	r3, r0
    }
 8027690:	4618      	mov	r0, r3
 8027692:	3710      	adds	r7, #16
 8027694:	46bd      	mov	sp, r7
 8027696:	bd80      	pop	{r7, pc}

08027698 <_ZSt23__copy_move_backward_a2ILb1EPN10BHYWrapper8BHYFrameES2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8027698:	b580      	push	{r7, lr}
 802769a:	b084      	sub	sp, #16
 802769c:	af00      	add	r7, sp, #0
 802769e:	60f8      	str	r0, [r7, #12]
 80276a0:	60b9      	str	r1, [r7, #8]
 80276a2:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80276a4:	687a      	ldr	r2, [r7, #4]
 80276a6:	68b9      	ldr	r1, [r7, #8]
 80276a8:	68f8      	ldr	r0, [r7, #12]
 80276aa:	f000 f82f 	bl	802770c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>
 80276ae:	4603      	mov	r3, r0
    }
 80276b0:	4618      	mov	r0, r3
 80276b2:	3710      	adds	r7, #16
 80276b4:	46bd      	mov	sp, r7
 80276b6:	bd80      	pop	{r7, pc}

080276b8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80276b8:	b580      	push	{r7, lr}
 80276ba:	b086      	sub	sp, #24
 80276bc:	af00      	add	r7, sp, #0
 80276be:	60f8      	str	r0, [r7, #12]
 80276c0:	60b9      	str	r1, [r7, #8]
 80276c2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80276c4:	68ba      	ldr	r2, [r7, #8]
 80276c6:	68fb      	ldr	r3, [r7, #12]
 80276c8:	1ad3      	subs	r3, r2, r3
 80276ca:	109b      	asrs	r3, r3, #2
 80276cc:	4a0e      	ldr	r2, [pc, #56]	; (8027708 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x50>)
 80276ce:	fb02 f303 	mul.w	r3, r2, r3
 80276d2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80276d4:	697b      	ldr	r3, [r7, #20]
 80276d6:	2b00      	cmp	r3, #0
 80276d8:	d009      	beq.n	80276ee <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x36>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80276da:	697a      	ldr	r2, [r7, #20]
 80276dc:	4613      	mov	r3, r2
 80276de:	009b      	lsls	r3, r3, #2
 80276e0:	4413      	add	r3, r2
 80276e2:	009b      	lsls	r3, r3, #2
 80276e4:	461a      	mov	r2, r3
 80276e6:	68f9      	ldr	r1, [r7, #12]
 80276e8:	6878      	ldr	r0, [r7, #4]
 80276ea:	f014 fbbf 	bl	803be6c <memmove>
	  return __result + _Num;
 80276ee:	697a      	ldr	r2, [r7, #20]
 80276f0:	4613      	mov	r3, r2
 80276f2:	009b      	lsls	r3, r3, #2
 80276f4:	4413      	add	r3, r2
 80276f6:	009b      	lsls	r3, r3, #2
 80276f8:	461a      	mov	r2, r3
 80276fa:	687b      	ldr	r3, [r7, #4]
 80276fc:	4413      	add	r3, r2
	}
 80276fe:	4618      	mov	r0, r3
 8027700:	3718      	adds	r7, #24
 8027702:	46bd      	mov	sp, r7
 8027704:	bd80      	pop	{r7, pc}
 8027706:	bf00      	nop
 8027708:	cccccccd 	.word	0xcccccccd

0802770c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 802770c:	b580      	push	{r7, lr}
 802770e:	b086      	sub	sp, #24
 8027710:	af00      	add	r7, sp, #0
 8027712:	60f8      	str	r0, [r7, #12]
 8027714:	60b9      	str	r1, [r7, #8]
 8027716:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8027718:	68ba      	ldr	r2, [r7, #8]
 802771a:	68fb      	ldr	r3, [r7, #12]
 802771c:	1ad3      	subs	r3, r2, r3
 802771e:	109b      	asrs	r3, r3, #2
 8027720:	4a11      	ldr	r2, [pc, #68]	; (8027768 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x5c>)
 8027722:	fb02 f303 	mul.w	r3, r2, r3
 8027726:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8027728:	697b      	ldr	r3, [r7, #20]
 802772a:	2b00      	cmp	r3, #0
 802772c:	d010      	beq.n	8027750 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN10BHYWrapper8BHYFrameEEEPT_PKS5_S8_S6_+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 802772e:	697a      	ldr	r2, [r7, #20]
 8027730:	4613      	mov	r3, r2
 8027732:	009b      	lsls	r3, r3, #2
 8027734:	4413      	add	r3, r2
 8027736:	009b      	lsls	r3, r3, #2
 8027738:	425b      	negs	r3, r3
 802773a:	687a      	ldr	r2, [r7, #4]
 802773c:	18d0      	adds	r0, r2, r3
 802773e:	697a      	ldr	r2, [r7, #20]
 8027740:	4613      	mov	r3, r2
 8027742:	009b      	lsls	r3, r3, #2
 8027744:	4413      	add	r3, r2
 8027746:	009b      	lsls	r3, r3, #2
 8027748:	461a      	mov	r2, r3
 802774a:	68f9      	ldr	r1, [r7, #12]
 802774c:	f014 fb8e 	bl	803be6c <memmove>
	  return __result - _Num;
 8027750:	697a      	ldr	r2, [r7, #20]
 8027752:	4613      	mov	r3, r2
 8027754:	009b      	lsls	r3, r3, #2
 8027756:	4413      	add	r3, r2
 8027758:	009b      	lsls	r3, r3, #2
 802775a:	425b      	negs	r3, r3
 802775c:	687a      	ldr	r2, [r7, #4]
 802775e:	4413      	add	r3, r2
	}
 8027760:	4618      	mov	r0, r3
 8027762:	3718      	adds	r7, #24
 8027764:	46bd      	mov	sp, r7
 8027766:	bd80      	pop	{r7, pc}
 8027768:	cccccccd 	.word	0xcccccccd

0802776c <_Z41__static_initialization_and_destruction_0ii>:
 802776c:	b580      	push	{r7, lr}
 802776e:	b082      	sub	sp, #8
 8027770:	af00      	add	r7, sp, #0
 8027772:	6078      	str	r0, [r7, #4]
 8027774:	6039      	str	r1, [r7, #0]
 8027776:	687b      	ldr	r3, [r7, #4]
 8027778:	2b01      	cmp	r3, #1
 802777a:	d107      	bne.n	802778c <_Z41__static_initialization_and_destruction_0ii+0x20>
 802777c:	683b      	ldr	r3, [r7, #0]
 802777e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027782:	4293      	cmp	r3, r2
 8027784:	d102      	bne.n	802778c <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 8027786:	4809      	ldr	r0, [pc, #36]	; (80277ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8027788:	f7fb fbca 	bl	8022f20 <_ZN18MotherboardContextC1Ev>
 802778c:	687b      	ldr	r3, [r7, #4]
 802778e:	2b00      	cmp	r3, #0
 8027790:	d107      	bne.n	80277a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8027792:	683b      	ldr	r3, [r7, #0]
 8027794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027798:	4293      	cmp	r3, r2
 802779a:	d102      	bne.n	80277a2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 802779c:	4803      	ldr	r0, [pc, #12]	; (80277ac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 802779e:	f7fb fc09 	bl	8022fb4 <_ZN18MotherboardContextD1Ev>
}
 80277a2:	bf00      	nop
 80277a4:	3708      	adds	r7, #8
 80277a6:	46bd      	mov	sp, r7
 80277a8:	bd80      	pop	{r7, pc}
 80277aa:	bf00      	nop
 80277ac:	240001d0 	.word	0x240001d0

080277b0 <_GLOBAL__sub_I_MotherboardInit>:
 80277b0:	b580      	push	{r7, lr}
 80277b2:	af00      	add	r7, sp, #0
 80277b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80277b8:	2001      	movs	r0, #1
 80277ba:	f7ff ffd7 	bl	802776c <_Z41__static_initialization_and_destruction_0ii>
 80277be:	bd80      	pop	{r7, pc}

080277c0 <_GLOBAL__sub_D_MotherboardInit>:
 80277c0:	b580      	push	{r7, lr}
 80277c2:	af00      	add	r7, sp, #0
 80277c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80277c8:	2000      	movs	r0, #0
 80277ca:	f7ff ffcf 	bl	802776c <_Z41__static_initialization_and_destruction_0ii>
 80277ce:	bd80      	pop	{r7, pc}

080277d0 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 80277d0:	b580      	push	{r7, lr}
 80277d2:	b086      	sub	sp, #24
 80277d4:	af00      	add	r7, sp, #0
 80277d6:	60b9      	str	r1, [r7, #8]
 80277d8:	607b      	str	r3, [r7, #4]
 80277da:	4603      	mov	r3, r0
 80277dc:	73fb      	strb	r3, [r7, #15]
 80277de:	4613      	mov	r3, r2
 80277e0:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 80277e2:	2300      	movs	r3, #0
 80277e4:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 80277e6:	687b      	ldr	r3, [r7, #4]
 80277e8:	2b00      	cmp	r3, #0
 80277ea:	d008      	beq.n	80277fe <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 80277ec:	89ba      	ldrh	r2, [r7, #12]
 80277ee:	687b      	ldr	r3, [r7, #4]
 80277f0:	7bf8      	ldrb	r0, [r7, #15]
 80277f2:	68b9      	ldr	r1, [r7, #8]
 80277f4:	f001 f925 	bl	8028a42 <bhy2_hif_get_regs>
 80277f8:	4603      	mov	r3, r0
 80277fa:	75fb      	strb	r3, [r7, #23]
 80277fc:	e001      	b.n	8027802 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80277fe:	23ff      	movs	r3, #255	; 0xff
 8027800:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027802:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027806:	4618      	mov	r0, r3
 8027808:	3718      	adds	r7, #24
 802780a:	46bd      	mov	sp, r7
 802780c:	bd80      	pop	{r7, pc}

0802780e <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 802780e:	b590      	push	{r4, r7, lr}
 8027810:	b08f      	sub	sp, #60	; 0x3c
 8027812:	af02      	add	r7, sp, #8
 8027814:	60f8      	str	r0, [r7, #12]
 8027816:	60b9      	str	r1, [r7, #8]
 8027818:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 802781a:	2300      	movs	r3, #0
 802781c:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 802781e:	687b      	ldr	r3, [r7, #4]
 8027820:	2b00      	cmp	r3, #0
 8027822:	d002      	beq.n	802782a <bhy2_get_and_process_fifo+0x1c>
 8027824:	68fb      	ldr	r3, [r7, #12]
 8027826:	2b00      	cmp	r3, #0
 8027828:	d102      	bne.n	8027830 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 802782a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802782e:	e11b      	b.n	8027a68 <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 8027830:	68bb      	ldr	r3, [r7, #8]
 8027832:	2b00      	cmp	r3, #0
 8027834:	d102      	bne.n	802783c <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 8027836:	f06f 0305 	mvn.w	r3, #5
 802783a:	e115      	b.n	8027a68 <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 802783c:	68ba      	ldr	r2, [r7, #8]
 802783e:	2100      	movs	r1, #0
 8027840:	68f8      	ldr	r0, [r7, #12]
 8027842:	f014 fb2d 	bl	803bea0 <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 8027846:	f107 0314 	add.w	r3, r7, #20
 802784a:	2214      	movs	r2, #20
 802784c:	2100      	movs	r1, #0
 802784e:	4618      	mov	r0, r3
 8027850:	f014 fb26 	bl	803bea0 <memset>

    fifos.buffer = work_buffer;
 8027854:	68fb      	ldr	r3, [r7, #12]
 8027856:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 8027858:	68bb      	ldr	r3, [r7, #8]
 802785a:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 802785c:	687a      	ldr	r2, [r7, #4]
 802785e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8027862:	4611      	mov	r1, r2
 8027864:	4618      	mov	r0, r3
 8027866:	f001 fa5f 	bl	8028d28 <bhy2_hif_get_interrupt_status>
 802786a:	4603      	mov	r3, r0
 802786c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 8027870:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027874:	2b00      	cmp	r3, #0
 8027876:	d002      	beq.n	802787e <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 8027878:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 802787c:	e0f4      	b.n	8027a68 <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 802787e:	2300      	movs	r3, #0
 8027880:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8027882:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8027886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 802788a:	e042      	b.n	8027912 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 802788c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027890:	f003 0306 	and.w	r3, r3, #6
 8027894:	2b02      	cmp	r3, #2
 8027896:	d00e      	beq.n	80278b6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8027898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802789c:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 80278a0:	2b04      	cmp	r3, #4
 80278a2:	d008      	beq.n	80278b6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80278a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80278a8:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 80278ac:	2b06      	cmp	r3, #6
 80278ae:	d002      	beq.n	80278b6 <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 80278b0:	69fb      	ldr	r3, [r7, #28]
 80278b2:	2b00      	cmp	r3, #0
 80278b4:	d020      	beq.n	80278f8 <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 80278b6:	2300      	movs	r3, #0
 80278b8:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 80278ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80278bc:	69bb      	ldr	r3, [r7, #24]
 80278be:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 80278c0:	6a3a      	ldr	r2, [r7, #32]
 80278c2:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 80278c4:	1ad1      	subs	r1, r2, r3
 80278c6:	687b      	ldr	r3, [r7, #4]
 80278c8:	f107 0214 	add.w	r2, r7, #20
 80278cc:	f102 0408 	add.w	r4, r2, #8
 80278d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80278d4:	9300      	str	r3, [sp, #0]
 80278d6:	4623      	mov	r3, r4
 80278d8:	f001 fad7 	bl	8028e8a <bhy2_hif_get_wakeup_fifo>
 80278dc:	4603      	mov	r3, r0
 80278de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 80278e2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278e6:	2b00      	cmp	r3, #0
 80278e8:	d002      	beq.n	80278f0 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 80278ea:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80278ee:	e0bb      	b.n	8027a68 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 80278f0:	69ba      	ldr	r2, [r7, #24]
 80278f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80278f4:	4413      	add	r3, r2
 80278f6:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 80278f8:	f107 0314 	add.w	r3, r7, #20
 80278fc:	687a      	ldr	r2, [r7, #4]
 80278fe:	4619      	mov	r1, r3
 8027900:	2000      	movs	r0, #0
 8027902:	f000 fbad 	bl	8028060 <parse_fifo>
 8027906:	4603      	mov	r3, r0
 8027908:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 802790c:	2300      	movs	r3, #0
 802790e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027916:	2b00      	cmp	r3, #0
 8027918:	d102      	bne.n	8027920 <bhy2_get_and_process_fifo+0x112>
 802791a:	69fb      	ldr	r3, [r7, #28]
 802791c:	2b00      	cmp	r3, #0
 802791e:	d003      	beq.n	8027928 <bhy2_get_and_process_fifo+0x11a>
 8027920:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027924:	2b00      	cmp	r3, #0
 8027926:	d0b1      	beq.n	802788c <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 8027928:	2300      	movs	r3, #0
 802792a:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 802792c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8027930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027934:	e042      	b.n	80279bc <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 8027936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802793a:	f003 0318 	and.w	r3, r3, #24
 802793e:	2b08      	cmp	r3, #8
 8027940:	d00e      	beq.n	8027960 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8027942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027946:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 802794a:	2b10      	cmp	r3, #16
 802794c:	d008      	beq.n	8027960 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802794e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027952:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 8027956:	2b18      	cmp	r3, #24
 8027958:	d002      	beq.n	8027960 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 802795a:	69fb      	ldr	r3, [r7, #28]
 802795c:	2b00      	cmp	r3, #0
 802795e:	d020      	beq.n	80279a2 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 8027960:	2300      	movs	r3, #0
 8027962:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 8027964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027966:	69bb      	ldr	r3, [r7, #24]
 8027968:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 802796a:	6a3a      	ldr	r2, [r7, #32]
 802796c:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 802796e:	1ad1      	subs	r1, r2, r3
 8027970:	687b      	ldr	r3, [r7, #4]
 8027972:	f107 0214 	add.w	r2, r7, #20
 8027976:	f102 0408 	add.w	r4, r2, #8
 802797a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802797e:	9300      	str	r3, [sp, #0]
 8027980:	4623      	mov	r3, r4
 8027982:	f001 fa98 	bl	8028eb6 <bhy2_hif_get_nonwakeup_fifo>
 8027986:	4603      	mov	r3, r0
 8027988:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 802798c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027990:	2b00      	cmp	r3, #0
 8027992:	d002      	beq.n	802799a <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8027994:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027998:	e066      	b.n	8027a68 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 802799a:	69ba      	ldr	r2, [r7, #24]
 802799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802799e:	4413      	add	r3, r2
 80279a0:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 80279a2:	f107 0314 	add.w	r3, r7, #20
 80279a6:	687a      	ldr	r2, [r7, #4]
 80279a8:	4619      	mov	r1, r3
 80279aa:	2001      	movs	r0, #1
 80279ac:	f000 fb58 	bl	8028060 <parse_fifo>
 80279b0:	4603      	mov	r3, r0
 80279b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 80279b6:	2300      	movs	r3, #0
 80279b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80279bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80279c0:	2b00      	cmp	r3, #0
 80279c2:	d102      	bne.n	80279ca <bhy2_get_and_process_fifo+0x1bc>
 80279c4:	69fb      	ldr	r3, [r7, #28]
 80279c6:	2b00      	cmp	r3, #0
 80279c8:	d003      	beq.n	80279d2 <bhy2_get_and_process_fifo+0x1c4>
 80279ca:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80279ce:	2b00      	cmp	r3, #0
 80279d0:	d0b1      	beq.n	8027936 <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 80279d2:	2300      	movs	r3, #0
 80279d4:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80279d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80279da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80279de:	e036      	b.n	8027a4e <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 80279e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80279e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80279e8:	2b00      	cmp	r3, #0
 80279ea:	d102      	bne.n	80279f2 <bhy2_get_and_process_fifo+0x1e4>
 80279ec:	69fb      	ldr	r3, [r7, #28]
 80279ee:	2b00      	cmp	r3, #0
 80279f0:	d020      	beq.n	8027a34 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 80279f2:	2300      	movs	r3, #0
 80279f4:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 80279f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80279f8:	69bb      	ldr	r3, [r7, #24]
 80279fa:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 80279fc:	6a3a      	ldr	r2, [r7, #32]
 80279fe:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8027a00:	1ad1      	subs	r1, r2, r3
 8027a02:	687b      	ldr	r3, [r7, #4]
 8027a04:	f107 0214 	add.w	r2, r7, #20
 8027a08:	f102 0408 	add.w	r4, r2, #8
 8027a0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8027a10:	9300      	str	r3, [sp, #0]
 8027a12:	4623      	mov	r3, r4
 8027a14:	f001 fab0 	bl	8028f78 <bhy2_hif_get_status_fifo_async>
 8027a18:	4603      	mov	r3, r0
 8027a1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8027a1e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027a22:	2b00      	cmp	r3, #0
 8027a24:	d002      	beq.n	8027a2c <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8027a26:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027a2a:	e01d      	b.n	8027a68 <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8027a2c:	69ba      	ldr	r2, [r7, #24]
 8027a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027a30:	4413      	add	r3, r2
 8027a32:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8027a34:	f107 0314 	add.w	r3, r7, #20
 8027a38:	687a      	ldr	r2, [r7, #4]
 8027a3a:	4619      	mov	r1, r3
 8027a3c:	2002      	movs	r0, #2
 8027a3e:	f000 fb0f 	bl	8028060 <parse_fifo>
 8027a42:	4603      	mov	r3, r0
 8027a44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8027a48:	2300      	movs	r3, #0
 8027a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8027a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8027a52:	2b00      	cmp	r3, #0
 8027a54:	d102      	bne.n	8027a5c <bhy2_get_and_process_fifo+0x24e>
 8027a56:	69fb      	ldr	r3, [r7, #28]
 8027a58:	2b00      	cmp	r3, #0
 8027a5a:	d003      	beq.n	8027a64 <bhy2_get_and_process_fifo+0x256>
 8027a5c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8027a60:	2b00      	cmp	r3, #0
 8027a62:	d0bd      	beq.n	80279e0 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8027a64:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8027a68:	4618      	mov	r0, r3
 8027a6a:	3734      	adds	r7, #52	; 0x34
 8027a6c:	46bd      	mov	sp, r7
 8027a6e:	bd90      	pop	{r4, r7, pc}

08027a70 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8027a70:	b580      	push	{r7, lr}
 8027a72:	b086      	sub	sp, #24
 8027a74:	af00      	add	r7, sp, #0
 8027a76:	4603      	mov	r3, r0
 8027a78:	ed87 0a02 	vstr	s0, [r7, #8]
 8027a7c:	6079      	str	r1, [r7, #4]
 8027a7e:	603a      	str	r2, [r7, #0]
 8027a80:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027a82:	2300      	movs	r3, #0
 8027a84:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027a86:	683b      	ldr	r3, [r7, #0]
 8027a88:	2b00      	cmp	r3, #0
 8027a8a:	d00a      	beq.n	8027aa2 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8027a8c:	683a      	ldr	r2, [r7, #0]
 8027a8e:	7bfb      	ldrb	r3, [r7, #15]
 8027a90:	6879      	ldr	r1, [r7, #4]
 8027a92:	ed97 0a02 	vldr	s0, [r7, #8]
 8027a96:	4618      	mov	r0, r3
 8027a98:	f001 fa84 	bl	8028fa4 <bhy2_hif_exec_sensor_conf_cmd>
 8027a9c:	4603      	mov	r3, r0
 8027a9e:	75fb      	strb	r3, [r7, #23]
 8027aa0:	e001      	b.n	8027aa6 <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027aa2:	23ff      	movs	r3, #255	; 0xff
 8027aa4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027aaa:	4618      	mov	r0, r3
 8027aac:	3718      	adds	r7, #24
 8027aae:	46bd      	mov	sp, r7
 8027ab0:	bd80      	pop	{r7, pc}

08027ab2 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8027ab2:	b580      	push	{r7, lr}
 8027ab4:	b084      	sub	sp, #16
 8027ab6:	af00      	add	r7, sp, #0
 8027ab8:	6078      	str	r0, [r7, #4]
 8027aba:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027abc:	2300      	movs	r3, #0
 8027abe:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027ac0:	683b      	ldr	r3, [r7, #0]
 8027ac2:	2b00      	cmp	r3, #0
 8027ac4:	d007      	beq.n	8027ad6 <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8027ac6:	683b      	ldr	r3, [r7, #0]
 8027ac8:	4619      	mov	r1, r3
 8027aca:	6878      	ldr	r0, [r7, #4]
 8027acc:	f001 f8e8 	bl	8028ca0 <bhy2_hif_get_product_id>
 8027ad0:	4603      	mov	r3, r0
 8027ad2:	73fb      	strb	r3, [r7, #15]
 8027ad4:	e001      	b.n	8027ada <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027ad6:	23ff      	movs	r3, #255	; 0xff
 8027ad8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027ade:	4618      	mov	r0, r3
 8027ae0:	3710      	adds	r7, #16
 8027ae2:	46bd      	mov	sp, r7
 8027ae4:	bd80      	pop	{r7, pc}

08027ae6 <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8027ae6:	b580      	push	{r7, lr}
 8027ae8:	b084      	sub	sp, #16
 8027aea:	af00      	add	r7, sp, #0
 8027aec:	6078      	str	r0, [r7, #4]
 8027aee:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027af0:	2300      	movs	r3, #0
 8027af2:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027af4:	683b      	ldr	r3, [r7, #0]
 8027af6:	2b00      	cmp	r3, #0
 8027af8:	d007      	beq.n	8027b0a <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8027afa:	683b      	ldr	r3, [r7, #0]
 8027afc:	4619      	mov	r1, r3
 8027afe:	6878      	ldr	r0, [r7, #4]
 8027b00:	f001 f8de 	bl	8028cc0 <bhy2_hif_get_kernel_version>
 8027b04:	4603      	mov	r3, r0
 8027b06:	73fb      	strb	r3, [r7, #15]
 8027b08:	e001      	b.n	8027b0e <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027b0a:	23ff      	movs	r3, #255	; 0xff
 8027b0c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b12:	4618      	mov	r0, r3
 8027b14:	3710      	adds	r7, #16
 8027b16:	46bd      	mov	sp, r7
 8027b18:	bd80      	pop	{r7, pc}

08027b1a <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8027b1a:	b580      	push	{r7, lr}
 8027b1c:	b084      	sub	sp, #16
 8027b1e:	af00      	add	r7, sp, #0
 8027b20:	6078      	str	r0, [r7, #4]
 8027b22:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027b24:	2300      	movs	r3, #0
 8027b26:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027b28:	683b      	ldr	r3, [r7, #0]
 8027b2a:	2b00      	cmp	r3, #0
 8027b2c:	d007      	beq.n	8027b3e <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8027b2e:	683b      	ldr	r3, [r7, #0]
 8027b30:	4619      	mov	r1, r3
 8027b32:	6878      	ldr	r0, [r7, #4]
 8027b34:	f001 f8e8 	bl	8028d08 <bhy2_hif_get_boot_status>
 8027b38:	4603      	mov	r3, r0
 8027b3a:	73fb      	strb	r3, [r7, #15]
 8027b3c:	e001      	b.n	8027b42 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027b3e:	23ff      	movs	r3, #255	; 0xff
 8027b40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b46:	4618      	mov	r0, r3
 8027b48:	3710      	adds	r7, #16
 8027b4a:	46bd      	mov	sp, r7
 8027b4c:	bd80      	pop	{r7, pc}

08027b4e <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8027b4e:	b580      	push	{r7, lr}
 8027b50:	b086      	sub	sp, #24
 8027b52:	af02      	add	r7, sp, #8
 8027b54:	6078      	str	r0, [r7, #4]
 8027b56:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8027b58:	2300      	movs	r3, #0
 8027b5a:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8027b5c:	2300      	movs	r3, #0
 8027b5e:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8027b60:	683b      	ldr	r3, [r7, #0]
 8027b62:	2b00      	cmp	r3, #0
 8027b64:	d00d      	beq.n	8027b82 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8027b66:	683b      	ldr	r3, [r7, #0]
 8027b68:	f107 0208 	add.w	r2, r7, #8
 8027b6c:	9300      	str	r3, [sp, #0]
 8027b6e:	4613      	mov	r3, r2
 8027b70:	2220      	movs	r2, #32
 8027b72:	6879      	ldr	r1, [r7, #4]
 8027b74:	f240 101f 	movw	r0, #287	; 0x11f
 8027b78:	f001 f80a 	bl	8028b90 <bhy2_hif_get_parameter>
 8027b7c:	4603      	mov	r3, r0
 8027b7e:	73fb      	strb	r3, [r7, #15]
 8027b80:	e001      	b.n	8027b86 <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027b82:	23ff      	movs	r3, #255	; 0xff
 8027b84:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027b8a:	4618      	mov	r0, r3
 8027b8c:	3710      	adds	r7, #16
 8027b8e:	46bd      	mov	sp, r7
 8027b90:	bd80      	pop	{r7, pc}

08027b92 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8027b92:	b580      	push	{r7, lr}
 8027b94:	b086      	sub	sp, #24
 8027b96:	af00      	add	r7, sp, #0
 8027b98:	60f8      	str	r0, [r7, #12]
 8027b9a:	60b9      	str	r1, [r7, #8]
 8027b9c:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027b9e:	2300      	movs	r3, #0
 8027ba0:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8027ba2:	687b      	ldr	r3, [r7, #4]
 8027ba4:	2b00      	cmp	r3, #0
 8027ba6:	d002      	beq.n	8027bae <bhy2_upload_firmware_to_ram+0x1c>
 8027ba8:	68fb      	ldr	r3, [r7, #12]
 8027baa:	2b00      	cmp	r3, #0
 8027bac:	d102      	bne.n	8027bb4 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8027bae:	23ff      	movs	r3, #255	; 0xff
 8027bb0:	75fb      	strb	r3, [r7, #23]
 8027bb2:	e007      	b.n	8027bc4 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8027bb4:	687b      	ldr	r3, [r7, #4]
 8027bb6:	461a      	mov	r2, r3
 8027bb8:	68b9      	ldr	r1, [r7, #8]
 8027bba:	68f8      	ldr	r0, [r7, #12]
 8027bbc:	f001 f90d 	bl	8028dda <bhy2_hif_upload_firmware_to_ram>
 8027bc0:	4603      	mov	r3, r0
 8027bc2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027bc8:	4618      	mov	r0, r3
 8027bca:	3718      	adds	r7, #24
 8027bcc:	46bd      	mov	sp, r7
 8027bce:	bd80      	pop	{r7, pc}

08027bd0 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8027bd0:	b580      	push	{r7, lr}
 8027bd2:	b084      	sub	sp, #16
 8027bd4:	af00      	add	r7, sp, #0
 8027bd6:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027bd8:	2300      	movs	r3, #0
 8027bda:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027bdc:	687b      	ldr	r3, [r7, #4]
 8027bde:	2b00      	cmp	r3, #0
 8027be0:	d102      	bne.n	8027be8 <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027be2:	23ff      	movs	r3, #255	; 0xff
 8027be4:	73fb      	strb	r3, [r7, #15]
 8027be6:	e005      	b.n	8027bf4 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8027be8:	687b      	ldr	r3, [r7, #4]
 8027bea:	4618      	mov	r0, r3
 8027bec:	f001 f932 	bl	8028e54 <bhy2_hif_boot_program_ram>
 8027bf0:	4603      	mov	r3, r0
 8027bf2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027bf8:	4618      	mov	r0, r3
 8027bfa:	3710      	adds	r7, #16
 8027bfc:	46bd      	mov	sp, r7
 8027bfe:	bd80      	pop	{r7, pc}

08027c00 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8027c00:	b580      	push	{r7, lr}
 8027c02:	b084      	sub	sp, #16
 8027c04:	af00      	add	r7, sp, #0
 8027c06:	4603      	mov	r3, r0
 8027c08:	6039      	str	r1, [r7, #0]
 8027c0a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027c0c:	2300      	movs	r3, #0
 8027c0e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c10:	683b      	ldr	r3, [r7, #0]
 8027c12:	2b00      	cmp	r3, #0
 8027c14:	d102      	bne.n	8027c1c <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c16:	23ff      	movs	r3, #255	; 0xff
 8027c18:	73fb      	strb	r3, [r7, #15]
 8027c1a:	e007      	b.n	8027c2c <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8027c1c:	683b      	ldr	r3, [r7, #0]
 8027c1e:	1df9      	adds	r1, r7, #7
 8027c20:	2201      	movs	r2, #1
 8027c22:	2007      	movs	r0, #7
 8027c24:	f000 ff45 	bl	8028ab2 <bhy2_hif_set_regs>
 8027c28:	4603      	mov	r3, r0
 8027c2a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c30:	4618      	mov	r0, r3
 8027c32:	3710      	adds	r7, #16
 8027c34:	46bd      	mov	sp, r7
 8027c36:	bd80      	pop	{r7, pc}

08027c38 <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8027c38:	b580      	push	{r7, lr}
 8027c3a:	b084      	sub	sp, #16
 8027c3c:	af00      	add	r7, sp, #0
 8027c3e:	6078      	str	r0, [r7, #4]
 8027c40:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027c42:	2300      	movs	r3, #0
 8027c44:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c46:	683b      	ldr	r3, [r7, #0]
 8027c48:	2b00      	cmp	r3, #0
 8027c4a:	d102      	bne.n	8027c52 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c4c:	23ff      	movs	r3, #255	; 0xff
 8027c4e:	73fb      	strb	r3, [r7, #15]
 8027c50:	e007      	b.n	8027c62 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8027c52:	683b      	ldr	r3, [r7, #0]
 8027c54:	2201      	movs	r2, #1
 8027c56:	6879      	ldr	r1, [r7, #4]
 8027c58:	2007      	movs	r0, #7
 8027c5a:	f000 fef2 	bl	8028a42 <bhy2_hif_get_regs>
 8027c5e:	4603      	mov	r3, r0
 8027c60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c66:	4618      	mov	r0, r3
 8027c68:	3710      	adds	r7, #16
 8027c6a:	46bd      	mov	sp, r7
 8027c6c:	bd80      	pop	{r7, pc}

08027c6e <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8027c6e:	b580      	push	{r7, lr}
 8027c70:	b084      	sub	sp, #16
 8027c72:	af00      	add	r7, sp, #0
 8027c74:	6078      	str	r0, [r7, #4]
 8027c76:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027c78:	2300      	movs	r3, #0
 8027c7a:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027c7c:	683b      	ldr	r3, [r7, #0]
 8027c7e:	2b00      	cmp	r3, #0
 8027c80:	d102      	bne.n	8027c88 <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8027c82:	23ff      	movs	r3, #255	; 0xff
 8027c84:	73fb      	strb	r3, [r7, #15]
 8027c86:	e006      	b.n	8027c96 <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8027c88:	683b      	ldr	r3, [r7, #0]
 8027c8a:	4619      	mov	r1, r3
 8027c8c:	6878      	ldr	r0, [r7, #4]
 8027c8e:	f001 f84b 	bl	8028d28 <bhy2_hif_get_interrupt_status>
 8027c92:	4603      	mov	r3, r0
 8027c94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027c9a:	4618      	mov	r0, r3
 8027c9c:	3710      	adds	r7, #16
 8027c9e:	46bd      	mov	sp, r7
 8027ca0:	bd80      	pop	{r7, pc}

08027ca2 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8027ca2:	b580      	push	{r7, lr}
 8027ca4:	b084      	sub	sp, #16
 8027ca6:	af00      	add	r7, sp, #0
 8027ca8:	4603      	mov	r3, r0
 8027caa:	6039      	str	r1, [r7, #0]
 8027cac:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8027cae:	2300      	movs	r3, #0
 8027cb0:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027cb2:	683b      	ldr	r3, [r7, #0]
 8027cb4:	2b00      	cmp	r3, #0
 8027cb6:	d102      	bne.n	8027cbe <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8027cb8:	23ff      	movs	r3, #255	; 0xff
 8027cba:	73fb      	strb	r3, [r7, #15]
 8027cbc:	e007      	b.n	8027cce <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8027cbe:	683b      	ldr	r3, [r7, #0]
 8027cc0:	1df9      	adds	r1, r7, #7
 8027cc2:	2201      	movs	r2, #1
 8027cc4:	2006      	movs	r0, #6
 8027cc6:	f000 fef4 	bl	8028ab2 <bhy2_hif_set_regs>
 8027cca:	4603      	mov	r3, r0
 8027ccc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027cd2:	4618      	mov	r0, r3
 8027cd4:	3710      	adds	r7, #16
 8027cd6:	46bd      	mov	sp, r7
 8027cd8:	bd80      	pop	{r7, pc}

08027cda <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8027cda:	b580      	push	{r7, lr}
 8027cdc:	b084      	sub	sp, #16
 8027cde:	af00      	add	r7, sp, #0
 8027ce0:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8027ce2:	2300      	movs	r3, #0
 8027ce4:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8027ce6:	687b      	ldr	r3, [r7, #4]
 8027ce8:	2b00      	cmp	r3, #0
 8027cea:	d102      	bne.n	8027cf2 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8027cec:	23ff      	movs	r3, #255	; 0xff
 8027cee:	73fb      	strb	r3, [r7, #15]
 8027cf0:	e005      	b.n	8027cfe <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8027cf2:	687b      	ldr	r3, [r7, #4]
 8027cf4:	4618      	mov	r0, r3
 8027cf6:	f001 f827 	bl	8028d48 <bhy2_hif_reset>
 8027cfa:	4603      	mov	r3, r0
 8027cfc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027d02:	4618      	mov	r0, r3
 8027d04:	3710      	adds	r7, #16
 8027d06:	46bd      	mov	sp, r7
 8027d08:	bd80      	pop	{r7, pc}

08027d0a <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8027d0a:	b580      	push	{r7, lr}
 8027d0c:	b08a      	sub	sp, #40	; 0x28
 8027d0e:	af04      	add	r7, sp, #16
 8027d10:	60b9      	str	r1, [r7, #8]
 8027d12:	607a      	str	r2, [r7, #4]
 8027d14:	603b      	str	r3, [r7, #0]
 8027d16:	4603      	mov	r3, r0
 8027d18:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027d1a:	2300      	movs	r3, #0
 8027d1c:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8027d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027d20:	2b00      	cmp	r3, #0
 8027d22:	d014      	beq.n	8027d4e <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8027d24:	f640 1238 	movw	r2, #2360	; 0x938
 8027d28:	2100      	movs	r1, #0
 8027d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027d2c:	f014 f8b8 	bl	803bea0 <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8027d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027d32:	7bf8      	ldrb	r0, [r7, #15]
 8027d34:	9302      	str	r3, [sp, #8]
 8027d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d38:	9301      	str	r3, [sp, #4]
 8027d3a:	6a3b      	ldr	r3, [r7, #32]
 8027d3c:	9300      	str	r3, [sp, #0]
 8027d3e:	683b      	ldr	r3, [r7, #0]
 8027d40:	687a      	ldr	r2, [r7, #4]
 8027d42:	68b9      	ldr	r1, [r7, #8]
 8027d44:	f000 fe3e 	bl	80289c4 <bhy2_hif_init>
 8027d48:	4603      	mov	r3, r0
 8027d4a:	75fb      	strb	r3, [r7, #23]
 8027d4c:	e001      	b.n	8027d52 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027d4e:	23ff      	movs	r3, #255	; 0xff
 8027d50:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8027d52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027d56:	4618      	mov	r0, r3
 8027d58:	3718      	adds	r7, #24
 8027d5a:	46bd      	mov	sp, r7
 8027d5c:	bd80      	pop	{r7, pc}

08027d5e <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8027d5e:	b480      	push	{r7}
 8027d60:	b087      	sub	sp, #28
 8027d62:	af00      	add	r7, sp, #0
 8027d64:	60b9      	str	r1, [r7, #8]
 8027d66:	607a      	str	r2, [r7, #4]
 8027d68:	603b      	str	r3, [r7, #0]
 8027d6a:	4603      	mov	r3, r0
 8027d6c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8027d6e:	2300      	movs	r3, #0
 8027d70:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8027d72:	683b      	ldr	r3, [r7, #0]
 8027d74:	2b00      	cmp	r3, #0
 8027d76:	d002      	beq.n	8027d7e <bhy2_register_fifo_parse_callback+0x20>
 8027d78:	68bb      	ldr	r3, [r7, #8]
 8027d7a:	2b00      	cmp	r3, #0
 8027d7c:	d102      	bne.n	8027d84 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8027d7e:	23ff      	movs	r3, #255	; 0xff
 8027d80:	75fb      	strb	r3, [r7, #23]
 8027d82:	e013      	b.n	8027dac <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8027d84:	7bfa      	ldrb	r2, [r7, #15]
 8027d86:	6839      	ldr	r1, [r7, #0]
 8027d88:	4613      	mov	r3, r2
 8027d8a:	00db      	lsls	r3, r3, #3
 8027d8c:	4413      	add	r3, r2
 8027d8e:	440b      	add	r3, r1
 8027d90:	3318      	adds	r3, #24
 8027d92:	68ba      	ldr	r2, [r7, #8]
 8027d94:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8027d98:	7bfa      	ldrb	r2, [r7, #15]
 8027d9a:	6839      	ldr	r1, [r7, #0]
 8027d9c:	4613      	mov	r3, r2
 8027d9e:	00db      	lsls	r3, r3, #3
 8027da0:	4413      	add	r3, r2
 8027da2:	440b      	add	r3, r1
 8027da4:	3318      	adds	r3, #24
 8027da6:	687a      	ldr	r2, [r7, #4]
 8027da8:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8027dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027db0:	4618      	mov	r0, r3
 8027db2:	371c      	adds	r7, #28
 8027db4:	46bd      	mov	sp, r7
 8027db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dba:	4770      	bx	lr

08027dbc <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8027dbc:	b580      	push	{r7, lr}
 8027dbe:	b092      	sub	sp, #72	; 0x48
 8027dc0:	af00      	add	r7, sp, #0
 8027dc2:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8027dc4:	687b      	ldr	r3, [r7, #4]
 8027dc6:	2b00      	cmp	r3, #0
 8027dc8:	d103      	bne.n	8027dd2 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8027dca:	23ff      	movs	r3, #255	; 0xff
 8027dcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8027dd0:	e079      	b.n	8027ec6 <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8027dd2:	f107 0308 	add.w	r3, r7, #8
 8027dd6:	6879      	ldr	r1, [r7, #4]
 8027dd8:	4618      	mov	r0, r3
 8027dda:	f7ff feb8 	bl	8027b4e <bhy2_get_virt_sensor_list>
 8027dde:	4603      	mov	r3, r0
 8027de0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8027de4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027de8:	2b00      	cmp	r3, #0
 8027dea:	d16c      	bne.n	8027ec6 <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8027dec:	687b      	ldr	r3, [r7, #4]
 8027dee:	2201      	movs	r2, #1
 8027df0:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027df2:	2301      	movs	r3, #1
 8027df4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027df8:	e041      	b.n	8027e7e <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8027dfa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027dfe:	08db      	lsrs	r3, r3, #3
 8027e00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8027e04:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e08:	f003 0307 	and.w	r3, r3, #7
 8027e0c:	2201      	movs	r2, #1
 8027e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8027e12:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8027e16:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8027e1a:	3348      	adds	r3, #72	; 0x48
 8027e1c:	443b      	add	r3, r7
 8027e1e:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8027e22:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8027e26:	4013      	ands	r3, r2
 8027e28:	b2db      	uxtb	r3, r3
 8027e2a:	2b00      	cmp	r3, #0
 8027e2c:	d022      	beq.n	8027e74 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8027e2e:	687a      	ldr	r2, [r7, #4]
 8027e30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8027e34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e38:	4618      	mov	r0, r3
 8027e3a:	f001 f8e6 	bl	802900a <bhy2_hif_get_sensor_info>
 8027e3e:	4603      	mov	r3, r0
 8027e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8027e44:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027e48:	2b00      	cmp	r3, #0
 8027e4a:	d113      	bne.n	8027e74 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8027e4c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8027e50:	2b00      	cmp	r3, #0
 8027e52:	d103      	bne.n	8027e5c <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8027e54:	23f8      	movs	r3, #248	; 0xf8
 8027e56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8027e5a:	e018      	b.n	8027e8e <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8027e5c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027e60:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8027e64:	6879      	ldr	r1, [r7, #4]
 8027e66:	4613      	mov	r3, r2
 8027e68:	00db      	lsls	r3, r3, #3
 8027e6a:	4413      	add	r3, r2
 8027e6c:	440b      	add	r3, r1
 8027e6e:	331c      	adds	r3, #28
 8027e70:	4602      	mov	r2, r0
 8027e72:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8027e74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e78:	3301      	adds	r3, #1
 8027e7a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027e7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e82:	2bf4      	cmp	r3, #244	; 0xf4
 8027e84:	d803      	bhi.n	8027e8e <bhy2_update_virtual_sensor_list+0xd2>
 8027e86:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8027e8a:	2b00      	cmp	r3, #0
 8027e8c:	d0b5      	beq.n	8027dfa <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027e8e:	23ff      	movs	r3, #255	; 0xff
 8027e90:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027e94:	e013      	b.n	8027ebe <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027e96:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027e9a:	3bf5      	subs	r3, #245	; 0xf5
 8027e9c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8027ea0:	490c      	ldr	r1, [pc, #48]	; (8027ed4 <bhy2_update_virtual_sensor_list+0x118>)
 8027ea2:	5cc8      	ldrb	r0, [r1, r3]
 8027ea4:	6879      	ldr	r1, [r7, #4]
 8027ea6:	4613      	mov	r3, r2
 8027ea8:	00db      	lsls	r3, r3, #3
 8027eaa:	4413      	add	r3, r2
 8027eac:	440b      	add	r3, r1
 8027eae:	331c      	adds	r3, #28
 8027eb0:	4602      	mov	r2, r0
 8027eb2:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8027eb4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027eb8:	3b01      	subs	r3, #1
 8027eba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8027ebe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8027ec2:	2bf4      	cmp	r3, #244	; 0xf4
 8027ec4:	d8e7      	bhi.n	8027e96 <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8027ec6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8027eca:	4618      	mov	r0, r3
 8027ecc:	3748      	adds	r7, #72	; 0x48
 8027ece:	46bd      	mov	sp, r7
 8027ed0:	bd80      	pop	{r7, pc}
 8027ed2:	bf00      	nop
 8027ed4:	0805850c 	.word	0x0805850c

08027ed8 <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8027ed8:	b580      	push	{r7, lr}
 8027eda:	b084      	sub	sp, #16
 8027edc:	af00      	add	r7, sp, #0
 8027ede:	6078      	str	r0, [r7, #4]
 8027ee0:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8027ee2:	2300      	movs	r3, #0
 8027ee4:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8027ee6:	683b      	ldr	r3, [r7, #0]
 8027ee8:	2b00      	cmp	r3, #0
 8027eea:	d002      	beq.n	8027ef2 <bhy2_get_error_value+0x1a>
 8027eec:	687b      	ldr	r3, [r7, #4]
 8027eee:	2b00      	cmp	r3, #0
 8027ef0:	d102      	bne.n	8027ef8 <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8027ef2:	23ff      	movs	r3, #255	; 0xff
 8027ef4:	73fb      	strb	r3, [r7, #15]
 8027ef6:	e007      	b.n	8027f08 <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8027ef8:	683b      	ldr	r3, [r7, #0]
 8027efa:	2201      	movs	r2, #1
 8027efc:	6879      	ldr	r1, [r7, #4]
 8027efe:	202e      	movs	r0, #46	; 0x2e
 8027f00:	f7ff fc66 	bl	80277d0 <bhy2_get_regs>
 8027f04:	4603      	mov	r3, r0
 8027f06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8027f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8027f0c:	4618      	mov	r0, r3
 8027f0e:	3710      	adds	r7, #16
 8027f10:	46bd      	mov	sp, r7
 8027f12:	bd80      	pop	{r7, pc}

08027f14 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8027f14:	b480      	push	{r7}
 8027f16:	b087      	sub	sp, #28
 8027f18:	af00      	add	r7, sp, #0
 8027f1a:	4603      	mov	r3, r0
 8027f1c:	60b9      	str	r1, [r7, #8]
 8027f1e:	607a      	str	r2, [r7, #4]
 8027f20:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8027f22:	2300      	movs	r3, #0
 8027f24:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8027f26:	687b      	ldr	r3, [r7, #4]
 8027f28:	2b00      	cmp	r3, #0
 8027f2a:	d04e      	beq.n	8027fca <get_callback_info+0xb6>
 8027f2c:	68bb      	ldr	r3, [r7, #8]
 8027f2e:	2b00      	cmp	r3, #0
 8027f30:	d04b      	beq.n	8027fca <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8027f32:	7bfa      	ldrb	r2, [r7, #15]
 8027f34:	68b8      	ldr	r0, [r7, #8]
 8027f36:	6879      	ldr	r1, [r7, #4]
 8027f38:	4613      	mov	r3, r2
 8027f3a:	00db      	lsls	r3, r3, #3
 8027f3c:	4413      	add	r3, r2
 8027f3e:	440b      	add	r3, r1
 8027f40:	3318      	adds	r3, #24
 8027f42:	4602      	mov	r2, r0
 8027f44:	3304      	adds	r3, #4
 8027f46:	6818      	ldr	r0, [r3, #0]
 8027f48:	6859      	ldr	r1, [r3, #4]
 8027f4a:	6010      	str	r0, [r2, #0]
 8027f4c:	6051      	str	r1, [r2, #4]
 8027f4e:	7a1b      	ldrb	r3, [r3, #8]
 8027f50:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8027f52:	7bfb      	ldrb	r3, [r7, #15]
 8027f54:	2bf4      	cmp	r3, #244	; 0xf4
 8027f56:	d91b      	bls.n	8027f90 <get_callback_info+0x7c>
 8027f58:	68bb      	ldr	r3, [r7, #8]
 8027f5a:	781b      	ldrb	r3, [r3, #0]
 8027f5c:	2b00      	cmp	r3, #0
 8027f5e:	d117      	bne.n	8027f90 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8027f60:	68bb      	ldr	r3, [r7, #8]
 8027f62:	2200      	movs	r2, #0
 8027f64:	705a      	strb	r2, [r3, #1]
 8027f66:	2200      	movs	r2, #0
 8027f68:	709a      	strb	r2, [r3, #2]
 8027f6a:	2200      	movs	r2, #0
 8027f6c:	70da      	strb	r2, [r3, #3]
 8027f6e:	2200      	movs	r2, #0
 8027f70:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027f72:	68bb      	ldr	r3, [r7, #8]
 8027f74:	2200      	movs	r2, #0
 8027f76:	715a      	strb	r2, [r3, #5]
 8027f78:	2200      	movs	r2, #0
 8027f7a:	719a      	strb	r2, [r3, #6]
 8027f7c:	2200      	movs	r2, #0
 8027f7e:	71da      	strb	r2, [r3, #7]
 8027f80:	2200      	movs	r2, #0
 8027f82:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8027f84:	7bfb      	ldrb	r3, [r7, #15]
 8027f86:	3bf5      	subs	r3, #245	; 0xf5
 8027f88:	4a16      	ldr	r2, [pc, #88]	; (8027fe4 <get_callback_info+0xd0>)
 8027f8a:	5cd2      	ldrb	r2, [r2, r3]
 8027f8c:	68bb      	ldr	r3, [r7, #8]
 8027f8e:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8027f90:	7bfb      	ldrb	r3, [r7, #15]
 8027f92:	2b00      	cmp	r3, #0
 8027f94:	d11c      	bne.n	8027fd0 <get_callback_info+0xbc>
 8027f96:	68bb      	ldr	r3, [r7, #8]
 8027f98:	781b      	ldrb	r3, [r3, #0]
 8027f9a:	2b00      	cmp	r3, #0
 8027f9c:	d118      	bne.n	8027fd0 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8027f9e:	68bb      	ldr	r3, [r7, #8]
 8027fa0:	2200      	movs	r2, #0
 8027fa2:	705a      	strb	r2, [r3, #1]
 8027fa4:	2200      	movs	r2, #0
 8027fa6:	709a      	strb	r2, [r3, #2]
 8027fa8:	2200      	movs	r2, #0
 8027faa:	70da      	strb	r2, [r3, #3]
 8027fac:	2200      	movs	r2, #0
 8027fae:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8027fb0:	68bb      	ldr	r3, [r7, #8]
 8027fb2:	2200      	movs	r2, #0
 8027fb4:	715a      	strb	r2, [r3, #5]
 8027fb6:	2200      	movs	r2, #0
 8027fb8:	719a      	strb	r2, [r3, #6]
 8027fba:	2200      	movs	r2, #0
 8027fbc:	71da      	strb	r2, [r3, #7]
 8027fbe:	2200      	movs	r2, #0
 8027fc0:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8027fc2:	68bb      	ldr	r3, [r7, #8]
 8027fc4:	2201      	movs	r2, #1
 8027fc6:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 8027fc8:	e002      	b.n	8027fd0 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8027fca:	23ff      	movs	r3, #255	; 0xff
 8027fcc:	75fb      	strb	r3, [r7, #23]
 8027fce:	e000      	b.n	8027fd2 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8027fd0:	bf00      	nop
    }

    return rslt;
 8027fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8027fd6:	4618      	mov	r0, r3
 8027fd8:	371c      	adds	r7, #28
 8027fda:	46bd      	mov	sp, r7
 8027fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027fe0:	4770      	bx	lr
 8027fe2:	bf00      	nop
 8027fe4:	0805850c 	.word	0x0805850c

08027fe8 <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 8027fe8:	b480      	push	{r7}
 8027fea:	b085      	sub	sp, #20
 8027fec:	af00      	add	r7, sp, #0
 8027fee:	60f8      	str	r0, [r7, #12]
 8027ff0:	460b      	mov	r3, r1
 8027ff2:	607a      	str	r2, [r7, #4]
 8027ff4:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 8027ff6:	68fb      	ldr	r3, [r7, #12]
 8027ff8:	681a      	ldr	r2, [r3, #0]
 8027ffa:	7afb      	ldrb	r3, [r7, #11]
 8027ffc:	441a      	add	r2, r3
 8027ffe:	68fb      	ldr	r3, [r7, #12]
 8028000:	685b      	ldr	r3, [r3, #4]
 8028002:	429a      	cmp	r2, r3
 8028004:	d803      	bhi.n	802800e <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 8028006:	687b      	ldr	r3, [r7, #4]
 8028008:	2200      	movs	r2, #0
 802800a:	701a      	strb	r2, [r3, #0]
 802800c:	e002      	b.n	8028014 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 802800e:	687b      	ldr	r3, [r7, #4]
 8028010:	2201      	movs	r2, #1
 8028012:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8028014:	2300      	movs	r3, #0
}
 8028016:	4618      	mov	r0, r3
 8028018:	3714      	adds	r7, #20
 802801a:	46bd      	mov	sp, r7
 802801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028020:	4770      	bx	lr

08028022 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 8028022:	b480      	push	{r7}
 8028024:	b087      	sub	sp, #28
 8028026:	af00      	add	r7, sp, #0
 8028028:	4603      	mov	r3, r0
 802802a:	60b9      	str	r1, [r7, #8]
 802802c:	607a      	str	r2, [r7, #4]
 802802e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028030:	2300      	movs	r3, #0
 8028032:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 8028034:	7bfb      	ldrb	r3, [r7, #15]
 8028036:	2b02      	cmp	r3, #2
 8028038:	d808      	bhi.n	802804c <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 802803a:	7bfb      	ldrb	r3, [r7, #15]
 802803c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8028040:	00db      	lsls	r3, r3, #3
 8028042:	687a      	ldr	r2, [r7, #4]
 8028044:	441a      	add	r2, r3
 8028046:	68bb      	ldr	r3, [r7, #8]
 8028048:	601a      	str	r2, [r3, #0]
 802804a:	e001      	b.n	8028050 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 802804c:	23f9      	movs	r3, #249	; 0xf9
 802804e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028054:	4618      	mov	r0, r3
 8028056:	371c      	adds	r7, #28
 8028058:	46bd      	mov	sp, r7
 802805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802805e:	4770      	bx	lr

08028060 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 8028060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028064:	b099      	sub	sp, #100	; 0x64
 8028066:	af00      	add	r7, sp, #0
 8028068:	4603      	mov	r3, r0
 802806a:	62b9      	str	r1, [r7, #40]	; 0x28
 802806c:	627a      	str	r2, [r7, #36]	; 0x24
 802806e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 8028072:	2300      	movs	r3, #0
 8028074:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 8028078:	2300      	movs	r3, #0
 802807a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 802807e:	2300      	movs	r3, #0
 8028080:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 8028084:	2300      	movs	r3, #0
 8028086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 802808a:	e16a      	b.n	8028362 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 802808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802808e:	681b      	ldr	r3, [r3, #0]
 8028090:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 8028092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028094:	691a      	ldr	r2, [r3, #16]
 8028096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028098:	4413      	add	r3, r2
 802809a:	781b      	ldrb	r3, [r3, #0]
 802809c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 80280a0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80280a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80280a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80280aa:	4618      	mov	r0, r3
 80280ac:	f7ff ffb9 	bl	8028022 <get_time_stamp>
 80280b0:	4603      	mov	r3, r0
 80280b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 80280b6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280ba:	2b00      	cmp	r3, #0
 80280bc:	d002      	beq.n	80280c4 <parse_fifo+0x64>
        {
            return rslt;
 80280be:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80280c2:	e191      	b.n	80283e8 <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 80280c4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80280c8:	2b00      	cmp	r3, #0
 80280ca:	d025      	beq.n	8028118 <parse_fifo+0xb8>
 80280cc:	2b00      	cmp	r3, #0
 80280ce:	f2c0 80f6 	blt.w	80282be <parse_fifo+0x25e>
 80280d2:	2bff      	cmp	r3, #255	; 0xff
 80280d4:	f300 80f3 	bgt.w	80282be <parse_fifo+0x25e>
 80280d8:	2bf5      	cmp	r3, #245	; 0xf5
 80280da:	f2c0 80f0 	blt.w	80282be <parse_fifo+0x25e>
 80280de:	3bf5      	subs	r3, #245	; 0xf5
 80280e0:	2b0a      	cmp	r3, #10
 80280e2:	f200 80ec 	bhi.w	80282be <parse_fifo+0x25e>
 80280e6:	a201      	add	r2, pc, #4	; (adr r2, 80280ec <parse_fifo+0x8c>)
 80280e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80280ec:	08028125 	.word	0x08028125
 80280f0:	0802818d 	.word	0x0802818d
 80280f4:	0802820b 	.word	0x0802820b
 80280f8:	080282bf 	.word	0x080282bf
 80280fc:	080282bf 	.word	0x080282bf
 8028100:	080282bf 	.word	0x080282bf
 8028104:	08028125 	.word	0x08028125
 8028108:	0802818d 	.word	0x0802818d
 802810c:	0802820b 	.word	0x0802820b
 8028110:	080282bf 	.word	0x080282bf
 8028114:	08028119 	.word	0x08028119
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 8028118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802811a:	681b      	ldr	r3, [r3, #0]
 802811c:	1c5a      	adds	r2, r3, #1
 802811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028120:	601a      	str	r2, [r3, #0]
                break;
 8028122:	e11e      	b.n	8028362 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 8028124:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8028128:	461a      	mov	r2, r3
 802812a:	2102      	movs	r1, #2
 802812c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802812e:	f7ff ff5b 	bl	8027fe8 <get_buffer_status>
 8028132:	4603      	mov	r3, r0
 8028134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8028138:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802813c:	2b00      	cmp	r3, #0
 802813e:	d002      	beq.n	8028146 <parse_fifo+0xe6>
                {
                    return rslt;
 8028140:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028144:	e150      	b.n	80283e8 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8028146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802814a:	2b00      	cmp	r3, #0
 802814c:	d000      	beq.n	8028150 <parse_fifo+0xf0>
                {
                    break;
 802814e:	e108      	b.n	8028362 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 8028150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028158:	691a      	ldr	r2, [r3, #16]
 802815a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802815c:	3301      	adds	r3, #1
 802815e:	4413      	add	r3, r2
 8028160:	781b      	ldrb	r3, [r3, #0]
 8028162:	b2db      	uxtb	r3, r3
 8028164:	2200      	movs	r2, #0
 8028166:	469a      	mov	sl, r3
 8028168:	4693      	mov	fp, r2
 802816a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802816c:	eb10 020a 	adds.w	r2, r0, sl
 8028170:	61ba      	str	r2, [r7, #24]
 8028172:	eb41 020b 	adc.w	r2, r1, fp
 8028176:	61fa      	str	r2, [r7, #28]
 8028178:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802817c:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8028180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028182:	681b      	ldr	r3, [r3, #0]
 8028184:	1c9a      	adds	r2, r3, #2
 8028186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028188:	601a      	str	r2, [r3, #0]
                break;
 802818a:	e0ea      	b.n	8028362 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 802818c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8028190:	461a      	mov	r2, r3
 8028192:	2103      	movs	r1, #3
 8028194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028196:	f7ff ff27 	bl	8027fe8 <get_buffer_status>
 802819a:	4603      	mov	r3, r0
 802819c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80281a0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80281a4:	2b00      	cmp	r3, #0
 80281a6:	d002      	beq.n	80281ae <parse_fifo+0x14e>
                {
                    return rslt;
 80281a8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80281ac:	e11c      	b.n	80283e8 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80281ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80281b2:	2b00      	cmp	r3, #0
 80281b4:	d000      	beq.n	80281b8 <parse_fifo+0x158>
                {
                    break;
 80281b6:	e0d4      	b.n	8028362 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 80281b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80281ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80281be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281c0:	691a      	ldr	r2, [r3, #16]
 80281c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80281c4:	3301      	adds	r3, #1
 80281c6:	4413      	add	r3, r2
 80281c8:	781b      	ldrb	r3, [r3, #0]
 80281ca:	b21c      	sxth	r4, r3
 80281cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80281ce:	691a      	ldr	r2, [r3, #16]
 80281d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80281d2:	3302      	adds	r3, #2
 80281d4:	4413      	add	r3, r2
 80281d6:	781b      	ldrb	r3, [r3, #0]
 80281d8:	021b      	lsls	r3, r3, #8
 80281da:	b21b      	sxth	r3, r3
 80281dc:	4323      	orrs	r3, r4
 80281de:	b21b      	sxth	r3, r3
 80281e0:	b29b      	uxth	r3, r3
 80281e2:	b29b      	uxth	r3, r3
 80281e4:	2200      	movs	r2, #0
 80281e6:	461d      	mov	r5, r3
 80281e8:	4616      	mov	r6, r2
 80281ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80281ec:	1942      	adds	r2, r0, r5
 80281ee:	613a      	str	r2, [r7, #16]
 80281f0:	eb41 0206 	adc.w	r2, r1, r6
 80281f4:	617a      	str	r2, [r7, #20]
 80281f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80281fa:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 80281fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028200:	681b      	ldr	r3, [r3, #0]
 8028202:	1cda      	adds	r2, r3, #3
 8028204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028206:	601a      	str	r2, [r3, #0]
                break;
 8028208:	e0ab      	b.n	8028362 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 802820a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 802820e:	461a      	mov	r2, r3
 8028210:	2106      	movs	r1, #6
 8028212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028214:	f7ff fee8 	bl	8027fe8 <get_buffer_status>
 8028218:	4603      	mov	r3, r0
 802821a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 802821e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028222:	2b00      	cmp	r3, #0
 8028224:	d002      	beq.n	802822c <parse_fifo+0x1cc>
                {
                    return rslt;
 8028226:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 802822a:	e0dd      	b.n	80283e8 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 802822c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8028230:	2b00      	cmp	r3, #0
 8028232:	d000      	beq.n	8028236 <parse_fifo+0x1d6>
                {
                    break;
 8028234:	e095      	b.n	8028362 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 8028236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028238:	691a      	ldr	r2, [r3, #16]
 802823a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802823c:	3301      	adds	r3, #1
 802823e:	4413      	add	r3, r2
 8028240:	781b      	ldrb	r3, [r3, #0]
 8028242:	4619      	mov	r1, r3
 8028244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028246:	691a      	ldr	r2, [r3, #16]
 8028248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802824a:	3302      	adds	r3, #2
 802824c:	4413      	add	r3, r2
 802824e:	781b      	ldrb	r3, [r3, #0]
 8028250:	021b      	lsls	r3, r3, #8
 8028252:	4319      	orrs	r1, r3
 8028254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028256:	691a      	ldr	r2, [r3, #16]
 8028258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802825a:	3303      	adds	r3, #3
 802825c:	4413      	add	r3, r2
 802825e:	781b      	ldrb	r3, [r3, #0]
 8028260:	041b      	lsls	r3, r3, #16
 8028262:	4319      	orrs	r1, r3
 8028264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028266:	691a      	ldr	r2, [r3, #16]
 8028268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802826a:	3304      	adds	r3, #4
 802826c:	4413      	add	r3, r2
 802826e:	781b      	ldrb	r3, [r3, #0]
 8028270:	061b      	lsls	r3, r3, #24
 8028272:	430b      	orrs	r3, r1
 8028274:	2200      	movs	r2, #0
 8028276:	4698      	mov	r8, r3
 8028278:	4691      	mov	r9, r2
 802827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802827c:	691a      	ldr	r2, [r3, #16]
 802827e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028280:	3305      	adds	r3, #5
 8028282:	4413      	add	r3, r2
 8028284:	781b      	ldrb	r3, [r3, #0]
 8028286:	b2db      	uxtb	r3, r3
 8028288:	2200      	movs	r2, #0
 802828a:	60bb      	str	r3, [r7, #8]
 802828c:	60fa      	str	r2, [r7, #12]
 802828e:	f04f 0200 	mov.w	r2, #0
 8028292:	f04f 0300 	mov.w	r3, #0
 8028296:	68b9      	ldr	r1, [r7, #8]
 8028298:	000b      	movs	r3, r1
 802829a:	2200      	movs	r2, #0
 802829c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802829e:	ea48 0002 	orr.w	r0, r8, r2
 80282a2:	6038      	str	r0, [r7, #0]
 80282a4:	ea49 0303 	orr.w	r3, r9, r3
 80282a8:	607b      	str	r3, [r7, #4]
 80282aa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80282ae:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 80282b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282b4:	681b      	ldr	r3, [r3, #0]
 80282b6:	1d9a      	adds	r2, r3, #6
 80282b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80282ba:	601a      	str	r2, [r3, #0]
                break;
 80282bc:	e051      	b.n	8028362 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 80282be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80282c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80282c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80282c8:	4618      	mov	r0, r3
 80282ca:	f7ff fe23 	bl	8027f14 <get_callback_info>
 80282ce:	4603      	mov	r3, r0
 80282d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 80282d4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80282d8:	2b00      	cmp	r3, #0
 80282da:	d002      	beq.n	80282e2 <parse_fifo+0x282>
                {
                    return rslt;
 80282dc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80282e0:	e082      	b.n	80283e8 <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 80282e2:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 80282e6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80282ea:	461a      	mov	r2, r3
 80282ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80282ee:	f7ff fe7b 	bl	8027fe8 <get_buffer_status>
 80282f2:	4603      	mov	r3, r0
 80282f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80282f8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80282fc:	2b00      	cmp	r3, #0
 80282fe:	d002      	beq.n	8028306 <parse_fifo+0x2a6>
                {
                    return rslt;
 8028300:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8028304:	e070      	b.n	80283e8 <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8028306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802830a:	2b00      	cmp	r3, #0
 802830c:	d000      	beq.n	8028310 <parse_fifo+0x2b0>
                {
                    break;
 802830e:	e028      	b.n	8028362 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8028310:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8028314:	2b00      	cmp	r3, #0
 8028316:	d01c      	beq.n	8028352 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 8028318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802831a:	691a      	ldr	r2, [r3, #16]
 802831c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802831e:	3301      	adds	r3, #1
 8028320:	4413      	add	r3, r2
 8028322:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 8028324:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8028328:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 802832c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802832e:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 8028330:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8028334:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 8028338:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802833c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 8028340:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 8028344:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 8028348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 802834c:	4611      	mov	r1, r2
 802834e:	4618      	mov	r0, r3
 8028350:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 8028352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028354:	681a      	ldr	r2, [r3, #0]
 8028356:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 802835a:	441a      	add	r2, r3
 802835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802835e:	601a      	str	r2, [r3, #0]
                break;
 8028360:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 8028362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028364:	681a      	ldr	r2, [r3, #0]
 8028366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028368:	685b      	ldr	r3, [r3, #4]
 802836a:	429a      	cmp	r2, r3
 802836c:	d204      	bcs.n	8028378 <parse_fifo+0x318>
 802836e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8028372:	2b00      	cmp	r3, #0
 8028374:	f43f ae8a 	beq.w	802808c <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 8028378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802837a:	685b      	ldr	r3, [r3, #4]
 802837c:	2b00      	cmp	r3, #0
 802837e:	d031      	beq.n	80283e4 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8028380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028382:	685a      	ldr	r2, [r3, #4]
 8028384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028386:	681b      	ldr	r3, [r3, #0]
 8028388:	429a      	cmp	r2, r3
 802838a:	d202      	bcs.n	8028392 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 802838c:	f06f 0301 	mvn.w	r3, #1
 8028390:	e02a      	b.n	80283e8 <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 8028392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028394:	685a      	ldr	r2, [r3, #4]
 8028396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028398:	681b      	ldr	r3, [r3, #0]
 802839a:	1ad2      	subs	r2, r2, r3
 802839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802839e:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 80283a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283a2:	685b      	ldr	r3, [r3, #4]
 80283a4:	2b00      	cmp	r3, #0
 80283a6:	d01d      	beq.n	80283e4 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 80283a8:	2300      	movs	r3, #0
 80283aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80283ae:	e013      	b.n	80283d8 <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 80283b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283b2:	691a      	ldr	r2, [r3, #16]
 80283b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283b6:	6819      	ldr	r1, [r3, #0]
 80283b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80283bc:	440b      	add	r3, r1
 80283be:	441a      	add	r2, r3
 80283c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283c2:	6919      	ldr	r1, [r3, #16]
 80283c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80283c8:	440b      	add	r3, r1
 80283ca:	7812      	ldrb	r2, [r2, #0]
 80283cc:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 80283ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80283d2:	3301      	adds	r3, #1
 80283d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80283d8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80283dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80283de:	685b      	ldr	r3, [r3, #4]
 80283e0:	429a      	cmp	r2, r3
 80283e2:	d3e5      	bcc.n	80283b0 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 80283e4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80283e8:	4618      	mov	r0, r3
 80283ea:	3764      	adds	r7, #100	; 0x64
 80283ec:	46bd      	mov	sp, r7
 80283ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80283f2:	bf00      	nop

080283f4 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 80283f4:	b590      	push	{r4, r7, lr}
 80283f6:	b0cf      	sub	sp, #316	; 0x13c
 80283f8:	af00      	add	r7, sp, #0
 80283fa:	4604      	mov	r4, r0
 80283fc:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8028400:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8028404:	6001      	str	r1, [r0, #0]
 8028406:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802840a:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 802840e:	600a      	str	r2, [r1, #0]
 8028410:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028414:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028418:	6013      	str	r3, [r2, #0]
 802841a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802841e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8028422:	4622      	mov	r2, r4
 8028424:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 8028426:	2300      	movs	r3, #0
 8028428:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 802842c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028430:	2b00      	cmp	r3, #0
 8028432:	f000 81af 	beq.w	8028794 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028436:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802843a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802843e:	681b      	ldr	r3, [r3, #0]
 8028440:	2b00      	cmp	r3, #0
 8028442:	d007      	beq.n	8028454 <bhy2_hif_exec_cmd_generic+0x60>
 8028444:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 802844c:	681b      	ldr	r3, [r3, #0]
 802844e:	2b00      	cmp	r3, #0
 8028450:	f000 81a0 	beq.w	8028794 <bhy2_hif_exec_cmd_generic+0x3a0>
 8028454:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8028458:	2b00      	cmp	r3, #0
 802845a:	d007      	beq.n	802846c <bhy2_hif_exec_cmd_generic+0x78>
 802845c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028460:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8028464:	681b      	ldr	r3, [r3, #0]
 8028466:	2b00      	cmp	r3, #0
 8028468:	f000 8194 	beq.w	8028794 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 802846c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028470:	699b      	ldr	r3, [r3, #24]
 8028472:	2b00      	cmp	r3, #0
 8028474:	f000 8188 	beq.w	8028788 <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 8028478:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802847c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8028480:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8028484:	681b      	ldr	r3, [r3, #0]
 8028486:	4413      	add	r3, r2
 8028488:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 802848c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8028490:	2b00      	cmp	r3, #0
 8028492:	d007      	beq.n	80284a4 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 8028494:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8028498:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 802849c:	4413      	add	r3, r2
 802849e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80284a2:	e003      	b.n	80284ac <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 80284a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80284a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 80284ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80284b0:	f003 0303 	and.w	r3, r3, #3
 80284b4:	2b00      	cmp	r3, #0
 80284b6:	d006      	beq.n	80284c6 <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 80284b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80284bc:	089b      	lsrs	r3, r3, #2
 80284be:	3301      	adds	r3, #1
 80284c0:	009b      	lsls	r3, r3, #2
 80284c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 80284c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80284ce:	881b      	ldrh	r3, [r3, #0]
 80284d0:	b2da      	uxtb	r2, r3
 80284d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284d6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80284da:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 80284dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80284e4:	881b      	ldrh	r3, [r3, #0]
 80284e6:	0a1b      	lsrs	r3, r3, #8
 80284e8:	b29b      	uxth	r3, r3
 80284ea:	b2da      	uxtb	r2, r3
 80284ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80284f4:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 80284f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80284fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80284fe:	881b      	ldrh	r3, [r3, #0]
 8028500:	2b02      	cmp	r3, #2
 8028502:	d113      	bne.n	802852c <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8028504:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028508:	089b      	lsrs	r3, r3, #2
 802850a:	b2da      	uxtb	r2, r3
 802850c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028510:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028514:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 8028516:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802851a:	089b      	lsrs	r3, r3, #2
 802851c:	0a1b      	lsrs	r3, r3, #8
 802851e:	b2da      	uxtb	r2, r3
 8028520:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028524:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8028528:	70da      	strb	r2, [r3, #3]
 802852a:	e010      	b.n	802854e <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 802852c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028530:	b2da      	uxtb	r2, r3
 8028532:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028536:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802853a:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 802853c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8028540:	0a1b      	lsrs	r3, r3, #8
 8028542:	b2da      	uxtb	r2, r3
 8028544:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028548:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 802854c:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 802854e:	2304      	movs	r3, #4
 8028550:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 8028554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8028558:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 802855c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028560:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028564:	4413      	add	r3, r2
 8028566:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 802856a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802856e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 8028572:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028576:	699b      	ldr	r3, [r3, #24]
 8028578:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802857c:	429a      	cmp	r2, r3
 802857e:	f240 80f9 	bls.w	8028774 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 8028582:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028586:	699b      	ldr	r3, [r3, #24]
 8028588:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 802858c:	e0f2      	b.n	8028774 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 802858e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028592:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028596:	4413      	add	r3, r2
 8028598:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 802859c:	429a      	cmp	r2, r3
 802859e:	d20b      	bcs.n	80285b8 <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 80285a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80285a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 80285a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80285ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80285b0:	1ad3      	subs	r3, r2, r3
 80285b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80285b6:	e020      	b.n	80285fa <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 80285b8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80285bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80285c0:	4413      	add	r3, r2
 80285c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 80285c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80285ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 80285ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80285d2:	f003 0303 	and.w	r3, r3, #3
 80285d6:	2b00      	cmp	r3, #0
 80285d8:	d006      	beq.n	80285e8 <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 80285da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80285de:	089b      	lsrs	r3, r3, #2
 80285e0:	3301      	adds	r3, #1
 80285e2:	009b      	lsls	r3, r3, #2
 80285e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 80285e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80285ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80285f0:	d903      	bls.n	80285fa <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 80285f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80285f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 80285fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80285fe:	2b00      	cmp	r3, #0
 8028600:	d07e      	beq.n	8028700 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8028602:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8028606:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802860a:	681a      	ldr	r2, [r3, #0]
 802860c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028610:	4413      	add	r3, r2
 8028612:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028616:	429a      	cmp	r2, r3
 8028618:	d315      	bcc.n	8028646 <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 802861a:	f107 0214 	add.w	r2, r7, #20
 802861e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028622:	18d0      	adds	r0, r2, r3
 8028624:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8028628:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802862c:	1ad3      	subs	r3, r2, r3
 802862e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028632:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028636:	6812      	ldr	r2, [r2, #0]
 8028638:	4413      	add	r3, r2
 802863a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 802863e:	4619      	mov	r1, r3
 8028640:	f013 fc06 	bl	803be50 <memcpy>
 8028644:	e05c      	b.n	8028700 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 8028646:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802864a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802864e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028652:	681b      	ldr	r3, [r3, #0]
 8028654:	429a      	cmp	r2, r3
 8028656:	d93b      	bls.n	80286d0 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 8028658:	f107 0214 	add.w	r2, r7, #20
 802865c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8028660:	18d0      	adds	r0, r2, r3
 8028662:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8028666:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802866a:	1ad3      	subs	r3, r2, r3
 802866c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8028670:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8028674:	6812      	ldr	r2, [r2, #0]
 8028676:	18d1      	adds	r1, r2, r3
 8028678:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802867c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8028680:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028684:	681b      	ldr	r3, [r3, #0]
 8028686:	1ad3      	subs	r3, r2, r3
 8028688:	461a      	mov	r2, r3
 802868a:	f013 fbe1 	bl	803be50 <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 802868e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028692:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028696:	441a      	add	r2, r3
 8028698:	f507 739c 	add.w	r3, r7, #312	; 0x138
 802869c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80286a0:	681b      	ldr	r3, [r3, #0]
 80286a2:	1ad3      	subs	r3, r2, r3
 80286a4:	f107 0214 	add.w	r2, r7, #20
 80286a8:	18d0      	adds	r0, r2, r3
 80286aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80286ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80286b2:	681a      	ldr	r2, [r3, #0]
 80286b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80286b8:	1ad2      	subs	r2, r2, r3
 80286ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80286be:	441a      	add	r2, r3
 80286c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80286c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80286c8:	6819      	ldr	r1, [r3, #0]
 80286ca:	f013 fbc1 	bl	803be50 <memcpy>
 80286ce:	e017      	b.n	8028700 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 80286d0:	f107 0214 	add.w	r2, r7, #20
 80286d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80286d8:	18d0      	adds	r0, r2, r3
 80286da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80286de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80286e2:	681a      	ldr	r2, [r3, #0]
 80286e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80286e8:	1ad3      	subs	r3, r2, r3
 80286ea:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80286ee:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80286f2:	6812      	ldr	r2, [r2, #0]
 80286f4:	4413      	add	r3, r2
 80286f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80286fa:	4619      	mov	r1, r3
 80286fc:	f013 fba8 	bl	803be50 <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8028700:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028708:	4413      	add	r3, r2
 802870a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 802870e:	429a      	cmp	r2, r3
 8028710:	d012      	beq.n	8028738 <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8028712:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802871a:	4413      	add	r3, r2
 802871c:	f107 0214 	add.w	r2, r7, #20
 8028720:	18d0      	adds	r0, r2, r3
 8028722:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8028726:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802872a:	4413      	add	r3, r2
 802872c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8028730:	461a      	mov	r2, r3
 8028732:	2100      	movs	r1, #0
 8028734:	f013 fbb4 	bl	803bea0 <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 8028738:	f107 0114 	add.w	r1, r7, #20
 802873c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8028740:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8028744:	2000      	movs	r0, #0
 8028746:	f000 f9b4 	bl	8028ab2 <bhy2_hif_set_regs>
 802874a:	4603      	mov	r3, r0
 802874c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 8028750:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8028754:	2b00      	cmp	r3, #0
 8028756:	d11b      	bne.n	8028790 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 8028758:	2300      	movs	r3, #0
 802875a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 802875e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8028762:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8028766:	1ad3      	subs	r3, r2, r3
 8028768:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 802876c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8028770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8028774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8028778:	2b00      	cmp	r3, #0
 802877a:	d00f      	beq.n	802879c <bhy2_hif_exec_cmd_generic+0x3a8>
 802877c:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8028780:	2b00      	cmp	r3, #0
 8028782:	f43f af04 	beq.w	802858e <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 8028786:	e009      	b.n	802879c <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 8028788:	23fe      	movs	r3, #254	; 0xfe
 802878a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 802878e:	e005      	b.n	802879c <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8028790:	bf00      	nop
        if (hif->read_write_len != 0)
 8028792:	e003      	b.n	802879c <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028794:	23ff      	movs	r3, #255	; 0xff
 8028796:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 802879a:	e000      	b.n	802879e <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 802879c:	bf00      	nop
    }

    return rslt;
 802879e:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 80287a2:	4618      	mov	r0, r3
 80287a4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80287a8:	46bd      	mov	sp, r7
 80287aa:	bd90      	pop	{r4, r7, pc}

080287ac <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 80287ac:	b580      	push	{r7, lr}
 80287ae:	b084      	sub	sp, #16
 80287b0:	af00      	add	r7, sp, #0
 80287b2:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 80287b4:	2300      	movs	r3, #0
 80287b6:	81fb      	strh	r3, [r7, #14]
 80287b8:	e027      	b.n	802880a <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 80287ba:	f107 030c 	add.w	r3, r7, #12
 80287be:	6879      	ldr	r1, [r7, #4]
 80287c0:	4618      	mov	r0, r3
 80287c2:	f000 fab1 	bl	8028d28 <bhy2_hif_get_interrupt_status>
 80287c6:	4603      	mov	r3, r0
 80287c8:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 80287ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80287ce:	2b00      	cmp	r3, #0
 80287d0:	d115      	bne.n	80287fe <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 80287d2:	7b3b      	ldrb	r3, [r7, #12]
 80287d4:	f003 0320 	and.w	r3, r3, #32
 80287d8:	2b00      	cmp	r3, #0
 80287da:	d002      	beq.n	80287e2 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 80287dc:	2300      	movs	r3, #0
 80287de:	737b      	strb	r3, [r7, #13]
                break;
 80287e0:	e017      	b.n	8028812 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 80287e2:	6879      	ldr	r1, [r7, #4]
 80287e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80287e8:	f000 f99b 	bl	8028b22 <bhy2_hif_delay_us>
 80287ec:	4603      	mov	r3, r0
 80287ee:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 80287f0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80287f4:	2b00      	cmp	r3, #0
 80287f6:	d005      	beq.n	8028804 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 80287f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80287fc:	e00b      	b.n	8028816 <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 80287fe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028802:	e008      	b.n	8028816 <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8028804:	89fb      	ldrh	r3, [r7, #14]
 8028806:	3301      	adds	r3, #1
 8028808:	81fb      	strh	r3, [r7, #14]
 802880a:	89fb      	ldrh	r3, [r7, #14]
 802880c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8028810:	d3d3      	bcc.n	80287ba <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8028812:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8028816:	4618      	mov	r0, r3
 8028818:	3710      	adds	r7, #16
 802881a:	46bd      	mov	sp, r7
 802881c:	bd80      	pop	{r7, pc}

0802881e <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 802881e:	b580      	push	{r7, lr}
 8028820:	b084      	sub	sp, #16
 8028822:	af00      	add	r7, sp, #0
 8028824:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8028826:	2300      	movs	r3, #0
 8028828:	81fb      	strh	r3, [r7, #14]
 802882a:	e02f      	b.n	802888c <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 802882c:	6879      	ldr	r1, [r7, #4]
 802882e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8028832:	f000 f976 	bl	8028b22 <bhy2_hif_delay_us>
 8028836:	4603      	mov	r3, r0
 8028838:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802883a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802883e:	2b00      	cmp	r3, #0
 8028840:	da02      	bge.n	8028848 <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 8028842:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028846:	e02d      	b.n	80288a4 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 8028848:	f107 010c 	add.w	r1, r7, #12
 802884c:	687b      	ldr	r3, [r7, #4]
 802884e:	2201      	movs	r2, #1
 8028850:	2025      	movs	r0, #37	; 0x25
 8028852:	f000 f8f6 	bl	8028a42 <bhy2_hif_get_regs>
 8028856:	4603      	mov	r3, r0
 8028858:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 802885a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 802885e:	2b00      	cmp	r3, #0
 8028860:	da02      	bge.n	8028868 <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 8028862:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8028866:	e01d      	b.n	80288a4 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8028868:	7b3b      	ldrb	r3, [r7, #12]
 802886a:	f003 0310 	and.w	r3, r3, #16
 802886e:	2b00      	cmp	r3, #0
 8028870:	d009      	beq.n	8028886 <bhy2_hif_check_boot_status_ram+0x68>
 8028872:	7b3b      	ldrb	r3, [r7, #12]
 8028874:	f003 0320 	and.w	r3, r3, #32
 8028878:	2b00      	cmp	r3, #0
 802887a:	d004      	beq.n	8028886 <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 802887c:	7b3b      	ldrb	r3, [r7, #12]
 802887e:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8028882:	2b00      	cmp	r3, #0
 8028884:	d006      	beq.n	8028894 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 8028886:	89fb      	ldrh	r3, [r7, #14]
 8028888:	3301      	adds	r3, #1
 802888a:	81fb      	strh	r3, [r7, #14]
 802888c:	89fb      	ldrh	r3, [r7, #14]
 802888e:	2b63      	cmp	r3, #99	; 0x63
 8028890:	d9cc      	bls.n	802882c <bhy2_hif_check_boot_status_ram+0xe>
 8028892:	e000      	b.n	8028896 <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8028894:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 8028896:	89fb      	ldrh	r3, [r7, #14]
 8028898:	2b64      	cmp	r3, #100	; 0x64
 802889a:	d102      	bne.n	80288a2 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 802889c:	f06f 0304 	mvn.w	r3, #4
 80288a0:	e000      	b.n	80288a4 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 80288a2:	2300      	movs	r3, #0
}
 80288a4:	4618      	mov	r0, r3
 80288a6:	3710      	adds	r7, #16
 80288a8:	46bd      	mov	sp, r7
 80288aa:	bd80      	pop	{r7, pc}

080288ac <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 80288ac:	b580      	push	{r7, lr}
 80288ae:	b08a      	sub	sp, #40	; 0x28
 80288b0:	af00      	add	r7, sp, #0
 80288b2:	60b9      	str	r1, [r7, #8]
 80288b4:	607a      	str	r2, [r7, #4]
 80288b6:	603b      	str	r3, [r7, #0]
 80288b8:	4603      	mov	r3, r0
 80288ba:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80288bc:	2300      	movs	r3, #0
 80288be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 80288c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288c4:	2b00      	cmp	r3, #0
 80288c6:	d072      	beq.n	80289ae <bhy2_hif_get_fifo+0x102>
 80288c8:	68bb      	ldr	r3, [r7, #8]
 80288ca:	2b00      	cmp	r3, #0
 80288cc:	d06f      	beq.n	80289ae <bhy2_hif_get_fifo+0x102>
 80288ce:	683b      	ldr	r3, [r7, #0]
 80288d0:	2b00      	cmp	r3, #0
 80288d2:	d06c      	beq.n	80289ae <bhy2_hif_get_fifo+0x102>
 80288d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288d6:	2b00      	cmp	r3, #0
 80288d8:	d069      	beq.n	80289ae <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 80288da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288dc:	699b      	ldr	r3, [r3, #24]
 80288de:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 80288e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288e2:	681b      	ldr	r3, [r3, #0]
 80288e4:	2b00      	cmp	r3, #0
 80288e6:	d114      	bne.n	8028912 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 80288e8:	f107 0114 	add.w	r1, r7, #20
 80288ec:	7bf8      	ldrb	r0, [r7, #15]
 80288ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80288f0:	2202      	movs	r2, #2
 80288f2:	f000 f8a6 	bl	8028a42 <bhy2_hif_get_regs>
 80288f6:	4603      	mov	r3, r0
 80288f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 80288fc:	7d3b      	ldrb	r3, [r7, #20]
 80288fe:	b21a      	sxth	r2, r3
 8028900:	7d7b      	ldrb	r3, [r7, #21]
 8028902:	021b      	lsls	r3, r3, #8
 8028904:	b21b      	sxth	r3, r3
 8028906:	4313      	orrs	r3, r2
 8028908:	b21b      	sxth	r3, r3
 802890a:	b29b      	uxth	r3, r3
 802890c:	461a      	mov	r2, r3
 802890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028910:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8028912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028914:	681b      	ldr	r3, [r3, #0]
 8028916:	2b00      	cmp	r3, #0
 8028918:	d04d      	beq.n	80289b6 <bhy2_hif_get_fifo+0x10a>
 802891a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802891e:	2b00      	cmp	r3, #0
 8028920:	d149      	bne.n	80289b6 <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 8028922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028924:	681b      	ldr	r3, [r3, #0]
 8028926:	687a      	ldr	r2, [r7, #4]
 8028928:	429a      	cmp	r2, r3
 802892a:	d203      	bcs.n	8028934 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 802892c:	683b      	ldr	r3, [r7, #0]
 802892e:	687a      	ldr	r2, [r7, #4]
 8028930:	601a      	str	r2, [r3, #0]
 8028932:	e003      	b.n	802893c <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 8028934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028936:	681a      	ldr	r2, [r3, #0]
 8028938:	683b      	ldr	r3, [r7, #0]
 802893a:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 802893c:	683b      	ldr	r3, [r7, #0]
 802893e:	681b      	ldr	r3, [r3, #0]
 8028940:	623b      	str	r3, [r7, #32]
            offset = 0;
 8028942:	2300      	movs	r3, #0
 8028944:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8028946:	e016      	b.n	8028976 <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 8028948:	68ba      	ldr	r2, [r7, #8]
 802894a:	69fb      	ldr	r3, [r7, #28]
 802894c:	18d1      	adds	r1, r2, r3
 802894e:	7bf8      	ldrb	r0, [r7, #15]
 8028950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028952:	69ba      	ldr	r2, [r7, #24]
 8028954:	f000 f875 	bl	8028a42 <bhy2_hif_get_regs>
 8028958:	4603      	mov	r3, r0
 802895a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 802895e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8028962:	2b00      	cmp	r3, #0
 8028964:	d10c      	bne.n	8028980 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 8028966:	6a3a      	ldr	r2, [r7, #32]
 8028968:	69bb      	ldr	r3, [r7, #24]
 802896a:	1ad3      	subs	r3, r2, r3
 802896c:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 802896e:	69fa      	ldr	r2, [r7, #28]
 8028970:	69bb      	ldr	r3, [r7, #24]
 8028972:	4413      	add	r3, r2
 8028974:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 8028976:	6a3a      	ldr	r2, [r7, #32]
 8028978:	69bb      	ldr	r3, [r7, #24]
 802897a:	429a      	cmp	r2, r3
 802897c:	d8e4      	bhi.n	8028948 <bhy2_hif_get_fifo+0x9c>
 802897e:	e000      	b.n	8028982 <bhy2_hif_get_fifo+0xd6>
                    break;
 8028980:	bf00      	nop
            }

            if (read_len != 0)
 8028982:	6a3b      	ldr	r3, [r7, #32]
 8028984:	2b00      	cmp	r3, #0
 8028986:	d00a      	beq.n	802899e <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8028988:	68ba      	ldr	r2, [r7, #8]
 802898a:	69fb      	ldr	r3, [r7, #28]
 802898c:	18d1      	adds	r1, r2, r3
 802898e:	7bf8      	ldrb	r0, [r7, #15]
 8028990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028992:	6a3a      	ldr	r2, [r7, #32]
 8028994:	f000 f855 	bl	8028a42 <bhy2_hif_get_regs>
 8028998:	4603      	mov	r3, r0
 802899a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 802899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289a0:	681a      	ldr	r2, [r3, #0]
 80289a2:	683b      	ldr	r3, [r7, #0]
 80289a4:	681b      	ldr	r3, [r3, #0]
 80289a6:	1ad2      	subs	r2, r2, r3
 80289a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289aa:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80289ac:	e003      	b.n	80289b6 <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80289ae:	23ff      	movs	r3, #255	; 0xff
 80289b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80289b4:	e000      	b.n	80289b8 <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 80289b6:	bf00      	nop
    }

    return rslt;
 80289b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80289bc:	4618      	mov	r0, r3
 80289be:	3728      	adds	r7, #40	; 0x28
 80289c0:	46bd      	mov	sp, r7
 80289c2:	bd80      	pop	{r7, pc}

080289c4 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 80289c4:	b480      	push	{r7}
 80289c6:	b087      	sub	sp, #28
 80289c8:	af00      	add	r7, sp, #0
 80289ca:	60b9      	str	r1, [r7, #8]
 80289cc:	607a      	str	r2, [r7, #4]
 80289ce:	603b      	str	r3, [r7, #0]
 80289d0:	4603      	mov	r3, r0
 80289d2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80289d4:	2300      	movs	r3, #0
 80289d6:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 80289d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289da:	2b00      	cmp	r3, #0
 80289dc:	d027      	beq.n	8028a2e <bhy2_hif_init+0x6a>
 80289de:	68bb      	ldr	r3, [r7, #8]
 80289e0:	2b00      	cmp	r3, #0
 80289e2:	d024      	beq.n	8028a2e <bhy2_hif_init+0x6a>
 80289e4:	687b      	ldr	r3, [r7, #4]
 80289e6:	2b00      	cmp	r3, #0
 80289e8:	d021      	beq.n	8028a2e <bhy2_hif_init+0x6a>
 80289ea:	683b      	ldr	r3, [r7, #0]
 80289ec:	2b00      	cmp	r3, #0
 80289ee:	d01e      	beq.n	8028a2e <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 80289f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289f2:	68ba      	ldr	r2, [r7, #8]
 80289f4:	601a      	str	r2, [r3, #0]
        hif->write = write;
 80289f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289f8:	687a      	ldr	r2, [r7, #4]
 80289fa:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 80289fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80289fe:	683a      	ldr	r2, [r7, #0]
 8028a00:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8028a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028a06:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8028a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a0a:	7bfa      	ldrb	r2, [r7, #15]
 8028a0c:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8028a0e:	6a3b      	ldr	r3, [r7, #32]
 8028a10:	f003 0303 	and.w	r3, r3, #3
 8028a14:	2b00      	cmp	r3, #0
 8028a16:	d006      	beq.n	8028a26 <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8028a18:	6a3b      	ldr	r3, [r7, #32]
 8028a1a:	089b      	lsrs	r3, r3, #2
 8028a1c:	3301      	adds	r3, #1
 8028a1e:	009a      	lsls	r2, r3, #2
 8028a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a22:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8028a24:	e005      	b.n	8028a32 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8028a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a28:	6a3a      	ldr	r2, [r7, #32]
 8028a2a:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8028a2c:	e001      	b.n	8028a32 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028a2e:	23ff      	movs	r3, #255	; 0xff
 8028a30:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028a36:	4618      	mov	r0, r3
 8028a38:	371c      	adds	r7, #28
 8028a3a:	46bd      	mov	sp, r7
 8028a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a40:	4770      	bx	lr

08028a42 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028a42:	b590      	push	{r4, r7, lr}
 8028a44:	b087      	sub	sp, #28
 8028a46:	af00      	add	r7, sp, #0
 8028a48:	60b9      	str	r1, [r7, #8]
 8028a4a:	607a      	str	r2, [r7, #4]
 8028a4c:	603b      	str	r3, [r7, #0]
 8028a4e:	4603      	mov	r3, r0
 8028a50:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028a52:	2300      	movs	r3, #0
 8028a54:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8028a56:	683b      	ldr	r3, [r7, #0]
 8028a58:	2b00      	cmp	r3, #0
 8028a5a:	d022      	beq.n	8028aa2 <bhy2_hif_get_regs+0x60>
 8028a5c:	683b      	ldr	r3, [r7, #0]
 8028a5e:	681b      	ldr	r3, [r3, #0]
 8028a60:	2b00      	cmp	r3, #0
 8028a62:	d01e      	beq.n	8028aa2 <bhy2_hif_get_regs+0x60>
 8028a64:	68bb      	ldr	r3, [r7, #8]
 8028a66:	2b00      	cmp	r3, #0
 8028a68:	d01b      	beq.n	8028aa2 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8028a6a:	683b      	ldr	r3, [r7, #0]
 8028a6c:	7b1b      	ldrb	r3, [r3, #12]
 8028a6e:	2b01      	cmp	r3, #1
 8028a70:	d103      	bne.n	8028a7a <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8028a72:	7bfb      	ldrb	r3, [r7, #15]
 8028a74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8028a78:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8028a7a:	683b      	ldr	r3, [r7, #0]
 8028a7c:	681c      	ldr	r4, [r3, #0]
 8028a7e:	683b      	ldr	r3, [r7, #0]
 8028a80:	691b      	ldr	r3, [r3, #16]
 8028a82:	7bf8      	ldrb	r0, [r7, #15]
 8028a84:	687a      	ldr	r2, [r7, #4]
 8028a86:	68b9      	ldr	r1, [r7, #8]
 8028a88:	47a0      	blx	r4
 8028a8a:	4603      	mov	r3, r0
 8028a8c:	461a      	mov	r2, r3
 8028a8e:	683b      	ldr	r3, [r7, #0]
 8028a90:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028a92:	683b      	ldr	r3, [r7, #0]
 8028a94:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028a98:	2b00      	cmp	r3, #0
 8028a9a:	d004      	beq.n	8028aa6 <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8028a9c:	23fd      	movs	r3, #253	; 0xfd
 8028a9e:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028aa0:	e001      	b.n	8028aa6 <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028aa2:	23ff      	movs	r3, #255	; 0xff
 8028aa4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028aaa:	4618      	mov	r0, r3
 8028aac:	371c      	adds	r7, #28
 8028aae:	46bd      	mov	sp, r7
 8028ab0:	bd90      	pop	{r4, r7, pc}

08028ab2 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028ab2:	b590      	push	{r4, r7, lr}
 8028ab4:	b087      	sub	sp, #28
 8028ab6:	af00      	add	r7, sp, #0
 8028ab8:	60b9      	str	r1, [r7, #8]
 8028aba:	607a      	str	r2, [r7, #4]
 8028abc:	603b      	str	r3, [r7, #0]
 8028abe:	4603      	mov	r3, r0
 8028ac0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8028ac2:	2300      	movs	r3, #0
 8028ac4:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8028ac6:	683b      	ldr	r3, [r7, #0]
 8028ac8:	2b00      	cmp	r3, #0
 8028aca:	d022      	beq.n	8028b12 <bhy2_hif_set_regs+0x60>
 8028acc:	683b      	ldr	r3, [r7, #0]
 8028ace:	681b      	ldr	r3, [r3, #0]
 8028ad0:	2b00      	cmp	r3, #0
 8028ad2:	d01e      	beq.n	8028b12 <bhy2_hif_set_regs+0x60>
 8028ad4:	68bb      	ldr	r3, [r7, #8]
 8028ad6:	2b00      	cmp	r3, #0
 8028ad8:	d01b      	beq.n	8028b12 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8028ada:	683b      	ldr	r3, [r7, #0]
 8028adc:	7b1b      	ldrb	r3, [r3, #12]
 8028ade:	2b01      	cmp	r3, #1
 8028ae0:	d103      	bne.n	8028aea <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8028ae2:	7bfb      	ldrb	r3, [r7, #15]
 8028ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028ae8:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8028aea:	683b      	ldr	r3, [r7, #0]
 8028aec:	685c      	ldr	r4, [r3, #4]
 8028aee:	683b      	ldr	r3, [r7, #0]
 8028af0:	691b      	ldr	r3, [r3, #16]
 8028af2:	7bf8      	ldrb	r0, [r7, #15]
 8028af4:	687a      	ldr	r2, [r7, #4]
 8028af6:	68b9      	ldr	r1, [r7, #8]
 8028af8:	47a0      	blx	r4
 8028afa:	4603      	mov	r3, r0
 8028afc:	461a      	mov	r2, r3
 8028afe:	683b      	ldr	r3, [r7, #0]
 8028b00:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028b02:	683b      	ldr	r3, [r7, #0]
 8028b04:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8028b08:	2b00      	cmp	r3, #0
 8028b0a:	d004      	beq.n	8028b16 <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8028b0c:	23fd      	movs	r3, #253	; 0xfd
 8028b0e:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8028b10:	e001      	b.n	8028b16 <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028b12:	23ff      	movs	r3, #255	; 0xff
 8028b14:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8028b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028b1a:	4618      	mov	r0, r3
 8028b1c:	371c      	adds	r7, #28
 8028b1e:	46bd      	mov	sp, r7
 8028b20:	bd90      	pop	{r4, r7, pc}

08028b22 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8028b22:	b580      	push	{r7, lr}
 8028b24:	b084      	sub	sp, #16
 8028b26:	af00      	add	r7, sp, #0
 8028b28:	6078      	str	r0, [r7, #4]
 8028b2a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8028b2c:	2300      	movs	r3, #0
 8028b2e:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8028b30:	683b      	ldr	r3, [r7, #0]
 8028b32:	2b00      	cmp	r3, #0
 8028b34:	d00b      	beq.n	8028b4e <bhy2_hif_delay_us+0x2c>
 8028b36:	683b      	ldr	r3, [r7, #0]
 8028b38:	689b      	ldr	r3, [r3, #8]
 8028b3a:	2b00      	cmp	r3, #0
 8028b3c:	d007      	beq.n	8028b4e <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8028b3e:	683b      	ldr	r3, [r7, #0]
 8028b40:	689b      	ldr	r3, [r3, #8]
 8028b42:	683a      	ldr	r2, [r7, #0]
 8028b44:	6912      	ldr	r2, [r2, #16]
 8028b46:	4611      	mov	r1, r2
 8028b48:	6878      	ldr	r0, [r7, #4]
 8028b4a:	4798      	blx	r3
 8028b4c:	e001      	b.n	8028b52 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028b4e:	23ff      	movs	r3, #255	; 0xff
 8028b50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028b56:	4618      	mov	r0, r3
 8028b58:	3710      	adds	r7, #16
 8028b5a:	46bd      	mov	sp, r7
 8028b5c:	bd80      	pop	{r7, pc}

08028b5e <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028b5e:	b580      	push	{r7, lr}
 8028b60:	b088      	sub	sp, #32
 8028b62:	af04      	add	r7, sp, #16
 8028b64:	60b9      	str	r1, [r7, #8]
 8028b66:	607a      	str	r2, [r7, #4]
 8028b68:	603b      	str	r3, [r7, #0]
 8028b6a:	4603      	mov	r3, r0
 8028b6c:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8028b6e:	89f8      	ldrh	r0, [r7, #14]
 8028b70:	683b      	ldr	r3, [r7, #0]
 8028b72:	9302      	str	r3, [sp, #8]
 8028b74:	2300      	movs	r3, #0
 8028b76:	9301      	str	r3, [sp, #4]
 8028b78:	2300      	movs	r3, #0
 8028b7a:	9300      	str	r3, [sp, #0]
 8028b7c:	2300      	movs	r3, #0
 8028b7e:	687a      	ldr	r2, [r7, #4]
 8028b80:	68b9      	ldr	r1, [r7, #8]
 8028b82:	f7ff fc37 	bl	80283f4 <bhy2_hif_exec_cmd_generic>
 8028b86:	4603      	mov	r3, r0
}
 8028b88:	4618      	mov	r0, r3
 8028b8a:	3710      	adds	r7, #16
 8028b8c:	46bd      	mov	sp, r7
 8028b8e:	bd80      	pop	{r7, pc}

08028b90 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8028b90:	b580      	push	{r7, lr}
 8028b92:	b088      	sub	sp, #32
 8028b94:	af02      	add	r7, sp, #8
 8028b96:	60b9      	str	r1, [r7, #8]
 8028b98:	607a      	str	r2, [r7, #4]
 8028b9a:	603b      	str	r3, [r7, #0]
 8028b9c:	4603      	mov	r3, r0
 8028b9e:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8028ba0:	2300      	movs	r3, #0
 8028ba2:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8028ba4:	2300      	movs	r3, #0
 8028ba6:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8028ba8:	6a3b      	ldr	r3, [r7, #32]
 8028baa:	2b00      	cmp	r3, #0
 8028bac:	d06e      	beq.n	8028c8c <bhy2_hif_get_parameter+0xfc>
 8028bae:	68bb      	ldr	r3, [r7, #8]
 8028bb0:	2b00      	cmp	r3, #0
 8028bb2:	d06b      	beq.n	8028c8c <bhy2_hif_get_parameter+0xfc>
 8028bb4:	683b      	ldr	r3, [r7, #0]
 8028bb6:	2b00      	cmp	r3, #0
 8028bb8:	d068      	beq.n	8028c8c <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8028bba:	683b      	ldr	r3, [r7, #0]
 8028bbc:	2200      	movs	r2, #0
 8028bbe:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028bc0:	f107 0113 	add.w	r1, r7, #19
 8028bc4:	6a3b      	ldr	r3, [r7, #32]
 8028bc6:	2201      	movs	r2, #1
 8028bc8:	2006      	movs	r0, #6
 8028bca:	f7ff ff3a 	bl	8028a42 <bhy2_hif_get_regs>
 8028bce:	4603      	mov	r3, r0
 8028bd0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028bd6:	2b00      	cmp	r3, #0
 8028bd8:	d15b      	bne.n	8028c92 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8028bda:	7cfb      	ldrb	r3, [r7, #19]
 8028bdc:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8028bde:	7cfb      	ldrb	r3, [r7, #19]
 8028be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8028be4:	b2db      	uxtb	r3, r3
 8028be6:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8028be8:	7cfb      	ldrb	r3, [r7, #19]
 8028bea:	7dba      	ldrb	r2, [r7, #22]
 8028bec:	429a      	cmp	r2, r3
 8028bee:	d008      	beq.n	8028c02 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028bf0:	f107 0113 	add.w	r1, r7, #19
 8028bf4:	6a3b      	ldr	r3, [r7, #32]
 8028bf6:	2201      	movs	r2, #1
 8028bf8:	2006      	movs	r0, #6
 8028bfa:	f7ff ff5a 	bl	8028ab2 <bhy2_hif_set_regs>
 8028bfe:	4603      	mov	r3, r0
 8028c00:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8028c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c06:	2b00      	cmp	r3, #0
 8028c08:	d143      	bne.n	8028c92 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8028c0a:	89fb      	ldrh	r3, [r7, #14]
 8028c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8028c10:	b298      	uxth	r0, r3
 8028c12:	6a3b      	ldr	r3, [r7, #32]
 8028c14:	2200      	movs	r2, #0
 8028c16:	2100      	movs	r1, #0
 8028c18:	f7ff ffa1 	bl	8028b5e <bhy2_hif_exec_cmd>
 8028c1c:	4603      	mov	r3, r0
 8028c1e:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8028c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c24:	2b00      	cmp	r3, #0
 8028c26:	d134      	bne.n	8028c92 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8028c28:	6a38      	ldr	r0, [r7, #32]
 8028c2a:	f7ff fdbf 	bl	80287ac <bhy2_wait_status_ready>
 8028c2e:	4603      	mov	r3, r0
 8028c30:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8028c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c36:	2b00      	cmp	r3, #0
 8028c38:	d12b      	bne.n	8028c92 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8028c3a:	f107 0014 	add.w	r0, r7, #20
 8028c3e:	6a3b      	ldr	r3, [r7, #32]
 8028c40:	9300      	str	r3, [sp, #0]
 8028c42:	683b      	ldr	r3, [r7, #0]
 8028c44:	687a      	ldr	r2, [r7, #4]
 8028c46:	68b9      	ldr	r1, [r7, #8]
 8028c48:	f000 f94b 	bl	8028ee2 <bhy2_hif_get_status_fifo>
 8028c4c:	4603      	mov	r3, r0
 8028c4e:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8028c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c54:	2b00      	cmp	r3, #0
 8028c56:	d11c      	bne.n	8028c92 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8028c58:	7cfb      	ldrb	r3, [r7, #19]
 8028c5a:	7dba      	ldrb	r2, [r7, #22]
 8028c5c:	429a      	cmp	r2, r3
 8028c5e:	d00a      	beq.n	8028c76 <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8028c60:	7dbb      	ldrb	r3, [r7, #22]
 8028c62:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8028c64:	f107 0113 	add.w	r1, r7, #19
 8028c68:	6a3b      	ldr	r3, [r7, #32]
 8028c6a:	2201      	movs	r2, #1
 8028c6c:	2006      	movs	r0, #6
 8028c6e:	f7ff ff20 	bl	8028ab2 <bhy2_hif_set_regs>
 8028c72:	4603      	mov	r3, r0
 8028c74:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8028c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028c7a:	2b00      	cmp	r3, #0
 8028c7c:	d109      	bne.n	8028c92 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8028c7e:	8abb      	ldrh	r3, [r7, #20]
 8028c80:	89fa      	ldrh	r2, [r7, #14]
 8028c82:	429a      	cmp	r2, r3
 8028c84:	d005      	beq.n	8028c92 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8028c86:	23fb      	movs	r3, #251	; 0xfb
 8028c88:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8028c8a:	e002      	b.n	8028c92 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028c8c:	23ff      	movs	r3, #255	; 0xff
 8028c8e:	75fb      	strb	r3, [r7, #23]
 8028c90:	e000      	b.n	8028c94 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8028c92:	bf00      	nop
    }

    return rslt;
 8028c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028c98:	4618      	mov	r0, r3
 8028c9a:	3718      	adds	r7, #24
 8028c9c:	46bd      	mov	sp, r7
 8028c9e:	bd80      	pop	{r7, pc}

08028ca0 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8028ca0:	b580      	push	{r7, lr}
 8028ca2:	b082      	sub	sp, #8
 8028ca4:	af00      	add	r7, sp, #0
 8028ca6:	6078      	str	r0, [r7, #4]
 8028ca8:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8028caa:	683b      	ldr	r3, [r7, #0]
 8028cac:	2201      	movs	r2, #1
 8028cae:	6879      	ldr	r1, [r7, #4]
 8028cb0:	201c      	movs	r0, #28
 8028cb2:	f7ff fec6 	bl	8028a42 <bhy2_hif_get_regs>
 8028cb6:	4603      	mov	r3, r0
}
 8028cb8:	4618      	mov	r0, r3
 8028cba:	3708      	adds	r7, #8
 8028cbc:	46bd      	mov	sp, r7
 8028cbe:	bd80      	pop	{r7, pc}

08028cc0 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8028cc0:	b580      	push	{r7, lr}
 8028cc2:	b084      	sub	sp, #16
 8028cc4:	af00      	add	r7, sp, #0
 8028cc6:	6078      	str	r0, [r7, #4]
 8028cc8:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8028cca:	687b      	ldr	r3, [r7, #4]
 8028ccc:	2b00      	cmp	r3, #0
 8028cce:	d013      	beq.n	8028cf8 <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8028cd0:	f107 010c 	add.w	r1, r7, #12
 8028cd4:	683b      	ldr	r3, [r7, #0]
 8028cd6:	2202      	movs	r2, #2
 8028cd8:	2020      	movs	r0, #32
 8028cda:	f7ff feb2 	bl	8028a42 <bhy2_hif_get_regs>
 8028cde:	4603      	mov	r3, r0
 8028ce0:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8028ce2:	7b3b      	ldrb	r3, [r7, #12]
 8028ce4:	b21a      	sxth	r2, r3
 8028ce6:	7b7b      	ldrb	r3, [r7, #13]
 8028ce8:	021b      	lsls	r3, r3, #8
 8028cea:	b21b      	sxth	r3, r3
 8028cec:	4313      	orrs	r3, r2
 8028cee:	b21b      	sxth	r3, r3
 8028cf0:	b29a      	uxth	r2, r3
 8028cf2:	687b      	ldr	r3, [r7, #4]
 8028cf4:	801a      	strh	r2, [r3, #0]
 8028cf6:	e001      	b.n	8028cfc <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028cf8:	23ff      	movs	r3, #255	; 0xff
 8028cfa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028d00:	4618      	mov	r0, r3
 8028d02:	3710      	adds	r7, #16
 8028d04:	46bd      	mov	sp, r7
 8028d06:	bd80      	pop	{r7, pc}

08028d08 <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8028d08:	b580      	push	{r7, lr}
 8028d0a:	b082      	sub	sp, #8
 8028d0c:	af00      	add	r7, sp, #0
 8028d0e:	6078      	str	r0, [r7, #4]
 8028d10:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8028d12:	683b      	ldr	r3, [r7, #0]
 8028d14:	2201      	movs	r2, #1
 8028d16:	6879      	ldr	r1, [r7, #4]
 8028d18:	2025      	movs	r0, #37	; 0x25
 8028d1a:	f7ff fe92 	bl	8028a42 <bhy2_hif_get_regs>
 8028d1e:	4603      	mov	r3, r0
}
 8028d20:	4618      	mov	r0, r3
 8028d22:	3708      	adds	r7, #8
 8028d24:	46bd      	mov	sp, r7
 8028d26:	bd80      	pop	{r7, pc}

08028d28 <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8028d28:	b580      	push	{r7, lr}
 8028d2a:	b082      	sub	sp, #8
 8028d2c:	af00      	add	r7, sp, #0
 8028d2e:	6078      	str	r0, [r7, #4]
 8028d30:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8028d32:	683b      	ldr	r3, [r7, #0]
 8028d34:	2201      	movs	r2, #1
 8028d36:	6879      	ldr	r1, [r7, #4]
 8028d38:	202d      	movs	r0, #45	; 0x2d
 8028d3a:	f7ff fe82 	bl	8028a42 <bhy2_hif_get_regs>
 8028d3e:	4603      	mov	r3, r0
}
 8028d40:	4618      	mov	r0, r3
 8028d42:	3708      	adds	r7, #8
 8028d44:	46bd      	mov	sp, r7
 8028d46:	bd80      	pop	{r7, pc}

08028d48 <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8028d48:	b580      	push	{r7, lr}
 8028d4a:	b084      	sub	sp, #16
 8028d4c:	af00      	add	r7, sp, #0
 8028d4e:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8028d50:	2301      	movs	r3, #1
 8028d52:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8028d54:	2300      	movs	r3, #0
 8028d56:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8028d58:	230f      	movs	r3, #15
 8028d5a:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8028d5c:	f107 010b 	add.w	r1, r7, #11
 8028d60:	687b      	ldr	r3, [r7, #4]
 8028d62:	2201      	movs	r2, #1
 8028d64:	2014      	movs	r0, #20
 8028d66:	f7ff fea4 	bl	8028ab2 <bhy2_hif_set_regs>
 8028d6a:	4603      	mov	r3, r0
 8028d6c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028d72:	2b00      	cmp	r3, #0
 8028d74:	d12b      	bne.n	8028dce <bhy2_hif_reset+0x86>
    {
        while (count--)
 8028d76:	e01c      	b.n	8028db2 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8028d78:	6879      	ldr	r1, [r7, #4]
 8028d7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8028d7e:	f7ff fed0 	bl	8028b22 <bhy2_hif_delay_us>
 8028d82:	4603      	mov	r3, r0
 8028d84:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8028d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028d8a:	2b00      	cmp	r3, #0
 8028d8c:	d111      	bne.n	8028db2 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8028d8e:	f107 010a 	add.w	r1, r7, #10
 8028d92:	687b      	ldr	r3, [r7, #4]
 8028d94:	2201      	movs	r2, #1
 8028d96:	2025      	movs	r0, #37	; 0x25
 8028d98:	f7ff fe53 	bl	8028a42 <bhy2_hif_get_regs>
 8028d9c:	4603      	mov	r3, r0
 8028d9e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8028da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028da4:	2b00      	cmp	r3, #0
 8028da6:	d104      	bne.n	8028db2 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8028da8:	7abb      	ldrb	r3, [r7, #10]
 8028daa:	f003 0310 	and.w	r3, r3, #16
 8028dae:	2b00      	cmp	r3, #0
 8028db0:	d105      	bne.n	8028dbe <bhy2_hif_reset+0x76>
        while (count--)
 8028db2:	89bb      	ldrh	r3, [r7, #12]
 8028db4:	1e5a      	subs	r2, r3, #1
 8028db6:	81ba      	strh	r2, [r7, #12]
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d1dd      	bne.n	8028d78 <bhy2_hif_reset+0x30>
 8028dbc:	e000      	b.n	8028dc0 <bhy2_hif_reset+0x78>
                    {
                        break;
 8028dbe:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8028dc0:	7abb      	ldrb	r3, [r7, #10]
 8028dc2:	f003 0310 	and.w	r3, r3, #16
 8028dc6:	2b00      	cmp	r3, #0
 8028dc8:	d101      	bne.n	8028dce <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8028dca:	23fb      	movs	r3, #251	; 0xfb
 8028dcc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8028dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028dd2:	4618      	mov	r0, r3
 8028dd4:	3710      	adds	r7, #16
 8028dd6:	46bd      	mov	sp, r7
 8028dd8:	bd80      	pop	{r7, pc}

08028dda <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8028dda:	b580      	push	{r7, lr}
 8028ddc:	b086      	sub	sp, #24
 8028dde:	af00      	add	r7, sp, #0
 8028de0:	60f8      	str	r0, [r7, #12]
 8028de2:	60b9      	str	r1, [r7, #8]
 8028de4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8028de6:	2300      	movs	r3, #0
 8028de8:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8028dea:	687b      	ldr	r3, [r7, #4]
 8028dec:	2b00      	cmp	r3, #0
 8028dee:	d027      	beq.n	8028e40 <bhy2_hif_upload_firmware_to_ram+0x66>
 8028df0:	68fb      	ldr	r3, [r7, #12]
 8028df2:	2b00      	cmp	r3, #0
 8028df4:	d024      	beq.n	8028e40 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8028df6:	68fb      	ldr	r3, [r7, #12]
 8028df8:	781b      	ldrb	r3, [r3, #0]
 8028dfa:	b21a      	sxth	r2, r3
 8028dfc:	68fb      	ldr	r3, [r7, #12]
 8028dfe:	3301      	adds	r3, #1
 8028e00:	781b      	ldrb	r3, [r3, #0]
 8028e02:	021b      	lsls	r3, r3, #8
 8028e04:	b21b      	sxth	r3, r3
 8028e06:	4313      	orrs	r3, r2
 8028e08:	b21b      	sxth	r3, r3
 8028e0a:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8028e0c:	8abb      	ldrh	r3, [r7, #20]
 8028e0e:	f246 622b 	movw	r2, #26155	; 0x662b
 8028e12:	4293      	cmp	r3, r2
 8028e14:	d002      	beq.n	8028e1c <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8028e16:	23fc      	movs	r3, #252	; 0xfc
 8028e18:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028e1a:	e014      	b.n	8028e46 <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8028e1c:	687b      	ldr	r3, [r7, #4]
 8028e1e:	68ba      	ldr	r2, [r7, #8]
 8028e20:	68f9      	ldr	r1, [r7, #12]
 8028e22:	2002      	movs	r0, #2
 8028e24:	f7ff fe9b 	bl	8028b5e <bhy2_hif_exec_cmd>
 8028e28:	4603      	mov	r3, r0
 8028e2a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8028e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028e30:	2b00      	cmp	r3, #0
 8028e32:	d108      	bne.n	8028e46 <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8028e34:	6878      	ldr	r0, [r7, #4]
 8028e36:	f7ff fcf2 	bl	802881e <bhy2_hif_check_boot_status_ram>
 8028e3a:	4603      	mov	r3, r0
 8028e3c:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8028e3e:	e002      	b.n	8028e46 <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8028e40:	23ff      	movs	r3, #255	; 0xff
 8028e42:	75fb      	strb	r3, [r7, #23]
 8028e44:	e000      	b.n	8028e48 <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8028e46:	bf00      	nop
    }

    return rslt;
 8028e48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028e4c:	4618      	mov	r0, r3
 8028e4e:	3718      	adds	r7, #24
 8028e50:	46bd      	mov	sp, r7
 8028e52:	bd80      	pop	{r7, pc}

08028e54 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8028e54:	b580      	push	{r7, lr}
 8028e56:	b084      	sub	sp, #16
 8028e58:	af00      	add	r7, sp, #0
 8028e5a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8028e5c:	687b      	ldr	r3, [r7, #4]
 8028e5e:	2200      	movs	r2, #0
 8028e60:	2100      	movs	r1, #0
 8028e62:	2003      	movs	r0, #3
 8028e64:	f7ff fe7b 	bl	8028b5e <bhy2_hif_exec_cmd>
 8028e68:	4603      	mov	r3, r0
 8028e6a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8028e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8028e70:	2b00      	cmp	r3, #0
 8028e72:	d104      	bne.n	8028e7e <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8028e74:	6878      	ldr	r0, [r7, #4]
 8028e76:	f7ff fcd2 	bl	802881e <bhy2_hif_check_boot_status_ram>
 8028e7a:	4603      	mov	r3, r0
 8028e7c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8028e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8028e82:	4618      	mov	r0, r3
 8028e84:	3710      	adds	r7, #16
 8028e86:	46bd      	mov	sp, r7
 8028e88:	bd80      	pop	{r7, pc}

08028e8a <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028e8a:	b580      	push	{r7, lr}
 8028e8c:	b086      	sub	sp, #24
 8028e8e:	af02      	add	r7, sp, #8
 8028e90:	60f8      	str	r0, [r7, #12]
 8028e92:	60b9      	str	r1, [r7, #8]
 8028e94:	607a      	str	r2, [r7, #4]
 8028e96:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028e98:	69bb      	ldr	r3, [r7, #24]
 8028e9a:	9301      	str	r3, [sp, #4]
 8028e9c:	683b      	ldr	r3, [r7, #0]
 8028e9e:	9300      	str	r3, [sp, #0]
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	68ba      	ldr	r2, [r7, #8]
 8028ea4:	68f9      	ldr	r1, [r7, #12]
 8028ea6:	2001      	movs	r0, #1
 8028ea8:	f7ff fd00 	bl	80288ac <bhy2_hif_get_fifo>
 8028eac:	4603      	mov	r3, r0
}
 8028eae:	4618      	mov	r0, r3
 8028eb0:	3710      	adds	r7, #16
 8028eb2:	46bd      	mov	sp, r7
 8028eb4:	bd80      	pop	{r7, pc}

08028eb6 <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8028eb6:	b580      	push	{r7, lr}
 8028eb8:	b086      	sub	sp, #24
 8028eba:	af02      	add	r7, sp, #8
 8028ebc:	60f8      	str	r0, [r7, #12]
 8028ebe:	60b9      	str	r1, [r7, #8]
 8028ec0:	607a      	str	r2, [r7, #4]
 8028ec2:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028ec4:	69bb      	ldr	r3, [r7, #24]
 8028ec6:	9301      	str	r3, [sp, #4]
 8028ec8:	683b      	ldr	r3, [r7, #0]
 8028eca:	9300      	str	r3, [sp, #0]
 8028ecc:	687b      	ldr	r3, [r7, #4]
 8028ece:	68ba      	ldr	r2, [r7, #8]
 8028ed0:	68f9      	ldr	r1, [r7, #12]
 8028ed2:	2002      	movs	r0, #2
 8028ed4:	f7ff fcea 	bl	80288ac <bhy2_hif_get_fifo>
 8028ed8:	4603      	mov	r3, r0
}
 8028eda:	4618      	mov	r0, r3
 8028edc:	3710      	adds	r7, #16
 8028ede:	46bd      	mov	sp, r7
 8028ee0:	bd80      	pop	{r7, pc}

08028ee2 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8028ee2:	b580      	push	{r7, lr}
 8028ee4:	b086      	sub	sp, #24
 8028ee6:	af00      	add	r7, sp, #0
 8028ee8:	60f8      	str	r0, [r7, #12]
 8028eea:	60b9      	str	r1, [r7, #8]
 8028eec:	607a      	str	r2, [r7, #4]
 8028eee:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8028ef0:	f107 0110 	add.w	r1, r7, #16
 8028ef4:	6a3b      	ldr	r3, [r7, #32]
 8028ef6:	2204      	movs	r2, #4
 8028ef8:	2003      	movs	r0, #3
 8028efa:	f7ff fda2 	bl	8028a42 <bhy2_hif_get_regs>
 8028efe:	4603      	mov	r3, r0
 8028f00:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8028f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8028f06:	2b00      	cmp	r3, #0
 8028f08:	d130      	bne.n	8028f6c <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8028f0a:	7c3b      	ldrb	r3, [r7, #16]
 8028f0c:	b21a      	sxth	r2, r3
 8028f0e:	f107 0310 	add.w	r3, r7, #16
 8028f12:	3301      	adds	r3, #1
 8028f14:	781b      	ldrb	r3, [r3, #0]
 8028f16:	021b      	lsls	r3, r3, #8
 8028f18:	b21b      	sxth	r3, r3
 8028f1a:	4313      	orrs	r3, r2
 8028f1c:	b21b      	sxth	r3, r3
 8028f1e:	b29a      	uxth	r2, r3
 8028f20:	68fb      	ldr	r3, [r7, #12]
 8028f22:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8028f24:	7cbb      	ldrb	r3, [r7, #18]
 8028f26:	b21a      	sxth	r2, r3
 8028f28:	f107 0310 	add.w	r3, r7, #16
 8028f2c:	3302      	adds	r3, #2
 8028f2e:	3301      	adds	r3, #1
 8028f30:	781b      	ldrb	r3, [r3, #0]
 8028f32:	021b      	lsls	r3, r3, #8
 8028f34:	b21b      	sxth	r3, r3
 8028f36:	4313      	orrs	r3, r2
 8028f38:	b21b      	sxth	r3, r3
 8028f3a:	b29b      	uxth	r3, r3
 8028f3c:	461a      	mov	r2, r3
 8028f3e:	683b      	ldr	r3, [r7, #0]
 8028f40:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8028f42:	683b      	ldr	r3, [r7, #0]
 8028f44:	681b      	ldr	r3, [r3, #0]
 8028f46:	2b00      	cmp	r3, #0
 8028f48:	d010      	beq.n	8028f6c <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8028f4a:	683b      	ldr	r3, [r7, #0]
 8028f4c:	681b      	ldr	r3, [r3, #0]
 8028f4e:	687a      	ldr	r2, [r7, #4]
 8028f50:	429a      	cmp	r2, r3
 8028f52:	d202      	bcs.n	8028f5a <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8028f54:	23fa      	movs	r3, #250	; 0xfa
 8028f56:	75fb      	strb	r3, [r7, #23]
 8028f58:	e008      	b.n	8028f6c <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8028f5a:	683b      	ldr	r3, [r7, #0]
 8028f5c:	681a      	ldr	r2, [r3, #0]
 8028f5e:	6a3b      	ldr	r3, [r7, #32]
 8028f60:	68b9      	ldr	r1, [r7, #8]
 8028f62:	2003      	movs	r0, #3
 8028f64:	f7ff fd6d 	bl	8028a42 <bhy2_hif_get_regs>
 8028f68:	4603      	mov	r3, r0
 8028f6a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8028f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8028f70:	4618      	mov	r0, r3
 8028f72:	3718      	adds	r7, #24
 8028f74:	46bd      	mov	sp, r7
 8028f76:	bd80      	pop	{r7, pc}

08028f78 <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8028f78:	b580      	push	{r7, lr}
 8028f7a:	b086      	sub	sp, #24
 8028f7c:	af02      	add	r7, sp, #8
 8028f7e:	60f8      	str	r0, [r7, #12]
 8028f80:	60b9      	str	r1, [r7, #8]
 8028f82:	607a      	str	r2, [r7, #4]
 8028f84:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8028f86:	69bb      	ldr	r3, [r7, #24]
 8028f88:	9301      	str	r3, [sp, #4]
 8028f8a:	683b      	ldr	r3, [r7, #0]
 8028f8c:	9300      	str	r3, [sp, #0]
 8028f8e:	687b      	ldr	r3, [r7, #4]
 8028f90:	68ba      	ldr	r2, [r7, #8]
 8028f92:	68f9      	ldr	r1, [r7, #12]
 8028f94:	2003      	movs	r0, #3
 8028f96:	f7ff fc89 	bl	80288ac <bhy2_hif_get_fifo>
 8028f9a:	4603      	mov	r3, r0
}
 8028f9c:	4618      	mov	r0, r3
 8028f9e:	3710      	adds	r7, #16
 8028fa0:	46bd      	mov	sp, r7
 8028fa2:	bd80      	pop	{r7, pc}

08028fa4 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 8028fa4:	b580      	push	{r7, lr}
 8028fa6:	b088      	sub	sp, #32
 8028fa8:	af00      	add	r7, sp, #0
 8028faa:	4603      	mov	r3, r0
 8028fac:	ed87 0a02 	vstr	s0, [r7, #8]
 8028fb0:	6079      	str	r1, [r7, #4]
 8028fb2:	603a      	str	r2, [r7, #0]
 8028fb4:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 8028fb6:	68bb      	ldr	r3, [r7, #8]
 8028fb8:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 8028fba:	7bfb      	ldrb	r3, [r7, #15]
 8028fbc:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8028fbe:	697b      	ldr	r3, [r7, #20]
 8028fc0:	b2db      	uxtb	r3, r3
 8028fc2:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 8028fc4:	697b      	ldr	r3, [r7, #20]
 8028fc6:	0a1b      	lsrs	r3, r3, #8
 8028fc8:	b2db      	uxtb	r3, r3
 8028fca:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8028fcc:	697b      	ldr	r3, [r7, #20]
 8028fce:	0c1b      	lsrs	r3, r3, #16
 8028fd0:	b2db      	uxtb	r3, r3
 8028fd2:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 8028fd4:	697b      	ldr	r3, [r7, #20]
 8028fd6:	0e1b      	lsrs	r3, r3, #24
 8028fd8:	b2db      	uxtb	r3, r3
 8028fda:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8028fdc:	687b      	ldr	r3, [r7, #4]
 8028fde:	b2db      	uxtb	r3, r3
 8028fe0:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 8028fe2:	687b      	ldr	r3, [r7, #4]
 8028fe4:	0a1b      	lsrs	r3, r3, #8
 8028fe6:	b2db      	uxtb	r3, r3
 8028fe8:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 8028fea:	687b      	ldr	r3, [r7, #4]
 8028fec:	0c1b      	lsrs	r3, r3, #16
 8028fee:	b2db      	uxtb	r3, r3
 8028ff0:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 8028ff2:	f107 0118 	add.w	r1, r7, #24
 8028ff6:	683b      	ldr	r3, [r7, #0]
 8028ff8:	2208      	movs	r2, #8
 8028ffa:	200d      	movs	r0, #13
 8028ffc:	f7ff fdaf 	bl	8028b5e <bhy2_hif_exec_cmd>
 8029000:	4603      	mov	r3, r0
}
 8029002:	4618      	mov	r0, r3
 8029004:	3720      	adds	r7, #32
 8029006:	46bd      	mov	sp, r7
 8029008:	bd80      	pop	{r7, pc}

0802900a <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 802900a:	b580      	push	{r7, lr}
 802900c:	b090      	sub	sp, #64	; 0x40
 802900e:	af02      	add	r7, sp, #8
 8029010:	4603      	mov	r3, r0
 8029012:	60b9      	str	r1, [r7, #8]
 8029014:	607a      	str	r2, [r7, #4]
 8029016:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 8029018:	68bb      	ldr	r3, [r7, #8]
 802901a:	2b00      	cmp	r3, #0
 802901c:	f000 80da 	beq.w	80291d4 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 8029020:	7bfb      	ldrb	r3, [r7, #15]
 8029022:	2bf5      	cmp	r3, #245	; 0xf5
 8029024:	d903      	bls.n	802902e <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 8029026:	23fe      	movs	r3, #254	; 0xfe
 8029028:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 802902c:	e0d5      	b.n	80291da <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 802902e:	7bfb      	ldrb	r3, [r7, #15]
 8029030:	b29b      	uxth	r3, r3
 8029032:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8029036:	b298      	uxth	r0, r3
 8029038:	f107 0230 	add.w	r2, r7, #48	; 0x30
 802903c:	f107 0114 	add.w	r1, r7, #20
 8029040:	687b      	ldr	r3, [r7, #4]
 8029042:	9300      	str	r3, [sp, #0]
 8029044:	4613      	mov	r3, r2
 8029046:	221c      	movs	r2, #28
 8029048:	f7ff fda2 	bl	8028b90 <bhy2_hif_get_parameter>
 802904c:	4603      	mov	r3, r0
 802904e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 8029052:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8029056:	2b00      	cmp	r3, #0
 8029058:	f040 80bf 	bne.w	80291da <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 802905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802905e:	2b1c      	cmp	r3, #28
 8029060:	d003      	beq.n	802906a <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 8029062:	23fe      	movs	r3, #254	; 0xfe
 8029064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8029068:	e0b7      	b.n	80291da <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 802906a:	7d3a      	ldrb	r2, [r7, #20]
 802906c:	68bb      	ldr	r3, [r7, #8]
 802906e:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 8029070:	7d7a      	ldrb	r2, [r7, #21]
 8029072:	68bb      	ldr	r3, [r7, #8]
 8029074:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 8029076:	7dba      	ldrb	r2, [r7, #22]
 8029078:	68bb      	ldr	r3, [r7, #8]
 802907a:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 802907c:	7dfa      	ldrb	r2, [r7, #23]
 802907e:	68bb      	ldr	r3, [r7, #8]
 8029080:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 8029082:	7e3a      	ldrb	r2, [r7, #24]
 8029084:	68bb      	ldr	r3, [r7, #8]
 8029086:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 8029088:	7e7a      	ldrb	r2, [r7, #25]
 802908a:	68bb      	ldr	r3, [r7, #8]
 802908c:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 802908e:	7eba      	ldrb	r2, [r7, #26]
 8029090:	68bb      	ldr	r3, [r7, #8]
 8029092:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 8029094:	7efa      	ldrb	r2, [r7, #27]
 8029096:	68bb      	ldr	r3, [r7, #8]
 8029098:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 802909a:	7f3a      	ldrb	r2, [r7, #28]
 802909c:	68bb      	ldr	r3, [r7, #8]
 802909e:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 80290a0:	7f7a      	ldrb	r2, [r7, #29]
 80290a2:	68bb      	ldr	r3, [r7, #8]
 80290a4:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 80290a6:	7fba      	ldrb	r2, [r7, #30]
 80290a8:	68bb      	ldr	r3, [r7, #8]
 80290aa:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 80290ac:	7ffa      	ldrb	r2, [r7, #31]
 80290ae:	68bb      	ldr	r3, [r7, #8]
 80290b0:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 80290b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80290b6:	68bb      	ldr	r3, [r7, #8]
 80290b8:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 80290ba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80290be:	68bb      	ldr	r3, [r7, #8]
 80290c0:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 80290c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80290c6:	68bb      	ldr	r3, [r7, #8]
 80290c8:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 80290ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80290ce:	68bb      	ldr	r3, [r7, #8]
 80290d0:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 80290d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80290d6:	68bb      	ldr	r3, [r7, #8]
 80290d8:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 80290da:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80290de:	68bb      	ldr	r3, [r7, #8]
 80290e0:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 80290e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80290e6:	68bb      	ldr	r3, [r7, #8]
 80290e8:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 80290ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80290ee:	68bb      	ldr	r3, [r7, #8]
 80290f0:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 80290f2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80290f6:	68bb      	ldr	r3, [r7, #8]
 80290f8:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 80290fa:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80290fe:	68bb      	ldr	r3, [r7, #8]
 8029100:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 8029102:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8029106:	68bb      	ldr	r3, [r7, #8]
 8029108:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 802910a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 802910e:	68bb      	ldr	r3, [r7, #8]
 8029110:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 8029112:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8029116:	68bb      	ldr	r3, [r7, #8]
 8029118:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 802911a:	68bb      	ldr	r3, [r7, #8]
 802911c:	791b      	ldrb	r3, [r3, #4]
 802911e:	b21a      	sxth	r2, r3
 8029120:	68bb      	ldr	r3, [r7, #8]
 8029122:	795b      	ldrb	r3, [r3, #5]
 8029124:	021b      	lsls	r3, r3, #8
 8029126:	b21b      	sxth	r3, r3
 8029128:	4313      	orrs	r3, r2
 802912a:	b21b      	sxth	r3, r3
 802912c:	b29a      	uxth	r2, r3
 802912e:	68bb      	ldr	r3, [r7, #8]
 8029130:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 8029132:	68bb      	ldr	r3, [r7, #8]
 8029134:	799b      	ldrb	r3, [r3, #6]
 8029136:	b21a      	sxth	r2, r3
 8029138:	68bb      	ldr	r3, [r7, #8]
 802913a:	79db      	ldrb	r3, [r3, #7]
 802913c:	021b      	lsls	r3, r3, #8
 802913e:	b21b      	sxth	r3, r3
 8029140:	4313      	orrs	r3, r2
 8029142:	b21b      	sxth	r3, r3
 8029144:	b29a      	uxth	r2, r3
 8029146:	68bb      	ldr	r3, [r7, #8]
 8029148:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 802914a:	68bb      	ldr	r3, [r7, #8]
 802914c:	7a1b      	ldrb	r3, [r3, #8]
 802914e:	461a      	mov	r2, r3
 8029150:	68bb      	ldr	r3, [r7, #8]
 8029152:	7a5b      	ldrb	r3, [r3, #9]
 8029154:	021b      	lsls	r3, r3, #8
 8029156:	431a      	orrs	r2, r3
 8029158:	68bb      	ldr	r3, [r7, #8]
 802915a:	7a9b      	ldrb	r3, [r3, #10]
 802915c:	041b      	lsls	r3, r3, #16
 802915e:	431a      	orrs	r2, r3
 8029160:	68bb      	ldr	r3, [r7, #8]
 8029162:	7adb      	ldrb	r3, [r3, #11]
 8029164:	061b      	lsls	r3, r3, #24
 8029166:	431a      	orrs	r2, r3
 8029168:	68bb      	ldr	r3, [r7, #8]
 802916a:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 802916c:	68bb      	ldr	r3, [r7, #8]
 802916e:	7b1b      	ldrb	r3, [r3, #12]
 8029170:	461a      	mov	r2, r3
 8029172:	68bb      	ldr	r3, [r7, #8]
 8029174:	7b5b      	ldrb	r3, [r3, #13]
 8029176:	021b      	lsls	r3, r3, #8
 8029178:	431a      	orrs	r2, r3
 802917a:	68bb      	ldr	r3, [r7, #8]
 802917c:	7b9b      	ldrb	r3, [r3, #14]
 802917e:	041b      	lsls	r3, r3, #16
 8029180:	431a      	orrs	r2, r3
 8029182:	68bb      	ldr	r3, [r7, #8]
 8029184:	7bdb      	ldrb	r3, [r3, #15]
 8029186:	061b      	lsls	r3, r3, #24
 8029188:	431a      	orrs	r2, r3
 802918a:	68bb      	ldr	r3, [r7, #8]
 802918c:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 802918e:	68bb      	ldr	r3, [r7, #8]
 8029190:	7c1b      	ldrb	r3, [r3, #16]
 8029192:	461a      	mov	r2, r3
 8029194:	68bb      	ldr	r3, [r7, #8]
 8029196:	7c5b      	ldrb	r3, [r3, #17]
 8029198:	021b      	lsls	r3, r3, #8
 802919a:	431a      	orrs	r2, r3
 802919c:	68bb      	ldr	r3, [r7, #8]
 802919e:	7c9b      	ldrb	r3, [r3, #18]
 80291a0:	041b      	lsls	r3, r3, #16
 80291a2:	431a      	orrs	r2, r3
 80291a4:	68bb      	ldr	r3, [r7, #8]
 80291a6:	7cdb      	ldrb	r3, [r3, #19]
 80291a8:	061b      	lsls	r3, r3, #24
 80291aa:	431a      	orrs	r2, r3
 80291ac:	68bb      	ldr	r3, [r7, #8]
 80291ae:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 80291b0:	68bb      	ldr	r3, [r7, #8]
 80291b2:	7e1b      	ldrb	r3, [r3, #24]
 80291b4:	461a      	mov	r2, r3
 80291b6:	68bb      	ldr	r3, [r7, #8]
 80291b8:	7e5b      	ldrb	r3, [r3, #25]
 80291ba:	021b      	lsls	r3, r3, #8
 80291bc:	431a      	orrs	r2, r3
 80291be:	68bb      	ldr	r3, [r7, #8]
 80291c0:	7e9b      	ldrb	r3, [r3, #26]
 80291c2:	041b      	lsls	r3, r3, #16
 80291c4:	431a      	orrs	r2, r3
 80291c6:	68bb      	ldr	r3, [r7, #8]
 80291c8:	7edb      	ldrb	r3, [r3, #27]
 80291ca:	061b      	lsls	r3, r3, #24
 80291cc:	431a      	orrs	r2, r3
 80291ce:	68bb      	ldr	r3, [r7, #8]
 80291d0:	619a      	str	r2, [r3, #24]
 80291d2:	e002      	b.n	80291da <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 80291d4:	23ff      	movs	r3, #255	; 0xff
 80291d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 80291da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80291de:	4618      	mov	r0, r3
 80291e0:	3738      	adds	r7, #56	; 0x38
 80291e2:	46bd      	mov	sp, r7
 80291e4:	bd80      	pop	{r7, pc}

080291e6 <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 80291e6:	b480      	push	{r7}
 80291e8:	b083      	sub	sp, #12
 80291ea:	af00      	add	r7, sp, #0
 80291ec:	6078      	str	r0, [r7, #4]
 80291ee:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 80291f0:	687b      	ldr	r3, [r7, #4]
 80291f2:	781b      	ldrb	r3, [r3, #0]
 80291f4:	b21a      	sxth	r2, r3
 80291f6:	687b      	ldr	r3, [r7, #4]
 80291f8:	3301      	adds	r3, #1
 80291fa:	781b      	ldrb	r3, [r3, #0]
 80291fc:	021b      	lsls	r3, r3, #8
 80291fe:	b21b      	sxth	r3, r3
 8029200:	4313      	orrs	r3, r2
 8029202:	b21a      	sxth	r2, r3
 8029204:	683b      	ldr	r3, [r7, #0]
 8029206:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 8029208:	687b      	ldr	r3, [r7, #4]
 802920a:	3302      	adds	r3, #2
 802920c:	781b      	ldrb	r3, [r3, #0]
 802920e:	b21a      	sxth	r2, r3
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	3303      	adds	r3, #3
 8029214:	781b      	ldrb	r3, [r3, #0]
 8029216:	021b      	lsls	r3, r3, #8
 8029218:	b21b      	sxth	r3, r3
 802921a:	4313      	orrs	r3, r2
 802921c:	b21a      	sxth	r2, r3
 802921e:	683b      	ldr	r3, [r7, #0]
 8029220:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 8029222:	687b      	ldr	r3, [r7, #4]
 8029224:	3304      	adds	r3, #4
 8029226:	781b      	ldrb	r3, [r3, #0]
 8029228:	b21a      	sxth	r2, r3
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	3305      	adds	r3, #5
 802922e:	781b      	ldrb	r3, [r3, #0]
 8029230:	021b      	lsls	r3, r3, #8
 8029232:	b21b      	sxth	r3, r3
 8029234:	4313      	orrs	r3, r2
 8029236:	b21a      	sxth	r2, r3
 8029238:	683b      	ldr	r3, [r7, #0]
 802923a:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 802923c:	687b      	ldr	r3, [r7, #4]
 802923e:	3306      	adds	r3, #6
 8029240:	781b      	ldrb	r3, [r3, #0]
 8029242:	b21a      	sxth	r2, r3
 8029244:	687b      	ldr	r3, [r7, #4]
 8029246:	3307      	adds	r3, #7
 8029248:	781b      	ldrb	r3, [r3, #0]
 802924a:	021b      	lsls	r3, r3, #8
 802924c:	b21b      	sxth	r3, r3
 802924e:	4313      	orrs	r3, r2
 8029250:	b21a      	sxth	r2, r3
 8029252:	683b      	ldr	r3, [r7, #0]
 8029254:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 8029256:	687b      	ldr	r3, [r7, #4]
 8029258:	3308      	adds	r3, #8
 802925a:	781b      	ldrb	r3, [r3, #0]
 802925c:	b21a      	sxth	r2, r3
 802925e:	687b      	ldr	r3, [r7, #4]
 8029260:	3309      	adds	r3, #9
 8029262:	781b      	ldrb	r3, [r3, #0]
 8029264:	021b      	lsls	r3, r3, #8
 8029266:	b21b      	sxth	r3, r3
 8029268:	4313      	orrs	r3, r2
 802926a:	b21b      	sxth	r3, r3
 802926c:	b29a      	uxth	r2, r3
 802926e:	683b      	ldr	r3, [r7, #0]
 8029270:	811a      	strh	r2, [r3, #8]
}
 8029272:	bf00      	nop
 8029274:	370c      	adds	r7, #12
 8029276:	46bd      	mov	sp, r7
 8029278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802927c:	4770      	bx	lr
	...

08029280 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8029280:	b580      	push	{r7, lr}
 8029282:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8029284:	4b12      	ldr	r3, [pc, #72]	; (80292d0 <MX_COMP2_Init+0x50>)
 8029286:	4a13      	ldr	r2, [pc, #76]	; (80292d4 <MX_COMP2_Init+0x54>)
 8029288:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 802928a:	4b11      	ldr	r3, [pc, #68]	; (80292d0 <MX_COMP2_Init+0x50>)
 802928c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8029290:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8029292:	4b0f      	ldr	r3, [pc, #60]	; (80292d0 <MX_COMP2_Init+0x50>)
 8029294:	2200      	movs	r2, #0
 8029296:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8029298:	4b0d      	ldr	r3, [pc, #52]	; (80292d0 <MX_COMP2_Init+0x50>)
 802929a:	2200      	movs	r2, #0
 802929c:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 802929e:	4b0c      	ldr	r3, [pc, #48]	; (80292d0 <MX_COMP2_Init+0x50>)
 80292a0:	2200      	movs	r2, #0
 80292a2:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80292a4:	4b0a      	ldr	r3, [pc, #40]	; (80292d0 <MX_COMP2_Init+0x50>)
 80292a6:	2200      	movs	r2, #0
 80292a8:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80292aa:	4b09      	ldr	r3, [pc, #36]	; (80292d0 <MX_COMP2_Init+0x50>)
 80292ac:	2200      	movs	r2, #0
 80292ae:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80292b0:	4b07      	ldr	r3, [pc, #28]	; (80292d0 <MX_COMP2_Init+0x50>)
 80292b2:	2200      	movs	r2, #0
 80292b4:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80292b6:	4b06      	ldr	r3, [pc, #24]	; (80292d0 <MX_COMP2_Init+0x50>)
 80292b8:	2231      	movs	r2, #49	; 0x31
 80292ba:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80292bc:	4804      	ldr	r0, [pc, #16]	; (80292d0 <MX_COMP2_Init+0x50>)
 80292be:	f001 fd1f 	bl	802ad00 <HAL_COMP_Init>
 80292c2:	4603      	mov	r3, r0
 80292c4:	2b00      	cmp	r3, #0
 80292c6:	d001      	beq.n	80292cc <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 80292c8:	f000 fc28 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80292cc:	bf00      	nop
 80292ce:	bd80      	pop	{r7, pc}
 80292d0:	24024518 	.word	0x24024518
 80292d4:	58003810 	.word	0x58003810

080292d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80292d8:	b580      	push	{r7, lr}
 80292da:	b08a      	sub	sp, #40	; 0x28
 80292dc:	af00      	add	r7, sp, #0
 80292de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80292e0:	f107 0314 	add.w	r3, r7, #20
 80292e4:	2200      	movs	r2, #0
 80292e6:	601a      	str	r2, [r3, #0]
 80292e8:	605a      	str	r2, [r3, #4]
 80292ea:	609a      	str	r2, [r3, #8]
 80292ec:	60da      	str	r2, [r3, #12]
 80292ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 80292f0:	687b      	ldr	r3, [r7, #4]
 80292f2:	681b      	ldr	r3, [r3, #0]
 80292f4:	4a1c      	ldr	r2, [pc, #112]	; (8029368 <HAL_COMP_MspInit+0x90>)
 80292f6:	4293      	cmp	r3, r2
 80292f8:	d132      	bne.n	8029360 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80292fa:	4b1c      	ldr	r3, [pc, #112]	; (802936c <HAL_COMP_MspInit+0x94>)
 80292fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029300:	4a1a      	ldr	r2, [pc, #104]	; (802936c <HAL_COMP_MspInit+0x94>)
 8029302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8029306:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802930a:	4b18      	ldr	r3, [pc, #96]	; (802936c <HAL_COMP_MspInit+0x94>)
 802930c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8029314:	613b      	str	r3, [r7, #16]
 8029316:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8029318:	4b14      	ldr	r3, [pc, #80]	; (802936c <HAL_COMP_MspInit+0x94>)
 802931a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802931e:	4a13      	ldr	r2, [pc, #76]	; (802936c <HAL_COMP_MspInit+0x94>)
 8029320:	f043 0310 	orr.w	r3, r3, #16
 8029324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029328:	4b10      	ldr	r3, [pc, #64]	; (802936c <HAL_COMP_MspInit+0x94>)
 802932a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802932e:	f003 0310 	and.w	r3, r3, #16
 8029332:	60fb      	str	r3, [r7, #12]
 8029334:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8029336:	f44f 7300 	mov.w	r3, #512	; 0x200
 802933a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802933c:	2303      	movs	r3, #3
 802933e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029340:	2300      	movs	r3, #0
 8029342:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8029344:	f107 0314 	add.w	r3, r7, #20
 8029348:	4619      	mov	r1, r3
 802934a:	4809      	ldr	r0, [pc, #36]	; (8029370 <HAL_COMP_MspInit+0x98>)
 802934c:	f004 ffee 	bl	802e32c <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 4, 0);
 8029350:	2200      	movs	r2, #0
 8029352:	2104      	movs	r1, #4
 8029354:	2089      	movs	r0, #137	; 0x89
 8029356:	f001 ff96 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 802935a:	2089      	movs	r0, #137	; 0x89
 802935c:	f001 ffad 	bl	802b2ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 8029360:	bf00      	nop
 8029362:	3728      	adds	r7, #40	; 0x28
 8029364:	46bd      	mov	sp, r7
 8029366:	bd80      	pop	{r7, pc}
 8029368:	58003810 	.word	0x58003810
 802936c:	58024400 	.word	0x58024400
 8029370:	58021000 	.word	0x58021000

08029374 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8029374:	b580      	push	{r7, lr}
 8029376:	b08a      	sub	sp, #40	; 0x28
 8029378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 802937a:	1d3b      	adds	r3, r7, #4
 802937c:	2224      	movs	r2, #36	; 0x24
 802937e:	2100      	movs	r1, #0
 8029380:	4618      	mov	r0, r3
 8029382:	f012 fd8d 	bl	803bea0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8029386:	4b12      	ldr	r3, [pc, #72]	; (80293d0 <MX_DAC1_Init+0x5c>)
 8029388:	4a12      	ldr	r2, [pc, #72]	; (80293d4 <MX_DAC1_Init+0x60>)
 802938a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 802938c:	4810      	ldr	r0, [pc, #64]	; (80293d0 <MX_DAC1_Init+0x5c>)
 802938e:	f001 ffae 	bl	802b2ee <HAL_DAC_Init>
 8029392:	4603      	mov	r3, r0
 8029394:	2b00      	cmp	r3, #0
 8029396:	d001      	beq.n	802939c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8029398:	f000 fbc0 	bl	8029b1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 802939c:	2300      	movs	r3, #0
 802939e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80293a0:	2300      	movs	r3, #0
 80293a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80293a4:	2302      	movs	r3, #2
 80293a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80293a8:	2302      	movs	r3, #2
 80293aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80293ac:	2300      	movs	r3, #0
 80293ae:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80293b0:	1d3b      	adds	r3, r7, #4
 80293b2:	2200      	movs	r2, #0
 80293b4:	4619      	mov	r1, r3
 80293b6:	4806      	ldr	r0, [pc, #24]	; (80293d0 <MX_DAC1_Init+0x5c>)
 80293b8:	f002 f832 	bl	802b420 <HAL_DAC_ConfigChannel>
 80293bc:	4603      	mov	r3, r0
 80293be:	2b00      	cmp	r3, #0
 80293c0:	d001      	beq.n	80293c6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80293c2:	f000 fbab 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80293c6:	bf00      	nop
 80293c8:	3728      	adds	r7, #40	; 0x28
 80293ca:	46bd      	mov	sp, r7
 80293cc:	bd80      	pop	{r7, pc}
 80293ce:	bf00      	nop
 80293d0:	24024544 	.word	0x24024544
 80293d4:	40007400 	.word	0x40007400

080293d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80293d8:	b480      	push	{r7}
 80293da:	b085      	sub	sp, #20
 80293dc:	af00      	add	r7, sp, #0
 80293de:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 80293e0:	687b      	ldr	r3, [r7, #4]
 80293e2:	681b      	ldr	r3, [r3, #0]
 80293e4:	4a0b      	ldr	r2, [pc, #44]	; (8029414 <HAL_DAC_MspInit+0x3c>)
 80293e6:	4293      	cmp	r3, r2
 80293e8:	d10e      	bne.n	8029408 <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80293ea:	4b0b      	ldr	r3, [pc, #44]	; (8029418 <HAL_DAC_MspInit+0x40>)
 80293ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80293f0:	4a09      	ldr	r2, [pc, #36]	; (8029418 <HAL_DAC_MspInit+0x40>)
 80293f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80293f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80293fa:	4b07      	ldr	r3, [pc, #28]	; (8029418 <HAL_DAC_MspInit+0x40>)
 80293fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8029400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8029404:	60fb      	str	r3, [r7, #12]
 8029406:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8029408:	bf00      	nop
 802940a:	3714      	adds	r7, #20
 802940c:	46bd      	mov	sp, r7
 802940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029412:	4770      	bx	lr
 8029414:	40007400 	.word	0x40007400
 8029418:	58024400 	.word	0x58024400

0802941c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 802941c:	b580      	push	{r7, lr}
 802941e:	b082      	sub	sp, #8
 8029420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8029422:	4b19      	ldr	r3, [pc, #100]	; (8029488 <MX_DMA_Init+0x6c>)
 8029424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8029428:	4a17      	ldr	r2, [pc, #92]	; (8029488 <MX_DMA_Init+0x6c>)
 802942a:	f043 0301 	orr.w	r3, r3, #1
 802942e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8029432:	4b15      	ldr	r3, [pc, #84]	; (8029488 <MX_DMA_Init+0x6c>)
 8029434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8029438:	f003 0301 	and.w	r3, r3, #1
 802943c:	607b      	str	r3, [r7, #4]
 802943e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8029440:	2200      	movs	r2, #0
 8029442:	2100      	movs	r1, #0
 8029444:	200b      	movs	r0, #11
 8029446:	f001 ff1e 	bl	802b286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 802944a:	200b      	movs	r0, #11
 802944c:	f001 ff35 	bl	802b2ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8029450:	2200      	movs	r2, #0
 8029452:	2100      	movs	r1, #0
 8029454:	200c      	movs	r0, #12
 8029456:	f001 ff16 	bl	802b286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 802945a:	200c      	movs	r0, #12
 802945c:	f001 ff2d 	bl	802b2ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8029460:	2200      	movs	r2, #0
 8029462:	2100      	movs	r1, #0
 8029464:	200f      	movs	r0, #15
 8029466:	f001 ff0e 	bl	802b286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 802946a:	200f      	movs	r0, #15
 802946c:	f001 ff25 	bl	802b2ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8029470:	2200      	movs	r2, #0
 8029472:	2100      	movs	r1, #0
 8029474:	2010      	movs	r0, #16
 8029476:	f001 ff06 	bl	802b286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 802947a:	2010      	movs	r0, #16
 802947c:	f001 ff1d 	bl	802b2ba <HAL_NVIC_EnableIRQ>

}
 8029480:	bf00      	nop
 8029482:	3708      	adds	r7, #8
 8029484:	46bd      	mov	sp, r7
 8029486:	bd80      	pop	{r7, pc}
 8029488:	58024400 	.word	0x58024400

0802948c <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 802948c:	b580      	push	{r7, lr}
 802948e:	b08a      	sub	sp, #40	; 0x28
 8029490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029492:	f107 0314 	add.w	r3, r7, #20
 8029496:	2200      	movs	r2, #0
 8029498:	601a      	str	r2, [r3, #0]
 802949a:	605a      	str	r2, [r3, #4]
 802949c:	609a      	str	r2, [r3, #8]
 802949e:	60da      	str	r2, [r3, #12]
 80294a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80294a2:	4b3b      	ldr	r3, [pc, #236]	; (8029590 <MX_GPIO_Init+0x104>)
 80294a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294a8:	4a39      	ldr	r2, [pc, #228]	; (8029590 <MX_GPIO_Init+0x104>)
 80294aa:	f043 0304 	orr.w	r3, r3, #4
 80294ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294b2:	4b37      	ldr	r3, [pc, #220]	; (8029590 <MX_GPIO_Init+0x104>)
 80294b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294b8:	f003 0304 	and.w	r3, r3, #4
 80294bc:	613b      	str	r3, [r7, #16]
 80294be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80294c0:	4b33      	ldr	r3, [pc, #204]	; (8029590 <MX_GPIO_Init+0x104>)
 80294c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294c6:	4a32      	ldr	r2, [pc, #200]	; (8029590 <MX_GPIO_Init+0x104>)
 80294c8:	f043 0301 	orr.w	r3, r3, #1
 80294cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294d0:	4b2f      	ldr	r3, [pc, #188]	; (8029590 <MX_GPIO_Init+0x104>)
 80294d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294d6:	f003 0301 	and.w	r3, r3, #1
 80294da:	60fb      	str	r3, [r7, #12]
 80294dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80294de:	4b2c      	ldr	r3, [pc, #176]	; (8029590 <MX_GPIO_Init+0x104>)
 80294e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294e4:	4a2a      	ldr	r2, [pc, #168]	; (8029590 <MX_GPIO_Init+0x104>)
 80294e6:	f043 0310 	orr.w	r3, r3, #16
 80294ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80294ee:	4b28      	ldr	r3, [pc, #160]	; (8029590 <MX_GPIO_Init+0x104>)
 80294f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80294f4:	f003 0310 	and.w	r3, r3, #16
 80294f8:	60bb      	str	r3, [r7, #8]
 80294fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80294fc:	4b24      	ldr	r3, [pc, #144]	; (8029590 <MX_GPIO_Init+0x104>)
 80294fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029502:	4a23      	ldr	r2, [pc, #140]	; (8029590 <MX_GPIO_Init+0x104>)
 8029504:	f043 0302 	orr.w	r3, r3, #2
 8029508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802950c:	4b20      	ldr	r3, [pc, #128]	; (8029590 <MX_GPIO_Init+0x104>)
 802950e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029512:	f003 0302 	and.w	r3, r3, #2
 8029516:	607b      	str	r3, [r7, #4]
 8029518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802951a:	4b1d      	ldr	r3, [pc, #116]	; (8029590 <MX_GPIO_Init+0x104>)
 802951c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029520:	4a1b      	ldr	r2, [pc, #108]	; (8029590 <MX_GPIO_Init+0x104>)
 8029522:	f043 0308 	orr.w	r3, r3, #8
 8029526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802952a:	4b19      	ldr	r3, [pc, #100]	; (8029590 <MX_GPIO_Init+0x104>)
 802952c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029530:	f003 0308 	and.w	r3, r3, #8
 8029534:	603b      	str	r3, [r7, #0]
 8029536:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 8029538:	2200      	movs	r2, #0
 802953a:	2101      	movs	r1, #1
 802953c:	4815      	ldr	r0, [pc, #84]	; (8029594 <MX_GPIO_Init+0x108>)
 802953e:	f005 f8a5 	bl	802e68c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8029542:	2200      	movs	r2, #0
 8029544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8029548:	4813      	ldr	r0, [pc, #76]	; (8029598 <MX_GPIO_Init+0x10c>)
 802954a:	f005 f89f 	bl	802e68c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 802954e:	2301      	movs	r3, #1
 8029550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8029552:	2301      	movs	r3, #1
 8029554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8029556:	2302      	movs	r3, #2
 8029558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802955a:	2303      	movs	r3, #3
 802955c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 802955e:	f107 0314 	add.w	r3, r7, #20
 8029562:	4619      	mov	r1, r3
 8029564:	480b      	ldr	r0, [pc, #44]	; (8029594 <MX_GPIO_Init+0x108>)
 8029566:	f004 fee1 	bl	802e32c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 802956a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802956e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8029570:	2301      	movs	r3, #1
 8029572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8029574:	2302      	movs	r3, #2
 8029576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8029578:	2303      	movs	r3, #3
 802957a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 802957c:	f107 0314 	add.w	r3, r7, #20
 8029580:	4619      	mov	r1, r3
 8029582:	4805      	ldr	r0, [pc, #20]	; (8029598 <MX_GPIO_Init+0x10c>)
 8029584:	f004 fed2 	bl	802e32c <HAL_GPIO_Init>

}
 8029588:	bf00      	nop
 802958a:	3728      	adds	r7, #40	; 0x28
 802958c:	46bd      	mov	sp, r7
 802958e:	bd80      	pop	{r7, pc}
 8029590:	58024400 	.word	0x58024400
 8029594:	58020800 	.word	0x58020800
 8029598:	58021000 	.word	0x58021000

0802959c <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 802959c:	b580      	push	{r7, lr}
 802959e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80295a0:	4b1b      	ldr	r3, [pc, #108]	; (8029610 <MX_I2C2_Init+0x74>)
 80295a2:	4a1c      	ldr	r2, [pc, #112]	; (8029614 <MX_I2C2_Init+0x78>)
 80295a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 80295a6:	4b1a      	ldr	r3, [pc, #104]	; (8029610 <MX_I2C2_Init+0x74>)
 80295a8:	4a1b      	ldr	r2, [pc, #108]	; (8029618 <MX_I2C2_Init+0x7c>)
 80295aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80295ac:	4b18      	ldr	r3, [pc, #96]	; (8029610 <MX_I2C2_Init+0x74>)
 80295ae:	2200      	movs	r2, #0
 80295b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80295b2:	4b17      	ldr	r3, [pc, #92]	; (8029610 <MX_I2C2_Init+0x74>)
 80295b4:	2201      	movs	r2, #1
 80295b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80295b8:	4b15      	ldr	r3, [pc, #84]	; (8029610 <MX_I2C2_Init+0x74>)
 80295ba:	2200      	movs	r2, #0
 80295bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80295be:	4b14      	ldr	r3, [pc, #80]	; (8029610 <MX_I2C2_Init+0x74>)
 80295c0:	2200      	movs	r2, #0
 80295c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80295c4:	4b12      	ldr	r3, [pc, #72]	; (8029610 <MX_I2C2_Init+0x74>)
 80295c6:	2200      	movs	r2, #0
 80295c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80295ca:	4b11      	ldr	r3, [pc, #68]	; (8029610 <MX_I2C2_Init+0x74>)
 80295cc:	2200      	movs	r2, #0
 80295ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80295d0:	4b0f      	ldr	r3, [pc, #60]	; (8029610 <MX_I2C2_Init+0x74>)
 80295d2:	2200      	movs	r2, #0
 80295d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80295d6:	480e      	ldr	r0, [pc, #56]	; (8029610 <MX_I2C2_Init+0x74>)
 80295d8:	f005 f872 	bl	802e6c0 <HAL_I2C_Init>
 80295dc:	4603      	mov	r3, r0
 80295de:	2b00      	cmp	r3, #0
 80295e0:	d001      	beq.n	80295e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80295e2:	f000 fa9b 	bl	8029b1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80295e6:	2100      	movs	r1, #0
 80295e8:	4809      	ldr	r0, [pc, #36]	; (8029610 <MX_I2C2_Init+0x74>)
 80295ea:	f005 ff7e 	bl	802f4ea <HAL_I2CEx_ConfigAnalogFilter>
 80295ee:	4603      	mov	r3, r0
 80295f0:	2b00      	cmp	r3, #0
 80295f2:	d001      	beq.n	80295f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80295f4:	f000 fa92 	bl	8029b1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80295f8:	2100      	movs	r1, #0
 80295fa:	4805      	ldr	r0, [pc, #20]	; (8029610 <MX_I2C2_Init+0x74>)
 80295fc:	f005 ffc0 	bl	802f580 <HAL_I2CEx_ConfigDigitalFilter>
 8029600:	4603      	mov	r3, r0
 8029602:	2b00      	cmp	r3, #0
 8029604:	d001      	beq.n	802960a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8029606:	f000 fa89 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 802960a:	bf00      	nop
 802960c:	bd80      	pop	{r7, pc}
 802960e:	bf00      	nop
 8029610:	24024558 	.word	0x24024558
 8029614:	40005800 	.word	0x40005800
 8029618:	00b03fdb 	.word	0x00b03fdb

0802961c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 802961c:	b580      	push	{r7, lr}
 802961e:	b0b8      	sub	sp, #224	; 0xe0
 8029620:	af00      	add	r7, sp, #0
 8029622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029628:	2200      	movs	r2, #0
 802962a:	601a      	str	r2, [r3, #0]
 802962c:	605a      	str	r2, [r3, #4]
 802962e:	609a      	str	r2, [r3, #8]
 8029630:	60da      	str	r2, [r3, #12]
 8029632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029634:	f107 0310 	add.w	r3, r7, #16
 8029638:	22bc      	movs	r2, #188	; 0xbc
 802963a:	2100      	movs	r1, #0
 802963c:	4618      	mov	r0, r3
 802963e:	f012 fc2f 	bl	803bea0 <memset>
  if(i2cHandle->Instance==I2C2)
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	681b      	ldr	r3, [r3, #0]
 8029646:	4a5a      	ldr	r2, [pc, #360]	; (80297b0 <HAL_I2C_MspInit+0x194>)
 8029648:	4293      	cmp	r3, r2
 802964a:	f040 80ad 	bne.w	80297a8 <HAL_I2C_MspInit+0x18c>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 802964e:	2308      	movs	r3, #8
 8029650:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8029652:	2300      	movs	r3, #0
 8029654:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029658:	f107 0310 	add.w	r3, r7, #16
 802965c:	4618      	mov	r0, r3
 802965e:	f008 fab5 	bl	8031bcc <HAL_RCCEx_PeriphCLKConfig>
 8029662:	4603      	mov	r3, r0
 8029664:	2b00      	cmp	r3, #0
 8029666:	d001      	beq.n	802966c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8029668:	f000 fa58 	bl	8029b1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802966c:	4b51      	ldr	r3, [pc, #324]	; (80297b4 <HAL_I2C_MspInit+0x198>)
 802966e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029672:	4a50      	ldr	r2, [pc, #320]	; (80297b4 <HAL_I2C_MspInit+0x198>)
 8029674:	f043 0302 	orr.w	r3, r3, #2
 8029678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802967c:	4b4d      	ldr	r3, [pc, #308]	; (80297b4 <HAL_I2C_MspInit+0x198>)
 802967e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029682:	f003 0302 	and.w	r3, r3, #2
 8029686:	60fb      	str	r3, [r7, #12]
 8029688:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802968a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802968e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8029692:	2312      	movs	r3, #18
 8029694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029698:	2300      	movs	r3, #0
 802969a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802969e:	2300      	movs	r3, #0
 80296a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80296a4:	2304      	movs	r3, #4
 80296a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80296aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80296ae:	4619      	mov	r1, r3
 80296b0:	4841      	ldr	r0, [pc, #260]	; (80297b8 <HAL_I2C_MspInit+0x19c>)
 80296b2:	f004 fe3b 	bl	802e32c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80296b6:	4b3f      	ldr	r3, [pc, #252]	; (80297b4 <HAL_I2C_MspInit+0x198>)
 80296b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80296bc:	4a3d      	ldr	r2, [pc, #244]	; (80297b4 <HAL_I2C_MspInit+0x198>)
 80296be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80296c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80296c6:	4b3b      	ldr	r3, [pc, #236]	; (80297b4 <HAL_I2C_MspInit+0x198>)
 80296c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80296cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80296d0:	60bb      	str	r3, [r7, #8]
 80296d2:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 80296d4:	4b39      	ldr	r3, [pc, #228]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 80296d6:	4a3a      	ldr	r2, [pc, #232]	; (80297c0 <HAL_I2C_MspInit+0x1a4>)
 80296d8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 80296da:	4b38      	ldr	r3, [pc, #224]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 80296dc:	2223      	movs	r2, #35	; 0x23
 80296de:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80296e0:	4b36      	ldr	r3, [pc, #216]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 80296e2:	2200      	movs	r2, #0
 80296e4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80296e6:	4b35      	ldr	r3, [pc, #212]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 80296e8:	2200      	movs	r2, #0
 80296ea:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80296ec:	4b33      	ldr	r3, [pc, #204]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 80296ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80296f2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80296f4:	4b31      	ldr	r3, [pc, #196]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 80296f6:	2200      	movs	r2, #0
 80296f8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80296fa:	4b30      	ldr	r3, [pc, #192]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 80296fc:	2200      	movs	r2, #0
 80296fe:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8029700:	4b2e      	ldr	r3, [pc, #184]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 8029702:	2200      	movs	r2, #0
 8029704:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8029706:	4b2d      	ldr	r3, [pc, #180]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 8029708:	2200      	movs	r2, #0
 802970a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802970c:	4b2b      	ldr	r3, [pc, #172]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 802970e:	2200      	movs	r2, #0
 8029710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8029712:	482a      	ldr	r0, [pc, #168]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 8029714:	f001 ffb4 	bl	802b680 <HAL_DMA_Init>
 8029718:	4603      	mov	r3, r0
 802971a:	2b00      	cmp	r3, #0
 802971c:	d001      	beq.n	8029722 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 802971e:	f000 f9fd 	bl	8029b1c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8029722:	687b      	ldr	r3, [r7, #4]
 8029724:	4a25      	ldr	r2, [pc, #148]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 8029726:	63da      	str	r2, [r3, #60]	; 0x3c
 8029728:	4a24      	ldr	r2, [pc, #144]	; (80297bc <HAL_I2C_MspInit+0x1a0>)
 802972a:	687b      	ldr	r3, [r7, #4]
 802972c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 802972e:	4b25      	ldr	r3, [pc, #148]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029730:	4a25      	ldr	r2, [pc, #148]	; (80297c8 <HAL_I2C_MspInit+0x1ac>)
 8029732:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8029734:	4b23      	ldr	r3, [pc, #140]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029736:	2224      	movs	r2, #36	; 0x24
 8029738:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802973a:	4b22      	ldr	r3, [pc, #136]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 802973c:	2240      	movs	r2, #64	; 0x40
 802973e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029740:	4b20      	ldr	r3, [pc, #128]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029742:	2200      	movs	r2, #0
 8029744:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029746:	4b1f      	ldr	r3, [pc, #124]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802974c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802974e:	4b1d      	ldr	r3, [pc, #116]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029750:	2200      	movs	r2, #0
 8029752:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029754:	4b1b      	ldr	r3, [pc, #108]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029756:	2200      	movs	r2, #0
 8029758:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 802975a:	4b1a      	ldr	r3, [pc, #104]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 802975c:	2200      	movs	r2, #0
 802975e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8029760:	4b18      	ldr	r3, [pc, #96]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029762:	2200      	movs	r2, #0
 8029764:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029766:	4b17      	ldr	r3, [pc, #92]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029768:	2200      	movs	r2, #0
 802976a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 802976c:	4815      	ldr	r0, [pc, #84]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 802976e:	f001 ff87 	bl	802b680 <HAL_DMA_Init>
 8029772:	4603      	mov	r3, r0
 8029774:	2b00      	cmp	r3, #0
 8029776:	d001      	beq.n	802977c <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8029778:	f000 f9d0 	bl	8029b1c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 802977c:	687b      	ldr	r3, [r7, #4]
 802977e:	4a11      	ldr	r2, [pc, #68]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029780:	639a      	str	r2, [r3, #56]	; 0x38
 8029782:	4a10      	ldr	r2, [pc, #64]	; (80297c4 <HAL_I2C_MspInit+0x1a8>)
 8029784:	687b      	ldr	r3, [r7, #4]
 8029786:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8029788:	2200      	movs	r2, #0
 802978a:	2100      	movs	r1, #0
 802978c:	2021      	movs	r0, #33	; 0x21
 802978e:	f001 fd7a 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8029792:	2021      	movs	r0, #33	; 0x21
 8029794:	f001 fd91 	bl	802b2ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8029798:	2200      	movs	r2, #0
 802979a:	2100      	movs	r1, #0
 802979c:	2022      	movs	r0, #34	; 0x22
 802979e:	f001 fd72 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80297a2:	2022      	movs	r0, #34	; 0x22
 80297a4:	f001 fd89 	bl	802b2ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80297a8:	bf00      	nop
 80297aa:	37e0      	adds	r7, #224	; 0xe0
 80297ac:	46bd      	mov	sp, r7
 80297ae:	bd80      	pop	{r7, pc}
 80297b0:	40005800 	.word	0x40005800
 80297b4:	58024400 	.word	0x58024400
 80297b8:	58020400 	.word	0x58020400
 80297bc:	240245a4 	.word	0x240245a4
 80297c0:	40020010 	.word	0x40020010
 80297c4:	2402461c 	.word	0x2402461c
 80297c8:	40020028 	.word	0x40020028

080297cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80297cc:	b5b0      	push	{r4, r5, r7, lr}
 80297ce:	b090      	sub	sp, #64	; 0x40
 80297d0:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	SCB->VTOR = (FLASH_BASE | 0x20000);
 80297d2:	4b33      	ldr	r3, [pc, #204]	; (80298a0 <main+0xd4>)
 80297d4:	4a33      	ldr	r2, [pc, #204]	; (80298a4 <main+0xd8>)
 80297d6:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80297d8:	f001 f9d0 	bl	802ab7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80297dc:	f000 f874 	bl	80298c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80297e0:	f7ff fe54 	bl	802948c <MX_GPIO_Init>
  MX_DMA_Init();
 80297e4:	f7ff fe1a 	bl	802941c <MX_DMA_Init>
  MX_I2C2_Init();
 80297e8:	f7ff fed8 	bl	802959c <MX_I2C2_Init>
  MX_SPI1_Init();
 80297ec:	f000 f99c 	bl	8029b28 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80297f0:	f011 fd78 	bl	803b2e4 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80297f4:	f000 ff4a 	bl	802a68c <MX_USART2_UART_Init>
  MX_UART4_Init();
 80297f8:	f000 fe52 	bl	802a4a0 <MX_UART4_Init>
  MX_UART7_Init();
 80297fc:	f000 fea2 	bl	802a544 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8029800:	f000 ff90 	bl	802a724 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8029804:	f000 fd4c 	bl	802a2a0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8029808:	f000 fcfc 	bl	802a204 <MX_TIM2_Init>
  MX_TIM4_Init();
 802980c:	f000 fd96 	bl	802a33c <MX_TIM4_Init>
  MX_COMP2_Init();
 8029810:	f7ff fd36 	bl	8029280 <MX_COMP2_Init>
  MX_DAC1_Init();
 8029814:	f7ff fdae 	bl	8029374 <MX_DAC1_Init>
  MX_UART8_Init();
 8029818:	f000 fee2 	bl	802a5e0 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 802981c:	2100      	movs	r1, #0
 802981e:	4822      	ldr	r0, [pc, #136]	; (80298a8 <main+0xdc>)
 8029820:	f001 fd87 	bl	802b332 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * (1 / 3.3));
 8029824:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8029828:	2200      	movs	r2, #0
 802982a:	2100      	movs	r1, #0
 802982c:	481e      	ldr	r0, [pc, #120]	; (80298a8 <main+0xdc>)
 802982e:	f001 fdd2 	bl	802b3d6 <HAL_DAC_SetValue>
	HAL_TIM_Base_Start_IT(&htim3);
 8029832:	481e      	ldr	r0, [pc, #120]	; (80298ac <main+0xe0>)
 8029834:	f00a feb6 	bl	80345a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8029838:	481d      	ldr	r0, [pc, #116]	; (80298b0 <main+0xe4>)
 802983a:	f00a feb3 	bl	80345a4 <HAL_TIM_Base_Start_IT>
	HAL_COMP_Start(&hcomp2);
 802983e:	481d      	ldr	r0, [pc, #116]	; (80298b4 <main+0xe8>)
 8029840:	f001 fb88 	bl	802af54 <HAL_COMP_Start>

	struct MotherboardConfig config;

	config.HeadServiceUart = &huart3;
 8029844:	4b1c      	ldr	r3, [pc, #112]	; (80298b8 <main+0xec>)
 8029846:	607b      	str	r3, [r7, #4]
	config.HeadStreamUart = &huart4;
 8029848:	4b1c      	ldr	r3, [pc, #112]	; (80298bc <main+0xf0>)
 802984a:	60bb      	str	r3, [r7, #8]

	config.HeadTimeout = 10;
 802984c:	230a      	movs	r3, #10
 802984e:	60fb      	str	r3, [r7, #12]

	config.BodyUart = &huart8;
 8029850:	4b1b      	ldr	r3, [pc, #108]	; (80298c0 <main+0xf4>)
 8029852:	613b      	str	r3, [r7, #16]
	config.BodyTimeout = 10;
 8029854:	230a      	movs	r3, #10
 8029856:	617b      	str	r3, [r7, #20]
	config.BodyPeriod = 20;
 8029858:	2314      	movs	r3, #20
 802985a:	763b      	strb	r3, [r7, #24]

	config.IMUSpi = &hspi1;
 802985c:	4b19      	ldr	r3, [pc, #100]	; (80298c4 <main+0xf8>)
 802985e:	61fb      	str	r3, [r7, #28]

	config.VersionMajor = 0;
 8029860:	2300      	movs	r3, #0
 8029862:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	config.VersionMinor = 2;
 8029866:	2302      	movs	r3, #2
 8029868:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	config.StrobeOffset = 0;
 802986c:	2300      	movs	r3, #0
 802986e:	623b      	str	r3, [r7, #32]

	if (MotherboardInit(config))
 8029870:	466d      	mov	r5, sp
 8029872:	f107 0414 	add.w	r4, r7, #20
 8029876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8029878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802987a:	6823      	ldr	r3, [r4, #0]
 802987c:	602b      	str	r3, [r5, #0]
 802987e:	1d3b      	adds	r3, r7, #4
 8029880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8029882:	f7f9 fcad 	bl	80231e0 <MotherboardInit>
 8029886:	4603      	mov	r3, r0
 8029888:	2b00      	cmp	r3, #0
 802988a:	d001      	beq.n	8029890 <main+0xc4>
		return 1;
 802988c:	2301      	movs	r3, #1
 802988e:	e002      	b.n	8029896 <main+0xca>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MotherboardTick();
 8029890:	f7f9 fcfe 	bl	8023290 <MotherboardTick>
 8029894:	e7fc      	b.n	8029890 <main+0xc4>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8029896:	4618      	mov	r0, r3
 8029898:	3728      	adds	r7, #40	; 0x28
 802989a:	46bd      	mov	sp, r7
 802989c:	bdb0      	pop	{r4, r5, r7, pc}
 802989e:	bf00      	nop
 80298a0:	e000ed00 	.word	0xe000ed00
 80298a4:	08020000 	.word	0x08020000
 80298a8:	24024544 	.word	0x24024544
 80298ac:	2402485c 	.word	0x2402485c
 80298b0:	24024810 	.word	0x24024810
 80298b4:	24024518 	.word	0x24024518
 80298b8:	24024b34 	.word	0x24024b34
 80298bc:	240248f4 	.word	0x240248f4
 80298c0:	24024a14 	.word	0x24024a14
 80298c4:	24024694 	.word	0x24024694

080298c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80298c8:	b580      	push	{r7, lr}
 80298ca:	b09e      	sub	sp, #120	; 0x78
 80298cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80298ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80298d2:	224c      	movs	r2, #76	; 0x4c
 80298d4:	2100      	movs	r1, #0
 80298d6:	4618      	mov	r0, r3
 80298d8:	f012 fae2 	bl	803bea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80298dc:	f107 030c 	add.w	r3, r7, #12
 80298e0:	2220      	movs	r2, #32
 80298e2:	2100      	movs	r1, #0
 80298e4:	4618      	mov	r0, r3
 80298e6:	f012 fadb 	bl	803bea0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80298ea:	2002      	movs	r0, #2
 80298ec:	f007 f96a 	bl	8030bc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80298f0:	2300      	movs	r3, #0
 80298f2:	60bb      	str	r3, [r7, #8]
 80298f4:	4b4d      	ldr	r3, [pc, #308]	; (8029a2c <SystemClock_Config+0x164>)
 80298f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80298f8:	4a4c      	ldr	r2, [pc, #304]	; (8029a2c <SystemClock_Config+0x164>)
 80298fa:	f023 0301 	bic.w	r3, r3, #1
 80298fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029900:	4b4a      	ldr	r3, [pc, #296]	; (8029a2c <SystemClock_Config+0x164>)
 8029902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029904:	f003 0301 	and.w	r3, r3, #1
 8029908:	60bb      	str	r3, [r7, #8]
 802990a:	4b49      	ldr	r3, [pc, #292]	; (8029a30 <SystemClock_Config+0x168>)
 802990c:	699b      	ldr	r3, [r3, #24]
 802990e:	4a48      	ldr	r2, [pc, #288]	; (8029a30 <SystemClock_Config+0x168>)
 8029910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8029914:	6193      	str	r3, [r2, #24]
 8029916:	4b46      	ldr	r3, [pc, #280]	; (8029a30 <SystemClock_Config+0x168>)
 8029918:	699b      	ldr	r3, [r3, #24]
 802991a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802991e:	60bb      	str	r3, [r7, #8]
 8029920:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8029922:	bf00      	nop
 8029924:	4b42      	ldr	r3, [pc, #264]	; (8029a30 <SystemClock_Config+0x168>)
 8029926:	699b      	ldr	r3, [r3, #24]
 8029928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802992c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029930:	d1f8      	bne.n	8029924 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029932:	4b40      	ldr	r3, [pc, #256]	; (8029a34 <SystemClock_Config+0x16c>)
 8029934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029938:	4a3e      	ldr	r2, [pc, #248]	; (8029a34 <SystemClock_Config+0x16c>)
 802993a:	f043 0302 	orr.w	r3, r3, #2
 802993e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029942:	4b3c      	ldr	r3, [pc, #240]	; (8029a34 <SystemClock_Config+0x16c>)
 8029944:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029948:	f003 0302 	and.w	r3, r3, #2
 802994c:	607b      	str	r3, [r7, #4]
 802994e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8029950:	2300      	movs	r3, #0
 8029952:	603b      	str	r3, [r7, #0]
 8029954:	4b36      	ldr	r3, [pc, #216]	; (8029a30 <SystemClock_Config+0x168>)
 8029956:	699b      	ldr	r3, [r3, #24]
 8029958:	4a35      	ldr	r2, [pc, #212]	; (8029a30 <SystemClock_Config+0x168>)
 802995a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802995e:	6193      	str	r3, [r2, #24]
 8029960:	4b33      	ldr	r3, [pc, #204]	; (8029a30 <SystemClock_Config+0x168>)
 8029962:	699b      	ldr	r3, [r3, #24]
 8029964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8029968:	603b      	str	r3, [r7, #0]
 802996a:	4b30      	ldr	r3, [pc, #192]	; (8029a2c <SystemClock_Config+0x164>)
 802996c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802996e:	4a2f      	ldr	r2, [pc, #188]	; (8029a2c <SystemClock_Config+0x164>)
 8029970:	f043 0301 	orr.w	r3, r3, #1
 8029974:	62d3      	str	r3, [r2, #44]	; 0x2c
 8029976:	4b2d      	ldr	r3, [pc, #180]	; (8029a2c <SystemClock_Config+0x164>)
 8029978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802997a:	f003 0301 	and.w	r3, r3, #1
 802997e:	603b      	str	r3, [r7, #0]
 8029980:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8029982:	bf00      	nop
 8029984:	4b2a      	ldr	r3, [pc, #168]	; (8029a30 <SystemClock_Config+0x168>)
 8029986:	699b      	ldr	r3, [r3, #24]
 8029988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802998c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029990:	d1f8      	bne.n	8029984 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8029992:	4b28      	ldr	r3, [pc, #160]	; (8029a34 <SystemClock_Config+0x16c>)
 8029994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029996:	4a27      	ldr	r2, [pc, #156]	; (8029a34 <SystemClock_Config+0x16c>)
 8029998:	f023 0303 	bic.w	r3, r3, #3
 802999c:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 802999e:	2322      	movs	r3, #34	; 0x22
 80299a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80299a2:	2301      	movs	r3, #1
 80299a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80299a6:	2340      	movs	r3, #64	; 0x40
 80299a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80299aa:	2301      	movs	r3, #1
 80299ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80299ae:	2302      	movs	r3, #2
 80299b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80299b2:	2300      	movs	r3, #0
 80299b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80299b6:	2304      	movs	r3, #4
 80299b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80299ba:	233c      	movs	r3, #60	; 0x3c
 80299bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80299be:	2302      	movs	r3, #2
 80299c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80299c2:	2305      	movs	r3, #5
 80299c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80299c6:	2302      	movs	r3, #2
 80299c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80299ca:	230c      	movs	r3, #12
 80299cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80299ce:	2300      	movs	r3, #0
 80299d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80299d2:	2300      	movs	r3, #0
 80299d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80299d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80299da:	4618      	mov	r0, r3
 80299dc:	f007 f93c 	bl	8030c58 <HAL_RCC_OscConfig>
 80299e0:	4603      	mov	r3, r0
 80299e2:	2b00      	cmp	r3, #0
 80299e4:	d001      	beq.n	80299ea <SystemClock_Config+0x122>
  {
    Error_Handler();
 80299e6:	f000 f899 	bl	8029b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80299ea:	233f      	movs	r3, #63	; 0x3f
 80299ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80299ee:	2303      	movs	r3, #3
 80299f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80299f2:	2300      	movs	r3, #0
 80299f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80299f6:	2308      	movs	r3, #8
 80299f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80299fa:	2340      	movs	r3, #64	; 0x40
 80299fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80299fe:	2340      	movs	r3, #64	; 0x40
 8029a00:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8029a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029a06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8029a08:	2340      	movs	r3, #64	; 0x40
 8029a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8029a0c:	f107 030c 	add.w	r3, r7, #12
 8029a10:	2104      	movs	r1, #4
 8029a12:	4618      	mov	r0, r3
 8029a14:	f007 fd4e 	bl	80314b4 <HAL_RCC_ClockConfig>
 8029a18:	4603      	mov	r3, r0
 8029a1a:	2b00      	cmp	r3, #0
 8029a1c:	d001      	beq.n	8029a22 <SystemClock_Config+0x15a>
  {
    Error_Handler();
 8029a1e:	f000 f87d 	bl	8029b1c <Error_Handler>
  }
}
 8029a22:	bf00      	nop
 8029a24:	3778      	adds	r7, #120	; 0x78
 8029a26:	46bd      	mov	sp, r7
 8029a28:	bd80      	pop	{r7, pc}
 8029a2a:	bf00      	nop
 8029a2c:	58000400 	.word	0x58000400
 8029a30:	58024800 	.word	0x58024800
 8029a34:	58024400 	.word	0x58024400

08029a38 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8029a38:	b580      	push	{r7, lr}
 8029a3a:	b082      	sub	sp, #8
 8029a3c:	af00      	add	r7, sp, #0
 8029a3e:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 8029a40:	687b      	ldr	r3, [r7, #4]
 8029a42:	681b      	ldr	r3, [r3, #0]
 8029a44:	4a04      	ldr	r2, [pc, #16]	; (8029a58 <HAL_COMP_TriggerCallback+0x20>)
 8029a46:	4293      	cmp	r3, r2
 8029a48:	d101      	bne.n	8029a4e <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 8029a4a:	f7f9 fcf7 	bl	802343c <MotherboardOnStrobe>
	}
}
 8029a4e:	bf00      	nop
 8029a50:	3708      	adds	r7, #8
 8029a52:	46bd      	mov	sp, r7
 8029a54:	bd80      	pop	{r7, pc}
 8029a56:	bf00      	nop
 8029a58:	58003810 	.word	0x58003810

08029a5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8029a5c:	b580      	push	{r7, lr}
 8029a5e:	b082      	sub	sp, #8
 8029a60:	af00      	add	r7, sp, #0
 8029a62:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8029a64:	687b      	ldr	r3, [r7, #4]
 8029a66:	681b      	ldr	r3, [r3, #0]
 8029a68:	4a0b      	ldr	r2, [pc, #44]	; (8029a98 <HAL_UART_RxCpltCallback+0x3c>)
 8029a6a:	4293      	cmp	r3, r2
 8029a6c:	d101      	bne.n	8029a72 <HAL_UART_RxCpltCallback+0x16>
		MotherboardOnHeadServiceRecieveComplete();
 8029a6e:	f7f9 fd05 	bl	802347c <MotherboardOnHeadServiceRecieveComplete>
	}
	if (huart->Instance == UART4) {
 8029a72:	687b      	ldr	r3, [r7, #4]
 8029a74:	681b      	ldr	r3, [r3, #0]
 8029a76:	4a09      	ldr	r2, [pc, #36]	; (8029a9c <HAL_UART_RxCpltCallback+0x40>)
 8029a78:	4293      	cmp	r3, r2
 8029a7a:	d101      	bne.n	8029a80 <HAL_UART_RxCpltCallback+0x24>
		MotherboardOnHeadStreamRecieveComplete();
 8029a7c:	f7f9 fd08 	bl	8023490 <MotherboardOnHeadStreamRecieveComplete>
	}
	if (huart->Instance == UART8) {
 8029a80:	687b      	ldr	r3, [r7, #4]
 8029a82:	681b      	ldr	r3, [r3, #0]
 8029a84:	4a06      	ldr	r2, [pc, #24]	; (8029aa0 <HAL_UART_RxCpltCallback+0x44>)
 8029a86:	4293      	cmp	r3, r2
 8029a88:	d101      	bne.n	8029a8e <HAL_UART_RxCpltCallback+0x32>
		MotherboardOnBodyRecieveComplete();
 8029a8a:	f7f9 fced 	bl	8023468 <MotherboardOnBodyRecieveComplete>
	}
}
 8029a8e:	bf00      	nop
 8029a90:	3708      	adds	r7, #8
 8029a92:	46bd      	mov	sp, r7
 8029a94:	bd80      	pop	{r7, pc}
 8029a96:	bf00      	nop
 8029a98:	40004800 	.word	0x40004800
 8029a9c:	40004c00 	.word	0x40004c00
 8029aa0:	40007c00 	.word	0x40007c00

08029aa4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8029aa4:	b580      	push	{r7, lr}
 8029aa6:	b082      	sub	sp, #8
 8029aa8:	af00      	add	r7, sp, #0
 8029aaa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8029aac:	687b      	ldr	r3, [r7, #4]
 8029aae:	681b      	ldr	r3, [r3, #0]
 8029ab0:	4a0b      	ldr	r2, [pc, #44]	; (8029ae0 <HAL_UART_TxCpltCallback+0x3c>)
 8029ab2:	4293      	cmp	r3, r2
 8029ab4:	d101      	bne.n	8029aba <HAL_UART_TxCpltCallback+0x16>
		MotherboardOnHeadServiceTransmitComplete();
 8029ab6:	f7f9 fcf5 	bl	80234a4 <MotherboardOnHeadServiceTransmitComplete>
	}
	if (huart->Instance == UART4) {
 8029aba:	687b      	ldr	r3, [r7, #4]
 8029abc:	681b      	ldr	r3, [r3, #0]
 8029abe:	4a09      	ldr	r2, [pc, #36]	; (8029ae4 <HAL_UART_TxCpltCallback+0x40>)
 8029ac0:	4293      	cmp	r3, r2
 8029ac2:	d101      	bne.n	8029ac8 <HAL_UART_TxCpltCallback+0x24>
		MotherboardOnHeadStreamTransmitComplete();
 8029ac4:	f7f9 fcf8 	bl	80234b8 <MotherboardOnHeadStreamTransmitComplete>
	}
	if (huart->Instance == UART8) {
 8029ac8:	687b      	ldr	r3, [r7, #4]
 8029aca:	681b      	ldr	r3, [r3, #0]
 8029acc:	4a06      	ldr	r2, [pc, #24]	; (8029ae8 <HAL_UART_TxCpltCallback+0x44>)
 8029ace:	4293      	cmp	r3, r2
 8029ad0:	d101      	bne.n	8029ad6 <HAL_UART_TxCpltCallback+0x32>
		MotherboardOnBodyTransmitComplete();
 8029ad2:	f7f9 fcfb 	bl	80234cc <MotherboardOnBodyTransmitComplete>
	}
}
 8029ad6:	bf00      	nop
 8029ad8:	3708      	adds	r7, #8
 8029ada:	46bd      	mov	sp, r7
 8029adc:	bd80      	pop	{r7, pc}
 8029ade:	bf00      	nop
 8029ae0:	40004800 	.word	0x40004800
 8029ae4:	40004c00 	.word	0x40004c00
 8029ae8:	40007c00 	.word	0x40007c00

08029aec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8029aec:	b580      	push	{r7, lr}
 8029aee:	b082      	sub	sp, #8
 8029af0:	af00      	add	r7, sp, #0
 8029af2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8029af4:	687b      	ldr	r3, [r7, #4]
 8029af6:	681b      	ldr	r3, [r3, #0]
 8029af8:	4a07      	ldr	r2, [pc, #28]	; (8029b18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8029afa:	4293      	cmp	r3, r2
 8029afc:	d101      	bne.n	8029b02 <HAL_TIM_PeriodElapsedCallback+0x16>
		MotherboardOnBodyTimerTick();
 8029afe:	f7f9 fcef 	bl	80234e0 <MotherboardOnBodyTimerTick>

	if (htim->Instance == TIM2)
 8029b02:	687b      	ldr	r3, [r7, #4]
 8029b04:	681b      	ldr	r3, [r3, #0]
 8029b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029b0a:	d101      	bne.n	8029b10 <HAL_TIM_PeriodElapsedCallback+0x24>
		MotherboardOnImuTimerTick();
 8029b0c:	f7f9 fcf2 	bl	80234f4 <MotherboardOnImuTimerTick>
}
 8029b10:	bf00      	nop
 8029b12:	3708      	adds	r7, #8
 8029b14:	46bd      	mov	sp, r7
 8029b16:	bd80      	pop	{r7, pc}
 8029b18:	40000400 	.word	0x40000400

08029b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8029b1c:	b480      	push	{r7}
 8029b1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8029b20:	b672      	cpsid	i
}
 8029b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8029b24:	e7fe      	b.n	8029b24 <Error_Handler+0x8>
	...

08029b28 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8029b28:	b580      	push	{r7, lr}
 8029b2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8029b2c:	4b28      	ldr	r3, [pc, #160]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b2e:	4a29      	ldr	r2, [pc, #164]	; (8029bd4 <MX_SPI1_Init+0xac>)
 8029b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8029b32:	4b27      	ldr	r3, [pc, #156]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b34:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8029b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8029b3a:	4b25      	ldr	r3, [pc, #148]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b3c:	2200      	movs	r2, #0
 8029b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8029b40:	4b23      	ldr	r3, [pc, #140]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b42:	2207      	movs	r2, #7
 8029b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8029b46:	4b22      	ldr	r3, [pc, #136]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8029b4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8029b4e:	4b20      	ldr	r3, [pc, #128]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8029b54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8029b56:	4b1e      	ldr	r3, [pc, #120]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8029b5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8029b5e:	4b1c      	ldr	r3, [pc, #112]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029b64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8029b66:	4b1a      	ldr	r3, [pc, #104]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b68:	2200      	movs	r2, #0
 8029b6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8029b6c:	4b18      	ldr	r3, [pc, #96]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b6e:	2200      	movs	r2, #0
 8029b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8029b72:	4b17      	ldr	r3, [pc, #92]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b74:	2200      	movs	r2, #0
 8029b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8029b78:	4b15      	ldr	r3, [pc, #84]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b7a:	2200      	movs	r2, #0
 8029b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8029b7e:	4b14      	ldr	r3, [pc, #80]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8029b84:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8029b86:	4b12      	ldr	r3, [pc, #72]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b88:	2200      	movs	r2, #0
 8029b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8029b8c:	4b10      	ldr	r3, [pc, #64]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b8e:	2200      	movs	r2, #0
 8029b90:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029b92:	4b0f      	ldr	r3, [pc, #60]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b94:	2200      	movs	r2, #0
 8029b96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8029b98:	4b0d      	ldr	r3, [pc, #52]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029b9a:	2200      	movs	r2, #0
 8029b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8029b9e:	4b0c      	ldr	r3, [pc, #48]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029ba0:	2200      	movs	r2, #0
 8029ba2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8029ba4:	4b0a      	ldr	r3, [pc, #40]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029ba6:	2200      	movs	r2, #0
 8029ba8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8029baa:	4b09      	ldr	r3, [pc, #36]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029bac:	2200      	movs	r2, #0
 8029bae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8029bb0:	4b07      	ldr	r3, [pc, #28]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029bb2:	2200      	movs	r2, #0
 8029bb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8029bb6:	4b06      	ldr	r3, [pc, #24]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029bb8:	2200      	movs	r2, #0
 8029bba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8029bbc:	4804      	ldr	r0, [pc, #16]	; (8029bd0 <MX_SPI1_Init+0xa8>)
 8029bbe:	f009 fb6d 	bl	803329c <HAL_SPI_Init>
 8029bc2:	4603      	mov	r3, r0
 8029bc4:	2b00      	cmp	r3, #0
 8029bc6:	d001      	beq.n	8029bcc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8029bc8:	f7ff ffa8 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8029bcc:	bf00      	nop
 8029bce:	bd80      	pop	{r7, pc}
 8029bd0:	24024694 	.word	0x24024694
 8029bd4:	40013000 	.word	0x40013000

08029bd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8029bd8:	b580      	push	{r7, lr}
 8029bda:	b0b8      	sub	sp, #224	; 0xe0
 8029bdc:	af00      	add	r7, sp, #0
 8029bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8029be0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029be4:	2200      	movs	r2, #0
 8029be6:	601a      	str	r2, [r3, #0]
 8029be8:	605a      	str	r2, [r3, #4]
 8029bea:	609a      	str	r2, [r3, #8]
 8029bec:	60da      	str	r2, [r3, #12]
 8029bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8029bf0:	f107 0310 	add.w	r3, r7, #16
 8029bf4:	22bc      	movs	r2, #188	; 0xbc
 8029bf6:	2100      	movs	r1, #0
 8029bf8:	4618      	mov	r0, r3
 8029bfa:	f012 f951 	bl	803bea0 <memset>
  if(spiHandle->Instance==SPI1)
 8029bfe:	687b      	ldr	r3, [r7, #4]
 8029c00:	681b      	ldr	r3, [r3, #0]
 8029c02:	4a60      	ldr	r2, [pc, #384]	; (8029d84 <HAL_SPI_MspInit+0x1ac>)
 8029c04:	4293      	cmp	r3, r2
 8029c06:	f040 80b8 	bne.w	8029d7a <HAL_SPI_MspInit+0x1a2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8029c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8029c0e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8029c10:	2320      	movs	r3, #32
 8029c12:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8029c14:	2381      	movs	r3, #129	; 0x81
 8029c16:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8029c18:	2302      	movs	r3, #2
 8029c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8029c1c:	2302      	movs	r3, #2
 8029c1e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8029c20:	2302      	movs	r3, #2
 8029c22:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8029c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029c28:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8029c2a:	2300      	movs	r3, #0
 8029c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8029c2e:	2300      	movs	r3, #0
 8029c30:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8029c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8029c36:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8029c38:	f107 0310 	add.w	r3, r7, #16
 8029c3c:	4618      	mov	r0, r3
 8029c3e:	f007 ffc5 	bl	8031bcc <HAL_RCCEx_PeriphCLKConfig>
 8029c42:	4603      	mov	r3, r0
 8029c44:	2b00      	cmp	r3, #0
 8029c46:	d001      	beq.n	8029c4c <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8029c48:	f7ff ff68 	bl	8029b1c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8029c4c:	4b4e      	ldr	r3, [pc, #312]	; (8029d88 <HAL_SPI_MspInit+0x1b0>)
 8029c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029c52:	4a4d      	ldr	r2, [pc, #308]	; (8029d88 <HAL_SPI_MspInit+0x1b0>)
 8029c54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8029c58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8029c5c:	4b4a      	ldr	r3, [pc, #296]	; (8029d88 <HAL_SPI_MspInit+0x1b0>)
 8029c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8029c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8029c66:	60fb      	str	r3, [r7, #12]
 8029c68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8029c6a:	4b47      	ldr	r3, [pc, #284]	; (8029d88 <HAL_SPI_MspInit+0x1b0>)
 8029c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029c70:	4a45      	ldr	r2, [pc, #276]	; (8029d88 <HAL_SPI_MspInit+0x1b0>)
 8029c72:	f043 0301 	orr.w	r3, r3, #1
 8029c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8029c7a:	4b43      	ldr	r3, [pc, #268]	; (8029d88 <HAL_SPI_MspInit+0x1b0>)
 8029c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8029c80:	f003 0301 	and.w	r3, r3, #1
 8029c84:	60bb      	str	r3, [r7, #8]
 8029c86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8029c88:	23e0      	movs	r3, #224	; 0xe0
 8029c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8029c8e:	2302      	movs	r3, #2
 8029c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8029c94:	2300      	movs	r3, #0
 8029c96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8029c9a:	2300      	movs	r3, #0
 8029c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8029ca0:	2305      	movs	r3, #5
 8029ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8029ca6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8029caa:	4619      	mov	r1, r3
 8029cac:	4837      	ldr	r0, [pc, #220]	; (8029d8c <HAL_SPI_MspInit+0x1b4>)
 8029cae:	f004 fb3d 	bl	802e32c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 8029cb2:	4b37      	ldr	r3, [pc, #220]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029cb4:	4a37      	ldr	r2, [pc, #220]	; (8029d94 <HAL_SPI_MspInit+0x1bc>)
 8029cb6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8029cb8:	4b35      	ldr	r3, [pc, #212]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029cba:	2226      	movs	r2, #38	; 0x26
 8029cbc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8029cbe:	4b34      	ldr	r3, [pc, #208]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029cc0:	2240      	movs	r2, #64	; 0x40
 8029cc2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029cc4:	4b32      	ldr	r3, [pc, #200]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029cc6:	2200      	movs	r2, #0
 8029cc8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8029cca:	4b31      	ldr	r3, [pc, #196]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029cd0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029cd2:	4b2f      	ldr	r3, [pc, #188]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029cd4:	2200      	movs	r2, #0
 8029cd6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029cd8:	4b2d      	ldr	r3, [pc, #180]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029cda:	2200      	movs	r2, #0
 8029cdc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8029cde:	4b2c      	ldr	r3, [pc, #176]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029ce0:	2200      	movs	r2, #0
 8029ce2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029ce4:	4b2a      	ldr	r3, [pc, #168]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029ce6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029cea:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029cec:	4b28      	ldr	r3, [pc, #160]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029cee:	2200      	movs	r2, #0
 8029cf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8029cf2:	4827      	ldr	r0, [pc, #156]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029cf4:	f001 fcc4 	bl	802b680 <HAL_DMA_Init>
 8029cf8:	4603      	mov	r3, r0
 8029cfa:	2b00      	cmp	r3, #0
 8029cfc:	d001      	beq.n	8029d02 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8029cfe:	f7ff ff0d 	bl	8029b1c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8029d02:	687b      	ldr	r3, [r7, #4]
 8029d04:	4a22      	ldr	r2, [pc, #136]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029d06:	679a      	str	r2, [r3, #120]	; 0x78
 8029d08:	4a21      	ldr	r2, [pc, #132]	; (8029d90 <HAL_SPI_MspInit+0x1b8>)
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 8029d0e:	4b22      	ldr	r3, [pc, #136]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d10:	4a22      	ldr	r2, [pc, #136]	; (8029d9c <HAL_SPI_MspInit+0x1c4>)
 8029d12:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8029d14:	4b20      	ldr	r3, [pc, #128]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d16:	2225      	movs	r2, #37	; 0x25
 8029d18:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8029d1a:	4b1f      	ldr	r3, [pc, #124]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d1c:	2200      	movs	r2, #0
 8029d1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8029d20:	4b1d      	ldr	r3, [pc, #116]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d22:	2200      	movs	r2, #0
 8029d24:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8029d26:	4b1c      	ldr	r3, [pc, #112]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8029d2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8029d2e:	4b1a      	ldr	r3, [pc, #104]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d30:	2200      	movs	r2, #0
 8029d32:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8029d34:	4b18      	ldr	r3, [pc, #96]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d36:	2200      	movs	r2, #0
 8029d38:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8029d3a:	4b17      	ldr	r3, [pc, #92]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d3c:	2200      	movs	r2, #0
 8029d3e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8029d40:	4b15      	ldr	r3, [pc, #84]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8029d46:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8029d48:	4b13      	ldr	r3, [pc, #76]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d4a:	2200      	movs	r2, #0
 8029d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8029d4e:	4812      	ldr	r0, [pc, #72]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d50:	f001 fc96 	bl	802b680 <HAL_DMA_Init>
 8029d54:	4603      	mov	r3, r0
 8029d56:	2b00      	cmp	r3, #0
 8029d58:	d001      	beq.n	8029d5e <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8029d5a:	f7ff fedf 	bl	8029b1c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8029d5e:	687b      	ldr	r3, [r7, #4]
 8029d60:	4a0d      	ldr	r2, [pc, #52]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d62:	67da      	str	r2, [r3, #124]	; 0x7c
 8029d64:	4a0c      	ldr	r2, [pc, #48]	; (8029d98 <HAL_SPI_MspInit+0x1c0>)
 8029d66:	687b      	ldr	r3, [r7, #4]
 8029d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8029d6a:	2200      	movs	r2, #0
 8029d6c:	2102      	movs	r1, #2
 8029d6e:	2023      	movs	r0, #35	; 0x23
 8029d70:	f001 fa89 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8029d74:	2023      	movs	r0, #35	; 0x23
 8029d76:	f001 faa0 	bl	802b2ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8029d7a:	bf00      	nop
 8029d7c:	37e0      	adds	r7, #224	; 0xe0
 8029d7e:	46bd      	mov	sp, r7
 8029d80:	bd80      	pop	{r7, pc}
 8029d82:	bf00      	nop
 8029d84:	40013000 	.word	0x40013000
 8029d88:	58024400 	.word	0x58024400
 8029d8c:	58020000 	.word	0x58020000
 8029d90:	2402471c 	.word	0x2402471c
 8029d94:	40020070 	.word	0x40020070
 8029d98:	24024794 	.word	0x24024794
 8029d9c:	40020088 	.word	0x40020088

08029da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8029da0:	b480      	push	{r7}
 8029da2:	b083      	sub	sp, #12
 8029da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8029da6:	4b0a      	ldr	r3, [pc, #40]	; (8029dd0 <HAL_MspInit+0x30>)
 8029da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029dac:	4a08      	ldr	r2, [pc, #32]	; (8029dd0 <HAL_MspInit+0x30>)
 8029dae:	f043 0302 	orr.w	r3, r3, #2
 8029db2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8029db6:	4b06      	ldr	r3, [pc, #24]	; (8029dd0 <HAL_MspInit+0x30>)
 8029db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8029dbc:	f003 0302 	and.w	r3, r3, #2
 8029dc0:	607b      	str	r3, [r7, #4]
 8029dc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8029dc4:	bf00      	nop
 8029dc6:	370c      	adds	r7, #12
 8029dc8:	46bd      	mov	sp, r7
 8029dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dce:	4770      	bx	lr
 8029dd0:	58024400 	.word	0x58024400

08029dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8029dd4:	b480      	push	{r7}
 8029dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8029dd8:	e7fe      	b.n	8029dd8 <NMI_Handler+0x4>

08029dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8029dda:	b480      	push	{r7}
 8029ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8029dde:	e7fe      	b.n	8029dde <HardFault_Handler+0x4>

08029de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8029de0:	b480      	push	{r7}
 8029de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8029de4:	e7fe      	b.n	8029de4 <MemManage_Handler+0x4>

08029de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8029de6:	b480      	push	{r7}
 8029de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8029dea:	e7fe      	b.n	8029dea <BusFault_Handler+0x4>

08029dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8029dec:	b480      	push	{r7}
 8029dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8029df0:	e7fe      	b.n	8029df0 <UsageFault_Handler+0x4>

08029df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8029df2:	b480      	push	{r7}
 8029df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8029df6:	bf00      	nop
 8029df8:	46bd      	mov	sp, r7
 8029dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dfe:	4770      	bx	lr

08029e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8029e00:	b480      	push	{r7}
 8029e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8029e04:	bf00      	nop
 8029e06:	46bd      	mov	sp, r7
 8029e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e0c:	4770      	bx	lr

08029e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8029e0e:	b480      	push	{r7}
 8029e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8029e12:	bf00      	nop
 8029e14:	46bd      	mov	sp, r7
 8029e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e1a:	4770      	bx	lr

08029e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8029e1c:	b580      	push	{r7, lr}
 8029e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8029e20:	f000 ff1e 	bl	802ac60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8029e24:	bf00      	nop
 8029e26:	bd80      	pop	{r7, pc}

08029e28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8029e28:	b580      	push	{r7, lr}
 8029e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8029e2c:	4802      	ldr	r0, [pc, #8]	; (8029e38 <DMA1_Stream0_IRQHandler+0x10>)
 8029e2e:	f002 ff51 	bl	802ccd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8029e32:	bf00      	nop
 8029e34:	bd80      	pop	{r7, pc}
 8029e36:	bf00      	nop
 8029e38:	240245a4 	.word	0x240245a4

08029e3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8029e3c:	b580      	push	{r7, lr}
 8029e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8029e40:	4802      	ldr	r0, [pc, #8]	; (8029e4c <DMA1_Stream1_IRQHandler+0x10>)
 8029e42:	f002 ff47 	bl	802ccd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8029e46:	bf00      	nop
 8029e48:	bd80      	pop	{r7, pc}
 8029e4a:	bf00      	nop
 8029e4c:	2402461c 	.word	0x2402461c

08029e50 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8029e50:	b580      	push	{r7, lr}
 8029e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8029e54:	4802      	ldr	r0, [pc, #8]	; (8029e60 <DMA1_Stream4_IRQHandler+0x10>)
 8029e56:	f002 ff3d 	bl	802ccd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8029e5a:	bf00      	nop
 8029e5c:	bd80      	pop	{r7, pc}
 8029e5e:	bf00      	nop
 8029e60:	2402471c 	.word	0x2402471c

08029e64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8029e64:	b580      	push	{r7, lr}
 8029e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8029e68:	4802      	ldr	r0, [pc, #8]	; (8029e74 <DMA1_Stream5_IRQHandler+0x10>)
 8029e6a:	f002 ff33 	bl	802ccd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8029e6e:	bf00      	nop
 8029e70:	bd80      	pop	{r7, pc}
 8029e72:	bf00      	nop
 8029e74:	24024794 	.word	0x24024794

08029e78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8029e78:	b580      	push	{r7, lr}
 8029e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8029e7c:	4802      	ldr	r0, [pc, #8]	; (8029e88 <TIM2_IRQHandler+0x10>)
 8029e7e:	f00a fc09 	bl	8034694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8029e82:	bf00      	nop
 8029e84:	bd80      	pop	{r7, pc}
 8029e86:	bf00      	nop
 8029e88:	24024810 	.word	0x24024810

08029e8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8029e8c:	b580      	push	{r7, lr}
 8029e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8029e90:	4802      	ldr	r0, [pc, #8]	; (8029e9c <TIM3_IRQHandler+0x10>)
 8029e92:	f00a fbff 	bl	8034694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8029e96:	bf00      	nop
 8029e98:	bd80      	pop	{r7, pc}
 8029e9a:	bf00      	nop
 8029e9c:	2402485c 	.word	0x2402485c

08029ea0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8029ea0:	b580      	push	{r7, lr}
 8029ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8029ea4:	4802      	ldr	r0, [pc, #8]	; (8029eb0 <TIM4_IRQHandler+0x10>)
 8029ea6:	f00a fbf5 	bl	8034694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8029eaa:	bf00      	nop
 8029eac:	bd80      	pop	{r7, pc}
 8029eae:	bf00      	nop
 8029eb0:	240248a8 	.word	0x240248a8

08029eb4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8029eb4:	b580      	push	{r7, lr}
 8029eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8029eb8:	4802      	ldr	r0, [pc, #8]	; (8029ec4 <I2C2_EV_IRQHandler+0x10>)
 8029eba:	f004 fc91 	bl	802e7e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8029ebe:	bf00      	nop
 8029ec0:	bd80      	pop	{r7, pc}
 8029ec2:	bf00      	nop
 8029ec4:	24024558 	.word	0x24024558

08029ec8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8029ec8:	b580      	push	{r7, lr}
 8029eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8029ecc:	4802      	ldr	r0, [pc, #8]	; (8029ed8 <I2C2_ER_IRQHandler+0x10>)
 8029ece:	f004 fca1 	bl	802e814 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8029ed2:	bf00      	nop
 8029ed4:	bd80      	pop	{r7, pc}
 8029ed6:	bf00      	nop
 8029ed8:	24024558 	.word	0x24024558

08029edc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8029edc:	b580      	push	{r7, lr}
 8029ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8029ee0:	4802      	ldr	r0, [pc, #8]	; (8029eec <SPI1_IRQHandler+0x10>)
 8029ee2:	f009 ff5d 	bl	8033da0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8029ee6:	bf00      	nop
 8029ee8:	bd80      	pop	{r7, pc}
 8029eea:	bf00      	nop
 8029eec:	24024694 	.word	0x24024694

08029ef0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8029ef0:	b580      	push	{r7, lr}
 8029ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8029ef4:	4802      	ldr	r0, [pc, #8]	; (8029f00 <USART3_IRQHandler+0x10>)
 8029ef6:	f00b fa13 	bl	8035320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8029efa:	bf00      	nop
 8029efc:	bd80      	pop	{r7, pc}
 8029efe:	bf00      	nop
 8029f00:	24024b34 	.word	0x24024b34

08029f04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8029f04:	b580      	push	{r7, lr}
 8029f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8029f08:	4802      	ldr	r0, [pc, #8]	; (8029f14 <UART4_IRQHandler+0x10>)
 8029f0a:	f00b fa09 	bl	8035320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8029f0e:	bf00      	nop
 8029f10:	bd80      	pop	{r7, pc}
 8029f12:	bf00      	nop
 8029f14:	240248f4 	.word	0x240248f4

08029f18 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8029f18:	b580      	push	{r7, lr}
 8029f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8029f1c:	4802      	ldr	r0, [pc, #8]	; (8029f28 <UART8_IRQHandler+0x10>)
 8029f1e:	f00b f9ff 	bl	8035320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8029f22:	bf00      	nop
 8029f24:	bd80      	pop	{r7, pc}
 8029f26:	bf00      	nop
 8029f28:	24024a14 	.word	0x24024a14

08029f2c <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8029f2c:	b580      	push	{r7, lr}
 8029f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029f30:	4802      	ldr	r0, [pc, #8]	; (8029f3c <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8029f32:	f005 fcc8 	bl	802f8c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8029f36:	bf00      	nop
 8029f38:	bd80      	pop	{r7, pc}
 8029f3a:	bf00      	nop
 8029f3c:	240260a8 	.word	0x240260a8

08029f40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8029f40:	b580      	push	{r7, lr}
 8029f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8029f44:	4802      	ldr	r0, [pc, #8]	; (8029f50 <OTG_FS_IRQHandler+0x10>)
 8029f46:	f005 fcbe 	bl	802f8c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8029f4a:	bf00      	nop
 8029f4c:	bd80      	pop	{r7, pc}
 8029f4e:	bf00      	nop
 8029f50:	240260a8 	.word	0x240260a8

08029f54 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8029f54:	b580      	push	{r7, lr}
 8029f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8029f58:	4802      	ldr	r0, [pc, #8]	; (8029f64 <COMP1_IRQHandler+0x10>)
 8029f5a:	f001 f845 	bl	802afe8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8029f5e:	bf00      	nop
 8029f60:	bd80      	pop	{r7, pc}
 8029f62:	bf00      	nop
 8029f64:	24024518 	.word	0x24024518

08029f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8029f68:	b480      	push	{r7}
 8029f6a:	af00      	add	r7, sp, #0
	return 1;
 8029f6c:	2301      	movs	r3, #1
}
 8029f6e:	4618      	mov	r0, r3
 8029f70:	46bd      	mov	sp, r7
 8029f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f76:	4770      	bx	lr

08029f78 <_kill>:

int _kill(int pid, int sig)
{
 8029f78:	b580      	push	{r7, lr}
 8029f7a:	b082      	sub	sp, #8
 8029f7c:	af00      	add	r7, sp, #0
 8029f7e:	6078      	str	r0, [r7, #4]
 8029f80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8029f82:	f011 ff19 	bl	803bdb8 <__errno>
 8029f86:	4603      	mov	r3, r0
 8029f88:	2216      	movs	r2, #22
 8029f8a:	601a      	str	r2, [r3, #0]
	return -1;
 8029f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8029f90:	4618      	mov	r0, r3
 8029f92:	3708      	adds	r7, #8
 8029f94:	46bd      	mov	sp, r7
 8029f96:	bd80      	pop	{r7, pc}

08029f98 <_exit>:

void _exit (int status)
{
 8029f98:	b580      	push	{r7, lr}
 8029f9a:	b082      	sub	sp, #8
 8029f9c:	af00      	add	r7, sp, #0
 8029f9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8029fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8029fa4:	6878      	ldr	r0, [r7, #4]
 8029fa6:	f7ff ffe7 	bl	8029f78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8029faa:	e7fe      	b.n	8029faa <_exit+0x12>

08029fac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8029fac:	b580      	push	{r7, lr}
 8029fae:	b086      	sub	sp, #24
 8029fb0:	af00      	add	r7, sp, #0
 8029fb2:	60f8      	str	r0, [r7, #12]
 8029fb4:	60b9      	str	r1, [r7, #8]
 8029fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029fb8:	2300      	movs	r3, #0
 8029fba:	617b      	str	r3, [r7, #20]
 8029fbc:	e00a      	b.n	8029fd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8029fbe:	f3af 8000 	nop.w
 8029fc2:	4601      	mov	r1, r0
 8029fc4:	68bb      	ldr	r3, [r7, #8]
 8029fc6:	1c5a      	adds	r2, r3, #1
 8029fc8:	60ba      	str	r2, [r7, #8]
 8029fca:	b2ca      	uxtb	r2, r1
 8029fcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029fce:	697b      	ldr	r3, [r7, #20]
 8029fd0:	3301      	adds	r3, #1
 8029fd2:	617b      	str	r3, [r7, #20]
 8029fd4:	697a      	ldr	r2, [r7, #20]
 8029fd6:	687b      	ldr	r3, [r7, #4]
 8029fd8:	429a      	cmp	r2, r3
 8029fda:	dbf0      	blt.n	8029fbe <_read+0x12>
	}

return len;
 8029fdc:	687b      	ldr	r3, [r7, #4]
}
 8029fde:	4618      	mov	r0, r3
 8029fe0:	3718      	adds	r7, #24
 8029fe2:	46bd      	mov	sp, r7
 8029fe4:	bd80      	pop	{r7, pc}

08029fe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8029fe6:	b580      	push	{r7, lr}
 8029fe8:	b086      	sub	sp, #24
 8029fea:	af00      	add	r7, sp, #0
 8029fec:	60f8      	str	r0, [r7, #12]
 8029fee:	60b9      	str	r1, [r7, #8]
 8029ff0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8029ff2:	2300      	movs	r3, #0
 8029ff4:	617b      	str	r3, [r7, #20]
 8029ff6:	e009      	b.n	802a00c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8029ff8:	68bb      	ldr	r3, [r7, #8]
 8029ffa:	1c5a      	adds	r2, r3, #1
 8029ffc:	60ba      	str	r2, [r7, #8]
 8029ffe:	781b      	ldrb	r3, [r3, #0]
 802a000:	4618      	mov	r0, r3
 802a002:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802a006:	697b      	ldr	r3, [r7, #20]
 802a008:	3301      	adds	r3, #1
 802a00a:	617b      	str	r3, [r7, #20]
 802a00c:	697a      	ldr	r2, [r7, #20]
 802a00e:	687b      	ldr	r3, [r7, #4]
 802a010:	429a      	cmp	r2, r3
 802a012:	dbf1      	blt.n	8029ff8 <_write+0x12>
	}
	return len;
 802a014:	687b      	ldr	r3, [r7, #4]
}
 802a016:	4618      	mov	r0, r3
 802a018:	3718      	adds	r7, #24
 802a01a:	46bd      	mov	sp, r7
 802a01c:	bd80      	pop	{r7, pc}

0802a01e <_close>:

int _close(int file)
{
 802a01e:	b480      	push	{r7}
 802a020:	b083      	sub	sp, #12
 802a022:	af00      	add	r7, sp, #0
 802a024:	6078      	str	r0, [r7, #4]
	return -1;
 802a026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 802a02a:	4618      	mov	r0, r3
 802a02c:	370c      	adds	r7, #12
 802a02e:	46bd      	mov	sp, r7
 802a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a034:	4770      	bx	lr

0802a036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 802a036:	b480      	push	{r7}
 802a038:	b083      	sub	sp, #12
 802a03a:	af00      	add	r7, sp, #0
 802a03c:	6078      	str	r0, [r7, #4]
 802a03e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 802a040:	683b      	ldr	r3, [r7, #0]
 802a042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a046:	605a      	str	r2, [r3, #4]
	return 0;
 802a048:	2300      	movs	r3, #0
}
 802a04a:	4618      	mov	r0, r3
 802a04c:	370c      	adds	r7, #12
 802a04e:	46bd      	mov	sp, r7
 802a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a054:	4770      	bx	lr

0802a056 <_isatty>:

int _isatty(int file)
{
 802a056:	b480      	push	{r7}
 802a058:	b083      	sub	sp, #12
 802a05a:	af00      	add	r7, sp, #0
 802a05c:	6078      	str	r0, [r7, #4]
	return 1;
 802a05e:	2301      	movs	r3, #1
}
 802a060:	4618      	mov	r0, r3
 802a062:	370c      	adds	r7, #12
 802a064:	46bd      	mov	sp, r7
 802a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a06a:	4770      	bx	lr

0802a06c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802a06c:	b480      	push	{r7}
 802a06e:	b085      	sub	sp, #20
 802a070:	af00      	add	r7, sp, #0
 802a072:	60f8      	str	r0, [r7, #12]
 802a074:	60b9      	str	r1, [r7, #8]
 802a076:	607a      	str	r2, [r7, #4]
	return 0;
 802a078:	2300      	movs	r3, #0
}
 802a07a:	4618      	mov	r0, r3
 802a07c:	3714      	adds	r7, #20
 802a07e:	46bd      	mov	sp, r7
 802a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a084:	4770      	bx	lr
	...

0802a088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802a088:	b580      	push	{r7, lr}
 802a08a:	b086      	sub	sp, #24
 802a08c:	af00      	add	r7, sp, #0
 802a08e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802a090:	4a14      	ldr	r2, [pc, #80]	; (802a0e4 <_sbrk+0x5c>)
 802a092:	4b15      	ldr	r3, [pc, #84]	; (802a0e8 <_sbrk+0x60>)
 802a094:	1ad3      	subs	r3, r2, r3
 802a096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802a098:	697b      	ldr	r3, [r7, #20]
 802a09a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802a09c:	4b13      	ldr	r3, [pc, #76]	; (802a0ec <_sbrk+0x64>)
 802a09e:	681b      	ldr	r3, [r3, #0]
 802a0a0:	2b00      	cmp	r3, #0
 802a0a2:	d102      	bne.n	802a0aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 802a0a4:	4b11      	ldr	r3, [pc, #68]	; (802a0ec <_sbrk+0x64>)
 802a0a6:	4a12      	ldr	r2, [pc, #72]	; (802a0f0 <_sbrk+0x68>)
 802a0a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802a0aa:	4b10      	ldr	r3, [pc, #64]	; (802a0ec <_sbrk+0x64>)
 802a0ac:	681a      	ldr	r2, [r3, #0]
 802a0ae:	687b      	ldr	r3, [r7, #4]
 802a0b0:	4413      	add	r3, r2
 802a0b2:	693a      	ldr	r2, [r7, #16]
 802a0b4:	429a      	cmp	r2, r3
 802a0b6:	d207      	bcs.n	802a0c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 802a0b8:	f011 fe7e 	bl	803bdb8 <__errno>
 802a0bc:	4603      	mov	r3, r0
 802a0be:	220c      	movs	r2, #12
 802a0c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802a0c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802a0c6:	e009      	b.n	802a0dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802a0c8:	4b08      	ldr	r3, [pc, #32]	; (802a0ec <_sbrk+0x64>)
 802a0ca:	681b      	ldr	r3, [r3, #0]
 802a0cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802a0ce:	4b07      	ldr	r3, [pc, #28]	; (802a0ec <_sbrk+0x64>)
 802a0d0:	681a      	ldr	r2, [r3, #0]
 802a0d2:	687b      	ldr	r3, [r7, #4]
 802a0d4:	4413      	add	r3, r2
 802a0d6:	4a05      	ldr	r2, [pc, #20]	; (802a0ec <_sbrk+0x64>)
 802a0d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802a0da:	68fb      	ldr	r3, [r7, #12]
}
 802a0dc:	4618      	mov	r0, r3
 802a0de:	3718      	adds	r7, #24
 802a0e0:	46bd      	mov	sp, r7
 802a0e2:	bd80      	pop	{r7, pc}
 802a0e4:	24080000 	.word	0x24080000
 802a0e8:	00000400 	.word	0x00000400
 802a0ec:	2402480c 	.word	0x2402480c
 802a0f0:	240267e8 	.word	0x240267e8

0802a0f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 802a0f4:	b480      	push	{r7}
 802a0f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 802a0f8:	4b37      	ldr	r3, [pc, #220]	; (802a1d8 <SystemInit+0xe4>)
 802a0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802a0fe:	4a36      	ldr	r2, [pc, #216]	; (802a1d8 <SystemInit+0xe4>)
 802a100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802a104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a108:	4b34      	ldr	r3, [pc, #208]	; (802a1dc <SystemInit+0xe8>)
 802a10a:	681b      	ldr	r3, [r3, #0]
 802a10c:	f003 030f 	and.w	r3, r3, #15
 802a110:	2b06      	cmp	r3, #6
 802a112:	d807      	bhi.n	802a124 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a114:	4b31      	ldr	r3, [pc, #196]	; (802a1dc <SystemInit+0xe8>)
 802a116:	681b      	ldr	r3, [r3, #0]
 802a118:	f023 030f 	bic.w	r3, r3, #15
 802a11c:	4a2f      	ldr	r2, [pc, #188]	; (802a1dc <SystemInit+0xe8>)
 802a11e:	f043 0307 	orr.w	r3, r3, #7
 802a122:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 802a124:	4b2e      	ldr	r3, [pc, #184]	; (802a1e0 <SystemInit+0xec>)
 802a126:	681b      	ldr	r3, [r3, #0]
 802a128:	4a2d      	ldr	r2, [pc, #180]	; (802a1e0 <SystemInit+0xec>)
 802a12a:	f043 0301 	orr.w	r3, r3, #1
 802a12e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 802a130:	4b2b      	ldr	r3, [pc, #172]	; (802a1e0 <SystemInit+0xec>)
 802a132:	2200      	movs	r2, #0
 802a134:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 802a136:	4b2a      	ldr	r3, [pc, #168]	; (802a1e0 <SystemInit+0xec>)
 802a138:	681a      	ldr	r2, [r3, #0]
 802a13a:	4929      	ldr	r1, [pc, #164]	; (802a1e0 <SystemInit+0xec>)
 802a13c:	4b29      	ldr	r3, [pc, #164]	; (802a1e4 <SystemInit+0xf0>)
 802a13e:	4013      	ands	r3, r2
 802a140:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 802a142:	4b26      	ldr	r3, [pc, #152]	; (802a1dc <SystemInit+0xe8>)
 802a144:	681b      	ldr	r3, [r3, #0]
 802a146:	f003 0308 	and.w	r3, r3, #8
 802a14a:	2b00      	cmp	r3, #0
 802a14c:	d007      	beq.n	802a15e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 802a14e:	4b23      	ldr	r3, [pc, #140]	; (802a1dc <SystemInit+0xe8>)
 802a150:	681b      	ldr	r3, [r3, #0]
 802a152:	f023 030f 	bic.w	r3, r3, #15
 802a156:	4a21      	ldr	r2, [pc, #132]	; (802a1dc <SystemInit+0xe8>)
 802a158:	f043 0307 	orr.w	r3, r3, #7
 802a15c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 802a15e:	4b20      	ldr	r3, [pc, #128]	; (802a1e0 <SystemInit+0xec>)
 802a160:	2200      	movs	r2, #0
 802a162:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 802a164:	4b1e      	ldr	r3, [pc, #120]	; (802a1e0 <SystemInit+0xec>)
 802a166:	2200      	movs	r2, #0
 802a168:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802a16a:	4b1d      	ldr	r3, [pc, #116]	; (802a1e0 <SystemInit+0xec>)
 802a16c:	2200      	movs	r2, #0
 802a16e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 802a170:	4b1b      	ldr	r3, [pc, #108]	; (802a1e0 <SystemInit+0xec>)
 802a172:	4a1d      	ldr	r2, [pc, #116]	; (802a1e8 <SystemInit+0xf4>)
 802a174:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802a176:	4b1a      	ldr	r3, [pc, #104]	; (802a1e0 <SystemInit+0xec>)
 802a178:	4a1c      	ldr	r2, [pc, #112]	; (802a1ec <SystemInit+0xf8>)
 802a17a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 802a17c:	4b18      	ldr	r3, [pc, #96]	; (802a1e0 <SystemInit+0xec>)
 802a17e:	4a1c      	ldr	r2, [pc, #112]	; (802a1f0 <SystemInit+0xfc>)
 802a180:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 802a182:	4b17      	ldr	r3, [pc, #92]	; (802a1e0 <SystemInit+0xec>)
 802a184:	2200      	movs	r2, #0
 802a186:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 802a188:	4b15      	ldr	r3, [pc, #84]	; (802a1e0 <SystemInit+0xec>)
 802a18a:	4a19      	ldr	r2, [pc, #100]	; (802a1f0 <SystemInit+0xfc>)
 802a18c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 802a18e:	4b14      	ldr	r3, [pc, #80]	; (802a1e0 <SystemInit+0xec>)
 802a190:	2200      	movs	r2, #0
 802a192:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 802a194:	4b12      	ldr	r3, [pc, #72]	; (802a1e0 <SystemInit+0xec>)
 802a196:	4a16      	ldr	r2, [pc, #88]	; (802a1f0 <SystemInit+0xfc>)
 802a198:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 802a19a:	4b11      	ldr	r3, [pc, #68]	; (802a1e0 <SystemInit+0xec>)
 802a19c:	2200      	movs	r2, #0
 802a19e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 802a1a0:	4b0f      	ldr	r3, [pc, #60]	; (802a1e0 <SystemInit+0xec>)
 802a1a2:	681b      	ldr	r3, [r3, #0]
 802a1a4:	4a0e      	ldr	r2, [pc, #56]	; (802a1e0 <SystemInit+0xec>)
 802a1a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802a1aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 802a1ac:	4b0c      	ldr	r3, [pc, #48]	; (802a1e0 <SystemInit+0xec>)
 802a1ae:	2200      	movs	r2, #0
 802a1b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 802a1b2:	4b10      	ldr	r3, [pc, #64]	; (802a1f4 <SystemInit+0x100>)
 802a1b4:	681a      	ldr	r2, [r3, #0]
 802a1b6:	4b10      	ldr	r3, [pc, #64]	; (802a1f8 <SystemInit+0x104>)
 802a1b8:	4013      	ands	r3, r2
 802a1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802a1be:	d202      	bcs.n	802a1c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 802a1c0:	4b0e      	ldr	r3, [pc, #56]	; (802a1fc <SystemInit+0x108>)
 802a1c2:	2201      	movs	r2, #1
 802a1c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 802a1c6:	4b0e      	ldr	r3, [pc, #56]	; (802a200 <SystemInit+0x10c>)
 802a1c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 802a1cc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 802a1ce:	bf00      	nop
 802a1d0:	46bd      	mov	sp, r7
 802a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1d6:	4770      	bx	lr
 802a1d8:	e000ed00 	.word	0xe000ed00
 802a1dc:	52002000 	.word	0x52002000
 802a1e0:	58024400 	.word	0x58024400
 802a1e4:	eaf6ed7f 	.word	0xeaf6ed7f
 802a1e8:	02020200 	.word	0x02020200
 802a1ec:	01ff0000 	.word	0x01ff0000
 802a1f0:	01010280 	.word	0x01010280
 802a1f4:	5c001000 	.word	0x5c001000
 802a1f8:	ffff0000 	.word	0xffff0000
 802a1fc:	51008108 	.word	0x51008108
 802a200:	52004000 	.word	0x52004000

0802a204 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 802a204:	b580      	push	{r7, lr}
 802a206:	b088      	sub	sp, #32
 802a208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a20a:	f107 0310 	add.w	r3, r7, #16
 802a20e:	2200      	movs	r2, #0
 802a210:	601a      	str	r2, [r3, #0]
 802a212:	605a      	str	r2, [r3, #4]
 802a214:	609a      	str	r2, [r3, #8]
 802a216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a218:	1d3b      	adds	r3, r7, #4
 802a21a:	2200      	movs	r2, #0
 802a21c:	601a      	str	r2, [r3, #0]
 802a21e:	605a      	str	r2, [r3, #4]
 802a220:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802a222:	4b1e      	ldr	r3, [pc, #120]	; (802a29c <MX_TIM2_Init+0x98>)
 802a224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802a228:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 802a22a:	4b1c      	ldr	r3, [pc, #112]	; (802a29c <MX_TIM2_Init+0x98>)
 802a22c:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a232:	4b1a      	ldr	r3, [pc, #104]	; (802a29c <MX_TIM2_Init+0x98>)
 802a234:	2200      	movs	r2, #0
 802a236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 802a238:	4b18      	ldr	r3, [pc, #96]	; (802a29c <MX_TIM2_Init+0x98>)
 802a23a:	2264      	movs	r2, #100	; 0x64
 802a23c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a23e:	4b17      	ldr	r3, [pc, #92]	; (802a29c <MX_TIM2_Init+0x98>)
 802a240:	2200      	movs	r2, #0
 802a242:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a244:	4b15      	ldr	r3, [pc, #84]	; (802a29c <MX_TIM2_Init+0x98>)
 802a246:	2200      	movs	r2, #0
 802a248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802a24a:	4814      	ldr	r0, [pc, #80]	; (802a29c <MX_TIM2_Init+0x98>)
 802a24c:	f00a f953 	bl	80344f6 <HAL_TIM_Base_Init>
 802a250:	4603      	mov	r3, r0
 802a252:	2b00      	cmp	r3, #0
 802a254:	d001      	beq.n	802a25a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 802a256:	f7ff fc61 	bl	8029b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a25a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a25e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802a260:	f107 0310 	add.w	r3, r7, #16
 802a264:	4619      	mov	r1, r3
 802a266:	480d      	ldr	r0, [pc, #52]	; (802a29c <MX_TIM2_Init+0x98>)
 802a268:	f00a fb34 	bl	80348d4 <HAL_TIM_ConfigClockSource>
 802a26c:	4603      	mov	r3, r0
 802a26e:	2b00      	cmp	r3, #0
 802a270:	d001      	beq.n	802a276 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 802a272:	f7ff fc53 	bl	8029b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a276:	2300      	movs	r3, #0
 802a278:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a27a:	2300      	movs	r3, #0
 802a27c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802a27e:	1d3b      	adds	r3, r7, #4
 802a280:	4619      	mov	r1, r3
 802a282:	4806      	ldr	r0, [pc, #24]	; (802a29c <MX_TIM2_Init+0x98>)
 802a284:	f00a fd7e 	bl	8034d84 <HAL_TIMEx_MasterConfigSynchronization>
 802a288:	4603      	mov	r3, r0
 802a28a:	2b00      	cmp	r3, #0
 802a28c:	d001      	beq.n	802a292 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 802a28e:	f7ff fc45 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802a292:	bf00      	nop
 802a294:	3720      	adds	r7, #32
 802a296:	46bd      	mov	sp, r7
 802a298:	bd80      	pop	{r7, pc}
 802a29a:	bf00      	nop
 802a29c:	24024810 	.word	0x24024810

0802a2a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 802a2a0:	b580      	push	{r7, lr}
 802a2a2:	b088      	sub	sp, #32
 802a2a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a2a6:	f107 0310 	add.w	r3, r7, #16
 802a2aa:	2200      	movs	r2, #0
 802a2ac:	601a      	str	r2, [r3, #0]
 802a2ae:	605a      	str	r2, [r3, #4]
 802a2b0:	609a      	str	r2, [r3, #8]
 802a2b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a2b4:	1d3b      	adds	r3, r7, #4
 802a2b6:	2200      	movs	r2, #0
 802a2b8:	601a      	str	r2, [r3, #0]
 802a2ba:	605a      	str	r2, [r3, #4]
 802a2bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802a2be:	4b1d      	ldr	r3, [pc, #116]	; (802a334 <MX_TIM3_Init+0x94>)
 802a2c0:	4a1d      	ldr	r2, [pc, #116]	; (802a338 <MX_TIM3_Init+0x98>)
 802a2c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 802a2c4:	4b1b      	ldr	r3, [pc, #108]	; (802a334 <MX_TIM3_Init+0x94>)
 802a2c6:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a2ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a2cc:	4b19      	ldr	r3, [pc, #100]	; (802a334 <MX_TIM3_Init+0x94>)
 802a2ce:	2200      	movs	r2, #0
 802a2d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 802a2d2:	4b18      	ldr	r3, [pc, #96]	; (802a334 <MX_TIM3_Init+0x94>)
 802a2d4:	220a      	movs	r2, #10
 802a2d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a2d8:	4b16      	ldr	r3, [pc, #88]	; (802a334 <MX_TIM3_Init+0x94>)
 802a2da:	2200      	movs	r2, #0
 802a2dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a2de:	4b15      	ldr	r3, [pc, #84]	; (802a334 <MX_TIM3_Init+0x94>)
 802a2e0:	2200      	movs	r2, #0
 802a2e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 802a2e4:	4813      	ldr	r0, [pc, #76]	; (802a334 <MX_TIM3_Init+0x94>)
 802a2e6:	f00a f906 	bl	80344f6 <HAL_TIM_Base_Init>
 802a2ea:	4603      	mov	r3, r0
 802a2ec:	2b00      	cmp	r3, #0
 802a2ee:	d001      	beq.n	802a2f4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 802a2f0:	f7ff fc14 	bl	8029b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a2f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a2f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 802a2fa:	f107 0310 	add.w	r3, r7, #16
 802a2fe:	4619      	mov	r1, r3
 802a300:	480c      	ldr	r0, [pc, #48]	; (802a334 <MX_TIM3_Init+0x94>)
 802a302:	f00a fae7 	bl	80348d4 <HAL_TIM_ConfigClockSource>
 802a306:	4603      	mov	r3, r0
 802a308:	2b00      	cmp	r3, #0
 802a30a:	d001      	beq.n	802a310 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 802a30c:	f7ff fc06 	bl	8029b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a310:	2300      	movs	r3, #0
 802a312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a314:	2300      	movs	r3, #0
 802a316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802a318:	1d3b      	adds	r3, r7, #4
 802a31a:	4619      	mov	r1, r3
 802a31c:	4805      	ldr	r0, [pc, #20]	; (802a334 <MX_TIM3_Init+0x94>)
 802a31e:	f00a fd31 	bl	8034d84 <HAL_TIMEx_MasterConfigSynchronization>
 802a322:	4603      	mov	r3, r0
 802a324:	2b00      	cmp	r3, #0
 802a326:	d001      	beq.n	802a32c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 802a328:	f7ff fbf8 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 802a32c:	bf00      	nop
 802a32e:	3720      	adds	r7, #32
 802a330:	46bd      	mov	sp, r7
 802a332:	bd80      	pop	{r7, pc}
 802a334:	2402485c 	.word	0x2402485c
 802a338:	40000400 	.word	0x40000400

0802a33c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 802a33c:	b580      	push	{r7, lr}
 802a33e:	b088      	sub	sp, #32
 802a340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802a342:	f107 0310 	add.w	r3, r7, #16
 802a346:	2200      	movs	r2, #0
 802a348:	601a      	str	r2, [r3, #0]
 802a34a:	605a      	str	r2, [r3, #4]
 802a34c:	609a      	str	r2, [r3, #8]
 802a34e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802a350:	1d3b      	adds	r3, r7, #4
 802a352:	2200      	movs	r2, #0
 802a354:	601a      	str	r2, [r3, #0]
 802a356:	605a      	str	r2, [r3, #4]
 802a358:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802a35a:	4b1d      	ldr	r3, [pc, #116]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a35c:	4a1d      	ldr	r2, [pc, #116]	; (802a3d4 <MX_TIM4_Init+0x98>)
 802a35e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 802a360:	4b1b      	ldr	r3, [pc, #108]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a362:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 802a366:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802a368:	4b19      	ldr	r3, [pc, #100]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a36a:	2200      	movs	r2, #0
 802a36c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 802a36e:	4b18      	ldr	r3, [pc, #96]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a370:	2264      	movs	r2, #100	; 0x64
 802a372:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802a374:	4b16      	ldr	r3, [pc, #88]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a376:	2200      	movs	r2, #0
 802a378:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802a37a:	4b15      	ldr	r3, [pc, #84]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a37c:	2200      	movs	r2, #0
 802a37e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 802a380:	4813      	ldr	r0, [pc, #76]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a382:	f00a f8b8 	bl	80344f6 <HAL_TIM_Base_Init>
 802a386:	4603      	mov	r3, r0
 802a388:	2b00      	cmp	r3, #0
 802a38a:	d001      	beq.n	802a390 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 802a38c:	f7ff fbc6 	bl	8029b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802a390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802a394:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 802a396:	f107 0310 	add.w	r3, r7, #16
 802a39a:	4619      	mov	r1, r3
 802a39c:	480c      	ldr	r0, [pc, #48]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a39e:	f00a fa99 	bl	80348d4 <HAL_TIM_ConfigClockSource>
 802a3a2:	4603      	mov	r3, r0
 802a3a4:	2b00      	cmp	r3, #0
 802a3a6:	d001      	beq.n	802a3ac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 802a3a8:	f7ff fbb8 	bl	8029b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802a3ac:	2300      	movs	r3, #0
 802a3ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802a3b0:	2300      	movs	r3, #0
 802a3b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802a3b4:	1d3b      	adds	r3, r7, #4
 802a3b6:	4619      	mov	r1, r3
 802a3b8:	4805      	ldr	r0, [pc, #20]	; (802a3d0 <MX_TIM4_Init+0x94>)
 802a3ba:	f00a fce3 	bl	8034d84 <HAL_TIMEx_MasterConfigSynchronization>
 802a3be:	4603      	mov	r3, r0
 802a3c0:	2b00      	cmp	r3, #0
 802a3c2:	d001      	beq.n	802a3c8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 802a3c4:	f7ff fbaa 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802a3c8:	bf00      	nop
 802a3ca:	3720      	adds	r7, #32
 802a3cc:	46bd      	mov	sp, r7
 802a3ce:	bd80      	pop	{r7, pc}
 802a3d0:	240248a8 	.word	0x240248a8
 802a3d4:	40000800 	.word	0x40000800

0802a3d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 802a3d8:	b580      	push	{r7, lr}
 802a3da:	b086      	sub	sp, #24
 802a3dc:	af00      	add	r7, sp, #0
 802a3de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 802a3e0:	687b      	ldr	r3, [r7, #4]
 802a3e2:	681b      	ldr	r3, [r3, #0]
 802a3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a3e8:	d117      	bne.n	802a41a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802a3ea:	4b2a      	ldr	r3, [pc, #168]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a3ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a3f0:	4a28      	ldr	r2, [pc, #160]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a3f2:	f043 0301 	orr.w	r3, r3, #1
 802a3f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a3fa:	4b26      	ldr	r3, [pc, #152]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a3fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a400:	f003 0301 	and.w	r3, r3, #1
 802a404:	617b      	str	r3, [r7, #20]
 802a406:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 802a408:	2200      	movs	r2, #0
 802a40a:	2101      	movs	r1, #1
 802a40c:	201c      	movs	r0, #28
 802a40e:	f000 ff3a 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 802a412:	201c      	movs	r0, #28
 802a414:	f000 ff51 	bl	802b2ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 802a418:	e038      	b.n	802a48c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 802a41a:	687b      	ldr	r3, [r7, #4]
 802a41c:	681b      	ldr	r3, [r3, #0]
 802a41e:	4a1e      	ldr	r2, [pc, #120]	; (802a498 <HAL_TIM_Base_MspInit+0xc0>)
 802a420:	4293      	cmp	r3, r2
 802a422:	d117      	bne.n	802a454 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802a424:	4b1b      	ldr	r3, [pc, #108]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a42a:	4a1a      	ldr	r2, [pc, #104]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a42c:	f043 0302 	orr.w	r3, r3, #2
 802a430:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a434:	4b17      	ldr	r3, [pc, #92]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a43a:	f003 0302 	and.w	r3, r3, #2
 802a43e:	613b      	str	r3, [r7, #16]
 802a440:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 802a442:	2200      	movs	r2, #0
 802a444:	2101      	movs	r1, #1
 802a446:	201d      	movs	r0, #29
 802a448:	f000 ff1d 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 802a44c:	201d      	movs	r0, #29
 802a44e:	f000 ff34 	bl	802b2ba <HAL_NVIC_EnableIRQ>
}
 802a452:	e01b      	b.n	802a48c <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 802a454:	687b      	ldr	r3, [r7, #4]
 802a456:	681b      	ldr	r3, [r3, #0]
 802a458:	4a10      	ldr	r2, [pc, #64]	; (802a49c <HAL_TIM_Base_MspInit+0xc4>)
 802a45a:	4293      	cmp	r3, r2
 802a45c:	d116      	bne.n	802a48c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 802a45e:	4b0d      	ldr	r3, [pc, #52]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a464:	4a0b      	ldr	r2, [pc, #44]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a466:	f043 0304 	orr.w	r3, r3, #4
 802a46a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a46e:	4b09      	ldr	r3, [pc, #36]	; (802a494 <HAL_TIM_Base_MspInit+0xbc>)
 802a470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a474:	f003 0304 	and.w	r3, r3, #4
 802a478:	60fb      	str	r3, [r7, #12]
 802a47a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 802a47c:	2200      	movs	r2, #0
 802a47e:	2100      	movs	r1, #0
 802a480:	201e      	movs	r0, #30
 802a482:	f000 ff00 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 802a486:	201e      	movs	r0, #30
 802a488:	f000 ff17 	bl	802b2ba <HAL_NVIC_EnableIRQ>
}
 802a48c:	bf00      	nop
 802a48e:	3718      	adds	r7, #24
 802a490:	46bd      	mov	sp, r7
 802a492:	bd80      	pop	{r7, pc}
 802a494:	58024400 	.word	0x58024400
 802a498:	40000400 	.word	0x40000400
 802a49c:	40000800 	.word	0x40000800

0802a4a0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 802a4a0:	b580      	push	{r7, lr}
 802a4a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 802a4a4:	4b25      	ldr	r3, [pc, #148]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4a6:	4a26      	ldr	r2, [pc, #152]	; (802a540 <MX_UART4_Init+0xa0>)
 802a4a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 802a4aa:	4b24      	ldr	r3, [pc, #144]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a4b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 802a4b2:	4b22      	ldr	r3, [pc, #136]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a4b8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 802a4ba:	4b20      	ldr	r3, [pc, #128]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4bc:	2200      	movs	r2, #0
 802a4be:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 802a4c0:	4b1e      	ldr	r3, [pc, #120]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a4c6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 802a4c8:	4b1c      	ldr	r3, [pc, #112]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4ca:	220c      	movs	r2, #12
 802a4cc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a4ce:	4b1b      	ldr	r3, [pc, #108]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4d0:	2200      	movs	r2, #0
 802a4d2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 802a4d4:	4b19      	ldr	r3, [pc, #100]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4d6:	2200      	movs	r2, #0
 802a4d8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a4da:	4b18      	ldr	r3, [pc, #96]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4dc:	2200      	movs	r2, #0
 802a4de:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a4e0:	4b16      	ldr	r3, [pc, #88]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4e2:	2200      	movs	r2, #0
 802a4e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a4e6:	4b15      	ldr	r3, [pc, #84]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4e8:	2220      	movs	r2, #32
 802a4ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a4ec:	4b13      	ldr	r3, [pc, #76]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a4f2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 802a4f4:	4811      	ldr	r0, [pc, #68]	; (802a53c <MX_UART4_Init+0x9c>)
 802a4f6:	f00a fcf1 	bl	8034edc <HAL_UART_Init>
 802a4fa:	4603      	mov	r3, r0
 802a4fc:	2b00      	cmp	r3, #0
 802a4fe:	d001      	beq.n	802a504 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 802a500:	f7ff fb0c 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a504:	2100      	movs	r1, #0
 802a506:	480d      	ldr	r0, [pc, #52]	; (802a53c <MX_UART4_Init+0x9c>)
 802a508:	f00d fa3e 	bl	8037988 <HAL_UARTEx_SetTxFifoThreshold>
 802a50c:	4603      	mov	r3, r0
 802a50e:	2b00      	cmp	r3, #0
 802a510:	d001      	beq.n	802a516 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 802a512:	f7ff fb03 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a516:	2100      	movs	r1, #0
 802a518:	4808      	ldr	r0, [pc, #32]	; (802a53c <MX_UART4_Init+0x9c>)
 802a51a:	f00d fa73 	bl	8037a04 <HAL_UARTEx_SetRxFifoThreshold>
 802a51e:	4603      	mov	r3, r0
 802a520:	2b00      	cmp	r3, #0
 802a522:	d001      	beq.n	802a528 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 802a524:	f7ff fafa 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 802a528:	4804      	ldr	r0, [pc, #16]	; (802a53c <MX_UART4_Init+0x9c>)
 802a52a:	f00d f9f4 	bl	8037916 <HAL_UARTEx_DisableFifoMode>
 802a52e:	4603      	mov	r3, r0
 802a530:	2b00      	cmp	r3, #0
 802a532:	d001      	beq.n	802a538 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 802a534:	f7ff faf2 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 802a538:	bf00      	nop
 802a53a:	bd80      	pop	{r7, pc}
 802a53c:	240248f4 	.word	0x240248f4
 802a540:	40004c00 	.word	0x40004c00

0802a544 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 802a544:	b580      	push	{r7, lr}
 802a546:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 802a548:	4b22      	ldr	r3, [pc, #136]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a54a:	4a23      	ldr	r2, [pc, #140]	; (802a5d8 <MX_UART7_Init+0x94>)
 802a54c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 802a54e:	4b21      	ldr	r3, [pc, #132]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a550:	4a22      	ldr	r2, [pc, #136]	; (802a5dc <MX_UART7_Init+0x98>)
 802a552:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 802a554:	4b1f      	ldr	r3, [pc, #124]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a556:	2200      	movs	r2, #0
 802a558:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 802a55a:	4b1e      	ldr	r3, [pc, #120]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a55c:	2200      	movs	r2, #0
 802a55e:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 802a560:	4b1c      	ldr	r3, [pc, #112]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a562:	2200      	movs	r2, #0
 802a564:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 802a566:	4b1b      	ldr	r3, [pc, #108]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a568:	220c      	movs	r2, #12
 802a56a:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a56c:	4b19      	ldr	r3, [pc, #100]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a56e:	2200      	movs	r2, #0
 802a570:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 802a572:	4b18      	ldr	r3, [pc, #96]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a574:	2200      	movs	r2, #0
 802a576:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a578:	4b16      	ldr	r3, [pc, #88]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a57a:	2200      	movs	r2, #0
 802a57c:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a57e:	4b15      	ldr	r3, [pc, #84]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a580:	2200      	movs	r2, #0
 802a582:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a584:	4b13      	ldr	r3, [pc, #76]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a586:	2200      	movs	r2, #0
 802a588:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 802a58a:	4812      	ldr	r0, [pc, #72]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a58c:	f00a fca6 	bl	8034edc <HAL_UART_Init>
 802a590:	4603      	mov	r3, r0
 802a592:	2b00      	cmp	r3, #0
 802a594:	d001      	beq.n	802a59a <MX_UART7_Init+0x56>
  {
    Error_Handler();
 802a596:	f7ff fac1 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a59a:	2100      	movs	r1, #0
 802a59c:	480d      	ldr	r0, [pc, #52]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a59e:	f00d f9f3 	bl	8037988 <HAL_UARTEx_SetTxFifoThreshold>
 802a5a2:	4603      	mov	r3, r0
 802a5a4:	2b00      	cmp	r3, #0
 802a5a6:	d001      	beq.n	802a5ac <MX_UART7_Init+0x68>
  {
    Error_Handler();
 802a5a8:	f7ff fab8 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a5ac:	2100      	movs	r1, #0
 802a5ae:	4809      	ldr	r0, [pc, #36]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a5b0:	f00d fa28 	bl	8037a04 <HAL_UARTEx_SetRxFifoThreshold>
 802a5b4:	4603      	mov	r3, r0
 802a5b6:	2b00      	cmp	r3, #0
 802a5b8:	d001      	beq.n	802a5be <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 802a5ba:	f7ff faaf 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 802a5be:	4805      	ldr	r0, [pc, #20]	; (802a5d4 <MX_UART7_Init+0x90>)
 802a5c0:	f00d f9a9 	bl	8037916 <HAL_UARTEx_DisableFifoMode>
 802a5c4:	4603      	mov	r3, r0
 802a5c6:	2b00      	cmp	r3, #0
 802a5c8:	d001      	beq.n	802a5ce <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 802a5ca:	f7ff faa7 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 802a5ce:	bf00      	nop
 802a5d0:	bd80      	pop	{r7, pc}
 802a5d2:	bf00      	nop
 802a5d4:	24024984 	.word	0x24024984
 802a5d8:	40007800 	.word	0x40007800
 802a5dc:	001312d0 	.word	0x001312d0

0802a5e0 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 802a5e0:	b580      	push	{r7, lr}
 802a5e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 802a5e4:	4b26      	ldr	r3, [pc, #152]	; (802a680 <MX_UART8_Init+0xa0>)
 802a5e6:	4a27      	ldr	r2, [pc, #156]	; (802a684 <MX_UART8_Init+0xa4>)
 802a5e8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 802a5ea:	4b25      	ldr	r3, [pc, #148]	; (802a680 <MX_UART8_Init+0xa0>)
 802a5ec:	4a26      	ldr	r2, [pc, #152]	; (802a688 <MX_UART8_Init+0xa8>)
 802a5ee:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 802a5f0:	4b23      	ldr	r3, [pc, #140]	; (802a680 <MX_UART8_Init+0xa0>)
 802a5f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a5f6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 802a5f8:	4b21      	ldr	r3, [pc, #132]	; (802a680 <MX_UART8_Init+0xa0>)
 802a5fa:	2200      	movs	r2, #0
 802a5fc:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 802a5fe:	4b20      	ldr	r3, [pc, #128]	; (802a680 <MX_UART8_Init+0xa0>)
 802a600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a604:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 802a606:	4b1e      	ldr	r3, [pc, #120]	; (802a680 <MX_UART8_Init+0xa0>)
 802a608:	220c      	movs	r2, #12
 802a60a:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a60c:	4b1c      	ldr	r3, [pc, #112]	; (802a680 <MX_UART8_Init+0xa0>)
 802a60e:	2200      	movs	r2, #0
 802a610:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 802a612:	4b1b      	ldr	r3, [pc, #108]	; (802a680 <MX_UART8_Init+0xa0>)
 802a614:	2200      	movs	r2, #0
 802a616:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a618:	4b19      	ldr	r3, [pc, #100]	; (802a680 <MX_UART8_Init+0xa0>)
 802a61a:	2200      	movs	r2, #0
 802a61c:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a61e:	4b18      	ldr	r3, [pc, #96]	; (802a680 <MX_UART8_Init+0xa0>)
 802a620:	2200      	movs	r2, #0
 802a622:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a624:	4b16      	ldr	r3, [pc, #88]	; (802a680 <MX_UART8_Init+0xa0>)
 802a626:	2220      	movs	r2, #32
 802a628:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a62a:	4b15      	ldr	r3, [pc, #84]	; (802a680 <MX_UART8_Init+0xa0>)
 802a62c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a630:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 802a632:	4813      	ldr	r0, [pc, #76]	; (802a680 <MX_UART8_Init+0xa0>)
 802a634:	f00a fc52 	bl	8034edc <HAL_UART_Init>
 802a638:	4603      	mov	r3, r0
 802a63a:	2b00      	cmp	r3, #0
 802a63c:	d001      	beq.n	802a642 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 802a63e:	f7ff fa6d 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a642:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a646:	480e      	ldr	r0, [pc, #56]	; (802a680 <MX_UART8_Init+0xa0>)
 802a648:	f00d f99e 	bl	8037988 <HAL_UARTEx_SetTxFifoThreshold>
 802a64c:	4603      	mov	r3, r0
 802a64e:	2b00      	cmp	r3, #0
 802a650:	d001      	beq.n	802a656 <MX_UART8_Init+0x76>
  {
    Error_Handler();
 802a652:	f7ff fa63 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a656:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a65a:	4809      	ldr	r0, [pc, #36]	; (802a680 <MX_UART8_Init+0xa0>)
 802a65c:	f00d f9d2 	bl	8037a04 <HAL_UARTEx_SetRxFifoThreshold>
 802a660:	4603      	mov	r3, r0
 802a662:	2b00      	cmp	r3, #0
 802a664:	d001      	beq.n	802a66a <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 802a666:	f7ff fa59 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 802a66a:	4805      	ldr	r0, [pc, #20]	; (802a680 <MX_UART8_Init+0xa0>)
 802a66c:	f00d f918 	bl	80378a0 <HAL_UARTEx_EnableFifoMode>
 802a670:	4603      	mov	r3, r0
 802a672:	2b00      	cmp	r3, #0
 802a674:	d001      	beq.n	802a67a <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 802a676:	f7ff fa51 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 802a67a:	bf00      	nop
 802a67c:	bd80      	pop	{r7, pc}
 802a67e:	bf00      	nop
 802a680:	24024a14 	.word	0x24024a14
 802a684:	40007c00 	.word	0x40007c00
 802a688:	001312d0 	.word	0x001312d0

0802a68c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 802a68c:	b580      	push	{r7, lr}
 802a68e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802a690:	4b22      	ldr	r3, [pc, #136]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a692:	4a23      	ldr	r2, [pc, #140]	; (802a720 <MX_USART2_UART_Init+0x94>)
 802a694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 802a696:	4b21      	ldr	r3, [pc, #132]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802a69c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802a69e:	4b1f      	ldr	r3, [pc, #124]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6a0:	2200      	movs	r2, #0
 802a6a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802a6a4:	4b1d      	ldr	r3, [pc, #116]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6a6:	2200      	movs	r2, #0
 802a6a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802a6aa:	4b1c      	ldr	r3, [pc, #112]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6ac:	2200      	movs	r2, #0
 802a6ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802a6b0:	4b1a      	ldr	r3, [pc, #104]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6b2:	220c      	movs	r2, #12
 802a6b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a6b6:	4b19      	ldr	r3, [pc, #100]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6b8:	2200      	movs	r2, #0
 802a6ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802a6bc:	4b17      	ldr	r3, [pc, #92]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6be:	2200      	movs	r2, #0
 802a6c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a6c2:	4b16      	ldr	r3, [pc, #88]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6c4:	2200      	movs	r2, #0
 802a6c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a6c8:	4b14      	ldr	r3, [pc, #80]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6ca:	2200      	movs	r2, #0
 802a6cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 802a6ce:	4b13      	ldr	r3, [pc, #76]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6d0:	2200      	movs	r2, #0
 802a6d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802a6d4:	4811      	ldr	r0, [pc, #68]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6d6:	f00a fc01 	bl	8034edc <HAL_UART_Init>
 802a6da:	4603      	mov	r3, r0
 802a6dc:	2b00      	cmp	r3, #0
 802a6de:	d001      	beq.n	802a6e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 802a6e0:	f7ff fa1c 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a6e4:	2100      	movs	r1, #0
 802a6e6:	480d      	ldr	r0, [pc, #52]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6e8:	f00d f94e 	bl	8037988 <HAL_UARTEx_SetTxFifoThreshold>
 802a6ec:	4603      	mov	r3, r0
 802a6ee:	2b00      	cmp	r3, #0
 802a6f0:	d001      	beq.n	802a6f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 802a6f2:	f7ff fa13 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802a6f6:	2100      	movs	r1, #0
 802a6f8:	4808      	ldr	r0, [pc, #32]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a6fa:	f00d f983 	bl	8037a04 <HAL_UARTEx_SetRxFifoThreshold>
 802a6fe:	4603      	mov	r3, r0
 802a700:	2b00      	cmp	r3, #0
 802a702:	d001      	beq.n	802a708 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 802a704:	f7ff fa0a 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802a708:	4804      	ldr	r0, [pc, #16]	; (802a71c <MX_USART2_UART_Init+0x90>)
 802a70a:	f00d f904 	bl	8037916 <HAL_UARTEx_DisableFifoMode>
 802a70e:	4603      	mov	r3, r0
 802a710:	2b00      	cmp	r3, #0
 802a712:	d001      	beq.n	802a718 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 802a714:	f7ff fa02 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802a718:	bf00      	nop
 802a71a:	bd80      	pop	{r7, pc}
 802a71c:	24024aa4 	.word	0x24024aa4
 802a720:	40004400 	.word	0x40004400

0802a724 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 802a724:	b580      	push	{r7, lr}
 802a726:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802a728:	4b26      	ldr	r3, [pc, #152]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a72a:	4a27      	ldr	r2, [pc, #156]	; (802a7c8 <MX_USART3_UART_Init+0xa4>)
 802a72c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 802a72e:	4b25      	ldr	r3, [pc, #148]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a730:	4a26      	ldr	r2, [pc, #152]	; (802a7cc <MX_USART3_UART_Init+0xa8>)
 802a732:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 802a734:	4b23      	ldr	r3, [pc, #140]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a736:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802a73a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 802a73c:	4b21      	ldr	r3, [pc, #132]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a73e:	2200      	movs	r2, #0
 802a740:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 802a742:	4b20      	ldr	r3, [pc, #128]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802a748:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802a74a:	4b1e      	ldr	r3, [pc, #120]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a74c:	220c      	movs	r2, #12
 802a74e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802a750:	4b1c      	ldr	r3, [pc, #112]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a752:	2200      	movs	r2, #0
 802a754:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 802a756:	4b1b      	ldr	r3, [pc, #108]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a758:	2200      	movs	r2, #0
 802a75a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802a75c:	4b19      	ldr	r3, [pc, #100]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a75e:	2200      	movs	r2, #0
 802a760:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802a762:	4b18      	ldr	r3, [pc, #96]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a764:	2200      	movs	r2, #0
 802a766:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 802a768:	4b16      	ldr	r3, [pc, #88]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a76a:	2220      	movs	r2, #32
 802a76c:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 802a76e:	4b15      	ldr	r3, [pc, #84]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802a774:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802a776:	4813      	ldr	r0, [pc, #76]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a778:	f00a fbb0 	bl	8034edc <HAL_UART_Init>
 802a77c:	4603      	mov	r3, r0
 802a77e:	2b00      	cmp	r3, #0
 802a780:	d001      	beq.n	802a786 <MX_USART3_UART_Init+0x62>
  {
    Error_Handler();
 802a782:	f7ff f9cb 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a786:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 802a78a:	480e      	ldr	r0, [pc, #56]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a78c:	f00d f8fc 	bl	8037988 <HAL_UARTEx_SetTxFifoThreshold>
 802a790:	4603      	mov	r3, r0
 802a792:	2b00      	cmp	r3, #0
 802a794:	d001      	beq.n	802a79a <MX_USART3_UART_Init+0x76>
  {
    Error_Handler();
 802a796:	f7ff f9c1 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 802a79a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 802a79e:	4809      	ldr	r0, [pc, #36]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a7a0:	f00d f930 	bl	8037a04 <HAL_UARTEx_SetRxFifoThreshold>
 802a7a4:	4603      	mov	r3, r0
 802a7a6:	2b00      	cmp	r3, #0
 802a7a8:	d001      	beq.n	802a7ae <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 802a7aa:	f7ff f9b7 	bl	8029b1c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 802a7ae:	4805      	ldr	r0, [pc, #20]	; (802a7c4 <MX_USART3_UART_Init+0xa0>)
 802a7b0:	f00d f876 	bl	80378a0 <HAL_UARTEx_EnableFifoMode>
 802a7b4:	4603      	mov	r3, r0
 802a7b6:	2b00      	cmp	r3, #0
 802a7b8:	d001      	beq.n	802a7be <MX_USART3_UART_Init+0x9a>
  {
    Error_Handler();
 802a7ba:	f7ff f9af 	bl	8029b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802a7be:	bf00      	nop
 802a7c0:	bd80      	pop	{r7, pc}
 802a7c2:	bf00      	nop
 802a7c4:	24024b34 	.word	0x24024b34
 802a7c8:	40004800 	.word	0x40004800
 802a7cc:	001312d0 	.word	0x001312d0

0802a7d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 802a7d0:	b580      	push	{r7, lr}
 802a7d2:	b0c0      	sub	sp, #256	; 0x100
 802a7d4:	af00      	add	r7, sp, #0
 802a7d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802a7d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a7dc:	2200      	movs	r2, #0
 802a7de:	601a      	str	r2, [r3, #0]
 802a7e0:	605a      	str	r2, [r3, #4]
 802a7e2:	609a      	str	r2, [r3, #8]
 802a7e4:	60da      	str	r2, [r3, #12]
 802a7e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802a7e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a7ec:	22bc      	movs	r2, #188	; 0xbc
 802a7ee:	2100      	movs	r1, #0
 802a7f0:	4618      	mov	r0, r3
 802a7f2:	f011 fb55 	bl	803bea0 <memset>
  if(uartHandle->Instance==UART4)
 802a7f6:	687b      	ldr	r3, [r7, #4]
 802a7f8:	681b      	ldr	r3, [r3, #0]
 802a7fa:	4ac2      	ldr	r2, [pc, #776]	; (802ab04 <HAL_UART_MspInit+0x334>)
 802a7fc:	4293      	cmp	r3, r2
 802a7fe:	d14a      	bne.n	802a896 <HAL_UART_MspInit+0xc6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 802a800:	2302      	movs	r3, #2
 802a802:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a804:	2300      	movs	r3, #0
 802a806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a80a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a80e:	4618      	mov	r0, r3
 802a810:	f007 f9dc 	bl	8031bcc <HAL_RCCEx_PeriphCLKConfig>
 802a814:	4603      	mov	r3, r0
 802a816:	2b00      	cmp	r3, #0
 802a818:	d001      	beq.n	802a81e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 802a81a:	f7ff f97f 	bl	8029b1c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 802a81e:	4bba      	ldr	r3, [pc, #744]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a824:	4ab8      	ldr	r2, [pc, #736]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a826:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 802a82a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a82e:	4bb6      	ldr	r3, [pc, #728]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802a838:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802a83c:	4bb2      	ldr	r3, [pc, #712]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a83e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a842:	4ab1      	ldr	r2, [pc, #708]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a844:	f043 0301 	orr.w	r3, r3, #1
 802a848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a84c:	4bae      	ldr	r3, [pc, #696]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a84e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a852:	f003 0301 	and.w	r3, r3, #1
 802a856:	62bb      	str	r3, [r7, #40]	; 0x28
 802a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a85a:	2303      	movs	r3, #3
 802a85c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a860:	2302      	movs	r3, #2
 802a862:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a866:	2300      	movs	r3, #0
 802a868:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a86c:	2300      	movs	r3, #0
 802a86e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 802a872:	2308      	movs	r3, #8
 802a874:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802a878:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a87c:	4619      	mov	r1, r3
 802a87e:	48a3      	ldr	r0, [pc, #652]	; (802ab0c <HAL_UART_MspInit+0x33c>)
 802a880:	f003 fd54 	bl	802e32c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 802a884:	2200      	movs	r2, #0
 802a886:	2100      	movs	r1, #0
 802a888:	2034      	movs	r0, #52	; 0x34
 802a88a:	f000 fcfc 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 802a88e:	2034      	movs	r0, #52	; 0x34
 802a890:	f000 fd13 	bl	802b2ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 802a894:	e130      	b.n	802aaf8 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART7)
 802a896:	687b      	ldr	r3, [r7, #4]
 802a898:	681b      	ldr	r3, [r3, #0]
 802a89a:	4a9d      	ldr	r2, [pc, #628]	; (802ab10 <HAL_UART_MspInit+0x340>)
 802a89c:	4293      	cmp	r3, r2
 802a89e:	d143      	bne.n	802a928 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 802a8a0:	2302      	movs	r3, #2
 802a8a2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a8a4:	2300      	movs	r3, #0
 802a8a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a8aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a8ae:	4618      	mov	r0, r3
 802a8b0:	f007 f98c 	bl	8031bcc <HAL_RCCEx_PeriphCLKConfig>
 802a8b4:	4603      	mov	r3, r0
 802a8b6:	2b00      	cmp	r3, #0
 802a8b8:	d001      	beq.n	802a8be <HAL_UART_MspInit+0xee>
      Error_Handler();
 802a8ba:	f7ff f92f 	bl	8029b1c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 802a8be:	4b92      	ldr	r3, [pc, #584]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a8c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a8c4:	4a90      	ldr	r2, [pc, #576]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a8c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802a8ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a8ce:	4b8e      	ldr	r3, [pc, #568]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a8d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a8d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802a8d8:	627b      	str	r3, [r7, #36]	; 0x24
 802a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a8dc:	4b8a      	ldr	r3, [pc, #552]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a8de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8e2:	4a89      	ldr	r2, [pc, #548]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a8e4:	f043 0310 	orr.w	r3, r3, #16
 802a8e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a8ec:	4b86      	ldr	r3, [pc, #536]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a8ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a8f2:	f003 0310 	and.w	r3, r3, #16
 802a8f6:	623b      	str	r3, [r7, #32]
 802a8f8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 802a8fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 802a8fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a902:	2302      	movs	r3, #2
 802a904:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a908:	2300      	movs	r3, #0
 802a90a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a90e:	2300      	movs	r3, #0
 802a910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 802a914:	2307      	movs	r3, #7
 802a916:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a91a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a91e:	4619      	mov	r1, r3
 802a920:	487c      	ldr	r0, [pc, #496]	; (802ab14 <HAL_UART_MspInit+0x344>)
 802a922:	f003 fd03 	bl	802e32c <HAL_GPIO_Init>
}
 802a926:	e0e7      	b.n	802aaf8 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==UART8)
 802a928:	687b      	ldr	r3, [r7, #4]
 802a92a:	681b      	ldr	r3, [r3, #0]
 802a92c:	4a7a      	ldr	r2, [pc, #488]	; (802ab18 <HAL_UART_MspInit+0x348>)
 802a92e:	4293      	cmp	r3, r2
 802a930:	d14a      	bne.n	802a9c8 <HAL_UART_MspInit+0x1f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 802a932:	2302      	movs	r3, #2
 802a934:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a936:	2300      	movs	r3, #0
 802a938:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a93c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a940:	4618      	mov	r0, r3
 802a942:	f007 f943 	bl	8031bcc <HAL_RCCEx_PeriphCLKConfig>
 802a946:	4603      	mov	r3, r0
 802a948:	2b00      	cmp	r3, #0
 802a94a:	d001      	beq.n	802a950 <HAL_UART_MspInit+0x180>
      Error_Handler();
 802a94c:	f7ff f8e6 	bl	8029b1c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 802a950:	4b6d      	ldr	r3, [pc, #436]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a956:	4a6c      	ldr	r2, [pc, #432]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802a95c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802a960:	4b69      	ldr	r3, [pc, #420]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802a96a:	61fb      	str	r3, [r7, #28]
 802a96c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802a96e:	4b66      	ldr	r3, [pc, #408]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a974:	4a64      	ldr	r2, [pc, #400]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a976:	f043 0310 	orr.w	r3, r3, #16
 802a97a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802a97e:	4b62      	ldr	r3, [pc, #392]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802a984:	f003 0310 	and.w	r3, r3, #16
 802a988:	61bb      	str	r3, [r7, #24]
 802a98a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 802a98c:	2303      	movs	r3, #3
 802a98e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802a992:	2302      	movs	r3, #2
 802a994:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802a998:	2300      	movs	r3, #0
 802a99a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802a99e:	2300      	movs	r3, #0
 802a9a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 802a9a4:	2308      	movs	r3, #8
 802a9a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802a9aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802a9ae:	4619      	mov	r1, r3
 802a9b0:	4858      	ldr	r0, [pc, #352]	; (802ab14 <HAL_UART_MspInit+0x344>)
 802a9b2:	f003 fcbb 	bl	802e32c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 2, 0);
 802a9b6:	2200      	movs	r2, #0
 802a9b8:	2102      	movs	r1, #2
 802a9ba:	2053      	movs	r0, #83	; 0x53
 802a9bc:	f000 fc63 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 802a9c0:	2053      	movs	r0, #83	; 0x53
 802a9c2:	f000 fc7a 	bl	802b2ba <HAL_NVIC_EnableIRQ>
}
 802a9c6:	e097      	b.n	802aaf8 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART2)
 802a9c8:	687b      	ldr	r3, [r7, #4]
 802a9ca:	681b      	ldr	r3, [r3, #0]
 802a9cc:	4a53      	ldr	r2, [pc, #332]	; (802ab1c <HAL_UART_MspInit+0x34c>)
 802a9ce:	4293      	cmp	r3, r2
 802a9d0:	d142      	bne.n	802aa58 <HAL_UART_MspInit+0x288>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 802a9d2:	2302      	movs	r3, #2
 802a9d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802a9d6:	2300      	movs	r3, #0
 802a9d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802a9dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a9e0:	4618      	mov	r0, r3
 802a9e2:	f007 f8f3 	bl	8031bcc <HAL_RCCEx_PeriphCLKConfig>
 802a9e6:	4603      	mov	r3, r0
 802a9e8:	2b00      	cmp	r3, #0
 802a9ea:	d001      	beq.n	802a9f0 <HAL_UART_MspInit+0x220>
      Error_Handler();
 802a9ec:	f7ff f896 	bl	8029b1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 802a9f0:	4b45      	ldr	r3, [pc, #276]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a9f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802a9f6:	4a44      	ldr	r2, [pc, #272]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802a9f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802a9fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802aa00:	4b41      	ldr	r3, [pc, #260]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aa02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aa06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802aa0a:	617b      	str	r3, [r7, #20]
 802aa0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802aa0e:	4b3e      	ldr	r3, [pc, #248]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aa10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aa14:	4a3c      	ldr	r2, [pc, #240]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aa16:	f043 0301 	orr.w	r3, r3, #1
 802aa1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802aa1e:	4b3a      	ldr	r3, [pc, #232]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aa20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aa24:	f003 0301 	and.w	r3, r3, #1
 802aa28:	613b      	str	r3, [r7, #16]
 802aa2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 802aa2c:	230c      	movs	r3, #12
 802aa2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802aa32:	2302      	movs	r3, #2
 802aa34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aa38:	2300      	movs	r3, #0
 802aa3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802aa3e:	2300      	movs	r3, #0
 802aa40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802aa44:	2307      	movs	r3, #7
 802aa46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802aa4a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802aa4e:	4619      	mov	r1, r3
 802aa50:	482e      	ldr	r0, [pc, #184]	; (802ab0c <HAL_UART_MspInit+0x33c>)
 802aa52:	f003 fc6b 	bl	802e32c <HAL_GPIO_Init>
}
 802aa56:	e04f      	b.n	802aaf8 <HAL_UART_MspInit+0x328>
  else if(uartHandle->Instance==USART3)
 802aa58:	687b      	ldr	r3, [r7, #4]
 802aa5a:	681b      	ldr	r3, [r3, #0]
 802aa5c:	4a30      	ldr	r2, [pc, #192]	; (802ab20 <HAL_UART_MspInit+0x350>)
 802aa5e:	4293      	cmp	r3, r2
 802aa60:	d14a      	bne.n	802aaf8 <HAL_UART_MspInit+0x328>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 802aa62:	2302      	movs	r3, #2
 802aa64:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 802aa66:	2300      	movs	r3, #0
 802aa68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802aa6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802aa70:	4618      	mov	r0, r3
 802aa72:	f007 f8ab 	bl	8031bcc <HAL_RCCEx_PeriphCLKConfig>
 802aa76:	4603      	mov	r3, r0
 802aa78:	2b00      	cmp	r3, #0
 802aa7a:	d001      	beq.n	802aa80 <HAL_UART_MspInit+0x2b0>
      Error_Handler();
 802aa7c:	f7ff f84e 	bl	8029b1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 802aa80:	4b21      	ldr	r3, [pc, #132]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aa82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aa86:	4a20      	ldr	r2, [pc, #128]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aa88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802aa8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 802aa90:	4b1d      	ldr	r3, [pc, #116]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aa92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 802aa96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802aa9a:	60fb      	str	r3, [r7, #12]
 802aa9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802aa9e:	4b1a      	ldr	r3, [pc, #104]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aaa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aaa4:	4a18      	ldr	r2, [pc, #96]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aaa6:	f043 0308 	orr.w	r3, r3, #8
 802aaaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 802aaae:	4b16      	ldr	r3, [pc, #88]	; (802ab08 <HAL_UART_MspInit+0x338>)
 802aab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802aab4:	f003 0308 	and.w	r3, r3, #8
 802aab8:	60bb      	str	r3, [r7, #8]
 802aaba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802aabc:	f44f 7340 	mov.w	r3, #768	; 0x300
 802aac0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802aac4:	2302      	movs	r3, #2
 802aac6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aaca:	2300      	movs	r3, #0
 802aacc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802aad0:	2300      	movs	r3, #0
 802aad2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 802aad6:	2307      	movs	r3, #7
 802aad8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802aadc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802aae0:	4619      	mov	r1, r3
 802aae2:	4810      	ldr	r0, [pc, #64]	; (802ab24 <HAL_UART_MspInit+0x354>)
 802aae4:	f003 fc22 	bl	802e32c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 802aae8:	2200      	movs	r2, #0
 802aaea:	2100      	movs	r1, #0
 802aaec:	2027      	movs	r0, #39	; 0x27
 802aaee:	f000 fbca 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 802aaf2:	2027      	movs	r0, #39	; 0x27
 802aaf4:	f000 fbe1 	bl	802b2ba <HAL_NVIC_EnableIRQ>
}
 802aaf8:	bf00      	nop
 802aafa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802aafe:	46bd      	mov	sp, r7
 802ab00:	bd80      	pop	{r7, pc}
 802ab02:	bf00      	nop
 802ab04:	40004c00 	.word	0x40004c00
 802ab08:	58024400 	.word	0x58024400
 802ab0c:	58020000 	.word	0x58020000
 802ab10:	40007800 	.word	0x40007800
 802ab14:	58021000 	.word	0x58021000
 802ab18:	40007c00 	.word	0x40007c00
 802ab1c:	40004400 	.word	0x40004400
 802ab20:	40004800 	.word	0x40004800
 802ab24:	58020c00 	.word	0x58020c00

0802ab28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802ab28:	f8df d034 	ldr.w	sp, [pc, #52]	; 802ab60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 802ab2c:	f7ff fae2 	bl	802a0f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 802ab30:	480c      	ldr	r0, [pc, #48]	; (802ab64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802ab32:	490d      	ldr	r1, [pc, #52]	; (802ab68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802ab34:	4a0d      	ldr	r2, [pc, #52]	; (802ab6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 802ab36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 802ab38:	e002      	b.n	802ab40 <LoopCopyDataInit>

0802ab3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802ab3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802ab3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802ab3e:	3304      	adds	r3, #4

0802ab40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 802ab40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802ab42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802ab44:	d3f9      	bcc.n	802ab3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802ab46:	4a0a      	ldr	r2, [pc, #40]	; (802ab70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 802ab48:	4c0a      	ldr	r4, [pc, #40]	; (802ab74 <LoopFillZerobss+0x22>)
  movs r3, #0
 802ab4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802ab4c:	e001      	b.n	802ab52 <LoopFillZerobss>

0802ab4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802ab4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 802ab50:	3204      	adds	r2, #4

0802ab52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802ab52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802ab54:	d3fb      	bcc.n	802ab4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802ab56:	f011 f947 	bl	803bde8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802ab5a:	f7fe fe37 	bl	80297cc <main>
  bx  lr
 802ab5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 802ab60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 802ab64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 802ab68:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 802ab6c:	08058644 	.word	0x08058644
  ldr r2, =_sbss
 802ab70:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 802ab74:	240267e8 	.word	0x240267e8

0802ab78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802ab78:	e7fe      	b.n	802ab78 <ADC3_IRQHandler>
	...

0802ab7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802ab7c:	b580      	push	{r7, lr}
 802ab7e:	b082      	sub	sp, #8
 802ab80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802ab82:	2003      	movs	r0, #3
 802ab84:	f000 fb74 	bl	802b270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 802ab88:	f006 fe4a 	bl	8031820 <HAL_RCC_GetSysClockFreq>
 802ab8c:	4602      	mov	r2, r0
 802ab8e:	4b15      	ldr	r3, [pc, #84]	; (802abe4 <HAL_Init+0x68>)
 802ab90:	699b      	ldr	r3, [r3, #24]
 802ab92:	0a1b      	lsrs	r3, r3, #8
 802ab94:	f003 030f 	and.w	r3, r3, #15
 802ab98:	4913      	ldr	r1, [pc, #76]	; (802abe8 <HAL_Init+0x6c>)
 802ab9a:	5ccb      	ldrb	r3, [r1, r3]
 802ab9c:	f003 031f 	and.w	r3, r3, #31
 802aba0:	fa22 f303 	lsr.w	r3, r2, r3
 802aba4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 802aba6:	4b0f      	ldr	r3, [pc, #60]	; (802abe4 <HAL_Init+0x68>)
 802aba8:	699b      	ldr	r3, [r3, #24]
 802abaa:	f003 030f 	and.w	r3, r3, #15
 802abae:	4a0e      	ldr	r2, [pc, #56]	; (802abe8 <HAL_Init+0x6c>)
 802abb0:	5cd3      	ldrb	r3, [r2, r3]
 802abb2:	f003 031f 	and.w	r3, r3, #31
 802abb6:	687a      	ldr	r2, [r7, #4]
 802abb8:	fa22 f303 	lsr.w	r3, r2, r3
 802abbc:	4a0b      	ldr	r2, [pc, #44]	; (802abec <HAL_Init+0x70>)
 802abbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802abc0:	4a0b      	ldr	r2, [pc, #44]	; (802abf0 <HAL_Init+0x74>)
 802abc2:	687b      	ldr	r3, [r7, #4]
 802abc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802abc6:	200f      	movs	r0, #15
 802abc8:	f000 f814 	bl	802abf4 <HAL_InitTick>
 802abcc:	4603      	mov	r3, r0
 802abce:	2b00      	cmp	r3, #0
 802abd0:	d001      	beq.n	802abd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802abd2:	2301      	movs	r3, #1
 802abd4:	e002      	b.n	802abdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 802abd6:	f7ff f8e3 	bl	8029da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802abda:	2300      	movs	r3, #0
}
 802abdc:	4618      	mov	r0, r3
 802abde:	3708      	adds	r7, #8
 802abe0:	46bd      	mov	sp, r7
 802abe2:	bd80      	pop	{r7, pc}
 802abe4:	58024400 	.word	0x58024400
 802abe8:	08058518 	.word	0x08058518
 802abec:	24000008 	.word	0x24000008
 802abf0:	24000004 	.word	0x24000004

0802abf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802abf4:	b580      	push	{r7, lr}
 802abf6:	b082      	sub	sp, #8
 802abf8:	af00      	add	r7, sp, #0
 802abfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802abfc:	4b15      	ldr	r3, [pc, #84]	; (802ac54 <HAL_InitTick+0x60>)
 802abfe:	781b      	ldrb	r3, [r3, #0]
 802ac00:	2b00      	cmp	r3, #0
 802ac02:	d101      	bne.n	802ac08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 802ac04:	2301      	movs	r3, #1
 802ac06:	e021      	b.n	802ac4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 802ac08:	4b13      	ldr	r3, [pc, #76]	; (802ac58 <HAL_InitTick+0x64>)
 802ac0a:	681a      	ldr	r2, [r3, #0]
 802ac0c:	4b11      	ldr	r3, [pc, #68]	; (802ac54 <HAL_InitTick+0x60>)
 802ac0e:	781b      	ldrb	r3, [r3, #0]
 802ac10:	4619      	mov	r1, r3
 802ac12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802ac16:	fbb3 f3f1 	udiv	r3, r3, r1
 802ac1a:	fbb2 f3f3 	udiv	r3, r2, r3
 802ac1e:	4618      	mov	r0, r3
 802ac20:	f000 fb59 	bl	802b2d6 <HAL_SYSTICK_Config>
 802ac24:	4603      	mov	r3, r0
 802ac26:	2b00      	cmp	r3, #0
 802ac28:	d001      	beq.n	802ac2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802ac2a:	2301      	movs	r3, #1
 802ac2c:	e00e      	b.n	802ac4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802ac2e:	687b      	ldr	r3, [r7, #4]
 802ac30:	2b0f      	cmp	r3, #15
 802ac32:	d80a      	bhi.n	802ac4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802ac34:	2200      	movs	r2, #0
 802ac36:	6879      	ldr	r1, [r7, #4]
 802ac38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802ac3c:	f000 fb23 	bl	802b286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802ac40:	4a06      	ldr	r2, [pc, #24]	; (802ac5c <HAL_InitTick+0x68>)
 802ac42:	687b      	ldr	r3, [r7, #4]
 802ac44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802ac46:	2300      	movs	r3, #0
 802ac48:	e000      	b.n	802ac4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 802ac4a:	2301      	movs	r3, #1
}
 802ac4c:	4618      	mov	r0, r3
 802ac4e:	3708      	adds	r7, #8
 802ac50:	46bd      	mov	sp, r7
 802ac52:	bd80      	pop	{r7, pc}
 802ac54:	24000010 	.word	0x24000010
 802ac58:	24000004 	.word	0x24000004
 802ac5c:	2400000c 	.word	0x2400000c

0802ac60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802ac60:	b480      	push	{r7}
 802ac62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 802ac64:	4b06      	ldr	r3, [pc, #24]	; (802ac80 <HAL_IncTick+0x20>)
 802ac66:	781b      	ldrb	r3, [r3, #0]
 802ac68:	461a      	mov	r2, r3
 802ac6a:	4b06      	ldr	r3, [pc, #24]	; (802ac84 <HAL_IncTick+0x24>)
 802ac6c:	681b      	ldr	r3, [r3, #0]
 802ac6e:	4413      	add	r3, r2
 802ac70:	4a04      	ldr	r2, [pc, #16]	; (802ac84 <HAL_IncTick+0x24>)
 802ac72:	6013      	str	r3, [r2, #0]
}
 802ac74:	bf00      	nop
 802ac76:	46bd      	mov	sp, r7
 802ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac7c:	4770      	bx	lr
 802ac7e:	bf00      	nop
 802ac80:	24000010 	.word	0x24000010
 802ac84:	24024bc4 	.word	0x24024bc4

0802ac88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802ac88:	b480      	push	{r7}
 802ac8a:	af00      	add	r7, sp, #0
  return uwTick;
 802ac8c:	4b03      	ldr	r3, [pc, #12]	; (802ac9c <HAL_GetTick+0x14>)
 802ac8e:	681b      	ldr	r3, [r3, #0]
}
 802ac90:	4618      	mov	r0, r3
 802ac92:	46bd      	mov	sp, r7
 802ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac98:	4770      	bx	lr
 802ac9a:	bf00      	nop
 802ac9c:	24024bc4 	.word	0x24024bc4

0802aca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802aca0:	b580      	push	{r7, lr}
 802aca2:	b084      	sub	sp, #16
 802aca4:	af00      	add	r7, sp, #0
 802aca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802aca8:	f7ff ffee 	bl	802ac88 <HAL_GetTick>
 802acac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802acae:	687b      	ldr	r3, [r7, #4]
 802acb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802acb2:	68fb      	ldr	r3, [r7, #12]
 802acb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802acb8:	d005      	beq.n	802acc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802acba:	4b0a      	ldr	r3, [pc, #40]	; (802ace4 <HAL_Delay+0x44>)
 802acbc:	781b      	ldrb	r3, [r3, #0]
 802acbe:	461a      	mov	r2, r3
 802acc0:	68fb      	ldr	r3, [r7, #12]
 802acc2:	4413      	add	r3, r2
 802acc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 802acc6:	bf00      	nop
 802acc8:	f7ff ffde 	bl	802ac88 <HAL_GetTick>
 802accc:	4602      	mov	r2, r0
 802acce:	68bb      	ldr	r3, [r7, #8]
 802acd0:	1ad3      	subs	r3, r2, r3
 802acd2:	68fa      	ldr	r2, [r7, #12]
 802acd4:	429a      	cmp	r2, r3
 802acd6:	d8f7      	bhi.n	802acc8 <HAL_Delay+0x28>
  {
  }
}
 802acd8:	bf00      	nop
 802acda:	bf00      	nop
 802acdc:	3710      	adds	r7, #16
 802acde:	46bd      	mov	sp, r7
 802ace0:	bd80      	pop	{r7, pc}
 802ace2:	bf00      	nop
 802ace4:	24000010 	.word	0x24000010

0802ace8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 802ace8:	b480      	push	{r7}
 802acea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 802acec:	4b03      	ldr	r3, [pc, #12]	; (802acfc <HAL_GetREVID+0x14>)
 802acee:	681b      	ldr	r3, [r3, #0]
 802acf0:	0c1b      	lsrs	r3, r3, #16
}
 802acf2:	4618      	mov	r0, r3
 802acf4:	46bd      	mov	sp, r7
 802acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acfa:	4770      	bx	lr
 802acfc:	5c001000 	.word	0x5c001000

0802ad00 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 802ad00:	b580      	push	{r7, lr}
 802ad02:	b088      	sub	sp, #32
 802ad04:	af00      	add	r7, sp, #0
 802ad06:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 802ad08:	2300      	movs	r3, #0
 802ad0a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 802ad0c:	2300      	movs	r3, #0
 802ad0e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802ad10:	687b      	ldr	r3, [r7, #4]
 802ad12:	2b00      	cmp	r3, #0
 802ad14:	d102      	bne.n	802ad1c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 802ad16:	2301      	movs	r3, #1
 802ad18:	77fb      	strb	r3, [r7, #31]
 802ad1a:	e10e      	b.n	802af3a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802ad1c:	687b      	ldr	r3, [r7, #4]
 802ad1e:	681b      	ldr	r3, [r3, #0]
 802ad20:	681b      	ldr	r3, [r3, #0]
 802ad22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ad26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ad2a:	d102      	bne.n	802ad32 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 802ad2c:	2301      	movs	r3, #1
 802ad2e:	77fb      	strb	r3, [r7, #31]
 802ad30:	e103      	b.n	802af3a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 802ad32:	687b      	ldr	r3, [r7, #4]
 802ad34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802ad38:	b2db      	uxtb	r3, r3
 802ad3a:	2b00      	cmp	r3, #0
 802ad3c:	d109      	bne.n	802ad52 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 802ad3e:	687b      	ldr	r3, [r7, #4]
 802ad40:	2200      	movs	r2, #0
 802ad42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 802ad46:	687b      	ldr	r3, [r7, #4]
 802ad48:	2200      	movs	r2, #0
 802ad4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 802ad4c:	6878      	ldr	r0, [r7, #4]
 802ad4e:	f7fe fac3 	bl	80292d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 802ad52:	687b      	ldr	r3, [r7, #4]
 802ad54:	681b      	ldr	r3, [r3, #0]
 802ad56:	681b      	ldr	r3, [r3, #0]
 802ad58:	f003 0304 	and.w	r3, r3, #4
 802ad5c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ad5e:	687b      	ldr	r3, [r7, #4]
 802ad60:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 802ad62:	687b      	ldr	r3, [r7, #4]
 802ad64:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ad66:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 802ad68:	687b      	ldr	r3, [r7, #4]
 802ad6a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 802ad6c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 802ad6e:	687b      	ldr	r3, [r7, #4]
 802ad70:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 802ad72:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 802ad74:	687b      	ldr	r3, [r7, #4]
 802ad76:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 802ad78:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 802ad7a:	687b      	ldr	r3, [r7, #4]
 802ad7c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 802ad7e:	4313      	orrs	r3, r2
 802ad80:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 802ad82:	687b      	ldr	r3, [r7, #4]
 802ad84:	681b      	ldr	r3, [r3, #0]
 802ad86:	681a      	ldr	r2, [r3, #0]
 802ad88:	4b6e      	ldr	r3, [pc, #440]	; (802af44 <HAL_COMP_Init+0x244>)
 802ad8a:	4013      	ands	r3, r2
 802ad8c:	687a      	ldr	r2, [r7, #4]
 802ad8e:	6812      	ldr	r2, [r2, #0]
 802ad90:	6979      	ldr	r1, [r7, #20]
 802ad92:	430b      	orrs	r3, r1
 802ad94:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 802ad96:	687b      	ldr	r3, [r7, #4]
 802ad98:	685b      	ldr	r3, [r3, #4]
 802ad9a:	2b10      	cmp	r3, #16
 802ad9c:	d108      	bne.n	802adb0 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802ad9e:	687b      	ldr	r3, [r7, #4]
 802ada0:	681b      	ldr	r3, [r3, #0]
 802ada2:	681a      	ldr	r2, [r3, #0]
 802ada4:	687b      	ldr	r3, [r7, #4]
 802ada6:	681b      	ldr	r3, [r3, #0]
 802ada8:	f042 0210 	orr.w	r2, r2, #16
 802adac:	601a      	str	r2, [r3, #0]
 802adae:	e007      	b.n	802adc0 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 802adb0:	687b      	ldr	r3, [r7, #4]
 802adb2:	681b      	ldr	r3, [r3, #0]
 802adb4:	681a      	ldr	r2, [r3, #0]
 802adb6:	687b      	ldr	r3, [r7, #4]
 802adb8:	681b      	ldr	r3, [r3, #0]
 802adba:	f022 0210 	bic.w	r2, r2, #16
 802adbe:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 802adc0:	687b      	ldr	r3, [r7, #4]
 802adc2:	681b      	ldr	r3, [r3, #0]
 802adc4:	681b      	ldr	r3, [r3, #0]
 802adc6:	f003 0304 	and.w	r3, r3, #4
 802adca:	2b00      	cmp	r3, #0
 802adcc:	d016      	beq.n	802adfc <HAL_COMP_Init+0xfc>
 802adce:	69bb      	ldr	r3, [r7, #24]
 802add0:	2b00      	cmp	r3, #0
 802add2:	d013      	beq.n	802adfc <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802add4:	4b5c      	ldr	r3, [pc, #368]	; (802af48 <HAL_COMP_Init+0x248>)
 802add6:	681b      	ldr	r3, [r3, #0]
 802add8:	099b      	lsrs	r3, r3, #6
 802adda:	4a5c      	ldr	r2, [pc, #368]	; (802af4c <HAL_COMP_Init+0x24c>)
 802addc:	fba2 2303 	umull	r2, r3, r2, r3
 802ade0:	099b      	lsrs	r3, r3, #6
 802ade2:	1c5a      	adds	r2, r3, #1
 802ade4:	4613      	mov	r3, r2
 802ade6:	009b      	lsls	r3, r3, #2
 802ade8:	4413      	add	r3, r2
 802adea:	009b      	lsls	r3, r3, #2
 802adec:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 802adee:	e002      	b.n	802adf6 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 802adf0:	68fb      	ldr	r3, [r7, #12]
 802adf2:	3b01      	subs	r3, #1
 802adf4:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 802adf6:	68fb      	ldr	r3, [r7, #12]
 802adf8:	2b00      	cmp	r3, #0
 802adfa:	d1f9      	bne.n	802adf0 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802adfc:	687b      	ldr	r3, [r7, #4]
 802adfe:	681b      	ldr	r3, [r3, #0]
 802ae00:	4a53      	ldr	r2, [pc, #332]	; (802af50 <HAL_COMP_Init+0x250>)
 802ae02:	4293      	cmp	r3, r2
 802ae04:	d102      	bne.n	802ae0c <HAL_COMP_Init+0x10c>
 802ae06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802ae0a:	e001      	b.n	802ae10 <HAL_COMP_Init+0x110>
 802ae0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802ae10:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 802ae12:	687b      	ldr	r3, [r7, #4]
 802ae14:	6a1b      	ldr	r3, [r3, #32]
 802ae16:	f003 0303 	and.w	r3, r3, #3
 802ae1a:	2b00      	cmp	r3, #0
 802ae1c:	d06d      	beq.n	802aefa <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 802ae1e:	687b      	ldr	r3, [r7, #4]
 802ae20:	6a1b      	ldr	r3, [r3, #32]
 802ae22:	f003 0310 	and.w	r3, r3, #16
 802ae26:	2b00      	cmp	r3, #0
 802ae28:	d008      	beq.n	802ae3c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 802ae2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae2e:	681a      	ldr	r2, [r3, #0]
 802ae30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae34:	693b      	ldr	r3, [r7, #16]
 802ae36:	4313      	orrs	r3, r2
 802ae38:	600b      	str	r3, [r1, #0]
 802ae3a:	e008      	b.n	802ae4e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 802ae3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae40:	681a      	ldr	r2, [r3, #0]
 802ae42:	693b      	ldr	r3, [r7, #16]
 802ae44:	43db      	mvns	r3, r3
 802ae46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae4a:	4013      	ands	r3, r2
 802ae4c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 802ae4e:	687b      	ldr	r3, [r7, #4]
 802ae50:	6a1b      	ldr	r3, [r3, #32]
 802ae52:	f003 0320 	and.w	r3, r3, #32
 802ae56:	2b00      	cmp	r3, #0
 802ae58:	d008      	beq.n	802ae6c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 802ae5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae5e:	685a      	ldr	r2, [r3, #4]
 802ae60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae64:	693b      	ldr	r3, [r7, #16]
 802ae66:	4313      	orrs	r3, r2
 802ae68:	604b      	str	r3, [r1, #4]
 802ae6a:	e008      	b.n	802ae7e <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 802ae6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae70:	685a      	ldr	r2, [r3, #4]
 802ae72:	693b      	ldr	r3, [r7, #16]
 802ae74:	43db      	mvns	r3, r3
 802ae76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802ae7a:	4013      	ands	r3, r2
 802ae7c:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 802ae7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802ae82:	693b      	ldr	r3, [r7, #16]
 802ae84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 802ae88:	687b      	ldr	r3, [r7, #4]
 802ae8a:	6a1b      	ldr	r3, [r3, #32]
 802ae8c:	f003 0302 	and.w	r3, r3, #2
 802ae90:	2b00      	cmp	r3, #0
 802ae92:	d00a      	beq.n	802aeaa <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 802ae94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802ae98:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802ae9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aea0:	693b      	ldr	r3, [r7, #16]
 802aea2:	4313      	orrs	r3, r2
 802aea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 802aea8:	e00a      	b.n	802aec0 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 802aeaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aeae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802aeb2:	693b      	ldr	r3, [r7, #16]
 802aeb4:	43db      	mvns	r3, r3
 802aeb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aeba:	4013      	ands	r3, r2
 802aebc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 802aec0:	687b      	ldr	r3, [r7, #4]
 802aec2:	6a1b      	ldr	r3, [r3, #32]
 802aec4:	f003 0301 	and.w	r3, r3, #1
 802aec8:	2b00      	cmp	r3, #0
 802aeca:	d00a      	beq.n	802aee2 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 802aecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aed0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802aed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aed8:	693b      	ldr	r3, [r7, #16]
 802aeda:	4313      	orrs	r3, r2
 802aedc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802aee0:	e021      	b.n	802af26 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 802aee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aee6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802aeea:	693b      	ldr	r3, [r7, #16]
 802aeec:	43db      	mvns	r3, r3
 802aeee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802aef2:	4013      	ands	r3, r2
 802aef4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 802aef8:	e015      	b.n	802af26 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 802aefa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802aefe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 802af02:	693b      	ldr	r3, [r7, #16]
 802af04:	43db      	mvns	r3, r3
 802af06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802af0a:	4013      	ands	r3, r2
 802af0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 802af10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802af14:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 802af18:	693b      	ldr	r3, [r7, #16]
 802af1a:	43db      	mvns	r3, r3
 802af1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 802af20:	4013      	ands	r3, r2
 802af22:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 802af26:	687b      	ldr	r3, [r7, #4]
 802af28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802af2c:	b2db      	uxtb	r3, r3
 802af2e:	2b00      	cmp	r3, #0
 802af30:	d103      	bne.n	802af3a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 802af32:	687b      	ldr	r3, [r7, #4]
 802af34:	2201      	movs	r2, #1
 802af36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 802af3a:	7ffb      	ldrb	r3, [r7, #31]
}
 802af3c:	4618      	mov	r0, r3
 802af3e:	3720      	adds	r7, #32
 802af40:	46bd      	mov	sp, r7
 802af42:	bd80      	pop	{r7, pc}
 802af44:	f0e8cce1 	.word	0xf0e8cce1
 802af48:	24000004 	.word	0x24000004
 802af4c:	053e2d63 	.word	0x053e2d63
 802af50:	5800380c 	.word	0x5800380c

0802af54 <HAL_COMP_Start>:
  * @brief  Start the comparator. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{ 
 802af54:	b480      	push	{r7}
 802af56:	b085      	sub	sp, #20
 802af58:	af00      	add	r7, sp, #0
 802af5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 802af5c:	2300      	movs	r3, #0
 802af5e:	60bb      	str	r3, [r7, #8]

  HAL_StatusTypeDef status = HAL_OK;
 802af60:	2300      	movs	r3, #0
 802af62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 802af64:	687b      	ldr	r3, [r7, #4]
 802af66:	2b00      	cmp	r3, #0
 802af68:	d102      	bne.n	802af70 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 802af6a:	2301      	movs	r3, #1
 802af6c:	73fb      	strb	r3, [r7, #15]
 802af6e:	e030      	b.n	802afd2 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 802af70:	687b      	ldr	r3, [r7, #4]
 802af72:	681b      	ldr	r3, [r3, #0]
 802af74:	681b      	ldr	r3, [r3, #0]
 802af76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802af7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802af7e:	d102      	bne.n	802af86 <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 802af80:	2301      	movs	r3, #1
 802af82:	73fb      	strb	r3, [r7, #15]
 802af84:	e025      	b.n	802afd2 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 802af86:	687b      	ldr	r3, [r7, #4]
 802af88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 802af8c:	b2db      	uxtb	r3, r3
 802af8e:	2b01      	cmp	r3, #1
 802af90:	d11d      	bne.n	802afce <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_EN);
 802af92:	687b      	ldr	r3, [r7, #4]
 802af94:	681b      	ldr	r3, [r3, #0]
 802af96:	681a      	ldr	r2, [r3, #0]
 802af98:	687b      	ldr	r3, [r7, #4]
 802af9a:	681b      	ldr	r3, [r3, #0]
 802af9c:	f042 0201 	orr.w	r2, r2, #1
 802afa0:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 802afa2:	687b      	ldr	r3, [r7, #4]
 802afa4:	2202      	movs	r2, #2
 802afa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
     /* Delay for COMP startup time */
     /* Wait loop initialization and execution */
     /* Note: Variable divided by 2 to compensate partially    */
     /*       CPU processing cycles.                           */
    
     wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 802afaa:	4b0d      	ldr	r3, [pc, #52]	; (802afe0 <HAL_COMP_Start+0x8c>)
 802afac:	681b      	ldr	r3, [r3, #0]
 802afae:	099b      	lsrs	r3, r3, #6
 802afb0:	4a0c      	ldr	r2, [pc, #48]	; (802afe4 <HAL_COMP_Start+0x90>)
 802afb2:	fba2 2303 	umull	r2, r3, r2, r3
 802afb6:	099b      	lsrs	r3, r3, #6
 802afb8:	3301      	adds	r3, #1
 802afba:	00db      	lsls	r3, r3, #3
 802afbc:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802afbe:	e002      	b.n	802afc6 <HAL_COMP_Start+0x72>
     {
       wait_loop_index--;
 802afc0:	68bb      	ldr	r3, [r7, #8]
 802afc2:	3b01      	subs	r3, #1
 802afc4:	60bb      	str	r3, [r7, #8]
     while(wait_loop_index != 0UL)
 802afc6:	68bb      	ldr	r3, [r7, #8]
 802afc8:	2b00      	cmp	r3, #0
 802afca:	d1f9      	bne.n	802afc0 <HAL_COMP_Start+0x6c>
 802afcc:	e001      	b.n	802afd2 <HAL_COMP_Start+0x7e>
     }      
    }
    else
    {
      status = HAL_ERROR;
 802afce:	2301      	movs	r3, #1
 802afd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 802afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 802afd4:	4618      	mov	r0, r3
 802afd6:	3714      	adds	r7, #20
 802afd8:	46bd      	mov	sp, r7
 802afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afde:	4770      	bx	lr
 802afe0:	24000004 	.word	0x24000004
 802afe4:	053e2d63 	.word	0x053e2d63

0802afe8 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 802afe8:	b580      	push	{r7, lr}
 802afea:	b084      	sub	sp, #16
 802afec:	af00      	add	r7, sp, #0
 802afee:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 802aff0:	687b      	ldr	r3, [r7, #4]
 802aff2:	681b      	ldr	r3, [r3, #0]
 802aff4:	4a33      	ldr	r2, [pc, #204]	; (802b0c4 <HAL_COMP_IRQHandler+0xdc>)
 802aff6:	4293      	cmp	r3, r2
 802aff8:	d102      	bne.n	802b000 <HAL_COMP_IRQHandler+0x18>
 802affa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 802affe:	e001      	b.n	802b004 <HAL_COMP_IRQHandler+0x1c>
 802b000:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 802b004:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 802b006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802b00a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 802b00e:	68fb      	ldr	r3, [r7, #12]
 802b010:	4013      	ands	r3, r2
 802b012:	2b00      	cmp	r3, #0
 802b014:	d014      	beq.n	802b040 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 802b016:	4b2c      	ldr	r3, [pc, #176]	; (802b0c8 <HAL_COMP_IRQHandler+0xe0>)
 802b018:	681b      	ldr	r3, [r3, #0]
 802b01a:	f003 0310 	and.w	r3, r3, #16
 802b01e:	2b00      	cmp	r3, #0
 802b020:	d006      	beq.n	802b030 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 802b022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802b026:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 802b02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 802b02e:	e004      	b.n	802b03a <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 802b030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802b034:	68fb      	ldr	r3, [r7, #12]
 802b036:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802b03a:	6878      	ldr	r0, [r7, #4]
 802b03c:	f7fe fcfc 	bl	8029a38 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 802b040:	687b      	ldr	r3, [r7, #4]
 802b042:	681b      	ldr	r3, [r3, #0]
 802b044:	681b      	ldr	r3, [r3, #0]
 802b046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b04a:	2b40      	cmp	r3, #64	; 0x40
 802b04c:	d136      	bne.n	802b0bc <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 802b04e:	4b1f      	ldr	r3, [pc, #124]	; (802b0cc <HAL_COMP_IRQHandler+0xe4>)
 802b050:	681b      	ldr	r3, [r3, #0]
 802b052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802b056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802b05a:	d101      	bne.n	802b060 <HAL_COMP_IRQHandler+0x78>
 802b05c:	2301      	movs	r3, #1
 802b05e:	e000      	b.n	802b062 <HAL_COMP_IRQHandler+0x7a>
 802b060:	2300      	movs	r3, #0
 802b062:	2b00      	cmp	r3, #0
 802b064:	d00b      	beq.n	802b07e <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 802b066:	4b19      	ldr	r3, [pc, #100]	; (802b0cc <HAL_COMP_IRQHandler+0xe4>)
 802b068:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 802b06c:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802b06e:	687b      	ldr	r3, [r7, #4]
 802b070:	681b      	ldr	r3, [r3, #0]
 802b072:	681a      	ldr	r2, [r3, #0]
 802b074:	687b      	ldr	r3, [r7, #4]
 802b076:	681b      	ldr	r3, [r3, #0]
 802b078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b07c:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 802b07e:	4b13      	ldr	r3, [pc, #76]	; (802b0cc <HAL_COMP_IRQHandler+0xe4>)
 802b080:	681b      	ldr	r3, [r3, #0]
 802b082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802b086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 802b08a:	d101      	bne.n	802b090 <HAL_COMP_IRQHandler+0xa8>
 802b08c:	2301      	movs	r3, #1
 802b08e:	e000      	b.n	802b092 <HAL_COMP_IRQHandler+0xaa>
 802b090:	2300      	movs	r3, #0
 802b092:	2b00      	cmp	r3, #0
 802b094:	d00b      	beq.n	802b0ae <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 802b096:	4b0d      	ldr	r3, [pc, #52]	; (802b0cc <HAL_COMP_IRQHandler+0xe4>)
 802b098:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802b09c:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 802b09e:	687b      	ldr	r3, [r7, #4]
 802b0a0:	681b      	ldr	r3, [r3, #0]
 802b0a2:	681a      	ldr	r2, [r3, #0]
 802b0a4:	687b      	ldr	r3, [r7, #4]
 802b0a6:	681b      	ldr	r3, [r3, #0]
 802b0a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802b0ac:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 802b0ae:	687b      	ldr	r3, [r7, #4]
 802b0b0:	2201      	movs	r2, #1
 802b0b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 802b0b6:	6878      	ldr	r0, [r7, #4]
 802b0b8:	f7fe fcbe 	bl	8029a38 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 802b0bc:	bf00      	nop
 802b0be:	3710      	adds	r7, #16
 802b0c0:	46bd      	mov	sp, r7
 802b0c2:	bd80      	pop	{r7, pc}
 802b0c4:	5800380c 	.word	0x5800380c
 802b0c8:	58003810 	.word	0x58003810
 802b0cc:	58003800 	.word	0x58003800

0802b0d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b0d0:	b480      	push	{r7}
 802b0d2:	b085      	sub	sp, #20
 802b0d4:	af00      	add	r7, sp, #0
 802b0d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802b0d8:	687b      	ldr	r3, [r7, #4]
 802b0da:	f003 0307 	and.w	r3, r3, #7
 802b0de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802b0e0:	4b0b      	ldr	r3, [pc, #44]	; (802b110 <__NVIC_SetPriorityGrouping+0x40>)
 802b0e2:	68db      	ldr	r3, [r3, #12]
 802b0e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802b0e6:	68ba      	ldr	r2, [r7, #8]
 802b0e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 802b0ec:	4013      	ands	r3, r2
 802b0ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802b0f0:	68fb      	ldr	r3, [r7, #12]
 802b0f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802b0f4:	68bb      	ldr	r3, [r7, #8]
 802b0f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 802b0f8:	4b06      	ldr	r3, [pc, #24]	; (802b114 <__NVIC_SetPriorityGrouping+0x44>)
 802b0fa:	4313      	orrs	r3, r2
 802b0fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802b0fe:	4a04      	ldr	r2, [pc, #16]	; (802b110 <__NVIC_SetPriorityGrouping+0x40>)
 802b100:	68bb      	ldr	r3, [r7, #8]
 802b102:	60d3      	str	r3, [r2, #12]
}
 802b104:	bf00      	nop
 802b106:	3714      	adds	r7, #20
 802b108:	46bd      	mov	sp, r7
 802b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b10e:	4770      	bx	lr
 802b110:	e000ed00 	.word	0xe000ed00
 802b114:	05fa0000 	.word	0x05fa0000

0802b118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802b118:	b480      	push	{r7}
 802b11a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802b11c:	4b04      	ldr	r3, [pc, #16]	; (802b130 <__NVIC_GetPriorityGrouping+0x18>)
 802b11e:	68db      	ldr	r3, [r3, #12]
 802b120:	0a1b      	lsrs	r3, r3, #8
 802b122:	f003 0307 	and.w	r3, r3, #7
}
 802b126:	4618      	mov	r0, r3
 802b128:	46bd      	mov	sp, r7
 802b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b12e:	4770      	bx	lr
 802b130:	e000ed00 	.word	0xe000ed00

0802b134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b134:	b480      	push	{r7}
 802b136:	b083      	sub	sp, #12
 802b138:	af00      	add	r7, sp, #0
 802b13a:	4603      	mov	r3, r0
 802b13c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802b13e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b142:	2b00      	cmp	r3, #0
 802b144:	db0b      	blt.n	802b15e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802b146:	88fb      	ldrh	r3, [r7, #6]
 802b148:	f003 021f 	and.w	r2, r3, #31
 802b14c:	4907      	ldr	r1, [pc, #28]	; (802b16c <__NVIC_EnableIRQ+0x38>)
 802b14e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b152:	095b      	lsrs	r3, r3, #5
 802b154:	2001      	movs	r0, #1
 802b156:	fa00 f202 	lsl.w	r2, r0, r2
 802b15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 802b15e:	bf00      	nop
 802b160:	370c      	adds	r7, #12
 802b162:	46bd      	mov	sp, r7
 802b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b168:	4770      	bx	lr
 802b16a:	bf00      	nop
 802b16c:	e000e100 	.word	0xe000e100

0802b170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802b170:	b480      	push	{r7}
 802b172:	b083      	sub	sp, #12
 802b174:	af00      	add	r7, sp, #0
 802b176:	4603      	mov	r3, r0
 802b178:	6039      	str	r1, [r7, #0]
 802b17a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 802b17c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b180:	2b00      	cmp	r3, #0
 802b182:	db0a      	blt.n	802b19a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802b184:	683b      	ldr	r3, [r7, #0]
 802b186:	b2da      	uxtb	r2, r3
 802b188:	490c      	ldr	r1, [pc, #48]	; (802b1bc <__NVIC_SetPriority+0x4c>)
 802b18a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b18e:	0112      	lsls	r2, r2, #4
 802b190:	b2d2      	uxtb	r2, r2
 802b192:	440b      	add	r3, r1
 802b194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802b198:	e00a      	b.n	802b1b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802b19a:	683b      	ldr	r3, [r7, #0]
 802b19c:	b2da      	uxtb	r2, r3
 802b19e:	4908      	ldr	r1, [pc, #32]	; (802b1c0 <__NVIC_SetPriority+0x50>)
 802b1a0:	88fb      	ldrh	r3, [r7, #6]
 802b1a2:	f003 030f 	and.w	r3, r3, #15
 802b1a6:	3b04      	subs	r3, #4
 802b1a8:	0112      	lsls	r2, r2, #4
 802b1aa:	b2d2      	uxtb	r2, r2
 802b1ac:	440b      	add	r3, r1
 802b1ae:	761a      	strb	r2, [r3, #24]
}
 802b1b0:	bf00      	nop
 802b1b2:	370c      	adds	r7, #12
 802b1b4:	46bd      	mov	sp, r7
 802b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1ba:	4770      	bx	lr
 802b1bc:	e000e100 	.word	0xe000e100
 802b1c0:	e000ed00 	.word	0xe000ed00

0802b1c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b1c4:	b480      	push	{r7}
 802b1c6:	b089      	sub	sp, #36	; 0x24
 802b1c8:	af00      	add	r7, sp, #0
 802b1ca:	60f8      	str	r0, [r7, #12]
 802b1cc:	60b9      	str	r1, [r7, #8]
 802b1ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802b1d0:	68fb      	ldr	r3, [r7, #12]
 802b1d2:	f003 0307 	and.w	r3, r3, #7
 802b1d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802b1d8:	69fb      	ldr	r3, [r7, #28]
 802b1da:	f1c3 0307 	rsb	r3, r3, #7
 802b1de:	2b04      	cmp	r3, #4
 802b1e0:	bf28      	it	cs
 802b1e2:	2304      	movcs	r3, #4
 802b1e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802b1e6:	69fb      	ldr	r3, [r7, #28]
 802b1e8:	3304      	adds	r3, #4
 802b1ea:	2b06      	cmp	r3, #6
 802b1ec:	d902      	bls.n	802b1f4 <NVIC_EncodePriority+0x30>
 802b1ee:	69fb      	ldr	r3, [r7, #28]
 802b1f0:	3b03      	subs	r3, #3
 802b1f2:	e000      	b.n	802b1f6 <NVIC_EncodePriority+0x32>
 802b1f4:	2300      	movs	r3, #0
 802b1f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b1f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802b1fc:	69bb      	ldr	r3, [r7, #24]
 802b1fe:	fa02 f303 	lsl.w	r3, r2, r3
 802b202:	43da      	mvns	r2, r3
 802b204:	68bb      	ldr	r3, [r7, #8]
 802b206:	401a      	ands	r2, r3
 802b208:	697b      	ldr	r3, [r7, #20]
 802b20a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802b20c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802b210:	697b      	ldr	r3, [r7, #20]
 802b212:	fa01 f303 	lsl.w	r3, r1, r3
 802b216:	43d9      	mvns	r1, r3
 802b218:	687b      	ldr	r3, [r7, #4]
 802b21a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802b21c:	4313      	orrs	r3, r2
         );
}
 802b21e:	4618      	mov	r0, r3
 802b220:	3724      	adds	r7, #36	; 0x24
 802b222:	46bd      	mov	sp, r7
 802b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b228:	4770      	bx	lr
	...

0802b22c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802b22c:	b580      	push	{r7, lr}
 802b22e:	b082      	sub	sp, #8
 802b230:	af00      	add	r7, sp, #0
 802b232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802b234:	687b      	ldr	r3, [r7, #4]
 802b236:	3b01      	subs	r3, #1
 802b238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802b23c:	d301      	bcc.n	802b242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802b23e:	2301      	movs	r3, #1
 802b240:	e00f      	b.n	802b262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802b242:	4a0a      	ldr	r2, [pc, #40]	; (802b26c <SysTick_Config+0x40>)
 802b244:	687b      	ldr	r3, [r7, #4]
 802b246:	3b01      	subs	r3, #1
 802b248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802b24a:	210f      	movs	r1, #15
 802b24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b250:	f7ff ff8e 	bl	802b170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802b254:	4b05      	ldr	r3, [pc, #20]	; (802b26c <SysTick_Config+0x40>)
 802b256:	2200      	movs	r2, #0
 802b258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802b25a:	4b04      	ldr	r3, [pc, #16]	; (802b26c <SysTick_Config+0x40>)
 802b25c:	2207      	movs	r2, #7
 802b25e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802b260:	2300      	movs	r3, #0
}
 802b262:	4618      	mov	r0, r3
 802b264:	3708      	adds	r7, #8
 802b266:	46bd      	mov	sp, r7
 802b268:	bd80      	pop	{r7, pc}
 802b26a:	bf00      	nop
 802b26c:	e000e010 	.word	0xe000e010

0802b270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802b270:	b580      	push	{r7, lr}
 802b272:	b082      	sub	sp, #8
 802b274:	af00      	add	r7, sp, #0
 802b276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802b278:	6878      	ldr	r0, [r7, #4]
 802b27a:	f7ff ff29 	bl	802b0d0 <__NVIC_SetPriorityGrouping>
}
 802b27e:	bf00      	nop
 802b280:	3708      	adds	r7, #8
 802b282:	46bd      	mov	sp, r7
 802b284:	bd80      	pop	{r7, pc}

0802b286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802b286:	b580      	push	{r7, lr}
 802b288:	b086      	sub	sp, #24
 802b28a:	af00      	add	r7, sp, #0
 802b28c:	4603      	mov	r3, r0
 802b28e:	60b9      	str	r1, [r7, #8]
 802b290:	607a      	str	r2, [r7, #4]
 802b292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 802b294:	f7ff ff40 	bl	802b118 <__NVIC_GetPriorityGrouping>
 802b298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802b29a:	687a      	ldr	r2, [r7, #4]
 802b29c:	68b9      	ldr	r1, [r7, #8]
 802b29e:	6978      	ldr	r0, [r7, #20]
 802b2a0:	f7ff ff90 	bl	802b1c4 <NVIC_EncodePriority>
 802b2a4:	4602      	mov	r2, r0
 802b2a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802b2aa:	4611      	mov	r1, r2
 802b2ac:	4618      	mov	r0, r3
 802b2ae:	f7ff ff5f 	bl	802b170 <__NVIC_SetPriority>
}
 802b2b2:	bf00      	nop
 802b2b4:	3718      	adds	r7, #24
 802b2b6:	46bd      	mov	sp, r7
 802b2b8:	bd80      	pop	{r7, pc}

0802b2ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802b2ba:	b580      	push	{r7, lr}
 802b2bc:	b082      	sub	sp, #8
 802b2be:	af00      	add	r7, sp, #0
 802b2c0:	4603      	mov	r3, r0
 802b2c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802b2c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802b2c8:	4618      	mov	r0, r3
 802b2ca:	f7ff ff33 	bl	802b134 <__NVIC_EnableIRQ>
}
 802b2ce:	bf00      	nop
 802b2d0:	3708      	adds	r7, #8
 802b2d2:	46bd      	mov	sp, r7
 802b2d4:	bd80      	pop	{r7, pc}

0802b2d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802b2d6:	b580      	push	{r7, lr}
 802b2d8:	b082      	sub	sp, #8
 802b2da:	af00      	add	r7, sp, #0
 802b2dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802b2de:	6878      	ldr	r0, [r7, #4]
 802b2e0:	f7ff ffa4 	bl	802b22c <SysTick_Config>
 802b2e4:	4603      	mov	r3, r0
}
 802b2e6:	4618      	mov	r0, r3
 802b2e8:	3708      	adds	r7, #8
 802b2ea:	46bd      	mov	sp, r7
 802b2ec:	bd80      	pop	{r7, pc}

0802b2ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 802b2ee:	b580      	push	{r7, lr}
 802b2f0:	b082      	sub	sp, #8
 802b2f2:	af00      	add	r7, sp, #0
 802b2f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 802b2f6:	687b      	ldr	r3, [r7, #4]
 802b2f8:	2b00      	cmp	r3, #0
 802b2fa:	d101      	bne.n	802b300 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 802b2fc:	2301      	movs	r3, #1
 802b2fe:	e014      	b.n	802b32a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 802b300:	687b      	ldr	r3, [r7, #4]
 802b302:	791b      	ldrb	r3, [r3, #4]
 802b304:	b2db      	uxtb	r3, r3
 802b306:	2b00      	cmp	r3, #0
 802b308:	d105      	bne.n	802b316 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802b30a:	687b      	ldr	r3, [r7, #4]
 802b30c:	2200      	movs	r2, #0
 802b30e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 802b310:	6878      	ldr	r0, [r7, #4]
 802b312:	f7fe f861 	bl	80293d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 802b316:	687b      	ldr	r3, [r7, #4]
 802b318:	2202      	movs	r2, #2
 802b31a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802b31c:	687b      	ldr	r3, [r7, #4]
 802b31e:	2200      	movs	r2, #0
 802b320:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 802b322:	687b      	ldr	r3, [r7, #4]
 802b324:	2201      	movs	r2, #1
 802b326:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 802b328:	2300      	movs	r3, #0
}
 802b32a:	4618      	mov	r0, r3
 802b32c:	3708      	adds	r7, #8
 802b32e:	46bd      	mov	sp, r7
 802b330:	bd80      	pop	{r7, pc}

0802b332 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 802b332:	b480      	push	{r7}
 802b334:	b083      	sub	sp, #12
 802b336:	af00      	add	r7, sp, #0
 802b338:	6078      	str	r0, [r7, #4]
 802b33a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b33c:	687b      	ldr	r3, [r7, #4]
 802b33e:	795b      	ldrb	r3, [r3, #5]
 802b340:	2b01      	cmp	r3, #1
 802b342:	d101      	bne.n	802b348 <HAL_DAC_Start+0x16>
 802b344:	2302      	movs	r3, #2
 802b346:	e040      	b.n	802b3ca <HAL_DAC_Start+0x98>
 802b348:	687b      	ldr	r3, [r7, #4]
 802b34a:	2201      	movs	r2, #1
 802b34c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b34e:	687b      	ldr	r3, [r7, #4]
 802b350:	2202      	movs	r2, #2
 802b352:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802b354:	687b      	ldr	r3, [r7, #4]
 802b356:	681b      	ldr	r3, [r3, #0]
 802b358:	6819      	ldr	r1, [r3, #0]
 802b35a:	683b      	ldr	r3, [r7, #0]
 802b35c:	f003 0310 	and.w	r3, r3, #16
 802b360:	2201      	movs	r2, #1
 802b362:	409a      	lsls	r2, r3
 802b364:	687b      	ldr	r3, [r7, #4]
 802b366:	681b      	ldr	r3, [r3, #0]
 802b368:	430a      	orrs	r2, r1
 802b36a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 802b36c:	683b      	ldr	r3, [r7, #0]
 802b36e:	2b00      	cmp	r3, #0
 802b370:	d10f      	bne.n	802b392 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 802b372:	687b      	ldr	r3, [r7, #4]
 802b374:	681b      	ldr	r3, [r3, #0]
 802b376:	681b      	ldr	r3, [r3, #0]
 802b378:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 802b37c:	2b02      	cmp	r3, #2
 802b37e:	d11d      	bne.n	802b3bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 802b380:	687b      	ldr	r3, [r7, #4]
 802b382:	681b      	ldr	r3, [r3, #0]
 802b384:	685a      	ldr	r2, [r3, #4]
 802b386:	687b      	ldr	r3, [r7, #4]
 802b388:	681b      	ldr	r3, [r3, #0]
 802b38a:	f042 0201 	orr.w	r2, r2, #1
 802b38e:	605a      	str	r2, [r3, #4]
 802b390:	e014      	b.n	802b3bc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 802b392:	687b      	ldr	r3, [r7, #4]
 802b394:	681b      	ldr	r3, [r3, #0]
 802b396:	681b      	ldr	r3, [r3, #0]
 802b398:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 802b39c:	683b      	ldr	r3, [r7, #0]
 802b39e:	f003 0310 	and.w	r3, r3, #16
 802b3a2:	2102      	movs	r1, #2
 802b3a4:	fa01 f303 	lsl.w	r3, r1, r3
 802b3a8:	429a      	cmp	r2, r3
 802b3aa:	d107      	bne.n	802b3bc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 802b3ac:	687b      	ldr	r3, [r7, #4]
 802b3ae:	681b      	ldr	r3, [r3, #0]
 802b3b0:	685a      	ldr	r2, [r3, #4]
 802b3b2:	687b      	ldr	r3, [r7, #4]
 802b3b4:	681b      	ldr	r3, [r3, #0]
 802b3b6:	f042 0202 	orr.w	r2, r2, #2
 802b3ba:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b3bc:	687b      	ldr	r3, [r7, #4]
 802b3be:	2201      	movs	r2, #1
 802b3c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b3c2:	687b      	ldr	r3, [r7, #4]
 802b3c4:	2200      	movs	r2, #0
 802b3c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b3c8:	2300      	movs	r3, #0
}
 802b3ca:	4618      	mov	r0, r3
 802b3cc:	370c      	adds	r7, #12
 802b3ce:	46bd      	mov	sp, r7
 802b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b3d4:	4770      	bx	lr

0802b3d6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 802b3d6:	b480      	push	{r7}
 802b3d8:	b087      	sub	sp, #28
 802b3da:	af00      	add	r7, sp, #0
 802b3dc:	60f8      	str	r0, [r7, #12]
 802b3de:	60b9      	str	r1, [r7, #8]
 802b3e0:	607a      	str	r2, [r7, #4]
 802b3e2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 802b3e4:	2300      	movs	r3, #0
 802b3e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 802b3e8:	68fb      	ldr	r3, [r7, #12]
 802b3ea:	681b      	ldr	r3, [r3, #0]
 802b3ec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 802b3ee:	68bb      	ldr	r3, [r7, #8]
 802b3f0:	2b00      	cmp	r3, #0
 802b3f2:	d105      	bne.n	802b400 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 802b3f4:	697a      	ldr	r2, [r7, #20]
 802b3f6:	687b      	ldr	r3, [r7, #4]
 802b3f8:	4413      	add	r3, r2
 802b3fa:	3308      	adds	r3, #8
 802b3fc:	617b      	str	r3, [r7, #20]
 802b3fe:	e004      	b.n	802b40a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 802b400:	697a      	ldr	r2, [r7, #20]
 802b402:	687b      	ldr	r3, [r7, #4]
 802b404:	4413      	add	r3, r2
 802b406:	3314      	adds	r3, #20
 802b408:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 802b40a:	697b      	ldr	r3, [r7, #20]
 802b40c:	461a      	mov	r2, r3
 802b40e:	683b      	ldr	r3, [r7, #0]
 802b410:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 802b412:	2300      	movs	r3, #0
}
 802b414:	4618      	mov	r0, r3
 802b416:	371c      	adds	r7, #28
 802b418:	46bd      	mov	sp, r7
 802b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b41e:	4770      	bx	lr

0802b420 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 802b420:	b580      	push	{r7, lr}
 802b422:	b088      	sub	sp, #32
 802b424:	af00      	add	r7, sp, #0
 802b426:	60f8      	str	r0, [r7, #12]
 802b428:	60b9      	str	r1, [r7, #8]
 802b42a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 802b42c:	68fb      	ldr	r3, [r7, #12]
 802b42e:	795b      	ldrb	r3, [r3, #5]
 802b430:	2b01      	cmp	r3, #1
 802b432:	d101      	bne.n	802b438 <HAL_DAC_ConfigChannel+0x18>
 802b434:	2302      	movs	r3, #2
 802b436:	e11d      	b.n	802b674 <HAL_DAC_ConfigChannel+0x254>
 802b438:	68fb      	ldr	r3, [r7, #12]
 802b43a:	2201      	movs	r2, #1
 802b43c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802b43e:	68fb      	ldr	r3, [r7, #12]
 802b440:	2202      	movs	r2, #2
 802b442:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 802b444:	68bb      	ldr	r3, [r7, #8]
 802b446:	681b      	ldr	r3, [r3, #0]
 802b448:	2b04      	cmp	r3, #4
 802b44a:	d174      	bne.n	802b536 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 802b44c:	f7ff fc1c 	bl	802ac88 <HAL_GetTick>
 802b450:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 802b452:	687b      	ldr	r3, [r7, #4]
 802b454:	2b00      	cmp	r3, #0
 802b456:	d134      	bne.n	802b4c2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b458:	e011      	b.n	802b47e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b45a:	f7ff fc15 	bl	802ac88 <HAL_GetTick>
 802b45e:	4602      	mov	r2, r0
 802b460:	69bb      	ldr	r3, [r7, #24]
 802b462:	1ad3      	subs	r3, r2, r3
 802b464:	2b01      	cmp	r3, #1
 802b466:	d90a      	bls.n	802b47e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b468:	68fb      	ldr	r3, [r7, #12]
 802b46a:	691b      	ldr	r3, [r3, #16]
 802b46c:	f043 0208 	orr.w	r2, r3, #8
 802b470:	68fb      	ldr	r3, [r7, #12]
 802b472:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b474:	68fb      	ldr	r3, [r7, #12]
 802b476:	2203      	movs	r2, #3
 802b478:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b47a:	2303      	movs	r3, #3
 802b47c:	e0fa      	b.n	802b674 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 802b47e:	68fb      	ldr	r3, [r7, #12]
 802b480:	681b      	ldr	r3, [r3, #0]
 802b482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802b484:	4b7d      	ldr	r3, [pc, #500]	; (802b67c <HAL_DAC_ConfigChannel+0x25c>)
 802b486:	4013      	ands	r3, r2
 802b488:	2b00      	cmp	r3, #0
 802b48a:	d1e6      	bne.n	802b45a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 802b48c:	2001      	movs	r0, #1
 802b48e:	f7ff fc07 	bl	802aca0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b492:	68fb      	ldr	r3, [r7, #12]
 802b494:	681b      	ldr	r3, [r3, #0]
 802b496:	68ba      	ldr	r2, [r7, #8]
 802b498:	6992      	ldr	r2, [r2, #24]
 802b49a:	641a      	str	r2, [r3, #64]	; 0x40
 802b49c:	e01e      	b.n	802b4dc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 802b49e:	f7ff fbf3 	bl	802ac88 <HAL_GetTick>
 802b4a2:	4602      	mov	r2, r0
 802b4a4:	69bb      	ldr	r3, [r7, #24]
 802b4a6:	1ad3      	subs	r3, r2, r3
 802b4a8:	2b01      	cmp	r3, #1
 802b4aa:	d90a      	bls.n	802b4c2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 802b4ac:	68fb      	ldr	r3, [r7, #12]
 802b4ae:	691b      	ldr	r3, [r3, #16]
 802b4b0:	f043 0208 	orr.w	r2, r3, #8
 802b4b4:	68fb      	ldr	r3, [r7, #12]
 802b4b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 802b4b8:	68fb      	ldr	r3, [r7, #12]
 802b4ba:	2203      	movs	r2, #3
 802b4bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 802b4be:	2303      	movs	r3, #3
 802b4c0:	e0d8      	b.n	802b674 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 802b4c2:	68fb      	ldr	r3, [r7, #12]
 802b4c4:	681b      	ldr	r3, [r3, #0]
 802b4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802b4c8:	2b00      	cmp	r3, #0
 802b4ca:	dbe8      	blt.n	802b49e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 802b4cc:	2001      	movs	r0, #1
 802b4ce:	f7ff fbe7 	bl	802aca0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 802b4d2:	68fb      	ldr	r3, [r7, #12]
 802b4d4:	681b      	ldr	r3, [r3, #0]
 802b4d6:	68ba      	ldr	r2, [r7, #8]
 802b4d8:	6992      	ldr	r2, [r2, #24]
 802b4da:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 802b4dc:	68fb      	ldr	r3, [r7, #12]
 802b4de:	681b      	ldr	r3, [r3, #0]
 802b4e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802b4e2:	687b      	ldr	r3, [r7, #4]
 802b4e4:	f003 0310 	and.w	r3, r3, #16
 802b4e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802b4ec:	fa01 f303 	lsl.w	r3, r1, r3
 802b4f0:	43db      	mvns	r3, r3
 802b4f2:	ea02 0103 	and.w	r1, r2, r3
 802b4f6:	68bb      	ldr	r3, [r7, #8]
 802b4f8:	69da      	ldr	r2, [r3, #28]
 802b4fa:	687b      	ldr	r3, [r7, #4]
 802b4fc:	f003 0310 	and.w	r3, r3, #16
 802b500:	409a      	lsls	r2, r3
 802b502:	68fb      	ldr	r3, [r7, #12]
 802b504:	681b      	ldr	r3, [r3, #0]
 802b506:	430a      	orrs	r2, r1
 802b508:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 802b50a:	68fb      	ldr	r3, [r7, #12]
 802b50c:	681b      	ldr	r3, [r3, #0]
 802b50e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802b510:	687b      	ldr	r3, [r7, #4]
 802b512:	f003 0310 	and.w	r3, r3, #16
 802b516:	21ff      	movs	r1, #255	; 0xff
 802b518:	fa01 f303 	lsl.w	r3, r1, r3
 802b51c:	43db      	mvns	r3, r3
 802b51e:	ea02 0103 	and.w	r1, r2, r3
 802b522:	68bb      	ldr	r3, [r7, #8]
 802b524:	6a1a      	ldr	r2, [r3, #32]
 802b526:	687b      	ldr	r3, [r7, #4]
 802b528:	f003 0310 	and.w	r3, r3, #16
 802b52c:	409a      	lsls	r2, r3
 802b52e:	68fb      	ldr	r3, [r7, #12]
 802b530:	681b      	ldr	r3, [r3, #0]
 802b532:	430a      	orrs	r2, r1
 802b534:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 802b536:	68bb      	ldr	r3, [r7, #8]
 802b538:	691b      	ldr	r3, [r3, #16]
 802b53a:	2b01      	cmp	r3, #1
 802b53c:	d11d      	bne.n	802b57a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 802b53e:	68fb      	ldr	r3, [r7, #12]
 802b540:	681b      	ldr	r3, [r3, #0]
 802b542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802b544:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 802b546:	687b      	ldr	r3, [r7, #4]
 802b548:	f003 0310 	and.w	r3, r3, #16
 802b54c:	221f      	movs	r2, #31
 802b54e:	fa02 f303 	lsl.w	r3, r2, r3
 802b552:	43db      	mvns	r3, r3
 802b554:	697a      	ldr	r2, [r7, #20]
 802b556:	4013      	ands	r3, r2
 802b558:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 802b55a:	68bb      	ldr	r3, [r7, #8]
 802b55c:	695b      	ldr	r3, [r3, #20]
 802b55e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b560:	687b      	ldr	r3, [r7, #4]
 802b562:	f003 0310 	and.w	r3, r3, #16
 802b566:	693a      	ldr	r2, [r7, #16]
 802b568:	fa02 f303 	lsl.w	r3, r2, r3
 802b56c:	697a      	ldr	r2, [r7, #20]
 802b56e:	4313      	orrs	r3, r2
 802b570:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 802b572:	68fb      	ldr	r3, [r7, #12]
 802b574:	681b      	ldr	r3, [r3, #0]
 802b576:	697a      	ldr	r2, [r7, #20]
 802b578:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 802b57a:	68fb      	ldr	r3, [r7, #12]
 802b57c:	681b      	ldr	r3, [r3, #0]
 802b57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b580:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 802b582:	687b      	ldr	r3, [r7, #4]
 802b584:	f003 0310 	and.w	r3, r3, #16
 802b588:	2207      	movs	r2, #7
 802b58a:	fa02 f303 	lsl.w	r3, r2, r3
 802b58e:	43db      	mvns	r3, r3
 802b590:	697a      	ldr	r2, [r7, #20]
 802b592:	4013      	ands	r3, r2
 802b594:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 802b596:	68bb      	ldr	r3, [r7, #8]
 802b598:	68db      	ldr	r3, [r3, #12]
 802b59a:	2b01      	cmp	r3, #1
 802b59c:	d102      	bne.n	802b5a4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 802b59e:	2300      	movs	r3, #0
 802b5a0:	61fb      	str	r3, [r7, #28]
 802b5a2:	e00f      	b.n	802b5c4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 802b5a4:	68bb      	ldr	r3, [r7, #8]
 802b5a6:	68db      	ldr	r3, [r3, #12]
 802b5a8:	2b02      	cmp	r3, #2
 802b5aa:	d102      	bne.n	802b5b2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 802b5ac:	2301      	movs	r3, #1
 802b5ae:	61fb      	str	r3, [r7, #28]
 802b5b0:	e008      	b.n	802b5c4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 802b5b2:	68bb      	ldr	r3, [r7, #8]
 802b5b4:	689b      	ldr	r3, [r3, #8]
 802b5b6:	2b00      	cmp	r3, #0
 802b5b8:	d102      	bne.n	802b5c0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 802b5ba:	2301      	movs	r3, #1
 802b5bc:	61fb      	str	r3, [r7, #28]
 802b5be:	e001      	b.n	802b5c4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 802b5c0:	2300      	movs	r3, #0
 802b5c2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 802b5c4:	68bb      	ldr	r3, [r7, #8]
 802b5c6:	681a      	ldr	r2, [r3, #0]
 802b5c8:	68bb      	ldr	r3, [r7, #8]
 802b5ca:	689b      	ldr	r3, [r3, #8]
 802b5cc:	4313      	orrs	r3, r2
 802b5ce:	69fa      	ldr	r2, [r7, #28]
 802b5d0:	4313      	orrs	r3, r2
 802b5d2:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b5d4:	687b      	ldr	r3, [r7, #4]
 802b5d6:	f003 0310 	and.w	r3, r3, #16
 802b5da:	693a      	ldr	r2, [r7, #16]
 802b5dc:	fa02 f303 	lsl.w	r3, r2, r3
 802b5e0:	697a      	ldr	r2, [r7, #20]
 802b5e2:	4313      	orrs	r3, r2
 802b5e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 802b5e6:	68fb      	ldr	r3, [r7, #12]
 802b5e8:	681b      	ldr	r3, [r3, #0]
 802b5ea:	697a      	ldr	r2, [r7, #20]
 802b5ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 802b5ee:	68fb      	ldr	r3, [r7, #12]
 802b5f0:	681b      	ldr	r3, [r3, #0]
 802b5f2:	6819      	ldr	r1, [r3, #0]
 802b5f4:	687b      	ldr	r3, [r7, #4]
 802b5f6:	f003 0310 	and.w	r3, r3, #16
 802b5fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802b5fe:	fa02 f303 	lsl.w	r3, r2, r3
 802b602:	43da      	mvns	r2, r3
 802b604:	68fb      	ldr	r3, [r7, #12]
 802b606:	681b      	ldr	r3, [r3, #0]
 802b608:	400a      	ands	r2, r1
 802b60a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 802b60c:	68fb      	ldr	r3, [r7, #12]
 802b60e:	681b      	ldr	r3, [r3, #0]
 802b610:	681b      	ldr	r3, [r3, #0]
 802b612:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 802b614:	687b      	ldr	r3, [r7, #4]
 802b616:	f003 0310 	and.w	r3, r3, #16
 802b61a:	f640 72fe 	movw	r2, #4094	; 0xffe
 802b61e:	fa02 f303 	lsl.w	r3, r2, r3
 802b622:	43db      	mvns	r3, r3
 802b624:	697a      	ldr	r2, [r7, #20]
 802b626:	4013      	ands	r3, r2
 802b628:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 802b62a:	68bb      	ldr	r3, [r7, #8]
 802b62c:	685b      	ldr	r3, [r3, #4]
 802b62e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 802b630:	687b      	ldr	r3, [r7, #4]
 802b632:	f003 0310 	and.w	r3, r3, #16
 802b636:	693a      	ldr	r2, [r7, #16]
 802b638:	fa02 f303 	lsl.w	r3, r2, r3
 802b63c:	697a      	ldr	r2, [r7, #20]
 802b63e:	4313      	orrs	r3, r2
 802b640:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 802b642:	68fb      	ldr	r3, [r7, #12]
 802b644:	681b      	ldr	r3, [r3, #0]
 802b646:	697a      	ldr	r2, [r7, #20]
 802b648:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 802b64a:	68fb      	ldr	r3, [r7, #12]
 802b64c:	681b      	ldr	r3, [r3, #0]
 802b64e:	6819      	ldr	r1, [r3, #0]
 802b650:	687b      	ldr	r3, [r7, #4]
 802b652:	f003 0310 	and.w	r3, r3, #16
 802b656:	22c0      	movs	r2, #192	; 0xc0
 802b658:	fa02 f303 	lsl.w	r3, r2, r3
 802b65c:	43da      	mvns	r2, r3
 802b65e:	68fb      	ldr	r3, [r7, #12]
 802b660:	681b      	ldr	r3, [r3, #0]
 802b662:	400a      	ands	r2, r1
 802b664:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 802b666:	68fb      	ldr	r3, [r7, #12]
 802b668:	2201      	movs	r2, #1
 802b66a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802b66c:	68fb      	ldr	r3, [r7, #12]
 802b66e:	2200      	movs	r2, #0
 802b670:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802b672:	2300      	movs	r3, #0
}
 802b674:	4618      	mov	r0, r3
 802b676:	3720      	adds	r7, #32
 802b678:	46bd      	mov	sp, r7
 802b67a:	bd80      	pop	{r7, pc}
 802b67c:	20008000 	.word	0x20008000

0802b680 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 802b680:	b580      	push	{r7, lr}
 802b682:	b086      	sub	sp, #24
 802b684:	af00      	add	r7, sp, #0
 802b686:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 802b688:	f7ff fafe 	bl	802ac88 <HAL_GetTick>
 802b68c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802b68e:	687b      	ldr	r3, [r7, #4]
 802b690:	2b00      	cmp	r3, #0
 802b692:	d101      	bne.n	802b698 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 802b694:	2301      	movs	r3, #1
 802b696:	e316      	b.n	802bcc6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802b698:	687b      	ldr	r3, [r7, #4]
 802b69a:	681b      	ldr	r3, [r3, #0]
 802b69c:	4a66      	ldr	r2, [pc, #408]	; (802b838 <HAL_DMA_Init+0x1b8>)
 802b69e:	4293      	cmp	r3, r2
 802b6a0:	d04a      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6a2:	687b      	ldr	r3, [r7, #4]
 802b6a4:	681b      	ldr	r3, [r3, #0]
 802b6a6:	4a65      	ldr	r2, [pc, #404]	; (802b83c <HAL_DMA_Init+0x1bc>)
 802b6a8:	4293      	cmp	r3, r2
 802b6aa:	d045      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6ac:	687b      	ldr	r3, [r7, #4]
 802b6ae:	681b      	ldr	r3, [r3, #0]
 802b6b0:	4a63      	ldr	r2, [pc, #396]	; (802b840 <HAL_DMA_Init+0x1c0>)
 802b6b2:	4293      	cmp	r3, r2
 802b6b4:	d040      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6b6:	687b      	ldr	r3, [r7, #4]
 802b6b8:	681b      	ldr	r3, [r3, #0]
 802b6ba:	4a62      	ldr	r2, [pc, #392]	; (802b844 <HAL_DMA_Init+0x1c4>)
 802b6bc:	4293      	cmp	r3, r2
 802b6be:	d03b      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6c0:	687b      	ldr	r3, [r7, #4]
 802b6c2:	681b      	ldr	r3, [r3, #0]
 802b6c4:	4a60      	ldr	r2, [pc, #384]	; (802b848 <HAL_DMA_Init+0x1c8>)
 802b6c6:	4293      	cmp	r3, r2
 802b6c8:	d036      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6ca:	687b      	ldr	r3, [r7, #4]
 802b6cc:	681b      	ldr	r3, [r3, #0]
 802b6ce:	4a5f      	ldr	r2, [pc, #380]	; (802b84c <HAL_DMA_Init+0x1cc>)
 802b6d0:	4293      	cmp	r3, r2
 802b6d2:	d031      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6d4:	687b      	ldr	r3, [r7, #4]
 802b6d6:	681b      	ldr	r3, [r3, #0]
 802b6d8:	4a5d      	ldr	r2, [pc, #372]	; (802b850 <HAL_DMA_Init+0x1d0>)
 802b6da:	4293      	cmp	r3, r2
 802b6dc:	d02c      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6de:	687b      	ldr	r3, [r7, #4]
 802b6e0:	681b      	ldr	r3, [r3, #0]
 802b6e2:	4a5c      	ldr	r2, [pc, #368]	; (802b854 <HAL_DMA_Init+0x1d4>)
 802b6e4:	4293      	cmp	r3, r2
 802b6e6:	d027      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6e8:	687b      	ldr	r3, [r7, #4]
 802b6ea:	681b      	ldr	r3, [r3, #0]
 802b6ec:	4a5a      	ldr	r2, [pc, #360]	; (802b858 <HAL_DMA_Init+0x1d8>)
 802b6ee:	4293      	cmp	r3, r2
 802b6f0:	d022      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6f2:	687b      	ldr	r3, [r7, #4]
 802b6f4:	681b      	ldr	r3, [r3, #0]
 802b6f6:	4a59      	ldr	r2, [pc, #356]	; (802b85c <HAL_DMA_Init+0x1dc>)
 802b6f8:	4293      	cmp	r3, r2
 802b6fa:	d01d      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b6fc:	687b      	ldr	r3, [r7, #4]
 802b6fe:	681b      	ldr	r3, [r3, #0]
 802b700:	4a57      	ldr	r2, [pc, #348]	; (802b860 <HAL_DMA_Init+0x1e0>)
 802b702:	4293      	cmp	r3, r2
 802b704:	d018      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b706:	687b      	ldr	r3, [r7, #4]
 802b708:	681b      	ldr	r3, [r3, #0]
 802b70a:	4a56      	ldr	r2, [pc, #344]	; (802b864 <HAL_DMA_Init+0x1e4>)
 802b70c:	4293      	cmp	r3, r2
 802b70e:	d013      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b710:	687b      	ldr	r3, [r7, #4]
 802b712:	681b      	ldr	r3, [r3, #0]
 802b714:	4a54      	ldr	r2, [pc, #336]	; (802b868 <HAL_DMA_Init+0x1e8>)
 802b716:	4293      	cmp	r3, r2
 802b718:	d00e      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b71a:	687b      	ldr	r3, [r7, #4]
 802b71c:	681b      	ldr	r3, [r3, #0]
 802b71e:	4a53      	ldr	r2, [pc, #332]	; (802b86c <HAL_DMA_Init+0x1ec>)
 802b720:	4293      	cmp	r3, r2
 802b722:	d009      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b724:	687b      	ldr	r3, [r7, #4]
 802b726:	681b      	ldr	r3, [r3, #0]
 802b728:	4a51      	ldr	r2, [pc, #324]	; (802b870 <HAL_DMA_Init+0x1f0>)
 802b72a:	4293      	cmp	r3, r2
 802b72c:	d004      	beq.n	802b738 <HAL_DMA_Init+0xb8>
 802b72e:	687b      	ldr	r3, [r7, #4]
 802b730:	681b      	ldr	r3, [r3, #0]
 802b732:	4a50      	ldr	r2, [pc, #320]	; (802b874 <HAL_DMA_Init+0x1f4>)
 802b734:	4293      	cmp	r3, r2
 802b736:	d101      	bne.n	802b73c <HAL_DMA_Init+0xbc>
 802b738:	2301      	movs	r3, #1
 802b73a:	e000      	b.n	802b73e <HAL_DMA_Init+0xbe>
 802b73c:	2300      	movs	r3, #0
 802b73e:	2b00      	cmp	r3, #0
 802b740:	f000 813b 	beq.w	802b9ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802b744:	687b      	ldr	r3, [r7, #4]
 802b746:	2202      	movs	r2, #2
 802b748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802b74c:	687b      	ldr	r3, [r7, #4]
 802b74e:	2200      	movs	r2, #0
 802b750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802b754:	687b      	ldr	r3, [r7, #4]
 802b756:	681b      	ldr	r3, [r3, #0]
 802b758:	4a37      	ldr	r2, [pc, #220]	; (802b838 <HAL_DMA_Init+0x1b8>)
 802b75a:	4293      	cmp	r3, r2
 802b75c:	d04a      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b75e:	687b      	ldr	r3, [r7, #4]
 802b760:	681b      	ldr	r3, [r3, #0]
 802b762:	4a36      	ldr	r2, [pc, #216]	; (802b83c <HAL_DMA_Init+0x1bc>)
 802b764:	4293      	cmp	r3, r2
 802b766:	d045      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b768:	687b      	ldr	r3, [r7, #4]
 802b76a:	681b      	ldr	r3, [r3, #0]
 802b76c:	4a34      	ldr	r2, [pc, #208]	; (802b840 <HAL_DMA_Init+0x1c0>)
 802b76e:	4293      	cmp	r3, r2
 802b770:	d040      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b772:	687b      	ldr	r3, [r7, #4]
 802b774:	681b      	ldr	r3, [r3, #0]
 802b776:	4a33      	ldr	r2, [pc, #204]	; (802b844 <HAL_DMA_Init+0x1c4>)
 802b778:	4293      	cmp	r3, r2
 802b77a:	d03b      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b77c:	687b      	ldr	r3, [r7, #4]
 802b77e:	681b      	ldr	r3, [r3, #0]
 802b780:	4a31      	ldr	r2, [pc, #196]	; (802b848 <HAL_DMA_Init+0x1c8>)
 802b782:	4293      	cmp	r3, r2
 802b784:	d036      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b786:	687b      	ldr	r3, [r7, #4]
 802b788:	681b      	ldr	r3, [r3, #0]
 802b78a:	4a30      	ldr	r2, [pc, #192]	; (802b84c <HAL_DMA_Init+0x1cc>)
 802b78c:	4293      	cmp	r3, r2
 802b78e:	d031      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b790:	687b      	ldr	r3, [r7, #4]
 802b792:	681b      	ldr	r3, [r3, #0]
 802b794:	4a2e      	ldr	r2, [pc, #184]	; (802b850 <HAL_DMA_Init+0x1d0>)
 802b796:	4293      	cmp	r3, r2
 802b798:	d02c      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b79a:	687b      	ldr	r3, [r7, #4]
 802b79c:	681b      	ldr	r3, [r3, #0]
 802b79e:	4a2d      	ldr	r2, [pc, #180]	; (802b854 <HAL_DMA_Init+0x1d4>)
 802b7a0:	4293      	cmp	r3, r2
 802b7a2:	d027      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b7a4:	687b      	ldr	r3, [r7, #4]
 802b7a6:	681b      	ldr	r3, [r3, #0]
 802b7a8:	4a2b      	ldr	r2, [pc, #172]	; (802b858 <HAL_DMA_Init+0x1d8>)
 802b7aa:	4293      	cmp	r3, r2
 802b7ac:	d022      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b7ae:	687b      	ldr	r3, [r7, #4]
 802b7b0:	681b      	ldr	r3, [r3, #0]
 802b7b2:	4a2a      	ldr	r2, [pc, #168]	; (802b85c <HAL_DMA_Init+0x1dc>)
 802b7b4:	4293      	cmp	r3, r2
 802b7b6:	d01d      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b7b8:	687b      	ldr	r3, [r7, #4]
 802b7ba:	681b      	ldr	r3, [r3, #0]
 802b7bc:	4a28      	ldr	r2, [pc, #160]	; (802b860 <HAL_DMA_Init+0x1e0>)
 802b7be:	4293      	cmp	r3, r2
 802b7c0:	d018      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b7c2:	687b      	ldr	r3, [r7, #4]
 802b7c4:	681b      	ldr	r3, [r3, #0]
 802b7c6:	4a27      	ldr	r2, [pc, #156]	; (802b864 <HAL_DMA_Init+0x1e4>)
 802b7c8:	4293      	cmp	r3, r2
 802b7ca:	d013      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b7cc:	687b      	ldr	r3, [r7, #4]
 802b7ce:	681b      	ldr	r3, [r3, #0]
 802b7d0:	4a25      	ldr	r2, [pc, #148]	; (802b868 <HAL_DMA_Init+0x1e8>)
 802b7d2:	4293      	cmp	r3, r2
 802b7d4:	d00e      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b7d6:	687b      	ldr	r3, [r7, #4]
 802b7d8:	681b      	ldr	r3, [r3, #0]
 802b7da:	4a24      	ldr	r2, [pc, #144]	; (802b86c <HAL_DMA_Init+0x1ec>)
 802b7dc:	4293      	cmp	r3, r2
 802b7de:	d009      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b7e0:	687b      	ldr	r3, [r7, #4]
 802b7e2:	681b      	ldr	r3, [r3, #0]
 802b7e4:	4a22      	ldr	r2, [pc, #136]	; (802b870 <HAL_DMA_Init+0x1f0>)
 802b7e6:	4293      	cmp	r3, r2
 802b7e8:	d004      	beq.n	802b7f4 <HAL_DMA_Init+0x174>
 802b7ea:	687b      	ldr	r3, [r7, #4]
 802b7ec:	681b      	ldr	r3, [r3, #0]
 802b7ee:	4a21      	ldr	r2, [pc, #132]	; (802b874 <HAL_DMA_Init+0x1f4>)
 802b7f0:	4293      	cmp	r3, r2
 802b7f2:	d108      	bne.n	802b806 <HAL_DMA_Init+0x186>
 802b7f4:	687b      	ldr	r3, [r7, #4]
 802b7f6:	681b      	ldr	r3, [r3, #0]
 802b7f8:	681a      	ldr	r2, [r3, #0]
 802b7fa:	687b      	ldr	r3, [r7, #4]
 802b7fc:	681b      	ldr	r3, [r3, #0]
 802b7fe:	f022 0201 	bic.w	r2, r2, #1
 802b802:	601a      	str	r2, [r3, #0]
 802b804:	e007      	b.n	802b816 <HAL_DMA_Init+0x196>
 802b806:	687b      	ldr	r3, [r7, #4]
 802b808:	681b      	ldr	r3, [r3, #0]
 802b80a:	681a      	ldr	r2, [r3, #0]
 802b80c:	687b      	ldr	r3, [r7, #4]
 802b80e:	681b      	ldr	r3, [r3, #0]
 802b810:	f022 0201 	bic.w	r2, r2, #1
 802b814:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b816:	e02f      	b.n	802b878 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802b818:	f7ff fa36 	bl	802ac88 <HAL_GetTick>
 802b81c:	4602      	mov	r2, r0
 802b81e:	693b      	ldr	r3, [r7, #16]
 802b820:	1ad3      	subs	r3, r2, r3
 802b822:	2b05      	cmp	r3, #5
 802b824:	d928      	bls.n	802b878 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802b826:	687b      	ldr	r3, [r7, #4]
 802b828:	2220      	movs	r2, #32
 802b82a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802b82c:	687b      	ldr	r3, [r7, #4]
 802b82e:	2203      	movs	r2, #3
 802b830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 802b834:	2301      	movs	r3, #1
 802b836:	e246      	b.n	802bcc6 <HAL_DMA_Init+0x646>
 802b838:	40020010 	.word	0x40020010
 802b83c:	40020028 	.word	0x40020028
 802b840:	40020040 	.word	0x40020040
 802b844:	40020058 	.word	0x40020058
 802b848:	40020070 	.word	0x40020070
 802b84c:	40020088 	.word	0x40020088
 802b850:	400200a0 	.word	0x400200a0
 802b854:	400200b8 	.word	0x400200b8
 802b858:	40020410 	.word	0x40020410
 802b85c:	40020428 	.word	0x40020428
 802b860:	40020440 	.word	0x40020440
 802b864:	40020458 	.word	0x40020458
 802b868:	40020470 	.word	0x40020470
 802b86c:	40020488 	.word	0x40020488
 802b870:	400204a0 	.word	0x400204a0
 802b874:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802b878:	687b      	ldr	r3, [r7, #4]
 802b87a:	681b      	ldr	r3, [r3, #0]
 802b87c:	681b      	ldr	r3, [r3, #0]
 802b87e:	f003 0301 	and.w	r3, r3, #1
 802b882:	2b00      	cmp	r3, #0
 802b884:	d1c8      	bne.n	802b818 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 802b886:	687b      	ldr	r3, [r7, #4]
 802b888:	681b      	ldr	r3, [r3, #0]
 802b88a:	681b      	ldr	r3, [r3, #0]
 802b88c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802b88e:	697a      	ldr	r2, [r7, #20]
 802b890:	4b83      	ldr	r3, [pc, #524]	; (802baa0 <HAL_DMA_Init+0x420>)
 802b892:	4013      	ands	r3, r2
 802b894:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 802b896:	687b      	ldr	r3, [r7, #4]
 802b898:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b89a:	687b      	ldr	r3, [r7, #4]
 802b89c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 802b89e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b8a0:	687b      	ldr	r3, [r7, #4]
 802b8a2:	691b      	ldr	r3, [r3, #16]
 802b8a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b8a6:	687b      	ldr	r3, [r7, #4]
 802b8a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802b8aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b8ac:	687b      	ldr	r3, [r7, #4]
 802b8ae:	699b      	ldr	r3, [r3, #24]
 802b8b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b8b2:	687b      	ldr	r3, [r7, #4]
 802b8b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802b8b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 802b8b8:	687b      	ldr	r3, [r7, #4]
 802b8ba:	6a1b      	ldr	r3, [r3, #32]
 802b8bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 802b8be:	697a      	ldr	r2, [r7, #20]
 802b8c0:	4313      	orrs	r3, r2
 802b8c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b8c4:	687b      	ldr	r3, [r7, #4]
 802b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b8c8:	2b04      	cmp	r3, #4
 802b8ca:	d107      	bne.n	802b8dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 802b8cc:	687b      	ldr	r3, [r7, #4]
 802b8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802b8d0:	687b      	ldr	r3, [r7, #4]
 802b8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8d4:	4313      	orrs	r3, r2
 802b8d6:	697a      	ldr	r2, [r7, #20]
 802b8d8:	4313      	orrs	r3, r2
 802b8da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 802b8dc:	4b71      	ldr	r3, [pc, #452]	; (802baa4 <HAL_DMA_Init+0x424>)
 802b8de:	681a      	ldr	r2, [r3, #0]
 802b8e0:	4b71      	ldr	r3, [pc, #452]	; (802baa8 <HAL_DMA_Init+0x428>)
 802b8e2:	4013      	ands	r3, r2
 802b8e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802b8e8:	d328      	bcc.n	802b93c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 802b8ea:	687b      	ldr	r3, [r7, #4]
 802b8ec:	685b      	ldr	r3, [r3, #4]
 802b8ee:	2b28      	cmp	r3, #40	; 0x28
 802b8f0:	d903      	bls.n	802b8fa <HAL_DMA_Init+0x27a>
 802b8f2:	687b      	ldr	r3, [r7, #4]
 802b8f4:	685b      	ldr	r3, [r3, #4]
 802b8f6:	2b2e      	cmp	r3, #46	; 0x2e
 802b8f8:	d917      	bls.n	802b92a <HAL_DMA_Init+0x2aa>
 802b8fa:	687b      	ldr	r3, [r7, #4]
 802b8fc:	685b      	ldr	r3, [r3, #4]
 802b8fe:	2b3e      	cmp	r3, #62	; 0x3e
 802b900:	d903      	bls.n	802b90a <HAL_DMA_Init+0x28a>
 802b902:	687b      	ldr	r3, [r7, #4]
 802b904:	685b      	ldr	r3, [r3, #4]
 802b906:	2b42      	cmp	r3, #66	; 0x42
 802b908:	d90f      	bls.n	802b92a <HAL_DMA_Init+0x2aa>
 802b90a:	687b      	ldr	r3, [r7, #4]
 802b90c:	685b      	ldr	r3, [r3, #4]
 802b90e:	2b46      	cmp	r3, #70	; 0x46
 802b910:	d903      	bls.n	802b91a <HAL_DMA_Init+0x29a>
 802b912:	687b      	ldr	r3, [r7, #4]
 802b914:	685b      	ldr	r3, [r3, #4]
 802b916:	2b48      	cmp	r3, #72	; 0x48
 802b918:	d907      	bls.n	802b92a <HAL_DMA_Init+0x2aa>
 802b91a:	687b      	ldr	r3, [r7, #4]
 802b91c:	685b      	ldr	r3, [r3, #4]
 802b91e:	2b4e      	cmp	r3, #78	; 0x4e
 802b920:	d905      	bls.n	802b92e <HAL_DMA_Init+0x2ae>
 802b922:	687b      	ldr	r3, [r7, #4]
 802b924:	685b      	ldr	r3, [r3, #4]
 802b926:	2b52      	cmp	r3, #82	; 0x52
 802b928:	d801      	bhi.n	802b92e <HAL_DMA_Init+0x2ae>
 802b92a:	2301      	movs	r3, #1
 802b92c:	e000      	b.n	802b930 <HAL_DMA_Init+0x2b0>
 802b92e:	2300      	movs	r3, #0
 802b930:	2b00      	cmp	r3, #0
 802b932:	d003      	beq.n	802b93c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 802b934:	697b      	ldr	r3, [r7, #20]
 802b936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802b93a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 802b93c:	687b      	ldr	r3, [r7, #4]
 802b93e:	681b      	ldr	r3, [r3, #0]
 802b940:	697a      	ldr	r2, [r7, #20]
 802b942:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	681b      	ldr	r3, [r3, #0]
 802b948:	695b      	ldr	r3, [r3, #20]
 802b94a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802b94c:	697b      	ldr	r3, [r7, #20]
 802b94e:	f023 0307 	bic.w	r3, r3, #7
 802b952:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 802b954:	687b      	ldr	r3, [r7, #4]
 802b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b958:	697a      	ldr	r2, [r7, #20]
 802b95a:	4313      	orrs	r3, r2
 802b95c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802b95e:	687b      	ldr	r3, [r7, #4]
 802b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b962:	2b04      	cmp	r3, #4
 802b964:	d117      	bne.n	802b996 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 802b966:	687b      	ldr	r3, [r7, #4]
 802b968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b96a:	697a      	ldr	r2, [r7, #20]
 802b96c:	4313      	orrs	r3, r2
 802b96e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802b970:	687b      	ldr	r3, [r7, #4]
 802b972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b974:	2b00      	cmp	r3, #0
 802b976:	d00e      	beq.n	802b996 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802b978:	6878      	ldr	r0, [r7, #4]
 802b97a:	f002 fb4d 	bl	802e018 <DMA_CheckFifoParam>
 802b97e:	4603      	mov	r3, r0
 802b980:	2b00      	cmp	r3, #0
 802b982:	d008      	beq.n	802b996 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802b984:	687b      	ldr	r3, [r7, #4]
 802b986:	2240      	movs	r2, #64	; 0x40
 802b988:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802b98a:	687b      	ldr	r3, [r7, #4]
 802b98c:	2201      	movs	r2, #1
 802b98e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 802b992:	2301      	movs	r3, #1
 802b994:	e197      	b.n	802bcc6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 802b996:	687b      	ldr	r3, [r7, #4]
 802b998:	681b      	ldr	r3, [r3, #0]
 802b99a:	697a      	ldr	r2, [r7, #20]
 802b99c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802b99e:	6878      	ldr	r0, [r7, #4]
 802b9a0:	f002 fa88 	bl	802deb4 <DMA_CalcBaseAndBitshift>
 802b9a4:	4603      	mov	r3, r0
 802b9a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802b9a8:	687b      	ldr	r3, [r7, #4]
 802b9aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802b9ac:	f003 031f 	and.w	r3, r3, #31
 802b9b0:	223f      	movs	r2, #63	; 0x3f
 802b9b2:	409a      	lsls	r2, r3
 802b9b4:	68bb      	ldr	r3, [r7, #8]
 802b9b6:	609a      	str	r2, [r3, #8]
 802b9b8:	e0cd      	b.n	802bb56 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802b9ba:	687b      	ldr	r3, [r7, #4]
 802b9bc:	681b      	ldr	r3, [r3, #0]
 802b9be:	4a3b      	ldr	r2, [pc, #236]	; (802baac <HAL_DMA_Init+0x42c>)
 802b9c0:	4293      	cmp	r3, r2
 802b9c2:	d022      	beq.n	802ba0a <HAL_DMA_Init+0x38a>
 802b9c4:	687b      	ldr	r3, [r7, #4]
 802b9c6:	681b      	ldr	r3, [r3, #0]
 802b9c8:	4a39      	ldr	r2, [pc, #228]	; (802bab0 <HAL_DMA_Init+0x430>)
 802b9ca:	4293      	cmp	r3, r2
 802b9cc:	d01d      	beq.n	802ba0a <HAL_DMA_Init+0x38a>
 802b9ce:	687b      	ldr	r3, [r7, #4]
 802b9d0:	681b      	ldr	r3, [r3, #0]
 802b9d2:	4a38      	ldr	r2, [pc, #224]	; (802bab4 <HAL_DMA_Init+0x434>)
 802b9d4:	4293      	cmp	r3, r2
 802b9d6:	d018      	beq.n	802ba0a <HAL_DMA_Init+0x38a>
 802b9d8:	687b      	ldr	r3, [r7, #4]
 802b9da:	681b      	ldr	r3, [r3, #0]
 802b9dc:	4a36      	ldr	r2, [pc, #216]	; (802bab8 <HAL_DMA_Init+0x438>)
 802b9de:	4293      	cmp	r3, r2
 802b9e0:	d013      	beq.n	802ba0a <HAL_DMA_Init+0x38a>
 802b9e2:	687b      	ldr	r3, [r7, #4]
 802b9e4:	681b      	ldr	r3, [r3, #0]
 802b9e6:	4a35      	ldr	r2, [pc, #212]	; (802babc <HAL_DMA_Init+0x43c>)
 802b9e8:	4293      	cmp	r3, r2
 802b9ea:	d00e      	beq.n	802ba0a <HAL_DMA_Init+0x38a>
 802b9ec:	687b      	ldr	r3, [r7, #4]
 802b9ee:	681b      	ldr	r3, [r3, #0]
 802b9f0:	4a33      	ldr	r2, [pc, #204]	; (802bac0 <HAL_DMA_Init+0x440>)
 802b9f2:	4293      	cmp	r3, r2
 802b9f4:	d009      	beq.n	802ba0a <HAL_DMA_Init+0x38a>
 802b9f6:	687b      	ldr	r3, [r7, #4]
 802b9f8:	681b      	ldr	r3, [r3, #0]
 802b9fa:	4a32      	ldr	r2, [pc, #200]	; (802bac4 <HAL_DMA_Init+0x444>)
 802b9fc:	4293      	cmp	r3, r2
 802b9fe:	d004      	beq.n	802ba0a <HAL_DMA_Init+0x38a>
 802ba00:	687b      	ldr	r3, [r7, #4]
 802ba02:	681b      	ldr	r3, [r3, #0]
 802ba04:	4a30      	ldr	r2, [pc, #192]	; (802bac8 <HAL_DMA_Init+0x448>)
 802ba06:	4293      	cmp	r3, r2
 802ba08:	d101      	bne.n	802ba0e <HAL_DMA_Init+0x38e>
 802ba0a:	2301      	movs	r3, #1
 802ba0c:	e000      	b.n	802ba10 <HAL_DMA_Init+0x390>
 802ba0e:	2300      	movs	r3, #0
 802ba10:	2b00      	cmp	r3, #0
 802ba12:	f000 8097 	beq.w	802bb44 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802ba16:	687b      	ldr	r3, [r7, #4]
 802ba18:	681b      	ldr	r3, [r3, #0]
 802ba1a:	4a24      	ldr	r2, [pc, #144]	; (802baac <HAL_DMA_Init+0x42c>)
 802ba1c:	4293      	cmp	r3, r2
 802ba1e:	d021      	beq.n	802ba64 <HAL_DMA_Init+0x3e4>
 802ba20:	687b      	ldr	r3, [r7, #4]
 802ba22:	681b      	ldr	r3, [r3, #0]
 802ba24:	4a22      	ldr	r2, [pc, #136]	; (802bab0 <HAL_DMA_Init+0x430>)
 802ba26:	4293      	cmp	r3, r2
 802ba28:	d01c      	beq.n	802ba64 <HAL_DMA_Init+0x3e4>
 802ba2a:	687b      	ldr	r3, [r7, #4]
 802ba2c:	681b      	ldr	r3, [r3, #0]
 802ba2e:	4a21      	ldr	r2, [pc, #132]	; (802bab4 <HAL_DMA_Init+0x434>)
 802ba30:	4293      	cmp	r3, r2
 802ba32:	d017      	beq.n	802ba64 <HAL_DMA_Init+0x3e4>
 802ba34:	687b      	ldr	r3, [r7, #4]
 802ba36:	681b      	ldr	r3, [r3, #0]
 802ba38:	4a1f      	ldr	r2, [pc, #124]	; (802bab8 <HAL_DMA_Init+0x438>)
 802ba3a:	4293      	cmp	r3, r2
 802ba3c:	d012      	beq.n	802ba64 <HAL_DMA_Init+0x3e4>
 802ba3e:	687b      	ldr	r3, [r7, #4]
 802ba40:	681b      	ldr	r3, [r3, #0]
 802ba42:	4a1e      	ldr	r2, [pc, #120]	; (802babc <HAL_DMA_Init+0x43c>)
 802ba44:	4293      	cmp	r3, r2
 802ba46:	d00d      	beq.n	802ba64 <HAL_DMA_Init+0x3e4>
 802ba48:	687b      	ldr	r3, [r7, #4]
 802ba4a:	681b      	ldr	r3, [r3, #0]
 802ba4c:	4a1c      	ldr	r2, [pc, #112]	; (802bac0 <HAL_DMA_Init+0x440>)
 802ba4e:	4293      	cmp	r3, r2
 802ba50:	d008      	beq.n	802ba64 <HAL_DMA_Init+0x3e4>
 802ba52:	687b      	ldr	r3, [r7, #4]
 802ba54:	681b      	ldr	r3, [r3, #0]
 802ba56:	4a1b      	ldr	r2, [pc, #108]	; (802bac4 <HAL_DMA_Init+0x444>)
 802ba58:	4293      	cmp	r3, r2
 802ba5a:	d003      	beq.n	802ba64 <HAL_DMA_Init+0x3e4>
 802ba5c:	687b      	ldr	r3, [r7, #4]
 802ba5e:	681b      	ldr	r3, [r3, #0]
 802ba60:	4a19      	ldr	r2, [pc, #100]	; (802bac8 <HAL_DMA_Init+0x448>)
 802ba62:	4293      	cmp	r3, r2
 802ba64:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802ba66:	687b      	ldr	r3, [r7, #4]
 802ba68:	2202      	movs	r2, #2
 802ba6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 802ba6e:	687b      	ldr	r3, [r7, #4]
 802ba70:	2200      	movs	r2, #0
 802ba72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 802ba76:	687b      	ldr	r3, [r7, #4]
 802ba78:	681b      	ldr	r3, [r3, #0]
 802ba7a:	681b      	ldr	r3, [r3, #0]
 802ba7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 802ba7e:	697a      	ldr	r2, [r7, #20]
 802ba80:	4b12      	ldr	r3, [pc, #72]	; (802bacc <HAL_DMA_Init+0x44c>)
 802ba82:	4013      	ands	r3, r2
 802ba84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802ba86:	687b      	ldr	r3, [r7, #4]
 802ba88:	689b      	ldr	r3, [r3, #8]
 802ba8a:	2b40      	cmp	r3, #64	; 0x40
 802ba8c:	d020      	beq.n	802bad0 <HAL_DMA_Init+0x450>
 802ba8e:	687b      	ldr	r3, [r7, #4]
 802ba90:	689b      	ldr	r3, [r3, #8]
 802ba92:	2b80      	cmp	r3, #128	; 0x80
 802ba94:	d102      	bne.n	802ba9c <HAL_DMA_Init+0x41c>
 802ba96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802ba9a:	e01a      	b.n	802bad2 <HAL_DMA_Init+0x452>
 802ba9c:	2300      	movs	r3, #0
 802ba9e:	e018      	b.n	802bad2 <HAL_DMA_Init+0x452>
 802baa0:	fe10803f 	.word	0xfe10803f
 802baa4:	5c001000 	.word	0x5c001000
 802baa8:	ffff0000 	.word	0xffff0000
 802baac:	58025408 	.word	0x58025408
 802bab0:	5802541c 	.word	0x5802541c
 802bab4:	58025430 	.word	0x58025430
 802bab8:	58025444 	.word	0x58025444
 802babc:	58025458 	.word	0x58025458
 802bac0:	5802546c 	.word	0x5802546c
 802bac4:	58025480 	.word	0x58025480
 802bac8:	58025494 	.word	0x58025494
 802bacc:	fffe000f 	.word	0xfffe000f
 802bad0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802bad2:	687a      	ldr	r2, [r7, #4]
 802bad4:	68d2      	ldr	r2, [r2, #12]
 802bad6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802bad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802bada:	687b      	ldr	r3, [r7, #4]
 802badc:	691b      	ldr	r3, [r3, #16]
 802bade:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 802bae0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802bae2:	687b      	ldr	r3, [r7, #4]
 802bae4:	695b      	ldr	r3, [r3, #20]
 802bae6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 802bae8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802baea:	687b      	ldr	r3, [r7, #4]
 802baec:	699b      	ldr	r3, [r3, #24]
 802baee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 802baf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802baf2:	687b      	ldr	r3, [r7, #4]
 802baf4:	69db      	ldr	r3, [r3, #28]
 802baf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 802baf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 802bafa:	687b      	ldr	r3, [r7, #4]
 802bafc:	6a1b      	ldr	r3, [r3, #32]
 802bafe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 802bb00:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 802bb02:	697a      	ldr	r2, [r7, #20]
 802bb04:	4313      	orrs	r3, r2
 802bb06:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 802bb08:	687b      	ldr	r3, [r7, #4]
 802bb0a:	681b      	ldr	r3, [r3, #0]
 802bb0c:	697a      	ldr	r2, [r7, #20]
 802bb0e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 802bb10:	687b      	ldr	r3, [r7, #4]
 802bb12:	681b      	ldr	r3, [r3, #0]
 802bb14:	461a      	mov	r2, r3
 802bb16:	4b6e      	ldr	r3, [pc, #440]	; (802bcd0 <HAL_DMA_Init+0x650>)
 802bb18:	4413      	add	r3, r2
 802bb1a:	4a6e      	ldr	r2, [pc, #440]	; (802bcd4 <HAL_DMA_Init+0x654>)
 802bb1c:	fba2 2303 	umull	r2, r3, r2, r3
 802bb20:	091b      	lsrs	r3, r3, #4
 802bb22:	009a      	lsls	r2, r3, #2
 802bb24:	687b      	ldr	r3, [r7, #4]
 802bb26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802bb28:	6878      	ldr	r0, [r7, #4]
 802bb2a:	f002 f9c3 	bl	802deb4 <DMA_CalcBaseAndBitshift>
 802bb2e:	4603      	mov	r3, r0
 802bb30:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802bb32:	687b      	ldr	r3, [r7, #4]
 802bb34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802bb36:	f003 031f 	and.w	r3, r3, #31
 802bb3a:	2201      	movs	r2, #1
 802bb3c:	409a      	lsls	r2, r3
 802bb3e:	68fb      	ldr	r3, [r7, #12]
 802bb40:	605a      	str	r2, [r3, #4]
 802bb42:	e008      	b.n	802bb56 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 802bb44:	687b      	ldr	r3, [r7, #4]
 802bb46:	2240      	movs	r2, #64	; 0x40
 802bb48:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 802bb4a:	687b      	ldr	r3, [r7, #4]
 802bb4c:	2203      	movs	r2, #3
 802bb4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 802bb52:	2301      	movs	r3, #1
 802bb54:	e0b7      	b.n	802bcc6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802bb56:	687b      	ldr	r3, [r7, #4]
 802bb58:	681b      	ldr	r3, [r3, #0]
 802bb5a:	4a5f      	ldr	r2, [pc, #380]	; (802bcd8 <HAL_DMA_Init+0x658>)
 802bb5c:	4293      	cmp	r3, r2
 802bb5e:	d072      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bb60:	687b      	ldr	r3, [r7, #4]
 802bb62:	681b      	ldr	r3, [r3, #0]
 802bb64:	4a5d      	ldr	r2, [pc, #372]	; (802bcdc <HAL_DMA_Init+0x65c>)
 802bb66:	4293      	cmp	r3, r2
 802bb68:	d06d      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bb6a:	687b      	ldr	r3, [r7, #4]
 802bb6c:	681b      	ldr	r3, [r3, #0]
 802bb6e:	4a5c      	ldr	r2, [pc, #368]	; (802bce0 <HAL_DMA_Init+0x660>)
 802bb70:	4293      	cmp	r3, r2
 802bb72:	d068      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bb74:	687b      	ldr	r3, [r7, #4]
 802bb76:	681b      	ldr	r3, [r3, #0]
 802bb78:	4a5a      	ldr	r2, [pc, #360]	; (802bce4 <HAL_DMA_Init+0x664>)
 802bb7a:	4293      	cmp	r3, r2
 802bb7c:	d063      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bb7e:	687b      	ldr	r3, [r7, #4]
 802bb80:	681b      	ldr	r3, [r3, #0]
 802bb82:	4a59      	ldr	r2, [pc, #356]	; (802bce8 <HAL_DMA_Init+0x668>)
 802bb84:	4293      	cmp	r3, r2
 802bb86:	d05e      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bb88:	687b      	ldr	r3, [r7, #4]
 802bb8a:	681b      	ldr	r3, [r3, #0]
 802bb8c:	4a57      	ldr	r2, [pc, #348]	; (802bcec <HAL_DMA_Init+0x66c>)
 802bb8e:	4293      	cmp	r3, r2
 802bb90:	d059      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bb92:	687b      	ldr	r3, [r7, #4]
 802bb94:	681b      	ldr	r3, [r3, #0]
 802bb96:	4a56      	ldr	r2, [pc, #344]	; (802bcf0 <HAL_DMA_Init+0x670>)
 802bb98:	4293      	cmp	r3, r2
 802bb9a:	d054      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bb9c:	687b      	ldr	r3, [r7, #4]
 802bb9e:	681b      	ldr	r3, [r3, #0]
 802bba0:	4a54      	ldr	r2, [pc, #336]	; (802bcf4 <HAL_DMA_Init+0x674>)
 802bba2:	4293      	cmp	r3, r2
 802bba4:	d04f      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bba6:	687b      	ldr	r3, [r7, #4]
 802bba8:	681b      	ldr	r3, [r3, #0]
 802bbaa:	4a53      	ldr	r2, [pc, #332]	; (802bcf8 <HAL_DMA_Init+0x678>)
 802bbac:	4293      	cmp	r3, r2
 802bbae:	d04a      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bbb0:	687b      	ldr	r3, [r7, #4]
 802bbb2:	681b      	ldr	r3, [r3, #0]
 802bbb4:	4a51      	ldr	r2, [pc, #324]	; (802bcfc <HAL_DMA_Init+0x67c>)
 802bbb6:	4293      	cmp	r3, r2
 802bbb8:	d045      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bbba:	687b      	ldr	r3, [r7, #4]
 802bbbc:	681b      	ldr	r3, [r3, #0]
 802bbbe:	4a50      	ldr	r2, [pc, #320]	; (802bd00 <HAL_DMA_Init+0x680>)
 802bbc0:	4293      	cmp	r3, r2
 802bbc2:	d040      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bbc4:	687b      	ldr	r3, [r7, #4]
 802bbc6:	681b      	ldr	r3, [r3, #0]
 802bbc8:	4a4e      	ldr	r2, [pc, #312]	; (802bd04 <HAL_DMA_Init+0x684>)
 802bbca:	4293      	cmp	r3, r2
 802bbcc:	d03b      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bbce:	687b      	ldr	r3, [r7, #4]
 802bbd0:	681b      	ldr	r3, [r3, #0]
 802bbd2:	4a4d      	ldr	r2, [pc, #308]	; (802bd08 <HAL_DMA_Init+0x688>)
 802bbd4:	4293      	cmp	r3, r2
 802bbd6:	d036      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bbd8:	687b      	ldr	r3, [r7, #4]
 802bbda:	681b      	ldr	r3, [r3, #0]
 802bbdc:	4a4b      	ldr	r2, [pc, #300]	; (802bd0c <HAL_DMA_Init+0x68c>)
 802bbde:	4293      	cmp	r3, r2
 802bbe0:	d031      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bbe2:	687b      	ldr	r3, [r7, #4]
 802bbe4:	681b      	ldr	r3, [r3, #0]
 802bbe6:	4a4a      	ldr	r2, [pc, #296]	; (802bd10 <HAL_DMA_Init+0x690>)
 802bbe8:	4293      	cmp	r3, r2
 802bbea:	d02c      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bbec:	687b      	ldr	r3, [r7, #4]
 802bbee:	681b      	ldr	r3, [r3, #0]
 802bbf0:	4a48      	ldr	r2, [pc, #288]	; (802bd14 <HAL_DMA_Init+0x694>)
 802bbf2:	4293      	cmp	r3, r2
 802bbf4:	d027      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bbf6:	687b      	ldr	r3, [r7, #4]
 802bbf8:	681b      	ldr	r3, [r3, #0]
 802bbfa:	4a47      	ldr	r2, [pc, #284]	; (802bd18 <HAL_DMA_Init+0x698>)
 802bbfc:	4293      	cmp	r3, r2
 802bbfe:	d022      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bc00:	687b      	ldr	r3, [r7, #4]
 802bc02:	681b      	ldr	r3, [r3, #0]
 802bc04:	4a45      	ldr	r2, [pc, #276]	; (802bd1c <HAL_DMA_Init+0x69c>)
 802bc06:	4293      	cmp	r3, r2
 802bc08:	d01d      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bc0a:	687b      	ldr	r3, [r7, #4]
 802bc0c:	681b      	ldr	r3, [r3, #0]
 802bc0e:	4a44      	ldr	r2, [pc, #272]	; (802bd20 <HAL_DMA_Init+0x6a0>)
 802bc10:	4293      	cmp	r3, r2
 802bc12:	d018      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bc14:	687b      	ldr	r3, [r7, #4]
 802bc16:	681b      	ldr	r3, [r3, #0]
 802bc18:	4a42      	ldr	r2, [pc, #264]	; (802bd24 <HAL_DMA_Init+0x6a4>)
 802bc1a:	4293      	cmp	r3, r2
 802bc1c:	d013      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bc1e:	687b      	ldr	r3, [r7, #4]
 802bc20:	681b      	ldr	r3, [r3, #0]
 802bc22:	4a41      	ldr	r2, [pc, #260]	; (802bd28 <HAL_DMA_Init+0x6a8>)
 802bc24:	4293      	cmp	r3, r2
 802bc26:	d00e      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bc28:	687b      	ldr	r3, [r7, #4]
 802bc2a:	681b      	ldr	r3, [r3, #0]
 802bc2c:	4a3f      	ldr	r2, [pc, #252]	; (802bd2c <HAL_DMA_Init+0x6ac>)
 802bc2e:	4293      	cmp	r3, r2
 802bc30:	d009      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bc32:	687b      	ldr	r3, [r7, #4]
 802bc34:	681b      	ldr	r3, [r3, #0]
 802bc36:	4a3e      	ldr	r2, [pc, #248]	; (802bd30 <HAL_DMA_Init+0x6b0>)
 802bc38:	4293      	cmp	r3, r2
 802bc3a:	d004      	beq.n	802bc46 <HAL_DMA_Init+0x5c6>
 802bc3c:	687b      	ldr	r3, [r7, #4]
 802bc3e:	681b      	ldr	r3, [r3, #0]
 802bc40:	4a3c      	ldr	r2, [pc, #240]	; (802bd34 <HAL_DMA_Init+0x6b4>)
 802bc42:	4293      	cmp	r3, r2
 802bc44:	d101      	bne.n	802bc4a <HAL_DMA_Init+0x5ca>
 802bc46:	2301      	movs	r3, #1
 802bc48:	e000      	b.n	802bc4c <HAL_DMA_Init+0x5cc>
 802bc4a:	2300      	movs	r3, #0
 802bc4c:	2b00      	cmp	r3, #0
 802bc4e:	d032      	beq.n	802bcb6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 802bc50:	6878      	ldr	r0, [r7, #4]
 802bc52:	f002 fa5d 	bl	802e110 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 802bc56:	687b      	ldr	r3, [r7, #4]
 802bc58:	689b      	ldr	r3, [r3, #8]
 802bc5a:	2b80      	cmp	r3, #128	; 0x80
 802bc5c:	d102      	bne.n	802bc64 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 802bc5e:	687b      	ldr	r3, [r7, #4]
 802bc60:	2200      	movs	r2, #0
 802bc62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 802bc64:	687b      	ldr	r3, [r7, #4]
 802bc66:	685a      	ldr	r2, [r3, #4]
 802bc68:	687b      	ldr	r3, [r7, #4]
 802bc6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802bc6c:	b2d2      	uxtb	r2, r2
 802bc6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802bc70:	687b      	ldr	r3, [r7, #4]
 802bc72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802bc74:	687a      	ldr	r2, [r7, #4]
 802bc76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802bc78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 802bc7a:	687b      	ldr	r3, [r7, #4]
 802bc7c:	685b      	ldr	r3, [r3, #4]
 802bc7e:	2b00      	cmp	r3, #0
 802bc80:	d010      	beq.n	802bca4 <HAL_DMA_Init+0x624>
 802bc82:	687b      	ldr	r3, [r7, #4]
 802bc84:	685b      	ldr	r3, [r3, #4]
 802bc86:	2b08      	cmp	r3, #8
 802bc88:	d80c      	bhi.n	802bca4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 802bc8a:	6878      	ldr	r0, [r7, #4]
 802bc8c:	f002 fada 	bl	802e244 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 802bc90:	687b      	ldr	r3, [r7, #4]
 802bc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802bc94:	2200      	movs	r2, #0
 802bc96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802bc98:	687b      	ldr	r3, [r7, #4]
 802bc9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802bc9c:	687a      	ldr	r2, [r7, #4]
 802bc9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802bca0:	605a      	str	r2, [r3, #4]
 802bca2:	e008      	b.n	802bcb6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 802bca4:	687b      	ldr	r3, [r7, #4]
 802bca6:	2200      	movs	r2, #0
 802bca8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 802bcaa:	687b      	ldr	r3, [r7, #4]
 802bcac:	2200      	movs	r2, #0
 802bcae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 802bcb0:	687b      	ldr	r3, [r7, #4]
 802bcb2:	2200      	movs	r2, #0
 802bcb4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bcb6:	687b      	ldr	r3, [r7, #4]
 802bcb8:	2200      	movs	r2, #0
 802bcba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802bcbc:	687b      	ldr	r3, [r7, #4]
 802bcbe:	2201      	movs	r2, #1
 802bcc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802bcc4:	2300      	movs	r3, #0
}
 802bcc6:	4618      	mov	r0, r3
 802bcc8:	3718      	adds	r7, #24
 802bcca:	46bd      	mov	sp, r7
 802bccc:	bd80      	pop	{r7, pc}
 802bcce:	bf00      	nop
 802bcd0:	a7fdabf8 	.word	0xa7fdabf8
 802bcd4:	cccccccd 	.word	0xcccccccd
 802bcd8:	40020010 	.word	0x40020010
 802bcdc:	40020028 	.word	0x40020028
 802bce0:	40020040 	.word	0x40020040
 802bce4:	40020058 	.word	0x40020058
 802bce8:	40020070 	.word	0x40020070
 802bcec:	40020088 	.word	0x40020088
 802bcf0:	400200a0 	.word	0x400200a0
 802bcf4:	400200b8 	.word	0x400200b8
 802bcf8:	40020410 	.word	0x40020410
 802bcfc:	40020428 	.word	0x40020428
 802bd00:	40020440 	.word	0x40020440
 802bd04:	40020458 	.word	0x40020458
 802bd08:	40020470 	.word	0x40020470
 802bd0c:	40020488 	.word	0x40020488
 802bd10:	400204a0 	.word	0x400204a0
 802bd14:	400204b8 	.word	0x400204b8
 802bd18:	58025408 	.word	0x58025408
 802bd1c:	5802541c 	.word	0x5802541c
 802bd20:	58025430 	.word	0x58025430
 802bd24:	58025444 	.word	0x58025444
 802bd28:	58025458 	.word	0x58025458
 802bd2c:	5802546c 	.word	0x5802546c
 802bd30:	58025480 	.word	0x58025480
 802bd34:	58025494 	.word	0x58025494

0802bd38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802bd38:	b580      	push	{r7, lr}
 802bd3a:	b086      	sub	sp, #24
 802bd3c:	af00      	add	r7, sp, #0
 802bd3e:	60f8      	str	r0, [r7, #12]
 802bd40:	60b9      	str	r1, [r7, #8]
 802bd42:	607a      	str	r2, [r7, #4]
 802bd44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802bd46:	2300      	movs	r3, #0
 802bd48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802bd4a:	68fb      	ldr	r3, [r7, #12]
 802bd4c:	2b00      	cmp	r3, #0
 802bd4e:	d101      	bne.n	802bd54 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 802bd50:	2301      	movs	r3, #1
 802bd52:	e226      	b.n	802c1a2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 802bd54:	68fb      	ldr	r3, [r7, #12]
 802bd56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802bd5a:	2b01      	cmp	r3, #1
 802bd5c:	d101      	bne.n	802bd62 <HAL_DMA_Start_IT+0x2a>
 802bd5e:	2302      	movs	r3, #2
 802bd60:	e21f      	b.n	802c1a2 <HAL_DMA_Start_IT+0x46a>
 802bd62:	68fb      	ldr	r3, [r7, #12]
 802bd64:	2201      	movs	r2, #1
 802bd66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 802bd6a:	68fb      	ldr	r3, [r7, #12]
 802bd6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802bd70:	b2db      	uxtb	r3, r3
 802bd72:	2b01      	cmp	r3, #1
 802bd74:	f040 820a 	bne.w	802c18c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802bd78:	68fb      	ldr	r3, [r7, #12]
 802bd7a:	2202      	movs	r2, #2
 802bd7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802bd80:	68fb      	ldr	r3, [r7, #12]
 802bd82:	2200      	movs	r2, #0
 802bd84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 802bd86:	68fb      	ldr	r3, [r7, #12]
 802bd88:	681b      	ldr	r3, [r3, #0]
 802bd8a:	4a68      	ldr	r2, [pc, #416]	; (802bf2c <HAL_DMA_Start_IT+0x1f4>)
 802bd8c:	4293      	cmp	r3, r2
 802bd8e:	d04a      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bd90:	68fb      	ldr	r3, [r7, #12]
 802bd92:	681b      	ldr	r3, [r3, #0]
 802bd94:	4a66      	ldr	r2, [pc, #408]	; (802bf30 <HAL_DMA_Start_IT+0x1f8>)
 802bd96:	4293      	cmp	r3, r2
 802bd98:	d045      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bd9a:	68fb      	ldr	r3, [r7, #12]
 802bd9c:	681b      	ldr	r3, [r3, #0]
 802bd9e:	4a65      	ldr	r2, [pc, #404]	; (802bf34 <HAL_DMA_Start_IT+0x1fc>)
 802bda0:	4293      	cmp	r3, r2
 802bda2:	d040      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bda4:	68fb      	ldr	r3, [r7, #12]
 802bda6:	681b      	ldr	r3, [r3, #0]
 802bda8:	4a63      	ldr	r2, [pc, #396]	; (802bf38 <HAL_DMA_Start_IT+0x200>)
 802bdaa:	4293      	cmp	r3, r2
 802bdac:	d03b      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bdae:	68fb      	ldr	r3, [r7, #12]
 802bdb0:	681b      	ldr	r3, [r3, #0]
 802bdb2:	4a62      	ldr	r2, [pc, #392]	; (802bf3c <HAL_DMA_Start_IT+0x204>)
 802bdb4:	4293      	cmp	r3, r2
 802bdb6:	d036      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bdb8:	68fb      	ldr	r3, [r7, #12]
 802bdba:	681b      	ldr	r3, [r3, #0]
 802bdbc:	4a60      	ldr	r2, [pc, #384]	; (802bf40 <HAL_DMA_Start_IT+0x208>)
 802bdbe:	4293      	cmp	r3, r2
 802bdc0:	d031      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bdc2:	68fb      	ldr	r3, [r7, #12]
 802bdc4:	681b      	ldr	r3, [r3, #0]
 802bdc6:	4a5f      	ldr	r2, [pc, #380]	; (802bf44 <HAL_DMA_Start_IT+0x20c>)
 802bdc8:	4293      	cmp	r3, r2
 802bdca:	d02c      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bdcc:	68fb      	ldr	r3, [r7, #12]
 802bdce:	681b      	ldr	r3, [r3, #0]
 802bdd0:	4a5d      	ldr	r2, [pc, #372]	; (802bf48 <HAL_DMA_Start_IT+0x210>)
 802bdd2:	4293      	cmp	r3, r2
 802bdd4:	d027      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bdd6:	68fb      	ldr	r3, [r7, #12]
 802bdd8:	681b      	ldr	r3, [r3, #0]
 802bdda:	4a5c      	ldr	r2, [pc, #368]	; (802bf4c <HAL_DMA_Start_IT+0x214>)
 802bddc:	4293      	cmp	r3, r2
 802bdde:	d022      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bde0:	68fb      	ldr	r3, [r7, #12]
 802bde2:	681b      	ldr	r3, [r3, #0]
 802bde4:	4a5a      	ldr	r2, [pc, #360]	; (802bf50 <HAL_DMA_Start_IT+0x218>)
 802bde6:	4293      	cmp	r3, r2
 802bde8:	d01d      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bdea:	68fb      	ldr	r3, [r7, #12]
 802bdec:	681b      	ldr	r3, [r3, #0]
 802bdee:	4a59      	ldr	r2, [pc, #356]	; (802bf54 <HAL_DMA_Start_IT+0x21c>)
 802bdf0:	4293      	cmp	r3, r2
 802bdf2:	d018      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bdf4:	68fb      	ldr	r3, [r7, #12]
 802bdf6:	681b      	ldr	r3, [r3, #0]
 802bdf8:	4a57      	ldr	r2, [pc, #348]	; (802bf58 <HAL_DMA_Start_IT+0x220>)
 802bdfa:	4293      	cmp	r3, r2
 802bdfc:	d013      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802bdfe:	68fb      	ldr	r3, [r7, #12]
 802be00:	681b      	ldr	r3, [r3, #0]
 802be02:	4a56      	ldr	r2, [pc, #344]	; (802bf5c <HAL_DMA_Start_IT+0x224>)
 802be04:	4293      	cmp	r3, r2
 802be06:	d00e      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802be08:	68fb      	ldr	r3, [r7, #12]
 802be0a:	681b      	ldr	r3, [r3, #0]
 802be0c:	4a54      	ldr	r2, [pc, #336]	; (802bf60 <HAL_DMA_Start_IT+0x228>)
 802be0e:	4293      	cmp	r3, r2
 802be10:	d009      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802be12:	68fb      	ldr	r3, [r7, #12]
 802be14:	681b      	ldr	r3, [r3, #0]
 802be16:	4a53      	ldr	r2, [pc, #332]	; (802bf64 <HAL_DMA_Start_IT+0x22c>)
 802be18:	4293      	cmp	r3, r2
 802be1a:	d004      	beq.n	802be26 <HAL_DMA_Start_IT+0xee>
 802be1c:	68fb      	ldr	r3, [r7, #12]
 802be1e:	681b      	ldr	r3, [r3, #0]
 802be20:	4a51      	ldr	r2, [pc, #324]	; (802bf68 <HAL_DMA_Start_IT+0x230>)
 802be22:	4293      	cmp	r3, r2
 802be24:	d108      	bne.n	802be38 <HAL_DMA_Start_IT+0x100>
 802be26:	68fb      	ldr	r3, [r7, #12]
 802be28:	681b      	ldr	r3, [r3, #0]
 802be2a:	681a      	ldr	r2, [r3, #0]
 802be2c:	68fb      	ldr	r3, [r7, #12]
 802be2e:	681b      	ldr	r3, [r3, #0]
 802be30:	f022 0201 	bic.w	r2, r2, #1
 802be34:	601a      	str	r2, [r3, #0]
 802be36:	e007      	b.n	802be48 <HAL_DMA_Start_IT+0x110>
 802be38:	68fb      	ldr	r3, [r7, #12]
 802be3a:	681b      	ldr	r3, [r3, #0]
 802be3c:	681a      	ldr	r2, [r3, #0]
 802be3e:	68fb      	ldr	r3, [r7, #12]
 802be40:	681b      	ldr	r3, [r3, #0]
 802be42:	f022 0201 	bic.w	r2, r2, #1
 802be46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802be48:	683b      	ldr	r3, [r7, #0]
 802be4a:	687a      	ldr	r2, [r7, #4]
 802be4c:	68b9      	ldr	r1, [r7, #8]
 802be4e:	68f8      	ldr	r0, [r7, #12]
 802be50:	f001 fe84 	bl	802db5c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802be54:	68fb      	ldr	r3, [r7, #12]
 802be56:	681b      	ldr	r3, [r3, #0]
 802be58:	4a34      	ldr	r2, [pc, #208]	; (802bf2c <HAL_DMA_Start_IT+0x1f4>)
 802be5a:	4293      	cmp	r3, r2
 802be5c:	d04a      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802be5e:	68fb      	ldr	r3, [r7, #12]
 802be60:	681b      	ldr	r3, [r3, #0]
 802be62:	4a33      	ldr	r2, [pc, #204]	; (802bf30 <HAL_DMA_Start_IT+0x1f8>)
 802be64:	4293      	cmp	r3, r2
 802be66:	d045      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802be68:	68fb      	ldr	r3, [r7, #12]
 802be6a:	681b      	ldr	r3, [r3, #0]
 802be6c:	4a31      	ldr	r2, [pc, #196]	; (802bf34 <HAL_DMA_Start_IT+0x1fc>)
 802be6e:	4293      	cmp	r3, r2
 802be70:	d040      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802be72:	68fb      	ldr	r3, [r7, #12]
 802be74:	681b      	ldr	r3, [r3, #0]
 802be76:	4a30      	ldr	r2, [pc, #192]	; (802bf38 <HAL_DMA_Start_IT+0x200>)
 802be78:	4293      	cmp	r3, r2
 802be7a:	d03b      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802be7c:	68fb      	ldr	r3, [r7, #12]
 802be7e:	681b      	ldr	r3, [r3, #0]
 802be80:	4a2e      	ldr	r2, [pc, #184]	; (802bf3c <HAL_DMA_Start_IT+0x204>)
 802be82:	4293      	cmp	r3, r2
 802be84:	d036      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802be86:	68fb      	ldr	r3, [r7, #12]
 802be88:	681b      	ldr	r3, [r3, #0]
 802be8a:	4a2d      	ldr	r2, [pc, #180]	; (802bf40 <HAL_DMA_Start_IT+0x208>)
 802be8c:	4293      	cmp	r3, r2
 802be8e:	d031      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802be90:	68fb      	ldr	r3, [r7, #12]
 802be92:	681b      	ldr	r3, [r3, #0]
 802be94:	4a2b      	ldr	r2, [pc, #172]	; (802bf44 <HAL_DMA_Start_IT+0x20c>)
 802be96:	4293      	cmp	r3, r2
 802be98:	d02c      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802be9a:	68fb      	ldr	r3, [r7, #12]
 802be9c:	681b      	ldr	r3, [r3, #0]
 802be9e:	4a2a      	ldr	r2, [pc, #168]	; (802bf48 <HAL_DMA_Start_IT+0x210>)
 802bea0:	4293      	cmp	r3, r2
 802bea2:	d027      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802bea4:	68fb      	ldr	r3, [r7, #12]
 802bea6:	681b      	ldr	r3, [r3, #0]
 802bea8:	4a28      	ldr	r2, [pc, #160]	; (802bf4c <HAL_DMA_Start_IT+0x214>)
 802beaa:	4293      	cmp	r3, r2
 802beac:	d022      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802beae:	68fb      	ldr	r3, [r7, #12]
 802beb0:	681b      	ldr	r3, [r3, #0]
 802beb2:	4a27      	ldr	r2, [pc, #156]	; (802bf50 <HAL_DMA_Start_IT+0x218>)
 802beb4:	4293      	cmp	r3, r2
 802beb6:	d01d      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802beb8:	68fb      	ldr	r3, [r7, #12]
 802beba:	681b      	ldr	r3, [r3, #0]
 802bebc:	4a25      	ldr	r2, [pc, #148]	; (802bf54 <HAL_DMA_Start_IT+0x21c>)
 802bebe:	4293      	cmp	r3, r2
 802bec0:	d018      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802bec2:	68fb      	ldr	r3, [r7, #12]
 802bec4:	681b      	ldr	r3, [r3, #0]
 802bec6:	4a24      	ldr	r2, [pc, #144]	; (802bf58 <HAL_DMA_Start_IT+0x220>)
 802bec8:	4293      	cmp	r3, r2
 802beca:	d013      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802becc:	68fb      	ldr	r3, [r7, #12]
 802bece:	681b      	ldr	r3, [r3, #0]
 802bed0:	4a22      	ldr	r2, [pc, #136]	; (802bf5c <HAL_DMA_Start_IT+0x224>)
 802bed2:	4293      	cmp	r3, r2
 802bed4:	d00e      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802bed6:	68fb      	ldr	r3, [r7, #12]
 802bed8:	681b      	ldr	r3, [r3, #0]
 802beda:	4a21      	ldr	r2, [pc, #132]	; (802bf60 <HAL_DMA_Start_IT+0x228>)
 802bedc:	4293      	cmp	r3, r2
 802bede:	d009      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802bee0:	68fb      	ldr	r3, [r7, #12]
 802bee2:	681b      	ldr	r3, [r3, #0]
 802bee4:	4a1f      	ldr	r2, [pc, #124]	; (802bf64 <HAL_DMA_Start_IT+0x22c>)
 802bee6:	4293      	cmp	r3, r2
 802bee8:	d004      	beq.n	802bef4 <HAL_DMA_Start_IT+0x1bc>
 802beea:	68fb      	ldr	r3, [r7, #12]
 802beec:	681b      	ldr	r3, [r3, #0]
 802beee:	4a1e      	ldr	r2, [pc, #120]	; (802bf68 <HAL_DMA_Start_IT+0x230>)
 802bef0:	4293      	cmp	r3, r2
 802bef2:	d101      	bne.n	802bef8 <HAL_DMA_Start_IT+0x1c0>
 802bef4:	2301      	movs	r3, #1
 802bef6:	e000      	b.n	802befa <HAL_DMA_Start_IT+0x1c2>
 802bef8:	2300      	movs	r3, #0
 802befa:	2b00      	cmp	r3, #0
 802befc:	d036      	beq.n	802bf6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 802befe:	68fb      	ldr	r3, [r7, #12]
 802bf00:	681b      	ldr	r3, [r3, #0]
 802bf02:	681b      	ldr	r3, [r3, #0]
 802bf04:	f023 021e 	bic.w	r2, r3, #30
 802bf08:	68fb      	ldr	r3, [r7, #12]
 802bf0a:	681b      	ldr	r3, [r3, #0]
 802bf0c:	f042 0216 	orr.w	r2, r2, #22
 802bf10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802bf12:	68fb      	ldr	r3, [r7, #12]
 802bf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf16:	2b00      	cmp	r3, #0
 802bf18:	d03e      	beq.n	802bf98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 802bf1a:	68fb      	ldr	r3, [r7, #12]
 802bf1c:	681b      	ldr	r3, [r3, #0]
 802bf1e:	681a      	ldr	r2, [r3, #0]
 802bf20:	68fb      	ldr	r3, [r7, #12]
 802bf22:	681b      	ldr	r3, [r3, #0]
 802bf24:	f042 0208 	orr.w	r2, r2, #8
 802bf28:	601a      	str	r2, [r3, #0]
 802bf2a:	e035      	b.n	802bf98 <HAL_DMA_Start_IT+0x260>
 802bf2c:	40020010 	.word	0x40020010
 802bf30:	40020028 	.word	0x40020028
 802bf34:	40020040 	.word	0x40020040
 802bf38:	40020058 	.word	0x40020058
 802bf3c:	40020070 	.word	0x40020070
 802bf40:	40020088 	.word	0x40020088
 802bf44:	400200a0 	.word	0x400200a0
 802bf48:	400200b8 	.word	0x400200b8
 802bf4c:	40020410 	.word	0x40020410
 802bf50:	40020428 	.word	0x40020428
 802bf54:	40020440 	.word	0x40020440
 802bf58:	40020458 	.word	0x40020458
 802bf5c:	40020470 	.word	0x40020470
 802bf60:	40020488 	.word	0x40020488
 802bf64:	400204a0 	.word	0x400204a0
 802bf68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 802bf6c:	68fb      	ldr	r3, [r7, #12]
 802bf6e:	681b      	ldr	r3, [r3, #0]
 802bf70:	681b      	ldr	r3, [r3, #0]
 802bf72:	f023 020e 	bic.w	r2, r3, #14
 802bf76:	68fb      	ldr	r3, [r7, #12]
 802bf78:	681b      	ldr	r3, [r3, #0]
 802bf7a:	f042 020a 	orr.w	r2, r2, #10
 802bf7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 802bf80:	68fb      	ldr	r3, [r7, #12]
 802bf82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802bf84:	2b00      	cmp	r3, #0
 802bf86:	d007      	beq.n	802bf98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 802bf88:	68fb      	ldr	r3, [r7, #12]
 802bf8a:	681b      	ldr	r3, [r3, #0]
 802bf8c:	681a      	ldr	r2, [r3, #0]
 802bf8e:	68fb      	ldr	r3, [r7, #12]
 802bf90:	681b      	ldr	r3, [r3, #0]
 802bf92:	f042 0204 	orr.w	r2, r2, #4
 802bf96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802bf98:	68fb      	ldr	r3, [r7, #12]
 802bf9a:	681b      	ldr	r3, [r3, #0]
 802bf9c:	4a83      	ldr	r2, [pc, #524]	; (802c1ac <HAL_DMA_Start_IT+0x474>)
 802bf9e:	4293      	cmp	r3, r2
 802bfa0:	d072      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bfa2:	68fb      	ldr	r3, [r7, #12]
 802bfa4:	681b      	ldr	r3, [r3, #0]
 802bfa6:	4a82      	ldr	r2, [pc, #520]	; (802c1b0 <HAL_DMA_Start_IT+0x478>)
 802bfa8:	4293      	cmp	r3, r2
 802bfaa:	d06d      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bfac:	68fb      	ldr	r3, [r7, #12]
 802bfae:	681b      	ldr	r3, [r3, #0]
 802bfb0:	4a80      	ldr	r2, [pc, #512]	; (802c1b4 <HAL_DMA_Start_IT+0x47c>)
 802bfb2:	4293      	cmp	r3, r2
 802bfb4:	d068      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bfb6:	68fb      	ldr	r3, [r7, #12]
 802bfb8:	681b      	ldr	r3, [r3, #0]
 802bfba:	4a7f      	ldr	r2, [pc, #508]	; (802c1b8 <HAL_DMA_Start_IT+0x480>)
 802bfbc:	4293      	cmp	r3, r2
 802bfbe:	d063      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bfc0:	68fb      	ldr	r3, [r7, #12]
 802bfc2:	681b      	ldr	r3, [r3, #0]
 802bfc4:	4a7d      	ldr	r2, [pc, #500]	; (802c1bc <HAL_DMA_Start_IT+0x484>)
 802bfc6:	4293      	cmp	r3, r2
 802bfc8:	d05e      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bfca:	68fb      	ldr	r3, [r7, #12]
 802bfcc:	681b      	ldr	r3, [r3, #0]
 802bfce:	4a7c      	ldr	r2, [pc, #496]	; (802c1c0 <HAL_DMA_Start_IT+0x488>)
 802bfd0:	4293      	cmp	r3, r2
 802bfd2:	d059      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bfd4:	68fb      	ldr	r3, [r7, #12]
 802bfd6:	681b      	ldr	r3, [r3, #0]
 802bfd8:	4a7a      	ldr	r2, [pc, #488]	; (802c1c4 <HAL_DMA_Start_IT+0x48c>)
 802bfda:	4293      	cmp	r3, r2
 802bfdc:	d054      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bfde:	68fb      	ldr	r3, [r7, #12]
 802bfe0:	681b      	ldr	r3, [r3, #0]
 802bfe2:	4a79      	ldr	r2, [pc, #484]	; (802c1c8 <HAL_DMA_Start_IT+0x490>)
 802bfe4:	4293      	cmp	r3, r2
 802bfe6:	d04f      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bfe8:	68fb      	ldr	r3, [r7, #12]
 802bfea:	681b      	ldr	r3, [r3, #0]
 802bfec:	4a77      	ldr	r2, [pc, #476]	; (802c1cc <HAL_DMA_Start_IT+0x494>)
 802bfee:	4293      	cmp	r3, r2
 802bff0:	d04a      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bff2:	68fb      	ldr	r3, [r7, #12]
 802bff4:	681b      	ldr	r3, [r3, #0]
 802bff6:	4a76      	ldr	r2, [pc, #472]	; (802c1d0 <HAL_DMA_Start_IT+0x498>)
 802bff8:	4293      	cmp	r3, r2
 802bffa:	d045      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802bffc:	68fb      	ldr	r3, [r7, #12]
 802bffe:	681b      	ldr	r3, [r3, #0]
 802c000:	4a74      	ldr	r2, [pc, #464]	; (802c1d4 <HAL_DMA_Start_IT+0x49c>)
 802c002:	4293      	cmp	r3, r2
 802c004:	d040      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c006:	68fb      	ldr	r3, [r7, #12]
 802c008:	681b      	ldr	r3, [r3, #0]
 802c00a:	4a73      	ldr	r2, [pc, #460]	; (802c1d8 <HAL_DMA_Start_IT+0x4a0>)
 802c00c:	4293      	cmp	r3, r2
 802c00e:	d03b      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c010:	68fb      	ldr	r3, [r7, #12]
 802c012:	681b      	ldr	r3, [r3, #0]
 802c014:	4a71      	ldr	r2, [pc, #452]	; (802c1dc <HAL_DMA_Start_IT+0x4a4>)
 802c016:	4293      	cmp	r3, r2
 802c018:	d036      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c01a:	68fb      	ldr	r3, [r7, #12]
 802c01c:	681b      	ldr	r3, [r3, #0]
 802c01e:	4a70      	ldr	r2, [pc, #448]	; (802c1e0 <HAL_DMA_Start_IT+0x4a8>)
 802c020:	4293      	cmp	r3, r2
 802c022:	d031      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c024:	68fb      	ldr	r3, [r7, #12]
 802c026:	681b      	ldr	r3, [r3, #0]
 802c028:	4a6e      	ldr	r2, [pc, #440]	; (802c1e4 <HAL_DMA_Start_IT+0x4ac>)
 802c02a:	4293      	cmp	r3, r2
 802c02c:	d02c      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c02e:	68fb      	ldr	r3, [r7, #12]
 802c030:	681b      	ldr	r3, [r3, #0]
 802c032:	4a6d      	ldr	r2, [pc, #436]	; (802c1e8 <HAL_DMA_Start_IT+0x4b0>)
 802c034:	4293      	cmp	r3, r2
 802c036:	d027      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c038:	68fb      	ldr	r3, [r7, #12]
 802c03a:	681b      	ldr	r3, [r3, #0]
 802c03c:	4a6b      	ldr	r2, [pc, #428]	; (802c1ec <HAL_DMA_Start_IT+0x4b4>)
 802c03e:	4293      	cmp	r3, r2
 802c040:	d022      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c042:	68fb      	ldr	r3, [r7, #12]
 802c044:	681b      	ldr	r3, [r3, #0]
 802c046:	4a6a      	ldr	r2, [pc, #424]	; (802c1f0 <HAL_DMA_Start_IT+0x4b8>)
 802c048:	4293      	cmp	r3, r2
 802c04a:	d01d      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c04c:	68fb      	ldr	r3, [r7, #12]
 802c04e:	681b      	ldr	r3, [r3, #0]
 802c050:	4a68      	ldr	r2, [pc, #416]	; (802c1f4 <HAL_DMA_Start_IT+0x4bc>)
 802c052:	4293      	cmp	r3, r2
 802c054:	d018      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c056:	68fb      	ldr	r3, [r7, #12]
 802c058:	681b      	ldr	r3, [r3, #0]
 802c05a:	4a67      	ldr	r2, [pc, #412]	; (802c1f8 <HAL_DMA_Start_IT+0x4c0>)
 802c05c:	4293      	cmp	r3, r2
 802c05e:	d013      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c060:	68fb      	ldr	r3, [r7, #12]
 802c062:	681b      	ldr	r3, [r3, #0]
 802c064:	4a65      	ldr	r2, [pc, #404]	; (802c1fc <HAL_DMA_Start_IT+0x4c4>)
 802c066:	4293      	cmp	r3, r2
 802c068:	d00e      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c06a:	68fb      	ldr	r3, [r7, #12]
 802c06c:	681b      	ldr	r3, [r3, #0]
 802c06e:	4a64      	ldr	r2, [pc, #400]	; (802c200 <HAL_DMA_Start_IT+0x4c8>)
 802c070:	4293      	cmp	r3, r2
 802c072:	d009      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c074:	68fb      	ldr	r3, [r7, #12]
 802c076:	681b      	ldr	r3, [r3, #0]
 802c078:	4a62      	ldr	r2, [pc, #392]	; (802c204 <HAL_DMA_Start_IT+0x4cc>)
 802c07a:	4293      	cmp	r3, r2
 802c07c:	d004      	beq.n	802c088 <HAL_DMA_Start_IT+0x350>
 802c07e:	68fb      	ldr	r3, [r7, #12]
 802c080:	681b      	ldr	r3, [r3, #0]
 802c082:	4a61      	ldr	r2, [pc, #388]	; (802c208 <HAL_DMA_Start_IT+0x4d0>)
 802c084:	4293      	cmp	r3, r2
 802c086:	d101      	bne.n	802c08c <HAL_DMA_Start_IT+0x354>
 802c088:	2301      	movs	r3, #1
 802c08a:	e000      	b.n	802c08e <HAL_DMA_Start_IT+0x356>
 802c08c:	2300      	movs	r3, #0
 802c08e:	2b00      	cmp	r3, #0
 802c090:	d01a      	beq.n	802c0c8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 802c092:	68fb      	ldr	r3, [r7, #12]
 802c094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c096:	681b      	ldr	r3, [r3, #0]
 802c098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802c09c:	2b00      	cmp	r3, #0
 802c09e:	d007      	beq.n	802c0b0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 802c0a0:	68fb      	ldr	r3, [r7, #12]
 802c0a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c0a4:	681a      	ldr	r2, [r3, #0]
 802c0a6:	68fb      	ldr	r3, [r7, #12]
 802c0a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c0aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c0ae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 802c0b0:	68fb      	ldr	r3, [r7, #12]
 802c0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c0b4:	2b00      	cmp	r3, #0
 802c0b6:	d007      	beq.n	802c0c8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 802c0b8:	68fb      	ldr	r3, [r7, #12]
 802c0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c0bc:	681a      	ldr	r2, [r3, #0]
 802c0be:	68fb      	ldr	r3, [r7, #12]
 802c0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c0c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c0c6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802c0c8:	68fb      	ldr	r3, [r7, #12]
 802c0ca:	681b      	ldr	r3, [r3, #0]
 802c0cc:	4a37      	ldr	r2, [pc, #220]	; (802c1ac <HAL_DMA_Start_IT+0x474>)
 802c0ce:	4293      	cmp	r3, r2
 802c0d0:	d04a      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c0d2:	68fb      	ldr	r3, [r7, #12]
 802c0d4:	681b      	ldr	r3, [r3, #0]
 802c0d6:	4a36      	ldr	r2, [pc, #216]	; (802c1b0 <HAL_DMA_Start_IT+0x478>)
 802c0d8:	4293      	cmp	r3, r2
 802c0da:	d045      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c0dc:	68fb      	ldr	r3, [r7, #12]
 802c0de:	681b      	ldr	r3, [r3, #0]
 802c0e0:	4a34      	ldr	r2, [pc, #208]	; (802c1b4 <HAL_DMA_Start_IT+0x47c>)
 802c0e2:	4293      	cmp	r3, r2
 802c0e4:	d040      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c0e6:	68fb      	ldr	r3, [r7, #12]
 802c0e8:	681b      	ldr	r3, [r3, #0]
 802c0ea:	4a33      	ldr	r2, [pc, #204]	; (802c1b8 <HAL_DMA_Start_IT+0x480>)
 802c0ec:	4293      	cmp	r3, r2
 802c0ee:	d03b      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c0f0:	68fb      	ldr	r3, [r7, #12]
 802c0f2:	681b      	ldr	r3, [r3, #0]
 802c0f4:	4a31      	ldr	r2, [pc, #196]	; (802c1bc <HAL_DMA_Start_IT+0x484>)
 802c0f6:	4293      	cmp	r3, r2
 802c0f8:	d036      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c0fa:	68fb      	ldr	r3, [r7, #12]
 802c0fc:	681b      	ldr	r3, [r3, #0]
 802c0fe:	4a30      	ldr	r2, [pc, #192]	; (802c1c0 <HAL_DMA_Start_IT+0x488>)
 802c100:	4293      	cmp	r3, r2
 802c102:	d031      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c104:	68fb      	ldr	r3, [r7, #12]
 802c106:	681b      	ldr	r3, [r3, #0]
 802c108:	4a2e      	ldr	r2, [pc, #184]	; (802c1c4 <HAL_DMA_Start_IT+0x48c>)
 802c10a:	4293      	cmp	r3, r2
 802c10c:	d02c      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c10e:	68fb      	ldr	r3, [r7, #12]
 802c110:	681b      	ldr	r3, [r3, #0]
 802c112:	4a2d      	ldr	r2, [pc, #180]	; (802c1c8 <HAL_DMA_Start_IT+0x490>)
 802c114:	4293      	cmp	r3, r2
 802c116:	d027      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c118:	68fb      	ldr	r3, [r7, #12]
 802c11a:	681b      	ldr	r3, [r3, #0]
 802c11c:	4a2b      	ldr	r2, [pc, #172]	; (802c1cc <HAL_DMA_Start_IT+0x494>)
 802c11e:	4293      	cmp	r3, r2
 802c120:	d022      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c122:	68fb      	ldr	r3, [r7, #12]
 802c124:	681b      	ldr	r3, [r3, #0]
 802c126:	4a2a      	ldr	r2, [pc, #168]	; (802c1d0 <HAL_DMA_Start_IT+0x498>)
 802c128:	4293      	cmp	r3, r2
 802c12a:	d01d      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c12c:	68fb      	ldr	r3, [r7, #12]
 802c12e:	681b      	ldr	r3, [r3, #0]
 802c130:	4a28      	ldr	r2, [pc, #160]	; (802c1d4 <HAL_DMA_Start_IT+0x49c>)
 802c132:	4293      	cmp	r3, r2
 802c134:	d018      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c136:	68fb      	ldr	r3, [r7, #12]
 802c138:	681b      	ldr	r3, [r3, #0]
 802c13a:	4a27      	ldr	r2, [pc, #156]	; (802c1d8 <HAL_DMA_Start_IT+0x4a0>)
 802c13c:	4293      	cmp	r3, r2
 802c13e:	d013      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c140:	68fb      	ldr	r3, [r7, #12]
 802c142:	681b      	ldr	r3, [r3, #0]
 802c144:	4a25      	ldr	r2, [pc, #148]	; (802c1dc <HAL_DMA_Start_IT+0x4a4>)
 802c146:	4293      	cmp	r3, r2
 802c148:	d00e      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c14a:	68fb      	ldr	r3, [r7, #12]
 802c14c:	681b      	ldr	r3, [r3, #0]
 802c14e:	4a24      	ldr	r2, [pc, #144]	; (802c1e0 <HAL_DMA_Start_IT+0x4a8>)
 802c150:	4293      	cmp	r3, r2
 802c152:	d009      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c154:	68fb      	ldr	r3, [r7, #12]
 802c156:	681b      	ldr	r3, [r3, #0]
 802c158:	4a22      	ldr	r2, [pc, #136]	; (802c1e4 <HAL_DMA_Start_IT+0x4ac>)
 802c15a:	4293      	cmp	r3, r2
 802c15c:	d004      	beq.n	802c168 <HAL_DMA_Start_IT+0x430>
 802c15e:	68fb      	ldr	r3, [r7, #12]
 802c160:	681b      	ldr	r3, [r3, #0]
 802c162:	4a21      	ldr	r2, [pc, #132]	; (802c1e8 <HAL_DMA_Start_IT+0x4b0>)
 802c164:	4293      	cmp	r3, r2
 802c166:	d108      	bne.n	802c17a <HAL_DMA_Start_IT+0x442>
 802c168:	68fb      	ldr	r3, [r7, #12]
 802c16a:	681b      	ldr	r3, [r3, #0]
 802c16c:	681a      	ldr	r2, [r3, #0]
 802c16e:	68fb      	ldr	r3, [r7, #12]
 802c170:	681b      	ldr	r3, [r3, #0]
 802c172:	f042 0201 	orr.w	r2, r2, #1
 802c176:	601a      	str	r2, [r3, #0]
 802c178:	e012      	b.n	802c1a0 <HAL_DMA_Start_IT+0x468>
 802c17a:	68fb      	ldr	r3, [r7, #12]
 802c17c:	681b      	ldr	r3, [r3, #0]
 802c17e:	681a      	ldr	r2, [r3, #0]
 802c180:	68fb      	ldr	r3, [r7, #12]
 802c182:	681b      	ldr	r3, [r3, #0]
 802c184:	f042 0201 	orr.w	r2, r2, #1
 802c188:	601a      	str	r2, [r3, #0]
 802c18a:	e009      	b.n	802c1a0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 802c18c:	68fb      	ldr	r3, [r7, #12]
 802c18e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802c192:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 802c194:	68fb      	ldr	r3, [r7, #12]
 802c196:	2200      	movs	r2, #0
 802c198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 802c19c:	2301      	movs	r3, #1
 802c19e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802c1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 802c1a2:	4618      	mov	r0, r3
 802c1a4:	3718      	adds	r7, #24
 802c1a6:	46bd      	mov	sp, r7
 802c1a8:	bd80      	pop	{r7, pc}
 802c1aa:	bf00      	nop
 802c1ac:	40020010 	.word	0x40020010
 802c1b0:	40020028 	.word	0x40020028
 802c1b4:	40020040 	.word	0x40020040
 802c1b8:	40020058 	.word	0x40020058
 802c1bc:	40020070 	.word	0x40020070
 802c1c0:	40020088 	.word	0x40020088
 802c1c4:	400200a0 	.word	0x400200a0
 802c1c8:	400200b8 	.word	0x400200b8
 802c1cc:	40020410 	.word	0x40020410
 802c1d0:	40020428 	.word	0x40020428
 802c1d4:	40020440 	.word	0x40020440
 802c1d8:	40020458 	.word	0x40020458
 802c1dc:	40020470 	.word	0x40020470
 802c1e0:	40020488 	.word	0x40020488
 802c1e4:	400204a0 	.word	0x400204a0
 802c1e8:	400204b8 	.word	0x400204b8
 802c1ec:	58025408 	.word	0x58025408
 802c1f0:	5802541c 	.word	0x5802541c
 802c1f4:	58025430 	.word	0x58025430
 802c1f8:	58025444 	.word	0x58025444
 802c1fc:	58025458 	.word	0x58025458
 802c200:	5802546c 	.word	0x5802546c
 802c204:	58025480 	.word	0x58025480
 802c208:	58025494 	.word	0x58025494

0802c20c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802c20c:	b580      	push	{r7, lr}
 802c20e:	b086      	sub	sp, #24
 802c210:	af00      	add	r7, sp, #0
 802c212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 802c214:	f7fe fd38 	bl	802ac88 <HAL_GetTick>
 802c218:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c21a:	687b      	ldr	r3, [r7, #4]
 802c21c:	2b00      	cmp	r3, #0
 802c21e:	d101      	bne.n	802c224 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 802c220:	2301      	movs	r3, #1
 802c222:	e2dc      	b.n	802c7de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c224:	687b      	ldr	r3, [r7, #4]
 802c226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c22a:	b2db      	uxtb	r3, r3
 802c22c:	2b02      	cmp	r3, #2
 802c22e:	d008      	beq.n	802c242 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c230:	687b      	ldr	r3, [r7, #4]
 802c232:	2280      	movs	r2, #128	; 0x80
 802c234:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c236:	687b      	ldr	r3, [r7, #4]
 802c238:	2200      	movs	r2, #0
 802c23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 802c23e:	2301      	movs	r3, #1
 802c240:	e2cd      	b.n	802c7de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c242:	687b      	ldr	r3, [r7, #4]
 802c244:	681b      	ldr	r3, [r3, #0]
 802c246:	4a76      	ldr	r2, [pc, #472]	; (802c420 <HAL_DMA_Abort+0x214>)
 802c248:	4293      	cmp	r3, r2
 802c24a:	d04a      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c24c:	687b      	ldr	r3, [r7, #4]
 802c24e:	681b      	ldr	r3, [r3, #0]
 802c250:	4a74      	ldr	r2, [pc, #464]	; (802c424 <HAL_DMA_Abort+0x218>)
 802c252:	4293      	cmp	r3, r2
 802c254:	d045      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c256:	687b      	ldr	r3, [r7, #4]
 802c258:	681b      	ldr	r3, [r3, #0]
 802c25a:	4a73      	ldr	r2, [pc, #460]	; (802c428 <HAL_DMA_Abort+0x21c>)
 802c25c:	4293      	cmp	r3, r2
 802c25e:	d040      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c260:	687b      	ldr	r3, [r7, #4]
 802c262:	681b      	ldr	r3, [r3, #0]
 802c264:	4a71      	ldr	r2, [pc, #452]	; (802c42c <HAL_DMA_Abort+0x220>)
 802c266:	4293      	cmp	r3, r2
 802c268:	d03b      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c26a:	687b      	ldr	r3, [r7, #4]
 802c26c:	681b      	ldr	r3, [r3, #0]
 802c26e:	4a70      	ldr	r2, [pc, #448]	; (802c430 <HAL_DMA_Abort+0x224>)
 802c270:	4293      	cmp	r3, r2
 802c272:	d036      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c274:	687b      	ldr	r3, [r7, #4]
 802c276:	681b      	ldr	r3, [r3, #0]
 802c278:	4a6e      	ldr	r2, [pc, #440]	; (802c434 <HAL_DMA_Abort+0x228>)
 802c27a:	4293      	cmp	r3, r2
 802c27c:	d031      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c27e:	687b      	ldr	r3, [r7, #4]
 802c280:	681b      	ldr	r3, [r3, #0]
 802c282:	4a6d      	ldr	r2, [pc, #436]	; (802c438 <HAL_DMA_Abort+0x22c>)
 802c284:	4293      	cmp	r3, r2
 802c286:	d02c      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c288:	687b      	ldr	r3, [r7, #4]
 802c28a:	681b      	ldr	r3, [r3, #0]
 802c28c:	4a6b      	ldr	r2, [pc, #428]	; (802c43c <HAL_DMA_Abort+0x230>)
 802c28e:	4293      	cmp	r3, r2
 802c290:	d027      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c292:	687b      	ldr	r3, [r7, #4]
 802c294:	681b      	ldr	r3, [r3, #0]
 802c296:	4a6a      	ldr	r2, [pc, #424]	; (802c440 <HAL_DMA_Abort+0x234>)
 802c298:	4293      	cmp	r3, r2
 802c29a:	d022      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c29c:	687b      	ldr	r3, [r7, #4]
 802c29e:	681b      	ldr	r3, [r3, #0]
 802c2a0:	4a68      	ldr	r2, [pc, #416]	; (802c444 <HAL_DMA_Abort+0x238>)
 802c2a2:	4293      	cmp	r3, r2
 802c2a4:	d01d      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c2a6:	687b      	ldr	r3, [r7, #4]
 802c2a8:	681b      	ldr	r3, [r3, #0]
 802c2aa:	4a67      	ldr	r2, [pc, #412]	; (802c448 <HAL_DMA_Abort+0x23c>)
 802c2ac:	4293      	cmp	r3, r2
 802c2ae:	d018      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c2b0:	687b      	ldr	r3, [r7, #4]
 802c2b2:	681b      	ldr	r3, [r3, #0]
 802c2b4:	4a65      	ldr	r2, [pc, #404]	; (802c44c <HAL_DMA_Abort+0x240>)
 802c2b6:	4293      	cmp	r3, r2
 802c2b8:	d013      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c2ba:	687b      	ldr	r3, [r7, #4]
 802c2bc:	681b      	ldr	r3, [r3, #0]
 802c2be:	4a64      	ldr	r2, [pc, #400]	; (802c450 <HAL_DMA_Abort+0x244>)
 802c2c0:	4293      	cmp	r3, r2
 802c2c2:	d00e      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c2c4:	687b      	ldr	r3, [r7, #4]
 802c2c6:	681b      	ldr	r3, [r3, #0]
 802c2c8:	4a62      	ldr	r2, [pc, #392]	; (802c454 <HAL_DMA_Abort+0x248>)
 802c2ca:	4293      	cmp	r3, r2
 802c2cc:	d009      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c2ce:	687b      	ldr	r3, [r7, #4]
 802c2d0:	681b      	ldr	r3, [r3, #0]
 802c2d2:	4a61      	ldr	r2, [pc, #388]	; (802c458 <HAL_DMA_Abort+0x24c>)
 802c2d4:	4293      	cmp	r3, r2
 802c2d6:	d004      	beq.n	802c2e2 <HAL_DMA_Abort+0xd6>
 802c2d8:	687b      	ldr	r3, [r7, #4]
 802c2da:	681b      	ldr	r3, [r3, #0]
 802c2dc:	4a5f      	ldr	r2, [pc, #380]	; (802c45c <HAL_DMA_Abort+0x250>)
 802c2de:	4293      	cmp	r3, r2
 802c2e0:	d101      	bne.n	802c2e6 <HAL_DMA_Abort+0xda>
 802c2e2:	2301      	movs	r3, #1
 802c2e4:	e000      	b.n	802c2e8 <HAL_DMA_Abort+0xdc>
 802c2e6:	2300      	movs	r3, #0
 802c2e8:	2b00      	cmp	r3, #0
 802c2ea:	d013      	beq.n	802c314 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 802c2ec:	687b      	ldr	r3, [r7, #4]
 802c2ee:	681b      	ldr	r3, [r3, #0]
 802c2f0:	681a      	ldr	r2, [r3, #0]
 802c2f2:	687b      	ldr	r3, [r7, #4]
 802c2f4:	681b      	ldr	r3, [r3, #0]
 802c2f6:	f022 021e 	bic.w	r2, r2, #30
 802c2fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802c2fc:	687b      	ldr	r3, [r7, #4]
 802c2fe:	681b      	ldr	r3, [r3, #0]
 802c300:	695a      	ldr	r2, [r3, #20]
 802c302:	687b      	ldr	r3, [r7, #4]
 802c304:	681b      	ldr	r3, [r3, #0]
 802c306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802c30a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 802c30c:	687b      	ldr	r3, [r7, #4]
 802c30e:	681b      	ldr	r3, [r3, #0]
 802c310:	617b      	str	r3, [r7, #20]
 802c312:	e00a      	b.n	802c32a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802c314:	687b      	ldr	r3, [r7, #4]
 802c316:	681b      	ldr	r3, [r3, #0]
 802c318:	681a      	ldr	r2, [r3, #0]
 802c31a:	687b      	ldr	r3, [r7, #4]
 802c31c:	681b      	ldr	r3, [r3, #0]
 802c31e:	f022 020e 	bic.w	r2, r2, #14
 802c322:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 802c324:	687b      	ldr	r3, [r7, #4]
 802c326:	681b      	ldr	r3, [r3, #0]
 802c328:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c32a:	687b      	ldr	r3, [r7, #4]
 802c32c:	681b      	ldr	r3, [r3, #0]
 802c32e:	4a3c      	ldr	r2, [pc, #240]	; (802c420 <HAL_DMA_Abort+0x214>)
 802c330:	4293      	cmp	r3, r2
 802c332:	d072      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c334:	687b      	ldr	r3, [r7, #4]
 802c336:	681b      	ldr	r3, [r3, #0]
 802c338:	4a3a      	ldr	r2, [pc, #232]	; (802c424 <HAL_DMA_Abort+0x218>)
 802c33a:	4293      	cmp	r3, r2
 802c33c:	d06d      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c33e:	687b      	ldr	r3, [r7, #4]
 802c340:	681b      	ldr	r3, [r3, #0]
 802c342:	4a39      	ldr	r2, [pc, #228]	; (802c428 <HAL_DMA_Abort+0x21c>)
 802c344:	4293      	cmp	r3, r2
 802c346:	d068      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c348:	687b      	ldr	r3, [r7, #4]
 802c34a:	681b      	ldr	r3, [r3, #0]
 802c34c:	4a37      	ldr	r2, [pc, #220]	; (802c42c <HAL_DMA_Abort+0x220>)
 802c34e:	4293      	cmp	r3, r2
 802c350:	d063      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c352:	687b      	ldr	r3, [r7, #4]
 802c354:	681b      	ldr	r3, [r3, #0]
 802c356:	4a36      	ldr	r2, [pc, #216]	; (802c430 <HAL_DMA_Abort+0x224>)
 802c358:	4293      	cmp	r3, r2
 802c35a:	d05e      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c35c:	687b      	ldr	r3, [r7, #4]
 802c35e:	681b      	ldr	r3, [r3, #0]
 802c360:	4a34      	ldr	r2, [pc, #208]	; (802c434 <HAL_DMA_Abort+0x228>)
 802c362:	4293      	cmp	r3, r2
 802c364:	d059      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c366:	687b      	ldr	r3, [r7, #4]
 802c368:	681b      	ldr	r3, [r3, #0]
 802c36a:	4a33      	ldr	r2, [pc, #204]	; (802c438 <HAL_DMA_Abort+0x22c>)
 802c36c:	4293      	cmp	r3, r2
 802c36e:	d054      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c370:	687b      	ldr	r3, [r7, #4]
 802c372:	681b      	ldr	r3, [r3, #0]
 802c374:	4a31      	ldr	r2, [pc, #196]	; (802c43c <HAL_DMA_Abort+0x230>)
 802c376:	4293      	cmp	r3, r2
 802c378:	d04f      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c37a:	687b      	ldr	r3, [r7, #4]
 802c37c:	681b      	ldr	r3, [r3, #0]
 802c37e:	4a30      	ldr	r2, [pc, #192]	; (802c440 <HAL_DMA_Abort+0x234>)
 802c380:	4293      	cmp	r3, r2
 802c382:	d04a      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c384:	687b      	ldr	r3, [r7, #4]
 802c386:	681b      	ldr	r3, [r3, #0]
 802c388:	4a2e      	ldr	r2, [pc, #184]	; (802c444 <HAL_DMA_Abort+0x238>)
 802c38a:	4293      	cmp	r3, r2
 802c38c:	d045      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c38e:	687b      	ldr	r3, [r7, #4]
 802c390:	681b      	ldr	r3, [r3, #0]
 802c392:	4a2d      	ldr	r2, [pc, #180]	; (802c448 <HAL_DMA_Abort+0x23c>)
 802c394:	4293      	cmp	r3, r2
 802c396:	d040      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c398:	687b      	ldr	r3, [r7, #4]
 802c39a:	681b      	ldr	r3, [r3, #0]
 802c39c:	4a2b      	ldr	r2, [pc, #172]	; (802c44c <HAL_DMA_Abort+0x240>)
 802c39e:	4293      	cmp	r3, r2
 802c3a0:	d03b      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3a2:	687b      	ldr	r3, [r7, #4]
 802c3a4:	681b      	ldr	r3, [r3, #0]
 802c3a6:	4a2a      	ldr	r2, [pc, #168]	; (802c450 <HAL_DMA_Abort+0x244>)
 802c3a8:	4293      	cmp	r3, r2
 802c3aa:	d036      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3ac:	687b      	ldr	r3, [r7, #4]
 802c3ae:	681b      	ldr	r3, [r3, #0]
 802c3b0:	4a28      	ldr	r2, [pc, #160]	; (802c454 <HAL_DMA_Abort+0x248>)
 802c3b2:	4293      	cmp	r3, r2
 802c3b4:	d031      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3b6:	687b      	ldr	r3, [r7, #4]
 802c3b8:	681b      	ldr	r3, [r3, #0]
 802c3ba:	4a27      	ldr	r2, [pc, #156]	; (802c458 <HAL_DMA_Abort+0x24c>)
 802c3bc:	4293      	cmp	r3, r2
 802c3be:	d02c      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3c0:	687b      	ldr	r3, [r7, #4]
 802c3c2:	681b      	ldr	r3, [r3, #0]
 802c3c4:	4a25      	ldr	r2, [pc, #148]	; (802c45c <HAL_DMA_Abort+0x250>)
 802c3c6:	4293      	cmp	r3, r2
 802c3c8:	d027      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3ca:	687b      	ldr	r3, [r7, #4]
 802c3cc:	681b      	ldr	r3, [r3, #0]
 802c3ce:	4a24      	ldr	r2, [pc, #144]	; (802c460 <HAL_DMA_Abort+0x254>)
 802c3d0:	4293      	cmp	r3, r2
 802c3d2:	d022      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3d4:	687b      	ldr	r3, [r7, #4]
 802c3d6:	681b      	ldr	r3, [r3, #0]
 802c3d8:	4a22      	ldr	r2, [pc, #136]	; (802c464 <HAL_DMA_Abort+0x258>)
 802c3da:	4293      	cmp	r3, r2
 802c3dc:	d01d      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3de:	687b      	ldr	r3, [r7, #4]
 802c3e0:	681b      	ldr	r3, [r3, #0]
 802c3e2:	4a21      	ldr	r2, [pc, #132]	; (802c468 <HAL_DMA_Abort+0x25c>)
 802c3e4:	4293      	cmp	r3, r2
 802c3e6:	d018      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3e8:	687b      	ldr	r3, [r7, #4]
 802c3ea:	681b      	ldr	r3, [r3, #0]
 802c3ec:	4a1f      	ldr	r2, [pc, #124]	; (802c46c <HAL_DMA_Abort+0x260>)
 802c3ee:	4293      	cmp	r3, r2
 802c3f0:	d013      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3f2:	687b      	ldr	r3, [r7, #4]
 802c3f4:	681b      	ldr	r3, [r3, #0]
 802c3f6:	4a1e      	ldr	r2, [pc, #120]	; (802c470 <HAL_DMA_Abort+0x264>)
 802c3f8:	4293      	cmp	r3, r2
 802c3fa:	d00e      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c3fc:	687b      	ldr	r3, [r7, #4]
 802c3fe:	681b      	ldr	r3, [r3, #0]
 802c400:	4a1c      	ldr	r2, [pc, #112]	; (802c474 <HAL_DMA_Abort+0x268>)
 802c402:	4293      	cmp	r3, r2
 802c404:	d009      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c406:	687b      	ldr	r3, [r7, #4]
 802c408:	681b      	ldr	r3, [r3, #0]
 802c40a:	4a1b      	ldr	r2, [pc, #108]	; (802c478 <HAL_DMA_Abort+0x26c>)
 802c40c:	4293      	cmp	r3, r2
 802c40e:	d004      	beq.n	802c41a <HAL_DMA_Abort+0x20e>
 802c410:	687b      	ldr	r3, [r7, #4]
 802c412:	681b      	ldr	r3, [r3, #0]
 802c414:	4a19      	ldr	r2, [pc, #100]	; (802c47c <HAL_DMA_Abort+0x270>)
 802c416:	4293      	cmp	r3, r2
 802c418:	d132      	bne.n	802c480 <HAL_DMA_Abort+0x274>
 802c41a:	2301      	movs	r3, #1
 802c41c:	e031      	b.n	802c482 <HAL_DMA_Abort+0x276>
 802c41e:	bf00      	nop
 802c420:	40020010 	.word	0x40020010
 802c424:	40020028 	.word	0x40020028
 802c428:	40020040 	.word	0x40020040
 802c42c:	40020058 	.word	0x40020058
 802c430:	40020070 	.word	0x40020070
 802c434:	40020088 	.word	0x40020088
 802c438:	400200a0 	.word	0x400200a0
 802c43c:	400200b8 	.word	0x400200b8
 802c440:	40020410 	.word	0x40020410
 802c444:	40020428 	.word	0x40020428
 802c448:	40020440 	.word	0x40020440
 802c44c:	40020458 	.word	0x40020458
 802c450:	40020470 	.word	0x40020470
 802c454:	40020488 	.word	0x40020488
 802c458:	400204a0 	.word	0x400204a0
 802c45c:	400204b8 	.word	0x400204b8
 802c460:	58025408 	.word	0x58025408
 802c464:	5802541c 	.word	0x5802541c
 802c468:	58025430 	.word	0x58025430
 802c46c:	58025444 	.word	0x58025444
 802c470:	58025458 	.word	0x58025458
 802c474:	5802546c 	.word	0x5802546c
 802c478:	58025480 	.word	0x58025480
 802c47c:	58025494 	.word	0x58025494
 802c480:	2300      	movs	r3, #0
 802c482:	2b00      	cmp	r3, #0
 802c484:	d007      	beq.n	802c496 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802c486:	687b      	ldr	r3, [r7, #4]
 802c488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c48a:	681a      	ldr	r2, [r3, #0]
 802c48c:	687b      	ldr	r3, [r7, #4]
 802c48e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802c490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c494:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 802c496:	687b      	ldr	r3, [r7, #4]
 802c498:	681b      	ldr	r3, [r3, #0]
 802c49a:	4a6d      	ldr	r2, [pc, #436]	; (802c650 <HAL_DMA_Abort+0x444>)
 802c49c:	4293      	cmp	r3, r2
 802c49e:	d04a      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4a0:	687b      	ldr	r3, [r7, #4]
 802c4a2:	681b      	ldr	r3, [r3, #0]
 802c4a4:	4a6b      	ldr	r2, [pc, #428]	; (802c654 <HAL_DMA_Abort+0x448>)
 802c4a6:	4293      	cmp	r3, r2
 802c4a8:	d045      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4aa:	687b      	ldr	r3, [r7, #4]
 802c4ac:	681b      	ldr	r3, [r3, #0]
 802c4ae:	4a6a      	ldr	r2, [pc, #424]	; (802c658 <HAL_DMA_Abort+0x44c>)
 802c4b0:	4293      	cmp	r3, r2
 802c4b2:	d040      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4b4:	687b      	ldr	r3, [r7, #4]
 802c4b6:	681b      	ldr	r3, [r3, #0]
 802c4b8:	4a68      	ldr	r2, [pc, #416]	; (802c65c <HAL_DMA_Abort+0x450>)
 802c4ba:	4293      	cmp	r3, r2
 802c4bc:	d03b      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4be:	687b      	ldr	r3, [r7, #4]
 802c4c0:	681b      	ldr	r3, [r3, #0]
 802c4c2:	4a67      	ldr	r2, [pc, #412]	; (802c660 <HAL_DMA_Abort+0x454>)
 802c4c4:	4293      	cmp	r3, r2
 802c4c6:	d036      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4c8:	687b      	ldr	r3, [r7, #4]
 802c4ca:	681b      	ldr	r3, [r3, #0]
 802c4cc:	4a65      	ldr	r2, [pc, #404]	; (802c664 <HAL_DMA_Abort+0x458>)
 802c4ce:	4293      	cmp	r3, r2
 802c4d0:	d031      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4d2:	687b      	ldr	r3, [r7, #4]
 802c4d4:	681b      	ldr	r3, [r3, #0]
 802c4d6:	4a64      	ldr	r2, [pc, #400]	; (802c668 <HAL_DMA_Abort+0x45c>)
 802c4d8:	4293      	cmp	r3, r2
 802c4da:	d02c      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4dc:	687b      	ldr	r3, [r7, #4]
 802c4de:	681b      	ldr	r3, [r3, #0]
 802c4e0:	4a62      	ldr	r2, [pc, #392]	; (802c66c <HAL_DMA_Abort+0x460>)
 802c4e2:	4293      	cmp	r3, r2
 802c4e4:	d027      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4e6:	687b      	ldr	r3, [r7, #4]
 802c4e8:	681b      	ldr	r3, [r3, #0]
 802c4ea:	4a61      	ldr	r2, [pc, #388]	; (802c670 <HAL_DMA_Abort+0x464>)
 802c4ec:	4293      	cmp	r3, r2
 802c4ee:	d022      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4f0:	687b      	ldr	r3, [r7, #4]
 802c4f2:	681b      	ldr	r3, [r3, #0]
 802c4f4:	4a5f      	ldr	r2, [pc, #380]	; (802c674 <HAL_DMA_Abort+0x468>)
 802c4f6:	4293      	cmp	r3, r2
 802c4f8:	d01d      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c4fa:	687b      	ldr	r3, [r7, #4]
 802c4fc:	681b      	ldr	r3, [r3, #0]
 802c4fe:	4a5e      	ldr	r2, [pc, #376]	; (802c678 <HAL_DMA_Abort+0x46c>)
 802c500:	4293      	cmp	r3, r2
 802c502:	d018      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c504:	687b      	ldr	r3, [r7, #4]
 802c506:	681b      	ldr	r3, [r3, #0]
 802c508:	4a5c      	ldr	r2, [pc, #368]	; (802c67c <HAL_DMA_Abort+0x470>)
 802c50a:	4293      	cmp	r3, r2
 802c50c:	d013      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c50e:	687b      	ldr	r3, [r7, #4]
 802c510:	681b      	ldr	r3, [r3, #0]
 802c512:	4a5b      	ldr	r2, [pc, #364]	; (802c680 <HAL_DMA_Abort+0x474>)
 802c514:	4293      	cmp	r3, r2
 802c516:	d00e      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c518:	687b      	ldr	r3, [r7, #4]
 802c51a:	681b      	ldr	r3, [r3, #0]
 802c51c:	4a59      	ldr	r2, [pc, #356]	; (802c684 <HAL_DMA_Abort+0x478>)
 802c51e:	4293      	cmp	r3, r2
 802c520:	d009      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c522:	687b      	ldr	r3, [r7, #4]
 802c524:	681b      	ldr	r3, [r3, #0]
 802c526:	4a58      	ldr	r2, [pc, #352]	; (802c688 <HAL_DMA_Abort+0x47c>)
 802c528:	4293      	cmp	r3, r2
 802c52a:	d004      	beq.n	802c536 <HAL_DMA_Abort+0x32a>
 802c52c:	687b      	ldr	r3, [r7, #4]
 802c52e:	681b      	ldr	r3, [r3, #0]
 802c530:	4a56      	ldr	r2, [pc, #344]	; (802c68c <HAL_DMA_Abort+0x480>)
 802c532:	4293      	cmp	r3, r2
 802c534:	d108      	bne.n	802c548 <HAL_DMA_Abort+0x33c>
 802c536:	687b      	ldr	r3, [r7, #4]
 802c538:	681b      	ldr	r3, [r3, #0]
 802c53a:	681a      	ldr	r2, [r3, #0]
 802c53c:	687b      	ldr	r3, [r7, #4]
 802c53e:	681b      	ldr	r3, [r3, #0]
 802c540:	f022 0201 	bic.w	r2, r2, #1
 802c544:	601a      	str	r2, [r3, #0]
 802c546:	e007      	b.n	802c558 <HAL_DMA_Abort+0x34c>
 802c548:	687b      	ldr	r3, [r7, #4]
 802c54a:	681b      	ldr	r3, [r3, #0]
 802c54c:	681a      	ldr	r2, [r3, #0]
 802c54e:	687b      	ldr	r3, [r7, #4]
 802c550:	681b      	ldr	r3, [r3, #0]
 802c552:	f022 0201 	bic.w	r2, r2, #1
 802c556:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c558:	e013      	b.n	802c582 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802c55a:	f7fe fb95 	bl	802ac88 <HAL_GetTick>
 802c55e:	4602      	mov	r2, r0
 802c560:	693b      	ldr	r3, [r7, #16]
 802c562:	1ad3      	subs	r3, r2, r3
 802c564:	2b05      	cmp	r3, #5
 802c566:	d90c      	bls.n	802c582 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 802c568:	687b      	ldr	r3, [r7, #4]
 802c56a:	2220      	movs	r2, #32
 802c56c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 802c56e:	687b      	ldr	r3, [r7, #4]
 802c570:	2203      	movs	r2, #3
 802c572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802c576:	687b      	ldr	r3, [r7, #4]
 802c578:	2200      	movs	r2, #0
 802c57a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 802c57e:	2301      	movs	r3, #1
 802c580:	e12d      	b.n	802c7de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 802c582:	697b      	ldr	r3, [r7, #20]
 802c584:	681b      	ldr	r3, [r3, #0]
 802c586:	f003 0301 	and.w	r3, r3, #1
 802c58a:	2b00      	cmp	r3, #0
 802c58c:	d1e5      	bne.n	802c55a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c58e:	687b      	ldr	r3, [r7, #4]
 802c590:	681b      	ldr	r3, [r3, #0]
 802c592:	4a2f      	ldr	r2, [pc, #188]	; (802c650 <HAL_DMA_Abort+0x444>)
 802c594:	4293      	cmp	r3, r2
 802c596:	d04a      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c598:	687b      	ldr	r3, [r7, #4]
 802c59a:	681b      	ldr	r3, [r3, #0]
 802c59c:	4a2d      	ldr	r2, [pc, #180]	; (802c654 <HAL_DMA_Abort+0x448>)
 802c59e:	4293      	cmp	r3, r2
 802c5a0:	d045      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5a2:	687b      	ldr	r3, [r7, #4]
 802c5a4:	681b      	ldr	r3, [r3, #0]
 802c5a6:	4a2c      	ldr	r2, [pc, #176]	; (802c658 <HAL_DMA_Abort+0x44c>)
 802c5a8:	4293      	cmp	r3, r2
 802c5aa:	d040      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5ac:	687b      	ldr	r3, [r7, #4]
 802c5ae:	681b      	ldr	r3, [r3, #0]
 802c5b0:	4a2a      	ldr	r2, [pc, #168]	; (802c65c <HAL_DMA_Abort+0x450>)
 802c5b2:	4293      	cmp	r3, r2
 802c5b4:	d03b      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5b6:	687b      	ldr	r3, [r7, #4]
 802c5b8:	681b      	ldr	r3, [r3, #0]
 802c5ba:	4a29      	ldr	r2, [pc, #164]	; (802c660 <HAL_DMA_Abort+0x454>)
 802c5bc:	4293      	cmp	r3, r2
 802c5be:	d036      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5c0:	687b      	ldr	r3, [r7, #4]
 802c5c2:	681b      	ldr	r3, [r3, #0]
 802c5c4:	4a27      	ldr	r2, [pc, #156]	; (802c664 <HAL_DMA_Abort+0x458>)
 802c5c6:	4293      	cmp	r3, r2
 802c5c8:	d031      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5ca:	687b      	ldr	r3, [r7, #4]
 802c5cc:	681b      	ldr	r3, [r3, #0]
 802c5ce:	4a26      	ldr	r2, [pc, #152]	; (802c668 <HAL_DMA_Abort+0x45c>)
 802c5d0:	4293      	cmp	r3, r2
 802c5d2:	d02c      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5d4:	687b      	ldr	r3, [r7, #4]
 802c5d6:	681b      	ldr	r3, [r3, #0]
 802c5d8:	4a24      	ldr	r2, [pc, #144]	; (802c66c <HAL_DMA_Abort+0x460>)
 802c5da:	4293      	cmp	r3, r2
 802c5dc:	d027      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5de:	687b      	ldr	r3, [r7, #4]
 802c5e0:	681b      	ldr	r3, [r3, #0]
 802c5e2:	4a23      	ldr	r2, [pc, #140]	; (802c670 <HAL_DMA_Abort+0x464>)
 802c5e4:	4293      	cmp	r3, r2
 802c5e6:	d022      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5e8:	687b      	ldr	r3, [r7, #4]
 802c5ea:	681b      	ldr	r3, [r3, #0]
 802c5ec:	4a21      	ldr	r2, [pc, #132]	; (802c674 <HAL_DMA_Abort+0x468>)
 802c5ee:	4293      	cmp	r3, r2
 802c5f0:	d01d      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5f2:	687b      	ldr	r3, [r7, #4]
 802c5f4:	681b      	ldr	r3, [r3, #0]
 802c5f6:	4a20      	ldr	r2, [pc, #128]	; (802c678 <HAL_DMA_Abort+0x46c>)
 802c5f8:	4293      	cmp	r3, r2
 802c5fa:	d018      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c5fc:	687b      	ldr	r3, [r7, #4]
 802c5fe:	681b      	ldr	r3, [r3, #0]
 802c600:	4a1e      	ldr	r2, [pc, #120]	; (802c67c <HAL_DMA_Abort+0x470>)
 802c602:	4293      	cmp	r3, r2
 802c604:	d013      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c606:	687b      	ldr	r3, [r7, #4]
 802c608:	681b      	ldr	r3, [r3, #0]
 802c60a:	4a1d      	ldr	r2, [pc, #116]	; (802c680 <HAL_DMA_Abort+0x474>)
 802c60c:	4293      	cmp	r3, r2
 802c60e:	d00e      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c610:	687b      	ldr	r3, [r7, #4]
 802c612:	681b      	ldr	r3, [r3, #0]
 802c614:	4a1b      	ldr	r2, [pc, #108]	; (802c684 <HAL_DMA_Abort+0x478>)
 802c616:	4293      	cmp	r3, r2
 802c618:	d009      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c61a:	687b      	ldr	r3, [r7, #4]
 802c61c:	681b      	ldr	r3, [r3, #0]
 802c61e:	4a1a      	ldr	r2, [pc, #104]	; (802c688 <HAL_DMA_Abort+0x47c>)
 802c620:	4293      	cmp	r3, r2
 802c622:	d004      	beq.n	802c62e <HAL_DMA_Abort+0x422>
 802c624:	687b      	ldr	r3, [r7, #4]
 802c626:	681b      	ldr	r3, [r3, #0]
 802c628:	4a18      	ldr	r2, [pc, #96]	; (802c68c <HAL_DMA_Abort+0x480>)
 802c62a:	4293      	cmp	r3, r2
 802c62c:	d101      	bne.n	802c632 <HAL_DMA_Abort+0x426>
 802c62e:	2301      	movs	r3, #1
 802c630:	e000      	b.n	802c634 <HAL_DMA_Abort+0x428>
 802c632:	2300      	movs	r3, #0
 802c634:	2b00      	cmp	r3, #0
 802c636:	d02b      	beq.n	802c690 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802c638:	687b      	ldr	r3, [r7, #4]
 802c63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c63c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802c63e:	687b      	ldr	r3, [r7, #4]
 802c640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c642:	f003 031f 	and.w	r3, r3, #31
 802c646:	223f      	movs	r2, #63	; 0x3f
 802c648:	409a      	lsls	r2, r3
 802c64a:	68bb      	ldr	r3, [r7, #8]
 802c64c:	609a      	str	r2, [r3, #8]
 802c64e:	e02a      	b.n	802c6a6 <HAL_DMA_Abort+0x49a>
 802c650:	40020010 	.word	0x40020010
 802c654:	40020028 	.word	0x40020028
 802c658:	40020040 	.word	0x40020040
 802c65c:	40020058 	.word	0x40020058
 802c660:	40020070 	.word	0x40020070
 802c664:	40020088 	.word	0x40020088
 802c668:	400200a0 	.word	0x400200a0
 802c66c:	400200b8 	.word	0x400200b8
 802c670:	40020410 	.word	0x40020410
 802c674:	40020428 	.word	0x40020428
 802c678:	40020440 	.word	0x40020440
 802c67c:	40020458 	.word	0x40020458
 802c680:	40020470 	.word	0x40020470
 802c684:	40020488 	.word	0x40020488
 802c688:	400204a0 	.word	0x400204a0
 802c68c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802c690:	687b      	ldr	r3, [r7, #4]
 802c692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802c694:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802c696:	687b      	ldr	r3, [r7, #4]
 802c698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802c69a:	f003 031f 	and.w	r3, r3, #31
 802c69e:	2201      	movs	r2, #1
 802c6a0:	409a      	lsls	r2, r3
 802c6a2:	68fb      	ldr	r3, [r7, #12]
 802c6a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802c6a6:	687b      	ldr	r3, [r7, #4]
 802c6a8:	681b      	ldr	r3, [r3, #0]
 802c6aa:	4a4f      	ldr	r2, [pc, #316]	; (802c7e8 <HAL_DMA_Abort+0x5dc>)
 802c6ac:	4293      	cmp	r3, r2
 802c6ae:	d072      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c6b0:	687b      	ldr	r3, [r7, #4]
 802c6b2:	681b      	ldr	r3, [r3, #0]
 802c6b4:	4a4d      	ldr	r2, [pc, #308]	; (802c7ec <HAL_DMA_Abort+0x5e0>)
 802c6b6:	4293      	cmp	r3, r2
 802c6b8:	d06d      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c6ba:	687b      	ldr	r3, [r7, #4]
 802c6bc:	681b      	ldr	r3, [r3, #0]
 802c6be:	4a4c      	ldr	r2, [pc, #304]	; (802c7f0 <HAL_DMA_Abort+0x5e4>)
 802c6c0:	4293      	cmp	r3, r2
 802c6c2:	d068      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c6c4:	687b      	ldr	r3, [r7, #4]
 802c6c6:	681b      	ldr	r3, [r3, #0]
 802c6c8:	4a4a      	ldr	r2, [pc, #296]	; (802c7f4 <HAL_DMA_Abort+0x5e8>)
 802c6ca:	4293      	cmp	r3, r2
 802c6cc:	d063      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c6ce:	687b      	ldr	r3, [r7, #4]
 802c6d0:	681b      	ldr	r3, [r3, #0]
 802c6d2:	4a49      	ldr	r2, [pc, #292]	; (802c7f8 <HAL_DMA_Abort+0x5ec>)
 802c6d4:	4293      	cmp	r3, r2
 802c6d6:	d05e      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c6d8:	687b      	ldr	r3, [r7, #4]
 802c6da:	681b      	ldr	r3, [r3, #0]
 802c6dc:	4a47      	ldr	r2, [pc, #284]	; (802c7fc <HAL_DMA_Abort+0x5f0>)
 802c6de:	4293      	cmp	r3, r2
 802c6e0:	d059      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c6e2:	687b      	ldr	r3, [r7, #4]
 802c6e4:	681b      	ldr	r3, [r3, #0]
 802c6e6:	4a46      	ldr	r2, [pc, #280]	; (802c800 <HAL_DMA_Abort+0x5f4>)
 802c6e8:	4293      	cmp	r3, r2
 802c6ea:	d054      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c6ec:	687b      	ldr	r3, [r7, #4]
 802c6ee:	681b      	ldr	r3, [r3, #0]
 802c6f0:	4a44      	ldr	r2, [pc, #272]	; (802c804 <HAL_DMA_Abort+0x5f8>)
 802c6f2:	4293      	cmp	r3, r2
 802c6f4:	d04f      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c6f6:	687b      	ldr	r3, [r7, #4]
 802c6f8:	681b      	ldr	r3, [r3, #0]
 802c6fa:	4a43      	ldr	r2, [pc, #268]	; (802c808 <HAL_DMA_Abort+0x5fc>)
 802c6fc:	4293      	cmp	r3, r2
 802c6fe:	d04a      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c700:	687b      	ldr	r3, [r7, #4]
 802c702:	681b      	ldr	r3, [r3, #0]
 802c704:	4a41      	ldr	r2, [pc, #260]	; (802c80c <HAL_DMA_Abort+0x600>)
 802c706:	4293      	cmp	r3, r2
 802c708:	d045      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c70a:	687b      	ldr	r3, [r7, #4]
 802c70c:	681b      	ldr	r3, [r3, #0]
 802c70e:	4a40      	ldr	r2, [pc, #256]	; (802c810 <HAL_DMA_Abort+0x604>)
 802c710:	4293      	cmp	r3, r2
 802c712:	d040      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c714:	687b      	ldr	r3, [r7, #4]
 802c716:	681b      	ldr	r3, [r3, #0]
 802c718:	4a3e      	ldr	r2, [pc, #248]	; (802c814 <HAL_DMA_Abort+0x608>)
 802c71a:	4293      	cmp	r3, r2
 802c71c:	d03b      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c71e:	687b      	ldr	r3, [r7, #4]
 802c720:	681b      	ldr	r3, [r3, #0]
 802c722:	4a3d      	ldr	r2, [pc, #244]	; (802c818 <HAL_DMA_Abort+0x60c>)
 802c724:	4293      	cmp	r3, r2
 802c726:	d036      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c728:	687b      	ldr	r3, [r7, #4]
 802c72a:	681b      	ldr	r3, [r3, #0]
 802c72c:	4a3b      	ldr	r2, [pc, #236]	; (802c81c <HAL_DMA_Abort+0x610>)
 802c72e:	4293      	cmp	r3, r2
 802c730:	d031      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c732:	687b      	ldr	r3, [r7, #4]
 802c734:	681b      	ldr	r3, [r3, #0]
 802c736:	4a3a      	ldr	r2, [pc, #232]	; (802c820 <HAL_DMA_Abort+0x614>)
 802c738:	4293      	cmp	r3, r2
 802c73a:	d02c      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c73c:	687b      	ldr	r3, [r7, #4]
 802c73e:	681b      	ldr	r3, [r3, #0]
 802c740:	4a38      	ldr	r2, [pc, #224]	; (802c824 <HAL_DMA_Abort+0x618>)
 802c742:	4293      	cmp	r3, r2
 802c744:	d027      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c746:	687b      	ldr	r3, [r7, #4]
 802c748:	681b      	ldr	r3, [r3, #0]
 802c74a:	4a37      	ldr	r2, [pc, #220]	; (802c828 <HAL_DMA_Abort+0x61c>)
 802c74c:	4293      	cmp	r3, r2
 802c74e:	d022      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c750:	687b      	ldr	r3, [r7, #4]
 802c752:	681b      	ldr	r3, [r3, #0]
 802c754:	4a35      	ldr	r2, [pc, #212]	; (802c82c <HAL_DMA_Abort+0x620>)
 802c756:	4293      	cmp	r3, r2
 802c758:	d01d      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c75a:	687b      	ldr	r3, [r7, #4]
 802c75c:	681b      	ldr	r3, [r3, #0]
 802c75e:	4a34      	ldr	r2, [pc, #208]	; (802c830 <HAL_DMA_Abort+0x624>)
 802c760:	4293      	cmp	r3, r2
 802c762:	d018      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c764:	687b      	ldr	r3, [r7, #4]
 802c766:	681b      	ldr	r3, [r3, #0]
 802c768:	4a32      	ldr	r2, [pc, #200]	; (802c834 <HAL_DMA_Abort+0x628>)
 802c76a:	4293      	cmp	r3, r2
 802c76c:	d013      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c76e:	687b      	ldr	r3, [r7, #4]
 802c770:	681b      	ldr	r3, [r3, #0]
 802c772:	4a31      	ldr	r2, [pc, #196]	; (802c838 <HAL_DMA_Abort+0x62c>)
 802c774:	4293      	cmp	r3, r2
 802c776:	d00e      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c778:	687b      	ldr	r3, [r7, #4]
 802c77a:	681b      	ldr	r3, [r3, #0]
 802c77c:	4a2f      	ldr	r2, [pc, #188]	; (802c83c <HAL_DMA_Abort+0x630>)
 802c77e:	4293      	cmp	r3, r2
 802c780:	d009      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c782:	687b      	ldr	r3, [r7, #4]
 802c784:	681b      	ldr	r3, [r3, #0]
 802c786:	4a2e      	ldr	r2, [pc, #184]	; (802c840 <HAL_DMA_Abort+0x634>)
 802c788:	4293      	cmp	r3, r2
 802c78a:	d004      	beq.n	802c796 <HAL_DMA_Abort+0x58a>
 802c78c:	687b      	ldr	r3, [r7, #4]
 802c78e:	681b      	ldr	r3, [r3, #0]
 802c790:	4a2c      	ldr	r2, [pc, #176]	; (802c844 <HAL_DMA_Abort+0x638>)
 802c792:	4293      	cmp	r3, r2
 802c794:	d101      	bne.n	802c79a <HAL_DMA_Abort+0x58e>
 802c796:	2301      	movs	r3, #1
 802c798:	e000      	b.n	802c79c <HAL_DMA_Abort+0x590>
 802c79a:	2300      	movs	r3, #0
 802c79c:	2b00      	cmp	r3, #0
 802c79e:	d015      	beq.n	802c7cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802c7a0:	687b      	ldr	r3, [r7, #4]
 802c7a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802c7a4:	687a      	ldr	r2, [r7, #4]
 802c7a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802c7a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 802c7aa:	687b      	ldr	r3, [r7, #4]
 802c7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c7ae:	2b00      	cmp	r3, #0
 802c7b0:	d00c      	beq.n	802c7cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802c7b2:	687b      	ldr	r3, [r7, #4]
 802c7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c7b6:	681a      	ldr	r2, [r3, #0]
 802c7b8:	687b      	ldr	r3, [r7, #4]
 802c7ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802c7bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802c7c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802c7c2:	687b      	ldr	r3, [r7, #4]
 802c7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802c7c6:	687a      	ldr	r2, [r7, #4]
 802c7c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802c7ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802c7cc:	687b      	ldr	r3, [r7, #4]
 802c7ce:	2201      	movs	r2, #1
 802c7d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802c7d4:	687b      	ldr	r3, [r7, #4]
 802c7d6:	2200      	movs	r2, #0
 802c7d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 802c7dc:	2300      	movs	r3, #0
}
 802c7de:	4618      	mov	r0, r3
 802c7e0:	3718      	adds	r7, #24
 802c7e2:	46bd      	mov	sp, r7
 802c7e4:	bd80      	pop	{r7, pc}
 802c7e6:	bf00      	nop
 802c7e8:	40020010 	.word	0x40020010
 802c7ec:	40020028 	.word	0x40020028
 802c7f0:	40020040 	.word	0x40020040
 802c7f4:	40020058 	.word	0x40020058
 802c7f8:	40020070 	.word	0x40020070
 802c7fc:	40020088 	.word	0x40020088
 802c800:	400200a0 	.word	0x400200a0
 802c804:	400200b8 	.word	0x400200b8
 802c808:	40020410 	.word	0x40020410
 802c80c:	40020428 	.word	0x40020428
 802c810:	40020440 	.word	0x40020440
 802c814:	40020458 	.word	0x40020458
 802c818:	40020470 	.word	0x40020470
 802c81c:	40020488 	.word	0x40020488
 802c820:	400204a0 	.word	0x400204a0
 802c824:	400204b8 	.word	0x400204b8
 802c828:	58025408 	.word	0x58025408
 802c82c:	5802541c 	.word	0x5802541c
 802c830:	58025430 	.word	0x58025430
 802c834:	58025444 	.word	0x58025444
 802c838:	58025458 	.word	0x58025458
 802c83c:	5802546c 	.word	0x5802546c
 802c840:	58025480 	.word	0x58025480
 802c844:	58025494 	.word	0x58025494

0802c848 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802c848:	b580      	push	{r7, lr}
 802c84a:	b084      	sub	sp, #16
 802c84c:	af00      	add	r7, sp, #0
 802c84e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 802c850:	687b      	ldr	r3, [r7, #4]
 802c852:	2b00      	cmp	r3, #0
 802c854:	d101      	bne.n	802c85a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 802c856:	2301      	movs	r3, #1
 802c858:	e237      	b.n	802ccca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 802c85a:	687b      	ldr	r3, [r7, #4]
 802c85c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c860:	b2db      	uxtb	r3, r3
 802c862:	2b02      	cmp	r3, #2
 802c864:	d004      	beq.n	802c870 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802c866:	687b      	ldr	r3, [r7, #4]
 802c868:	2280      	movs	r2, #128	; 0x80
 802c86a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 802c86c:	2301      	movs	r3, #1
 802c86e:	e22c      	b.n	802ccca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802c870:	687b      	ldr	r3, [r7, #4]
 802c872:	681b      	ldr	r3, [r3, #0]
 802c874:	4a5c      	ldr	r2, [pc, #368]	; (802c9e8 <HAL_DMA_Abort_IT+0x1a0>)
 802c876:	4293      	cmp	r3, r2
 802c878:	d04a      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c87a:	687b      	ldr	r3, [r7, #4]
 802c87c:	681b      	ldr	r3, [r3, #0]
 802c87e:	4a5b      	ldr	r2, [pc, #364]	; (802c9ec <HAL_DMA_Abort_IT+0x1a4>)
 802c880:	4293      	cmp	r3, r2
 802c882:	d045      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c884:	687b      	ldr	r3, [r7, #4]
 802c886:	681b      	ldr	r3, [r3, #0]
 802c888:	4a59      	ldr	r2, [pc, #356]	; (802c9f0 <HAL_DMA_Abort_IT+0x1a8>)
 802c88a:	4293      	cmp	r3, r2
 802c88c:	d040      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c88e:	687b      	ldr	r3, [r7, #4]
 802c890:	681b      	ldr	r3, [r3, #0]
 802c892:	4a58      	ldr	r2, [pc, #352]	; (802c9f4 <HAL_DMA_Abort_IT+0x1ac>)
 802c894:	4293      	cmp	r3, r2
 802c896:	d03b      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c898:	687b      	ldr	r3, [r7, #4]
 802c89a:	681b      	ldr	r3, [r3, #0]
 802c89c:	4a56      	ldr	r2, [pc, #344]	; (802c9f8 <HAL_DMA_Abort_IT+0x1b0>)
 802c89e:	4293      	cmp	r3, r2
 802c8a0:	d036      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8a2:	687b      	ldr	r3, [r7, #4]
 802c8a4:	681b      	ldr	r3, [r3, #0]
 802c8a6:	4a55      	ldr	r2, [pc, #340]	; (802c9fc <HAL_DMA_Abort_IT+0x1b4>)
 802c8a8:	4293      	cmp	r3, r2
 802c8aa:	d031      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8ac:	687b      	ldr	r3, [r7, #4]
 802c8ae:	681b      	ldr	r3, [r3, #0]
 802c8b0:	4a53      	ldr	r2, [pc, #332]	; (802ca00 <HAL_DMA_Abort_IT+0x1b8>)
 802c8b2:	4293      	cmp	r3, r2
 802c8b4:	d02c      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8b6:	687b      	ldr	r3, [r7, #4]
 802c8b8:	681b      	ldr	r3, [r3, #0]
 802c8ba:	4a52      	ldr	r2, [pc, #328]	; (802ca04 <HAL_DMA_Abort_IT+0x1bc>)
 802c8bc:	4293      	cmp	r3, r2
 802c8be:	d027      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8c0:	687b      	ldr	r3, [r7, #4]
 802c8c2:	681b      	ldr	r3, [r3, #0]
 802c8c4:	4a50      	ldr	r2, [pc, #320]	; (802ca08 <HAL_DMA_Abort_IT+0x1c0>)
 802c8c6:	4293      	cmp	r3, r2
 802c8c8:	d022      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8ca:	687b      	ldr	r3, [r7, #4]
 802c8cc:	681b      	ldr	r3, [r3, #0]
 802c8ce:	4a4f      	ldr	r2, [pc, #316]	; (802ca0c <HAL_DMA_Abort_IT+0x1c4>)
 802c8d0:	4293      	cmp	r3, r2
 802c8d2:	d01d      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8d4:	687b      	ldr	r3, [r7, #4]
 802c8d6:	681b      	ldr	r3, [r3, #0]
 802c8d8:	4a4d      	ldr	r2, [pc, #308]	; (802ca10 <HAL_DMA_Abort_IT+0x1c8>)
 802c8da:	4293      	cmp	r3, r2
 802c8dc:	d018      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8de:	687b      	ldr	r3, [r7, #4]
 802c8e0:	681b      	ldr	r3, [r3, #0]
 802c8e2:	4a4c      	ldr	r2, [pc, #304]	; (802ca14 <HAL_DMA_Abort_IT+0x1cc>)
 802c8e4:	4293      	cmp	r3, r2
 802c8e6:	d013      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8e8:	687b      	ldr	r3, [r7, #4]
 802c8ea:	681b      	ldr	r3, [r3, #0]
 802c8ec:	4a4a      	ldr	r2, [pc, #296]	; (802ca18 <HAL_DMA_Abort_IT+0x1d0>)
 802c8ee:	4293      	cmp	r3, r2
 802c8f0:	d00e      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8f2:	687b      	ldr	r3, [r7, #4]
 802c8f4:	681b      	ldr	r3, [r3, #0]
 802c8f6:	4a49      	ldr	r2, [pc, #292]	; (802ca1c <HAL_DMA_Abort_IT+0x1d4>)
 802c8f8:	4293      	cmp	r3, r2
 802c8fa:	d009      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c8fc:	687b      	ldr	r3, [r7, #4]
 802c8fe:	681b      	ldr	r3, [r3, #0]
 802c900:	4a47      	ldr	r2, [pc, #284]	; (802ca20 <HAL_DMA_Abort_IT+0x1d8>)
 802c902:	4293      	cmp	r3, r2
 802c904:	d004      	beq.n	802c910 <HAL_DMA_Abort_IT+0xc8>
 802c906:	687b      	ldr	r3, [r7, #4]
 802c908:	681b      	ldr	r3, [r3, #0]
 802c90a:	4a46      	ldr	r2, [pc, #280]	; (802ca24 <HAL_DMA_Abort_IT+0x1dc>)
 802c90c:	4293      	cmp	r3, r2
 802c90e:	d101      	bne.n	802c914 <HAL_DMA_Abort_IT+0xcc>
 802c910:	2301      	movs	r3, #1
 802c912:	e000      	b.n	802c916 <HAL_DMA_Abort_IT+0xce>
 802c914:	2300      	movs	r3, #0
 802c916:	2b00      	cmp	r3, #0
 802c918:	f000 8086 	beq.w	802ca28 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802c91c:	687b      	ldr	r3, [r7, #4]
 802c91e:	2204      	movs	r2, #4
 802c920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802c924:	687b      	ldr	r3, [r7, #4]
 802c926:	681b      	ldr	r3, [r3, #0]
 802c928:	4a2f      	ldr	r2, [pc, #188]	; (802c9e8 <HAL_DMA_Abort_IT+0x1a0>)
 802c92a:	4293      	cmp	r3, r2
 802c92c:	d04a      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c92e:	687b      	ldr	r3, [r7, #4]
 802c930:	681b      	ldr	r3, [r3, #0]
 802c932:	4a2e      	ldr	r2, [pc, #184]	; (802c9ec <HAL_DMA_Abort_IT+0x1a4>)
 802c934:	4293      	cmp	r3, r2
 802c936:	d045      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c938:	687b      	ldr	r3, [r7, #4]
 802c93a:	681b      	ldr	r3, [r3, #0]
 802c93c:	4a2c      	ldr	r2, [pc, #176]	; (802c9f0 <HAL_DMA_Abort_IT+0x1a8>)
 802c93e:	4293      	cmp	r3, r2
 802c940:	d040      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c942:	687b      	ldr	r3, [r7, #4]
 802c944:	681b      	ldr	r3, [r3, #0]
 802c946:	4a2b      	ldr	r2, [pc, #172]	; (802c9f4 <HAL_DMA_Abort_IT+0x1ac>)
 802c948:	4293      	cmp	r3, r2
 802c94a:	d03b      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c94c:	687b      	ldr	r3, [r7, #4]
 802c94e:	681b      	ldr	r3, [r3, #0]
 802c950:	4a29      	ldr	r2, [pc, #164]	; (802c9f8 <HAL_DMA_Abort_IT+0x1b0>)
 802c952:	4293      	cmp	r3, r2
 802c954:	d036      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c956:	687b      	ldr	r3, [r7, #4]
 802c958:	681b      	ldr	r3, [r3, #0]
 802c95a:	4a28      	ldr	r2, [pc, #160]	; (802c9fc <HAL_DMA_Abort_IT+0x1b4>)
 802c95c:	4293      	cmp	r3, r2
 802c95e:	d031      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c960:	687b      	ldr	r3, [r7, #4]
 802c962:	681b      	ldr	r3, [r3, #0]
 802c964:	4a26      	ldr	r2, [pc, #152]	; (802ca00 <HAL_DMA_Abort_IT+0x1b8>)
 802c966:	4293      	cmp	r3, r2
 802c968:	d02c      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c96a:	687b      	ldr	r3, [r7, #4]
 802c96c:	681b      	ldr	r3, [r3, #0]
 802c96e:	4a25      	ldr	r2, [pc, #148]	; (802ca04 <HAL_DMA_Abort_IT+0x1bc>)
 802c970:	4293      	cmp	r3, r2
 802c972:	d027      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c974:	687b      	ldr	r3, [r7, #4]
 802c976:	681b      	ldr	r3, [r3, #0]
 802c978:	4a23      	ldr	r2, [pc, #140]	; (802ca08 <HAL_DMA_Abort_IT+0x1c0>)
 802c97a:	4293      	cmp	r3, r2
 802c97c:	d022      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c97e:	687b      	ldr	r3, [r7, #4]
 802c980:	681b      	ldr	r3, [r3, #0]
 802c982:	4a22      	ldr	r2, [pc, #136]	; (802ca0c <HAL_DMA_Abort_IT+0x1c4>)
 802c984:	4293      	cmp	r3, r2
 802c986:	d01d      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c988:	687b      	ldr	r3, [r7, #4]
 802c98a:	681b      	ldr	r3, [r3, #0]
 802c98c:	4a20      	ldr	r2, [pc, #128]	; (802ca10 <HAL_DMA_Abort_IT+0x1c8>)
 802c98e:	4293      	cmp	r3, r2
 802c990:	d018      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c992:	687b      	ldr	r3, [r7, #4]
 802c994:	681b      	ldr	r3, [r3, #0]
 802c996:	4a1f      	ldr	r2, [pc, #124]	; (802ca14 <HAL_DMA_Abort_IT+0x1cc>)
 802c998:	4293      	cmp	r3, r2
 802c99a:	d013      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c99c:	687b      	ldr	r3, [r7, #4]
 802c99e:	681b      	ldr	r3, [r3, #0]
 802c9a0:	4a1d      	ldr	r2, [pc, #116]	; (802ca18 <HAL_DMA_Abort_IT+0x1d0>)
 802c9a2:	4293      	cmp	r3, r2
 802c9a4:	d00e      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c9a6:	687b      	ldr	r3, [r7, #4]
 802c9a8:	681b      	ldr	r3, [r3, #0]
 802c9aa:	4a1c      	ldr	r2, [pc, #112]	; (802ca1c <HAL_DMA_Abort_IT+0x1d4>)
 802c9ac:	4293      	cmp	r3, r2
 802c9ae:	d009      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c9b0:	687b      	ldr	r3, [r7, #4]
 802c9b2:	681b      	ldr	r3, [r3, #0]
 802c9b4:	4a1a      	ldr	r2, [pc, #104]	; (802ca20 <HAL_DMA_Abort_IT+0x1d8>)
 802c9b6:	4293      	cmp	r3, r2
 802c9b8:	d004      	beq.n	802c9c4 <HAL_DMA_Abort_IT+0x17c>
 802c9ba:	687b      	ldr	r3, [r7, #4]
 802c9bc:	681b      	ldr	r3, [r3, #0]
 802c9be:	4a19      	ldr	r2, [pc, #100]	; (802ca24 <HAL_DMA_Abort_IT+0x1dc>)
 802c9c0:	4293      	cmp	r3, r2
 802c9c2:	d108      	bne.n	802c9d6 <HAL_DMA_Abort_IT+0x18e>
 802c9c4:	687b      	ldr	r3, [r7, #4]
 802c9c6:	681b      	ldr	r3, [r3, #0]
 802c9c8:	681a      	ldr	r2, [r3, #0]
 802c9ca:	687b      	ldr	r3, [r7, #4]
 802c9cc:	681b      	ldr	r3, [r3, #0]
 802c9ce:	f022 0201 	bic.w	r2, r2, #1
 802c9d2:	601a      	str	r2, [r3, #0]
 802c9d4:	e178      	b.n	802ccc8 <HAL_DMA_Abort_IT+0x480>
 802c9d6:	687b      	ldr	r3, [r7, #4]
 802c9d8:	681b      	ldr	r3, [r3, #0]
 802c9da:	681a      	ldr	r2, [r3, #0]
 802c9dc:	687b      	ldr	r3, [r7, #4]
 802c9de:	681b      	ldr	r3, [r3, #0]
 802c9e0:	f022 0201 	bic.w	r2, r2, #1
 802c9e4:	601a      	str	r2, [r3, #0]
 802c9e6:	e16f      	b.n	802ccc8 <HAL_DMA_Abort_IT+0x480>
 802c9e8:	40020010 	.word	0x40020010
 802c9ec:	40020028 	.word	0x40020028
 802c9f0:	40020040 	.word	0x40020040
 802c9f4:	40020058 	.word	0x40020058
 802c9f8:	40020070 	.word	0x40020070
 802c9fc:	40020088 	.word	0x40020088
 802ca00:	400200a0 	.word	0x400200a0
 802ca04:	400200b8 	.word	0x400200b8
 802ca08:	40020410 	.word	0x40020410
 802ca0c:	40020428 	.word	0x40020428
 802ca10:	40020440 	.word	0x40020440
 802ca14:	40020458 	.word	0x40020458
 802ca18:	40020470 	.word	0x40020470
 802ca1c:	40020488 	.word	0x40020488
 802ca20:	400204a0 	.word	0x400204a0
 802ca24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 802ca28:	687b      	ldr	r3, [r7, #4]
 802ca2a:	681b      	ldr	r3, [r3, #0]
 802ca2c:	681a      	ldr	r2, [r3, #0]
 802ca2e:	687b      	ldr	r3, [r7, #4]
 802ca30:	681b      	ldr	r3, [r3, #0]
 802ca32:	f022 020e 	bic.w	r2, r2, #14
 802ca36:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 802ca38:	687b      	ldr	r3, [r7, #4]
 802ca3a:	681b      	ldr	r3, [r3, #0]
 802ca3c:	4a6c      	ldr	r2, [pc, #432]	; (802cbf0 <HAL_DMA_Abort_IT+0x3a8>)
 802ca3e:	4293      	cmp	r3, r2
 802ca40:	d04a      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca42:	687b      	ldr	r3, [r7, #4]
 802ca44:	681b      	ldr	r3, [r3, #0]
 802ca46:	4a6b      	ldr	r2, [pc, #428]	; (802cbf4 <HAL_DMA_Abort_IT+0x3ac>)
 802ca48:	4293      	cmp	r3, r2
 802ca4a:	d045      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca4c:	687b      	ldr	r3, [r7, #4]
 802ca4e:	681b      	ldr	r3, [r3, #0]
 802ca50:	4a69      	ldr	r2, [pc, #420]	; (802cbf8 <HAL_DMA_Abort_IT+0x3b0>)
 802ca52:	4293      	cmp	r3, r2
 802ca54:	d040      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca56:	687b      	ldr	r3, [r7, #4]
 802ca58:	681b      	ldr	r3, [r3, #0]
 802ca5a:	4a68      	ldr	r2, [pc, #416]	; (802cbfc <HAL_DMA_Abort_IT+0x3b4>)
 802ca5c:	4293      	cmp	r3, r2
 802ca5e:	d03b      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca60:	687b      	ldr	r3, [r7, #4]
 802ca62:	681b      	ldr	r3, [r3, #0]
 802ca64:	4a66      	ldr	r2, [pc, #408]	; (802cc00 <HAL_DMA_Abort_IT+0x3b8>)
 802ca66:	4293      	cmp	r3, r2
 802ca68:	d036      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca6a:	687b      	ldr	r3, [r7, #4]
 802ca6c:	681b      	ldr	r3, [r3, #0]
 802ca6e:	4a65      	ldr	r2, [pc, #404]	; (802cc04 <HAL_DMA_Abort_IT+0x3bc>)
 802ca70:	4293      	cmp	r3, r2
 802ca72:	d031      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca74:	687b      	ldr	r3, [r7, #4]
 802ca76:	681b      	ldr	r3, [r3, #0]
 802ca78:	4a63      	ldr	r2, [pc, #396]	; (802cc08 <HAL_DMA_Abort_IT+0x3c0>)
 802ca7a:	4293      	cmp	r3, r2
 802ca7c:	d02c      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca7e:	687b      	ldr	r3, [r7, #4]
 802ca80:	681b      	ldr	r3, [r3, #0]
 802ca82:	4a62      	ldr	r2, [pc, #392]	; (802cc0c <HAL_DMA_Abort_IT+0x3c4>)
 802ca84:	4293      	cmp	r3, r2
 802ca86:	d027      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca88:	687b      	ldr	r3, [r7, #4]
 802ca8a:	681b      	ldr	r3, [r3, #0]
 802ca8c:	4a60      	ldr	r2, [pc, #384]	; (802cc10 <HAL_DMA_Abort_IT+0x3c8>)
 802ca8e:	4293      	cmp	r3, r2
 802ca90:	d022      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca92:	687b      	ldr	r3, [r7, #4]
 802ca94:	681b      	ldr	r3, [r3, #0]
 802ca96:	4a5f      	ldr	r2, [pc, #380]	; (802cc14 <HAL_DMA_Abort_IT+0x3cc>)
 802ca98:	4293      	cmp	r3, r2
 802ca9a:	d01d      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802ca9c:	687b      	ldr	r3, [r7, #4]
 802ca9e:	681b      	ldr	r3, [r3, #0]
 802caa0:	4a5d      	ldr	r2, [pc, #372]	; (802cc18 <HAL_DMA_Abort_IT+0x3d0>)
 802caa2:	4293      	cmp	r3, r2
 802caa4:	d018      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802caa6:	687b      	ldr	r3, [r7, #4]
 802caa8:	681b      	ldr	r3, [r3, #0]
 802caaa:	4a5c      	ldr	r2, [pc, #368]	; (802cc1c <HAL_DMA_Abort_IT+0x3d4>)
 802caac:	4293      	cmp	r3, r2
 802caae:	d013      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802cab0:	687b      	ldr	r3, [r7, #4]
 802cab2:	681b      	ldr	r3, [r3, #0]
 802cab4:	4a5a      	ldr	r2, [pc, #360]	; (802cc20 <HAL_DMA_Abort_IT+0x3d8>)
 802cab6:	4293      	cmp	r3, r2
 802cab8:	d00e      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802caba:	687b      	ldr	r3, [r7, #4]
 802cabc:	681b      	ldr	r3, [r3, #0]
 802cabe:	4a59      	ldr	r2, [pc, #356]	; (802cc24 <HAL_DMA_Abort_IT+0x3dc>)
 802cac0:	4293      	cmp	r3, r2
 802cac2:	d009      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802cac4:	687b      	ldr	r3, [r7, #4]
 802cac6:	681b      	ldr	r3, [r3, #0]
 802cac8:	4a57      	ldr	r2, [pc, #348]	; (802cc28 <HAL_DMA_Abort_IT+0x3e0>)
 802caca:	4293      	cmp	r3, r2
 802cacc:	d004      	beq.n	802cad8 <HAL_DMA_Abort_IT+0x290>
 802cace:	687b      	ldr	r3, [r7, #4]
 802cad0:	681b      	ldr	r3, [r3, #0]
 802cad2:	4a56      	ldr	r2, [pc, #344]	; (802cc2c <HAL_DMA_Abort_IT+0x3e4>)
 802cad4:	4293      	cmp	r3, r2
 802cad6:	d108      	bne.n	802caea <HAL_DMA_Abort_IT+0x2a2>
 802cad8:	687b      	ldr	r3, [r7, #4]
 802cada:	681b      	ldr	r3, [r3, #0]
 802cadc:	681a      	ldr	r2, [r3, #0]
 802cade:	687b      	ldr	r3, [r7, #4]
 802cae0:	681b      	ldr	r3, [r3, #0]
 802cae2:	f022 0201 	bic.w	r2, r2, #1
 802cae6:	601a      	str	r2, [r3, #0]
 802cae8:	e007      	b.n	802cafa <HAL_DMA_Abort_IT+0x2b2>
 802caea:	687b      	ldr	r3, [r7, #4]
 802caec:	681b      	ldr	r3, [r3, #0]
 802caee:	681a      	ldr	r2, [r3, #0]
 802caf0:	687b      	ldr	r3, [r7, #4]
 802caf2:	681b      	ldr	r3, [r3, #0]
 802caf4:	f022 0201 	bic.w	r2, r2, #1
 802caf8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802cafa:	687b      	ldr	r3, [r7, #4]
 802cafc:	681b      	ldr	r3, [r3, #0]
 802cafe:	4a3c      	ldr	r2, [pc, #240]	; (802cbf0 <HAL_DMA_Abort_IT+0x3a8>)
 802cb00:	4293      	cmp	r3, r2
 802cb02:	d072      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb04:	687b      	ldr	r3, [r7, #4]
 802cb06:	681b      	ldr	r3, [r3, #0]
 802cb08:	4a3a      	ldr	r2, [pc, #232]	; (802cbf4 <HAL_DMA_Abort_IT+0x3ac>)
 802cb0a:	4293      	cmp	r3, r2
 802cb0c:	d06d      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb0e:	687b      	ldr	r3, [r7, #4]
 802cb10:	681b      	ldr	r3, [r3, #0]
 802cb12:	4a39      	ldr	r2, [pc, #228]	; (802cbf8 <HAL_DMA_Abort_IT+0x3b0>)
 802cb14:	4293      	cmp	r3, r2
 802cb16:	d068      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb18:	687b      	ldr	r3, [r7, #4]
 802cb1a:	681b      	ldr	r3, [r3, #0]
 802cb1c:	4a37      	ldr	r2, [pc, #220]	; (802cbfc <HAL_DMA_Abort_IT+0x3b4>)
 802cb1e:	4293      	cmp	r3, r2
 802cb20:	d063      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb22:	687b      	ldr	r3, [r7, #4]
 802cb24:	681b      	ldr	r3, [r3, #0]
 802cb26:	4a36      	ldr	r2, [pc, #216]	; (802cc00 <HAL_DMA_Abort_IT+0x3b8>)
 802cb28:	4293      	cmp	r3, r2
 802cb2a:	d05e      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb2c:	687b      	ldr	r3, [r7, #4]
 802cb2e:	681b      	ldr	r3, [r3, #0]
 802cb30:	4a34      	ldr	r2, [pc, #208]	; (802cc04 <HAL_DMA_Abort_IT+0x3bc>)
 802cb32:	4293      	cmp	r3, r2
 802cb34:	d059      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb36:	687b      	ldr	r3, [r7, #4]
 802cb38:	681b      	ldr	r3, [r3, #0]
 802cb3a:	4a33      	ldr	r2, [pc, #204]	; (802cc08 <HAL_DMA_Abort_IT+0x3c0>)
 802cb3c:	4293      	cmp	r3, r2
 802cb3e:	d054      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb40:	687b      	ldr	r3, [r7, #4]
 802cb42:	681b      	ldr	r3, [r3, #0]
 802cb44:	4a31      	ldr	r2, [pc, #196]	; (802cc0c <HAL_DMA_Abort_IT+0x3c4>)
 802cb46:	4293      	cmp	r3, r2
 802cb48:	d04f      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb4a:	687b      	ldr	r3, [r7, #4]
 802cb4c:	681b      	ldr	r3, [r3, #0]
 802cb4e:	4a30      	ldr	r2, [pc, #192]	; (802cc10 <HAL_DMA_Abort_IT+0x3c8>)
 802cb50:	4293      	cmp	r3, r2
 802cb52:	d04a      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb54:	687b      	ldr	r3, [r7, #4]
 802cb56:	681b      	ldr	r3, [r3, #0]
 802cb58:	4a2e      	ldr	r2, [pc, #184]	; (802cc14 <HAL_DMA_Abort_IT+0x3cc>)
 802cb5a:	4293      	cmp	r3, r2
 802cb5c:	d045      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb5e:	687b      	ldr	r3, [r7, #4]
 802cb60:	681b      	ldr	r3, [r3, #0]
 802cb62:	4a2d      	ldr	r2, [pc, #180]	; (802cc18 <HAL_DMA_Abort_IT+0x3d0>)
 802cb64:	4293      	cmp	r3, r2
 802cb66:	d040      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb68:	687b      	ldr	r3, [r7, #4]
 802cb6a:	681b      	ldr	r3, [r3, #0]
 802cb6c:	4a2b      	ldr	r2, [pc, #172]	; (802cc1c <HAL_DMA_Abort_IT+0x3d4>)
 802cb6e:	4293      	cmp	r3, r2
 802cb70:	d03b      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb72:	687b      	ldr	r3, [r7, #4]
 802cb74:	681b      	ldr	r3, [r3, #0]
 802cb76:	4a2a      	ldr	r2, [pc, #168]	; (802cc20 <HAL_DMA_Abort_IT+0x3d8>)
 802cb78:	4293      	cmp	r3, r2
 802cb7a:	d036      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb7c:	687b      	ldr	r3, [r7, #4]
 802cb7e:	681b      	ldr	r3, [r3, #0]
 802cb80:	4a28      	ldr	r2, [pc, #160]	; (802cc24 <HAL_DMA_Abort_IT+0x3dc>)
 802cb82:	4293      	cmp	r3, r2
 802cb84:	d031      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb86:	687b      	ldr	r3, [r7, #4]
 802cb88:	681b      	ldr	r3, [r3, #0]
 802cb8a:	4a27      	ldr	r2, [pc, #156]	; (802cc28 <HAL_DMA_Abort_IT+0x3e0>)
 802cb8c:	4293      	cmp	r3, r2
 802cb8e:	d02c      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb90:	687b      	ldr	r3, [r7, #4]
 802cb92:	681b      	ldr	r3, [r3, #0]
 802cb94:	4a25      	ldr	r2, [pc, #148]	; (802cc2c <HAL_DMA_Abort_IT+0x3e4>)
 802cb96:	4293      	cmp	r3, r2
 802cb98:	d027      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cb9a:	687b      	ldr	r3, [r7, #4]
 802cb9c:	681b      	ldr	r3, [r3, #0]
 802cb9e:	4a24      	ldr	r2, [pc, #144]	; (802cc30 <HAL_DMA_Abort_IT+0x3e8>)
 802cba0:	4293      	cmp	r3, r2
 802cba2:	d022      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cba4:	687b      	ldr	r3, [r7, #4]
 802cba6:	681b      	ldr	r3, [r3, #0]
 802cba8:	4a22      	ldr	r2, [pc, #136]	; (802cc34 <HAL_DMA_Abort_IT+0x3ec>)
 802cbaa:	4293      	cmp	r3, r2
 802cbac:	d01d      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cbae:	687b      	ldr	r3, [r7, #4]
 802cbb0:	681b      	ldr	r3, [r3, #0]
 802cbb2:	4a21      	ldr	r2, [pc, #132]	; (802cc38 <HAL_DMA_Abort_IT+0x3f0>)
 802cbb4:	4293      	cmp	r3, r2
 802cbb6:	d018      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cbb8:	687b      	ldr	r3, [r7, #4]
 802cbba:	681b      	ldr	r3, [r3, #0]
 802cbbc:	4a1f      	ldr	r2, [pc, #124]	; (802cc3c <HAL_DMA_Abort_IT+0x3f4>)
 802cbbe:	4293      	cmp	r3, r2
 802cbc0:	d013      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cbc2:	687b      	ldr	r3, [r7, #4]
 802cbc4:	681b      	ldr	r3, [r3, #0]
 802cbc6:	4a1e      	ldr	r2, [pc, #120]	; (802cc40 <HAL_DMA_Abort_IT+0x3f8>)
 802cbc8:	4293      	cmp	r3, r2
 802cbca:	d00e      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cbcc:	687b      	ldr	r3, [r7, #4]
 802cbce:	681b      	ldr	r3, [r3, #0]
 802cbd0:	4a1c      	ldr	r2, [pc, #112]	; (802cc44 <HAL_DMA_Abort_IT+0x3fc>)
 802cbd2:	4293      	cmp	r3, r2
 802cbd4:	d009      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cbd6:	687b      	ldr	r3, [r7, #4]
 802cbd8:	681b      	ldr	r3, [r3, #0]
 802cbda:	4a1b      	ldr	r2, [pc, #108]	; (802cc48 <HAL_DMA_Abort_IT+0x400>)
 802cbdc:	4293      	cmp	r3, r2
 802cbde:	d004      	beq.n	802cbea <HAL_DMA_Abort_IT+0x3a2>
 802cbe0:	687b      	ldr	r3, [r7, #4]
 802cbe2:	681b      	ldr	r3, [r3, #0]
 802cbe4:	4a19      	ldr	r2, [pc, #100]	; (802cc4c <HAL_DMA_Abort_IT+0x404>)
 802cbe6:	4293      	cmp	r3, r2
 802cbe8:	d132      	bne.n	802cc50 <HAL_DMA_Abort_IT+0x408>
 802cbea:	2301      	movs	r3, #1
 802cbec:	e031      	b.n	802cc52 <HAL_DMA_Abort_IT+0x40a>
 802cbee:	bf00      	nop
 802cbf0:	40020010 	.word	0x40020010
 802cbf4:	40020028 	.word	0x40020028
 802cbf8:	40020040 	.word	0x40020040
 802cbfc:	40020058 	.word	0x40020058
 802cc00:	40020070 	.word	0x40020070
 802cc04:	40020088 	.word	0x40020088
 802cc08:	400200a0 	.word	0x400200a0
 802cc0c:	400200b8 	.word	0x400200b8
 802cc10:	40020410 	.word	0x40020410
 802cc14:	40020428 	.word	0x40020428
 802cc18:	40020440 	.word	0x40020440
 802cc1c:	40020458 	.word	0x40020458
 802cc20:	40020470 	.word	0x40020470
 802cc24:	40020488 	.word	0x40020488
 802cc28:	400204a0 	.word	0x400204a0
 802cc2c:	400204b8 	.word	0x400204b8
 802cc30:	58025408 	.word	0x58025408
 802cc34:	5802541c 	.word	0x5802541c
 802cc38:	58025430 	.word	0x58025430
 802cc3c:	58025444 	.word	0x58025444
 802cc40:	58025458 	.word	0x58025458
 802cc44:	5802546c 	.word	0x5802546c
 802cc48:	58025480 	.word	0x58025480
 802cc4c:	58025494 	.word	0x58025494
 802cc50:	2300      	movs	r3, #0
 802cc52:	2b00      	cmp	r3, #0
 802cc54:	d028      	beq.n	802cca8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 802cc56:	687b      	ldr	r3, [r7, #4]
 802cc58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802cc5a:	681a      	ldr	r2, [r3, #0]
 802cc5c:	687b      	ldr	r3, [r7, #4]
 802cc5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802cc60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802cc64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802cc66:	687b      	ldr	r3, [r7, #4]
 802cc68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802cc6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 802cc6c:	687b      	ldr	r3, [r7, #4]
 802cc6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cc70:	f003 031f 	and.w	r3, r3, #31
 802cc74:	2201      	movs	r2, #1
 802cc76:	409a      	lsls	r2, r3
 802cc78:	68fb      	ldr	r3, [r7, #12]
 802cc7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802cc7c:	687b      	ldr	r3, [r7, #4]
 802cc7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802cc80:	687a      	ldr	r2, [r7, #4]
 802cc82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802cc84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 802cc86:	687b      	ldr	r3, [r7, #4]
 802cc88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cc8a:	2b00      	cmp	r3, #0
 802cc8c:	d00c      	beq.n	802cca8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 802cc8e:	687b      	ldr	r3, [r7, #4]
 802cc90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cc92:	681a      	ldr	r2, [r3, #0]
 802cc94:	687b      	ldr	r3, [r7, #4]
 802cc96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802cc98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802cc9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802cc9e:	687b      	ldr	r3, [r7, #4]
 802cca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802cca2:	687a      	ldr	r2, [r7, #4]
 802cca4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802cca6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802cca8:	687b      	ldr	r3, [r7, #4]
 802ccaa:	2201      	movs	r2, #1
 802ccac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802ccb0:	687b      	ldr	r3, [r7, #4]
 802ccb2:	2200      	movs	r2, #0
 802ccb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 802ccb8:	687b      	ldr	r3, [r7, #4]
 802ccba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ccbc:	2b00      	cmp	r3, #0
 802ccbe:	d003      	beq.n	802ccc8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 802ccc0:	687b      	ldr	r3, [r7, #4]
 802ccc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802ccc4:	6878      	ldr	r0, [r7, #4]
 802ccc6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 802ccc8:	2300      	movs	r3, #0
}
 802ccca:	4618      	mov	r0, r3
 802cccc:	3710      	adds	r7, #16
 802ccce:	46bd      	mov	sp, r7
 802ccd0:	bd80      	pop	{r7, pc}
 802ccd2:	bf00      	nop

0802ccd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802ccd4:	b580      	push	{r7, lr}
 802ccd6:	b08a      	sub	sp, #40	; 0x28
 802ccd8:	af00      	add	r7, sp, #0
 802ccda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 802ccdc:	2300      	movs	r3, #0
 802ccde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 802cce0:	4b67      	ldr	r3, [pc, #412]	; (802ce80 <HAL_DMA_IRQHandler+0x1ac>)
 802cce2:	681b      	ldr	r3, [r3, #0]
 802cce4:	4a67      	ldr	r2, [pc, #412]	; (802ce84 <HAL_DMA_IRQHandler+0x1b0>)
 802cce6:	fba2 2303 	umull	r2, r3, r2, r3
 802ccea:	0a9b      	lsrs	r3, r3, #10
 802ccec:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802ccee:	687b      	ldr	r3, [r7, #4]
 802ccf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802ccf2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802ccf4:	687b      	ldr	r3, [r7, #4]
 802ccf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802ccf8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 802ccfa:	6a3b      	ldr	r3, [r7, #32]
 802ccfc:	681b      	ldr	r3, [r3, #0]
 802ccfe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 802cd00:	69fb      	ldr	r3, [r7, #28]
 802cd02:	681b      	ldr	r3, [r3, #0]
 802cd04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 802cd06:	687b      	ldr	r3, [r7, #4]
 802cd08:	681b      	ldr	r3, [r3, #0]
 802cd0a:	4a5f      	ldr	r2, [pc, #380]	; (802ce88 <HAL_DMA_IRQHandler+0x1b4>)
 802cd0c:	4293      	cmp	r3, r2
 802cd0e:	d04a      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd10:	687b      	ldr	r3, [r7, #4]
 802cd12:	681b      	ldr	r3, [r3, #0]
 802cd14:	4a5d      	ldr	r2, [pc, #372]	; (802ce8c <HAL_DMA_IRQHandler+0x1b8>)
 802cd16:	4293      	cmp	r3, r2
 802cd18:	d045      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd1a:	687b      	ldr	r3, [r7, #4]
 802cd1c:	681b      	ldr	r3, [r3, #0]
 802cd1e:	4a5c      	ldr	r2, [pc, #368]	; (802ce90 <HAL_DMA_IRQHandler+0x1bc>)
 802cd20:	4293      	cmp	r3, r2
 802cd22:	d040      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd24:	687b      	ldr	r3, [r7, #4]
 802cd26:	681b      	ldr	r3, [r3, #0]
 802cd28:	4a5a      	ldr	r2, [pc, #360]	; (802ce94 <HAL_DMA_IRQHandler+0x1c0>)
 802cd2a:	4293      	cmp	r3, r2
 802cd2c:	d03b      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd2e:	687b      	ldr	r3, [r7, #4]
 802cd30:	681b      	ldr	r3, [r3, #0]
 802cd32:	4a59      	ldr	r2, [pc, #356]	; (802ce98 <HAL_DMA_IRQHandler+0x1c4>)
 802cd34:	4293      	cmp	r3, r2
 802cd36:	d036      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd38:	687b      	ldr	r3, [r7, #4]
 802cd3a:	681b      	ldr	r3, [r3, #0]
 802cd3c:	4a57      	ldr	r2, [pc, #348]	; (802ce9c <HAL_DMA_IRQHandler+0x1c8>)
 802cd3e:	4293      	cmp	r3, r2
 802cd40:	d031      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd42:	687b      	ldr	r3, [r7, #4]
 802cd44:	681b      	ldr	r3, [r3, #0]
 802cd46:	4a56      	ldr	r2, [pc, #344]	; (802cea0 <HAL_DMA_IRQHandler+0x1cc>)
 802cd48:	4293      	cmp	r3, r2
 802cd4a:	d02c      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd4c:	687b      	ldr	r3, [r7, #4]
 802cd4e:	681b      	ldr	r3, [r3, #0]
 802cd50:	4a54      	ldr	r2, [pc, #336]	; (802cea4 <HAL_DMA_IRQHandler+0x1d0>)
 802cd52:	4293      	cmp	r3, r2
 802cd54:	d027      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd56:	687b      	ldr	r3, [r7, #4]
 802cd58:	681b      	ldr	r3, [r3, #0]
 802cd5a:	4a53      	ldr	r2, [pc, #332]	; (802cea8 <HAL_DMA_IRQHandler+0x1d4>)
 802cd5c:	4293      	cmp	r3, r2
 802cd5e:	d022      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd60:	687b      	ldr	r3, [r7, #4]
 802cd62:	681b      	ldr	r3, [r3, #0]
 802cd64:	4a51      	ldr	r2, [pc, #324]	; (802ceac <HAL_DMA_IRQHandler+0x1d8>)
 802cd66:	4293      	cmp	r3, r2
 802cd68:	d01d      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd6a:	687b      	ldr	r3, [r7, #4]
 802cd6c:	681b      	ldr	r3, [r3, #0]
 802cd6e:	4a50      	ldr	r2, [pc, #320]	; (802ceb0 <HAL_DMA_IRQHandler+0x1dc>)
 802cd70:	4293      	cmp	r3, r2
 802cd72:	d018      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd74:	687b      	ldr	r3, [r7, #4]
 802cd76:	681b      	ldr	r3, [r3, #0]
 802cd78:	4a4e      	ldr	r2, [pc, #312]	; (802ceb4 <HAL_DMA_IRQHandler+0x1e0>)
 802cd7a:	4293      	cmp	r3, r2
 802cd7c:	d013      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd7e:	687b      	ldr	r3, [r7, #4]
 802cd80:	681b      	ldr	r3, [r3, #0]
 802cd82:	4a4d      	ldr	r2, [pc, #308]	; (802ceb8 <HAL_DMA_IRQHandler+0x1e4>)
 802cd84:	4293      	cmp	r3, r2
 802cd86:	d00e      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd88:	687b      	ldr	r3, [r7, #4]
 802cd8a:	681b      	ldr	r3, [r3, #0]
 802cd8c:	4a4b      	ldr	r2, [pc, #300]	; (802cebc <HAL_DMA_IRQHandler+0x1e8>)
 802cd8e:	4293      	cmp	r3, r2
 802cd90:	d009      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd92:	687b      	ldr	r3, [r7, #4]
 802cd94:	681b      	ldr	r3, [r3, #0]
 802cd96:	4a4a      	ldr	r2, [pc, #296]	; (802cec0 <HAL_DMA_IRQHandler+0x1ec>)
 802cd98:	4293      	cmp	r3, r2
 802cd9a:	d004      	beq.n	802cda6 <HAL_DMA_IRQHandler+0xd2>
 802cd9c:	687b      	ldr	r3, [r7, #4]
 802cd9e:	681b      	ldr	r3, [r3, #0]
 802cda0:	4a48      	ldr	r2, [pc, #288]	; (802cec4 <HAL_DMA_IRQHandler+0x1f0>)
 802cda2:	4293      	cmp	r3, r2
 802cda4:	d101      	bne.n	802cdaa <HAL_DMA_IRQHandler+0xd6>
 802cda6:	2301      	movs	r3, #1
 802cda8:	e000      	b.n	802cdac <HAL_DMA_IRQHandler+0xd8>
 802cdaa:	2300      	movs	r3, #0
 802cdac:	2b00      	cmp	r3, #0
 802cdae:	f000 842b 	beq.w	802d608 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cdb2:	687b      	ldr	r3, [r7, #4]
 802cdb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cdb6:	f003 031f 	and.w	r3, r3, #31
 802cdba:	2208      	movs	r2, #8
 802cdbc:	409a      	lsls	r2, r3
 802cdbe:	69bb      	ldr	r3, [r7, #24]
 802cdc0:	4013      	ands	r3, r2
 802cdc2:	2b00      	cmp	r3, #0
 802cdc4:	f000 80a2 	beq.w	802cf0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 802cdc8:	687b      	ldr	r3, [r7, #4]
 802cdca:	681b      	ldr	r3, [r3, #0]
 802cdcc:	4a2e      	ldr	r2, [pc, #184]	; (802ce88 <HAL_DMA_IRQHandler+0x1b4>)
 802cdce:	4293      	cmp	r3, r2
 802cdd0:	d04a      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802cdd2:	687b      	ldr	r3, [r7, #4]
 802cdd4:	681b      	ldr	r3, [r3, #0]
 802cdd6:	4a2d      	ldr	r2, [pc, #180]	; (802ce8c <HAL_DMA_IRQHandler+0x1b8>)
 802cdd8:	4293      	cmp	r3, r2
 802cdda:	d045      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802cddc:	687b      	ldr	r3, [r7, #4]
 802cdde:	681b      	ldr	r3, [r3, #0]
 802cde0:	4a2b      	ldr	r2, [pc, #172]	; (802ce90 <HAL_DMA_IRQHandler+0x1bc>)
 802cde2:	4293      	cmp	r3, r2
 802cde4:	d040      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802cde6:	687b      	ldr	r3, [r7, #4]
 802cde8:	681b      	ldr	r3, [r3, #0]
 802cdea:	4a2a      	ldr	r2, [pc, #168]	; (802ce94 <HAL_DMA_IRQHandler+0x1c0>)
 802cdec:	4293      	cmp	r3, r2
 802cdee:	d03b      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802cdf0:	687b      	ldr	r3, [r7, #4]
 802cdf2:	681b      	ldr	r3, [r3, #0]
 802cdf4:	4a28      	ldr	r2, [pc, #160]	; (802ce98 <HAL_DMA_IRQHandler+0x1c4>)
 802cdf6:	4293      	cmp	r3, r2
 802cdf8:	d036      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802cdfa:	687b      	ldr	r3, [r7, #4]
 802cdfc:	681b      	ldr	r3, [r3, #0]
 802cdfe:	4a27      	ldr	r2, [pc, #156]	; (802ce9c <HAL_DMA_IRQHandler+0x1c8>)
 802ce00:	4293      	cmp	r3, r2
 802ce02:	d031      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce04:	687b      	ldr	r3, [r7, #4]
 802ce06:	681b      	ldr	r3, [r3, #0]
 802ce08:	4a25      	ldr	r2, [pc, #148]	; (802cea0 <HAL_DMA_IRQHandler+0x1cc>)
 802ce0a:	4293      	cmp	r3, r2
 802ce0c:	d02c      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce0e:	687b      	ldr	r3, [r7, #4]
 802ce10:	681b      	ldr	r3, [r3, #0]
 802ce12:	4a24      	ldr	r2, [pc, #144]	; (802cea4 <HAL_DMA_IRQHandler+0x1d0>)
 802ce14:	4293      	cmp	r3, r2
 802ce16:	d027      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce18:	687b      	ldr	r3, [r7, #4]
 802ce1a:	681b      	ldr	r3, [r3, #0]
 802ce1c:	4a22      	ldr	r2, [pc, #136]	; (802cea8 <HAL_DMA_IRQHandler+0x1d4>)
 802ce1e:	4293      	cmp	r3, r2
 802ce20:	d022      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce22:	687b      	ldr	r3, [r7, #4]
 802ce24:	681b      	ldr	r3, [r3, #0]
 802ce26:	4a21      	ldr	r2, [pc, #132]	; (802ceac <HAL_DMA_IRQHandler+0x1d8>)
 802ce28:	4293      	cmp	r3, r2
 802ce2a:	d01d      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce2c:	687b      	ldr	r3, [r7, #4]
 802ce2e:	681b      	ldr	r3, [r3, #0]
 802ce30:	4a1f      	ldr	r2, [pc, #124]	; (802ceb0 <HAL_DMA_IRQHandler+0x1dc>)
 802ce32:	4293      	cmp	r3, r2
 802ce34:	d018      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce36:	687b      	ldr	r3, [r7, #4]
 802ce38:	681b      	ldr	r3, [r3, #0]
 802ce3a:	4a1e      	ldr	r2, [pc, #120]	; (802ceb4 <HAL_DMA_IRQHandler+0x1e0>)
 802ce3c:	4293      	cmp	r3, r2
 802ce3e:	d013      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce40:	687b      	ldr	r3, [r7, #4]
 802ce42:	681b      	ldr	r3, [r3, #0]
 802ce44:	4a1c      	ldr	r2, [pc, #112]	; (802ceb8 <HAL_DMA_IRQHandler+0x1e4>)
 802ce46:	4293      	cmp	r3, r2
 802ce48:	d00e      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce4a:	687b      	ldr	r3, [r7, #4]
 802ce4c:	681b      	ldr	r3, [r3, #0]
 802ce4e:	4a1b      	ldr	r2, [pc, #108]	; (802cebc <HAL_DMA_IRQHandler+0x1e8>)
 802ce50:	4293      	cmp	r3, r2
 802ce52:	d009      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce54:	687b      	ldr	r3, [r7, #4]
 802ce56:	681b      	ldr	r3, [r3, #0]
 802ce58:	4a19      	ldr	r2, [pc, #100]	; (802cec0 <HAL_DMA_IRQHandler+0x1ec>)
 802ce5a:	4293      	cmp	r3, r2
 802ce5c:	d004      	beq.n	802ce68 <HAL_DMA_IRQHandler+0x194>
 802ce5e:	687b      	ldr	r3, [r7, #4]
 802ce60:	681b      	ldr	r3, [r3, #0]
 802ce62:	4a18      	ldr	r2, [pc, #96]	; (802cec4 <HAL_DMA_IRQHandler+0x1f0>)
 802ce64:	4293      	cmp	r3, r2
 802ce66:	d12f      	bne.n	802cec8 <HAL_DMA_IRQHandler+0x1f4>
 802ce68:	687b      	ldr	r3, [r7, #4]
 802ce6a:	681b      	ldr	r3, [r3, #0]
 802ce6c:	681b      	ldr	r3, [r3, #0]
 802ce6e:	f003 0304 	and.w	r3, r3, #4
 802ce72:	2b00      	cmp	r3, #0
 802ce74:	bf14      	ite	ne
 802ce76:	2301      	movne	r3, #1
 802ce78:	2300      	moveq	r3, #0
 802ce7a:	b2db      	uxtb	r3, r3
 802ce7c:	e02e      	b.n	802cedc <HAL_DMA_IRQHandler+0x208>
 802ce7e:	bf00      	nop
 802ce80:	24000004 	.word	0x24000004
 802ce84:	1b4e81b5 	.word	0x1b4e81b5
 802ce88:	40020010 	.word	0x40020010
 802ce8c:	40020028 	.word	0x40020028
 802ce90:	40020040 	.word	0x40020040
 802ce94:	40020058 	.word	0x40020058
 802ce98:	40020070 	.word	0x40020070
 802ce9c:	40020088 	.word	0x40020088
 802cea0:	400200a0 	.word	0x400200a0
 802cea4:	400200b8 	.word	0x400200b8
 802cea8:	40020410 	.word	0x40020410
 802ceac:	40020428 	.word	0x40020428
 802ceb0:	40020440 	.word	0x40020440
 802ceb4:	40020458 	.word	0x40020458
 802ceb8:	40020470 	.word	0x40020470
 802cebc:	40020488 	.word	0x40020488
 802cec0:	400204a0 	.word	0x400204a0
 802cec4:	400204b8 	.word	0x400204b8
 802cec8:	687b      	ldr	r3, [r7, #4]
 802ceca:	681b      	ldr	r3, [r3, #0]
 802cecc:	681b      	ldr	r3, [r3, #0]
 802cece:	f003 0308 	and.w	r3, r3, #8
 802ced2:	2b00      	cmp	r3, #0
 802ced4:	bf14      	ite	ne
 802ced6:	2301      	movne	r3, #1
 802ced8:	2300      	moveq	r3, #0
 802ceda:	b2db      	uxtb	r3, r3
 802cedc:	2b00      	cmp	r3, #0
 802cede:	d015      	beq.n	802cf0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 802cee0:	687b      	ldr	r3, [r7, #4]
 802cee2:	681b      	ldr	r3, [r3, #0]
 802cee4:	681a      	ldr	r2, [r3, #0]
 802cee6:	687b      	ldr	r3, [r7, #4]
 802cee8:	681b      	ldr	r3, [r3, #0]
 802ceea:	f022 0204 	bic.w	r2, r2, #4
 802ceee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802cef0:	687b      	ldr	r3, [r7, #4]
 802cef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cef4:	f003 031f 	and.w	r3, r3, #31
 802cef8:	2208      	movs	r2, #8
 802cefa:	409a      	lsls	r2, r3
 802cefc:	6a3b      	ldr	r3, [r7, #32]
 802cefe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802cf00:	687b      	ldr	r3, [r7, #4]
 802cf02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cf04:	f043 0201 	orr.w	r2, r3, #1
 802cf08:	687b      	ldr	r3, [r7, #4]
 802cf0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802cf0c:	687b      	ldr	r3, [r7, #4]
 802cf0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cf10:	f003 031f 	and.w	r3, r3, #31
 802cf14:	69ba      	ldr	r2, [r7, #24]
 802cf16:	fa22 f303 	lsr.w	r3, r2, r3
 802cf1a:	f003 0301 	and.w	r3, r3, #1
 802cf1e:	2b00      	cmp	r3, #0
 802cf20:	d06e      	beq.n	802d000 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 802cf22:	687b      	ldr	r3, [r7, #4]
 802cf24:	681b      	ldr	r3, [r3, #0]
 802cf26:	4a69      	ldr	r2, [pc, #420]	; (802d0cc <HAL_DMA_IRQHandler+0x3f8>)
 802cf28:	4293      	cmp	r3, r2
 802cf2a:	d04a      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf2c:	687b      	ldr	r3, [r7, #4]
 802cf2e:	681b      	ldr	r3, [r3, #0]
 802cf30:	4a67      	ldr	r2, [pc, #412]	; (802d0d0 <HAL_DMA_IRQHandler+0x3fc>)
 802cf32:	4293      	cmp	r3, r2
 802cf34:	d045      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf36:	687b      	ldr	r3, [r7, #4]
 802cf38:	681b      	ldr	r3, [r3, #0]
 802cf3a:	4a66      	ldr	r2, [pc, #408]	; (802d0d4 <HAL_DMA_IRQHandler+0x400>)
 802cf3c:	4293      	cmp	r3, r2
 802cf3e:	d040      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf40:	687b      	ldr	r3, [r7, #4]
 802cf42:	681b      	ldr	r3, [r3, #0]
 802cf44:	4a64      	ldr	r2, [pc, #400]	; (802d0d8 <HAL_DMA_IRQHandler+0x404>)
 802cf46:	4293      	cmp	r3, r2
 802cf48:	d03b      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf4a:	687b      	ldr	r3, [r7, #4]
 802cf4c:	681b      	ldr	r3, [r3, #0]
 802cf4e:	4a63      	ldr	r2, [pc, #396]	; (802d0dc <HAL_DMA_IRQHandler+0x408>)
 802cf50:	4293      	cmp	r3, r2
 802cf52:	d036      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf54:	687b      	ldr	r3, [r7, #4]
 802cf56:	681b      	ldr	r3, [r3, #0]
 802cf58:	4a61      	ldr	r2, [pc, #388]	; (802d0e0 <HAL_DMA_IRQHandler+0x40c>)
 802cf5a:	4293      	cmp	r3, r2
 802cf5c:	d031      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf5e:	687b      	ldr	r3, [r7, #4]
 802cf60:	681b      	ldr	r3, [r3, #0]
 802cf62:	4a60      	ldr	r2, [pc, #384]	; (802d0e4 <HAL_DMA_IRQHandler+0x410>)
 802cf64:	4293      	cmp	r3, r2
 802cf66:	d02c      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf68:	687b      	ldr	r3, [r7, #4]
 802cf6a:	681b      	ldr	r3, [r3, #0]
 802cf6c:	4a5e      	ldr	r2, [pc, #376]	; (802d0e8 <HAL_DMA_IRQHandler+0x414>)
 802cf6e:	4293      	cmp	r3, r2
 802cf70:	d027      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf72:	687b      	ldr	r3, [r7, #4]
 802cf74:	681b      	ldr	r3, [r3, #0]
 802cf76:	4a5d      	ldr	r2, [pc, #372]	; (802d0ec <HAL_DMA_IRQHandler+0x418>)
 802cf78:	4293      	cmp	r3, r2
 802cf7a:	d022      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf7c:	687b      	ldr	r3, [r7, #4]
 802cf7e:	681b      	ldr	r3, [r3, #0]
 802cf80:	4a5b      	ldr	r2, [pc, #364]	; (802d0f0 <HAL_DMA_IRQHandler+0x41c>)
 802cf82:	4293      	cmp	r3, r2
 802cf84:	d01d      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf86:	687b      	ldr	r3, [r7, #4]
 802cf88:	681b      	ldr	r3, [r3, #0]
 802cf8a:	4a5a      	ldr	r2, [pc, #360]	; (802d0f4 <HAL_DMA_IRQHandler+0x420>)
 802cf8c:	4293      	cmp	r3, r2
 802cf8e:	d018      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf90:	687b      	ldr	r3, [r7, #4]
 802cf92:	681b      	ldr	r3, [r3, #0]
 802cf94:	4a58      	ldr	r2, [pc, #352]	; (802d0f8 <HAL_DMA_IRQHandler+0x424>)
 802cf96:	4293      	cmp	r3, r2
 802cf98:	d013      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cf9a:	687b      	ldr	r3, [r7, #4]
 802cf9c:	681b      	ldr	r3, [r3, #0]
 802cf9e:	4a57      	ldr	r2, [pc, #348]	; (802d0fc <HAL_DMA_IRQHandler+0x428>)
 802cfa0:	4293      	cmp	r3, r2
 802cfa2:	d00e      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cfa4:	687b      	ldr	r3, [r7, #4]
 802cfa6:	681b      	ldr	r3, [r3, #0]
 802cfa8:	4a55      	ldr	r2, [pc, #340]	; (802d100 <HAL_DMA_IRQHandler+0x42c>)
 802cfaa:	4293      	cmp	r3, r2
 802cfac:	d009      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cfae:	687b      	ldr	r3, [r7, #4]
 802cfb0:	681b      	ldr	r3, [r3, #0]
 802cfb2:	4a54      	ldr	r2, [pc, #336]	; (802d104 <HAL_DMA_IRQHandler+0x430>)
 802cfb4:	4293      	cmp	r3, r2
 802cfb6:	d004      	beq.n	802cfc2 <HAL_DMA_IRQHandler+0x2ee>
 802cfb8:	687b      	ldr	r3, [r7, #4]
 802cfba:	681b      	ldr	r3, [r3, #0]
 802cfbc:	4a52      	ldr	r2, [pc, #328]	; (802d108 <HAL_DMA_IRQHandler+0x434>)
 802cfbe:	4293      	cmp	r3, r2
 802cfc0:	d10a      	bne.n	802cfd8 <HAL_DMA_IRQHandler+0x304>
 802cfc2:	687b      	ldr	r3, [r7, #4]
 802cfc4:	681b      	ldr	r3, [r3, #0]
 802cfc6:	695b      	ldr	r3, [r3, #20]
 802cfc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802cfcc:	2b00      	cmp	r3, #0
 802cfce:	bf14      	ite	ne
 802cfd0:	2301      	movne	r3, #1
 802cfd2:	2300      	moveq	r3, #0
 802cfd4:	b2db      	uxtb	r3, r3
 802cfd6:	e003      	b.n	802cfe0 <HAL_DMA_IRQHandler+0x30c>
 802cfd8:	687b      	ldr	r3, [r7, #4]
 802cfda:	681b      	ldr	r3, [r3, #0]
 802cfdc:	681b      	ldr	r3, [r3, #0]
 802cfde:	2300      	movs	r3, #0
 802cfe0:	2b00      	cmp	r3, #0
 802cfe2:	d00d      	beq.n	802d000 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802cfe4:	687b      	ldr	r3, [r7, #4]
 802cfe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802cfe8:	f003 031f 	and.w	r3, r3, #31
 802cfec:	2201      	movs	r2, #1
 802cfee:	409a      	lsls	r2, r3
 802cff0:	6a3b      	ldr	r3, [r7, #32]
 802cff2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802cff4:	687b      	ldr	r3, [r7, #4]
 802cff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802cff8:	f043 0202 	orr.w	r2, r3, #2
 802cffc:	687b      	ldr	r3, [r7, #4]
 802cffe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d000:	687b      	ldr	r3, [r7, #4]
 802d002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d004:	f003 031f 	and.w	r3, r3, #31
 802d008:	2204      	movs	r2, #4
 802d00a:	409a      	lsls	r2, r3
 802d00c:	69bb      	ldr	r3, [r7, #24]
 802d00e:	4013      	ands	r3, r2
 802d010:	2b00      	cmp	r3, #0
 802d012:	f000 808f 	beq.w	802d134 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 802d016:	687b      	ldr	r3, [r7, #4]
 802d018:	681b      	ldr	r3, [r3, #0]
 802d01a:	4a2c      	ldr	r2, [pc, #176]	; (802d0cc <HAL_DMA_IRQHandler+0x3f8>)
 802d01c:	4293      	cmp	r3, r2
 802d01e:	d04a      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d020:	687b      	ldr	r3, [r7, #4]
 802d022:	681b      	ldr	r3, [r3, #0]
 802d024:	4a2a      	ldr	r2, [pc, #168]	; (802d0d0 <HAL_DMA_IRQHandler+0x3fc>)
 802d026:	4293      	cmp	r3, r2
 802d028:	d045      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d02a:	687b      	ldr	r3, [r7, #4]
 802d02c:	681b      	ldr	r3, [r3, #0]
 802d02e:	4a29      	ldr	r2, [pc, #164]	; (802d0d4 <HAL_DMA_IRQHandler+0x400>)
 802d030:	4293      	cmp	r3, r2
 802d032:	d040      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d034:	687b      	ldr	r3, [r7, #4]
 802d036:	681b      	ldr	r3, [r3, #0]
 802d038:	4a27      	ldr	r2, [pc, #156]	; (802d0d8 <HAL_DMA_IRQHandler+0x404>)
 802d03a:	4293      	cmp	r3, r2
 802d03c:	d03b      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d03e:	687b      	ldr	r3, [r7, #4]
 802d040:	681b      	ldr	r3, [r3, #0]
 802d042:	4a26      	ldr	r2, [pc, #152]	; (802d0dc <HAL_DMA_IRQHandler+0x408>)
 802d044:	4293      	cmp	r3, r2
 802d046:	d036      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d048:	687b      	ldr	r3, [r7, #4]
 802d04a:	681b      	ldr	r3, [r3, #0]
 802d04c:	4a24      	ldr	r2, [pc, #144]	; (802d0e0 <HAL_DMA_IRQHandler+0x40c>)
 802d04e:	4293      	cmp	r3, r2
 802d050:	d031      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d052:	687b      	ldr	r3, [r7, #4]
 802d054:	681b      	ldr	r3, [r3, #0]
 802d056:	4a23      	ldr	r2, [pc, #140]	; (802d0e4 <HAL_DMA_IRQHandler+0x410>)
 802d058:	4293      	cmp	r3, r2
 802d05a:	d02c      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d05c:	687b      	ldr	r3, [r7, #4]
 802d05e:	681b      	ldr	r3, [r3, #0]
 802d060:	4a21      	ldr	r2, [pc, #132]	; (802d0e8 <HAL_DMA_IRQHandler+0x414>)
 802d062:	4293      	cmp	r3, r2
 802d064:	d027      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d066:	687b      	ldr	r3, [r7, #4]
 802d068:	681b      	ldr	r3, [r3, #0]
 802d06a:	4a20      	ldr	r2, [pc, #128]	; (802d0ec <HAL_DMA_IRQHandler+0x418>)
 802d06c:	4293      	cmp	r3, r2
 802d06e:	d022      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d070:	687b      	ldr	r3, [r7, #4]
 802d072:	681b      	ldr	r3, [r3, #0]
 802d074:	4a1e      	ldr	r2, [pc, #120]	; (802d0f0 <HAL_DMA_IRQHandler+0x41c>)
 802d076:	4293      	cmp	r3, r2
 802d078:	d01d      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d07a:	687b      	ldr	r3, [r7, #4]
 802d07c:	681b      	ldr	r3, [r3, #0]
 802d07e:	4a1d      	ldr	r2, [pc, #116]	; (802d0f4 <HAL_DMA_IRQHandler+0x420>)
 802d080:	4293      	cmp	r3, r2
 802d082:	d018      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d084:	687b      	ldr	r3, [r7, #4]
 802d086:	681b      	ldr	r3, [r3, #0]
 802d088:	4a1b      	ldr	r2, [pc, #108]	; (802d0f8 <HAL_DMA_IRQHandler+0x424>)
 802d08a:	4293      	cmp	r3, r2
 802d08c:	d013      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d08e:	687b      	ldr	r3, [r7, #4]
 802d090:	681b      	ldr	r3, [r3, #0]
 802d092:	4a1a      	ldr	r2, [pc, #104]	; (802d0fc <HAL_DMA_IRQHandler+0x428>)
 802d094:	4293      	cmp	r3, r2
 802d096:	d00e      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d098:	687b      	ldr	r3, [r7, #4]
 802d09a:	681b      	ldr	r3, [r3, #0]
 802d09c:	4a18      	ldr	r2, [pc, #96]	; (802d100 <HAL_DMA_IRQHandler+0x42c>)
 802d09e:	4293      	cmp	r3, r2
 802d0a0:	d009      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d0a2:	687b      	ldr	r3, [r7, #4]
 802d0a4:	681b      	ldr	r3, [r3, #0]
 802d0a6:	4a17      	ldr	r2, [pc, #92]	; (802d104 <HAL_DMA_IRQHandler+0x430>)
 802d0a8:	4293      	cmp	r3, r2
 802d0aa:	d004      	beq.n	802d0b6 <HAL_DMA_IRQHandler+0x3e2>
 802d0ac:	687b      	ldr	r3, [r7, #4]
 802d0ae:	681b      	ldr	r3, [r3, #0]
 802d0b0:	4a15      	ldr	r2, [pc, #84]	; (802d108 <HAL_DMA_IRQHandler+0x434>)
 802d0b2:	4293      	cmp	r3, r2
 802d0b4:	d12a      	bne.n	802d10c <HAL_DMA_IRQHandler+0x438>
 802d0b6:	687b      	ldr	r3, [r7, #4]
 802d0b8:	681b      	ldr	r3, [r3, #0]
 802d0ba:	681b      	ldr	r3, [r3, #0]
 802d0bc:	f003 0302 	and.w	r3, r3, #2
 802d0c0:	2b00      	cmp	r3, #0
 802d0c2:	bf14      	ite	ne
 802d0c4:	2301      	movne	r3, #1
 802d0c6:	2300      	moveq	r3, #0
 802d0c8:	b2db      	uxtb	r3, r3
 802d0ca:	e023      	b.n	802d114 <HAL_DMA_IRQHandler+0x440>
 802d0cc:	40020010 	.word	0x40020010
 802d0d0:	40020028 	.word	0x40020028
 802d0d4:	40020040 	.word	0x40020040
 802d0d8:	40020058 	.word	0x40020058
 802d0dc:	40020070 	.word	0x40020070
 802d0e0:	40020088 	.word	0x40020088
 802d0e4:	400200a0 	.word	0x400200a0
 802d0e8:	400200b8 	.word	0x400200b8
 802d0ec:	40020410 	.word	0x40020410
 802d0f0:	40020428 	.word	0x40020428
 802d0f4:	40020440 	.word	0x40020440
 802d0f8:	40020458 	.word	0x40020458
 802d0fc:	40020470 	.word	0x40020470
 802d100:	40020488 	.word	0x40020488
 802d104:	400204a0 	.word	0x400204a0
 802d108:	400204b8 	.word	0x400204b8
 802d10c:	687b      	ldr	r3, [r7, #4]
 802d10e:	681b      	ldr	r3, [r3, #0]
 802d110:	681b      	ldr	r3, [r3, #0]
 802d112:	2300      	movs	r3, #0
 802d114:	2b00      	cmp	r3, #0
 802d116:	d00d      	beq.n	802d134 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d118:	687b      	ldr	r3, [r7, #4]
 802d11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d11c:	f003 031f 	and.w	r3, r3, #31
 802d120:	2204      	movs	r2, #4
 802d122:	409a      	lsls	r2, r3
 802d124:	6a3b      	ldr	r3, [r7, #32]
 802d126:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 802d128:	687b      	ldr	r3, [r7, #4]
 802d12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d12c:	f043 0204 	orr.w	r2, r3, #4
 802d130:	687b      	ldr	r3, [r7, #4]
 802d132:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d134:	687b      	ldr	r3, [r7, #4]
 802d136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d138:	f003 031f 	and.w	r3, r3, #31
 802d13c:	2210      	movs	r2, #16
 802d13e:	409a      	lsls	r2, r3
 802d140:	69bb      	ldr	r3, [r7, #24]
 802d142:	4013      	ands	r3, r2
 802d144:	2b00      	cmp	r3, #0
 802d146:	f000 80a6 	beq.w	802d296 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 802d14a:	687b      	ldr	r3, [r7, #4]
 802d14c:	681b      	ldr	r3, [r3, #0]
 802d14e:	4a85      	ldr	r2, [pc, #532]	; (802d364 <HAL_DMA_IRQHandler+0x690>)
 802d150:	4293      	cmp	r3, r2
 802d152:	d04a      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d154:	687b      	ldr	r3, [r7, #4]
 802d156:	681b      	ldr	r3, [r3, #0]
 802d158:	4a83      	ldr	r2, [pc, #524]	; (802d368 <HAL_DMA_IRQHandler+0x694>)
 802d15a:	4293      	cmp	r3, r2
 802d15c:	d045      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d15e:	687b      	ldr	r3, [r7, #4]
 802d160:	681b      	ldr	r3, [r3, #0]
 802d162:	4a82      	ldr	r2, [pc, #520]	; (802d36c <HAL_DMA_IRQHandler+0x698>)
 802d164:	4293      	cmp	r3, r2
 802d166:	d040      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d168:	687b      	ldr	r3, [r7, #4]
 802d16a:	681b      	ldr	r3, [r3, #0]
 802d16c:	4a80      	ldr	r2, [pc, #512]	; (802d370 <HAL_DMA_IRQHandler+0x69c>)
 802d16e:	4293      	cmp	r3, r2
 802d170:	d03b      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d172:	687b      	ldr	r3, [r7, #4]
 802d174:	681b      	ldr	r3, [r3, #0]
 802d176:	4a7f      	ldr	r2, [pc, #508]	; (802d374 <HAL_DMA_IRQHandler+0x6a0>)
 802d178:	4293      	cmp	r3, r2
 802d17a:	d036      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d17c:	687b      	ldr	r3, [r7, #4]
 802d17e:	681b      	ldr	r3, [r3, #0]
 802d180:	4a7d      	ldr	r2, [pc, #500]	; (802d378 <HAL_DMA_IRQHandler+0x6a4>)
 802d182:	4293      	cmp	r3, r2
 802d184:	d031      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d186:	687b      	ldr	r3, [r7, #4]
 802d188:	681b      	ldr	r3, [r3, #0]
 802d18a:	4a7c      	ldr	r2, [pc, #496]	; (802d37c <HAL_DMA_IRQHandler+0x6a8>)
 802d18c:	4293      	cmp	r3, r2
 802d18e:	d02c      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d190:	687b      	ldr	r3, [r7, #4]
 802d192:	681b      	ldr	r3, [r3, #0]
 802d194:	4a7a      	ldr	r2, [pc, #488]	; (802d380 <HAL_DMA_IRQHandler+0x6ac>)
 802d196:	4293      	cmp	r3, r2
 802d198:	d027      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d19a:	687b      	ldr	r3, [r7, #4]
 802d19c:	681b      	ldr	r3, [r3, #0]
 802d19e:	4a79      	ldr	r2, [pc, #484]	; (802d384 <HAL_DMA_IRQHandler+0x6b0>)
 802d1a0:	4293      	cmp	r3, r2
 802d1a2:	d022      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d1a4:	687b      	ldr	r3, [r7, #4]
 802d1a6:	681b      	ldr	r3, [r3, #0]
 802d1a8:	4a77      	ldr	r2, [pc, #476]	; (802d388 <HAL_DMA_IRQHandler+0x6b4>)
 802d1aa:	4293      	cmp	r3, r2
 802d1ac:	d01d      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d1ae:	687b      	ldr	r3, [r7, #4]
 802d1b0:	681b      	ldr	r3, [r3, #0]
 802d1b2:	4a76      	ldr	r2, [pc, #472]	; (802d38c <HAL_DMA_IRQHandler+0x6b8>)
 802d1b4:	4293      	cmp	r3, r2
 802d1b6:	d018      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d1b8:	687b      	ldr	r3, [r7, #4]
 802d1ba:	681b      	ldr	r3, [r3, #0]
 802d1bc:	4a74      	ldr	r2, [pc, #464]	; (802d390 <HAL_DMA_IRQHandler+0x6bc>)
 802d1be:	4293      	cmp	r3, r2
 802d1c0:	d013      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d1c2:	687b      	ldr	r3, [r7, #4]
 802d1c4:	681b      	ldr	r3, [r3, #0]
 802d1c6:	4a73      	ldr	r2, [pc, #460]	; (802d394 <HAL_DMA_IRQHandler+0x6c0>)
 802d1c8:	4293      	cmp	r3, r2
 802d1ca:	d00e      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d1cc:	687b      	ldr	r3, [r7, #4]
 802d1ce:	681b      	ldr	r3, [r3, #0]
 802d1d0:	4a71      	ldr	r2, [pc, #452]	; (802d398 <HAL_DMA_IRQHandler+0x6c4>)
 802d1d2:	4293      	cmp	r3, r2
 802d1d4:	d009      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d1d6:	687b      	ldr	r3, [r7, #4]
 802d1d8:	681b      	ldr	r3, [r3, #0]
 802d1da:	4a70      	ldr	r2, [pc, #448]	; (802d39c <HAL_DMA_IRQHandler+0x6c8>)
 802d1dc:	4293      	cmp	r3, r2
 802d1de:	d004      	beq.n	802d1ea <HAL_DMA_IRQHandler+0x516>
 802d1e0:	687b      	ldr	r3, [r7, #4]
 802d1e2:	681b      	ldr	r3, [r3, #0]
 802d1e4:	4a6e      	ldr	r2, [pc, #440]	; (802d3a0 <HAL_DMA_IRQHandler+0x6cc>)
 802d1e6:	4293      	cmp	r3, r2
 802d1e8:	d10a      	bne.n	802d200 <HAL_DMA_IRQHandler+0x52c>
 802d1ea:	687b      	ldr	r3, [r7, #4]
 802d1ec:	681b      	ldr	r3, [r3, #0]
 802d1ee:	681b      	ldr	r3, [r3, #0]
 802d1f0:	f003 0308 	and.w	r3, r3, #8
 802d1f4:	2b00      	cmp	r3, #0
 802d1f6:	bf14      	ite	ne
 802d1f8:	2301      	movne	r3, #1
 802d1fa:	2300      	moveq	r3, #0
 802d1fc:	b2db      	uxtb	r3, r3
 802d1fe:	e009      	b.n	802d214 <HAL_DMA_IRQHandler+0x540>
 802d200:	687b      	ldr	r3, [r7, #4]
 802d202:	681b      	ldr	r3, [r3, #0]
 802d204:	681b      	ldr	r3, [r3, #0]
 802d206:	f003 0304 	and.w	r3, r3, #4
 802d20a:	2b00      	cmp	r3, #0
 802d20c:	bf14      	ite	ne
 802d20e:	2301      	movne	r3, #1
 802d210:	2300      	moveq	r3, #0
 802d212:	b2db      	uxtb	r3, r3
 802d214:	2b00      	cmp	r3, #0
 802d216:	d03e      	beq.n	802d296 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d218:	687b      	ldr	r3, [r7, #4]
 802d21a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d21c:	f003 031f 	and.w	r3, r3, #31
 802d220:	2210      	movs	r2, #16
 802d222:	409a      	lsls	r2, r3
 802d224:	6a3b      	ldr	r3, [r7, #32]
 802d226:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d228:	687b      	ldr	r3, [r7, #4]
 802d22a:	681b      	ldr	r3, [r3, #0]
 802d22c:	681b      	ldr	r3, [r3, #0]
 802d22e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d232:	2b00      	cmp	r3, #0
 802d234:	d018      	beq.n	802d268 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d236:	687b      	ldr	r3, [r7, #4]
 802d238:	681b      	ldr	r3, [r3, #0]
 802d23a:	681b      	ldr	r3, [r3, #0]
 802d23c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d240:	2b00      	cmp	r3, #0
 802d242:	d108      	bne.n	802d256 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 802d244:	687b      	ldr	r3, [r7, #4]
 802d246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d248:	2b00      	cmp	r3, #0
 802d24a:	d024      	beq.n	802d296 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 802d24c:	687b      	ldr	r3, [r7, #4]
 802d24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d250:	6878      	ldr	r0, [r7, #4]
 802d252:	4798      	blx	r3
 802d254:	e01f      	b.n	802d296 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 802d256:	687b      	ldr	r3, [r7, #4]
 802d258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d25a:	2b00      	cmp	r3, #0
 802d25c:	d01b      	beq.n	802d296 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 802d25e:	687b      	ldr	r3, [r7, #4]
 802d260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d262:	6878      	ldr	r0, [r7, #4]
 802d264:	4798      	blx	r3
 802d266:	e016      	b.n	802d296 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d268:	687b      	ldr	r3, [r7, #4]
 802d26a:	681b      	ldr	r3, [r3, #0]
 802d26c:	681b      	ldr	r3, [r3, #0]
 802d26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d272:	2b00      	cmp	r3, #0
 802d274:	d107      	bne.n	802d286 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d276:	687b      	ldr	r3, [r7, #4]
 802d278:	681b      	ldr	r3, [r3, #0]
 802d27a:	681a      	ldr	r2, [r3, #0]
 802d27c:	687b      	ldr	r3, [r7, #4]
 802d27e:	681b      	ldr	r3, [r3, #0]
 802d280:	f022 0208 	bic.w	r2, r2, #8
 802d284:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 802d286:	687b      	ldr	r3, [r7, #4]
 802d288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d28a:	2b00      	cmp	r3, #0
 802d28c:	d003      	beq.n	802d296 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802d28e:	687b      	ldr	r3, [r7, #4]
 802d290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d292:	6878      	ldr	r0, [r7, #4]
 802d294:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 802d296:	687b      	ldr	r3, [r7, #4]
 802d298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d29a:	f003 031f 	and.w	r3, r3, #31
 802d29e:	2220      	movs	r2, #32
 802d2a0:	409a      	lsls	r2, r3
 802d2a2:	69bb      	ldr	r3, [r7, #24]
 802d2a4:	4013      	ands	r3, r2
 802d2a6:	2b00      	cmp	r3, #0
 802d2a8:	f000 8110 	beq.w	802d4cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 802d2ac:	687b      	ldr	r3, [r7, #4]
 802d2ae:	681b      	ldr	r3, [r3, #0]
 802d2b0:	4a2c      	ldr	r2, [pc, #176]	; (802d364 <HAL_DMA_IRQHandler+0x690>)
 802d2b2:	4293      	cmp	r3, r2
 802d2b4:	d04a      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d2b6:	687b      	ldr	r3, [r7, #4]
 802d2b8:	681b      	ldr	r3, [r3, #0]
 802d2ba:	4a2b      	ldr	r2, [pc, #172]	; (802d368 <HAL_DMA_IRQHandler+0x694>)
 802d2bc:	4293      	cmp	r3, r2
 802d2be:	d045      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d2c0:	687b      	ldr	r3, [r7, #4]
 802d2c2:	681b      	ldr	r3, [r3, #0]
 802d2c4:	4a29      	ldr	r2, [pc, #164]	; (802d36c <HAL_DMA_IRQHandler+0x698>)
 802d2c6:	4293      	cmp	r3, r2
 802d2c8:	d040      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d2ca:	687b      	ldr	r3, [r7, #4]
 802d2cc:	681b      	ldr	r3, [r3, #0]
 802d2ce:	4a28      	ldr	r2, [pc, #160]	; (802d370 <HAL_DMA_IRQHandler+0x69c>)
 802d2d0:	4293      	cmp	r3, r2
 802d2d2:	d03b      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d2d4:	687b      	ldr	r3, [r7, #4]
 802d2d6:	681b      	ldr	r3, [r3, #0]
 802d2d8:	4a26      	ldr	r2, [pc, #152]	; (802d374 <HAL_DMA_IRQHandler+0x6a0>)
 802d2da:	4293      	cmp	r3, r2
 802d2dc:	d036      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d2de:	687b      	ldr	r3, [r7, #4]
 802d2e0:	681b      	ldr	r3, [r3, #0]
 802d2e2:	4a25      	ldr	r2, [pc, #148]	; (802d378 <HAL_DMA_IRQHandler+0x6a4>)
 802d2e4:	4293      	cmp	r3, r2
 802d2e6:	d031      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d2e8:	687b      	ldr	r3, [r7, #4]
 802d2ea:	681b      	ldr	r3, [r3, #0]
 802d2ec:	4a23      	ldr	r2, [pc, #140]	; (802d37c <HAL_DMA_IRQHandler+0x6a8>)
 802d2ee:	4293      	cmp	r3, r2
 802d2f0:	d02c      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d2f2:	687b      	ldr	r3, [r7, #4]
 802d2f4:	681b      	ldr	r3, [r3, #0]
 802d2f6:	4a22      	ldr	r2, [pc, #136]	; (802d380 <HAL_DMA_IRQHandler+0x6ac>)
 802d2f8:	4293      	cmp	r3, r2
 802d2fa:	d027      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d2fc:	687b      	ldr	r3, [r7, #4]
 802d2fe:	681b      	ldr	r3, [r3, #0]
 802d300:	4a20      	ldr	r2, [pc, #128]	; (802d384 <HAL_DMA_IRQHandler+0x6b0>)
 802d302:	4293      	cmp	r3, r2
 802d304:	d022      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d306:	687b      	ldr	r3, [r7, #4]
 802d308:	681b      	ldr	r3, [r3, #0]
 802d30a:	4a1f      	ldr	r2, [pc, #124]	; (802d388 <HAL_DMA_IRQHandler+0x6b4>)
 802d30c:	4293      	cmp	r3, r2
 802d30e:	d01d      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d310:	687b      	ldr	r3, [r7, #4]
 802d312:	681b      	ldr	r3, [r3, #0]
 802d314:	4a1d      	ldr	r2, [pc, #116]	; (802d38c <HAL_DMA_IRQHandler+0x6b8>)
 802d316:	4293      	cmp	r3, r2
 802d318:	d018      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d31a:	687b      	ldr	r3, [r7, #4]
 802d31c:	681b      	ldr	r3, [r3, #0]
 802d31e:	4a1c      	ldr	r2, [pc, #112]	; (802d390 <HAL_DMA_IRQHandler+0x6bc>)
 802d320:	4293      	cmp	r3, r2
 802d322:	d013      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d324:	687b      	ldr	r3, [r7, #4]
 802d326:	681b      	ldr	r3, [r3, #0]
 802d328:	4a1a      	ldr	r2, [pc, #104]	; (802d394 <HAL_DMA_IRQHandler+0x6c0>)
 802d32a:	4293      	cmp	r3, r2
 802d32c:	d00e      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d32e:	687b      	ldr	r3, [r7, #4]
 802d330:	681b      	ldr	r3, [r3, #0]
 802d332:	4a19      	ldr	r2, [pc, #100]	; (802d398 <HAL_DMA_IRQHandler+0x6c4>)
 802d334:	4293      	cmp	r3, r2
 802d336:	d009      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d338:	687b      	ldr	r3, [r7, #4]
 802d33a:	681b      	ldr	r3, [r3, #0]
 802d33c:	4a17      	ldr	r2, [pc, #92]	; (802d39c <HAL_DMA_IRQHandler+0x6c8>)
 802d33e:	4293      	cmp	r3, r2
 802d340:	d004      	beq.n	802d34c <HAL_DMA_IRQHandler+0x678>
 802d342:	687b      	ldr	r3, [r7, #4]
 802d344:	681b      	ldr	r3, [r3, #0]
 802d346:	4a16      	ldr	r2, [pc, #88]	; (802d3a0 <HAL_DMA_IRQHandler+0x6cc>)
 802d348:	4293      	cmp	r3, r2
 802d34a:	d12b      	bne.n	802d3a4 <HAL_DMA_IRQHandler+0x6d0>
 802d34c:	687b      	ldr	r3, [r7, #4]
 802d34e:	681b      	ldr	r3, [r3, #0]
 802d350:	681b      	ldr	r3, [r3, #0]
 802d352:	f003 0310 	and.w	r3, r3, #16
 802d356:	2b00      	cmp	r3, #0
 802d358:	bf14      	ite	ne
 802d35a:	2301      	movne	r3, #1
 802d35c:	2300      	moveq	r3, #0
 802d35e:	b2db      	uxtb	r3, r3
 802d360:	e02a      	b.n	802d3b8 <HAL_DMA_IRQHandler+0x6e4>
 802d362:	bf00      	nop
 802d364:	40020010 	.word	0x40020010
 802d368:	40020028 	.word	0x40020028
 802d36c:	40020040 	.word	0x40020040
 802d370:	40020058 	.word	0x40020058
 802d374:	40020070 	.word	0x40020070
 802d378:	40020088 	.word	0x40020088
 802d37c:	400200a0 	.word	0x400200a0
 802d380:	400200b8 	.word	0x400200b8
 802d384:	40020410 	.word	0x40020410
 802d388:	40020428 	.word	0x40020428
 802d38c:	40020440 	.word	0x40020440
 802d390:	40020458 	.word	0x40020458
 802d394:	40020470 	.word	0x40020470
 802d398:	40020488 	.word	0x40020488
 802d39c:	400204a0 	.word	0x400204a0
 802d3a0:	400204b8 	.word	0x400204b8
 802d3a4:	687b      	ldr	r3, [r7, #4]
 802d3a6:	681b      	ldr	r3, [r3, #0]
 802d3a8:	681b      	ldr	r3, [r3, #0]
 802d3aa:	f003 0302 	and.w	r3, r3, #2
 802d3ae:	2b00      	cmp	r3, #0
 802d3b0:	bf14      	ite	ne
 802d3b2:	2301      	movne	r3, #1
 802d3b4:	2300      	moveq	r3, #0
 802d3b6:	b2db      	uxtb	r3, r3
 802d3b8:	2b00      	cmp	r3, #0
 802d3ba:	f000 8087 	beq.w	802d4cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 802d3be:	687b      	ldr	r3, [r7, #4]
 802d3c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d3c2:	f003 031f 	and.w	r3, r3, #31
 802d3c6:	2220      	movs	r2, #32
 802d3c8:	409a      	lsls	r2, r3
 802d3ca:	6a3b      	ldr	r3, [r7, #32]
 802d3cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 802d3ce:	687b      	ldr	r3, [r7, #4]
 802d3d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802d3d4:	b2db      	uxtb	r3, r3
 802d3d6:	2b04      	cmp	r3, #4
 802d3d8:	d139      	bne.n	802d44e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802d3da:	687b      	ldr	r3, [r7, #4]
 802d3dc:	681b      	ldr	r3, [r3, #0]
 802d3de:	681a      	ldr	r2, [r3, #0]
 802d3e0:	687b      	ldr	r3, [r7, #4]
 802d3e2:	681b      	ldr	r3, [r3, #0]
 802d3e4:	f022 0216 	bic.w	r2, r2, #22
 802d3e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 802d3ea:	687b      	ldr	r3, [r7, #4]
 802d3ec:	681b      	ldr	r3, [r3, #0]
 802d3ee:	695a      	ldr	r2, [r3, #20]
 802d3f0:	687b      	ldr	r3, [r7, #4]
 802d3f2:	681b      	ldr	r3, [r3, #0]
 802d3f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d3f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802d3fa:	687b      	ldr	r3, [r7, #4]
 802d3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d3fe:	2b00      	cmp	r3, #0
 802d400:	d103      	bne.n	802d40a <HAL_DMA_IRQHandler+0x736>
 802d402:	687b      	ldr	r3, [r7, #4]
 802d404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d406:	2b00      	cmp	r3, #0
 802d408:	d007      	beq.n	802d41a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 802d40a:	687b      	ldr	r3, [r7, #4]
 802d40c:	681b      	ldr	r3, [r3, #0]
 802d40e:	681a      	ldr	r2, [r3, #0]
 802d410:	687b      	ldr	r3, [r7, #4]
 802d412:	681b      	ldr	r3, [r3, #0]
 802d414:	f022 0208 	bic.w	r2, r2, #8
 802d418:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802d41a:	687b      	ldr	r3, [r7, #4]
 802d41c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d41e:	f003 031f 	and.w	r3, r3, #31
 802d422:	223f      	movs	r2, #63	; 0x3f
 802d424:	409a      	lsls	r2, r3
 802d426:	6a3b      	ldr	r3, [r7, #32]
 802d428:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d42a:	687b      	ldr	r3, [r7, #4]
 802d42c:	2201      	movs	r2, #1
 802d42e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d432:	687b      	ldr	r3, [r7, #4]
 802d434:	2200      	movs	r2, #0
 802d436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 802d43a:	687b      	ldr	r3, [r7, #4]
 802d43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d43e:	2b00      	cmp	r3, #0
 802d440:	f000 834a 	beq.w	802dad8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 802d444:	687b      	ldr	r3, [r7, #4]
 802d446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802d448:	6878      	ldr	r0, [r7, #4]
 802d44a:	4798      	blx	r3
          }
          return;
 802d44c:	e344      	b.n	802dad8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 802d44e:	687b      	ldr	r3, [r7, #4]
 802d450:	681b      	ldr	r3, [r3, #0]
 802d452:	681b      	ldr	r3, [r3, #0]
 802d454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802d458:	2b00      	cmp	r3, #0
 802d45a:	d018      	beq.n	802d48e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 802d45c:	687b      	ldr	r3, [r7, #4]
 802d45e:	681b      	ldr	r3, [r3, #0]
 802d460:	681b      	ldr	r3, [r3, #0]
 802d462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802d466:	2b00      	cmp	r3, #0
 802d468:	d108      	bne.n	802d47c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 802d46a:	687b      	ldr	r3, [r7, #4]
 802d46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d46e:	2b00      	cmp	r3, #0
 802d470:	d02c      	beq.n	802d4cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 802d472:	687b      	ldr	r3, [r7, #4]
 802d474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d476:	6878      	ldr	r0, [r7, #4]
 802d478:	4798      	blx	r3
 802d47a:	e027      	b.n	802d4cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 802d47c:	687b      	ldr	r3, [r7, #4]
 802d47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d480:	2b00      	cmp	r3, #0
 802d482:	d023      	beq.n	802d4cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 802d484:	687b      	ldr	r3, [r7, #4]
 802d486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d488:	6878      	ldr	r0, [r7, #4]
 802d48a:	4798      	blx	r3
 802d48c:	e01e      	b.n	802d4cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 802d48e:	687b      	ldr	r3, [r7, #4]
 802d490:	681b      	ldr	r3, [r3, #0]
 802d492:	681b      	ldr	r3, [r3, #0]
 802d494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802d498:	2b00      	cmp	r3, #0
 802d49a:	d10f      	bne.n	802d4bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 802d49c:	687b      	ldr	r3, [r7, #4]
 802d49e:	681b      	ldr	r3, [r3, #0]
 802d4a0:	681a      	ldr	r2, [r3, #0]
 802d4a2:	687b      	ldr	r3, [r7, #4]
 802d4a4:	681b      	ldr	r3, [r3, #0]
 802d4a6:	f022 0210 	bic.w	r2, r2, #16
 802d4aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 802d4ac:	687b      	ldr	r3, [r7, #4]
 802d4ae:	2201      	movs	r2, #1
 802d4b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 802d4b4:	687b      	ldr	r3, [r7, #4]
 802d4b6:	2200      	movs	r2, #0
 802d4b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 802d4bc:	687b      	ldr	r3, [r7, #4]
 802d4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d4c0:	2b00      	cmp	r3, #0
 802d4c2:	d003      	beq.n	802d4cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 802d4c4:	687b      	ldr	r3, [r7, #4]
 802d4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d4c8:	6878      	ldr	r0, [r7, #4]
 802d4ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802d4cc:	687b      	ldr	r3, [r7, #4]
 802d4ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d4d0:	2b00      	cmp	r3, #0
 802d4d2:	f000 8306 	beq.w	802dae2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 802d4d6:	687b      	ldr	r3, [r7, #4]
 802d4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802d4da:	f003 0301 	and.w	r3, r3, #1
 802d4de:	2b00      	cmp	r3, #0
 802d4e0:	f000 8088 	beq.w	802d5f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 802d4e4:	687b      	ldr	r3, [r7, #4]
 802d4e6:	2204      	movs	r2, #4
 802d4e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 802d4ec:	687b      	ldr	r3, [r7, #4]
 802d4ee:	681b      	ldr	r3, [r3, #0]
 802d4f0:	4a7a      	ldr	r2, [pc, #488]	; (802d6dc <HAL_DMA_IRQHandler+0xa08>)
 802d4f2:	4293      	cmp	r3, r2
 802d4f4:	d04a      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d4f6:	687b      	ldr	r3, [r7, #4]
 802d4f8:	681b      	ldr	r3, [r3, #0]
 802d4fa:	4a79      	ldr	r2, [pc, #484]	; (802d6e0 <HAL_DMA_IRQHandler+0xa0c>)
 802d4fc:	4293      	cmp	r3, r2
 802d4fe:	d045      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d500:	687b      	ldr	r3, [r7, #4]
 802d502:	681b      	ldr	r3, [r3, #0]
 802d504:	4a77      	ldr	r2, [pc, #476]	; (802d6e4 <HAL_DMA_IRQHandler+0xa10>)
 802d506:	4293      	cmp	r3, r2
 802d508:	d040      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d50a:	687b      	ldr	r3, [r7, #4]
 802d50c:	681b      	ldr	r3, [r3, #0]
 802d50e:	4a76      	ldr	r2, [pc, #472]	; (802d6e8 <HAL_DMA_IRQHandler+0xa14>)
 802d510:	4293      	cmp	r3, r2
 802d512:	d03b      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d514:	687b      	ldr	r3, [r7, #4]
 802d516:	681b      	ldr	r3, [r3, #0]
 802d518:	4a74      	ldr	r2, [pc, #464]	; (802d6ec <HAL_DMA_IRQHandler+0xa18>)
 802d51a:	4293      	cmp	r3, r2
 802d51c:	d036      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d51e:	687b      	ldr	r3, [r7, #4]
 802d520:	681b      	ldr	r3, [r3, #0]
 802d522:	4a73      	ldr	r2, [pc, #460]	; (802d6f0 <HAL_DMA_IRQHandler+0xa1c>)
 802d524:	4293      	cmp	r3, r2
 802d526:	d031      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d528:	687b      	ldr	r3, [r7, #4]
 802d52a:	681b      	ldr	r3, [r3, #0]
 802d52c:	4a71      	ldr	r2, [pc, #452]	; (802d6f4 <HAL_DMA_IRQHandler+0xa20>)
 802d52e:	4293      	cmp	r3, r2
 802d530:	d02c      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d532:	687b      	ldr	r3, [r7, #4]
 802d534:	681b      	ldr	r3, [r3, #0]
 802d536:	4a70      	ldr	r2, [pc, #448]	; (802d6f8 <HAL_DMA_IRQHandler+0xa24>)
 802d538:	4293      	cmp	r3, r2
 802d53a:	d027      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d53c:	687b      	ldr	r3, [r7, #4]
 802d53e:	681b      	ldr	r3, [r3, #0]
 802d540:	4a6e      	ldr	r2, [pc, #440]	; (802d6fc <HAL_DMA_IRQHandler+0xa28>)
 802d542:	4293      	cmp	r3, r2
 802d544:	d022      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d546:	687b      	ldr	r3, [r7, #4]
 802d548:	681b      	ldr	r3, [r3, #0]
 802d54a:	4a6d      	ldr	r2, [pc, #436]	; (802d700 <HAL_DMA_IRQHandler+0xa2c>)
 802d54c:	4293      	cmp	r3, r2
 802d54e:	d01d      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d550:	687b      	ldr	r3, [r7, #4]
 802d552:	681b      	ldr	r3, [r3, #0]
 802d554:	4a6b      	ldr	r2, [pc, #428]	; (802d704 <HAL_DMA_IRQHandler+0xa30>)
 802d556:	4293      	cmp	r3, r2
 802d558:	d018      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d55a:	687b      	ldr	r3, [r7, #4]
 802d55c:	681b      	ldr	r3, [r3, #0]
 802d55e:	4a6a      	ldr	r2, [pc, #424]	; (802d708 <HAL_DMA_IRQHandler+0xa34>)
 802d560:	4293      	cmp	r3, r2
 802d562:	d013      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d564:	687b      	ldr	r3, [r7, #4]
 802d566:	681b      	ldr	r3, [r3, #0]
 802d568:	4a68      	ldr	r2, [pc, #416]	; (802d70c <HAL_DMA_IRQHandler+0xa38>)
 802d56a:	4293      	cmp	r3, r2
 802d56c:	d00e      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d56e:	687b      	ldr	r3, [r7, #4]
 802d570:	681b      	ldr	r3, [r3, #0]
 802d572:	4a67      	ldr	r2, [pc, #412]	; (802d710 <HAL_DMA_IRQHandler+0xa3c>)
 802d574:	4293      	cmp	r3, r2
 802d576:	d009      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d578:	687b      	ldr	r3, [r7, #4]
 802d57a:	681b      	ldr	r3, [r3, #0]
 802d57c:	4a65      	ldr	r2, [pc, #404]	; (802d714 <HAL_DMA_IRQHandler+0xa40>)
 802d57e:	4293      	cmp	r3, r2
 802d580:	d004      	beq.n	802d58c <HAL_DMA_IRQHandler+0x8b8>
 802d582:	687b      	ldr	r3, [r7, #4]
 802d584:	681b      	ldr	r3, [r3, #0]
 802d586:	4a64      	ldr	r2, [pc, #400]	; (802d718 <HAL_DMA_IRQHandler+0xa44>)
 802d588:	4293      	cmp	r3, r2
 802d58a:	d108      	bne.n	802d59e <HAL_DMA_IRQHandler+0x8ca>
 802d58c:	687b      	ldr	r3, [r7, #4]
 802d58e:	681b      	ldr	r3, [r3, #0]
 802d590:	681a      	ldr	r2, [r3, #0]
 802d592:	687b      	ldr	r3, [r7, #4]
 802d594:	681b      	ldr	r3, [r3, #0]
 802d596:	f022 0201 	bic.w	r2, r2, #1
 802d59a:	601a      	str	r2, [r3, #0]
 802d59c:	e007      	b.n	802d5ae <HAL_DMA_IRQHandler+0x8da>
 802d59e:	687b      	ldr	r3, [r7, #4]
 802d5a0:	681b      	ldr	r3, [r3, #0]
 802d5a2:	681a      	ldr	r2, [r3, #0]
 802d5a4:	687b      	ldr	r3, [r7, #4]
 802d5a6:	681b      	ldr	r3, [r3, #0]
 802d5a8:	f022 0201 	bic.w	r2, r2, #1
 802d5ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 802d5ae:	68fb      	ldr	r3, [r7, #12]
 802d5b0:	3301      	adds	r3, #1
 802d5b2:	60fb      	str	r3, [r7, #12]
 802d5b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802d5b6:	429a      	cmp	r2, r3
 802d5b8:	d307      	bcc.n	802d5ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 802d5ba:	687b      	ldr	r3, [r7, #4]
 802d5bc:	681b      	ldr	r3, [r3, #0]
 802d5be:	681b      	ldr	r3, [r3, #0]
 802d5c0:	f003 0301 	and.w	r3, r3, #1
 802d5c4:	2b00      	cmp	r3, #0
 802d5c6:	d1f2      	bne.n	802d5ae <HAL_DMA_IRQHandler+0x8da>
 802d5c8:	e000      	b.n	802d5cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 802d5ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 802d5cc:	687b      	ldr	r3, [r7, #4]
 802d5ce:	681b      	ldr	r3, [r3, #0]
 802d5d0:	681b      	ldr	r3, [r3, #0]
 802d5d2:	f003 0301 	and.w	r3, r3, #1
 802d5d6:	2b00      	cmp	r3, #0
 802d5d8:	d004      	beq.n	802d5e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 802d5da:	687b      	ldr	r3, [r7, #4]
 802d5dc:	2203      	movs	r2, #3
 802d5de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 802d5e2:	e003      	b.n	802d5ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 802d5e4:	687b      	ldr	r3, [r7, #4]
 802d5e6:	2201      	movs	r2, #1
 802d5e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802d5ec:	687b      	ldr	r3, [r7, #4]
 802d5ee:	2200      	movs	r2, #0
 802d5f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 802d5f4:	687b      	ldr	r3, [r7, #4]
 802d5f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d5f8:	2b00      	cmp	r3, #0
 802d5fa:	f000 8272 	beq.w	802dae2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802d5fe:	687b      	ldr	r3, [r7, #4]
 802d600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802d602:	6878      	ldr	r0, [r7, #4]
 802d604:	4798      	blx	r3
 802d606:	e26c      	b.n	802dae2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 802d608:	687b      	ldr	r3, [r7, #4]
 802d60a:	681b      	ldr	r3, [r3, #0]
 802d60c:	4a43      	ldr	r2, [pc, #268]	; (802d71c <HAL_DMA_IRQHandler+0xa48>)
 802d60e:	4293      	cmp	r3, r2
 802d610:	d022      	beq.n	802d658 <HAL_DMA_IRQHandler+0x984>
 802d612:	687b      	ldr	r3, [r7, #4]
 802d614:	681b      	ldr	r3, [r3, #0]
 802d616:	4a42      	ldr	r2, [pc, #264]	; (802d720 <HAL_DMA_IRQHandler+0xa4c>)
 802d618:	4293      	cmp	r3, r2
 802d61a:	d01d      	beq.n	802d658 <HAL_DMA_IRQHandler+0x984>
 802d61c:	687b      	ldr	r3, [r7, #4]
 802d61e:	681b      	ldr	r3, [r3, #0]
 802d620:	4a40      	ldr	r2, [pc, #256]	; (802d724 <HAL_DMA_IRQHandler+0xa50>)
 802d622:	4293      	cmp	r3, r2
 802d624:	d018      	beq.n	802d658 <HAL_DMA_IRQHandler+0x984>
 802d626:	687b      	ldr	r3, [r7, #4]
 802d628:	681b      	ldr	r3, [r3, #0]
 802d62a:	4a3f      	ldr	r2, [pc, #252]	; (802d728 <HAL_DMA_IRQHandler+0xa54>)
 802d62c:	4293      	cmp	r3, r2
 802d62e:	d013      	beq.n	802d658 <HAL_DMA_IRQHandler+0x984>
 802d630:	687b      	ldr	r3, [r7, #4]
 802d632:	681b      	ldr	r3, [r3, #0]
 802d634:	4a3d      	ldr	r2, [pc, #244]	; (802d72c <HAL_DMA_IRQHandler+0xa58>)
 802d636:	4293      	cmp	r3, r2
 802d638:	d00e      	beq.n	802d658 <HAL_DMA_IRQHandler+0x984>
 802d63a:	687b      	ldr	r3, [r7, #4]
 802d63c:	681b      	ldr	r3, [r3, #0]
 802d63e:	4a3c      	ldr	r2, [pc, #240]	; (802d730 <HAL_DMA_IRQHandler+0xa5c>)
 802d640:	4293      	cmp	r3, r2
 802d642:	d009      	beq.n	802d658 <HAL_DMA_IRQHandler+0x984>
 802d644:	687b      	ldr	r3, [r7, #4]
 802d646:	681b      	ldr	r3, [r3, #0]
 802d648:	4a3a      	ldr	r2, [pc, #232]	; (802d734 <HAL_DMA_IRQHandler+0xa60>)
 802d64a:	4293      	cmp	r3, r2
 802d64c:	d004      	beq.n	802d658 <HAL_DMA_IRQHandler+0x984>
 802d64e:	687b      	ldr	r3, [r7, #4]
 802d650:	681b      	ldr	r3, [r3, #0]
 802d652:	4a39      	ldr	r2, [pc, #228]	; (802d738 <HAL_DMA_IRQHandler+0xa64>)
 802d654:	4293      	cmp	r3, r2
 802d656:	d101      	bne.n	802d65c <HAL_DMA_IRQHandler+0x988>
 802d658:	2301      	movs	r3, #1
 802d65a:	e000      	b.n	802d65e <HAL_DMA_IRQHandler+0x98a>
 802d65c:	2300      	movs	r3, #0
 802d65e:	2b00      	cmp	r3, #0
 802d660:	f000 823f 	beq.w	802dae2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 802d664:	687b      	ldr	r3, [r7, #4]
 802d666:	681b      	ldr	r3, [r3, #0]
 802d668:	681b      	ldr	r3, [r3, #0]
 802d66a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 802d66c:	687b      	ldr	r3, [r7, #4]
 802d66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d670:	f003 031f 	and.w	r3, r3, #31
 802d674:	2204      	movs	r2, #4
 802d676:	409a      	lsls	r2, r3
 802d678:	697b      	ldr	r3, [r7, #20]
 802d67a:	4013      	ands	r3, r2
 802d67c:	2b00      	cmp	r3, #0
 802d67e:	f000 80cd 	beq.w	802d81c <HAL_DMA_IRQHandler+0xb48>
 802d682:	693b      	ldr	r3, [r7, #16]
 802d684:	f003 0304 	and.w	r3, r3, #4
 802d688:	2b00      	cmp	r3, #0
 802d68a:	f000 80c7 	beq.w	802d81c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 802d68e:	687b      	ldr	r3, [r7, #4]
 802d690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d692:	f003 031f 	and.w	r3, r3, #31
 802d696:	2204      	movs	r2, #4
 802d698:	409a      	lsls	r2, r3
 802d69a:	69fb      	ldr	r3, [r7, #28]
 802d69c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d69e:	693b      	ldr	r3, [r7, #16]
 802d6a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d6a4:	2b00      	cmp	r3, #0
 802d6a6:	d049      	beq.n	802d73c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d6a8:	693b      	ldr	r3, [r7, #16]
 802d6aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d6ae:	2b00      	cmp	r3, #0
 802d6b0:	d109      	bne.n	802d6c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802d6b2:	687b      	ldr	r3, [r7, #4]
 802d6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d6b6:	2b00      	cmp	r3, #0
 802d6b8:	f000 8210 	beq.w	802dadc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 802d6bc:	687b      	ldr	r3, [r7, #4]
 802d6be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802d6c0:	6878      	ldr	r0, [r7, #4]
 802d6c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d6c4:	e20a      	b.n	802dadc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802d6c6:	687b      	ldr	r3, [r7, #4]
 802d6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d6ca:	2b00      	cmp	r3, #0
 802d6cc:	f000 8206 	beq.w	802dadc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 802d6d0:	687b      	ldr	r3, [r7, #4]
 802d6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d6d4:	6878      	ldr	r0, [r7, #4]
 802d6d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d6d8:	e200      	b.n	802dadc <HAL_DMA_IRQHandler+0xe08>
 802d6da:	bf00      	nop
 802d6dc:	40020010 	.word	0x40020010
 802d6e0:	40020028 	.word	0x40020028
 802d6e4:	40020040 	.word	0x40020040
 802d6e8:	40020058 	.word	0x40020058
 802d6ec:	40020070 	.word	0x40020070
 802d6f0:	40020088 	.word	0x40020088
 802d6f4:	400200a0 	.word	0x400200a0
 802d6f8:	400200b8 	.word	0x400200b8
 802d6fc:	40020410 	.word	0x40020410
 802d700:	40020428 	.word	0x40020428
 802d704:	40020440 	.word	0x40020440
 802d708:	40020458 	.word	0x40020458
 802d70c:	40020470 	.word	0x40020470
 802d710:	40020488 	.word	0x40020488
 802d714:	400204a0 	.word	0x400204a0
 802d718:	400204b8 	.word	0x400204b8
 802d71c:	58025408 	.word	0x58025408
 802d720:	5802541c 	.word	0x5802541c
 802d724:	58025430 	.word	0x58025430
 802d728:	58025444 	.word	0x58025444
 802d72c:	58025458 	.word	0x58025458
 802d730:	5802546c 	.word	0x5802546c
 802d734:	58025480 	.word	0x58025480
 802d738:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d73c:	693b      	ldr	r3, [r7, #16]
 802d73e:	f003 0320 	and.w	r3, r3, #32
 802d742:	2b00      	cmp	r3, #0
 802d744:	d160      	bne.n	802d808 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 802d746:	687b      	ldr	r3, [r7, #4]
 802d748:	681b      	ldr	r3, [r3, #0]
 802d74a:	4a7f      	ldr	r2, [pc, #508]	; (802d948 <HAL_DMA_IRQHandler+0xc74>)
 802d74c:	4293      	cmp	r3, r2
 802d74e:	d04a      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d750:	687b      	ldr	r3, [r7, #4]
 802d752:	681b      	ldr	r3, [r3, #0]
 802d754:	4a7d      	ldr	r2, [pc, #500]	; (802d94c <HAL_DMA_IRQHandler+0xc78>)
 802d756:	4293      	cmp	r3, r2
 802d758:	d045      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d75a:	687b      	ldr	r3, [r7, #4]
 802d75c:	681b      	ldr	r3, [r3, #0]
 802d75e:	4a7c      	ldr	r2, [pc, #496]	; (802d950 <HAL_DMA_IRQHandler+0xc7c>)
 802d760:	4293      	cmp	r3, r2
 802d762:	d040      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d764:	687b      	ldr	r3, [r7, #4]
 802d766:	681b      	ldr	r3, [r3, #0]
 802d768:	4a7a      	ldr	r2, [pc, #488]	; (802d954 <HAL_DMA_IRQHandler+0xc80>)
 802d76a:	4293      	cmp	r3, r2
 802d76c:	d03b      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d76e:	687b      	ldr	r3, [r7, #4]
 802d770:	681b      	ldr	r3, [r3, #0]
 802d772:	4a79      	ldr	r2, [pc, #484]	; (802d958 <HAL_DMA_IRQHandler+0xc84>)
 802d774:	4293      	cmp	r3, r2
 802d776:	d036      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d778:	687b      	ldr	r3, [r7, #4]
 802d77a:	681b      	ldr	r3, [r3, #0]
 802d77c:	4a77      	ldr	r2, [pc, #476]	; (802d95c <HAL_DMA_IRQHandler+0xc88>)
 802d77e:	4293      	cmp	r3, r2
 802d780:	d031      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d782:	687b      	ldr	r3, [r7, #4]
 802d784:	681b      	ldr	r3, [r3, #0]
 802d786:	4a76      	ldr	r2, [pc, #472]	; (802d960 <HAL_DMA_IRQHandler+0xc8c>)
 802d788:	4293      	cmp	r3, r2
 802d78a:	d02c      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d78c:	687b      	ldr	r3, [r7, #4]
 802d78e:	681b      	ldr	r3, [r3, #0]
 802d790:	4a74      	ldr	r2, [pc, #464]	; (802d964 <HAL_DMA_IRQHandler+0xc90>)
 802d792:	4293      	cmp	r3, r2
 802d794:	d027      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d796:	687b      	ldr	r3, [r7, #4]
 802d798:	681b      	ldr	r3, [r3, #0]
 802d79a:	4a73      	ldr	r2, [pc, #460]	; (802d968 <HAL_DMA_IRQHandler+0xc94>)
 802d79c:	4293      	cmp	r3, r2
 802d79e:	d022      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d7a0:	687b      	ldr	r3, [r7, #4]
 802d7a2:	681b      	ldr	r3, [r3, #0]
 802d7a4:	4a71      	ldr	r2, [pc, #452]	; (802d96c <HAL_DMA_IRQHandler+0xc98>)
 802d7a6:	4293      	cmp	r3, r2
 802d7a8:	d01d      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d7aa:	687b      	ldr	r3, [r7, #4]
 802d7ac:	681b      	ldr	r3, [r3, #0]
 802d7ae:	4a70      	ldr	r2, [pc, #448]	; (802d970 <HAL_DMA_IRQHandler+0xc9c>)
 802d7b0:	4293      	cmp	r3, r2
 802d7b2:	d018      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d7b4:	687b      	ldr	r3, [r7, #4]
 802d7b6:	681b      	ldr	r3, [r3, #0]
 802d7b8:	4a6e      	ldr	r2, [pc, #440]	; (802d974 <HAL_DMA_IRQHandler+0xca0>)
 802d7ba:	4293      	cmp	r3, r2
 802d7bc:	d013      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d7be:	687b      	ldr	r3, [r7, #4]
 802d7c0:	681b      	ldr	r3, [r3, #0]
 802d7c2:	4a6d      	ldr	r2, [pc, #436]	; (802d978 <HAL_DMA_IRQHandler+0xca4>)
 802d7c4:	4293      	cmp	r3, r2
 802d7c6:	d00e      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d7c8:	687b      	ldr	r3, [r7, #4]
 802d7ca:	681b      	ldr	r3, [r3, #0]
 802d7cc:	4a6b      	ldr	r2, [pc, #428]	; (802d97c <HAL_DMA_IRQHandler+0xca8>)
 802d7ce:	4293      	cmp	r3, r2
 802d7d0:	d009      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d7d2:	687b      	ldr	r3, [r7, #4]
 802d7d4:	681b      	ldr	r3, [r3, #0]
 802d7d6:	4a6a      	ldr	r2, [pc, #424]	; (802d980 <HAL_DMA_IRQHandler+0xcac>)
 802d7d8:	4293      	cmp	r3, r2
 802d7da:	d004      	beq.n	802d7e6 <HAL_DMA_IRQHandler+0xb12>
 802d7dc:	687b      	ldr	r3, [r7, #4]
 802d7de:	681b      	ldr	r3, [r3, #0]
 802d7e0:	4a68      	ldr	r2, [pc, #416]	; (802d984 <HAL_DMA_IRQHandler+0xcb0>)
 802d7e2:	4293      	cmp	r3, r2
 802d7e4:	d108      	bne.n	802d7f8 <HAL_DMA_IRQHandler+0xb24>
 802d7e6:	687b      	ldr	r3, [r7, #4]
 802d7e8:	681b      	ldr	r3, [r3, #0]
 802d7ea:	681a      	ldr	r2, [r3, #0]
 802d7ec:	687b      	ldr	r3, [r7, #4]
 802d7ee:	681b      	ldr	r3, [r3, #0]
 802d7f0:	f022 0208 	bic.w	r2, r2, #8
 802d7f4:	601a      	str	r2, [r3, #0]
 802d7f6:	e007      	b.n	802d808 <HAL_DMA_IRQHandler+0xb34>
 802d7f8:	687b      	ldr	r3, [r7, #4]
 802d7fa:	681b      	ldr	r3, [r3, #0]
 802d7fc:	681a      	ldr	r2, [r3, #0]
 802d7fe:	687b      	ldr	r3, [r7, #4]
 802d800:	681b      	ldr	r3, [r3, #0]
 802d802:	f022 0204 	bic.w	r2, r2, #4
 802d806:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 802d808:	687b      	ldr	r3, [r7, #4]
 802d80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d80c:	2b00      	cmp	r3, #0
 802d80e:	f000 8165 	beq.w	802dadc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802d812:	687b      	ldr	r3, [r7, #4]
 802d814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d816:	6878      	ldr	r0, [r7, #4]
 802d818:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d81a:	e15f      	b.n	802dadc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 802d81c:	687b      	ldr	r3, [r7, #4]
 802d81e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d820:	f003 031f 	and.w	r3, r3, #31
 802d824:	2202      	movs	r2, #2
 802d826:	409a      	lsls	r2, r3
 802d828:	697b      	ldr	r3, [r7, #20]
 802d82a:	4013      	ands	r3, r2
 802d82c:	2b00      	cmp	r3, #0
 802d82e:	f000 80c5 	beq.w	802d9bc <HAL_DMA_IRQHandler+0xce8>
 802d832:	693b      	ldr	r3, [r7, #16]
 802d834:	f003 0302 	and.w	r3, r3, #2
 802d838:	2b00      	cmp	r3, #0
 802d83a:	f000 80bf 	beq.w	802d9bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 802d83e:	687b      	ldr	r3, [r7, #4]
 802d840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d842:	f003 031f 	and.w	r3, r3, #31
 802d846:	2202      	movs	r2, #2
 802d848:	409a      	lsls	r2, r3
 802d84a:	69fb      	ldr	r3, [r7, #28]
 802d84c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d84e:	693b      	ldr	r3, [r7, #16]
 802d850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d854:	2b00      	cmp	r3, #0
 802d856:	d018      	beq.n	802d88a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 802d858:	693b      	ldr	r3, [r7, #16]
 802d85a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802d85e:	2b00      	cmp	r3, #0
 802d860:	d109      	bne.n	802d876 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802d862:	687b      	ldr	r3, [r7, #4]
 802d864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d866:	2b00      	cmp	r3, #0
 802d868:	f000 813a 	beq.w	802dae0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 802d86c:	687b      	ldr	r3, [r7, #4]
 802d86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802d870:	6878      	ldr	r0, [r7, #4]
 802d872:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d874:	e134      	b.n	802dae0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802d876:	687b      	ldr	r3, [r7, #4]
 802d878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d87a:	2b00      	cmp	r3, #0
 802d87c:	f000 8130 	beq.w	802dae0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 802d880:	687b      	ldr	r3, [r7, #4]
 802d882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d884:	6878      	ldr	r0, [r7, #4]
 802d886:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d888:	e12a      	b.n	802dae0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 802d88a:	693b      	ldr	r3, [r7, #16]
 802d88c:	f003 0320 	and.w	r3, r3, #32
 802d890:	2b00      	cmp	r3, #0
 802d892:	f040 8089 	bne.w	802d9a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 802d896:	687b      	ldr	r3, [r7, #4]
 802d898:	681b      	ldr	r3, [r3, #0]
 802d89a:	4a2b      	ldr	r2, [pc, #172]	; (802d948 <HAL_DMA_IRQHandler+0xc74>)
 802d89c:	4293      	cmp	r3, r2
 802d89e:	d04a      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8a0:	687b      	ldr	r3, [r7, #4]
 802d8a2:	681b      	ldr	r3, [r3, #0]
 802d8a4:	4a29      	ldr	r2, [pc, #164]	; (802d94c <HAL_DMA_IRQHandler+0xc78>)
 802d8a6:	4293      	cmp	r3, r2
 802d8a8:	d045      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8aa:	687b      	ldr	r3, [r7, #4]
 802d8ac:	681b      	ldr	r3, [r3, #0]
 802d8ae:	4a28      	ldr	r2, [pc, #160]	; (802d950 <HAL_DMA_IRQHandler+0xc7c>)
 802d8b0:	4293      	cmp	r3, r2
 802d8b2:	d040      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8b4:	687b      	ldr	r3, [r7, #4]
 802d8b6:	681b      	ldr	r3, [r3, #0]
 802d8b8:	4a26      	ldr	r2, [pc, #152]	; (802d954 <HAL_DMA_IRQHandler+0xc80>)
 802d8ba:	4293      	cmp	r3, r2
 802d8bc:	d03b      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8be:	687b      	ldr	r3, [r7, #4]
 802d8c0:	681b      	ldr	r3, [r3, #0]
 802d8c2:	4a25      	ldr	r2, [pc, #148]	; (802d958 <HAL_DMA_IRQHandler+0xc84>)
 802d8c4:	4293      	cmp	r3, r2
 802d8c6:	d036      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8c8:	687b      	ldr	r3, [r7, #4]
 802d8ca:	681b      	ldr	r3, [r3, #0]
 802d8cc:	4a23      	ldr	r2, [pc, #140]	; (802d95c <HAL_DMA_IRQHandler+0xc88>)
 802d8ce:	4293      	cmp	r3, r2
 802d8d0:	d031      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8d2:	687b      	ldr	r3, [r7, #4]
 802d8d4:	681b      	ldr	r3, [r3, #0]
 802d8d6:	4a22      	ldr	r2, [pc, #136]	; (802d960 <HAL_DMA_IRQHandler+0xc8c>)
 802d8d8:	4293      	cmp	r3, r2
 802d8da:	d02c      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8dc:	687b      	ldr	r3, [r7, #4]
 802d8de:	681b      	ldr	r3, [r3, #0]
 802d8e0:	4a20      	ldr	r2, [pc, #128]	; (802d964 <HAL_DMA_IRQHandler+0xc90>)
 802d8e2:	4293      	cmp	r3, r2
 802d8e4:	d027      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8e6:	687b      	ldr	r3, [r7, #4]
 802d8e8:	681b      	ldr	r3, [r3, #0]
 802d8ea:	4a1f      	ldr	r2, [pc, #124]	; (802d968 <HAL_DMA_IRQHandler+0xc94>)
 802d8ec:	4293      	cmp	r3, r2
 802d8ee:	d022      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8f0:	687b      	ldr	r3, [r7, #4]
 802d8f2:	681b      	ldr	r3, [r3, #0]
 802d8f4:	4a1d      	ldr	r2, [pc, #116]	; (802d96c <HAL_DMA_IRQHandler+0xc98>)
 802d8f6:	4293      	cmp	r3, r2
 802d8f8:	d01d      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d8fa:	687b      	ldr	r3, [r7, #4]
 802d8fc:	681b      	ldr	r3, [r3, #0]
 802d8fe:	4a1c      	ldr	r2, [pc, #112]	; (802d970 <HAL_DMA_IRQHandler+0xc9c>)
 802d900:	4293      	cmp	r3, r2
 802d902:	d018      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d904:	687b      	ldr	r3, [r7, #4]
 802d906:	681b      	ldr	r3, [r3, #0]
 802d908:	4a1a      	ldr	r2, [pc, #104]	; (802d974 <HAL_DMA_IRQHandler+0xca0>)
 802d90a:	4293      	cmp	r3, r2
 802d90c:	d013      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d90e:	687b      	ldr	r3, [r7, #4]
 802d910:	681b      	ldr	r3, [r3, #0]
 802d912:	4a19      	ldr	r2, [pc, #100]	; (802d978 <HAL_DMA_IRQHandler+0xca4>)
 802d914:	4293      	cmp	r3, r2
 802d916:	d00e      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d918:	687b      	ldr	r3, [r7, #4]
 802d91a:	681b      	ldr	r3, [r3, #0]
 802d91c:	4a17      	ldr	r2, [pc, #92]	; (802d97c <HAL_DMA_IRQHandler+0xca8>)
 802d91e:	4293      	cmp	r3, r2
 802d920:	d009      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d922:	687b      	ldr	r3, [r7, #4]
 802d924:	681b      	ldr	r3, [r3, #0]
 802d926:	4a16      	ldr	r2, [pc, #88]	; (802d980 <HAL_DMA_IRQHandler+0xcac>)
 802d928:	4293      	cmp	r3, r2
 802d92a:	d004      	beq.n	802d936 <HAL_DMA_IRQHandler+0xc62>
 802d92c:	687b      	ldr	r3, [r7, #4]
 802d92e:	681b      	ldr	r3, [r3, #0]
 802d930:	4a14      	ldr	r2, [pc, #80]	; (802d984 <HAL_DMA_IRQHandler+0xcb0>)
 802d932:	4293      	cmp	r3, r2
 802d934:	d128      	bne.n	802d988 <HAL_DMA_IRQHandler+0xcb4>
 802d936:	687b      	ldr	r3, [r7, #4]
 802d938:	681b      	ldr	r3, [r3, #0]
 802d93a:	681a      	ldr	r2, [r3, #0]
 802d93c:	687b      	ldr	r3, [r7, #4]
 802d93e:	681b      	ldr	r3, [r3, #0]
 802d940:	f022 0214 	bic.w	r2, r2, #20
 802d944:	601a      	str	r2, [r3, #0]
 802d946:	e027      	b.n	802d998 <HAL_DMA_IRQHandler+0xcc4>
 802d948:	40020010 	.word	0x40020010
 802d94c:	40020028 	.word	0x40020028
 802d950:	40020040 	.word	0x40020040
 802d954:	40020058 	.word	0x40020058
 802d958:	40020070 	.word	0x40020070
 802d95c:	40020088 	.word	0x40020088
 802d960:	400200a0 	.word	0x400200a0
 802d964:	400200b8 	.word	0x400200b8
 802d968:	40020410 	.word	0x40020410
 802d96c:	40020428 	.word	0x40020428
 802d970:	40020440 	.word	0x40020440
 802d974:	40020458 	.word	0x40020458
 802d978:	40020470 	.word	0x40020470
 802d97c:	40020488 	.word	0x40020488
 802d980:	400204a0 	.word	0x400204a0
 802d984:	400204b8 	.word	0x400204b8
 802d988:	687b      	ldr	r3, [r7, #4]
 802d98a:	681b      	ldr	r3, [r3, #0]
 802d98c:	681a      	ldr	r2, [r3, #0]
 802d98e:	687b      	ldr	r3, [r7, #4]
 802d990:	681b      	ldr	r3, [r3, #0]
 802d992:	f022 020a 	bic.w	r2, r2, #10
 802d996:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802d998:	687b      	ldr	r3, [r7, #4]
 802d99a:	2201      	movs	r2, #1
 802d99c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802d9a0:	687b      	ldr	r3, [r7, #4]
 802d9a2:	2200      	movs	r2, #0
 802d9a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 802d9a8:	687b      	ldr	r3, [r7, #4]
 802d9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d9ac:	2b00      	cmp	r3, #0
 802d9ae:	f000 8097 	beq.w	802dae0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802d9b2:	687b      	ldr	r3, [r7, #4]
 802d9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802d9b6:	6878      	ldr	r0, [r7, #4]
 802d9b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802d9ba:	e091      	b.n	802dae0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 802d9bc:	687b      	ldr	r3, [r7, #4]
 802d9be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802d9c0:	f003 031f 	and.w	r3, r3, #31
 802d9c4:	2208      	movs	r2, #8
 802d9c6:	409a      	lsls	r2, r3
 802d9c8:	697b      	ldr	r3, [r7, #20]
 802d9ca:	4013      	ands	r3, r2
 802d9cc:	2b00      	cmp	r3, #0
 802d9ce:	f000 8088 	beq.w	802dae2 <HAL_DMA_IRQHandler+0xe0e>
 802d9d2:	693b      	ldr	r3, [r7, #16]
 802d9d4:	f003 0308 	and.w	r3, r3, #8
 802d9d8:	2b00      	cmp	r3, #0
 802d9da:	f000 8082 	beq.w	802dae2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 802d9de:	687b      	ldr	r3, [r7, #4]
 802d9e0:	681b      	ldr	r3, [r3, #0]
 802d9e2:	4a41      	ldr	r2, [pc, #260]	; (802dae8 <HAL_DMA_IRQHandler+0xe14>)
 802d9e4:	4293      	cmp	r3, r2
 802d9e6:	d04a      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802d9e8:	687b      	ldr	r3, [r7, #4]
 802d9ea:	681b      	ldr	r3, [r3, #0]
 802d9ec:	4a3f      	ldr	r2, [pc, #252]	; (802daec <HAL_DMA_IRQHandler+0xe18>)
 802d9ee:	4293      	cmp	r3, r2
 802d9f0:	d045      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802d9f2:	687b      	ldr	r3, [r7, #4]
 802d9f4:	681b      	ldr	r3, [r3, #0]
 802d9f6:	4a3e      	ldr	r2, [pc, #248]	; (802daf0 <HAL_DMA_IRQHandler+0xe1c>)
 802d9f8:	4293      	cmp	r3, r2
 802d9fa:	d040      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802d9fc:	687b      	ldr	r3, [r7, #4]
 802d9fe:	681b      	ldr	r3, [r3, #0]
 802da00:	4a3c      	ldr	r2, [pc, #240]	; (802daf4 <HAL_DMA_IRQHandler+0xe20>)
 802da02:	4293      	cmp	r3, r2
 802da04:	d03b      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da06:	687b      	ldr	r3, [r7, #4]
 802da08:	681b      	ldr	r3, [r3, #0]
 802da0a:	4a3b      	ldr	r2, [pc, #236]	; (802daf8 <HAL_DMA_IRQHandler+0xe24>)
 802da0c:	4293      	cmp	r3, r2
 802da0e:	d036      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da10:	687b      	ldr	r3, [r7, #4]
 802da12:	681b      	ldr	r3, [r3, #0]
 802da14:	4a39      	ldr	r2, [pc, #228]	; (802dafc <HAL_DMA_IRQHandler+0xe28>)
 802da16:	4293      	cmp	r3, r2
 802da18:	d031      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da1a:	687b      	ldr	r3, [r7, #4]
 802da1c:	681b      	ldr	r3, [r3, #0]
 802da1e:	4a38      	ldr	r2, [pc, #224]	; (802db00 <HAL_DMA_IRQHandler+0xe2c>)
 802da20:	4293      	cmp	r3, r2
 802da22:	d02c      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da24:	687b      	ldr	r3, [r7, #4]
 802da26:	681b      	ldr	r3, [r3, #0]
 802da28:	4a36      	ldr	r2, [pc, #216]	; (802db04 <HAL_DMA_IRQHandler+0xe30>)
 802da2a:	4293      	cmp	r3, r2
 802da2c:	d027      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da2e:	687b      	ldr	r3, [r7, #4]
 802da30:	681b      	ldr	r3, [r3, #0]
 802da32:	4a35      	ldr	r2, [pc, #212]	; (802db08 <HAL_DMA_IRQHandler+0xe34>)
 802da34:	4293      	cmp	r3, r2
 802da36:	d022      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da38:	687b      	ldr	r3, [r7, #4]
 802da3a:	681b      	ldr	r3, [r3, #0]
 802da3c:	4a33      	ldr	r2, [pc, #204]	; (802db0c <HAL_DMA_IRQHandler+0xe38>)
 802da3e:	4293      	cmp	r3, r2
 802da40:	d01d      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da42:	687b      	ldr	r3, [r7, #4]
 802da44:	681b      	ldr	r3, [r3, #0]
 802da46:	4a32      	ldr	r2, [pc, #200]	; (802db10 <HAL_DMA_IRQHandler+0xe3c>)
 802da48:	4293      	cmp	r3, r2
 802da4a:	d018      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da4c:	687b      	ldr	r3, [r7, #4]
 802da4e:	681b      	ldr	r3, [r3, #0]
 802da50:	4a30      	ldr	r2, [pc, #192]	; (802db14 <HAL_DMA_IRQHandler+0xe40>)
 802da52:	4293      	cmp	r3, r2
 802da54:	d013      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da56:	687b      	ldr	r3, [r7, #4]
 802da58:	681b      	ldr	r3, [r3, #0]
 802da5a:	4a2f      	ldr	r2, [pc, #188]	; (802db18 <HAL_DMA_IRQHandler+0xe44>)
 802da5c:	4293      	cmp	r3, r2
 802da5e:	d00e      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da60:	687b      	ldr	r3, [r7, #4]
 802da62:	681b      	ldr	r3, [r3, #0]
 802da64:	4a2d      	ldr	r2, [pc, #180]	; (802db1c <HAL_DMA_IRQHandler+0xe48>)
 802da66:	4293      	cmp	r3, r2
 802da68:	d009      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da6a:	687b      	ldr	r3, [r7, #4]
 802da6c:	681b      	ldr	r3, [r3, #0]
 802da6e:	4a2c      	ldr	r2, [pc, #176]	; (802db20 <HAL_DMA_IRQHandler+0xe4c>)
 802da70:	4293      	cmp	r3, r2
 802da72:	d004      	beq.n	802da7e <HAL_DMA_IRQHandler+0xdaa>
 802da74:	687b      	ldr	r3, [r7, #4]
 802da76:	681b      	ldr	r3, [r3, #0]
 802da78:	4a2a      	ldr	r2, [pc, #168]	; (802db24 <HAL_DMA_IRQHandler+0xe50>)
 802da7a:	4293      	cmp	r3, r2
 802da7c:	d108      	bne.n	802da90 <HAL_DMA_IRQHandler+0xdbc>
 802da7e:	687b      	ldr	r3, [r7, #4]
 802da80:	681b      	ldr	r3, [r3, #0]
 802da82:	681a      	ldr	r2, [r3, #0]
 802da84:	687b      	ldr	r3, [r7, #4]
 802da86:	681b      	ldr	r3, [r3, #0]
 802da88:	f022 021c 	bic.w	r2, r2, #28
 802da8c:	601a      	str	r2, [r3, #0]
 802da8e:	e007      	b.n	802daa0 <HAL_DMA_IRQHandler+0xdcc>
 802da90:	687b      	ldr	r3, [r7, #4]
 802da92:	681b      	ldr	r3, [r3, #0]
 802da94:	681a      	ldr	r2, [r3, #0]
 802da96:	687b      	ldr	r3, [r7, #4]
 802da98:	681b      	ldr	r3, [r3, #0]
 802da9a:	f022 020e 	bic.w	r2, r2, #14
 802da9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802daa0:	687b      	ldr	r3, [r7, #4]
 802daa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802daa4:	f003 031f 	and.w	r3, r3, #31
 802daa8:	2201      	movs	r2, #1
 802daaa:	409a      	lsls	r2, r3
 802daac:	69fb      	ldr	r3, [r7, #28]
 802daae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 802dab0:	687b      	ldr	r3, [r7, #4]
 802dab2:	2201      	movs	r2, #1
 802dab4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802dab6:	687b      	ldr	r3, [r7, #4]
 802dab8:	2201      	movs	r2, #1
 802daba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802dabe:	687b      	ldr	r3, [r7, #4]
 802dac0:	2200      	movs	r2, #0
 802dac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 802dac6:	687b      	ldr	r3, [r7, #4]
 802dac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802daca:	2b00      	cmp	r3, #0
 802dacc:	d009      	beq.n	802dae2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 802dace:	687b      	ldr	r3, [r7, #4]
 802dad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802dad2:	6878      	ldr	r0, [r7, #4]
 802dad4:	4798      	blx	r3
 802dad6:	e004      	b.n	802dae2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 802dad8:	bf00      	nop
 802dada:	e002      	b.n	802dae2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802dadc:	bf00      	nop
 802dade:	e000      	b.n	802dae2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 802dae0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 802dae2:	3728      	adds	r7, #40	; 0x28
 802dae4:	46bd      	mov	sp, r7
 802dae6:	bd80      	pop	{r7, pc}
 802dae8:	40020010 	.word	0x40020010
 802daec:	40020028 	.word	0x40020028
 802daf0:	40020040 	.word	0x40020040
 802daf4:	40020058 	.word	0x40020058
 802daf8:	40020070 	.word	0x40020070
 802dafc:	40020088 	.word	0x40020088
 802db00:	400200a0 	.word	0x400200a0
 802db04:	400200b8 	.word	0x400200b8
 802db08:	40020410 	.word	0x40020410
 802db0c:	40020428 	.word	0x40020428
 802db10:	40020440 	.word	0x40020440
 802db14:	40020458 	.word	0x40020458
 802db18:	40020470 	.word	0x40020470
 802db1c:	40020488 	.word	0x40020488
 802db20:	400204a0 	.word	0x400204a0
 802db24:	400204b8 	.word	0x400204b8

0802db28 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 802db28:	b480      	push	{r7}
 802db2a:	b083      	sub	sp, #12
 802db2c:	af00      	add	r7, sp, #0
 802db2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 802db30:	687b      	ldr	r3, [r7, #4]
 802db32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802db36:	b2db      	uxtb	r3, r3
}
 802db38:	4618      	mov	r0, r3
 802db3a:	370c      	adds	r7, #12
 802db3c:	46bd      	mov	sp, r7
 802db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db42:	4770      	bx	lr

0802db44 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 802db44:	b480      	push	{r7}
 802db46:	b083      	sub	sp, #12
 802db48:	af00      	add	r7, sp, #0
 802db4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 802db4c:	687b      	ldr	r3, [r7, #4]
 802db4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 802db50:	4618      	mov	r0, r3
 802db52:	370c      	adds	r7, #12
 802db54:	46bd      	mov	sp, r7
 802db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db5a:	4770      	bx	lr

0802db5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802db5c:	b480      	push	{r7}
 802db5e:	b087      	sub	sp, #28
 802db60:	af00      	add	r7, sp, #0
 802db62:	60f8      	str	r0, [r7, #12]
 802db64:	60b9      	str	r1, [r7, #8]
 802db66:	607a      	str	r2, [r7, #4]
 802db68:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802db6a:	68fb      	ldr	r3, [r7, #12]
 802db6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802db6e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 802db70:	68fb      	ldr	r3, [r7, #12]
 802db72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802db74:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802db76:	68fb      	ldr	r3, [r7, #12]
 802db78:	681b      	ldr	r3, [r3, #0]
 802db7a:	4a7f      	ldr	r2, [pc, #508]	; (802dd78 <DMA_SetConfig+0x21c>)
 802db7c:	4293      	cmp	r3, r2
 802db7e:	d072      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802db80:	68fb      	ldr	r3, [r7, #12]
 802db82:	681b      	ldr	r3, [r3, #0]
 802db84:	4a7d      	ldr	r2, [pc, #500]	; (802dd7c <DMA_SetConfig+0x220>)
 802db86:	4293      	cmp	r3, r2
 802db88:	d06d      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802db8a:	68fb      	ldr	r3, [r7, #12]
 802db8c:	681b      	ldr	r3, [r3, #0]
 802db8e:	4a7c      	ldr	r2, [pc, #496]	; (802dd80 <DMA_SetConfig+0x224>)
 802db90:	4293      	cmp	r3, r2
 802db92:	d068      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802db94:	68fb      	ldr	r3, [r7, #12]
 802db96:	681b      	ldr	r3, [r3, #0]
 802db98:	4a7a      	ldr	r2, [pc, #488]	; (802dd84 <DMA_SetConfig+0x228>)
 802db9a:	4293      	cmp	r3, r2
 802db9c:	d063      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802db9e:	68fb      	ldr	r3, [r7, #12]
 802dba0:	681b      	ldr	r3, [r3, #0]
 802dba2:	4a79      	ldr	r2, [pc, #484]	; (802dd88 <DMA_SetConfig+0x22c>)
 802dba4:	4293      	cmp	r3, r2
 802dba6:	d05e      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dba8:	68fb      	ldr	r3, [r7, #12]
 802dbaa:	681b      	ldr	r3, [r3, #0]
 802dbac:	4a77      	ldr	r2, [pc, #476]	; (802dd8c <DMA_SetConfig+0x230>)
 802dbae:	4293      	cmp	r3, r2
 802dbb0:	d059      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dbb2:	68fb      	ldr	r3, [r7, #12]
 802dbb4:	681b      	ldr	r3, [r3, #0]
 802dbb6:	4a76      	ldr	r2, [pc, #472]	; (802dd90 <DMA_SetConfig+0x234>)
 802dbb8:	4293      	cmp	r3, r2
 802dbba:	d054      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dbbc:	68fb      	ldr	r3, [r7, #12]
 802dbbe:	681b      	ldr	r3, [r3, #0]
 802dbc0:	4a74      	ldr	r2, [pc, #464]	; (802dd94 <DMA_SetConfig+0x238>)
 802dbc2:	4293      	cmp	r3, r2
 802dbc4:	d04f      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dbc6:	68fb      	ldr	r3, [r7, #12]
 802dbc8:	681b      	ldr	r3, [r3, #0]
 802dbca:	4a73      	ldr	r2, [pc, #460]	; (802dd98 <DMA_SetConfig+0x23c>)
 802dbcc:	4293      	cmp	r3, r2
 802dbce:	d04a      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dbd0:	68fb      	ldr	r3, [r7, #12]
 802dbd2:	681b      	ldr	r3, [r3, #0]
 802dbd4:	4a71      	ldr	r2, [pc, #452]	; (802dd9c <DMA_SetConfig+0x240>)
 802dbd6:	4293      	cmp	r3, r2
 802dbd8:	d045      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dbda:	68fb      	ldr	r3, [r7, #12]
 802dbdc:	681b      	ldr	r3, [r3, #0]
 802dbde:	4a70      	ldr	r2, [pc, #448]	; (802dda0 <DMA_SetConfig+0x244>)
 802dbe0:	4293      	cmp	r3, r2
 802dbe2:	d040      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dbe4:	68fb      	ldr	r3, [r7, #12]
 802dbe6:	681b      	ldr	r3, [r3, #0]
 802dbe8:	4a6e      	ldr	r2, [pc, #440]	; (802dda4 <DMA_SetConfig+0x248>)
 802dbea:	4293      	cmp	r3, r2
 802dbec:	d03b      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dbee:	68fb      	ldr	r3, [r7, #12]
 802dbf0:	681b      	ldr	r3, [r3, #0]
 802dbf2:	4a6d      	ldr	r2, [pc, #436]	; (802dda8 <DMA_SetConfig+0x24c>)
 802dbf4:	4293      	cmp	r3, r2
 802dbf6:	d036      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dbf8:	68fb      	ldr	r3, [r7, #12]
 802dbfa:	681b      	ldr	r3, [r3, #0]
 802dbfc:	4a6b      	ldr	r2, [pc, #428]	; (802ddac <DMA_SetConfig+0x250>)
 802dbfe:	4293      	cmp	r3, r2
 802dc00:	d031      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc02:	68fb      	ldr	r3, [r7, #12]
 802dc04:	681b      	ldr	r3, [r3, #0]
 802dc06:	4a6a      	ldr	r2, [pc, #424]	; (802ddb0 <DMA_SetConfig+0x254>)
 802dc08:	4293      	cmp	r3, r2
 802dc0a:	d02c      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc0c:	68fb      	ldr	r3, [r7, #12]
 802dc0e:	681b      	ldr	r3, [r3, #0]
 802dc10:	4a68      	ldr	r2, [pc, #416]	; (802ddb4 <DMA_SetConfig+0x258>)
 802dc12:	4293      	cmp	r3, r2
 802dc14:	d027      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc16:	68fb      	ldr	r3, [r7, #12]
 802dc18:	681b      	ldr	r3, [r3, #0]
 802dc1a:	4a67      	ldr	r2, [pc, #412]	; (802ddb8 <DMA_SetConfig+0x25c>)
 802dc1c:	4293      	cmp	r3, r2
 802dc1e:	d022      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc20:	68fb      	ldr	r3, [r7, #12]
 802dc22:	681b      	ldr	r3, [r3, #0]
 802dc24:	4a65      	ldr	r2, [pc, #404]	; (802ddbc <DMA_SetConfig+0x260>)
 802dc26:	4293      	cmp	r3, r2
 802dc28:	d01d      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc2a:	68fb      	ldr	r3, [r7, #12]
 802dc2c:	681b      	ldr	r3, [r3, #0]
 802dc2e:	4a64      	ldr	r2, [pc, #400]	; (802ddc0 <DMA_SetConfig+0x264>)
 802dc30:	4293      	cmp	r3, r2
 802dc32:	d018      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc34:	68fb      	ldr	r3, [r7, #12]
 802dc36:	681b      	ldr	r3, [r3, #0]
 802dc38:	4a62      	ldr	r2, [pc, #392]	; (802ddc4 <DMA_SetConfig+0x268>)
 802dc3a:	4293      	cmp	r3, r2
 802dc3c:	d013      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc3e:	68fb      	ldr	r3, [r7, #12]
 802dc40:	681b      	ldr	r3, [r3, #0]
 802dc42:	4a61      	ldr	r2, [pc, #388]	; (802ddc8 <DMA_SetConfig+0x26c>)
 802dc44:	4293      	cmp	r3, r2
 802dc46:	d00e      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc48:	68fb      	ldr	r3, [r7, #12]
 802dc4a:	681b      	ldr	r3, [r3, #0]
 802dc4c:	4a5f      	ldr	r2, [pc, #380]	; (802ddcc <DMA_SetConfig+0x270>)
 802dc4e:	4293      	cmp	r3, r2
 802dc50:	d009      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc52:	68fb      	ldr	r3, [r7, #12]
 802dc54:	681b      	ldr	r3, [r3, #0]
 802dc56:	4a5e      	ldr	r2, [pc, #376]	; (802ddd0 <DMA_SetConfig+0x274>)
 802dc58:	4293      	cmp	r3, r2
 802dc5a:	d004      	beq.n	802dc66 <DMA_SetConfig+0x10a>
 802dc5c:	68fb      	ldr	r3, [r7, #12]
 802dc5e:	681b      	ldr	r3, [r3, #0]
 802dc60:	4a5c      	ldr	r2, [pc, #368]	; (802ddd4 <DMA_SetConfig+0x278>)
 802dc62:	4293      	cmp	r3, r2
 802dc64:	d101      	bne.n	802dc6a <DMA_SetConfig+0x10e>
 802dc66:	2301      	movs	r3, #1
 802dc68:	e000      	b.n	802dc6c <DMA_SetConfig+0x110>
 802dc6a:	2300      	movs	r3, #0
 802dc6c:	2b00      	cmp	r3, #0
 802dc6e:	d00d      	beq.n	802dc8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 802dc70:	68fb      	ldr	r3, [r7, #12]
 802dc72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802dc74:	68fa      	ldr	r2, [r7, #12]
 802dc76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802dc78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 802dc7a:	68fb      	ldr	r3, [r7, #12]
 802dc7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802dc7e:	2b00      	cmp	r3, #0
 802dc80:	d004      	beq.n	802dc8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 802dc82:	68fb      	ldr	r3, [r7, #12]
 802dc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dc86:	68fa      	ldr	r2, [r7, #12]
 802dc88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 802dc8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802dc8c:	68fb      	ldr	r3, [r7, #12]
 802dc8e:	681b      	ldr	r3, [r3, #0]
 802dc90:	4a39      	ldr	r2, [pc, #228]	; (802dd78 <DMA_SetConfig+0x21c>)
 802dc92:	4293      	cmp	r3, r2
 802dc94:	d04a      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dc96:	68fb      	ldr	r3, [r7, #12]
 802dc98:	681b      	ldr	r3, [r3, #0]
 802dc9a:	4a38      	ldr	r2, [pc, #224]	; (802dd7c <DMA_SetConfig+0x220>)
 802dc9c:	4293      	cmp	r3, r2
 802dc9e:	d045      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dca0:	68fb      	ldr	r3, [r7, #12]
 802dca2:	681b      	ldr	r3, [r3, #0]
 802dca4:	4a36      	ldr	r2, [pc, #216]	; (802dd80 <DMA_SetConfig+0x224>)
 802dca6:	4293      	cmp	r3, r2
 802dca8:	d040      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dcaa:	68fb      	ldr	r3, [r7, #12]
 802dcac:	681b      	ldr	r3, [r3, #0]
 802dcae:	4a35      	ldr	r2, [pc, #212]	; (802dd84 <DMA_SetConfig+0x228>)
 802dcb0:	4293      	cmp	r3, r2
 802dcb2:	d03b      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dcb4:	68fb      	ldr	r3, [r7, #12]
 802dcb6:	681b      	ldr	r3, [r3, #0]
 802dcb8:	4a33      	ldr	r2, [pc, #204]	; (802dd88 <DMA_SetConfig+0x22c>)
 802dcba:	4293      	cmp	r3, r2
 802dcbc:	d036      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dcbe:	68fb      	ldr	r3, [r7, #12]
 802dcc0:	681b      	ldr	r3, [r3, #0]
 802dcc2:	4a32      	ldr	r2, [pc, #200]	; (802dd8c <DMA_SetConfig+0x230>)
 802dcc4:	4293      	cmp	r3, r2
 802dcc6:	d031      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dcc8:	68fb      	ldr	r3, [r7, #12]
 802dcca:	681b      	ldr	r3, [r3, #0]
 802dccc:	4a30      	ldr	r2, [pc, #192]	; (802dd90 <DMA_SetConfig+0x234>)
 802dcce:	4293      	cmp	r3, r2
 802dcd0:	d02c      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dcd2:	68fb      	ldr	r3, [r7, #12]
 802dcd4:	681b      	ldr	r3, [r3, #0]
 802dcd6:	4a2f      	ldr	r2, [pc, #188]	; (802dd94 <DMA_SetConfig+0x238>)
 802dcd8:	4293      	cmp	r3, r2
 802dcda:	d027      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dcdc:	68fb      	ldr	r3, [r7, #12]
 802dcde:	681b      	ldr	r3, [r3, #0]
 802dce0:	4a2d      	ldr	r2, [pc, #180]	; (802dd98 <DMA_SetConfig+0x23c>)
 802dce2:	4293      	cmp	r3, r2
 802dce4:	d022      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dce6:	68fb      	ldr	r3, [r7, #12]
 802dce8:	681b      	ldr	r3, [r3, #0]
 802dcea:	4a2c      	ldr	r2, [pc, #176]	; (802dd9c <DMA_SetConfig+0x240>)
 802dcec:	4293      	cmp	r3, r2
 802dcee:	d01d      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dcf0:	68fb      	ldr	r3, [r7, #12]
 802dcf2:	681b      	ldr	r3, [r3, #0]
 802dcf4:	4a2a      	ldr	r2, [pc, #168]	; (802dda0 <DMA_SetConfig+0x244>)
 802dcf6:	4293      	cmp	r3, r2
 802dcf8:	d018      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dcfa:	68fb      	ldr	r3, [r7, #12]
 802dcfc:	681b      	ldr	r3, [r3, #0]
 802dcfe:	4a29      	ldr	r2, [pc, #164]	; (802dda4 <DMA_SetConfig+0x248>)
 802dd00:	4293      	cmp	r3, r2
 802dd02:	d013      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dd04:	68fb      	ldr	r3, [r7, #12]
 802dd06:	681b      	ldr	r3, [r3, #0]
 802dd08:	4a27      	ldr	r2, [pc, #156]	; (802dda8 <DMA_SetConfig+0x24c>)
 802dd0a:	4293      	cmp	r3, r2
 802dd0c:	d00e      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dd0e:	68fb      	ldr	r3, [r7, #12]
 802dd10:	681b      	ldr	r3, [r3, #0]
 802dd12:	4a26      	ldr	r2, [pc, #152]	; (802ddac <DMA_SetConfig+0x250>)
 802dd14:	4293      	cmp	r3, r2
 802dd16:	d009      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dd18:	68fb      	ldr	r3, [r7, #12]
 802dd1a:	681b      	ldr	r3, [r3, #0]
 802dd1c:	4a24      	ldr	r2, [pc, #144]	; (802ddb0 <DMA_SetConfig+0x254>)
 802dd1e:	4293      	cmp	r3, r2
 802dd20:	d004      	beq.n	802dd2c <DMA_SetConfig+0x1d0>
 802dd22:	68fb      	ldr	r3, [r7, #12]
 802dd24:	681b      	ldr	r3, [r3, #0]
 802dd26:	4a23      	ldr	r2, [pc, #140]	; (802ddb4 <DMA_SetConfig+0x258>)
 802dd28:	4293      	cmp	r3, r2
 802dd2a:	d101      	bne.n	802dd30 <DMA_SetConfig+0x1d4>
 802dd2c:	2301      	movs	r3, #1
 802dd2e:	e000      	b.n	802dd32 <DMA_SetConfig+0x1d6>
 802dd30:	2300      	movs	r3, #0
 802dd32:	2b00      	cmp	r3, #0
 802dd34:	d059      	beq.n	802ddea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 802dd36:	68fb      	ldr	r3, [r7, #12]
 802dd38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802dd3a:	f003 031f 	and.w	r3, r3, #31
 802dd3e:	223f      	movs	r2, #63	; 0x3f
 802dd40:	409a      	lsls	r2, r3
 802dd42:	697b      	ldr	r3, [r7, #20]
 802dd44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802dd46:	68fb      	ldr	r3, [r7, #12]
 802dd48:	681b      	ldr	r3, [r3, #0]
 802dd4a:	681a      	ldr	r2, [r3, #0]
 802dd4c:	68fb      	ldr	r3, [r7, #12]
 802dd4e:	681b      	ldr	r3, [r3, #0]
 802dd50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802dd54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 802dd56:	68fb      	ldr	r3, [r7, #12]
 802dd58:	681b      	ldr	r3, [r3, #0]
 802dd5a:	683a      	ldr	r2, [r7, #0]
 802dd5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802dd5e:	68fb      	ldr	r3, [r7, #12]
 802dd60:	689b      	ldr	r3, [r3, #8]
 802dd62:	2b40      	cmp	r3, #64	; 0x40
 802dd64:	d138      	bne.n	802ddd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 802dd66:	68fb      	ldr	r3, [r7, #12]
 802dd68:	681b      	ldr	r3, [r3, #0]
 802dd6a:	687a      	ldr	r2, [r7, #4]
 802dd6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 802dd6e:	68fb      	ldr	r3, [r7, #12]
 802dd70:	681b      	ldr	r3, [r3, #0]
 802dd72:	68ba      	ldr	r2, [r7, #8]
 802dd74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 802dd76:	e086      	b.n	802de86 <DMA_SetConfig+0x32a>
 802dd78:	40020010 	.word	0x40020010
 802dd7c:	40020028 	.word	0x40020028
 802dd80:	40020040 	.word	0x40020040
 802dd84:	40020058 	.word	0x40020058
 802dd88:	40020070 	.word	0x40020070
 802dd8c:	40020088 	.word	0x40020088
 802dd90:	400200a0 	.word	0x400200a0
 802dd94:	400200b8 	.word	0x400200b8
 802dd98:	40020410 	.word	0x40020410
 802dd9c:	40020428 	.word	0x40020428
 802dda0:	40020440 	.word	0x40020440
 802dda4:	40020458 	.word	0x40020458
 802dda8:	40020470 	.word	0x40020470
 802ddac:	40020488 	.word	0x40020488
 802ddb0:	400204a0 	.word	0x400204a0
 802ddb4:	400204b8 	.word	0x400204b8
 802ddb8:	58025408 	.word	0x58025408
 802ddbc:	5802541c 	.word	0x5802541c
 802ddc0:	58025430 	.word	0x58025430
 802ddc4:	58025444 	.word	0x58025444
 802ddc8:	58025458 	.word	0x58025458
 802ddcc:	5802546c 	.word	0x5802546c
 802ddd0:	58025480 	.word	0x58025480
 802ddd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 802ddd8:	68fb      	ldr	r3, [r7, #12]
 802ddda:	681b      	ldr	r3, [r3, #0]
 802dddc:	68ba      	ldr	r2, [r7, #8]
 802ddde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 802dde0:	68fb      	ldr	r3, [r7, #12]
 802dde2:	681b      	ldr	r3, [r3, #0]
 802dde4:	687a      	ldr	r2, [r7, #4]
 802dde6:	60da      	str	r2, [r3, #12]
}
 802dde8:	e04d      	b.n	802de86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 802ddea:	68fb      	ldr	r3, [r7, #12]
 802ddec:	681b      	ldr	r3, [r3, #0]
 802ddee:	4a29      	ldr	r2, [pc, #164]	; (802de94 <DMA_SetConfig+0x338>)
 802ddf0:	4293      	cmp	r3, r2
 802ddf2:	d022      	beq.n	802de3a <DMA_SetConfig+0x2de>
 802ddf4:	68fb      	ldr	r3, [r7, #12]
 802ddf6:	681b      	ldr	r3, [r3, #0]
 802ddf8:	4a27      	ldr	r2, [pc, #156]	; (802de98 <DMA_SetConfig+0x33c>)
 802ddfa:	4293      	cmp	r3, r2
 802ddfc:	d01d      	beq.n	802de3a <DMA_SetConfig+0x2de>
 802ddfe:	68fb      	ldr	r3, [r7, #12]
 802de00:	681b      	ldr	r3, [r3, #0]
 802de02:	4a26      	ldr	r2, [pc, #152]	; (802de9c <DMA_SetConfig+0x340>)
 802de04:	4293      	cmp	r3, r2
 802de06:	d018      	beq.n	802de3a <DMA_SetConfig+0x2de>
 802de08:	68fb      	ldr	r3, [r7, #12]
 802de0a:	681b      	ldr	r3, [r3, #0]
 802de0c:	4a24      	ldr	r2, [pc, #144]	; (802dea0 <DMA_SetConfig+0x344>)
 802de0e:	4293      	cmp	r3, r2
 802de10:	d013      	beq.n	802de3a <DMA_SetConfig+0x2de>
 802de12:	68fb      	ldr	r3, [r7, #12]
 802de14:	681b      	ldr	r3, [r3, #0]
 802de16:	4a23      	ldr	r2, [pc, #140]	; (802dea4 <DMA_SetConfig+0x348>)
 802de18:	4293      	cmp	r3, r2
 802de1a:	d00e      	beq.n	802de3a <DMA_SetConfig+0x2de>
 802de1c:	68fb      	ldr	r3, [r7, #12]
 802de1e:	681b      	ldr	r3, [r3, #0]
 802de20:	4a21      	ldr	r2, [pc, #132]	; (802dea8 <DMA_SetConfig+0x34c>)
 802de22:	4293      	cmp	r3, r2
 802de24:	d009      	beq.n	802de3a <DMA_SetConfig+0x2de>
 802de26:	68fb      	ldr	r3, [r7, #12]
 802de28:	681b      	ldr	r3, [r3, #0]
 802de2a:	4a20      	ldr	r2, [pc, #128]	; (802deac <DMA_SetConfig+0x350>)
 802de2c:	4293      	cmp	r3, r2
 802de2e:	d004      	beq.n	802de3a <DMA_SetConfig+0x2de>
 802de30:	68fb      	ldr	r3, [r7, #12]
 802de32:	681b      	ldr	r3, [r3, #0]
 802de34:	4a1e      	ldr	r2, [pc, #120]	; (802deb0 <DMA_SetConfig+0x354>)
 802de36:	4293      	cmp	r3, r2
 802de38:	d101      	bne.n	802de3e <DMA_SetConfig+0x2e2>
 802de3a:	2301      	movs	r3, #1
 802de3c:	e000      	b.n	802de40 <DMA_SetConfig+0x2e4>
 802de3e:	2300      	movs	r3, #0
 802de40:	2b00      	cmp	r3, #0
 802de42:	d020      	beq.n	802de86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 802de44:	68fb      	ldr	r3, [r7, #12]
 802de46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802de48:	f003 031f 	and.w	r3, r3, #31
 802de4c:	2201      	movs	r2, #1
 802de4e:	409a      	lsls	r2, r3
 802de50:	693b      	ldr	r3, [r7, #16]
 802de52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 802de54:	68fb      	ldr	r3, [r7, #12]
 802de56:	681b      	ldr	r3, [r3, #0]
 802de58:	683a      	ldr	r2, [r7, #0]
 802de5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802de5c:	68fb      	ldr	r3, [r7, #12]
 802de5e:	689b      	ldr	r3, [r3, #8]
 802de60:	2b40      	cmp	r3, #64	; 0x40
 802de62:	d108      	bne.n	802de76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 802de64:	68fb      	ldr	r3, [r7, #12]
 802de66:	681b      	ldr	r3, [r3, #0]
 802de68:	687a      	ldr	r2, [r7, #4]
 802de6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 802de6c:	68fb      	ldr	r3, [r7, #12]
 802de6e:	681b      	ldr	r3, [r3, #0]
 802de70:	68ba      	ldr	r2, [r7, #8]
 802de72:	60da      	str	r2, [r3, #12]
}
 802de74:	e007      	b.n	802de86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 802de76:	68fb      	ldr	r3, [r7, #12]
 802de78:	681b      	ldr	r3, [r3, #0]
 802de7a:	68ba      	ldr	r2, [r7, #8]
 802de7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 802de7e:	68fb      	ldr	r3, [r7, #12]
 802de80:	681b      	ldr	r3, [r3, #0]
 802de82:	687a      	ldr	r2, [r7, #4]
 802de84:	60da      	str	r2, [r3, #12]
}
 802de86:	bf00      	nop
 802de88:	371c      	adds	r7, #28
 802de8a:	46bd      	mov	sp, r7
 802de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802de90:	4770      	bx	lr
 802de92:	bf00      	nop
 802de94:	58025408 	.word	0x58025408
 802de98:	5802541c 	.word	0x5802541c
 802de9c:	58025430 	.word	0x58025430
 802dea0:	58025444 	.word	0x58025444
 802dea4:	58025458 	.word	0x58025458
 802dea8:	5802546c 	.word	0x5802546c
 802deac:	58025480 	.word	0x58025480
 802deb0:	58025494 	.word	0x58025494

0802deb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802deb4:	b480      	push	{r7}
 802deb6:	b085      	sub	sp, #20
 802deb8:	af00      	add	r7, sp, #0
 802deba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 802debc:	687b      	ldr	r3, [r7, #4]
 802debe:	681b      	ldr	r3, [r3, #0]
 802dec0:	4a42      	ldr	r2, [pc, #264]	; (802dfcc <DMA_CalcBaseAndBitshift+0x118>)
 802dec2:	4293      	cmp	r3, r2
 802dec4:	d04a      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802dec6:	687b      	ldr	r3, [r7, #4]
 802dec8:	681b      	ldr	r3, [r3, #0]
 802deca:	4a41      	ldr	r2, [pc, #260]	; (802dfd0 <DMA_CalcBaseAndBitshift+0x11c>)
 802decc:	4293      	cmp	r3, r2
 802dece:	d045      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802ded0:	687b      	ldr	r3, [r7, #4]
 802ded2:	681b      	ldr	r3, [r3, #0]
 802ded4:	4a3f      	ldr	r2, [pc, #252]	; (802dfd4 <DMA_CalcBaseAndBitshift+0x120>)
 802ded6:	4293      	cmp	r3, r2
 802ded8:	d040      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802deda:	687b      	ldr	r3, [r7, #4]
 802dedc:	681b      	ldr	r3, [r3, #0]
 802dede:	4a3e      	ldr	r2, [pc, #248]	; (802dfd8 <DMA_CalcBaseAndBitshift+0x124>)
 802dee0:	4293      	cmp	r3, r2
 802dee2:	d03b      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802dee4:	687b      	ldr	r3, [r7, #4]
 802dee6:	681b      	ldr	r3, [r3, #0]
 802dee8:	4a3c      	ldr	r2, [pc, #240]	; (802dfdc <DMA_CalcBaseAndBitshift+0x128>)
 802deea:	4293      	cmp	r3, r2
 802deec:	d036      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802deee:	687b      	ldr	r3, [r7, #4]
 802def0:	681b      	ldr	r3, [r3, #0]
 802def2:	4a3b      	ldr	r2, [pc, #236]	; (802dfe0 <DMA_CalcBaseAndBitshift+0x12c>)
 802def4:	4293      	cmp	r3, r2
 802def6:	d031      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802def8:	687b      	ldr	r3, [r7, #4]
 802defa:	681b      	ldr	r3, [r3, #0]
 802defc:	4a39      	ldr	r2, [pc, #228]	; (802dfe4 <DMA_CalcBaseAndBitshift+0x130>)
 802defe:	4293      	cmp	r3, r2
 802df00:	d02c      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df02:	687b      	ldr	r3, [r7, #4]
 802df04:	681b      	ldr	r3, [r3, #0]
 802df06:	4a38      	ldr	r2, [pc, #224]	; (802dfe8 <DMA_CalcBaseAndBitshift+0x134>)
 802df08:	4293      	cmp	r3, r2
 802df0a:	d027      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df0c:	687b      	ldr	r3, [r7, #4]
 802df0e:	681b      	ldr	r3, [r3, #0]
 802df10:	4a36      	ldr	r2, [pc, #216]	; (802dfec <DMA_CalcBaseAndBitshift+0x138>)
 802df12:	4293      	cmp	r3, r2
 802df14:	d022      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df16:	687b      	ldr	r3, [r7, #4]
 802df18:	681b      	ldr	r3, [r3, #0]
 802df1a:	4a35      	ldr	r2, [pc, #212]	; (802dff0 <DMA_CalcBaseAndBitshift+0x13c>)
 802df1c:	4293      	cmp	r3, r2
 802df1e:	d01d      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df20:	687b      	ldr	r3, [r7, #4]
 802df22:	681b      	ldr	r3, [r3, #0]
 802df24:	4a33      	ldr	r2, [pc, #204]	; (802dff4 <DMA_CalcBaseAndBitshift+0x140>)
 802df26:	4293      	cmp	r3, r2
 802df28:	d018      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df2a:	687b      	ldr	r3, [r7, #4]
 802df2c:	681b      	ldr	r3, [r3, #0]
 802df2e:	4a32      	ldr	r2, [pc, #200]	; (802dff8 <DMA_CalcBaseAndBitshift+0x144>)
 802df30:	4293      	cmp	r3, r2
 802df32:	d013      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df34:	687b      	ldr	r3, [r7, #4]
 802df36:	681b      	ldr	r3, [r3, #0]
 802df38:	4a30      	ldr	r2, [pc, #192]	; (802dffc <DMA_CalcBaseAndBitshift+0x148>)
 802df3a:	4293      	cmp	r3, r2
 802df3c:	d00e      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df3e:	687b      	ldr	r3, [r7, #4]
 802df40:	681b      	ldr	r3, [r3, #0]
 802df42:	4a2f      	ldr	r2, [pc, #188]	; (802e000 <DMA_CalcBaseAndBitshift+0x14c>)
 802df44:	4293      	cmp	r3, r2
 802df46:	d009      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df48:	687b      	ldr	r3, [r7, #4]
 802df4a:	681b      	ldr	r3, [r3, #0]
 802df4c:	4a2d      	ldr	r2, [pc, #180]	; (802e004 <DMA_CalcBaseAndBitshift+0x150>)
 802df4e:	4293      	cmp	r3, r2
 802df50:	d004      	beq.n	802df5c <DMA_CalcBaseAndBitshift+0xa8>
 802df52:	687b      	ldr	r3, [r7, #4]
 802df54:	681b      	ldr	r3, [r3, #0]
 802df56:	4a2c      	ldr	r2, [pc, #176]	; (802e008 <DMA_CalcBaseAndBitshift+0x154>)
 802df58:	4293      	cmp	r3, r2
 802df5a:	d101      	bne.n	802df60 <DMA_CalcBaseAndBitshift+0xac>
 802df5c:	2301      	movs	r3, #1
 802df5e:	e000      	b.n	802df62 <DMA_CalcBaseAndBitshift+0xae>
 802df60:	2300      	movs	r3, #0
 802df62:	2b00      	cmp	r3, #0
 802df64:	d024      	beq.n	802dfb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802df66:	687b      	ldr	r3, [r7, #4]
 802df68:	681b      	ldr	r3, [r3, #0]
 802df6a:	b2db      	uxtb	r3, r3
 802df6c:	3b10      	subs	r3, #16
 802df6e:	4a27      	ldr	r2, [pc, #156]	; (802e00c <DMA_CalcBaseAndBitshift+0x158>)
 802df70:	fba2 2303 	umull	r2, r3, r2, r3
 802df74:	091b      	lsrs	r3, r3, #4
 802df76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 802df78:	68fb      	ldr	r3, [r7, #12]
 802df7a:	f003 0307 	and.w	r3, r3, #7
 802df7e:	4a24      	ldr	r2, [pc, #144]	; (802e010 <DMA_CalcBaseAndBitshift+0x15c>)
 802df80:	5cd3      	ldrb	r3, [r2, r3]
 802df82:	461a      	mov	r2, r3
 802df84:	687b      	ldr	r3, [r7, #4]
 802df86:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 802df88:	68fb      	ldr	r3, [r7, #12]
 802df8a:	2b03      	cmp	r3, #3
 802df8c:	d908      	bls.n	802dfa0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 802df8e:	687b      	ldr	r3, [r7, #4]
 802df90:	681b      	ldr	r3, [r3, #0]
 802df92:	461a      	mov	r2, r3
 802df94:	4b1f      	ldr	r3, [pc, #124]	; (802e014 <DMA_CalcBaseAndBitshift+0x160>)
 802df96:	4013      	ands	r3, r2
 802df98:	1d1a      	adds	r2, r3, #4
 802df9a:	687b      	ldr	r3, [r7, #4]
 802df9c:	659a      	str	r2, [r3, #88]	; 0x58
 802df9e:	e00d      	b.n	802dfbc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 802dfa0:	687b      	ldr	r3, [r7, #4]
 802dfa2:	681b      	ldr	r3, [r3, #0]
 802dfa4:	461a      	mov	r2, r3
 802dfa6:	4b1b      	ldr	r3, [pc, #108]	; (802e014 <DMA_CalcBaseAndBitshift+0x160>)
 802dfa8:	4013      	ands	r3, r2
 802dfaa:	687a      	ldr	r2, [r7, #4]
 802dfac:	6593      	str	r3, [r2, #88]	; 0x58
 802dfae:	e005      	b.n	802dfbc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 802dfb0:	687b      	ldr	r3, [r7, #4]
 802dfb2:	681b      	ldr	r3, [r3, #0]
 802dfb4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802dfb8:	687b      	ldr	r3, [r7, #4]
 802dfba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 802dfbc:	687b      	ldr	r3, [r7, #4]
 802dfbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802dfc0:	4618      	mov	r0, r3
 802dfc2:	3714      	adds	r7, #20
 802dfc4:	46bd      	mov	sp, r7
 802dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfca:	4770      	bx	lr
 802dfcc:	40020010 	.word	0x40020010
 802dfd0:	40020028 	.word	0x40020028
 802dfd4:	40020040 	.word	0x40020040
 802dfd8:	40020058 	.word	0x40020058
 802dfdc:	40020070 	.word	0x40020070
 802dfe0:	40020088 	.word	0x40020088
 802dfe4:	400200a0 	.word	0x400200a0
 802dfe8:	400200b8 	.word	0x400200b8
 802dfec:	40020410 	.word	0x40020410
 802dff0:	40020428 	.word	0x40020428
 802dff4:	40020440 	.word	0x40020440
 802dff8:	40020458 	.word	0x40020458
 802dffc:	40020470 	.word	0x40020470
 802e000:	40020488 	.word	0x40020488
 802e004:	400204a0 	.word	0x400204a0
 802e008:	400204b8 	.word	0x400204b8
 802e00c:	aaaaaaab 	.word	0xaaaaaaab
 802e010:	08058528 	.word	0x08058528
 802e014:	fffffc00 	.word	0xfffffc00

0802e018 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802e018:	b480      	push	{r7}
 802e01a:	b085      	sub	sp, #20
 802e01c:	af00      	add	r7, sp, #0
 802e01e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802e020:	2300      	movs	r3, #0
 802e022:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802e024:	687b      	ldr	r3, [r7, #4]
 802e026:	699b      	ldr	r3, [r3, #24]
 802e028:	2b00      	cmp	r3, #0
 802e02a:	d120      	bne.n	802e06e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 802e02c:	687b      	ldr	r3, [r7, #4]
 802e02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e030:	2b03      	cmp	r3, #3
 802e032:	d858      	bhi.n	802e0e6 <DMA_CheckFifoParam+0xce>
 802e034:	a201      	add	r2, pc, #4	; (adr r2, 802e03c <DMA_CheckFifoParam+0x24>)
 802e036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e03a:	bf00      	nop
 802e03c:	0802e04d 	.word	0x0802e04d
 802e040:	0802e05f 	.word	0x0802e05f
 802e044:	0802e04d 	.word	0x0802e04d
 802e048:	0802e0e7 	.word	0x0802e0e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e04c:	687b      	ldr	r3, [r7, #4]
 802e04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e054:	2b00      	cmp	r3, #0
 802e056:	d048      	beq.n	802e0ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 802e058:	2301      	movs	r3, #1
 802e05a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e05c:	e045      	b.n	802e0ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802e05e:	687b      	ldr	r3, [r7, #4]
 802e060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e062:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802e066:	d142      	bne.n	802e0ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 802e068:	2301      	movs	r3, #1
 802e06a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e06c:	e03f      	b.n	802e0ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802e06e:	687b      	ldr	r3, [r7, #4]
 802e070:	699b      	ldr	r3, [r3, #24]
 802e072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802e076:	d123      	bne.n	802e0c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 802e078:	687b      	ldr	r3, [r7, #4]
 802e07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e07c:	2b03      	cmp	r3, #3
 802e07e:	d838      	bhi.n	802e0f2 <DMA_CheckFifoParam+0xda>
 802e080:	a201      	add	r2, pc, #4	; (adr r2, 802e088 <DMA_CheckFifoParam+0x70>)
 802e082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802e086:	bf00      	nop
 802e088:	0802e099 	.word	0x0802e099
 802e08c:	0802e09f 	.word	0x0802e09f
 802e090:	0802e099 	.word	0x0802e099
 802e094:	0802e0b1 	.word	0x0802e0b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 802e098:	2301      	movs	r3, #1
 802e09a:	73fb      	strb	r3, [r7, #15]
        break;
 802e09c:	e030      	b.n	802e100 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e09e:	687b      	ldr	r3, [r7, #4]
 802e0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e0a6:	2b00      	cmp	r3, #0
 802e0a8:	d025      	beq.n	802e0f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 802e0aa:	2301      	movs	r3, #1
 802e0ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e0ae:	e022      	b.n	802e0f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802e0b0:	687b      	ldr	r3, [r7, #4]
 802e0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802e0b8:	d11f      	bne.n	802e0fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 802e0ba:	2301      	movs	r3, #1
 802e0bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 802e0be:	e01c      	b.n	802e0fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 802e0c0:	687b      	ldr	r3, [r7, #4]
 802e0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802e0c4:	2b02      	cmp	r3, #2
 802e0c6:	d902      	bls.n	802e0ce <DMA_CheckFifoParam+0xb6>
 802e0c8:	2b03      	cmp	r3, #3
 802e0ca:	d003      	beq.n	802e0d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 802e0cc:	e018      	b.n	802e100 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 802e0ce:	2301      	movs	r3, #1
 802e0d0:	73fb      	strb	r3, [r7, #15]
        break;
 802e0d2:	e015      	b.n	802e100 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802e0d4:	687b      	ldr	r3, [r7, #4]
 802e0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e0d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802e0dc:	2b00      	cmp	r3, #0
 802e0de:	d00e      	beq.n	802e0fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 802e0e0:	2301      	movs	r3, #1
 802e0e2:	73fb      	strb	r3, [r7, #15]
    break;
 802e0e4:	e00b      	b.n	802e0fe <DMA_CheckFifoParam+0xe6>
        break;
 802e0e6:	bf00      	nop
 802e0e8:	e00a      	b.n	802e100 <DMA_CheckFifoParam+0xe8>
        break;
 802e0ea:	bf00      	nop
 802e0ec:	e008      	b.n	802e100 <DMA_CheckFifoParam+0xe8>
        break;
 802e0ee:	bf00      	nop
 802e0f0:	e006      	b.n	802e100 <DMA_CheckFifoParam+0xe8>
        break;
 802e0f2:	bf00      	nop
 802e0f4:	e004      	b.n	802e100 <DMA_CheckFifoParam+0xe8>
        break;
 802e0f6:	bf00      	nop
 802e0f8:	e002      	b.n	802e100 <DMA_CheckFifoParam+0xe8>
        break;
 802e0fa:	bf00      	nop
 802e0fc:	e000      	b.n	802e100 <DMA_CheckFifoParam+0xe8>
    break;
 802e0fe:	bf00      	nop
    }
  }

  return status;
 802e100:	7bfb      	ldrb	r3, [r7, #15]
}
 802e102:	4618      	mov	r0, r3
 802e104:	3714      	adds	r7, #20
 802e106:	46bd      	mov	sp, r7
 802e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e10c:	4770      	bx	lr
 802e10e:	bf00      	nop

0802e110 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e110:	b480      	push	{r7}
 802e112:	b085      	sub	sp, #20
 802e114:	af00      	add	r7, sp, #0
 802e116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 802e118:	687b      	ldr	r3, [r7, #4]
 802e11a:	681b      	ldr	r3, [r3, #0]
 802e11c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e11e:	687b      	ldr	r3, [r7, #4]
 802e120:	681b      	ldr	r3, [r3, #0]
 802e122:	4a38      	ldr	r2, [pc, #224]	; (802e204 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 802e124:	4293      	cmp	r3, r2
 802e126:	d022      	beq.n	802e16e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e128:	687b      	ldr	r3, [r7, #4]
 802e12a:	681b      	ldr	r3, [r3, #0]
 802e12c:	4a36      	ldr	r2, [pc, #216]	; (802e208 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 802e12e:	4293      	cmp	r3, r2
 802e130:	d01d      	beq.n	802e16e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e132:	687b      	ldr	r3, [r7, #4]
 802e134:	681b      	ldr	r3, [r3, #0]
 802e136:	4a35      	ldr	r2, [pc, #212]	; (802e20c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 802e138:	4293      	cmp	r3, r2
 802e13a:	d018      	beq.n	802e16e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e13c:	687b      	ldr	r3, [r7, #4]
 802e13e:	681b      	ldr	r3, [r3, #0]
 802e140:	4a33      	ldr	r2, [pc, #204]	; (802e210 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 802e142:	4293      	cmp	r3, r2
 802e144:	d013      	beq.n	802e16e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e146:	687b      	ldr	r3, [r7, #4]
 802e148:	681b      	ldr	r3, [r3, #0]
 802e14a:	4a32      	ldr	r2, [pc, #200]	; (802e214 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 802e14c:	4293      	cmp	r3, r2
 802e14e:	d00e      	beq.n	802e16e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e150:	687b      	ldr	r3, [r7, #4]
 802e152:	681b      	ldr	r3, [r3, #0]
 802e154:	4a30      	ldr	r2, [pc, #192]	; (802e218 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 802e156:	4293      	cmp	r3, r2
 802e158:	d009      	beq.n	802e16e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e15a:	687b      	ldr	r3, [r7, #4]
 802e15c:	681b      	ldr	r3, [r3, #0]
 802e15e:	4a2f      	ldr	r2, [pc, #188]	; (802e21c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 802e160:	4293      	cmp	r3, r2
 802e162:	d004      	beq.n	802e16e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 802e164:	687b      	ldr	r3, [r7, #4]
 802e166:	681b      	ldr	r3, [r3, #0]
 802e168:	4a2d      	ldr	r2, [pc, #180]	; (802e220 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 802e16a:	4293      	cmp	r3, r2
 802e16c:	d101      	bne.n	802e172 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 802e16e:	2301      	movs	r3, #1
 802e170:	e000      	b.n	802e174 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 802e172:	2300      	movs	r3, #0
 802e174:	2b00      	cmp	r3, #0
 802e176:	d01a      	beq.n	802e1ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 802e178:	687b      	ldr	r3, [r7, #4]
 802e17a:	681b      	ldr	r3, [r3, #0]
 802e17c:	b2db      	uxtb	r3, r3
 802e17e:	3b08      	subs	r3, #8
 802e180:	4a28      	ldr	r2, [pc, #160]	; (802e224 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 802e182:	fba2 2303 	umull	r2, r3, r2, r3
 802e186:	091b      	lsrs	r3, r3, #4
 802e188:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 802e18a:	68fa      	ldr	r2, [r7, #12]
 802e18c:	4b26      	ldr	r3, [pc, #152]	; (802e228 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 802e18e:	4413      	add	r3, r2
 802e190:	009b      	lsls	r3, r3, #2
 802e192:	461a      	mov	r2, r3
 802e194:	687b      	ldr	r3, [r7, #4]
 802e196:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 802e198:	687b      	ldr	r3, [r7, #4]
 802e19a:	4a24      	ldr	r2, [pc, #144]	; (802e22c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 802e19c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802e19e:	68fb      	ldr	r3, [r7, #12]
 802e1a0:	f003 031f 	and.w	r3, r3, #31
 802e1a4:	2201      	movs	r2, #1
 802e1a6:	409a      	lsls	r2, r3
 802e1a8:	687b      	ldr	r3, [r7, #4]
 802e1aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 802e1ac:	e024      	b.n	802e1f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 802e1ae:	687b      	ldr	r3, [r7, #4]
 802e1b0:	681b      	ldr	r3, [r3, #0]
 802e1b2:	b2db      	uxtb	r3, r3
 802e1b4:	3b10      	subs	r3, #16
 802e1b6:	4a1e      	ldr	r2, [pc, #120]	; (802e230 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 802e1b8:	fba2 2303 	umull	r2, r3, r2, r3
 802e1bc:	091b      	lsrs	r3, r3, #4
 802e1be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 802e1c0:	68bb      	ldr	r3, [r7, #8]
 802e1c2:	4a1c      	ldr	r2, [pc, #112]	; (802e234 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 802e1c4:	4293      	cmp	r3, r2
 802e1c6:	d806      	bhi.n	802e1d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 802e1c8:	68bb      	ldr	r3, [r7, #8]
 802e1ca:	4a1b      	ldr	r2, [pc, #108]	; (802e238 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 802e1cc:	4293      	cmp	r3, r2
 802e1ce:	d902      	bls.n	802e1d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 802e1d0:	68fb      	ldr	r3, [r7, #12]
 802e1d2:	3308      	adds	r3, #8
 802e1d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 802e1d6:	68fa      	ldr	r2, [r7, #12]
 802e1d8:	4b18      	ldr	r3, [pc, #96]	; (802e23c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 802e1da:	4413      	add	r3, r2
 802e1dc:	009b      	lsls	r3, r3, #2
 802e1de:	461a      	mov	r2, r3
 802e1e0:	687b      	ldr	r3, [r7, #4]
 802e1e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 802e1e4:	687b      	ldr	r3, [r7, #4]
 802e1e6:	4a16      	ldr	r2, [pc, #88]	; (802e240 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 802e1e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 802e1ea:	68fb      	ldr	r3, [r7, #12]
 802e1ec:	f003 031f 	and.w	r3, r3, #31
 802e1f0:	2201      	movs	r2, #1
 802e1f2:	409a      	lsls	r2, r3
 802e1f4:	687b      	ldr	r3, [r7, #4]
 802e1f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 802e1f8:	bf00      	nop
 802e1fa:	3714      	adds	r7, #20
 802e1fc:	46bd      	mov	sp, r7
 802e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e202:	4770      	bx	lr
 802e204:	58025408 	.word	0x58025408
 802e208:	5802541c 	.word	0x5802541c
 802e20c:	58025430 	.word	0x58025430
 802e210:	58025444 	.word	0x58025444
 802e214:	58025458 	.word	0x58025458
 802e218:	5802546c 	.word	0x5802546c
 802e21c:	58025480 	.word	0x58025480
 802e220:	58025494 	.word	0x58025494
 802e224:	cccccccd 	.word	0xcccccccd
 802e228:	16009600 	.word	0x16009600
 802e22c:	58025880 	.word	0x58025880
 802e230:	aaaaaaab 	.word	0xaaaaaaab
 802e234:	400204b8 	.word	0x400204b8
 802e238:	4002040f 	.word	0x4002040f
 802e23c:	10008200 	.word	0x10008200
 802e240:	40020880 	.word	0x40020880

0802e244 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 802e244:	b480      	push	{r7}
 802e246:	b085      	sub	sp, #20
 802e248:	af00      	add	r7, sp, #0
 802e24a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 802e24c:	687b      	ldr	r3, [r7, #4]
 802e24e:	685b      	ldr	r3, [r3, #4]
 802e250:	b2db      	uxtb	r3, r3
 802e252:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 802e254:	68fb      	ldr	r3, [r7, #12]
 802e256:	2b00      	cmp	r3, #0
 802e258:	d04a      	beq.n	802e2f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 802e25a:	68fb      	ldr	r3, [r7, #12]
 802e25c:	2b08      	cmp	r3, #8
 802e25e:	d847      	bhi.n	802e2f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 802e260:	687b      	ldr	r3, [r7, #4]
 802e262:	681b      	ldr	r3, [r3, #0]
 802e264:	4a25      	ldr	r2, [pc, #148]	; (802e2fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 802e266:	4293      	cmp	r3, r2
 802e268:	d022      	beq.n	802e2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e26a:	687b      	ldr	r3, [r7, #4]
 802e26c:	681b      	ldr	r3, [r3, #0]
 802e26e:	4a24      	ldr	r2, [pc, #144]	; (802e300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 802e270:	4293      	cmp	r3, r2
 802e272:	d01d      	beq.n	802e2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e274:	687b      	ldr	r3, [r7, #4]
 802e276:	681b      	ldr	r3, [r3, #0]
 802e278:	4a22      	ldr	r2, [pc, #136]	; (802e304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 802e27a:	4293      	cmp	r3, r2
 802e27c:	d018      	beq.n	802e2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e27e:	687b      	ldr	r3, [r7, #4]
 802e280:	681b      	ldr	r3, [r3, #0]
 802e282:	4a21      	ldr	r2, [pc, #132]	; (802e308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 802e284:	4293      	cmp	r3, r2
 802e286:	d013      	beq.n	802e2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e288:	687b      	ldr	r3, [r7, #4]
 802e28a:	681b      	ldr	r3, [r3, #0]
 802e28c:	4a1f      	ldr	r2, [pc, #124]	; (802e30c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 802e28e:	4293      	cmp	r3, r2
 802e290:	d00e      	beq.n	802e2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e292:	687b      	ldr	r3, [r7, #4]
 802e294:	681b      	ldr	r3, [r3, #0]
 802e296:	4a1e      	ldr	r2, [pc, #120]	; (802e310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 802e298:	4293      	cmp	r3, r2
 802e29a:	d009      	beq.n	802e2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e29c:	687b      	ldr	r3, [r7, #4]
 802e29e:	681b      	ldr	r3, [r3, #0]
 802e2a0:	4a1c      	ldr	r2, [pc, #112]	; (802e314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 802e2a2:	4293      	cmp	r3, r2
 802e2a4:	d004      	beq.n	802e2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 802e2a6:	687b      	ldr	r3, [r7, #4]
 802e2a8:	681b      	ldr	r3, [r3, #0]
 802e2aa:	4a1b      	ldr	r2, [pc, #108]	; (802e318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 802e2ac:	4293      	cmp	r3, r2
 802e2ae:	d101      	bne.n	802e2b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 802e2b0:	2301      	movs	r3, #1
 802e2b2:	e000      	b.n	802e2b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 802e2b4:	2300      	movs	r3, #0
 802e2b6:	2b00      	cmp	r3, #0
 802e2b8:	d00a      	beq.n	802e2d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 802e2ba:	68fa      	ldr	r2, [r7, #12]
 802e2bc:	4b17      	ldr	r3, [pc, #92]	; (802e31c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 802e2be:	4413      	add	r3, r2
 802e2c0:	009b      	lsls	r3, r3, #2
 802e2c2:	461a      	mov	r2, r3
 802e2c4:	687b      	ldr	r3, [r7, #4]
 802e2c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 802e2c8:	687b      	ldr	r3, [r7, #4]
 802e2ca:	4a15      	ldr	r2, [pc, #84]	; (802e320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 802e2cc:	671a      	str	r2, [r3, #112]	; 0x70
 802e2ce:	e009      	b.n	802e2e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 802e2d0:	68fa      	ldr	r2, [r7, #12]
 802e2d2:	4b14      	ldr	r3, [pc, #80]	; (802e324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 802e2d4:	4413      	add	r3, r2
 802e2d6:	009b      	lsls	r3, r3, #2
 802e2d8:	461a      	mov	r2, r3
 802e2da:	687b      	ldr	r3, [r7, #4]
 802e2dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 802e2de:	687b      	ldr	r3, [r7, #4]
 802e2e0:	4a11      	ldr	r2, [pc, #68]	; (802e328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 802e2e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 802e2e4:	68fb      	ldr	r3, [r7, #12]
 802e2e6:	3b01      	subs	r3, #1
 802e2e8:	2201      	movs	r2, #1
 802e2ea:	409a      	lsls	r2, r3
 802e2ec:	687b      	ldr	r3, [r7, #4]
 802e2ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 802e2f0:	bf00      	nop
 802e2f2:	3714      	adds	r7, #20
 802e2f4:	46bd      	mov	sp, r7
 802e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e2fa:	4770      	bx	lr
 802e2fc:	58025408 	.word	0x58025408
 802e300:	5802541c 	.word	0x5802541c
 802e304:	58025430 	.word	0x58025430
 802e308:	58025444 	.word	0x58025444
 802e30c:	58025458 	.word	0x58025458
 802e310:	5802546c 	.word	0x5802546c
 802e314:	58025480 	.word	0x58025480
 802e318:	58025494 	.word	0x58025494
 802e31c:	1600963f 	.word	0x1600963f
 802e320:	58025940 	.word	0x58025940
 802e324:	1000823f 	.word	0x1000823f
 802e328:	40020940 	.word	0x40020940

0802e32c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802e32c:	b480      	push	{r7}
 802e32e:	b089      	sub	sp, #36	; 0x24
 802e330:	af00      	add	r7, sp, #0
 802e332:	6078      	str	r0, [r7, #4]
 802e334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 802e336:	2300      	movs	r3, #0
 802e338:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 802e33a:	4b89      	ldr	r3, [pc, #548]	; (802e560 <HAL_GPIO_Init+0x234>)
 802e33c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e33e:	e194      	b.n	802e66a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802e340:	683b      	ldr	r3, [r7, #0]
 802e342:	681a      	ldr	r2, [r3, #0]
 802e344:	2101      	movs	r1, #1
 802e346:	69fb      	ldr	r3, [r7, #28]
 802e348:	fa01 f303 	lsl.w	r3, r1, r3
 802e34c:	4013      	ands	r3, r2
 802e34e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 802e350:	693b      	ldr	r3, [r7, #16]
 802e352:	2b00      	cmp	r3, #0
 802e354:	f000 8186 	beq.w	802e664 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 802e358:	683b      	ldr	r3, [r7, #0]
 802e35a:	685b      	ldr	r3, [r3, #4]
 802e35c:	f003 0303 	and.w	r3, r3, #3
 802e360:	2b01      	cmp	r3, #1
 802e362:	d005      	beq.n	802e370 <HAL_GPIO_Init+0x44>
 802e364:	683b      	ldr	r3, [r7, #0]
 802e366:	685b      	ldr	r3, [r3, #4]
 802e368:	f003 0303 	and.w	r3, r3, #3
 802e36c:	2b02      	cmp	r3, #2
 802e36e:	d130      	bne.n	802e3d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 802e370:	687b      	ldr	r3, [r7, #4]
 802e372:	689b      	ldr	r3, [r3, #8]
 802e374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 802e376:	69fb      	ldr	r3, [r7, #28]
 802e378:	005b      	lsls	r3, r3, #1
 802e37a:	2203      	movs	r2, #3
 802e37c:	fa02 f303 	lsl.w	r3, r2, r3
 802e380:	43db      	mvns	r3, r3
 802e382:	69ba      	ldr	r2, [r7, #24]
 802e384:	4013      	ands	r3, r2
 802e386:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802e388:	683b      	ldr	r3, [r7, #0]
 802e38a:	68da      	ldr	r2, [r3, #12]
 802e38c:	69fb      	ldr	r3, [r7, #28]
 802e38e:	005b      	lsls	r3, r3, #1
 802e390:	fa02 f303 	lsl.w	r3, r2, r3
 802e394:	69ba      	ldr	r2, [r7, #24]
 802e396:	4313      	orrs	r3, r2
 802e398:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802e39a:	687b      	ldr	r3, [r7, #4]
 802e39c:	69ba      	ldr	r2, [r7, #24]
 802e39e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802e3a0:	687b      	ldr	r3, [r7, #4]
 802e3a2:	685b      	ldr	r3, [r3, #4]
 802e3a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 802e3a6:	2201      	movs	r2, #1
 802e3a8:	69fb      	ldr	r3, [r7, #28]
 802e3aa:	fa02 f303 	lsl.w	r3, r2, r3
 802e3ae:	43db      	mvns	r3, r3
 802e3b0:	69ba      	ldr	r2, [r7, #24]
 802e3b2:	4013      	ands	r3, r2
 802e3b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802e3b6:	683b      	ldr	r3, [r7, #0]
 802e3b8:	685b      	ldr	r3, [r3, #4]
 802e3ba:	091b      	lsrs	r3, r3, #4
 802e3bc:	f003 0201 	and.w	r2, r3, #1
 802e3c0:	69fb      	ldr	r3, [r7, #28]
 802e3c2:	fa02 f303 	lsl.w	r3, r2, r3
 802e3c6:	69ba      	ldr	r2, [r7, #24]
 802e3c8:	4313      	orrs	r3, r2
 802e3ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802e3cc:	687b      	ldr	r3, [r7, #4]
 802e3ce:	69ba      	ldr	r2, [r7, #24]
 802e3d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802e3d2:	683b      	ldr	r3, [r7, #0]
 802e3d4:	685b      	ldr	r3, [r3, #4]
 802e3d6:	f003 0303 	and.w	r3, r3, #3
 802e3da:	2b03      	cmp	r3, #3
 802e3dc:	d017      	beq.n	802e40e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802e3de:	687b      	ldr	r3, [r7, #4]
 802e3e0:	68db      	ldr	r3, [r3, #12]
 802e3e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 802e3e4:	69fb      	ldr	r3, [r7, #28]
 802e3e6:	005b      	lsls	r3, r3, #1
 802e3e8:	2203      	movs	r2, #3
 802e3ea:	fa02 f303 	lsl.w	r3, r2, r3
 802e3ee:	43db      	mvns	r3, r3
 802e3f0:	69ba      	ldr	r2, [r7, #24]
 802e3f2:	4013      	ands	r3, r2
 802e3f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802e3f6:	683b      	ldr	r3, [r7, #0]
 802e3f8:	689a      	ldr	r2, [r3, #8]
 802e3fa:	69fb      	ldr	r3, [r7, #28]
 802e3fc:	005b      	lsls	r3, r3, #1
 802e3fe:	fa02 f303 	lsl.w	r3, r2, r3
 802e402:	69ba      	ldr	r2, [r7, #24]
 802e404:	4313      	orrs	r3, r2
 802e406:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802e408:	687b      	ldr	r3, [r7, #4]
 802e40a:	69ba      	ldr	r2, [r7, #24]
 802e40c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802e40e:	683b      	ldr	r3, [r7, #0]
 802e410:	685b      	ldr	r3, [r3, #4]
 802e412:	f003 0303 	and.w	r3, r3, #3
 802e416:	2b02      	cmp	r3, #2
 802e418:	d123      	bne.n	802e462 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802e41a:	69fb      	ldr	r3, [r7, #28]
 802e41c:	08da      	lsrs	r2, r3, #3
 802e41e:	687b      	ldr	r3, [r7, #4]
 802e420:	3208      	adds	r2, #8
 802e422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802e426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 802e428:	69fb      	ldr	r3, [r7, #28]
 802e42a:	f003 0307 	and.w	r3, r3, #7
 802e42e:	009b      	lsls	r3, r3, #2
 802e430:	220f      	movs	r2, #15
 802e432:	fa02 f303 	lsl.w	r3, r2, r3
 802e436:	43db      	mvns	r3, r3
 802e438:	69ba      	ldr	r2, [r7, #24]
 802e43a:	4013      	ands	r3, r2
 802e43c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802e43e:	683b      	ldr	r3, [r7, #0]
 802e440:	691a      	ldr	r2, [r3, #16]
 802e442:	69fb      	ldr	r3, [r7, #28]
 802e444:	f003 0307 	and.w	r3, r3, #7
 802e448:	009b      	lsls	r3, r3, #2
 802e44a:	fa02 f303 	lsl.w	r3, r2, r3
 802e44e:	69ba      	ldr	r2, [r7, #24]
 802e450:	4313      	orrs	r3, r2
 802e452:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802e454:	69fb      	ldr	r3, [r7, #28]
 802e456:	08da      	lsrs	r2, r3, #3
 802e458:	687b      	ldr	r3, [r7, #4]
 802e45a:	3208      	adds	r2, #8
 802e45c:	69b9      	ldr	r1, [r7, #24]
 802e45e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802e462:	687b      	ldr	r3, [r7, #4]
 802e464:	681b      	ldr	r3, [r3, #0]
 802e466:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 802e468:	69fb      	ldr	r3, [r7, #28]
 802e46a:	005b      	lsls	r3, r3, #1
 802e46c:	2203      	movs	r2, #3
 802e46e:	fa02 f303 	lsl.w	r3, r2, r3
 802e472:	43db      	mvns	r3, r3
 802e474:	69ba      	ldr	r2, [r7, #24]
 802e476:	4013      	ands	r3, r2
 802e478:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802e47a:	683b      	ldr	r3, [r7, #0]
 802e47c:	685b      	ldr	r3, [r3, #4]
 802e47e:	f003 0203 	and.w	r2, r3, #3
 802e482:	69fb      	ldr	r3, [r7, #28]
 802e484:	005b      	lsls	r3, r3, #1
 802e486:	fa02 f303 	lsl.w	r3, r2, r3
 802e48a:	69ba      	ldr	r2, [r7, #24]
 802e48c:	4313      	orrs	r3, r2
 802e48e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802e490:	687b      	ldr	r3, [r7, #4]
 802e492:	69ba      	ldr	r2, [r7, #24]
 802e494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802e496:	683b      	ldr	r3, [r7, #0]
 802e498:	685b      	ldr	r3, [r3, #4]
 802e49a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802e49e:	2b00      	cmp	r3, #0
 802e4a0:	f000 80e0 	beq.w	802e664 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802e4a4:	4b2f      	ldr	r3, [pc, #188]	; (802e564 <HAL_GPIO_Init+0x238>)
 802e4a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e4aa:	4a2e      	ldr	r2, [pc, #184]	; (802e564 <HAL_GPIO_Init+0x238>)
 802e4ac:	f043 0302 	orr.w	r3, r3, #2
 802e4b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 802e4b4:	4b2b      	ldr	r3, [pc, #172]	; (802e564 <HAL_GPIO_Init+0x238>)
 802e4b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 802e4ba:	f003 0302 	and.w	r3, r3, #2
 802e4be:	60fb      	str	r3, [r7, #12]
 802e4c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802e4c2:	4a29      	ldr	r2, [pc, #164]	; (802e568 <HAL_GPIO_Init+0x23c>)
 802e4c4:	69fb      	ldr	r3, [r7, #28]
 802e4c6:	089b      	lsrs	r3, r3, #2
 802e4c8:	3302      	adds	r3, #2
 802e4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802e4ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802e4d0:	69fb      	ldr	r3, [r7, #28]
 802e4d2:	f003 0303 	and.w	r3, r3, #3
 802e4d6:	009b      	lsls	r3, r3, #2
 802e4d8:	220f      	movs	r2, #15
 802e4da:	fa02 f303 	lsl.w	r3, r2, r3
 802e4de:	43db      	mvns	r3, r3
 802e4e0:	69ba      	ldr	r2, [r7, #24]
 802e4e2:	4013      	ands	r3, r2
 802e4e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 802e4e6:	687b      	ldr	r3, [r7, #4]
 802e4e8:	4a20      	ldr	r2, [pc, #128]	; (802e56c <HAL_GPIO_Init+0x240>)
 802e4ea:	4293      	cmp	r3, r2
 802e4ec:	d052      	beq.n	802e594 <HAL_GPIO_Init+0x268>
 802e4ee:	687b      	ldr	r3, [r7, #4]
 802e4f0:	4a1f      	ldr	r2, [pc, #124]	; (802e570 <HAL_GPIO_Init+0x244>)
 802e4f2:	4293      	cmp	r3, r2
 802e4f4:	d031      	beq.n	802e55a <HAL_GPIO_Init+0x22e>
 802e4f6:	687b      	ldr	r3, [r7, #4]
 802e4f8:	4a1e      	ldr	r2, [pc, #120]	; (802e574 <HAL_GPIO_Init+0x248>)
 802e4fa:	4293      	cmp	r3, r2
 802e4fc:	d02b      	beq.n	802e556 <HAL_GPIO_Init+0x22a>
 802e4fe:	687b      	ldr	r3, [r7, #4]
 802e500:	4a1d      	ldr	r2, [pc, #116]	; (802e578 <HAL_GPIO_Init+0x24c>)
 802e502:	4293      	cmp	r3, r2
 802e504:	d025      	beq.n	802e552 <HAL_GPIO_Init+0x226>
 802e506:	687b      	ldr	r3, [r7, #4]
 802e508:	4a1c      	ldr	r2, [pc, #112]	; (802e57c <HAL_GPIO_Init+0x250>)
 802e50a:	4293      	cmp	r3, r2
 802e50c:	d01f      	beq.n	802e54e <HAL_GPIO_Init+0x222>
 802e50e:	687b      	ldr	r3, [r7, #4]
 802e510:	4a1b      	ldr	r2, [pc, #108]	; (802e580 <HAL_GPIO_Init+0x254>)
 802e512:	4293      	cmp	r3, r2
 802e514:	d019      	beq.n	802e54a <HAL_GPIO_Init+0x21e>
 802e516:	687b      	ldr	r3, [r7, #4]
 802e518:	4a1a      	ldr	r2, [pc, #104]	; (802e584 <HAL_GPIO_Init+0x258>)
 802e51a:	4293      	cmp	r3, r2
 802e51c:	d013      	beq.n	802e546 <HAL_GPIO_Init+0x21a>
 802e51e:	687b      	ldr	r3, [r7, #4]
 802e520:	4a19      	ldr	r2, [pc, #100]	; (802e588 <HAL_GPIO_Init+0x25c>)
 802e522:	4293      	cmp	r3, r2
 802e524:	d00d      	beq.n	802e542 <HAL_GPIO_Init+0x216>
 802e526:	687b      	ldr	r3, [r7, #4]
 802e528:	4a18      	ldr	r2, [pc, #96]	; (802e58c <HAL_GPIO_Init+0x260>)
 802e52a:	4293      	cmp	r3, r2
 802e52c:	d007      	beq.n	802e53e <HAL_GPIO_Init+0x212>
 802e52e:	687b      	ldr	r3, [r7, #4]
 802e530:	4a17      	ldr	r2, [pc, #92]	; (802e590 <HAL_GPIO_Init+0x264>)
 802e532:	4293      	cmp	r3, r2
 802e534:	d101      	bne.n	802e53a <HAL_GPIO_Init+0x20e>
 802e536:	2309      	movs	r3, #9
 802e538:	e02d      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e53a:	230a      	movs	r3, #10
 802e53c:	e02b      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e53e:	2308      	movs	r3, #8
 802e540:	e029      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e542:	2307      	movs	r3, #7
 802e544:	e027      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e546:	2306      	movs	r3, #6
 802e548:	e025      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e54a:	2305      	movs	r3, #5
 802e54c:	e023      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e54e:	2304      	movs	r3, #4
 802e550:	e021      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e552:	2303      	movs	r3, #3
 802e554:	e01f      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e556:	2302      	movs	r3, #2
 802e558:	e01d      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e55a:	2301      	movs	r3, #1
 802e55c:	e01b      	b.n	802e596 <HAL_GPIO_Init+0x26a>
 802e55e:	bf00      	nop
 802e560:	58000080 	.word	0x58000080
 802e564:	58024400 	.word	0x58024400
 802e568:	58000400 	.word	0x58000400
 802e56c:	58020000 	.word	0x58020000
 802e570:	58020400 	.word	0x58020400
 802e574:	58020800 	.word	0x58020800
 802e578:	58020c00 	.word	0x58020c00
 802e57c:	58021000 	.word	0x58021000
 802e580:	58021400 	.word	0x58021400
 802e584:	58021800 	.word	0x58021800
 802e588:	58021c00 	.word	0x58021c00
 802e58c:	58022000 	.word	0x58022000
 802e590:	58022400 	.word	0x58022400
 802e594:	2300      	movs	r3, #0
 802e596:	69fa      	ldr	r2, [r7, #28]
 802e598:	f002 0203 	and.w	r2, r2, #3
 802e59c:	0092      	lsls	r2, r2, #2
 802e59e:	4093      	lsls	r3, r2
 802e5a0:	69ba      	ldr	r2, [r7, #24]
 802e5a2:	4313      	orrs	r3, r2
 802e5a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802e5a6:	4938      	ldr	r1, [pc, #224]	; (802e688 <HAL_GPIO_Init+0x35c>)
 802e5a8:	69fb      	ldr	r3, [r7, #28]
 802e5aa:	089b      	lsrs	r3, r3, #2
 802e5ac:	3302      	adds	r3, #2
 802e5ae:	69ba      	ldr	r2, [r7, #24]
 802e5b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 802e5b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e5b8:	681b      	ldr	r3, [r3, #0]
 802e5ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e5bc:	693b      	ldr	r3, [r7, #16]
 802e5be:	43db      	mvns	r3, r3
 802e5c0:	69ba      	ldr	r2, [r7, #24]
 802e5c2:	4013      	ands	r3, r2
 802e5c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802e5c6:	683b      	ldr	r3, [r7, #0]
 802e5c8:	685b      	ldr	r3, [r3, #4]
 802e5ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802e5ce:	2b00      	cmp	r3, #0
 802e5d0:	d003      	beq.n	802e5da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 802e5d2:	69ba      	ldr	r2, [r7, #24]
 802e5d4:	693b      	ldr	r3, [r7, #16]
 802e5d6:	4313      	orrs	r3, r2
 802e5d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 802e5da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e5de:	69bb      	ldr	r3, [r7, #24]
 802e5e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802e5e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 802e5e6:	685b      	ldr	r3, [r3, #4]
 802e5e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e5ea:	693b      	ldr	r3, [r7, #16]
 802e5ec:	43db      	mvns	r3, r3
 802e5ee:	69ba      	ldr	r2, [r7, #24]
 802e5f0:	4013      	ands	r3, r2
 802e5f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 802e5f4:	683b      	ldr	r3, [r7, #0]
 802e5f6:	685b      	ldr	r3, [r3, #4]
 802e5f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802e5fc:	2b00      	cmp	r3, #0
 802e5fe:	d003      	beq.n	802e608 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802e600:	69ba      	ldr	r2, [r7, #24]
 802e602:	693b      	ldr	r3, [r7, #16]
 802e604:	4313      	orrs	r3, r2
 802e606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 802e608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 802e60c:	69bb      	ldr	r3, [r7, #24]
 802e60e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 802e610:	697b      	ldr	r3, [r7, #20]
 802e612:	685b      	ldr	r3, [r3, #4]
 802e614:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e616:	693b      	ldr	r3, [r7, #16]
 802e618:	43db      	mvns	r3, r3
 802e61a:	69ba      	ldr	r2, [r7, #24]
 802e61c:	4013      	ands	r3, r2
 802e61e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 802e620:	683b      	ldr	r3, [r7, #0]
 802e622:	685b      	ldr	r3, [r3, #4]
 802e624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802e628:	2b00      	cmp	r3, #0
 802e62a:	d003      	beq.n	802e634 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 802e62c:	69ba      	ldr	r2, [r7, #24]
 802e62e:	693b      	ldr	r3, [r7, #16]
 802e630:	4313      	orrs	r3, r2
 802e632:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 802e634:	697b      	ldr	r3, [r7, #20]
 802e636:	69ba      	ldr	r2, [r7, #24]
 802e638:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 802e63a:	697b      	ldr	r3, [r7, #20]
 802e63c:	681b      	ldr	r3, [r3, #0]
 802e63e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 802e640:	693b      	ldr	r3, [r7, #16]
 802e642:	43db      	mvns	r3, r3
 802e644:	69ba      	ldr	r2, [r7, #24]
 802e646:	4013      	ands	r3, r2
 802e648:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802e64a:	683b      	ldr	r3, [r7, #0]
 802e64c:	685b      	ldr	r3, [r3, #4]
 802e64e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802e652:	2b00      	cmp	r3, #0
 802e654:	d003      	beq.n	802e65e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 802e656:	69ba      	ldr	r2, [r7, #24]
 802e658:	693b      	ldr	r3, [r7, #16]
 802e65a:	4313      	orrs	r3, r2
 802e65c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 802e65e:	697b      	ldr	r3, [r7, #20]
 802e660:	69ba      	ldr	r2, [r7, #24]
 802e662:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 802e664:	69fb      	ldr	r3, [r7, #28]
 802e666:	3301      	adds	r3, #1
 802e668:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802e66a:	683b      	ldr	r3, [r7, #0]
 802e66c:	681a      	ldr	r2, [r3, #0]
 802e66e:	69fb      	ldr	r3, [r7, #28]
 802e670:	fa22 f303 	lsr.w	r3, r2, r3
 802e674:	2b00      	cmp	r3, #0
 802e676:	f47f ae63 	bne.w	802e340 <HAL_GPIO_Init+0x14>
  }
}
 802e67a:	bf00      	nop
 802e67c:	bf00      	nop
 802e67e:	3724      	adds	r7, #36	; 0x24
 802e680:	46bd      	mov	sp, r7
 802e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e686:	4770      	bx	lr
 802e688:	58000400 	.word	0x58000400

0802e68c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802e68c:	b480      	push	{r7}
 802e68e:	b083      	sub	sp, #12
 802e690:	af00      	add	r7, sp, #0
 802e692:	6078      	str	r0, [r7, #4]
 802e694:	460b      	mov	r3, r1
 802e696:	807b      	strh	r3, [r7, #2]
 802e698:	4613      	mov	r3, r2
 802e69a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 802e69c:	787b      	ldrb	r3, [r7, #1]
 802e69e:	2b00      	cmp	r3, #0
 802e6a0:	d003      	beq.n	802e6aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802e6a2:	887a      	ldrh	r2, [r7, #2]
 802e6a4:	687b      	ldr	r3, [r7, #4]
 802e6a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 802e6a8:	e003      	b.n	802e6b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802e6aa:	887b      	ldrh	r3, [r7, #2]
 802e6ac:	041a      	lsls	r2, r3, #16
 802e6ae:	687b      	ldr	r3, [r7, #4]
 802e6b0:	619a      	str	r2, [r3, #24]
}
 802e6b2:	bf00      	nop
 802e6b4:	370c      	adds	r7, #12
 802e6b6:	46bd      	mov	sp, r7
 802e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6bc:	4770      	bx	lr
	...

0802e6c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802e6c0:	b580      	push	{r7, lr}
 802e6c2:	b082      	sub	sp, #8
 802e6c4:	af00      	add	r7, sp, #0
 802e6c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802e6c8:	687b      	ldr	r3, [r7, #4]
 802e6ca:	2b00      	cmp	r3, #0
 802e6cc:	d101      	bne.n	802e6d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802e6ce:	2301      	movs	r3, #1
 802e6d0:	e07f      	b.n	802e7d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802e6d2:	687b      	ldr	r3, [r7, #4]
 802e6d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e6d8:	b2db      	uxtb	r3, r3
 802e6da:	2b00      	cmp	r3, #0
 802e6dc:	d106      	bne.n	802e6ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802e6de:	687b      	ldr	r3, [r7, #4]
 802e6e0:	2200      	movs	r2, #0
 802e6e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 802e6e6:	6878      	ldr	r0, [r7, #4]
 802e6e8:	f7fa ff98 	bl	802961c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802e6ec:	687b      	ldr	r3, [r7, #4]
 802e6ee:	2224      	movs	r2, #36	; 0x24
 802e6f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802e6f4:	687b      	ldr	r3, [r7, #4]
 802e6f6:	681b      	ldr	r3, [r3, #0]
 802e6f8:	681a      	ldr	r2, [r3, #0]
 802e6fa:	687b      	ldr	r3, [r7, #4]
 802e6fc:	681b      	ldr	r3, [r3, #0]
 802e6fe:	f022 0201 	bic.w	r2, r2, #1
 802e702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 802e704:	687b      	ldr	r3, [r7, #4]
 802e706:	685a      	ldr	r2, [r3, #4]
 802e708:	687b      	ldr	r3, [r7, #4]
 802e70a:	681b      	ldr	r3, [r3, #0]
 802e70c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802e710:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 802e712:	687b      	ldr	r3, [r7, #4]
 802e714:	681b      	ldr	r3, [r3, #0]
 802e716:	689a      	ldr	r2, [r3, #8]
 802e718:	687b      	ldr	r3, [r7, #4]
 802e71a:	681b      	ldr	r3, [r3, #0]
 802e71c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e720:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802e722:	687b      	ldr	r3, [r7, #4]
 802e724:	68db      	ldr	r3, [r3, #12]
 802e726:	2b01      	cmp	r3, #1
 802e728:	d107      	bne.n	802e73a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 802e72a:	687b      	ldr	r3, [r7, #4]
 802e72c:	689a      	ldr	r2, [r3, #8]
 802e72e:	687b      	ldr	r3, [r7, #4]
 802e730:	681b      	ldr	r3, [r3, #0]
 802e732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802e736:	609a      	str	r2, [r3, #8]
 802e738:	e006      	b.n	802e748 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 802e73a:	687b      	ldr	r3, [r7, #4]
 802e73c:	689a      	ldr	r2, [r3, #8]
 802e73e:	687b      	ldr	r3, [r7, #4]
 802e740:	681b      	ldr	r3, [r3, #0]
 802e742:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 802e746:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802e748:	687b      	ldr	r3, [r7, #4]
 802e74a:	68db      	ldr	r3, [r3, #12]
 802e74c:	2b02      	cmp	r3, #2
 802e74e:	d104      	bne.n	802e75a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 802e750:	687b      	ldr	r3, [r7, #4]
 802e752:	681b      	ldr	r3, [r3, #0]
 802e754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802e758:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 802e75a:	687b      	ldr	r3, [r7, #4]
 802e75c:	681b      	ldr	r3, [r3, #0]
 802e75e:	6859      	ldr	r1, [r3, #4]
 802e760:	687b      	ldr	r3, [r7, #4]
 802e762:	681a      	ldr	r2, [r3, #0]
 802e764:	4b1d      	ldr	r3, [pc, #116]	; (802e7dc <HAL_I2C_Init+0x11c>)
 802e766:	430b      	orrs	r3, r1
 802e768:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 802e76a:	687b      	ldr	r3, [r7, #4]
 802e76c:	681b      	ldr	r3, [r3, #0]
 802e76e:	68da      	ldr	r2, [r3, #12]
 802e770:	687b      	ldr	r3, [r7, #4]
 802e772:	681b      	ldr	r3, [r3, #0]
 802e774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802e778:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e77a:	687b      	ldr	r3, [r7, #4]
 802e77c:	691a      	ldr	r2, [r3, #16]
 802e77e:	687b      	ldr	r3, [r7, #4]
 802e780:	695b      	ldr	r3, [r3, #20]
 802e782:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 802e786:	687b      	ldr	r3, [r7, #4]
 802e788:	699b      	ldr	r3, [r3, #24]
 802e78a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 802e78c:	687b      	ldr	r3, [r7, #4]
 802e78e:	681b      	ldr	r3, [r3, #0]
 802e790:	430a      	orrs	r2, r1
 802e792:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 802e794:	687b      	ldr	r3, [r7, #4]
 802e796:	69d9      	ldr	r1, [r3, #28]
 802e798:	687b      	ldr	r3, [r7, #4]
 802e79a:	6a1a      	ldr	r2, [r3, #32]
 802e79c:	687b      	ldr	r3, [r7, #4]
 802e79e:	681b      	ldr	r3, [r3, #0]
 802e7a0:	430a      	orrs	r2, r1
 802e7a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802e7a4:	687b      	ldr	r3, [r7, #4]
 802e7a6:	681b      	ldr	r3, [r3, #0]
 802e7a8:	681a      	ldr	r2, [r3, #0]
 802e7aa:	687b      	ldr	r3, [r7, #4]
 802e7ac:	681b      	ldr	r3, [r3, #0]
 802e7ae:	f042 0201 	orr.w	r2, r2, #1
 802e7b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802e7b4:	687b      	ldr	r3, [r7, #4]
 802e7b6:	2200      	movs	r2, #0
 802e7b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 802e7ba:	687b      	ldr	r3, [r7, #4]
 802e7bc:	2220      	movs	r2, #32
 802e7be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 802e7c2:	687b      	ldr	r3, [r7, #4]
 802e7c4:	2200      	movs	r2, #0
 802e7c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802e7c8:	687b      	ldr	r3, [r7, #4]
 802e7ca:	2200      	movs	r2, #0
 802e7cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 802e7d0:	2300      	movs	r3, #0
}
 802e7d2:	4618      	mov	r0, r3
 802e7d4:	3708      	adds	r7, #8
 802e7d6:	46bd      	mov	sp, r7
 802e7d8:	bd80      	pop	{r7, pc}
 802e7da:	bf00      	nop
 802e7dc:	02008000 	.word	0x02008000

0802e7e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e7e0:	b580      	push	{r7, lr}
 802e7e2:	b084      	sub	sp, #16
 802e7e4:	af00      	add	r7, sp, #0
 802e7e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e7e8:	687b      	ldr	r3, [r7, #4]
 802e7ea:	681b      	ldr	r3, [r3, #0]
 802e7ec:	699b      	ldr	r3, [r3, #24]
 802e7ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e7f0:	687b      	ldr	r3, [r7, #4]
 802e7f2:	681b      	ldr	r3, [r3, #0]
 802e7f4:	681b      	ldr	r3, [r3, #0]
 802e7f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 802e7f8:	687b      	ldr	r3, [r7, #4]
 802e7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e7fc:	2b00      	cmp	r3, #0
 802e7fe:	d005      	beq.n	802e80c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 802e800:	687b      	ldr	r3, [r7, #4]
 802e802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802e804:	68ba      	ldr	r2, [r7, #8]
 802e806:	68f9      	ldr	r1, [r7, #12]
 802e808:	6878      	ldr	r0, [r7, #4]
 802e80a:	4798      	blx	r3
  }
}
 802e80c:	bf00      	nop
 802e80e:	3710      	adds	r7, #16
 802e810:	46bd      	mov	sp, r7
 802e812:	bd80      	pop	{r7, pc}

0802e814 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802e814:	b580      	push	{r7, lr}
 802e816:	b086      	sub	sp, #24
 802e818:	af00      	add	r7, sp, #0
 802e81a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 802e81c:	687b      	ldr	r3, [r7, #4]
 802e81e:	681b      	ldr	r3, [r3, #0]
 802e820:	699b      	ldr	r3, [r3, #24]
 802e822:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 802e824:	687b      	ldr	r3, [r7, #4]
 802e826:	681b      	ldr	r3, [r3, #0]
 802e828:	681b      	ldr	r3, [r3, #0]
 802e82a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e82c:	697b      	ldr	r3, [r7, #20]
 802e82e:	0a1b      	lsrs	r3, r3, #8
 802e830:	f003 0301 	and.w	r3, r3, #1
 802e834:	2b00      	cmp	r3, #0
 802e836:	d010      	beq.n	802e85a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e838:	693b      	ldr	r3, [r7, #16]
 802e83a:	09db      	lsrs	r3, r3, #7
 802e83c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 802e840:	2b00      	cmp	r3, #0
 802e842:	d00a      	beq.n	802e85a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 802e844:	687b      	ldr	r3, [r7, #4]
 802e846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e848:	f043 0201 	orr.w	r2, r3, #1
 802e84c:	687b      	ldr	r3, [r7, #4]
 802e84e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 802e850:	687b      	ldr	r3, [r7, #4]
 802e852:	681b      	ldr	r3, [r3, #0]
 802e854:	f44f 7280 	mov.w	r2, #256	; 0x100
 802e858:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e85a:	697b      	ldr	r3, [r7, #20]
 802e85c:	0a9b      	lsrs	r3, r3, #10
 802e85e:	f003 0301 	and.w	r3, r3, #1
 802e862:	2b00      	cmp	r3, #0
 802e864:	d010      	beq.n	802e888 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e866:	693b      	ldr	r3, [r7, #16]
 802e868:	09db      	lsrs	r3, r3, #7
 802e86a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 802e86e:	2b00      	cmp	r3, #0
 802e870:	d00a      	beq.n	802e888 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 802e872:	687b      	ldr	r3, [r7, #4]
 802e874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e876:	f043 0208 	orr.w	r2, r3, #8
 802e87a:	687b      	ldr	r3, [r7, #4]
 802e87c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 802e87e:	687b      	ldr	r3, [r7, #4]
 802e880:	681b      	ldr	r3, [r3, #0]
 802e882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802e886:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e888:	697b      	ldr	r3, [r7, #20]
 802e88a:	0a5b      	lsrs	r3, r3, #9
 802e88c:	f003 0301 	and.w	r3, r3, #1
 802e890:	2b00      	cmp	r3, #0
 802e892:	d010      	beq.n	802e8b6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 802e894:	693b      	ldr	r3, [r7, #16]
 802e896:	09db      	lsrs	r3, r3, #7
 802e898:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 802e89c:	2b00      	cmp	r3, #0
 802e89e:	d00a      	beq.n	802e8b6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 802e8a0:	687b      	ldr	r3, [r7, #4]
 802e8a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e8a4:	f043 0202 	orr.w	r2, r3, #2
 802e8a8:	687b      	ldr	r3, [r7, #4]
 802e8aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 802e8ac:	687b      	ldr	r3, [r7, #4]
 802e8ae:	681b      	ldr	r3, [r3, #0]
 802e8b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 802e8b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 802e8b6:	687b      	ldr	r3, [r7, #4]
 802e8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e8ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 802e8bc:	68fb      	ldr	r3, [r7, #12]
 802e8be:	f003 030b 	and.w	r3, r3, #11
 802e8c2:	2b00      	cmp	r3, #0
 802e8c4:	d003      	beq.n	802e8ce <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 802e8c6:	68f9      	ldr	r1, [r7, #12]
 802e8c8:	6878      	ldr	r0, [r7, #4]
 802e8ca:	f000 fc77 	bl	802f1bc <I2C_ITError>
  }
}
 802e8ce:	bf00      	nop
 802e8d0:	3718      	adds	r7, #24
 802e8d2:	46bd      	mov	sp, r7
 802e8d4:	bd80      	pop	{r7, pc}

0802e8d6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e8d6:	b480      	push	{r7}
 802e8d8:	b083      	sub	sp, #12
 802e8da:	af00      	add	r7, sp, #0
 802e8dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802e8de:	bf00      	nop
 802e8e0:	370c      	adds	r7, #12
 802e8e2:	46bd      	mov	sp, r7
 802e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8e8:	4770      	bx	lr

0802e8ea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e8ea:	b480      	push	{r7}
 802e8ec:	b083      	sub	sp, #12
 802e8ee:	af00      	add	r7, sp, #0
 802e8f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802e8f2:	bf00      	nop
 802e8f4:	370c      	adds	r7, #12
 802e8f6:	46bd      	mov	sp, r7
 802e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e8fc:	4770      	bx	lr

0802e8fe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 802e8fe:	b480      	push	{r7}
 802e900:	b083      	sub	sp, #12
 802e902:	af00      	add	r7, sp, #0
 802e904:	6078      	str	r0, [r7, #4]
 802e906:	460b      	mov	r3, r1
 802e908:	70fb      	strb	r3, [r7, #3]
 802e90a:	4613      	mov	r3, r2
 802e90c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 802e90e:	bf00      	nop
 802e910:	370c      	adds	r7, #12
 802e912:	46bd      	mov	sp, r7
 802e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e918:	4770      	bx	lr

0802e91a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e91a:	b480      	push	{r7}
 802e91c:	b083      	sub	sp, #12
 802e91e:	af00      	add	r7, sp, #0
 802e920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 802e922:	bf00      	nop
 802e924:	370c      	adds	r7, #12
 802e926:	46bd      	mov	sp, r7
 802e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e92c:	4770      	bx	lr

0802e92e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802e92e:	b480      	push	{r7}
 802e930:	b083      	sub	sp, #12
 802e932:	af00      	add	r7, sp, #0
 802e934:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 802e936:	bf00      	nop
 802e938:	370c      	adds	r7, #12
 802e93a:	46bd      	mov	sp, r7
 802e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e940:	4770      	bx	lr

0802e942 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802e942:	b480      	push	{r7}
 802e944:	b083      	sub	sp, #12
 802e946:	af00      	add	r7, sp, #0
 802e948:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 802e94a:	bf00      	nop
 802e94c:	370c      	adds	r7, #12
 802e94e:	46bd      	mov	sp, r7
 802e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e954:	4770      	bx	lr

0802e956 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 802e956:	b580      	push	{r7, lr}
 802e958:	b086      	sub	sp, #24
 802e95a:	af00      	add	r7, sp, #0
 802e95c:	60f8      	str	r0, [r7, #12]
 802e95e:	60b9      	str	r1, [r7, #8]
 802e960:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 802e962:	68fb      	ldr	r3, [r7, #12]
 802e964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802e966:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 802e968:	68bb      	ldr	r3, [r7, #8]
 802e96a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 802e96c:	68fb      	ldr	r3, [r7, #12]
 802e96e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802e972:	2b01      	cmp	r3, #1
 802e974:	d101      	bne.n	802e97a <I2C_Slave_ISR_IT+0x24>
 802e976:	2302      	movs	r3, #2
 802e978:	e0ec      	b.n	802eb54 <I2C_Slave_ISR_IT+0x1fe>
 802e97a:	68fb      	ldr	r3, [r7, #12]
 802e97c:	2201      	movs	r2, #1
 802e97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e982:	693b      	ldr	r3, [r7, #16]
 802e984:	095b      	lsrs	r3, r3, #5
 802e986:	f003 0301 	and.w	r3, r3, #1
 802e98a:	2b00      	cmp	r3, #0
 802e98c:	d009      	beq.n	802e9a2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 802e98e:	687b      	ldr	r3, [r7, #4]
 802e990:	095b      	lsrs	r3, r3, #5
 802e992:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 802e996:	2b00      	cmp	r3, #0
 802e998:	d003      	beq.n	802e9a2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 802e99a:	6939      	ldr	r1, [r7, #16]
 802e99c:	68f8      	ldr	r0, [r7, #12]
 802e99e:	f000 f9bf 	bl	802ed20 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e9a2:	693b      	ldr	r3, [r7, #16]
 802e9a4:	091b      	lsrs	r3, r3, #4
 802e9a6:	f003 0301 	and.w	r3, r3, #1
 802e9aa:	2b00      	cmp	r3, #0
 802e9ac:	d04d      	beq.n	802ea4a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 802e9ae:	687b      	ldr	r3, [r7, #4]
 802e9b0:	091b      	lsrs	r3, r3, #4
 802e9b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 802e9b6:	2b00      	cmp	r3, #0
 802e9b8:	d047      	beq.n	802ea4a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 802e9ba:	68fb      	ldr	r3, [r7, #12]
 802e9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802e9be:	b29b      	uxth	r3, r3
 802e9c0:	2b00      	cmp	r3, #0
 802e9c2:	d128      	bne.n	802ea16 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 802e9c4:	68fb      	ldr	r3, [r7, #12]
 802e9c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e9ca:	b2db      	uxtb	r3, r3
 802e9cc:	2b28      	cmp	r3, #40	; 0x28
 802e9ce:	d108      	bne.n	802e9e2 <I2C_Slave_ISR_IT+0x8c>
 802e9d0:	697b      	ldr	r3, [r7, #20]
 802e9d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802e9d6:	d104      	bne.n	802e9e2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 802e9d8:	6939      	ldr	r1, [r7, #16]
 802e9da:	68f8      	ldr	r0, [r7, #12]
 802e9dc:	f000 fb98 	bl	802f110 <I2C_ITListenCplt>
 802e9e0:	e032      	b.n	802ea48 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 802e9e2:	68fb      	ldr	r3, [r7, #12]
 802e9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802e9e8:	b2db      	uxtb	r3, r3
 802e9ea:	2b29      	cmp	r3, #41	; 0x29
 802e9ec:	d10e      	bne.n	802ea0c <I2C_Slave_ISR_IT+0xb6>
 802e9ee:	697b      	ldr	r3, [r7, #20]
 802e9f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802e9f4:	d00a      	beq.n	802ea0c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802e9f6:	68fb      	ldr	r3, [r7, #12]
 802e9f8:	681b      	ldr	r3, [r3, #0]
 802e9fa:	2210      	movs	r2, #16
 802e9fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 802e9fe:	68f8      	ldr	r0, [r7, #12]
 802ea00:	f000 fcd3 	bl	802f3aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802ea04:	68f8      	ldr	r0, [r7, #12]
 802ea06:	f000 f92d 	bl	802ec64 <I2C_ITSlaveSeqCplt>
 802ea0a:	e01d      	b.n	802ea48 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ea0c:	68fb      	ldr	r3, [r7, #12]
 802ea0e:	681b      	ldr	r3, [r3, #0]
 802ea10:	2210      	movs	r2, #16
 802ea12:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 802ea14:	e096      	b.n	802eb44 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802ea16:	68fb      	ldr	r3, [r7, #12]
 802ea18:	681b      	ldr	r3, [r3, #0]
 802ea1a:	2210      	movs	r2, #16
 802ea1c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802ea1e:	68fb      	ldr	r3, [r7, #12]
 802ea20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ea22:	f043 0204 	orr.w	r2, r3, #4
 802ea26:	68fb      	ldr	r3, [r7, #12]
 802ea28:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 802ea2a:	697b      	ldr	r3, [r7, #20]
 802ea2c:	2b00      	cmp	r3, #0
 802ea2e:	d004      	beq.n	802ea3a <I2C_Slave_ISR_IT+0xe4>
 802ea30:	697b      	ldr	r3, [r7, #20]
 802ea32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802ea36:	f040 8085 	bne.w	802eb44 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 802ea3a:	68fb      	ldr	r3, [r7, #12]
 802ea3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ea3e:	4619      	mov	r1, r3
 802ea40:	68f8      	ldr	r0, [r7, #12]
 802ea42:	f000 fbbb 	bl	802f1bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 802ea46:	e07d      	b.n	802eb44 <I2C_Slave_ISR_IT+0x1ee>
 802ea48:	e07c      	b.n	802eb44 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802ea4a:	693b      	ldr	r3, [r7, #16]
 802ea4c:	089b      	lsrs	r3, r3, #2
 802ea4e:	f003 0301 	and.w	r3, r3, #1
 802ea52:	2b00      	cmp	r3, #0
 802ea54:	d030      	beq.n	802eab8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 802ea56:	687b      	ldr	r3, [r7, #4]
 802ea58:	089b      	lsrs	r3, r3, #2
 802ea5a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 802ea5e:	2b00      	cmp	r3, #0
 802ea60:	d02a      	beq.n	802eab8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 802ea62:	68fb      	ldr	r3, [r7, #12]
 802ea64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ea66:	b29b      	uxth	r3, r3
 802ea68:	2b00      	cmp	r3, #0
 802ea6a:	d018      	beq.n	802ea9e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802ea6c:	68fb      	ldr	r3, [r7, #12]
 802ea6e:	681b      	ldr	r3, [r3, #0]
 802ea70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802ea72:	68fb      	ldr	r3, [r7, #12]
 802ea74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea76:	b2d2      	uxtb	r2, r2
 802ea78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ea7a:	68fb      	ldr	r3, [r7, #12]
 802ea7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ea7e:	1c5a      	adds	r2, r3, #1
 802ea80:	68fb      	ldr	r3, [r7, #12]
 802ea82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 802ea84:	68fb      	ldr	r3, [r7, #12]
 802ea86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ea88:	3b01      	subs	r3, #1
 802ea8a:	b29a      	uxth	r2, r3
 802ea8c:	68fb      	ldr	r3, [r7, #12]
 802ea8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802ea90:	68fb      	ldr	r3, [r7, #12]
 802ea92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ea94:	b29b      	uxth	r3, r3
 802ea96:	3b01      	subs	r3, #1
 802ea98:	b29a      	uxth	r2, r3
 802ea9a:	68fb      	ldr	r3, [r7, #12]
 802ea9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 802ea9e:	68fb      	ldr	r3, [r7, #12]
 802eaa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eaa2:	b29b      	uxth	r3, r3
 802eaa4:	2b00      	cmp	r3, #0
 802eaa6:	d14f      	bne.n	802eb48 <I2C_Slave_ISR_IT+0x1f2>
 802eaa8:	697b      	ldr	r3, [r7, #20]
 802eaaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802eaae:	d04b      	beq.n	802eb48 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 802eab0:	68f8      	ldr	r0, [r7, #12]
 802eab2:	f000 f8d7 	bl	802ec64 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 802eab6:	e047      	b.n	802eb48 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802eab8:	693b      	ldr	r3, [r7, #16]
 802eaba:	08db      	lsrs	r3, r3, #3
 802eabc:	f003 0301 	and.w	r3, r3, #1
 802eac0:	2b00      	cmp	r3, #0
 802eac2:	d00a      	beq.n	802eada <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 802eac4:	687b      	ldr	r3, [r7, #4]
 802eac6:	08db      	lsrs	r3, r3, #3
 802eac8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 802eacc:	2b00      	cmp	r3, #0
 802eace:	d004      	beq.n	802eada <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 802ead0:	6939      	ldr	r1, [r7, #16]
 802ead2:	68f8      	ldr	r0, [r7, #12]
 802ead4:	f000 f842 	bl	802eb5c <I2C_ITAddrCplt>
 802ead8:	e037      	b.n	802eb4a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802eada:	693b      	ldr	r3, [r7, #16]
 802eadc:	085b      	lsrs	r3, r3, #1
 802eade:	f003 0301 	and.w	r3, r3, #1
 802eae2:	2b00      	cmp	r3, #0
 802eae4:	d031      	beq.n	802eb4a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 802eae6:	687b      	ldr	r3, [r7, #4]
 802eae8:	085b      	lsrs	r3, r3, #1
 802eaea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 802eaee:	2b00      	cmp	r3, #0
 802eaf0:	d02b      	beq.n	802eb4a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 802eaf2:	68fb      	ldr	r3, [r7, #12]
 802eaf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eaf6:	b29b      	uxth	r3, r3
 802eaf8:	2b00      	cmp	r3, #0
 802eafa:	d018      	beq.n	802eb2e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 802eafc:	68fb      	ldr	r3, [r7, #12]
 802eafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eb00:	781a      	ldrb	r2, [r3, #0]
 802eb02:	68fb      	ldr	r3, [r7, #12]
 802eb04:	681b      	ldr	r3, [r3, #0]
 802eb06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802eb08:	68fb      	ldr	r3, [r7, #12]
 802eb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802eb0c:	1c5a      	adds	r2, r3, #1
 802eb0e:	68fb      	ldr	r3, [r7, #12]
 802eb10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 802eb12:	68fb      	ldr	r3, [r7, #12]
 802eb14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802eb16:	b29b      	uxth	r3, r3
 802eb18:	3b01      	subs	r3, #1
 802eb1a:	b29a      	uxth	r2, r3
 802eb1c:	68fb      	ldr	r3, [r7, #12]
 802eb1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 802eb20:	68fb      	ldr	r3, [r7, #12]
 802eb22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802eb24:	3b01      	subs	r3, #1
 802eb26:	b29a      	uxth	r2, r3
 802eb28:	68fb      	ldr	r3, [r7, #12]
 802eb2a:	851a      	strh	r2, [r3, #40]	; 0x28
 802eb2c:	e00d      	b.n	802eb4a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 802eb2e:	697b      	ldr	r3, [r7, #20]
 802eb30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802eb34:	d002      	beq.n	802eb3c <I2C_Slave_ISR_IT+0x1e6>
 802eb36:	697b      	ldr	r3, [r7, #20]
 802eb38:	2b00      	cmp	r3, #0
 802eb3a:	d106      	bne.n	802eb4a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 802eb3c:	68f8      	ldr	r0, [r7, #12]
 802eb3e:	f000 f891 	bl	802ec64 <I2C_ITSlaveSeqCplt>
 802eb42:	e002      	b.n	802eb4a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 802eb44:	bf00      	nop
 802eb46:	e000      	b.n	802eb4a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 802eb48:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802eb4a:	68fb      	ldr	r3, [r7, #12]
 802eb4c:	2200      	movs	r2, #0
 802eb4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 802eb52:	2300      	movs	r3, #0
}
 802eb54:	4618      	mov	r0, r3
 802eb56:	3718      	adds	r7, #24
 802eb58:	46bd      	mov	sp, r7
 802eb5a:	bd80      	pop	{r7, pc}

0802eb5c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802eb5c:	b580      	push	{r7, lr}
 802eb5e:	b084      	sub	sp, #16
 802eb60:	af00      	add	r7, sp, #0
 802eb62:	6078      	str	r0, [r7, #4]
 802eb64:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802eb66:	687b      	ldr	r3, [r7, #4]
 802eb68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802eb6c:	b2db      	uxtb	r3, r3
 802eb6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802eb72:	2b28      	cmp	r3, #40	; 0x28
 802eb74:	d16a      	bne.n	802ec4c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 802eb76:	687b      	ldr	r3, [r7, #4]
 802eb78:	681b      	ldr	r3, [r3, #0]
 802eb7a:	699b      	ldr	r3, [r3, #24]
 802eb7c:	0c1b      	lsrs	r3, r3, #16
 802eb7e:	b2db      	uxtb	r3, r3
 802eb80:	f003 0301 	and.w	r3, r3, #1
 802eb84:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 802eb86:	687b      	ldr	r3, [r7, #4]
 802eb88:	681b      	ldr	r3, [r3, #0]
 802eb8a:	699b      	ldr	r3, [r3, #24]
 802eb8c:	0c1b      	lsrs	r3, r3, #16
 802eb8e:	b29b      	uxth	r3, r3
 802eb90:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802eb94:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 802eb96:	687b      	ldr	r3, [r7, #4]
 802eb98:	681b      	ldr	r3, [r3, #0]
 802eb9a:	689b      	ldr	r3, [r3, #8]
 802eb9c:	b29b      	uxth	r3, r3
 802eb9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802eba2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 802eba4:	687b      	ldr	r3, [r7, #4]
 802eba6:	681b      	ldr	r3, [r3, #0]
 802eba8:	68db      	ldr	r3, [r3, #12]
 802ebaa:	b29b      	uxth	r3, r3
 802ebac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 802ebb0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 802ebb2:	687b      	ldr	r3, [r7, #4]
 802ebb4:	68db      	ldr	r3, [r3, #12]
 802ebb6:	2b02      	cmp	r3, #2
 802ebb8:	d138      	bne.n	802ec2c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 802ebba:	897b      	ldrh	r3, [r7, #10]
 802ebbc:	09db      	lsrs	r3, r3, #7
 802ebbe:	b29a      	uxth	r2, r3
 802ebc0:	89bb      	ldrh	r3, [r7, #12]
 802ebc2:	4053      	eors	r3, r2
 802ebc4:	b29b      	uxth	r3, r3
 802ebc6:	f003 0306 	and.w	r3, r3, #6
 802ebca:	2b00      	cmp	r3, #0
 802ebcc:	d11c      	bne.n	802ec08 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 802ebce:	897b      	ldrh	r3, [r7, #10]
 802ebd0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 802ebd2:	687b      	ldr	r3, [r7, #4]
 802ebd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ebd6:	1c5a      	adds	r2, r3, #1
 802ebd8:	687b      	ldr	r3, [r7, #4]
 802ebda:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 802ebdc:	687b      	ldr	r3, [r7, #4]
 802ebde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802ebe0:	2b02      	cmp	r3, #2
 802ebe2:	d13b      	bne.n	802ec5c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 802ebe4:	687b      	ldr	r3, [r7, #4]
 802ebe6:	2200      	movs	r2, #0
 802ebe8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802ebea:	687b      	ldr	r3, [r7, #4]
 802ebec:	681b      	ldr	r3, [r3, #0]
 802ebee:	2208      	movs	r2, #8
 802ebf0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 802ebf2:	687b      	ldr	r3, [r7, #4]
 802ebf4:	2200      	movs	r2, #0
 802ebf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ebfa:	89ba      	ldrh	r2, [r7, #12]
 802ebfc:	7bfb      	ldrb	r3, [r7, #15]
 802ebfe:	4619      	mov	r1, r3
 802ec00:	6878      	ldr	r0, [r7, #4]
 802ec02:	f7ff fe7c 	bl	802e8fe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 802ec06:	e029      	b.n	802ec5c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 802ec08:	893b      	ldrh	r3, [r7, #8]
 802ec0a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802ec0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ec10:	6878      	ldr	r0, [r7, #4]
 802ec12:	f000 fc0c 	bl	802f42e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 802ec16:	687b      	ldr	r3, [r7, #4]
 802ec18:	2200      	movs	r2, #0
 802ec1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ec1e:	89ba      	ldrh	r2, [r7, #12]
 802ec20:	7bfb      	ldrb	r3, [r7, #15]
 802ec22:	4619      	mov	r1, r3
 802ec24:	6878      	ldr	r0, [r7, #4]
 802ec26:	f7ff fe6a 	bl	802e8fe <HAL_I2C_AddrCallback>
}
 802ec2a:	e017      	b.n	802ec5c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 802ec2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802ec30:	6878      	ldr	r0, [r7, #4]
 802ec32:	f000 fbfc 	bl	802f42e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 802ec36:	687b      	ldr	r3, [r7, #4]
 802ec38:	2200      	movs	r2, #0
 802ec3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 802ec3e:	89ba      	ldrh	r2, [r7, #12]
 802ec40:	7bfb      	ldrb	r3, [r7, #15]
 802ec42:	4619      	mov	r1, r3
 802ec44:	6878      	ldr	r0, [r7, #4]
 802ec46:	f7ff fe5a 	bl	802e8fe <HAL_I2C_AddrCallback>
}
 802ec4a:	e007      	b.n	802ec5c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802ec4c:	687b      	ldr	r3, [r7, #4]
 802ec4e:	681b      	ldr	r3, [r3, #0]
 802ec50:	2208      	movs	r2, #8
 802ec52:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 802ec54:	687b      	ldr	r3, [r7, #4]
 802ec56:	2200      	movs	r2, #0
 802ec58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 802ec5c:	bf00      	nop
 802ec5e:	3710      	adds	r7, #16
 802ec60:	46bd      	mov	sp, r7
 802ec62:	bd80      	pop	{r7, pc}

0802ec64 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 802ec64:	b580      	push	{r7, lr}
 802ec66:	b084      	sub	sp, #16
 802ec68:	af00      	add	r7, sp, #0
 802ec6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802ec6c:	687b      	ldr	r3, [r7, #4]
 802ec6e:	681b      	ldr	r3, [r3, #0]
 802ec70:	681b      	ldr	r3, [r3, #0]
 802ec72:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802ec74:	687b      	ldr	r3, [r7, #4]
 802ec76:	2200      	movs	r2, #0
 802ec78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802ec7c:	68fb      	ldr	r3, [r7, #12]
 802ec7e:	0b9b      	lsrs	r3, r3, #14
 802ec80:	f003 0301 	and.w	r3, r3, #1
 802ec84:	2b00      	cmp	r3, #0
 802ec86:	d008      	beq.n	802ec9a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802ec88:	687b      	ldr	r3, [r7, #4]
 802ec8a:	681b      	ldr	r3, [r3, #0]
 802ec8c:	681a      	ldr	r2, [r3, #0]
 802ec8e:	687b      	ldr	r3, [r7, #4]
 802ec90:	681b      	ldr	r3, [r3, #0]
 802ec92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802ec96:	601a      	str	r2, [r3, #0]
 802ec98:	e00d      	b.n	802ecb6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802ec9a:	68fb      	ldr	r3, [r7, #12]
 802ec9c:	0bdb      	lsrs	r3, r3, #15
 802ec9e:	f003 0301 	and.w	r3, r3, #1
 802eca2:	2b00      	cmp	r3, #0
 802eca4:	d007      	beq.n	802ecb6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802eca6:	687b      	ldr	r3, [r7, #4]
 802eca8:	681b      	ldr	r3, [r3, #0]
 802ecaa:	681a      	ldr	r2, [r3, #0]
 802ecac:	687b      	ldr	r3, [r7, #4]
 802ecae:	681b      	ldr	r3, [r3, #0]
 802ecb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802ecb4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 802ecb6:	687b      	ldr	r3, [r7, #4]
 802ecb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ecbc:	b2db      	uxtb	r3, r3
 802ecbe:	2b29      	cmp	r3, #41	; 0x29
 802ecc0:	d112      	bne.n	802ece8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802ecc2:	687b      	ldr	r3, [r7, #4]
 802ecc4:	2228      	movs	r2, #40	; 0x28
 802ecc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ecca:	687b      	ldr	r3, [r7, #4]
 802eccc:	2221      	movs	r2, #33	; 0x21
 802ecce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 802ecd0:	2101      	movs	r1, #1
 802ecd2:	6878      	ldr	r0, [r7, #4]
 802ecd4:	f000 fbab 	bl	802f42e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802ecd8:	687b      	ldr	r3, [r7, #4]
 802ecda:	2200      	movs	r2, #0
 802ecdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802ece0:	6878      	ldr	r0, [r7, #4]
 802ece2:	f7ff fdf8 	bl	802e8d6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802ece6:	e017      	b.n	802ed18 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 802ece8:	687b      	ldr	r3, [r7, #4]
 802ecea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ecee:	b2db      	uxtb	r3, r3
 802ecf0:	2b2a      	cmp	r3, #42	; 0x2a
 802ecf2:	d111      	bne.n	802ed18 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802ecf4:	687b      	ldr	r3, [r7, #4]
 802ecf6:	2228      	movs	r2, #40	; 0x28
 802ecf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802ecfc:	687b      	ldr	r3, [r7, #4]
 802ecfe:	2222      	movs	r2, #34	; 0x22
 802ed00:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 802ed02:	2102      	movs	r1, #2
 802ed04:	6878      	ldr	r0, [r7, #4]
 802ed06:	f000 fb92 	bl	802f42e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 802ed0a:	687b      	ldr	r3, [r7, #4]
 802ed0c:	2200      	movs	r2, #0
 802ed0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802ed12:	6878      	ldr	r0, [r7, #4]
 802ed14:	f7ff fde9 	bl	802e8ea <HAL_I2C_SlaveRxCpltCallback>
}
 802ed18:	bf00      	nop
 802ed1a:	3710      	adds	r7, #16
 802ed1c:	46bd      	mov	sp, r7
 802ed1e:	bd80      	pop	{r7, pc}

0802ed20 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802ed20:	b580      	push	{r7, lr}
 802ed22:	b086      	sub	sp, #24
 802ed24:	af00      	add	r7, sp, #0
 802ed26:	6078      	str	r0, [r7, #4]
 802ed28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 802ed2a:	687b      	ldr	r3, [r7, #4]
 802ed2c:	681b      	ldr	r3, [r3, #0]
 802ed2e:	681b      	ldr	r3, [r3, #0]
 802ed30:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 802ed32:	683b      	ldr	r3, [r7, #0]
 802ed34:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802ed36:	687b      	ldr	r3, [r7, #4]
 802ed38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802ed3c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802ed3e:	687b      	ldr	r3, [r7, #4]
 802ed40:	681b      	ldr	r3, [r3, #0]
 802ed42:	2220      	movs	r2, #32
 802ed44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802ed46:	7bfb      	ldrb	r3, [r7, #15]
 802ed48:	2b21      	cmp	r3, #33	; 0x21
 802ed4a:	d002      	beq.n	802ed52 <I2C_ITSlaveCplt+0x32>
 802ed4c:	7bfb      	ldrb	r3, [r7, #15]
 802ed4e:	2b29      	cmp	r3, #41	; 0x29
 802ed50:	d108      	bne.n	802ed64 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 802ed52:	f248 0101 	movw	r1, #32769	; 0x8001
 802ed56:	6878      	ldr	r0, [r7, #4]
 802ed58:	f000 fb69 	bl	802f42e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802ed5c:	687b      	ldr	r3, [r7, #4]
 802ed5e:	2221      	movs	r2, #33	; 0x21
 802ed60:	631a      	str	r2, [r3, #48]	; 0x30
 802ed62:	e00d      	b.n	802ed80 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802ed64:	7bfb      	ldrb	r3, [r7, #15]
 802ed66:	2b22      	cmp	r3, #34	; 0x22
 802ed68:	d002      	beq.n	802ed70 <I2C_ITSlaveCplt+0x50>
 802ed6a:	7bfb      	ldrb	r3, [r7, #15]
 802ed6c:	2b2a      	cmp	r3, #42	; 0x2a
 802ed6e:	d107      	bne.n	802ed80 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 802ed70:	f248 0102 	movw	r1, #32770	; 0x8002
 802ed74:	6878      	ldr	r0, [r7, #4]
 802ed76:	f000 fb5a 	bl	802f42e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802ed7a:	687b      	ldr	r3, [r7, #4]
 802ed7c:	2222      	movs	r2, #34	; 0x22
 802ed7e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 802ed80:	687b      	ldr	r3, [r7, #4]
 802ed82:	681b      	ldr	r3, [r3, #0]
 802ed84:	685a      	ldr	r2, [r3, #4]
 802ed86:	687b      	ldr	r3, [r7, #4]
 802ed88:	681b      	ldr	r3, [r3, #0]
 802ed8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802ed8e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 802ed90:	687b      	ldr	r3, [r7, #4]
 802ed92:	681b      	ldr	r3, [r3, #0]
 802ed94:	6859      	ldr	r1, [r3, #4]
 802ed96:	687b      	ldr	r3, [r7, #4]
 802ed98:	681a      	ldr	r2, [r3, #0]
 802ed9a:	4b80      	ldr	r3, [pc, #512]	; (802ef9c <I2C_ITSlaveCplt+0x27c>)
 802ed9c:	400b      	ands	r3, r1
 802ed9e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 802eda0:	6878      	ldr	r0, [r7, #4]
 802eda2:	f000 fb02 	bl	802f3aa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 802eda6:	693b      	ldr	r3, [r7, #16]
 802eda8:	0b9b      	lsrs	r3, r3, #14
 802edaa:	f003 0301 	and.w	r3, r3, #1
 802edae:	2b00      	cmp	r3, #0
 802edb0:	d07a      	beq.n	802eea8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802edb2:	687b      	ldr	r3, [r7, #4]
 802edb4:	681b      	ldr	r3, [r3, #0]
 802edb6:	681a      	ldr	r2, [r3, #0]
 802edb8:	687b      	ldr	r3, [r7, #4]
 802edba:	681b      	ldr	r3, [r3, #0]
 802edbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802edc0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 802edc2:	687b      	ldr	r3, [r7, #4]
 802edc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edc6:	2b00      	cmp	r3, #0
 802edc8:	f000 8111 	beq.w	802efee <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 802edcc:	687b      	ldr	r3, [r7, #4]
 802edce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edd0:	681b      	ldr	r3, [r3, #0]
 802edd2:	4a73      	ldr	r2, [pc, #460]	; (802efa0 <I2C_ITSlaveCplt+0x280>)
 802edd4:	4293      	cmp	r3, r2
 802edd6:	d059      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802edd8:	687b      	ldr	r3, [r7, #4]
 802edda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802eddc:	681b      	ldr	r3, [r3, #0]
 802edde:	4a71      	ldr	r2, [pc, #452]	; (802efa4 <I2C_ITSlaveCplt+0x284>)
 802ede0:	4293      	cmp	r3, r2
 802ede2:	d053      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ede4:	687b      	ldr	r3, [r7, #4]
 802ede6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ede8:	681b      	ldr	r3, [r3, #0]
 802edea:	4a6f      	ldr	r2, [pc, #444]	; (802efa8 <I2C_ITSlaveCplt+0x288>)
 802edec:	4293      	cmp	r3, r2
 802edee:	d04d      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802edf0:	687b      	ldr	r3, [r7, #4]
 802edf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802edf4:	681b      	ldr	r3, [r3, #0]
 802edf6:	4a6d      	ldr	r2, [pc, #436]	; (802efac <I2C_ITSlaveCplt+0x28c>)
 802edf8:	4293      	cmp	r3, r2
 802edfa:	d047      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802edfc:	687b      	ldr	r3, [r7, #4]
 802edfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee00:	681b      	ldr	r3, [r3, #0]
 802ee02:	4a6b      	ldr	r2, [pc, #428]	; (802efb0 <I2C_ITSlaveCplt+0x290>)
 802ee04:	4293      	cmp	r3, r2
 802ee06:	d041      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee08:	687b      	ldr	r3, [r7, #4]
 802ee0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee0c:	681b      	ldr	r3, [r3, #0]
 802ee0e:	4a69      	ldr	r2, [pc, #420]	; (802efb4 <I2C_ITSlaveCplt+0x294>)
 802ee10:	4293      	cmp	r3, r2
 802ee12:	d03b      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee14:	687b      	ldr	r3, [r7, #4]
 802ee16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee18:	681b      	ldr	r3, [r3, #0]
 802ee1a:	4a67      	ldr	r2, [pc, #412]	; (802efb8 <I2C_ITSlaveCplt+0x298>)
 802ee1c:	4293      	cmp	r3, r2
 802ee1e:	d035      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee20:	687b      	ldr	r3, [r7, #4]
 802ee22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee24:	681b      	ldr	r3, [r3, #0]
 802ee26:	4a65      	ldr	r2, [pc, #404]	; (802efbc <I2C_ITSlaveCplt+0x29c>)
 802ee28:	4293      	cmp	r3, r2
 802ee2a:	d02f      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee2c:	687b      	ldr	r3, [r7, #4]
 802ee2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee30:	681b      	ldr	r3, [r3, #0]
 802ee32:	4a63      	ldr	r2, [pc, #396]	; (802efc0 <I2C_ITSlaveCplt+0x2a0>)
 802ee34:	4293      	cmp	r3, r2
 802ee36:	d029      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee38:	687b      	ldr	r3, [r7, #4]
 802ee3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee3c:	681b      	ldr	r3, [r3, #0]
 802ee3e:	4a61      	ldr	r2, [pc, #388]	; (802efc4 <I2C_ITSlaveCplt+0x2a4>)
 802ee40:	4293      	cmp	r3, r2
 802ee42:	d023      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee44:	687b      	ldr	r3, [r7, #4]
 802ee46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee48:	681b      	ldr	r3, [r3, #0]
 802ee4a:	4a5f      	ldr	r2, [pc, #380]	; (802efc8 <I2C_ITSlaveCplt+0x2a8>)
 802ee4c:	4293      	cmp	r3, r2
 802ee4e:	d01d      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee50:	687b      	ldr	r3, [r7, #4]
 802ee52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee54:	681b      	ldr	r3, [r3, #0]
 802ee56:	4a5d      	ldr	r2, [pc, #372]	; (802efcc <I2C_ITSlaveCplt+0x2ac>)
 802ee58:	4293      	cmp	r3, r2
 802ee5a:	d017      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee5c:	687b      	ldr	r3, [r7, #4]
 802ee5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee60:	681b      	ldr	r3, [r3, #0]
 802ee62:	4a5b      	ldr	r2, [pc, #364]	; (802efd0 <I2C_ITSlaveCplt+0x2b0>)
 802ee64:	4293      	cmp	r3, r2
 802ee66:	d011      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee68:	687b      	ldr	r3, [r7, #4]
 802ee6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee6c:	681b      	ldr	r3, [r3, #0]
 802ee6e:	4a59      	ldr	r2, [pc, #356]	; (802efd4 <I2C_ITSlaveCplt+0x2b4>)
 802ee70:	4293      	cmp	r3, r2
 802ee72:	d00b      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee74:	687b      	ldr	r3, [r7, #4]
 802ee76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee78:	681b      	ldr	r3, [r3, #0]
 802ee7a:	4a57      	ldr	r2, [pc, #348]	; (802efd8 <I2C_ITSlaveCplt+0x2b8>)
 802ee7c:	4293      	cmp	r3, r2
 802ee7e:	d005      	beq.n	802ee8c <I2C_ITSlaveCplt+0x16c>
 802ee80:	687b      	ldr	r3, [r7, #4]
 802ee82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee84:	681b      	ldr	r3, [r3, #0]
 802ee86:	4a55      	ldr	r2, [pc, #340]	; (802efdc <I2C_ITSlaveCplt+0x2bc>)
 802ee88:	4293      	cmp	r3, r2
 802ee8a:	d105      	bne.n	802ee98 <I2C_ITSlaveCplt+0x178>
 802ee8c:	687b      	ldr	r3, [r7, #4]
 802ee8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee90:	681b      	ldr	r3, [r3, #0]
 802ee92:	685b      	ldr	r3, [r3, #4]
 802ee94:	b29b      	uxth	r3, r3
 802ee96:	e004      	b.n	802eea2 <I2C_ITSlaveCplt+0x182>
 802ee98:	687b      	ldr	r3, [r7, #4]
 802ee9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ee9c:	681b      	ldr	r3, [r3, #0]
 802ee9e:	685b      	ldr	r3, [r3, #4]
 802eea0:	b29b      	uxth	r3, r3
 802eea2:	687a      	ldr	r2, [r7, #4]
 802eea4:	8553      	strh	r3, [r2, #42]	; 0x2a
 802eea6:	e0a2      	b.n	802efee <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 802eea8:	693b      	ldr	r3, [r7, #16]
 802eeaa:	0bdb      	lsrs	r3, r3, #15
 802eeac:	f003 0301 	and.w	r3, r3, #1
 802eeb0:	2b00      	cmp	r3, #0
 802eeb2:	f000 809c 	beq.w	802efee <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802eeb6:	687b      	ldr	r3, [r7, #4]
 802eeb8:	681b      	ldr	r3, [r3, #0]
 802eeba:	681a      	ldr	r2, [r3, #0]
 802eebc:	687b      	ldr	r3, [r7, #4]
 802eebe:	681b      	ldr	r3, [r3, #0]
 802eec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802eec4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 802eec6:	687b      	ldr	r3, [r7, #4]
 802eec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eeca:	2b00      	cmp	r3, #0
 802eecc:	f000 808f 	beq.w	802efee <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 802eed0:	687b      	ldr	r3, [r7, #4]
 802eed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eed4:	681b      	ldr	r3, [r3, #0]
 802eed6:	4a32      	ldr	r2, [pc, #200]	; (802efa0 <I2C_ITSlaveCplt+0x280>)
 802eed8:	4293      	cmp	r3, r2
 802eeda:	d059      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802eedc:	687b      	ldr	r3, [r7, #4]
 802eede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eee0:	681b      	ldr	r3, [r3, #0]
 802eee2:	4a30      	ldr	r2, [pc, #192]	; (802efa4 <I2C_ITSlaveCplt+0x284>)
 802eee4:	4293      	cmp	r3, r2
 802eee6:	d053      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802eee8:	687b      	ldr	r3, [r7, #4]
 802eeea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eeec:	681b      	ldr	r3, [r3, #0]
 802eeee:	4a2e      	ldr	r2, [pc, #184]	; (802efa8 <I2C_ITSlaveCplt+0x288>)
 802eef0:	4293      	cmp	r3, r2
 802eef2:	d04d      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802eef4:	687b      	ldr	r3, [r7, #4]
 802eef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802eef8:	681b      	ldr	r3, [r3, #0]
 802eefa:	4a2c      	ldr	r2, [pc, #176]	; (802efac <I2C_ITSlaveCplt+0x28c>)
 802eefc:	4293      	cmp	r3, r2
 802eefe:	d047      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef00:	687b      	ldr	r3, [r7, #4]
 802ef02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef04:	681b      	ldr	r3, [r3, #0]
 802ef06:	4a2a      	ldr	r2, [pc, #168]	; (802efb0 <I2C_ITSlaveCplt+0x290>)
 802ef08:	4293      	cmp	r3, r2
 802ef0a:	d041      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef0c:	687b      	ldr	r3, [r7, #4]
 802ef0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef10:	681b      	ldr	r3, [r3, #0]
 802ef12:	4a28      	ldr	r2, [pc, #160]	; (802efb4 <I2C_ITSlaveCplt+0x294>)
 802ef14:	4293      	cmp	r3, r2
 802ef16:	d03b      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef18:	687b      	ldr	r3, [r7, #4]
 802ef1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef1c:	681b      	ldr	r3, [r3, #0]
 802ef1e:	4a26      	ldr	r2, [pc, #152]	; (802efb8 <I2C_ITSlaveCplt+0x298>)
 802ef20:	4293      	cmp	r3, r2
 802ef22:	d035      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef24:	687b      	ldr	r3, [r7, #4]
 802ef26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef28:	681b      	ldr	r3, [r3, #0]
 802ef2a:	4a24      	ldr	r2, [pc, #144]	; (802efbc <I2C_ITSlaveCplt+0x29c>)
 802ef2c:	4293      	cmp	r3, r2
 802ef2e:	d02f      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef30:	687b      	ldr	r3, [r7, #4]
 802ef32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef34:	681b      	ldr	r3, [r3, #0]
 802ef36:	4a22      	ldr	r2, [pc, #136]	; (802efc0 <I2C_ITSlaveCplt+0x2a0>)
 802ef38:	4293      	cmp	r3, r2
 802ef3a:	d029      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef3c:	687b      	ldr	r3, [r7, #4]
 802ef3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef40:	681b      	ldr	r3, [r3, #0]
 802ef42:	4a20      	ldr	r2, [pc, #128]	; (802efc4 <I2C_ITSlaveCplt+0x2a4>)
 802ef44:	4293      	cmp	r3, r2
 802ef46:	d023      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef48:	687b      	ldr	r3, [r7, #4]
 802ef4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef4c:	681b      	ldr	r3, [r3, #0]
 802ef4e:	4a1e      	ldr	r2, [pc, #120]	; (802efc8 <I2C_ITSlaveCplt+0x2a8>)
 802ef50:	4293      	cmp	r3, r2
 802ef52:	d01d      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef54:	687b      	ldr	r3, [r7, #4]
 802ef56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef58:	681b      	ldr	r3, [r3, #0]
 802ef5a:	4a1c      	ldr	r2, [pc, #112]	; (802efcc <I2C_ITSlaveCplt+0x2ac>)
 802ef5c:	4293      	cmp	r3, r2
 802ef5e:	d017      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef60:	687b      	ldr	r3, [r7, #4]
 802ef62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef64:	681b      	ldr	r3, [r3, #0]
 802ef66:	4a1a      	ldr	r2, [pc, #104]	; (802efd0 <I2C_ITSlaveCplt+0x2b0>)
 802ef68:	4293      	cmp	r3, r2
 802ef6a:	d011      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef6c:	687b      	ldr	r3, [r7, #4]
 802ef6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef70:	681b      	ldr	r3, [r3, #0]
 802ef72:	4a18      	ldr	r2, [pc, #96]	; (802efd4 <I2C_ITSlaveCplt+0x2b4>)
 802ef74:	4293      	cmp	r3, r2
 802ef76:	d00b      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef78:	687b      	ldr	r3, [r7, #4]
 802ef7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef7c:	681b      	ldr	r3, [r3, #0]
 802ef7e:	4a16      	ldr	r2, [pc, #88]	; (802efd8 <I2C_ITSlaveCplt+0x2b8>)
 802ef80:	4293      	cmp	r3, r2
 802ef82:	d005      	beq.n	802ef90 <I2C_ITSlaveCplt+0x270>
 802ef84:	687b      	ldr	r3, [r7, #4]
 802ef86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef88:	681b      	ldr	r3, [r3, #0]
 802ef8a:	4a14      	ldr	r2, [pc, #80]	; (802efdc <I2C_ITSlaveCplt+0x2bc>)
 802ef8c:	4293      	cmp	r3, r2
 802ef8e:	d127      	bne.n	802efe0 <I2C_ITSlaveCplt+0x2c0>
 802ef90:	687b      	ldr	r3, [r7, #4]
 802ef92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ef94:	681b      	ldr	r3, [r3, #0]
 802ef96:	685b      	ldr	r3, [r3, #4]
 802ef98:	b29b      	uxth	r3, r3
 802ef9a:	e026      	b.n	802efea <I2C_ITSlaveCplt+0x2ca>
 802ef9c:	fe00e800 	.word	0xfe00e800
 802efa0:	40020010 	.word	0x40020010
 802efa4:	40020028 	.word	0x40020028
 802efa8:	40020040 	.word	0x40020040
 802efac:	40020058 	.word	0x40020058
 802efb0:	40020070 	.word	0x40020070
 802efb4:	40020088 	.word	0x40020088
 802efb8:	400200a0 	.word	0x400200a0
 802efbc:	400200b8 	.word	0x400200b8
 802efc0:	40020410 	.word	0x40020410
 802efc4:	40020428 	.word	0x40020428
 802efc8:	40020440 	.word	0x40020440
 802efcc:	40020458 	.word	0x40020458
 802efd0:	40020470 	.word	0x40020470
 802efd4:	40020488 	.word	0x40020488
 802efd8:	400204a0 	.word	0x400204a0
 802efdc:	400204b8 	.word	0x400204b8
 802efe0:	687b      	ldr	r3, [r7, #4]
 802efe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802efe4:	681b      	ldr	r3, [r3, #0]
 802efe6:	685b      	ldr	r3, [r3, #4]
 802efe8:	b29b      	uxth	r3, r3
 802efea:	687a      	ldr	r2, [r7, #4]
 802efec:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 802efee:	697b      	ldr	r3, [r7, #20]
 802eff0:	089b      	lsrs	r3, r3, #2
 802eff2:	f003 0301 	and.w	r3, r3, #1
 802eff6:	2b00      	cmp	r3, #0
 802eff8:	d020      	beq.n	802f03c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 802effa:	697b      	ldr	r3, [r7, #20]
 802effc:	f023 0304 	bic.w	r3, r3, #4
 802f000:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802f002:	687b      	ldr	r3, [r7, #4]
 802f004:	681b      	ldr	r3, [r3, #0]
 802f006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f008:	687b      	ldr	r3, [r7, #4]
 802f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f00c:	b2d2      	uxtb	r2, r2
 802f00e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802f010:	687b      	ldr	r3, [r7, #4]
 802f012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f014:	1c5a      	adds	r2, r3, #1
 802f016:	687b      	ldr	r3, [r7, #4]
 802f018:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802f01a:	687b      	ldr	r3, [r7, #4]
 802f01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f01e:	2b00      	cmp	r3, #0
 802f020:	d00c      	beq.n	802f03c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 802f022:	687b      	ldr	r3, [r7, #4]
 802f024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f026:	3b01      	subs	r3, #1
 802f028:	b29a      	uxth	r2, r3
 802f02a:	687b      	ldr	r3, [r7, #4]
 802f02c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802f02e:	687b      	ldr	r3, [r7, #4]
 802f030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f032:	b29b      	uxth	r3, r3
 802f034:	3b01      	subs	r3, #1
 802f036:	b29a      	uxth	r2, r3
 802f038:	687b      	ldr	r3, [r7, #4]
 802f03a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 802f03c:	687b      	ldr	r3, [r7, #4]
 802f03e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f040:	b29b      	uxth	r3, r3
 802f042:	2b00      	cmp	r3, #0
 802f044:	d005      	beq.n	802f052 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802f046:	687b      	ldr	r3, [r7, #4]
 802f048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f04a:	f043 0204 	orr.w	r2, r3, #4
 802f04e:	687b      	ldr	r3, [r7, #4]
 802f050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 802f052:	687b      	ldr	r3, [r7, #4]
 802f054:	2200      	movs	r2, #0
 802f056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802f05a:	687b      	ldr	r3, [r7, #4]
 802f05c:	2200      	movs	r2, #0
 802f05e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802f060:	687b      	ldr	r3, [r7, #4]
 802f062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f064:	2b00      	cmp	r3, #0
 802f066:	d010      	beq.n	802f08a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 802f068:	687b      	ldr	r3, [r7, #4]
 802f06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f06c:	4619      	mov	r1, r3
 802f06e:	6878      	ldr	r0, [r7, #4]
 802f070:	f000 f8a4 	bl	802f1bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 802f074:	687b      	ldr	r3, [r7, #4]
 802f076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f07a:	b2db      	uxtb	r3, r3
 802f07c:	2b28      	cmp	r3, #40	; 0x28
 802f07e:	d141      	bne.n	802f104 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 802f080:	6979      	ldr	r1, [r7, #20]
 802f082:	6878      	ldr	r0, [r7, #4]
 802f084:	f000 f844 	bl	802f110 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802f088:	e03c      	b.n	802f104 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 802f08a:	687b      	ldr	r3, [r7, #4]
 802f08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802f08e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802f092:	d014      	beq.n	802f0be <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 802f094:	6878      	ldr	r0, [r7, #4]
 802f096:	f7ff fde5 	bl	802ec64 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802f09a:	687b      	ldr	r3, [r7, #4]
 802f09c:	4a1b      	ldr	r2, [pc, #108]	; (802f10c <I2C_ITSlaveCplt+0x3ec>)
 802f09e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 802f0a0:	687b      	ldr	r3, [r7, #4]
 802f0a2:	2220      	movs	r2, #32
 802f0a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f0a8:	687b      	ldr	r3, [r7, #4]
 802f0aa:	2200      	movs	r2, #0
 802f0ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f0ae:	687b      	ldr	r3, [r7, #4]
 802f0b0:	2200      	movs	r2, #0
 802f0b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 802f0b6:	6878      	ldr	r0, [r7, #4]
 802f0b8:	f7ff fc2f 	bl	802e91a <HAL_I2C_ListenCpltCallback>
}
 802f0bc:	e022      	b.n	802f104 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802f0be:	687b      	ldr	r3, [r7, #4]
 802f0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f0c4:	b2db      	uxtb	r3, r3
 802f0c6:	2b22      	cmp	r3, #34	; 0x22
 802f0c8:	d10e      	bne.n	802f0e8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 802f0ca:	687b      	ldr	r3, [r7, #4]
 802f0cc:	2220      	movs	r2, #32
 802f0ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f0d2:	687b      	ldr	r3, [r7, #4]
 802f0d4:	2200      	movs	r2, #0
 802f0d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f0d8:	687b      	ldr	r3, [r7, #4]
 802f0da:	2200      	movs	r2, #0
 802f0dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 802f0e0:	6878      	ldr	r0, [r7, #4]
 802f0e2:	f7ff fc02 	bl	802e8ea <HAL_I2C_SlaveRxCpltCallback>
}
 802f0e6:	e00d      	b.n	802f104 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 802f0e8:	687b      	ldr	r3, [r7, #4]
 802f0ea:	2220      	movs	r2, #32
 802f0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f0f0:	687b      	ldr	r3, [r7, #4]
 802f0f2:	2200      	movs	r2, #0
 802f0f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f0f6:	687b      	ldr	r3, [r7, #4]
 802f0f8:	2200      	movs	r2, #0
 802f0fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 802f0fe:	6878      	ldr	r0, [r7, #4]
 802f100:	f7ff fbe9 	bl	802e8d6 <HAL_I2C_SlaveTxCpltCallback>
}
 802f104:	bf00      	nop
 802f106:	3718      	adds	r7, #24
 802f108:	46bd      	mov	sp, r7
 802f10a:	bd80      	pop	{r7, pc}
 802f10c:	ffff0000 	.word	0xffff0000

0802f110 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 802f110:	b580      	push	{r7, lr}
 802f112:	b082      	sub	sp, #8
 802f114:	af00      	add	r7, sp, #0
 802f116:	6078      	str	r0, [r7, #4]
 802f118:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802f11a:	687b      	ldr	r3, [r7, #4]
 802f11c:	4a26      	ldr	r2, [pc, #152]	; (802f1b8 <I2C_ITListenCplt+0xa8>)
 802f11e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 802f120:	687b      	ldr	r3, [r7, #4]
 802f122:	2200      	movs	r2, #0
 802f124:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 802f126:	687b      	ldr	r3, [r7, #4]
 802f128:	2220      	movs	r2, #32
 802f12a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802f12e:	687b      	ldr	r3, [r7, #4]
 802f130:	2200      	movs	r2, #0
 802f132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 802f136:	687b      	ldr	r3, [r7, #4]
 802f138:	2200      	movs	r2, #0
 802f13a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 802f13c:	683b      	ldr	r3, [r7, #0]
 802f13e:	089b      	lsrs	r3, r3, #2
 802f140:	f003 0301 	and.w	r3, r3, #1
 802f144:	2b00      	cmp	r3, #0
 802f146:	d022      	beq.n	802f18e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 802f148:	687b      	ldr	r3, [r7, #4]
 802f14a:	681b      	ldr	r3, [r3, #0]
 802f14c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802f14e:	687b      	ldr	r3, [r7, #4]
 802f150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f152:	b2d2      	uxtb	r2, r2
 802f154:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802f156:	687b      	ldr	r3, [r7, #4]
 802f158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f15a:	1c5a      	adds	r2, r3, #1
 802f15c:	687b      	ldr	r3, [r7, #4]
 802f15e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 802f160:	687b      	ldr	r3, [r7, #4]
 802f162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f164:	2b00      	cmp	r3, #0
 802f166:	d012      	beq.n	802f18e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 802f168:	687b      	ldr	r3, [r7, #4]
 802f16a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802f16c:	3b01      	subs	r3, #1
 802f16e:	b29a      	uxth	r2, r3
 802f170:	687b      	ldr	r3, [r7, #4]
 802f172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 802f174:	687b      	ldr	r3, [r7, #4]
 802f176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802f178:	b29b      	uxth	r3, r3
 802f17a:	3b01      	subs	r3, #1
 802f17c:	b29a      	uxth	r2, r3
 802f17e:	687b      	ldr	r3, [r7, #4]
 802f180:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802f182:	687b      	ldr	r3, [r7, #4]
 802f184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802f186:	f043 0204 	orr.w	r2, r3, #4
 802f18a:	687b      	ldr	r3, [r7, #4]
 802f18c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f18e:	f248 0103 	movw	r1, #32771	; 0x8003
 802f192:	6878      	ldr	r0, [r7, #4]
 802f194:	f000 f94b 	bl	802f42e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802f198:	687b      	ldr	r3, [r7, #4]
 802f19a:	681b      	ldr	r3, [r3, #0]
 802f19c:	2210      	movs	r2, #16
 802f19e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 802f1a0:	687b      	ldr	r3, [r7, #4]
 802f1a2:	2200      	movs	r2, #0
 802f1a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 802f1a8:	6878      	ldr	r0, [r7, #4]
 802f1aa:	f7ff fbb6 	bl	802e91a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 802f1ae:	bf00      	nop
 802f1b0:	3708      	adds	r7, #8
 802f1b2:	46bd      	mov	sp, r7
 802f1b4:	bd80      	pop	{r7, pc}
 802f1b6:	bf00      	nop
 802f1b8:	ffff0000 	.word	0xffff0000

0802f1bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 802f1bc:	b580      	push	{r7, lr}
 802f1be:	b084      	sub	sp, #16
 802f1c0:	af00      	add	r7, sp, #0
 802f1c2:	6078      	str	r0, [r7, #4]
 802f1c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 802f1c6:	687b      	ldr	r3, [r7, #4]
 802f1c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f1cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 802f1ce:	687b      	ldr	r3, [r7, #4]
 802f1d0:	2200      	movs	r2, #0
 802f1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802f1d6:	687b      	ldr	r3, [r7, #4]
 802f1d8:	4a5d      	ldr	r2, [pc, #372]	; (802f350 <I2C_ITError+0x194>)
 802f1da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 802f1dc:	687b      	ldr	r3, [r7, #4]
 802f1de:	2200      	movs	r2, #0
 802f1e0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 802f1e2:	687b      	ldr	r3, [r7, #4]
 802f1e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802f1e6:	683b      	ldr	r3, [r7, #0]
 802f1e8:	431a      	orrs	r2, r3
 802f1ea:	687b      	ldr	r3, [r7, #4]
 802f1ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 802f1ee:	7bfb      	ldrb	r3, [r7, #15]
 802f1f0:	2b28      	cmp	r3, #40	; 0x28
 802f1f2:	d005      	beq.n	802f200 <I2C_ITError+0x44>
 802f1f4:	7bfb      	ldrb	r3, [r7, #15]
 802f1f6:	2b29      	cmp	r3, #41	; 0x29
 802f1f8:	d002      	beq.n	802f200 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 802f1fa:	7bfb      	ldrb	r3, [r7, #15]
 802f1fc:	2b2a      	cmp	r3, #42	; 0x2a
 802f1fe:	d10b      	bne.n	802f218 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f200:	2103      	movs	r1, #3
 802f202:	6878      	ldr	r0, [r7, #4]
 802f204:	f000 f913 	bl	802f42e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 802f208:	687b      	ldr	r3, [r7, #4]
 802f20a:	2228      	movs	r2, #40	; 0x28
 802f20c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 802f210:	687b      	ldr	r3, [r7, #4]
 802f212:	4a50      	ldr	r2, [pc, #320]	; (802f354 <I2C_ITError+0x198>)
 802f214:	635a      	str	r2, [r3, #52]	; 0x34
 802f216:	e011      	b.n	802f23c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 802f218:	f248 0103 	movw	r1, #32771	; 0x8003
 802f21c:	6878      	ldr	r0, [r7, #4]
 802f21e:	f000 f906 	bl	802f42e <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 802f222:	687b      	ldr	r3, [r7, #4]
 802f224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f228:	b2db      	uxtb	r3, r3
 802f22a:	2b60      	cmp	r3, #96	; 0x60
 802f22c:	d003      	beq.n	802f236 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 802f22e:	687b      	ldr	r3, [r7, #4]
 802f230:	2220      	movs	r2, #32
 802f232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 802f236:	687b      	ldr	r3, [r7, #4]
 802f238:	2200      	movs	r2, #0
 802f23a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 802f23c:	687b      	ldr	r3, [r7, #4]
 802f23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802f240:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 802f242:	687b      	ldr	r3, [r7, #4]
 802f244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f246:	2b00      	cmp	r3, #0
 802f248:	d039      	beq.n	802f2be <I2C_ITError+0x102>
 802f24a:	68bb      	ldr	r3, [r7, #8]
 802f24c:	2b11      	cmp	r3, #17
 802f24e:	d002      	beq.n	802f256 <I2C_ITError+0x9a>
 802f250:	68bb      	ldr	r3, [r7, #8]
 802f252:	2b21      	cmp	r3, #33	; 0x21
 802f254:	d133      	bne.n	802f2be <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 802f256:	687b      	ldr	r3, [r7, #4]
 802f258:	681b      	ldr	r3, [r3, #0]
 802f25a:	681b      	ldr	r3, [r3, #0]
 802f25c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802f260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802f264:	d107      	bne.n	802f276 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 802f266:	687b      	ldr	r3, [r7, #4]
 802f268:	681b      	ldr	r3, [r3, #0]
 802f26a:	681a      	ldr	r2, [r3, #0]
 802f26c:	687b      	ldr	r3, [r7, #4]
 802f26e:	681b      	ldr	r3, [r3, #0]
 802f270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802f274:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f276:	687b      	ldr	r3, [r7, #4]
 802f278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f27a:	4618      	mov	r0, r3
 802f27c:	f7fe fc54 	bl	802db28 <HAL_DMA_GetState>
 802f280:	4603      	mov	r3, r0
 802f282:	2b01      	cmp	r3, #1
 802f284:	d017      	beq.n	802f2b6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802f286:	687b      	ldr	r3, [r7, #4]
 802f288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f28a:	4a33      	ldr	r2, [pc, #204]	; (802f358 <I2C_ITError+0x19c>)
 802f28c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f28e:	687b      	ldr	r3, [r7, #4]
 802f290:	2200      	movs	r2, #0
 802f292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802f296:	687b      	ldr	r3, [r7, #4]
 802f298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f29a:	4618      	mov	r0, r3
 802f29c:	f7fd fad4 	bl	802c848 <HAL_DMA_Abort_IT>
 802f2a0:	4603      	mov	r3, r0
 802f2a2:	2b00      	cmp	r3, #0
 802f2a4:	d04d      	beq.n	802f342 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802f2a6:	687b      	ldr	r3, [r7, #4]
 802f2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f2ac:	687a      	ldr	r2, [r7, #4]
 802f2ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802f2b0:	4610      	mov	r0, r2
 802f2b2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f2b4:	e045      	b.n	802f342 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f2b6:	6878      	ldr	r0, [r7, #4]
 802f2b8:	f000 f850 	bl	802f35c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f2bc:	e041      	b.n	802f342 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 802f2be:	687b      	ldr	r3, [r7, #4]
 802f2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f2c2:	2b00      	cmp	r3, #0
 802f2c4:	d039      	beq.n	802f33a <I2C_ITError+0x17e>
 802f2c6:	68bb      	ldr	r3, [r7, #8]
 802f2c8:	2b12      	cmp	r3, #18
 802f2ca:	d002      	beq.n	802f2d2 <I2C_ITError+0x116>
 802f2cc:	68bb      	ldr	r3, [r7, #8]
 802f2ce:	2b22      	cmp	r3, #34	; 0x22
 802f2d0:	d133      	bne.n	802f33a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 802f2d2:	687b      	ldr	r3, [r7, #4]
 802f2d4:	681b      	ldr	r3, [r3, #0]
 802f2d6:	681b      	ldr	r3, [r3, #0]
 802f2d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802f2dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802f2e0:	d107      	bne.n	802f2f2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 802f2e2:	687b      	ldr	r3, [r7, #4]
 802f2e4:	681b      	ldr	r3, [r3, #0]
 802f2e6:	681a      	ldr	r2, [r3, #0]
 802f2e8:	687b      	ldr	r3, [r7, #4]
 802f2ea:	681b      	ldr	r3, [r3, #0]
 802f2ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802f2f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f2f2:	687b      	ldr	r3, [r7, #4]
 802f2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f2f6:	4618      	mov	r0, r3
 802f2f8:	f7fe fc16 	bl	802db28 <HAL_DMA_GetState>
 802f2fc:	4603      	mov	r3, r0
 802f2fe:	2b01      	cmp	r3, #1
 802f300:	d017      	beq.n	802f332 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802f302:	687b      	ldr	r3, [r7, #4]
 802f304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f306:	4a14      	ldr	r2, [pc, #80]	; (802f358 <I2C_ITError+0x19c>)
 802f308:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802f30a:	687b      	ldr	r3, [r7, #4]
 802f30c:	2200      	movs	r2, #0
 802f30e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 802f312:	687b      	ldr	r3, [r7, #4]
 802f314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f316:	4618      	mov	r0, r3
 802f318:	f7fd fa96 	bl	802c848 <HAL_DMA_Abort_IT>
 802f31c:	4603      	mov	r3, r0
 802f31e:	2b00      	cmp	r3, #0
 802f320:	d011      	beq.n	802f346 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 802f322:	687b      	ldr	r3, [r7, #4]
 802f324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802f328:	687a      	ldr	r2, [r7, #4]
 802f32a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 802f32c:	4610      	mov	r0, r2
 802f32e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f330:	e009      	b.n	802f346 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 802f332:	6878      	ldr	r0, [r7, #4]
 802f334:	f000 f812 	bl	802f35c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f338:	e005      	b.n	802f346 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 802f33a:	6878      	ldr	r0, [r7, #4]
 802f33c:	f000 f80e 	bl	802f35c <I2C_TreatErrorCallback>
  }
}
 802f340:	e002      	b.n	802f348 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802f342:	bf00      	nop
 802f344:	e000      	b.n	802f348 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802f346:	bf00      	nop
}
 802f348:	bf00      	nop
 802f34a:	3710      	adds	r7, #16
 802f34c:	46bd      	mov	sp, r7
 802f34e:	bd80      	pop	{r7, pc}
 802f350:	ffff0000 	.word	0xffff0000
 802f354:	0802e957 	.word	0x0802e957
 802f358:	0802f3f3 	.word	0x0802f3f3

0802f35c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802f35c:	b580      	push	{r7, lr}
 802f35e:	b082      	sub	sp, #8
 802f360:	af00      	add	r7, sp, #0
 802f362:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 802f364:	687b      	ldr	r3, [r7, #4]
 802f366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f36a:	b2db      	uxtb	r3, r3
 802f36c:	2b60      	cmp	r3, #96	; 0x60
 802f36e:	d10e      	bne.n	802f38e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 802f370:	687b      	ldr	r3, [r7, #4]
 802f372:	2220      	movs	r2, #32
 802f374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 802f378:	687b      	ldr	r3, [r7, #4]
 802f37a:	2200      	movs	r2, #0
 802f37c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f37e:	687b      	ldr	r3, [r7, #4]
 802f380:	2200      	movs	r2, #0
 802f382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802f386:	6878      	ldr	r0, [r7, #4]
 802f388:	f7ff fadb 	bl	802e942 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802f38c:	e009      	b.n	802f3a2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 802f38e:	687b      	ldr	r3, [r7, #4]
 802f390:	2200      	movs	r2, #0
 802f392:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 802f394:	687b      	ldr	r3, [r7, #4]
 802f396:	2200      	movs	r2, #0
 802f398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 802f39c:	6878      	ldr	r0, [r7, #4]
 802f39e:	f7ff fac6 	bl	802e92e <HAL_I2C_ErrorCallback>
}
 802f3a2:	bf00      	nop
 802f3a4:	3708      	adds	r7, #8
 802f3a6:	46bd      	mov	sp, r7
 802f3a8:	bd80      	pop	{r7, pc}

0802f3aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 802f3aa:	b480      	push	{r7}
 802f3ac:	b083      	sub	sp, #12
 802f3ae:	af00      	add	r7, sp, #0
 802f3b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 802f3b2:	687b      	ldr	r3, [r7, #4]
 802f3b4:	681b      	ldr	r3, [r3, #0]
 802f3b6:	699b      	ldr	r3, [r3, #24]
 802f3b8:	f003 0302 	and.w	r3, r3, #2
 802f3bc:	2b02      	cmp	r3, #2
 802f3be:	d103      	bne.n	802f3c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 802f3c0:	687b      	ldr	r3, [r7, #4]
 802f3c2:	681b      	ldr	r3, [r3, #0]
 802f3c4:	2200      	movs	r2, #0
 802f3c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802f3c8:	687b      	ldr	r3, [r7, #4]
 802f3ca:	681b      	ldr	r3, [r3, #0]
 802f3cc:	699b      	ldr	r3, [r3, #24]
 802f3ce:	f003 0301 	and.w	r3, r3, #1
 802f3d2:	2b01      	cmp	r3, #1
 802f3d4:	d007      	beq.n	802f3e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 802f3d6:	687b      	ldr	r3, [r7, #4]
 802f3d8:	681b      	ldr	r3, [r3, #0]
 802f3da:	699a      	ldr	r2, [r3, #24]
 802f3dc:	687b      	ldr	r3, [r7, #4]
 802f3de:	681b      	ldr	r3, [r3, #0]
 802f3e0:	f042 0201 	orr.w	r2, r2, #1
 802f3e4:	619a      	str	r2, [r3, #24]
  }
}
 802f3e6:	bf00      	nop
 802f3e8:	370c      	adds	r7, #12
 802f3ea:	46bd      	mov	sp, r7
 802f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f3f0:	4770      	bx	lr

0802f3f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 802f3f2:	b580      	push	{r7, lr}
 802f3f4:	b084      	sub	sp, #16
 802f3f6:	af00      	add	r7, sp, #0
 802f3f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 802f3fa:	687b      	ldr	r3, [r7, #4]
 802f3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f3fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 802f400:	68fb      	ldr	r3, [r7, #12]
 802f402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f404:	2b00      	cmp	r3, #0
 802f406:	d003      	beq.n	802f410 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 802f408:	68fb      	ldr	r3, [r7, #12]
 802f40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f40c:	2200      	movs	r2, #0
 802f40e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 802f410:	68fb      	ldr	r3, [r7, #12]
 802f412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f414:	2b00      	cmp	r3, #0
 802f416:	d003      	beq.n	802f420 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 802f418:	68fb      	ldr	r3, [r7, #12]
 802f41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f41c:	2200      	movs	r2, #0
 802f41e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 802f420:	68f8      	ldr	r0, [r7, #12]
 802f422:	f7ff ff9b 	bl	802f35c <I2C_TreatErrorCallback>
}
 802f426:	bf00      	nop
 802f428:	3710      	adds	r7, #16
 802f42a:	46bd      	mov	sp, r7
 802f42c:	bd80      	pop	{r7, pc}

0802f42e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 802f42e:	b480      	push	{r7}
 802f430:	b085      	sub	sp, #20
 802f432:	af00      	add	r7, sp, #0
 802f434:	6078      	str	r0, [r7, #4]
 802f436:	460b      	mov	r3, r1
 802f438:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 802f43a:	2300      	movs	r3, #0
 802f43c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 802f43e:	887b      	ldrh	r3, [r7, #2]
 802f440:	f003 0301 	and.w	r3, r3, #1
 802f444:	2b00      	cmp	r3, #0
 802f446:	d00f      	beq.n	802f468 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 802f448:	68fb      	ldr	r3, [r7, #12]
 802f44a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 802f44e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f450:	687b      	ldr	r3, [r7, #4]
 802f452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f456:	b2db      	uxtb	r3, r3
 802f458:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f45c:	2b28      	cmp	r3, #40	; 0x28
 802f45e:	d003      	beq.n	802f468 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f460:	68fb      	ldr	r3, [r7, #12]
 802f462:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f466:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 802f468:	887b      	ldrh	r3, [r7, #2]
 802f46a:	f003 0302 	and.w	r3, r3, #2
 802f46e:	2b00      	cmp	r3, #0
 802f470:	d00f      	beq.n	802f492 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 802f472:	68fb      	ldr	r3, [r7, #12]
 802f474:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 802f478:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 802f47a:	687b      	ldr	r3, [r7, #4]
 802f47c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f480:	b2db      	uxtb	r3, r3
 802f482:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802f486:	2b28      	cmp	r3, #40	; 0x28
 802f488:	d003      	beq.n	802f492 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f48a:	68fb      	ldr	r3, [r7, #12]
 802f48c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 802f490:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 802f492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802f496:	2b00      	cmp	r3, #0
 802f498:	da03      	bge.n	802f4a2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 802f49a:	68fb      	ldr	r3, [r7, #12]
 802f49c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 802f4a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 802f4a2:	887b      	ldrh	r3, [r7, #2]
 802f4a4:	2b10      	cmp	r3, #16
 802f4a6:	d103      	bne.n	802f4b0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 802f4a8:	68fb      	ldr	r3, [r7, #12]
 802f4aa:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 802f4ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 802f4b0:	887b      	ldrh	r3, [r7, #2]
 802f4b2:	2b20      	cmp	r3, #32
 802f4b4:	d103      	bne.n	802f4be <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 802f4b6:	68fb      	ldr	r3, [r7, #12]
 802f4b8:	f043 0320 	orr.w	r3, r3, #32
 802f4bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 802f4be:	887b      	ldrh	r3, [r7, #2]
 802f4c0:	2b40      	cmp	r3, #64	; 0x40
 802f4c2:	d103      	bne.n	802f4cc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 802f4c4:	68fb      	ldr	r3, [r7, #12]
 802f4c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802f4ca:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 802f4cc:	687b      	ldr	r3, [r7, #4]
 802f4ce:	681b      	ldr	r3, [r3, #0]
 802f4d0:	6819      	ldr	r1, [r3, #0]
 802f4d2:	68fb      	ldr	r3, [r7, #12]
 802f4d4:	43da      	mvns	r2, r3
 802f4d6:	687b      	ldr	r3, [r7, #4]
 802f4d8:	681b      	ldr	r3, [r3, #0]
 802f4da:	400a      	ands	r2, r1
 802f4dc:	601a      	str	r2, [r3, #0]
}
 802f4de:	bf00      	nop
 802f4e0:	3714      	adds	r7, #20
 802f4e2:	46bd      	mov	sp, r7
 802f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f4e8:	4770      	bx	lr

0802f4ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 802f4ea:	b480      	push	{r7}
 802f4ec:	b083      	sub	sp, #12
 802f4ee:	af00      	add	r7, sp, #0
 802f4f0:	6078      	str	r0, [r7, #4]
 802f4f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f4f4:	687b      	ldr	r3, [r7, #4]
 802f4f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f4fa:	b2db      	uxtb	r3, r3
 802f4fc:	2b20      	cmp	r3, #32
 802f4fe:	d138      	bne.n	802f572 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f500:	687b      	ldr	r3, [r7, #4]
 802f502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f506:	2b01      	cmp	r3, #1
 802f508:	d101      	bne.n	802f50e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 802f50a:	2302      	movs	r3, #2
 802f50c:	e032      	b.n	802f574 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 802f50e:	687b      	ldr	r3, [r7, #4]
 802f510:	2201      	movs	r2, #1
 802f512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f516:	687b      	ldr	r3, [r7, #4]
 802f518:	2224      	movs	r2, #36	; 0x24
 802f51a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f51e:	687b      	ldr	r3, [r7, #4]
 802f520:	681b      	ldr	r3, [r3, #0]
 802f522:	681a      	ldr	r2, [r3, #0]
 802f524:	687b      	ldr	r3, [r7, #4]
 802f526:	681b      	ldr	r3, [r3, #0]
 802f528:	f022 0201 	bic.w	r2, r2, #1
 802f52c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 802f52e:	687b      	ldr	r3, [r7, #4]
 802f530:	681b      	ldr	r3, [r3, #0]
 802f532:	681a      	ldr	r2, [r3, #0]
 802f534:	687b      	ldr	r3, [r7, #4]
 802f536:	681b      	ldr	r3, [r3, #0]
 802f538:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802f53c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 802f53e:	687b      	ldr	r3, [r7, #4]
 802f540:	681b      	ldr	r3, [r3, #0]
 802f542:	6819      	ldr	r1, [r3, #0]
 802f544:	687b      	ldr	r3, [r7, #4]
 802f546:	681b      	ldr	r3, [r3, #0]
 802f548:	683a      	ldr	r2, [r7, #0]
 802f54a:	430a      	orrs	r2, r1
 802f54c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f54e:	687b      	ldr	r3, [r7, #4]
 802f550:	681b      	ldr	r3, [r3, #0]
 802f552:	681a      	ldr	r2, [r3, #0]
 802f554:	687b      	ldr	r3, [r7, #4]
 802f556:	681b      	ldr	r3, [r3, #0]
 802f558:	f042 0201 	orr.w	r2, r2, #1
 802f55c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f55e:	687b      	ldr	r3, [r7, #4]
 802f560:	2220      	movs	r2, #32
 802f562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f566:	687b      	ldr	r3, [r7, #4]
 802f568:	2200      	movs	r2, #0
 802f56a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f56e:	2300      	movs	r3, #0
 802f570:	e000      	b.n	802f574 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 802f572:	2302      	movs	r3, #2
  }
}
 802f574:	4618      	mov	r0, r3
 802f576:	370c      	adds	r7, #12
 802f578:	46bd      	mov	sp, r7
 802f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f57e:	4770      	bx	lr

0802f580 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 802f580:	b480      	push	{r7}
 802f582:	b085      	sub	sp, #20
 802f584:	af00      	add	r7, sp, #0
 802f586:	6078      	str	r0, [r7, #4]
 802f588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802f58a:	687b      	ldr	r3, [r7, #4]
 802f58c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 802f590:	b2db      	uxtb	r3, r3
 802f592:	2b20      	cmp	r3, #32
 802f594:	d139      	bne.n	802f60a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802f596:	687b      	ldr	r3, [r7, #4]
 802f598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 802f59c:	2b01      	cmp	r3, #1
 802f59e:	d101      	bne.n	802f5a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 802f5a0:	2302      	movs	r3, #2
 802f5a2:	e033      	b.n	802f60c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 802f5a4:	687b      	ldr	r3, [r7, #4]
 802f5a6:	2201      	movs	r2, #1
 802f5a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 802f5ac:	687b      	ldr	r3, [r7, #4]
 802f5ae:	2224      	movs	r2, #36	; 0x24
 802f5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 802f5b4:	687b      	ldr	r3, [r7, #4]
 802f5b6:	681b      	ldr	r3, [r3, #0]
 802f5b8:	681a      	ldr	r2, [r3, #0]
 802f5ba:	687b      	ldr	r3, [r7, #4]
 802f5bc:	681b      	ldr	r3, [r3, #0]
 802f5be:	f022 0201 	bic.w	r2, r2, #1
 802f5c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 802f5c4:	687b      	ldr	r3, [r7, #4]
 802f5c6:	681b      	ldr	r3, [r3, #0]
 802f5c8:	681b      	ldr	r3, [r3, #0]
 802f5ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 802f5cc:	68fb      	ldr	r3, [r7, #12]
 802f5ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 802f5d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 802f5d4:	683b      	ldr	r3, [r7, #0]
 802f5d6:	021b      	lsls	r3, r3, #8
 802f5d8:	68fa      	ldr	r2, [r7, #12]
 802f5da:	4313      	orrs	r3, r2
 802f5dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 802f5de:	687b      	ldr	r3, [r7, #4]
 802f5e0:	681b      	ldr	r3, [r3, #0]
 802f5e2:	68fa      	ldr	r2, [r7, #12]
 802f5e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 802f5e6:	687b      	ldr	r3, [r7, #4]
 802f5e8:	681b      	ldr	r3, [r3, #0]
 802f5ea:	681a      	ldr	r2, [r3, #0]
 802f5ec:	687b      	ldr	r3, [r7, #4]
 802f5ee:	681b      	ldr	r3, [r3, #0]
 802f5f0:	f042 0201 	orr.w	r2, r2, #1
 802f5f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802f5f6:	687b      	ldr	r3, [r7, #4]
 802f5f8:	2220      	movs	r2, #32
 802f5fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802f5fe:	687b      	ldr	r3, [r7, #4]
 802f600:	2200      	movs	r2, #0
 802f602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 802f606:	2300      	movs	r3, #0
 802f608:	e000      	b.n	802f60c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 802f60a:	2302      	movs	r3, #2
  }
}
 802f60c:	4618      	mov	r0, r3
 802f60e:	3714      	adds	r7, #20
 802f610:	46bd      	mov	sp, r7
 802f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f616:	4770      	bx	lr

0802f618 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 802f618:	b5f0      	push	{r4, r5, r6, r7, lr}
 802f61a:	b08f      	sub	sp, #60	; 0x3c
 802f61c:	af0a      	add	r7, sp, #40	; 0x28
 802f61e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 802f620:	687b      	ldr	r3, [r7, #4]
 802f622:	2b00      	cmp	r3, #0
 802f624:	d101      	bne.n	802f62a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 802f626:	2301      	movs	r3, #1
 802f628:	e116      	b.n	802f858 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 802f62a:	687b      	ldr	r3, [r7, #4]
 802f62c:	681b      	ldr	r3, [r3, #0]
 802f62e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 802f630:	687b      	ldr	r3, [r7, #4]
 802f632:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 802f636:	b2db      	uxtb	r3, r3
 802f638:	2b00      	cmp	r3, #0
 802f63a:	d106      	bne.n	802f64a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 802f63c:	687b      	ldr	r3, [r7, #4]
 802f63e:	2200      	movs	r2, #0
 802f640:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 802f644:	6878      	ldr	r0, [r7, #4]
 802f646:	f00c f82f 	bl	803b6a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 802f64a:	687b      	ldr	r3, [r7, #4]
 802f64c:	2203      	movs	r2, #3
 802f64e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802f652:	68bb      	ldr	r3, [r7, #8]
 802f654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802f656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802f65a:	2b00      	cmp	r3, #0
 802f65c:	d102      	bne.n	802f664 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 802f65e:	687b      	ldr	r3, [r7, #4]
 802f660:	2200      	movs	r2, #0
 802f662:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 802f664:	687b      	ldr	r3, [r7, #4]
 802f666:	681b      	ldr	r3, [r3, #0]
 802f668:	4618      	mov	r0, r3
 802f66a:	f008 fb78 	bl	8037d5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f66e:	687b      	ldr	r3, [r7, #4]
 802f670:	681b      	ldr	r3, [r3, #0]
 802f672:	603b      	str	r3, [r7, #0]
 802f674:	687e      	ldr	r6, [r7, #4]
 802f676:	466d      	mov	r5, sp
 802f678:	f106 0410 	add.w	r4, r6, #16
 802f67c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f67e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f684:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f688:	e885 0003 	stmia.w	r5, {r0, r1}
 802f68c:	1d33      	adds	r3, r6, #4
 802f68e:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f690:	6838      	ldr	r0, [r7, #0]
 802f692:	f008 fa43 	bl	8037b1c <USB_CoreInit>
 802f696:	4603      	mov	r3, r0
 802f698:	2b00      	cmp	r3, #0
 802f69a:	d005      	beq.n	802f6a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f69c:	687b      	ldr	r3, [r7, #4]
 802f69e:	2202      	movs	r2, #2
 802f6a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f6a4:	2301      	movs	r3, #1
 802f6a6:	e0d7      	b.n	802f858 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 802f6a8:	687b      	ldr	r3, [r7, #4]
 802f6aa:	681b      	ldr	r3, [r3, #0]
 802f6ac:	2100      	movs	r1, #0
 802f6ae:	4618      	mov	r0, r3
 802f6b0:	f008 fb66 	bl	8037d80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f6b4:	2300      	movs	r3, #0
 802f6b6:	73fb      	strb	r3, [r7, #15]
 802f6b8:	e04a      	b.n	802f750 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 802f6ba:	7bfa      	ldrb	r2, [r7, #15]
 802f6bc:	6879      	ldr	r1, [r7, #4]
 802f6be:	4613      	mov	r3, r2
 802f6c0:	00db      	lsls	r3, r3, #3
 802f6c2:	4413      	add	r3, r2
 802f6c4:	009b      	lsls	r3, r3, #2
 802f6c6:	440b      	add	r3, r1
 802f6c8:	333d      	adds	r3, #61	; 0x3d
 802f6ca:	2201      	movs	r2, #1
 802f6cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 802f6ce:	7bfa      	ldrb	r2, [r7, #15]
 802f6d0:	6879      	ldr	r1, [r7, #4]
 802f6d2:	4613      	mov	r3, r2
 802f6d4:	00db      	lsls	r3, r3, #3
 802f6d6:	4413      	add	r3, r2
 802f6d8:	009b      	lsls	r3, r3, #2
 802f6da:	440b      	add	r3, r1
 802f6dc:	333c      	adds	r3, #60	; 0x3c
 802f6de:	7bfa      	ldrb	r2, [r7, #15]
 802f6e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 802f6e2:	7bfa      	ldrb	r2, [r7, #15]
 802f6e4:	7bfb      	ldrb	r3, [r7, #15]
 802f6e6:	b298      	uxth	r0, r3
 802f6e8:	6879      	ldr	r1, [r7, #4]
 802f6ea:	4613      	mov	r3, r2
 802f6ec:	00db      	lsls	r3, r3, #3
 802f6ee:	4413      	add	r3, r2
 802f6f0:	009b      	lsls	r3, r3, #2
 802f6f2:	440b      	add	r3, r1
 802f6f4:	3344      	adds	r3, #68	; 0x44
 802f6f6:	4602      	mov	r2, r0
 802f6f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 802f6fa:	7bfa      	ldrb	r2, [r7, #15]
 802f6fc:	6879      	ldr	r1, [r7, #4]
 802f6fe:	4613      	mov	r3, r2
 802f700:	00db      	lsls	r3, r3, #3
 802f702:	4413      	add	r3, r2
 802f704:	009b      	lsls	r3, r3, #2
 802f706:	440b      	add	r3, r1
 802f708:	3340      	adds	r3, #64	; 0x40
 802f70a:	2200      	movs	r2, #0
 802f70c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 802f70e:	7bfa      	ldrb	r2, [r7, #15]
 802f710:	6879      	ldr	r1, [r7, #4]
 802f712:	4613      	mov	r3, r2
 802f714:	00db      	lsls	r3, r3, #3
 802f716:	4413      	add	r3, r2
 802f718:	009b      	lsls	r3, r3, #2
 802f71a:	440b      	add	r3, r1
 802f71c:	3348      	adds	r3, #72	; 0x48
 802f71e:	2200      	movs	r2, #0
 802f720:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 802f722:	7bfa      	ldrb	r2, [r7, #15]
 802f724:	6879      	ldr	r1, [r7, #4]
 802f726:	4613      	mov	r3, r2
 802f728:	00db      	lsls	r3, r3, #3
 802f72a:	4413      	add	r3, r2
 802f72c:	009b      	lsls	r3, r3, #2
 802f72e:	440b      	add	r3, r1
 802f730:	334c      	adds	r3, #76	; 0x4c
 802f732:	2200      	movs	r2, #0
 802f734:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 802f736:	7bfa      	ldrb	r2, [r7, #15]
 802f738:	6879      	ldr	r1, [r7, #4]
 802f73a:	4613      	mov	r3, r2
 802f73c:	00db      	lsls	r3, r3, #3
 802f73e:	4413      	add	r3, r2
 802f740:	009b      	lsls	r3, r3, #2
 802f742:	440b      	add	r3, r1
 802f744:	3354      	adds	r3, #84	; 0x54
 802f746:	2200      	movs	r2, #0
 802f748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f74a:	7bfb      	ldrb	r3, [r7, #15]
 802f74c:	3301      	adds	r3, #1
 802f74e:	73fb      	strb	r3, [r7, #15]
 802f750:	7bfa      	ldrb	r2, [r7, #15]
 802f752:	687b      	ldr	r3, [r7, #4]
 802f754:	685b      	ldr	r3, [r3, #4]
 802f756:	429a      	cmp	r2, r3
 802f758:	d3af      	bcc.n	802f6ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f75a:	2300      	movs	r3, #0
 802f75c:	73fb      	strb	r3, [r7, #15]
 802f75e:	e044      	b.n	802f7ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 802f760:	7bfa      	ldrb	r2, [r7, #15]
 802f762:	6879      	ldr	r1, [r7, #4]
 802f764:	4613      	mov	r3, r2
 802f766:	00db      	lsls	r3, r3, #3
 802f768:	4413      	add	r3, r2
 802f76a:	009b      	lsls	r3, r3, #2
 802f76c:	440b      	add	r3, r1
 802f76e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 802f772:	2200      	movs	r2, #0
 802f774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 802f776:	7bfa      	ldrb	r2, [r7, #15]
 802f778:	6879      	ldr	r1, [r7, #4]
 802f77a:	4613      	mov	r3, r2
 802f77c:	00db      	lsls	r3, r3, #3
 802f77e:	4413      	add	r3, r2
 802f780:	009b      	lsls	r3, r3, #2
 802f782:	440b      	add	r3, r1
 802f784:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 802f788:	7bfa      	ldrb	r2, [r7, #15]
 802f78a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 802f78c:	7bfa      	ldrb	r2, [r7, #15]
 802f78e:	6879      	ldr	r1, [r7, #4]
 802f790:	4613      	mov	r3, r2
 802f792:	00db      	lsls	r3, r3, #3
 802f794:	4413      	add	r3, r2
 802f796:	009b      	lsls	r3, r3, #2
 802f798:	440b      	add	r3, r1
 802f79a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802f79e:	2200      	movs	r2, #0
 802f7a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 802f7a2:	7bfa      	ldrb	r2, [r7, #15]
 802f7a4:	6879      	ldr	r1, [r7, #4]
 802f7a6:	4613      	mov	r3, r2
 802f7a8:	00db      	lsls	r3, r3, #3
 802f7aa:	4413      	add	r3, r2
 802f7ac:	009b      	lsls	r3, r3, #2
 802f7ae:	440b      	add	r3, r1
 802f7b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 802f7b4:	2200      	movs	r2, #0
 802f7b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 802f7b8:	7bfa      	ldrb	r2, [r7, #15]
 802f7ba:	6879      	ldr	r1, [r7, #4]
 802f7bc:	4613      	mov	r3, r2
 802f7be:	00db      	lsls	r3, r3, #3
 802f7c0:	4413      	add	r3, r2
 802f7c2:	009b      	lsls	r3, r3, #2
 802f7c4:	440b      	add	r3, r1
 802f7c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802f7ca:	2200      	movs	r2, #0
 802f7cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 802f7ce:	7bfa      	ldrb	r2, [r7, #15]
 802f7d0:	6879      	ldr	r1, [r7, #4]
 802f7d2:	4613      	mov	r3, r2
 802f7d4:	00db      	lsls	r3, r3, #3
 802f7d6:	4413      	add	r3, r2
 802f7d8:	009b      	lsls	r3, r3, #2
 802f7da:	440b      	add	r3, r1
 802f7dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 802f7e0:	2200      	movs	r2, #0
 802f7e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802f7e4:	7bfb      	ldrb	r3, [r7, #15]
 802f7e6:	3301      	adds	r3, #1
 802f7e8:	73fb      	strb	r3, [r7, #15]
 802f7ea:	7bfa      	ldrb	r2, [r7, #15]
 802f7ec:	687b      	ldr	r3, [r7, #4]
 802f7ee:	685b      	ldr	r3, [r3, #4]
 802f7f0:	429a      	cmp	r2, r3
 802f7f2:	d3b5      	bcc.n	802f760 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 802f7f4:	687b      	ldr	r3, [r7, #4]
 802f7f6:	681b      	ldr	r3, [r3, #0]
 802f7f8:	603b      	str	r3, [r7, #0]
 802f7fa:	687e      	ldr	r6, [r7, #4]
 802f7fc:	466d      	mov	r5, sp
 802f7fe:	f106 0410 	add.w	r4, r6, #16
 802f802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802f808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802f80a:	e894 0003 	ldmia.w	r4, {r0, r1}
 802f80e:	e885 0003 	stmia.w	r5, {r0, r1}
 802f812:	1d33      	adds	r3, r6, #4
 802f814:	cb0e      	ldmia	r3, {r1, r2, r3}
 802f816:	6838      	ldr	r0, [r7, #0]
 802f818:	f008 fafe 	bl	8037e18 <USB_DevInit>
 802f81c:	4603      	mov	r3, r0
 802f81e:	2b00      	cmp	r3, #0
 802f820:	d005      	beq.n	802f82e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 802f822:	687b      	ldr	r3, [r7, #4]
 802f824:	2202      	movs	r2, #2
 802f826:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 802f82a:	2301      	movs	r3, #1
 802f82c:	e014      	b.n	802f858 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 802f82e:	687b      	ldr	r3, [r7, #4]
 802f830:	2200      	movs	r2, #0
 802f832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 802f836:	687b      	ldr	r3, [r7, #4]
 802f838:	2201      	movs	r2, #1
 802f83a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 802f83e:	687b      	ldr	r3, [r7, #4]
 802f840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802f842:	2b01      	cmp	r3, #1
 802f844:	d102      	bne.n	802f84c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 802f846:	6878      	ldr	r0, [r7, #4]
 802f848:	f001 f98c 	bl	8030b64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 802f84c:	687b      	ldr	r3, [r7, #4]
 802f84e:	681b      	ldr	r3, [r3, #0]
 802f850:	4618      	mov	r0, r3
 802f852:	f009 fc4c 	bl	80390ee <USB_DevDisconnect>

  return HAL_OK;
 802f856:	2300      	movs	r3, #0
}
 802f858:	4618      	mov	r0, r3
 802f85a:	3714      	adds	r7, #20
 802f85c:	46bd      	mov	sp, r7
 802f85e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802f860 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 802f860:	b580      	push	{r7, lr}
 802f862:	b084      	sub	sp, #16
 802f864:	af00      	add	r7, sp, #0
 802f866:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f868:	687b      	ldr	r3, [r7, #4]
 802f86a:	681b      	ldr	r3, [r3, #0]
 802f86c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 802f86e:	687b      	ldr	r3, [r7, #4]
 802f870:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 802f874:	2b01      	cmp	r3, #1
 802f876:	d101      	bne.n	802f87c <HAL_PCD_Start+0x1c>
 802f878:	2302      	movs	r3, #2
 802f87a:	e020      	b.n	802f8be <HAL_PCD_Start+0x5e>
 802f87c:	687b      	ldr	r3, [r7, #4]
 802f87e:	2201      	movs	r2, #1
 802f880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f884:	687b      	ldr	r3, [r7, #4]
 802f886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802f888:	2b01      	cmp	r3, #1
 802f88a:	d109      	bne.n	802f8a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 802f88c:	687b      	ldr	r3, [r7, #4]
 802f88e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 802f890:	2b01      	cmp	r3, #1
 802f892:	d005      	beq.n	802f8a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802f894:	68fb      	ldr	r3, [r7, #12]
 802f896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802f898:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802f89c:	68fb      	ldr	r3, [r7, #12]
 802f89e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 802f8a0:	687b      	ldr	r3, [r7, #4]
 802f8a2:	681b      	ldr	r3, [r3, #0]
 802f8a4:	4618      	mov	r0, r3
 802f8a6:	f008 fa49 	bl	8037d3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 802f8aa:	687b      	ldr	r3, [r7, #4]
 802f8ac:	681b      	ldr	r3, [r3, #0]
 802f8ae:	4618      	mov	r0, r3
 802f8b0:	f009 fbfc 	bl	80390ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 802f8b4:	687b      	ldr	r3, [r7, #4]
 802f8b6:	2200      	movs	r2, #0
 802f8b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 802f8bc:	2300      	movs	r3, #0
}
 802f8be:	4618      	mov	r0, r3
 802f8c0:	3710      	adds	r7, #16
 802f8c2:	46bd      	mov	sp, r7
 802f8c4:	bd80      	pop	{r7, pc}

0802f8c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 802f8c6:	b590      	push	{r4, r7, lr}
 802f8c8:	b08d      	sub	sp, #52	; 0x34
 802f8ca:	af00      	add	r7, sp, #0
 802f8cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 802f8ce:	687b      	ldr	r3, [r7, #4]
 802f8d0:	681b      	ldr	r3, [r3, #0]
 802f8d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802f8d4:	6a3b      	ldr	r3, [r7, #32]
 802f8d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 802f8d8:	687b      	ldr	r3, [r7, #4]
 802f8da:	681b      	ldr	r3, [r3, #0]
 802f8dc:	4618      	mov	r0, r3
 802f8de:	f009 fcba 	bl	8039256 <USB_GetMode>
 802f8e2:	4603      	mov	r3, r0
 802f8e4:	2b00      	cmp	r3, #0
 802f8e6:	f040 84b7 	bne.w	8030258 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 802f8ea:	687b      	ldr	r3, [r7, #4]
 802f8ec:	681b      	ldr	r3, [r3, #0]
 802f8ee:	4618      	mov	r0, r3
 802f8f0:	f009 fc1e 	bl	8039130 <USB_ReadInterrupts>
 802f8f4:	4603      	mov	r3, r0
 802f8f6:	2b00      	cmp	r3, #0
 802f8f8:	f000 84ad 	beq.w	8030256 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 802f8fc:	69fb      	ldr	r3, [r7, #28]
 802f8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802f902:	689b      	ldr	r3, [r3, #8]
 802f904:	0a1b      	lsrs	r3, r3, #8
 802f906:	f3c3 020d 	ubfx	r2, r3, #0, #14
 802f90a:	687b      	ldr	r3, [r7, #4]
 802f90c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 802f910:	687b      	ldr	r3, [r7, #4]
 802f912:	681b      	ldr	r3, [r3, #0]
 802f914:	4618      	mov	r0, r3
 802f916:	f009 fc0b 	bl	8039130 <USB_ReadInterrupts>
 802f91a:	4603      	mov	r3, r0
 802f91c:	f003 0302 	and.w	r3, r3, #2
 802f920:	2b02      	cmp	r3, #2
 802f922:	d107      	bne.n	802f934 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 802f924:	687b      	ldr	r3, [r7, #4]
 802f926:	681b      	ldr	r3, [r3, #0]
 802f928:	695a      	ldr	r2, [r3, #20]
 802f92a:	687b      	ldr	r3, [r7, #4]
 802f92c:	681b      	ldr	r3, [r3, #0]
 802f92e:	f002 0202 	and.w	r2, r2, #2
 802f932:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 802f934:	687b      	ldr	r3, [r7, #4]
 802f936:	681b      	ldr	r3, [r3, #0]
 802f938:	4618      	mov	r0, r3
 802f93a:	f009 fbf9 	bl	8039130 <USB_ReadInterrupts>
 802f93e:	4603      	mov	r3, r0
 802f940:	f003 0310 	and.w	r3, r3, #16
 802f944:	2b10      	cmp	r3, #16
 802f946:	d161      	bne.n	802fa0c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f948:	687b      	ldr	r3, [r7, #4]
 802f94a:	681b      	ldr	r3, [r3, #0]
 802f94c:	699a      	ldr	r2, [r3, #24]
 802f94e:	687b      	ldr	r3, [r7, #4]
 802f950:	681b      	ldr	r3, [r3, #0]
 802f952:	f022 0210 	bic.w	r2, r2, #16
 802f956:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 802f958:	6a3b      	ldr	r3, [r7, #32]
 802f95a:	6a1b      	ldr	r3, [r3, #32]
 802f95c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 802f95e:	69bb      	ldr	r3, [r7, #24]
 802f960:	f003 020f 	and.w	r2, r3, #15
 802f964:	4613      	mov	r3, r2
 802f966:	00db      	lsls	r3, r3, #3
 802f968:	4413      	add	r3, r2
 802f96a:	009b      	lsls	r3, r3, #2
 802f96c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802f970:	687a      	ldr	r2, [r7, #4]
 802f972:	4413      	add	r3, r2
 802f974:	3304      	adds	r3, #4
 802f976:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 802f978:	69bb      	ldr	r3, [r7, #24]
 802f97a:	0c5b      	lsrs	r3, r3, #17
 802f97c:	f003 030f 	and.w	r3, r3, #15
 802f980:	2b02      	cmp	r3, #2
 802f982:	d124      	bne.n	802f9ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 802f984:	69ba      	ldr	r2, [r7, #24]
 802f986:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 802f98a:	4013      	ands	r3, r2
 802f98c:	2b00      	cmp	r3, #0
 802f98e:	d035      	beq.n	802f9fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f990:	697b      	ldr	r3, [r7, #20]
 802f992:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 802f994:	69bb      	ldr	r3, [r7, #24]
 802f996:	091b      	lsrs	r3, r3, #4
 802f998:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 802f99a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f99e:	b29b      	uxth	r3, r3
 802f9a0:	461a      	mov	r2, r3
 802f9a2:	6a38      	ldr	r0, [r7, #32]
 802f9a4:	f009 fa30 	bl	8038e08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f9a8:	697b      	ldr	r3, [r7, #20]
 802f9aa:	691a      	ldr	r2, [r3, #16]
 802f9ac:	69bb      	ldr	r3, [r7, #24]
 802f9ae:	091b      	lsrs	r3, r3, #4
 802f9b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f9b4:	441a      	add	r2, r3
 802f9b6:	697b      	ldr	r3, [r7, #20]
 802f9b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f9ba:	697b      	ldr	r3, [r7, #20]
 802f9bc:	6a1a      	ldr	r2, [r3, #32]
 802f9be:	69bb      	ldr	r3, [r7, #24]
 802f9c0:	091b      	lsrs	r3, r3, #4
 802f9c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f9c6:	441a      	add	r2, r3
 802f9c8:	697b      	ldr	r3, [r7, #20]
 802f9ca:	621a      	str	r2, [r3, #32]
 802f9cc:	e016      	b.n	802f9fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 802f9ce:	69bb      	ldr	r3, [r7, #24]
 802f9d0:	0c5b      	lsrs	r3, r3, #17
 802f9d2:	f003 030f 	and.w	r3, r3, #15
 802f9d6:	2b06      	cmp	r3, #6
 802f9d8:	d110      	bne.n	802f9fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 802f9da:	687b      	ldr	r3, [r7, #4]
 802f9dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802f9e0:	2208      	movs	r2, #8
 802f9e2:	4619      	mov	r1, r3
 802f9e4:	6a38      	ldr	r0, [r7, #32]
 802f9e6:	f009 fa0f 	bl	8038e08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 802f9ea:	697b      	ldr	r3, [r7, #20]
 802f9ec:	6a1a      	ldr	r2, [r3, #32]
 802f9ee:	69bb      	ldr	r3, [r7, #24]
 802f9f0:	091b      	lsrs	r3, r3, #4
 802f9f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802f9f6:	441a      	add	r2, r3
 802f9f8:	697b      	ldr	r3, [r7, #20]
 802f9fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802f9fc:	687b      	ldr	r3, [r7, #4]
 802f9fe:	681b      	ldr	r3, [r3, #0]
 802fa00:	699a      	ldr	r2, [r3, #24]
 802fa02:	687b      	ldr	r3, [r7, #4]
 802fa04:	681b      	ldr	r3, [r3, #0]
 802fa06:	f042 0210 	orr.w	r2, r2, #16
 802fa0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 802fa0c:	687b      	ldr	r3, [r7, #4]
 802fa0e:	681b      	ldr	r3, [r3, #0]
 802fa10:	4618      	mov	r0, r3
 802fa12:	f009 fb8d 	bl	8039130 <USB_ReadInterrupts>
 802fa16:	4603      	mov	r3, r0
 802fa18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802fa1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 802fa20:	f040 80a7 	bne.w	802fb72 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 802fa24:	2300      	movs	r3, #0
 802fa26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 802fa28:	687b      	ldr	r3, [r7, #4]
 802fa2a:	681b      	ldr	r3, [r3, #0]
 802fa2c:	4618      	mov	r0, r3
 802fa2e:	f009 fb92 	bl	8039156 <USB_ReadDevAllOutEpInterrupt>
 802fa32:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 802fa34:	e099      	b.n	802fb6a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 802fa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fa38:	f003 0301 	and.w	r3, r3, #1
 802fa3c:	2b00      	cmp	r3, #0
 802fa3e:	f000 808e 	beq.w	802fb5e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802fa42:	687b      	ldr	r3, [r7, #4]
 802fa44:	681b      	ldr	r3, [r3, #0]
 802fa46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fa48:	b2d2      	uxtb	r2, r2
 802fa4a:	4611      	mov	r1, r2
 802fa4c:	4618      	mov	r0, r3
 802fa4e:	f009 fbb6 	bl	80391be <USB_ReadDevOutEPInterrupt>
 802fa52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 802fa54:	693b      	ldr	r3, [r7, #16]
 802fa56:	f003 0301 	and.w	r3, r3, #1
 802fa5a:	2b00      	cmp	r3, #0
 802fa5c:	d00c      	beq.n	802fa78 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 802fa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa60:	015a      	lsls	r2, r3, #5
 802fa62:	69fb      	ldr	r3, [r7, #28]
 802fa64:	4413      	add	r3, r2
 802fa66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa6a:	461a      	mov	r2, r3
 802fa6c:	2301      	movs	r3, #1
 802fa6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 802fa70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fa72:	6878      	ldr	r0, [r7, #4]
 802fa74:	f000 fef0 	bl	8030858 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 802fa78:	693b      	ldr	r3, [r7, #16]
 802fa7a:	f003 0308 	and.w	r3, r3, #8
 802fa7e:	2b00      	cmp	r3, #0
 802fa80:	d00c      	beq.n	802fa9c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 802fa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fa84:	015a      	lsls	r2, r3, #5
 802fa86:	69fb      	ldr	r3, [r7, #28]
 802fa88:	4413      	add	r3, r2
 802fa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fa8e:	461a      	mov	r2, r3
 802fa90:	2308      	movs	r3, #8
 802fa92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 802fa94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fa96:	6878      	ldr	r0, [r7, #4]
 802fa98:	f000 ffc6 	bl	8030a28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 802fa9c:	693b      	ldr	r3, [r7, #16]
 802fa9e:	f003 0310 	and.w	r3, r3, #16
 802faa2:	2b00      	cmp	r3, #0
 802faa4:	d008      	beq.n	802fab8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 802faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802faa8:	015a      	lsls	r2, r3, #5
 802faaa:	69fb      	ldr	r3, [r7, #28]
 802faac:	4413      	add	r3, r2
 802faae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fab2:	461a      	mov	r2, r3
 802fab4:	2310      	movs	r3, #16
 802fab6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 802fab8:	693b      	ldr	r3, [r7, #16]
 802faba:	f003 0302 	and.w	r3, r3, #2
 802fabe:	2b00      	cmp	r3, #0
 802fac0:	d030      	beq.n	802fb24 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 802fac2:	6a3b      	ldr	r3, [r7, #32]
 802fac4:	695b      	ldr	r3, [r3, #20]
 802fac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802faca:	2b80      	cmp	r3, #128	; 0x80
 802facc:	d109      	bne.n	802fae2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 802face:	69fb      	ldr	r3, [r7, #28]
 802fad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fad4:	685b      	ldr	r3, [r3, #4]
 802fad6:	69fa      	ldr	r2, [r7, #28]
 802fad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fadc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802fae0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 802fae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fae4:	4613      	mov	r3, r2
 802fae6:	00db      	lsls	r3, r3, #3
 802fae8:	4413      	add	r3, r2
 802faea:	009b      	lsls	r3, r3, #2
 802faec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 802faf0:	687a      	ldr	r2, [r7, #4]
 802faf2:	4413      	add	r3, r2
 802faf4:	3304      	adds	r3, #4
 802faf6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802faf8:	697b      	ldr	r3, [r7, #20]
 802fafa:	78db      	ldrb	r3, [r3, #3]
 802fafc:	2b01      	cmp	r3, #1
 802fafe:	d108      	bne.n	802fb12 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 802fb00:	697b      	ldr	r3, [r7, #20]
 802fb02:	2200      	movs	r2, #0
 802fb04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 802fb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb08:	b2db      	uxtb	r3, r3
 802fb0a:	4619      	mov	r1, r3
 802fb0c:	6878      	ldr	r0, [r7, #4]
 802fb0e:	f00b fef7 	bl	803b900 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 802fb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb14:	015a      	lsls	r2, r3, #5
 802fb16:	69fb      	ldr	r3, [r7, #28]
 802fb18:	4413      	add	r3, r2
 802fb1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fb1e:	461a      	mov	r2, r3
 802fb20:	2302      	movs	r3, #2
 802fb22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 802fb24:	693b      	ldr	r3, [r7, #16]
 802fb26:	f003 0320 	and.w	r3, r3, #32
 802fb2a:	2b00      	cmp	r3, #0
 802fb2c:	d008      	beq.n	802fb40 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 802fb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb30:	015a      	lsls	r2, r3, #5
 802fb32:	69fb      	ldr	r3, [r7, #28]
 802fb34:	4413      	add	r3, r2
 802fb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fb3a:	461a      	mov	r2, r3
 802fb3c:	2320      	movs	r3, #32
 802fb3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 802fb40:	693b      	ldr	r3, [r7, #16]
 802fb42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802fb46:	2b00      	cmp	r3, #0
 802fb48:	d009      	beq.n	802fb5e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 802fb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb4c:	015a      	lsls	r2, r3, #5
 802fb4e:	69fb      	ldr	r3, [r7, #28]
 802fb50:	4413      	add	r3, r2
 802fb52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fb56:	461a      	mov	r2, r3
 802fb58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802fb5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 802fb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fb60:	3301      	adds	r3, #1
 802fb62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb66:	085b      	lsrs	r3, r3, #1
 802fb68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb6c:	2b00      	cmp	r3, #0
 802fb6e:	f47f af62 	bne.w	802fa36 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 802fb72:	687b      	ldr	r3, [r7, #4]
 802fb74:	681b      	ldr	r3, [r3, #0]
 802fb76:	4618      	mov	r0, r3
 802fb78:	f009 fada 	bl	8039130 <USB_ReadInterrupts>
 802fb7c:	4603      	mov	r3, r0
 802fb7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802fb82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802fb86:	f040 80db 	bne.w	802fd40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 802fb8a:	687b      	ldr	r3, [r7, #4]
 802fb8c:	681b      	ldr	r3, [r3, #0]
 802fb8e:	4618      	mov	r0, r3
 802fb90:	f009 fafb 	bl	803918a <USB_ReadDevAllInEpInterrupt>
 802fb94:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 802fb96:	2300      	movs	r3, #0
 802fb98:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 802fb9a:	e0cd      	b.n	802fd38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 802fb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fb9e:	f003 0301 	and.w	r3, r3, #1
 802fba2:	2b00      	cmp	r3, #0
 802fba4:	f000 80c2 	beq.w	802fd2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 802fba8:	687b      	ldr	r3, [r7, #4]
 802fbaa:	681b      	ldr	r3, [r3, #0]
 802fbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fbae:	b2d2      	uxtb	r2, r2
 802fbb0:	4611      	mov	r1, r2
 802fbb2:	4618      	mov	r0, r3
 802fbb4:	f009 fb21 	bl	80391fa <USB_ReadDevInEPInterrupt>
 802fbb8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 802fbba:	693b      	ldr	r3, [r7, #16]
 802fbbc:	f003 0301 	and.w	r3, r3, #1
 802fbc0:	2b00      	cmp	r3, #0
 802fbc2:	d057      	beq.n	802fc74 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 802fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fbc6:	f003 030f 	and.w	r3, r3, #15
 802fbca:	2201      	movs	r2, #1
 802fbcc:	fa02 f303 	lsl.w	r3, r2, r3
 802fbd0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 802fbd2:	69fb      	ldr	r3, [r7, #28]
 802fbd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fbd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802fbda:	68fb      	ldr	r3, [r7, #12]
 802fbdc:	43db      	mvns	r3, r3
 802fbde:	69f9      	ldr	r1, [r7, #28]
 802fbe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 802fbe4:	4013      	ands	r3, r2
 802fbe6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 802fbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fbea:	015a      	lsls	r2, r3, #5
 802fbec:	69fb      	ldr	r3, [r7, #28]
 802fbee:	4413      	add	r3, r2
 802fbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fbf4:	461a      	mov	r2, r3
 802fbf6:	2301      	movs	r3, #1
 802fbf8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 802fbfa:	687b      	ldr	r3, [r7, #4]
 802fbfc:	691b      	ldr	r3, [r3, #16]
 802fbfe:	2b01      	cmp	r3, #1
 802fc00:	d132      	bne.n	802fc68 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 802fc02:	6879      	ldr	r1, [r7, #4]
 802fc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc06:	4613      	mov	r3, r2
 802fc08:	00db      	lsls	r3, r3, #3
 802fc0a:	4413      	add	r3, r2
 802fc0c:	009b      	lsls	r3, r3, #2
 802fc0e:	440b      	add	r3, r1
 802fc10:	334c      	adds	r3, #76	; 0x4c
 802fc12:	6819      	ldr	r1, [r3, #0]
 802fc14:	6878      	ldr	r0, [r7, #4]
 802fc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc18:	4613      	mov	r3, r2
 802fc1a:	00db      	lsls	r3, r3, #3
 802fc1c:	4413      	add	r3, r2
 802fc1e:	009b      	lsls	r3, r3, #2
 802fc20:	4403      	add	r3, r0
 802fc22:	3348      	adds	r3, #72	; 0x48
 802fc24:	681b      	ldr	r3, [r3, #0]
 802fc26:	4419      	add	r1, r3
 802fc28:	6878      	ldr	r0, [r7, #4]
 802fc2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc2c:	4613      	mov	r3, r2
 802fc2e:	00db      	lsls	r3, r3, #3
 802fc30:	4413      	add	r3, r2
 802fc32:	009b      	lsls	r3, r3, #2
 802fc34:	4403      	add	r3, r0
 802fc36:	334c      	adds	r3, #76	; 0x4c
 802fc38:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 802fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc3c:	2b00      	cmp	r3, #0
 802fc3e:	d113      	bne.n	802fc68 <HAL_PCD_IRQHandler+0x3a2>
 802fc40:	6879      	ldr	r1, [r7, #4]
 802fc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fc44:	4613      	mov	r3, r2
 802fc46:	00db      	lsls	r3, r3, #3
 802fc48:	4413      	add	r3, r2
 802fc4a:	009b      	lsls	r3, r3, #2
 802fc4c:	440b      	add	r3, r1
 802fc4e:	3354      	adds	r3, #84	; 0x54
 802fc50:	681b      	ldr	r3, [r3, #0]
 802fc52:	2b00      	cmp	r3, #0
 802fc54:	d108      	bne.n	802fc68 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 802fc56:	687b      	ldr	r3, [r7, #4]
 802fc58:	6818      	ldr	r0, [r3, #0]
 802fc5a:	687b      	ldr	r3, [r7, #4]
 802fc5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 802fc60:	461a      	mov	r2, r3
 802fc62:	2101      	movs	r1, #1
 802fc64:	f009 fb2a 	bl	80392bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 802fc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc6a:	b2db      	uxtb	r3, r3
 802fc6c:	4619      	mov	r1, r3
 802fc6e:	6878      	ldr	r0, [r7, #4]
 802fc70:	f00b fdc1 	bl	803b7f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 802fc74:	693b      	ldr	r3, [r7, #16]
 802fc76:	f003 0308 	and.w	r3, r3, #8
 802fc7a:	2b00      	cmp	r3, #0
 802fc7c:	d008      	beq.n	802fc90 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 802fc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc80:	015a      	lsls	r2, r3, #5
 802fc82:	69fb      	ldr	r3, [r7, #28]
 802fc84:	4413      	add	r3, r2
 802fc86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fc8a:	461a      	mov	r2, r3
 802fc8c:	2308      	movs	r3, #8
 802fc8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 802fc90:	693b      	ldr	r3, [r7, #16]
 802fc92:	f003 0310 	and.w	r3, r3, #16
 802fc96:	2b00      	cmp	r3, #0
 802fc98:	d008      	beq.n	802fcac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 802fc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fc9c:	015a      	lsls	r2, r3, #5
 802fc9e:	69fb      	ldr	r3, [r7, #28]
 802fca0:	4413      	add	r3, r2
 802fca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fca6:	461a      	mov	r2, r3
 802fca8:	2310      	movs	r3, #16
 802fcaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 802fcac:	693b      	ldr	r3, [r7, #16]
 802fcae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802fcb2:	2b00      	cmp	r3, #0
 802fcb4:	d008      	beq.n	802fcc8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 802fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcb8:	015a      	lsls	r2, r3, #5
 802fcba:	69fb      	ldr	r3, [r7, #28]
 802fcbc:	4413      	add	r3, r2
 802fcbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fcc2:	461a      	mov	r2, r3
 802fcc4:	2340      	movs	r3, #64	; 0x40
 802fcc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 802fcc8:	693b      	ldr	r3, [r7, #16]
 802fcca:	f003 0302 	and.w	r3, r3, #2
 802fcce:	2b00      	cmp	r3, #0
 802fcd0:	d023      	beq.n	802fd1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 802fcd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fcd4:	6a38      	ldr	r0, [r7, #32]
 802fcd6:	f008 f9fd 	bl	80380d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 802fcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802fcdc:	4613      	mov	r3, r2
 802fcde:	00db      	lsls	r3, r3, #3
 802fce0:	4413      	add	r3, r2
 802fce2:	009b      	lsls	r3, r3, #2
 802fce4:	3338      	adds	r3, #56	; 0x38
 802fce6:	687a      	ldr	r2, [r7, #4]
 802fce8:	4413      	add	r3, r2
 802fcea:	3304      	adds	r3, #4
 802fcec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 802fcee:	697b      	ldr	r3, [r7, #20]
 802fcf0:	78db      	ldrb	r3, [r3, #3]
 802fcf2:	2b01      	cmp	r3, #1
 802fcf4:	d108      	bne.n	802fd08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 802fcf6:	697b      	ldr	r3, [r7, #20]
 802fcf8:	2200      	movs	r2, #0
 802fcfa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 802fcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fcfe:	b2db      	uxtb	r3, r3
 802fd00:	4619      	mov	r1, r3
 802fd02:	6878      	ldr	r0, [r7, #4]
 802fd04:	f00b fe0e 	bl	803b924 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 802fd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fd0a:	015a      	lsls	r2, r3, #5
 802fd0c:	69fb      	ldr	r3, [r7, #28]
 802fd0e:	4413      	add	r3, r2
 802fd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fd14:	461a      	mov	r2, r3
 802fd16:	2302      	movs	r3, #2
 802fd18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 802fd1a:	693b      	ldr	r3, [r7, #16]
 802fd1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802fd20:	2b00      	cmp	r3, #0
 802fd22:	d003      	beq.n	802fd2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 802fd24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802fd26:	6878      	ldr	r0, [r7, #4]
 802fd28:	f000 fd08 	bl	803073c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 802fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802fd2e:	3301      	adds	r3, #1
 802fd30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 802fd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fd34:	085b      	lsrs	r3, r3, #1
 802fd36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 802fd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802fd3a:	2b00      	cmp	r3, #0
 802fd3c:	f47f af2e 	bne.w	802fb9c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 802fd40:	687b      	ldr	r3, [r7, #4]
 802fd42:	681b      	ldr	r3, [r3, #0]
 802fd44:	4618      	mov	r0, r3
 802fd46:	f009 f9f3 	bl	8039130 <USB_ReadInterrupts>
 802fd4a:	4603      	mov	r3, r0
 802fd4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802fd50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802fd54:	d122      	bne.n	802fd9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fd56:	69fb      	ldr	r3, [r7, #28]
 802fd58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fd5c:	685b      	ldr	r3, [r3, #4]
 802fd5e:	69fa      	ldr	r2, [r7, #28]
 802fd60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fd64:	f023 0301 	bic.w	r3, r3, #1
 802fd68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 802fd6a:	687b      	ldr	r3, [r7, #4]
 802fd6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fd70:	2b01      	cmp	r3, #1
 802fd72:	d108      	bne.n	802fd86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 802fd74:	687b      	ldr	r3, [r7, #4]
 802fd76:	2200      	movs	r2, #0
 802fd78:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 802fd7c:	2100      	movs	r1, #0
 802fd7e:	6878      	ldr	r0, [r7, #4]
 802fd80:	f000 ff14 	bl	8030bac <HAL_PCDEx_LPM_Callback>
 802fd84:	e002      	b.n	802fd8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 802fd86:	6878      	ldr	r0, [r7, #4]
 802fd88:	f00b fdac 	bl	803b8e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 802fd8c:	687b      	ldr	r3, [r7, #4]
 802fd8e:	681b      	ldr	r3, [r3, #0]
 802fd90:	695a      	ldr	r2, [r3, #20]
 802fd92:	687b      	ldr	r3, [r7, #4]
 802fd94:	681b      	ldr	r3, [r3, #0]
 802fd96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 802fd9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 802fd9c:	687b      	ldr	r3, [r7, #4]
 802fd9e:	681b      	ldr	r3, [r3, #0]
 802fda0:	4618      	mov	r0, r3
 802fda2:	f009 f9c5 	bl	8039130 <USB_ReadInterrupts>
 802fda6:	4603      	mov	r3, r0
 802fda8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802fdac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802fdb0:	d112      	bne.n	802fdd8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 802fdb2:	69fb      	ldr	r3, [r7, #28]
 802fdb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fdb8:	689b      	ldr	r3, [r3, #8]
 802fdba:	f003 0301 	and.w	r3, r3, #1
 802fdbe:	2b01      	cmp	r3, #1
 802fdc0:	d102      	bne.n	802fdc8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fdc2:	6878      	ldr	r0, [r7, #4]
 802fdc4:	f00b fd68 	bl	803b898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 802fdc8:	687b      	ldr	r3, [r7, #4]
 802fdca:	681b      	ldr	r3, [r3, #0]
 802fdcc:	695a      	ldr	r2, [r3, #20]
 802fdce:	687b      	ldr	r3, [r7, #4]
 802fdd0:	681b      	ldr	r3, [r3, #0]
 802fdd2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 802fdd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 802fdd8:	687b      	ldr	r3, [r7, #4]
 802fdda:	681b      	ldr	r3, [r3, #0]
 802fddc:	4618      	mov	r0, r3
 802fdde:	f009 f9a7 	bl	8039130 <USB_ReadInterrupts>
 802fde2:	4603      	mov	r3, r0
 802fde4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802fde8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 802fdec:	d121      	bne.n	802fe32 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 802fdee:	687b      	ldr	r3, [r7, #4]
 802fdf0:	681b      	ldr	r3, [r3, #0]
 802fdf2:	695a      	ldr	r2, [r3, #20]
 802fdf4:	687b      	ldr	r3, [r7, #4]
 802fdf6:	681b      	ldr	r3, [r3, #0]
 802fdf8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 802fdfc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 802fdfe:	687b      	ldr	r3, [r7, #4]
 802fe00:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 802fe04:	2b00      	cmp	r3, #0
 802fe06:	d111      	bne.n	802fe2c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 802fe08:	687b      	ldr	r3, [r7, #4]
 802fe0a:	2201      	movs	r2, #1
 802fe0c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 802fe10:	687b      	ldr	r3, [r7, #4]
 802fe12:	681b      	ldr	r3, [r3, #0]
 802fe14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802fe16:	089b      	lsrs	r3, r3, #2
 802fe18:	f003 020f 	and.w	r2, r3, #15
 802fe1c:	687b      	ldr	r3, [r7, #4]
 802fe1e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 802fe22:	2101      	movs	r1, #1
 802fe24:	6878      	ldr	r0, [r7, #4]
 802fe26:	f000 fec1 	bl	8030bac <HAL_PCDEx_LPM_Callback>
 802fe2a:	e002      	b.n	802fe32 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 802fe2c:	6878      	ldr	r0, [r7, #4]
 802fe2e:	f00b fd33 	bl	803b898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 802fe32:	687b      	ldr	r3, [r7, #4]
 802fe34:	681b      	ldr	r3, [r3, #0]
 802fe36:	4618      	mov	r0, r3
 802fe38:	f009 f97a 	bl	8039130 <USB_ReadInterrupts>
 802fe3c:	4603      	mov	r3, r0
 802fe3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802fe42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802fe46:	f040 80b7 	bne.w	802ffb8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 802fe4a:	69fb      	ldr	r3, [r7, #28]
 802fe4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802fe50:	685b      	ldr	r3, [r3, #4]
 802fe52:	69fa      	ldr	r2, [r7, #28]
 802fe54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802fe58:	f023 0301 	bic.w	r3, r3, #1
 802fe5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 802fe5e:	687b      	ldr	r3, [r7, #4]
 802fe60:	681b      	ldr	r3, [r3, #0]
 802fe62:	2110      	movs	r1, #16
 802fe64:	4618      	mov	r0, r3
 802fe66:	f008 f935 	bl	80380d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fe6a:	2300      	movs	r3, #0
 802fe6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fe6e:	e046      	b.n	802fefe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 802fe70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe72:	015a      	lsls	r2, r3, #5
 802fe74:	69fb      	ldr	r3, [r7, #28]
 802fe76:	4413      	add	r3, r2
 802fe78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fe7c:	461a      	mov	r2, r3
 802fe7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802fe82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 802fe84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe86:	015a      	lsls	r2, r3, #5
 802fe88:	69fb      	ldr	r3, [r7, #28]
 802fe8a:	4413      	add	r3, r2
 802fe8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 802fe90:	681b      	ldr	r3, [r3, #0]
 802fe92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fe94:	0151      	lsls	r1, r2, #5
 802fe96:	69fa      	ldr	r2, [r7, #28]
 802fe98:	440a      	add	r2, r1
 802fe9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 802fe9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fea2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 802fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fea6:	015a      	lsls	r2, r3, #5
 802fea8:	69fb      	ldr	r3, [r7, #28]
 802feaa:	4413      	add	r3, r2
 802feac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802feb0:	461a      	mov	r2, r3
 802feb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 802feb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 802feb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802feba:	015a      	lsls	r2, r3, #5
 802febc:	69fb      	ldr	r3, [r7, #28]
 802febe:	4413      	add	r3, r2
 802fec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fec4:	681b      	ldr	r3, [r3, #0]
 802fec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fec8:	0151      	lsls	r1, r2, #5
 802feca:	69fa      	ldr	r2, [r7, #28]
 802fecc:	440a      	add	r2, r1
 802fece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fed2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 802fed6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 802fed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802feda:	015a      	lsls	r2, r3, #5
 802fedc:	69fb      	ldr	r3, [r7, #28]
 802fede:	4413      	add	r3, r2
 802fee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 802fee4:	681b      	ldr	r3, [r3, #0]
 802fee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802fee8:	0151      	lsls	r1, r2, #5
 802feea:	69fa      	ldr	r2, [r7, #28]
 802feec:	440a      	add	r2, r1
 802feee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 802fef2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802fef6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 802fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fefa:	3301      	adds	r3, #1
 802fefc:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fefe:	687b      	ldr	r3, [r7, #4]
 802ff00:	685b      	ldr	r3, [r3, #4]
 802ff02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802ff04:	429a      	cmp	r2, r3
 802ff06:	d3b3      	bcc.n	802fe70 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 802ff08:	69fb      	ldr	r3, [r7, #28]
 802ff0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff0e:	69db      	ldr	r3, [r3, #28]
 802ff10:	69fa      	ldr	r2, [r7, #28]
 802ff12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 802ff1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 802ff1c:	687b      	ldr	r3, [r7, #4]
 802ff1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ff20:	2b00      	cmp	r3, #0
 802ff22:	d016      	beq.n	802ff52 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 802ff24:	69fb      	ldr	r3, [r7, #28]
 802ff26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 802ff2e:	69fa      	ldr	r2, [r7, #28]
 802ff30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff34:	f043 030b 	orr.w	r3, r3, #11
 802ff38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 802ff3c:	69fb      	ldr	r3, [r7, #28]
 802ff3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802ff44:	69fa      	ldr	r2, [r7, #28]
 802ff46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff4a:	f043 030b 	orr.w	r3, r3, #11
 802ff4e:	6453      	str	r3, [r2, #68]	; 0x44
 802ff50:	e015      	b.n	802ff7e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 802ff52:	69fb      	ldr	r3, [r7, #28]
 802ff54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff58:	695a      	ldr	r2, [r3, #20]
 802ff5a:	69fb      	ldr	r3, [r7, #28]
 802ff5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff60:	4619      	mov	r1, r3
 802ff62:	f242 032b 	movw	r3, #8235	; 0x202b
 802ff66:	4313      	orrs	r3, r2
 802ff68:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 802ff6a:	69fb      	ldr	r3, [r7, #28]
 802ff6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff70:	691b      	ldr	r3, [r3, #16]
 802ff72:	69fa      	ldr	r2, [r7, #28]
 802ff74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff78:	f043 030b 	orr.w	r3, r3, #11
 802ff7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 802ff7e:	69fb      	ldr	r3, [r7, #28]
 802ff80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 802ff84:	681b      	ldr	r3, [r3, #0]
 802ff86:	69fa      	ldr	r2, [r7, #28]
 802ff88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 802ff8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 802ff90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802ff92:	687b      	ldr	r3, [r7, #4]
 802ff94:	6818      	ldr	r0, [r3, #0]
 802ff96:	687b      	ldr	r3, [r7, #4]
 802ff98:	691b      	ldr	r3, [r3, #16]
 802ff9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 802ff9c:	687b      	ldr	r3, [r7, #4]
 802ff9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 802ffa2:	461a      	mov	r2, r3
 802ffa4:	f009 f98a 	bl	80392bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 802ffa8:	687b      	ldr	r3, [r7, #4]
 802ffaa:	681b      	ldr	r3, [r3, #0]
 802ffac:	695a      	ldr	r2, [r3, #20]
 802ffae:	687b      	ldr	r3, [r7, #4]
 802ffb0:	681b      	ldr	r3, [r3, #0]
 802ffb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 802ffb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 802ffb8:	687b      	ldr	r3, [r7, #4]
 802ffba:	681b      	ldr	r3, [r3, #0]
 802ffbc:	4618      	mov	r0, r3
 802ffbe:	f009 f8b7 	bl	8039130 <USB_ReadInterrupts>
 802ffc2:	4603      	mov	r3, r0
 802ffc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802ffc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802ffcc:	d124      	bne.n	8030018 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 802ffce:	687b      	ldr	r3, [r7, #4]
 802ffd0:	681b      	ldr	r3, [r3, #0]
 802ffd2:	4618      	mov	r0, r3
 802ffd4:	f009 f94e 	bl	8039274 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 802ffd8:	687b      	ldr	r3, [r7, #4]
 802ffda:	681b      	ldr	r3, [r3, #0]
 802ffdc:	4618      	mov	r0, r3
 802ffde:	f008 f8f6 	bl	80381ce <USB_GetDevSpeed>
 802ffe2:	4603      	mov	r3, r0
 802ffe4:	461a      	mov	r2, r3
 802ffe6:	687b      	ldr	r3, [r7, #4]
 802ffe8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802ffea:	687b      	ldr	r3, [r7, #4]
 802ffec:	681c      	ldr	r4, [r3, #0]
 802ffee:	f001 fd91 	bl	8031b14 <HAL_RCC_GetHCLKFreq>
 802fff2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 802fff4:	687b      	ldr	r3, [r7, #4]
 802fff6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 802fff8:	b2db      	uxtb	r3, r3
 802fffa:	461a      	mov	r2, r3
 802fffc:	4620      	mov	r0, r4
 802fffe:	f007 fdfb 	bl	8037bf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8030002:	6878      	ldr	r0, [r7, #4]
 8030004:	f00b fc1f 	bl	803b846 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8030008:	687b      	ldr	r3, [r7, #4]
 803000a:	681b      	ldr	r3, [r3, #0]
 803000c:	695a      	ldr	r2, [r3, #20]
 803000e:	687b      	ldr	r3, [r7, #4]
 8030010:	681b      	ldr	r3, [r3, #0]
 8030012:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8030016:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8030018:	687b      	ldr	r3, [r7, #4]
 803001a:	681b      	ldr	r3, [r3, #0]
 803001c:	4618      	mov	r0, r3
 803001e:	f009 f887 	bl	8039130 <USB_ReadInterrupts>
 8030022:	4603      	mov	r3, r0
 8030024:	f003 0308 	and.w	r3, r3, #8
 8030028:	2b08      	cmp	r3, #8
 803002a:	d10a      	bne.n	8030042 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 803002c:	6878      	ldr	r0, [r7, #4]
 803002e:	f00b fbfc 	bl	803b82a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8030032:	687b      	ldr	r3, [r7, #4]
 8030034:	681b      	ldr	r3, [r3, #0]
 8030036:	695a      	ldr	r2, [r3, #20]
 8030038:	687b      	ldr	r3, [r7, #4]
 803003a:	681b      	ldr	r3, [r3, #0]
 803003c:	f002 0208 	and.w	r2, r2, #8
 8030040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8030042:	687b      	ldr	r3, [r7, #4]
 8030044:	681b      	ldr	r3, [r3, #0]
 8030046:	4618      	mov	r0, r3
 8030048:	f009 f872 	bl	8039130 <USB_ReadInterrupts>
 803004c:	4603      	mov	r3, r0
 803004e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8030052:	2b80      	cmp	r3, #128	; 0x80
 8030054:	d122      	bne.n	803009c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8030056:	6a3b      	ldr	r3, [r7, #32]
 8030058:	699b      	ldr	r3, [r3, #24]
 803005a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 803005e:	6a3b      	ldr	r3, [r7, #32]
 8030060:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8030062:	2301      	movs	r3, #1
 8030064:	627b      	str	r3, [r7, #36]	; 0x24
 8030066:	e014      	b.n	8030092 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8030068:	6879      	ldr	r1, [r7, #4]
 803006a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803006c:	4613      	mov	r3, r2
 803006e:	00db      	lsls	r3, r3, #3
 8030070:	4413      	add	r3, r2
 8030072:	009b      	lsls	r3, r3, #2
 8030074:	440b      	add	r3, r1
 8030076:	f203 237f 	addw	r3, r3, #639	; 0x27f
 803007a:	781b      	ldrb	r3, [r3, #0]
 803007c:	2b01      	cmp	r3, #1
 803007e:	d105      	bne.n	803008c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8030080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030082:	b2db      	uxtb	r3, r3
 8030084:	4619      	mov	r1, r3
 8030086:	6878      	ldr	r0, [r7, #4]
 8030088:	f000 fb27 	bl	80306da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803008c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803008e:	3301      	adds	r3, #1
 8030090:	627b      	str	r3, [r7, #36]	; 0x24
 8030092:	687b      	ldr	r3, [r7, #4]
 8030094:	685b      	ldr	r3, [r3, #4]
 8030096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030098:	429a      	cmp	r2, r3
 803009a:	d3e5      	bcc.n	8030068 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 803009c:	687b      	ldr	r3, [r7, #4]
 803009e:	681b      	ldr	r3, [r3, #0]
 80300a0:	4618      	mov	r0, r3
 80300a2:	f009 f845 	bl	8039130 <USB_ReadInterrupts>
 80300a6:	4603      	mov	r3, r0
 80300a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80300ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80300b0:	d13b      	bne.n	803012a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80300b2:	2301      	movs	r3, #1
 80300b4:	627b      	str	r3, [r7, #36]	; 0x24
 80300b6:	e02b      	b.n	8030110 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80300b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80300ba:	015a      	lsls	r2, r3, #5
 80300bc:	69fb      	ldr	r3, [r7, #28]
 80300be:	4413      	add	r3, r2
 80300c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80300c4:	681b      	ldr	r3, [r3, #0]
 80300c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80300c8:	6879      	ldr	r1, [r7, #4]
 80300ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80300cc:	4613      	mov	r3, r2
 80300ce:	00db      	lsls	r3, r3, #3
 80300d0:	4413      	add	r3, r2
 80300d2:	009b      	lsls	r3, r3, #2
 80300d4:	440b      	add	r3, r1
 80300d6:	3340      	adds	r3, #64	; 0x40
 80300d8:	781b      	ldrb	r3, [r3, #0]
 80300da:	2b01      	cmp	r3, #1
 80300dc:	d115      	bne.n	803010a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80300de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80300e0:	2b00      	cmp	r3, #0
 80300e2:	da12      	bge.n	803010a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80300e4:	6879      	ldr	r1, [r7, #4]
 80300e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80300e8:	4613      	mov	r3, r2
 80300ea:	00db      	lsls	r3, r3, #3
 80300ec:	4413      	add	r3, r2
 80300ee:	009b      	lsls	r3, r3, #2
 80300f0:	440b      	add	r3, r1
 80300f2:	333f      	adds	r3, #63	; 0x3f
 80300f4:	2201      	movs	r2, #1
 80300f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80300f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80300fa:	b2db      	uxtb	r3, r3
 80300fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8030100:	b2db      	uxtb	r3, r3
 8030102:	4619      	mov	r1, r3
 8030104:	6878      	ldr	r0, [r7, #4]
 8030106:	f000 fae8 	bl	80306da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 803010a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803010c:	3301      	adds	r3, #1
 803010e:	627b      	str	r3, [r7, #36]	; 0x24
 8030110:	687b      	ldr	r3, [r7, #4]
 8030112:	685b      	ldr	r3, [r3, #4]
 8030114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030116:	429a      	cmp	r2, r3
 8030118:	d3ce      	bcc.n	80300b8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 803011a:	687b      	ldr	r3, [r7, #4]
 803011c:	681b      	ldr	r3, [r3, #0]
 803011e:	695a      	ldr	r2, [r3, #20]
 8030120:	687b      	ldr	r3, [r7, #4]
 8030122:	681b      	ldr	r3, [r3, #0]
 8030124:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8030128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 803012a:	687b      	ldr	r3, [r7, #4]
 803012c:	681b      	ldr	r3, [r3, #0]
 803012e:	4618      	mov	r0, r3
 8030130:	f008 fffe 	bl	8039130 <USB_ReadInterrupts>
 8030134:	4603      	mov	r3, r0
 8030136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 803013a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803013e:	d155      	bne.n	80301ec <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8030140:	2301      	movs	r3, #1
 8030142:	627b      	str	r3, [r7, #36]	; 0x24
 8030144:	e045      	b.n	80301d2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8030146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030148:	015a      	lsls	r2, r3, #5
 803014a:	69fb      	ldr	r3, [r7, #28]
 803014c:	4413      	add	r3, r2
 803014e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030152:	681b      	ldr	r3, [r3, #0]
 8030154:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8030156:	6879      	ldr	r1, [r7, #4]
 8030158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803015a:	4613      	mov	r3, r2
 803015c:	00db      	lsls	r3, r3, #3
 803015e:	4413      	add	r3, r2
 8030160:	009b      	lsls	r3, r3, #2
 8030162:	440b      	add	r3, r1
 8030164:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8030168:	781b      	ldrb	r3, [r3, #0]
 803016a:	2b01      	cmp	r3, #1
 803016c:	d12e      	bne.n	80301cc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 803016e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8030170:	2b00      	cmp	r3, #0
 8030172:	da2b      	bge.n	80301cc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8030174:	69bb      	ldr	r3, [r7, #24]
 8030176:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 803017a:	687b      	ldr	r3, [r7, #4]
 803017c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8030180:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8030184:	429a      	cmp	r2, r3
 8030186:	d121      	bne.n	80301cc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8030188:	6879      	ldr	r1, [r7, #4]
 803018a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803018c:	4613      	mov	r3, r2
 803018e:	00db      	lsls	r3, r3, #3
 8030190:	4413      	add	r3, r2
 8030192:	009b      	lsls	r3, r3, #2
 8030194:	440b      	add	r3, r1
 8030196:	f203 237f 	addw	r3, r3, #639	; 0x27f
 803019a:	2201      	movs	r2, #1
 803019c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 803019e:	6a3b      	ldr	r3, [r7, #32]
 80301a0:	699b      	ldr	r3, [r3, #24]
 80301a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80301a6:	6a3b      	ldr	r3, [r7, #32]
 80301a8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80301aa:	6a3b      	ldr	r3, [r7, #32]
 80301ac:	695b      	ldr	r3, [r3, #20]
 80301ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80301b2:	2b00      	cmp	r3, #0
 80301b4:	d10a      	bne.n	80301cc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80301b6:	69fb      	ldr	r3, [r7, #28]
 80301b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80301bc:	685b      	ldr	r3, [r3, #4]
 80301be:	69fa      	ldr	r2, [r7, #28]
 80301c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80301c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80301c8:	6053      	str	r3, [r2, #4]
            break;
 80301ca:	e007      	b.n	80301dc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80301cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80301ce:	3301      	adds	r3, #1
 80301d0:	627b      	str	r3, [r7, #36]	; 0x24
 80301d2:	687b      	ldr	r3, [r7, #4]
 80301d4:	685b      	ldr	r3, [r3, #4]
 80301d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80301d8:	429a      	cmp	r2, r3
 80301da:	d3b4      	bcc.n	8030146 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80301dc:	687b      	ldr	r3, [r7, #4]
 80301de:	681b      	ldr	r3, [r3, #0]
 80301e0:	695a      	ldr	r2, [r3, #20]
 80301e2:	687b      	ldr	r3, [r7, #4]
 80301e4:	681b      	ldr	r3, [r3, #0]
 80301e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80301ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80301ec:	687b      	ldr	r3, [r7, #4]
 80301ee:	681b      	ldr	r3, [r3, #0]
 80301f0:	4618      	mov	r0, r3
 80301f2:	f008 ff9d 	bl	8039130 <USB_ReadInterrupts>
 80301f6:	4603      	mov	r3, r0
 80301f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80301fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8030200:	d10a      	bne.n	8030218 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8030202:	6878      	ldr	r0, [r7, #4]
 8030204:	f00b fba0 	bl	803b948 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8030208:	687b      	ldr	r3, [r7, #4]
 803020a:	681b      	ldr	r3, [r3, #0]
 803020c:	695a      	ldr	r2, [r3, #20]
 803020e:	687b      	ldr	r3, [r7, #4]
 8030210:	681b      	ldr	r3, [r3, #0]
 8030212:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8030216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8030218:	687b      	ldr	r3, [r7, #4]
 803021a:	681b      	ldr	r3, [r3, #0]
 803021c:	4618      	mov	r0, r3
 803021e:	f008 ff87 	bl	8039130 <USB_ReadInterrupts>
 8030222:	4603      	mov	r3, r0
 8030224:	f003 0304 	and.w	r3, r3, #4
 8030228:	2b04      	cmp	r3, #4
 803022a:	d115      	bne.n	8030258 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 803022c:	687b      	ldr	r3, [r7, #4]
 803022e:	681b      	ldr	r3, [r3, #0]
 8030230:	685b      	ldr	r3, [r3, #4]
 8030232:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8030234:	69bb      	ldr	r3, [r7, #24]
 8030236:	f003 0304 	and.w	r3, r3, #4
 803023a:	2b00      	cmp	r3, #0
 803023c:	d002      	beq.n	8030244 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 803023e:	6878      	ldr	r0, [r7, #4]
 8030240:	f00b fb90 	bl	803b964 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8030244:	687b      	ldr	r3, [r7, #4]
 8030246:	681b      	ldr	r3, [r3, #0]
 8030248:	6859      	ldr	r1, [r3, #4]
 803024a:	687b      	ldr	r3, [r7, #4]
 803024c:	681b      	ldr	r3, [r3, #0]
 803024e:	69ba      	ldr	r2, [r7, #24]
 8030250:	430a      	orrs	r2, r1
 8030252:	605a      	str	r2, [r3, #4]
 8030254:	e000      	b.n	8030258 <HAL_PCD_IRQHandler+0x992>
      return;
 8030256:	bf00      	nop
    }
  }
}
 8030258:	3734      	adds	r7, #52	; 0x34
 803025a:	46bd      	mov	sp, r7
 803025c:	bd90      	pop	{r4, r7, pc}

0803025e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 803025e:	b580      	push	{r7, lr}
 8030260:	b082      	sub	sp, #8
 8030262:	af00      	add	r7, sp, #0
 8030264:	6078      	str	r0, [r7, #4]
 8030266:	460b      	mov	r3, r1
 8030268:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 803026a:	687b      	ldr	r3, [r7, #4]
 803026c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8030270:	2b01      	cmp	r3, #1
 8030272:	d101      	bne.n	8030278 <HAL_PCD_SetAddress+0x1a>
 8030274:	2302      	movs	r3, #2
 8030276:	e013      	b.n	80302a0 <HAL_PCD_SetAddress+0x42>
 8030278:	687b      	ldr	r3, [r7, #4]
 803027a:	2201      	movs	r2, #1
 803027c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8030280:	687b      	ldr	r3, [r7, #4]
 8030282:	78fa      	ldrb	r2, [r7, #3]
 8030284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8030288:	687b      	ldr	r3, [r7, #4]
 803028a:	681b      	ldr	r3, [r3, #0]
 803028c:	78fa      	ldrb	r2, [r7, #3]
 803028e:	4611      	mov	r1, r2
 8030290:	4618      	mov	r0, r3
 8030292:	f008 fee5 	bl	8039060 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8030296:	687b      	ldr	r3, [r7, #4]
 8030298:	2200      	movs	r2, #0
 803029a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 803029e:	2300      	movs	r3, #0
}
 80302a0:	4618      	mov	r0, r3
 80302a2:	3708      	adds	r7, #8
 80302a4:	46bd      	mov	sp, r7
 80302a6:	bd80      	pop	{r7, pc}

080302a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80302a8:	b580      	push	{r7, lr}
 80302aa:	b084      	sub	sp, #16
 80302ac:	af00      	add	r7, sp, #0
 80302ae:	6078      	str	r0, [r7, #4]
 80302b0:	4608      	mov	r0, r1
 80302b2:	4611      	mov	r1, r2
 80302b4:	461a      	mov	r2, r3
 80302b6:	4603      	mov	r3, r0
 80302b8:	70fb      	strb	r3, [r7, #3]
 80302ba:	460b      	mov	r3, r1
 80302bc:	803b      	strh	r3, [r7, #0]
 80302be:	4613      	mov	r3, r2
 80302c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80302c2:	2300      	movs	r3, #0
 80302c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80302c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80302ca:	2b00      	cmp	r3, #0
 80302cc:	da0f      	bge.n	80302ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80302ce:	78fb      	ldrb	r3, [r7, #3]
 80302d0:	f003 020f 	and.w	r2, r3, #15
 80302d4:	4613      	mov	r3, r2
 80302d6:	00db      	lsls	r3, r3, #3
 80302d8:	4413      	add	r3, r2
 80302da:	009b      	lsls	r3, r3, #2
 80302dc:	3338      	adds	r3, #56	; 0x38
 80302de:	687a      	ldr	r2, [r7, #4]
 80302e0:	4413      	add	r3, r2
 80302e2:	3304      	adds	r3, #4
 80302e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80302e6:	68fb      	ldr	r3, [r7, #12]
 80302e8:	2201      	movs	r2, #1
 80302ea:	705a      	strb	r2, [r3, #1]
 80302ec:	e00f      	b.n	803030e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80302ee:	78fb      	ldrb	r3, [r7, #3]
 80302f0:	f003 020f 	and.w	r2, r3, #15
 80302f4:	4613      	mov	r3, r2
 80302f6:	00db      	lsls	r3, r3, #3
 80302f8:	4413      	add	r3, r2
 80302fa:	009b      	lsls	r3, r3, #2
 80302fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030300:	687a      	ldr	r2, [r7, #4]
 8030302:	4413      	add	r3, r2
 8030304:	3304      	adds	r3, #4
 8030306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8030308:	68fb      	ldr	r3, [r7, #12]
 803030a:	2200      	movs	r2, #0
 803030c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 803030e:	78fb      	ldrb	r3, [r7, #3]
 8030310:	f003 030f 	and.w	r3, r3, #15
 8030314:	b2da      	uxtb	r2, r3
 8030316:	68fb      	ldr	r3, [r7, #12]
 8030318:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 803031a:	883a      	ldrh	r2, [r7, #0]
 803031c:	68fb      	ldr	r3, [r7, #12]
 803031e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8030320:	68fb      	ldr	r3, [r7, #12]
 8030322:	78ba      	ldrb	r2, [r7, #2]
 8030324:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8030326:	68fb      	ldr	r3, [r7, #12]
 8030328:	785b      	ldrb	r3, [r3, #1]
 803032a:	2b00      	cmp	r3, #0
 803032c:	d004      	beq.n	8030338 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 803032e:	68fb      	ldr	r3, [r7, #12]
 8030330:	781b      	ldrb	r3, [r3, #0]
 8030332:	b29a      	uxth	r2, r3
 8030334:	68fb      	ldr	r3, [r7, #12]
 8030336:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8030338:	78bb      	ldrb	r3, [r7, #2]
 803033a:	2b02      	cmp	r3, #2
 803033c:	d102      	bne.n	8030344 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 803033e:	68fb      	ldr	r3, [r7, #12]
 8030340:	2200      	movs	r2, #0
 8030342:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8030344:	687b      	ldr	r3, [r7, #4]
 8030346:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 803034a:	2b01      	cmp	r3, #1
 803034c:	d101      	bne.n	8030352 <HAL_PCD_EP_Open+0xaa>
 803034e:	2302      	movs	r3, #2
 8030350:	e00e      	b.n	8030370 <HAL_PCD_EP_Open+0xc8>
 8030352:	687b      	ldr	r3, [r7, #4]
 8030354:	2201      	movs	r2, #1
 8030356:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 803035a:	687b      	ldr	r3, [r7, #4]
 803035c:	681b      	ldr	r3, [r3, #0]
 803035e:	68f9      	ldr	r1, [r7, #12]
 8030360:	4618      	mov	r0, r3
 8030362:	f007 ff59 	bl	8038218 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8030366:	687b      	ldr	r3, [r7, #4]
 8030368:	2200      	movs	r2, #0
 803036a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 803036e:	7afb      	ldrb	r3, [r7, #11]
}
 8030370:	4618      	mov	r0, r3
 8030372:	3710      	adds	r7, #16
 8030374:	46bd      	mov	sp, r7
 8030376:	bd80      	pop	{r7, pc}

08030378 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8030378:	b580      	push	{r7, lr}
 803037a:	b084      	sub	sp, #16
 803037c:	af00      	add	r7, sp, #0
 803037e:	6078      	str	r0, [r7, #4]
 8030380:	460b      	mov	r3, r1
 8030382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8030384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030388:	2b00      	cmp	r3, #0
 803038a:	da0f      	bge.n	80303ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803038c:	78fb      	ldrb	r3, [r7, #3]
 803038e:	f003 020f 	and.w	r2, r3, #15
 8030392:	4613      	mov	r3, r2
 8030394:	00db      	lsls	r3, r3, #3
 8030396:	4413      	add	r3, r2
 8030398:	009b      	lsls	r3, r3, #2
 803039a:	3338      	adds	r3, #56	; 0x38
 803039c:	687a      	ldr	r2, [r7, #4]
 803039e:	4413      	add	r3, r2
 80303a0:	3304      	adds	r3, #4
 80303a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80303a4:	68fb      	ldr	r3, [r7, #12]
 80303a6:	2201      	movs	r2, #1
 80303a8:	705a      	strb	r2, [r3, #1]
 80303aa:	e00f      	b.n	80303cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80303ac:	78fb      	ldrb	r3, [r7, #3]
 80303ae:	f003 020f 	and.w	r2, r3, #15
 80303b2:	4613      	mov	r3, r2
 80303b4:	00db      	lsls	r3, r3, #3
 80303b6:	4413      	add	r3, r2
 80303b8:	009b      	lsls	r3, r3, #2
 80303ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80303be:	687a      	ldr	r2, [r7, #4]
 80303c0:	4413      	add	r3, r2
 80303c2:	3304      	adds	r3, #4
 80303c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80303c6:	68fb      	ldr	r3, [r7, #12]
 80303c8:	2200      	movs	r2, #0
 80303ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80303cc:	78fb      	ldrb	r3, [r7, #3]
 80303ce:	f003 030f 	and.w	r3, r3, #15
 80303d2:	b2da      	uxtb	r2, r3
 80303d4:	68fb      	ldr	r3, [r7, #12]
 80303d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80303d8:	687b      	ldr	r3, [r7, #4]
 80303da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80303de:	2b01      	cmp	r3, #1
 80303e0:	d101      	bne.n	80303e6 <HAL_PCD_EP_Close+0x6e>
 80303e2:	2302      	movs	r3, #2
 80303e4:	e00e      	b.n	8030404 <HAL_PCD_EP_Close+0x8c>
 80303e6:	687b      	ldr	r3, [r7, #4]
 80303e8:	2201      	movs	r2, #1
 80303ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80303ee:	687b      	ldr	r3, [r7, #4]
 80303f0:	681b      	ldr	r3, [r3, #0]
 80303f2:	68f9      	ldr	r1, [r7, #12]
 80303f4:	4618      	mov	r0, r3
 80303f6:	f007 ff97 	bl	8038328 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80303fa:	687b      	ldr	r3, [r7, #4]
 80303fc:	2200      	movs	r2, #0
 80303fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8030402:	2300      	movs	r3, #0
}
 8030404:	4618      	mov	r0, r3
 8030406:	3710      	adds	r7, #16
 8030408:	46bd      	mov	sp, r7
 803040a:	bd80      	pop	{r7, pc}

0803040c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 803040c:	b580      	push	{r7, lr}
 803040e:	b086      	sub	sp, #24
 8030410:	af00      	add	r7, sp, #0
 8030412:	60f8      	str	r0, [r7, #12]
 8030414:	607a      	str	r2, [r7, #4]
 8030416:	603b      	str	r3, [r7, #0]
 8030418:	460b      	mov	r3, r1
 803041a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 803041c:	7afb      	ldrb	r3, [r7, #11]
 803041e:	f003 020f 	and.w	r2, r3, #15
 8030422:	4613      	mov	r3, r2
 8030424:	00db      	lsls	r3, r3, #3
 8030426:	4413      	add	r3, r2
 8030428:	009b      	lsls	r3, r3, #2
 803042a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803042e:	68fa      	ldr	r2, [r7, #12]
 8030430:	4413      	add	r3, r2
 8030432:	3304      	adds	r3, #4
 8030434:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8030436:	697b      	ldr	r3, [r7, #20]
 8030438:	687a      	ldr	r2, [r7, #4]
 803043a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 803043c:	697b      	ldr	r3, [r7, #20]
 803043e:	683a      	ldr	r2, [r7, #0]
 8030440:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8030442:	697b      	ldr	r3, [r7, #20]
 8030444:	2200      	movs	r2, #0
 8030446:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8030448:	697b      	ldr	r3, [r7, #20]
 803044a:	2200      	movs	r2, #0
 803044c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 803044e:	7afb      	ldrb	r3, [r7, #11]
 8030450:	f003 030f 	and.w	r3, r3, #15
 8030454:	b2da      	uxtb	r2, r3
 8030456:	697b      	ldr	r3, [r7, #20]
 8030458:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 803045a:	68fb      	ldr	r3, [r7, #12]
 803045c:	691b      	ldr	r3, [r3, #16]
 803045e:	2b01      	cmp	r3, #1
 8030460:	d102      	bne.n	8030468 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8030462:	687a      	ldr	r2, [r7, #4]
 8030464:	697b      	ldr	r3, [r7, #20]
 8030466:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8030468:	7afb      	ldrb	r3, [r7, #11]
 803046a:	f003 030f 	and.w	r3, r3, #15
 803046e:	2b00      	cmp	r3, #0
 8030470:	d109      	bne.n	8030486 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030472:	68fb      	ldr	r3, [r7, #12]
 8030474:	6818      	ldr	r0, [r3, #0]
 8030476:	68fb      	ldr	r3, [r7, #12]
 8030478:	691b      	ldr	r3, [r3, #16]
 803047a:	b2db      	uxtb	r3, r3
 803047c:	461a      	mov	r2, r3
 803047e:	6979      	ldr	r1, [r7, #20]
 8030480:	f008 fa7e 	bl	8038980 <USB_EP0StartXfer>
 8030484:	e008      	b.n	8030498 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030486:	68fb      	ldr	r3, [r7, #12]
 8030488:	6818      	ldr	r0, [r3, #0]
 803048a:	68fb      	ldr	r3, [r7, #12]
 803048c:	691b      	ldr	r3, [r3, #16]
 803048e:	b2db      	uxtb	r3, r3
 8030490:	461a      	mov	r2, r3
 8030492:	6979      	ldr	r1, [r7, #20]
 8030494:	f008 f824 	bl	80384e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8030498:	2300      	movs	r3, #0
}
 803049a:	4618      	mov	r0, r3
 803049c:	3718      	adds	r7, #24
 803049e:	46bd      	mov	sp, r7
 80304a0:	bd80      	pop	{r7, pc}

080304a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80304a2:	b480      	push	{r7}
 80304a4:	b083      	sub	sp, #12
 80304a6:	af00      	add	r7, sp, #0
 80304a8:	6078      	str	r0, [r7, #4]
 80304aa:	460b      	mov	r3, r1
 80304ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80304ae:	78fb      	ldrb	r3, [r7, #3]
 80304b0:	f003 020f 	and.w	r2, r3, #15
 80304b4:	6879      	ldr	r1, [r7, #4]
 80304b6:	4613      	mov	r3, r2
 80304b8:	00db      	lsls	r3, r3, #3
 80304ba:	4413      	add	r3, r2
 80304bc:	009b      	lsls	r3, r3, #2
 80304be:	440b      	add	r3, r1
 80304c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80304c4:	681b      	ldr	r3, [r3, #0]
}
 80304c6:	4618      	mov	r0, r3
 80304c8:	370c      	adds	r7, #12
 80304ca:	46bd      	mov	sp, r7
 80304cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80304d0:	4770      	bx	lr

080304d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80304d2:	b580      	push	{r7, lr}
 80304d4:	b086      	sub	sp, #24
 80304d6:	af00      	add	r7, sp, #0
 80304d8:	60f8      	str	r0, [r7, #12]
 80304da:	607a      	str	r2, [r7, #4]
 80304dc:	603b      	str	r3, [r7, #0]
 80304de:	460b      	mov	r3, r1
 80304e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80304e2:	7afb      	ldrb	r3, [r7, #11]
 80304e4:	f003 020f 	and.w	r2, r3, #15
 80304e8:	4613      	mov	r3, r2
 80304ea:	00db      	lsls	r3, r3, #3
 80304ec:	4413      	add	r3, r2
 80304ee:	009b      	lsls	r3, r3, #2
 80304f0:	3338      	adds	r3, #56	; 0x38
 80304f2:	68fa      	ldr	r2, [r7, #12]
 80304f4:	4413      	add	r3, r2
 80304f6:	3304      	adds	r3, #4
 80304f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80304fa:	697b      	ldr	r3, [r7, #20]
 80304fc:	687a      	ldr	r2, [r7, #4]
 80304fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8030500:	697b      	ldr	r3, [r7, #20]
 8030502:	683a      	ldr	r2, [r7, #0]
 8030504:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8030506:	697b      	ldr	r3, [r7, #20]
 8030508:	2200      	movs	r2, #0
 803050a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 803050c:	697b      	ldr	r3, [r7, #20]
 803050e:	2201      	movs	r2, #1
 8030510:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8030512:	7afb      	ldrb	r3, [r7, #11]
 8030514:	f003 030f 	and.w	r3, r3, #15
 8030518:	b2da      	uxtb	r2, r3
 803051a:	697b      	ldr	r3, [r7, #20]
 803051c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 803051e:	68fb      	ldr	r3, [r7, #12]
 8030520:	691b      	ldr	r3, [r3, #16]
 8030522:	2b01      	cmp	r3, #1
 8030524:	d102      	bne.n	803052c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8030526:	687a      	ldr	r2, [r7, #4]
 8030528:	697b      	ldr	r3, [r7, #20]
 803052a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 803052c:	7afb      	ldrb	r3, [r7, #11]
 803052e:	f003 030f 	and.w	r3, r3, #15
 8030532:	2b00      	cmp	r3, #0
 8030534:	d109      	bne.n	803054a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8030536:	68fb      	ldr	r3, [r7, #12]
 8030538:	6818      	ldr	r0, [r3, #0]
 803053a:	68fb      	ldr	r3, [r7, #12]
 803053c:	691b      	ldr	r3, [r3, #16]
 803053e:	b2db      	uxtb	r3, r3
 8030540:	461a      	mov	r2, r3
 8030542:	6979      	ldr	r1, [r7, #20]
 8030544:	f008 fa1c 	bl	8038980 <USB_EP0StartXfer>
 8030548:	e008      	b.n	803055c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 803054a:	68fb      	ldr	r3, [r7, #12]
 803054c:	6818      	ldr	r0, [r3, #0]
 803054e:	68fb      	ldr	r3, [r7, #12]
 8030550:	691b      	ldr	r3, [r3, #16]
 8030552:	b2db      	uxtb	r3, r3
 8030554:	461a      	mov	r2, r3
 8030556:	6979      	ldr	r1, [r7, #20]
 8030558:	f007 ffc2 	bl	80384e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 803055c:	2300      	movs	r3, #0
}
 803055e:	4618      	mov	r0, r3
 8030560:	3718      	adds	r7, #24
 8030562:	46bd      	mov	sp, r7
 8030564:	bd80      	pop	{r7, pc}

08030566 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8030566:	b580      	push	{r7, lr}
 8030568:	b084      	sub	sp, #16
 803056a:	af00      	add	r7, sp, #0
 803056c:	6078      	str	r0, [r7, #4]
 803056e:	460b      	mov	r3, r1
 8030570:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8030572:	78fb      	ldrb	r3, [r7, #3]
 8030574:	f003 020f 	and.w	r2, r3, #15
 8030578:	687b      	ldr	r3, [r7, #4]
 803057a:	685b      	ldr	r3, [r3, #4]
 803057c:	429a      	cmp	r2, r3
 803057e:	d901      	bls.n	8030584 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8030580:	2301      	movs	r3, #1
 8030582:	e050      	b.n	8030626 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8030584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030588:	2b00      	cmp	r3, #0
 803058a:	da0f      	bge.n	80305ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 803058c:	78fb      	ldrb	r3, [r7, #3]
 803058e:	f003 020f 	and.w	r2, r3, #15
 8030592:	4613      	mov	r3, r2
 8030594:	00db      	lsls	r3, r3, #3
 8030596:	4413      	add	r3, r2
 8030598:	009b      	lsls	r3, r3, #2
 803059a:	3338      	adds	r3, #56	; 0x38
 803059c:	687a      	ldr	r2, [r7, #4]
 803059e:	4413      	add	r3, r2
 80305a0:	3304      	adds	r3, #4
 80305a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80305a4:	68fb      	ldr	r3, [r7, #12]
 80305a6:	2201      	movs	r2, #1
 80305a8:	705a      	strb	r2, [r3, #1]
 80305aa:	e00d      	b.n	80305c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80305ac:	78fa      	ldrb	r2, [r7, #3]
 80305ae:	4613      	mov	r3, r2
 80305b0:	00db      	lsls	r3, r3, #3
 80305b2:	4413      	add	r3, r2
 80305b4:	009b      	lsls	r3, r3, #2
 80305b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80305ba:	687a      	ldr	r2, [r7, #4]
 80305bc:	4413      	add	r3, r2
 80305be:	3304      	adds	r3, #4
 80305c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80305c2:	68fb      	ldr	r3, [r7, #12]
 80305c4:	2200      	movs	r2, #0
 80305c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80305c8:	68fb      	ldr	r3, [r7, #12]
 80305ca:	2201      	movs	r2, #1
 80305cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80305ce:	78fb      	ldrb	r3, [r7, #3]
 80305d0:	f003 030f 	and.w	r3, r3, #15
 80305d4:	b2da      	uxtb	r2, r3
 80305d6:	68fb      	ldr	r3, [r7, #12]
 80305d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80305da:	687b      	ldr	r3, [r7, #4]
 80305dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80305e0:	2b01      	cmp	r3, #1
 80305e2:	d101      	bne.n	80305e8 <HAL_PCD_EP_SetStall+0x82>
 80305e4:	2302      	movs	r3, #2
 80305e6:	e01e      	b.n	8030626 <HAL_PCD_EP_SetStall+0xc0>
 80305e8:	687b      	ldr	r3, [r7, #4]
 80305ea:	2201      	movs	r2, #1
 80305ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80305f0:	687b      	ldr	r3, [r7, #4]
 80305f2:	681b      	ldr	r3, [r3, #0]
 80305f4:	68f9      	ldr	r1, [r7, #12]
 80305f6:	4618      	mov	r0, r3
 80305f8:	f008 fc5e 	bl	8038eb8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80305fc:	78fb      	ldrb	r3, [r7, #3]
 80305fe:	f003 030f 	and.w	r3, r3, #15
 8030602:	2b00      	cmp	r3, #0
 8030604:	d10a      	bne.n	803061c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8030606:	687b      	ldr	r3, [r7, #4]
 8030608:	6818      	ldr	r0, [r3, #0]
 803060a:	687b      	ldr	r3, [r7, #4]
 803060c:	691b      	ldr	r3, [r3, #16]
 803060e:	b2d9      	uxtb	r1, r3
 8030610:	687b      	ldr	r3, [r7, #4]
 8030612:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030616:	461a      	mov	r2, r3
 8030618:	f008 fe50 	bl	80392bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 803061c:	687b      	ldr	r3, [r7, #4]
 803061e:	2200      	movs	r2, #0
 8030620:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8030624:	2300      	movs	r3, #0
}
 8030626:	4618      	mov	r0, r3
 8030628:	3710      	adds	r7, #16
 803062a:	46bd      	mov	sp, r7
 803062c:	bd80      	pop	{r7, pc}

0803062e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 803062e:	b580      	push	{r7, lr}
 8030630:	b084      	sub	sp, #16
 8030632:	af00      	add	r7, sp, #0
 8030634:	6078      	str	r0, [r7, #4]
 8030636:	460b      	mov	r3, r1
 8030638:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 803063a:	78fb      	ldrb	r3, [r7, #3]
 803063c:	f003 020f 	and.w	r2, r3, #15
 8030640:	687b      	ldr	r3, [r7, #4]
 8030642:	685b      	ldr	r3, [r3, #4]
 8030644:	429a      	cmp	r2, r3
 8030646:	d901      	bls.n	803064c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8030648:	2301      	movs	r3, #1
 803064a:	e042      	b.n	80306d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 803064c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8030650:	2b00      	cmp	r3, #0
 8030652:	da0f      	bge.n	8030674 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8030654:	78fb      	ldrb	r3, [r7, #3]
 8030656:	f003 020f 	and.w	r2, r3, #15
 803065a:	4613      	mov	r3, r2
 803065c:	00db      	lsls	r3, r3, #3
 803065e:	4413      	add	r3, r2
 8030660:	009b      	lsls	r3, r3, #2
 8030662:	3338      	adds	r3, #56	; 0x38
 8030664:	687a      	ldr	r2, [r7, #4]
 8030666:	4413      	add	r3, r2
 8030668:	3304      	adds	r3, #4
 803066a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 803066c:	68fb      	ldr	r3, [r7, #12]
 803066e:	2201      	movs	r2, #1
 8030670:	705a      	strb	r2, [r3, #1]
 8030672:	e00f      	b.n	8030694 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030674:	78fb      	ldrb	r3, [r7, #3]
 8030676:	f003 020f 	and.w	r2, r3, #15
 803067a:	4613      	mov	r3, r2
 803067c:	00db      	lsls	r3, r3, #3
 803067e:	4413      	add	r3, r2
 8030680:	009b      	lsls	r3, r3, #2
 8030682:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030686:	687a      	ldr	r2, [r7, #4]
 8030688:	4413      	add	r3, r2
 803068a:	3304      	adds	r3, #4
 803068c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 803068e:	68fb      	ldr	r3, [r7, #12]
 8030690:	2200      	movs	r2, #0
 8030692:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8030694:	68fb      	ldr	r3, [r7, #12]
 8030696:	2200      	movs	r2, #0
 8030698:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 803069a:	78fb      	ldrb	r3, [r7, #3]
 803069c:	f003 030f 	and.w	r3, r3, #15
 80306a0:	b2da      	uxtb	r2, r3
 80306a2:	68fb      	ldr	r3, [r7, #12]
 80306a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80306a6:	687b      	ldr	r3, [r7, #4]
 80306a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80306ac:	2b01      	cmp	r3, #1
 80306ae:	d101      	bne.n	80306b4 <HAL_PCD_EP_ClrStall+0x86>
 80306b0:	2302      	movs	r3, #2
 80306b2:	e00e      	b.n	80306d2 <HAL_PCD_EP_ClrStall+0xa4>
 80306b4:	687b      	ldr	r3, [r7, #4]
 80306b6:	2201      	movs	r2, #1
 80306b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80306bc:	687b      	ldr	r3, [r7, #4]
 80306be:	681b      	ldr	r3, [r3, #0]
 80306c0:	68f9      	ldr	r1, [r7, #12]
 80306c2:	4618      	mov	r0, r3
 80306c4:	f008 fc66 	bl	8038f94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80306c8:	687b      	ldr	r3, [r7, #4]
 80306ca:	2200      	movs	r2, #0
 80306cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80306d0:	2300      	movs	r3, #0
}
 80306d2:	4618      	mov	r0, r3
 80306d4:	3710      	adds	r7, #16
 80306d6:	46bd      	mov	sp, r7
 80306d8:	bd80      	pop	{r7, pc}

080306da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80306da:	b580      	push	{r7, lr}
 80306dc:	b084      	sub	sp, #16
 80306de:	af00      	add	r7, sp, #0
 80306e0:	6078      	str	r0, [r7, #4]
 80306e2:	460b      	mov	r3, r1
 80306e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80306e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80306ea:	2b00      	cmp	r3, #0
 80306ec:	da0c      	bge.n	8030708 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80306ee:	78fb      	ldrb	r3, [r7, #3]
 80306f0:	f003 020f 	and.w	r2, r3, #15
 80306f4:	4613      	mov	r3, r2
 80306f6:	00db      	lsls	r3, r3, #3
 80306f8:	4413      	add	r3, r2
 80306fa:	009b      	lsls	r3, r3, #2
 80306fc:	3338      	adds	r3, #56	; 0x38
 80306fe:	687a      	ldr	r2, [r7, #4]
 8030700:	4413      	add	r3, r2
 8030702:	3304      	adds	r3, #4
 8030704:	60fb      	str	r3, [r7, #12]
 8030706:	e00c      	b.n	8030722 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8030708:	78fb      	ldrb	r3, [r7, #3]
 803070a:	f003 020f 	and.w	r2, r3, #15
 803070e:	4613      	mov	r3, r2
 8030710:	00db      	lsls	r3, r3, #3
 8030712:	4413      	add	r3, r2
 8030714:	009b      	lsls	r3, r3, #2
 8030716:	f503 731e 	add.w	r3, r3, #632	; 0x278
 803071a:	687a      	ldr	r2, [r7, #4]
 803071c:	4413      	add	r3, r2
 803071e:	3304      	adds	r3, #4
 8030720:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8030722:	687b      	ldr	r3, [r7, #4]
 8030724:	681b      	ldr	r3, [r3, #0]
 8030726:	68f9      	ldr	r1, [r7, #12]
 8030728:	4618      	mov	r0, r3
 803072a:	f008 fa85 	bl	8038c38 <USB_EPStopXfer>
 803072e:	4603      	mov	r3, r0
 8030730:	72fb      	strb	r3, [r7, #11]

  return ret;
 8030732:	7afb      	ldrb	r3, [r7, #11]
}
 8030734:	4618      	mov	r0, r3
 8030736:	3710      	adds	r7, #16
 8030738:	46bd      	mov	sp, r7
 803073a:	bd80      	pop	{r7, pc}

0803073c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 803073c:	b580      	push	{r7, lr}
 803073e:	b08a      	sub	sp, #40	; 0x28
 8030740:	af02      	add	r7, sp, #8
 8030742:	6078      	str	r0, [r7, #4]
 8030744:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030746:	687b      	ldr	r3, [r7, #4]
 8030748:	681b      	ldr	r3, [r3, #0]
 803074a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803074c:	697b      	ldr	r3, [r7, #20]
 803074e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8030750:	683a      	ldr	r2, [r7, #0]
 8030752:	4613      	mov	r3, r2
 8030754:	00db      	lsls	r3, r3, #3
 8030756:	4413      	add	r3, r2
 8030758:	009b      	lsls	r3, r3, #2
 803075a:	3338      	adds	r3, #56	; 0x38
 803075c:	687a      	ldr	r2, [r7, #4]
 803075e:	4413      	add	r3, r2
 8030760:	3304      	adds	r3, #4
 8030762:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8030764:	68fb      	ldr	r3, [r7, #12]
 8030766:	6a1a      	ldr	r2, [r3, #32]
 8030768:	68fb      	ldr	r3, [r7, #12]
 803076a:	699b      	ldr	r3, [r3, #24]
 803076c:	429a      	cmp	r2, r3
 803076e:	d901      	bls.n	8030774 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8030770:	2301      	movs	r3, #1
 8030772:	e06c      	b.n	803084e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8030774:	68fb      	ldr	r3, [r7, #12]
 8030776:	699a      	ldr	r2, [r3, #24]
 8030778:	68fb      	ldr	r3, [r7, #12]
 803077a:	6a1b      	ldr	r3, [r3, #32]
 803077c:	1ad3      	subs	r3, r2, r3
 803077e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8030780:	68fb      	ldr	r3, [r7, #12]
 8030782:	68db      	ldr	r3, [r3, #12]
 8030784:	69fa      	ldr	r2, [r7, #28]
 8030786:	429a      	cmp	r2, r3
 8030788:	d902      	bls.n	8030790 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 803078a:	68fb      	ldr	r3, [r7, #12]
 803078c:	68db      	ldr	r3, [r3, #12]
 803078e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8030790:	69fb      	ldr	r3, [r7, #28]
 8030792:	3303      	adds	r3, #3
 8030794:	089b      	lsrs	r3, r3, #2
 8030796:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030798:	e02b      	b.n	80307f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 803079a:	68fb      	ldr	r3, [r7, #12]
 803079c:	699a      	ldr	r2, [r3, #24]
 803079e:	68fb      	ldr	r3, [r7, #12]
 80307a0:	6a1b      	ldr	r3, [r3, #32]
 80307a2:	1ad3      	subs	r3, r2, r3
 80307a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80307a6:	68fb      	ldr	r3, [r7, #12]
 80307a8:	68db      	ldr	r3, [r3, #12]
 80307aa:	69fa      	ldr	r2, [r7, #28]
 80307ac:	429a      	cmp	r2, r3
 80307ae:	d902      	bls.n	80307b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80307b0:	68fb      	ldr	r3, [r7, #12]
 80307b2:	68db      	ldr	r3, [r3, #12]
 80307b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80307b6:	69fb      	ldr	r3, [r7, #28]
 80307b8:	3303      	adds	r3, #3
 80307ba:	089b      	lsrs	r3, r3, #2
 80307bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80307be:	68fb      	ldr	r3, [r7, #12]
 80307c0:	6919      	ldr	r1, [r3, #16]
 80307c2:	683b      	ldr	r3, [r7, #0]
 80307c4:	b2da      	uxtb	r2, r3
 80307c6:	69fb      	ldr	r3, [r7, #28]
 80307c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80307ca:	687b      	ldr	r3, [r7, #4]
 80307cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80307ce:	b2db      	uxtb	r3, r3
 80307d0:	9300      	str	r3, [sp, #0]
 80307d2:	4603      	mov	r3, r0
 80307d4:	6978      	ldr	r0, [r7, #20]
 80307d6:	f008 fad9 	bl	8038d8c <USB_WritePacket>

    ep->xfer_buff  += len;
 80307da:	68fb      	ldr	r3, [r7, #12]
 80307dc:	691a      	ldr	r2, [r3, #16]
 80307de:	69fb      	ldr	r3, [r7, #28]
 80307e0:	441a      	add	r2, r3
 80307e2:	68fb      	ldr	r3, [r7, #12]
 80307e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80307e6:	68fb      	ldr	r3, [r7, #12]
 80307e8:	6a1a      	ldr	r2, [r3, #32]
 80307ea:	69fb      	ldr	r3, [r7, #28]
 80307ec:	441a      	add	r2, r3
 80307ee:	68fb      	ldr	r3, [r7, #12]
 80307f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80307f2:	683b      	ldr	r3, [r7, #0]
 80307f4:	015a      	lsls	r2, r3, #5
 80307f6:	693b      	ldr	r3, [r7, #16]
 80307f8:	4413      	add	r3, r2
 80307fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80307fe:	699b      	ldr	r3, [r3, #24]
 8030800:	b29b      	uxth	r3, r3
 8030802:	69ba      	ldr	r2, [r7, #24]
 8030804:	429a      	cmp	r2, r3
 8030806:	d809      	bhi.n	803081c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8030808:	68fb      	ldr	r3, [r7, #12]
 803080a:	6a1a      	ldr	r2, [r3, #32]
 803080c:	68fb      	ldr	r3, [r7, #12]
 803080e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8030810:	429a      	cmp	r2, r3
 8030812:	d203      	bcs.n	803081c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8030814:	68fb      	ldr	r3, [r7, #12]
 8030816:	699b      	ldr	r3, [r3, #24]
 8030818:	2b00      	cmp	r3, #0
 803081a:	d1be      	bne.n	803079a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 803081c:	68fb      	ldr	r3, [r7, #12]
 803081e:	699a      	ldr	r2, [r3, #24]
 8030820:	68fb      	ldr	r3, [r7, #12]
 8030822:	6a1b      	ldr	r3, [r3, #32]
 8030824:	429a      	cmp	r2, r3
 8030826:	d811      	bhi.n	803084c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8030828:	683b      	ldr	r3, [r7, #0]
 803082a:	f003 030f 	and.w	r3, r3, #15
 803082e:	2201      	movs	r2, #1
 8030830:	fa02 f303 	lsl.w	r3, r2, r3
 8030834:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8030836:	693b      	ldr	r3, [r7, #16]
 8030838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803083c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803083e:	68bb      	ldr	r3, [r7, #8]
 8030840:	43db      	mvns	r3, r3
 8030842:	6939      	ldr	r1, [r7, #16]
 8030844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8030848:	4013      	ands	r3, r2
 803084a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 803084c:	2300      	movs	r3, #0
}
 803084e:	4618      	mov	r0, r3
 8030850:	3720      	adds	r7, #32
 8030852:	46bd      	mov	sp, r7
 8030854:	bd80      	pop	{r7, pc}
	...

08030858 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030858:	b580      	push	{r7, lr}
 803085a:	b088      	sub	sp, #32
 803085c:	af00      	add	r7, sp, #0
 803085e:	6078      	str	r0, [r7, #4]
 8030860:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030862:	687b      	ldr	r3, [r7, #4]
 8030864:	681b      	ldr	r3, [r3, #0]
 8030866:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030868:	69fb      	ldr	r3, [r7, #28]
 803086a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 803086c:	69fb      	ldr	r3, [r7, #28]
 803086e:	333c      	adds	r3, #60	; 0x3c
 8030870:	3304      	adds	r3, #4
 8030872:	681b      	ldr	r3, [r3, #0]
 8030874:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8030876:	683b      	ldr	r3, [r7, #0]
 8030878:	015a      	lsls	r2, r3, #5
 803087a:	69bb      	ldr	r3, [r7, #24]
 803087c:	4413      	add	r3, r2
 803087e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030882:	689b      	ldr	r3, [r3, #8]
 8030884:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8030886:	687b      	ldr	r3, [r7, #4]
 8030888:	691b      	ldr	r3, [r3, #16]
 803088a:	2b01      	cmp	r3, #1
 803088c:	d17b      	bne.n	8030986 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 803088e:	693b      	ldr	r3, [r7, #16]
 8030890:	f003 0308 	and.w	r3, r3, #8
 8030894:	2b00      	cmp	r3, #0
 8030896:	d015      	beq.n	80308c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030898:	697b      	ldr	r3, [r7, #20]
 803089a:	4a61      	ldr	r2, [pc, #388]	; (8030a20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 803089c:	4293      	cmp	r3, r2
 803089e:	f240 80b9 	bls.w	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80308a2:	693b      	ldr	r3, [r7, #16]
 80308a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80308a8:	2b00      	cmp	r3, #0
 80308aa:	f000 80b3 	beq.w	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80308ae:	683b      	ldr	r3, [r7, #0]
 80308b0:	015a      	lsls	r2, r3, #5
 80308b2:	69bb      	ldr	r3, [r7, #24]
 80308b4:	4413      	add	r3, r2
 80308b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308ba:	461a      	mov	r2, r3
 80308bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80308c0:	6093      	str	r3, [r2, #8]
 80308c2:	e0a7      	b.n	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80308c4:	693b      	ldr	r3, [r7, #16]
 80308c6:	f003 0320 	and.w	r3, r3, #32
 80308ca:	2b00      	cmp	r3, #0
 80308cc:	d009      	beq.n	80308e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80308ce:	683b      	ldr	r3, [r7, #0]
 80308d0:	015a      	lsls	r2, r3, #5
 80308d2:	69bb      	ldr	r3, [r7, #24]
 80308d4:	4413      	add	r3, r2
 80308d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80308da:	461a      	mov	r2, r3
 80308dc:	2320      	movs	r3, #32
 80308de:	6093      	str	r3, [r2, #8]
 80308e0:	e098      	b.n	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80308e2:	693b      	ldr	r3, [r7, #16]
 80308e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80308e8:	2b00      	cmp	r3, #0
 80308ea:	f040 8093 	bne.w	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80308ee:	697b      	ldr	r3, [r7, #20]
 80308f0:	4a4b      	ldr	r2, [pc, #300]	; (8030a20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80308f2:	4293      	cmp	r3, r2
 80308f4:	d90f      	bls.n	8030916 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80308f6:	693b      	ldr	r3, [r7, #16]
 80308f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80308fc:	2b00      	cmp	r3, #0
 80308fe:	d00a      	beq.n	8030916 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030900:	683b      	ldr	r3, [r7, #0]
 8030902:	015a      	lsls	r2, r3, #5
 8030904:	69bb      	ldr	r3, [r7, #24]
 8030906:	4413      	add	r3, r2
 8030908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803090c:	461a      	mov	r2, r3
 803090e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8030912:	6093      	str	r3, [r2, #8]
 8030914:	e07e      	b.n	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8030916:	683a      	ldr	r2, [r7, #0]
 8030918:	4613      	mov	r3, r2
 803091a:	00db      	lsls	r3, r3, #3
 803091c:	4413      	add	r3, r2
 803091e:	009b      	lsls	r3, r3, #2
 8030920:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8030924:	687a      	ldr	r2, [r7, #4]
 8030926:	4413      	add	r3, r2
 8030928:	3304      	adds	r3, #4
 803092a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 803092c:	68fb      	ldr	r3, [r7, #12]
 803092e:	69da      	ldr	r2, [r3, #28]
 8030930:	683b      	ldr	r3, [r7, #0]
 8030932:	0159      	lsls	r1, r3, #5
 8030934:	69bb      	ldr	r3, [r7, #24]
 8030936:	440b      	add	r3, r1
 8030938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803093c:	691b      	ldr	r3, [r3, #16]
 803093e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8030942:	1ad2      	subs	r2, r2, r3
 8030944:	68fb      	ldr	r3, [r7, #12]
 8030946:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8030948:	683b      	ldr	r3, [r7, #0]
 803094a:	2b00      	cmp	r3, #0
 803094c:	d114      	bne.n	8030978 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 803094e:	68fb      	ldr	r3, [r7, #12]
 8030950:	699b      	ldr	r3, [r3, #24]
 8030952:	2b00      	cmp	r3, #0
 8030954:	d109      	bne.n	803096a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8030956:	687b      	ldr	r3, [r7, #4]
 8030958:	6818      	ldr	r0, [r3, #0]
 803095a:	687b      	ldr	r3, [r7, #4]
 803095c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030960:	461a      	mov	r2, r3
 8030962:	2101      	movs	r1, #1
 8030964:	f008 fcaa 	bl	80392bc <USB_EP0_OutStart>
 8030968:	e006      	b.n	8030978 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 803096a:	68fb      	ldr	r3, [r7, #12]
 803096c:	691a      	ldr	r2, [r3, #16]
 803096e:	68fb      	ldr	r3, [r7, #12]
 8030970:	6a1b      	ldr	r3, [r3, #32]
 8030972:	441a      	add	r2, r3
 8030974:	68fb      	ldr	r3, [r7, #12]
 8030976:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8030978:	683b      	ldr	r3, [r7, #0]
 803097a:	b2db      	uxtb	r3, r3
 803097c:	4619      	mov	r1, r3
 803097e:	6878      	ldr	r0, [r7, #4]
 8030980:	f00a ff1e 	bl	803b7c0 <HAL_PCD_DataOutStageCallback>
 8030984:	e046      	b.n	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8030986:	697b      	ldr	r3, [r7, #20]
 8030988:	4a26      	ldr	r2, [pc, #152]	; (8030a24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 803098a:	4293      	cmp	r3, r2
 803098c:	d124      	bne.n	80309d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 803098e:	693b      	ldr	r3, [r7, #16]
 8030990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8030994:	2b00      	cmp	r3, #0
 8030996:	d00a      	beq.n	80309ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030998:	683b      	ldr	r3, [r7, #0]
 803099a:	015a      	lsls	r2, r3, #5
 803099c:	69bb      	ldr	r3, [r7, #24]
 803099e:	4413      	add	r3, r2
 80309a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80309a4:	461a      	mov	r2, r3
 80309a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80309aa:	6093      	str	r3, [r2, #8]
 80309ac:	e032      	b.n	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80309ae:	693b      	ldr	r3, [r7, #16]
 80309b0:	f003 0320 	and.w	r3, r3, #32
 80309b4:	2b00      	cmp	r3, #0
 80309b6:	d008      	beq.n	80309ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80309b8:	683b      	ldr	r3, [r7, #0]
 80309ba:	015a      	lsls	r2, r3, #5
 80309bc:	69bb      	ldr	r3, [r7, #24]
 80309be:	4413      	add	r3, r2
 80309c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80309c4:	461a      	mov	r2, r3
 80309c6:	2320      	movs	r3, #32
 80309c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80309ca:	683b      	ldr	r3, [r7, #0]
 80309cc:	b2db      	uxtb	r3, r3
 80309ce:	4619      	mov	r1, r3
 80309d0:	6878      	ldr	r0, [r7, #4]
 80309d2:	f00a fef5 	bl	803b7c0 <HAL_PCD_DataOutStageCallback>
 80309d6:	e01d      	b.n	8030a14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80309d8:	683b      	ldr	r3, [r7, #0]
 80309da:	2b00      	cmp	r3, #0
 80309dc:	d114      	bne.n	8030a08 <PCD_EP_OutXfrComplete_int+0x1b0>
 80309de:	6879      	ldr	r1, [r7, #4]
 80309e0:	683a      	ldr	r2, [r7, #0]
 80309e2:	4613      	mov	r3, r2
 80309e4:	00db      	lsls	r3, r3, #3
 80309e6:	4413      	add	r3, r2
 80309e8:	009b      	lsls	r3, r3, #2
 80309ea:	440b      	add	r3, r1
 80309ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80309f0:	681b      	ldr	r3, [r3, #0]
 80309f2:	2b00      	cmp	r3, #0
 80309f4:	d108      	bne.n	8030a08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80309f6:	687b      	ldr	r3, [r7, #4]
 80309f8:	6818      	ldr	r0, [r3, #0]
 80309fa:	687b      	ldr	r3, [r7, #4]
 80309fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030a00:	461a      	mov	r2, r3
 8030a02:	2100      	movs	r1, #0
 8030a04:	f008 fc5a 	bl	80392bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8030a08:	683b      	ldr	r3, [r7, #0]
 8030a0a:	b2db      	uxtb	r3, r3
 8030a0c:	4619      	mov	r1, r3
 8030a0e:	6878      	ldr	r0, [r7, #4]
 8030a10:	f00a fed6 	bl	803b7c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8030a14:	2300      	movs	r3, #0
}
 8030a16:	4618      	mov	r0, r3
 8030a18:	3720      	adds	r7, #32
 8030a1a:	46bd      	mov	sp, r7
 8030a1c:	bd80      	pop	{r7, pc}
 8030a1e:	bf00      	nop
 8030a20:	4f54300a 	.word	0x4f54300a
 8030a24:	4f54310a 	.word	0x4f54310a

08030a28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8030a28:	b580      	push	{r7, lr}
 8030a2a:	b086      	sub	sp, #24
 8030a2c:	af00      	add	r7, sp, #0
 8030a2e:	6078      	str	r0, [r7, #4]
 8030a30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030a32:	687b      	ldr	r3, [r7, #4]
 8030a34:	681b      	ldr	r3, [r3, #0]
 8030a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8030a38:	697b      	ldr	r3, [r7, #20]
 8030a3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8030a3c:	697b      	ldr	r3, [r7, #20]
 8030a3e:	333c      	adds	r3, #60	; 0x3c
 8030a40:	3304      	adds	r3, #4
 8030a42:	681b      	ldr	r3, [r3, #0]
 8030a44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8030a46:	683b      	ldr	r3, [r7, #0]
 8030a48:	015a      	lsls	r2, r3, #5
 8030a4a:	693b      	ldr	r3, [r7, #16]
 8030a4c:	4413      	add	r3, r2
 8030a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030a52:	689b      	ldr	r3, [r3, #8]
 8030a54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030a56:	68fb      	ldr	r3, [r7, #12]
 8030a58:	4a15      	ldr	r2, [pc, #84]	; (8030ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8030a5a:	4293      	cmp	r3, r2
 8030a5c:	d90e      	bls.n	8030a7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8030a5e:	68bb      	ldr	r3, [r7, #8]
 8030a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8030a64:	2b00      	cmp	r3, #0
 8030a66:	d009      	beq.n	8030a7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8030a68:	683b      	ldr	r3, [r7, #0]
 8030a6a:	015a      	lsls	r2, r3, #5
 8030a6c:	693b      	ldr	r3, [r7, #16]
 8030a6e:	4413      	add	r3, r2
 8030a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8030a74:	461a      	mov	r2, r3
 8030a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8030a7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8030a7c:	6878      	ldr	r0, [r7, #4]
 8030a7e:	f00a fe8d 	bl	803b79c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8030a82:	68fb      	ldr	r3, [r7, #12]
 8030a84:	4a0a      	ldr	r2, [pc, #40]	; (8030ab0 <PCD_EP_OutSetupPacket_int+0x88>)
 8030a86:	4293      	cmp	r3, r2
 8030a88:	d90c      	bls.n	8030aa4 <PCD_EP_OutSetupPacket_int+0x7c>
 8030a8a:	687b      	ldr	r3, [r7, #4]
 8030a8c:	691b      	ldr	r3, [r3, #16]
 8030a8e:	2b01      	cmp	r3, #1
 8030a90:	d108      	bne.n	8030aa4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8030a92:	687b      	ldr	r3, [r7, #4]
 8030a94:	6818      	ldr	r0, [r3, #0]
 8030a96:	687b      	ldr	r3, [r7, #4]
 8030a98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8030a9c:	461a      	mov	r2, r3
 8030a9e:	2101      	movs	r1, #1
 8030aa0:	f008 fc0c 	bl	80392bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8030aa4:	2300      	movs	r3, #0
}
 8030aa6:	4618      	mov	r0, r3
 8030aa8:	3718      	adds	r7, #24
 8030aaa:	46bd      	mov	sp, r7
 8030aac:	bd80      	pop	{r7, pc}
 8030aae:	bf00      	nop
 8030ab0:	4f54300a 	.word	0x4f54300a

08030ab4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8030ab4:	b480      	push	{r7}
 8030ab6:	b085      	sub	sp, #20
 8030ab8:	af00      	add	r7, sp, #0
 8030aba:	6078      	str	r0, [r7, #4]
 8030abc:	460b      	mov	r3, r1
 8030abe:	70fb      	strb	r3, [r7, #3]
 8030ac0:	4613      	mov	r3, r2
 8030ac2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8030ac4:	687b      	ldr	r3, [r7, #4]
 8030ac6:	681b      	ldr	r3, [r3, #0]
 8030ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8030aca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8030acc:	78fb      	ldrb	r3, [r7, #3]
 8030ace:	2b00      	cmp	r3, #0
 8030ad0:	d107      	bne.n	8030ae2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8030ad2:	883b      	ldrh	r3, [r7, #0]
 8030ad4:	0419      	lsls	r1, r3, #16
 8030ad6:	687b      	ldr	r3, [r7, #4]
 8030ad8:	681b      	ldr	r3, [r3, #0]
 8030ada:	68ba      	ldr	r2, [r7, #8]
 8030adc:	430a      	orrs	r2, r1
 8030ade:	629a      	str	r2, [r3, #40]	; 0x28
 8030ae0:	e028      	b.n	8030b34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8030ae2:	687b      	ldr	r3, [r7, #4]
 8030ae4:	681b      	ldr	r3, [r3, #0]
 8030ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030ae8:	0c1b      	lsrs	r3, r3, #16
 8030aea:	68ba      	ldr	r2, [r7, #8]
 8030aec:	4413      	add	r3, r2
 8030aee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8030af0:	2300      	movs	r3, #0
 8030af2:	73fb      	strb	r3, [r7, #15]
 8030af4:	e00d      	b.n	8030b12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8030af6:	687b      	ldr	r3, [r7, #4]
 8030af8:	681a      	ldr	r2, [r3, #0]
 8030afa:	7bfb      	ldrb	r3, [r7, #15]
 8030afc:	3340      	adds	r3, #64	; 0x40
 8030afe:	009b      	lsls	r3, r3, #2
 8030b00:	4413      	add	r3, r2
 8030b02:	685b      	ldr	r3, [r3, #4]
 8030b04:	0c1b      	lsrs	r3, r3, #16
 8030b06:	68ba      	ldr	r2, [r7, #8]
 8030b08:	4413      	add	r3, r2
 8030b0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8030b0c:	7bfb      	ldrb	r3, [r7, #15]
 8030b0e:	3301      	adds	r3, #1
 8030b10:	73fb      	strb	r3, [r7, #15]
 8030b12:	7bfa      	ldrb	r2, [r7, #15]
 8030b14:	78fb      	ldrb	r3, [r7, #3]
 8030b16:	3b01      	subs	r3, #1
 8030b18:	429a      	cmp	r2, r3
 8030b1a:	d3ec      	bcc.n	8030af6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8030b1c:	883b      	ldrh	r3, [r7, #0]
 8030b1e:	0418      	lsls	r0, r3, #16
 8030b20:	687b      	ldr	r3, [r7, #4]
 8030b22:	6819      	ldr	r1, [r3, #0]
 8030b24:	78fb      	ldrb	r3, [r7, #3]
 8030b26:	3b01      	subs	r3, #1
 8030b28:	68ba      	ldr	r2, [r7, #8]
 8030b2a:	4302      	orrs	r2, r0
 8030b2c:	3340      	adds	r3, #64	; 0x40
 8030b2e:	009b      	lsls	r3, r3, #2
 8030b30:	440b      	add	r3, r1
 8030b32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8030b34:	2300      	movs	r3, #0
}
 8030b36:	4618      	mov	r0, r3
 8030b38:	3714      	adds	r7, #20
 8030b3a:	46bd      	mov	sp, r7
 8030b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b40:	4770      	bx	lr

08030b42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8030b42:	b480      	push	{r7}
 8030b44:	b083      	sub	sp, #12
 8030b46:	af00      	add	r7, sp, #0
 8030b48:	6078      	str	r0, [r7, #4]
 8030b4a:	460b      	mov	r3, r1
 8030b4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8030b4e:	687b      	ldr	r3, [r7, #4]
 8030b50:	681b      	ldr	r3, [r3, #0]
 8030b52:	887a      	ldrh	r2, [r7, #2]
 8030b54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8030b56:	2300      	movs	r3, #0
}
 8030b58:	4618      	mov	r0, r3
 8030b5a:	370c      	adds	r7, #12
 8030b5c:	46bd      	mov	sp, r7
 8030b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030b62:	4770      	bx	lr

08030b64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8030b64:	b480      	push	{r7}
 8030b66:	b085      	sub	sp, #20
 8030b68:	af00      	add	r7, sp, #0
 8030b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8030b6c:	687b      	ldr	r3, [r7, #4]
 8030b6e:	681b      	ldr	r3, [r3, #0]
 8030b70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8030b72:	687b      	ldr	r3, [r7, #4]
 8030b74:	2201      	movs	r2, #1
 8030b76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8030b7a:	687b      	ldr	r3, [r7, #4]
 8030b7c:	2200      	movs	r2, #0
 8030b7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8030b82:	68fb      	ldr	r3, [r7, #12]
 8030b84:	699b      	ldr	r3, [r3, #24]
 8030b86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8030b8a:	68fb      	ldr	r3, [r7, #12]
 8030b8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8030b8e:	68fb      	ldr	r3, [r7, #12]
 8030b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8030b92:	4b05      	ldr	r3, [pc, #20]	; (8030ba8 <HAL_PCDEx_ActivateLPM+0x44>)
 8030b94:	4313      	orrs	r3, r2
 8030b96:	68fa      	ldr	r2, [r7, #12]
 8030b98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8030b9a:	2300      	movs	r3, #0
}
 8030b9c:	4618      	mov	r0, r3
 8030b9e:	3714      	adds	r7, #20
 8030ba0:	46bd      	mov	sp, r7
 8030ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030ba6:	4770      	bx	lr
 8030ba8:	10000003 	.word	0x10000003

08030bac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8030bac:	b480      	push	{r7}
 8030bae:	b083      	sub	sp, #12
 8030bb0:	af00      	add	r7, sp, #0
 8030bb2:	6078      	str	r0, [r7, #4]
 8030bb4:	460b      	mov	r3, r1
 8030bb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8030bb8:	bf00      	nop
 8030bba:	370c      	adds	r7, #12
 8030bbc:	46bd      	mov	sp, r7
 8030bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030bc2:	4770      	bx	lr

08030bc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8030bc4:	b580      	push	{r7, lr}
 8030bc6:	b084      	sub	sp, #16
 8030bc8:	af00      	add	r7, sp, #0
 8030bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8030bcc:	4b19      	ldr	r3, [pc, #100]	; (8030c34 <HAL_PWREx_ConfigSupply+0x70>)
 8030bce:	68db      	ldr	r3, [r3, #12]
 8030bd0:	f003 0304 	and.w	r3, r3, #4
 8030bd4:	2b04      	cmp	r3, #4
 8030bd6:	d00a      	beq.n	8030bee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8030bd8:	4b16      	ldr	r3, [pc, #88]	; (8030c34 <HAL_PWREx_ConfigSupply+0x70>)
 8030bda:	68db      	ldr	r3, [r3, #12]
 8030bdc:	f003 0307 	and.w	r3, r3, #7
 8030be0:	687a      	ldr	r2, [r7, #4]
 8030be2:	429a      	cmp	r2, r3
 8030be4:	d001      	beq.n	8030bea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8030be6:	2301      	movs	r3, #1
 8030be8:	e01f      	b.n	8030c2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8030bea:	2300      	movs	r3, #0
 8030bec:	e01d      	b.n	8030c2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8030bee:	4b11      	ldr	r3, [pc, #68]	; (8030c34 <HAL_PWREx_ConfigSupply+0x70>)
 8030bf0:	68db      	ldr	r3, [r3, #12]
 8030bf2:	f023 0207 	bic.w	r2, r3, #7
 8030bf6:	490f      	ldr	r1, [pc, #60]	; (8030c34 <HAL_PWREx_ConfigSupply+0x70>)
 8030bf8:	687b      	ldr	r3, [r7, #4]
 8030bfa:	4313      	orrs	r3, r2
 8030bfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8030bfe:	f7fa f843 	bl	802ac88 <HAL_GetTick>
 8030c02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030c04:	e009      	b.n	8030c1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8030c06:	f7fa f83f 	bl	802ac88 <HAL_GetTick>
 8030c0a:	4602      	mov	r2, r0
 8030c0c:	68fb      	ldr	r3, [r7, #12]
 8030c0e:	1ad3      	subs	r3, r2, r3
 8030c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8030c14:	d901      	bls.n	8030c1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8030c16:	2301      	movs	r3, #1
 8030c18:	e007      	b.n	8030c2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8030c1a:	4b06      	ldr	r3, [pc, #24]	; (8030c34 <HAL_PWREx_ConfigSupply+0x70>)
 8030c1c:	685b      	ldr	r3, [r3, #4]
 8030c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8030c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8030c26:	d1ee      	bne.n	8030c06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8030c28:	2300      	movs	r3, #0
}
 8030c2a:	4618      	mov	r0, r3
 8030c2c:	3710      	adds	r7, #16
 8030c2e:	46bd      	mov	sp, r7
 8030c30:	bd80      	pop	{r7, pc}
 8030c32:	bf00      	nop
 8030c34:	58024800 	.word	0x58024800

08030c38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8030c38:	b480      	push	{r7}
 8030c3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8030c3c:	4b05      	ldr	r3, [pc, #20]	; (8030c54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030c3e:	68db      	ldr	r3, [r3, #12]
 8030c40:	4a04      	ldr	r2, [pc, #16]	; (8030c54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8030c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8030c46:	60d3      	str	r3, [r2, #12]
}
 8030c48:	bf00      	nop
 8030c4a:	46bd      	mov	sp, r7
 8030c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030c50:	4770      	bx	lr
 8030c52:	bf00      	nop
 8030c54:	58024800 	.word	0x58024800

08030c58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8030c58:	b580      	push	{r7, lr}
 8030c5a:	b08c      	sub	sp, #48	; 0x30
 8030c5c:	af00      	add	r7, sp, #0
 8030c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8030c60:	687b      	ldr	r3, [r7, #4]
 8030c62:	2b00      	cmp	r3, #0
 8030c64:	d102      	bne.n	8030c6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8030c66:	2301      	movs	r3, #1
 8030c68:	f000 bc1d 	b.w	80314a6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8030c6c:	687b      	ldr	r3, [r7, #4]
 8030c6e:	681b      	ldr	r3, [r3, #0]
 8030c70:	f003 0301 	and.w	r3, r3, #1
 8030c74:	2b00      	cmp	r3, #0
 8030c76:	f000 8087 	beq.w	8030d88 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030c7a:	4b99      	ldr	r3, [pc, #612]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030c7c:	691b      	ldr	r3, [r3, #16]
 8030c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030c84:	4b96      	ldr	r3, [pc, #600]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030c88:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8030c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030c8c:	2b10      	cmp	r3, #16
 8030c8e:	d007      	beq.n	8030ca0 <HAL_RCC_OscConfig+0x48>
 8030c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030c92:	2b18      	cmp	r3, #24
 8030c94:	d110      	bne.n	8030cb8 <HAL_RCC_OscConfig+0x60>
 8030c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030c98:	f003 0303 	and.w	r3, r3, #3
 8030c9c:	2b02      	cmp	r3, #2
 8030c9e:	d10b      	bne.n	8030cb8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030ca0:	4b8f      	ldr	r3, [pc, #572]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030ca2:	681b      	ldr	r3, [r3, #0]
 8030ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030ca8:	2b00      	cmp	r3, #0
 8030caa:	d06c      	beq.n	8030d86 <HAL_RCC_OscConfig+0x12e>
 8030cac:	687b      	ldr	r3, [r7, #4]
 8030cae:	685b      	ldr	r3, [r3, #4]
 8030cb0:	2b00      	cmp	r3, #0
 8030cb2:	d168      	bne.n	8030d86 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8030cb4:	2301      	movs	r3, #1
 8030cb6:	e3f6      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8030cb8:	687b      	ldr	r3, [r7, #4]
 8030cba:	685b      	ldr	r3, [r3, #4]
 8030cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8030cc0:	d106      	bne.n	8030cd0 <HAL_RCC_OscConfig+0x78>
 8030cc2:	4b87      	ldr	r3, [pc, #540]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030cc4:	681b      	ldr	r3, [r3, #0]
 8030cc6:	4a86      	ldr	r2, [pc, #536]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030ccc:	6013      	str	r3, [r2, #0]
 8030cce:	e02e      	b.n	8030d2e <HAL_RCC_OscConfig+0xd6>
 8030cd0:	687b      	ldr	r3, [r7, #4]
 8030cd2:	685b      	ldr	r3, [r3, #4]
 8030cd4:	2b00      	cmp	r3, #0
 8030cd6:	d10c      	bne.n	8030cf2 <HAL_RCC_OscConfig+0x9a>
 8030cd8:	4b81      	ldr	r3, [pc, #516]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030cda:	681b      	ldr	r3, [r3, #0]
 8030cdc:	4a80      	ldr	r2, [pc, #512]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030ce2:	6013      	str	r3, [r2, #0]
 8030ce4:	4b7e      	ldr	r3, [pc, #504]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030ce6:	681b      	ldr	r3, [r3, #0]
 8030ce8:	4a7d      	ldr	r2, [pc, #500]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030cee:	6013      	str	r3, [r2, #0]
 8030cf0:	e01d      	b.n	8030d2e <HAL_RCC_OscConfig+0xd6>
 8030cf2:	687b      	ldr	r3, [r7, #4]
 8030cf4:	685b      	ldr	r3, [r3, #4]
 8030cf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8030cfa:	d10c      	bne.n	8030d16 <HAL_RCC_OscConfig+0xbe>
 8030cfc:	4b78      	ldr	r3, [pc, #480]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030cfe:	681b      	ldr	r3, [r3, #0]
 8030d00:	4a77      	ldr	r2, [pc, #476]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8030d06:	6013      	str	r3, [r2, #0]
 8030d08:	4b75      	ldr	r3, [pc, #468]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d0a:	681b      	ldr	r3, [r3, #0]
 8030d0c:	4a74      	ldr	r2, [pc, #464]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8030d12:	6013      	str	r3, [r2, #0]
 8030d14:	e00b      	b.n	8030d2e <HAL_RCC_OscConfig+0xd6>
 8030d16:	4b72      	ldr	r3, [pc, #456]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d18:	681b      	ldr	r3, [r3, #0]
 8030d1a:	4a71      	ldr	r2, [pc, #452]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8030d20:	6013      	str	r3, [r2, #0]
 8030d22:	4b6f      	ldr	r3, [pc, #444]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d24:	681b      	ldr	r3, [r3, #0]
 8030d26:	4a6e      	ldr	r2, [pc, #440]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8030d2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8030d2e:	687b      	ldr	r3, [r7, #4]
 8030d30:	685b      	ldr	r3, [r3, #4]
 8030d32:	2b00      	cmp	r3, #0
 8030d34:	d013      	beq.n	8030d5e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030d36:	f7f9 ffa7 	bl	802ac88 <HAL_GetTick>
 8030d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030d3c:	e008      	b.n	8030d50 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030d3e:	f7f9 ffa3 	bl	802ac88 <HAL_GetTick>
 8030d42:	4602      	mov	r2, r0
 8030d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030d46:	1ad3      	subs	r3, r2, r3
 8030d48:	2b64      	cmp	r3, #100	; 0x64
 8030d4a:	d901      	bls.n	8030d50 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8030d4c:	2303      	movs	r3, #3
 8030d4e:	e3aa      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8030d50:	4b63      	ldr	r3, [pc, #396]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d52:	681b      	ldr	r3, [r3, #0]
 8030d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030d58:	2b00      	cmp	r3, #0
 8030d5a:	d0f0      	beq.n	8030d3e <HAL_RCC_OscConfig+0xe6>
 8030d5c:	e014      	b.n	8030d88 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030d5e:	f7f9 ff93 	bl	802ac88 <HAL_GetTick>
 8030d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030d64:	e008      	b.n	8030d78 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8030d66:	f7f9 ff8f 	bl	802ac88 <HAL_GetTick>
 8030d6a:	4602      	mov	r2, r0
 8030d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030d6e:	1ad3      	subs	r3, r2, r3
 8030d70:	2b64      	cmp	r3, #100	; 0x64
 8030d72:	d901      	bls.n	8030d78 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8030d74:	2303      	movs	r3, #3
 8030d76:	e396      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8030d78:	4b59      	ldr	r3, [pc, #356]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d7a:	681b      	ldr	r3, [r3, #0]
 8030d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8030d80:	2b00      	cmp	r3, #0
 8030d82:	d1f0      	bne.n	8030d66 <HAL_RCC_OscConfig+0x10e>
 8030d84:	e000      	b.n	8030d88 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8030d86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8030d88:	687b      	ldr	r3, [r7, #4]
 8030d8a:	681b      	ldr	r3, [r3, #0]
 8030d8c:	f003 0302 	and.w	r3, r3, #2
 8030d90:	2b00      	cmp	r3, #0
 8030d92:	f000 80cb 	beq.w	8030f2c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030d96:	4b52      	ldr	r3, [pc, #328]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030d98:	691b      	ldr	r3, [r3, #16]
 8030d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030d9e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030da0:	4b4f      	ldr	r3, [pc, #316]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030da4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8030da6:	6a3b      	ldr	r3, [r7, #32]
 8030da8:	2b00      	cmp	r3, #0
 8030daa:	d007      	beq.n	8030dbc <HAL_RCC_OscConfig+0x164>
 8030dac:	6a3b      	ldr	r3, [r7, #32]
 8030dae:	2b18      	cmp	r3, #24
 8030db0:	d156      	bne.n	8030e60 <HAL_RCC_OscConfig+0x208>
 8030db2:	69fb      	ldr	r3, [r7, #28]
 8030db4:	f003 0303 	and.w	r3, r3, #3
 8030db8:	2b00      	cmp	r3, #0
 8030dba:	d151      	bne.n	8030e60 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030dbc:	4b48      	ldr	r3, [pc, #288]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030dbe:	681b      	ldr	r3, [r3, #0]
 8030dc0:	f003 0304 	and.w	r3, r3, #4
 8030dc4:	2b00      	cmp	r3, #0
 8030dc6:	d005      	beq.n	8030dd4 <HAL_RCC_OscConfig+0x17c>
 8030dc8:	687b      	ldr	r3, [r7, #4]
 8030dca:	68db      	ldr	r3, [r3, #12]
 8030dcc:	2b00      	cmp	r3, #0
 8030dce:	d101      	bne.n	8030dd4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8030dd0:	2301      	movs	r3, #1
 8030dd2:	e368      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030dd4:	4b42      	ldr	r3, [pc, #264]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030dd6:	681b      	ldr	r3, [r3, #0]
 8030dd8:	f023 0219 	bic.w	r2, r3, #25
 8030ddc:	687b      	ldr	r3, [r7, #4]
 8030dde:	68db      	ldr	r3, [r3, #12]
 8030de0:	493f      	ldr	r1, [pc, #252]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030de2:	4313      	orrs	r3, r2
 8030de4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8030de6:	f7f9 ff4f 	bl	802ac88 <HAL_GetTick>
 8030dea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030dec:	e008      	b.n	8030e00 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030dee:	f7f9 ff4b 	bl	802ac88 <HAL_GetTick>
 8030df2:	4602      	mov	r2, r0
 8030df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030df6:	1ad3      	subs	r3, r2, r3
 8030df8:	2b02      	cmp	r3, #2
 8030dfa:	d901      	bls.n	8030e00 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8030dfc:	2303      	movs	r3, #3
 8030dfe:	e352      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030e00:	4b37      	ldr	r3, [pc, #220]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e02:	681b      	ldr	r3, [r3, #0]
 8030e04:	f003 0304 	and.w	r3, r3, #4
 8030e08:	2b00      	cmp	r3, #0
 8030e0a:	d0f0      	beq.n	8030dee <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e0c:	f7f9 ff6c 	bl	802ace8 <HAL_GetREVID>
 8030e10:	4603      	mov	r3, r0
 8030e12:	f241 0203 	movw	r2, #4099	; 0x1003
 8030e16:	4293      	cmp	r3, r2
 8030e18:	d817      	bhi.n	8030e4a <HAL_RCC_OscConfig+0x1f2>
 8030e1a:	687b      	ldr	r3, [r7, #4]
 8030e1c:	691b      	ldr	r3, [r3, #16]
 8030e1e:	2b40      	cmp	r3, #64	; 0x40
 8030e20:	d108      	bne.n	8030e34 <HAL_RCC_OscConfig+0x1dc>
 8030e22:	4b2f      	ldr	r3, [pc, #188]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e24:	685b      	ldr	r3, [r3, #4]
 8030e26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030e2a:	4a2d      	ldr	r2, [pc, #180]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030e30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030e32:	e07b      	b.n	8030f2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e34:	4b2a      	ldr	r3, [pc, #168]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e36:	685b      	ldr	r3, [r3, #4]
 8030e38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030e3c:	687b      	ldr	r3, [r7, #4]
 8030e3e:	691b      	ldr	r3, [r3, #16]
 8030e40:	031b      	lsls	r3, r3, #12
 8030e42:	4927      	ldr	r1, [pc, #156]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e44:	4313      	orrs	r3, r2
 8030e46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030e48:	e070      	b.n	8030f2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030e4a:	4b25      	ldr	r3, [pc, #148]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e4c:	685b      	ldr	r3, [r3, #4]
 8030e4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030e52:	687b      	ldr	r3, [r7, #4]
 8030e54:	691b      	ldr	r3, [r3, #16]
 8030e56:	061b      	lsls	r3, r3, #24
 8030e58:	4921      	ldr	r1, [pc, #132]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e5a:	4313      	orrs	r3, r2
 8030e5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8030e5e:	e065      	b.n	8030f2c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8030e60:	687b      	ldr	r3, [r7, #4]
 8030e62:	68db      	ldr	r3, [r3, #12]
 8030e64:	2b00      	cmp	r3, #0
 8030e66:	d048      	beq.n	8030efa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8030e68:	4b1d      	ldr	r3, [pc, #116]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e6a:	681b      	ldr	r3, [r3, #0]
 8030e6c:	f023 0219 	bic.w	r2, r3, #25
 8030e70:	687b      	ldr	r3, [r7, #4]
 8030e72:	68db      	ldr	r3, [r3, #12]
 8030e74:	491a      	ldr	r1, [pc, #104]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e76:	4313      	orrs	r3, r2
 8030e78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030e7a:	f7f9 ff05 	bl	802ac88 <HAL_GetTick>
 8030e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030e80:	e008      	b.n	8030e94 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030e82:	f7f9 ff01 	bl	802ac88 <HAL_GetTick>
 8030e86:	4602      	mov	r2, r0
 8030e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030e8a:	1ad3      	subs	r3, r2, r3
 8030e8c:	2b02      	cmp	r3, #2
 8030e8e:	d901      	bls.n	8030e94 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8030e90:	2303      	movs	r3, #3
 8030e92:	e308      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8030e94:	4b12      	ldr	r3, [pc, #72]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030e96:	681b      	ldr	r3, [r3, #0]
 8030e98:	f003 0304 	and.w	r3, r3, #4
 8030e9c:	2b00      	cmp	r3, #0
 8030e9e:	d0f0      	beq.n	8030e82 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8030ea0:	f7f9 ff22 	bl	802ace8 <HAL_GetREVID>
 8030ea4:	4603      	mov	r3, r0
 8030ea6:	f241 0203 	movw	r2, #4099	; 0x1003
 8030eaa:	4293      	cmp	r3, r2
 8030eac:	d81a      	bhi.n	8030ee4 <HAL_RCC_OscConfig+0x28c>
 8030eae:	687b      	ldr	r3, [r7, #4]
 8030eb0:	691b      	ldr	r3, [r3, #16]
 8030eb2:	2b40      	cmp	r3, #64	; 0x40
 8030eb4:	d108      	bne.n	8030ec8 <HAL_RCC_OscConfig+0x270>
 8030eb6:	4b0a      	ldr	r3, [pc, #40]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030eb8:	685b      	ldr	r3, [r3, #4]
 8030eba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8030ebe:	4a08      	ldr	r2, [pc, #32]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8030ec4:	6053      	str	r3, [r2, #4]
 8030ec6:	e031      	b.n	8030f2c <HAL_RCC_OscConfig+0x2d4>
 8030ec8:	4b05      	ldr	r3, [pc, #20]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030eca:	685b      	ldr	r3, [r3, #4]
 8030ecc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8030ed0:	687b      	ldr	r3, [r7, #4]
 8030ed2:	691b      	ldr	r3, [r3, #16]
 8030ed4:	031b      	lsls	r3, r3, #12
 8030ed6:	4902      	ldr	r1, [pc, #8]	; (8030ee0 <HAL_RCC_OscConfig+0x288>)
 8030ed8:	4313      	orrs	r3, r2
 8030eda:	604b      	str	r3, [r1, #4]
 8030edc:	e026      	b.n	8030f2c <HAL_RCC_OscConfig+0x2d4>
 8030ede:	bf00      	nop
 8030ee0:	58024400 	.word	0x58024400
 8030ee4:	4b9a      	ldr	r3, [pc, #616]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030ee6:	685b      	ldr	r3, [r3, #4]
 8030ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8030eec:	687b      	ldr	r3, [r7, #4]
 8030eee:	691b      	ldr	r3, [r3, #16]
 8030ef0:	061b      	lsls	r3, r3, #24
 8030ef2:	4997      	ldr	r1, [pc, #604]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030ef4:	4313      	orrs	r3, r2
 8030ef6:	604b      	str	r3, [r1, #4]
 8030ef8:	e018      	b.n	8030f2c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8030efa:	4b95      	ldr	r3, [pc, #596]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030efc:	681b      	ldr	r3, [r3, #0]
 8030efe:	4a94      	ldr	r2, [pc, #592]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030f00:	f023 0301 	bic.w	r3, r3, #1
 8030f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030f06:	f7f9 febf 	bl	802ac88 <HAL_GetTick>
 8030f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030f0c:	e008      	b.n	8030f20 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8030f0e:	f7f9 febb 	bl	802ac88 <HAL_GetTick>
 8030f12:	4602      	mov	r2, r0
 8030f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030f16:	1ad3      	subs	r3, r2, r3
 8030f18:	2b02      	cmp	r3, #2
 8030f1a:	d901      	bls.n	8030f20 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8030f1c:	2303      	movs	r3, #3
 8030f1e:	e2c2      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8030f20:	4b8b      	ldr	r3, [pc, #556]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030f22:	681b      	ldr	r3, [r3, #0]
 8030f24:	f003 0304 	and.w	r3, r3, #4
 8030f28:	2b00      	cmp	r3, #0
 8030f2a:	d1f0      	bne.n	8030f0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8030f2c:	687b      	ldr	r3, [r7, #4]
 8030f2e:	681b      	ldr	r3, [r3, #0]
 8030f30:	f003 0310 	and.w	r3, r3, #16
 8030f34:	2b00      	cmp	r3, #0
 8030f36:	f000 80a9 	beq.w	803108c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8030f3a:	4b85      	ldr	r3, [pc, #532]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030f3c:	691b      	ldr	r3, [r3, #16]
 8030f3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8030f42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8030f44:	4b82      	ldr	r3, [pc, #520]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8030f48:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8030f4a:	69bb      	ldr	r3, [r7, #24]
 8030f4c:	2b08      	cmp	r3, #8
 8030f4e:	d007      	beq.n	8030f60 <HAL_RCC_OscConfig+0x308>
 8030f50:	69bb      	ldr	r3, [r7, #24]
 8030f52:	2b18      	cmp	r3, #24
 8030f54:	d13a      	bne.n	8030fcc <HAL_RCC_OscConfig+0x374>
 8030f56:	697b      	ldr	r3, [r7, #20]
 8030f58:	f003 0303 	and.w	r3, r3, #3
 8030f5c:	2b01      	cmp	r3, #1
 8030f5e:	d135      	bne.n	8030fcc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030f60:	4b7b      	ldr	r3, [pc, #492]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030f62:	681b      	ldr	r3, [r3, #0]
 8030f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030f68:	2b00      	cmp	r3, #0
 8030f6a:	d005      	beq.n	8030f78 <HAL_RCC_OscConfig+0x320>
 8030f6c:	687b      	ldr	r3, [r7, #4]
 8030f6e:	69db      	ldr	r3, [r3, #28]
 8030f70:	2b80      	cmp	r3, #128	; 0x80
 8030f72:	d001      	beq.n	8030f78 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8030f74:	2301      	movs	r3, #1
 8030f76:	e296      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030f78:	f7f9 feb6 	bl	802ace8 <HAL_GetREVID>
 8030f7c:	4603      	mov	r3, r0
 8030f7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8030f82:	4293      	cmp	r3, r2
 8030f84:	d817      	bhi.n	8030fb6 <HAL_RCC_OscConfig+0x35e>
 8030f86:	687b      	ldr	r3, [r7, #4]
 8030f88:	6a1b      	ldr	r3, [r3, #32]
 8030f8a:	2b20      	cmp	r3, #32
 8030f8c:	d108      	bne.n	8030fa0 <HAL_RCC_OscConfig+0x348>
 8030f8e:	4b70      	ldr	r3, [pc, #448]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030f90:	685b      	ldr	r3, [r3, #4]
 8030f92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8030f96:	4a6e      	ldr	r2, [pc, #440]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030f98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8030f9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030f9e:	e075      	b.n	803108c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030fa0:	4b6b      	ldr	r3, [pc, #428]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030fa2:	685b      	ldr	r3, [r3, #4]
 8030fa4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8030fa8:	687b      	ldr	r3, [r7, #4]
 8030faa:	6a1b      	ldr	r3, [r3, #32]
 8030fac:	069b      	lsls	r3, r3, #26
 8030fae:	4968      	ldr	r1, [pc, #416]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030fb0:	4313      	orrs	r3, r2
 8030fb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030fb4:	e06a      	b.n	803108c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8030fb6:	4b66      	ldr	r3, [pc, #408]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030fb8:	68db      	ldr	r3, [r3, #12]
 8030fba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8030fbe:	687b      	ldr	r3, [r7, #4]
 8030fc0:	6a1b      	ldr	r3, [r3, #32]
 8030fc2:	061b      	lsls	r3, r3, #24
 8030fc4:	4962      	ldr	r1, [pc, #392]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030fc6:	4313      	orrs	r3, r2
 8030fc8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8030fca:	e05f      	b.n	803108c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8030fcc:	687b      	ldr	r3, [r7, #4]
 8030fce:	69db      	ldr	r3, [r3, #28]
 8030fd0:	2b00      	cmp	r3, #0
 8030fd2:	d042      	beq.n	803105a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8030fd4:	4b5e      	ldr	r3, [pc, #376]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030fd6:	681b      	ldr	r3, [r3, #0]
 8030fd8:	4a5d      	ldr	r2, [pc, #372]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8030fe0:	f7f9 fe52 	bl	802ac88 <HAL_GetTick>
 8030fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8030fe6:	e008      	b.n	8030ffa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8030fe8:	f7f9 fe4e 	bl	802ac88 <HAL_GetTick>
 8030fec:	4602      	mov	r2, r0
 8030fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030ff0:	1ad3      	subs	r3, r2, r3
 8030ff2:	2b02      	cmp	r3, #2
 8030ff4:	d901      	bls.n	8030ffa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8030ff6:	2303      	movs	r3, #3
 8030ff8:	e255      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8030ffa:	4b55      	ldr	r3, [pc, #340]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8030ffc:	681b      	ldr	r3, [r3, #0]
 8030ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031002:	2b00      	cmp	r3, #0
 8031004:	d0f0      	beq.n	8030fe8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8031006:	f7f9 fe6f 	bl	802ace8 <HAL_GetREVID>
 803100a:	4603      	mov	r3, r0
 803100c:	f241 0203 	movw	r2, #4099	; 0x1003
 8031010:	4293      	cmp	r3, r2
 8031012:	d817      	bhi.n	8031044 <HAL_RCC_OscConfig+0x3ec>
 8031014:	687b      	ldr	r3, [r7, #4]
 8031016:	6a1b      	ldr	r3, [r3, #32]
 8031018:	2b20      	cmp	r3, #32
 803101a:	d108      	bne.n	803102e <HAL_RCC_OscConfig+0x3d6>
 803101c:	4b4c      	ldr	r3, [pc, #304]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 803101e:	685b      	ldr	r3, [r3, #4]
 8031020:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8031024:	4a4a      	ldr	r2, [pc, #296]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8031026:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803102a:	6053      	str	r3, [r2, #4]
 803102c:	e02e      	b.n	803108c <HAL_RCC_OscConfig+0x434>
 803102e:	4b48      	ldr	r3, [pc, #288]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8031030:	685b      	ldr	r3, [r3, #4]
 8031032:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8031036:	687b      	ldr	r3, [r7, #4]
 8031038:	6a1b      	ldr	r3, [r3, #32]
 803103a:	069b      	lsls	r3, r3, #26
 803103c:	4944      	ldr	r1, [pc, #272]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 803103e:	4313      	orrs	r3, r2
 8031040:	604b      	str	r3, [r1, #4]
 8031042:	e023      	b.n	803108c <HAL_RCC_OscConfig+0x434>
 8031044:	4b42      	ldr	r3, [pc, #264]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8031046:	68db      	ldr	r3, [r3, #12]
 8031048:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 803104c:	687b      	ldr	r3, [r7, #4]
 803104e:	6a1b      	ldr	r3, [r3, #32]
 8031050:	061b      	lsls	r3, r3, #24
 8031052:	493f      	ldr	r1, [pc, #252]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8031054:	4313      	orrs	r3, r2
 8031056:	60cb      	str	r3, [r1, #12]
 8031058:	e018      	b.n	803108c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 803105a:	4b3d      	ldr	r3, [pc, #244]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 803105c:	681b      	ldr	r3, [r3, #0]
 803105e:	4a3c      	ldr	r2, [pc, #240]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8031060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8031064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031066:	f7f9 fe0f 	bl	802ac88 <HAL_GetTick>
 803106a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 803106c:	e008      	b.n	8031080 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 803106e:	f7f9 fe0b 	bl	802ac88 <HAL_GetTick>
 8031072:	4602      	mov	r2, r0
 8031074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031076:	1ad3      	subs	r3, r2, r3
 8031078:	2b02      	cmp	r3, #2
 803107a:	d901      	bls.n	8031080 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 803107c:	2303      	movs	r3, #3
 803107e:	e212      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8031080:	4b33      	ldr	r3, [pc, #204]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8031082:	681b      	ldr	r3, [r3, #0]
 8031084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031088:	2b00      	cmp	r3, #0
 803108a:	d1f0      	bne.n	803106e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 803108c:	687b      	ldr	r3, [r7, #4]
 803108e:	681b      	ldr	r3, [r3, #0]
 8031090:	f003 0308 	and.w	r3, r3, #8
 8031094:	2b00      	cmp	r3, #0
 8031096:	d036      	beq.n	8031106 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8031098:	687b      	ldr	r3, [r7, #4]
 803109a:	695b      	ldr	r3, [r3, #20]
 803109c:	2b00      	cmp	r3, #0
 803109e:	d019      	beq.n	80310d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80310a0:	4b2b      	ldr	r3, [pc, #172]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 80310a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310a4:	4a2a      	ldr	r2, [pc, #168]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 80310a6:	f043 0301 	orr.w	r3, r3, #1
 80310aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80310ac:	f7f9 fdec 	bl	802ac88 <HAL_GetTick>
 80310b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80310b2:	e008      	b.n	80310c6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80310b4:	f7f9 fde8 	bl	802ac88 <HAL_GetTick>
 80310b8:	4602      	mov	r2, r0
 80310ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310bc:	1ad3      	subs	r3, r2, r3
 80310be:	2b02      	cmp	r3, #2
 80310c0:	d901      	bls.n	80310c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80310c2:	2303      	movs	r3, #3
 80310c4:	e1ef      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80310c6:	4b22      	ldr	r3, [pc, #136]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 80310c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310ca:	f003 0302 	and.w	r3, r3, #2
 80310ce:	2b00      	cmp	r3, #0
 80310d0:	d0f0      	beq.n	80310b4 <HAL_RCC_OscConfig+0x45c>
 80310d2:	e018      	b.n	8031106 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80310d4:	4b1e      	ldr	r3, [pc, #120]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 80310d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310d8:	4a1d      	ldr	r2, [pc, #116]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 80310da:	f023 0301 	bic.w	r3, r3, #1
 80310de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80310e0:	f7f9 fdd2 	bl	802ac88 <HAL_GetTick>
 80310e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80310e6:	e008      	b.n	80310fa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80310e8:	f7f9 fdce 	bl	802ac88 <HAL_GetTick>
 80310ec:	4602      	mov	r2, r0
 80310ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80310f0:	1ad3      	subs	r3, r2, r3
 80310f2:	2b02      	cmp	r3, #2
 80310f4:	d901      	bls.n	80310fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80310f6:	2303      	movs	r3, #3
 80310f8:	e1d5      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80310fa:	4b15      	ldr	r3, [pc, #84]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 80310fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80310fe:	f003 0302 	and.w	r3, r3, #2
 8031102:	2b00      	cmp	r3, #0
 8031104:	d1f0      	bne.n	80310e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8031106:	687b      	ldr	r3, [r7, #4]
 8031108:	681b      	ldr	r3, [r3, #0]
 803110a:	f003 0320 	and.w	r3, r3, #32
 803110e:	2b00      	cmp	r3, #0
 8031110:	d039      	beq.n	8031186 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8031112:	687b      	ldr	r3, [r7, #4]
 8031114:	699b      	ldr	r3, [r3, #24]
 8031116:	2b00      	cmp	r3, #0
 8031118:	d01c      	beq.n	8031154 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 803111a:	4b0d      	ldr	r3, [pc, #52]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 803111c:	681b      	ldr	r3, [r3, #0]
 803111e:	4a0c      	ldr	r2, [pc, #48]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8031120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8031124:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8031126:	f7f9 fdaf 	bl	802ac88 <HAL_GetTick>
 803112a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 803112c:	e008      	b.n	8031140 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 803112e:	f7f9 fdab 	bl	802ac88 <HAL_GetTick>
 8031132:	4602      	mov	r2, r0
 8031134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031136:	1ad3      	subs	r3, r2, r3
 8031138:	2b02      	cmp	r3, #2
 803113a:	d901      	bls.n	8031140 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 803113c:	2303      	movs	r3, #3
 803113e:	e1b2      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8031140:	4b03      	ldr	r3, [pc, #12]	; (8031150 <HAL_RCC_OscConfig+0x4f8>)
 8031142:	681b      	ldr	r3, [r3, #0]
 8031144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031148:	2b00      	cmp	r3, #0
 803114a:	d0f0      	beq.n	803112e <HAL_RCC_OscConfig+0x4d6>
 803114c:	e01b      	b.n	8031186 <HAL_RCC_OscConfig+0x52e>
 803114e:	bf00      	nop
 8031150:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8031154:	4b9b      	ldr	r3, [pc, #620]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031156:	681b      	ldr	r3, [r3, #0]
 8031158:	4a9a      	ldr	r2, [pc, #616]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803115a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803115e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8031160:	f7f9 fd92 	bl	802ac88 <HAL_GetTick>
 8031164:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8031166:	e008      	b.n	803117a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8031168:	f7f9 fd8e 	bl	802ac88 <HAL_GetTick>
 803116c:	4602      	mov	r2, r0
 803116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031170:	1ad3      	subs	r3, r2, r3
 8031172:	2b02      	cmp	r3, #2
 8031174:	d901      	bls.n	803117a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8031176:	2303      	movs	r3, #3
 8031178:	e195      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 803117a:	4b92      	ldr	r3, [pc, #584]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803117c:	681b      	ldr	r3, [r3, #0]
 803117e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031182:	2b00      	cmp	r3, #0
 8031184:	d1f0      	bne.n	8031168 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8031186:	687b      	ldr	r3, [r7, #4]
 8031188:	681b      	ldr	r3, [r3, #0]
 803118a:	f003 0304 	and.w	r3, r3, #4
 803118e:	2b00      	cmp	r3, #0
 8031190:	f000 8081 	beq.w	8031296 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8031194:	4b8c      	ldr	r3, [pc, #560]	; (80313c8 <HAL_RCC_OscConfig+0x770>)
 8031196:	681b      	ldr	r3, [r3, #0]
 8031198:	4a8b      	ldr	r2, [pc, #556]	; (80313c8 <HAL_RCC_OscConfig+0x770>)
 803119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803119e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80311a0:	f7f9 fd72 	bl	802ac88 <HAL_GetTick>
 80311a4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80311a6:	e008      	b.n	80311ba <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80311a8:	f7f9 fd6e 	bl	802ac88 <HAL_GetTick>
 80311ac:	4602      	mov	r2, r0
 80311ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80311b0:	1ad3      	subs	r3, r2, r3
 80311b2:	2b64      	cmp	r3, #100	; 0x64
 80311b4:	d901      	bls.n	80311ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80311b6:	2303      	movs	r3, #3
 80311b8:	e175      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80311ba:	4b83      	ldr	r3, [pc, #524]	; (80313c8 <HAL_RCC_OscConfig+0x770>)
 80311bc:	681b      	ldr	r3, [r3, #0]
 80311be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80311c2:	2b00      	cmp	r3, #0
 80311c4:	d0f0      	beq.n	80311a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80311c6:	687b      	ldr	r3, [r7, #4]
 80311c8:	689b      	ldr	r3, [r3, #8]
 80311ca:	2b01      	cmp	r3, #1
 80311cc:	d106      	bne.n	80311dc <HAL_RCC_OscConfig+0x584>
 80311ce:	4b7d      	ldr	r3, [pc, #500]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80311d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311d2:	4a7c      	ldr	r2, [pc, #496]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80311d4:	f043 0301 	orr.w	r3, r3, #1
 80311d8:	6713      	str	r3, [r2, #112]	; 0x70
 80311da:	e02d      	b.n	8031238 <HAL_RCC_OscConfig+0x5e0>
 80311dc:	687b      	ldr	r3, [r7, #4]
 80311de:	689b      	ldr	r3, [r3, #8]
 80311e0:	2b00      	cmp	r3, #0
 80311e2:	d10c      	bne.n	80311fe <HAL_RCC_OscConfig+0x5a6>
 80311e4:	4b77      	ldr	r3, [pc, #476]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80311e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311e8:	4a76      	ldr	r2, [pc, #472]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80311ea:	f023 0301 	bic.w	r3, r3, #1
 80311ee:	6713      	str	r3, [r2, #112]	; 0x70
 80311f0:	4b74      	ldr	r3, [pc, #464]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80311f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80311f4:	4a73      	ldr	r2, [pc, #460]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80311f6:	f023 0304 	bic.w	r3, r3, #4
 80311fa:	6713      	str	r3, [r2, #112]	; 0x70
 80311fc:	e01c      	b.n	8031238 <HAL_RCC_OscConfig+0x5e0>
 80311fe:	687b      	ldr	r3, [r7, #4]
 8031200:	689b      	ldr	r3, [r3, #8]
 8031202:	2b05      	cmp	r3, #5
 8031204:	d10c      	bne.n	8031220 <HAL_RCC_OscConfig+0x5c8>
 8031206:	4b6f      	ldr	r3, [pc, #444]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803120a:	4a6e      	ldr	r2, [pc, #440]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803120c:	f043 0304 	orr.w	r3, r3, #4
 8031210:	6713      	str	r3, [r2, #112]	; 0x70
 8031212:	4b6c      	ldr	r3, [pc, #432]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031216:	4a6b      	ldr	r2, [pc, #428]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031218:	f043 0301 	orr.w	r3, r3, #1
 803121c:	6713      	str	r3, [r2, #112]	; 0x70
 803121e:	e00b      	b.n	8031238 <HAL_RCC_OscConfig+0x5e0>
 8031220:	4b68      	ldr	r3, [pc, #416]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031224:	4a67      	ldr	r2, [pc, #412]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031226:	f023 0301 	bic.w	r3, r3, #1
 803122a:	6713      	str	r3, [r2, #112]	; 0x70
 803122c:	4b65      	ldr	r3, [pc, #404]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803122e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031230:	4a64      	ldr	r2, [pc, #400]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031232:	f023 0304 	bic.w	r3, r3, #4
 8031236:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8031238:	687b      	ldr	r3, [r7, #4]
 803123a:	689b      	ldr	r3, [r3, #8]
 803123c:	2b00      	cmp	r3, #0
 803123e:	d015      	beq.n	803126c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031240:	f7f9 fd22 	bl	802ac88 <HAL_GetTick>
 8031244:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8031246:	e00a      	b.n	803125e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8031248:	f7f9 fd1e 	bl	802ac88 <HAL_GetTick>
 803124c:	4602      	mov	r2, r0
 803124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031250:	1ad3      	subs	r3, r2, r3
 8031252:	f241 3288 	movw	r2, #5000	; 0x1388
 8031256:	4293      	cmp	r3, r2
 8031258:	d901      	bls.n	803125e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 803125a:	2303      	movs	r3, #3
 803125c:	e123      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 803125e:	4b59      	ldr	r3, [pc, #356]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8031262:	f003 0302 	and.w	r3, r3, #2
 8031266:	2b00      	cmp	r3, #0
 8031268:	d0ee      	beq.n	8031248 <HAL_RCC_OscConfig+0x5f0>
 803126a:	e014      	b.n	8031296 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 803126c:	f7f9 fd0c 	bl	802ac88 <HAL_GetTick>
 8031270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8031272:	e00a      	b.n	803128a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8031274:	f7f9 fd08 	bl	802ac88 <HAL_GetTick>
 8031278:	4602      	mov	r2, r0
 803127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803127c:	1ad3      	subs	r3, r2, r3
 803127e:	f241 3288 	movw	r2, #5000	; 0x1388
 8031282:	4293      	cmp	r3, r2
 8031284:	d901      	bls.n	803128a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8031286:	2303      	movs	r3, #3
 8031288:	e10d      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 803128a:	4b4e      	ldr	r3, [pc, #312]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803128c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803128e:	f003 0302 	and.w	r3, r3, #2
 8031292:	2b00      	cmp	r3, #0
 8031294:	d1ee      	bne.n	8031274 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8031296:	687b      	ldr	r3, [r7, #4]
 8031298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803129a:	2b00      	cmp	r3, #0
 803129c:	f000 8102 	beq.w	80314a4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80312a0:	4b48      	ldr	r3, [pc, #288]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80312a2:	691b      	ldr	r3, [r3, #16]
 80312a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80312a8:	2b18      	cmp	r3, #24
 80312aa:	f000 80bd 	beq.w	8031428 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80312ae:	687b      	ldr	r3, [r7, #4]
 80312b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80312b2:	2b02      	cmp	r3, #2
 80312b4:	f040 809e 	bne.w	80313f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80312b8:	4b42      	ldr	r3, [pc, #264]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80312ba:	681b      	ldr	r3, [r3, #0]
 80312bc:	4a41      	ldr	r2, [pc, #260]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80312be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80312c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80312c4:	f7f9 fce0 	bl	802ac88 <HAL_GetTick>
 80312c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80312ca:	e008      	b.n	80312de <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80312cc:	f7f9 fcdc 	bl	802ac88 <HAL_GetTick>
 80312d0:	4602      	mov	r2, r0
 80312d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80312d4:	1ad3      	subs	r3, r2, r3
 80312d6:	2b02      	cmp	r3, #2
 80312d8:	d901      	bls.n	80312de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80312da:	2303      	movs	r3, #3
 80312dc:	e0e3      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80312de:	4b39      	ldr	r3, [pc, #228]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80312e0:	681b      	ldr	r3, [r3, #0]
 80312e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80312e6:	2b00      	cmp	r3, #0
 80312e8:	d1f0      	bne.n	80312cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80312ea:	4b36      	ldr	r3, [pc, #216]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80312ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80312ee:	4b37      	ldr	r3, [pc, #220]	; (80313cc <HAL_RCC_OscConfig+0x774>)
 80312f0:	4013      	ands	r3, r2
 80312f2:	687a      	ldr	r2, [r7, #4]
 80312f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80312f6:	687a      	ldr	r2, [r7, #4]
 80312f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80312fa:	0112      	lsls	r2, r2, #4
 80312fc:	430a      	orrs	r2, r1
 80312fe:	4931      	ldr	r1, [pc, #196]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031300:	4313      	orrs	r3, r2
 8031302:	628b      	str	r3, [r1, #40]	; 0x28
 8031304:	687b      	ldr	r3, [r7, #4]
 8031306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031308:	3b01      	subs	r3, #1
 803130a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 803130e:	687b      	ldr	r3, [r7, #4]
 8031310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031312:	3b01      	subs	r3, #1
 8031314:	025b      	lsls	r3, r3, #9
 8031316:	b29b      	uxth	r3, r3
 8031318:	431a      	orrs	r2, r3
 803131a:	687b      	ldr	r3, [r7, #4]
 803131c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803131e:	3b01      	subs	r3, #1
 8031320:	041b      	lsls	r3, r3, #16
 8031322:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8031326:	431a      	orrs	r2, r3
 8031328:	687b      	ldr	r3, [r7, #4]
 803132a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803132c:	3b01      	subs	r3, #1
 803132e:	061b      	lsls	r3, r3, #24
 8031330:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8031334:	4923      	ldr	r1, [pc, #140]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031336:	4313      	orrs	r3, r2
 8031338:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 803133a:	4b22      	ldr	r3, [pc, #136]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803133e:	4a21      	ldr	r2, [pc, #132]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031340:	f023 0301 	bic.w	r3, r3, #1
 8031344:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8031346:	4b1f      	ldr	r3, [pc, #124]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803134a:	4b21      	ldr	r3, [pc, #132]	; (80313d0 <HAL_RCC_OscConfig+0x778>)
 803134c:	4013      	ands	r3, r2
 803134e:	687a      	ldr	r2, [r7, #4]
 8031350:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8031352:	00d2      	lsls	r2, r2, #3
 8031354:	491b      	ldr	r1, [pc, #108]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031356:	4313      	orrs	r3, r2
 8031358:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 803135a:	4b1a      	ldr	r3, [pc, #104]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803135e:	f023 020c 	bic.w	r2, r3, #12
 8031362:	687b      	ldr	r3, [r7, #4]
 8031364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8031366:	4917      	ldr	r1, [pc, #92]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031368:	4313      	orrs	r3, r2
 803136a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 803136c:	4b15      	ldr	r3, [pc, #84]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031370:	f023 0202 	bic.w	r2, r3, #2
 8031374:	687b      	ldr	r3, [r7, #4]
 8031376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031378:	4912      	ldr	r1, [pc, #72]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803137a:	4313      	orrs	r3, r2
 803137c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 803137e:	4b11      	ldr	r3, [pc, #68]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031382:	4a10      	ldr	r2, [pc, #64]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8031388:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803138a:	4b0e      	ldr	r3, [pc, #56]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803138e:	4a0d      	ldr	r2, [pc, #52]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031394:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8031396:	4b0b      	ldr	r3, [pc, #44]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 8031398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803139a:	4a0a      	ldr	r2, [pc, #40]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 803139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80313a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80313a2:	4b08      	ldr	r3, [pc, #32]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80313a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80313a6:	4a07      	ldr	r2, [pc, #28]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80313a8:	f043 0301 	orr.w	r3, r3, #1
 80313ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80313ae:	4b05      	ldr	r3, [pc, #20]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80313b0:	681b      	ldr	r3, [r3, #0]
 80313b2:	4a04      	ldr	r2, [pc, #16]	; (80313c4 <HAL_RCC_OscConfig+0x76c>)
 80313b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80313b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80313ba:	f7f9 fc65 	bl	802ac88 <HAL_GetTick>
 80313be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80313c0:	e011      	b.n	80313e6 <HAL_RCC_OscConfig+0x78e>
 80313c2:	bf00      	nop
 80313c4:	58024400 	.word	0x58024400
 80313c8:	58024800 	.word	0x58024800
 80313cc:	fffffc0c 	.word	0xfffffc0c
 80313d0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80313d4:	f7f9 fc58 	bl	802ac88 <HAL_GetTick>
 80313d8:	4602      	mov	r2, r0
 80313da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80313dc:	1ad3      	subs	r3, r2, r3
 80313de:	2b02      	cmp	r3, #2
 80313e0:	d901      	bls.n	80313e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80313e2:	2303      	movs	r3, #3
 80313e4:	e05f      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80313e6:	4b32      	ldr	r3, [pc, #200]	; (80314b0 <HAL_RCC_OscConfig+0x858>)
 80313e8:	681b      	ldr	r3, [r3, #0]
 80313ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80313ee:	2b00      	cmp	r3, #0
 80313f0:	d0f0      	beq.n	80313d4 <HAL_RCC_OscConfig+0x77c>
 80313f2:	e057      	b.n	80314a4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80313f4:	4b2e      	ldr	r3, [pc, #184]	; (80314b0 <HAL_RCC_OscConfig+0x858>)
 80313f6:	681b      	ldr	r3, [r3, #0]
 80313f8:	4a2d      	ldr	r2, [pc, #180]	; (80314b0 <HAL_RCC_OscConfig+0x858>)
 80313fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80313fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8031400:	f7f9 fc42 	bl	802ac88 <HAL_GetTick>
 8031404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8031406:	e008      	b.n	803141a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8031408:	f7f9 fc3e 	bl	802ac88 <HAL_GetTick>
 803140c:	4602      	mov	r2, r0
 803140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8031410:	1ad3      	subs	r3, r2, r3
 8031412:	2b02      	cmp	r3, #2
 8031414:	d901      	bls.n	803141a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8031416:	2303      	movs	r3, #3
 8031418:	e045      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 803141a:	4b25      	ldr	r3, [pc, #148]	; (80314b0 <HAL_RCC_OscConfig+0x858>)
 803141c:	681b      	ldr	r3, [r3, #0]
 803141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031422:	2b00      	cmp	r3, #0
 8031424:	d1f0      	bne.n	8031408 <HAL_RCC_OscConfig+0x7b0>
 8031426:	e03d      	b.n	80314a4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8031428:	4b21      	ldr	r3, [pc, #132]	; (80314b0 <HAL_RCC_OscConfig+0x858>)
 803142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803142c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 803142e:	4b20      	ldr	r3, [pc, #128]	; (80314b0 <HAL_RCC_OscConfig+0x858>)
 8031430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031432:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031434:	687b      	ldr	r3, [r7, #4]
 8031436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031438:	2b01      	cmp	r3, #1
 803143a:	d031      	beq.n	80314a0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 803143c:	693b      	ldr	r3, [r7, #16]
 803143e:	f003 0203 	and.w	r2, r3, #3
 8031442:	687b      	ldr	r3, [r7, #4]
 8031444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8031446:	429a      	cmp	r2, r3
 8031448:	d12a      	bne.n	80314a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 803144a:	693b      	ldr	r3, [r7, #16]
 803144c:	091b      	lsrs	r3, r3, #4
 803144e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8031452:	687b      	ldr	r3, [r7, #4]
 8031454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8031456:	429a      	cmp	r2, r3
 8031458:	d122      	bne.n	80314a0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 803145a:	68fb      	ldr	r3, [r7, #12]
 803145c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8031460:	687b      	ldr	r3, [r7, #4]
 8031462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031464:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8031466:	429a      	cmp	r2, r3
 8031468:	d11a      	bne.n	80314a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 803146a:	68fb      	ldr	r3, [r7, #12]
 803146c:	0a5b      	lsrs	r3, r3, #9
 803146e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031472:	687b      	ldr	r3, [r7, #4]
 8031474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031476:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8031478:	429a      	cmp	r2, r3
 803147a:	d111      	bne.n	80314a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 803147c:	68fb      	ldr	r3, [r7, #12]
 803147e:	0c1b      	lsrs	r3, r3, #16
 8031480:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031484:	687b      	ldr	r3, [r7, #4]
 8031486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8031488:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 803148a:	429a      	cmp	r2, r3
 803148c:	d108      	bne.n	80314a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 803148e:	68fb      	ldr	r3, [r7, #12]
 8031490:	0e1b      	lsrs	r3, r3, #24
 8031492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8031496:	687b      	ldr	r3, [r7, #4]
 8031498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803149a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 803149c:	429a      	cmp	r2, r3
 803149e:	d001      	beq.n	80314a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80314a0:	2301      	movs	r3, #1
 80314a2:	e000      	b.n	80314a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80314a4:	2300      	movs	r3, #0
}
 80314a6:	4618      	mov	r0, r3
 80314a8:	3730      	adds	r7, #48	; 0x30
 80314aa:	46bd      	mov	sp, r7
 80314ac:	bd80      	pop	{r7, pc}
 80314ae:	bf00      	nop
 80314b0:	58024400 	.word	0x58024400

080314b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80314b4:	b580      	push	{r7, lr}
 80314b6:	b086      	sub	sp, #24
 80314b8:	af00      	add	r7, sp, #0
 80314ba:	6078      	str	r0, [r7, #4]
 80314bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80314be:	687b      	ldr	r3, [r7, #4]
 80314c0:	2b00      	cmp	r3, #0
 80314c2:	d101      	bne.n	80314c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80314c4:	2301      	movs	r3, #1
 80314c6:	e19c      	b.n	8031802 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80314c8:	4b8a      	ldr	r3, [pc, #552]	; (80316f4 <HAL_RCC_ClockConfig+0x240>)
 80314ca:	681b      	ldr	r3, [r3, #0]
 80314cc:	f003 030f 	and.w	r3, r3, #15
 80314d0:	683a      	ldr	r2, [r7, #0]
 80314d2:	429a      	cmp	r2, r3
 80314d4:	d910      	bls.n	80314f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80314d6:	4b87      	ldr	r3, [pc, #540]	; (80316f4 <HAL_RCC_ClockConfig+0x240>)
 80314d8:	681b      	ldr	r3, [r3, #0]
 80314da:	f023 020f 	bic.w	r2, r3, #15
 80314de:	4985      	ldr	r1, [pc, #532]	; (80316f4 <HAL_RCC_ClockConfig+0x240>)
 80314e0:	683b      	ldr	r3, [r7, #0]
 80314e2:	4313      	orrs	r3, r2
 80314e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80314e6:	4b83      	ldr	r3, [pc, #524]	; (80316f4 <HAL_RCC_ClockConfig+0x240>)
 80314e8:	681b      	ldr	r3, [r3, #0]
 80314ea:	f003 030f 	and.w	r3, r3, #15
 80314ee:	683a      	ldr	r2, [r7, #0]
 80314f0:	429a      	cmp	r2, r3
 80314f2:	d001      	beq.n	80314f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80314f4:	2301      	movs	r3, #1
 80314f6:	e184      	b.n	8031802 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80314f8:	687b      	ldr	r3, [r7, #4]
 80314fa:	681b      	ldr	r3, [r3, #0]
 80314fc:	f003 0304 	and.w	r3, r3, #4
 8031500:	2b00      	cmp	r3, #0
 8031502:	d010      	beq.n	8031526 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8031504:	687b      	ldr	r3, [r7, #4]
 8031506:	691a      	ldr	r2, [r3, #16]
 8031508:	4b7b      	ldr	r3, [pc, #492]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 803150a:	699b      	ldr	r3, [r3, #24]
 803150c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031510:	429a      	cmp	r2, r3
 8031512:	d908      	bls.n	8031526 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8031514:	4b78      	ldr	r3, [pc, #480]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031516:	699b      	ldr	r3, [r3, #24]
 8031518:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803151c:	687b      	ldr	r3, [r7, #4]
 803151e:	691b      	ldr	r3, [r3, #16]
 8031520:	4975      	ldr	r1, [pc, #468]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031522:	4313      	orrs	r3, r2
 8031524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8031526:	687b      	ldr	r3, [r7, #4]
 8031528:	681b      	ldr	r3, [r3, #0]
 803152a:	f003 0308 	and.w	r3, r3, #8
 803152e:	2b00      	cmp	r3, #0
 8031530:	d010      	beq.n	8031554 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8031532:	687b      	ldr	r3, [r7, #4]
 8031534:	695a      	ldr	r2, [r3, #20]
 8031536:	4b70      	ldr	r3, [pc, #448]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031538:	69db      	ldr	r3, [r3, #28]
 803153a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803153e:	429a      	cmp	r2, r3
 8031540:	d908      	bls.n	8031554 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8031542:	4b6d      	ldr	r3, [pc, #436]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031544:	69db      	ldr	r3, [r3, #28]
 8031546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803154a:	687b      	ldr	r3, [r7, #4]
 803154c:	695b      	ldr	r3, [r3, #20]
 803154e:	496a      	ldr	r1, [pc, #424]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031550:	4313      	orrs	r3, r2
 8031552:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031554:	687b      	ldr	r3, [r7, #4]
 8031556:	681b      	ldr	r3, [r3, #0]
 8031558:	f003 0310 	and.w	r3, r3, #16
 803155c:	2b00      	cmp	r3, #0
 803155e:	d010      	beq.n	8031582 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031560:	687b      	ldr	r3, [r7, #4]
 8031562:	699a      	ldr	r2, [r3, #24]
 8031564:	4b64      	ldr	r3, [pc, #400]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031566:	69db      	ldr	r3, [r3, #28]
 8031568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 803156c:	429a      	cmp	r2, r3
 803156e:	d908      	bls.n	8031582 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8031570:	4b61      	ldr	r3, [pc, #388]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031572:	69db      	ldr	r3, [r3, #28]
 8031574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8031578:	687b      	ldr	r3, [r7, #4]
 803157a:	699b      	ldr	r3, [r3, #24]
 803157c:	495e      	ldr	r1, [pc, #376]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 803157e:	4313      	orrs	r3, r2
 8031580:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8031582:	687b      	ldr	r3, [r7, #4]
 8031584:	681b      	ldr	r3, [r3, #0]
 8031586:	f003 0320 	and.w	r3, r3, #32
 803158a:	2b00      	cmp	r3, #0
 803158c:	d010      	beq.n	80315b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 803158e:	687b      	ldr	r3, [r7, #4]
 8031590:	69da      	ldr	r2, [r3, #28]
 8031592:	4b59      	ldr	r3, [pc, #356]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031594:	6a1b      	ldr	r3, [r3, #32]
 8031596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803159a:	429a      	cmp	r2, r3
 803159c:	d908      	bls.n	80315b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 803159e:	4b56      	ldr	r3, [pc, #344]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80315a0:	6a1b      	ldr	r3, [r3, #32]
 80315a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80315a6:	687b      	ldr	r3, [r7, #4]
 80315a8:	69db      	ldr	r3, [r3, #28]
 80315aa:	4953      	ldr	r1, [pc, #332]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80315ac:	4313      	orrs	r3, r2
 80315ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80315b0:	687b      	ldr	r3, [r7, #4]
 80315b2:	681b      	ldr	r3, [r3, #0]
 80315b4:	f003 0302 	and.w	r3, r3, #2
 80315b8:	2b00      	cmp	r3, #0
 80315ba:	d010      	beq.n	80315de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80315bc:	687b      	ldr	r3, [r7, #4]
 80315be:	68da      	ldr	r2, [r3, #12]
 80315c0:	4b4d      	ldr	r3, [pc, #308]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80315c2:	699b      	ldr	r3, [r3, #24]
 80315c4:	f003 030f 	and.w	r3, r3, #15
 80315c8:	429a      	cmp	r2, r3
 80315ca:	d908      	bls.n	80315de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80315cc:	4b4a      	ldr	r3, [pc, #296]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80315ce:	699b      	ldr	r3, [r3, #24]
 80315d0:	f023 020f 	bic.w	r2, r3, #15
 80315d4:	687b      	ldr	r3, [r7, #4]
 80315d6:	68db      	ldr	r3, [r3, #12]
 80315d8:	4947      	ldr	r1, [pc, #284]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80315da:	4313      	orrs	r3, r2
 80315dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80315de:	687b      	ldr	r3, [r7, #4]
 80315e0:	681b      	ldr	r3, [r3, #0]
 80315e2:	f003 0301 	and.w	r3, r3, #1
 80315e6:	2b00      	cmp	r3, #0
 80315e8:	d055      	beq.n	8031696 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80315ea:	4b43      	ldr	r3, [pc, #268]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80315ec:	699b      	ldr	r3, [r3, #24]
 80315ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80315f2:	687b      	ldr	r3, [r7, #4]
 80315f4:	689b      	ldr	r3, [r3, #8]
 80315f6:	4940      	ldr	r1, [pc, #256]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80315f8:	4313      	orrs	r3, r2
 80315fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80315fc:	687b      	ldr	r3, [r7, #4]
 80315fe:	685b      	ldr	r3, [r3, #4]
 8031600:	2b02      	cmp	r3, #2
 8031602:	d107      	bne.n	8031614 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8031604:	4b3c      	ldr	r3, [pc, #240]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031606:	681b      	ldr	r3, [r3, #0]
 8031608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803160c:	2b00      	cmp	r3, #0
 803160e:	d121      	bne.n	8031654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031610:	2301      	movs	r3, #1
 8031612:	e0f6      	b.n	8031802 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8031614:	687b      	ldr	r3, [r7, #4]
 8031616:	685b      	ldr	r3, [r3, #4]
 8031618:	2b03      	cmp	r3, #3
 803161a:	d107      	bne.n	803162c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 803161c:	4b36      	ldr	r3, [pc, #216]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 803161e:	681b      	ldr	r3, [r3, #0]
 8031620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031624:	2b00      	cmp	r3, #0
 8031626:	d115      	bne.n	8031654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031628:	2301      	movs	r3, #1
 803162a:	e0ea      	b.n	8031802 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 803162c:	687b      	ldr	r3, [r7, #4]
 803162e:	685b      	ldr	r3, [r3, #4]
 8031630:	2b01      	cmp	r3, #1
 8031632:	d107      	bne.n	8031644 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8031634:	4b30      	ldr	r3, [pc, #192]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031636:	681b      	ldr	r3, [r3, #0]
 8031638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803163c:	2b00      	cmp	r3, #0
 803163e:	d109      	bne.n	8031654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031640:	2301      	movs	r3, #1
 8031642:	e0de      	b.n	8031802 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8031644:	4b2c      	ldr	r3, [pc, #176]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031646:	681b      	ldr	r3, [r3, #0]
 8031648:	f003 0304 	and.w	r3, r3, #4
 803164c:	2b00      	cmp	r3, #0
 803164e:	d101      	bne.n	8031654 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8031650:	2301      	movs	r3, #1
 8031652:	e0d6      	b.n	8031802 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8031654:	4b28      	ldr	r3, [pc, #160]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031656:	691b      	ldr	r3, [r3, #16]
 8031658:	f023 0207 	bic.w	r2, r3, #7
 803165c:	687b      	ldr	r3, [r7, #4]
 803165e:	685b      	ldr	r3, [r3, #4]
 8031660:	4925      	ldr	r1, [pc, #148]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031662:	4313      	orrs	r3, r2
 8031664:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8031666:	f7f9 fb0f 	bl	802ac88 <HAL_GetTick>
 803166a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 803166c:	e00a      	b.n	8031684 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 803166e:	f7f9 fb0b 	bl	802ac88 <HAL_GetTick>
 8031672:	4602      	mov	r2, r0
 8031674:	697b      	ldr	r3, [r7, #20]
 8031676:	1ad3      	subs	r3, r2, r3
 8031678:	f241 3288 	movw	r2, #5000	; 0x1388
 803167c:	4293      	cmp	r3, r2
 803167e:	d901      	bls.n	8031684 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8031680:	2303      	movs	r3, #3
 8031682:	e0be      	b.n	8031802 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8031684:	4b1c      	ldr	r3, [pc, #112]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 8031686:	691b      	ldr	r3, [r3, #16]
 8031688:	f003 0238 	and.w	r2, r3, #56	; 0x38
 803168c:	687b      	ldr	r3, [r7, #4]
 803168e:	685b      	ldr	r3, [r3, #4]
 8031690:	00db      	lsls	r3, r3, #3
 8031692:	429a      	cmp	r2, r3
 8031694:	d1eb      	bne.n	803166e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8031696:	687b      	ldr	r3, [r7, #4]
 8031698:	681b      	ldr	r3, [r3, #0]
 803169a:	f003 0302 	and.w	r3, r3, #2
 803169e:	2b00      	cmp	r3, #0
 80316a0:	d010      	beq.n	80316c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80316a2:	687b      	ldr	r3, [r7, #4]
 80316a4:	68da      	ldr	r2, [r3, #12]
 80316a6:	4b14      	ldr	r3, [pc, #80]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80316a8:	699b      	ldr	r3, [r3, #24]
 80316aa:	f003 030f 	and.w	r3, r3, #15
 80316ae:	429a      	cmp	r2, r3
 80316b0:	d208      	bcs.n	80316c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80316b2:	4b11      	ldr	r3, [pc, #68]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80316b4:	699b      	ldr	r3, [r3, #24]
 80316b6:	f023 020f 	bic.w	r2, r3, #15
 80316ba:	687b      	ldr	r3, [r7, #4]
 80316bc:	68db      	ldr	r3, [r3, #12]
 80316be:	490e      	ldr	r1, [pc, #56]	; (80316f8 <HAL_RCC_ClockConfig+0x244>)
 80316c0:	4313      	orrs	r3, r2
 80316c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80316c4:	4b0b      	ldr	r3, [pc, #44]	; (80316f4 <HAL_RCC_ClockConfig+0x240>)
 80316c6:	681b      	ldr	r3, [r3, #0]
 80316c8:	f003 030f 	and.w	r3, r3, #15
 80316cc:	683a      	ldr	r2, [r7, #0]
 80316ce:	429a      	cmp	r2, r3
 80316d0:	d214      	bcs.n	80316fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80316d2:	4b08      	ldr	r3, [pc, #32]	; (80316f4 <HAL_RCC_ClockConfig+0x240>)
 80316d4:	681b      	ldr	r3, [r3, #0]
 80316d6:	f023 020f 	bic.w	r2, r3, #15
 80316da:	4906      	ldr	r1, [pc, #24]	; (80316f4 <HAL_RCC_ClockConfig+0x240>)
 80316dc:	683b      	ldr	r3, [r7, #0]
 80316de:	4313      	orrs	r3, r2
 80316e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80316e2:	4b04      	ldr	r3, [pc, #16]	; (80316f4 <HAL_RCC_ClockConfig+0x240>)
 80316e4:	681b      	ldr	r3, [r3, #0]
 80316e6:	f003 030f 	and.w	r3, r3, #15
 80316ea:	683a      	ldr	r2, [r7, #0]
 80316ec:	429a      	cmp	r2, r3
 80316ee:	d005      	beq.n	80316fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80316f0:	2301      	movs	r3, #1
 80316f2:	e086      	b.n	8031802 <HAL_RCC_ClockConfig+0x34e>
 80316f4:	52002000 	.word	0x52002000
 80316f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80316fc:	687b      	ldr	r3, [r7, #4]
 80316fe:	681b      	ldr	r3, [r3, #0]
 8031700:	f003 0304 	and.w	r3, r3, #4
 8031704:	2b00      	cmp	r3, #0
 8031706:	d010      	beq.n	803172a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8031708:	687b      	ldr	r3, [r7, #4]
 803170a:	691a      	ldr	r2, [r3, #16]
 803170c:	4b3f      	ldr	r3, [pc, #252]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 803170e:	699b      	ldr	r3, [r3, #24]
 8031710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031714:	429a      	cmp	r2, r3
 8031716:	d208      	bcs.n	803172a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8031718:	4b3c      	ldr	r3, [pc, #240]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 803171a:	699b      	ldr	r3, [r3, #24]
 803171c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8031720:	687b      	ldr	r3, [r7, #4]
 8031722:	691b      	ldr	r3, [r3, #16]
 8031724:	4939      	ldr	r1, [pc, #228]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 8031726:	4313      	orrs	r3, r2
 8031728:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 803172a:	687b      	ldr	r3, [r7, #4]
 803172c:	681b      	ldr	r3, [r3, #0]
 803172e:	f003 0308 	and.w	r3, r3, #8
 8031732:	2b00      	cmp	r3, #0
 8031734:	d010      	beq.n	8031758 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8031736:	687b      	ldr	r3, [r7, #4]
 8031738:	695a      	ldr	r2, [r3, #20]
 803173a:	4b34      	ldr	r3, [pc, #208]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 803173c:	69db      	ldr	r3, [r3, #28]
 803173e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8031742:	429a      	cmp	r2, r3
 8031744:	d208      	bcs.n	8031758 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8031746:	4b31      	ldr	r3, [pc, #196]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 8031748:	69db      	ldr	r3, [r3, #28]
 803174a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 803174e:	687b      	ldr	r3, [r7, #4]
 8031750:	695b      	ldr	r3, [r3, #20]
 8031752:	492e      	ldr	r1, [pc, #184]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 8031754:	4313      	orrs	r3, r2
 8031756:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8031758:	687b      	ldr	r3, [r7, #4]
 803175a:	681b      	ldr	r3, [r3, #0]
 803175c:	f003 0310 	and.w	r3, r3, #16
 8031760:	2b00      	cmp	r3, #0
 8031762:	d010      	beq.n	8031786 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8031764:	687b      	ldr	r3, [r7, #4]
 8031766:	699a      	ldr	r2, [r3, #24]
 8031768:	4b28      	ldr	r3, [pc, #160]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 803176a:	69db      	ldr	r3, [r3, #28]
 803176c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8031770:	429a      	cmp	r2, r3
 8031772:	d208      	bcs.n	8031786 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8031774:	4b25      	ldr	r3, [pc, #148]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 8031776:	69db      	ldr	r3, [r3, #28]
 8031778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 803177c:	687b      	ldr	r3, [r7, #4]
 803177e:	699b      	ldr	r3, [r3, #24]
 8031780:	4922      	ldr	r1, [pc, #136]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 8031782:	4313      	orrs	r3, r2
 8031784:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8031786:	687b      	ldr	r3, [r7, #4]
 8031788:	681b      	ldr	r3, [r3, #0]
 803178a:	f003 0320 	and.w	r3, r3, #32
 803178e:	2b00      	cmp	r3, #0
 8031790:	d010      	beq.n	80317b4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8031792:	687b      	ldr	r3, [r7, #4]
 8031794:	69da      	ldr	r2, [r3, #28]
 8031796:	4b1d      	ldr	r3, [pc, #116]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 8031798:	6a1b      	ldr	r3, [r3, #32]
 803179a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 803179e:	429a      	cmp	r2, r3
 80317a0:	d208      	bcs.n	80317b4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80317a2:	4b1a      	ldr	r3, [pc, #104]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 80317a4:	6a1b      	ldr	r3, [r3, #32]
 80317a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80317aa:	687b      	ldr	r3, [r7, #4]
 80317ac:	69db      	ldr	r3, [r3, #28]
 80317ae:	4917      	ldr	r1, [pc, #92]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 80317b0:	4313      	orrs	r3, r2
 80317b2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80317b4:	f000 f834 	bl	8031820 <HAL_RCC_GetSysClockFreq>
 80317b8:	4602      	mov	r2, r0
 80317ba:	4b14      	ldr	r3, [pc, #80]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 80317bc:	699b      	ldr	r3, [r3, #24]
 80317be:	0a1b      	lsrs	r3, r3, #8
 80317c0:	f003 030f 	and.w	r3, r3, #15
 80317c4:	4912      	ldr	r1, [pc, #72]	; (8031810 <HAL_RCC_ClockConfig+0x35c>)
 80317c6:	5ccb      	ldrb	r3, [r1, r3]
 80317c8:	f003 031f 	and.w	r3, r3, #31
 80317cc:	fa22 f303 	lsr.w	r3, r2, r3
 80317d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80317d2:	4b0e      	ldr	r3, [pc, #56]	; (803180c <HAL_RCC_ClockConfig+0x358>)
 80317d4:	699b      	ldr	r3, [r3, #24]
 80317d6:	f003 030f 	and.w	r3, r3, #15
 80317da:	4a0d      	ldr	r2, [pc, #52]	; (8031810 <HAL_RCC_ClockConfig+0x35c>)
 80317dc:	5cd3      	ldrb	r3, [r2, r3]
 80317de:	f003 031f 	and.w	r3, r3, #31
 80317e2:	693a      	ldr	r2, [r7, #16]
 80317e4:	fa22 f303 	lsr.w	r3, r2, r3
 80317e8:	4a0a      	ldr	r2, [pc, #40]	; (8031814 <HAL_RCC_ClockConfig+0x360>)
 80317ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80317ec:	4a0a      	ldr	r2, [pc, #40]	; (8031818 <HAL_RCC_ClockConfig+0x364>)
 80317ee:	693b      	ldr	r3, [r7, #16]
 80317f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80317f2:	4b0a      	ldr	r3, [pc, #40]	; (803181c <HAL_RCC_ClockConfig+0x368>)
 80317f4:	681b      	ldr	r3, [r3, #0]
 80317f6:	4618      	mov	r0, r3
 80317f8:	f7f9 f9fc 	bl	802abf4 <HAL_InitTick>
 80317fc:	4603      	mov	r3, r0
 80317fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8031800:	7bfb      	ldrb	r3, [r7, #15]
}
 8031802:	4618      	mov	r0, r3
 8031804:	3718      	adds	r7, #24
 8031806:	46bd      	mov	sp, r7
 8031808:	bd80      	pop	{r7, pc}
 803180a:	bf00      	nop
 803180c:	58024400 	.word	0x58024400
 8031810:	08058518 	.word	0x08058518
 8031814:	24000008 	.word	0x24000008
 8031818:	24000004 	.word	0x24000004
 803181c:	2400000c 	.word	0x2400000c

08031820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8031820:	b480      	push	{r7}
 8031822:	b089      	sub	sp, #36	; 0x24
 8031824:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8031826:	4bb3      	ldr	r3, [pc, #716]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031828:	691b      	ldr	r3, [r3, #16]
 803182a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803182e:	2b18      	cmp	r3, #24
 8031830:	f200 8155 	bhi.w	8031ade <HAL_RCC_GetSysClockFreq+0x2be>
 8031834:	a201      	add	r2, pc, #4	; (adr r2, 803183c <HAL_RCC_GetSysClockFreq+0x1c>)
 8031836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803183a:	bf00      	nop
 803183c:	080318a1 	.word	0x080318a1
 8031840:	08031adf 	.word	0x08031adf
 8031844:	08031adf 	.word	0x08031adf
 8031848:	08031adf 	.word	0x08031adf
 803184c:	08031adf 	.word	0x08031adf
 8031850:	08031adf 	.word	0x08031adf
 8031854:	08031adf 	.word	0x08031adf
 8031858:	08031adf 	.word	0x08031adf
 803185c:	080318c7 	.word	0x080318c7
 8031860:	08031adf 	.word	0x08031adf
 8031864:	08031adf 	.word	0x08031adf
 8031868:	08031adf 	.word	0x08031adf
 803186c:	08031adf 	.word	0x08031adf
 8031870:	08031adf 	.word	0x08031adf
 8031874:	08031adf 	.word	0x08031adf
 8031878:	08031adf 	.word	0x08031adf
 803187c:	080318cd 	.word	0x080318cd
 8031880:	08031adf 	.word	0x08031adf
 8031884:	08031adf 	.word	0x08031adf
 8031888:	08031adf 	.word	0x08031adf
 803188c:	08031adf 	.word	0x08031adf
 8031890:	08031adf 	.word	0x08031adf
 8031894:	08031adf 	.word	0x08031adf
 8031898:	08031adf 	.word	0x08031adf
 803189c:	080318d3 	.word	0x080318d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80318a0:	4b94      	ldr	r3, [pc, #592]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318a2:	681b      	ldr	r3, [r3, #0]
 80318a4:	f003 0320 	and.w	r3, r3, #32
 80318a8:	2b00      	cmp	r3, #0
 80318aa:	d009      	beq.n	80318c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80318ac:	4b91      	ldr	r3, [pc, #580]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318ae:	681b      	ldr	r3, [r3, #0]
 80318b0:	08db      	lsrs	r3, r3, #3
 80318b2:	f003 0303 	and.w	r3, r3, #3
 80318b6:	4a90      	ldr	r2, [pc, #576]	; (8031af8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80318b8:	fa22 f303 	lsr.w	r3, r2, r3
 80318bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80318be:	e111      	b.n	8031ae4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80318c0:	4b8d      	ldr	r3, [pc, #564]	; (8031af8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80318c2:	61bb      	str	r3, [r7, #24]
    break;
 80318c4:	e10e      	b.n	8031ae4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80318c6:	4b8d      	ldr	r3, [pc, #564]	; (8031afc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80318c8:	61bb      	str	r3, [r7, #24]
    break;
 80318ca:	e10b      	b.n	8031ae4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80318cc:	4b8c      	ldr	r3, [pc, #560]	; (8031b00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80318ce:	61bb      	str	r3, [r7, #24]
    break;
 80318d0:	e108      	b.n	8031ae4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80318d2:	4b88      	ldr	r3, [pc, #544]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80318d6:	f003 0303 	and.w	r3, r3, #3
 80318da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80318dc:	4b85      	ldr	r3, [pc, #532]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80318e0:	091b      	lsrs	r3, r3, #4
 80318e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80318e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80318e8:	4b82      	ldr	r3, [pc, #520]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80318ec:	f003 0301 	and.w	r3, r3, #1
 80318f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80318f2:	4b80      	ldr	r3, [pc, #512]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80318f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80318f6:	08db      	lsrs	r3, r3, #3
 80318f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80318fc:	68fa      	ldr	r2, [r7, #12]
 80318fe:	fb02 f303 	mul.w	r3, r2, r3
 8031902:	ee07 3a90 	vmov	s15, r3
 8031906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 803190a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 803190e:	693b      	ldr	r3, [r7, #16]
 8031910:	2b00      	cmp	r3, #0
 8031912:	f000 80e1 	beq.w	8031ad8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8031916:	697b      	ldr	r3, [r7, #20]
 8031918:	2b02      	cmp	r3, #2
 803191a:	f000 8083 	beq.w	8031a24 <HAL_RCC_GetSysClockFreq+0x204>
 803191e:	697b      	ldr	r3, [r7, #20]
 8031920:	2b02      	cmp	r3, #2
 8031922:	f200 80a1 	bhi.w	8031a68 <HAL_RCC_GetSysClockFreq+0x248>
 8031926:	697b      	ldr	r3, [r7, #20]
 8031928:	2b00      	cmp	r3, #0
 803192a:	d003      	beq.n	8031934 <HAL_RCC_GetSysClockFreq+0x114>
 803192c:	697b      	ldr	r3, [r7, #20]
 803192e:	2b01      	cmp	r3, #1
 8031930:	d056      	beq.n	80319e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8031932:	e099      	b.n	8031a68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8031934:	4b6f      	ldr	r3, [pc, #444]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031936:	681b      	ldr	r3, [r3, #0]
 8031938:	f003 0320 	and.w	r3, r3, #32
 803193c:	2b00      	cmp	r3, #0
 803193e:	d02d      	beq.n	803199c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8031940:	4b6c      	ldr	r3, [pc, #432]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031942:	681b      	ldr	r3, [r3, #0]
 8031944:	08db      	lsrs	r3, r3, #3
 8031946:	f003 0303 	and.w	r3, r3, #3
 803194a:	4a6b      	ldr	r2, [pc, #428]	; (8031af8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 803194c:	fa22 f303 	lsr.w	r3, r2, r3
 8031950:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031952:	687b      	ldr	r3, [r7, #4]
 8031954:	ee07 3a90 	vmov	s15, r3
 8031958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803195c:	693b      	ldr	r3, [r7, #16]
 803195e:	ee07 3a90 	vmov	s15, r3
 8031962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 803196a:	4b62      	ldr	r3, [pc, #392]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 803196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803196e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031972:	ee07 3a90 	vmov	s15, r3
 8031976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 803197a:	ed97 6a02 	vldr	s12, [r7, #8]
 803197e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8031b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 803198a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 803198e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031996:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 803199a:	e087      	b.n	8031aac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 803199c:	693b      	ldr	r3, [r7, #16]
 803199e:	ee07 3a90 	vmov	s15, r3
 80319a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80319a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8031b08 <HAL_RCC_GetSysClockFreq+0x2e8>
 80319aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80319ae:	4b51      	ldr	r3, [pc, #324]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80319b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80319b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80319b6:	ee07 3a90 	vmov	s15, r3
 80319ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80319be:	ed97 6a02 	vldr	s12, [r7, #8]
 80319c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8031b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 80319c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80319ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80319ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80319d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80319d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80319da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80319de:	e065      	b.n	8031aac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80319e0:	693b      	ldr	r3, [r7, #16]
 80319e2:	ee07 3a90 	vmov	s15, r3
 80319e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80319ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8031b0c <HAL_RCC_GetSysClockFreq+0x2ec>
 80319ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80319f2:	4b40      	ldr	r3, [pc, #256]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80319f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80319f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80319fa:	ee07 3a90 	vmov	s15, r3
 80319fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8031a06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8031b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031a22:	e043      	b.n	8031aac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031a24:	693b      	ldr	r3, [r7, #16]
 8031a26:	ee07 3a90 	vmov	s15, r3
 8031a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031a2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8031b10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8031a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031a36:	4b2f      	ldr	r3, [pc, #188]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031a3e:	ee07 3a90 	vmov	s15, r3
 8031a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8031a4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8031b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031a66:	e021      	b.n	8031aac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8031a68:	693b      	ldr	r3, [r7, #16]
 8031a6a:	ee07 3a90 	vmov	s15, r3
 8031a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8031a72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8031b0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8031a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8031a7a:	4b1e      	ldr	r3, [pc, #120]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8031a82:	ee07 3a90 	vmov	s15, r3
 8031a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8031a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8031a8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8031b04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8031a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8031a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8031a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8031a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8031aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8031aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8031aaa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8031aac:	4b11      	ldr	r3, [pc, #68]	; (8031af4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8031aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031ab0:	0a5b      	lsrs	r3, r3, #9
 8031ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8031ab6:	3301      	adds	r3, #1
 8031ab8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8031aba:	683b      	ldr	r3, [r7, #0]
 8031abc:	ee07 3a90 	vmov	s15, r3
 8031ac0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8031ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8031ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8031acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8031ad0:	ee17 3a90 	vmov	r3, s15
 8031ad4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8031ad6:	e005      	b.n	8031ae4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8031ad8:	2300      	movs	r3, #0
 8031ada:	61bb      	str	r3, [r7, #24]
    break;
 8031adc:	e002      	b.n	8031ae4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8031ade:	4b07      	ldr	r3, [pc, #28]	; (8031afc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8031ae0:	61bb      	str	r3, [r7, #24]
    break;
 8031ae2:	bf00      	nop
  }

  return sysclockfreq;
 8031ae4:	69bb      	ldr	r3, [r7, #24]
}
 8031ae6:	4618      	mov	r0, r3
 8031ae8:	3724      	adds	r7, #36	; 0x24
 8031aea:	46bd      	mov	sp, r7
 8031aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031af0:	4770      	bx	lr
 8031af2:	bf00      	nop
 8031af4:	58024400 	.word	0x58024400
 8031af8:	03d09000 	.word	0x03d09000
 8031afc:	003d0900 	.word	0x003d0900
 8031b00:	017d7840 	.word	0x017d7840
 8031b04:	46000000 	.word	0x46000000
 8031b08:	4c742400 	.word	0x4c742400
 8031b0c:	4a742400 	.word	0x4a742400
 8031b10:	4bbebc20 	.word	0x4bbebc20

08031b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8031b14:	b580      	push	{r7, lr}
 8031b16:	b082      	sub	sp, #8
 8031b18:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8031b1a:	f7ff fe81 	bl	8031820 <HAL_RCC_GetSysClockFreq>
 8031b1e:	4602      	mov	r2, r0
 8031b20:	4b10      	ldr	r3, [pc, #64]	; (8031b64 <HAL_RCC_GetHCLKFreq+0x50>)
 8031b22:	699b      	ldr	r3, [r3, #24]
 8031b24:	0a1b      	lsrs	r3, r3, #8
 8031b26:	f003 030f 	and.w	r3, r3, #15
 8031b2a:	490f      	ldr	r1, [pc, #60]	; (8031b68 <HAL_RCC_GetHCLKFreq+0x54>)
 8031b2c:	5ccb      	ldrb	r3, [r1, r3]
 8031b2e:	f003 031f 	and.w	r3, r3, #31
 8031b32:	fa22 f303 	lsr.w	r3, r2, r3
 8031b36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8031b38:	4b0a      	ldr	r3, [pc, #40]	; (8031b64 <HAL_RCC_GetHCLKFreq+0x50>)
 8031b3a:	699b      	ldr	r3, [r3, #24]
 8031b3c:	f003 030f 	and.w	r3, r3, #15
 8031b40:	4a09      	ldr	r2, [pc, #36]	; (8031b68 <HAL_RCC_GetHCLKFreq+0x54>)
 8031b42:	5cd3      	ldrb	r3, [r2, r3]
 8031b44:	f003 031f 	and.w	r3, r3, #31
 8031b48:	687a      	ldr	r2, [r7, #4]
 8031b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8031b4e:	4a07      	ldr	r2, [pc, #28]	; (8031b6c <HAL_RCC_GetHCLKFreq+0x58>)
 8031b50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8031b52:	4a07      	ldr	r2, [pc, #28]	; (8031b70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8031b54:	687b      	ldr	r3, [r7, #4]
 8031b56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8031b58:	4b04      	ldr	r3, [pc, #16]	; (8031b6c <HAL_RCC_GetHCLKFreq+0x58>)
 8031b5a:	681b      	ldr	r3, [r3, #0]
}
 8031b5c:	4618      	mov	r0, r3
 8031b5e:	3708      	adds	r7, #8
 8031b60:	46bd      	mov	sp, r7
 8031b62:	bd80      	pop	{r7, pc}
 8031b64:	58024400 	.word	0x58024400
 8031b68:	08058518 	.word	0x08058518
 8031b6c:	24000008 	.word	0x24000008
 8031b70:	24000004 	.word	0x24000004

08031b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8031b74:	b580      	push	{r7, lr}
 8031b76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8031b78:	f7ff ffcc 	bl	8031b14 <HAL_RCC_GetHCLKFreq>
 8031b7c:	4602      	mov	r2, r0
 8031b7e:	4b06      	ldr	r3, [pc, #24]	; (8031b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8031b80:	69db      	ldr	r3, [r3, #28]
 8031b82:	091b      	lsrs	r3, r3, #4
 8031b84:	f003 0307 	and.w	r3, r3, #7
 8031b88:	4904      	ldr	r1, [pc, #16]	; (8031b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8031b8a:	5ccb      	ldrb	r3, [r1, r3]
 8031b8c:	f003 031f 	and.w	r3, r3, #31
 8031b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8031b94:	4618      	mov	r0, r3
 8031b96:	bd80      	pop	{r7, pc}
 8031b98:	58024400 	.word	0x58024400
 8031b9c:	08058518 	.word	0x08058518

08031ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8031ba0:	b580      	push	{r7, lr}
 8031ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8031ba4:	f7ff ffb6 	bl	8031b14 <HAL_RCC_GetHCLKFreq>
 8031ba8:	4602      	mov	r2, r0
 8031baa:	4b06      	ldr	r3, [pc, #24]	; (8031bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8031bac:	69db      	ldr	r3, [r3, #28]
 8031bae:	0a1b      	lsrs	r3, r3, #8
 8031bb0:	f003 0307 	and.w	r3, r3, #7
 8031bb4:	4904      	ldr	r1, [pc, #16]	; (8031bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8031bb6:	5ccb      	ldrb	r3, [r1, r3]
 8031bb8:	f003 031f 	and.w	r3, r3, #31
 8031bbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8031bc0:	4618      	mov	r0, r3
 8031bc2:	bd80      	pop	{r7, pc}
 8031bc4:	58024400 	.word	0x58024400
 8031bc8:	08058518 	.word	0x08058518

08031bcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8031bcc:	b580      	push	{r7, lr}
 8031bce:	b086      	sub	sp, #24
 8031bd0:	af00      	add	r7, sp, #0
 8031bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8031bd4:	2300      	movs	r3, #0
 8031bd6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8031bd8:	2300      	movs	r3, #0
 8031bda:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8031bdc:	687b      	ldr	r3, [r7, #4]
 8031bde:	681b      	ldr	r3, [r3, #0]
 8031be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8031be4:	2b00      	cmp	r3, #0
 8031be6:	d03f      	beq.n	8031c68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8031be8:	687b      	ldr	r3, [r7, #4]
 8031bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031bec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8031bf0:	d02a      	beq.n	8031c48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8031bf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8031bf6:	d824      	bhi.n	8031c42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031bfc:	d018      	beq.n	8031c30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8031bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031c02:	d81e      	bhi.n	8031c42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8031c04:	2b00      	cmp	r3, #0
 8031c06:	d003      	beq.n	8031c10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8031c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8031c0c:	d007      	beq.n	8031c1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8031c0e:	e018      	b.n	8031c42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031c10:	4ba3      	ldr	r3, [pc, #652]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031c14:	4aa2      	ldr	r2, [pc, #648]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031c1c:	e015      	b.n	8031c4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031c1e:	687b      	ldr	r3, [r7, #4]
 8031c20:	3304      	adds	r3, #4
 8031c22:	2102      	movs	r1, #2
 8031c24:	4618      	mov	r0, r3
 8031c26:	f001 f9d5 	bl	8032fd4 <RCCEx_PLL2_Config>
 8031c2a:	4603      	mov	r3, r0
 8031c2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031c2e:	e00c      	b.n	8031c4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8031c30:	687b      	ldr	r3, [r7, #4]
 8031c32:	3324      	adds	r3, #36	; 0x24
 8031c34:	2102      	movs	r1, #2
 8031c36:	4618      	mov	r0, r3
 8031c38:	f001 fa7e 	bl	8033138 <RCCEx_PLL3_Config>
 8031c3c:	4603      	mov	r3, r0
 8031c3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8031c40:	e003      	b.n	8031c4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031c42:	2301      	movs	r3, #1
 8031c44:	75fb      	strb	r3, [r7, #23]
      break;
 8031c46:	e000      	b.n	8031c4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8031c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031c4a:	7dfb      	ldrb	r3, [r7, #23]
 8031c4c:	2b00      	cmp	r3, #0
 8031c4e:	d109      	bne.n	8031c64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8031c50:	4b93      	ldr	r3, [pc, #588]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8031c58:	687b      	ldr	r3, [r7, #4]
 8031c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8031c5c:	4990      	ldr	r1, [pc, #576]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c5e:	4313      	orrs	r3, r2
 8031c60:	650b      	str	r3, [r1, #80]	; 0x50
 8031c62:	e001      	b.n	8031c68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031c64:	7dfb      	ldrb	r3, [r7, #23]
 8031c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8031c68:	687b      	ldr	r3, [r7, #4]
 8031c6a:	681b      	ldr	r3, [r3, #0]
 8031c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8031c70:	2b00      	cmp	r3, #0
 8031c72:	d03d      	beq.n	8031cf0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8031c74:	687b      	ldr	r3, [r7, #4]
 8031c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031c78:	2b04      	cmp	r3, #4
 8031c7a:	d826      	bhi.n	8031cca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8031c7c:	a201      	add	r2, pc, #4	; (adr r2, 8031c84 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8031c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8031c82:	bf00      	nop
 8031c84:	08031c99 	.word	0x08031c99
 8031c88:	08031ca7 	.word	0x08031ca7
 8031c8c:	08031cb9 	.word	0x08031cb9
 8031c90:	08031cd1 	.word	0x08031cd1
 8031c94:	08031cd1 	.word	0x08031cd1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031c98:	4b81      	ldr	r3, [pc, #516]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031c9c:	4a80      	ldr	r2, [pc, #512]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031ca4:	e015      	b.n	8031cd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031ca6:	687b      	ldr	r3, [r7, #4]
 8031ca8:	3304      	adds	r3, #4
 8031caa:	2100      	movs	r1, #0
 8031cac:	4618      	mov	r0, r3
 8031cae:	f001 f991 	bl	8032fd4 <RCCEx_PLL2_Config>
 8031cb2:	4603      	mov	r3, r0
 8031cb4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031cb6:	e00c      	b.n	8031cd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031cb8:	687b      	ldr	r3, [r7, #4]
 8031cba:	3324      	adds	r3, #36	; 0x24
 8031cbc:	2100      	movs	r1, #0
 8031cbe:	4618      	mov	r0, r3
 8031cc0:	f001 fa3a 	bl	8033138 <RCCEx_PLL3_Config>
 8031cc4:	4603      	mov	r3, r0
 8031cc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031cc8:	e003      	b.n	8031cd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031cca:	2301      	movs	r3, #1
 8031ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8031cce:	e000      	b.n	8031cd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8031cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031cd2:	7dfb      	ldrb	r3, [r7, #23]
 8031cd4:	2b00      	cmp	r3, #0
 8031cd6:	d109      	bne.n	8031cec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8031cd8:	4b71      	ldr	r3, [pc, #452]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031cdc:	f023 0207 	bic.w	r2, r3, #7
 8031ce0:	687b      	ldr	r3, [r7, #4]
 8031ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8031ce4:	496e      	ldr	r1, [pc, #440]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031ce6:	4313      	orrs	r3, r2
 8031ce8:	650b      	str	r3, [r1, #80]	; 0x50
 8031cea:	e001      	b.n	8031cf0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031cec:	7dfb      	ldrb	r3, [r7, #23]
 8031cee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8031cf0:	687b      	ldr	r3, [r7, #4]
 8031cf2:	681b      	ldr	r3, [r3, #0]
 8031cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8031cf8:	2b00      	cmp	r3, #0
 8031cfa:	d042      	beq.n	8031d82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8031cfc:	687b      	ldr	r3, [r7, #4]
 8031cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031d04:	d02b      	beq.n	8031d5e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8031d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031d0a:	d825      	bhi.n	8031d58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031d0c:	2bc0      	cmp	r3, #192	; 0xc0
 8031d0e:	d028      	beq.n	8031d62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8031d10:	2bc0      	cmp	r3, #192	; 0xc0
 8031d12:	d821      	bhi.n	8031d58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031d14:	2b80      	cmp	r3, #128	; 0x80
 8031d16:	d016      	beq.n	8031d46 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8031d18:	2b80      	cmp	r3, #128	; 0x80
 8031d1a:	d81d      	bhi.n	8031d58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8031d1c:	2b00      	cmp	r3, #0
 8031d1e:	d002      	beq.n	8031d26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8031d20:	2b40      	cmp	r3, #64	; 0x40
 8031d22:	d007      	beq.n	8031d34 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8031d24:	e018      	b.n	8031d58 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031d26:	4b5e      	ldr	r3, [pc, #376]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031d2a:	4a5d      	ldr	r2, [pc, #372]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031d30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031d32:	e017      	b.n	8031d64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031d34:	687b      	ldr	r3, [r7, #4]
 8031d36:	3304      	adds	r3, #4
 8031d38:	2100      	movs	r1, #0
 8031d3a:	4618      	mov	r0, r3
 8031d3c:	f001 f94a 	bl	8032fd4 <RCCEx_PLL2_Config>
 8031d40:	4603      	mov	r3, r0
 8031d42:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031d44:	e00e      	b.n	8031d64 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031d46:	687b      	ldr	r3, [r7, #4]
 8031d48:	3324      	adds	r3, #36	; 0x24
 8031d4a:	2100      	movs	r1, #0
 8031d4c:	4618      	mov	r0, r3
 8031d4e:	f001 f9f3 	bl	8033138 <RCCEx_PLL3_Config>
 8031d52:	4603      	mov	r3, r0
 8031d54:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8031d56:	e005      	b.n	8031d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031d58:	2301      	movs	r3, #1
 8031d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8031d5c:	e002      	b.n	8031d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031d5e:	bf00      	nop
 8031d60:	e000      	b.n	8031d64 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8031d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031d64:	7dfb      	ldrb	r3, [r7, #23]
 8031d66:	2b00      	cmp	r3, #0
 8031d68:	d109      	bne.n	8031d7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8031d6a:	4b4d      	ldr	r3, [pc, #308]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031d6e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8031d72:	687b      	ldr	r3, [r7, #4]
 8031d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031d76:	494a      	ldr	r1, [pc, #296]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031d78:	4313      	orrs	r3, r2
 8031d7a:	650b      	str	r3, [r1, #80]	; 0x50
 8031d7c:	e001      	b.n	8031d82 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031d7e:	7dfb      	ldrb	r3, [r7, #23]
 8031d80:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8031d82:	687b      	ldr	r3, [r7, #4]
 8031d84:	681b      	ldr	r3, [r3, #0]
 8031d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8031d8a:	2b00      	cmp	r3, #0
 8031d8c:	d049      	beq.n	8031e22 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8031d8e:	687b      	ldr	r3, [r7, #4]
 8031d90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031d98:	d030      	beq.n	8031dfc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8031d9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8031d9e:	d82a      	bhi.n	8031df6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031da0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031da4:	d02c      	beq.n	8031e00 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8031da6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8031daa:	d824      	bhi.n	8031df6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031db0:	d018      	beq.n	8031de4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8031db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8031db6:	d81e      	bhi.n	8031df6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8031db8:	2b00      	cmp	r3, #0
 8031dba:	d003      	beq.n	8031dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8031dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8031dc0:	d007      	beq.n	8031dd2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8031dc2:	e018      	b.n	8031df6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031dc4:	4b36      	ldr	r3, [pc, #216]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031dc8:	4a35      	ldr	r2, [pc, #212]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031dd0:	e017      	b.n	8031e02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031dd2:	687b      	ldr	r3, [r7, #4]
 8031dd4:	3304      	adds	r3, #4
 8031dd6:	2100      	movs	r1, #0
 8031dd8:	4618      	mov	r0, r3
 8031dda:	f001 f8fb 	bl	8032fd4 <RCCEx_PLL2_Config>
 8031dde:	4603      	mov	r3, r0
 8031de0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031de2:	e00e      	b.n	8031e02 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031de4:	687b      	ldr	r3, [r7, #4]
 8031de6:	3324      	adds	r3, #36	; 0x24
 8031de8:	2100      	movs	r1, #0
 8031dea:	4618      	mov	r0, r3
 8031dec:	f001 f9a4 	bl	8033138 <RCCEx_PLL3_Config>
 8031df0:	4603      	mov	r3, r0
 8031df2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031df4:	e005      	b.n	8031e02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031df6:	2301      	movs	r3, #1
 8031df8:	75fb      	strb	r3, [r7, #23]
      break;
 8031dfa:	e002      	b.n	8031e02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031dfc:	bf00      	nop
 8031dfe:	e000      	b.n	8031e02 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8031e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031e02:	7dfb      	ldrb	r3, [r7, #23]
 8031e04:	2b00      	cmp	r3, #0
 8031e06:	d10a      	bne.n	8031e1e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8031e08:	4b25      	ldr	r3, [pc, #148]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031e0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8031e10:	687b      	ldr	r3, [r7, #4]
 8031e12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8031e16:	4922      	ldr	r1, [pc, #136]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e18:	4313      	orrs	r3, r2
 8031e1a:	658b      	str	r3, [r1, #88]	; 0x58
 8031e1c:	e001      	b.n	8031e22 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031e1e:	7dfb      	ldrb	r3, [r7, #23]
 8031e20:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8031e22:	687b      	ldr	r3, [r7, #4]
 8031e24:	681b      	ldr	r3, [r3, #0]
 8031e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8031e2a:	2b00      	cmp	r3, #0
 8031e2c:	d04b      	beq.n	8031ec6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8031e2e:	687b      	ldr	r3, [r7, #4]
 8031e30:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031e38:	d030      	beq.n	8031e9c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8031e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8031e3e:	d82a      	bhi.n	8031e96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031e44:	d02e      	beq.n	8031ea4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8031e46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8031e4a:	d824      	bhi.n	8031e96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031e50:	d018      	beq.n	8031e84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8031e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8031e56:	d81e      	bhi.n	8031e96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8031e58:	2b00      	cmp	r3, #0
 8031e5a:	d003      	beq.n	8031e64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8031e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8031e60:	d007      	beq.n	8031e72 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8031e62:	e018      	b.n	8031e96 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031e64:	4b0e      	ldr	r3, [pc, #56]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031e68:	4a0d      	ldr	r2, [pc, #52]	; (8031ea0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8031e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031e70:	e019      	b.n	8031ea6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031e72:	687b      	ldr	r3, [r7, #4]
 8031e74:	3304      	adds	r3, #4
 8031e76:	2100      	movs	r1, #0
 8031e78:	4618      	mov	r0, r3
 8031e7a:	f001 f8ab 	bl	8032fd4 <RCCEx_PLL2_Config>
 8031e7e:	4603      	mov	r3, r0
 8031e80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8031e82:	e010      	b.n	8031ea6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8031e84:	687b      	ldr	r3, [r7, #4]
 8031e86:	3324      	adds	r3, #36	; 0x24
 8031e88:	2100      	movs	r1, #0
 8031e8a:	4618      	mov	r0, r3
 8031e8c:	f001 f954 	bl	8033138 <RCCEx_PLL3_Config>
 8031e90:	4603      	mov	r3, r0
 8031e92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8031e94:	e007      	b.n	8031ea6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8031e96:	2301      	movs	r3, #1
 8031e98:	75fb      	strb	r3, [r7, #23]
      break;
 8031e9a:	e004      	b.n	8031ea6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8031e9c:	bf00      	nop
 8031e9e:	e002      	b.n	8031ea6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8031ea0:	58024400 	.word	0x58024400
      break;
 8031ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031ea6:	7dfb      	ldrb	r3, [r7, #23]
 8031ea8:	2b00      	cmp	r3, #0
 8031eaa:	d10a      	bne.n	8031ec2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8031eac:	4b99      	ldr	r3, [pc, #612]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8031eb0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8031eb4:	687b      	ldr	r3, [r7, #4]
 8031eb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8031eba:	4996      	ldr	r1, [pc, #600]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031ebc:	4313      	orrs	r3, r2
 8031ebe:	658b      	str	r3, [r1, #88]	; 0x58
 8031ec0:	e001      	b.n	8031ec6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031ec2:	7dfb      	ldrb	r3, [r7, #23]
 8031ec4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8031ec6:	687b      	ldr	r3, [r7, #4]
 8031ec8:	681b      	ldr	r3, [r3, #0]
 8031eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8031ece:	2b00      	cmp	r3, #0
 8031ed0:	d032      	beq.n	8031f38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8031ed2:	687b      	ldr	r3, [r7, #4]
 8031ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031ed6:	2b30      	cmp	r3, #48	; 0x30
 8031ed8:	d01c      	beq.n	8031f14 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8031eda:	2b30      	cmp	r3, #48	; 0x30
 8031edc:	d817      	bhi.n	8031f0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031ede:	2b20      	cmp	r3, #32
 8031ee0:	d00c      	beq.n	8031efc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8031ee2:	2b20      	cmp	r3, #32
 8031ee4:	d813      	bhi.n	8031f0e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8031ee6:	2b00      	cmp	r3, #0
 8031ee8:	d016      	beq.n	8031f18 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8031eea:	2b10      	cmp	r3, #16
 8031eec:	d10f      	bne.n	8031f0e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031eee:	4b89      	ldr	r3, [pc, #548]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031ef2:	4a88      	ldr	r2, [pc, #544]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031efa:	e00e      	b.n	8031f1a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8031efc:	687b      	ldr	r3, [r7, #4]
 8031efe:	3304      	adds	r3, #4
 8031f00:	2102      	movs	r1, #2
 8031f02:	4618      	mov	r0, r3
 8031f04:	f001 f866 	bl	8032fd4 <RCCEx_PLL2_Config>
 8031f08:	4603      	mov	r3, r0
 8031f0a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8031f0c:	e005      	b.n	8031f1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8031f0e:	2301      	movs	r3, #1
 8031f10:	75fb      	strb	r3, [r7, #23]
      break;
 8031f12:	e002      	b.n	8031f1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031f14:	bf00      	nop
 8031f16:	e000      	b.n	8031f1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8031f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031f1a:	7dfb      	ldrb	r3, [r7, #23]
 8031f1c:	2b00      	cmp	r3, #0
 8031f1e:	d109      	bne.n	8031f34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8031f20:	4b7c      	ldr	r3, [pc, #496]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8031f24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8031f28:	687b      	ldr	r3, [r7, #4]
 8031f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031f2c:	4979      	ldr	r1, [pc, #484]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f2e:	4313      	orrs	r3, r2
 8031f30:	64cb      	str	r3, [r1, #76]	; 0x4c
 8031f32:	e001      	b.n	8031f38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031f34:	7dfb      	ldrb	r3, [r7, #23]
 8031f36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8031f38:	687b      	ldr	r3, [r7, #4]
 8031f3a:	681b      	ldr	r3, [r3, #0]
 8031f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8031f40:	2b00      	cmp	r3, #0
 8031f42:	d047      	beq.n	8031fd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8031f44:	687b      	ldr	r3, [r7, #4]
 8031f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031f4c:	d030      	beq.n	8031fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8031f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8031f52:	d82a      	bhi.n	8031faa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031f58:	d02c      	beq.n	8031fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8031f5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8031f5e:	d824      	bhi.n	8031faa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031f64:	d018      	beq.n	8031f98 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8031f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8031f6a:	d81e      	bhi.n	8031faa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8031f6c:	2b00      	cmp	r3, #0
 8031f6e:	d003      	beq.n	8031f78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8031f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8031f74:	d007      	beq.n	8031f86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8031f76:	e018      	b.n	8031faa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8031f78:	4b66      	ldr	r3, [pc, #408]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8031f7c:	4a65      	ldr	r2, [pc, #404]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031f82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031f84:	e017      	b.n	8031fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8031f86:	687b      	ldr	r3, [r7, #4]
 8031f88:	3304      	adds	r3, #4
 8031f8a:	2100      	movs	r1, #0
 8031f8c:	4618      	mov	r0, r3
 8031f8e:	f001 f821 	bl	8032fd4 <RCCEx_PLL2_Config>
 8031f92:	4603      	mov	r3, r0
 8031f94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031f96:	e00e      	b.n	8031fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8031f98:	687b      	ldr	r3, [r7, #4]
 8031f9a:	3324      	adds	r3, #36	; 0x24
 8031f9c:	2100      	movs	r1, #0
 8031f9e:	4618      	mov	r0, r3
 8031fa0:	f001 f8ca 	bl	8033138 <RCCEx_PLL3_Config>
 8031fa4:	4603      	mov	r3, r0
 8031fa6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8031fa8:	e005      	b.n	8031fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8031faa:	2301      	movs	r3, #1
 8031fac:	75fb      	strb	r3, [r7, #23]
      break;
 8031fae:	e002      	b.n	8031fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031fb0:	bf00      	nop
 8031fb2:	e000      	b.n	8031fb6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8031fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8031fb6:	7dfb      	ldrb	r3, [r7, #23]
 8031fb8:	2b00      	cmp	r3, #0
 8031fba:	d109      	bne.n	8031fd0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8031fbc:	4b55      	ldr	r3, [pc, #340]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8031fc0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8031fc4:	687b      	ldr	r3, [r7, #4]
 8031fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8031fc8:	4952      	ldr	r1, [pc, #328]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8031fca:	4313      	orrs	r3, r2
 8031fcc:	650b      	str	r3, [r1, #80]	; 0x50
 8031fce:	e001      	b.n	8031fd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8031fd0:	7dfb      	ldrb	r3, [r7, #23]
 8031fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8031fd4:	687b      	ldr	r3, [r7, #4]
 8031fd6:	681b      	ldr	r3, [r3, #0]
 8031fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8031fdc:	2b00      	cmp	r3, #0
 8031fde:	d049      	beq.n	8032074 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8031fe0:	687b      	ldr	r3, [r7, #4]
 8031fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8031fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8031fe8:	d02e      	beq.n	8032048 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8031fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8031fee:	d828      	bhi.n	8032042 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031ff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031ff4:	d02a      	beq.n	803204c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8031ff6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8031ffa:	d822      	bhi.n	8032042 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8031ffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8032000:	d026      	beq.n	8032050 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8032002:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8032006:	d81c      	bhi.n	8032042 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8032008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 803200c:	d010      	beq.n	8032030 <HAL_RCCEx_PeriphCLKConfig+0x464>
 803200e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8032012:	d816      	bhi.n	8032042 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8032014:	2b00      	cmp	r3, #0
 8032016:	d01d      	beq.n	8032054 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8032018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803201c:	d111      	bne.n	8032042 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 803201e:	687b      	ldr	r3, [r7, #4]
 8032020:	3304      	adds	r3, #4
 8032022:	2101      	movs	r1, #1
 8032024:	4618      	mov	r0, r3
 8032026:	f000 ffd5 	bl	8032fd4 <RCCEx_PLL2_Config>
 803202a:	4603      	mov	r3, r0
 803202c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 803202e:	e012      	b.n	8032056 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032030:	687b      	ldr	r3, [r7, #4]
 8032032:	3324      	adds	r3, #36	; 0x24
 8032034:	2101      	movs	r1, #1
 8032036:	4618      	mov	r0, r3
 8032038:	f001 f87e 	bl	8033138 <RCCEx_PLL3_Config>
 803203c:	4603      	mov	r3, r0
 803203e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8032040:	e009      	b.n	8032056 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032042:	2301      	movs	r3, #1
 8032044:	75fb      	strb	r3, [r7, #23]
      break;
 8032046:	e006      	b.n	8032056 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032048:	bf00      	nop
 803204a:	e004      	b.n	8032056 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 803204c:	bf00      	nop
 803204e:	e002      	b.n	8032056 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032050:	bf00      	nop
 8032052:	e000      	b.n	8032056 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8032054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032056:	7dfb      	ldrb	r3, [r7, #23]
 8032058:	2b00      	cmp	r3, #0
 803205a:	d109      	bne.n	8032070 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 803205c:	4b2d      	ldr	r3, [pc, #180]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803205e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032060:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8032064:	687b      	ldr	r3, [r7, #4]
 8032066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8032068:	492a      	ldr	r1, [pc, #168]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803206a:	4313      	orrs	r3, r2
 803206c:	650b      	str	r3, [r1, #80]	; 0x50
 803206e:	e001      	b.n	8032074 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032070:	7dfb      	ldrb	r3, [r7, #23]
 8032072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8032074:	687b      	ldr	r3, [r7, #4]
 8032076:	681b      	ldr	r3, [r3, #0]
 8032078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 803207c:	2b00      	cmp	r3, #0
 803207e:	d04d      	beq.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8032080:	687b      	ldr	r3, [r7, #4]
 8032082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8032086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 803208a:	d02e      	beq.n	80320ea <HAL_RCCEx_PeriphCLKConfig+0x51e>
 803208c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032090:	d828      	bhi.n	80320e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8032092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032096:	d02a      	beq.n	80320ee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8032098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803209c:	d822      	bhi.n	80320e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 803209e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80320a2:	d026      	beq.n	80320f2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80320a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80320a8:	d81c      	bhi.n	80320e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80320aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80320ae:	d010      	beq.n	80320d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80320b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80320b4:	d816      	bhi.n	80320e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80320b6:	2b00      	cmp	r3, #0
 80320b8:	d01d      	beq.n	80320f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80320ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80320be:	d111      	bne.n	80320e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80320c0:	687b      	ldr	r3, [r7, #4]
 80320c2:	3304      	adds	r3, #4
 80320c4:	2101      	movs	r1, #1
 80320c6:	4618      	mov	r0, r3
 80320c8:	f000 ff84 	bl	8032fd4 <RCCEx_PLL2_Config>
 80320cc:	4603      	mov	r3, r0
 80320ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80320d0:	e012      	b.n	80320f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80320d2:	687b      	ldr	r3, [r7, #4]
 80320d4:	3324      	adds	r3, #36	; 0x24
 80320d6:	2101      	movs	r1, #1
 80320d8:	4618      	mov	r0, r3
 80320da:	f001 f82d 	bl	8033138 <RCCEx_PLL3_Config>
 80320de:	4603      	mov	r3, r0
 80320e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80320e2:	e009      	b.n	80320f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80320e4:	2301      	movs	r3, #1
 80320e6:	75fb      	strb	r3, [r7, #23]
      break;
 80320e8:	e006      	b.n	80320f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80320ea:	bf00      	nop
 80320ec:	e004      	b.n	80320f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80320ee:	bf00      	nop
 80320f0:	e002      	b.n	80320f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80320f2:	bf00      	nop
 80320f4:	e000      	b.n	80320f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80320f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80320f8:	7dfb      	ldrb	r3, [r7, #23]
 80320fa:	2b00      	cmp	r3, #0
 80320fc:	d10c      	bne.n	8032118 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80320fe:	4b05      	ldr	r3, [pc, #20]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8032100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032102:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8032106:	687b      	ldr	r3, [r7, #4]
 8032108:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 803210c:	4901      	ldr	r1, [pc, #4]	; (8032114 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 803210e:	4313      	orrs	r3, r2
 8032110:	658b      	str	r3, [r1, #88]	; 0x58
 8032112:	e003      	b.n	803211c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8032114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032118:	7dfb      	ldrb	r3, [r7, #23]
 803211a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 803211c:	687b      	ldr	r3, [r7, #4]
 803211e:	681b      	ldr	r3, [r3, #0]
 8032120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8032124:	2b00      	cmp	r3, #0
 8032126:	d02f      	beq.n	8032188 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8032128:	687b      	ldr	r3, [r7, #4]
 803212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803212c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032130:	d00e      	beq.n	8032150 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8032132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032136:	d814      	bhi.n	8032162 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8032138:	2b00      	cmp	r3, #0
 803213a:	d015      	beq.n	8032168 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 803213c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8032140:	d10f      	bne.n	8032162 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032142:	4baf      	ldr	r3, [pc, #700]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032146:	4aae      	ldr	r2, [pc, #696]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803214c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 803214e:	e00c      	b.n	803216a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032150:	687b      	ldr	r3, [r7, #4]
 8032152:	3304      	adds	r3, #4
 8032154:	2101      	movs	r1, #1
 8032156:	4618      	mov	r0, r3
 8032158:	f000 ff3c 	bl	8032fd4 <RCCEx_PLL2_Config>
 803215c:	4603      	mov	r3, r0
 803215e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8032160:	e003      	b.n	803216a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032162:	2301      	movs	r3, #1
 8032164:	75fb      	strb	r3, [r7, #23]
      break;
 8032166:	e000      	b.n	803216a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8032168:	bf00      	nop
    }

    if(ret == HAL_OK)
 803216a:	7dfb      	ldrb	r3, [r7, #23]
 803216c:	2b00      	cmp	r3, #0
 803216e:	d109      	bne.n	8032184 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8032170:	4ba3      	ldr	r3, [pc, #652]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032174:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8032178:	687b      	ldr	r3, [r7, #4]
 803217a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 803217c:	49a0      	ldr	r1, [pc, #640]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803217e:	4313      	orrs	r3, r2
 8032180:	650b      	str	r3, [r1, #80]	; 0x50
 8032182:	e001      	b.n	8032188 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032184:	7dfb      	ldrb	r3, [r7, #23]
 8032186:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8032188:	687b      	ldr	r3, [r7, #4]
 803218a:	681b      	ldr	r3, [r3, #0]
 803218c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8032190:	2b00      	cmp	r3, #0
 8032192:	d032      	beq.n	80321fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8032194:	687b      	ldr	r3, [r7, #4]
 8032196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032198:	2b03      	cmp	r3, #3
 803219a:	d81b      	bhi.n	80321d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 803219c:	a201      	add	r2, pc, #4	; (adr r2, 80321a4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 803219e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80321a2:	bf00      	nop
 80321a4:	080321db 	.word	0x080321db
 80321a8:	080321b5 	.word	0x080321b5
 80321ac:	080321c3 	.word	0x080321c3
 80321b0:	080321db 	.word	0x080321db
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80321b4:	4b92      	ldr	r3, [pc, #584]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80321b8:	4a91      	ldr	r2, [pc, #580]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80321be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80321c0:	e00c      	b.n	80321dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80321c2:	687b      	ldr	r3, [r7, #4]
 80321c4:	3304      	adds	r3, #4
 80321c6:	2102      	movs	r1, #2
 80321c8:	4618      	mov	r0, r3
 80321ca:	f000 ff03 	bl	8032fd4 <RCCEx_PLL2_Config>
 80321ce:	4603      	mov	r3, r0
 80321d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80321d2:	e003      	b.n	80321dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80321d4:	2301      	movs	r3, #1
 80321d6:	75fb      	strb	r3, [r7, #23]
      break;
 80321d8:	e000      	b.n	80321dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80321da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80321dc:	7dfb      	ldrb	r3, [r7, #23]
 80321de:	2b00      	cmp	r3, #0
 80321e0:	d109      	bne.n	80321f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80321e2:	4b87      	ldr	r3, [pc, #540]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80321e6:	f023 0203 	bic.w	r2, r3, #3
 80321ea:	687b      	ldr	r3, [r7, #4]
 80321ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80321ee:	4984      	ldr	r1, [pc, #528]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80321f0:	4313      	orrs	r3, r2
 80321f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80321f4:	e001      	b.n	80321fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80321f6:	7dfb      	ldrb	r3, [r7, #23]
 80321f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80321fa:	687b      	ldr	r3, [r7, #4]
 80321fc:	681b      	ldr	r3, [r3, #0]
 80321fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8032202:	2b00      	cmp	r3, #0
 8032204:	f000 8086 	beq.w	8032314 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8032208:	4b7e      	ldr	r3, [pc, #504]	; (8032404 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803220a:	681b      	ldr	r3, [r3, #0]
 803220c:	4a7d      	ldr	r2, [pc, #500]	; (8032404 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 803220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8032212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8032214:	f7f8 fd38 	bl	802ac88 <HAL_GetTick>
 8032218:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 803221a:	e009      	b.n	8032230 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 803221c:	f7f8 fd34 	bl	802ac88 <HAL_GetTick>
 8032220:	4602      	mov	r2, r0
 8032222:	693b      	ldr	r3, [r7, #16]
 8032224:	1ad3      	subs	r3, r2, r3
 8032226:	2b64      	cmp	r3, #100	; 0x64
 8032228:	d902      	bls.n	8032230 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 803222a:	2303      	movs	r3, #3
 803222c:	75fb      	strb	r3, [r7, #23]
        break;
 803222e:	e005      	b.n	803223c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8032230:	4b74      	ldr	r3, [pc, #464]	; (8032404 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8032232:	681b      	ldr	r3, [r3, #0]
 8032234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8032238:	2b00      	cmp	r3, #0
 803223a:	d0ef      	beq.n	803221c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 803223c:	7dfb      	ldrb	r3, [r7, #23]
 803223e:	2b00      	cmp	r3, #0
 8032240:	d166      	bne.n	8032310 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8032242:	4b6f      	ldr	r3, [pc, #444]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032244:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8032246:	687b      	ldr	r3, [r7, #4]
 8032248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 803224c:	4053      	eors	r3, r2
 803224e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8032252:	2b00      	cmp	r3, #0
 8032254:	d013      	beq.n	803227e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8032256:	4b6a      	ldr	r3, [pc, #424]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803225a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803225e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8032260:	4b67      	ldr	r3, [pc, #412]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032264:	4a66      	ldr	r2, [pc, #408]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803226a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 803226c:	4b64      	ldr	r3, [pc, #400]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032270:	4a63      	ldr	r2, [pc, #396]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8032276:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8032278:	4a61      	ldr	r2, [pc, #388]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 803227a:	68fb      	ldr	r3, [r7, #12]
 803227c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 803227e:	687b      	ldr	r3, [r7, #4]
 8032280:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8032284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032288:	d115      	bne.n	80322b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 803228a:	f7f8 fcfd 	bl	802ac88 <HAL_GetTick>
 803228e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8032290:	e00b      	b.n	80322aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8032292:	f7f8 fcf9 	bl	802ac88 <HAL_GetTick>
 8032296:	4602      	mov	r2, r0
 8032298:	693b      	ldr	r3, [r7, #16]
 803229a:	1ad3      	subs	r3, r2, r3
 803229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80322a0:	4293      	cmp	r3, r2
 80322a2:	d902      	bls.n	80322aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80322a4:	2303      	movs	r3, #3
 80322a6:	75fb      	strb	r3, [r7, #23]
            break;
 80322a8:	e005      	b.n	80322b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80322aa:	4b55      	ldr	r3, [pc, #340]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80322ae:	f003 0302 	and.w	r3, r3, #2
 80322b2:	2b00      	cmp	r3, #0
 80322b4:	d0ed      	beq.n	8032292 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80322b6:	7dfb      	ldrb	r3, [r7, #23]
 80322b8:	2b00      	cmp	r3, #0
 80322ba:	d126      	bne.n	803230a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80322bc:	687b      	ldr	r3, [r7, #4]
 80322be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80322c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80322c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80322ca:	d10d      	bne.n	80322e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80322cc:	4b4c      	ldr	r3, [pc, #304]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322ce:	691b      	ldr	r3, [r3, #16]
 80322d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80322d4:	687b      	ldr	r3, [r7, #4]
 80322d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80322da:	0919      	lsrs	r1, r3, #4
 80322dc:	4b4a      	ldr	r3, [pc, #296]	; (8032408 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80322de:	400b      	ands	r3, r1
 80322e0:	4947      	ldr	r1, [pc, #284]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322e2:	4313      	orrs	r3, r2
 80322e4:	610b      	str	r3, [r1, #16]
 80322e6:	e005      	b.n	80322f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80322e8:	4b45      	ldr	r3, [pc, #276]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322ea:	691b      	ldr	r3, [r3, #16]
 80322ec:	4a44      	ldr	r2, [pc, #272]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80322f2:	6113      	str	r3, [r2, #16]
 80322f4:	4b42      	ldr	r3, [pc, #264]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80322f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80322f8:	687b      	ldr	r3, [r7, #4]
 80322fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80322fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032302:	493f      	ldr	r1, [pc, #252]	; (8032400 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8032304:	4313      	orrs	r3, r2
 8032306:	670b      	str	r3, [r1, #112]	; 0x70
 8032308:	e004      	b.n	8032314 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 803230a:	7dfb      	ldrb	r3, [r7, #23]
 803230c:	75bb      	strb	r3, [r7, #22]
 803230e:	e001      	b.n	8032314 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032310:	7dfb      	ldrb	r3, [r7, #23]
 8032312:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8032314:	687b      	ldr	r3, [r7, #4]
 8032316:	681b      	ldr	r3, [r3, #0]
 8032318:	f003 0301 	and.w	r3, r3, #1
 803231c:	2b00      	cmp	r3, #0
 803231e:	f000 8085 	beq.w	803242c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8032322:	687b      	ldr	r3, [r7, #4]
 8032324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8032326:	2b28      	cmp	r3, #40	; 0x28
 8032328:	d866      	bhi.n	80323f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 803232a:	a201      	add	r2, pc, #4	; (adr r2, 8032330 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 803232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032330:	0803240d 	.word	0x0803240d
 8032334:	080323f9 	.word	0x080323f9
 8032338:	080323f9 	.word	0x080323f9
 803233c:	080323f9 	.word	0x080323f9
 8032340:	080323f9 	.word	0x080323f9
 8032344:	080323f9 	.word	0x080323f9
 8032348:	080323f9 	.word	0x080323f9
 803234c:	080323f9 	.word	0x080323f9
 8032350:	080323d5 	.word	0x080323d5
 8032354:	080323f9 	.word	0x080323f9
 8032358:	080323f9 	.word	0x080323f9
 803235c:	080323f9 	.word	0x080323f9
 8032360:	080323f9 	.word	0x080323f9
 8032364:	080323f9 	.word	0x080323f9
 8032368:	080323f9 	.word	0x080323f9
 803236c:	080323f9 	.word	0x080323f9
 8032370:	080323e7 	.word	0x080323e7
 8032374:	080323f9 	.word	0x080323f9
 8032378:	080323f9 	.word	0x080323f9
 803237c:	080323f9 	.word	0x080323f9
 8032380:	080323f9 	.word	0x080323f9
 8032384:	080323f9 	.word	0x080323f9
 8032388:	080323f9 	.word	0x080323f9
 803238c:	080323f9 	.word	0x080323f9
 8032390:	0803240d 	.word	0x0803240d
 8032394:	080323f9 	.word	0x080323f9
 8032398:	080323f9 	.word	0x080323f9
 803239c:	080323f9 	.word	0x080323f9
 80323a0:	080323f9 	.word	0x080323f9
 80323a4:	080323f9 	.word	0x080323f9
 80323a8:	080323f9 	.word	0x080323f9
 80323ac:	080323f9 	.word	0x080323f9
 80323b0:	0803240d 	.word	0x0803240d
 80323b4:	080323f9 	.word	0x080323f9
 80323b8:	080323f9 	.word	0x080323f9
 80323bc:	080323f9 	.word	0x080323f9
 80323c0:	080323f9 	.word	0x080323f9
 80323c4:	080323f9 	.word	0x080323f9
 80323c8:	080323f9 	.word	0x080323f9
 80323cc:	080323f9 	.word	0x080323f9
 80323d0:	0803240d 	.word	0x0803240d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80323d4:	687b      	ldr	r3, [r7, #4]
 80323d6:	3304      	adds	r3, #4
 80323d8:	2101      	movs	r1, #1
 80323da:	4618      	mov	r0, r3
 80323dc:	f000 fdfa 	bl	8032fd4 <RCCEx_PLL2_Config>
 80323e0:	4603      	mov	r3, r0
 80323e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80323e4:	e013      	b.n	803240e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80323e6:	687b      	ldr	r3, [r7, #4]
 80323e8:	3324      	adds	r3, #36	; 0x24
 80323ea:	2101      	movs	r1, #1
 80323ec:	4618      	mov	r0, r3
 80323ee:	f000 fea3 	bl	8033138 <RCCEx_PLL3_Config>
 80323f2:	4603      	mov	r3, r0
 80323f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80323f6:	e00a      	b.n	803240e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80323f8:	2301      	movs	r3, #1
 80323fa:	75fb      	strb	r3, [r7, #23]
      break;
 80323fc:	e007      	b.n	803240e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80323fe:	bf00      	nop
 8032400:	58024400 	.word	0x58024400
 8032404:	58024800 	.word	0x58024800
 8032408:	00ffffcf 	.word	0x00ffffcf
      break;
 803240c:	bf00      	nop
    }

    if(ret == HAL_OK)
 803240e:	7dfb      	ldrb	r3, [r7, #23]
 8032410:	2b00      	cmp	r3, #0
 8032412:	d109      	bne.n	8032428 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8032414:	4b96      	ldr	r3, [pc, #600]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032418:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 803241c:	687b      	ldr	r3, [r7, #4]
 803241e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8032420:	4993      	ldr	r1, [pc, #588]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032422:	4313      	orrs	r3, r2
 8032424:	654b      	str	r3, [r1, #84]	; 0x54
 8032426:	e001      	b.n	803242c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032428:	7dfb      	ldrb	r3, [r7, #23]
 803242a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 803242c:	687b      	ldr	r3, [r7, #4]
 803242e:	681b      	ldr	r3, [r3, #0]
 8032430:	f003 0302 	and.w	r3, r3, #2
 8032434:	2b00      	cmp	r3, #0
 8032436:	d038      	beq.n	80324aa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8032438:	687b      	ldr	r3, [r7, #4]
 803243a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803243c:	2b05      	cmp	r3, #5
 803243e:	d821      	bhi.n	8032484 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8032440:	a201      	add	r2, pc, #4	; (adr r2, 8032448 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8032442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8032446:	bf00      	nop
 8032448:	0803248b 	.word	0x0803248b
 803244c:	08032461 	.word	0x08032461
 8032450:	08032473 	.word	0x08032473
 8032454:	0803248b 	.word	0x0803248b
 8032458:	0803248b 	.word	0x0803248b
 803245c:	0803248b 	.word	0x0803248b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8032460:	687b      	ldr	r3, [r7, #4]
 8032462:	3304      	adds	r3, #4
 8032464:	2101      	movs	r1, #1
 8032466:	4618      	mov	r0, r3
 8032468:	f000 fdb4 	bl	8032fd4 <RCCEx_PLL2_Config>
 803246c:	4603      	mov	r3, r0
 803246e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8032470:	e00c      	b.n	803248c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032472:	687b      	ldr	r3, [r7, #4]
 8032474:	3324      	adds	r3, #36	; 0x24
 8032476:	2101      	movs	r1, #1
 8032478:	4618      	mov	r0, r3
 803247a:	f000 fe5d 	bl	8033138 <RCCEx_PLL3_Config>
 803247e:	4603      	mov	r3, r0
 8032480:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8032482:	e003      	b.n	803248c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032484:	2301      	movs	r3, #1
 8032486:	75fb      	strb	r3, [r7, #23]
      break;
 8032488:	e000      	b.n	803248c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 803248a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803248c:	7dfb      	ldrb	r3, [r7, #23]
 803248e:	2b00      	cmp	r3, #0
 8032490:	d109      	bne.n	80324a6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8032492:	4b77      	ldr	r3, [pc, #476]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032496:	f023 0207 	bic.w	r2, r3, #7
 803249a:	687b      	ldr	r3, [r7, #4]
 803249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 803249e:	4974      	ldr	r1, [pc, #464]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80324a0:	4313      	orrs	r3, r2
 80324a2:	654b      	str	r3, [r1, #84]	; 0x54
 80324a4:	e001      	b.n	80324aa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80324a6:	7dfb      	ldrb	r3, [r7, #23]
 80324a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80324aa:	687b      	ldr	r3, [r7, #4]
 80324ac:	681b      	ldr	r3, [r3, #0]
 80324ae:	f003 0304 	and.w	r3, r3, #4
 80324b2:	2b00      	cmp	r3, #0
 80324b4:	d03a      	beq.n	803252c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80324b6:	687b      	ldr	r3, [r7, #4]
 80324b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80324bc:	2b05      	cmp	r3, #5
 80324be:	d821      	bhi.n	8032504 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80324c0:	a201      	add	r2, pc, #4	; (adr r2, 80324c8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80324c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80324c6:	bf00      	nop
 80324c8:	0803250b 	.word	0x0803250b
 80324cc:	080324e1 	.word	0x080324e1
 80324d0:	080324f3 	.word	0x080324f3
 80324d4:	0803250b 	.word	0x0803250b
 80324d8:	0803250b 	.word	0x0803250b
 80324dc:	0803250b 	.word	0x0803250b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80324e0:	687b      	ldr	r3, [r7, #4]
 80324e2:	3304      	adds	r3, #4
 80324e4:	2101      	movs	r1, #1
 80324e6:	4618      	mov	r0, r3
 80324e8:	f000 fd74 	bl	8032fd4 <RCCEx_PLL2_Config>
 80324ec:	4603      	mov	r3, r0
 80324ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80324f0:	e00c      	b.n	803250c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80324f2:	687b      	ldr	r3, [r7, #4]
 80324f4:	3324      	adds	r3, #36	; 0x24
 80324f6:	2101      	movs	r1, #1
 80324f8:	4618      	mov	r0, r3
 80324fa:	f000 fe1d 	bl	8033138 <RCCEx_PLL3_Config>
 80324fe:	4603      	mov	r3, r0
 8032500:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8032502:	e003      	b.n	803250c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032504:	2301      	movs	r3, #1
 8032506:	75fb      	strb	r3, [r7, #23]
      break;
 8032508:	e000      	b.n	803250c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 803250a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803250c:	7dfb      	ldrb	r3, [r7, #23]
 803250e:	2b00      	cmp	r3, #0
 8032510:	d10a      	bne.n	8032528 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8032512:	4b57      	ldr	r3, [pc, #348]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032516:	f023 0207 	bic.w	r2, r3, #7
 803251a:	687b      	ldr	r3, [r7, #4]
 803251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8032520:	4953      	ldr	r1, [pc, #332]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8032522:	4313      	orrs	r3, r2
 8032524:	658b      	str	r3, [r1, #88]	; 0x58
 8032526:	e001      	b.n	803252c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032528:	7dfb      	ldrb	r3, [r7, #23]
 803252a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 803252c:	687b      	ldr	r3, [r7, #4]
 803252e:	681b      	ldr	r3, [r3, #0]
 8032530:	f003 0320 	and.w	r3, r3, #32
 8032534:	2b00      	cmp	r3, #0
 8032536:	d04b      	beq.n	80325d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8032538:	687b      	ldr	r3, [r7, #4]
 803253a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803253e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032542:	d02e      	beq.n	80325a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8032544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8032548:	d828      	bhi.n	803259c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803254a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803254e:	d02a      	beq.n	80325a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8032550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8032554:	d822      	bhi.n	803259c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032556:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 803255a:	d026      	beq.n	80325aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 803255c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8032560:	d81c      	bhi.n	803259c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8032562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8032566:	d010      	beq.n	803258a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8032568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 803256c:	d816      	bhi.n	803259c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 803256e:	2b00      	cmp	r3, #0
 8032570:	d01d      	beq.n	80325ae <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8032572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8032576:	d111      	bne.n	803259c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8032578:	687b      	ldr	r3, [r7, #4]
 803257a:	3304      	adds	r3, #4
 803257c:	2100      	movs	r1, #0
 803257e:	4618      	mov	r0, r3
 8032580:	f000 fd28 	bl	8032fd4 <RCCEx_PLL2_Config>
 8032584:	4603      	mov	r3, r0
 8032586:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8032588:	e012      	b.n	80325b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803258a:	687b      	ldr	r3, [r7, #4]
 803258c:	3324      	adds	r3, #36	; 0x24
 803258e:	2102      	movs	r1, #2
 8032590:	4618      	mov	r0, r3
 8032592:	f000 fdd1 	bl	8033138 <RCCEx_PLL3_Config>
 8032596:	4603      	mov	r3, r0
 8032598:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 803259a:	e009      	b.n	80325b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803259c:	2301      	movs	r3, #1
 803259e:	75fb      	strb	r3, [r7, #23]
      break;
 80325a0:	e006      	b.n	80325b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80325a2:	bf00      	nop
 80325a4:	e004      	b.n	80325b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80325a6:	bf00      	nop
 80325a8:	e002      	b.n	80325b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80325aa:	bf00      	nop
 80325ac:	e000      	b.n	80325b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80325ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80325b0:	7dfb      	ldrb	r3, [r7, #23]
 80325b2:	2b00      	cmp	r3, #0
 80325b4:	d10a      	bne.n	80325cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80325b6:	4b2e      	ldr	r3, [pc, #184]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80325b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80325ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80325be:	687b      	ldr	r3, [r7, #4]
 80325c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80325c4:	492a      	ldr	r1, [pc, #168]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80325c6:	4313      	orrs	r3, r2
 80325c8:	654b      	str	r3, [r1, #84]	; 0x54
 80325ca:	e001      	b.n	80325d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80325cc:	7dfb      	ldrb	r3, [r7, #23]
 80325ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80325d0:	687b      	ldr	r3, [r7, #4]
 80325d2:	681b      	ldr	r3, [r3, #0]
 80325d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80325d8:	2b00      	cmp	r3, #0
 80325da:	d04d      	beq.n	8032678 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80325dc:	687b      	ldr	r3, [r7, #4]
 80325de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80325e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80325e6:	d02e      	beq.n	8032646 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80325e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80325ec:	d828      	bhi.n	8032640 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80325ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80325f2:	d02a      	beq.n	803264a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80325f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80325f8:	d822      	bhi.n	8032640 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80325fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80325fe:	d026      	beq.n	803264e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8032600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8032604:	d81c      	bhi.n	8032640 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8032606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 803260a:	d010      	beq.n	803262e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 803260c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8032610:	d816      	bhi.n	8032640 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8032612:	2b00      	cmp	r3, #0
 8032614:	d01d      	beq.n	8032652 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8032616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 803261a:	d111      	bne.n	8032640 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 803261c:	687b      	ldr	r3, [r7, #4]
 803261e:	3304      	adds	r3, #4
 8032620:	2100      	movs	r1, #0
 8032622:	4618      	mov	r0, r3
 8032624:	f000 fcd6 	bl	8032fd4 <RCCEx_PLL2_Config>
 8032628:	4603      	mov	r3, r0
 803262a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 803262c:	e012      	b.n	8032654 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 803262e:	687b      	ldr	r3, [r7, #4]
 8032630:	3324      	adds	r3, #36	; 0x24
 8032632:	2102      	movs	r1, #2
 8032634:	4618      	mov	r0, r3
 8032636:	f000 fd7f 	bl	8033138 <RCCEx_PLL3_Config>
 803263a:	4603      	mov	r3, r0
 803263c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 803263e:	e009      	b.n	8032654 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032640:	2301      	movs	r3, #1
 8032642:	75fb      	strb	r3, [r7, #23]
      break;
 8032644:	e006      	b.n	8032654 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032646:	bf00      	nop
 8032648:	e004      	b.n	8032654 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803264a:	bf00      	nop
 803264c:	e002      	b.n	8032654 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 803264e:	bf00      	nop
 8032650:	e000      	b.n	8032654 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8032652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8032654:	7dfb      	ldrb	r3, [r7, #23]
 8032656:	2b00      	cmp	r3, #0
 8032658:	d10c      	bne.n	8032674 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 803265a:	4b05      	ldr	r3, [pc, #20]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803265e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8032662:	687b      	ldr	r3, [r7, #4]
 8032664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8032668:	4901      	ldr	r1, [pc, #4]	; (8032670 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 803266a:	4313      	orrs	r3, r2
 803266c:	658b      	str	r3, [r1, #88]	; 0x58
 803266e:	e003      	b.n	8032678 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8032670:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032674:	7dfb      	ldrb	r3, [r7, #23]
 8032676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8032678:	687b      	ldr	r3, [r7, #4]
 803267a:	681b      	ldr	r3, [r3, #0]
 803267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8032680:	2b00      	cmp	r3, #0
 8032682:	d04b      	beq.n	803271c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8032684:	687b      	ldr	r3, [r7, #4]
 8032686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 803268a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 803268e:	d02e      	beq.n	80326ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8032690:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8032694:	d828      	bhi.n	80326e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8032696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803269a:	d02a      	beq.n	80326f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 803269c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80326a0:	d822      	bhi.n	80326e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80326a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80326a6:	d026      	beq.n	80326f6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80326a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80326ac:	d81c      	bhi.n	80326e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80326ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80326b2:	d010      	beq.n	80326d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80326b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80326b8:	d816      	bhi.n	80326e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80326ba:	2b00      	cmp	r3, #0
 80326bc:	d01d      	beq.n	80326fa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80326be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80326c2:	d111      	bne.n	80326e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80326c4:	687b      	ldr	r3, [r7, #4]
 80326c6:	3304      	adds	r3, #4
 80326c8:	2100      	movs	r1, #0
 80326ca:	4618      	mov	r0, r3
 80326cc:	f000 fc82 	bl	8032fd4 <RCCEx_PLL2_Config>
 80326d0:	4603      	mov	r3, r0
 80326d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80326d4:	e012      	b.n	80326fc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80326d6:	687b      	ldr	r3, [r7, #4]
 80326d8:	3324      	adds	r3, #36	; 0x24
 80326da:	2102      	movs	r1, #2
 80326dc:	4618      	mov	r0, r3
 80326de:	f000 fd2b 	bl	8033138 <RCCEx_PLL3_Config>
 80326e2:	4603      	mov	r3, r0
 80326e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80326e6:	e009      	b.n	80326fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80326e8:	2301      	movs	r3, #1
 80326ea:	75fb      	strb	r3, [r7, #23]
      break;
 80326ec:	e006      	b.n	80326fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80326ee:	bf00      	nop
 80326f0:	e004      	b.n	80326fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80326f2:	bf00      	nop
 80326f4:	e002      	b.n	80326fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80326f6:	bf00      	nop
 80326f8:	e000      	b.n	80326fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80326fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80326fc:	7dfb      	ldrb	r3, [r7, #23]
 80326fe:	2b00      	cmp	r3, #0
 8032700:	d10a      	bne.n	8032718 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8032702:	4b9d      	ldr	r3, [pc, #628]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 803270a:	687b      	ldr	r3, [r7, #4]
 803270c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8032710:	4999      	ldr	r1, [pc, #612]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032712:	4313      	orrs	r3, r2
 8032714:	658b      	str	r3, [r1, #88]	; 0x58
 8032716:	e001      	b.n	803271c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032718:	7dfb      	ldrb	r3, [r7, #23]
 803271a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 803271c:	687b      	ldr	r3, [r7, #4]
 803271e:	681b      	ldr	r3, [r3, #0]
 8032720:	f003 0308 	and.w	r3, r3, #8
 8032724:	2b00      	cmp	r3, #0
 8032726:	d01a      	beq.n	803275e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8032728:	687b      	ldr	r3, [r7, #4]
 803272a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 803272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8032732:	d10a      	bne.n	803274a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8032734:	687b      	ldr	r3, [r7, #4]
 8032736:	3324      	adds	r3, #36	; 0x24
 8032738:	2102      	movs	r1, #2
 803273a:	4618      	mov	r0, r3
 803273c:	f000 fcfc 	bl	8033138 <RCCEx_PLL3_Config>
 8032740:	4603      	mov	r3, r0
 8032742:	2b00      	cmp	r3, #0
 8032744:	d001      	beq.n	803274a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8032746:	2301      	movs	r3, #1
 8032748:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 803274a:	4b8b      	ldr	r3, [pc, #556]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 803274e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8032752:	687b      	ldr	r3, [r7, #4]
 8032754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8032758:	4987      	ldr	r1, [pc, #540]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803275a:	4313      	orrs	r3, r2
 803275c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 803275e:	687b      	ldr	r3, [r7, #4]
 8032760:	681b      	ldr	r3, [r3, #0]
 8032762:	f003 0310 	and.w	r3, r3, #16
 8032766:	2b00      	cmp	r3, #0
 8032768:	d01a      	beq.n	80327a0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 803276a:	687b      	ldr	r3, [r7, #4]
 803276c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8032770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8032774:	d10a      	bne.n	803278c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8032776:	687b      	ldr	r3, [r7, #4]
 8032778:	3324      	adds	r3, #36	; 0x24
 803277a:	2102      	movs	r1, #2
 803277c:	4618      	mov	r0, r3
 803277e:	f000 fcdb 	bl	8033138 <RCCEx_PLL3_Config>
 8032782:	4603      	mov	r3, r0
 8032784:	2b00      	cmp	r3, #0
 8032786:	d001      	beq.n	803278c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8032788:	2301      	movs	r3, #1
 803278a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 803278c:	4b7a      	ldr	r3, [pc, #488]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8032794:	687b      	ldr	r3, [r7, #4]
 8032796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 803279a:	4977      	ldr	r1, [pc, #476]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803279c:	4313      	orrs	r3, r2
 803279e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80327a0:	687b      	ldr	r3, [r7, #4]
 80327a2:	681b      	ldr	r3, [r3, #0]
 80327a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80327a8:	2b00      	cmp	r3, #0
 80327aa:	d034      	beq.n	8032816 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80327ac:	687b      	ldr	r3, [r7, #4]
 80327ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80327b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80327b6:	d01d      	beq.n	80327f4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80327b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80327bc:	d817      	bhi.n	80327ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80327be:	2b00      	cmp	r3, #0
 80327c0:	d003      	beq.n	80327ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80327c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80327c6:	d009      	beq.n	80327dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80327c8:	e011      	b.n	80327ee <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80327ca:	687b      	ldr	r3, [r7, #4]
 80327cc:	3304      	adds	r3, #4
 80327ce:	2100      	movs	r1, #0
 80327d0:	4618      	mov	r0, r3
 80327d2:	f000 fbff 	bl	8032fd4 <RCCEx_PLL2_Config>
 80327d6:	4603      	mov	r3, r0
 80327d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80327da:	e00c      	b.n	80327f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80327dc:	687b      	ldr	r3, [r7, #4]
 80327de:	3324      	adds	r3, #36	; 0x24
 80327e0:	2102      	movs	r1, #2
 80327e2:	4618      	mov	r0, r3
 80327e4:	f000 fca8 	bl	8033138 <RCCEx_PLL3_Config>
 80327e8:	4603      	mov	r3, r0
 80327ea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80327ec:	e003      	b.n	80327f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80327ee:	2301      	movs	r3, #1
 80327f0:	75fb      	strb	r3, [r7, #23]
      break;
 80327f2:	e000      	b.n	80327f6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80327f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80327f6:	7dfb      	ldrb	r3, [r7, #23]
 80327f8:	2b00      	cmp	r3, #0
 80327fa:	d10a      	bne.n	8032812 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80327fc:	4b5e      	ldr	r3, [pc, #376]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80327fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8032804:	687b      	ldr	r3, [r7, #4]
 8032806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 803280a:	495b      	ldr	r1, [pc, #364]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 803280c:	4313      	orrs	r3, r2
 803280e:	658b      	str	r3, [r1, #88]	; 0x58
 8032810:	e001      	b.n	8032816 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032812:	7dfb      	ldrb	r3, [r7, #23]
 8032814:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8032816:	687b      	ldr	r3, [r7, #4]
 8032818:	681b      	ldr	r3, [r3, #0]
 803281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 803281e:	2b00      	cmp	r3, #0
 8032820:	d033      	beq.n	803288a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8032822:	687b      	ldr	r3, [r7, #4]
 8032824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8032828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 803282c:	d01c      	beq.n	8032868 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 803282e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8032832:	d816      	bhi.n	8032862 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8032834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8032838:	d003      	beq.n	8032842 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 803283a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 803283e:	d007      	beq.n	8032850 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8032840:	e00f      	b.n	8032862 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8032842:	4b4d      	ldr	r3, [pc, #308]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032846:	4a4c      	ldr	r2, [pc, #304]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803284c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 803284e:	e00c      	b.n	803286a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8032850:	687b      	ldr	r3, [r7, #4]
 8032852:	3324      	adds	r3, #36	; 0x24
 8032854:	2101      	movs	r1, #1
 8032856:	4618      	mov	r0, r3
 8032858:	f000 fc6e 	bl	8033138 <RCCEx_PLL3_Config>
 803285c:	4603      	mov	r3, r0
 803285e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8032860:	e003      	b.n	803286a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8032862:	2301      	movs	r3, #1
 8032864:	75fb      	strb	r3, [r7, #23]
      break;
 8032866:	e000      	b.n	803286a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8032868:	bf00      	nop
    }

    if(ret == HAL_OK)
 803286a:	7dfb      	ldrb	r3, [r7, #23]
 803286c:	2b00      	cmp	r3, #0
 803286e:	d10a      	bne.n	8032886 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8032870:	4b41      	ldr	r3, [pc, #260]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032874:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8032878:	687b      	ldr	r3, [r7, #4]
 803287a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803287e:	493e      	ldr	r1, [pc, #248]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032880:	4313      	orrs	r3, r2
 8032882:	654b      	str	r3, [r1, #84]	; 0x54
 8032884:	e001      	b.n	803288a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8032886:	7dfb      	ldrb	r3, [r7, #23]
 8032888:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 803288a:	687b      	ldr	r3, [r7, #4]
 803288c:	681b      	ldr	r3, [r3, #0]
 803288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8032892:	2b00      	cmp	r3, #0
 8032894:	d029      	beq.n	80328ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8032896:	687b      	ldr	r3, [r7, #4]
 8032898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 803289a:	2b00      	cmp	r3, #0
 803289c:	d003      	beq.n	80328a6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 803289e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80328a2:	d007      	beq.n	80328b4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80328a4:	e00f      	b.n	80328c6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80328a6:	4b34      	ldr	r3, [pc, #208]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80328aa:	4a33      	ldr	r2, [pc, #204]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80328b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80328b2:	e00b      	b.n	80328cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80328b4:	687b      	ldr	r3, [r7, #4]
 80328b6:	3304      	adds	r3, #4
 80328b8:	2102      	movs	r1, #2
 80328ba:	4618      	mov	r0, r3
 80328bc:	f000 fb8a 	bl	8032fd4 <RCCEx_PLL2_Config>
 80328c0:	4603      	mov	r3, r0
 80328c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80328c4:	e002      	b.n	80328cc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80328c6:	2301      	movs	r3, #1
 80328c8:	75fb      	strb	r3, [r7, #23]
      break;
 80328ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80328cc:	7dfb      	ldrb	r3, [r7, #23]
 80328ce:	2b00      	cmp	r3, #0
 80328d0:	d109      	bne.n	80328e6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80328d2:	4b29      	ldr	r3, [pc, #164]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80328d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80328da:	687b      	ldr	r3, [r7, #4]
 80328dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80328de:	4926      	ldr	r1, [pc, #152]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80328e0:	4313      	orrs	r3, r2
 80328e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80328e4:	e001      	b.n	80328ea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80328e6:	7dfb      	ldrb	r3, [r7, #23]
 80328e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80328ea:	687b      	ldr	r3, [r7, #4]
 80328ec:	681b      	ldr	r3, [r3, #0]
 80328ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80328f2:	2b00      	cmp	r3, #0
 80328f4:	d00a      	beq.n	803290c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80328f6:	687b      	ldr	r3, [r7, #4]
 80328f8:	3324      	adds	r3, #36	; 0x24
 80328fa:	2102      	movs	r1, #2
 80328fc:	4618      	mov	r0, r3
 80328fe:	f000 fc1b 	bl	8033138 <RCCEx_PLL3_Config>
 8032902:	4603      	mov	r3, r0
 8032904:	2b00      	cmp	r3, #0
 8032906:	d001      	beq.n	803290c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8032908:	2301      	movs	r3, #1
 803290a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 803290c:	687b      	ldr	r3, [r7, #4]
 803290e:	681b      	ldr	r3, [r3, #0]
 8032910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032914:	2b00      	cmp	r3, #0
 8032916:	d033      	beq.n	8032980 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8032918:	687b      	ldr	r3, [r7, #4]
 803291a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803291c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032920:	d017      	beq.n	8032952 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8032922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8032926:	d811      	bhi.n	803294c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8032928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803292c:	d013      	beq.n	8032956 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 803292e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8032932:	d80b      	bhi.n	803294c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8032934:	2b00      	cmp	r3, #0
 8032936:	d010      	beq.n	803295a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8032938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803293c:	d106      	bne.n	803294c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 803293e:	4b0e      	ldr	r3, [pc, #56]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032942:	4a0d      	ldr	r2, [pc, #52]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032948:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 803294a:	e007      	b.n	803295c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 803294c:	2301      	movs	r3, #1
 803294e:	75fb      	strb	r3, [r7, #23]
      break;
 8032950:	e004      	b.n	803295c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032952:	bf00      	nop
 8032954:	e002      	b.n	803295c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8032956:	bf00      	nop
 8032958:	e000      	b.n	803295c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 803295a:	bf00      	nop
    }

    if(ret == HAL_OK)
 803295c:	7dfb      	ldrb	r3, [r7, #23]
 803295e:	2b00      	cmp	r3, #0
 8032960:	d10c      	bne.n	803297c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8032962:	4b05      	ldr	r3, [pc, #20]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032966:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 803296a:	687b      	ldr	r3, [r7, #4]
 803296c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803296e:	4902      	ldr	r1, [pc, #8]	; (8032978 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8032970:	4313      	orrs	r3, r2
 8032972:	654b      	str	r3, [r1, #84]	; 0x54
 8032974:	e004      	b.n	8032980 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8032976:	bf00      	nop
 8032978:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 803297c:	7dfb      	ldrb	r3, [r7, #23]
 803297e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8032980:	687b      	ldr	r3, [r7, #4]
 8032982:	681b      	ldr	r3, [r3, #0]
 8032984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8032988:	2b00      	cmp	r3, #0
 803298a:	d008      	beq.n	803299e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 803298c:	4b31      	ldr	r3, [pc, #196]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032990:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8032994:	687b      	ldr	r3, [r7, #4]
 8032996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8032998:	492e      	ldr	r1, [pc, #184]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 803299a:	4313      	orrs	r3, r2
 803299c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 803299e:	687b      	ldr	r3, [r7, #4]
 80329a0:	681b      	ldr	r3, [r3, #0]
 80329a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80329a6:	2b00      	cmp	r3, #0
 80329a8:	d009      	beq.n	80329be <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80329aa:	4b2a      	ldr	r3, [pc, #168]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329ac:	691b      	ldr	r3, [r3, #16]
 80329ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80329b2:	687b      	ldr	r3, [r7, #4]
 80329b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80329b8:	4926      	ldr	r1, [pc, #152]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329ba:	4313      	orrs	r3, r2
 80329bc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80329be:	687b      	ldr	r3, [r7, #4]
 80329c0:	681b      	ldr	r3, [r3, #0]
 80329c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80329c6:	2b00      	cmp	r3, #0
 80329c8:	d008      	beq.n	80329dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80329ca:	4b22      	ldr	r3, [pc, #136]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80329ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80329d2:	687b      	ldr	r3, [r7, #4]
 80329d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80329d6:	491f      	ldr	r1, [pc, #124]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329d8:	4313      	orrs	r3, r2
 80329da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80329dc:	687b      	ldr	r3, [r7, #4]
 80329de:	681b      	ldr	r3, [r3, #0]
 80329e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80329e4:	2b00      	cmp	r3, #0
 80329e6:	d00d      	beq.n	8032a04 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80329e8:	4b1a      	ldr	r3, [pc, #104]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329ea:	691b      	ldr	r3, [r3, #16]
 80329ec:	4a19      	ldr	r2, [pc, #100]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80329f2:	6113      	str	r3, [r2, #16]
 80329f4:	4b17      	ldr	r3, [pc, #92]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80329f6:	691a      	ldr	r2, [r3, #16]
 80329f8:	687b      	ldr	r3, [r7, #4]
 80329fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80329fe:	4915      	ldr	r1, [pc, #84]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a00:	4313      	orrs	r3, r2
 8032a02:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8032a04:	687b      	ldr	r3, [r7, #4]
 8032a06:	681b      	ldr	r3, [r3, #0]
 8032a08:	2b00      	cmp	r3, #0
 8032a0a:	da08      	bge.n	8032a1e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8032a0c:	4b11      	ldr	r3, [pc, #68]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8032a10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8032a14:	687b      	ldr	r3, [r7, #4]
 8032a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8032a18:	490e      	ldr	r1, [pc, #56]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a1a:	4313      	orrs	r3, r2
 8032a1c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8032a1e:	687b      	ldr	r3, [r7, #4]
 8032a20:	681b      	ldr	r3, [r3, #0]
 8032a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8032a26:	2b00      	cmp	r3, #0
 8032a28:	d009      	beq.n	8032a3e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8032a2a:	4b0a      	ldr	r3, [pc, #40]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8032a2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8032a32:	687b      	ldr	r3, [r7, #4]
 8032a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8032a38:	4906      	ldr	r1, [pc, #24]	; (8032a54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8032a3a:	4313      	orrs	r3, r2
 8032a3c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8032a3e:	7dbb      	ldrb	r3, [r7, #22]
 8032a40:	2b00      	cmp	r3, #0
 8032a42:	d101      	bne.n	8032a48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8032a44:	2300      	movs	r3, #0
 8032a46:	e000      	b.n	8032a4a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8032a48:	2301      	movs	r3, #1
}
 8032a4a:	4618      	mov	r0, r3
 8032a4c:	3718      	adds	r7, #24
 8032a4e:	46bd      	mov	sp, r7
 8032a50:	bd80      	pop	{r7, pc}
 8032a52:	bf00      	nop
 8032a54:	58024400 	.word	0x58024400

08032a58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8032a58:	b580      	push	{r7, lr}
 8032a5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8032a5c:	f7ff f85a 	bl	8031b14 <HAL_RCC_GetHCLKFreq>
 8032a60:	4602      	mov	r2, r0
 8032a62:	4b06      	ldr	r3, [pc, #24]	; (8032a7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8032a64:	6a1b      	ldr	r3, [r3, #32]
 8032a66:	091b      	lsrs	r3, r3, #4
 8032a68:	f003 0307 	and.w	r3, r3, #7
 8032a6c:	4904      	ldr	r1, [pc, #16]	; (8032a80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8032a6e:	5ccb      	ldrb	r3, [r1, r3]
 8032a70:	f003 031f 	and.w	r3, r3, #31
 8032a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8032a78:	4618      	mov	r0, r3
 8032a7a:	bd80      	pop	{r7, pc}
 8032a7c:	58024400 	.word	0x58024400
 8032a80:	08058518 	.word	0x08058518

08032a84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8032a84:	b480      	push	{r7}
 8032a86:	b089      	sub	sp, #36	; 0x24
 8032a88:	af00      	add	r7, sp, #0
 8032a8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032a8c:	4ba1      	ldr	r3, [pc, #644]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032a90:	f003 0303 	and.w	r3, r3, #3
 8032a94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8032a96:	4b9f      	ldr	r3, [pc, #636]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032a9a:	0b1b      	lsrs	r3, r3, #12
 8032a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032aa0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8032aa2:	4b9c      	ldr	r3, [pc, #624]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032aa6:	091b      	lsrs	r3, r3, #4
 8032aa8:	f003 0301 	and.w	r3, r3, #1
 8032aac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8032aae:	4b99      	ldr	r3, [pc, #612]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8032ab2:	08db      	lsrs	r3, r3, #3
 8032ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032ab8:	693a      	ldr	r2, [r7, #16]
 8032aba:	fb02 f303 	mul.w	r3, r2, r3
 8032abe:	ee07 3a90 	vmov	s15, r3
 8032ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ac6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8032aca:	697b      	ldr	r3, [r7, #20]
 8032acc:	2b00      	cmp	r3, #0
 8032ace:	f000 8111 	beq.w	8032cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8032ad2:	69bb      	ldr	r3, [r7, #24]
 8032ad4:	2b02      	cmp	r3, #2
 8032ad6:	f000 8083 	beq.w	8032be0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8032ada:	69bb      	ldr	r3, [r7, #24]
 8032adc:	2b02      	cmp	r3, #2
 8032ade:	f200 80a1 	bhi.w	8032c24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8032ae2:	69bb      	ldr	r3, [r7, #24]
 8032ae4:	2b00      	cmp	r3, #0
 8032ae6:	d003      	beq.n	8032af0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8032ae8:	69bb      	ldr	r3, [r7, #24]
 8032aea:	2b01      	cmp	r3, #1
 8032aec:	d056      	beq.n	8032b9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8032aee:	e099      	b.n	8032c24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032af0:	4b88      	ldr	r3, [pc, #544]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032af2:	681b      	ldr	r3, [r3, #0]
 8032af4:	f003 0320 	and.w	r3, r3, #32
 8032af8:	2b00      	cmp	r3, #0
 8032afa:	d02d      	beq.n	8032b58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032afc:	4b85      	ldr	r3, [pc, #532]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032afe:	681b      	ldr	r3, [r3, #0]
 8032b00:	08db      	lsrs	r3, r3, #3
 8032b02:	f003 0303 	and.w	r3, r3, #3
 8032b06:	4a84      	ldr	r2, [pc, #528]	; (8032d18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8032b08:	fa22 f303 	lsr.w	r3, r2, r3
 8032b0c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b0e:	68bb      	ldr	r3, [r7, #8]
 8032b10:	ee07 3a90 	vmov	s15, r3
 8032b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b18:	697b      	ldr	r3, [r7, #20]
 8032b1a:	ee07 3a90 	vmov	s15, r3
 8032b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032b26:	4b7b      	ldr	r3, [pc, #492]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032b2e:	ee07 3a90 	vmov	s15, r3
 8032b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8032b3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032b56:	e087      	b.n	8032c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b58:	697b      	ldr	r3, [r7, #20]
 8032b5a:	ee07 3a90 	vmov	s15, r3
 8032b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032b62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032d20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8032b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032b6a:	4b6a      	ldr	r3, [pc, #424]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032b72:	ee07 3a90 	vmov	s15, r3
 8032b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8032b7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032b96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032b9a:	e065      	b.n	8032c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032b9c:	697b      	ldr	r3, [r7, #20]
 8032b9e:	ee07 3a90 	vmov	s15, r3
 8032ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ba6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032bae:	4b59      	ldr	r3, [pc, #356]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032bb6:	ee07 3a90 	vmov	s15, r3
 8032bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8032bc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032bda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032bde:	e043      	b.n	8032c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032be0:	697b      	ldr	r3, [r7, #20]
 8032be2:	ee07 3a90 	vmov	s15, r3
 8032be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032bea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8032bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032bf2:	4b48      	ldr	r3, [pc, #288]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032bfa:	ee07 3a90 	vmov	s15, r3
 8032bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8032c06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032c1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032c22:	e021      	b.n	8032c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8032c24:	697b      	ldr	r3, [r7, #20]
 8032c26:	ee07 3a90 	vmov	s15, r3
 8032c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8032c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032c36:	4b37      	ldr	r3, [pc, #220]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032c3e:	ee07 3a90 	vmov	s15, r3
 8032c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8032c4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8032c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032c62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032c66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8032c68:	4b2a      	ldr	r3, [pc, #168]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c6c:	0a5b      	lsrs	r3, r3, #9
 8032c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032c72:	ee07 3a90 	vmov	s15, r3
 8032c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032c7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8032c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032c8e:	ee17 2a90 	vmov	r2, s15
 8032c92:	687b      	ldr	r3, [r7, #4]
 8032c94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8032c96:	4b1f      	ldr	r3, [pc, #124]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032c9a:	0c1b      	lsrs	r3, r3, #16
 8032c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032ca0:	ee07 3a90 	vmov	s15, r3
 8032ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ca8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032cac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8032cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032cbc:	ee17 2a90 	vmov	r2, s15
 8032cc0:	687b      	ldr	r3, [r7, #4]
 8032cc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8032cc4:	4b13      	ldr	r3, [pc, #76]	; (8032d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8032cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8032cc8:	0e1b      	lsrs	r3, r3, #24
 8032cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032cce:	ee07 3a90 	vmov	s15, r3
 8032cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032cd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8032ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032cea:	ee17 2a90 	vmov	r2, s15
 8032cee:	687b      	ldr	r3, [r7, #4]
 8032cf0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8032cf2:	e008      	b.n	8032d06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8032cf4:	687b      	ldr	r3, [r7, #4]
 8032cf6:	2200      	movs	r2, #0
 8032cf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8032cfa:	687b      	ldr	r3, [r7, #4]
 8032cfc:	2200      	movs	r2, #0
 8032cfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8032d00:	687b      	ldr	r3, [r7, #4]
 8032d02:	2200      	movs	r2, #0
 8032d04:	609a      	str	r2, [r3, #8]
}
 8032d06:	bf00      	nop
 8032d08:	3724      	adds	r7, #36	; 0x24
 8032d0a:	46bd      	mov	sp, r7
 8032d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d10:	4770      	bx	lr
 8032d12:	bf00      	nop
 8032d14:	58024400 	.word	0x58024400
 8032d18:	03d09000 	.word	0x03d09000
 8032d1c:	46000000 	.word	0x46000000
 8032d20:	4c742400 	.word	0x4c742400
 8032d24:	4a742400 	.word	0x4a742400
 8032d28:	4bbebc20 	.word	0x4bbebc20

08032d2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8032d2c:	b480      	push	{r7}
 8032d2e:	b089      	sub	sp, #36	; 0x24
 8032d30:	af00      	add	r7, sp, #0
 8032d32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8032d34:	4ba1      	ldr	r3, [pc, #644]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032d38:	f003 0303 	and.w	r3, r3, #3
 8032d3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8032d3e:	4b9f      	ldr	r3, [pc, #636]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032d42:	0d1b      	lsrs	r3, r3, #20
 8032d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032d48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8032d4a:	4b9c      	ldr	r3, [pc, #624]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032d4e:	0a1b      	lsrs	r3, r3, #8
 8032d50:	f003 0301 	and.w	r3, r3, #1
 8032d54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8032d56:	4b99      	ldr	r3, [pc, #612]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032d5a:	08db      	lsrs	r3, r3, #3
 8032d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8032d60:	693a      	ldr	r2, [r7, #16]
 8032d62:	fb02 f303 	mul.w	r3, r2, r3
 8032d66:	ee07 3a90 	vmov	s15, r3
 8032d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032d6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8032d72:	697b      	ldr	r3, [r7, #20]
 8032d74:	2b00      	cmp	r3, #0
 8032d76:	f000 8111 	beq.w	8032f9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8032d7a:	69bb      	ldr	r3, [r7, #24]
 8032d7c:	2b02      	cmp	r3, #2
 8032d7e:	f000 8083 	beq.w	8032e88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8032d82:	69bb      	ldr	r3, [r7, #24]
 8032d84:	2b02      	cmp	r3, #2
 8032d86:	f200 80a1 	bhi.w	8032ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8032d8a:	69bb      	ldr	r3, [r7, #24]
 8032d8c:	2b00      	cmp	r3, #0
 8032d8e:	d003      	beq.n	8032d98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8032d90:	69bb      	ldr	r3, [r7, #24]
 8032d92:	2b01      	cmp	r3, #1
 8032d94:	d056      	beq.n	8032e44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8032d96:	e099      	b.n	8032ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8032d98:	4b88      	ldr	r3, [pc, #544]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032d9a:	681b      	ldr	r3, [r3, #0]
 8032d9c:	f003 0320 	and.w	r3, r3, #32
 8032da0:	2b00      	cmp	r3, #0
 8032da2:	d02d      	beq.n	8032e00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8032da4:	4b85      	ldr	r3, [pc, #532]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032da6:	681b      	ldr	r3, [r3, #0]
 8032da8:	08db      	lsrs	r3, r3, #3
 8032daa:	f003 0303 	and.w	r3, r3, #3
 8032dae:	4a84      	ldr	r2, [pc, #528]	; (8032fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8032db0:	fa22 f303 	lsr.w	r3, r2, r3
 8032db4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032db6:	68bb      	ldr	r3, [r7, #8]
 8032db8:	ee07 3a90 	vmov	s15, r3
 8032dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032dc0:	697b      	ldr	r3, [r7, #20]
 8032dc2:	ee07 3a90 	vmov	s15, r3
 8032dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032dce:	4b7b      	ldr	r3, [pc, #492]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032dd6:	ee07 3a90 	vmov	s15, r3
 8032dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8032de2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8032fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032dfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8032dfe:	e087      	b.n	8032f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032e00:	697b      	ldr	r3, [r7, #20]
 8032e02:	ee07 3a90 	vmov	s15, r3
 8032e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8032fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8032e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e12:	4b6a      	ldr	r3, [pc, #424]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e1a:	ee07 3a90 	vmov	s15, r3
 8032e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8032e26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8032fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032e42:	e065      	b.n	8032f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032e44:	697b      	ldr	r3, [r7, #20]
 8032e46:	ee07 3a90 	vmov	s15, r3
 8032e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8032fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e56:	4b59      	ldr	r3, [pc, #356]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032e5e:	ee07 3a90 	vmov	s15, r3
 8032e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8032e6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8032fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032e82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032e86:	e043      	b.n	8032f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032e88:	697b      	ldr	r3, [r7, #20]
 8032e8a:	ee07 3a90 	vmov	s15, r3
 8032e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032e92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8032fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8032e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032e9a:	4b48      	ldr	r3, [pc, #288]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032ea2:	ee07 3a90 	vmov	s15, r3
 8032ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8032eae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8032fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032eca:	e021      	b.n	8032f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8032ecc:	697b      	ldr	r3, [r7, #20]
 8032ece:	ee07 3a90 	vmov	s15, r3
 8032ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032ed6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8032fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8032eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8032ede:	4b37      	ldr	r3, [pc, #220]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8032ee6:	ee07 3a90 	vmov	s15, r3
 8032eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8032eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8032ef2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8032fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8032ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8032efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8032efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8032f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8032f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8032f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8032f0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8032f10:	4b2a      	ldr	r3, [pc, #168]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f14:	0a5b      	lsrs	r3, r3, #9
 8032f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f1a:	ee07 3a90 	vmov	s15, r3
 8032f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8032f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f36:	ee17 2a90 	vmov	r2, s15
 8032f3a:	687b      	ldr	r3, [r7, #4]
 8032f3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8032f3e:	4b1f      	ldr	r3, [pc, #124]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f42:	0c1b      	lsrs	r3, r3, #16
 8032f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f48:	ee07 3a90 	vmov	s15, r3
 8032f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032f50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032f54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8032f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f64:	ee17 2a90 	vmov	r2, s15
 8032f68:	687b      	ldr	r3, [r7, #4]
 8032f6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8032f6c:	4b13      	ldr	r3, [pc, #76]	; (8032fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8032f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032f70:	0e1b      	lsrs	r3, r3, #24
 8032f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8032f76:	ee07 3a90 	vmov	s15, r3
 8032f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8032f7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8032f82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8032f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8032f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8032f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8032f92:	ee17 2a90 	vmov	r2, s15
 8032f96:	687b      	ldr	r3, [r7, #4]
 8032f98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8032f9a:	e008      	b.n	8032fae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8032f9c:	687b      	ldr	r3, [r7, #4]
 8032f9e:	2200      	movs	r2, #0
 8032fa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8032fa2:	687b      	ldr	r3, [r7, #4]
 8032fa4:	2200      	movs	r2, #0
 8032fa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8032fa8:	687b      	ldr	r3, [r7, #4]
 8032faa:	2200      	movs	r2, #0
 8032fac:	609a      	str	r2, [r3, #8]
}
 8032fae:	bf00      	nop
 8032fb0:	3724      	adds	r7, #36	; 0x24
 8032fb2:	46bd      	mov	sp, r7
 8032fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032fb8:	4770      	bx	lr
 8032fba:	bf00      	nop
 8032fbc:	58024400 	.word	0x58024400
 8032fc0:	03d09000 	.word	0x03d09000
 8032fc4:	46000000 	.word	0x46000000
 8032fc8:	4c742400 	.word	0x4c742400
 8032fcc:	4a742400 	.word	0x4a742400
 8032fd0:	4bbebc20 	.word	0x4bbebc20

08032fd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8032fd4:	b580      	push	{r7, lr}
 8032fd6:	b084      	sub	sp, #16
 8032fd8:	af00      	add	r7, sp, #0
 8032fda:	6078      	str	r0, [r7, #4]
 8032fdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8032fde:	2300      	movs	r3, #0
 8032fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8032fe2:	4b53      	ldr	r3, [pc, #332]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8032fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8032fe6:	f003 0303 	and.w	r3, r3, #3
 8032fea:	2b03      	cmp	r3, #3
 8032fec:	d101      	bne.n	8032ff2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8032fee:	2301      	movs	r3, #1
 8032ff0:	e099      	b.n	8033126 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8032ff2:	4b4f      	ldr	r3, [pc, #316]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8032ff4:	681b      	ldr	r3, [r3, #0]
 8032ff6:	4a4e      	ldr	r2, [pc, #312]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8032ff8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8032ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8032ffe:	f7f7 fe43 	bl	802ac88 <HAL_GetTick>
 8033002:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8033004:	e008      	b.n	8033018 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8033006:	f7f7 fe3f 	bl	802ac88 <HAL_GetTick>
 803300a:	4602      	mov	r2, r0
 803300c:	68bb      	ldr	r3, [r7, #8]
 803300e:	1ad3      	subs	r3, r2, r3
 8033010:	2b02      	cmp	r3, #2
 8033012:	d901      	bls.n	8033018 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8033014:	2303      	movs	r3, #3
 8033016:	e086      	b.n	8033126 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8033018:	4b45      	ldr	r3, [pc, #276]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 803301a:	681b      	ldr	r3, [r3, #0]
 803301c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8033020:	2b00      	cmp	r3, #0
 8033022:	d1f0      	bne.n	8033006 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8033024:	4b42      	ldr	r3, [pc, #264]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8033026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033028:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 803302c:	687b      	ldr	r3, [r7, #4]
 803302e:	681b      	ldr	r3, [r3, #0]
 8033030:	031b      	lsls	r3, r3, #12
 8033032:	493f      	ldr	r1, [pc, #252]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8033034:	4313      	orrs	r3, r2
 8033036:	628b      	str	r3, [r1, #40]	; 0x28
 8033038:	687b      	ldr	r3, [r7, #4]
 803303a:	685b      	ldr	r3, [r3, #4]
 803303c:	3b01      	subs	r3, #1
 803303e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8033042:	687b      	ldr	r3, [r7, #4]
 8033044:	689b      	ldr	r3, [r3, #8]
 8033046:	3b01      	subs	r3, #1
 8033048:	025b      	lsls	r3, r3, #9
 803304a:	b29b      	uxth	r3, r3
 803304c:	431a      	orrs	r2, r3
 803304e:	687b      	ldr	r3, [r7, #4]
 8033050:	68db      	ldr	r3, [r3, #12]
 8033052:	3b01      	subs	r3, #1
 8033054:	041b      	lsls	r3, r3, #16
 8033056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 803305a:	431a      	orrs	r2, r3
 803305c:	687b      	ldr	r3, [r7, #4]
 803305e:	691b      	ldr	r3, [r3, #16]
 8033060:	3b01      	subs	r3, #1
 8033062:	061b      	lsls	r3, r3, #24
 8033064:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8033068:	4931      	ldr	r1, [pc, #196]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 803306a:	4313      	orrs	r3, r2
 803306c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 803306e:	4b30      	ldr	r3, [pc, #192]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8033070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8033076:	687b      	ldr	r3, [r7, #4]
 8033078:	695b      	ldr	r3, [r3, #20]
 803307a:	492d      	ldr	r1, [pc, #180]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 803307c:	4313      	orrs	r3, r2
 803307e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8033080:	4b2b      	ldr	r3, [pc, #172]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8033082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033084:	f023 0220 	bic.w	r2, r3, #32
 8033088:	687b      	ldr	r3, [r7, #4]
 803308a:	699b      	ldr	r3, [r3, #24]
 803308c:	4928      	ldr	r1, [pc, #160]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 803308e:	4313      	orrs	r3, r2
 8033090:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8033092:	4b27      	ldr	r3, [pc, #156]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8033094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033096:	4a26      	ldr	r2, [pc, #152]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 8033098:	f023 0310 	bic.w	r3, r3, #16
 803309c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 803309e:	4b24      	ldr	r3, [pc, #144]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80330a2:	4b24      	ldr	r3, [pc, #144]	; (8033134 <RCCEx_PLL2_Config+0x160>)
 80330a4:	4013      	ands	r3, r2
 80330a6:	687a      	ldr	r2, [r7, #4]
 80330a8:	69d2      	ldr	r2, [r2, #28]
 80330aa:	00d2      	lsls	r2, r2, #3
 80330ac:	4920      	ldr	r1, [pc, #128]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330ae:	4313      	orrs	r3, r2
 80330b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80330b2:	4b1f      	ldr	r3, [pc, #124]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330b6:	4a1e      	ldr	r2, [pc, #120]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330b8:	f043 0310 	orr.w	r3, r3, #16
 80330bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80330be:	683b      	ldr	r3, [r7, #0]
 80330c0:	2b00      	cmp	r3, #0
 80330c2:	d106      	bne.n	80330d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80330c4:	4b1a      	ldr	r3, [pc, #104]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330c8:	4a19      	ldr	r2, [pc, #100]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80330ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80330d0:	e00f      	b.n	80330f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80330d2:	683b      	ldr	r3, [r7, #0]
 80330d4:	2b01      	cmp	r3, #1
 80330d6:	d106      	bne.n	80330e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80330d8:	4b15      	ldr	r3, [pc, #84]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330dc:	4a14      	ldr	r2, [pc, #80]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80330e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80330e4:	e005      	b.n	80330f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80330e6:	4b12      	ldr	r3, [pc, #72]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80330ea:	4a11      	ldr	r2, [pc, #68]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80330f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80330f2:	4b0f      	ldr	r3, [pc, #60]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330f4:	681b      	ldr	r3, [r3, #0]
 80330f6:	4a0e      	ldr	r2, [pc, #56]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 80330f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80330fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80330fe:	f7f7 fdc3 	bl	802ac88 <HAL_GetTick>
 8033102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8033104:	e008      	b.n	8033118 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8033106:	f7f7 fdbf 	bl	802ac88 <HAL_GetTick>
 803310a:	4602      	mov	r2, r0
 803310c:	68bb      	ldr	r3, [r7, #8]
 803310e:	1ad3      	subs	r3, r2, r3
 8033110:	2b02      	cmp	r3, #2
 8033112:	d901      	bls.n	8033118 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8033114:	2303      	movs	r3, #3
 8033116:	e006      	b.n	8033126 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8033118:	4b05      	ldr	r3, [pc, #20]	; (8033130 <RCCEx_PLL2_Config+0x15c>)
 803311a:	681b      	ldr	r3, [r3, #0]
 803311c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8033120:	2b00      	cmp	r3, #0
 8033122:	d0f0      	beq.n	8033106 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8033124:	7bfb      	ldrb	r3, [r7, #15]
}
 8033126:	4618      	mov	r0, r3
 8033128:	3710      	adds	r7, #16
 803312a:	46bd      	mov	sp, r7
 803312c:	bd80      	pop	{r7, pc}
 803312e:	bf00      	nop
 8033130:	58024400 	.word	0x58024400
 8033134:	ffff0007 	.word	0xffff0007

08033138 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8033138:	b580      	push	{r7, lr}
 803313a:	b084      	sub	sp, #16
 803313c:	af00      	add	r7, sp, #0
 803313e:	6078      	str	r0, [r7, #4]
 8033140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8033142:	2300      	movs	r3, #0
 8033144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8033146:	4b53      	ldr	r3, [pc, #332]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803314a:	f003 0303 	and.w	r3, r3, #3
 803314e:	2b03      	cmp	r3, #3
 8033150:	d101      	bne.n	8033156 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8033152:	2301      	movs	r3, #1
 8033154:	e099      	b.n	803328a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8033156:	4b4f      	ldr	r3, [pc, #316]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033158:	681b      	ldr	r3, [r3, #0]
 803315a:	4a4e      	ldr	r2, [pc, #312]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8033160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033162:	f7f7 fd91 	bl	802ac88 <HAL_GetTick>
 8033166:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8033168:	e008      	b.n	803317c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 803316a:	f7f7 fd8d 	bl	802ac88 <HAL_GetTick>
 803316e:	4602      	mov	r2, r0
 8033170:	68bb      	ldr	r3, [r7, #8]
 8033172:	1ad3      	subs	r3, r2, r3
 8033174:	2b02      	cmp	r3, #2
 8033176:	d901      	bls.n	803317c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8033178:	2303      	movs	r3, #3
 803317a:	e086      	b.n	803328a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 803317c:	4b45      	ldr	r3, [pc, #276]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803317e:	681b      	ldr	r3, [r3, #0]
 8033180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8033184:	2b00      	cmp	r3, #0
 8033186:	d1f0      	bne.n	803316a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8033188:	4b42      	ldr	r3, [pc, #264]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803318c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8033190:	687b      	ldr	r3, [r7, #4]
 8033192:	681b      	ldr	r3, [r3, #0]
 8033194:	051b      	lsls	r3, r3, #20
 8033196:	493f      	ldr	r1, [pc, #252]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033198:	4313      	orrs	r3, r2
 803319a:	628b      	str	r3, [r1, #40]	; 0x28
 803319c:	687b      	ldr	r3, [r7, #4]
 803319e:	685b      	ldr	r3, [r3, #4]
 80331a0:	3b01      	subs	r3, #1
 80331a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80331a6:	687b      	ldr	r3, [r7, #4]
 80331a8:	689b      	ldr	r3, [r3, #8]
 80331aa:	3b01      	subs	r3, #1
 80331ac:	025b      	lsls	r3, r3, #9
 80331ae:	b29b      	uxth	r3, r3
 80331b0:	431a      	orrs	r2, r3
 80331b2:	687b      	ldr	r3, [r7, #4]
 80331b4:	68db      	ldr	r3, [r3, #12]
 80331b6:	3b01      	subs	r3, #1
 80331b8:	041b      	lsls	r3, r3, #16
 80331ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80331be:	431a      	orrs	r2, r3
 80331c0:	687b      	ldr	r3, [r7, #4]
 80331c2:	691b      	ldr	r3, [r3, #16]
 80331c4:	3b01      	subs	r3, #1
 80331c6:	061b      	lsls	r3, r3, #24
 80331c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80331cc:	4931      	ldr	r1, [pc, #196]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 80331ce:	4313      	orrs	r3, r2
 80331d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80331d2:	4b30      	ldr	r3, [pc, #192]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 80331d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80331da:	687b      	ldr	r3, [r7, #4]
 80331dc:	695b      	ldr	r3, [r3, #20]
 80331de:	492d      	ldr	r1, [pc, #180]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 80331e0:	4313      	orrs	r3, r2
 80331e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80331e4:	4b2b      	ldr	r3, [pc, #172]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 80331e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80331ec:	687b      	ldr	r3, [r7, #4]
 80331ee:	699b      	ldr	r3, [r3, #24]
 80331f0:	4928      	ldr	r1, [pc, #160]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 80331f2:	4313      	orrs	r3, r2
 80331f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80331f6:	4b27      	ldr	r3, [pc, #156]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 80331f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331fa:	4a26      	ldr	r2, [pc, #152]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 80331fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8033200:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8033202:	4b24      	ldr	r3, [pc, #144]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8033206:	4b24      	ldr	r3, [pc, #144]	; (8033298 <RCCEx_PLL3_Config+0x160>)
 8033208:	4013      	ands	r3, r2
 803320a:	687a      	ldr	r2, [r7, #4]
 803320c:	69d2      	ldr	r2, [r2, #28]
 803320e:	00d2      	lsls	r2, r2, #3
 8033210:	4920      	ldr	r1, [pc, #128]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033212:	4313      	orrs	r3, r2
 8033214:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8033216:	4b1f      	ldr	r3, [pc, #124]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803321a:	4a1e      	ldr	r2, [pc, #120]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803321c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8033220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8033222:	683b      	ldr	r3, [r7, #0]
 8033224:	2b00      	cmp	r3, #0
 8033226:	d106      	bne.n	8033236 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8033228:	4b1a      	ldr	r3, [pc, #104]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803322c:	4a19      	ldr	r2, [pc, #100]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803322e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8033232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033234:	e00f      	b.n	8033256 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8033236:	683b      	ldr	r3, [r7, #0]
 8033238:	2b01      	cmp	r3, #1
 803323a:	d106      	bne.n	803324a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 803323c:	4b15      	ldr	r3, [pc, #84]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033240:	4a14      	ldr	r2, [pc, #80]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033242:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8033246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8033248:	e005      	b.n	8033256 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 803324a:	4b12      	ldr	r3, [pc, #72]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803324e:	4a11      	ldr	r2, [pc, #68]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8033254:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8033256:	4b0f      	ldr	r3, [pc, #60]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 8033258:	681b      	ldr	r3, [r3, #0]
 803325a:	4a0e      	ldr	r2, [pc, #56]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803325c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8033260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8033262:	f7f7 fd11 	bl	802ac88 <HAL_GetTick>
 8033266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8033268:	e008      	b.n	803327c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 803326a:	f7f7 fd0d 	bl	802ac88 <HAL_GetTick>
 803326e:	4602      	mov	r2, r0
 8033270:	68bb      	ldr	r3, [r7, #8]
 8033272:	1ad3      	subs	r3, r2, r3
 8033274:	2b02      	cmp	r3, #2
 8033276:	d901      	bls.n	803327c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8033278:	2303      	movs	r3, #3
 803327a:	e006      	b.n	803328a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 803327c:	4b05      	ldr	r3, [pc, #20]	; (8033294 <RCCEx_PLL3_Config+0x15c>)
 803327e:	681b      	ldr	r3, [r3, #0]
 8033280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8033284:	2b00      	cmp	r3, #0
 8033286:	d0f0      	beq.n	803326a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8033288:	7bfb      	ldrb	r3, [r7, #15]
}
 803328a:	4618      	mov	r0, r3
 803328c:	3710      	adds	r7, #16
 803328e:	46bd      	mov	sp, r7
 8033290:	bd80      	pop	{r7, pc}
 8033292:	bf00      	nop
 8033294:	58024400 	.word	0x58024400
 8033298:	ffff0007 	.word	0xffff0007

0803329c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 803329c:	b580      	push	{r7, lr}
 803329e:	b084      	sub	sp, #16
 80332a0:	af00      	add	r7, sp, #0
 80332a2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80332a4:	687b      	ldr	r3, [r7, #4]
 80332a6:	2b00      	cmp	r3, #0
 80332a8:	d101      	bne.n	80332ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80332aa:	2301      	movs	r3, #1
 80332ac:	e0f1      	b.n	8033492 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80332ae:	687b      	ldr	r3, [r7, #4]
 80332b0:	2200      	movs	r2, #0
 80332b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80332b4:	687b      	ldr	r3, [r7, #4]
 80332b6:	681b      	ldr	r3, [r3, #0]
 80332b8:	4a78      	ldr	r2, [pc, #480]	; (803349c <HAL_SPI_Init+0x200>)
 80332ba:	4293      	cmp	r3, r2
 80332bc:	d00f      	beq.n	80332de <HAL_SPI_Init+0x42>
 80332be:	687b      	ldr	r3, [r7, #4]
 80332c0:	681b      	ldr	r3, [r3, #0]
 80332c2:	4a77      	ldr	r2, [pc, #476]	; (80334a0 <HAL_SPI_Init+0x204>)
 80332c4:	4293      	cmp	r3, r2
 80332c6:	d00a      	beq.n	80332de <HAL_SPI_Init+0x42>
 80332c8:	687b      	ldr	r3, [r7, #4]
 80332ca:	681b      	ldr	r3, [r3, #0]
 80332cc:	4a75      	ldr	r2, [pc, #468]	; (80334a4 <HAL_SPI_Init+0x208>)
 80332ce:	4293      	cmp	r3, r2
 80332d0:	d005      	beq.n	80332de <HAL_SPI_Init+0x42>
 80332d2:	687b      	ldr	r3, [r7, #4]
 80332d4:	68db      	ldr	r3, [r3, #12]
 80332d6:	2b0f      	cmp	r3, #15
 80332d8:	d901      	bls.n	80332de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80332da:	2301      	movs	r3, #1
 80332dc:	e0d9      	b.n	8033492 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80332de:	6878      	ldr	r0, [r7, #4]
 80332e0:	f001 f8ee 	bl	80344c0 <SPI_GetPacketSize>
 80332e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80332e6:	687b      	ldr	r3, [r7, #4]
 80332e8:	681b      	ldr	r3, [r3, #0]
 80332ea:	4a6c      	ldr	r2, [pc, #432]	; (803349c <HAL_SPI_Init+0x200>)
 80332ec:	4293      	cmp	r3, r2
 80332ee:	d00c      	beq.n	803330a <HAL_SPI_Init+0x6e>
 80332f0:	687b      	ldr	r3, [r7, #4]
 80332f2:	681b      	ldr	r3, [r3, #0]
 80332f4:	4a6a      	ldr	r2, [pc, #424]	; (80334a0 <HAL_SPI_Init+0x204>)
 80332f6:	4293      	cmp	r3, r2
 80332f8:	d007      	beq.n	803330a <HAL_SPI_Init+0x6e>
 80332fa:	687b      	ldr	r3, [r7, #4]
 80332fc:	681b      	ldr	r3, [r3, #0]
 80332fe:	4a69      	ldr	r2, [pc, #420]	; (80334a4 <HAL_SPI_Init+0x208>)
 8033300:	4293      	cmp	r3, r2
 8033302:	d002      	beq.n	803330a <HAL_SPI_Init+0x6e>
 8033304:	68fb      	ldr	r3, [r7, #12]
 8033306:	2b08      	cmp	r3, #8
 8033308:	d811      	bhi.n	803332e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 803330a:	687b      	ldr	r3, [r7, #4]
 803330c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 803330e:	4a63      	ldr	r2, [pc, #396]	; (803349c <HAL_SPI_Init+0x200>)
 8033310:	4293      	cmp	r3, r2
 8033312:	d009      	beq.n	8033328 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8033314:	687b      	ldr	r3, [r7, #4]
 8033316:	681b      	ldr	r3, [r3, #0]
 8033318:	4a61      	ldr	r2, [pc, #388]	; (80334a0 <HAL_SPI_Init+0x204>)
 803331a:	4293      	cmp	r3, r2
 803331c:	d004      	beq.n	8033328 <HAL_SPI_Init+0x8c>
 803331e:	687b      	ldr	r3, [r7, #4]
 8033320:	681b      	ldr	r3, [r3, #0]
 8033322:	4a60      	ldr	r2, [pc, #384]	; (80334a4 <HAL_SPI_Init+0x208>)
 8033324:	4293      	cmp	r3, r2
 8033326:	d104      	bne.n	8033332 <HAL_SPI_Init+0x96>
 8033328:	68fb      	ldr	r3, [r7, #12]
 803332a:	2b10      	cmp	r3, #16
 803332c:	d901      	bls.n	8033332 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 803332e:	2301      	movs	r3, #1
 8033330:	e0af      	b.n	8033492 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8033332:	687b      	ldr	r3, [r7, #4]
 8033334:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033338:	b2db      	uxtb	r3, r3
 803333a:	2b00      	cmp	r3, #0
 803333c:	d106      	bne.n	803334c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 803333e:	687b      	ldr	r3, [r7, #4]
 8033340:	2200      	movs	r2, #0
 8033342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8033346:	6878      	ldr	r0, [r7, #4]
 8033348:	f7f6 fc46 	bl	8029bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 803334c:	687b      	ldr	r3, [r7, #4]
 803334e:	2202      	movs	r2, #2
 8033350:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8033354:	687b      	ldr	r3, [r7, #4]
 8033356:	681b      	ldr	r3, [r3, #0]
 8033358:	681a      	ldr	r2, [r3, #0]
 803335a:	687b      	ldr	r3, [r7, #4]
 803335c:	681b      	ldr	r3, [r3, #0]
 803335e:	f022 0201 	bic.w	r2, r2, #1
 8033362:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8033364:	687b      	ldr	r3, [r7, #4]
 8033366:	681b      	ldr	r3, [r3, #0]
 8033368:	689b      	ldr	r3, [r3, #8]
 803336a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 803336e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8033370:	687b      	ldr	r3, [r7, #4]
 8033372:	699b      	ldr	r3, [r3, #24]
 8033374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8033378:	d119      	bne.n	80333ae <HAL_SPI_Init+0x112>
 803337a:	687b      	ldr	r3, [r7, #4]
 803337c:	685b      	ldr	r3, [r3, #4]
 803337e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033382:	d103      	bne.n	803338c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8033384:	687b      	ldr	r3, [r7, #4]
 8033386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8033388:	2b00      	cmp	r3, #0
 803338a:	d008      	beq.n	803339e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 803338c:	687b      	ldr	r3, [r7, #4]
 803338e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8033390:	2b00      	cmp	r3, #0
 8033392:	d10c      	bne.n	80333ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8033394:	687b      	ldr	r3, [r7, #4]
 8033396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8033398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803339c:	d107      	bne.n	80333ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 803339e:	687b      	ldr	r3, [r7, #4]
 80333a0:	681b      	ldr	r3, [r3, #0]
 80333a2:	681a      	ldr	r2, [r3, #0]
 80333a4:	687b      	ldr	r3, [r7, #4]
 80333a6:	681b      	ldr	r3, [r3, #0]
 80333a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80333ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80333ae:	687b      	ldr	r3, [r7, #4]
 80333b0:	69da      	ldr	r2, [r3, #28]
 80333b2:	687b      	ldr	r3, [r7, #4]
 80333b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80333b6:	431a      	orrs	r2, r3
 80333b8:	68bb      	ldr	r3, [r7, #8]
 80333ba:	431a      	orrs	r2, r3
 80333bc:	687b      	ldr	r3, [r7, #4]
 80333be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80333c0:	ea42 0103 	orr.w	r1, r2, r3
 80333c4:	687b      	ldr	r3, [r7, #4]
 80333c6:	68da      	ldr	r2, [r3, #12]
 80333c8:	687b      	ldr	r3, [r7, #4]
 80333ca:	681b      	ldr	r3, [r3, #0]
 80333cc:	430a      	orrs	r2, r1
 80333ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80333d0:	687b      	ldr	r3, [r7, #4]
 80333d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80333d4:	687b      	ldr	r3, [r7, #4]
 80333d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80333d8:	431a      	orrs	r2, r3
 80333da:	687b      	ldr	r3, [r7, #4]
 80333dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80333de:	431a      	orrs	r2, r3
 80333e0:	687b      	ldr	r3, [r7, #4]
 80333e2:	699b      	ldr	r3, [r3, #24]
 80333e4:	431a      	orrs	r2, r3
 80333e6:	687b      	ldr	r3, [r7, #4]
 80333e8:	691b      	ldr	r3, [r3, #16]
 80333ea:	431a      	orrs	r2, r3
 80333ec:	687b      	ldr	r3, [r7, #4]
 80333ee:	695b      	ldr	r3, [r3, #20]
 80333f0:	431a      	orrs	r2, r3
 80333f2:	687b      	ldr	r3, [r7, #4]
 80333f4:	6a1b      	ldr	r3, [r3, #32]
 80333f6:	431a      	orrs	r2, r3
 80333f8:	687b      	ldr	r3, [r7, #4]
 80333fa:	685b      	ldr	r3, [r3, #4]
 80333fc:	431a      	orrs	r2, r3
 80333fe:	687b      	ldr	r3, [r7, #4]
 8033400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8033402:	431a      	orrs	r2, r3
 8033404:	687b      	ldr	r3, [r7, #4]
 8033406:	689b      	ldr	r3, [r3, #8]
 8033408:	431a      	orrs	r2, r3
 803340a:	687b      	ldr	r3, [r7, #4]
 803340c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803340e:	ea42 0103 	orr.w	r1, r2, r3
 8033412:	687b      	ldr	r3, [r7, #4]
 8033414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8033416:	687b      	ldr	r3, [r7, #4]
 8033418:	681b      	ldr	r3, [r3, #0]
 803341a:	430a      	orrs	r2, r1
 803341c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 803341e:	687b      	ldr	r3, [r7, #4]
 8033420:	685b      	ldr	r3, [r3, #4]
 8033422:	2b00      	cmp	r3, #0
 8033424:	d113      	bne.n	803344e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8033426:	687b      	ldr	r3, [r7, #4]
 8033428:	681b      	ldr	r3, [r3, #0]
 803342a:	689b      	ldr	r3, [r3, #8]
 803342c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8033430:	687b      	ldr	r3, [r7, #4]
 8033432:	681b      	ldr	r3, [r3, #0]
 8033434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033438:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 803343a:	687b      	ldr	r3, [r7, #4]
 803343c:	681b      	ldr	r3, [r3, #0]
 803343e:	689b      	ldr	r3, [r3, #8]
 8033440:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8033444:	687b      	ldr	r3, [r7, #4]
 8033446:	681b      	ldr	r3, [r3, #0]
 8033448:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 803344c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 803344e:	687b      	ldr	r3, [r7, #4]
 8033450:	681b      	ldr	r3, [r3, #0]
 8033452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8033454:	687b      	ldr	r3, [r7, #4]
 8033456:	681b      	ldr	r3, [r3, #0]
 8033458:	f022 0201 	bic.w	r2, r2, #1
 803345c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 803345e:	687b      	ldr	r3, [r7, #4]
 8033460:	685b      	ldr	r3, [r3, #4]
 8033462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8033466:	2b00      	cmp	r3, #0
 8033468:	d00a      	beq.n	8033480 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 803346a:	687b      	ldr	r3, [r7, #4]
 803346c:	681b      	ldr	r3, [r3, #0]
 803346e:	68db      	ldr	r3, [r3, #12]
 8033470:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8033474:	687b      	ldr	r3, [r7, #4]
 8033476:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8033478:	687b      	ldr	r3, [r7, #4]
 803347a:	681b      	ldr	r3, [r3, #0]
 803347c:	430a      	orrs	r2, r1
 803347e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8033480:	687b      	ldr	r3, [r7, #4]
 8033482:	2200      	movs	r2, #0
 8033484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8033488:	687b      	ldr	r3, [r7, #4]
 803348a:	2201      	movs	r2, #1
 803348c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8033490:	2300      	movs	r3, #0
}
 8033492:	4618      	mov	r0, r3
 8033494:	3710      	adds	r7, #16
 8033496:	46bd      	mov	sp, r7
 8033498:	bd80      	pop	{r7, pc}
 803349a:	bf00      	nop
 803349c:	40013000 	.word	0x40013000
 80334a0:	40003800 	.word	0x40003800
 80334a4:	40003c00 	.word	0x40003c00

080334a8 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80334a8:	b580      	push	{r7, lr}
 80334aa:	b086      	sub	sp, #24
 80334ac:	af00      	add	r7, sp, #0
 80334ae:	60f8      	str	r0, [r7, #12]
 80334b0:	60b9      	str	r1, [r7, #8]
 80334b2:	4613      	mov	r3, r2
 80334b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80334b6:	2300      	movs	r3, #0
 80334b8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80334ba:	68fb      	ldr	r3, [r7, #12]
 80334bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80334c0:	2b01      	cmp	r3, #1
 80334c2:	d101      	bne.n	80334c8 <HAL_SPI_Transmit_DMA+0x20>
 80334c4:	2302      	movs	r3, #2
 80334c6:	e12c      	b.n	8033722 <HAL_SPI_Transmit_DMA+0x27a>
 80334c8:	68fb      	ldr	r3, [r7, #12]
 80334ca:	2201      	movs	r2, #1
 80334cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 80334d0:	68fb      	ldr	r3, [r7, #12]
 80334d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80334d6:	b2db      	uxtb	r3, r3
 80334d8:	2b01      	cmp	r3, #1
 80334da:	d007      	beq.n	80334ec <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 80334dc:	2302      	movs	r3, #2
 80334de:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80334e0:	68fb      	ldr	r3, [r7, #12]
 80334e2:	2200      	movs	r2, #0
 80334e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80334e8:	7dfb      	ldrb	r3, [r7, #23]
 80334ea:	e11a      	b.n	8033722 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80334ec:	68bb      	ldr	r3, [r7, #8]
 80334ee:	2b00      	cmp	r3, #0
 80334f0:	d002      	beq.n	80334f8 <HAL_SPI_Transmit_DMA+0x50>
 80334f2:	88fb      	ldrh	r3, [r7, #6]
 80334f4:	2b00      	cmp	r3, #0
 80334f6:	d107      	bne.n	8033508 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80334f8:	2301      	movs	r3, #1
 80334fa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80334fc:	68fb      	ldr	r3, [r7, #12]
 80334fe:	2200      	movs	r2, #0
 8033500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033504:	7dfb      	ldrb	r3, [r7, #23]
 8033506:	e10c      	b.n	8033722 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8033508:	68fb      	ldr	r3, [r7, #12]
 803350a:	2203      	movs	r2, #3
 803350c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8033510:	68fb      	ldr	r3, [r7, #12]
 8033512:	2200      	movs	r2, #0
 8033514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8033518:	68fb      	ldr	r3, [r7, #12]
 803351a:	68ba      	ldr	r2, [r7, #8]
 803351c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 803351e:	68fb      	ldr	r3, [r7, #12]
 8033520:	88fa      	ldrh	r2, [r7, #6]
 8033522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8033526:	68fb      	ldr	r3, [r7, #12]
 8033528:	88fa      	ldrh	r2, [r7, #6]
 803352a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 803352e:	68fb      	ldr	r3, [r7, #12]
 8033530:	2200      	movs	r2, #0
 8033532:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 8033534:	68fb      	ldr	r3, [r7, #12]
 8033536:	2200      	movs	r2, #0
 8033538:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 803353a:	68fb      	ldr	r3, [r7, #12]
 803353c:	2200      	movs	r2, #0
 803353e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8033540:	68fb      	ldr	r3, [r7, #12]
 8033542:	2200      	movs	r2, #0
 8033544:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8033548:	68fb      	ldr	r3, [r7, #12]
 803354a:	2200      	movs	r2, #0
 803354c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8033550:	68fb      	ldr	r3, [r7, #12]
 8033552:	689b      	ldr	r3, [r3, #8]
 8033554:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8033558:	d107      	bne.n	803356a <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 803355a:	68fb      	ldr	r3, [r7, #12]
 803355c:	681b      	ldr	r3, [r3, #0]
 803355e:	681a      	ldr	r2, [r3, #0]
 8033560:	68fb      	ldr	r3, [r7, #12]
 8033562:	681b      	ldr	r3, [r3, #0]
 8033564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033568:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803356a:	68fb      	ldr	r3, [r7, #12]
 803356c:	68db      	ldr	r3, [r3, #12]
 803356e:	2b0f      	cmp	r3, #15
 8033570:	d905      	bls.n	803357e <HAL_SPI_Transmit_DMA+0xd6>
 8033572:	68fb      	ldr	r3, [r7, #12]
 8033574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033576:	699b      	ldr	r3, [r3, #24]
 8033578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803357c:	d10f      	bne.n	803359e <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803357e:	68fb      	ldr	r3, [r7, #12]
 8033580:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033582:	2b07      	cmp	r3, #7
 8033584:	d913      	bls.n	80335ae <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033586:	68fb      	ldr	r3, [r7, #12]
 8033588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803358a:	699b      	ldr	r3, [r3, #24]
 803358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033590:	d00d      	beq.n	80335ae <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8033592:	68fb      	ldr	r3, [r7, #12]
 8033594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033596:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803359c:	d007      	beq.n	80335ae <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 803359e:	2301      	movs	r3, #1
 80335a0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80335a2:	68fb      	ldr	r3, [r7, #12]
 80335a4:	2200      	movs	r2, #0
 80335a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80335aa:	7dfb      	ldrb	r3, [r7, #23]
 80335ac:	e0b9      	b.n	8033722 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80335ae:	68fb      	ldr	r3, [r7, #12]
 80335b0:	68db      	ldr	r3, [r3, #12]
 80335b2:	2b07      	cmp	r3, #7
 80335b4:	d820      	bhi.n	80335f8 <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80335b6:	68fb      	ldr	r3, [r7, #12]
 80335b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335ba:	699b      	ldr	r3, [r3, #24]
 80335bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80335c0:	d109      	bne.n	80335d6 <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80335c2:	68fb      	ldr	r3, [r7, #12]
 80335c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80335c8:	b29b      	uxth	r3, r3
 80335ca:	3301      	adds	r3, #1
 80335cc:	105b      	asrs	r3, r3, #1
 80335ce:	b29a      	uxth	r2, r3
 80335d0:	68fb      	ldr	r3, [r7, #12]
 80335d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80335d6:	68fb      	ldr	r3, [r7, #12]
 80335d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80335da:	699b      	ldr	r3, [r3, #24]
 80335dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80335e0:	d11e      	bne.n	8033620 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80335e2:	68fb      	ldr	r3, [r7, #12]
 80335e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80335e8:	b29b      	uxth	r3, r3
 80335ea:	3303      	adds	r3, #3
 80335ec:	109b      	asrs	r3, r3, #2
 80335ee:	b29a      	uxth	r2, r3
 80335f0:	68fb      	ldr	r3, [r7, #12]
 80335f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80335f6:	e013      	b.n	8033620 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80335f8:	68fb      	ldr	r3, [r7, #12]
 80335fa:	68db      	ldr	r3, [r3, #12]
 80335fc:	2b0f      	cmp	r3, #15
 80335fe:	d80f      	bhi.n	8033620 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033600:	68fb      	ldr	r3, [r7, #12]
 8033602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033604:	699b      	ldr	r3, [r3, #24]
 8033606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803360a:	d109      	bne.n	8033620 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 803360c:	68fb      	ldr	r3, [r7, #12]
 803360e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033612:	b29b      	uxth	r3, r3
 8033614:	3301      	adds	r3, #1
 8033616:	105b      	asrs	r3, r3, #1
 8033618:	b29a      	uxth	r2, r3
 803361a:	68fb      	ldr	r3, [r7, #12]
 803361c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8033620:	68fb      	ldr	r3, [r7, #12]
 8033622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033624:	4a41      	ldr	r2, [pc, #260]	; (803372c <HAL_SPI_Transmit_DMA+0x284>)
 8033626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8033628:	68fb      	ldr	r3, [r7, #12]
 803362a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803362c:	4a40      	ldr	r2, [pc, #256]	; (8033730 <HAL_SPI_Transmit_DMA+0x288>)
 803362e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8033630:	68fb      	ldr	r3, [r7, #12]
 8033632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033634:	4a3f      	ldr	r2, [pc, #252]	; (8033734 <HAL_SPI_Transmit_DMA+0x28c>)
 8033636:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8033638:	68fb      	ldr	r3, [r7, #12]
 803363a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803363c:	2200      	movs	r2, #0
 803363e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033640:	68fb      	ldr	r3, [r7, #12]
 8033642:	681b      	ldr	r3, [r3, #0]
 8033644:	689a      	ldr	r2, [r3, #8]
 8033646:	68fb      	ldr	r3, [r7, #12]
 8033648:	681b      	ldr	r3, [r3, #0]
 803364a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 803364e:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033650:	68fb      	ldr	r3, [r7, #12]
 8033652:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033654:	68fb      	ldr	r3, [r7, #12]
 8033656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033658:	4619      	mov	r1, r3
 803365a:	68fb      	ldr	r3, [r7, #12]
 803365c:	681b      	ldr	r3, [r3, #0]
 803365e:	3320      	adds	r3, #32
 8033660:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033662:	68fb      	ldr	r3, [r7, #12]
 8033664:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033668:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 803366a:	f7f8 fb65 	bl	802bd38 <HAL_DMA_Start_IT>
 803366e:	4603      	mov	r3, r0
 8033670:	2b00      	cmp	r3, #0
 8033672:	d013      	beq.n	803369c <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033674:	68fb      	ldr	r3, [r7, #12]
 8033676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803367a:	f043 0210 	orr.w	r2, r3, #16
 803367e:	68fb      	ldr	r3, [r7, #12]
 8033680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033684:	68fb      	ldr	r3, [r7, #12]
 8033686:	2200      	movs	r2, #0
 8033688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 803368c:	68fb      	ldr	r3, [r7, #12]
 803368e:	2201      	movs	r2, #1
 8033690:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033694:	2301      	movs	r3, #1
 8033696:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033698:	7dfb      	ldrb	r3, [r7, #23]
 803369a:	e042      	b.n	8033722 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 803369c:	68fb      	ldr	r3, [r7, #12]
 803369e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80336a0:	69db      	ldr	r3, [r3, #28]
 80336a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80336a6:	d108      	bne.n	80336ba <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80336a8:	68fb      	ldr	r3, [r7, #12]
 80336aa:	681b      	ldr	r3, [r3, #0]
 80336ac:	6859      	ldr	r1, [r3, #4]
 80336ae:	68fb      	ldr	r3, [r7, #12]
 80336b0:	681a      	ldr	r2, [r3, #0]
 80336b2:	4b21      	ldr	r3, [pc, #132]	; (8033738 <HAL_SPI_Transmit_DMA+0x290>)
 80336b4:	400b      	ands	r3, r1
 80336b6:	6053      	str	r3, [r2, #4]
 80336b8:	e009      	b.n	80336ce <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80336ba:	68fb      	ldr	r3, [r7, #12]
 80336bc:	681b      	ldr	r3, [r3, #0]
 80336be:	685a      	ldr	r2, [r3, #4]
 80336c0:	4b1d      	ldr	r3, [pc, #116]	; (8033738 <HAL_SPI_Transmit_DMA+0x290>)
 80336c2:	4013      	ands	r3, r2
 80336c4:	88f9      	ldrh	r1, [r7, #6]
 80336c6:	68fa      	ldr	r2, [r7, #12]
 80336c8:	6812      	ldr	r2, [r2, #0]
 80336ca:	430b      	orrs	r3, r1
 80336cc:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80336ce:	68fb      	ldr	r3, [r7, #12]
 80336d0:	681b      	ldr	r3, [r3, #0]
 80336d2:	689a      	ldr	r2, [r3, #8]
 80336d4:	68fb      	ldr	r3, [r7, #12]
 80336d6:	681b      	ldr	r3, [r3, #0]
 80336d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80336dc:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80336de:	68fb      	ldr	r3, [r7, #12]
 80336e0:	681b      	ldr	r3, [r3, #0]
 80336e2:	691a      	ldr	r2, [r3, #16]
 80336e4:	68fb      	ldr	r3, [r7, #12]
 80336e6:	681b      	ldr	r3, [r3, #0]
 80336e8:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80336ec:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80336ee:	68fb      	ldr	r3, [r7, #12]
 80336f0:	681b      	ldr	r3, [r3, #0]
 80336f2:	681a      	ldr	r2, [r3, #0]
 80336f4:	68fb      	ldr	r3, [r7, #12]
 80336f6:	681b      	ldr	r3, [r3, #0]
 80336f8:	f042 0201 	orr.w	r2, r2, #1
 80336fc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80336fe:	68fb      	ldr	r3, [r7, #12]
 8033700:	685b      	ldr	r3, [r3, #4]
 8033702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033706:	d107      	bne.n	8033718 <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8033708:	68fb      	ldr	r3, [r7, #12]
 803370a:	681b      	ldr	r3, [r3, #0]
 803370c:	681a      	ldr	r2, [r3, #0]
 803370e:	68fb      	ldr	r3, [r7, #12]
 8033710:	681b      	ldr	r3, [r3, #0]
 8033712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033716:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033718:	68fb      	ldr	r3, [r7, #12]
 803371a:	2200      	movs	r2, #0
 803371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033720:	7dfb      	ldrb	r3, [r7, #23]
}
 8033722:	4618      	mov	r0, r3
 8033724:	3718      	adds	r7, #24
 8033726:	46bd      	mov	sp, r7
 8033728:	bd80      	pop	{r7, pc}
 803372a:	bf00      	nop
 803372c:	080342b3 	.word	0x080342b3
 8033730:	080341e1 	.word	0x080341e1
 8033734:	08034307 	.word	0x08034307
 8033738:	ffff0000 	.word	0xffff0000

0803373c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 803373c:	b580      	push	{r7, lr}
 803373e:	b086      	sub	sp, #24
 8033740:	af00      	add	r7, sp, #0
 8033742:	60f8      	str	r0, [r7, #12]
 8033744:	60b9      	str	r1, [r7, #8]
 8033746:	4613      	mov	r3, r2
 8033748:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 803374a:	2300      	movs	r3, #0
 803374c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 803374e:	68fb      	ldr	r3, [r7, #12]
 8033750:	689b      	ldr	r3, [r3, #8]
 8033752:	2b00      	cmp	r3, #0
 8033754:	d110      	bne.n	8033778 <HAL_SPI_Receive_DMA+0x3c>
 8033756:	68fb      	ldr	r3, [r7, #12]
 8033758:	685b      	ldr	r3, [r3, #4]
 803375a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 803375e:	d10b      	bne.n	8033778 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8033760:	68fb      	ldr	r3, [r7, #12]
 8033762:	2204      	movs	r2, #4
 8033764:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8033768:	88fb      	ldrh	r3, [r7, #6]
 803376a:	68ba      	ldr	r2, [r7, #8]
 803376c:	68b9      	ldr	r1, [r7, #8]
 803376e:	68f8      	ldr	r0, [r7, #12]
 8033770:	f000 f940 	bl	80339f4 <HAL_SPI_TransmitReceive_DMA>
 8033774:	4603      	mov	r3, r0
 8033776:	e130      	b.n	80339da <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8033778:	68fb      	ldr	r3, [r7, #12]
 803377a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 803377e:	2b01      	cmp	r3, #1
 8033780:	d101      	bne.n	8033786 <HAL_SPI_Receive_DMA+0x4a>
 8033782:	2302      	movs	r3, #2
 8033784:	e129      	b.n	80339da <HAL_SPI_Receive_DMA+0x29e>
 8033786:	68fb      	ldr	r3, [r7, #12]
 8033788:	2201      	movs	r2, #1
 803378a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 803378e:	68fb      	ldr	r3, [r7, #12]
 8033790:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033794:	b2db      	uxtb	r3, r3
 8033796:	2b01      	cmp	r3, #1
 8033798:	d007      	beq.n	80337aa <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 803379a:	2302      	movs	r3, #2
 803379c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803379e:	68fb      	ldr	r3, [r7, #12]
 80337a0:	2200      	movs	r2, #0
 80337a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80337a6:	7dfb      	ldrb	r3, [r7, #23]
 80337a8:	e117      	b.n	80339da <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80337aa:	68bb      	ldr	r3, [r7, #8]
 80337ac:	2b00      	cmp	r3, #0
 80337ae:	d002      	beq.n	80337b6 <HAL_SPI_Receive_DMA+0x7a>
 80337b0:	88fb      	ldrh	r3, [r7, #6]
 80337b2:	2b00      	cmp	r3, #0
 80337b4:	d107      	bne.n	80337c6 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 80337b6:	2301      	movs	r3, #1
 80337b8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80337ba:	68fb      	ldr	r3, [r7, #12]
 80337bc:	2200      	movs	r2, #0
 80337be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80337c2:	7dfb      	ldrb	r3, [r7, #23]
 80337c4:	e109      	b.n	80339da <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80337c6:	68fb      	ldr	r3, [r7, #12]
 80337c8:	2204      	movs	r2, #4
 80337ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80337ce:	68fb      	ldr	r3, [r7, #12]
 80337d0:	2200      	movs	r2, #0
 80337d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80337d6:	68fb      	ldr	r3, [r7, #12]
 80337d8:	68ba      	ldr	r2, [r7, #8]
 80337da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80337dc:	68fb      	ldr	r3, [r7, #12]
 80337de:	88fa      	ldrh	r2, [r7, #6]
 80337e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80337e4:	68fb      	ldr	r3, [r7, #12]
 80337e6:	88fa      	ldrh	r2, [r7, #6]
 80337e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80337ec:	68fb      	ldr	r3, [r7, #12]
 80337ee:	2200      	movs	r2, #0
 80337f0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80337f2:	68fb      	ldr	r3, [r7, #12]
 80337f4:	2200      	movs	r2, #0
 80337f6:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80337f8:	68fb      	ldr	r3, [r7, #12]
 80337fa:	2200      	movs	r2, #0
 80337fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8033800:	68fb      	ldr	r3, [r7, #12]
 8033802:	2200      	movs	r2, #0
 8033804:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8033808:	68fb      	ldr	r3, [r7, #12]
 803380a:	689b      	ldr	r3, [r3, #8]
 803380c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8033810:	d107      	bne.n	8033822 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8033812:	68fb      	ldr	r3, [r7, #12]
 8033814:	681b      	ldr	r3, [r3, #0]
 8033816:	681a      	ldr	r2, [r3, #0]
 8033818:	68fb      	ldr	r3, [r7, #12]
 803381a:	681b      	ldr	r3, [r3, #0]
 803381c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8033820:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033822:	68fb      	ldr	r3, [r7, #12]
 8033824:	68db      	ldr	r3, [r3, #12]
 8033826:	2b0f      	cmp	r3, #15
 8033828:	d905      	bls.n	8033836 <HAL_SPI_Receive_DMA+0xfa>
 803382a:	68fb      	ldr	r3, [r7, #12]
 803382c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803382e:	699b      	ldr	r3, [r3, #24]
 8033830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033834:	d10f      	bne.n	8033856 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033836:	68fb      	ldr	r3, [r7, #12]
 8033838:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 803383a:	2b07      	cmp	r3, #7
 803383c:	d913      	bls.n	8033866 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 803383e:	68fb      	ldr	r3, [r7, #12]
 8033840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033842:	699b      	ldr	r3, [r3, #24]
 8033844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033848:	d00d      	beq.n	8033866 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 803384a:	68fb      	ldr	r3, [r7, #12]
 803384c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803384e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033854:	d007      	beq.n	8033866 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033856:	2301      	movs	r3, #1
 8033858:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 803385a:	68fb      	ldr	r3, [r7, #12]
 803385c:	2200      	movs	r2, #0
 803385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033862:	7dfb      	ldrb	r3, [r7, #23]
 8033864:	e0b9      	b.n	80339da <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033866:	68fb      	ldr	r3, [r7, #12]
 8033868:	681b      	ldr	r3, [r3, #0]
 803386a:	689a      	ldr	r2, [r3, #8]
 803386c:	68fb      	ldr	r3, [r7, #12]
 803386e:	681b      	ldr	r3, [r3, #0]
 8033870:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8033874:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8033876:	68fb      	ldr	r3, [r7, #12]
 8033878:	68db      	ldr	r3, [r3, #12]
 803387a:	2b07      	cmp	r3, #7
 803387c:	d820      	bhi.n	80338c0 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 803387e:	68fb      	ldr	r3, [r7, #12]
 8033880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033882:	699b      	ldr	r3, [r3, #24]
 8033884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033888:	d109      	bne.n	803389e <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 803388a:	68fb      	ldr	r3, [r7, #12]
 803388c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033890:	b29b      	uxth	r3, r3
 8033892:	3301      	adds	r3, #1
 8033894:	105b      	asrs	r3, r3, #1
 8033896:	b29a      	uxth	r2, r3
 8033898:	68fb      	ldr	r3, [r7, #12]
 803389a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 803389e:	68fb      	ldr	r3, [r7, #12]
 80338a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338a2:	699b      	ldr	r3, [r3, #24]
 80338a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80338a8:	d11e      	bne.n	80338e8 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80338aa:	68fb      	ldr	r3, [r7, #12]
 80338ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80338b0:	b29b      	uxth	r3, r3
 80338b2:	3303      	adds	r3, #3
 80338b4:	109b      	asrs	r3, r3, #2
 80338b6:	b29a      	uxth	r2, r3
 80338b8:	68fb      	ldr	r3, [r7, #12]
 80338ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80338be:	e013      	b.n	80338e8 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80338c0:	68fb      	ldr	r3, [r7, #12]
 80338c2:	68db      	ldr	r3, [r3, #12]
 80338c4:	2b0f      	cmp	r3, #15
 80338c6:	d80f      	bhi.n	80338e8 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80338c8:	68fb      	ldr	r3, [r7, #12]
 80338ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338cc:	699b      	ldr	r3, [r3, #24]
 80338ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80338d2:	d109      	bne.n	80338e8 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80338d4:	68fb      	ldr	r3, [r7, #12]
 80338d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80338da:	b29b      	uxth	r3, r3
 80338dc:	3301      	adds	r3, #1
 80338de:	105b      	asrs	r3, r3, #1
 80338e0:	b29a      	uxth	r2, r3
 80338e2:	68fb      	ldr	r3, [r7, #12]
 80338e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80338e8:	68fb      	ldr	r3, [r7, #12]
 80338ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338ec:	4a3d      	ldr	r2, [pc, #244]	; (80339e4 <HAL_SPI_Receive_DMA+0x2a8>)
 80338ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80338f0:	68fb      	ldr	r3, [r7, #12]
 80338f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338f4:	4a3c      	ldr	r2, [pc, #240]	; (80339e8 <HAL_SPI_Receive_DMA+0x2ac>)
 80338f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80338f8:	68fb      	ldr	r3, [r7, #12]
 80338fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80338fc:	4a3b      	ldr	r2, [pc, #236]	; (80339ec <HAL_SPI_Receive_DMA+0x2b0>)
 80338fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033900:	68fb      	ldr	r3, [r7, #12]
 8033902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033904:	2200      	movs	r2, #0
 8033906:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033908:	68fb      	ldr	r3, [r7, #12]
 803390a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 803390c:	68fb      	ldr	r3, [r7, #12]
 803390e:	681b      	ldr	r3, [r3, #0]
 8033910:	3330      	adds	r3, #48	; 0x30
 8033912:	4619      	mov	r1, r3
 8033914:	68fb      	ldr	r3, [r7, #12]
 8033916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033918:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 803391a:	68fb      	ldr	r3, [r7, #12]
 803391c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033920:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033922:	f7f8 fa09 	bl	802bd38 <HAL_DMA_Start_IT>
 8033926:	4603      	mov	r3, r0
 8033928:	2b00      	cmp	r3, #0
 803392a:	d013      	beq.n	8033954 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 803392c:	68fb      	ldr	r3, [r7, #12]
 803392e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033932:	f043 0210 	orr.w	r2, r3, #16
 8033936:	68fb      	ldr	r3, [r7, #12]
 8033938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 803393c:	68fb      	ldr	r3, [r7, #12]
 803393e:	2200      	movs	r2, #0
 8033940:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033944:	68fb      	ldr	r3, [r7, #12]
 8033946:	2201      	movs	r2, #1
 8033948:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 803394c:	2301      	movs	r3, #1
 803394e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033950:	7dfb      	ldrb	r3, [r7, #23]
 8033952:	e042      	b.n	80339da <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8033954:	68fb      	ldr	r3, [r7, #12]
 8033956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033958:	69db      	ldr	r3, [r3, #28]
 803395a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803395e:	d108      	bne.n	8033972 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033960:	68fb      	ldr	r3, [r7, #12]
 8033962:	681b      	ldr	r3, [r3, #0]
 8033964:	6859      	ldr	r1, [r3, #4]
 8033966:	68fb      	ldr	r3, [r7, #12]
 8033968:	681a      	ldr	r2, [r3, #0]
 803396a:	4b21      	ldr	r3, [pc, #132]	; (80339f0 <HAL_SPI_Receive_DMA+0x2b4>)
 803396c:	400b      	ands	r3, r1
 803396e:	6053      	str	r3, [r2, #4]
 8033970:	e009      	b.n	8033986 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033972:	68fb      	ldr	r3, [r7, #12]
 8033974:	681b      	ldr	r3, [r3, #0]
 8033976:	685a      	ldr	r2, [r3, #4]
 8033978:	4b1d      	ldr	r3, [pc, #116]	; (80339f0 <HAL_SPI_Receive_DMA+0x2b4>)
 803397a:	4013      	ands	r3, r2
 803397c:	88f9      	ldrh	r1, [r7, #6]
 803397e:	68fa      	ldr	r2, [r7, #12]
 8033980:	6812      	ldr	r2, [r2, #0]
 8033982:	430b      	orrs	r3, r1
 8033984:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033986:	68fb      	ldr	r3, [r7, #12]
 8033988:	681b      	ldr	r3, [r3, #0]
 803398a:	689a      	ldr	r2, [r3, #8]
 803398c:	68fb      	ldr	r3, [r7, #12]
 803398e:	681b      	ldr	r3, [r3, #0]
 8033990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8033994:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8033996:	68fb      	ldr	r3, [r7, #12]
 8033998:	681b      	ldr	r3, [r3, #0]
 803399a:	691a      	ldr	r2, [r3, #16]
 803399c:	68fb      	ldr	r3, [r7, #12]
 803399e:	681b      	ldr	r3, [r3, #0]
 80339a0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 80339a4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80339a6:	68fb      	ldr	r3, [r7, #12]
 80339a8:	681b      	ldr	r3, [r3, #0]
 80339aa:	681a      	ldr	r2, [r3, #0]
 80339ac:	68fb      	ldr	r3, [r7, #12]
 80339ae:	681b      	ldr	r3, [r3, #0]
 80339b0:	f042 0201 	orr.w	r2, r2, #1
 80339b4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80339b6:	68fb      	ldr	r3, [r7, #12]
 80339b8:	685b      	ldr	r3, [r3, #4]
 80339ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80339be:	d107      	bne.n	80339d0 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80339c0:	68fb      	ldr	r3, [r7, #12]
 80339c2:	681b      	ldr	r3, [r3, #0]
 80339c4:	681a      	ldr	r2, [r3, #0]
 80339c6:	68fb      	ldr	r3, [r7, #12]
 80339c8:	681b      	ldr	r3, [r3, #0]
 80339ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80339ce:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80339d0:	68fb      	ldr	r3, [r7, #12]
 80339d2:	2200      	movs	r2, #0
 80339d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80339d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80339da:	4618      	mov	r0, r3
 80339dc:	3718      	adds	r7, #24
 80339de:	46bd      	mov	sp, r7
 80339e0:	bd80      	pop	{r7, pc}
 80339e2:	bf00      	nop
 80339e4:	080342cf 	.word	0x080342cf
 80339e8:	08034227 	.word	0x08034227
 80339ec:	08034307 	.word	0x08034307
 80339f0:	ffff0000 	.word	0xffff0000

080339f4 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80339f4:	b580      	push	{r7, lr}
 80339f6:	b086      	sub	sp, #24
 80339f8:	af00      	add	r7, sp, #0
 80339fa:	60f8      	str	r0, [r7, #12]
 80339fc:	60b9      	str	r1, [r7, #8]
 80339fe:	607a      	str	r2, [r7, #4]
 8033a00:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8033a02:	2300      	movs	r3, #0
 8033a04:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8033a06:	68fb      	ldr	r3, [r7, #12]
 8033a08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8033a0c:	2b01      	cmp	r3, #1
 8033a0e:	d101      	bne.n	8033a14 <HAL_SPI_TransmitReceive_DMA+0x20>
 8033a10:	2302      	movs	r3, #2
 8033a12:	e1b4      	b.n	8033d7e <HAL_SPI_TransmitReceive_DMA+0x38a>
 8033a14:	68fb      	ldr	r3, [r7, #12]
 8033a16:	2201      	movs	r2, #1
 8033a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8033a1c:	68fb      	ldr	r3, [r7, #12]
 8033a1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033a22:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8033a24:	68fb      	ldr	r3, [r7, #12]
 8033a26:	685b      	ldr	r3, [r3, #4]
 8033a28:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8033a2a:	7dbb      	ldrb	r3, [r7, #22]
 8033a2c:	2b01      	cmp	r3, #1
 8033a2e:	d012      	beq.n	8033a56 <HAL_SPI_TransmitReceive_DMA+0x62>
 8033a30:	693b      	ldr	r3, [r7, #16]
 8033a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033a36:	d106      	bne.n	8033a46 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033a38:	68fb      	ldr	r3, [r7, #12]
 8033a3a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8033a3c:	2b00      	cmp	r3, #0
 8033a3e:	d102      	bne.n	8033a46 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8033a40:	7dbb      	ldrb	r3, [r7, #22]
 8033a42:	2b04      	cmp	r3, #4
 8033a44:	d007      	beq.n	8033a56 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8033a46:	2302      	movs	r3, #2
 8033a48:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033a4a:	68fb      	ldr	r3, [r7, #12]
 8033a4c:	2200      	movs	r2, #0
 8033a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033a52:	7dfb      	ldrb	r3, [r7, #23]
 8033a54:	e193      	b.n	8033d7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8033a56:	68bb      	ldr	r3, [r7, #8]
 8033a58:	2b00      	cmp	r3, #0
 8033a5a:	d005      	beq.n	8033a68 <HAL_SPI_TransmitReceive_DMA+0x74>
 8033a5c:	687b      	ldr	r3, [r7, #4]
 8033a5e:	2b00      	cmp	r3, #0
 8033a60:	d002      	beq.n	8033a68 <HAL_SPI_TransmitReceive_DMA+0x74>
 8033a62:	887b      	ldrh	r3, [r7, #2]
 8033a64:	2b00      	cmp	r3, #0
 8033a66:	d107      	bne.n	8033a78 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8033a68:	2301      	movs	r3, #1
 8033a6a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8033a6c:	68fb      	ldr	r3, [r7, #12]
 8033a6e:	2200      	movs	r2, #0
 8033a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033a74:	7dfb      	ldrb	r3, [r7, #23]
 8033a76:	e182      	b.n	8033d7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8033a78:	68fb      	ldr	r3, [r7, #12]
 8033a7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033a7e:	b2db      	uxtb	r3, r3
 8033a80:	2b04      	cmp	r3, #4
 8033a82:	d003      	beq.n	8033a8c <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8033a84:	68fb      	ldr	r3, [r7, #12]
 8033a86:	2205      	movs	r2, #5
 8033a88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8033a8c:	68fb      	ldr	r3, [r7, #12]
 8033a8e:	2200      	movs	r2, #0
 8033a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8033a94:	68fb      	ldr	r3, [r7, #12]
 8033a96:	68ba      	ldr	r2, [r7, #8]
 8033a98:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8033a9a:	68fb      	ldr	r3, [r7, #12]
 8033a9c:	887a      	ldrh	r2, [r7, #2]
 8033a9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8033aa2:	68fb      	ldr	r3, [r7, #12]
 8033aa4:	887a      	ldrh	r2, [r7, #2]
 8033aa6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8033aaa:	68fb      	ldr	r3, [r7, #12]
 8033aac:	687a      	ldr	r2, [r7, #4]
 8033aae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8033ab0:	68fb      	ldr	r3, [r7, #12]
 8033ab2:	887a      	ldrh	r2, [r7, #2]
 8033ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8033ab8:	68fb      	ldr	r3, [r7, #12]
 8033aba:	887a      	ldrh	r2, [r7, #2]
 8033abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8033ac0:	68fb      	ldr	r3, [r7, #12]
 8033ac2:	2200      	movs	r2, #0
 8033ac4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8033ac6:	68fb      	ldr	r3, [r7, #12]
 8033ac8:	2200      	movs	r2, #0
 8033aca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8033acc:	68fb      	ldr	r3, [r7, #12]
 8033ace:	681b      	ldr	r3, [r3, #0]
 8033ad0:	689a      	ldr	r2, [r3, #8]
 8033ad2:	68fb      	ldr	r3, [r7, #12]
 8033ad4:	681b      	ldr	r3, [r3, #0]
 8033ad6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8033ada:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033adc:	68fb      	ldr	r3, [r7, #12]
 8033ade:	68db      	ldr	r3, [r3, #12]
 8033ae0:	2b0f      	cmp	r3, #15
 8033ae2:	d905      	bls.n	8033af0 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8033ae4:	68fb      	ldr	r3, [r7, #12]
 8033ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033ae8:	699b      	ldr	r3, [r3, #24]
 8033aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033aee:	d10f      	bne.n	8033b10 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033af0:	68fb      	ldr	r3, [r7, #12]
 8033af2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8033af4:	2b07      	cmp	r3, #7
 8033af6:	d913      	bls.n	8033b20 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033af8:	68fb      	ldr	r3, [r7, #12]
 8033afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033afc:	699b      	ldr	r3, [r3, #24]
 8033afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033b02:	d00d      	beq.n	8033b20 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8033b04:	68fb      	ldr	r3, [r7, #12]
 8033b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b08:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8033b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b0e:	d007      	beq.n	8033b20 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8033b10:	2301      	movs	r3, #1
 8033b12:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033b14:	68fb      	ldr	r3, [r7, #12]
 8033b16:	2200      	movs	r2, #0
 8033b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8033b1c:	7dfb      	ldrb	r3, [r7, #23]
 8033b1e:	e12e      	b.n	8033d7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8033b20:	68fb      	ldr	r3, [r7, #12]
 8033b22:	68db      	ldr	r3, [r3, #12]
 8033b24:	2b07      	cmp	r3, #7
 8033b26:	d840      	bhi.n	8033baa <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033b28:	68fb      	ldr	r3, [r7, #12]
 8033b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033b2c:	699b      	ldr	r3, [r3, #24]
 8033b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033b32:	d109      	bne.n	8033b48 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033b34:	68fb      	ldr	r3, [r7, #12]
 8033b36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033b3a:	b29b      	uxth	r3, r3
 8033b3c:	3301      	adds	r3, #1
 8033b3e:	105b      	asrs	r3, r3, #1
 8033b40:	b29a      	uxth	r2, r3
 8033b42:	68fb      	ldr	r3, [r7, #12]
 8033b44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033b48:	68fb      	ldr	r3, [r7, #12]
 8033b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033b4c:	699b      	ldr	r3, [r3, #24]
 8033b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b52:	d109      	bne.n	8033b68 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8033b54:	68fb      	ldr	r3, [r7, #12]
 8033b56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033b5a:	b29b      	uxth	r3, r3
 8033b5c:	3303      	adds	r3, #3
 8033b5e:	109b      	asrs	r3, r3, #2
 8033b60:	b29a      	uxth	r2, r3
 8033b62:	68fb      	ldr	r3, [r7, #12]
 8033b64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8033b68:	68fb      	ldr	r3, [r7, #12]
 8033b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b6c:	699b      	ldr	r3, [r3, #24]
 8033b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8033b72:	d109      	bne.n	8033b88 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033b74:	68fb      	ldr	r3, [r7, #12]
 8033b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033b7a:	b29b      	uxth	r3, r3
 8033b7c:	3301      	adds	r3, #1
 8033b7e:	105b      	asrs	r3, r3, #1
 8033b80:	b29a      	uxth	r2, r3
 8033b82:	68fb      	ldr	r3, [r7, #12]
 8033b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033b88:	68fb      	ldr	r3, [r7, #12]
 8033b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033b8c:	699b      	ldr	r3, [r3, #24]
 8033b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033b92:	d12e      	bne.n	8033bf2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8033b94:	68fb      	ldr	r3, [r7, #12]
 8033b96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033b9a:	b29b      	uxth	r3, r3
 8033b9c:	3303      	adds	r3, #3
 8033b9e:	109b      	asrs	r3, r3, #2
 8033ba0:	b29a      	uxth	r2, r3
 8033ba2:	68fb      	ldr	r3, [r7, #12]
 8033ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8033ba8:	e023      	b.n	8033bf2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8033baa:	68fb      	ldr	r3, [r7, #12]
 8033bac:	68db      	ldr	r3, [r3, #12]
 8033bae:	2b0f      	cmp	r3, #15
 8033bb0:	d81f      	bhi.n	8033bf2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033bb2:	68fb      	ldr	r3, [r7, #12]
 8033bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033bb6:	699b      	ldr	r3, [r3, #24]
 8033bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033bbc:	d109      	bne.n	8033bd2 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8033bbe:	68fb      	ldr	r3, [r7, #12]
 8033bc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033bc4:	b29b      	uxth	r3, r3
 8033bc6:	3301      	adds	r3, #1
 8033bc8:	105b      	asrs	r3, r3, #1
 8033bca:	b29a      	uxth	r2, r3
 8033bcc:	68fb      	ldr	r3, [r7, #12]
 8033bce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8033bd2:	68fb      	ldr	r3, [r7, #12]
 8033bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033bd6:	699b      	ldr	r3, [r3, #24]
 8033bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8033bdc:	d109      	bne.n	8033bf2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8033bde:	68fb      	ldr	r3, [r7, #12]
 8033be0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033be4:	b29b      	uxth	r3, r3
 8033be6:	3301      	adds	r3, #1
 8033be8:	105b      	asrs	r3, r3, #1
 8033bea:	b29a      	uxth	r2, r3
 8033bec:	68fb      	ldr	r3, [r7, #12]
 8033bee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8033bf2:	68fb      	ldr	r3, [r7, #12]
 8033bf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033bf8:	b2db      	uxtb	r3, r3
 8033bfa:	2b04      	cmp	r3, #4
 8033bfc:	d108      	bne.n	8033c10 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8033bfe:	68fb      	ldr	r3, [r7, #12]
 8033c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c02:	4a61      	ldr	r2, [pc, #388]	; (8033d88 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8033c04:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8033c06:	68fb      	ldr	r3, [r7, #12]
 8033c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c0a:	4a60      	ldr	r2, [pc, #384]	; (8033d8c <HAL_SPI_TransmitReceive_DMA+0x398>)
 8033c0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8033c0e:	e007      	b.n	8033c20 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8033c10:	68fb      	ldr	r3, [r7, #12]
 8033c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c14:	4a5e      	ldr	r2, [pc, #376]	; (8033d90 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8033c16:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8033c18:	68fb      	ldr	r3, [r7, #12]
 8033c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c1c:	4a5d      	ldr	r2, [pc, #372]	; (8033d94 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8033c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8033c20:	68fb      	ldr	r3, [r7, #12]
 8033c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c24:	4a5c      	ldr	r2, [pc, #368]	; (8033d98 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8033c26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8033c28:	68fb      	ldr	r3, [r7, #12]
 8033c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8033c2c:	2200      	movs	r2, #0
 8033c2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033c30:	68fb      	ldr	r3, [r7, #12]
 8033c32:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8033c34:	68fb      	ldr	r3, [r7, #12]
 8033c36:	681b      	ldr	r3, [r3, #0]
 8033c38:	3330      	adds	r3, #48	; 0x30
 8033c3a:	4619      	mov	r1, r3
 8033c3c:	68fb      	ldr	r3, [r7, #12]
 8033c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033c40:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8033c42:	68fb      	ldr	r3, [r7, #12]
 8033c44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033c48:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8033c4a:	f7f8 f875 	bl	802bd38 <HAL_DMA_Start_IT>
 8033c4e:	4603      	mov	r3, r0
 8033c50:	2b00      	cmp	r3, #0
 8033c52:	d013      	beq.n	8033c7c <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033c54:	68fb      	ldr	r3, [r7, #12]
 8033c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033c5a:	f043 0210 	orr.w	r2, r3, #16
 8033c5e:	68fb      	ldr	r3, [r7, #12]
 8033c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033c64:	68fb      	ldr	r3, [r7, #12]
 8033c66:	2200      	movs	r2, #0
 8033c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033c6c:	68fb      	ldr	r3, [r7, #12]
 8033c6e:	2201      	movs	r2, #1
 8033c70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033c74:	2301      	movs	r3, #1
 8033c76:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033c78:	7dfb      	ldrb	r3, [r7, #23]
 8033c7a:	e080      	b.n	8033d7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8033c7c:	68fb      	ldr	r3, [r7, #12]
 8033c7e:	681b      	ldr	r3, [r3, #0]
 8033c80:	689a      	ldr	r2, [r3, #8]
 8033c82:	68fb      	ldr	r3, [r7, #12]
 8033c84:	681b      	ldr	r3, [r3, #0]
 8033c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8033c8a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8033c8c:	68fb      	ldr	r3, [r7, #12]
 8033c8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033c90:	2200      	movs	r2, #0
 8033c92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8033c94:	68fb      	ldr	r3, [r7, #12]
 8033c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033c98:	2200      	movs	r2, #0
 8033c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8033c9c:	68fb      	ldr	r3, [r7, #12]
 8033c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033ca0:	2200      	movs	r2, #0
 8033ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8033ca4:	68fb      	ldr	r3, [r7, #12]
 8033ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033ca8:	2200      	movs	r2, #0
 8033caa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033cac:	68fb      	ldr	r3, [r7, #12]
 8033cae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8033cb0:	68fb      	ldr	r3, [r7, #12]
 8033cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033cb4:	4619      	mov	r1, r3
 8033cb6:	68fb      	ldr	r3, [r7, #12]
 8033cb8:	681b      	ldr	r3, [r3, #0]
 8033cba:	3320      	adds	r3, #32
 8033cbc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8033cbe:	68fb      	ldr	r3, [r7, #12]
 8033cc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8033cc4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8033cc6:	f7f8 f837 	bl	802bd38 <HAL_DMA_Start_IT>
 8033cca:	4603      	mov	r3, r0
 8033ccc:	2b00      	cmp	r3, #0
 8033cce:	d013      	beq.n	8033cf8 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8033cd0:	68fb      	ldr	r3, [r7, #12]
 8033cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033cd6:	f043 0210 	orr.w	r2, r3, #16
 8033cda:	68fb      	ldr	r3, [r7, #12]
 8033cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8033ce0:	68fb      	ldr	r3, [r7, #12]
 8033ce2:	2200      	movs	r2, #0
 8033ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8033ce8:	68fb      	ldr	r3, [r7, #12]
 8033cea:	2201      	movs	r2, #1
 8033cec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8033cf0:	2301      	movs	r3, #1
 8033cf2:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8033cf4:	7dfb      	ldrb	r3, [r7, #23]
 8033cf6:	e042      	b.n	8033d7e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8033cf8:	68fb      	ldr	r3, [r7, #12]
 8033cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8033cfc:	69db      	ldr	r3, [r3, #28]
 8033cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8033d02:	d108      	bne.n	8033d16 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8033d04:	68fb      	ldr	r3, [r7, #12]
 8033d06:	681b      	ldr	r3, [r3, #0]
 8033d08:	6859      	ldr	r1, [r3, #4]
 8033d0a:	68fb      	ldr	r3, [r7, #12]
 8033d0c:	681a      	ldr	r2, [r3, #0]
 8033d0e:	4b23      	ldr	r3, [pc, #140]	; (8033d9c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033d10:	400b      	ands	r3, r1
 8033d12:	6053      	str	r3, [r2, #4]
 8033d14:	e009      	b.n	8033d2a <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8033d16:	68fb      	ldr	r3, [r7, #12]
 8033d18:	681b      	ldr	r3, [r3, #0]
 8033d1a:	685a      	ldr	r2, [r3, #4]
 8033d1c:	4b1f      	ldr	r3, [pc, #124]	; (8033d9c <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8033d1e:	4013      	ands	r3, r2
 8033d20:	8879      	ldrh	r1, [r7, #2]
 8033d22:	68fa      	ldr	r2, [r7, #12]
 8033d24:	6812      	ldr	r2, [r2, #0]
 8033d26:	430b      	orrs	r3, r1
 8033d28:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8033d2a:	68fb      	ldr	r3, [r7, #12]
 8033d2c:	681b      	ldr	r3, [r3, #0]
 8033d2e:	689a      	ldr	r2, [r3, #8]
 8033d30:	68fb      	ldr	r3, [r7, #12]
 8033d32:	681b      	ldr	r3, [r3, #0]
 8033d34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8033d38:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8033d3a:	68fb      	ldr	r3, [r7, #12]
 8033d3c:	681b      	ldr	r3, [r3, #0]
 8033d3e:	691a      	ldr	r2, [r3, #16]
 8033d40:	68fb      	ldr	r3, [r7, #12]
 8033d42:	681b      	ldr	r3, [r3, #0]
 8033d44:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8033d48:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8033d4a:	68fb      	ldr	r3, [r7, #12]
 8033d4c:	681b      	ldr	r3, [r3, #0]
 8033d4e:	681a      	ldr	r2, [r3, #0]
 8033d50:	68fb      	ldr	r3, [r7, #12]
 8033d52:	681b      	ldr	r3, [r3, #0]
 8033d54:	f042 0201 	orr.w	r2, r2, #1
 8033d58:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8033d5a:	68fb      	ldr	r3, [r7, #12]
 8033d5c:	685b      	ldr	r3, [r3, #4]
 8033d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8033d62:	d107      	bne.n	8033d74 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8033d64:	68fb      	ldr	r3, [r7, #12]
 8033d66:	681b      	ldr	r3, [r3, #0]
 8033d68:	681a      	ldr	r2, [r3, #0]
 8033d6a:	68fb      	ldr	r3, [r7, #12]
 8033d6c:	681b      	ldr	r3, [r3, #0]
 8033d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8033d72:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8033d74:	68fb      	ldr	r3, [r7, #12]
 8033d76:	2200      	movs	r2, #0
 8033d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8033d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8033d7e:	4618      	mov	r0, r3
 8033d80:	3718      	adds	r7, #24
 8033d82:	46bd      	mov	sp, r7
 8033d84:	bd80      	pop	{r7, pc}
 8033d86:	bf00      	nop
 8033d88:	080342cf 	.word	0x080342cf
 8033d8c:	08034227 	.word	0x08034227
 8033d90:	080342eb 	.word	0x080342eb
 8033d94:	0803426d 	.word	0x0803426d
 8033d98:	08034307 	.word	0x08034307
 8033d9c:	ffff0000 	.word	0xffff0000

08033da0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8033da0:	b580      	push	{r7, lr}
 8033da2:	b08a      	sub	sp, #40	; 0x28
 8033da4:	af00      	add	r7, sp, #0
 8033da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8033da8:	687b      	ldr	r3, [r7, #4]
 8033daa:	681b      	ldr	r3, [r3, #0]
 8033dac:	691b      	ldr	r3, [r3, #16]
 8033dae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8033db0:	687b      	ldr	r3, [r7, #4]
 8033db2:	681b      	ldr	r3, [r3, #0]
 8033db4:	695b      	ldr	r3, [r3, #20]
 8033db6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8033db8:	6a3a      	ldr	r2, [r7, #32]
 8033dba:	69fb      	ldr	r3, [r7, #28]
 8033dbc:	4013      	ands	r3, r2
 8033dbe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8033dc0:	687b      	ldr	r3, [r7, #4]
 8033dc2:	681b      	ldr	r3, [r3, #0]
 8033dc4:	689b      	ldr	r3, [r3, #8]
 8033dc6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8033dc8:	2300      	movs	r3, #0
 8033dca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8033dcc:	687b      	ldr	r3, [r7, #4]
 8033dce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8033dd2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8033dd4:	687b      	ldr	r3, [r7, #4]
 8033dd6:	681b      	ldr	r3, [r3, #0]
 8033dd8:	3330      	adds	r3, #48	; 0x30
 8033dda:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033ddc:	69bb      	ldr	r3, [r7, #24]
 8033dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033de2:	2b00      	cmp	r3, #0
 8033de4:	d113      	bne.n	8033e0e <HAL_SPI_IRQHandler+0x6e>
 8033de6:	69bb      	ldr	r3, [r7, #24]
 8033de8:	f003 0320 	and.w	r3, r3, #32
 8033dec:	2b00      	cmp	r3, #0
 8033dee:	d10e      	bne.n	8033e0e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8033df0:	69bb      	ldr	r3, [r7, #24]
 8033df2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8033df6:	2b00      	cmp	r3, #0
 8033df8:	d009      	beq.n	8033e0e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8033dfa:	687b      	ldr	r3, [r7, #4]
 8033dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033dfe:	6878      	ldr	r0, [r7, #4]
 8033e00:	4798      	blx	r3
    hspi->RxISR(hspi);
 8033e02:	687b      	ldr	r3, [r7, #4]
 8033e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033e06:	6878      	ldr	r0, [r7, #4]
 8033e08:	4798      	blx	r3
    handled = 1UL;
 8033e0a:	2301      	movs	r3, #1
 8033e0c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033e0e:	69bb      	ldr	r3, [r7, #24]
 8033e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033e14:	2b00      	cmp	r3, #0
 8033e16:	d10f      	bne.n	8033e38 <HAL_SPI_IRQHandler+0x98>
 8033e18:	69bb      	ldr	r3, [r7, #24]
 8033e1a:	f003 0301 	and.w	r3, r3, #1
 8033e1e:	2b00      	cmp	r3, #0
 8033e20:	d00a      	beq.n	8033e38 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033e22:	69bb      	ldr	r3, [r7, #24]
 8033e24:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8033e28:	2b00      	cmp	r3, #0
 8033e2a:	d105      	bne.n	8033e38 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8033e2c:	687b      	ldr	r3, [r7, #4]
 8033e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033e30:	6878      	ldr	r0, [r7, #4]
 8033e32:	4798      	blx	r3
    handled = 1UL;
 8033e34:	2301      	movs	r3, #1
 8033e36:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033e38:	69bb      	ldr	r3, [r7, #24]
 8033e3a:	f003 0320 	and.w	r3, r3, #32
 8033e3e:	2b00      	cmp	r3, #0
 8033e40:	d10f      	bne.n	8033e62 <HAL_SPI_IRQHandler+0xc2>
 8033e42:	69bb      	ldr	r3, [r7, #24]
 8033e44:	f003 0302 	and.w	r3, r3, #2
 8033e48:	2b00      	cmp	r3, #0
 8033e4a:	d00a      	beq.n	8033e62 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8033e4c:	69bb      	ldr	r3, [r7, #24]
 8033e4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8033e52:	2b00      	cmp	r3, #0
 8033e54:	d105      	bne.n	8033e62 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8033e56:	687b      	ldr	r3, [r7, #4]
 8033e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033e5a:	6878      	ldr	r0, [r7, #4]
 8033e5c:	4798      	blx	r3
    handled = 1UL;
 8033e5e:	2301      	movs	r3, #1
 8033e60:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8033e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033e64:	2b00      	cmp	r3, #0
 8033e66:	f040 815a 	bne.w	803411e <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8033e6a:	69bb      	ldr	r3, [r7, #24]
 8033e6c:	f003 0308 	and.w	r3, r3, #8
 8033e70:	2b00      	cmp	r3, #0
 8033e72:	f000 808b 	beq.w	8033f8c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8033e76:	687b      	ldr	r3, [r7, #4]
 8033e78:	681b      	ldr	r3, [r3, #0]
 8033e7a:	699a      	ldr	r2, [r3, #24]
 8033e7c:	687b      	ldr	r3, [r7, #4]
 8033e7e:	681b      	ldr	r3, [r3, #0]
 8033e80:	f042 0208 	orr.w	r2, r2, #8
 8033e84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8033e86:	687b      	ldr	r3, [r7, #4]
 8033e88:	681b      	ldr	r3, [r3, #0]
 8033e8a:	699a      	ldr	r2, [r3, #24]
 8033e8c:	687b      	ldr	r3, [r7, #4]
 8033e8e:	681b      	ldr	r3, [r3, #0]
 8033e90:	f042 0210 	orr.w	r2, r2, #16
 8033e94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033e96:	687b      	ldr	r3, [r7, #4]
 8033e98:	681b      	ldr	r3, [r3, #0]
 8033e9a:	699a      	ldr	r2, [r3, #24]
 8033e9c:	687b      	ldr	r3, [r7, #4]
 8033e9e:	681b      	ldr	r3, [r3, #0]
 8033ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033ea4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8033ea6:	687b      	ldr	r3, [r7, #4]
 8033ea8:	681b      	ldr	r3, [r3, #0]
 8033eaa:	691a      	ldr	r2, [r3, #16]
 8033eac:	687b      	ldr	r3, [r7, #4]
 8033eae:	681b      	ldr	r3, [r3, #0]
 8033eb0:	f022 0208 	bic.w	r2, r2, #8
 8033eb4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8033eb6:	687b      	ldr	r3, [r7, #4]
 8033eb8:	681b      	ldr	r3, [r3, #0]
 8033eba:	689b      	ldr	r3, [r3, #8]
 8033ebc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8033ec0:	2b00      	cmp	r3, #0
 8033ec2:	d13d      	bne.n	8033f40 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8033ec4:	e036      	b.n	8033f34 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8033ec6:	687b      	ldr	r3, [r7, #4]
 8033ec8:	68db      	ldr	r3, [r3, #12]
 8033eca:	2b0f      	cmp	r3, #15
 8033ecc:	d90b      	bls.n	8033ee6 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8033ece:	687b      	ldr	r3, [r7, #4]
 8033ed0:	681a      	ldr	r2, [r3, #0]
 8033ed2:	687b      	ldr	r3, [r7, #4]
 8033ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ed6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8033ed8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8033eda:	687b      	ldr	r3, [r7, #4]
 8033edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ede:	1d1a      	adds	r2, r3, #4
 8033ee0:	687b      	ldr	r3, [r7, #4]
 8033ee2:	665a      	str	r2, [r3, #100]	; 0x64
 8033ee4:	e01d      	b.n	8033f22 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8033ee6:	687b      	ldr	r3, [r7, #4]
 8033ee8:	68db      	ldr	r3, [r3, #12]
 8033eea:	2b07      	cmp	r3, #7
 8033eec:	d90b      	bls.n	8033f06 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8033eee:	687b      	ldr	r3, [r7, #4]
 8033ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ef2:	68fa      	ldr	r2, [r7, #12]
 8033ef4:	8812      	ldrh	r2, [r2, #0]
 8033ef6:	b292      	uxth	r2, r2
 8033ef8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8033efa:	687b      	ldr	r3, [r7, #4]
 8033efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033efe:	1c9a      	adds	r2, r3, #2
 8033f00:	687b      	ldr	r3, [r7, #4]
 8033f02:	665a      	str	r2, [r3, #100]	; 0x64
 8033f04:	e00d      	b.n	8033f22 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8033f06:	687b      	ldr	r3, [r7, #4]
 8033f08:	681b      	ldr	r3, [r3, #0]
 8033f0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8033f0e:	687b      	ldr	r3, [r7, #4]
 8033f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f12:	7812      	ldrb	r2, [r2, #0]
 8033f14:	b2d2      	uxtb	r2, r2
 8033f16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8033f18:	687b      	ldr	r3, [r7, #4]
 8033f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f1c:	1c5a      	adds	r2, r3, #1
 8033f1e:	687b      	ldr	r3, [r7, #4]
 8033f20:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8033f22:	687b      	ldr	r3, [r7, #4]
 8033f24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033f28:	b29b      	uxth	r3, r3
 8033f2a:	3b01      	subs	r3, #1
 8033f2c:	b29a      	uxth	r2, r3
 8033f2e:	687b      	ldr	r3, [r7, #4]
 8033f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8033f34:	687b      	ldr	r3, [r7, #4]
 8033f36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8033f3a:	b29b      	uxth	r3, r3
 8033f3c:	2b00      	cmp	r3, #0
 8033f3e:	d1c2      	bne.n	8033ec6 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8033f40:	6878      	ldr	r0, [r7, #4]
 8033f42:	f000 fa1d 	bl	8034380 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8033f46:	687b      	ldr	r3, [r7, #4]
 8033f48:	2201      	movs	r2, #1
 8033f4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8033f4e:	687b      	ldr	r3, [r7, #4]
 8033f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033f54:	2b00      	cmp	r3, #0
 8033f56:	d003      	beq.n	8033f60 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8033f58:	6878      	ldr	r0, [r7, #4]
 8033f5a:	f000 f929 	bl	80341b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8033f5e:	e0e3      	b.n	8034128 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8033f60:	7cfb      	ldrb	r3, [r7, #19]
 8033f62:	2b05      	cmp	r3, #5
 8033f64:	d103      	bne.n	8033f6e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8033f66:	6878      	ldr	r0, [r7, #4]
 8033f68:	f000 f8fa 	bl	8034160 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8033f6c:	e0d9      	b.n	8034122 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8033f6e:	7cfb      	ldrb	r3, [r7, #19]
 8033f70:	2b04      	cmp	r3, #4
 8033f72:	d103      	bne.n	8033f7c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8033f74:	6878      	ldr	r0, [r7, #4]
 8033f76:	f000 f8e9 	bl	803414c <HAL_SPI_RxCpltCallback>
    return;
 8033f7a:	e0d2      	b.n	8034122 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8033f7c:	7cfb      	ldrb	r3, [r7, #19]
 8033f7e:	2b03      	cmp	r3, #3
 8033f80:	f040 80cf 	bne.w	8034122 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8033f84:	6878      	ldr	r0, [r7, #4]
 8033f86:	f000 f8d7 	bl	8034138 <HAL_SPI_TxCpltCallback>
    return;
 8033f8a:	e0ca      	b.n	8034122 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8033f8c:	69fb      	ldr	r3, [r7, #28]
 8033f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8033f92:	2b00      	cmp	r3, #0
 8033f94:	d00d      	beq.n	8033fb2 <HAL_SPI_IRQHandler+0x212>
 8033f96:	6a3b      	ldr	r3, [r7, #32]
 8033f98:	f003 0308 	and.w	r3, r3, #8
 8033f9c:	2b00      	cmp	r3, #0
 8033f9e:	d008      	beq.n	8033fb2 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8033fa0:	687b      	ldr	r3, [r7, #4]
 8033fa2:	681b      	ldr	r3, [r3, #0]
 8033fa4:	699a      	ldr	r2, [r3, #24]
 8033fa6:	687b      	ldr	r3, [r7, #4]
 8033fa8:	681b      	ldr	r3, [r3, #0]
 8033faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8033fae:	619a      	str	r2, [r3, #24]

    return;
 8033fb0:	e0ba      	b.n	8034128 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8033fb2:	69bb      	ldr	r3, [r7, #24]
 8033fb4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8033fb8:	2b00      	cmp	r3, #0
 8033fba:	f000 80b5 	beq.w	8034128 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8033fbe:	69bb      	ldr	r3, [r7, #24]
 8033fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033fc4:	2b00      	cmp	r3, #0
 8033fc6:	d00f      	beq.n	8033fe8 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8033fc8:	687b      	ldr	r3, [r7, #4]
 8033fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033fce:	f043 0204 	orr.w	r2, r3, #4
 8033fd2:	687b      	ldr	r3, [r7, #4]
 8033fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8033fd8:	687b      	ldr	r3, [r7, #4]
 8033fda:	681b      	ldr	r3, [r3, #0]
 8033fdc:	699a      	ldr	r2, [r3, #24]
 8033fde:	687b      	ldr	r3, [r7, #4]
 8033fe0:	681b      	ldr	r3, [r3, #0]
 8033fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8033fe6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8033fe8:	69bb      	ldr	r3, [r7, #24]
 8033fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8033fee:	2b00      	cmp	r3, #0
 8033ff0:	d00f      	beq.n	8034012 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8033ff2:	687b      	ldr	r3, [r7, #4]
 8033ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8033ff8:	f043 0201 	orr.w	r2, r3, #1
 8033ffc:	687b      	ldr	r3, [r7, #4]
 8033ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8034002:	687b      	ldr	r3, [r7, #4]
 8034004:	681b      	ldr	r3, [r3, #0]
 8034006:	699a      	ldr	r2, [r3, #24]
 8034008:	687b      	ldr	r3, [r7, #4]
 803400a:	681b      	ldr	r3, [r3, #0]
 803400c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034010:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8034012:	69bb      	ldr	r3, [r7, #24]
 8034014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8034018:	2b00      	cmp	r3, #0
 803401a:	d00f      	beq.n	803403c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 803401c:	687b      	ldr	r3, [r7, #4]
 803401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034022:	f043 0208 	orr.w	r2, r3, #8
 8034026:	687b      	ldr	r3, [r7, #4]
 8034028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 803402c:	687b      	ldr	r3, [r7, #4]
 803402e:	681b      	ldr	r3, [r3, #0]
 8034030:	699a      	ldr	r2, [r3, #24]
 8034032:	687b      	ldr	r3, [r7, #4]
 8034034:	681b      	ldr	r3, [r3, #0]
 8034036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803403a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 803403c:	69bb      	ldr	r3, [r7, #24]
 803403e:	f003 0320 	and.w	r3, r3, #32
 8034042:	2b00      	cmp	r3, #0
 8034044:	d00f      	beq.n	8034066 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8034046:	687b      	ldr	r3, [r7, #4]
 8034048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803404c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8034050:	687b      	ldr	r3, [r7, #4]
 8034052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8034056:	687b      	ldr	r3, [r7, #4]
 8034058:	681b      	ldr	r3, [r3, #0]
 803405a:	699a      	ldr	r2, [r3, #24]
 803405c:	687b      	ldr	r3, [r7, #4]
 803405e:	681b      	ldr	r3, [r3, #0]
 8034060:	f042 0220 	orr.w	r2, r2, #32
 8034064:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8034066:	687b      	ldr	r3, [r7, #4]
 8034068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803406c:	2b00      	cmp	r3, #0
 803406e:	d05a      	beq.n	8034126 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8034070:	687b      	ldr	r3, [r7, #4]
 8034072:	681b      	ldr	r3, [r3, #0]
 8034074:	681a      	ldr	r2, [r3, #0]
 8034076:	687b      	ldr	r3, [r7, #4]
 8034078:	681b      	ldr	r3, [r3, #0]
 803407a:	f022 0201 	bic.w	r2, r2, #1
 803407e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8034080:	687b      	ldr	r3, [r7, #4]
 8034082:	681b      	ldr	r3, [r3, #0]
 8034084:	6919      	ldr	r1, [r3, #16]
 8034086:	687b      	ldr	r3, [r7, #4]
 8034088:	681a      	ldr	r2, [r3, #0]
 803408a:	4b29      	ldr	r3, [pc, #164]	; (8034130 <HAL_SPI_IRQHandler+0x390>)
 803408c:	400b      	ands	r3, r1
 803408e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8034090:	697b      	ldr	r3, [r7, #20]
 8034092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8034096:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 803409a:	d138      	bne.n	803410e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 803409c:	687b      	ldr	r3, [r7, #4]
 803409e:	681b      	ldr	r3, [r3, #0]
 80340a0:	689a      	ldr	r2, [r3, #8]
 80340a2:	687b      	ldr	r3, [r7, #4]
 80340a4:	681b      	ldr	r3, [r3, #0]
 80340a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80340aa:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80340ac:	687b      	ldr	r3, [r7, #4]
 80340ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80340b0:	2b00      	cmp	r3, #0
 80340b2:	d013      	beq.n	80340dc <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80340b4:	687b      	ldr	r3, [r7, #4]
 80340b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80340b8:	4a1e      	ldr	r2, [pc, #120]	; (8034134 <HAL_SPI_IRQHandler+0x394>)
 80340ba:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80340bc:	687b      	ldr	r3, [r7, #4]
 80340be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80340c0:	4618      	mov	r0, r3
 80340c2:	f7f8 fbc1 	bl	802c848 <HAL_DMA_Abort_IT>
 80340c6:	4603      	mov	r3, r0
 80340c8:	2b00      	cmp	r3, #0
 80340ca:	d007      	beq.n	80340dc <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80340cc:	687b      	ldr	r3, [r7, #4]
 80340ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80340d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80340d6:	687b      	ldr	r3, [r7, #4]
 80340d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80340dc:	687b      	ldr	r3, [r7, #4]
 80340de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80340e0:	2b00      	cmp	r3, #0
 80340e2:	d020      	beq.n	8034126 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80340e4:	687b      	ldr	r3, [r7, #4]
 80340e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80340e8:	4a12      	ldr	r2, [pc, #72]	; (8034134 <HAL_SPI_IRQHandler+0x394>)
 80340ea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80340ec:	687b      	ldr	r3, [r7, #4]
 80340ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80340f0:	4618      	mov	r0, r3
 80340f2:	f7f8 fba9 	bl	802c848 <HAL_DMA_Abort_IT>
 80340f6:	4603      	mov	r3, r0
 80340f8:	2b00      	cmp	r3, #0
 80340fa:	d014      	beq.n	8034126 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80340fc:	687b      	ldr	r3, [r7, #4]
 80340fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8034106:	687b      	ldr	r3, [r7, #4]
 8034108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 803410c:	e00b      	b.n	8034126 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 803410e:	687b      	ldr	r3, [r7, #4]
 8034110:	2201      	movs	r2, #1
 8034112:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8034116:	6878      	ldr	r0, [r7, #4]
 8034118:	f000 f84a 	bl	80341b0 <HAL_SPI_ErrorCallback>
    return;
 803411c:	e003      	b.n	8034126 <HAL_SPI_IRQHandler+0x386>
    return;
 803411e:	bf00      	nop
 8034120:	e002      	b.n	8034128 <HAL_SPI_IRQHandler+0x388>
    return;
 8034122:	bf00      	nop
 8034124:	e000      	b.n	8034128 <HAL_SPI_IRQHandler+0x388>
    return;
 8034126:	bf00      	nop
  }
}
 8034128:	3728      	adds	r7, #40	; 0x28
 803412a:	46bd      	mov	sp, r7
 803412c:	bd80      	pop	{r7, pc}
 803412e:	bf00      	nop
 8034130:	fffffc94 	.word	0xfffffc94
 8034134:	0803434d 	.word	0x0803434d

08034138 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034138:	b480      	push	{r7}
 803413a:	b083      	sub	sp, #12
 803413c:	af00      	add	r7, sp, #0
 803413e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8034140:	bf00      	nop
 8034142:	370c      	adds	r7, #12
 8034144:	46bd      	mov	sp, r7
 8034146:	f85d 7b04 	ldr.w	r7, [sp], #4
 803414a:	4770      	bx	lr

0803414c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 803414c:	b480      	push	{r7}
 803414e:	b083      	sub	sp, #12
 8034150:	af00      	add	r7, sp, #0
 8034152:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8034154:	bf00      	nop
 8034156:	370c      	adds	r7, #12
 8034158:	46bd      	mov	sp, r7
 803415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803415e:	4770      	bx	lr

08034160 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034160:	b480      	push	{r7}
 8034162:	b083      	sub	sp, #12
 8034164:	af00      	add	r7, sp, #0
 8034166:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8034168:	bf00      	nop
 803416a:	370c      	adds	r7, #12
 803416c:	46bd      	mov	sp, r7
 803416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034172:	4770      	bx	lr

08034174 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034174:	b480      	push	{r7}
 8034176:	b083      	sub	sp, #12
 8034178:	af00      	add	r7, sp, #0
 803417a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 803417c:	bf00      	nop
 803417e:	370c      	adds	r7, #12
 8034180:	46bd      	mov	sp, r7
 8034182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034186:	4770      	bx	lr

08034188 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8034188:	b480      	push	{r7}
 803418a:	b083      	sub	sp, #12
 803418c:	af00      	add	r7, sp, #0
 803418e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8034190:	bf00      	nop
 8034192:	370c      	adds	r7, #12
 8034194:	46bd      	mov	sp, r7
 8034196:	f85d 7b04 	ldr.w	r7, [sp], #4
 803419a:	4770      	bx	lr

0803419c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 803419c:	b480      	push	{r7}
 803419e:	b083      	sub	sp, #12
 80341a0:	af00      	add	r7, sp, #0
 80341a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80341a4:	bf00      	nop
 80341a6:	370c      	adds	r7, #12
 80341a8:	46bd      	mov	sp, r7
 80341aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341ae:	4770      	bx	lr

080341b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80341b0:	b480      	push	{r7}
 80341b2:	b083      	sub	sp, #12
 80341b4:	af00      	add	r7, sp, #0
 80341b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80341b8:	bf00      	nop
 80341ba:	370c      	adds	r7, #12
 80341bc:	46bd      	mov	sp, r7
 80341be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341c2:	4770      	bx	lr

080341c4 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80341c4:	b480      	push	{r7}
 80341c6:	b083      	sub	sp, #12
 80341c8:	af00      	add	r7, sp, #0
 80341ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80341cc:	687b      	ldr	r3, [r7, #4]
 80341ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80341d2:	b2db      	uxtb	r3, r3
}
 80341d4:	4618      	mov	r0, r3
 80341d6:	370c      	adds	r7, #12
 80341d8:	46bd      	mov	sp, r7
 80341da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80341de:	4770      	bx	lr

080341e0 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80341e0:	b580      	push	{r7, lr}
 80341e2:	b084      	sub	sp, #16
 80341e4:	af00      	add	r7, sp, #0
 80341e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80341e8:	687b      	ldr	r3, [r7, #4]
 80341ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80341ec:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80341ee:	68fb      	ldr	r3, [r7, #12]
 80341f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80341f4:	b2db      	uxtb	r3, r3
 80341f6:	2b07      	cmp	r3, #7
 80341f8:	d011      	beq.n	803421e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80341fa:	68fb      	ldr	r3, [r7, #12]
 80341fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80341fe:	69db      	ldr	r3, [r3, #28]
 8034200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034204:	d103      	bne.n	803420e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8034206:	68f8      	ldr	r0, [r7, #12]
 8034208:	f7ff ff96 	bl	8034138 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 803420c:	e007      	b.n	803421e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 803420e:	68fb      	ldr	r3, [r7, #12]
 8034210:	681b      	ldr	r3, [r3, #0]
 8034212:	691a      	ldr	r2, [r3, #16]
 8034214:	68fb      	ldr	r3, [r7, #12]
 8034216:	681b      	ldr	r3, [r3, #0]
 8034218:	f042 0208 	orr.w	r2, r2, #8
 803421c:	611a      	str	r2, [r3, #16]
}
 803421e:	bf00      	nop
 8034220:	3710      	adds	r7, #16
 8034222:	46bd      	mov	sp, r7
 8034224:	bd80      	pop	{r7, pc}

08034226 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8034226:	b580      	push	{r7, lr}
 8034228:	b084      	sub	sp, #16
 803422a:	af00      	add	r7, sp, #0
 803422c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803422e:	687b      	ldr	r3, [r7, #4]
 8034230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034232:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8034234:	68fb      	ldr	r3, [r7, #12]
 8034236:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803423a:	b2db      	uxtb	r3, r3
 803423c:	2b07      	cmp	r3, #7
 803423e:	d011      	beq.n	8034264 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8034240:	68fb      	ldr	r3, [r7, #12]
 8034242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8034244:	69db      	ldr	r3, [r3, #28]
 8034246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803424a:	d103      	bne.n	8034254 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 803424c:	68f8      	ldr	r0, [r7, #12]
 803424e:	f7ff ff7d 	bl	803414c <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8034252:	e007      	b.n	8034264 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8034254:	68fb      	ldr	r3, [r7, #12]
 8034256:	681b      	ldr	r3, [r3, #0]
 8034258:	691a      	ldr	r2, [r3, #16]
 803425a:	68fb      	ldr	r3, [r7, #12]
 803425c:	681b      	ldr	r3, [r3, #0]
 803425e:	f042 0208 	orr.w	r2, r2, #8
 8034262:	611a      	str	r2, [r3, #16]
}
 8034264:	bf00      	nop
 8034266:	3710      	adds	r7, #16
 8034268:	46bd      	mov	sp, r7
 803426a:	bd80      	pop	{r7, pc}

0803426c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803426c:	b580      	push	{r7, lr}
 803426e:	b084      	sub	sp, #16
 8034270:	af00      	add	r7, sp, #0
 8034272:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034274:	687b      	ldr	r3, [r7, #4]
 8034276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034278:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 803427a:	68fb      	ldr	r3, [r7, #12]
 803427c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8034280:	b2db      	uxtb	r3, r3
 8034282:	2b07      	cmp	r3, #7
 8034284:	d011      	beq.n	80342aa <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8034286:	68fb      	ldr	r3, [r7, #12]
 8034288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 803428a:	69db      	ldr	r3, [r3, #28]
 803428c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034290:	d103      	bne.n	803429a <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8034292:	68f8      	ldr	r0, [r7, #12]
 8034294:	f7ff ff64 	bl	8034160 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8034298:	e007      	b.n	80342aa <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 803429a:	68fb      	ldr	r3, [r7, #12]
 803429c:	681b      	ldr	r3, [r3, #0]
 803429e:	691a      	ldr	r2, [r3, #16]
 80342a0:	68fb      	ldr	r3, [r7, #12]
 80342a2:	681b      	ldr	r3, [r3, #0]
 80342a4:	f042 0208 	orr.w	r2, r2, #8
 80342a8:	611a      	str	r2, [r3, #16]
}
 80342aa:	bf00      	nop
 80342ac:	3710      	adds	r7, #16
 80342ae:	46bd      	mov	sp, r7
 80342b0:	bd80      	pop	{r7, pc}

080342b2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80342b2:	b580      	push	{r7, lr}
 80342b4:	b084      	sub	sp, #16
 80342b6:	af00      	add	r7, sp, #0
 80342b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80342ba:	687b      	ldr	r3, [r7, #4]
 80342bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342be:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80342c0:	68f8      	ldr	r0, [r7, #12]
 80342c2:	f7ff ff57 	bl	8034174 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80342c6:	bf00      	nop
 80342c8:	3710      	adds	r7, #16
 80342ca:	46bd      	mov	sp, r7
 80342cc:	bd80      	pop	{r7, pc}

080342ce <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80342ce:	b580      	push	{r7, lr}
 80342d0:	b084      	sub	sp, #16
 80342d2:	af00      	add	r7, sp, #0
 80342d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80342d6:	687b      	ldr	r3, [r7, #4]
 80342d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342da:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80342dc:	68f8      	ldr	r0, [r7, #12]
 80342de:	f7ff ff53 	bl	8034188 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80342e2:	bf00      	nop
 80342e4:	3710      	adds	r7, #16
 80342e6:	46bd      	mov	sp, r7
 80342e8:	bd80      	pop	{r7, pc}

080342ea <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80342ea:	b580      	push	{r7, lr}
 80342ec:	b084      	sub	sp, #16
 80342ee:	af00      	add	r7, sp, #0
 80342f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80342f2:	687b      	ldr	r3, [r7, #4]
 80342f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80342f6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80342f8:	68f8      	ldr	r0, [r7, #12]
 80342fa:	f7ff ff4f 	bl	803419c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80342fe:	bf00      	nop
 8034300:	3710      	adds	r7, #16
 8034302:	46bd      	mov	sp, r7
 8034304:	bd80      	pop	{r7, pc}

08034306 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8034306:	b580      	push	{r7, lr}
 8034308:	b084      	sub	sp, #16
 803430a:	af00      	add	r7, sp, #0
 803430c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 803430e:	687b      	ldr	r3, [r7, #4]
 8034310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034312:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8034314:	6878      	ldr	r0, [r7, #4]
 8034316:	f7f9 fc15 	bl	802db44 <HAL_DMA_GetError>
 803431a:	4603      	mov	r3, r0
 803431c:	2b02      	cmp	r3, #2
 803431e:	d011      	beq.n	8034344 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8034320:	68f8      	ldr	r0, [r7, #12]
 8034322:	f000 f82d 	bl	8034380 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8034326:	68fb      	ldr	r3, [r7, #12]
 8034328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803432c:	f043 0210 	orr.w	r2, r3, #16
 8034330:	68fb      	ldr	r3, [r7, #12]
 8034332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8034336:	68fb      	ldr	r3, [r7, #12]
 8034338:	2201      	movs	r2, #1
 803433a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 803433e:	68f8      	ldr	r0, [r7, #12]
 8034340:	f7ff ff36 	bl	80341b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8034344:	bf00      	nop
 8034346:	3710      	adds	r7, #16
 8034348:	46bd      	mov	sp, r7
 803434a:	bd80      	pop	{r7, pc}

0803434c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 803434c:	b580      	push	{r7, lr}
 803434e:	b084      	sub	sp, #16
 8034350:	af00      	add	r7, sp, #0
 8034352:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8034354:	687b      	ldr	r3, [r7, #4]
 8034356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034358:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 803435a:	68fb      	ldr	r3, [r7, #12]
 803435c:	2200      	movs	r2, #0
 803435e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8034362:	68fb      	ldr	r3, [r7, #12]
 8034364:	2200      	movs	r2, #0
 8034366:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 803436a:	68fb      	ldr	r3, [r7, #12]
 803436c:	2201      	movs	r2, #1
 803436e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8034372:	68f8      	ldr	r0, [r7, #12]
 8034374:	f7ff ff1c 	bl	80341b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8034378:	bf00      	nop
 803437a:	3710      	adds	r7, #16
 803437c:	46bd      	mov	sp, r7
 803437e:	bd80      	pop	{r7, pc}

08034380 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8034380:	b480      	push	{r7}
 8034382:	b085      	sub	sp, #20
 8034384:	af00      	add	r7, sp, #0
 8034386:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8034388:	687b      	ldr	r3, [r7, #4]
 803438a:	681b      	ldr	r3, [r3, #0]
 803438c:	695b      	ldr	r3, [r3, #20]
 803438e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8034390:	687b      	ldr	r3, [r7, #4]
 8034392:	681b      	ldr	r3, [r3, #0]
 8034394:	699a      	ldr	r2, [r3, #24]
 8034396:	687b      	ldr	r3, [r7, #4]
 8034398:	681b      	ldr	r3, [r3, #0]
 803439a:	f042 0208 	orr.w	r2, r2, #8
 803439e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80343a0:	687b      	ldr	r3, [r7, #4]
 80343a2:	681b      	ldr	r3, [r3, #0]
 80343a4:	699a      	ldr	r2, [r3, #24]
 80343a6:	687b      	ldr	r3, [r7, #4]
 80343a8:	681b      	ldr	r3, [r3, #0]
 80343aa:	f042 0210 	orr.w	r2, r2, #16
 80343ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80343b0:	687b      	ldr	r3, [r7, #4]
 80343b2:	681b      	ldr	r3, [r3, #0]
 80343b4:	681a      	ldr	r2, [r3, #0]
 80343b6:	687b      	ldr	r3, [r7, #4]
 80343b8:	681b      	ldr	r3, [r3, #0]
 80343ba:	f022 0201 	bic.w	r2, r2, #1
 80343be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80343c0:	687b      	ldr	r3, [r7, #4]
 80343c2:	681b      	ldr	r3, [r3, #0]
 80343c4:	6919      	ldr	r1, [r3, #16]
 80343c6:	687b      	ldr	r3, [r7, #4]
 80343c8:	681a      	ldr	r2, [r3, #0]
 80343ca:	4b3c      	ldr	r3, [pc, #240]	; (80344bc <SPI_CloseTransfer+0x13c>)
 80343cc:	400b      	ands	r3, r1
 80343ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80343d0:	687b      	ldr	r3, [r7, #4]
 80343d2:	681b      	ldr	r3, [r3, #0]
 80343d4:	689a      	ldr	r2, [r3, #8]
 80343d6:	687b      	ldr	r3, [r7, #4]
 80343d8:	681b      	ldr	r3, [r3, #0]
 80343da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80343de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80343e0:	687b      	ldr	r3, [r7, #4]
 80343e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80343e6:	b2db      	uxtb	r3, r3
 80343e8:	2b04      	cmp	r3, #4
 80343ea:	d014      	beq.n	8034416 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80343ec:	68fb      	ldr	r3, [r7, #12]
 80343ee:	f003 0320 	and.w	r3, r3, #32
 80343f2:	2b00      	cmp	r3, #0
 80343f4:	d00f      	beq.n	8034416 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80343f6:	687b      	ldr	r3, [r7, #4]
 80343f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80343fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8034400:	687b      	ldr	r3, [r7, #4]
 8034402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8034406:	687b      	ldr	r3, [r7, #4]
 8034408:	681b      	ldr	r3, [r3, #0]
 803440a:	699a      	ldr	r2, [r3, #24]
 803440c:	687b      	ldr	r3, [r7, #4]
 803440e:	681b      	ldr	r3, [r3, #0]
 8034410:	f042 0220 	orr.w	r2, r2, #32
 8034414:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8034416:	687b      	ldr	r3, [r7, #4]
 8034418:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 803441c:	b2db      	uxtb	r3, r3
 803441e:	2b03      	cmp	r3, #3
 8034420:	d014      	beq.n	803444c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8034422:	68fb      	ldr	r3, [r7, #12]
 8034424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8034428:	2b00      	cmp	r3, #0
 803442a:	d00f      	beq.n	803444c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 803442c:	687b      	ldr	r3, [r7, #4]
 803442e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034432:	f043 0204 	orr.w	r2, r3, #4
 8034436:	687b      	ldr	r3, [r7, #4]
 8034438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 803443c:	687b      	ldr	r3, [r7, #4]
 803443e:	681b      	ldr	r3, [r3, #0]
 8034440:	699a      	ldr	r2, [r3, #24]
 8034442:	687b      	ldr	r3, [r7, #4]
 8034444:	681b      	ldr	r3, [r3, #0]
 8034446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803444a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 803444c:	68fb      	ldr	r3, [r7, #12]
 803444e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8034452:	2b00      	cmp	r3, #0
 8034454:	d00f      	beq.n	8034476 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8034456:	687b      	ldr	r3, [r7, #4]
 8034458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 803445c:	f043 0201 	orr.w	r2, r3, #1
 8034460:	687b      	ldr	r3, [r7, #4]
 8034462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8034466:	687b      	ldr	r3, [r7, #4]
 8034468:	681b      	ldr	r3, [r3, #0]
 803446a:	699a      	ldr	r2, [r3, #24]
 803446c:	687b      	ldr	r3, [r7, #4]
 803446e:	681b      	ldr	r3, [r3, #0]
 8034470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8034474:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8034476:	68fb      	ldr	r3, [r7, #12]
 8034478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803447c:	2b00      	cmp	r3, #0
 803447e:	d00f      	beq.n	80344a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8034480:	687b      	ldr	r3, [r7, #4]
 8034482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034486:	f043 0208 	orr.w	r2, r3, #8
 803448a:	687b      	ldr	r3, [r7, #4]
 803448c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8034490:	687b      	ldr	r3, [r7, #4]
 8034492:	681b      	ldr	r3, [r3, #0]
 8034494:	699a      	ldr	r2, [r3, #24]
 8034496:	687b      	ldr	r3, [r7, #4]
 8034498:	681b      	ldr	r3, [r3, #0]
 803449a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 803449e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80344a0:	687b      	ldr	r3, [r7, #4]
 80344a2:	2200      	movs	r2, #0
 80344a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80344a8:	687b      	ldr	r3, [r7, #4]
 80344aa:	2200      	movs	r2, #0
 80344ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80344b0:	bf00      	nop
 80344b2:	3714      	adds	r7, #20
 80344b4:	46bd      	mov	sp, r7
 80344b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80344ba:	4770      	bx	lr
 80344bc:	fffffc90 	.word	0xfffffc90

080344c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80344c0:	b480      	push	{r7}
 80344c2:	b085      	sub	sp, #20
 80344c4:	af00      	add	r7, sp, #0
 80344c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80344c8:	687b      	ldr	r3, [r7, #4]
 80344ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80344cc:	095b      	lsrs	r3, r3, #5
 80344ce:	3301      	adds	r3, #1
 80344d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80344d2:	687b      	ldr	r3, [r7, #4]
 80344d4:	68db      	ldr	r3, [r3, #12]
 80344d6:	3301      	adds	r3, #1
 80344d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80344da:	68bb      	ldr	r3, [r7, #8]
 80344dc:	3307      	adds	r3, #7
 80344de:	08db      	lsrs	r3, r3, #3
 80344e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80344e2:	68bb      	ldr	r3, [r7, #8]
 80344e4:	68fa      	ldr	r2, [r7, #12]
 80344e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80344ea:	4618      	mov	r0, r3
 80344ec:	3714      	adds	r7, #20
 80344ee:	46bd      	mov	sp, r7
 80344f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80344f4:	4770      	bx	lr

080344f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80344f6:	b580      	push	{r7, lr}
 80344f8:	b082      	sub	sp, #8
 80344fa:	af00      	add	r7, sp, #0
 80344fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80344fe:	687b      	ldr	r3, [r7, #4]
 8034500:	2b00      	cmp	r3, #0
 8034502:	d101      	bne.n	8034508 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8034504:	2301      	movs	r3, #1
 8034506:	e049      	b.n	803459c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8034508:	687b      	ldr	r3, [r7, #4]
 803450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803450e:	b2db      	uxtb	r3, r3
 8034510:	2b00      	cmp	r3, #0
 8034512:	d106      	bne.n	8034522 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8034514:	687b      	ldr	r3, [r7, #4]
 8034516:	2200      	movs	r2, #0
 8034518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 803451c:	6878      	ldr	r0, [r7, #4]
 803451e:	f7f5 ff5b 	bl	802a3d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034522:	687b      	ldr	r3, [r7, #4]
 8034524:	2202      	movs	r2, #2
 8034526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 803452a:	687b      	ldr	r3, [r7, #4]
 803452c:	681a      	ldr	r2, [r3, #0]
 803452e:	687b      	ldr	r3, [r7, #4]
 8034530:	3304      	adds	r3, #4
 8034532:	4619      	mov	r1, r3
 8034534:	4610      	mov	r0, r2
 8034536:	f000 faed 	bl	8034b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 803453a:	687b      	ldr	r3, [r7, #4]
 803453c:	2201      	movs	r2, #1
 803453e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8034542:	687b      	ldr	r3, [r7, #4]
 8034544:	2201      	movs	r2, #1
 8034546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 803454a:	687b      	ldr	r3, [r7, #4]
 803454c:	2201      	movs	r2, #1
 803454e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8034552:	687b      	ldr	r3, [r7, #4]
 8034554:	2201      	movs	r2, #1
 8034556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 803455a:	687b      	ldr	r3, [r7, #4]
 803455c:	2201      	movs	r2, #1
 803455e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8034562:	687b      	ldr	r3, [r7, #4]
 8034564:	2201      	movs	r2, #1
 8034566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 803456a:	687b      	ldr	r3, [r7, #4]
 803456c:	2201      	movs	r2, #1
 803456e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8034572:	687b      	ldr	r3, [r7, #4]
 8034574:	2201      	movs	r2, #1
 8034576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 803457a:	687b      	ldr	r3, [r7, #4]
 803457c:	2201      	movs	r2, #1
 803457e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8034582:	687b      	ldr	r3, [r7, #4]
 8034584:	2201      	movs	r2, #1
 8034586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 803458a:	687b      	ldr	r3, [r7, #4]
 803458c:	2201      	movs	r2, #1
 803458e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8034592:	687b      	ldr	r3, [r7, #4]
 8034594:	2201      	movs	r2, #1
 8034596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 803459a:	2300      	movs	r3, #0
}
 803459c:	4618      	mov	r0, r3
 803459e:	3708      	adds	r7, #8
 80345a0:	46bd      	mov	sp, r7
 80345a2:	bd80      	pop	{r7, pc}

080345a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80345a4:	b480      	push	{r7}
 80345a6:	b085      	sub	sp, #20
 80345a8:	af00      	add	r7, sp, #0
 80345aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80345ac:	687b      	ldr	r3, [r7, #4]
 80345ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80345b2:	b2db      	uxtb	r3, r3
 80345b4:	2b01      	cmp	r3, #1
 80345b6:	d001      	beq.n	80345bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80345b8:	2301      	movs	r3, #1
 80345ba:	e054      	b.n	8034666 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80345bc:	687b      	ldr	r3, [r7, #4]
 80345be:	2202      	movs	r2, #2
 80345c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80345c4:	687b      	ldr	r3, [r7, #4]
 80345c6:	681b      	ldr	r3, [r3, #0]
 80345c8:	68da      	ldr	r2, [r3, #12]
 80345ca:	687b      	ldr	r3, [r7, #4]
 80345cc:	681b      	ldr	r3, [r3, #0]
 80345ce:	f042 0201 	orr.w	r2, r2, #1
 80345d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80345d4:	687b      	ldr	r3, [r7, #4]
 80345d6:	681b      	ldr	r3, [r3, #0]
 80345d8:	4a26      	ldr	r2, [pc, #152]	; (8034674 <HAL_TIM_Base_Start_IT+0xd0>)
 80345da:	4293      	cmp	r3, r2
 80345dc:	d022      	beq.n	8034624 <HAL_TIM_Base_Start_IT+0x80>
 80345de:	687b      	ldr	r3, [r7, #4]
 80345e0:	681b      	ldr	r3, [r3, #0]
 80345e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80345e6:	d01d      	beq.n	8034624 <HAL_TIM_Base_Start_IT+0x80>
 80345e8:	687b      	ldr	r3, [r7, #4]
 80345ea:	681b      	ldr	r3, [r3, #0]
 80345ec:	4a22      	ldr	r2, [pc, #136]	; (8034678 <HAL_TIM_Base_Start_IT+0xd4>)
 80345ee:	4293      	cmp	r3, r2
 80345f0:	d018      	beq.n	8034624 <HAL_TIM_Base_Start_IT+0x80>
 80345f2:	687b      	ldr	r3, [r7, #4]
 80345f4:	681b      	ldr	r3, [r3, #0]
 80345f6:	4a21      	ldr	r2, [pc, #132]	; (803467c <HAL_TIM_Base_Start_IT+0xd8>)
 80345f8:	4293      	cmp	r3, r2
 80345fa:	d013      	beq.n	8034624 <HAL_TIM_Base_Start_IT+0x80>
 80345fc:	687b      	ldr	r3, [r7, #4]
 80345fe:	681b      	ldr	r3, [r3, #0]
 8034600:	4a1f      	ldr	r2, [pc, #124]	; (8034680 <HAL_TIM_Base_Start_IT+0xdc>)
 8034602:	4293      	cmp	r3, r2
 8034604:	d00e      	beq.n	8034624 <HAL_TIM_Base_Start_IT+0x80>
 8034606:	687b      	ldr	r3, [r7, #4]
 8034608:	681b      	ldr	r3, [r3, #0]
 803460a:	4a1e      	ldr	r2, [pc, #120]	; (8034684 <HAL_TIM_Base_Start_IT+0xe0>)
 803460c:	4293      	cmp	r3, r2
 803460e:	d009      	beq.n	8034624 <HAL_TIM_Base_Start_IT+0x80>
 8034610:	687b      	ldr	r3, [r7, #4]
 8034612:	681b      	ldr	r3, [r3, #0]
 8034614:	4a1c      	ldr	r2, [pc, #112]	; (8034688 <HAL_TIM_Base_Start_IT+0xe4>)
 8034616:	4293      	cmp	r3, r2
 8034618:	d004      	beq.n	8034624 <HAL_TIM_Base_Start_IT+0x80>
 803461a:	687b      	ldr	r3, [r7, #4]
 803461c:	681b      	ldr	r3, [r3, #0]
 803461e:	4a1b      	ldr	r2, [pc, #108]	; (803468c <HAL_TIM_Base_Start_IT+0xe8>)
 8034620:	4293      	cmp	r3, r2
 8034622:	d115      	bne.n	8034650 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8034624:	687b      	ldr	r3, [r7, #4]
 8034626:	681b      	ldr	r3, [r3, #0]
 8034628:	689a      	ldr	r2, [r3, #8]
 803462a:	4b19      	ldr	r3, [pc, #100]	; (8034690 <HAL_TIM_Base_Start_IT+0xec>)
 803462c:	4013      	ands	r3, r2
 803462e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034630:	68fb      	ldr	r3, [r7, #12]
 8034632:	2b06      	cmp	r3, #6
 8034634:	d015      	beq.n	8034662 <HAL_TIM_Base_Start_IT+0xbe>
 8034636:	68fb      	ldr	r3, [r7, #12]
 8034638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 803463c:	d011      	beq.n	8034662 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 803463e:	687b      	ldr	r3, [r7, #4]
 8034640:	681b      	ldr	r3, [r3, #0]
 8034642:	681a      	ldr	r2, [r3, #0]
 8034644:	687b      	ldr	r3, [r7, #4]
 8034646:	681b      	ldr	r3, [r3, #0]
 8034648:	f042 0201 	orr.w	r2, r2, #1
 803464c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 803464e:	e008      	b.n	8034662 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8034650:	687b      	ldr	r3, [r7, #4]
 8034652:	681b      	ldr	r3, [r3, #0]
 8034654:	681a      	ldr	r2, [r3, #0]
 8034656:	687b      	ldr	r3, [r7, #4]
 8034658:	681b      	ldr	r3, [r3, #0]
 803465a:	f042 0201 	orr.w	r2, r2, #1
 803465e:	601a      	str	r2, [r3, #0]
 8034660:	e000      	b.n	8034664 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8034662:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8034664:	2300      	movs	r3, #0
}
 8034666:	4618      	mov	r0, r3
 8034668:	3714      	adds	r7, #20
 803466a:	46bd      	mov	sp, r7
 803466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034670:	4770      	bx	lr
 8034672:	bf00      	nop
 8034674:	40010000 	.word	0x40010000
 8034678:	40000400 	.word	0x40000400
 803467c:	40000800 	.word	0x40000800
 8034680:	40000c00 	.word	0x40000c00
 8034684:	40010400 	.word	0x40010400
 8034688:	40001800 	.word	0x40001800
 803468c:	40014000 	.word	0x40014000
 8034690:	00010007 	.word	0x00010007

08034694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8034694:	b580      	push	{r7, lr}
 8034696:	b082      	sub	sp, #8
 8034698:	af00      	add	r7, sp, #0
 803469a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 803469c:	687b      	ldr	r3, [r7, #4]
 803469e:	681b      	ldr	r3, [r3, #0]
 80346a0:	691b      	ldr	r3, [r3, #16]
 80346a2:	f003 0302 	and.w	r3, r3, #2
 80346a6:	2b02      	cmp	r3, #2
 80346a8:	d122      	bne.n	80346f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80346aa:	687b      	ldr	r3, [r7, #4]
 80346ac:	681b      	ldr	r3, [r3, #0]
 80346ae:	68db      	ldr	r3, [r3, #12]
 80346b0:	f003 0302 	and.w	r3, r3, #2
 80346b4:	2b02      	cmp	r3, #2
 80346b6:	d11b      	bne.n	80346f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80346b8:	687b      	ldr	r3, [r7, #4]
 80346ba:	681b      	ldr	r3, [r3, #0]
 80346bc:	f06f 0202 	mvn.w	r2, #2
 80346c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80346c2:	687b      	ldr	r3, [r7, #4]
 80346c4:	2201      	movs	r2, #1
 80346c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80346c8:	687b      	ldr	r3, [r7, #4]
 80346ca:	681b      	ldr	r3, [r3, #0]
 80346cc:	699b      	ldr	r3, [r3, #24]
 80346ce:	f003 0303 	and.w	r3, r3, #3
 80346d2:	2b00      	cmp	r3, #0
 80346d4:	d003      	beq.n	80346de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80346d6:	6878      	ldr	r0, [r7, #4]
 80346d8:	f000 f9fe 	bl	8034ad8 <HAL_TIM_IC_CaptureCallback>
 80346dc:	e005      	b.n	80346ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80346de:	6878      	ldr	r0, [r7, #4]
 80346e0:	f000 f9f0 	bl	8034ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80346e4:	6878      	ldr	r0, [r7, #4]
 80346e6:	f000 fa01 	bl	8034aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80346ea:	687b      	ldr	r3, [r7, #4]
 80346ec:	2200      	movs	r2, #0
 80346ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80346f0:	687b      	ldr	r3, [r7, #4]
 80346f2:	681b      	ldr	r3, [r3, #0]
 80346f4:	691b      	ldr	r3, [r3, #16]
 80346f6:	f003 0304 	and.w	r3, r3, #4
 80346fa:	2b04      	cmp	r3, #4
 80346fc:	d122      	bne.n	8034744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80346fe:	687b      	ldr	r3, [r7, #4]
 8034700:	681b      	ldr	r3, [r3, #0]
 8034702:	68db      	ldr	r3, [r3, #12]
 8034704:	f003 0304 	and.w	r3, r3, #4
 8034708:	2b04      	cmp	r3, #4
 803470a:	d11b      	bne.n	8034744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 803470c:	687b      	ldr	r3, [r7, #4]
 803470e:	681b      	ldr	r3, [r3, #0]
 8034710:	f06f 0204 	mvn.w	r2, #4
 8034714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8034716:	687b      	ldr	r3, [r7, #4]
 8034718:	2202      	movs	r2, #2
 803471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 803471c:	687b      	ldr	r3, [r7, #4]
 803471e:	681b      	ldr	r3, [r3, #0]
 8034720:	699b      	ldr	r3, [r3, #24]
 8034722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8034726:	2b00      	cmp	r3, #0
 8034728:	d003      	beq.n	8034732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803472a:	6878      	ldr	r0, [r7, #4]
 803472c:	f000 f9d4 	bl	8034ad8 <HAL_TIM_IC_CaptureCallback>
 8034730:	e005      	b.n	803473e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8034732:	6878      	ldr	r0, [r7, #4]
 8034734:	f000 f9c6 	bl	8034ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8034738:	6878      	ldr	r0, [r7, #4]
 803473a:	f000 f9d7 	bl	8034aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 803473e:	687b      	ldr	r3, [r7, #4]
 8034740:	2200      	movs	r2, #0
 8034742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8034744:	687b      	ldr	r3, [r7, #4]
 8034746:	681b      	ldr	r3, [r3, #0]
 8034748:	691b      	ldr	r3, [r3, #16]
 803474a:	f003 0308 	and.w	r3, r3, #8
 803474e:	2b08      	cmp	r3, #8
 8034750:	d122      	bne.n	8034798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8034752:	687b      	ldr	r3, [r7, #4]
 8034754:	681b      	ldr	r3, [r3, #0]
 8034756:	68db      	ldr	r3, [r3, #12]
 8034758:	f003 0308 	and.w	r3, r3, #8
 803475c:	2b08      	cmp	r3, #8
 803475e:	d11b      	bne.n	8034798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8034760:	687b      	ldr	r3, [r7, #4]
 8034762:	681b      	ldr	r3, [r3, #0]
 8034764:	f06f 0208 	mvn.w	r2, #8
 8034768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 803476a:	687b      	ldr	r3, [r7, #4]
 803476c:	2204      	movs	r2, #4
 803476e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8034770:	687b      	ldr	r3, [r7, #4]
 8034772:	681b      	ldr	r3, [r3, #0]
 8034774:	69db      	ldr	r3, [r3, #28]
 8034776:	f003 0303 	and.w	r3, r3, #3
 803477a:	2b00      	cmp	r3, #0
 803477c:	d003      	beq.n	8034786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 803477e:	6878      	ldr	r0, [r7, #4]
 8034780:	f000 f9aa 	bl	8034ad8 <HAL_TIM_IC_CaptureCallback>
 8034784:	e005      	b.n	8034792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8034786:	6878      	ldr	r0, [r7, #4]
 8034788:	f000 f99c 	bl	8034ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 803478c:	6878      	ldr	r0, [r7, #4]
 803478e:	f000 f9ad 	bl	8034aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8034792:	687b      	ldr	r3, [r7, #4]
 8034794:	2200      	movs	r2, #0
 8034796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8034798:	687b      	ldr	r3, [r7, #4]
 803479a:	681b      	ldr	r3, [r3, #0]
 803479c:	691b      	ldr	r3, [r3, #16]
 803479e:	f003 0310 	and.w	r3, r3, #16
 80347a2:	2b10      	cmp	r3, #16
 80347a4:	d122      	bne.n	80347ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80347a6:	687b      	ldr	r3, [r7, #4]
 80347a8:	681b      	ldr	r3, [r3, #0]
 80347aa:	68db      	ldr	r3, [r3, #12]
 80347ac:	f003 0310 	and.w	r3, r3, #16
 80347b0:	2b10      	cmp	r3, #16
 80347b2:	d11b      	bne.n	80347ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80347b4:	687b      	ldr	r3, [r7, #4]
 80347b6:	681b      	ldr	r3, [r3, #0]
 80347b8:	f06f 0210 	mvn.w	r2, #16
 80347bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80347be:	687b      	ldr	r3, [r7, #4]
 80347c0:	2208      	movs	r2, #8
 80347c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80347c4:	687b      	ldr	r3, [r7, #4]
 80347c6:	681b      	ldr	r3, [r3, #0]
 80347c8:	69db      	ldr	r3, [r3, #28]
 80347ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80347ce:	2b00      	cmp	r3, #0
 80347d0:	d003      	beq.n	80347da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80347d2:	6878      	ldr	r0, [r7, #4]
 80347d4:	f000 f980 	bl	8034ad8 <HAL_TIM_IC_CaptureCallback>
 80347d8:	e005      	b.n	80347e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80347da:	6878      	ldr	r0, [r7, #4]
 80347dc:	f000 f972 	bl	8034ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80347e0:	6878      	ldr	r0, [r7, #4]
 80347e2:	f000 f983 	bl	8034aec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80347e6:	687b      	ldr	r3, [r7, #4]
 80347e8:	2200      	movs	r2, #0
 80347ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80347ec:	687b      	ldr	r3, [r7, #4]
 80347ee:	681b      	ldr	r3, [r3, #0]
 80347f0:	691b      	ldr	r3, [r3, #16]
 80347f2:	f003 0301 	and.w	r3, r3, #1
 80347f6:	2b01      	cmp	r3, #1
 80347f8:	d10e      	bne.n	8034818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80347fa:	687b      	ldr	r3, [r7, #4]
 80347fc:	681b      	ldr	r3, [r3, #0]
 80347fe:	68db      	ldr	r3, [r3, #12]
 8034800:	f003 0301 	and.w	r3, r3, #1
 8034804:	2b01      	cmp	r3, #1
 8034806:	d107      	bne.n	8034818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8034808:	687b      	ldr	r3, [r7, #4]
 803480a:	681b      	ldr	r3, [r3, #0]
 803480c:	f06f 0201 	mvn.w	r2, #1
 8034810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8034812:	6878      	ldr	r0, [r7, #4]
 8034814:	f7f5 f96a 	bl	8029aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8034818:	687b      	ldr	r3, [r7, #4]
 803481a:	681b      	ldr	r3, [r3, #0]
 803481c:	691b      	ldr	r3, [r3, #16]
 803481e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034822:	2b80      	cmp	r3, #128	; 0x80
 8034824:	d10e      	bne.n	8034844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8034826:	687b      	ldr	r3, [r7, #4]
 8034828:	681b      	ldr	r3, [r3, #0]
 803482a:	68db      	ldr	r3, [r3, #12]
 803482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8034830:	2b80      	cmp	r3, #128	; 0x80
 8034832:	d107      	bne.n	8034844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8034834:	687b      	ldr	r3, [r7, #4]
 8034836:	681b      	ldr	r3, [r3, #0]
 8034838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 803483c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 803483e:	6878      	ldr	r0, [r7, #4]
 8034840:	f000 fb38 	bl	8034eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8034844:	687b      	ldr	r3, [r7, #4]
 8034846:	681b      	ldr	r3, [r3, #0]
 8034848:	691b      	ldr	r3, [r3, #16]
 803484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803484e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8034852:	d10e      	bne.n	8034872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8034854:	687b      	ldr	r3, [r7, #4]
 8034856:	681b      	ldr	r3, [r3, #0]
 8034858:	68db      	ldr	r3, [r3, #12]
 803485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803485e:	2b80      	cmp	r3, #128	; 0x80
 8034860:	d107      	bne.n	8034872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8034862:	687b      	ldr	r3, [r7, #4]
 8034864:	681b      	ldr	r3, [r3, #0]
 8034866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 803486a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 803486c:	6878      	ldr	r0, [r7, #4]
 803486e:	f000 fb2b 	bl	8034ec8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8034872:	687b      	ldr	r3, [r7, #4]
 8034874:	681b      	ldr	r3, [r3, #0]
 8034876:	691b      	ldr	r3, [r3, #16]
 8034878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803487c:	2b40      	cmp	r3, #64	; 0x40
 803487e:	d10e      	bne.n	803489e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8034880:	687b      	ldr	r3, [r7, #4]
 8034882:	681b      	ldr	r3, [r3, #0]
 8034884:	68db      	ldr	r3, [r3, #12]
 8034886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803488a:	2b40      	cmp	r3, #64	; 0x40
 803488c:	d107      	bne.n	803489e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 803488e:	687b      	ldr	r3, [r7, #4]
 8034890:	681b      	ldr	r3, [r3, #0]
 8034892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8034896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8034898:	6878      	ldr	r0, [r7, #4]
 803489a:	f000 f931 	bl	8034b00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 803489e:	687b      	ldr	r3, [r7, #4]
 80348a0:	681b      	ldr	r3, [r3, #0]
 80348a2:	691b      	ldr	r3, [r3, #16]
 80348a4:	f003 0320 	and.w	r3, r3, #32
 80348a8:	2b20      	cmp	r3, #32
 80348aa:	d10e      	bne.n	80348ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80348ac:	687b      	ldr	r3, [r7, #4]
 80348ae:	681b      	ldr	r3, [r3, #0]
 80348b0:	68db      	ldr	r3, [r3, #12]
 80348b2:	f003 0320 	and.w	r3, r3, #32
 80348b6:	2b20      	cmp	r3, #32
 80348b8:	d107      	bne.n	80348ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80348ba:	687b      	ldr	r3, [r7, #4]
 80348bc:	681b      	ldr	r3, [r3, #0]
 80348be:	f06f 0220 	mvn.w	r2, #32
 80348c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80348c4:	6878      	ldr	r0, [r7, #4]
 80348c6:	f000 faeb 	bl	8034ea0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80348ca:	bf00      	nop
 80348cc:	3708      	adds	r7, #8
 80348ce:	46bd      	mov	sp, r7
 80348d0:	bd80      	pop	{r7, pc}
	...

080348d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80348d4:	b580      	push	{r7, lr}
 80348d6:	b084      	sub	sp, #16
 80348d8:	af00      	add	r7, sp, #0
 80348da:	6078      	str	r0, [r7, #4]
 80348dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80348de:	2300      	movs	r3, #0
 80348e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80348e2:	687b      	ldr	r3, [r7, #4]
 80348e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80348e8:	2b01      	cmp	r3, #1
 80348ea:	d101      	bne.n	80348f0 <HAL_TIM_ConfigClockSource+0x1c>
 80348ec:	2302      	movs	r3, #2
 80348ee:	e0dc      	b.n	8034aaa <HAL_TIM_ConfigClockSource+0x1d6>
 80348f0:	687b      	ldr	r3, [r7, #4]
 80348f2:	2201      	movs	r2, #1
 80348f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80348f8:	687b      	ldr	r3, [r7, #4]
 80348fa:	2202      	movs	r2, #2
 80348fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8034900:	687b      	ldr	r3, [r7, #4]
 8034902:	681b      	ldr	r3, [r3, #0]
 8034904:	689b      	ldr	r3, [r3, #8]
 8034906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8034908:	68ba      	ldr	r2, [r7, #8]
 803490a:	4b6a      	ldr	r3, [pc, #424]	; (8034ab4 <HAL_TIM_ConfigClockSource+0x1e0>)
 803490c:	4013      	ands	r3, r2
 803490e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034910:	68bb      	ldr	r3, [r7, #8]
 8034912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8034918:	687b      	ldr	r3, [r7, #4]
 803491a:	681b      	ldr	r3, [r3, #0]
 803491c:	68ba      	ldr	r2, [r7, #8]
 803491e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8034920:	683b      	ldr	r3, [r7, #0]
 8034922:	681b      	ldr	r3, [r3, #0]
 8034924:	4a64      	ldr	r2, [pc, #400]	; (8034ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8034926:	4293      	cmp	r3, r2
 8034928:	f000 80a9 	beq.w	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 803492c:	4a62      	ldr	r2, [pc, #392]	; (8034ab8 <HAL_TIM_ConfigClockSource+0x1e4>)
 803492e:	4293      	cmp	r3, r2
 8034930:	f200 80ae 	bhi.w	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8034934:	4a61      	ldr	r2, [pc, #388]	; (8034abc <HAL_TIM_ConfigClockSource+0x1e8>)
 8034936:	4293      	cmp	r3, r2
 8034938:	f000 80a1 	beq.w	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 803493c:	4a5f      	ldr	r2, [pc, #380]	; (8034abc <HAL_TIM_ConfigClockSource+0x1e8>)
 803493e:	4293      	cmp	r3, r2
 8034940:	f200 80a6 	bhi.w	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8034944:	4a5e      	ldr	r2, [pc, #376]	; (8034ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8034946:	4293      	cmp	r3, r2
 8034948:	f000 8099 	beq.w	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 803494c:	4a5c      	ldr	r2, [pc, #368]	; (8034ac0 <HAL_TIM_ConfigClockSource+0x1ec>)
 803494e:	4293      	cmp	r3, r2
 8034950:	f200 809e 	bhi.w	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8034954:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8034958:	f000 8091 	beq.w	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 803495c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8034960:	f200 8096 	bhi.w	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8034964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8034968:	f000 8089 	beq.w	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 803496c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8034970:	f200 808e 	bhi.w	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8034974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034978:	d03e      	beq.n	80349f8 <HAL_TIM_ConfigClockSource+0x124>
 803497a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 803497e:	f200 8087 	bhi.w	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8034982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034986:	f000 8086 	beq.w	8034a96 <HAL_TIM_ConfigClockSource+0x1c2>
 803498a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803498e:	d87f      	bhi.n	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8034990:	2b70      	cmp	r3, #112	; 0x70
 8034992:	d01a      	beq.n	80349ca <HAL_TIM_ConfigClockSource+0xf6>
 8034994:	2b70      	cmp	r3, #112	; 0x70
 8034996:	d87b      	bhi.n	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 8034998:	2b60      	cmp	r3, #96	; 0x60
 803499a:	d050      	beq.n	8034a3e <HAL_TIM_ConfigClockSource+0x16a>
 803499c:	2b60      	cmp	r3, #96	; 0x60
 803499e:	d877      	bhi.n	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80349a0:	2b50      	cmp	r3, #80	; 0x50
 80349a2:	d03c      	beq.n	8034a1e <HAL_TIM_ConfigClockSource+0x14a>
 80349a4:	2b50      	cmp	r3, #80	; 0x50
 80349a6:	d873      	bhi.n	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80349a8:	2b40      	cmp	r3, #64	; 0x40
 80349aa:	d058      	beq.n	8034a5e <HAL_TIM_ConfigClockSource+0x18a>
 80349ac:	2b40      	cmp	r3, #64	; 0x40
 80349ae:	d86f      	bhi.n	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80349b0:	2b30      	cmp	r3, #48	; 0x30
 80349b2:	d064      	beq.n	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80349b4:	2b30      	cmp	r3, #48	; 0x30
 80349b6:	d86b      	bhi.n	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80349b8:	2b20      	cmp	r3, #32
 80349ba:	d060      	beq.n	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80349bc:	2b20      	cmp	r3, #32
 80349be:	d867      	bhi.n	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
 80349c0:	2b00      	cmp	r3, #0
 80349c2:	d05c      	beq.n	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80349c4:	2b10      	cmp	r3, #16
 80349c6:	d05a      	beq.n	8034a7e <HAL_TIM_ConfigClockSource+0x1aa>
 80349c8:	e062      	b.n	8034a90 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80349ca:	687b      	ldr	r3, [r7, #4]
 80349cc:	6818      	ldr	r0, [r3, #0]
 80349ce:	683b      	ldr	r3, [r7, #0]
 80349d0:	6899      	ldr	r1, [r3, #8]
 80349d2:	683b      	ldr	r3, [r7, #0]
 80349d4:	685a      	ldr	r2, [r3, #4]
 80349d6:	683b      	ldr	r3, [r7, #0]
 80349d8:	68db      	ldr	r3, [r3, #12]
 80349da:	f000 f9b3 	bl	8034d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80349de:	687b      	ldr	r3, [r7, #4]
 80349e0:	681b      	ldr	r3, [r3, #0]
 80349e2:	689b      	ldr	r3, [r3, #8]
 80349e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80349e6:	68bb      	ldr	r3, [r7, #8]
 80349e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80349ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80349ee:	687b      	ldr	r3, [r7, #4]
 80349f0:	681b      	ldr	r3, [r3, #0]
 80349f2:	68ba      	ldr	r2, [r7, #8]
 80349f4:	609a      	str	r2, [r3, #8]
      break;
 80349f6:	e04f      	b.n	8034a98 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80349f8:	687b      	ldr	r3, [r7, #4]
 80349fa:	6818      	ldr	r0, [r3, #0]
 80349fc:	683b      	ldr	r3, [r7, #0]
 80349fe:	6899      	ldr	r1, [r3, #8]
 8034a00:	683b      	ldr	r3, [r7, #0]
 8034a02:	685a      	ldr	r2, [r3, #4]
 8034a04:	683b      	ldr	r3, [r7, #0]
 8034a06:	68db      	ldr	r3, [r3, #12]
 8034a08:	f000 f99c 	bl	8034d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8034a0c:	687b      	ldr	r3, [r7, #4]
 8034a0e:	681b      	ldr	r3, [r3, #0]
 8034a10:	689a      	ldr	r2, [r3, #8]
 8034a12:	687b      	ldr	r3, [r7, #4]
 8034a14:	681b      	ldr	r3, [r3, #0]
 8034a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8034a1a:	609a      	str	r2, [r3, #8]
      break;
 8034a1c:	e03c      	b.n	8034a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8034a1e:	687b      	ldr	r3, [r7, #4]
 8034a20:	6818      	ldr	r0, [r3, #0]
 8034a22:	683b      	ldr	r3, [r7, #0]
 8034a24:	6859      	ldr	r1, [r3, #4]
 8034a26:	683b      	ldr	r3, [r7, #0]
 8034a28:	68db      	ldr	r3, [r3, #12]
 8034a2a:	461a      	mov	r2, r3
 8034a2c:	f000 f90c 	bl	8034c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8034a30:	687b      	ldr	r3, [r7, #4]
 8034a32:	681b      	ldr	r3, [r3, #0]
 8034a34:	2150      	movs	r1, #80	; 0x50
 8034a36:	4618      	mov	r0, r3
 8034a38:	f000 f966 	bl	8034d08 <TIM_ITRx_SetConfig>
      break;
 8034a3c:	e02c      	b.n	8034a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8034a3e:	687b      	ldr	r3, [r7, #4]
 8034a40:	6818      	ldr	r0, [r3, #0]
 8034a42:	683b      	ldr	r3, [r7, #0]
 8034a44:	6859      	ldr	r1, [r3, #4]
 8034a46:	683b      	ldr	r3, [r7, #0]
 8034a48:	68db      	ldr	r3, [r3, #12]
 8034a4a:	461a      	mov	r2, r3
 8034a4c:	f000 f92b 	bl	8034ca6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8034a50:	687b      	ldr	r3, [r7, #4]
 8034a52:	681b      	ldr	r3, [r3, #0]
 8034a54:	2160      	movs	r1, #96	; 0x60
 8034a56:	4618      	mov	r0, r3
 8034a58:	f000 f956 	bl	8034d08 <TIM_ITRx_SetConfig>
      break;
 8034a5c:	e01c      	b.n	8034a98 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8034a5e:	687b      	ldr	r3, [r7, #4]
 8034a60:	6818      	ldr	r0, [r3, #0]
 8034a62:	683b      	ldr	r3, [r7, #0]
 8034a64:	6859      	ldr	r1, [r3, #4]
 8034a66:	683b      	ldr	r3, [r7, #0]
 8034a68:	68db      	ldr	r3, [r3, #12]
 8034a6a:	461a      	mov	r2, r3
 8034a6c:	f000 f8ec 	bl	8034c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8034a70:	687b      	ldr	r3, [r7, #4]
 8034a72:	681b      	ldr	r3, [r3, #0]
 8034a74:	2140      	movs	r1, #64	; 0x40
 8034a76:	4618      	mov	r0, r3
 8034a78:	f000 f946 	bl	8034d08 <TIM_ITRx_SetConfig>
      break;
 8034a7c:	e00c      	b.n	8034a98 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8034a7e:	687b      	ldr	r3, [r7, #4]
 8034a80:	681a      	ldr	r2, [r3, #0]
 8034a82:	683b      	ldr	r3, [r7, #0]
 8034a84:	681b      	ldr	r3, [r3, #0]
 8034a86:	4619      	mov	r1, r3
 8034a88:	4610      	mov	r0, r2
 8034a8a:	f000 f93d 	bl	8034d08 <TIM_ITRx_SetConfig>
      break;
 8034a8e:	e003      	b.n	8034a98 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8034a90:	2301      	movs	r3, #1
 8034a92:	73fb      	strb	r3, [r7, #15]
      break;
 8034a94:	e000      	b.n	8034a98 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8034a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8034a98:	687b      	ldr	r3, [r7, #4]
 8034a9a:	2201      	movs	r2, #1
 8034a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034aa0:	687b      	ldr	r3, [r7, #4]
 8034aa2:	2200      	movs	r2, #0
 8034aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8034aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8034aaa:	4618      	mov	r0, r3
 8034aac:	3710      	adds	r7, #16
 8034aae:	46bd      	mov	sp, r7
 8034ab0:	bd80      	pop	{r7, pc}
 8034ab2:	bf00      	nop
 8034ab4:	ffceff88 	.word	0xffceff88
 8034ab8:	00100040 	.word	0x00100040
 8034abc:	00100030 	.word	0x00100030
 8034ac0:	00100020 	.word	0x00100020

08034ac4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8034ac4:	b480      	push	{r7}
 8034ac6:	b083      	sub	sp, #12
 8034ac8:	af00      	add	r7, sp, #0
 8034aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8034acc:	bf00      	nop
 8034ace:	370c      	adds	r7, #12
 8034ad0:	46bd      	mov	sp, r7
 8034ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ad6:	4770      	bx	lr

08034ad8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8034ad8:	b480      	push	{r7}
 8034ada:	b083      	sub	sp, #12
 8034adc:	af00      	add	r7, sp, #0
 8034ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8034ae0:	bf00      	nop
 8034ae2:	370c      	adds	r7, #12
 8034ae4:	46bd      	mov	sp, r7
 8034ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aea:	4770      	bx	lr

08034aec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8034aec:	b480      	push	{r7}
 8034aee:	b083      	sub	sp, #12
 8034af0:	af00      	add	r7, sp, #0
 8034af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8034af4:	bf00      	nop
 8034af6:	370c      	adds	r7, #12
 8034af8:	46bd      	mov	sp, r7
 8034afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034afe:	4770      	bx	lr

08034b00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8034b00:	b480      	push	{r7}
 8034b02:	b083      	sub	sp, #12
 8034b04:	af00      	add	r7, sp, #0
 8034b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8034b08:	bf00      	nop
 8034b0a:	370c      	adds	r7, #12
 8034b0c:	46bd      	mov	sp, r7
 8034b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b12:	4770      	bx	lr

08034b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8034b14:	b480      	push	{r7}
 8034b16:	b085      	sub	sp, #20
 8034b18:	af00      	add	r7, sp, #0
 8034b1a:	6078      	str	r0, [r7, #4]
 8034b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8034b1e:	687b      	ldr	r3, [r7, #4]
 8034b20:	681b      	ldr	r3, [r3, #0]
 8034b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8034b24:	687b      	ldr	r3, [r7, #4]
 8034b26:	4a40      	ldr	r2, [pc, #256]	; (8034c28 <TIM_Base_SetConfig+0x114>)
 8034b28:	4293      	cmp	r3, r2
 8034b2a:	d013      	beq.n	8034b54 <TIM_Base_SetConfig+0x40>
 8034b2c:	687b      	ldr	r3, [r7, #4]
 8034b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034b32:	d00f      	beq.n	8034b54 <TIM_Base_SetConfig+0x40>
 8034b34:	687b      	ldr	r3, [r7, #4]
 8034b36:	4a3d      	ldr	r2, [pc, #244]	; (8034c2c <TIM_Base_SetConfig+0x118>)
 8034b38:	4293      	cmp	r3, r2
 8034b3a:	d00b      	beq.n	8034b54 <TIM_Base_SetConfig+0x40>
 8034b3c:	687b      	ldr	r3, [r7, #4]
 8034b3e:	4a3c      	ldr	r2, [pc, #240]	; (8034c30 <TIM_Base_SetConfig+0x11c>)
 8034b40:	4293      	cmp	r3, r2
 8034b42:	d007      	beq.n	8034b54 <TIM_Base_SetConfig+0x40>
 8034b44:	687b      	ldr	r3, [r7, #4]
 8034b46:	4a3b      	ldr	r2, [pc, #236]	; (8034c34 <TIM_Base_SetConfig+0x120>)
 8034b48:	4293      	cmp	r3, r2
 8034b4a:	d003      	beq.n	8034b54 <TIM_Base_SetConfig+0x40>
 8034b4c:	687b      	ldr	r3, [r7, #4]
 8034b4e:	4a3a      	ldr	r2, [pc, #232]	; (8034c38 <TIM_Base_SetConfig+0x124>)
 8034b50:	4293      	cmp	r3, r2
 8034b52:	d108      	bne.n	8034b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8034b54:	68fb      	ldr	r3, [r7, #12]
 8034b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8034b5c:	683b      	ldr	r3, [r7, #0]
 8034b5e:	685b      	ldr	r3, [r3, #4]
 8034b60:	68fa      	ldr	r2, [r7, #12]
 8034b62:	4313      	orrs	r3, r2
 8034b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8034b66:	687b      	ldr	r3, [r7, #4]
 8034b68:	4a2f      	ldr	r2, [pc, #188]	; (8034c28 <TIM_Base_SetConfig+0x114>)
 8034b6a:	4293      	cmp	r3, r2
 8034b6c:	d01f      	beq.n	8034bae <TIM_Base_SetConfig+0x9a>
 8034b6e:	687b      	ldr	r3, [r7, #4]
 8034b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034b74:	d01b      	beq.n	8034bae <TIM_Base_SetConfig+0x9a>
 8034b76:	687b      	ldr	r3, [r7, #4]
 8034b78:	4a2c      	ldr	r2, [pc, #176]	; (8034c2c <TIM_Base_SetConfig+0x118>)
 8034b7a:	4293      	cmp	r3, r2
 8034b7c:	d017      	beq.n	8034bae <TIM_Base_SetConfig+0x9a>
 8034b7e:	687b      	ldr	r3, [r7, #4]
 8034b80:	4a2b      	ldr	r2, [pc, #172]	; (8034c30 <TIM_Base_SetConfig+0x11c>)
 8034b82:	4293      	cmp	r3, r2
 8034b84:	d013      	beq.n	8034bae <TIM_Base_SetConfig+0x9a>
 8034b86:	687b      	ldr	r3, [r7, #4]
 8034b88:	4a2a      	ldr	r2, [pc, #168]	; (8034c34 <TIM_Base_SetConfig+0x120>)
 8034b8a:	4293      	cmp	r3, r2
 8034b8c:	d00f      	beq.n	8034bae <TIM_Base_SetConfig+0x9a>
 8034b8e:	687b      	ldr	r3, [r7, #4]
 8034b90:	4a29      	ldr	r2, [pc, #164]	; (8034c38 <TIM_Base_SetConfig+0x124>)
 8034b92:	4293      	cmp	r3, r2
 8034b94:	d00b      	beq.n	8034bae <TIM_Base_SetConfig+0x9a>
 8034b96:	687b      	ldr	r3, [r7, #4]
 8034b98:	4a28      	ldr	r2, [pc, #160]	; (8034c3c <TIM_Base_SetConfig+0x128>)
 8034b9a:	4293      	cmp	r3, r2
 8034b9c:	d007      	beq.n	8034bae <TIM_Base_SetConfig+0x9a>
 8034b9e:	687b      	ldr	r3, [r7, #4]
 8034ba0:	4a27      	ldr	r2, [pc, #156]	; (8034c40 <TIM_Base_SetConfig+0x12c>)
 8034ba2:	4293      	cmp	r3, r2
 8034ba4:	d003      	beq.n	8034bae <TIM_Base_SetConfig+0x9a>
 8034ba6:	687b      	ldr	r3, [r7, #4]
 8034ba8:	4a26      	ldr	r2, [pc, #152]	; (8034c44 <TIM_Base_SetConfig+0x130>)
 8034baa:	4293      	cmp	r3, r2
 8034bac:	d108      	bne.n	8034bc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8034bae:	68fb      	ldr	r3, [r7, #12]
 8034bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8034bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8034bb6:	683b      	ldr	r3, [r7, #0]
 8034bb8:	68db      	ldr	r3, [r3, #12]
 8034bba:	68fa      	ldr	r2, [r7, #12]
 8034bbc:	4313      	orrs	r3, r2
 8034bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8034bc0:	68fb      	ldr	r3, [r7, #12]
 8034bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8034bc6:	683b      	ldr	r3, [r7, #0]
 8034bc8:	695b      	ldr	r3, [r3, #20]
 8034bca:	4313      	orrs	r3, r2
 8034bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8034bce:	687b      	ldr	r3, [r7, #4]
 8034bd0:	68fa      	ldr	r2, [r7, #12]
 8034bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8034bd4:	683b      	ldr	r3, [r7, #0]
 8034bd6:	689a      	ldr	r2, [r3, #8]
 8034bd8:	687b      	ldr	r3, [r7, #4]
 8034bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8034bdc:	683b      	ldr	r3, [r7, #0]
 8034bde:	681a      	ldr	r2, [r3, #0]
 8034be0:	687b      	ldr	r3, [r7, #4]
 8034be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8034be4:	687b      	ldr	r3, [r7, #4]
 8034be6:	4a10      	ldr	r2, [pc, #64]	; (8034c28 <TIM_Base_SetConfig+0x114>)
 8034be8:	4293      	cmp	r3, r2
 8034bea:	d00f      	beq.n	8034c0c <TIM_Base_SetConfig+0xf8>
 8034bec:	687b      	ldr	r3, [r7, #4]
 8034bee:	4a12      	ldr	r2, [pc, #72]	; (8034c38 <TIM_Base_SetConfig+0x124>)
 8034bf0:	4293      	cmp	r3, r2
 8034bf2:	d00b      	beq.n	8034c0c <TIM_Base_SetConfig+0xf8>
 8034bf4:	687b      	ldr	r3, [r7, #4]
 8034bf6:	4a11      	ldr	r2, [pc, #68]	; (8034c3c <TIM_Base_SetConfig+0x128>)
 8034bf8:	4293      	cmp	r3, r2
 8034bfa:	d007      	beq.n	8034c0c <TIM_Base_SetConfig+0xf8>
 8034bfc:	687b      	ldr	r3, [r7, #4]
 8034bfe:	4a10      	ldr	r2, [pc, #64]	; (8034c40 <TIM_Base_SetConfig+0x12c>)
 8034c00:	4293      	cmp	r3, r2
 8034c02:	d003      	beq.n	8034c0c <TIM_Base_SetConfig+0xf8>
 8034c04:	687b      	ldr	r3, [r7, #4]
 8034c06:	4a0f      	ldr	r2, [pc, #60]	; (8034c44 <TIM_Base_SetConfig+0x130>)
 8034c08:	4293      	cmp	r3, r2
 8034c0a:	d103      	bne.n	8034c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8034c0c:	683b      	ldr	r3, [r7, #0]
 8034c0e:	691a      	ldr	r2, [r3, #16]
 8034c10:	687b      	ldr	r3, [r7, #4]
 8034c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8034c14:	687b      	ldr	r3, [r7, #4]
 8034c16:	2201      	movs	r2, #1
 8034c18:	615a      	str	r2, [r3, #20]
}
 8034c1a:	bf00      	nop
 8034c1c:	3714      	adds	r7, #20
 8034c1e:	46bd      	mov	sp, r7
 8034c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034c24:	4770      	bx	lr
 8034c26:	bf00      	nop
 8034c28:	40010000 	.word	0x40010000
 8034c2c:	40000400 	.word	0x40000400
 8034c30:	40000800 	.word	0x40000800
 8034c34:	40000c00 	.word	0x40000c00
 8034c38:	40010400 	.word	0x40010400
 8034c3c:	40014000 	.word	0x40014000
 8034c40:	40014400 	.word	0x40014400
 8034c44:	40014800 	.word	0x40014800

08034c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034c48:	b480      	push	{r7}
 8034c4a:	b087      	sub	sp, #28
 8034c4c:	af00      	add	r7, sp, #0
 8034c4e:	60f8      	str	r0, [r7, #12]
 8034c50:	60b9      	str	r1, [r7, #8]
 8034c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8034c54:	68fb      	ldr	r3, [r7, #12]
 8034c56:	6a1b      	ldr	r3, [r3, #32]
 8034c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8034c5a:	68fb      	ldr	r3, [r7, #12]
 8034c5c:	6a1b      	ldr	r3, [r3, #32]
 8034c5e:	f023 0201 	bic.w	r2, r3, #1
 8034c62:	68fb      	ldr	r3, [r7, #12]
 8034c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034c66:	68fb      	ldr	r3, [r7, #12]
 8034c68:	699b      	ldr	r3, [r3, #24]
 8034c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8034c6c:	693b      	ldr	r3, [r7, #16]
 8034c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8034c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8034c74:	687b      	ldr	r3, [r7, #4]
 8034c76:	011b      	lsls	r3, r3, #4
 8034c78:	693a      	ldr	r2, [r7, #16]
 8034c7a:	4313      	orrs	r3, r2
 8034c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8034c7e:	697b      	ldr	r3, [r7, #20]
 8034c80:	f023 030a 	bic.w	r3, r3, #10
 8034c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8034c86:	697a      	ldr	r2, [r7, #20]
 8034c88:	68bb      	ldr	r3, [r7, #8]
 8034c8a:	4313      	orrs	r3, r2
 8034c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8034c8e:	68fb      	ldr	r3, [r7, #12]
 8034c90:	693a      	ldr	r2, [r7, #16]
 8034c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034c94:	68fb      	ldr	r3, [r7, #12]
 8034c96:	697a      	ldr	r2, [r7, #20]
 8034c98:	621a      	str	r2, [r3, #32]
}
 8034c9a:	bf00      	nop
 8034c9c:	371c      	adds	r7, #28
 8034c9e:	46bd      	mov	sp, r7
 8034ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ca4:	4770      	bx	lr

08034ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034ca6:	b480      	push	{r7}
 8034ca8:	b087      	sub	sp, #28
 8034caa:	af00      	add	r7, sp, #0
 8034cac:	60f8      	str	r0, [r7, #12]
 8034cae:	60b9      	str	r1, [r7, #8]
 8034cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8034cb2:	68fb      	ldr	r3, [r7, #12]
 8034cb4:	6a1b      	ldr	r3, [r3, #32]
 8034cb6:	f023 0210 	bic.w	r2, r3, #16
 8034cba:	68fb      	ldr	r3, [r7, #12]
 8034cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034cbe:	68fb      	ldr	r3, [r7, #12]
 8034cc0:	699b      	ldr	r3, [r3, #24]
 8034cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8034cc4:	68fb      	ldr	r3, [r7, #12]
 8034cc6:	6a1b      	ldr	r3, [r3, #32]
 8034cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8034cca:	697b      	ldr	r3, [r7, #20]
 8034ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8034cd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8034cd2:	687b      	ldr	r3, [r7, #4]
 8034cd4:	031b      	lsls	r3, r3, #12
 8034cd6:	697a      	ldr	r2, [r7, #20]
 8034cd8:	4313      	orrs	r3, r2
 8034cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8034cdc:	693b      	ldr	r3, [r7, #16]
 8034cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8034ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8034ce4:	68bb      	ldr	r3, [r7, #8]
 8034ce6:	011b      	lsls	r3, r3, #4
 8034ce8:	693a      	ldr	r2, [r7, #16]
 8034cea:	4313      	orrs	r3, r2
 8034cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8034cee:	68fb      	ldr	r3, [r7, #12]
 8034cf0:	697a      	ldr	r2, [r7, #20]
 8034cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034cf4:	68fb      	ldr	r3, [r7, #12]
 8034cf6:	693a      	ldr	r2, [r7, #16]
 8034cf8:	621a      	str	r2, [r3, #32]
}
 8034cfa:	bf00      	nop
 8034cfc:	371c      	adds	r7, #28
 8034cfe:	46bd      	mov	sp, r7
 8034d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d04:	4770      	bx	lr
	...

08034d08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8034d08:	b480      	push	{r7}
 8034d0a:	b085      	sub	sp, #20
 8034d0c:	af00      	add	r7, sp, #0
 8034d0e:	6078      	str	r0, [r7, #4]
 8034d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8034d12:	687b      	ldr	r3, [r7, #4]
 8034d14:	689b      	ldr	r3, [r3, #8]
 8034d16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8034d18:	68fa      	ldr	r2, [r7, #12]
 8034d1a:	4b09      	ldr	r3, [pc, #36]	; (8034d40 <TIM_ITRx_SetConfig+0x38>)
 8034d1c:	4013      	ands	r3, r2
 8034d1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8034d20:	683a      	ldr	r2, [r7, #0]
 8034d22:	68fb      	ldr	r3, [r7, #12]
 8034d24:	4313      	orrs	r3, r2
 8034d26:	f043 0307 	orr.w	r3, r3, #7
 8034d2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034d2c:	687b      	ldr	r3, [r7, #4]
 8034d2e:	68fa      	ldr	r2, [r7, #12]
 8034d30:	609a      	str	r2, [r3, #8]
}
 8034d32:	bf00      	nop
 8034d34:	3714      	adds	r7, #20
 8034d36:	46bd      	mov	sp, r7
 8034d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d3c:	4770      	bx	lr
 8034d3e:	bf00      	nop
 8034d40:	ffcfff8f 	.word	0xffcfff8f

08034d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8034d44:	b480      	push	{r7}
 8034d46:	b087      	sub	sp, #28
 8034d48:	af00      	add	r7, sp, #0
 8034d4a:	60f8      	str	r0, [r7, #12]
 8034d4c:	60b9      	str	r1, [r7, #8]
 8034d4e:	607a      	str	r2, [r7, #4]
 8034d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8034d52:	68fb      	ldr	r3, [r7, #12]
 8034d54:	689b      	ldr	r3, [r3, #8]
 8034d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034d58:	697b      	ldr	r3, [r7, #20]
 8034d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8034d60:	683b      	ldr	r3, [r7, #0]
 8034d62:	021a      	lsls	r2, r3, #8
 8034d64:	687b      	ldr	r3, [r7, #4]
 8034d66:	431a      	orrs	r2, r3
 8034d68:	68bb      	ldr	r3, [r7, #8]
 8034d6a:	4313      	orrs	r3, r2
 8034d6c:	697a      	ldr	r2, [r7, #20]
 8034d6e:	4313      	orrs	r3, r2
 8034d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034d72:	68fb      	ldr	r3, [r7, #12]
 8034d74:	697a      	ldr	r2, [r7, #20]
 8034d76:	609a      	str	r2, [r3, #8]
}
 8034d78:	bf00      	nop
 8034d7a:	371c      	adds	r7, #28
 8034d7c:	46bd      	mov	sp, r7
 8034d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034d82:	4770      	bx	lr

08034d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8034d84:	b480      	push	{r7}
 8034d86:	b085      	sub	sp, #20
 8034d88:	af00      	add	r7, sp, #0
 8034d8a:	6078      	str	r0, [r7, #4]
 8034d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8034d8e:	687b      	ldr	r3, [r7, #4]
 8034d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034d94:	2b01      	cmp	r3, #1
 8034d96:	d101      	bne.n	8034d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8034d98:	2302      	movs	r3, #2
 8034d9a:	e06d      	b.n	8034e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8034d9c:	687b      	ldr	r3, [r7, #4]
 8034d9e:	2201      	movs	r2, #1
 8034da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034da4:	687b      	ldr	r3, [r7, #4]
 8034da6:	2202      	movs	r2, #2
 8034da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8034dac:	687b      	ldr	r3, [r7, #4]
 8034dae:	681b      	ldr	r3, [r3, #0]
 8034db0:	685b      	ldr	r3, [r3, #4]
 8034db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8034db4:	687b      	ldr	r3, [r7, #4]
 8034db6:	681b      	ldr	r3, [r3, #0]
 8034db8:	689b      	ldr	r3, [r3, #8]
 8034dba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8034dbc:	687b      	ldr	r3, [r7, #4]
 8034dbe:	681b      	ldr	r3, [r3, #0]
 8034dc0:	4a30      	ldr	r2, [pc, #192]	; (8034e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034dc2:	4293      	cmp	r3, r2
 8034dc4:	d004      	beq.n	8034dd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8034dc6:	687b      	ldr	r3, [r7, #4]
 8034dc8:	681b      	ldr	r3, [r3, #0]
 8034dca:	4a2f      	ldr	r2, [pc, #188]	; (8034e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034dcc:	4293      	cmp	r3, r2
 8034dce:	d108      	bne.n	8034de2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8034dd0:	68fb      	ldr	r3, [r7, #12]
 8034dd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8034dd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8034dd8:	683b      	ldr	r3, [r7, #0]
 8034dda:	685b      	ldr	r3, [r3, #4]
 8034ddc:	68fa      	ldr	r2, [r7, #12]
 8034dde:	4313      	orrs	r3, r2
 8034de0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8034de2:	68fb      	ldr	r3, [r7, #12]
 8034de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034de8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8034dea:	683b      	ldr	r3, [r7, #0]
 8034dec:	681b      	ldr	r3, [r3, #0]
 8034dee:	68fa      	ldr	r2, [r7, #12]
 8034df0:	4313      	orrs	r3, r2
 8034df2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8034df4:	687b      	ldr	r3, [r7, #4]
 8034df6:	681b      	ldr	r3, [r3, #0]
 8034df8:	68fa      	ldr	r2, [r7, #12]
 8034dfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8034dfc:	687b      	ldr	r3, [r7, #4]
 8034dfe:	681b      	ldr	r3, [r3, #0]
 8034e00:	4a20      	ldr	r2, [pc, #128]	; (8034e84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8034e02:	4293      	cmp	r3, r2
 8034e04:	d022      	beq.n	8034e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e06:	687b      	ldr	r3, [r7, #4]
 8034e08:	681b      	ldr	r3, [r3, #0]
 8034e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034e0e:	d01d      	beq.n	8034e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e10:	687b      	ldr	r3, [r7, #4]
 8034e12:	681b      	ldr	r3, [r3, #0]
 8034e14:	4a1d      	ldr	r2, [pc, #116]	; (8034e8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8034e16:	4293      	cmp	r3, r2
 8034e18:	d018      	beq.n	8034e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e1a:	687b      	ldr	r3, [r7, #4]
 8034e1c:	681b      	ldr	r3, [r3, #0]
 8034e1e:	4a1c      	ldr	r2, [pc, #112]	; (8034e90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8034e20:	4293      	cmp	r3, r2
 8034e22:	d013      	beq.n	8034e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e24:	687b      	ldr	r3, [r7, #4]
 8034e26:	681b      	ldr	r3, [r3, #0]
 8034e28:	4a1a      	ldr	r2, [pc, #104]	; (8034e94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8034e2a:	4293      	cmp	r3, r2
 8034e2c:	d00e      	beq.n	8034e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e2e:	687b      	ldr	r3, [r7, #4]
 8034e30:	681b      	ldr	r3, [r3, #0]
 8034e32:	4a15      	ldr	r2, [pc, #84]	; (8034e88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8034e34:	4293      	cmp	r3, r2
 8034e36:	d009      	beq.n	8034e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e38:	687b      	ldr	r3, [r7, #4]
 8034e3a:	681b      	ldr	r3, [r3, #0]
 8034e3c:	4a16      	ldr	r2, [pc, #88]	; (8034e98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8034e3e:	4293      	cmp	r3, r2
 8034e40:	d004      	beq.n	8034e4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8034e42:	687b      	ldr	r3, [r7, #4]
 8034e44:	681b      	ldr	r3, [r3, #0]
 8034e46:	4a15      	ldr	r2, [pc, #84]	; (8034e9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8034e48:	4293      	cmp	r3, r2
 8034e4a:	d10c      	bne.n	8034e66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8034e4c:	68bb      	ldr	r3, [r7, #8]
 8034e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8034e52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8034e54:	683b      	ldr	r3, [r7, #0]
 8034e56:	689b      	ldr	r3, [r3, #8]
 8034e58:	68ba      	ldr	r2, [r7, #8]
 8034e5a:	4313      	orrs	r3, r2
 8034e5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8034e5e:	687b      	ldr	r3, [r7, #4]
 8034e60:	681b      	ldr	r3, [r3, #0]
 8034e62:	68ba      	ldr	r2, [r7, #8]
 8034e64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8034e66:	687b      	ldr	r3, [r7, #4]
 8034e68:	2201      	movs	r2, #1
 8034e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034e6e:	687b      	ldr	r3, [r7, #4]
 8034e70:	2200      	movs	r2, #0
 8034e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8034e76:	2300      	movs	r3, #0
}
 8034e78:	4618      	mov	r0, r3
 8034e7a:	3714      	adds	r7, #20
 8034e7c:	46bd      	mov	sp, r7
 8034e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e82:	4770      	bx	lr
 8034e84:	40010000 	.word	0x40010000
 8034e88:	40010400 	.word	0x40010400
 8034e8c:	40000400 	.word	0x40000400
 8034e90:	40000800 	.word	0x40000800
 8034e94:	40000c00 	.word	0x40000c00
 8034e98:	40001800 	.word	0x40001800
 8034e9c:	40014000 	.word	0x40014000

08034ea0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8034ea0:	b480      	push	{r7}
 8034ea2:	b083      	sub	sp, #12
 8034ea4:	af00      	add	r7, sp, #0
 8034ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8034ea8:	bf00      	nop
 8034eaa:	370c      	adds	r7, #12
 8034eac:	46bd      	mov	sp, r7
 8034eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034eb2:	4770      	bx	lr

08034eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8034eb4:	b480      	push	{r7}
 8034eb6:	b083      	sub	sp, #12
 8034eb8:	af00      	add	r7, sp, #0
 8034eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8034ebc:	bf00      	nop
 8034ebe:	370c      	adds	r7, #12
 8034ec0:	46bd      	mov	sp, r7
 8034ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ec6:	4770      	bx	lr

08034ec8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8034ec8:	b480      	push	{r7}
 8034eca:	b083      	sub	sp, #12
 8034ecc:	af00      	add	r7, sp, #0
 8034ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8034ed0:	bf00      	nop
 8034ed2:	370c      	adds	r7, #12
 8034ed4:	46bd      	mov	sp, r7
 8034ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034eda:	4770      	bx	lr

08034edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8034edc:	b580      	push	{r7, lr}
 8034ede:	b082      	sub	sp, #8
 8034ee0:	af00      	add	r7, sp, #0
 8034ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8034ee4:	687b      	ldr	r3, [r7, #4]
 8034ee6:	2b00      	cmp	r3, #0
 8034ee8:	d101      	bne.n	8034eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8034eea:	2301      	movs	r3, #1
 8034eec:	e042      	b.n	8034f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8034eee:	687b      	ldr	r3, [r7, #4]
 8034ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8034ef4:	2b00      	cmp	r3, #0
 8034ef6:	d106      	bne.n	8034f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8034ef8:	687b      	ldr	r3, [r7, #4]
 8034efa:	2200      	movs	r2, #0
 8034efc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8034f00:	6878      	ldr	r0, [r7, #4]
 8034f02:	f7f5 fc65 	bl	802a7d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8034f06:	687b      	ldr	r3, [r7, #4]
 8034f08:	2224      	movs	r2, #36	; 0x24
 8034f0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8034f0e:	687b      	ldr	r3, [r7, #4]
 8034f10:	681b      	ldr	r3, [r3, #0]
 8034f12:	681a      	ldr	r2, [r3, #0]
 8034f14:	687b      	ldr	r3, [r7, #4]
 8034f16:	681b      	ldr	r3, [r3, #0]
 8034f18:	f022 0201 	bic.w	r2, r2, #1
 8034f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8034f1e:	6878      	ldr	r0, [r7, #4]
 8034f20:	f000 fdb2 	bl	8035a88 <UART_SetConfig>
 8034f24:	4603      	mov	r3, r0
 8034f26:	2b01      	cmp	r3, #1
 8034f28:	d101      	bne.n	8034f2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8034f2a:	2301      	movs	r3, #1
 8034f2c:	e022      	b.n	8034f74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8034f2e:	687b      	ldr	r3, [r7, #4]
 8034f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8034f32:	2b00      	cmp	r3, #0
 8034f34:	d002      	beq.n	8034f3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8034f36:	6878      	ldr	r0, [r7, #4]
 8034f38:	f001 fb0e 	bl	8036558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8034f3c:	687b      	ldr	r3, [r7, #4]
 8034f3e:	681b      	ldr	r3, [r3, #0]
 8034f40:	685a      	ldr	r2, [r3, #4]
 8034f42:	687b      	ldr	r3, [r7, #4]
 8034f44:	681b      	ldr	r3, [r3, #0]
 8034f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8034f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8034f4c:	687b      	ldr	r3, [r7, #4]
 8034f4e:	681b      	ldr	r3, [r3, #0]
 8034f50:	689a      	ldr	r2, [r3, #8]
 8034f52:	687b      	ldr	r3, [r7, #4]
 8034f54:	681b      	ldr	r3, [r3, #0]
 8034f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8034f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8034f5c:	687b      	ldr	r3, [r7, #4]
 8034f5e:	681b      	ldr	r3, [r3, #0]
 8034f60:	681a      	ldr	r2, [r3, #0]
 8034f62:	687b      	ldr	r3, [r7, #4]
 8034f64:	681b      	ldr	r3, [r3, #0]
 8034f66:	f042 0201 	orr.w	r2, r2, #1
 8034f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8034f6c:	6878      	ldr	r0, [r7, #4]
 8034f6e:	f001 fb95 	bl	803669c <UART_CheckIdleState>
 8034f72:	4603      	mov	r3, r0
}
 8034f74:	4618      	mov	r0, r3
 8034f76:	3708      	adds	r7, #8
 8034f78:	46bd      	mov	sp, r7
 8034f7a:	bd80      	pop	{r7, pc}

08034f7c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8034f7c:	b580      	push	{r7, lr}
 8034f7e:	b08a      	sub	sp, #40	; 0x28
 8034f80:	af02      	add	r7, sp, #8
 8034f82:	60f8      	str	r0, [r7, #12]
 8034f84:	60b9      	str	r1, [r7, #8]
 8034f86:	603b      	str	r3, [r7, #0]
 8034f88:	4613      	mov	r3, r2
 8034f8a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8034f8c:	68fb      	ldr	r3, [r7, #12]
 8034f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8034f92:	2b20      	cmp	r3, #32
 8034f94:	f040 80c0 	bne.w	8035118 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8034f98:	68bb      	ldr	r3, [r7, #8]
 8034f9a:	2b00      	cmp	r3, #0
 8034f9c:	d002      	beq.n	8034fa4 <HAL_UART_Receive+0x28>
 8034f9e:	88fb      	ldrh	r3, [r7, #6]
 8034fa0:	2b00      	cmp	r3, #0
 8034fa2:	d101      	bne.n	8034fa8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8034fa4:	2301      	movs	r3, #1
 8034fa6:	e0b8      	b.n	803511a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8034fa8:	68fb      	ldr	r3, [r7, #12]
 8034faa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8034fae:	2b01      	cmp	r3, #1
 8034fb0:	d101      	bne.n	8034fb6 <HAL_UART_Receive+0x3a>
 8034fb2:	2302      	movs	r3, #2
 8034fb4:	e0b1      	b.n	803511a <HAL_UART_Receive+0x19e>
 8034fb6:	68fb      	ldr	r3, [r7, #12]
 8034fb8:	2201      	movs	r2, #1
 8034fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034fbe:	68fb      	ldr	r3, [r7, #12]
 8034fc0:	2200      	movs	r2, #0
 8034fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8034fc6:	68fb      	ldr	r3, [r7, #12]
 8034fc8:	2222      	movs	r2, #34	; 0x22
 8034fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8034fce:	68fb      	ldr	r3, [r7, #12]
 8034fd0:	2200      	movs	r2, #0
 8034fd2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8034fd4:	f7f5 fe58 	bl	802ac88 <HAL_GetTick>
 8034fd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8034fda:	68fb      	ldr	r3, [r7, #12]
 8034fdc:	88fa      	ldrh	r2, [r7, #6]
 8034fde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8034fe2:	68fb      	ldr	r3, [r7, #12]
 8034fe4:	88fa      	ldrh	r2, [r7, #6]
 8034fe6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8034fea:	68fb      	ldr	r3, [r7, #12]
 8034fec:	689b      	ldr	r3, [r3, #8]
 8034fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034ff2:	d10e      	bne.n	8035012 <HAL_UART_Receive+0x96>
 8034ff4:	68fb      	ldr	r3, [r7, #12]
 8034ff6:	691b      	ldr	r3, [r3, #16]
 8034ff8:	2b00      	cmp	r3, #0
 8034ffa:	d105      	bne.n	8035008 <HAL_UART_Receive+0x8c>
 8034ffc:	68fb      	ldr	r3, [r7, #12]
 8034ffe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8035002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035006:	e02d      	b.n	8035064 <HAL_UART_Receive+0xe8>
 8035008:	68fb      	ldr	r3, [r7, #12]
 803500a:	22ff      	movs	r2, #255	; 0xff
 803500c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035010:	e028      	b.n	8035064 <HAL_UART_Receive+0xe8>
 8035012:	68fb      	ldr	r3, [r7, #12]
 8035014:	689b      	ldr	r3, [r3, #8]
 8035016:	2b00      	cmp	r3, #0
 8035018:	d10d      	bne.n	8035036 <HAL_UART_Receive+0xba>
 803501a:	68fb      	ldr	r3, [r7, #12]
 803501c:	691b      	ldr	r3, [r3, #16]
 803501e:	2b00      	cmp	r3, #0
 8035020:	d104      	bne.n	803502c <HAL_UART_Receive+0xb0>
 8035022:	68fb      	ldr	r3, [r7, #12]
 8035024:	22ff      	movs	r2, #255	; 0xff
 8035026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803502a:	e01b      	b.n	8035064 <HAL_UART_Receive+0xe8>
 803502c:	68fb      	ldr	r3, [r7, #12]
 803502e:	227f      	movs	r2, #127	; 0x7f
 8035030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035034:	e016      	b.n	8035064 <HAL_UART_Receive+0xe8>
 8035036:	68fb      	ldr	r3, [r7, #12]
 8035038:	689b      	ldr	r3, [r3, #8]
 803503a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 803503e:	d10d      	bne.n	803505c <HAL_UART_Receive+0xe0>
 8035040:	68fb      	ldr	r3, [r7, #12]
 8035042:	691b      	ldr	r3, [r3, #16]
 8035044:	2b00      	cmp	r3, #0
 8035046:	d104      	bne.n	8035052 <HAL_UART_Receive+0xd6>
 8035048:	68fb      	ldr	r3, [r7, #12]
 803504a:	227f      	movs	r2, #127	; 0x7f
 803504c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8035050:	e008      	b.n	8035064 <HAL_UART_Receive+0xe8>
 8035052:	68fb      	ldr	r3, [r7, #12]
 8035054:	223f      	movs	r2, #63	; 0x3f
 8035056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803505a:	e003      	b.n	8035064 <HAL_UART_Receive+0xe8>
 803505c:	68fb      	ldr	r3, [r7, #12]
 803505e:	2200      	movs	r2, #0
 8035060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8035064:	68fb      	ldr	r3, [r7, #12]
 8035066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803506a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803506c:	68fb      	ldr	r3, [r7, #12]
 803506e:	689b      	ldr	r3, [r3, #8]
 8035070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035074:	d108      	bne.n	8035088 <HAL_UART_Receive+0x10c>
 8035076:	68fb      	ldr	r3, [r7, #12]
 8035078:	691b      	ldr	r3, [r3, #16]
 803507a:	2b00      	cmp	r3, #0
 803507c:	d104      	bne.n	8035088 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 803507e:	2300      	movs	r3, #0
 8035080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8035082:	68bb      	ldr	r3, [r7, #8]
 8035084:	61bb      	str	r3, [r7, #24]
 8035086:	e003      	b.n	8035090 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8035088:	68bb      	ldr	r3, [r7, #8]
 803508a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 803508c:	2300      	movs	r3, #0
 803508e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8035090:	68fb      	ldr	r3, [r7, #12]
 8035092:	2200      	movs	r2, #0
 8035094:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8035098:	e032      	b.n	8035100 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 803509a:	683b      	ldr	r3, [r7, #0]
 803509c:	9300      	str	r3, [sp, #0]
 803509e:	697b      	ldr	r3, [r7, #20]
 80350a0:	2200      	movs	r2, #0
 80350a2:	2120      	movs	r1, #32
 80350a4:	68f8      	ldr	r0, [r7, #12]
 80350a6:	f001 fb44 	bl	8036732 <UART_WaitOnFlagUntilTimeout>
 80350aa:	4603      	mov	r3, r0
 80350ac:	2b00      	cmp	r3, #0
 80350ae:	d001      	beq.n	80350b4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80350b0:	2303      	movs	r3, #3
 80350b2:	e032      	b.n	803511a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80350b4:	69fb      	ldr	r3, [r7, #28]
 80350b6:	2b00      	cmp	r3, #0
 80350b8:	d10c      	bne.n	80350d4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80350ba:	68fb      	ldr	r3, [r7, #12]
 80350bc:	681b      	ldr	r3, [r3, #0]
 80350be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80350c0:	b29a      	uxth	r2, r3
 80350c2:	8a7b      	ldrh	r3, [r7, #18]
 80350c4:	4013      	ands	r3, r2
 80350c6:	b29a      	uxth	r2, r3
 80350c8:	69bb      	ldr	r3, [r7, #24]
 80350ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80350cc:	69bb      	ldr	r3, [r7, #24]
 80350ce:	3302      	adds	r3, #2
 80350d0:	61bb      	str	r3, [r7, #24]
 80350d2:	e00c      	b.n	80350ee <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80350d4:	68fb      	ldr	r3, [r7, #12]
 80350d6:	681b      	ldr	r3, [r3, #0]
 80350d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80350da:	b2da      	uxtb	r2, r3
 80350dc:	8a7b      	ldrh	r3, [r7, #18]
 80350de:	b2db      	uxtb	r3, r3
 80350e0:	4013      	ands	r3, r2
 80350e2:	b2da      	uxtb	r2, r3
 80350e4:	69fb      	ldr	r3, [r7, #28]
 80350e6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80350e8:	69fb      	ldr	r3, [r7, #28]
 80350ea:	3301      	adds	r3, #1
 80350ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80350ee:	68fb      	ldr	r3, [r7, #12]
 80350f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80350f4:	b29b      	uxth	r3, r3
 80350f6:	3b01      	subs	r3, #1
 80350f8:	b29a      	uxth	r2, r3
 80350fa:	68fb      	ldr	r3, [r7, #12]
 80350fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8035100:	68fb      	ldr	r3, [r7, #12]
 8035102:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8035106:	b29b      	uxth	r3, r3
 8035108:	2b00      	cmp	r3, #0
 803510a:	d1c6      	bne.n	803509a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 803510c:	68fb      	ldr	r3, [r7, #12]
 803510e:	2220      	movs	r2, #32
 8035110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8035114:	2300      	movs	r3, #0
 8035116:	e000      	b.n	803511a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8035118:	2302      	movs	r3, #2
  }
}
 803511a:	4618      	mov	r0, r3
 803511c:	3720      	adds	r7, #32
 803511e:	46bd      	mov	sp, r7
 8035120:	bd80      	pop	{r7, pc}
	...

08035124 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8035124:	b480      	push	{r7}
 8035126:	b091      	sub	sp, #68	; 0x44
 8035128:	af00      	add	r7, sp, #0
 803512a:	60f8      	str	r0, [r7, #12]
 803512c:	60b9      	str	r1, [r7, #8]
 803512e:	4613      	mov	r3, r2
 8035130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8035132:	68fb      	ldr	r3, [r7, #12]
 8035134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8035138:	2b20      	cmp	r3, #32
 803513a:	f040 808c 	bne.w	8035256 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 803513e:	68bb      	ldr	r3, [r7, #8]
 8035140:	2b00      	cmp	r3, #0
 8035142:	d002      	beq.n	803514a <HAL_UART_Transmit_IT+0x26>
 8035144:	88fb      	ldrh	r3, [r7, #6]
 8035146:	2b00      	cmp	r3, #0
 8035148:	d101      	bne.n	803514e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 803514a:	2301      	movs	r3, #1
 803514c:	e084      	b.n	8035258 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 803514e:	68fb      	ldr	r3, [r7, #12]
 8035150:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8035154:	2b01      	cmp	r3, #1
 8035156:	d101      	bne.n	803515c <HAL_UART_Transmit_IT+0x38>
 8035158:	2302      	movs	r3, #2
 803515a:	e07d      	b.n	8035258 <HAL_UART_Transmit_IT+0x134>
 803515c:	68fb      	ldr	r3, [r7, #12]
 803515e:	2201      	movs	r2, #1
 8035160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8035164:	68fb      	ldr	r3, [r7, #12]
 8035166:	68ba      	ldr	r2, [r7, #8]
 8035168:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 803516a:	68fb      	ldr	r3, [r7, #12]
 803516c:	88fa      	ldrh	r2, [r7, #6]
 803516e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8035172:	68fb      	ldr	r3, [r7, #12]
 8035174:	88fa      	ldrh	r2, [r7, #6]
 8035176:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 803517a:	68fb      	ldr	r3, [r7, #12]
 803517c:	2200      	movs	r2, #0
 803517e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8035180:	68fb      	ldr	r3, [r7, #12]
 8035182:	2200      	movs	r2, #0
 8035184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8035188:	68fb      	ldr	r3, [r7, #12]
 803518a:	2221      	movs	r2, #33	; 0x21
 803518c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8035190:	68fb      	ldr	r3, [r7, #12]
 8035192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8035194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8035198:	d12e      	bne.n	80351f8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803519a:	68fb      	ldr	r3, [r7, #12]
 803519c:	689b      	ldr	r3, [r3, #8]
 803519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80351a2:	d107      	bne.n	80351b4 <HAL_UART_Transmit_IT+0x90>
 80351a4:	68fb      	ldr	r3, [r7, #12]
 80351a6:	691b      	ldr	r3, [r3, #16]
 80351a8:	2b00      	cmp	r3, #0
 80351aa:	d103      	bne.n	80351b4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80351ac:	68fb      	ldr	r3, [r7, #12]
 80351ae:	4a2d      	ldr	r2, [pc, #180]	; (8035264 <HAL_UART_Transmit_IT+0x140>)
 80351b0:	675a      	str	r2, [r3, #116]	; 0x74
 80351b2:	e002      	b.n	80351ba <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80351b4:	68fb      	ldr	r3, [r7, #12]
 80351b6:	4a2c      	ldr	r2, [pc, #176]	; (8035268 <HAL_UART_Transmit_IT+0x144>)
 80351b8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80351ba:	68fb      	ldr	r3, [r7, #12]
 80351bc:	2200      	movs	r2, #0
 80351be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80351c2:	68fb      	ldr	r3, [r7, #12]
 80351c4:	681b      	ldr	r3, [r3, #0]
 80351c6:	3308      	adds	r3, #8
 80351c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80351ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80351cc:	e853 3f00 	ldrex	r3, [r3]
 80351d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80351d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80351d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80351d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80351da:	68fb      	ldr	r3, [r7, #12]
 80351dc:	681b      	ldr	r3, [r3, #0]
 80351de:	3308      	adds	r3, #8
 80351e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80351e2:	637a      	str	r2, [r7, #52]	; 0x34
 80351e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80351e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80351e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80351ea:	e841 2300 	strex	r3, r2, [r1]
 80351ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80351f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80351f2:	2b00      	cmp	r3, #0
 80351f4:	d1e5      	bne.n	80351c2 <HAL_UART_Transmit_IT+0x9e>
 80351f6:	e02c      	b.n	8035252 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80351f8:	68fb      	ldr	r3, [r7, #12]
 80351fa:	689b      	ldr	r3, [r3, #8]
 80351fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035200:	d107      	bne.n	8035212 <HAL_UART_Transmit_IT+0xee>
 8035202:	68fb      	ldr	r3, [r7, #12]
 8035204:	691b      	ldr	r3, [r3, #16]
 8035206:	2b00      	cmp	r3, #0
 8035208:	d103      	bne.n	8035212 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 803520a:	68fb      	ldr	r3, [r7, #12]
 803520c:	4a17      	ldr	r2, [pc, #92]	; (803526c <HAL_UART_Transmit_IT+0x148>)
 803520e:	675a      	str	r2, [r3, #116]	; 0x74
 8035210:	e002      	b.n	8035218 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8035212:	68fb      	ldr	r3, [r7, #12]
 8035214:	4a16      	ldr	r2, [pc, #88]	; (8035270 <HAL_UART_Transmit_IT+0x14c>)
 8035216:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8035218:	68fb      	ldr	r3, [r7, #12]
 803521a:	2200      	movs	r2, #0
 803521c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8035220:	68fb      	ldr	r3, [r7, #12]
 8035222:	681b      	ldr	r3, [r3, #0]
 8035224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035226:	697b      	ldr	r3, [r7, #20]
 8035228:	e853 3f00 	ldrex	r3, [r3]
 803522c:	613b      	str	r3, [r7, #16]
   return(result);
 803522e:	693b      	ldr	r3, [r7, #16]
 8035230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8035234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8035236:	68fb      	ldr	r3, [r7, #12]
 8035238:	681b      	ldr	r3, [r3, #0]
 803523a:	461a      	mov	r2, r3
 803523c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803523e:	623b      	str	r3, [r7, #32]
 8035240:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035242:	69f9      	ldr	r1, [r7, #28]
 8035244:	6a3a      	ldr	r2, [r7, #32]
 8035246:	e841 2300 	strex	r3, r2, [r1]
 803524a:	61bb      	str	r3, [r7, #24]
   return(result);
 803524c:	69bb      	ldr	r3, [r7, #24]
 803524e:	2b00      	cmp	r3, #0
 8035250:	d1e6      	bne.n	8035220 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8035252:	2300      	movs	r3, #0
 8035254:	e000      	b.n	8035258 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8035256:	2302      	movs	r3, #2
  }
}
 8035258:	4618      	mov	r0, r3
 803525a:	3744      	adds	r7, #68	; 0x44
 803525c:	46bd      	mov	sp, r7
 803525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035262:	4770      	bx	lr
 8035264:	08036e6b 	.word	0x08036e6b
 8035268:	08036d8b 	.word	0x08036d8b
 803526c:	08036cc9 	.word	0x08036cc9
 8035270:	08036c11 	.word	0x08036c11

08035274 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8035274:	b580      	push	{r7, lr}
 8035276:	b08a      	sub	sp, #40	; 0x28
 8035278:	af00      	add	r7, sp, #0
 803527a:	60f8      	str	r0, [r7, #12]
 803527c:	60b9      	str	r1, [r7, #8]
 803527e:	4613      	mov	r3, r2
 8035280:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8035282:	68fb      	ldr	r3, [r7, #12]
 8035284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8035288:	2b20      	cmp	r3, #32
 803528a:	d142      	bne.n	8035312 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 803528c:	68bb      	ldr	r3, [r7, #8]
 803528e:	2b00      	cmp	r3, #0
 8035290:	d002      	beq.n	8035298 <HAL_UART_Receive_IT+0x24>
 8035292:	88fb      	ldrh	r3, [r7, #6]
 8035294:	2b00      	cmp	r3, #0
 8035296:	d101      	bne.n	803529c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8035298:	2301      	movs	r3, #1
 803529a:	e03b      	b.n	8035314 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 803529c:	68fb      	ldr	r3, [r7, #12]
 803529e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80352a2:	2b01      	cmp	r3, #1
 80352a4:	d101      	bne.n	80352aa <HAL_UART_Receive_IT+0x36>
 80352a6:	2302      	movs	r3, #2
 80352a8:	e034      	b.n	8035314 <HAL_UART_Receive_IT+0xa0>
 80352aa:	68fb      	ldr	r3, [r7, #12]
 80352ac:	2201      	movs	r2, #1
 80352ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80352b2:	68fb      	ldr	r3, [r7, #12]
 80352b4:	2200      	movs	r2, #0
 80352b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80352b8:	68fb      	ldr	r3, [r7, #12]
 80352ba:	681b      	ldr	r3, [r3, #0]
 80352bc:	4a17      	ldr	r2, [pc, #92]	; (803531c <HAL_UART_Receive_IT+0xa8>)
 80352be:	4293      	cmp	r3, r2
 80352c0:	d01f      	beq.n	8035302 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80352c2:	68fb      	ldr	r3, [r7, #12]
 80352c4:	681b      	ldr	r3, [r3, #0]
 80352c6:	685b      	ldr	r3, [r3, #4]
 80352c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80352cc:	2b00      	cmp	r3, #0
 80352ce:	d018      	beq.n	8035302 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80352d0:	68fb      	ldr	r3, [r7, #12]
 80352d2:	681b      	ldr	r3, [r3, #0]
 80352d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80352d6:	697b      	ldr	r3, [r7, #20]
 80352d8:	e853 3f00 	ldrex	r3, [r3]
 80352dc:	613b      	str	r3, [r7, #16]
   return(result);
 80352de:	693b      	ldr	r3, [r7, #16]
 80352e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80352e4:	627b      	str	r3, [r7, #36]	; 0x24
 80352e6:	68fb      	ldr	r3, [r7, #12]
 80352e8:	681b      	ldr	r3, [r3, #0]
 80352ea:	461a      	mov	r2, r3
 80352ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80352ee:	623b      	str	r3, [r7, #32]
 80352f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80352f2:	69f9      	ldr	r1, [r7, #28]
 80352f4:	6a3a      	ldr	r2, [r7, #32]
 80352f6:	e841 2300 	strex	r3, r2, [r1]
 80352fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80352fc:	69bb      	ldr	r3, [r7, #24]
 80352fe:	2b00      	cmp	r3, #0
 8035300:	d1e6      	bne.n	80352d0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8035302:	88fb      	ldrh	r3, [r7, #6]
 8035304:	461a      	mov	r2, r3
 8035306:	68b9      	ldr	r1, [r7, #8]
 8035308:	68f8      	ldr	r0, [r7, #12]
 803530a:	f001 fadb 	bl	80368c4 <UART_Start_Receive_IT>
 803530e:	4603      	mov	r3, r0
 8035310:	e000      	b.n	8035314 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8035312:	2302      	movs	r3, #2
  }
}
 8035314:	4618      	mov	r0, r3
 8035316:	3728      	adds	r7, #40	; 0x28
 8035318:	46bd      	mov	sp, r7
 803531a:	bd80      	pop	{r7, pc}
 803531c:	58000c00 	.word	0x58000c00

08035320 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8035320:	b580      	push	{r7, lr}
 8035322:	b0ba      	sub	sp, #232	; 0xe8
 8035324:	af00      	add	r7, sp, #0
 8035326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8035328:	687b      	ldr	r3, [r7, #4]
 803532a:	681b      	ldr	r3, [r3, #0]
 803532c:	69db      	ldr	r3, [r3, #28]
 803532e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8035332:	687b      	ldr	r3, [r7, #4]
 8035334:	681b      	ldr	r3, [r3, #0]
 8035336:	681b      	ldr	r3, [r3, #0]
 8035338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 803533c:	687b      	ldr	r3, [r7, #4]
 803533e:	681b      	ldr	r3, [r3, #0]
 8035340:	689b      	ldr	r3, [r3, #8]
 8035342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8035346:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 803534a:	f640 030f 	movw	r3, #2063	; 0x80f
 803534e:	4013      	ands	r3, r2
 8035350:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8035354:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8035358:	2b00      	cmp	r3, #0
 803535a:	d11b      	bne.n	8035394 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 803535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035360:	f003 0320 	and.w	r3, r3, #32
 8035364:	2b00      	cmp	r3, #0
 8035366:	d015      	beq.n	8035394 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8035368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803536c:	f003 0320 	and.w	r3, r3, #32
 8035370:	2b00      	cmp	r3, #0
 8035372:	d105      	bne.n	8035380 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8035374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 803537c:	2b00      	cmp	r3, #0
 803537e:	d009      	beq.n	8035394 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8035380:	687b      	ldr	r3, [r7, #4]
 8035382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8035384:	2b00      	cmp	r3, #0
 8035386:	f000 835a 	beq.w	8035a3e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 803538a:	687b      	ldr	r3, [r7, #4]
 803538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803538e:	6878      	ldr	r0, [r7, #4]
 8035390:	4798      	blx	r3
      }
      return;
 8035392:	e354      	b.n	8035a3e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8035394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8035398:	2b00      	cmp	r3, #0
 803539a:	f000 811f 	beq.w	80355dc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 803539e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80353a2:	4b8b      	ldr	r3, [pc, #556]	; (80355d0 <HAL_UART_IRQHandler+0x2b0>)
 80353a4:	4013      	ands	r3, r2
 80353a6:	2b00      	cmp	r3, #0
 80353a8:	d106      	bne.n	80353b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80353aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80353ae:	4b89      	ldr	r3, [pc, #548]	; (80355d4 <HAL_UART_IRQHandler+0x2b4>)
 80353b0:	4013      	ands	r3, r2
 80353b2:	2b00      	cmp	r3, #0
 80353b4:	f000 8112 	beq.w	80355dc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80353b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80353bc:	f003 0301 	and.w	r3, r3, #1
 80353c0:	2b00      	cmp	r3, #0
 80353c2:	d011      	beq.n	80353e8 <HAL_UART_IRQHandler+0xc8>
 80353c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80353c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80353cc:	2b00      	cmp	r3, #0
 80353ce:	d00b      	beq.n	80353e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80353d0:	687b      	ldr	r3, [r7, #4]
 80353d2:	681b      	ldr	r3, [r3, #0]
 80353d4:	2201      	movs	r2, #1
 80353d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80353d8:	687b      	ldr	r3, [r7, #4]
 80353da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80353de:	f043 0201 	orr.w	r2, r3, #1
 80353e2:	687b      	ldr	r3, [r7, #4]
 80353e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80353e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80353ec:	f003 0302 	and.w	r3, r3, #2
 80353f0:	2b00      	cmp	r3, #0
 80353f2:	d011      	beq.n	8035418 <HAL_UART_IRQHandler+0xf8>
 80353f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80353f8:	f003 0301 	and.w	r3, r3, #1
 80353fc:	2b00      	cmp	r3, #0
 80353fe:	d00b      	beq.n	8035418 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8035400:	687b      	ldr	r3, [r7, #4]
 8035402:	681b      	ldr	r3, [r3, #0]
 8035404:	2202      	movs	r2, #2
 8035406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8035408:	687b      	ldr	r3, [r7, #4]
 803540a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803540e:	f043 0204 	orr.w	r2, r3, #4
 8035412:	687b      	ldr	r3, [r7, #4]
 8035414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8035418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803541c:	f003 0304 	and.w	r3, r3, #4
 8035420:	2b00      	cmp	r3, #0
 8035422:	d011      	beq.n	8035448 <HAL_UART_IRQHandler+0x128>
 8035424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035428:	f003 0301 	and.w	r3, r3, #1
 803542c:	2b00      	cmp	r3, #0
 803542e:	d00b      	beq.n	8035448 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8035430:	687b      	ldr	r3, [r7, #4]
 8035432:	681b      	ldr	r3, [r3, #0]
 8035434:	2204      	movs	r2, #4
 8035436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8035438:	687b      	ldr	r3, [r7, #4]
 803543a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803543e:	f043 0202 	orr.w	r2, r3, #2
 8035442:	687b      	ldr	r3, [r7, #4]
 8035444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8035448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803544c:	f003 0308 	and.w	r3, r3, #8
 8035450:	2b00      	cmp	r3, #0
 8035452:	d017      	beq.n	8035484 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035458:	f003 0320 	and.w	r3, r3, #32
 803545c:	2b00      	cmp	r3, #0
 803545e:	d105      	bne.n	803546c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8035460:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8035464:	4b5a      	ldr	r3, [pc, #360]	; (80355d0 <HAL_UART_IRQHandler+0x2b0>)
 8035466:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8035468:	2b00      	cmp	r3, #0
 803546a:	d00b      	beq.n	8035484 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 803546c:	687b      	ldr	r3, [r7, #4]
 803546e:	681b      	ldr	r3, [r3, #0]
 8035470:	2208      	movs	r2, #8
 8035472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8035474:	687b      	ldr	r3, [r7, #4]
 8035476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803547a:	f043 0208 	orr.w	r2, r3, #8
 803547e:	687b      	ldr	r3, [r7, #4]
 8035480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8035484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803548c:	2b00      	cmp	r3, #0
 803548e:	d012      	beq.n	80354b6 <HAL_UART_IRQHandler+0x196>
 8035490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035494:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8035498:	2b00      	cmp	r3, #0
 803549a:	d00c      	beq.n	80354b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 803549c:	687b      	ldr	r3, [r7, #4]
 803549e:	681b      	ldr	r3, [r3, #0]
 80354a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80354a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80354a6:	687b      	ldr	r3, [r7, #4]
 80354a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80354ac:	f043 0220 	orr.w	r2, r3, #32
 80354b0:	687b      	ldr	r3, [r7, #4]
 80354b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80354b6:	687b      	ldr	r3, [r7, #4]
 80354b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80354bc:	2b00      	cmp	r3, #0
 80354be:	f000 82c0 	beq.w	8035a42 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80354c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80354c6:	f003 0320 	and.w	r3, r3, #32
 80354ca:	2b00      	cmp	r3, #0
 80354cc:	d013      	beq.n	80354f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80354ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80354d2:	f003 0320 	and.w	r3, r3, #32
 80354d6:	2b00      	cmp	r3, #0
 80354d8:	d105      	bne.n	80354e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80354da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80354de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80354e2:	2b00      	cmp	r3, #0
 80354e4:	d007      	beq.n	80354f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80354e6:	687b      	ldr	r3, [r7, #4]
 80354e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80354ea:	2b00      	cmp	r3, #0
 80354ec:	d003      	beq.n	80354f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80354ee:	687b      	ldr	r3, [r7, #4]
 80354f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80354f2:	6878      	ldr	r0, [r7, #4]
 80354f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80354f6:	687b      	ldr	r3, [r7, #4]
 80354f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80354fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8035500:	687b      	ldr	r3, [r7, #4]
 8035502:	681b      	ldr	r3, [r3, #0]
 8035504:	689b      	ldr	r3, [r3, #8]
 8035506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803550a:	2b40      	cmp	r3, #64	; 0x40
 803550c:	d005      	beq.n	803551a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 803550e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8035512:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8035516:	2b00      	cmp	r3, #0
 8035518:	d04f      	beq.n	80355ba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 803551a:	6878      	ldr	r0, [r7, #4]
 803551c:	f001 fafc 	bl	8036b18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035520:	687b      	ldr	r3, [r7, #4]
 8035522:	681b      	ldr	r3, [r3, #0]
 8035524:	689b      	ldr	r3, [r3, #8]
 8035526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803552a:	2b40      	cmp	r3, #64	; 0x40
 803552c:	d141      	bne.n	80355b2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803552e:	687b      	ldr	r3, [r7, #4]
 8035530:	681b      	ldr	r3, [r3, #0]
 8035532:	3308      	adds	r3, #8
 8035534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 803553c:	e853 3f00 	ldrex	r3, [r3]
 8035540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8035544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8035548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803554c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8035550:	687b      	ldr	r3, [r7, #4]
 8035552:	681b      	ldr	r3, [r3, #0]
 8035554:	3308      	adds	r3, #8
 8035556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 803555a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 803555e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8035566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 803556a:	e841 2300 	strex	r3, r2, [r1]
 803556e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8035572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8035576:	2b00      	cmp	r3, #0
 8035578:	d1d9      	bne.n	803552e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 803557a:	687b      	ldr	r3, [r7, #4]
 803557c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803557e:	2b00      	cmp	r3, #0
 8035580:	d013      	beq.n	80355aa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8035582:	687b      	ldr	r3, [r7, #4]
 8035584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035586:	4a14      	ldr	r2, [pc, #80]	; (80355d8 <HAL_UART_IRQHandler+0x2b8>)
 8035588:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 803558a:	687b      	ldr	r3, [r7, #4]
 803558c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803558e:	4618      	mov	r0, r3
 8035590:	f7f7 f95a 	bl	802c848 <HAL_DMA_Abort_IT>
 8035594:	4603      	mov	r3, r0
 8035596:	2b00      	cmp	r3, #0
 8035598:	d017      	beq.n	80355ca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 803559a:	687b      	ldr	r3, [r7, #4]
 803559c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80355a0:	687a      	ldr	r2, [r7, #4]
 80355a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80355a4:	4610      	mov	r0, r2
 80355a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355a8:	e00f      	b.n	80355ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80355aa:	6878      	ldr	r0, [r7, #4]
 80355ac:	f000 fa56 	bl	8035a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355b0:	e00b      	b.n	80355ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80355b2:	6878      	ldr	r0, [r7, #4]
 80355b4:	f000 fa52 	bl	8035a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355b8:	e007      	b.n	80355ca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80355ba:	6878      	ldr	r0, [r7, #4]
 80355bc:	f000 fa4e 	bl	8035a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80355c0:	687b      	ldr	r3, [r7, #4]
 80355c2:	2200      	movs	r2, #0
 80355c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80355c8:	e23b      	b.n	8035a42 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80355ca:	bf00      	nop
    return;
 80355cc:	e239      	b.n	8035a42 <HAL_UART_IRQHandler+0x722>
 80355ce:	bf00      	nop
 80355d0:	10000001 	.word	0x10000001
 80355d4:	04000120 	.word	0x04000120
 80355d8:	08036be5 	.word	0x08036be5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80355dc:	687b      	ldr	r3, [r7, #4]
 80355de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80355e0:	2b01      	cmp	r3, #1
 80355e2:	f040 81ce 	bne.w	8035982 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80355e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80355ea:	f003 0310 	and.w	r3, r3, #16
 80355ee:	2b00      	cmp	r3, #0
 80355f0:	f000 81c7 	beq.w	8035982 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80355f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80355f8:	f003 0310 	and.w	r3, r3, #16
 80355fc:	2b00      	cmp	r3, #0
 80355fe:	f000 81c0 	beq.w	8035982 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8035602:	687b      	ldr	r3, [r7, #4]
 8035604:	681b      	ldr	r3, [r3, #0]
 8035606:	2210      	movs	r2, #16
 8035608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803560a:	687b      	ldr	r3, [r7, #4]
 803560c:	681b      	ldr	r3, [r3, #0]
 803560e:	689b      	ldr	r3, [r3, #8]
 8035610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035614:	2b40      	cmp	r3, #64	; 0x40
 8035616:	f040 813b 	bne.w	8035890 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 803561a:	687b      	ldr	r3, [r7, #4]
 803561c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803561e:	681b      	ldr	r3, [r3, #0]
 8035620:	4a8b      	ldr	r2, [pc, #556]	; (8035850 <HAL_UART_IRQHandler+0x530>)
 8035622:	4293      	cmp	r3, r2
 8035624:	d059      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 8035626:	687b      	ldr	r3, [r7, #4]
 8035628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803562a:	681b      	ldr	r3, [r3, #0]
 803562c:	4a89      	ldr	r2, [pc, #548]	; (8035854 <HAL_UART_IRQHandler+0x534>)
 803562e:	4293      	cmp	r3, r2
 8035630:	d053      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 8035632:	687b      	ldr	r3, [r7, #4]
 8035634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035636:	681b      	ldr	r3, [r3, #0]
 8035638:	4a87      	ldr	r2, [pc, #540]	; (8035858 <HAL_UART_IRQHandler+0x538>)
 803563a:	4293      	cmp	r3, r2
 803563c:	d04d      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 803563e:	687b      	ldr	r3, [r7, #4]
 8035640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035642:	681b      	ldr	r3, [r3, #0]
 8035644:	4a85      	ldr	r2, [pc, #532]	; (803585c <HAL_UART_IRQHandler+0x53c>)
 8035646:	4293      	cmp	r3, r2
 8035648:	d047      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 803564a:	687b      	ldr	r3, [r7, #4]
 803564c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803564e:	681b      	ldr	r3, [r3, #0]
 8035650:	4a83      	ldr	r2, [pc, #524]	; (8035860 <HAL_UART_IRQHandler+0x540>)
 8035652:	4293      	cmp	r3, r2
 8035654:	d041      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 8035656:	687b      	ldr	r3, [r7, #4]
 8035658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803565a:	681b      	ldr	r3, [r3, #0]
 803565c:	4a81      	ldr	r2, [pc, #516]	; (8035864 <HAL_UART_IRQHandler+0x544>)
 803565e:	4293      	cmp	r3, r2
 8035660:	d03b      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 8035662:	687b      	ldr	r3, [r7, #4]
 8035664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035666:	681b      	ldr	r3, [r3, #0]
 8035668:	4a7f      	ldr	r2, [pc, #508]	; (8035868 <HAL_UART_IRQHandler+0x548>)
 803566a:	4293      	cmp	r3, r2
 803566c:	d035      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 803566e:	687b      	ldr	r3, [r7, #4]
 8035670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035672:	681b      	ldr	r3, [r3, #0]
 8035674:	4a7d      	ldr	r2, [pc, #500]	; (803586c <HAL_UART_IRQHandler+0x54c>)
 8035676:	4293      	cmp	r3, r2
 8035678:	d02f      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 803567a:	687b      	ldr	r3, [r7, #4]
 803567c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803567e:	681b      	ldr	r3, [r3, #0]
 8035680:	4a7b      	ldr	r2, [pc, #492]	; (8035870 <HAL_UART_IRQHandler+0x550>)
 8035682:	4293      	cmp	r3, r2
 8035684:	d029      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 8035686:	687b      	ldr	r3, [r7, #4]
 8035688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803568a:	681b      	ldr	r3, [r3, #0]
 803568c:	4a79      	ldr	r2, [pc, #484]	; (8035874 <HAL_UART_IRQHandler+0x554>)
 803568e:	4293      	cmp	r3, r2
 8035690:	d023      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 8035692:	687b      	ldr	r3, [r7, #4]
 8035694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8035696:	681b      	ldr	r3, [r3, #0]
 8035698:	4a77      	ldr	r2, [pc, #476]	; (8035878 <HAL_UART_IRQHandler+0x558>)
 803569a:	4293      	cmp	r3, r2
 803569c:	d01d      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 803569e:	687b      	ldr	r3, [r7, #4]
 80356a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356a2:	681b      	ldr	r3, [r3, #0]
 80356a4:	4a75      	ldr	r2, [pc, #468]	; (803587c <HAL_UART_IRQHandler+0x55c>)
 80356a6:	4293      	cmp	r3, r2
 80356a8:	d017      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 80356aa:	687b      	ldr	r3, [r7, #4]
 80356ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356ae:	681b      	ldr	r3, [r3, #0]
 80356b0:	4a73      	ldr	r2, [pc, #460]	; (8035880 <HAL_UART_IRQHandler+0x560>)
 80356b2:	4293      	cmp	r3, r2
 80356b4:	d011      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 80356b6:	687b      	ldr	r3, [r7, #4]
 80356b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356ba:	681b      	ldr	r3, [r3, #0]
 80356bc:	4a71      	ldr	r2, [pc, #452]	; (8035884 <HAL_UART_IRQHandler+0x564>)
 80356be:	4293      	cmp	r3, r2
 80356c0:	d00b      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 80356c2:	687b      	ldr	r3, [r7, #4]
 80356c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356c6:	681b      	ldr	r3, [r3, #0]
 80356c8:	4a6f      	ldr	r2, [pc, #444]	; (8035888 <HAL_UART_IRQHandler+0x568>)
 80356ca:	4293      	cmp	r3, r2
 80356cc:	d005      	beq.n	80356da <HAL_UART_IRQHandler+0x3ba>
 80356ce:	687b      	ldr	r3, [r7, #4]
 80356d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356d2:	681b      	ldr	r3, [r3, #0]
 80356d4:	4a6d      	ldr	r2, [pc, #436]	; (803588c <HAL_UART_IRQHandler+0x56c>)
 80356d6:	4293      	cmp	r3, r2
 80356d8:	d105      	bne.n	80356e6 <HAL_UART_IRQHandler+0x3c6>
 80356da:	687b      	ldr	r3, [r7, #4]
 80356dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356de:	681b      	ldr	r3, [r3, #0]
 80356e0:	685b      	ldr	r3, [r3, #4]
 80356e2:	b29b      	uxth	r3, r3
 80356e4:	e004      	b.n	80356f0 <HAL_UART_IRQHandler+0x3d0>
 80356e6:	687b      	ldr	r3, [r7, #4]
 80356e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80356ea:	681b      	ldr	r3, [r3, #0]
 80356ec:	685b      	ldr	r3, [r3, #4]
 80356ee:	b29b      	uxth	r3, r3
 80356f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80356f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80356f8:	2b00      	cmp	r3, #0
 80356fa:	f000 81a4 	beq.w	8035a46 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80356fe:	687b      	ldr	r3, [r7, #4]
 8035700:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8035704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035708:	429a      	cmp	r2, r3
 803570a:	f080 819c 	bcs.w	8035a46 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 803570e:	687b      	ldr	r3, [r7, #4]
 8035710:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035714:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8035718:	687b      	ldr	r3, [r7, #4]
 803571a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803571c:	69db      	ldr	r3, [r3, #28]
 803571e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8035722:	f000 8086 	beq.w	8035832 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8035726:	687b      	ldr	r3, [r7, #4]
 8035728:	681b      	ldr	r3, [r3, #0]
 803572a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803572e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8035732:	e853 3f00 	ldrex	r3, [r3]
 8035736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 803573a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 803573e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8035742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8035746:	687b      	ldr	r3, [r7, #4]
 8035748:	681b      	ldr	r3, [r3, #0]
 803574a:	461a      	mov	r2, r3
 803574c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8035750:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8035754:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035758:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 803575c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8035760:	e841 2300 	strex	r3, r2, [r1]
 8035764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8035768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803576c:	2b00      	cmp	r3, #0
 803576e:	d1da      	bne.n	8035726 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8035770:	687b      	ldr	r3, [r7, #4]
 8035772:	681b      	ldr	r3, [r3, #0]
 8035774:	3308      	adds	r3, #8
 8035776:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803577a:	e853 3f00 	ldrex	r3, [r3]
 803577e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8035780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8035782:	f023 0301 	bic.w	r3, r3, #1
 8035786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 803578a:	687b      	ldr	r3, [r7, #4]
 803578c:	681b      	ldr	r3, [r3, #0]
 803578e:	3308      	adds	r3, #8
 8035790:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8035794:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8035798:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803579a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 803579c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80357a0:	e841 2300 	strex	r3, r2, [r1]
 80357a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80357a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80357a8:	2b00      	cmp	r3, #0
 80357aa:	d1e1      	bne.n	8035770 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80357ac:	687b      	ldr	r3, [r7, #4]
 80357ae:	681b      	ldr	r3, [r3, #0]
 80357b0:	3308      	adds	r3, #8
 80357b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80357b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80357b6:	e853 3f00 	ldrex	r3, [r3]
 80357ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80357bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80357be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80357c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80357c6:	687b      	ldr	r3, [r7, #4]
 80357c8:	681b      	ldr	r3, [r3, #0]
 80357ca:	3308      	adds	r3, #8
 80357cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80357d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80357d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80357d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80357d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80357d8:	e841 2300 	strex	r3, r2, [r1]
 80357dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80357de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80357e0:	2b00      	cmp	r3, #0
 80357e2:	d1e3      	bne.n	80357ac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80357e4:	687b      	ldr	r3, [r7, #4]
 80357e6:	2220      	movs	r2, #32
 80357e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80357ec:	687b      	ldr	r3, [r7, #4]
 80357ee:	2200      	movs	r2, #0
 80357f0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80357f2:	687b      	ldr	r3, [r7, #4]
 80357f4:	681b      	ldr	r3, [r3, #0]
 80357f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80357f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80357fa:	e853 3f00 	ldrex	r3, [r3]
 80357fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8035800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8035802:	f023 0310 	bic.w	r3, r3, #16
 8035806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 803580a:	687b      	ldr	r3, [r7, #4]
 803580c:	681b      	ldr	r3, [r3, #0]
 803580e:	461a      	mov	r2, r3
 8035810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8035814:	65bb      	str	r3, [r7, #88]	; 0x58
 8035816:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035818:	6d79      	ldr	r1, [r7, #84]	; 0x54
 803581a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803581c:	e841 2300 	strex	r3, r2, [r1]
 8035820:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8035822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8035824:	2b00      	cmp	r3, #0
 8035826:	d1e4      	bne.n	80357f2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8035828:	687b      	ldr	r3, [r7, #4]
 803582a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 803582c:	4618      	mov	r0, r3
 803582e:	f7f6 fced 	bl	802c20c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8035832:	687b      	ldr	r3, [r7, #4]
 8035834:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8035838:	687b      	ldr	r3, [r7, #4]
 803583a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803583e:	b29b      	uxth	r3, r3
 8035840:	1ad3      	subs	r3, r2, r3
 8035842:	b29b      	uxth	r3, r3
 8035844:	4619      	mov	r1, r3
 8035846:	6878      	ldr	r0, [r7, #4]
 8035848:	f000 f912 	bl	8035a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 803584c:	e0fb      	b.n	8035a46 <HAL_UART_IRQHandler+0x726>
 803584e:	bf00      	nop
 8035850:	40020010 	.word	0x40020010
 8035854:	40020028 	.word	0x40020028
 8035858:	40020040 	.word	0x40020040
 803585c:	40020058 	.word	0x40020058
 8035860:	40020070 	.word	0x40020070
 8035864:	40020088 	.word	0x40020088
 8035868:	400200a0 	.word	0x400200a0
 803586c:	400200b8 	.word	0x400200b8
 8035870:	40020410 	.word	0x40020410
 8035874:	40020428 	.word	0x40020428
 8035878:	40020440 	.word	0x40020440
 803587c:	40020458 	.word	0x40020458
 8035880:	40020470 	.word	0x40020470
 8035884:	40020488 	.word	0x40020488
 8035888:	400204a0 	.word	0x400204a0
 803588c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8035890:	687b      	ldr	r3, [r7, #4]
 8035892:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8035896:	687b      	ldr	r3, [r7, #4]
 8035898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803589c:	b29b      	uxth	r3, r3
 803589e:	1ad3      	subs	r3, r2, r3
 80358a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80358a4:	687b      	ldr	r3, [r7, #4]
 80358a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80358aa:	b29b      	uxth	r3, r3
 80358ac:	2b00      	cmp	r3, #0
 80358ae:	f000 80cc 	beq.w	8035a4a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80358b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80358b6:	2b00      	cmp	r3, #0
 80358b8:	f000 80c7 	beq.w	8035a4a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80358bc:	687b      	ldr	r3, [r7, #4]
 80358be:	681b      	ldr	r3, [r3, #0]
 80358c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80358c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80358c4:	e853 3f00 	ldrex	r3, [r3]
 80358c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80358ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80358cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80358d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80358d4:	687b      	ldr	r3, [r7, #4]
 80358d6:	681b      	ldr	r3, [r3, #0]
 80358d8:	461a      	mov	r2, r3
 80358da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80358de:	647b      	str	r3, [r7, #68]	; 0x44
 80358e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80358e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80358e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80358e6:	e841 2300 	strex	r3, r2, [r1]
 80358ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80358ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80358ee:	2b00      	cmp	r3, #0
 80358f0:	d1e4      	bne.n	80358bc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80358f2:	687b      	ldr	r3, [r7, #4]
 80358f4:	681b      	ldr	r3, [r3, #0]
 80358f6:	3308      	adds	r3, #8
 80358f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80358fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80358fc:	e853 3f00 	ldrex	r3, [r3]
 8035900:	623b      	str	r3, [r7, #32]
   return(result);
 8035902:	6a3a      	ldr	r2, [r7, #32]
 8035904:	4b54      	ldr	r3, [pc, #336]	; (8035a58 <HAL_UART_IRQHandler+0x738>)
 8035906:	4013      	ands	r3, r2
 8035908:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 803590c:	687b      	ldr	r3, [r7, #4]
 803590e:	681b      	ldr	r3, [r3, #0]
 8035910:	3308      	adds	r3, #8
 8035912:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8035916:	633a      	str	r2, [r7, #48]	; 0x30
 8035918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803591a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 803591c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803591e:	e841 2300 	strex	r3, r2, [r1]
 8035922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8035924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035926:	2b00      	cmp	r3, #0
 8035928:	d1e3      	bne.n	80358f2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 803592a:	687b      	ldr	r3, [r7, #4]
 803592c:	2220      	movs	r2, #32
 803592e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8035932:	687b      	ldr	r3, [r7, #4]
 8035934:	2200      	movs	r2, #0
 8035936:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8035938:	687b      	ldr	r3, [r7, #4]
 803593a:	2200      	movs	r2, #0
 803593c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803593e:	687b      	ldr	r3, [r7, #4]
 8035940:	681b      	ldr	r3, [r3, #0]
 8035942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035944:	693b      	ldr	r3, [r7, #16]
 8035946:	e853 3f00 	ldrex	r3, [r3]
 803594a:	60fb      	str	r3, [r7, #12]
   return(result);
 803594c:	68fb      	ldr	r3, [r7, #12]
 803594e:	f023 0310 	bic.w	r3, r3, #16
 8035952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8035956:	687b      	ldr	r3, [r7, #4]
 8035958:	681b      	ldr	r3, [r3, #0]
 803595a:	461a      	mov	r2, r3
 803595c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8035960:	61fb      	str	r3, [r7, #28]
 8035962:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035964:	69b9      	ldr	r1, [r7, #24]
 8035966:	69fa      	ldr	r2, [r7, #28]
 8035968:	e841 2300 	strex	r3, r2, [r1]
 803596c:	617b      	str	r3, [r7, #20]
   return(result);
 803596e:	697b      	ldr	r3, [r7, #20]
 8035970:	2b00      	cmp	r3, #0
 8035972:	d1e4      	bne.n	803593e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8035974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8035978:	4619      	mov	r1, r3
 803597a:	6878      	ldr	r0, [r7, #4]
 803597c:	f000 f878 	bl	8035a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8035980:	e063      	b.n	8035a4a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8035982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 803598a:	2b00      	cmp	r3, #0
 803598c:	d00e      	beq.n	80359ac <HAL_UART_IRQHandler+0x68c>
 803598e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8035992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8035996:	2b00      	cmp	r3, #0
 8035998:	d008      	beq.n	80359ac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 803599a:	687b      	ldr	r3, [r7, #4]
 803599c:	681b      	ldr	r3, [r3, #0]
 803599e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80359a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80359a4:	6878      	ldr	r0, [r7, #4]
 80359a6:	f001 ff5d 	bl	8037864 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80359aa:	e051      	b.n	8035a50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80359ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80359b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80359b4:	2b00      	cmp	r3, #0
 80359b6:	d014      	beq.n	80359e2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80359b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80359bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80359c0:	2b00      	cmp	r3, #0
 80359c2:	d105      	bne.n	80359d0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80359c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80359c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80359cc:	2b00      	cmp	r3, #0
 80359ce:	d008      	beq.n	80359e2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80359d0:	687b      	ldr	r3, [r7, #4]
 80359d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80359d4:	2b00      	cmp	r3, #0
 80359d6:	d03a      	beq.n	8035a4e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80359d8:	687b      	ldr	r3, [r7, #4]
 80359da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80359dc:	6878      	ldr	r0, [r7, #4]
 80359de:	4798      	blx	r3
    }
    return;
 80359e0:	e035      	b.n	8035a4e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80359e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80359e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80359ea:	2b00      	cmp	r3, #0
 80359ec:	d009      	beq.n	8035a02 <HAL_UART_IRQHandler+0x6e2>
 80359ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80359f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80359f6:	2b00      	cmp	r3, #0
 80359f8:	d003      	beq.n	8035a02 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80359fa:	6878      	ldr	r0, [r7, #4]
 80359fc:	f001 faaa 	bl	8036f54 <UART_EndTransmit_IT>
    return;
 8035a00:	e026      	b.n	8035a50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8035a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8035a0a:	2b00      	cmp	r3, #0
 8035a0c:	d009      	beq.n	8035a22 <HAL_UART_IRQHandler+0x702>
 8035a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035a12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8035a16:	2b00      	cmp	r3, #0
 8035a18:	d003      	beq.n	8035a22 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8035a1a:	6878      	ldr	r0, [r7, #4]
 8035a1c:	f001 ff36 	bl	803788c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8035a20:	e016      	b.n	8035a50 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8035a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8035a2a:	2b00      	cmp	r3, #0
 8035a2c:	d010      	beq.n	8035a50 <HAL_UART_IRQHandler+0x730>
 8035a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035a32:	2b00      	cmp	r3, #0
 8035a34:	da0c      	bge.n	8035a50 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8035a36:	6878      	ldr	r0, [r7, #4]
 8035a38:	f001 ff1e 	bl	8037878 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8035a3c:	e008      	b.n	8035a50 <HAL_UART_IRQHandler+0x730>
      return;
 8035a3e:	bf00      	nop
 8035a40:	e006      	b.n	8035a50 <HAL_UART_IRQHandler+0x730>
    return;
 8035a42:	bf00      	nop
 8035a44:	e004      	b.n	8035a50 <HAL_UART_IRQHandler+0x730>
      return;
 8035a46:	bf00      	nop
 8035a48:	e002      	b.n	8035a50 <HAL_UART_IRQHandler+0x730>
      return;
 8035a4a:	bf00      	nop
 8035a4c:	e000      	b.n	8035a50 <HAL_UART_IRQHandler+0x730>
    return;
 8035a4e:	bf00      	nop
  }
}
 8035a50:	37e8      	adds	r7, #232	; 0xe8
 8035a52:	46bd      	mov	sp, r7
 8035a54:	bd80      	pop	{r7, pc}
 8035a56:	bf00      	nop
 8035a58:	effffffe 	.word	0xeffffffe

08035a5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8035a5c:	b480      	push	{r7}
 8035a5e:	b083      	sub	sp, #12
 8035a60:	af00      	add	r7, sp, #0
 8035a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8035a64:	bf00      	nop
 8035a66:	370c      	adds	r7, #12
 8035a68:	46bd      	mov	sp, r7
 8035a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a6e:	4770      	bx	lr

08035a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8035a70:	b480      	push	{r7}
 8035a72:	b083      	sub	sp, #12
 8035a74:	af00      	add	r7, sp, #0
 8035a76:	6078      	str	r0, [r7, #4]
 8035a78:	460b      	mov	r3, r1
 8035a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8035a7c:	bf00      	nop
 8035a7e:	370c      	adds	r7, #12
 8035a80:	46bd      	mov	sp, r7
 8035a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035a86:	4770      	bx	lr

08035a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8035a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8035a8c:	b092      	sub	sp, #72	; 0x48
 8035a8e:	af00      	add	r7, sp, #0
 8035a90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8035a92:	2300      	movs	r3, #0
 8035a94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8035a98:	697b      	ldr	r3, [r7, #20]
 8035a9a:	689a      	ldr	r2, [r3, #8]
 8035a9c:	697b      	ldr	r3, [r7, #20]
 8035a9e:	691b      	ldr	r3, [r3, #16]
 8035aa0:	431a      	orrs	r2, r3
 8035aa2:	697b      	ldr	r3, [r7, #20]
 8035aa4:	695b      	ldr	r3, [r3, #20]
 8035aa6:	431a      	orrs	r2, r3
 8035aa8:	697b      	ldr	r3, [r7, #20]
 8035aaa:	69db      	ldr	r3, [r3, #28]
 8035aac:	4313      	orrs	r3, r2
 8035aae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8035ab0:	697b      	ldr	r3, [r7, #20]
 8035ab2:	681b      	ldr	r3, [r3, #0]
 8035ab4:	681a      	ldr	r2, [r3, #0]
 8035ab6:	4bbe      	ldr	r3, [pc, #760]	; (8035db0 <UART_SetConfig+0x328>)
 8035ab8:	4013      	ands	r3, r2
 8035aba:	697a      	ldr	r2, [r7, #20]
 8035abc:	6812      	ldr	r2, [r2, #0]
 8035abe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8035ac0:	430b      	orrs	r3, r1
 8035ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8035ac4:	697b      	ldr	r3, [r7, #20]
 8035ac6:	681b      	ldr	r3, [r3, #0]
 8035ac8:	685b      	ldr	r3, [r3, #4]
 8035aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8035ace:	697b      	ldr	r3, [r7, #20]
 8035ad0:	68da      	ldr	r2, [r3, #12]
 8035ad2:	697b      	ldr	r3, [r7, #20]
 8035ad4:	681b      	ldr	r3, [r3, #0]
 8035ad6:	430a      	orrs	r2, r1
 8035ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8035ada:	697b      	ldr	r3, [r7, #20]
 8035adc:	699b      	ldr	r3, [r3, #24]
 8035ade:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8035ae0:	697b      	ldr	r3, [r7, #20]
 8035ae2:	681b      	ldr	r3, [r3, #0]
 8035ae4:	4ab3      	ldr	r2, [pc, #716]	; (8035db4 <UART_SetConfig+0x32c>)
 8035ae6:	4293      	cmp	r3, r2
 8035ae8:	d004      	beq.n	8035af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8035aea:	697b      	ldr	r3, [r7, #20]
 8035aec:	6a1b      	ldr	r3, [r3, #32]
 8035aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8035af0:	4313      	orrs	r3, r2
 8035af2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8035af4:	697b      	ldr	r3, [r7, #20]
 8035af6:	681b      	ldr	r3, [r3, #0]
 8035af8:	689a      	ldr	r2, [r3, #8]
 8035afa:	4baf      	ldr	r3, [pc, #700]	; (8035db8 <UART_SetConfig+0x330>)
 8035afc:	4013      	ands	r3, r2
 8035afe:	697a      	ldr	r2, [r7, #20]
 8035b00:	6812      	ldr	r2, [r2, #0]
 8035b02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8035b04:	430b      	orrs	r3, r1
 8035b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8035b08:	697b      	ldr	r3, [r7, #20]
 8035b0a:	681b      	ldr	r3, [r3, #0]
 8035b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035b0e:	f023 010f 	bic.w	r1, r3, #15
 8035b12:	697b      	ldr	r3, [r7, #20]
 8035b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8035b16:	697b      	ldr	r3, [r7, #20]
 8035b18:	681b      	ldr	r3, [r3, #0]
 8035b1a:	430a      	orrs	r2, r1
 8035b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8035b1e:	697b      	ldr	r3, [r7, #20]
 8035b20:	681b      	ldr	r3, [r3, #0]
 8035b22:	4aa6      	ldr	r2, [pc, #664]	; (8035dbc <UART_SetConfig+0x334>)
 8035b24:	4293      	cmp	r3, r2
 8035b26:	d177      	bne.n	8035c18 <UART_SetConfig+0x190>
 8035b28:	4ba5      	ldr	r3, [pc, #660]	; (8035dc0 <UART_SetConfig+0x338>)
 8035b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035b30:	2b28      	cmp	r3, #40	; 0x28
 8035b32:	d86d      	bhi.n	8035c10 <UART_SetConfig+0x188>
 8035b34:	a201      	add	r2, pc, #4	; (adr r2, 8035b3c <UART_SetConfig+0xb4>)
 8035b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035b3a:	bf00      	nop
 8035b3c:	08035be1 	.word	0x08035be1
 8035b40:	08035c11 	.word	0x08035c11
 8035b44:	08035c11 	.word	0x08035c11
 8035b48:	08035c11 	.word	0x08035c11
 8035b4c:	08035c11 	.word	0x08035c11
 8035b50:	08035c11 	.word	0x08035c11
 8035b54:	08035c11 	.word	0x08035c11
 8035b58:	08035c11 	.word	0x08035c11
 8035b5c:	08035be9 	.word	0x08035be9
 8035b60:	08035c11 	.word	0x08035c11
 8035b64:	08035c11 	.word	0x08035c11
 8035b68:	08035c11 	.word	0x08035c11
 8035b6c:	08035c11 	.word	0x08035c11
 8035b70:	08035c11 	.word	0x08035c11
 8035b74:	08035c11 	.word	0x08035c11
 8035b78:	08035c11 	.word	0x08035c11
 8035b7c:	08035bf1 	.word	0x08035bf1
 8035b80:	08035c11 	.word	0x08035c11
 8035b84:	08035c11 	.word	0x08035c11
 8035b88:	08035c11 	.word	0x08035c11
 8035b8c:	08035c11 	.word	0x08035c11
 8035b90:	08035c11 	.word	0x08035c11
 8035b94:	08035c11 	.word	0x08035c11
 8035b98:	08035c11 	.word	0x08035c11
 8035b9c:	08035bf9 	.word	0x08035bf9
 8035ba0:	08035c11 	.word	0x08035c11
 8035ba4:	08035c11 	.word	0x08035c11
 8035ba8:	08035c11 	.word	0x08035c11
 8035bac:	08035c11 	.word	0x08035c11
 8035bb0:	08035c11 	.word	0x08035c11
 8035bb4:	08035c11 	.word	0x08035c11
 8035bb8:	08035c11 	.word	0x08035c11
 8035bbc:	08035c01 	.word	0x08035c01
 8035bc0:	08035c11 	.word	0x08035c11
 8035bc4:	08035c11 	.word	0x08035c11
 8035bc8:	08035c11 	.word	0x08035c11
 8035bcc:	08035c11 	.word	0x08035c11
 8035bd0:	08035c11 	.word	0x08035c11
 8035bd4:	08035c11 	.word	0x08035c11
 8035bd8:	08035c11 	.word	0x08035c11
 8035bdc:	08035c09 	.word	0x08035c09
 8035be0:	2301      	movs	r3, #1
 8035be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035be6:	e222      	b.n	803602e <UART_SetConfig+0x5a6>
 8035be8:	2304      	movs	r3, #4
 8035bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bee:	e21e      	b.n	803602e <UART_SetConfig+0x5a6>
 8035bf0:	2308      	movs	r3, #8
 8035bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bf6:	e21a      	b.n	803602e <UART_SetConfig+0x5a6>
 8035bf8:	2310      	movs	r3, #16
 8035bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035bfe:	e216      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c00:	2320      	movs	r3, #32
 8035c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c06:	e212      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c08:	2340      	movs	r3, #64	; 0x40
 8035c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c0e:	e20e      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c10:	2380      	movs	r3, #128	; 0x80
 8035c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c16:	e20a      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c18:	697b      	ldr	r3, [r7, #20]
 8035c1a:	681b      	ldr	r3, [r3, #0]
 8035c1c:	4a69      	ldr	r2, [pc, #420]	; (8035dc4 <UART_SetConfig+0x33c>)
 8035c1e:	4293      	cmp	r3, r2
 8035c20:	d130      	bne.n	8035c84 <UART_SetConfig+0x1fc>
 8035c22:	4b67      	ldr	r3, [pc, #412]	; (8035dc0 <UART_SetConfig+0x338>)
 8035c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c26:	f003 0307 	and.w	r3, r3, #7
 8035c2a:	2b05      	cmp	r3, #5
 8035c2c:	d826      	bhi.n	8035c7c <UART_SetConfig+0x1f4>
 8035c2e:	a201      	add	r2, pc, #4	; (adr r2, 8035c34 <UART_SetConfig+0x1ac>)
 8035c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035c34:	08035c4d 	.word	0x08035c4d
 8035c38:	08035c55 	.word	0x08035c55
 8035c3c:	08035c5d 	.word	0x08035c5d
 8035c40:	08035c65 	.word	0x08035c65
 8035c44:	08035c6d 	.word	0x08035c6d
 8035c48:	08035c75 	.word	0x08035c75
 8035c4c:	2300      	movs	r3, #0
 8035c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c52:	e1ec      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c54:	2304      	movs	r3, #4
 8035c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c5a:	e1e8      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c5c:	2308      	movs	r3, #8
 8035c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c62:	e1e4      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c64:	2310      	movs	r3, #16
 8035c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c6a:	e1e0      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c6c:	2320      	movs	r3, #32
 8035c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c72:	e1dc      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c74:	2340      	movs	r3, #64	; 0x40
 8035c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c7a:	e1d8      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c7c:	2380      	movs	r3, #128	; 0x80
 8035c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035c82:	e1d4      	b.n	803602e <UART_SetConfig+0x5a6>
 8035c84:	697b      	ldr	r3, [r7, #20]
 8035c86:	681b      	ldr	r3, [r3, #0]
 8035c88:	4a4f      	ldr	r2, [pc, #316]	; (8035dc8 <UART_SetConfig+0x340>)
 8035c8a:	4293      	cmp	r3, r2
 8035c8c:	d130      	bne.n	8035cf0 <UART_SetConfig+0x268>
 8035c8e:	4b4c      	ldr	r3, [pc, #304]	; (8035dc0 <UART_SetConfig+0x338>)
 8035c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c92:	f003 0307 	and.w	r3, r3, #7
 8035c96:	2b05      	cmp	r3, #5
 8035c98:	d826      	bhi.n	8035ce8 <UART_SetConfig+0x260>
 8035c9a:	a201      	add	r2, pc, #4	; (adr r2, 8035ca0 <UART_SetConfig+0x218>)
 8035c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035ca0:	08035cb9 	.word	0x08035cb9
 8035ca4:	08035cc1 	.word	0x08035cc1
 8035ca8:	08035cc9 	.word	0x08035cc9
 8035cac:	08035cd1 	.word	0x08035cd1
 8035cb0:	08035cd9 	.word	0x08035cd9
 8035cb4:	08035ce1 	.word	0x08035ce1
 8035cb8:	2300      	movs	r3, #0
 8035cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cbe:	e1b6      	b.n	803602e <UART_SetConfig+0x5a6>
 8035cc0:	2304      	movs	r3, #4
 8035cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cc6:	e1b2      	b.n	803602e <UART_SetConfig+0x5a6>
 8035cc8:	2308      	movs	r3, #8
 8035cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cce:	e1ae      	b.n	803602e <UART_SetConfig+0x5a6>
 8035cd0:	2310      	movs	r3, #16
 8035cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cd6:	e1aa      	b.n	803602e <UART_SetConfig+0x5a6>
 8035cd8:	2320      	movs	r3, #32
 8035cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cde:	e1a6      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ce0:	2340      	movs	r3, #64	; 0x40
 8035ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ce6:	e1a2      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ce8:	2380      	movs	r3, #128	; 0x80
 8035cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035cee:	e19e      	b.n	803602e <UART_SetConfig+0x5a6>
 8035cf0:	697b      	ldr	r3, [r7, #20]
 8035cf2:	681b      	ldr	r3, [r3, #0]
 8035cf4:	4a35      	ldr	r2, [pc, #212]	; (8035dcc <UART_SetConfig+0x344>)
 8035cf6:	4293      	cmp	r3, r2
 8035cf8:	d130      	bne.n	8035d5c <UART_SetConfig+0x2d4>
 8035cfa:	4b31      	ldr	r3, [pc, #196]	; (8035dc0 <UART_SetConfig+0x338>)
 8035cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035cfe:	f003 0307 	and.w	r3, r3, #7
 8035d02:	2b05      	cmp	r3, #5
 8035d04:	d826      	bhi.n	8035d54 <UART_SetConfig+0x2cc>
 8035d06:	a201      	add	r2, pc, #4	; (adr r2, 8035d0c <UART_SetConfig+0x284>)
 8035d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d0c:	08035d25 	.word	0x08035d25
 8035d10:	08035d2d 	.word	0x08035d2d
 8035d14:	08035d35 	.word	0x08035d35
 8035d18:	08035d3d 	.word	0x08035d3d
 8035d1c:	08035d45 	.word	0x08035d45
 8035d20:	08035d4d 	.word	0x08035d4d
 8035d24:	2300      	movs	r3, #0
 8035d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d2a:	e180      	b.n	803602e <UART_SetConfig+0x5a6>
 8035d2c:	2304      	movs	r3, #4
 8035d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d32:	e17c      	b.n	803602e <UART_SetConfig+0x5a6>
 8035d34:	2308      	movs	r3, #8
 8035d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d3a:	e178      	b.n	803602e <UART_SetConfig+0x5a6>
 8035d3c:	2310      	movs	r3, #16
 8035d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d42:	e174      	b.n	803602e <UART_SetConfig+0x5a6>
 8035d44:	2320      	movs	r3, #32
 8035d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d4a:	e170      	b.n	803602e <UART_SetConfig+0x5a6>
 8035d4c:	2340      	movs	r3, #64	; 0x40
 8035d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d52:	e16c      	b.n	803602e <UART_SetConfig+0x5a6>
 8035d54:	2380      	movs	r3, #128	; 0x80
 8035d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d5a:	e168      	b.n	803602e <UART_SetConfig+0x5a6>
 8035d5c:	697b      	ldr	r3, [r7, #20]
 8035d5e:	681b      	ldr	r3, [r3, #0]
 8035d60:	4a1b      	ldr	r2, [pc, #108]	; (8035dd0 <UART_SetConfig+0x348>)
 8035d62:	4293      	cmp	r3, r2
 8035d64:	d142      	bne.n	8035dec <UART_SetConfig+0x364>
 8035d66:	4b16      	ldr	r3, [pc, #88]	; (8035dc0 <UART_SetConfig+0x338>)
 8035d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035d6a:	f003 0307 	and.w	r3, r3, #7
 8035d6e:	2b05      	cmp	r3, #5
 8035d70:	d838      	bhi.n	8035de4 <UART_SetConfig+0x35c>
 8035d72:	a201      	add	r2, pc, #4	; (adr r2, 8035d78 <UART_SetConfig+0x2f0>)
 8035d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035d78:	08035d91 	.word	0x08035d91
 8035d7c:	08035d99 	.word	0x08035d99
 8035d80:	08035da1 	.word	0x08035da1
 8035d84:	08035da9 	.word	0x08035da9
 8035d88:	08035dd5 	.word	0x08035dd5
 8035d8c:	08035ddd 	.word	0x08035ddd
 8035d90:	2300      	movs	r3, #0
 8035d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d96:	e14a      	b.n	803602e <UART_SetConfig+0x5a6>
 8035d98:	2304      	movs	r3, #4
 8035d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035d9e:	e146      	b.n	803602e <UART_SetConfig+0x5a6>
 8035da0:	2308      	movs	r3, #8
 8035da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035da6:	e142      	b.n	803602e <UART_SetConfig+0x5a6>
 8035da8:	2310      	movs	r3, #16
 8035daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dae:	e13e      	b.n	803602e <UART_SetConfig+0x5a6>
 8035db0:	cfff69f3 	.word	0xcfff69f3
 8035db4:	58000c00 	.word	0x58000c00
 8035db8:	11fff4ff 	.word	0x11fff4ff
 8035dbc:	40011000 	.word	0x40011000
 8035dc0:	58024400 	.word	0x58024400
 8035dc4:	40004400 	.word	0x40004400
 8035dc8:	40004800 	.word	0x40004800
 8035dcc:	40004c00 	.word	0x40004c00
 8035dd0:	40005000 	.word	0x40005000
 8035dd4:	2320      	movs	r3, #32
 8035dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dda:	e128      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ddc:	2340      	movs	r3, #64	; 0x40
 8035dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035de2:	e124      	b.n	803602e <UART_SetConfig+0x5a6>
 8035de4:	2380      	movs	r3, #128	; 0x80
 8035de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035dea:	e120      	b.n	803602e <UART_SetConfig+0x5a6>
 8035dec:	697b      	ldr	r3, [r7, #20]
 8035dee:	681b      	ldr	r3, [r3, #0]
 8035df0:	4acb      	ldr	r2, [pc, #812]	; (8036120 <UART_SetConfig+0x698>)
 8035df2:	4293      	cmp	r3, r2
 8035df4:	d176      	bne.n	8035ee4 <UART_SetConfig+0x45c>
 8035df6:	4bcb      	ldr	r3, [pc, #812]	; (8036124 <UART_SetConfig+0x69c>)
 8035df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8035dfe:	2b28      	cmp	r3, #40	; 0x28
 8035e00:	d86c      	bhi.n	8035edc <UART_SetConfig+0x454>
 8035e02:	a201      	add	r2, pc, #4	; (adr r2, 8035e08 <UART_SetConfig+0x380>)
 8035e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035e08:	08035ead 	.word	0x08035ead
 8035e0c:	08035edd 	.word	0x08035edd
 8035e10:	08035edd 	.word	0x08035edd
 8035e14:	08035edd 	.word	0x08035edd
 8035e18:	08035edd 	.word	0x08035edd
 8035e1c:	08035edd 	.word	0x08035edd
 8035e20:	08035edd 	.word	0x08035edd
 8035e24:	08035edd 	.word	0x08035edd
 8035e28:	08035eb5 	.word	0x08035eb5
 8035e2c:	08035edd 	.word	0x08035edd
 8035e30:	08035edd 	.word	0x08035edd
 8035e34:	08035edd 	.word	0x08035edd
 8035e38:	08035edd 	.word	0x08035edd
 8035e3c:	08035edd 	.word	0x08035edd
 8035e40:	08035edd 	.word	0x08035edd
 8035e44:	08035edd 	.word	0x08035edd
 8035e48:	08035ebd 	.word	0x08035ebd
 8035e4c:	08035edd 	.word	0x08035edd
 8035e50:	08035edd 	.word	0x08035edd
 8035e54:	08035edd 	.word	0x08035edd
 8035e58:	08035edd 	.word	0x08035edd
 8035e5c:	08035edd 	.word	0x08035edd
 8035e60:	08035edd 	.word	0x08035edd
 8035e64:	08035edd 	.word	0x08035edd
 8035e68:	08035ec5 	.word	0x08035ec5
 8035e6c:	08035edd 	.word	0x08035edd
 8035e70:	08035edd 	.word	0x08035edd
 8035e74:	08035edd 	.word	0x08035edd
 8035e78:	08035edd 	.word	0x08035edd
 8035e7c:	08035edd 	.word	0x08035edd
 8035e80:	08035edd 	.word	0x08035edd
 8035e84:	08035edd 	.word	0x08035edd
 8035e88:	08035ecd 	.word	0x08035ecd
 8035e8c:	08035edd 	.word	0x08035edd
 8035e90:	08035edd 	.word	0x08035edd
 8035e94:	08035edd 	.word	0x08035edd
 8035e98:	08035edd 	.word	0x08035edd
 8035e9c:	08035edd 	.word	0x08035edd
 8035ea0:	08035edd 	.word	0x08035edd
 8035ea4:	08035edd 	.word	0x08035edd
 8035ea8:	08035ed5 	.word	0x08035ed5
 8035eac:	2301      	movs	r3, #1
 8035eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eb2:	e0bc      	b.n	803602e <UART_SetConfig+0x5a6>
 8035eb4:	2304      	movs	r3, #4
 8035eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eba:	e0b8      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ebc:	2308      	movs	r3, #8
 8035ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ec2:	e0b4      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ec4:	2310      	movs	r3, #16
 8035ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eca:	e0b0      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ecc:	2320      	movs	r3, #32
 8035ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ed2:	e0ac      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ed4:	2340      	movs	r3, #64	; 0x40
 8035ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035eda:	e0a8      	b.n	803602e <UART_SetConfig+0x5a6>
 8035edc:	2380      	movs	r3, #128	; 0x80
 8035ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ee2:	e0a4      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ee4:	697b      	ldr	r3, [r7, #20]
 8035ee6:	681b      	ldr	r3, [r3, #0]
 8035ee8:	4a8f      	ldr	r2, [pc, #572]	; (8036128 <UART_SetConfig+0x6a0>)
 8035eea:	4293      	cmp	r3, r2
 8035eec:	d130      	bne.n	8035f50 <UART_SetConfig+0x4c8>
 8035eee:	4b8d      	ldr	r3, [pc, #564]	; (8036124 <UART_SetConfig+0x69c>)
 8035ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035ef2:	f003 0307 	and.w	r3, r3, #7
 8035ef6:	2b05      	cmp	r3, #5
 8035ef8:	d826      	bhi.n	8035f48 <UART_SetConfig+0x4c0>
 8035efa:	a201      	add	r2, pc, #4	; (adr r2, 8035f00 <UART_SetConfig+0x478>)
 8035efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035f00:	08035f19 	.word	0x08035f19
 8035f04:	08035f21 	.word	0x08035f21
 8035f08:	08035f29 	.word	0x08035f29
 8035f0c:	08035f31 	.word	0x08035f31
 8035f10:	08035f39 	.word	0x08035f39
 8035f14:	08035f41 	.word	0x08035f41
 8035f18:	2300      	movs	r3, #0
 8035f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f1e:	e086      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f20:	2304      	movs	r3, #4
 8035f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f26:	e082      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f28:	2308      	movs	r3, #8
 8035f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f2e:	e07e      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f30:	2310      	movs	r3, #16
 8035f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f36:	e07a      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f38:	2320      	movs	r3, #32
 8035f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f3e:	e076      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f40:	2340      	movs	r3, #64	; 0x40
 8035f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f46:	e072      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f48:	2380      	movs	r3, #128	; 0x80
 8035f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f4e:	e06e      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f50:	697b      	ldr	r3, [r7, #20]
 8035f52:	681b      	ldr	r3, [r3, #0]
 8035f54:	4a75      	ldr	r2, [pc, #468]	; (803612c <UART_SetConfig+0x6a4>)
 8035f56:	4293      	cmp	r3, r2
 8035f58:	d130      	bne.n	8035fbc <UART_SetConfig+0x534>
 8035f5a:	4b72      	ldr	r3, [pc, #456]	; (8036124 <UART_SetConfig+0x69c>)
 8035f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035f5e:	f003 0307 	and.w	r3, r3, #7
 8035f62:	2b05      	cmp	r3, #5
 8035f64:	d826      	bhi.n	8035fb4 <UART_SetConfig+0x52c>
 8035f66:	a201      	add	r2, pc, #4	; (adr r2, 8035f6c <UART_SetConfig+0x4e4>)
 8035f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035f6c:	08035f85 	.word	0x08035f85
 8035f70:	08035f8d 	.word	0x08035f8d
 8035f74:	08035f95 	.word	0x08035f95
 8035f78:	08035f9d 	.word	0x08035f9d
 8035f7c:	08035fa5 	.word	0x08035fa5
 8035f80:	08035fad 	.word	0x08035fad
 8035f84:	2300      	movs	r3, #0
 8035f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f8a:	e050      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f8c:	2304      	movs	r3, #4
 8035f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f92:	e04c      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f94:	2308      	movs	r3, #8
 8035f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035f9a:	e048      	b.n	803602e <UART_SetConfig+0x5a6>
 8035f9c:	2310      	movs	r3, #16
 8035f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fa2:	e044      	b.n	803602e <UART_SetConfig+0x5a6>
 8035fa4:	2320      	movs	r3, #32
 8035fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035faa:	e040      	b.n	803602e <UART_SetConfig+0x5a6>
 8035fac:	2340      	movs	r3, #64	; 0x40
 8035fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fb2:	e03c      	b.n	803602e <UART_SetConfig+0x5a6>
 8035fb4:	2380      	movs	r3, #128	; 0x80
 8035fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035fba:	e038      	b.n	803602e <UART_SetConfig+0x5a6>
 8035fbc:	697b      	ldr	r3, [r7, #20]
 8035fbe:	681b      	ldr	r3, [r3, #0]
 8035fc0:	4a5b      	ldr	r2, [pc, #364]	; (8036130 <UART_SetConfig+0x6a8>)
 8035fc2:	4293      	cmp	r3, r2
 8035fc4:	d130      	bne.n	8036028 <UART_SetConfig+0x5a0>
 8035fc6:	4b57      	ldr	r3, [pc, #348]	; (8036124 <UART_SetConfig+0x69c>)
 8035fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8035fca:	f003 0307 	and.w	r3, r3, #7
 8035fce:	2b05      	cmp	r3, #5
 8035fd0:	d826      	bhi.n	8036020 <UART_SetConfig+0x598>
 8035fd2:	a201      	add	r2, pc, #4	; (adr r2, 8035fd8 <UART_SetConfig+0x550>)
 8035fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8035fd8:	08035ff1 	.word	0x08035ff1
 8035fdc:	08035ff9 	.word	0x08035ff9
 8035fe0:	08036001 	.word	0x08036001
 8035fe4:	08036009 	.word	0x08036009
 8035fe8:	08036011 	.word	0x08036011
 8035fec:	08036019 	.word	0x08036019
 8035ff0:	2302      	movs	r3, #2
 8035ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ff6:	e01a      	b.n	803602e <UART_SetConfig+0x5a6>
 8035ff8:	2304      	movs	r3, #4
 8035ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8035ffe:	e016      	b.n	803602e <UART_SetConfig+0x5a6>
 8036000:	2308      	movs	r3, #8
 8036002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8036006:	e012      	b.n	803602e <UART_SetConfig+0x5a6>
 8036008:	2310      	movs	r3, #16
 803600a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803600e:	e00e      	b.n	803602e <UART_SetConfig+0x5a6>
 8036010:	2320      	movs	r3, #32
 8036012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8036016:	e00a      	b.n	803602e <UART_SetConfig+0x5a6>
 8036018:	2340      	movs	r3, #64	; 0x40
 803601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 803601e:	e006      	b.n	803602e <UART_SetConfig+0x5a6>
 8036020:	2380      	movs	r3, #128	; 0x80
 8036022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8036026:	e002      	b.n	803602e <UART_SetConfig+0x5a6>
 8036028:	2380      	movs	r3, #128	; 0x80
 803602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 803602e:	697b      	ldr	r3, [r7, #20]
 8036030:	681b      	ldr	r3, [r3, #0]
 8036032:	4a3f      	ldr	r2, [pc, #252]	; (8036130 <UART_SetConfig+0x6a8>)
 8036034:	4293      	cmp	r3, r2
 8036036:	f040 80f8 	bne.w	803622a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 803603a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803603e:	2b20      	cmp	r3, #32
 8036040:	dc46      	bgt.n	80360d0 <UART_SetConfig+0x648>
 8036042:	2b02      	cmp	r3, #2
 8036044:	f2c0 8082 	blt.w	803614c <UART_SetConfig+0x6c4>
 8036048:	3b02      	subs	r3, #2
 803604a:	2b1e      	cmp	r3, #30
 803604c:	d87e      	bhi.n	803614c <UART_SetConfig+0x6c4>
 803604e:	a201      	add	r2, pc, #4	; (adr r2, 8036054 <UART_SetConfig+0x5cc>)
 8036050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8036054:	080360d7 	.word	0x080360d7
 8036058:	0803614d 	.word	0x0803614d
 803605c:	080360df 	.word	0x080360df
 8036060:	0803614d 	.word	0x0803614d
 8036064:	0803614d 	.word	0x0803614d
 8036068:	0803614d 	.word	0x0803614d
 803606c:	080360ef 	.word	0x080360ef
 8036070:	0803614d 	.word	0x0803614d
 8036074:	0803614d 	.word	0x0803614d
 8036078:	0803614d 	.word	0x0803614d
 803607c:	0803614d 	.word	0x0803614d
 8036080:	0803614d 	.word	0x0803614d
 8036084:	0803614d 	.word	0x0803614d
 8036088:	0803614d 	.word	0x0803614d
 803608c:	080360ff 	.word	0x080360ff
 8036090:	0803614d 	.word	0x0803614d
 8036094:	0803614d 	.word	0x0803614d
 8036098:	0803614d 	.word	0x0803614d
 803609c:	0803614d 	.word	0x0803614d
 80360a0:	0803614d 	.word	0x0803614d
 80360a4:	0803614d 	.word	0x0803614d
 80360a8:	0803614d 	.word	0x0803614d
 80360ac:	0803614d 	.word	0x0803614d
 80360b0:	0803614d 	.word	0x0803614d
 80360b4:	0803614d 	.word	0x0803614d
 80360b8:	0803614d 	.word	0x0803614d
 80360bc:	0803614d 	.word	0x0803614d
 80360c0:	0803614d 	.word	0x0803614d
 80360c4:	0803614d 	.word	0x0803614d
 80360c8:	0803614d 	.word	0x0803614d
 80360cc:	0803613f 	.word	0x0803613f
 80360d0:	2b40      	cmp	r3, #64	; 0x40
 80360d2:	d037      	beq.n	8036144 <UART_SetConfig+0x6bc>
 80360d4:	e03a      	b.n	803614c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80360d6:	f7fc fcbf 	bl	8032a58 <HAL_RCCEx_GetD3PCLK1Freq>
 80360da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80360dc:	e03c      	b.n	8036158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80360de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80360e2:	4618      	mov	r0, r3
 80360e4:	f7fc fcce 	bl	8032a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80360e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80360ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80360ec:	e034      	b.n	8036158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80360ee:	f107 0318 	add.w	r3, r7, #24
 80360f2:	4618      	mov	r0, r3
 80360f4:	f7fc fe1a 	bl	8032d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80360f8:	69fb      	ldr	r3, [r7, #28]
 80360fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80360fc:	e02c      	b.n	8036158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80360fe:	4b09      	ldr	r3, [pc, #36]	; (8036124 <UART_SetConfig+0x69c>)
 8036100:	681b      	ldr	r3, [r3, #0]
 8036102:	f003 0320 	and.w	r3, r3, #32
 8036106:	2b00      	cmp	r3, #0
 8036108:	d016      	beq.n	8036138 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803610a:	4b06      	ldr	r3, [pc, #24]	; (8036124 <UART_SetConfig+0x69c>)
 803610c:	681b      	ldr	r3, [r3, #0]
 803610e:	08db      	lsrs	r3, r3, #3
 8036110:	f003 0303 	and.w	r3, r3, #3
 8036114:	4a07      	ldr	r2, [pc, #28]	; (8036134 <UART_SetConfig+0x6ac>)
 8036116:	fa22 f303 	lsr.w	r3, r2, r3
 803611a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 803611c:	e01c      	b.n	8036158 <UART_SetConfig+0x6d0>
 803611e:	bf00      	nop
 8036120:	40011400 	.word	0x40011400
 8036124:	58024400 	.word	0x58024400
 8036128:	40007800 	.word	0x40007800
 803612c:	40007c00 	.word	0x40007c00
 8036130:	58000c00 	.word	0x58000c00
 8036134:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8036138:	4b9d      	ldr	r3, [pc, #628]	; (80363b0 <UART_SetConfig+0x928>)
 803613a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803613c:	e00c      	b.n	8036158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803613e:	4b9d      	ldr	r3, [pc, #628]	; (80363b4 <UART_SetConfig+0x92c>)
 8036140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036142:	e009      	b.n	8036158 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8036144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8036148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803614a:	e005      	b.n	8036158 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 803614c:	2300      	movs	r3, #0
 803614e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8036150:	2301      	movs	r3, #1
 8036152:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036156:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8036158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803615a:	2b00      	cmp	r3, #0
 803615c:	f000 81de 	beq.w	803651c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8036160:	697b      	ldr	r3, [r7, #20]
 8036162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036164:	4a94      	ldr	r2, [pc, #592]	; (80363b8 <UART_SetConfig+0x930>)
 8036166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803616a:	461a      	mov	r2, r3
 803616c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803616e:	fbb3 f3f2 	udiv	r3, r3, r2
 8036172:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8036174:	697b      	ldr	r3, [r7, #20]
 8036176:	685a      	ldr	r2, [r3, #4]
 8036178:	4613      	mov	r3, r2
 803617a:	005b      	lsls	r3, r3, #1
 803617c:	4413      	add	r3, r2
 803617e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036180:	429a      	cmp	r2, r3
 8036182:	d305      	bcc.n	8036190 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8036184:	697b      	ldr	r3, [r7, #20]
 8036186:	685b      	ldr	r3, [r3, #4]
 8036188:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 803618a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803618c:	429a      	cmp	r2, r3
 803618e:	d903      	bls.n	8036198 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8036190:	2301      	movs	r3, #1
 8036192:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8036196:	e1c1      	b.n	803651c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8036198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803619a:	2200      	movs	r2, #0
 803619c:	60bb      	str	r3, [r7, #8]
 803619e:	60fa      	str	r2, [r7, #12]
 80361a0:	697b      	ldr	r3, [r7, #20]
 80361a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80361a4:	4a84      	ldr	r2, [pc, #528]	; (80363b8 <UART_SetConfig+0x930>)
 80361a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80361aa:	b29b      	uxth	r3, r3
 80361ac:	2200      	movs	r2, #0
 80361ae:	603b      	str	r3, [r7, #0]
 80361b0:	607a      	str	r2, [r7, #4]
 80361b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80361b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80361ba:	f7ea f8e1 	bl	8020380 <__aeabi_uldivmod>
 80361be:	4602      	mov	r2, r0
 80361c0:	460b      	mov	r3, r1
 80361c2:	4610      	mov	r0, r2
 80361c4:	4619      	mov	r1, r3
 80361c6:	f04f 0200 	mov.w	r2, #0
 80361ca:	f04f 0300 	mov.w	r3, #0
 80361ce:	020b      	lsls	r3, r1, #8
 80361d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80361d4:	0202      	lsls	r2, r0, #8
 80361d6:	6979      	ldr	r1, [r7, #20]
 80361d8:	6849      	ldr	r1, [r1, #4]
 80361da:	0849      	lsrs	r1, r1, #1
 80361dc:	2000      	movs	r0, #0
 80361de:	460c      	mov	r4, r1
 80361e0:	4605      	mov	r5, r0
 80361e2:	eb12 0804 	adds.w	r8, r2, r4
 80361e6:	eb43 0905 	adc.w	r9, r3, r5
 80361ea:	697b      	ldr	r3, [r7, #20]
 80361ec:	685b      	ldr	r3, [r3, #4]
 80361ee:	2200      	movs	r2, #0
 80361f0:	469a      	mov	sl, r3
 80361f2:	4693      	mov	fp, r2
 80361f4:	4652      	mov	r2, sl
 80361f6:	465b      	mov	r3, fp
 80361f8:	4640      	mov	r0, r8
 80361fa:	4649      	mov	r1, r9
 80361fc:	f7ea f8c0 	bl	8020380 <__aeabi_uldivmod>
 8036200:	4602      	mov	r2, r0
 8036202:	460b      	mov	r3, r1
 8036204:	4613      	mov	r3, r2
 8036206:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8036208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803620a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803620e:	d308      	bcc.n	8036222 <UART_SetConfig+0x79a>
 8036210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036216:	d204      	bcs.n	8036222 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8036218:	697b      	ldr	r3, [r7, #20]
 803621a:	681b      	ldr	r3, [r3, #0]
 803621c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803621e:	60da      	str	r2, [r3, #12]
 8036220:	e17c      	b.n	803651c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8036222:	2301      	movs	r3, #1
 8036224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8036228:	e178      	b.n	803651c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 803622a:	697b      	ldr	r3, [r7, #20]
 803622c:	69db      	ldr	r3, [r3, #28]
 803622e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8036232:	f040 80c5 	bne.w	80363c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8036236:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 803623a:	2b20      	cmp	r3, #32
 803623c:	dc48      	bgt.n	80362d0 <UART_SetConfig+0x848>
 803623e:	2b00      	cmp	r3, #0
 8036240:	db7b      	blt.n	803633a <UART_SetConfig+0x8b2>
 8036242:	2b20      	cmp	r3, #32
 8036244:	d879      	bhi.n	803633a <UART_SetConfig+0x8b2>
 8036246:	a201      	add	r2, pc, #4	; (adr r2, 803624c <UART_SetConfig+0x7c4>)
 8036248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803624c:	080362d7 	.word	0x080362d7
 8036250:	080362df 	.word	0x080362df
 8036254:	0803633b 	.word	0x0803633b
 8036258:	0803633b 	.word	0x0803633b
 803625c:	080362e7 	.word	0x080362e7
 8036260:	0803633b 	.word	0x0803633b
 8036264:	0803633b 	.word	0x0803633b
 8036268:	0803633b 	.word	0x0803633b
 803626c:	080362f7 	.word	0x080362f7
 8036270:	0803633b 	.word	0x0803633b
 8036274:	0803633b 	.word	0x0803633b
 8036278:	0803633b 	.word	0x0803633b
 803627c:	0803633b 	.word	0x0803633b
 8036280:	0803633b 	.word	0x0803633b
 8036284:	0803633b 	.word	0x0803633b
 8036288:	0803633b 	.word	0x0803633b
 803628c:	08036307 	.word	0x08036307
 8036290:	0803633b 	.word	0x0803633b
 8036294:	0803633b 	.word	0x0803633b
 8036298:	0803633b 	.word	0x0803633b
 803629c:	0803633b 	.word	0x0803633b
 80362a0:	0803633b 	.word	0x0803633b
 80362a4:	0803633b 	.word	0x0803633b
 80362a8:	0803633b 	.word	0x0803633b
 80362ac:	0803633b 	.word	0x0803633b
 80362b0:	0803633b 	.word	0x0803633b
 80362b4:	0803633b 	.word	0x0803633b
 80362b8:	0803633b 	.word	0x0803633b
 80362bc:	0803633b 	.word	0x0803633b
 80362c0:	0803633b 	.word	0x0803633b
 80362c4:	0803633b 	.word	0x0803633b
 80362c8:	0803633b 	.word	0x0803633b
 80362cc:	0803632d 	.word	0x0803632d
 80362d0:	2b40      	cmp	r3, #64	; 0x40
 80362d2:	d02e      	beq.n	8036332 <UART_SetConfig+0x8aa>
 80362d4:	e031      	b.n	803633a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80362d6:	f7fb fc4d 	bl	8031b74 <HAL_RCC_GetPCLK1Freq>
 80362da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80362dc:	e033      	b.n	8036346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80362de:	f7fb fc5f 	bl	8031ba0 <HAL_RCC_GetPCLK2Freq>
 80362e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80362e4:	e02f      	b.n	8036346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80362e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80362ea:	4618      	mov	r0, r3
 80362ec:	f7fc fbca 	bl	8032a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80362f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80362f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80362f4:	e027      	b.n	8036346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80362f6:	f107 0318 	add.w	r3, r7, #24
 80362fa:	4618      	mov	r0, r3
 80362fc:	f7fc fd16 	bl	8032d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8036300:	69fb      	ldr	r3, [r7, #28]
 8036302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036304:	e01f      	b.n	8036346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8036306:	4b2d      	ldr	r3, [pc, #180]	; (80363bc <UART_SetConfig+0x934>)
 8036308:	681b      	ldr	r3, [r3, #0]
 803630a:	f003 0320 	and.w	r3, r3, #32
 803630e:	2b00      	cmp	r3, #0
 8036310:	d009      	beq.n	8036326 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8036312:	4b2a      	ldr	r3, [pc, #168]	; (80363bc <UART_SetConfig+0x934>)
 8036314:	681b      	ldr	r3, [r3, #0]
 8036316:	08db      	lsrs	r3, r3, #3
 8036318:	f003 0303 	and.w	r3, r3, #3
 803631c:	4a24      	ldr	r2, [pc, #144]	; (80363b0 <UART_SetConfig+0x928>)
 803631e:	fa22 f303 	lsr.w	r3, r2, r3
 8036322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8036324:	e00f      	b.n	8036346 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8036326:	4b22      	ldr	r3, [pc, #136]	; (80363b0 <UART_SetConfig+0x928>)
 8036328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 803632a:	e00c      	b.n	8036346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 803632c:	4b21      	ldr	r3, [pc, #132]	; (80363b4 <UART_SetConfig+0x92c>)
 803632e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036330:	e009      	b.n	8036346 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8036332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8036336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036338:	e005      	b.n	8036346 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 803633a:	2300      	movs	r3, #0
 803633c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 803633e:	2301      	movs	r3, #1
 8036340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8036344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8036346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036348:	2b00      	cmp	r3, #0
 803634a:	f000 80e7 	beq.w	803651c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 803634e:	697b      	ldr	r3, [r7, #20]
 8036350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036352:	4a19      	ldr	r2, [pc, #100]	; (80363b8 <UART_SetConfig+0x930>)
 8036354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8036358:	461a      	mov	r2, r3
 803635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803635c:	fbb3 f3f2 	udiv	r3, r3, r2
 8036360:	005a      	lsls	r2, r3, #1
 8036362:	697b      	ldr	r3, [r7, #20]
 8036364:	685b      	ldr	r3, [r3, #4]
 8036366:	085b      	lsrs	r3, r3, #1
 8036368:	441a      	add	r2, r3
 803636a:	697b      	ldr	r3, [r7, #20]
 803636c:	685b      	ldr	r3, [r3, #4]
 803636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8036372:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8036374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036376:	2b0f      	cmp	r3, #15
 8036378:	d916      	bls.n	80363a8 <UART_SetConfig+0x920>
 803637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8036380:	d212      	bcs.n	80363a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8036382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036384:	b29b      	uxth	r3, r3
 8036386:	f023 030f 	bic.w	r3, r3, #15
 803638a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 803638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803638e:	085b      	lsrs	r3, r3, #1
 8036390:	b29b      	uxth	r3, r3
 8036392:	f003 0307 	and.w	r3, r3, #7
 8036396:	b29a      	uxth	r2, r3
 8036398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 803639a:	4313      	orrs	r3, r2
 803639c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 803639e:	697b      	ldr	r3, [r7, #20]
 80363a0:	681b      	ldr	r3, [r3, #0]
 80363a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80363a4:	60da      	str	r2, [r3, #12]
 80363a6:	e0b9      	b.n	803651c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80363a8:	2301      	movs	r3, #1
 80363aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80363ae:	e0b5      	b.n	803651c <UART_SetConfig+0xa94>
 80363b0:	03d09000 	.word	0x03d09000
 80363b4:	003d0900 	.word	0x003d0900
 80363b8:	08058530 	.word	0x08058530
 80363bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80363c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80363c4:	2b20      	cmp	r3, #32
 80363c6:	dc49      	bgt.n	803645c <UART_SetConfig+0x9d4>
 80363c8:	2b00      	cmp	r3, #0
 80363ca:	db7c      	blt.n	80364c6 <UART_SetConfig+0xa3e>
 80363cc:	2b20      	cmp	r3, #32
 80363ce:	d87a      	bhi.n	80364c6 <UART_SetConfig+0xa3e>
 80363d0:	a201      	add	r2, pc, #4	; (adr r2, 80363d8 <UART_SetConfig+0x950>)
 80363d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80363d6:	bf00      	nop
 80363d8:	08036463 	.word	0x08036463
 80363dc:	0803646b 	.word	0x0803646b
 80363e0:	080364c7 	.word	0x080364c7
 80363e4:	080364c7 	.word	0x080364c7
 80363e8:	08036473 	.word	0x08036473
 80363ec:	080364c7 	.word	0x080364c7
 80363f0:	080364c7 	.word	0x080364c7
 80363f4:	080364c7 	.word	0x080364c7
 80363f8:	08036483 	.word	0x08036483
 80363fc:	080364c7 	.word	0x080364c7
 8036400:	080364c7 	.word	0x080364c7
 8036404:	080364c7 	.word	0x080364c7
 8036408:	080364c7 	.word	0x080364c7
 803640c:	080364c7 	.word	0x080364c7
 8036410:	080364c7 	.word	0x080364c7
 8036414:	080364c7 	.word	0x080364c7
 8036418:	08036493 	.word	0x08036493
 803641c:	080364c7 	.word	0x080364c7
 8036420:	080364c7 	.word	0x080364c7
 8036424:	080364c7 	.word	0x080364c7
 8036428:	080364c7 	.word	0x080364c7
 803642c:	080364c7 	.word	0x080364c7
 8036430:	080364c7 	.word	0x080364c7
 8036434:	080364c7 	.word	0x080364c7
 8036438:	080364c7 	.word	0x080364c7
 803643c:	080364c7 	.word	0x080364c7
 8036440:	080364c7 	.word	0x080364c7
 8036444:	080364c7 	.word	0x080364c7
 8036448:	080364c7 	.word	0x080364c7
 803644c:	080364c7 	.word	0x080364c7
 8036450:	080364c7 	.word	0x080364c7
 8036454:	080364c7 	.word	0x080364c7
 8036458:	080364b9 	.word	0x080364b9
 803645c:	2b40      	cmp	r3, #64	; 0x40
 803645e:	d02e      	beq.n	80364be <UART_SetConfig+0xa36>
 8036460:	e031      	b.n	80364c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8036462:	f7fb fb87 	bl	8031b74 <HAL_RCC_GetPCLK1Freq>
 8036466:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036468:	e033      	b.n	80364d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 803646a:	f7fb fb99 	bl	8031ba0 <HAL_RCC_GetPCLK2Freq>
 803646e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8036470:	e02f      	b.n	80364d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8036472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8036476:	4618      	mov	r0, r3
 8036478:	f7fc fb04 	bl	8032a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 803647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803647e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036480:	e027      	b.n	80364d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8036482:	f107 0318 	add.w	r3, r7, #24
 8036486:	4618      	mov	r0, r3
 8036488:	f7fc fc50 	bl	8032d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 803648c:	69fb      	ldr	r3, [r7, #28]
 803648e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8036490:	e01f      	b.n	80364d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8036492:	4b2d      	ldr	r3, [pc, #180]	; (8036548 <UART_SetConfig+0xac0>)
 8036494:	681b      	ldr	r3, [r3, #0]
 8036496:	f003 0320 	and.w	r3, r3, #32
 803649a:	2b00      	cmp	r3, #0
 803649c:	d009      	beq.n	80364b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 803649e:	4b2a      	ldr	r3, [pc, #168]	; (8036548 <UART_SetConfig+0xac0>)
 80364a0:	681b      	ldr	r3, [r3, #0]
 80364a2:	08db      	lsrs	r3, r3, #3
 80364a4:	f003 0303 	and.w	r3, r3, #3
 80364a8:	4a28      	ldr	r2, [pc, #160]	; (803654c <UART_SetConfig+0xac4>)
 80364aa:	fa22 f303 	lsr.w	r3, r2, r3
 80364ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80364b0:	e00f      	b.n	80364d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80364b2:	4b26      	ldr	r3, [pc, #152]	; (803654c <UART_SetConfig+0xac4>)
 80364b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80364b6:	e00c      	b.n	80364d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80364b8:	4b25      	ldr	r3, [pc, #148]	; (8036550 <UART_SetConfig+0xac8>)
 80364ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80364bc:	e009      	b.n	80364d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80364be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80364c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80364c4:	e005      	b.n	80364d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80364c6:	2300      	movs	r3, #0
 80364c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80364ca:	2301      	movs	r3, #1
 80364cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80364d0:	bf00      	nop
    }

    if (pclk != 0U)
 80364d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80364d4:	2b00      	cmp	r3, #0
 80364d6:	d021      	beq.n	803651c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80364d8:	697b      	ldr	r3, [r7, #20]
 80364da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80364dc:	4a1d      	ldr	r2, [pc, #116]	; (8036554 <UART_SetConfig+0xacc>)
 80364de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80364e2:	461a      	mov	r2, r3
 80364e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80364e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80364ea:	697b      	ldr	r3, [r7, #20]
 80364ec:	685b      	ldr	r3, [r3, #4]
 80364ee:	085b      	lsrs	r3, r3, #1
 80364f0:	441a      	add	r2, r3
 80364f2:	697b      	ldr	r3, [r7, #20]
 80364f4:	685b      	ldr	r3, [r3, #4]
 80364f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80364fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80364fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80364fe:	2b0f      	cmp	r3, #15
 8036500:	d909      	bls.n	8036516 <UART_SetConfig+0xa8e>
 8036502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8036508:	d205      	bcs.n	8036516 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 803650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803650c:	b29a      	uxth	r2, r3
 803650e:	697b      	ldr	r3, [r7, #20]
 8036510:	681b      	ldr	r3, [r3, #0]
 8036512:	60da      	str	r2, [r3, #12]
 8036514:	e002      	b.n	803651c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8036516:	2301      	movs	r3, #1
 8036518:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 803651c:	697b      	ldr	r3, [r7, #20]
 803651e:	2201      	movs	r2, #1
 8036520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8036524:	697b      	ldr	r3, [r7, #20]
 8036526:	2201      	movs	r2, #1
 8036528:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 803652c:	697b      	ldr	r3, [r7, #20]
 803652e:	2200      	movs	r2, #0
 8036530:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8036532:	697b      	ldr	r3, [r7, #20]
 8036534:	2200      	movs	r2, #0
 8036536:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8036538:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 803653c:	4618      	mov	r0, r3
 803653e:	3748      	adds	r7, #72	; 0x48
 8036540:	46bd      	mov	sp, r7
 8036542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8036546:	bf00      	nop
 8036548:	58024400 	.word	0x58024400
 803654c:	03d09000 	.word	0x03d09000
 8036550:	003d0900 	.word	0x003d0900
 8036554:	08058530 	.word	0x08058530

08036558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8036558:	b480      	push	{r7}
 803655a:	b083      	sub	sp, #12
 803655c:	af00      	add	r7, sp, #0
 803655e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8036560:	687b      	ldr	r3, [r7, #4]
 8036562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036564:	f003 0301 	and.w	r3, r3, #1
 8036568:	2b00      	cmp	r3, #0
 803656a:	d00a      	beq.n	8036582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 803656c:	687b      	ldr	r3, [r7, #4]
 803656e:	681b      	ldr	r3, [r3, #0]
 8036570:	685b      	ldr	r3, [r3, #4]
 8036572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8036576:	687b      	ldr	r3, [r7, #4]
 8036578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803657a:	687b      	ldr	r3, [r7, #4]
 803657c:	681b      	ldr	r3, [r3, #0]
 803657e:	430a      	orrs	r2, r1
 8036580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8036582:	687b      	ldr	r3, [r7, #4]
 8036584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036586:	f003 0302 	and.w	r3, r3, #2
 803658a:	2b00      	cmp	r3, #0
 803658c:	d00a      	beq.n	80365a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 803658e:	687b      	ldr	r3, [r7, #4]
 8036590:	681b      	ldr	r3, [r3, #0]
 8036592:	685b      	ldr	r3, [r3, #4]
 8036594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8036598:	687b      	ldr	r3, [r7, #4]
 803659a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803659c:	687b      	ldr	r3, [r7, #4]
 803659e:	681b      	ldr	r3, [r3, #0]
 80365a0:	430a      	orrs	r2, r1
 80365a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80365a4:	687b      	ldr	r3, [r7, #4]
 80365a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365a8:	f003 0304 	and.w	r3, r3, #4
 80365ac:	2b00      	cmp	r3, #0
 80365ae:	d00a      	beq.n	80365c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80365b0:	687b      	ldr	r3, [r7, #4]
 80365b2:	681b      	ldr	r3, [r3, #0]
 80365b4:	685b      	ldr	r3, [r3, #4]
 80365b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80365ba:	687b      	ldr	r3, [r7, #4]
 80365bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80365be:	687b      	ldr	r3, [r7, #4]
 80365c0:	681b      	ldr	r3, [r3, #0]
 80365c2:	430a      	orrs	r2, r1
 80365c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80365c6:	687b      	ldr	r3, [r7, #4]
 80365c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365ca:	f003 0308 	and.w	r3, r3, #8
 80365ce:	2b00      	cmp	r3, #0
 80365d0:	d00a      	beq.n	80365e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80365d2:	687b      	ldr	r3, [r7, #4]
 80365d4:	681b      	ldr	r3, [r3, #0]
 80365d6:	685b      	ldr	r3, [r3, #4]
 80365d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80365dc:	687b      	ldr	r3, [r7, #4]
 80365de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80365e0:	687b      	ldr	r3, [r7, #4]
 80365e2:	681b      	ldr	r3, [r3, #0]
 80365e4:	430a      	orrs	r2, r1
 80365e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80365e8:	687b      	ldr	r3, [r7, #4]
 80365ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80365ec:	f003 0310 	and.w	r3, r3, #16
 80365f0:	2b00      	cmp	r3, #0
 80365f2:	d00a      	beq.n	803660a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80365f4:	687b      	ldr	r3, [r7, #4]
 80365f6:	681b      	ldr	r3, [r3, #0]
 80365f8:	689b      	ldr	r3, [r3, #8]
 80365fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80365fe:	687b      	ldr	r3, [r7, #4]
 8036600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8036602:	687b      	ldr	r3, [r7, #4]
 8036604:	681b      	ldr	r3, [r3, #0]
 8036606:	430a      	orrs	r2, r1
 8036608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 803660a:	687b      	ldr	r3, [r7, #4]
 803660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803660e:	f003 0320 	and.w	r3, r3, #32
 8036612:	2b00      	cmp	r3, #0
 8036614:	d00a      	beq.n	803662c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8036616:	687b      	ldr	r3, [r7, #4]
 8036618:	681b      	ldr	r3, [r3, #0]
 803661a:	689b      	ldr	r3, [r3, #8]
 803661c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8036620:	687b      	ldr	r3, [r7, #4]
 8036622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8036624:	687b      	ldr	r3, [r7, #4]
 8036626:	681b      	ldr	r3, [r3, #0]
 8036628:	430a      	orrs	r2, r1
 803662a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 803662c:	687b      	ldr	r3, [r7, #4]
 803662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036634:	2b00      	cmp	r3, #0
 8036636:	d01a      	beq.n	803666e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8036638:	687b      	ldr	r3, [r7, #4]
 803663a:	681b      	ldr	r3, [r3, #0]
 803663c:	685b      	ldr	r3, [r3, #4]
 803663e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8036642:	687b      	ldr	r3, [r7, #4]
 8036644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8036646:	687b      	ldr	r3, [r7, #4]
 8036648:	681b      	ldr	r3, [r3, #0]
 803664a:	430a      	orrs	r2, r1
 803664c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 803664e:	687b      	ldr	r3, [r7, #4]
 8036650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8036652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8036656:	d10a      	bne.n	803666e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8036658:	687b      	ldr	r3, [r7, #4]
 803665a:	681b      	ldr	r3, [r3, #0]
 803665c:	685b      	ldr	r3, [r3, #4]
 803665e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8036662:	687b      	ldr	r3, [r7, #4]
 8036664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8036666:	687b      	ldr	r3, [r7, #4]
 8036668:	681b      	ldr	r3, [r3, #0]
 803666a:	430a      	orrs	r2, r1
 803666c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 803666e:	687b      	ldr	r3, [r7, #4]
 8036670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036676:	2b00      	cmp	r3, #0
 8036678:	d00a      	beq.n	8036690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 803667a:	687b      	ldr	r3, [r7, #4]
 803667c:	681b      	ldr	r3, [r3, #0]
 803667e:	685b      	ldr	r3, [r3, #4]
 8036680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8036684:	687b      	ldr	r3, [r7, #4]
 8036686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8036688:	687b      	ldr	r3, [r7, #4]
 803668a:	681b      	ldr	r3, [r3, #0]
 803668c:	430a      	orrs	r2, r1
 803668e:	605a      	str	r2, [r3, #4]
  }
}
 8036690:	bf00      	nop
 8036692:	370c      	adds	r7, #12
 8036694:	46bd      	mov	sp, r7
 8036696:	f85d 7b04 	ldr.w	r7, [sp], #4
 803669a:	4770      	bx	lr

0803669c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 803669c:	b580      	push	{r7, lr}
 803669e:	b086      	sub	sp, #24
 80366a0:	af02      	add	r7, sp, #8
 80366a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80366a4:	687b      	ldr	r3, [r7, #4]
 80366a6:	2200      	movs	r2, #0
 80366a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80366ac:	f7f4 faec 	bl	802ac88 <HAL_GetTick>
 80366b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80366b2:	687b      	ldr	r3, [r7, #4]
 80366b4:	681b      	ldr	r3, [r3, #0]
 80366b6:	681b      	ldr	r3, [r3, #0]
 80366b8:	f003 0308 	and.w	r3, r3, #8
 80366bc:	2b08      	cmp	r3, #8
 80366be:	d10e      	bne.n	80366de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80366c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80366c4:	9300      	str	r3, [sp, #0]
 80366c6:	68fb      	ldr	r3, [r7, #12]
 80366c8:	2200      	movs	r2, #0
 80366ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80366ce:	6878      	ldr	r0, [r7, #4]
 80366d0:	f000 f82f 	bl	8036732 <UART_WaitOnFlagUntilTimeout>
 80366d4:	4603      	mov	r3, r0
 80366d6:	2b00      	cmp	r3, #0
 80366d8:	d001      	beq.n	80366de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80366da:	2303      	movs	r3, #3
 80366dc:	e025      	b.n	803672a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80366de:	687b      	ldr	r3, [r7, #4]
 80366e0:	681b      	ldr	r3, [r3, #0]
 80366e2:	681b      	ldr	r3, [r3, #0]
 80366e4:	f003 0304 	and.w	r3, r3, #4
 80366e8:	2b04      	cmp	r3, #4
 80366ea:	d10e      	bne.n	803670a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80366ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80366f0:	9300      	str	r3, [sp, #0]
 80366f2:	68fb      	ldr	r3, [r7, #12]
 80366f4:	2200      	movs	r2, #0
 80366f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80366fa:	6878      	ldr	r0, [r7, #4]
 80366fc:	f000 f819 	bl	8036732 <UART_WaitOnFlagUntilTimeout>
 8036700:	4603      	mov	r3, r0
 8036702:	2b00      	cmp	r3, #0
 8036704:	d001      	beq.n	803670a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8036706:	2303      	movs	r3, #3
 8036708:	e00f      	b.n	803672a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 803670a:	687b      	ldr	r3, [r7, #4]
 803670c:	2220      	movs	r2, #32
 803670e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8036712:	687b      	ldr	r3, [r7, #4]
 8036714:	2220      	movs	r2, #32
 8036716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803671a:	687b      	ldr	r3, [r7, #4]
 803671c:	2200      	movs	r2, #0
 803671e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8036720:	687b      	ldr	r3, [r7, #4]
 8036722:	2200      	movs	r2, #0
 8036724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8036728:	2300      	movs	r3, #0
}
 803672a:	4618      	mov	r0, r3
 803672c:	3710      	adds	r7, #16
 803672e:	46bd      	mov	sp, r7
 8036730:	bd80      	pop	{r7, pc}

08036732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8036732:	b580      	push	{r7, lr}
 8036734:	b09c      	sub	sp, #112	; 0x70
 8036736:	af00      	add	r7, sp, #0
 8036738:	60f8      	str	r0, [r7, #12]
 803673a:	60b9      	str	r1, [r7, #8]
 803673c:	603b      	str	r3, [r7, #0]
 803673e:	4613      	mov	r3, r2
 8036740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036742:	e0a9      	b.n	8036898 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8036744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 803674a:	f000 80a5 	beq.w	8036898 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 803674e:	f7f4 fa9b 	bl	802ac88 <HAL_GetTick>
 8036752:	4602      	mov	r2, r0
 8036754:	683b      	ldr	r3, [r7, #0]
 8036756:	1ad3      	subs	r3, r2, r3
 8036758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 803675a:	429a      	cmp	r2, r3
 803675c:	d302      	bcc.n	8036764 <UART_WaitOnFlagUntilTimeout+0x32>
 803675e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036760:	2b00      	cmp	r3, #0
 8036762:	d140      	bne.n	80367e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8036764:	68fb      	ldr	r3, [r7, #12]
 8036766:	681b      	ldr	r3, [r3, #0]
 8036768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803676a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803676c:	e853 3f00 	ldrex	r3, [r3]
 8036770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8036772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8036778:	667b      	str	r3, [r7, #100]	; 0x64
 803677a:	68fb      	ldr	r3, [r7, #12]
 803677c:	681b      	ldr	r3, [r3, #0]
 803677e:	461a      	mov	r2, r3
 8036780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8036782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8036784:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8036788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 803678a:	e841 2300 	strex	r3, r2, [r1]
 803678e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8036790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8036792:	2b00      	cmp	r3, #0
 8036794:	d1e6      	bne.n	8036764 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036796:	68fb      	ldr	r3, [r7, #12]
 8036798:	681b      	ldr	r3, [r3, #0]
 803679a:	3308      	adds	r3, #8
 803679c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80367a0:	e853 3f00 	ldrex	r3, [r3]
 80367a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80367a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80367a8:	f023 0301 	bic.w	r3, r3, #1
 80367ac:	663b      	str	r3, [r7, #96]	; 0x60
 80367ae:	68fb      	ldr	r3, [r7, #12]
 80367b0:	681b      	ldr	r3, [r3, #0]
 80367b2:	3308      	adds	r3, #8
 80367b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80367b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80367b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80367ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80367bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80367be:	e841 2300 	strex	r3, r2, [r1]
 80367c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80367c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80367c6:	2b00      	cmp	r3, #0
 80367c8:	d1e5      	bne.n	8036796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80367ca:	68fb      	ldr	r3, [r7, #12]
 80367cc:	2220      	movs	r2, #32
 80367ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80367d2:	68fb      	ldr	r3, [r7, #12]
 80367d4:	2220      	movs	r2, #32
 80367d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80367da:	68fb      	ldr	r3, [r7, #12]
 80367dc:	2200      	movs	r2, #0
 80367de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80367e2:	2303      	movs	r3, #3
 80367e4:	e069      	b.n	80368ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80367e6:	68fb      	ldr	r3, [r7, #12]
 80367e8:	681b      	ldr	r3, [r3, #0]
 80367ea:	681b      	ldr	r3, [r3, #0]
 80367ec:	f003 0304 	and.w	r3, r3, #4
 80367f0:	2b00      	cmp	r3, #0
 80367f2:	d051      	beq.n	8036898 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80367f4:	68fb      	ldr	r3, [r7, #12]
 80367f6:	681b      	ldr	r3, [r3, #0]
 80367f8:	69db      	ldr	r3, [r3, #28]
 80367fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80367fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8036802:	d149      	bne.n	8036898 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8036804:	68fb      	ldr	r3, [r7, #12]
 8036806:	681b      	ldr	r3, [r3, #0]
 8036808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 803680c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 803680e:	68fb      	ldr	r3, [r7, #12]
 8036810:	681b      	ldr	r3, [r3, #0]
 8036812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036816:	e853 3f00 	ldrex	r3, [r3]
 803681a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 803681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803681e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8036822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8036824:	68fb      	ldr	r3, [r7, #12]
 8036826:	681b      	ldr	r3, [r3, #0]
 8036828:	461a      	mov	r2, r3
 803682a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803682c:	637b      	str	r3, [r7, #52]	; 0x34
 803682e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8036832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036834:	e841 2300 	strex	r3, r2, [r1]
 8036838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 803683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803683c:	2b00      	cmp	r3, #0
 803683e:	d1e6      	bne.n	803680e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036840:	68fb      	ldr	r3, [r7, #12]
 8036842:	681b      	ldr	r3, [r3, #0]
 8036844:	3308      	adds	r3, #8
 8036846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036848:	697b      	ldr	r3, [r7, #20]
 803684a:	e853 3f00 	ldrex	r3, [r3]
 803684e:	613b      	str	r3, [r7, #16]
   return(result);
 8036850:	693b      	ldr	r3, [r7, #16]
 8036852:	f023 0301 	bic.w	r3, r3, #1
 8036856:	66bb      	str	r3, [r7, #104]	; 0x68
 8036858:	68fb      	ldr	r3, [r7, #12]
 803685a:	681b      	ldr	r3, [r3, #0]
 803685c:	3308      	adds	r3, #8
 803685e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8036860:	623a      	str	r2, [r7, #32]
 8036862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036864:	69f9      	ldr	r1, [r7, #28]
 8036866:	6a3a      	ldr	r2, [r7, #32]
 8036868:	e841 2300 	strex	r3, r2, [r1]
 803686c:	61bb      	str	r3, [r7, #24]
   return(result);
 803686e:	69bb      	ldr	r3, [r7, #24]
 8036870:	2b00      	cmp	r3, #0
 8036872:	d1e5      	bne.n	8036840 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8036874:	68fb      	ldr	r3, [r7, #12]
 8036876:	2220      	movs	r2, #32
 8036878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 803687c:	68fb      	ldr	r3, [r7, #12]
 803687e:	2220      	movs	r2, #32
 8036880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8036884:	68fb      	ldr	r3, [r7, #12]
 8036886:	2220      	movs	r2, #32
 8036888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 803688c:	68fb      	ldr	r3, [r7, #12]
 803688e:	2200      	movs	r2, #0
 8036890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8036894:	2303      	movs	r3, #3
 8036896:	e010      	b.n	80368ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036898:	68fb      	ldr	r3, [r7, #12]
 803689a:	681b      	ldr	r3, [r3, #0]
 803689c:	69da      	ldr	r2, [r3, #28]
 803689e:	68bb      	ldr	r3, [r7, #8]
 80368a0:	4013      	ands	r3, r2
 80368a2:	68ba      	ldr	r2, [r7, #8]
 80368a4:	429a      	cmp	r2, r3
 80368a6:	bf0c      	ite	eq
 80368a8:	2301      	moveq	r3, #1
 80368aa:	2300      	movne	r3, #0
 80368ac:	b2db      	uxtb	r3, r3
 80368ae:	461a      	mov	r2, r3
 80368b0:	79fb      	ldrb	r3, [r7, #7]
 80368b2:	429a      	cmp	r2, r3
 80368b4:	f43f af46 	beq.w	8036744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80368b8:	2300      	movs	r3, #0
}
 80368ba:	4618      	mov	r0, r3
 80368bc:	3770      	adds	r7, #112	; 0x70
 80368be:	46bd      	mov	sp, r7
 80368c0:	bd80      	pop	{r7, pc}
	...

080368c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80368c4:	b480      	push	{r7}
 80368c6:	b0a3      	sub	sp, #140	; 0x8c
 80368c8:	af00      	add	r7, sp, #0
 80368ca:	60f8      	str	r0, [r7, #12]
 80368cc:	60b9      	str	r1, [r7, #8]
 80368ce:	4613      	mov	r3, r2
 80368d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80368d2:	68fb      	ldr	r3, [r7, #12]
 80368d4:	68ba      	ldr	r2, [r7, #8]
 80368d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80368d8:	68fb      	ldr	r3, [r7, #12]
 80368da:	88fa      	ldrh	r2, [r7, #6]
 80368dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80368e0:	68fb      	ldr	r3, [r7, #12]
 80368e2:	88fa      	ldrh	r2, [r7, #6]
 80368e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80368e8:	68fb      	ldr	r3, [r7, #12]
 80368ea:	2200      	movs	r2, #0
 80368ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80368ee:	68fb      	ldr	r3, [r7, #12]
 80368f0:	689b      	ldr	r3, [r3, #8]
 80368f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80368f6:	d10e      	bne.n	8036916 <UART_Start_Receive_IT+0x52>
 80368f8:	68fb      	ldr	r3, [r7, #12]
 80368fa:	691b      	ldr	r3, [r3, #16]
 80368fc:	2b00      	cmp	r3, #0
 80368fe:	d105      	bne.n	803690c <UART_Start_Receive_IT+0x48>
 8036900:	68fb      	ldr	r3, [r7, #12]
 8036902:	f240 12ff 	movw	r2, #511	; 0x1ff
 8036906:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803690a:	e02d      	b.n	8036968 <UART_Start_Receive_IT+0xa4>
 803690c:	68fb      	ldr	r3, [r7, #12]
 803690e:	22ff      	movs	r2, #255	; 0xff
 8036910:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036914:	e028      	b.n	8036968 <UART_Start_Receive_IT+0xa4>
 8036916:	68fb      	ldr	r3, [r7, #12]
 8036918:	689b      	ldr	r3, [r3, #8]
 803691a:	2b00      	cmp	r3, #0
 803691c:	d10d      	bne.n	803693a <UART_Start_Receive_IT+0x76>
 803691e:	68fb      	ldr	r3, [r7, #12]
 8036920:	691b      	ldr	r3, [r3, #16]
 8036922:	2b00      	cmp	r3, #0
 8036924:	d104      	bne.n	8036930 <UART_Start_Receive_IT+0x6c>
 8036926:	68fb      	ldr	r3, [r7, #12]
 8036928:	22ff      	movs	r2, #255	; 0xff
 803692a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803692e:	e01b      	b.n	8036968 <UART_Start_Receive_IT+0xa4>
 8036930:	68fb      	ldr	r3, [r7, #12]
 8036932:	227f      	movs	r2, #127	; 0x7f
 8036934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036938:	e016      	b.n	8036968 <UART_Start_Receive_IT+0xa4>
 803693a:	68fb      	ldr	r3, [r7, #12]
 803693c:	689b      	ldr	r3, [r3, #8]
 803693e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8036942:	d10d      	bne.n	8036960 <UART_Start_Receive_IT+0x9c>
 8036944:	68fb      	ldr	r3, [r7, #12]
 8036946:	691b      	ldr	r3, [r3, #16]
 8036948:	2b00      	cmp	r3, #0
 803694a:	d104      	bne.n	8036956 <UART_Start_Receive_IT+0x92>
 803694c:	68fb      	ldr	r3, [r7, #12]
 803694e:	227f      	movs	r2, #127	; 0x7f
 8036950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8036954:	e008      	b.n	8036968 <UART_Start_Receive_IT+0xa4>
 8036956:	68fb      	ldr	r3, [r7, #12]
 8036958:	223f      	movs	r2, #63	; 0x3f
 803695a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 803695e:	e003      	b.n	8036968 <UART_Start_Receive_IT+0xa4>
 8036960:	68fb      	ldr	r3, [r7, #12]
 8036962:	2200      	movs	r2, #0
 8036964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036968:	68fb      	ldr	r3, [r7, #12]
 803696a:	2200      	movs	r2, #0
 803696c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8036970:	68fb      	ldr	r3, [r7, #12]
 8036972:	2222      	movs	r2, #34	; 0x22
 8036974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036978:	68fb      	ldr	r3, [r7, #12]
 803697a:	681b      	ldr	r3, [r3, #0]
 803697c:	3308      	adds	r3, #8
 803697e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8036982:	e853 3f00 	ldrex	r3, [r3]
 8036986:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8036988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 803698a:	f043 0301 	orr.w	r3, r3, #1
 803698e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8036992:	68fb      	ldr	r3, [r7, #12]
 8036994:	681b      	ldr	r3, [r3, #0]
 8036996:	3308      	adds	r3, #8
 8036998:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 803699c:	673a      	str	r2, [r7, #112]	; 0x70
 803699e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80369a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80369a4:	e841 2300 	strex	r3, r2, [r1]
 80369a8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80369aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80369ac:	2b00      	cmp	r3, #0
 80369ae:	d1e3      	bne.n	8036978 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80369b0:	68fb      	ldr	r3, [r7, #12]
 80369b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80369b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80369b8:	d153      	bne.n	8036a62 <UART_Start_Receive_IT+0x19e>
 80369ba:	68fb      	ldr	r3, [r7, #12]
 80369bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80369c0:	88fa      	ldrh	r2, [r7, #6]
 80369c2:	429a      	cmp	r2, r3
 80369c4:	d34d      	bcc.n	8036a62 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80369c6:	68fb      	ldr	r3, [r7, #12]
 80369c8:	689b      	ldr	r3, [r3, #8]
 80369ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80369ce:	d107      	bne.n	80369e0 <UART_Start_Receive_IT+0x11c>
 80369d0:	68fb      	ldr	r3, [r7, #12]
 80369d2:	691b      	ldr	r3, [r3, #16]
 80369d4:	2b00      	cmp	r3, #0
 80369d6:	d103      	bne.n	80369e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80369d8:	68fb      	ldr	r3, [r7, #12]
 80369da:	4a4b      	ldr	r2, [pc, #300]	; (8036b08 <UART_Start_Receive_IT+0x244>)
 80369dc:	671a      	str	r2, [r3, #112]	; 0x70
 80369de:	e002      	b.n	80369e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80369e0:	68fb      	ldr	r3, [r7, #12]
 80369e2:	4a4a      	ldr	r2, [pc, #296]	; (8036b0c <UART_Start_Receive_IT+0x248>)
 80369e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80369e6:	68fb      	ldr	r3, [r7, #12]
 80369e8:	2200      	movs	r2, #0
 80369ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80369ee:	68fb      	ldr	r3, [r7, #12]
 80369f0:	691b      	ldr	r3, [r3, #16]
 80369f2:	2b00      	cmp	r3, #0
 80369f4:	d01a      	beq.n	8036a2c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80369f6:	68fb      	ldr	r3, [r7, #12]
 80369f8:	681b      	ldr	r3, [r3, #0]
 80369fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80369fe:	e853 3f00 	ldrex	r3, [r3]
 8036a02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8036a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8036a0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8036a0e:	68fb      	ldr	r3, [r7, #12]
 8036a10:	681b      	ldr	r3, [r3, #0]
 8036a12:	461a      	mov	r2, r3
 8036a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8036a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8036a1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8036a1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8036a20:	e841 2300 	strex	r3, r2, [r1]
 8036a24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8036a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8036a28:	2b00      	cmp	r3, #0
 8036a2a:	d1e4      	bne.n	80369f6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8036a2c:	68fb      	ldr	r3, [r7, #12]
 8036a2e:	681b      	ldr	r3, [r3, #0]
 8036a30:	3308      	adds	r3, #8
 8036a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036a36:	e853 3f00 	ldrex	r3, [r3]
 8036a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8036a42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8036a44:	68fb      	ldr	r3, [r7, #12]
 8036a46:	681b      	ldr	r3, [r3, #0]
 8036a48:	3308      	adds	r3, #8
 8036a4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8036a4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8036a4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8036a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036a54:	e841 2300 	strex	r3, r2, [r1]
 8036a58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8036a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8036a5c:	2b00      	cmp	r3, #0
 8036a5e:	d1e5      	bne.n	8036a2c <UART_Start_Receive_IT+0x168>
 8036a60:	e04a      	b.n	8036af8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036a62:	68fb      	ldr	r3, [r7, #12]
 8036a64:	689b      	ldr	r3, [r3, #8]
 8036a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036a6a:	d107      	bne.n	8036a7c <UART_Start_Receive_IT+0x1b8>
 8036a6c:	68fb      	ldr	r3, [r7, #12]
 8036a6e:	691b      	ldr	r3, [r3, #16]
 8036a70:	2b00      	cmp	r3, #0
 8036a72:	d103      	bne.n	8036a7c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8036a74:	68fb      	ldr	r3, [r7, #12]
 8036a76:	4a26      	ldr	r2, [pc, #152]	; (8036b10 <UART_Start_Receive_IT+0x24c>)
 8036a78:	671a      	str	r2, [r3, #112]	; 0x70
 8036a7a:	e002      	b.n	8036a82 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8036a7c:	68fb      	ldr	r3, [r7, #12]
 8036a7e:	4a25      	ldr	r2, [pc, #148]	; (8036b14 <UART_Start_Receive_IT+0x250>)
 8036a80:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8036a82:	68fb      	ldr	r3, [r7, #12]
 8036a84:	2200      	movs	r2, #0
 8036a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8036a8a:	68fb      	ldr	r3, [r7, #12]
 8036a8c:	691b      	ldr	r3, [r3, #16]
 8036a8e:	2b00      	cmp	r3, #0
 8036a90:	d019      	beq.n	8036ac6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8036a92:	68fb      	ldr	r3, [r7, #12]
 8036a94:	681b      	ldr	r3, [r3, #0]
 8036a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036a9a:	e853 3f00 	ldrex	r3, [r3]
 8036a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036aa2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8036aa6:	677b      	str	r3, [r7, #116]	; 0x74
 8036aa8:	68fb      	ldr	r3, [r7, #12]
 8036aaa:	681b      	ldr	r3, [r3, #0]
 8036aac:	461a      	mov	r2, r3
 8036aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8036ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8036ab2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8036ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036ab8:	e841 2300 	strex	r3, r2, [r1]
 8036abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8036abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036ac0:	2b00      	cmp	r3, #0
 8036ac2:	d1e6      	bne.n	8036a92 <UART_Start_Receive_IT+0x1ce>
 8036ac4:	e018      	b.n	8036af8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8036ac6:	68fb      	ldr	r3, [r7, #12]
 8036ac8:	681b      	ldr	r3, [r3, #0]
 8036aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036acc:	697b      	ldr	r3, [r7, #20]
 8036ace:	e853 3f00 	ldrex	r3, [r3]
 8036ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8036ad4:	693b      	ldr	r3, [r7, #16]
 8036ad6:	f043 0320 	orr.w	r3, r3, #32
 8036ada:	67bb      	str	r3, [r7, #120]	; 0x78
 8036adc:	68fb      	ldr	r3, [r7, #12]
 8036ade:	681b      	ldr	r3, [r3, #0]
 8036ae0:	461a      	mov	r2, r3
 8036ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8036ae4:	623b      	str	r3, [r7, #32]
 8036ae6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ae8:	69f9      	ldr	r1, [r7, #28]
 8036aea:	6a3a      	ldr	r2, [r7, #32]
 8036aec:	e841 2300 	strex	r3, r2, [r1]
 8036af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8036af2:	69bb      	ldr	r3, [r7, #24]
 8036af4:	2b00      	cmp	r3, #0
 8036af6:	d1e6      	bne.n	8036ac6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8036af8:	2300      	movs	r3, #0
}
 8036afa:	4618      	mov	r0, r3
 8036afc:	378c      	adds	r7, #140	; 0x8c
 8036afe:	46bd      	mov	sp, r7
 8036b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036b04:	4770      	bx	lr
 8036b06:	bf00      	nop
 8036b08:	08037565 	.word	0x08037565
 8036b0c:	0803726d 	.word	0x0803726d
 8036b10:	0803710b 	.word	0x0803710b
 8036b14:	08036fab 	.word	0x08036fab

08036b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8036b18:	b480      	push	{r7}
 8036b1a:	b095      	sub	sp, #84	; 0x54
 8036b1c:	af00      	add	r7, sp, #0
 8036b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8036b20:	687b      	ldr	r3, [r7, #4]
 8036b22:	681b      	ldr	r3, [r3, #0]
 8036b24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036b28:	e853 3f00 	ldrex	r3, [r3]
 8036b2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8036b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036b36:	687b      	ldr	r3, [r7, #4]
 8036b38:	681b      	ldr	r3, [r3, #0]
 8036b3a:	461a      	mov	r2, r3
 8036b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8036b40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8036b44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8036b46:	e841 2300 	strex	r3, r2, [r1]
 8036b4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036b4e:	2b00      	cmp	r3, #0
 8036b50:	d1e6      	bne.n	8036b20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8036b52:	687b      	ldr	r3, [r7, #4]
 8036b54:	681b      	ldr	r3, [r3, #0]
 8036b56:	3308      	adds	r3, #8
 8036b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b5a:	6a3b      	ldr	r3, [r7, #32]
 8036b5c:	e853 3f00 	ldrex	r3, [r3]
 8036b60:	61fb      	str	r3, [r7, #28]
   return(result);
 8036b62:	69fa      	ldr	r2, [r7, #28]
 8036b64:	4b1e      	ldr	r3, [pc, #120]	; (8036be0 <UART_EndRxTransfer+0xc8>)
 8036b66:	4013      	ands	r3, r2
 8036b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8036b6a:	687b      	ldr	r3, [r7, #4]
 8036b6c:	681b      	ldr	r3, [r3, #0]
 8036b6e:	3308      	adds	r3, #8
 8036b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036b72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036b74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036b7a:	e841 2300 	strex	r3, r2, [r1]
 8036b7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036b82:	2b00      	cmp	r3, #0
 8036b84:	d1e5      	bne.n	8036b52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036b86:	687b      	ldr	r3, [r7, #4]
 8036b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8036b8a:	2b01      	cmp	r3, #1
 8036b8c:	d118      	bne.n	8036bc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036b8e:	687b      	ldr	r3, [r7, #4]
 8036b90:	681b      	ldr	r3, [r3, #0]
 8036b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b94:	68fb      	ldr	r3, [r7, #12]
 8036b96:	e853 3f00 	ldrex	r3, [r3]
 8036b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8036b9c:	68bb      	ldr	r3, [r7, #8]
 8036b9e:	f023 0310 	bic.w	r3, r3, #16
 8036ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8036ba4:	687b      	ldr	r3, [r7, #4]
 8036ba6:	681b      	ldr	r3, [r3, #0]
 8036ba8:	461a      	mov	r2, r3
 8036baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8036bac:	61bb      	str	r3, [r7, #24]
 8036bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036bb0:	6979      	ldr	r1, [r7, #20]
 8036bb2:	69ba      	ldr	r2, [r7, #24]
 8036bb4:	e841 2300 	strex	r3, r2, [r1]
 8036bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8036bba:	693b      	ldr	r3, [r7, #16]
 8036bbc:	2b00      	cmp	r3, #0
 8036bbe:	d1e6      	bne.n	8036b8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8036bc0:	687b      	ldr	r3, [r7, #4]
 8036bc2:	2220      	movs	r2, #32
 8036bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036bc8:	687b      	ldr	r3, [r7, #4]
 8036bca:	2200      	movs	r2, #0
 8036bcc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8036bce:	687b      	ldr	r3, [r7, #4]
 8036bd0:	2200      	movs	r2, #0
 8036bd2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8036bd4:	bf00      	nop
 8036bd6:	3754      	adds	r7, #84	; 0x54
 8036bd8:	46bd      	mov	sp, r7
 8036bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036bde:	4770      	bx	lr
 8036be0:	effffffe 	.word	0xeffffffe

08036be4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8036be4:	b580      	push	{r7, lr}
 8036be6:	b084      	sub	sp, #16
 8036be8:	af00      	add	r7, sp, #0
 8036bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8036bec:	687b      	ldr	r3, [r7, #4]
 8036bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036bf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8036bf2:	68fb      	ldr	r3, [r7, #12]
 8036bf4:	2200      	movs	r2, #0
 8036bf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8036bfa:	68fb      	ldr	r3, [r7, #12]
 8036bfc:	2200      	movs	r2, #0
 8036bfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036c02:	68f8      	ldr	r0, [r7, #12]
 8036c04:	f7fe ff2a 	bl	8035a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036c08:	bf00      	nop
 8036c0a:	3710      	adds	r7, #16
 8036c0c:	46bd      	mov	sp, r7
 8036c0e:	bd80      	pop	{r7, pc}

08036c10 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036c10:	b480      	push	{r7}
 8036c12:	b08f      	sub	sp, #60	; 0x3c
 8036c14:	af00      	add	r7, sp, #0
 8036c16:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036c18:	687b      	ldr	r3, [r7, #4]
 8036c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036c1e:	2b21      	cmp	r3, #33	; 0x21
 8036c20:	d14c      	bne.n	8036cbc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8036c22:	687b      	ldr	r3, [r7, #4]
 8036c24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036c28:	b29b      	uxth	r3, r3
 8036c2a:	2b00      	cmp	r3, #0
 8036c2c:	d132      	bne.n	8036c94 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036c2e:	687b      	ldr	r3, [r7, #4]
 8036c30:	681b      	ldr	r3, [r3, #0]
 8036c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c34:	6a3b      	ldr	r3, [r7, #32]
 8036c36:	e853 3f00 	ldrex	r3, [r3]
 8036c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8036c3c:	69fb      	ldr	r3, [r7, #28]
 8036c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036c42:	637b      	str	r3, [r7, #52]	; 0x34
 8036c44:	687b      	ldr	r3, [r7, #4]
 8036c46:	681b      	ldr	r3, [r3, #0]
 8036c48:	461a      	mov	r2, r3
 8036c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8036c4e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036c54:	e841 2300 	strex	r3, r2, [r1]
 8036c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036c5c:	2b00      	cmp	r3, #0
 8036c5e:	d1e6      	bne.n	8036c2e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036c60:	687b      	ldr	r3, [r7, #4]
 8036c62:	681b      	ldr	r3, [r3, #0]
 8036c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c66:	68fb      	ldr	r3, [r7, #12]
 8036c68:	e853 3f00 	ldrex	r3, [r3]
 8036c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8036c6e:	68bb      	ldr	r3, [r7, #8]
 8036c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036c74:	633b      	str	r3, [r7, #48]	; 0x30
 8036c76:	687b      	ldr	r3, [r7, #4]
 8036c78:	681b      	ldr	r3, [r3, #0]
 8036c7a:	461a      	mov	r2, r3
 8036c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036c7e:	61bb      	str	r3, [r7, #24]
 8036c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c82:	6979      	ldr	r1, [r7, #20]
 8036c84:	69ba      	ldr	r2, [r7, #24]
 8036c86:	e841 2300 	strex	r3, r2, [r1]
 8036c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8036c8c:	693b      	ldr	r3, [r7, #16]
 8036c8e:	2b00      	cmp	r3, #0
 8036c90:	d1e6      	bne.n	8036c60 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8036c92:	e013      	b.n	8036cbc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036c94:	687b      	ldr	r3, [r7, #4]
 8036c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036c98:	781a      	ldrb	r2, [r3, #0]
 8036c9a:	687b      	ldr	r3, [r7, #4]
 8036c9c:	681b      	ldr	r3, [r3, #0]
 8036c9e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8036ca0:	687b      	ldr	r3, [r7, #4]
 8036ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036ca4:	1c5a      	adds	r2, r3, #1
 8036ca6:	687b      	ldr	r3, [r7, #4]
 8036ca8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036caa:	687b      	ldr	r3, [r7, #4]
 8036cac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036cb0:	b29b      	uxth	r3, r3
 8036cb2:	3b01      	subs	r3, #1
 8036cb4:	b29a      	uxth	r2, r3
 8036cb6:	687b      	ldr	r3, [r7, #4]
 8036cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036cbc:	bf00      	nop
 8036cbe:	373c      	adds	r7, #60	; 0x3c
 8036cc0:	46bd      	mov	sp, r7
 8036cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036cc6:	4770      	bx	lr

08036cc8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8036cc8:	b480      	push	{r7}
 8036cca:	b091      	sub	sp, #68	; 0x44
 8036ccc:	af00      	add	r7, sp, #0
 8036cce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036cd0:	687b      	ldr	r3, [r7, #4]
 8036cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036cd6:	2b21      	cmp	r3, #33	; 0x21
 8036cd8:	d151      	bne.n	8036d7e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8036cda:	687b      	ldr	r3, [r7, #4]
 8036cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036ce0:	b29b      	uxth	r3, r3
 8036ce2:	2b00      	cmp	r3, #0
 8036ce4:	d132      	bne.n	8036d4c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8036ce6:	687b      	ldr	r3, [r7, #4]
 8036ce8:	681b      	ldr	r3, [r3, #0]
 8036cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036cee:	e853 3f00 	ldrex	r3, [r3]
 8036cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8036cf4:	6a3b      	ldr	r3, [r7, #32]
 8036cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8036cfc:	687b      	ldr	r3, [r7, #4]
 8036cfe:	681b      	ldr	r3, [r3, #0]
 8036d00:	461a      	mov	r2, r3
 8036d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036d04:	633b      	str	r3, [r7, #48]	; 0x30
 8036d06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036d0c:	e841 2300 	strex	r3, r2, [r1]
 8036d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036d14:	2b00      	cmp	r3, #0
 8036d16:	d1e6      	bne.n	8036ce6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036d18:	687b      	ldr	r3, [r7, #4]
 8036d1a:	681b      	ldr	r3, [r3, #0]
 8036d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d1e:	693b      	ldr	r3, [r7, #16]
 8036d20:	e853 3f00 	ldrex	r3, [r3]
 8036d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8036d26:	68fb      	ldr	r3, [r7, #12]
 8036d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8036d2e:	687b      	ldr	r3, [r7, #4]
 8036d30:	681b      	ldr	r3, [r3, #0]
 8036d32:	461a      	mov	r2, r3
 8036d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036d36:	61fb      	str	r3, [r7, #28]
 8036d38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d3a:	69b9      	ldr	r1, [r7, #24]
 8036d3c:	69fa      	ldr	r2, [r7, #28]
 8036d3e:	e841 2300 	strex	r3, r2, [r1]
 8036d42:	617b      	str	r3, [r7, #20]
   return(result);
 8036d44:	697b      	ldr	r3, [r7, #20]
 8036d46:	2b00      	cmp	r3, #0
 8036d48:	d1e6      	bne.n	8036d18 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8036d4a:	e018      	b.n	8036d7e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036d4c:	687b      	ldr	r3, [r7, #4]
 8036d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d50:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036d54:	881b      	ldrh	r3, [r3, #0]
 8036d56:	461a      	mov	r2, r3
 8036d58:	687b      	ldr	r3, [r7, #4]
 8036d5a:	681b      	ldr	r3, [r3, #0]
 8036d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036d60:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8036d62:	687b      	ldr	r3, [r7, #4]
 8036d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036d66:	1c9a      	adds	r2, r3, #2
 8036d68:	687b      	ldr	r3, [r7, #4]
 8036d6a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8036d6c:	687b      	ldr	r3, [r7, #4]
 8036d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036d72:	b29b      	uxth	r3, r3
 8036d74:	3b01      	subs	r3, #1
 8036d76:	b29a      	uxth	r2, r3
 8036d78:	687b      	ldr	r3, [r7, #4]
 8036d7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8036d7e:	bf00      	nop
 8036d80:	3744      	adds	r7, #68	; 0x44
 8036d82:	46bd      	mov	sp, r7
 8036d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036d88:	4770      	bx	lr

08036d8a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036d8a:	b480      	push	{r7}
 8036d8c:	b091      	sub	sp, #68	; 0x44
 8036d8e:	af00      	add	r7, sp, #0
 8036d90:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036d92:	687b      	ldr	r3, [r7, #4]
 8036d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036d98:	2b21      	cmp	r3, #33	; 0x21
 8036d9a:	d160      	bne.n	8036e5e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036d9c:	687b      	ldr	r3, [r7, #4]
 8036d9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036da2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036da4:	e057      	b.n	8036e56 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8036da6:	687b      	ldr	r3, [r7, #4]
 8036da8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036dac:	b29b      	uxth	r3, r3
 8036dae:	2b00      	cmp	r3, #0
 8036db0:	d133      	bne.n	8036e1a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036db2:	687b      	ldr	r3, [r7, #4]
 8036db4:	681b      	ldr	r3, [r3, #0]
 8036db6:	3308      	adds	r3, #8
 8036db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036dbc:	e853 3f00 	ldrex	r3, [r3]
 8036dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8036dc2:	6a3b      	ldr	r3, [r7, #32]
 8036dc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8036dca:	687b      	ldr	r3, [r7, #4]
 8036dcc:	681b      	ldr	r3, [r3, #0]
 8036dce:	3308      	adds	r3, #8
 8036dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8036dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8036dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036dda:	e841 2300 	strex	r3, r2, [r1]
 8036dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036de2:	2b00      	cmp	r3, #0
 8036de4:	d1e5      	bne.n	8036db2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036de6:	687b      	ldr	r3, [r7, #4]
 8036de8:	681b      	ldr	r3, [r3, #0]
 8036dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036dec:	693b      	ldr	r3, [r7, #16]
 8036dee:	e853 3f00 	ldrex	r3, [r3]
 8036df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8036df4:	68fb      	ldr	r3, [r7, #12]
 8036df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8036dfc:	687b      	ldr	r3, [r7, #4]
 8036dfe:	681b      	ldr	r3, [r3, #0]
 8036e00:	461a      	mov	r2, r3
 8036e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036e04:	61fb      	str	r3, [r7, #28]
 8036e06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036e08:	69b9      	ldr	r1, [r7, #24]
 8036e0a:	69fa      	ldr	r2, [r7, #28]
 8036e0c:	e841 2300 	strex	r3, r2, [r1]
 8036e10:	617b      	str	r3, [r7, #20]
   return(result);
 8036e12:	697b      	ldr	r3, [r7, #20]
 8036e14:	2b00      	cmp	r3, #0
 8036e16:	d1e6      	bne.n	8036de6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036e18:	e021      	b.n	8036e5e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036e1a:	687b      	ldr	r3, [r7, #4]
 8036e1c:	681b      	ldr	r3, [r3, #0]
 8036e1e:	69db      	ldr	r3, [r3, #28]
 8036e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036e24:	2b00      	cmp	r3, #0
 8036e26:	d013      	beq.n	8036e50 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8036e28:	687b      	ldr	r3, [r7, #4]
 8036e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e2c:	781a      	ldrb	r2, [r3, #0]
 8036e2e:	687b      	ldr	r3, [r7, #4]
 8036e30:	681b      	ldr	r3, [r3, #0]
 8036e32:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8036e34:	687b      	ldr	r3, [r7, #4]
 8036e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036e38:	1c5a      	adds	r2, r3, #1
 8036e3a:	687b      	ldr	r3, [r7, #4]
 8036e3c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036e3e:	687b      	ldr	r3, [r7, #4]
 8036e40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036e44:	b29b      	uxth	r3, r3
 8036e46:	3b01      	subs	r3, #1
 8036e48:	b29a      	uxth	r2, r3
 8036e4a:	687b      	ldr	r3, [r7, #4]
 8036e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036e50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036e52:	3b01      	subs	r3, #1
 8036e54:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036e56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036e58:	2b00      	cmp	r3, #0
 8036e5a:	d1a4      	bne.n	8036da6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036e5c:	e7ff      	b.n	8036e5e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8036e5e:	bf00      	nop
 8036e60:	3744      	adds	r7, #68	; 0x44
 8036e62:	46bd      	mov	sp, r7
 8036e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e68:	4770      	bx	lr

08036e6a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8036e6a:	b480      	push	{r7}
 8036e6c:	b091      	sub	sp, #68	; 0x44
 8036e6e:	af00      	add	r7, sp, #0
 8036e70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036e72:	687b      	ldr	r3, [r7, #4]
 8036e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8036e78:	2b21      	cmp	r3, #33	; 0x21
 8036e7a:	d165      	bne.n	8036f48 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036e7c:	687b      	ldr	r3, [r7, #4]
 8036e7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8036e82:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036e84:	e05c      	b.n	8036f40 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8036e86:	687b      	ldr	r3, [r7, #4]
 8036e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036e8c:	b29b      	uxth	r3, r3
 8036e8e:	2b00      	cmp	r3, #0
 8036e90:	d133      	bne.n	8036efa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8036e92:	687b      	ldr	r3, [r7, #4]
 8036e94:	681b      	ldr	r3, [r3, #0]
 8036e96:	3308      	adds	r3, #8
 8036e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036e9a:	6a3b      	ldr	r3, [r7, #32]
 8036e9c:	e853 3f00 	ldrex	r3, [r3]
 8036ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8036ea2:	69fb      	ldr	r3, [r7, #28]
 8036ea4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8036ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8036eaa:	687b      	ldr	r3, [r7, #4]
 8036eac:	681b      	ldr	r3, [r3, #0]
 8036eae:	3308      	adds	r3, #8
 8036eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036eba:	e841 2300 	strex	r3, r2, [r1]
 8036ebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036ec2:	2b00      	cmp	r3, #0
 8036ec4:	d1e5      	bne.n	8036e92 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036ec6:	687b      	ldr	r3, [r7, #4]
 8036ec8:	681b      	ldr	r3, [r3, #0]
 8036eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036ecc:	68fb      	ldr	r3, [r7, #12]
 8036ece:	e853 3f00 	ldrex	r3, [r3]
 8036ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8036ed4:	68bb      	ldr	r3, [r7, #8]
 8036ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8036eda:	633b      	str	r3, [r7, #48]	; 0x30
 8036edc:	687b      	ldr	r3, [r7, #4]
 8036ede:	681b      	ldr	r3, [r3, #0]
 8036ee0:	461a      	mov	r2, r3
 8036ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036ee4:	61bb      	str	r3, [r7, #24]
 8036ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ee8:	6979      	ldr	r1, [r7, #20]
 8036eea:	69ba      	ldr	r2, [r7, #24]
 8036eec:	e841 2300 	strex	r3, r2, [r1]
 8036ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8036ef2:	693b      	ldr	r3, [r7, #16]
 8036ef4:	2b00      	cmp	r3, #0
 8036ef6:	d1e6      	bne.n	8036ec6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8036ef8:	e026      	b.n	8036f48 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8036efa:	687b      	ldr	r3, [r7, #4]
 8036efc:	681b      	ldr	r3, [r3, #0]
 8036efe:	69db      	ldr	r3, [r3, #28]
 8036f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036f04:	2b00      	cmp	r3, #0
 8036f06:	d018      	beq.n	8036f3a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8036f08:	687b      	ldr	r3, [r7, #4]
 8036f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036f0c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8036f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036f10:	881b      	ldrh	r3, [r3, #0]
 8036f12:	461a      	mov	r2, r3
 8036f14:	687b      	ldr	r3, [r7, #4]
 8036f16:	681b      	ldr	r3, [r3, #0]
 8036f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036f1c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8036f1e:	687b      	ldr	r3, [r7, #4]
 8036f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8036f22:	1c9a      	adds	r2, r3, #2
 8036f24:	687b      	ldr	r3, [r7, #4]
 8036f26:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8036f28:	687b      	ldr	r3, [r7, #4]
 8036f2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8036f2e:	b29b      	uxth	r3, r3
 8036f30:	3b01      	subs	r3, #1
 8036f32:	b29a      	uxth	r2, r3
 8036f34:	687b      	ldr	r3, [r7, #4]
 8036f36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8036f3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036f3c:	3b01      	subs	r3, #1
 8036f3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8036f40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8036f42:	2b00      	cmp	r3, #0
 8036f44:	d19f      	bne.n	8036e86 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8036f46:	e7ff      	b.n	8036f48 <UART_TxISR_16BIT_FIFOEN+0xde>
 8036f48:	bf00      	nop
 8036f4a:	3744      	adds	r7, #68	; 0x44
 8036f4c:	46bd      	mov	sp, r7
 8036f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036f52:	4770      	bx	lr

08036f54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8036f54:	b580      	push	{r7, lr}
 8036f56:	b088      	sub	sp, #32
 8036f58:	af00      	add	r7, sp, #0
 8036f5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8036f5c:	687b      	ldr	r3, [r7, #4]
 8036f5e:	681b      	ldr	r3, [r3, #0]
 8036f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036f62:	68fb      	ldr	r3, [r7, #12]
 8036f64:	e853 3f00 	ldrex	r3, [r3]
 8036f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8036f6a:	68bb      	ldr	r3, [r7, #8]
 8036f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036f70:	61fb      	str	r3, [r7, #28]
 8036f72:	687b      	ldr	r3, [r7, #4]
 8036f74:	681b      	ldr	r3, [r3, #0]
 8036f76:	461a      	mov	r2, r3
 8036f78:	69fb      	ldr	r3, [r7, #28]
 8036f7a:	61bb      	str	r3, [r7, #24]
 8036f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036f7e:	6979      	ldr	r1, [r7, #20]
 8036f80:	69ba      	ldr	r2, [r7, #24]
 8036f82:	e841 2300 	strex	r3, r2, [r1]
 8036f86:	613b      	str	r3, [r7, #16]
   return(result);
 8036f88:	693b      	ldr	r3, [r7, #16]
 8036f8a:	2b00      	cmp	r3, #0
 8036f8c:	d1e6      	bne.n	8036f5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036f8e:	687b      	ldr	r3, [r7, #4]
 8036f90:	2220      	movs	r2, #32
 8036f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8036f96:	687b      	ldr	r3, [r7, #4]
 8036f98:	2200      	movs	r2, #0
 8036f9a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8036f9c:	6878      	ldr	r0, [r7, #4]
 8036f9e:	f7f2 fd81 	bl	8029aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036fa2:	bf00      	nop
 8036fa4:	3720      	adds	r7, #32
 8036fa6:	46bd      	mov	sp, r7
 8036fa8:	bd80      	pop	{r7, pc}

08036faa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8036faa:	b580      	push	{r7, lr}
 8036fac:	b096      	sub	sp, #88	; 0x58
 8036fae:	af00      	add	r7, sp, #0
 8036fb0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8036fb2:	687b      	ldr	r3, [r7, #4]
 8036fb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8036fb8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036fbc:	687b      	ldr	r3, [r7, #4]
 8036fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8036fc2:	2b22      	cmp	r3, #34	; 0x22
 8036fc4:	f040 8095 	bne.w	80370f2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8036fc8:	687b      	ldr	r3, [r7, #4]
 8036fca:	681b      	ldr	r3, [r3, #0]
 8036fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8036fce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8036fd2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8036fd6:	b2d9      	uxtb	r1, r3
 8036fd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8036fdc:	b2da      	uxtb	r2, r3
 8036fde:	687b      	ldr	r3, [r7, #4]
 8036fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036fe2:	400a      	ands	r2, r1
 8036fe4:	b2d2      	uxtb	r2, r2
 8036fe6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8036fe8:	687b      	ldr	r3, [r7, #4]
 8036fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8036fec:	1c5a      	adds	r2, r3, #1
 8036fee:	687b      	ldr	r3, [r7, #4]
 8036ff0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8036ff2:	687b      	ldr	r3, [r7, #4]
 8036ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8036ff8:	b29b      	uxth	r3, r3
 8036ffa:	3b01      	subs	r3, #1
 8036ffc:	b29a      	uxth	r2, r3
 8036ffe:	687b      	ldr	r3, [r7, #4]
 8037000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8037004:	687b      	ldr	r3, [r7, #4]
 8037006:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803700a:	b29b      	uxth	r3, r3
 803700c:	2b00      	cmp	r3, #0
 803700e:	d178      	bne.n	8037102 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8037010:	687b      	ldr	r3, [r7, #4]
 8037012:	681b      	ldr	r3, [r3, #0]
 8037014:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037018:	e853 3f00 	ldrex	r3, [r3]
 803701c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803701e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037020:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8037024:	653b      	str	r3, [r7, #80]	; 0x50
 8037026:	687b      	ldr	r3, [r7, #4]
 8037028:	681b      	ldr	r3, [r3, #0]
 803702a:	461a      	mov	r2, r3
 803702c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803702e:	647b      	str	r3, [r7, #68]	; 0x44
 8037030:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8037034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037036:	e841 2300 	strex	r3, r2, [r1]
 803703a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803703e:	2b00      	cmp	r3, #0
 8037040:	d1e6      	bne.n	8037010 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8037042:	687b      	ldr	r3, [r7, #4]
 8037044:	681b      	ldr	r3, [r3, #0]
 8037046:	3308      	adds	r3, #8
 8037048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803704c:	e853 3f00 	ldrex	r3, [r3]
 8037050:	623b      	str	r3, [r7, #32]
   return(result);
 8037052:	6a3b      	ldr	r3, [r7, #32]
 8037054:	f023 0301 	bic.w	r3, r3, #1
 8037058:	64fb      	str	r3, [r7, #76]	; 0x4c
 803705a:	687b      	ldr	r3, [r7, #4]
 803705c:	681b      	ldr	r3, [r3, #0]
 803705e:	3308      	adds	r3, #8
 8037060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8037062:	633a      	str	r2, [r7, #48]	; 0x30
 8037064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8037068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803706a:	e841 2300 	strex	r3, r2, [r1]
 803706e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8037070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037072:	2b00      	cmp	r3, #0
 8037074:	d1e5      	bne.n	8037042 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8037076:	687b      	ldr	r3, [r7, #4]
 8037078:	2220      	movs	r2, #32
 803707a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 803707e:	687b      	ldr	r3, [r7, #4]
 8037080:	2200      	movs	r2, #0
 8037082:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037084:	687b      	ldr	r3, [r7, #4]
 8037086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037088:	2b01      	cmp	r3, #1
 803708a:	d12e      	bne.n	80370ea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803708c:	687b      	ldr	r3, [r7, #4]
 803708e:	2200      	movs	r2, #0
 8037090:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037092:	687b      	ldr	r3, [r7, #4]
 8037094:	681b      	ldr	r3, [r3, #0]
 8037096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037098:	693b      	ldr	r3, [r7, #16]
 803709a:	e853 3f00 	ldrex	r3, [r3]
 803709e:	60fb      	str	r3, [r7, #12]
   return(result);
 80370a0:	68fb      	ldr	r3, [r7, #12]
 80370a2:	f023 0310 	bic.w	r3, r3, #16
 80370a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80370a8:	687b      	ldr	r3, [r7, #4]
 80370aa:	681b      	ldr	r3, [r3, #0]
 80370ac:	461a      	mov	r2, r3
 80370ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80370b0:	61fb      	str	r3, [r7, #28]
 80370b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80370b4:	69b9      	ldr	r1, [r7, #24]
 80370b6:	69fa      	ldr	r2, [r7, #28]
 80370b8:	e841 2300 	strex	r3, r2, [r1]
 80370bc:	617b      	str	r3, [r7, #20]
   return(result);
 80370be:	697b      	ldr	r3, [r7, #20]
 80370c0:	2b00      	cmp	r3, #0
 80370c2:	d1e6      	bne.n	8037092 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80370c4:	687b      	ldr	r3, [r7, #4]
 80370c6:	681b      	ldr	r3, [r3, #0]
 80370c8:	69db      	ldr	r3, [r3, #28]
 80370ca:	f003 0310 	and.w	r3, r3, #16
 80370ce:	2b10      	cmp	r3, #16
 80370d0:	d103      	bne.n	80370da <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80370d2:	687b      	ldr	r3, [r7, #4]
 80370d4:	681b      	ldr	r3, [r3, #0]
 80370d6:	2210      	movs	r2, #16
 80370d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80370da:	687b      	ldr	r3, [r7, #4]
 80370dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80370e0:	4619      	mov	r1, r3
 80370e2:	6878      	ldr	r0, [r7, #4]
 80370e4:	f7fe fcc4 	bl	8035a70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80370e8:	e00b      	b.n	8037102 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80370ea:	6878      	ldr	r0, [r7, #4]
 80370ec:	f7f2 fcb6 	bl	8029a5c <HAL_UART_RxCpltCallback>
}
 80370f0:	e007      	b.n	8037102 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80370f2:	687b      	ldr	r3, [r7, #4]
 80370f4:	681b      	ldr	r3, [r3, #0]
 80370f6:	699a      	ldr	r2, [r3, #24]
 80370f8:	687b      	ldr	r3, [r7, #4]
 80370fa:	681b      	ldr	r3, [r3, #0]
 80370fc:	f042 0208 	orr.w	r2, r2, #8
 8037100:	619a      	str	r2, [r3, #24]
}
 8037102:	bf00      	nop
 8037104:	3758      	adds	r7, #88	; 0x58
 8037106:	46bd      	mov	sp, r7
 8037108:	bd80      	pop	{r7, pc}

0803710a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 803710a:	b580      	push	{r7, lr}
 803710c:	b096      	sub	sp, #88	; 0x58
 803710e:	af00      	add	r7, sp, #0
 8037110:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8037112:	687b      	ldr	r3, [r7, #4]
 8037114:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8037118:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803711c:	687b      	ldr	r3, [r7, #4]
 803711e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8037122:	2b22      	cmp	r3, #34	; 0x22
 8037124:	f040 8095 	bne.w	8037252 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8037128:	687b      	ldr	r3, [r7, #4]
 803712a:	681b      	ldr	r3, [r3, #0]
 803712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803712e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8037132:	687b      	ldr	r3, [r7, #4]
 8037134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8037136:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8037138:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 803713c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8037140:	4013      	ands	r3, r2
 8037142:	b29a      	uxth	r2, r3
 8037144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037146:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8037148:	687b      	ldr	r3, [r7, #4]
 803714a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 803714c:	1c9a      	adds	r2, r3, #2
 803714e:	687b      	ldr	r3, [r7, #4]
 8037150:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8037152:	687b      	ldr	r3, [r7, #4]
 8037154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8037158:	b29b      	uxth	r3, r3
 803715a:	3b01      	subs	r3, #1
 803715c:	b29a      	uxth	r2, r3
 803715e:	687b      	ldr	r3, [r7, #4]
 8037160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8037164:	687b      	ldr	r3, [r7, #4]
 8037166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803716a:	b29b      	uxth	r3, r3
 803716c:	2b00      	cmp	r3, #0
 803716e:	d178      	bne.n	8037262 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8037170:	687b      	ldr	r3, [r7, #4]
 8037172:	681b      	ldr	r3, [r3, #0]
 8037174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037178:	e853 3f00 	ldrex	r3, [r3]
 803717c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8037184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8037186:	687b      	ldr	r3, [r7, #4]
 8037188:	681b      	ldr	r3, [r3, #0]
 803718a:	461a      	mov	r2, r3
 803718c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803718e:	643b      	str	r3, [r7, #64]	; 0x40
 8037190:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8037194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8037196:	e841 2300 	strex	r3, r2, [r1]
 803719a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803719e:	2b00      	cmp	r3, #0
 80371a0:	d1e6      	bne.n	8037170 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80371a2:	687b      	ldr	r3, [r7, #4]
 80371a4:	681b      	ldr	r3, [r3, #0]
 80371a6:	3308      	adds	r3, #8
 80371a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80371aa:	6a3b      	ldr	r3, [r7, #32]
 80371ac:	e853 3f00 	ldrex	r3, [r3]
 80371b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80371b2:	69fb      	ldr	r3, [r7, #28]
 80371b4:	f023 0301 	bic.w	r3, r3, #1
 80371b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80371ba:	687b      	ldr	r3, [r7, #4]
 80371bc:	681b      	ldr	r3, [r3, #0]
 80371be:	3308      	adds	r3, #8
 80371c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80371c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80371c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80371c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80371c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80371ca:	e841 2300 	strex	r3, r2, [r1]
 80371ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80371d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80371d2:	2b00      	cmp	r3, #0
 80371d4:	d1e5      	bne.n	80371a2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80371d6:	687b      	ldr	r3, [r7, #4]
 80371d8:	2220      	movs	r2, #32
 80371da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80371de:	687b      	ldr	r3, [r7, #4]
 80371e0:	2200      	movs	r2, #0
 80371e2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80371e4:	687b      	ldr	r3, [r7, #4]
 80371e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80371e8:	2b01      	cmp	r3, #1
 80371ea:	d12e      	bne.n	803724a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80371ec:	687b      	ldr	r3, [r7, #4]
 80371ee:	2200      	movs	r2, #0
 80371f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80371f2:	687b      	ldr	r3, [r7, #4]
 80371f4:	681b      	ldr	r3, [r3, #0]
 80371f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80371f8:	68fb      	ldr	r3, [r7, #12]
 80371fa:	e853 3f00 	ldrex	r3, [r3]
 80371fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8037200:	68bb      	ldr	r3, [r7, #8]
 8037202:	f023 0310 	bic.w	r3, r3, #16
 8037206:	647b      	str	r3, [r7, #68]	; 0x44
 8037208:	687b      	ldr	r3, [r7, #4]
 803720a:	681b      	ldr	r3, [r3, #0]
 803720c:	461a      	mov	r2, r3
 803720e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8037210:	61bb      	str	r3, [r7, #24]
 8037212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037214:	6979      	ldr	r1, [r7, #20]
 8037216:	69ba      	ldr	r2, [r7, #24]
 8037218:	e841 2300 	strex	r3, r2, [r1]
 803721c:	613b      	str	r3, [r7, #16]
   return(result);
 803721e:	693b      	ldr	r3, [r7, #16]
 8037220:	2b00      	cmp	r3, #0
 8037222:	d1e6      	bne.n	80371f2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037224:	687b      	ldr	r3, [r7, #4]
 8037226:	681b      	ldr	r3, [r3, #0]
 8037228:	69db      	ldr	r3, [r3, #28]
 803722a:	f003 0310 	and.w	r3, r3, #16
 803722e:	2b10      	cmp	r3, #16
 8037230:	d103      	bne.n	803723a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037232:	687b      	ldr	r3, [r7, #4]
 8037234:	681b      	ldr	r3, [r3, #0]
 8037236:	2210      	movs	r2, #16
 8037238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803723a:	687b      	ldr	r3, [r7, #4]
 803723c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8037240:	4619      	mov	r1, r3
 8037242:	6878      	ldr	r0, [r7, #4]
 8037244:	f7fe fc14 	bl	8035a70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037248:	e00b      	b.n	8037262 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 803724a:	6878      	ldr	r0, [r7, #4]
 803724c:	f7f2 fc06 	bl	8029a5c <HAL_UART_RxCpltCallback>
}
 8037250:	e007      	b.n	8037262 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037252:	687b      	ldr	r3, [r7, #4]
 8037254:	681b      	ldr	r3, [r3, #0]
 8037256:	699a      	ldr	r2, [r3, #24]
 8037258:	687b      	ldr	r3, [r7, #4]
 803725a:	681b      	ldr	r3, [r3, #0]
 803725c:	f042 0208 	orr.w	r2, r2, #8
 8037260:	619a      	str	r2, [r3, #24]
}
 8037262:	bf00      	nop
 8037264:	3758      	adds	r7, #88	; 0x58
 8037266:	46bd      	mov	sp, r7
 8037268:	bd80      	pop	{r7, pc}
	...

0803726c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 803726c:	b580      	push	{r7, lr}
 803726e:	b0a6      	sub	sp, #152	; 0x98
 8037270:	af00      	add	r7, sp, #0
 8037272:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8037274:	687b      	ldr	r3, [r7, #4]
 8037276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 803727a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 803727e:	687b      	ldr	r3, [r7, #4]
 8037280:	681b      	ldr	r3, [r3, #0]
 8037282:	69db      	ldr	r3, [r3, #28]
 8037284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8037288:	687b      	ldr	r3, [r7, #4]
 803728a:	681b      	ldr	r3, [r3, #0]
 803728c:	681b      	ldr	r3, [r3, #0]
 803728e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8037292:	687b      	ldr	r3, [r7, #4]
 8037294:	681b      	ldr	r3, [r3, #0]
 8037296:	689b      	ldr	r3, [r3, #8]
 8037298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 803729c:	687b      	ldr	r3, [r7, #4]
 803729e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80372a2:	2b22      	cmp	r3, #34	; 0x22
 80372a4:	f040 814d 	bne.w	8037542 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80372a8:	687b      	ldr	r3, [r7, #4]
 80372aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80372ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80372b2:	e0f4      	b.n	803749e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80372b4:	687b      	ldr	r3, [r7, #4]
 80372b6:	681b      	ldr	r3, [r3, #0]
 80372b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80372ba:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80372be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80372c2:	b2d9      	uxtb	r1, r3
 80372c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80372c8:	b2da      	uxtb	r2, r3
 80372ca:	687b      	ldr	r3, [r7, #4]
 80372cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80372ce:	400a      	ands	r2, r1
 80372d0:	b2d2      	uxtb	r2, r2
 80372d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80372d4:	687b      	ldr	r3, [r7, #4]
 80372d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80372d8:	1c5a      	adds	r2, r3, #1
 80372da:	687b      	ldr	r3, [r7, #4]
 80372dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80372de:	687b      	ldr	r3, [r7, #4]
 80372e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80372e4:	b29b      	uxth	r3, r3
 80372e6:	3b01      	subs	r3, #1
 80372e8:	b29a      	uxth	r2, r3
 80372ea:	687b      	ldr	r3, [r7, #4]
 80372ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80372f0:	687b      	ldr	r3, [r7, #4]
 80372f2:	681b      	ldr	r3, [r3, #0]
 80372f4:	69db      	ldr	r3, [r3, #28]
 80372f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80372fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80372fe:	f003 0307 	and.w	r3, r3, #7
 8037302:	2b00      	cmp	r3, #0
 8037304:	d053      	beq.n	80373ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8037306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803730a:	f003 0301 	and.w	r3, r3, #1
 803730e:	2b00      	cmp	r3, #0
 8037310:	d011      	beq.n	8037336 <UART_RxISR_8BIT_FIFOEN+0xca>
 8037312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8037316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803731a:	2b00      	cmp	r3, #0
 803731c:	d00b      	beq.n	8037336 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803731e:	687b      	ldr	r3, [r7, #4]
 8037320:	681b      	ldr	r3, [r3, #0]
 8037322:	2201      	movs	r2, #1
 8037324:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8037326:	687b      	ldr	r3, [r7, #4]
 8037328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803732c:	f043 0201 	orr.w	r2, r3, #1
 8037330:	687b      	ldr	r3, [r7, #4]
 8037332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803733a:	f003 0302 	and.w	r3, r3, #2
 803733e:	2b00      	cmp	r3, #0
 8037340:	d011      	beq.n	8037366 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8037342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8037346:	f003 0301 	and.w	r3, r3, #1
 803734a:	2b00      	cmp	r3, #0
 803734c:	d00b      	beq.n	8037366 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803734e:	687b      	ldr	r3, [r7, #4]
 8037350:	681b      	ldr	r3, [r3, #0]
 8037352:	2202      	movs	r2, #2
 8037354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8037356:	687b      	ldr	r3, [r7, #4]
 8037358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803735c:	f043 0204 	orr.w	r2, r3, #4
 8037360:	687b      	ldr	r3, [r7, #4]
 8037362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037366:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 803736a:	f003 0304 	and.w	r3, r3, #4
 803736e:	2b00      	cmp	r3, #0
 8037370:	d011      	beq.n	8037396 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8037372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8037376:	f003 0301 	and.w	r3, r3, #1
 803737a:	2b00      	cmp	r3, #0
 803737c:	d00b      	beq.n	8037396 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803737e:	687b      	ldr	r3, [r7, #4]
 8037380:	681b      	ldr	r3, [r3, #0]
 8037382:	2204      	movs	r2, #4
 8037384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8037386:	687b      	ldr	r3, [r7, #4]
 8037388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803738c:	f043 0202 	orr.w	r2, r3, #2
 8037390:	687b      	ldr	r3, [r7, #4]
 8037392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8037396:	687b      	ldr	r3, [r7, #4]
 8037398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 803739c:	2b00      	cmp	r3, #0
 803739e:	d006      	beq.n	80373ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80373a0:	6878      	ldr	r0, [r7, #4]
 80373a2:	f7fe fb5b 	bl	8035a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80373a6:	687b      	ldr	r3, [r7, #4]
 80373a8:	2200      	movs	r2, #0
 80373aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80373ae:	687b      	ldr	r3, [r7, #4]
 80373b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80373b4:	b29b      	uxth	r3, r3
 80373b6:	2b00      	cmp	r3, #0
 80373b8:	d171      	bne.n	803749e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80373ba:	687b      	ldr	r3, [r7, #4]
 80373bc:	681b      	ldr	r3, [r3, #0]
 80373be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80373c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80373c2:	e853 3f00 	ldrex	r3, [r3]
 80373c6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80373c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80373ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80373ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80373d2:	687b      	ldr	r3, [r7, #4]
 80373d4:	681b      	ldr	r3, [r3, #0]
 80373d6:	461a      	mov	r2, r3
 80373d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80373dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80373de:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80373e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80373e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80373e4:	e841 2300 	strex	r3, r2, [r1]
 80373e8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80373ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80373ec:	2b00      	cmp	r3, #0
 80373ee:	d1e4      	bne.n	80373ba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80373f0:	687b      	ldr	r3, [r7, #4]
 80373f2:	681b      	ldr	r3, [r3, #0]
 80373f4:	3308      	adds	r3, #8
 80373f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80373f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80373fa:	e853 3f00 	ldrex	r3, [r3]
 80373fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8037400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037402:	4b56      	ldr	r3, [pc, #344]	; (803755c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8037404:	4013      	ands	r3, r2
 8037406:	67fb      	str	r3, [r7, #124]	; 0x7c
 8037408:	687b      	ldr	r3, [r7, #4]
 803740a:	681b      	ldr	r3, [r3, #0]
 803740c:	3308      	adds	r3, #8
 803740e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8037410:	657a      	str	r2, [r7, #84]	; 0x54
 8037412:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037414:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8037416:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8037418:	e841 2300 	strex	r3, r2, [r1]
 803741c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 803741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037420:	2b00      	cmp	r3, #0
 8037422:	d1e5      	bne.n	80373f0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037424:	687b      	ldr	r3, [r7, #4]
 8037426:	2220      	movs	r2, #32
 8037428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803742c:	687b      	ldr	r3, [r7, #4]
 803742e:	2200      	movs	r2, #0
 8037430:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037432:	687b      	ldr	r3, [r7, #4]
 8037434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037436:	2b01      	cmp	r3, #1
 8037438:	d12e      	bne.n	8037498 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803743a:	687b      	ldr	r3, [r7, #4]
 803743c:	2200      	movs	r2, #0
 803743e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037440:	687b      	ldr	r3, [r7, #4]
 8037442:	681b      	ldr	r3, [r3, #0]
 8037444:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037448:	e853 3f00 	ldrex	r3, [r3]
 803744c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 803744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037450:	f023 0310 	bic.w	r3, r3, #16
 8037454:	67bb      	str	r3, [r7, #120]	; 0x78
 8037456:	687b      	ldr	r3, [r7, #4]
 8037458:	681b      	ldr	r3, [r3, #0]
 803745a:	461a      	mov	r2, r3
 803745c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 803745e:	643b      	str	r3, [r7, #64]	; 0x40
 8037460:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8037464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8037466:	e841 2300 	strex	r3, r2, [r1]
 803746a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803746e:	2b00      	cmp	r3, #0
 8037470:	d1e6      	bne.n	8037440 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037472:	687b      	ldr	r3, [r7, #4]
 8037474:	681b      	ldr	r3, [r3, #0]
 8037476:	69db      	ldr	r3, [r3, #28]
 8037478:	f003 0310 	and.w	r3, r3, #16
 803747c:	2b10      	cmp	r3, #16
 803747e:	d103      	bne.n	8037488 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037480:	687b      	ldr	r3, [r7, #4]
 8037482:	681b      	ldr	r3, [r3, #0]
 8037484:	2210      	movs	r2, #16
 8037486:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8037488:	687b      	ldr	r3, [r7, #4]
 803748a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803748e:	4619      	mov	r1, r3
 8037490:	6878      	ldr	r0, [r7, #4]
 8037492:	f7fe faed 	bl	8035a70 <HAL_UARTEx_RxEventCallback>
 8037496:	e002      	b.n	803749e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8037498:	6878      	ldr	r0, [r7, #4]
 803749a:	f7f2 fadf 	bl	8029a5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803749e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80374a2:	2b00      	cmp	r3, #0
 80374a4:	d006      	beq.n	80374b4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80374a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80374aa:	f003 0320 	and.w	r3, r3, #32
 80374ae:	2b00      	cmp	r3, #0
 80374b0:	f47f af00 	bne.w	80372b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80374b4:	687b      	ldr	r3, [r7, #4]
 80374b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80374ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80374be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80374c2:	2b00      	cmp	r3, #0
 80374c4:	d045      	beq.n	8037552 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80374c6:	687b      	ldr	r3, [r7, #4]
 80374c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80374cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80374d0:	429a      	cmp	r2, r3
 80374d2:	d23e      	bcs.n	8037552 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80374d4:	687b      	ldr	r3, [r7, #4]
 80374d6:	681b      	ldr	r3, [r3, #0]
 80374d8:	3308      	adds	r3, #8
 80374da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80374dc:	6a3b      	ldr	r3, [r7, #32]
 80374de:	e853 3f00 	ldrex	r3, [r3]
 80374e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80374e4:	69fb      	ldr	r3, [r7, #28]
 80374e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80374ea:	673b      	str	r3, [r7, #112]	; 0x70
 80374ec:	687b      	ldr	r3, [r7, #4]
 80374ee:	681b      	ldr	r3, [r3, #0]
 80374f0:	3308      	adds	r3, #8
 80374f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80374f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80374f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80374f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80374fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80374fc:	e841 2300 	strex	r3, r2, [r1]
 8037500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8037502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037504:	2b00      	cmp	r3, #0
 8037506:	d1e5      	bne.n	80374d4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8037508:	687b      	ldr	r3, [r7, #4]
 803750a:	4a15      	ldr	r2, [pc, #84]	; (8037560 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 803750c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803750e:	687b      	ldr	r3, [r7, #4]
 8037510:	681b      	ldr	r3, [r3, #0]
 8037512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037514:	68fb      	ldr	r3, [r7, #12]
 8037516:	e853 3f00 	ldrex	r3, [r3]
 803751a:	60bb      	str	r3, [r7, #8]
   return(result);
 803751c:	68bb      	ldr	r3, [r7, #8]
 803751e:	f043 0320 	orr.w	r3, r3, #32
 8037522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8037524:	687b      	ldr	r3, [r7, #4]
 8037526:	681b      	ldr	r3, [r3, #0]
 8037528:	461a      	mov	r2, r3
 803752a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803752c:	61bb      	str	r3, [r7, #24]
 803752e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037530:	6979      	ldr	r1, [r7, #20]
 8037532:	69ba      	ldr	r2, [r7, #24]
 8037534:	e841 2300 	strex	r3, r2, [r1]
 8037538:	613b      	str	r3, [r7, #16]
   return(result);
 803753a:	693b      	ldr	r3, [r7, #16]
 803753c:	2b00      	cmp	r3, #0
 803753e:	d1e6      	bne.n	803750e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037540:	e007      	b.n	8037552 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037542:	687b      	ldr	r3, [r7, #4]
 8037544:	681b      	ldr	r3, [r3, #0]
 8037546:	699a      	ldr	r2, [r3, #24]
 8037548:	687b      	ldr	r3, [r7, #4]
 803754a:	681b      	ldr	r3, [r3, #0]
 803754c:	f042 0208 	orr.w	r2, r2, #8
 8037550:	619a      	str	r2, [r3, #24]
}
 8037552:	bf00      	nop
 8037554:	3798      	adds	r7, #152	; 0x98
 8037556:	46bd      	mov	sp, r7
 8037558:	bd80      	pop	{r7, pc}
 803755a:	bf00      	nop
 803755c:	effffffe 	.word	0xeffffffe
 8037560:	08036fab 	.word	0x08036fab

08037564 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8037564:	b580      	push	{r7, lr}
 8037566:	b0a8      	sub	sp, #160	; 0xa0
 8037568:	af00      	add	r7, sp, #0
 803756a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 803756c:	687b      	ldr	r3, [r7, #4]
 803756e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8037572:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8037576:	687b      	ldr	r3, [r7, #4]
 8037578:	681b      	ldr	r3, [r3, #0]
 803757a:	69db      	ldr	r3, [r3, #28]
 803757c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8037580:	687b      	ldr	r3, [r7, #4]
 8037582:	681b      	ldr	r3, [r3, #0]
 8037584:	681b      	ldr	r3, [r3, #0]
 8037586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 803758a:	687b      	ldr	r3, [r7, #4]
 803758c:	681b      	ldr	r3, [r3, #0]
 803758e:	689b      	ldr	r3, [r3, #8]
 8037590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8037594:	687b      	ldr	r3, [r7, #4]
 8037596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 803759a:	2b22      	cmp	r3, #34	; 0x22
 803759c:	f040 8151 	bne.w	8037842 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80375a0:	687b      	ldr	r3, [r7, #4]
 80375a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80375a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80375aa:	e0f8      	b.n	803779e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80375ac:	687b      	ldr	r3, [r7, #4]
 80375ae:	681b      	ldr	r3, [r3, #0]
 80375b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80375b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80375b6:	687b      	ldr	r3, [r7, #4]
 80375b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80375ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80375be:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80375c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80375c6:	4013      	ands	r3, r2
 80375c8:	b29a      	uxth	r2, r3
 80375ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80375ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80375d0:	687b      	ldr	r3, [r7, #4]
 80375d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80375d4:	1c9a      	adds	r2, r3, #2
 80375d6:	687b      	ldr	r3, [r7, #4]
 80375d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80375da:	687b      	ldr	r3, [r7, #4]
 80375dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80375e0:	b29b      	uxth	r3, r3
 80375e2:	3b01      	subs	r3, #1
 80375e4:	b29a      	uxth	r2, r3
 80375e6:	687b      	ldr	r3, [r7, #4]
 80375e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80375ec:	687b      	ldr	r3, [r7, #4]
 80375ee:	681b      	ldr	r3, [r3, #0]
 80375f0:	69db      	ldr	r3, [r3, #28]
 80375f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80375f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80375fa:	f003 0307 	and.w	r3, r3, #7
 80375fe:	2b00      	cmp	r3, #0
 8037600:	d053      	beq.n	80376aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8037602:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037606:	f003 0301 	and.w	r3, r3, #1
 803760a:	2b00      	cmp	r3, #0
 803760c:	d011      	beq.n	8037632 <UART_RxISR_16BIT_FIFOEN+0xce>
 803760e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8037612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8037616:	2b00      	cmp	r3, #0
 8037618:	d00b      	beq.n	8037632 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 803761a:	687b      	ldr	r3, [r7, #4]
 803761c:	681b      	ldr	r3, [r3, #0]
 803761e:	2201      	movs	r2, #1
 8037620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8037622:	687b      	ldr	r3, [r7, #4]
 8037624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037628:	f043 0201 	orr.w	r2, r3, #1
 803762c:	687b      	ldr	r3, [r7, #4]
 803762e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037636:	f003 0302 	and.w	r3, r3, #2
 803763a:	2b00      	cmp	r3, #0
 803763c:	d011      	beq.n	8037662 <UART_RxISR_16BIT_FIFOEN+0xfe>
 803763e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8037642:	f003 0301 	and.w	r3, r3, #1
 8037646:	2b00      	cmp	r3, #0
 8037648:	d00b      	beq.n	8037662 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 803764a:	687b      	ldr	r3, [r7, #4]
 803764c:	681b      	ldr	r3, [r3, #0]
 803764e:	2202      	movs	r2, #2
 8037650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8037652:	687b      	ldr	r3, [r7, #4]
 8037654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037658:	f043 0204 	orr.w	r2, r3, #4
 803765c:	687b      	ldr	r3, [r7, #4]
 803765e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8037662:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8037666:	f003 0304 	and.w	r3, r3, #4
 803766a:	2b00      	cmp	r3, #0
 803766c:	d011      	beq.n	8037692 <UART_RxISR_16BIT_FIFOEN+0x12e>
 803766e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8037672:	f003 0301 	and.w	r3, r3, #1
 8037676:	2b00      	cmp	r3, #0
 8037678:	d00b      	beq.n	8037692 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 803767a:	687b      	ldr	r3, [r7, #4]
 803767c:	681b      	ldr	r3, [r3, #0]
 803767e:	2204      	movs	r2, #4
 8037680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8037682:	687b      	ldr	r3, [r7, #4]
 8037684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037688:	f043 0202 	orr.w	r2, r3, #2
 803768c:	687b      	ldr	r3, [r7, #4]
 803768e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8037692:	687b      	ldr	r3, [r7, #4]
 8037694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8037698:	2b00      	cmp	r3, #0
 803769a:	d006      	beq.n	80376aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803769c:	6878      	ldr	r0, [r7, #4]
 803769e:	f7fe f9dd 	bl	8035a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80376a2:	687b      	ldr	r3, [r7, #4]
 80376a4:	2200      	movs	r2, #0
 80376a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80376aa:	687b      	ldr	r3, [r7, #4]
 80376ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80376b0:	b29b      	uxth	r3, r3
 80376b2:	2b00      	cmp	r3, #0
 80376b4:	d173      	bne.n	803779e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80376b6:	687b      	ldr	r3, [r7, #4]
 80376b8:	681b      	ldr	r3, [r3, #0]
 80376ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80376bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80376be:	e853 3f00 	ldrex	r3, [r3]
 80376c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80376c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80376c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80376ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80376ce:	687b      	ldr	r3, [r7, #4]
 80376d0:	681b      	ldr	r3, [r3, #0]
 80376d2:	461a      	mov	r2, r3
 80376d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80376d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80376da:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80376dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80376de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80376e0:	e841 2300 	strex	r3, r2, [r1]
 80376e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80376e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80376e8:	2b00      	cmp	r3, #0
 80376ea:	d1e4      	bne.n	80376b6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80376ec:	687b      	ldr	r3, [r7, #4]
 80376ee:	681b      	ldr	r3, [r3, #0]
 80376f0:	3308      	adds	r3, #8
 80376f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80376f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80376f6:	e853 3f00 	ldrex	r3, [r3]
 80376fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80376fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80376fe:	4b57      	ldr	r3, [pc, #348]	; (803785c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8037700:	4013      	ands	r3, r2
 8037702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8037706:	687b      	ldr	r3, [r7, #4]
 8037708:	681b      	ldr	r3, [r3, #0]
 803770a:	3308      	adds	r3, #8
 803770c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8037710:	65ba      	str	r2, [r7, #88]	; 0x58
 8037712:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037714:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8037716:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8037718:	e841 2300 	strex	r3, r2, [r1]
 803771c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803771e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8037720:	2b00      	cmp	r3, #0
 8037722:	d1e3      	bne.n	80376ec <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8037724:	687b      	ldr	r3, [r7, #4]
 8037726:	2220      	movs	r2, #32
 8037728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 803772c:	687b      	ldr	r3, [r7, #4]
 803772e:	2200      	movs	r2, #0
 8037730:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037732:	687b      	ldr	r3, [r7, #4]
 8037734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8037736:	2b01      	cmp	r3, #1
 8037738:	d12e      	bne.n	8037798 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803773a:	687b      	ldr	r3, [r7, #4]
 803773c:	2200      	movs	r2, #0
 803773e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8037740:	687b      	ldr	r3, [r7, #4]
 8037742:	681b      	ldr	r3, [r3, #0]
 8037744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037748:	e853 3f00 	ldrex	r3, [r3]
 803774c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8037750:	f023 0310 	bic.w	r3, r3, #16
 8037754:	67fb      	str	r3, [r7, #124]	; 0x7c
 8037756:	687b      	ldr	r3, [r7, #4]
 8037758:	681b      	ldr	r3, [r3, #0]
 803775a:	461a      	mov	r2, r3
 803775c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 803775e:	647b      	str	r3, [r7, #68]	; 0x44
 8037760:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8037764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8037766:	e841 2300 	strex	r3, r2, [r1]
 803776a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 803776c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803776e:	2b00      	cmp	r3, #0
 8037770:	d1e6      	bne.n	8037740 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8037772:	687b      	ldr	r3, [r7, #4]
 8037774:	681b      	ldr	r3, [r3, #0]
 8037776:	69db      	ldr	r3, [r3, #28]
 8037778:	f003 0310 	and.w	r3, r3, #16
 803777c:	2b10      	cmp	r3, #16
 803777e:	d103      	bne.n	8037788 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8037780:	687b      	ldr	r3, [r7, #4]
 8037782:	681b      	ldr	r3, [r3, #0]
 8037784:	2210      	movs	r2, #16
 8037786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8037788:	687b      	ldr	r3, [r7, #4]
 803778a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 803778e:	4619      	mov	r1, r3
 8037790:	6878      	ldr	r0, [r7, #4]
 8037792:	f7fe f96d 	bl	8035a70 <HAL_UARTEx_RxEventCallback>
 8037796:	e002      	b.n	803779e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8037798:	6878      	ldr	r0, [r7, #4]
 803779a:	f7f2 f95f 	bl	8029a5c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 803779e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80377a2:	2b00      	cmp	r3, #0
 80377a4:	d006      	beq.n	80377b4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80377a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80377aa:	f003 0320 	and.w	r3, r3, #32
 80377ae:	2b00      	cmp	r3, #0
 80377b0:	f47f aefc 	bne.w	80375ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80377b4:	687b      	ldr	r3, [r7, #4]
 80377b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80377ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80377be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80377c2:	2b00      	cmp	r3, #0
 80377c4:	d045      	beq.n	8037852 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80377c6:	687b      	ldr	r3, [r7, #4]
 80377c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80377cc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80377d0:	429a      	cmp	r2, r3
 80377d2:	d23e      	bcs.n	8037852 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80377d4:	687b      	ldr	r3, [r7, #4]
 80377d6:	681b      	ldr	r3, [r3, #0]
 80377d8:	3308      	adds	r3, #8
 80377da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80377dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80377de:	e853 3f00 	ldrex	r3, [r3]
 80377e2:	623b      	str	r3, [r7, #32]
   return(result);
 80377e4:	6a3b      	ldr	r3, [r7, #32]
 80377e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80377ea:	677b      	str	r3, [r7, #116]	; 0x74
 80377ec:	687b      	ldr	r3, [r7, #4]
 80377ee:	681b      	ldr	r3, [r3, #0]
 80377f0:	3308      	adds	r3, #8
 80377f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80377f4:	633a      	str	r2, [r7, #48]	; 0x30
 80377f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80377f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80377fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80377fc:	e841 2300 	strex	r3, r2, [r1]
 8037800:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8037802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037804:	2b00      	cmp	r3, #0
 8037806:	d1e5      	bne.n	80377d4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8037808:	687b      	ldr	r3, [r7, #4]
 803780a:	4a15      	ldr	r2, [pc, #84]	; (8037860 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 803780c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 803780e:	687b      	ldr	r3, [r7, #4]
 8037810:	681b      	ldr	r3, [r3, #0]
 8037812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037814:	693b      	ldr	r3, [r7, #16]
 8037816:	e853 3f00 	ldrex	r3, [r3]
 803781a:	60fb      	str	r3, [r7, #12]
   return(result);
 803781c:	68fb      	ldr	r3, [r7, #12]
 803781e:	f043 0320 	orr.w	r3, r3, #32
 8037822:	673b      	str	r3, [r7, #112]	; 0x70
 8037824:	687b      	ldr	r3, [r7, #4]
 8037826:	681b      	ldr	r3, [r3, #0]
 8037828:	461a      	mov	r2, r3
 803782a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803782c:	61fb      	str	r3, [r7, #28]
 803782e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037830:	69b9      	ldr	r1, [r7, #24]
 8037832:	69fa      	ldr	r2, [r7, #28]
 8037834:	e841 2300 	strex	r3, r2, [r1]
 8037838:	617b      	str	r3, [r7, #20]
   return(result);
 803783a:	697b      	ldr	r3, [r7, #20]
 803783c:	2b00      	cmp	r3, #0
 803783e:	d1e6      	bne.n	803780e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8037840:	e007      	b.n	8037852 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8037842:	687b      	ldr	r3, [r7, #4]
 8037844:	681b      	ldr	r3, [r3, #0]
 8037846:	699a      	ldr	r2, [r3, #24]
 8037848:	687b      	ldr	r3, [r7, #4]
 803784a:	681b      	ldr	r3, [r3, #0]
 803784c:	f042 0208 	orr.w	r2, r2, #8
 8037850:	619a      	str	r2, [r3, #24]
}
 8037852:	bf00      	nop
 8037854:	37a0      	adds	r7, #160	; 0xa0
 8037856:	46bd      	mov	sp, r7
 8037858:	bd80      	pop	{r7, pc}
 803785a:	bf00      	nop
 803785c:	effffffe 	.word	0xeffffffe
 8037860:	0803710b 	.word	0x0803710b

08037864 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8037864:	b480      	push	{r7}
 8037866:	b083      	sub	sp, #12
 8037868:	af00      	add	r7, sp, #0
 803786a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 803786c:	bf00      	nop
 803786e:	370c      	adds	r7, #12
 8037870:	46bd      	mov	sp, r7
 8037872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037876:	4770      	bx	lr

08037878 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8037878:	b480      	push	{r7}
 803787a:	b083      	sub	sp, #12
 803787c:	af00      	add	r7, sp, #0
 803787e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8037880:	bf00      	nop
 8037882:	370c      	adds	r7, #12
 8037884:	46bd      	mov	sp, r7
 8037886:	f85d 7b04 	ldr.w	r7, [sp], #4
 803788a:	4770      	bx	lr

0803788c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 803788c:	b480      	push	{r7}
 803788e:	b083      	sub	sp, #12
 8037890:	af00      	add	r7, sp, #0
 8037892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8037894:	bf00      	nop
 8037896:	370c      	adds	r7, #12
 8037898:	46bd      	mov	sp, r7
 803789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803789e:	4770      	bx	lr

080378a0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80378a0:	b580      	push	{r7, lr}
 80378a2:	b084      	sub	sp, #16
 80378a4:	af00      	add	r7, sp, #0
 80378a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80378a8:	687b      	ldr	r3, [r7, #4]
 80378aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80378ae:	2b01      	cmp	r3, #1
 80378b0:	d101      	bne.n	80378b6 <HAL_UARTEx_EnableFifoMode+0x16>
 80378b2:	2302      	movs	r3, #2
 80378b4:	e02b      	b.n	803790e <HAL_UARTEx_EnableFifoMode+0x6e>
 80378b6:	687b      	ldr	r3, [r7, #4]
 80378b8:	2201      	movs	r2, #1
 80378ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80378be:	687b      	ldr	r3, [r7, #4]
 80378c0:	2224      	movs	r2, #36	; 0x24
 80378c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80378c6:	687b      	ldr	r3, [r7, #4]
 80378c8:	681b      	ldr	r3, [r3, #0]
 80378ca:	681b      	ldr	r3, [r3, #0]
 80378cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80378ce:	687b      	ldr	r3, [r7, #4]
 80378d0:	681b      	ldr	r3, [r3, #0]
 80378d2:	681a      	ldr	r2, [r3, #0]
 80378d4:	687b      	ldr	r3, [r7, #4]
 80378d6:	681b      	ldr	r3, [r3, #0]
 80378d8:	f022 0201 	bic.w	r2, r2, #1
 80378dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80378de:	68fb      	ldr	r3, [r7, #12]
 80378e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80378e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80378e6:	687b      	ldr	r3, [r7, #4]
 80378e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80378ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80378ee:	687b      	ldr	r3, [r7, #4]
 80378f0:	681b      	ldr	r3, [r3, #0]
 80378f2:	68fa      	ldr	r2, [r7, #12]
 80378f4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80378f6:	6878      	ldr	r0, [r7, #4]
 80378f8:	f000 f8c2 	bl	8037a80 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80378fc:	687b      	ldr	r3, [r7, #4]
 80378fe:	2220      	movs	r2, #32
 8037900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037904:	687b      	ldr	r3, [r7, #4]
 8037906:	2200      	movs	r2, #0
 8037908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803790c:	2300      	movs	r3, #0
}
 803790e:	4618      	mov	r0, r3
 8037910:	3710      	adds	r7, #16
 8037912:	46bd      	mov	sp, r7
 8037914:	bd80      	pop	{r7, pc}

08037916 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8037916:	b480      	push	{r7}
 8037918:	b085      	sub	sp, #20
 803791a:	af00      	add	r7, sp, #0
 803791c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 803791e:	687b      	ldr	r3, [r7, #4]
 8037920:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037924:	2b01      	cmp	r3, #1
 8037926:	d101      	bne.n	803792c <HAL_UARTEx_DisableFifoMode+0x16>
 8037928:	2302      	movs	r3, #2
 803792a:	e027      	b.n	803797c <HAL_UARTEx_DisableFifoMode+0x66>
 803792c:	687b      	ldr	r3, [r7, #4]
 803792e:	2201      	movs	r2, #1
 8037930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037934:	687b      	ldr	r3, [r7, #4]
 8037936:	2224      	movs	r2, #36	; 0x24
 8037938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 803793c:	687b      	ldr	r3, [r7, #4]
 803793e:	681b      	ldr	r3, [r3, #0]
 8037940:	681b      	ldr	r3, [r3, #0]
 8037942:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037944:	687b      	ldr	r3, [r7, #4]
 8037946:	681b      	ldr	r3, [r3, #0]
 8037948:	681a      	ldr	r2, [r3, #0]
 803794a:	687b      	ldr	r3, [r7, #4]
 803794c:	681b      	ldr	r3, [r3, #0]
 803794e:	f022 0201 	bic.w	r2, r2, #1
 8037952:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8037954:	68fb      	ldr	r3, [r7, #12]
 8037956:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 803795a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 803795c:	687b      	ldr	r3, [r7, #4]
 803795e:	2200      	movs	r2, #0
 8037960:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037962:	687b      	ldr	r3, [r7, #4]
 8037964:	681b      	ldr	r3, [r3, #0]
 8037966:	68fa      	ldr	r2, [r7, #12]
 8037968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 803796a:	687b      	ldr	r3, [r7, #4]
 803796c:	2220      	movs	r2, #32
 803796e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037972:	687b      	ldr	r3, [r7, #4]
 8037974:	2200      	movs	r2, #0
 8037976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 803797a:	2300      	movs	r3, #0
}
 803797c:	4618      	mov	r0, r3
 803797e:	3714      	adds	r7, #20
 8037980:	46bd      	mov	sp, r7
 8037982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037986:	4770      	bx	lr

08037988 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8037988:	b580      	push	{r7, lr}
 803798a:	b084      	sub	sp, #16
 803798c:	af00      	add	r7, sp, #0
 803798e:	6078      	str	r0, [r7, #4]
 8037990:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8037992:	687b      	ldr	r3, [r7, #4]
 8037994:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037998:	2b01      	cmp	r3, #1
 803799a:	d101      	bne.n	80379a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 803799c:	2302      	movs	r3, #2
 803799e:	e02d      	b.n	80379fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80379a0:	687b      	ldr	r3, [r7, #4]
 80379a2:	2201      	movs	r2, #1
 80379a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80379a8:	687b      	ldr	r3, [r7, #4]
 80379aa:	2224      	movs	r2, #36	; 0x24
 80379ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80379b0:	687b      	ldr	r3, [r7, #4]
 80379b2:	681b      	ldr	r3, [r3, #0]
 80379b4:	681b      	ldr	r3, [r3, #0]
 80379b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80379b8:	687b      	ldr	r3, [r7, #4]
 80379ba:	681b      	ldr	r3, [r3, #0]
 80379bc:	681a      	ldr	r2, [r3, #0]
 80379be:	687b      	ldr	r3, [r7, #4]
 80379c0:	681b      	ldr	r3, [r3, #0]
 80379c2:	f022 0201 	bic.w	r2, r2, #1
 80379c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80379c8:	687b      	ldr	r3, [r7, #4]
 80379ca:	681b      	ldr	r3, [r3, #0]
 80379cc:	689b      	ldr	r3, [r3, #8]
 80379ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80379d2:	687b      	ldr	r3, [r7, #4]
 80379d4:	681b      	ldr	r3, [r3, #0]
 80379d6:	683a      	ldr	r2, [r7, #0]
 80379d8:	430a      	orrs	r2, r1
 80379da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80379dc:	6878      	ldr	r0, [r7, #4]
 80379de:	f000 f84f 	bl	8037a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80379e2:	687b      	ldr	r3, [r7, #4]
 80379e4:	681b      	ldr	r3, [r3, #0]
 80379e6:	68fa      	ldr	r2, [r7, #12]
 80379e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80379ea:	687b      	ldr	r3, [r7, #4]
 80379ec:	2220      	movs	r2, #32
 80379ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80379f2:	687b      	ldr	r3, [r7, #4]
 80379f4:	2200      	movs	r2, #0
 80379f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80379fa:	2300      	movs	r3, #0
}
 80379fc:	4618      	mov	r0, r3
 80379fe:	3710      	adds	r7, #16
 8037a00:	46bd      	mov	sp, r7
 8037a02:	bd80      	pop	{r7, pc}

08037a04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8037a04:	b580      	push	{r7, lr}
 8037a06:	b084      	sub	sp, #16
 8037a08:	af00      	add	r7, sp, #0
 8037a0a:	6078      	str	r0, [r7, #4]
 8037a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8037a0e:	687b      	ldr	r3, [r7, #4]
 8037a10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8037a14:	2b01      	cmp	r3, #1
 8037a16:	d101      	bne.n	8037a1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8037a18:	2302      	movs	r3, #2
 8037a1a:	e02d      	b.n	8037a78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8037a1c:	687b      	ldr	r3, [r7, #4]
 8037a1e:	2201      	movs	r2, #1
 8037a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8037a24:	687b      	ldr	r3, [r7, #4]
 8037a26:	2224      	movs	r2, #36	; 0x24
 8037a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8037a2c:	687b      	ldr	r3, [r7, #4]
 8037a2e:	681b      	ldr	r3, [r3, #0]
 8037a30:	681b      	ldr	r3, [r3, #0]
 8037a32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8037a34:	687b      	ldr	r3, [r7, #4]
 8037a36:	681b      	ldr	r3, [r3, #0]
 8037a38:	681a      	ldr	r2, [r3, #0]
 8037a3a:	687b      	ldr	r3, [r7, #4]
 8037a3c:	681b      	ldr	r3, [r3, #0]
 8037a3e:	f022 0201 	bic.w	r2, r2, #1
 8037a42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8037a44:	687b      	ldr	r3, [r7, #4]
 8037a46:	681b      	ldr	r3, [r3, #0]
 8037a48:	689b      	ldr	r3, [r3, #8]
 8037a4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8037a4e:	687b      	ldr	r3, [r7, #4]
 8037a50:	681b      	ldr	r3, [r3, #0]
 8037a52:	683a      	ldr	r2, [r7, #0]
 8037a54:	430a      	orrs	r2, r1
 8037a56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8037a58:	6878      	ldr	r0, [r7, #4]
 8037a5a:	f000 f811 	bl	8037a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8037a5e:	687b      	ldr	r3, [r7, #4]
 8037a60:	681b      	ldr	r3, [r3, #0]
 8037a62:	68fa      	ldr	r2, [r7, #12]
 8037a64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8037a66:	687b      	ldr	r3, [r7, #4]
 8037a68:	2220      	movs	r2, #32
 8037a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8037a6e:	687b      	ldr	r3, [r7, #4]
 8037a70:	2200      	movs	r2, #0
 8037a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8037a76:	2300      	movs	r3, #0
}
 8037a78:	4618      	mov	r0, r3
 8037a7a:	3710      	adds	r7, #16
 8037a7c:	46bd      	mov	sp, r7
 8037a7e:	bd80      	pop	{r7, pc}

08037a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8037a80:	b480      	push	{r7}
 8037a82:	b085      	sub	sp, #20
 8037a84:	af00      	add	r7, sp, #0
 8037a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8037a88:	687b      	ldr	r3, [r7, #4]
 8037a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8037a8c:	2b00      	cmp	r3, #0
 8037a8e:	d108      	bne.n	8037aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8037a90:	687b      	ldr	r3, [r7, #4]
 8037a92:	2201      	movs	r2, #1
 8037a94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8037a98:	687b      	ldr	r3, [r7, #4]
 8037a9a:	2201      	movs	r2, #1
 8037a9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8037aa0:	e031      	b.n	8037b06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8037aa2:	2310      	movs	r3, #16
 8037aa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8037aa6:	2310      	movs	r3, #16
 8037aa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8037aaa:	687b      	ldr	r3, [r7, #4]
 8037aac:	681b      	ldr	r3, [r3, #0]
 8037aae:	689b      	ldr	r3, [r3, #8]
 8037ab0:	0e5b      	lsrs	r3, r3, #25
 8037ab2:	b2db      	uxtb	r3, r3
 8037ab4:	f003 0307 	and.w	r3, r3, #7
 8037ab8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8037aba:	687b      	ldr	r3, [r7, #4]
 8037abc:	681b      	ldr	r3, [r3, #0]
 8037abe:	689b      	ldr	r3, [r3, #8]
 8037ac0:	0f5b      	lsrs	r3, r3, #29
 8037ac2:	b2db      	uxtb	r3, r3
 8037ac4:	f003 0307 	and.w	r3, r3, #7
 8037ac8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8037aca:	7bbb      	ldrb	r3, [r7, #14]
 8037acc:	7b3a      	ldrb	r2, [r7, #12]
 8037ace:	4911      	ldr	r1, [pc, #68]	; (8037b14 <UARTEx_SetNbDataToProcess+0x94>)
 8037ad0:	5c8a      	ldrb	r2, [r1, r2]
 8037ad2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8037ad6:	7b3a      	ldrb	r2, [r7, #12]
 8037ad8:	490f      	ldr	r1, [pc, #60]	; (8037b18 <UARTEx_SetNbDataToProcess+0x98>)
 8037ada:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8037adc:	fb93 f3f2 	sdiv	r3, r3, r2
 8037ae0:	b29a      	uxth	r2, r3
 8037ae2:	687b      	ldr	r3, [r7, #4]
 8037ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8037ae8:	7bfb      	ldrb	r3, [r7, #15]
 8037aea:	7b7a      	ldrb	r2, [r7, #13]
 8037aec:	4909      	ldr	r1, [pc, #36]	; (8037b14 <UARTEx_SetNbDataToProcess+0x94>)
 8037aee:	5c8a      	ldrb	r2, [r1, r2]
 8037af0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8037af4:	7b7a      	ldrb	r2, [r7, #13]
 8037af6:	4908      	ldr	r1, [pc, #32]	; (8037b18 <UARTEx_SetNbDataToProcess+0x98>)
 8037af8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8037afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8037afe:	b29a      	uxth	r2, r3
 8037b00:	687b      	ldr	r3, [r7, #4]
 8037b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8037b06:	bf00      	nop
 8037b08:	3714      	adds	r7, #20
 8037b0a:	46bd      	mov	sp, r7
 8037b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037b10:	4770      	bx	lr
 8037b12:	bf00      	nop
 8037b14:	08058548 	.word	0x08058548
 8037b18:	08058550 	.word	0x08058550

08037b1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037b1c:	b084      	sub	sp, #16
 8037b1e:	b580      	push	{r7, lr}
 8037b20:	b084      	sub	sp, #16
 8037b22:	af00      	add	r7, sp, #0
 8037b24:	6078      	str	r0, [r7, #4]
 8037b26:	f107 001c 	add.w	r0, r7, #28
 8037b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8037b30:	2b01      	cmp	r3, #1
 8037b32:	d120      	bne.n	8037b76 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037b34:	687b      	ldr	r3, [r7, #4]
 8037b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8037b3c:	687b      	ldr	r3, [r7, #4]
 8037b3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8037b40:	687b      	ldr	r3, [r7, #4]
 8037b42:	68da      	ldr	r2, [r3, #12]
 8037b44:	4b2a      	ldr	r3, [pc, #168]	; (8037bf0 <USB_CoreInit+0xd4>)
 8037b46:	4013      	ands	r3, r2
 8037b48:	687a      	ldr	r2, [r7, #4]
 8037b4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8037b4c:	687b      	ldr	r3, [r7, #4]
 8037b4e:	68db      	ldr	r3, [r3, #12]
 8037b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8037b54:	687b      	ldr	r3, [r7, #4]
 8037b56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8037b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037b5a:	2b01      	cmp	r3, #1
 8037b5c:	d105      	bne.n	8037b6a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8037b5e:	687b      	ldr	r3, [r7, #4]
 8037b60:	68db      	ldr	r3, [r3, #12]
 8037b62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8037b66:	687b      	ldr	r3, [r7, #4]
 8037b68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037b6a:	6878      	ldr	r0, [r7, #4]
 8037b6c:	f001 fc04 	bl	8039378 <USB_CoreReset>
 8037b70:	4603      	mov	r3, r0
 8037b72:	73fb      	strb	r3, [r7, #15]
 8037b74:	e01a      	b.n	8037bac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8037b76:	687b      	ldr	r3, [r7, #4]
 8037b78:	68db      	ldr	r3, [r3, #12]
 8037b7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037b7e:	687b      	ldr	r3, [r7, #4]
 8037b80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8037b82:	6878      	ldr	r0, [r7, #4]
 8037b84:	f001 fbf8 	bl	8039378 <USB_CoreReset>
 8037b88:	4603      	mov	r3, r0
 8037b8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8037b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8037b8e:	2b00      	cmp	r3, #0
 8037b90:	d106      	bne.n	8037ba0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8037b92:	687b      	ldr	r3, [r7, #4]
 8037b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037b96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8037b9a:	687b      	ldr	r3, [r7, #4]
 8037b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8037b9e:	e005      	b.n	8037bac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8037ba0:	687b      	ldr	r3, [r7, #4]
 8037ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037ba4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8037ba8:	687b      	ldr	r3, [r7, #4]
 8037baa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8037bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8037bae:	2b01      	cmp	r3, #1
 8037bb0:	d116      	bne.n	8037be0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8037bb2:	687b      	ldr	r3, [r7, #4]
 8037bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8037bb6:	b29a      	uxth	r2, r3
 8037bb8:	687b      	ldr	r3, [r7, #4]
 8037bba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8037bbc:	687b      	ldr	r3, [r7, #4]
 8037bbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8037bc0:	4b0c      	ldr	r3, [pc, #48]	; (8037bf4 <USB_CoreInit+0xd8>)
 8037bc2:	4313      	orrs	r3, r2
 8037bc4:	687a      	ldr	r2, [r7, #4]
 8037bc6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8037bc8:	687b      	ldr	r3, [r7, #4]
 8037bca:	689b      	ldr	r3, [r3, #8]
 8037bcc:	f043 0206 	orr.w	r2, r3, #6
 8037bd0:	687b      	ldr	r3, [r7, #4]
 8037bd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8037bd4:	687b      	ldr	r3, [r7, #4]
 8037bd6:	689b      	ldr	r3, [r3, #8]
 8037bd8:	f043 0220 	orr.w	r2, r3, #32
 8037bdc:	687b      	ldr	r3, [r7, #4]
 8037bde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8037be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8037be2:	4618      	mov	r0, r3
 8037be4:	3710      	adds	r7, #16
 8037be6:	46bd      	mov	sp, r7
 8037be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8037bec:	b004      	add	sp, #16
 8037bee:	4770      	bx	lr
 8037bf0:	ffbdffbf 	.word	0xffbdffbf
 8037bf4:	03ee0000 	.word	0x03ee0000

08037bf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8037bf8:	b480      	push	{r7}
 8037bfa:	b087      	sub	sp, #28
 8037bfc:	af00      	add	r7, sp, #0
 8037bfe:	60f8      	str	r0, [r7, #12]
 8037c00:	60b9      	str	r1, [r7, #8]
 8037c02:	4613      	mov	r3, r2
 8037c04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8037c06:	79fb      	ldrb	r3, [r7, #7]
 8037c08:	2b02      	cmp	r3, #2
 8037c0a:	d165      	bne.n	8037cd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8037c0c:	68bb      	ldr	r3, [r7, #8]
 8037c0e:	4a41      	ldr	r2, [pc, #260]	; (8037d14 <USB_SetTurnaroundTime+0x11c>)
 8037c10:	4293      	cmp	r3, r2
 8037c12:	d906      	bls.n	8037c22 <USB_SetTurnaroundTime+0x2a>
 8037c14:	68bb      	ldr	r3, [r7, #8]
 8037c16:	4a40      	ldr	r2, [pc, #256]	; (8037d18 <USB_SetTurnaroundTime+0x120>)
 8037c18:	4293      	cmp	r3, r2
 8037c1a:	d202      	bcs.n	8037c22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8037c1c:	230f      	movs	r3, #15
 8037c1e:	617b      	str	r3, [r7, #20]
 8037c20:	e062      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8037c22:	68bb      	ldr	r3, [r7, #8]
 8037c24:	4a3c      	ldr	r2, [pc, #240]	; (8037d18 <USB_SetTurnaroundTime+0x120>)
 8037c26:	4293      	cmp	r3, r2
 8037c28:	d306      	bcc.n	8037c38 <USB_SetTurnaroundTime+0x40>
 8037c2a:	68bb      	ldr	r3, [r7, #8]
 8037c2c:	4a3b      	ldr	r2, [pc, #236]	; (8037d1c <USB_SetTurnaroundTime+0x124>)
 8037c2e:	4293      	cmp	r3, r2
 8037c30:	d202      	bcs.n	8037c38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8037c32:	230e      	movs	r3, #14
 8037c34:	617b      	str	r3, [r7, #20]
 8037c36:	e057      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8037c38:	68bb      	ldr	r3, [r7, #8]
 8037c3a:	4a38      	ldr	r2, [pc, #224]	; (8037d1c <USB_SetTurnaroundTime+0x124>)
 8037c3c:	4293      	cmp	r3, r2
 8037c3e:	d306      	bcc.n	8037c4e <USB_SetTurnaroundTime+0x56>
 8037c40:	68bb      	ldr	r3, [r7, #8]
 8037c42:	4a37      	ldr	r2, [pc, #220]	; (8037d20 <USB_SetTurnaroundTime+0x128>)
 8037c44:	4293      	cmp	r3, r2
 8037c46:	d202      	bcs.n	8037c4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8037c48:	230d      	movs	r3, #13
 8037c4a:	617b      	str	r3, [r7, #20]
 8037c4c:	e04c      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8037c4e:	68bb      	ldr	r3, [r7, #8]
 8037c50:	4a33      	ldr	r2, [pc, #204]	; (8037d20 <USB_SetTurnaroundTime+0x128>)
 8037c52:	4293      	cmp	r3, r2
 8037c54:	d306      	bcc.n	8037c64 <USB_SetTurnaroundTime+0x6c>
 8037c56:	68bb      	ldr	r3, [r7, #8]
 8037c58:	4a32      	ldr	r2, [pc, #200]	; (8037d24 <USB_SetTurnaroundTime+0x12c>)
 8037c5a:	4293      	cmp	r3, r2
 8037c5c:	d802      	bhi.n	8037c64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8037c5e:	230c      	movs	r3, #12
 8037c60:	617b      	str	r3, [r7, #20]
 8037c62:	e041      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8037c64:	68bb      	ldr	r3, [r7, #8]
 8037c66:	4a2f      	ldr	r2, [pc, #188]	; (8037d24 <USB_SetTurnaroundTime+0x12c>)
 8037c68:	4293      	cmp	r3, r2
 8037c6a:	d906      	bls.n	8037c7a <USB_SetTurnaroundTime+0x82>
 8037c6c:	68bb      	ldr	r3, [r7, #8]
 8037c6e:	4a2e      	ldr	r2, [pc, #184]	; (8037d28 <USB_SetTurnaroundTime+0x130>)
 8037c70:	4293      	cmp	r3, r2
 8037c72:	d802      	bhi.n	8037c7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8037c74:	230b      	movs	r3, #11
 8037c76:	617b      	str	r3, [r7, #20]
 8037c78:	e036      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8037c7a:	68bb      	ldr	r3, [r7, #8]
 8037c7c:	4a2a      	ldr	r2, [pc, #168]	; (8037d28 <USB_SetTurnaroundTime+0x130>)
 8037c7e:	4293      	cmp	r3, r2
 8037c80:	d906      	bls.n	8037c90 <USB_SetTurnaroundTime+0x98>
 8037c82:	68bb      	ldr	r3, [r7, #8]
 8037c84:	4a29      	ldr	r2, [pc, #164]	; (8037d2c <USB_SetTurnaroundTime+0x134>)
 8037c86:	4293      	cmp	r3, r2
 8037c88:	d802      	bhi.n	8037c90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8037c8a:	230a      	movs	r3, #10
 8037c8c:	617b      	str	r3, [r7, #20]
 8037c8e:	e02b      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8037c90:	68bb      	ldr	r3, [r7, #8]
 8037c92:	4a26      	ldr	r2, [pc, #152]	; (8037d2c <USB_SetTurnaroundTime+0x134>)
 8037c94:	4293      	cmp	r3, r2
 8037c96:	d906      	bls.n	8037ca6 <USB_SetTurnaroundTime+0xae>
 8037c98:	68bb      	ldr	r3, [r7, #8]
 8037c9a:	4a25      	ldr	r2, [pc, #148]	; (8037d30 <USB_SetTurnaroundTime+0x138>)
 8037c9c:	4293      	cmp	r3, r2
 8037c9e:	d202      	bcs.n	8037ca6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8037ca0:	2309      	movs	r3, #9
 8037ca2:	617b      	str	r3, [r7, #20]
 8037ca4:	e020      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8037ca6:	68bb      	ldr	r3, [r7, #8]
 8037ca8:	4a21      	ldr	r2, [pc, #132]	; (8037d30 <USB_SetTurnaroundTime+0x138>)
 8037caa:	4293      	cmp	r3, r2
 8037cac:	d306      	bcc.n	8037cbc <USB_SetTurnaroundTime+0xc4>
 8037cae:	68bb      	ldr	r3, [r7, #8]
 8037cb0:	4a20      	ldr	r2, [pc, #128]	; (8037d34 <USB_SetTurnaroundTime+0x13c>)
 8037cb2:	4293      	cmp	r3, r2
 8037cb4:	d802      	bhi.n	8037cbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8037cb6:	2308      	movs	r3, #8
 8037cb8:	617b      	str	r3, [r7, #20]
 8037cba:	e015      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8037cbc:	68bb      	ldr	r3, [r7, #8]
 8037cbe:	4a1d      	ldr	r2, [pc, #116]	; (8037d34 <USB_SetTurnaroundTime+0x13c>)
 8037cc0:	4293      	cmp	r3, r2
 8037cc2:	d906      	bls.n	8037cd2 <USB_SetTurnaroundTime+0xda>
 8037cc4:	68bb      	ldr	r3, [r7, #8]
 8037cc6:	4a1c      	ldr	r2, [pc, #112]	; (8037d38 <USB_SetTurnaroundTime+0x140>)
 8037cc8:	4293      	cmp	r3, r2
 8037cca:	d202      	bcs.n	8037cd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8037ccc:	2307      	movs	r3, #7
 8037cce:	617b      	str	r3, [r7, #20]
 8037cd0:	e00a      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8037cd2:	2306      	movs	r3, #6
 8037cd4:	617b      	str	r3, [r7, #20]
 8037cd6:	e007      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8037cd8:	79fb      	ldrb	r3, [r7, #7]
 8037cda:	2b00      	cmp	r3, #0
 8037cdc:	d102      	bne.n	8037ce4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8037cde:	2309      	movs	r3, #9
 8037ce0:	617b      	str	r3, [r7, #20]
 8037ce2:	e001      	b.n	8037ce8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8037ce4:	2309      	movs	r3, #9
 8037ce6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8037ce8:	68fb      	ldr	r3, [r7, #12]
 8037cea:	68db      	ldr	r3, [r3, #12]
 8037cec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8037cf0:	68fb      	ldr	r3, [r7, #12]
 8037cf2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8037cf4:	68fb      	ldr	r3, [r7, #12]
 8037cf6:	68da      	ldr	r2, [r3, #12]
 8037cf8:	697b      	ldr	r3, [r7, #20]
 8037cfa:	029b      	lsls	r3, r3, #10
 8037cfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8037d00:	431a      	orrs	r2, r3
 8037d02:	68fb      	ldr	r3, [r7, #12]
 8037d04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8037d06:	2300      	movs	r3, #0
}
 8037d08:	4618      	mov	r0, r3
 8037d0a:	371c      	adds	r7, #28
 8037d0c:	46bd      	mov	sp, r7
 8037d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d12:	4770      	bx	lr
 8037d14:	00d8acbf 	.word	0x00d8acbf
 8037d18:	00e4e1c0 	.word	0x00e4e1c0
 8037d1c:	00f42400 	.word	0x00f42400
 8037d20:	01067380 	.word	0x01067380
 8037d24:	011a499f 	.word	0x011a499f
 8037d28:	01312cff 	.word	0x01312cff
 8037d2c:	014ca43f 	.word	0x014ca43f
 8037d30:	016e3600 	.word	0x016e3600
 8037d34:	01a6ab1f 	.word	0x01a6ab1f
 8037d38:	01e84800 	.word	0x01e84800

08037d3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037d3c:	b480      	push	{r7}
 8037d3e:	b083      	sub	sp, #12
 8037d40:	af00      	add	r7, sp, #0
 8037d42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8037d44:	687b      	ldr	r3, [r7, #4]
 8037d46:	689b      	ldr	r3, [r3, #8]
 8037d48:	f043 0201 	orr.w	r2, r3, #1
 8037d4c:	687b      	ldr	r3, [r7, #4]
 8037d4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037d50:	2300      	movs	r3, #0
}
 8037d52:	4618      	mov	r0, r3
 8037d54:	370c      	adds	r7, #12
 8037d56:	46bd      	mov	sp, r7
 8037d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d5c:	4770      	bx	lr

08037d5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8037d5e:	b480      	push	{r7}
 8037d60:	b083      	sub	sp, #12
 8037d62:	af00      	add	r7, sp, #0
 8037d64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8037d66:	687b      	ldr	r3, [r7, #4]
 8037d68:	689b      	ldr	r3, [r3, #8]
 8037d6a:	f023 0201 	bic.w	r2, r3, #1
 8037d6e:	687b      	ldr	r3, [r7, #4]
 8037d70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8037d72:	2300      	movs	r3, #0
}
 8037d74:	4618      	mov	r0, r3
 8037d76:	370c      	adds	r7, #12
 8037d78:	46bd      	mov	sp, r7
 8037d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037d7e:	4770      	bx	lr

08037d80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8037d80:	b580      	push	{r7, lr}
 8037d82:	b084      	sub	sp, #16
 8037d84:	af00      	add	r7, sp, #0
 8037d86:	6078      	str	r0, [r7, #4]
 8037d88:	460b      	mov	r3, r1
 8037d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8037d8c:	2300      	movs	r3, #0
 8037d8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8037d90:	687b      	ldr	r3, [r7, #4]
 8037d92:	68db      	ldr	r3, [r3, #12]
 8037d94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8037d98:	687b      	ldr	r3, [r7, #4]
 8037d9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8037d9c:	78fb      	ldrb	r3, [r7, #3]
 8037d9e:	2b01      	cmp	r3, #1
 8037da0:	d115      	bne.n	8037dce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8037da2:	687b      	ldr	r3, [r7, #4]
 8037da4:	68db      	ldr	r3, [r3, #12]
 8037da6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8037daa:	687b      	ldr	r3, [r7, #4]
 8037dac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037dae:	2001      	movs	r0, #1
 8037db0:	f7f2 ff76 	bl	802aca0 <HAL_Delay>
      ms++;
 8037db4:	68fb      	ldr	r3, [r7, #12]
 8037db6:	3301      	adds	r3, #1
 8037db8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8037dba:	6878      	ldr	r0, [r7, #4]
 8037dbc:	f001 fa4b 	bl	8039256 <USB_GetMode>
 8037dc0:	4603      	mov	r3, r0
 8037dc2:	2b01      	cmp	r3, #1
 8037dc4:	d01e      	beq.n	8037e04 <USB_SetCurrentMode+0x84>
 8037dc6:	68fb      	ldr	r3, [r7, #12]
 8037dc8:	2b31      	cmp	r3, #49	; 0x31
 8037dca:	d9f0      	bls.n	8037dae <USB_SetCurrentMode+0x2e>
 8037dcc:	e01a      	b.n	8037e04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8037dce:	78fb      	ldrb	r3, [r7, #3]
 8037dd0:	2b00      	cmp	r3, #0
 8037dd2:	d115      	bne.n	8037e00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8037dd4:	687b      	ldr	r3, [r7, #4]
 8037dd6:	68db      	ldr	r3, [r3, #12]
 8037dd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8037ddc:	687b      	ldr	r3, [r7, #4]
 8037dde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8037de0:	2001      	movs	r0, #1
 8037de2:	f7f2 ff5d 	bl	802aca0 <HAL_Delay>
      ms++;
 8037de6:	68fb      	ldr	r3, [r7, #12]
 8037de8:	3301      	adds	r3, #1
 8037dea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8037dec:	6878      	ldr	r0, [r7, #4]
 8037dee:	f001 fa32 	bl	8039256 <USB_GetMode>
 8037df2:	4603      	mov	r3, r0
 8037df4:	2b00      	cmp	r3, #0
 8037df6:	d005      	beq.n	8037e04 <USB_SetCurrentMode+0x84>
 8037df8:	68fb      	ldr	r3, [r7, #12]
 8037dfa:	2b31      	cmp	r3, #49	; 0x31
 8037dfc:	d9f0      	bls.n	8037de0 <USB_SetCurrentMode+0x60>
 8037dfe:	e001      	b.n	8037e04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8037e00:	2301      	movs	r3, #1
 8037e02:	e005      	b.n	8037e10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8037e04:	68fb      	ldr	r3, [r7, #12]
 8037e06:	2b32      	cmp	r3, #50	; 0x32
 8037e08:	d101      	bne.n	8037e0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8037e0a:	2301      	movs	r3, #1
 8037e0c:	e000      	b.n	8037e10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8037e0e:	2300      	movs	r3, #0
}
 8037e10:	4618      	mov	r0, r3
 8037e12:	3710      	adds	r7, #16
 8037e14:	46bd      	mov	sp, r7
 8037e16:	bd80      	pop	{r7, pc}

08037e18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8037e18:	b084      	sub	sp, #16
 8037e1a:	b580      	push	{r7, lr}
 8037e1c:	b086      	sub	sp, #24
 8037e1e:	af00      	add	r7, sp, #0
 8037e20:	6078      	str	r0, [r7, #4]
 8037e22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8037e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8037e2a:	2300      	movs	r3, #0
 8037e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8037e2e:	687b      	ldr	r3, [r7, #4]
 8037e30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8037e32:	2300      	movs	r3, #0
 8037e34:	613b      	str	r3, [r7, #16]
 8037e36:	e009      	b.n	8037e4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8037e38:	687a      	ldr	r2, [r7, #4]
 8037e3a:	693b      	ldr	r3, [r7, #16]
 8037e3c:	3340      	adds	r3, #64	; 0x40
 8037e3e:	009b      	lsls	r3, r3, #2
 8037e40:	4413      	add	r3, r2
 8037e42:	2200      	movs	r2, #0
 8037e44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8037e46:	693b      	ldr	r3, [r7, #16]
 8037e48:	3301      	adds	r3, #1
 8037e4a:	613b      	str	r3, [r7, #16]
 8037e4c:	693b      	ldr	r3, [r7, #16]
 8037e4e:	2b0e      	cmp	r3, #14
 8037e50:	d9f2      	bls.n	8037e38 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8037e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8037e54:	2b00      	cmp	r3, #0
 8037e56:	d11c      	bne.n	8037e92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8037e58:	68fb      	ldr	r3, [r7, #12]
 8037e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037e5e:	685b      	ldr	r3, [r3, #4]
 8037e60:	68fa      	ldr	r2, [r7, #12]
 8037e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8037e66:	f043 0302 	orr.w	r3, r3, #2
 8037e6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8037e6c:	687b      	ldr	r3, [r7, #4]
 8037e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037e70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8037e74:	687b      	ldr	r3, [r7, #4]
 8037e76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8037e78:	687b      	ldr	r3, [r7, #4]
 8037e7a:	681b      	ldr	r3, [r3, #0]
 8037e7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8037e80:	687b      	ldr	r3, [r7, #4]
 8037e82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8037e84:	687b      	ldr	r3, [r7, #4]
 8037e86:	681b      	ldr	r3, [r3, #0]
 8037e88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8037e8c:	687b      	ldr	r3, [r7, #4]
 8037e8e:	601a      	str	r2, [r3, #0]
 8037e90:	e005      	b.n	8037e9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8037e92:	687b      	ldr	r3, [r7, #4]
 8037e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8037e96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8037e9a:	687b      	ldr	r3, [r7, #4]
 8037e9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8037e9e:	68fb      	ldr	r3, [r7, #12]
 8037ea0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8037ea4:	461a      	mov	r2, r3
 8037ea6:	2300      	movs	r3, #0
 8037ea8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8037eaa:	68fb      	ldr	r3, [r7, #12]
 8037eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037eb0:	4619      	mov	r1, r3
 8037eb2:	68fb      	ldr	r3, [r7, #12]
 8037eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037eb8:	461a      	mov	r2, r3
 8037eba:	680b      	ldr	r3, [r1, #0]
 8037ebc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8037ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037ec0:	2b01      	cmp	r3, #1
 8037ec2:	d10c      	bne.n	8037ede <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8037ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8037ec6:	2b00      	cmp	r3, #0
 8037ec8:	d104      	bne.n	8037ed4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8037eca:	2100      	movs	r1, #0
 8037ecc:	6878      	ldr	r0, [r7, #4]
 8037ece:	f000 f965 	bl	803819c <USB_SetDevSpeed>
 8037ed2:	e008      	b.n	8037ee6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8037ed4:	2101      	movs	r1, #1
 8037ed6:	6878      	ldr	r0, [r7, #4]
 8037ed8:	f000 f960 	bl	803819c <USB_SetDevSpeed>
 8037edc:	e003      	b.n	8037ee6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8037ede:	2103      	movs	r1, #3
 8037ee0:	6878      	ldr	r0, [r7, #4]
 8037ee2:	f000 f95b 	bl	803819c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8037ee6:	2110      	movs	r1, #16
 8037ee8:	6878      	ldr	r0, [r7, #4]
 8037eea:	f000 f8f3 	bl	80380d4 <USB_FlushTxFifo>
 8037eee:	4603      	mov	r3, r0
 8037ef0:	2b00      	cmp	r3, #0
 8037ef2:	d001      	beq.n	8037ef8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8037ef4:	2301      	movs	r3, #1
 8037ef6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8037ef8:	6878      	ldr	r0, [r7, #4]
 8037efa:	f000 f91f 	bl	803813c <USB_FlushRxFifo>
 8037efe:	4603      	mov	r3, r0
 8037f00:	2b00      	cmp	r3, #0
 8037f02:	d001      	beq.n	8037f08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8037f04:	2301      	movs	r3, #1
 8037f06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8037f08:	68fb      	ldr	r3, [r7, #12]
 8037f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037f0e:	461a      	mov	r2, r3
 8037f10:	2300      	movs	r3, #0
 8037f12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8037f14:	68fb      	ldr	r3, [r7, #12]
 8037f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037f1a:	461a      	mov	r2, r3
 8037f1c:	2300      	movs	r3, #0
 8037f1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8037f20:	68fb      	ldr	r3, [r7, #12]
 8037f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8037f26:	461a      	mov	r2, r3
 8037f28:	2300      	movs	r3, #0
 8037f2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037f2c:	2300      	movs	r3, #0
 8037f2e:	613b      	str	r3, [r7, #16]
 8037f30:	e043      	b.n	8037fba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8037f32:	693b      	ldr	r3, [r7, #16]
 8037f34:	015a      	lsls	r2, r3, #5
 8037f36:	68fb      	ldr	r3, [r7, #12]
 8037f38:	4413      	add	r3, r2
 8037f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f3e:	681b      	ldr	r3, [r3, #0]
 8037f40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037f48:	d118      	bne.n	8037f7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8037f4a:	693b      	ldr	r3, [r7, #16]
 8037f4c:	2b00      	cmp	r3, #0
 8037f4e:	d10a      	bne.n	8037f66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8037f50:	693b      	ldr	r3, [r7, #16]
 8037f52:	015a      	lsls	r2, r3, #5
 8037f54:	68fb      	ldr	r3, [r7, #12]
 8037f56:	4413      	add	r3, r2
 8037f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f5c:	461a      	mov	r2, r3
 8037f5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037f62:	6013      	str	r3, [r2, #0]
 8037f64:	e013      	b.n	8037f8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8037f66:	693b      	ldr	r3, [r7, #16]
 8037f68:	015a      	lsls	r2, r3, #5
 8037f6a:	68fb      	ldr	r3, [r7, #12]
 8037f6c:	4413      	add	r3, r2
 8037f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f72:	461a      	mov	r2, r3
 8037f74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8037f78:	6013      	str	r3, [r2, #0]
 8037f7a:	e008      	b.n	8037f8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8037f7c:	693b      	ldr	r3, [r7, #16]
 8037f7e:	015a      	lsls	r2, r3, #5
 8037f80:	68fb      	ldr	r3, [r7, #12]
 8037f82:	4413      	add	r3, r2
 8037f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f88:	461a      	mov	r2, r3
 8037f8a:	2300      	movs	r3, #0
 8037f8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8037f8e:	693b      	ldr	r3, [r7, #16]
 8037f90:	015a      	lsls	r2, r3, #5
 8037f92:	68fb      	ldr	r3, [r7, #12]
 8037f94:	4413      	add	r3, r2
 8037f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037f9a:	461a      	mov	r2, r3
 8037f9c:	2300      	movs	r3, #0
 8037f9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8037fa0:	693b      	ldr	r3, [r7, #16]
 8037fa2:	015a      	lsls	r2, r3, #5
 8037fa4:	68fb      	ldr	r3, [r7, #12]
 8037fa6:	4413      	add	r3, r2
 8037fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8037fac:	461a      	mov	r2, r3
 8037fae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8037fb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037fb4:	693b      	ldr	r3, [r7, #16]
 8037fb6:	3301      	adds	r3, #1
 8037fb8:	613b      	str	r3, [r7, #16]
 8037fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037fbc:	693a      	ldr	r2, [r7, #16]
 8037fbe:	429a      	cmp	r2, r3
 8037fc0:	d3b7      	bcc.n	8037f32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8037fc2:	2300      	movs	r3, #0
 8037fc4:	613b      	str	r3, [r7, #16]
 8037fc6:	e043      	b.n	8038050 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8037fc8:	693b      	ldr	r3, [r7, #16]
 8037fca:	015a      	lsls	r2, r3, #5
 8037fcc:	68fb      	ldr	r3, [r7, #12]
 8037fce:	4413      	add	r3, r2
 8037fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037fd4:	681b      	ldr	r3, [r3, #0]
 8037fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8037fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8037fde:	d118      	bne.n	8038012 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8037fe0:	693b      	ldr	r3, [r7, #16]
 8037fe2:	2b00      	cmp	r3, #0
 8037fe4:	d10a      	bne.n	8037ffc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8037fe6:	693b      	ldr	r3, [r7, #16]
 8037fe8:	015a      	lsls	r2, r3, #5
 8037fea:	68fb      	ldr	r3, [r7, #12]
 8037fec:	4413      	add	r3, r2
 8037fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8037ff2:	461a      	mov	r2, r3
 8037ff4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8037ff8:	6013      	str	r3, [r2, #0]
 8037ffa:	e013      	b.n	8038024 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8037ffc:	693b      	ldr	r3, [r7, #16]
 8037ffe:	015a      	lsls	r2, r3, #5
 8038000:	68fb      	ldr	r3, [r7, #12]
 8038002:	4413      	add	r3, r2
 8038004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038008:	461a      	mov	r2, r3
 803800a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 803800e:	6013      	str	r3, [r2, #0]
 8038010:	e008      	b.n	8038024 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8038012:	693b      	ldr	r3, [r7, #16]
 8038014:	015a      	lsls	r2, r3, #5
 8038016:	68fb      	ldr	r3, [r7, #12]
 8038018:	4413      	add	r3, r2
 803801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803801e:	461a      	mov	r2, r3
 8038020:	2300      	movs	r3, #0
 8038022:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8038024:	693b      	ldr	r3, [r7, #16]
 8038026:	015a      	lsls	r2, r3, #5
 8038028:	68fb      	ldr	r3, [r7, #12]
 803802a:	4413      	add	r3, r2
 803802c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038030:	461a      	mov	r2, r3
 8038032:	2300      	movs	r3, #0
 8038034:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8038036:	693b      	ldr	r3, [r7, #16]
 8038038:	015a      	lsls	r2, r3, #5
 803803a:	68fb      	ldr	r3, [r7, #12]
 803803c:	4413      	add	r3, r2
 803803e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038042:	461a      	mov	r2, r3
 8038044:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8038048:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 803804a:	693b      	ldr	r3, [r7, #16]
 803804c:	3301      	adds	r3, #1
 803804e:	613b      	str	r3, [r7, #16]
 8038050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038052:	693a      	ldr	r2, [r7, #16]
 8038054:	429a      	cmp	r2, r3
 8038056:	d3b7      	bcc.n	8037fc8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8038058:	68fb      	ldr	r3, [r7, #12]
 803805a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803805e:	691b      	ldr	r3, [r3, #16]
 8038060:	68fa      	ldr	r2, [r7, #12]
 8038062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8038066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803806a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 803806c:	687b      	ldr	r3, [r7, #4]
 803806e:	2200      	movs	r2, #0
 8038070:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8038072:	687b      	ldr	r3, [r7, #4]
 8038074:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8038078:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 803807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803807c:	2b00      	cmp	r3, #0
 803807e:	d105      	bne.n	803808c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8038080:	687b      	ldr	r3, [r7, #4]
 8038082:	699b      	ldr	r3, [r3, #24]
 8038084:	f043 0210 	orr.w	r2, r3, #16
 8038088:	687b      	ldr	r3, [r7, #4]
 803808a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 803808c:	687b      	ldr	r3, [r7, #4]
 803808e:	699a      	ldr	r2, [r3, #24]
 8038090:	4b0e      	ldr	r3, [pc, #56]	; (80380cc <USB_DevInit+0x2b4>)
 8038092:	4313      	orrs	r3, r2
 8038094:	687a      	ldr	r2, [r7, #4]
 8038096:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8038098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803809a:	2b00      	cmp	r3, #0
 803809c:	d005      	beq.n	80380aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 803809e:	687b      	ldr	r3, [r7, #4]
 80380a0:	699b      	ldr	r3, [r3, #24]
 80380a2:	f043 0208 	orr.w	r2, r3, #8
 80380a6:	687b      	ldr	r3, [r7, #4]
 80380a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80380aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80380ac:	2b01      	cmp	r3, #1
 80380ae:	d105      	bne.n	80380bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80380b0:	687b      	ldr	r3, [r7, #4]
 80380b2:	699a      	ldr	r2, [r3, #24]
 80380b4:	4b06      	ldr	r3, [pc, #24]	; (80380d0 <USB_DevInit+0x2b8>)
 80380b6:	4313      	orrs	r3, r2
 80380b8:	687a      	ldr	r2, [r7, #4]
 80380ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80380bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80380be:	4618      	mov	r0, r3
 80380c0:	3718      	adds	r7, #24
 80380c2:	46bd      	mov	sp, r7
 80380c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80380c8:	b004      	add	sp, #16
 80380ca:	4770      	bx	lr
 80380cc:	803c3800 	.word	0x803c3800
 80380d0:	40000004 	.word	0x40000004

080380d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80380d4:	b480      	push	{r7}
 80380d6:	b085      	sub	sp, #20
 80380d8:	af00      	add	r7, sp, #0
 80380da:	6078      	str	r0, [r7, #4]
 80380dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80380de:	2300      	movs	r3, #0
 80380e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80380e2:	68fb      	ldr	r3, [r7, #12]
 80380e4:	3301      	adds	r3, #1
 80380e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80380e8:	68fb      	ldr	r3, [r7, #12]
 80380ea:	4a13      	ldr	r2, [pc, #76]	; (8038138 <USB_FlushTxFifo+0x64>)
 80380ec:	4293      	cmp	r3, r2
 80380ee:	d901      	bls.n	80380f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80380f0:	2303      	movs	r3, #3
 80380f2:	e01b      	b.n	803812c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80380f4:	687b      	ldr	r3, [r7, #4]
 80380f6:	691b      	ldr	r3, [r3, #16]
 80380f8:	2b00      	cmp	r3, #0
 80380fa:	daf2      	bge.n	80380e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80380fc:	2300      	movs	r3, #0
 80380fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8038100:	683b      	ldr	r3, [r7, #0]
 8038102:	019b      	lsls	r3, r3, #6
 8038104:	f043 0220 	orr.w	r2, r3, #32
 8038108:	687b      	ldr	r3, [r7, #4]
 803810a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803810c:	68fb      	ldr	r3, [r7, #12]
 803810e:	3301      	adds	r3, #1
 8038110:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8038112:	68fb      	ldr	r3, [r7, #12]
 8038114:	4a08      	ldr	r2, [pc, #32]	; (8038138 <USB_FlushTxFifo+0x64>)
 8038116:	4293      	cmp	r3, r2
 8038118:	d901      	bls.n	803811e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 803811a:	2303      	movs	r3, #3
 803811c:	e006      	b.n	803812c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 803811e:	687b      	ldr	r3, [r7, #4]
 8038120:	691b      	ldr	r3, [r3, #16]
 8038122:	f003 0320 	and.w	r3, r3, #32
 8038126:	2b20      	cmp	r3, #32
 8038128:	d0f0      	beq.n	803810c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 803812a:	2300      	movs	r3, #0
}
 803812c:	4618      	mov	r0, r3
 803812e:	3714      	adds	r7, #20
 8038130:	46bd      	mov	sp, r7
 8038132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038136:	4770      	bx	lr
 8038138:	00030d40 	.word	0x00030d40

0803813c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 803813c:	b480      	push	{r7}
 803813e:	b085      	sub	sp, #20
 8038140:	af00      	add	r7, sp, #0
 8038142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8038144:	2300      	movs	r3, #0
 8038146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8038148:	68fb      	ldr	r3, [r7, #12]
 803814a:	3301      	adds	r3, #1
 803814c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803814e:	68fb      	ldr	r3, [r7, #12]
 8038150:	4a11      	ldr	r2, [pc, #68]	; (8038198 <USB_FlushRxFifo+0x5c>)
 8038152:	4293      	cmp	r3, r2
 8038154:	d901      	bls.n	803815a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8038156:	2303      	movs	r3, #3
 8038158:	e018      	b.n	803818c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 803815a:	687b      	ldr	r3, [r7, #4]
 803815c:	691b      	ldr	r3, [r3, #16]
 803815e:	2b00      	cmp	r3, #0
 8038160:	daf2      	bge.n	8038148 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8038162:	2300      	movs	r3, #0
 8038164:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8038166:	687b      	ldr	r3, [r7, #4]
 8038168:	2210      	movs	r2, #16
 803816a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 803816c:	68fb      	ldr	r3, [r7, #12]
 803816e:	3301      	adds	r3, #1
 8038170:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8038172:	68fb      	ldr	r3, [r7, #12]
 8038174:	4a08      	ldr	r2, [pc, #32]	; (8038198 <USB_FlushRxFifo+0x5c>)
 8038176:	4293      	cmp	r3, r2
 8038178:	d901      	bls.n	803817e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 803817a:	2303      	movs	r3, #3
 803817c:	e006      	b.n	803818c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 803817e:	687b      	ldr	r3, [r7, #4]
 8038180:	691b      	ldr	r3, [r3, #16]
 8038182:	f003 0310 	and.w	r3, r3, #16
 8038186:	2b10      	cmp	r3, #16
 8038188:	d0f0      	beq.n	803816c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 803818a:	2300      	movs	r3, #0
}
 803818c:	4618      	mov	r0, r3
 803818e:	3714      	adds	r7, #20
 8038190:	46bd      	mov	sp, r7
 8038192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038196:	4770      	bx	lr
 8038198:	00030d40 	.word	0x00030d40

0803819c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 803819c:	b480      	push	{r7}
 803819e:	b085      	sub	sp, #20
 80381a0:	af00      	add	r7, sp, #0
 80381a2:	6078      	str	r0, [r7, #4]
 80381a4:	460b      	mov	r3, r1
 80381a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80381a8:	687b      	ldr	r3, [r7, #4]
 80381aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80381ac:	68fb      	ldr	r3, [r7, #12]
 80381ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80381b2:	681a      	ldr	r2, [r3, #0]
 80381b4:	78fb      	ldrb	r3, [r7, #3]
 80381b6:	68f9      	ldr	r1, [r7, #12]
 80381b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80381bc:	4313      	orrs	r3, r2
 80381be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80381c0:	2300      	movs	r3, #0
}
 80381c2:	4618      	mov	r0, r3
 80381c4:	3714      	adds	r7, #20
 80381c6:	46bd      	mov	sp, r7
 80381c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80381cc:	4770      	bx	lr

080381ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80381ce:	b480      	push	{r7}
 80381d0:	b087      	sub	sp, #28
 80381d2:	af00      	add	r7, sp, #0
 80381d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80381d6:	687b      	ldr	r3, [r7, #4]
 80381d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80381da:	693b      	ldr	r3, [r7, #16]
 80381dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80381e0:	689b      	ldr	r3, [r3, #8]
 80381e2:	f003 0306 	and.w	r3, r3, #6
 80381e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80381e8:	68fb      	ldr	r3, [r7, #12]
 80381ea:	2b00      	cmp	r3, #0
 80381ec:	d102      	bne.n	80381f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80381ee:	2300      	movs	r3, #0
 80381f0:	75fb      	strb	r3, [r7, #23]
 80381f2:	e00a      	b.n	803820a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80381f4:	68fb      	ldr	r3, [r7, #12]
 80381f6:	2b02      	cmp	r3, #2
 80381f8:	d002      	beq.n	8038200 <USB_GetDevSpeed+0x32>
 80381fa:	68fb      	ldr	r3, [r7, #12]
 80381fc:	2b06      	cmp	r3, #6
 80381fe:	d102      	bne.n	8038206 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8038200:	2302      	movs	r3, #2
 8038202:	75fb      	strb	r3, [r7, #23]
 8038204:	e001      	b.n	803820a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8038206:	230f      	movs	r3, #15
 8038208:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 803820a:	7dfb      	ldrb	r3, [r7, #23]
}
 803820c:	4618      	mov	r0, r3
 803820e:	371c      	adds	r7, #28
 8038210:	46bd      	mov	sp, r7
 8038212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038216:	4770      	bx	lr

08038218 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038218:	b480      	push	{r7}
 803821a:	b085      	sub	sp, #20
 803821c:	af00      	add	r7, sp, #0
 803821e:	6078      	str	r0, [r7, #4]
 8038220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038222:	687b      	ldr	r3, [r7, #4]
 8038224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038226:	683b      	ldr	r3, [r7, #0]
 8038228:	781b      	ldrb	r3, [r3, #0]
 803822a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 803822c:	683b      	ldr	r3, [r7, #0]
 803822e:	785b      	ldrb	r3, [r3, #1]
 8038230:	2b01      	cmp	r3, #1
 8038232:	d139      	bne.n	80382a8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8038234:	68fb      	ldr	r3, [r7, #12]
 8038236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803823a:	69da      	ldr	r2, [r3, #28]
 803823c:	683b      	ldr	r3, [r7, #0]
 803823e:	781b      	ldrb	r3, [r3, #0]
 8038240:	f003 030f 	and.w	r3, r3, #15
 8038244:	2101      	movs	r1, #1
 8038246:	fa01 f303 	lsl.w	r3, r1, r3
 803824a:	b29b      	uxth	r3, r3
 803824c:	68f9      	ldr	r1, [r7, #12]
 803824e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038252:	4313      	orrs	r3, r2
 8038254:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8038256:	68bb      	ldr	r3, [r7, #8]
 8038258:	015a      	lsls	r2, r3, #5
 803825a:	68fb      	ldr	r3, [r7, #12]
 803825c:	4413      	add	r3, r2
 803825e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038262:	681b      	ldr	r3, [r3, #0]
 8038264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8038268:	2b00      	cmp	r3, #0
 803826a:	d153      	bne.n	8038314 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 803826c:	68bb      	ldr	r3, [r7, #8]
 803826e:	015a      	lsls	r2, r3, #5
 8038270:	68fb      	ldr	r3, [r7, #12]
 8038272:	4413      	add	r3, r2
 8038274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038278:	681a      	ldr	r2, [r3, #0]
 803827a:	683b      	ldr	r3, [r7, #0]
 803827c:	68db      	ldr	r3, [r3, #12]
 803827e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8038282:	683b      	ldr	r3, [r7, #0]
 8038284:	791b      	ldrb	r3, [r3, #4]
 8038286:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8038288:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 803828a:	68bb      	ldr	r3, [r7, #8]
 803828c:	059b      	lsls	r3, r3, #22
 803828e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8038290:	431a      	orrs	r2, r3
 8038292:	68bb      	ldr	r3, [r7, #8]
 8038294:	0159      	lsls	r1, r3, #5
 8038296:	68fb      	ldr	r3, [r7, #12]
 8038298:	440b      	add	r3, r1
 803829a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803829e:	4619      	mov	r1, r3
 80382a0:	4b20      	ldr	r3, [pc, #128]	; (8038324 <USB_ActivateEndpoint+0x10c>)
 80382a2:	4313      	orrs	r3, r2
 80382a4:	600b      	str	r3, [r1, #0]
 80382a6:	e035      	b.n	8038314 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80382a8:	68fb      	ldr	r3, [r7, #12]
 80382aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80382ae:	69da      	ldr	r2, [r3, #28]
 80382b0:	683b      	ldr	r3, [r7, #0]
 80382b2:	781b      	ldrb	r3, [r3, #0]
 80382b4:	f003 030f 	and.w	r3, r3, #15
 80382b8:	2101      	movs	r1, #1
 80382ba:	fa01 f303 	lsl.w	r3, r1, r3
 80382be:	041b      	lsls	r3, r3, #16
 80382c0:	68f9      	ldr	r1, [r7, #12]
 80382c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80382c6:	4313      	orrs	r3, r2
 80382c8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80382ca:	68bb      	ldr	r3, [r7, #8]
 80382cc:	015a      	lsls	r2, r3, #5
 80382ce:	68fb      	ldr	r3, [r7, #12]
 80382d0:	4413      	add	r3, r2
 80382d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80382d6:	681b      	ldr	r3, [r3, #0]
 80382d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80382dc:	2b00      	cmp	r3, #0
 80382de:	d119      	bne.n	8038314 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80382e0:	68bb      	ldr	r3, [r7, #8]
 80382e2:	015a      	lsls	r2, r3, #5
 80382e4:	68fb      	ldr	r3, [r7, #12]
 80382e6:	4413      	add	r3, r2
 80382e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80382ec:	681a      	ldr	r2, [r3, #0]
 80382ee:	683b      	ldr	r3, [r7, #0]
 80382f0:	68db      	ldr	r3, [r3, #12]
 80382f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80382f6:	683b      	ldr	r3, [r7, #0]
 80382f8:	791b      	ldrb	r3, [r3, #4]
 80382fa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80382fc:	430b      	orrs	r3, r1
 80382fe:	431a      	orrs	r2, r3
 8038300:	68bb      	ldr	r3, [r7, #8]
 8038302:	0159      	lsls	r1, r3, #5
 8038304:	68fb      	ldr	r3, [r7, #12]
 8038306:	440b      	add	r3, r1
 8038308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803830c:	4619      	mov	r1, r3
 803830e:	4b05      	ldr	r3, [pc, #20]	; (8038324 <USB_ActivateEndpoint+0x10c>)
 8038310:	4313      	orrs	r3, r2
 8038312:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8038314:	2300      	movs	r3, #0
}
 8038316:	4618      	mov	r0, r3
 8038318:	3714      	adds	r7, #20
 803831a:	46bd      	mov	sp, r7
 803831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038320:	4770      	bx	lr
 8038322:	bf00      	nop
 8038324:	10008000 	.word	0x10008000

08038328 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038328:	b480      	push	{r7}
 803832a:	b085      	sub	sp, #20
 803832c:	af00      	add	r7, sp, #0
 803832e:	6078      	str	r0, [r7, #4]
 8038330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038332:	687b      	ldr	r3, [r7, #4]
 8038334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038336:	683b      	ldr	r3, [r7, #0]
 8038338:	781b      	ldrb	r3, [r3, #0]
 803833a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 803833c:	683b      	ldr	r3, [r7, #0]
 803833e:	785b      	ldrb	r3, [r3, #1]
 8038340:	2b01      	cmp	r3, #1
 8038342:	d161      	bne.n	8038408 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038344:	68bb      	ldr	r3, [r7, #8]
 8038346:	015a      	lsls	r2, r3, #5
 8038348:	68fb      	ldr	r3, [r7, #12]
 803834a:	4413      	add	r3, r2
 803834c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038350:	681b      	ldr	r3, [r3, #0]
 8038352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803835a:	d11f      	bne.n	803839c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 803835c:	68bb      	ldr	r3, [r7, #8]
 803835e:	015a      	lsls	r2, r3, #5
 8038360:	68fb      	ldr	r3, [r7, #12]
 8038362:	4413      	add	r3, r2
 8038364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038368:	681b      	ldr	r3, [r3, #0]
 803836a:	68ba      	ldr	r2, [r7, #8]
 803836c:	0151      	lsls	r1, r2, #5
 803836e:	68fa      	ldr	r2, [r7, #12]
 8038370:	440a      	add	r2, r1
 8038372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038376:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803837a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 803837c:	68bb      	ldr	r3, [r7, #8]
 803837e:	015a      	lsls	r2, r3, #5
 8038380:	68fb      	ldr	r3, [r7, #12]
 8038382:	4413      	add	r3, r2
 8038384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038388:	681b      	ldr	r3, [r3, #0]
 803838a:	68ba      	ldr	r2, [r7, #8]
 803838c:	0151      	lsls	r1, r2, #5
 803838e:	68fa      	ldr	r2, [r7, #12]
 8038390:	440a      	add	r2, r1
 8038392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038396:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803839a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 803839c:	68fb      	ldr	r3, [r7, #12]
 803839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80383a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80383a4:	683b      	ldr	r3, [r7, #0]
 80383a6:	781b      	ldrb	r3, [r3, #0]
 80383a8:	f003 030f 	and.w	r3, r3, #15
 80383ac:	2101      	movs	r1, #1
 80383ae:	fa01 f303 	lsl.w	r3, r1, r3
 80383b2:	b29b      	uxth	r3, r3
 80383b4:	43db      	mvns	r3, r3
 80383b6:	68f9      	ldr	r1, [r7, #12]
 80383b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80383bc:	4013      	ands	r3, r2
 80383be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80383c0:	68fb      	ldr	r3, [r7, #12]
 80383c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80383c6:	69da      	ldr	r2, [r3, #28]
 80383c8:	683b      	ldr	r3, [r7, #0]
 80383ca:	781b      	ldrb	r3, [r3, #0]
 80383cc:	f003 030f 	and.w	r3, r3, #15
 80383d0:	2101      	movs	r1, #1
 80383d2:	fa01 f303 	lsl.w	r3, r1, r3
 80383d6:	b29b      	uxth	r3, r3
 80383d8:	43db      	mvns	r3, r3
 80383da:	68f9      	ldr	r1, [r7, #12]
 80383dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80383e0:	4013      	ands	r3, r2
 80383e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80383e4:	68bb      	ldr	r3, [r7, #8]
 80383e6:	015a      	lsls	r2, r3, #5
 80383e8:	68fb      	ldr	r3, [r7, #12]
 80383ea:	4413      	add	r3, r2
 80383ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80383f0:	681a      	ldr	r2, [r3, #0]
 80383f2:	68bb      	ldr	r3, [r7, #8]
 80383f4:	0159      	lsls	r1, r3, #5
 80383f6:	68fb      	ldr	r3, [r7, #12]
 80383f8:	440b      	add	r3, r1
 80383fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80383fe:	4619      	mov	r1, r3
 8038400:	4b35      	ldr	r3, [pc, #212]	; (80384d8 <USB_DeactivateEndpoint+0x1b0>)
 8038402:	4013      	ands	r3, r2
 8038404:	600b      	str	r3, [r1, #0]
 8038406:	e060      	b.n	80384ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8038408:	68bb      	ldr	r3, [r7, #8]
 803840a:	015a      	lsls	r2, r3, #5
 803840c:	68fb      	ldr	r3, [r7, #12]
 803840e:	4413      	add	r3, r2
 8038410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038414:	681b      	ldr	r3, [r3, #0]
 8038416:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 803841a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 803841e:	d11f      	bne.n	8038460 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8038420:	68bb      	ldr	r3, [r7, #8]
 8038422:	015a      	lsls	r2, r3, #5
 8038424:	68fb      	ldr	r3, [r7, #12]
 8038426:	4413      	add	r3, r2
 8038428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803842c:	681b      	ldr	r3, [r3, #0]
 803842e:	68ba      	ldr	r2, [r7, #8]
 8038430:	0151      	lsls	r1, r2, #5
 8038432:	68fa      	ldr	r2, [r7, #12]
 8038434:	440a      	add	r2, r1
 8038436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803843a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803843e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8038440:	68bb      	ldr	r3, [r7, #8]
 8038442:	015a      	lsls	r2, r3, #5
 8038444:	68fb      	ldr	r3, [r7, #12]
 8038446:	4413      	add	r3, r2
 8038448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803844c:	681b      	ldr	r3, [r3, #0]
 803844e:	68ba      	ldr	r2, [r7, #8]
 8038450:	0151      	lsls	r1, r2, #5
 8038452:	68fa      	ldr	r2, [r7, #12]
 8038454:	440a      	add	r2, r1
 8038456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803845a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 803845e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8038460:	68fb      	ldr	r3, [r7, #12]
 8038462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8038468:	683b      	ldr	r3, [r7, #0]
 803846a:	781b      	ldrb	r3, [r3, #0]
 803846c:	f003 030f 	and.w	r3, r3, #15
 8038470:	2101      	movs	r1, #1
 8038472:	fa01 f303 	lsl.w	r3, r1, r3
 8038476:	041b      	lsls	r3, r3, #16
 8038478:	43db      	mvns	r3, r3
 803847a:	68f9      	ldr	r1, [r7, #12]
 803847c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038480:	4013      	ands	r3, r2
 8038482:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8038484:	68fb      	ldr	r3, [r7, #12]
 8038486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803848a:	69da      	ldr	r2, [r3, #28]
 803848c:	683b      	ldr	r3, [r7, #0]
 803848e:	781b      	ldrb	r3, [r3, #0]
 8038490:	f003 030f 	and.w	r3, r3, #15
 8038494:	2101      	movs	r1, #1
 8038496:	fa01 f303 	lsl.w	r3, r1, r3
 803849a:	041b      	lsls	r3, r3, #16
 803849c:	43db      	mvns	r3, r3
 803849e:	68f9      	ldr	r1, [r7, #12]
 80384a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80384a4:	4013      	ands	r3, r2
 80384a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80384a8:	68bb      	ldr	r3, [r7, #8]
 80384aa:	015a      	lsls	r2, r3, #5
 80384ac:	68fb      	ldr	r3, [r7, #12]
 80384ae:	4413      	add	r3, r2
 80384b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80384b4:	681a      	ldr	r2, [r3, #0]
 80384b6:	68bb      	ldr	r3, [r7, #8]
 80384b8:	0159      	lsls	r1, r3, #5
 80384ba:	68fb      	ldr	r3, [r7, #12]
 80384bc:	440b      	add	r3, r1
 80384be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80384c2:	4619      	mov	r1, r3
 80384c4:	4b05      	ldr	r3, [pc, #20]	; (80384dc <USB_DeactivateEndpoint+0x1b4>)
 80384c6:	4013      	ands	r3, r2
 80384c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80384ca:	2300      	movs	r3, #0
}
 80384cc:	4618      	mov	r0, r3
 80384ce:	3714      	adds	r7, #20
 80384d0:	46bd      	mov	sp, r7
 80384d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80384d6:	4770      	bx	lr
 80384d8:	ec337800 	.word	0xec337800
 80384dc:	eff37800 	.word	0xeff37800

080384e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80384e0:	b580      	push	{r7, lr}
 80384e2:	b08a      	sub	sp, #40	; 0x28
 80384e4:	af02      	add	r7, sp, #8
 80384e6:	60f8      	str	r0, [r7, #12]
 80384e8:	60b9      	str	r1, [r7, #8]
 80384ea:	4613      	mov	r3, r2
 80384ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80384ee:	68fb      	ldr	r3, [r7, #12]
 80384f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80384f2:	68bb      	ldr	r3, [r7, #8]
 80384f4:	781b      	ldrb	r3, [r3, #0]
 80384f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80384f8:	68bb      	ldr	r3, [r7, #8]
 80384fa:	785b      	ldrb	r3, [r3, #1]
 80384fc:	2b01      	cmp	r3, #1
 80384fe:	f040 8163 	bne.w	80387c8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8038502:	68bb      	ldr	r3, [r7, #8]
 8038504:	699b      	ldr	r3, [r3, #24]
 8038506:	2b00      	cmp	r3, #0
 8038508:	d132      	bne.n	8038570 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 803850a:	69bb      	ldr	r3, [r7, #24]
 803850c:	015a      	lsls	r2, r3, #5
 803850e:	69fb      	ldr	r3, [r7, #28]
 8038510:	4413      	add	r3, r2
 8038512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038516:	691a      	ldr	r2, [r3, #16]
 8038518:	69bb      	ldr	r3, [r7, #24]
 803851a:	0159      	lsls	r1, r3, #5
 803851c:	69fb      	ldr	r3, [r7, #28]
 803851e:	440b      	add	r3, r1
 8038520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038524:	4619      	mov	r1, r3
 8038526:	4ba5      	ldr	r3, [pc, #660]	; (80387bc <USB_EPStartXfer+0x2dc>)
 8038528:	4013      	ands	r3, r2
 803852a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 803852c:	69bb      	ldr	r3, [r7, #24]
 803852e:	015a      	lsls	r2, r3, #5
 8038530:	69fb      	ldr	r3, [r7, #28]
 8038532:	4413      	add	r3, r2
 8038534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038538:	691b      	ldr	r3, [r3, #16]
 803853a:	69ba      	ldr	r2, [r7, #24]
 803853c:	0151      	lsls	r1, r2, #5
 803853e:	69fa      	ldr	r2, [r7, #28]
 8038540:	440a      	add	r2, r1
 8038542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 803854a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 803854c:	69bb      	ldr	r3, [r7, #24]
 803854e:	015a      	lsls	r2, r3, #5
 8038550:	69fb      	ldr	r3, [r7, #28]
 8038552:	4413      	add	r3, r2
 8038554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038558:	691a      	ldr	r2, [r3, #16]
 803855a:	69bb      	ldr	r3, [r7, #24]
 803855c:	0159      	lsls	r1, r3, #5
 803855e:	69fb      	ldr	r3, [r7, #28]
 8038560:	440b      	add	r3, r1
 8038562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038566:	4619      	mov	r1, r3
 8038568:	4b95      	ldr	r3, [pc, #596]	; (80387c0 <USB_EPStartXfer+0x2e0>)
 803856a:	4013      	ands	r3, r2
 803856c:	610b      	str	r3, [r1, #16]
 803856e:	e074      	b.n	803865a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038570:	69bb      	ldr	r3, [r7, #24]
 8038572:	015a      	lsls	r2, r3, #5
 8038574:	69fb      	ldr	r3, [r7, #28]
 8038576:	4413      	add	r3, r2
 8038578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803857c:	691a      	ldr	r2, [r3, #16]
 803857e:	69bb      	ldr	r3, [r7, #24]
 8038580:	0159      	lsls	r1, r3, #5
 8038582:	69fb      	ldr	r3, [r7, #28]
 8038584:	440b      	add	r3, r1
 8038586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803858a:	4619      	mov	r1, r3
 803858c:	4b8c      	ldr	r3, [pc, #560]	; (80387c0 <USB_EPStartXfer+0x2e0>)
 803858e:	4013      	ands	r3, r2
 8038590:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8038592:	69bb      	ldr	r3, [r7, #24]
 8038594:	015a      	lsls	r2, r3, #5
 8038596:	69fb      	ldr	r3, [r7, #28]
 8038598:	4413      	add	r3, r2
 803859a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803859e:	691a      	ldr	r2, [r3, #16]
 80385a0:	69bb      	ldr	r3, [r7, #24]
 80385a2:	0159      	lsls	r1, r3, #5
 80385a4:	69fb      	ldr	r3, [r7, #28]
 80385a6:	440b      	add	r3, r1
 80385a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385ac:	4619      	mov	r1, r3
 80385ae:	4b83      	ldr	r3, [pc, #524]	; (80387bc <USB_EPStartXfer+0x2dc>)
 80385b0:	4013      	ands	r3, r2
 80385b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80385b4:	69bb      	ldr	r3, [r7, #24]
 80385b6:	015a      	lsls	r2, r3, #5
 80385b8:	69fb      	ldr	r3, [r7, #28]
 80385ba:	4413      	add	r3, r2
 80385bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80385c2:	68bb      	ldr	r3, [r7, #8]
 80385c4:	6999      	ldr	r1, [r3, #24]
 80385c6:	68bb      	ldr	r3, [r7, #8]
 80385c8:	68db      	ldr	r3, [r3, #12]
 80385ca:	440b      	add	r3, r1
 80385cc:	1e59      	subs	r1, r3, #1
 80385ce:	68bb      	ldr	r3, [r7, #8]
 80385d0:	68db      	ldr	r3, [r3, #12]
 80385d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80385d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80385d8:	4b7a      	ldr	r3, [pc, #488]	; (80387c4 <USB_EPStartXfer+0x2e4>)
 80385da:	400b      	ands	r3, r1
 80385dc:	69b9      	ldr	r1, [r7, #24]
 80385de:	0148      	lsls	r0, r1, #5
 80385e0:	69f9      	ldr	r1, [r7, #28]
 80385e2:	4401      	add	r1, r0
 80385e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80385e8:	4313      	orrs	r3, r2
 80385ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80385ec:	69bb      	ldr	r3, [r7, #24]
 80385ee:	015a      	lsls	r2, r3, #5
 80385f0:	69fb      	ldr	r3, [r7, #28]
 80385f2:	4413      	add	r3, r2
 80385f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80385f8:	691a      	ldr	r2, [r3, #16]
 80385fa:	68bb      	ldr	r3, [r7, #8]
 80385fc:	699b      	ldr	r3, [r3, #24]
 80385fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038602:	69b9      	ldr	r1, [r7, #24]
 8038604:	0148      	lsls	r0, r1, #5
 8038606:	69f9      	ldr	r1, [r7, #28]
 8038608:	4401      	add	r1, r0
 803860a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 803860e:	4313      	orrs	r3, r2
 8038610:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8038612:	68bb      	ldr	r3, [r7, #8]
 8038614:	791b      	ldrb	r3, [r3, #4]
 8038616:	2b01      	cmp	r3, #1
 8038618:	d11f      	bne.n	803865a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 803861a:	69bb      	ldr	r3, [r7, #24]
 803861c:	015a      	lsls	r2, r3, #5
 803861e:	69fb      	ldr	r3, [r7, #28]
 8038620:	4413      	add	r3, r2
 8038622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038626:	691b      	ldr	r3, [r3, #16]
 8038628:	69ba      	ldr	r2, [r7, #24]
 803862a:	0151      	lsls	r1, r2, #5
 803862c:	69fa      	ldr	r2, [r7, #28]
 803862e:	440a      	add	r2, r1
 8038630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038634:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8038638:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 803863a:	69bb      	ldr	r3, [r7, #24]
 803863c:	015a      	lsls	r2, r3, #5
 803863e:	69fb      	ldr	r3, [r7, #28]
 8038640:	4413      	add	r3, r2
 8038642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038646:	691b      	ldr	r3, [r3, #16]
 8038648:	69ba      	ldr	r2, [r7, #24]
 803864a:	0151      	lsls	r1, r2, #5
 803864c:	69fa      	ldr	r2, [r7, #28]
 803864e:	440a      	add	r2, r1
 8038650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038658:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 803865a:	79fb      	ldrb	r3, [r7, #7]
 803865c:	2b01      	cmp	r3, #1
 803865e:	d14b      	bne.n	80386f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8038660:	68bb      	ldr	r3, [r7, #8]
 8038662:	695b      	ldr	r3, [r3, #20]
 8038664:	2b00      	cmp	r3, #0
 8038666:	d009      	beq.n	803867c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8038668:	69bb      	ldr	r3, [r7, #24]
 803866a:	015a      	lsls	r2, r3, #5
 803866c:	69fb      	ldr	r3, [r7, #28]
 803866e:	4413      	add	r3, r2
 8038670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038674:	461a      	mov	r2, r3
 8038676:	68bb      	ldr	r3, [r7, #8]
 8038678:	695b      	ldr	r3, [r3, #20]
 803867a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 803867c:	68bb      	ldr	r3, [r7, #8]
 803867e:	791b      	ldrb	r3, [r3, #4]
 8038680:	2b01      	cmp	r3, #1
 8038682:	d128      	bne.n	80386d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8038684:	69fb      	ldr	r3, [r7, #28]
 8038686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803868a:	689b      	ldr	r3, [r3, #8]
 803868c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038690:	2b00      	cmp	r3, #0
 8038692:	d110      	bne.n	80386b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8038694:	69bb      	ldr	r3, [r7, #24]
 8038696:	015a      	lsls	r2, r3, #5
 8038698:	69fb      	ldr	r3, [r7, #28]
 803869a:	4413      	add	r3, r2
 803869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80386a0:	681b      	ldr	r3, [r3, #0]
 80386a2:	69ba      	ldr	r2, [r7, #24]
 80386a4:	0151      	lsls	r1, r2, #5
 80386a6:	69fa      	ldr	r2, [r7, #28]
 80386a8:	440a      	add	r2, r1
 80386aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80386b2:	6013      	str	r3, [r2, #0]
 80386b4:	e00f      	b.n	80386d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80386b6:	69bb      	ldr	r3, [r7, #24]
 80386b8:	015a      	lsls	r2, r3, #5
 80386ba:	69fb      	ldr	r3, [r7, #28]
 80386bc:	4413      	add	r3, r2
 80386be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80386c2:	681b      	ldr	r3, [r3, #0]
 80386c4:	69ba      	ldr	r2, [r7, #24]
 80386c6:	0151      	lsls	r1, r2, #5
 80386c8:	69fa      	ldr	r2, [r7, #28]
 80386ca:	440a      	add	r2, r1
 80386cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80386d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80386d6:	69bb      	ldr	r3, [r7, #24]
 80386d8:	015a      	lsls	r2, r3, #5
 80386da:	69fb      	ldr	r3, [r7, #28]
 80386dc:	4413      	add	r3, r2
 80386de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80386e2:	681b      	ldr	r3, [r3, #0]
 80386e4:	69ba      	ldr	r2, [r7, #24]
 80386e6:	0151      	lsls	r1, r2, #5
 80386e8:	69fa      	ldr	r2, [r7, #28]
 80386ea:	440a      	add	r2, r1
 80386ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80386f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80386f4:	6013      	str	r3, [r2, #0]
 80386f6:	e137      	b.n	8038968 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80386f8:	69bb      	ldr	r3, [r7, #24]
 80386fa:	015a      	lsls	r2, r3, #5
 80386fc:	69fb      	ldr	r3, [r7, #28]
 80386fe:	4413      	add	r3, r2
 8038700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038704:	681b      	ldr	r3, [r3, #0]
 8038706:	69ba      	ldr	r2, [r7, #24]
 8038708:	0151      	lsls	r1, r2, #5
 803870a:	69fa      	ldr	r2, [r7, #28]
 803870c:	440a      	add	r2, r1
 803870e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038712:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038716:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8038718:	68bb      	ldr	r3, [r7, #8]
 803871a:	791b      	ldrb	r3, [r3, #4]
 803871c:	2b01      	cmp	r3, #1
 803871e:	d015      	beq.n	803874c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8038720:	68bb      	ldr	r3, [r7, #8]
 8038722:	699b      	ldr	r3, [r3, #24]
 8038724:	2b00      	cmp	r3, #0
 8038726:	f000 811f 	beq.w	8038968 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 803872a:	69fb      	ldr	r3, [r7, #28]
 803872c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038732:	68bb      	ldr	r3, [r7, #8]
 8038734:	781b      	ldrb	r3, [r3, #0]
 8038736:	f003 030f 	and.w	r3, r3, #15
 803873a:	2101      	movs	r1, #1
 803873c:	fa01 f303 	lsl.w	r3, r1, r3
 8038740:	69f9      	ldr	r1, [r7, #28]
 8038742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038746:	4313      	orrs	r3, r2
 8038748:	634b      	str	r3, [r1, #52]	; 0x34
 803874a:	e10d      	b.n	8038968 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 803874c:	69fb      	ldr	r3, [r7, #28]
 803874e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038752:	689b      	ldr	r3, [r3, #8]
 8038754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038758:	2b00      	cmp	r3, #0
 803875a:	d110      	bne.n	803877e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 803875c:	69bb      	ldr	r3, [r7, #24]
 803875e:	015a      	lsls	r2, r3, #5
 8038760:	69fb      	ldr	r3, [r7, #28]
 8038762:	4413      	add	r3, r2
 8038764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038768:	681b      	ldr	r3, [r3, #0]
 803876a:	69ba      	ldr	r2, [r7, #24]
 803876c:	0151      	lsls	r1, r2, #5
 803876e:	69fa      	ldr	r2, [r7, #28]
 8038770:	440a      	add	r2, r1
 8038772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038776:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 803877a:	6013      	str	r3, [r2, #0]
 803877c:	e00f      	b.n	803879e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 803877e:	69bb      	ldr	r3, [r7, #24]
 8038780:	015a      	lsls	r2, r3, #5
 8038782:	69fb      	ldr	r3, [r7, #28]
 8038784:	4413      	add	r3, r2
 8038786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803878a:	681b      	ldr	r3, [r3, #0]
 803878c:	69ba      	ldr	r2, [r7, #24]
 803878e:	0151      	lsls	r1, r2, #5
 8038790:	69fa      	ldr	r2, [r7, #28]
 8038792:	440a      	add	r2, r1
 8038794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803879c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 803879e:	68bb      	ldr	r3, [r7, #8]
 80387a0:	6919      	ldr	r1, [r3, #16]
 80387a2:	68bb      	ldr	r3, [r7, #8]
 80387a4:	781a      	ldrb	r2, [r3, #0]
 80387a6:	68bb      	ldr	r3, [r7, #8]
 80387a8:	699b      	ldr	r3, [r3, #24]
 80387aa:	b298      	uxth	r0, r3
 80387ac:	79fb      	ldrb	r3, [r7, #7]
 80387ae:	9300      	str	r3, [sp, #0]
 80387b0:	4603      	mov	r3, r0
 80387b2:	68f8      	ldr	r0, [r7, #12]
 80387b4:	f000 faea 	bl	8038d8c <USB_WritePacket>
 80387b8:	e0d6      	b.n	8038968 <USB_EPStartXfer+0x488>
 80387ba:	bf00      	nop
 80387bc:	e007ffff 	.word	0xe007ffff
 80387c0:	fff80000 	.word	0xfff80000
 80387c4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80387c8:	69bb      	ldr	r3, [r7, #24]
 80387ca:	015a      	lsls	r2, r3, #5
 80387cc:	69fb      	ldr	r3, [r7, #28]
 80387ce:	4413      	add	r3, r2
 80387d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387d4:	691a      	ldr	r2, [r3, #16]
 80387d6:	69bb      	ldr	r3, [r7, #24]
 80387d8:	0159      	lsls	r1, r3, #5
 80387da:	69fb      	ldr	r3, [r7, #28]
 80387dc:	440b      	add	r3, r1
 80387de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387e2:	4619      	mov	r1, r3
 80387e4:	4b63      	ldr	r3, [pc, #396]	; (8038974 <USB_EPStartXfer+0x494>)
 80387e6:	4013      	ands	r3, r2
 80387e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80387ea:	69bb      	ldr	r3, [r7, #24]
 80387ec:	015a      	lsls	r2, r3, #5
 80387ee:	69fb      	ldr	r3, [r7, #28]
 80387f0:	4413      	add	r3, r2
 80387f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80387f6:	691a      	ldr	r2, [r3, #16]
 80387f8:	69bb      	ldr	r3, [r7, #24]
 80387fa:	0159      	lsls	r1, r3, #5
 80387fc:	69fb      	ldr	r3, [r7, #28]
 80387fe:	440b      	add	r3, r1
 8038800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038804:	4619      	mov	r1, r3
 8038806:	4b5c      	ldr	r3, [pc, #368]	; (8038978 <USB_EPStartXfer+0x498>)
 8038808:	4013      	ands	r3, r2
 803880a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 803880c:	68bb      	ldr	r3, [r7, #8]
 803880e:	699b      	ldr	r3, [r3, #24]
 8038810:	2b00      	cmp	r3, #0
 8038812:	d123      	bne.n	803885c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8038814:	69bb      	ldr	r3, [r7, #24]
 8038816:	015a      	lsls	r2, r3, #5
 8038818:	69fb      	ldr	r3, [r7, #28]
 803881a:	4413      	add	r3, r2
 803881c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038820:	691a      	ldr	r2, [r3, #16]
 8038822:	68bb      	ldr	r3, [r7, #8]
 8038824:	68db      	ldr	r3, [r3, #12]
 8038826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 803882a:	69b9      	ldr	r1, [r7, #24]
 803882c:	0148      	lsls	r0, r1, #5
 803882e:	69f9      	ldr	r1, [r7, #28]
 8038830:	4401      	add	r1, r0
 8038832:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038836:	4313      	orrs	r3, r2
 8038838:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 803883a:	69bb      	ldr	r3, [r7, #24]
 803883c:	015a      	lsls	r2, r3, #5
 803883e:	69fb      	ldr	r3, [r7, #28]
 8038840:	4413      	add	r3, r2
 8038842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038846:	691b      	ldr	r3, [r3, #16]
 8038848:	69ba      	ldr	r2, [r7, #24]
 803884a:	0151      	lsls	r1, r2, #5
 803884c:	69fa      	ldr	r2, [r7, #28]
 803884e:	440a      	add	r2, r1
 8038850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038858:	6113      	str	r3, [r2, #16]
 803885a:	e037      	b.n	80388cc <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 803885c:	68bb      	ldr	r3, [r7, #8]
 803885e:	699a      	ldr	r2, [r3, #24]
 8038860:	68bb      	ldr	r3, [r7, #8]
 8038862:	68db      	ldr	r3, [r3, #12]
 8038864:	4413      	add	r3, r2
 8038866:	1e5a      	subs	r2, r3, #1
 8038868:	68bb      	ldr	r3, [r7, #8]
 803886a:	68db      	ldr	r3, [r3, #12]
 803886c:	fbb2 f3f3 	udiv	r3, r2, r3
 8038870:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8038872:	68bb      	ldr	r3, [r7, #8]
 8038874:	68db      	ldr	r3, [r3, #12]
 8038876:	8afa      	ldrh	r2, [r7, #22]
 8038878:	fb03 f202 	mul.w	r2, r3, r2
 803887c:	68bb      	ldr	r3, [r7, #8]
 803887e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8038880:	69bb      	ldr	r3, [r7, #24]
 8038882:	015a      	lsls	r2, r3, #5
 8038884:	69fb      	ldr	r3, [r7, #28]
 8038886:	4413      	add	r3, r2
 8038888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803888c:	691a      	ldr	r2, [r3, #16]
 803888e:	8afb      	ldrh	r3, [r7, #22]
 8038890:	04d9      	lsls	r1, r3, #19
 8038892:	4b3a      	ldr	r3, [pc, #232]	; (803897c <USB_EPStartXfer+0x49c>)
 8038894:	400b      	ands	r3, r1
 8038896:	69b9      	ldr	r1, [r7, #24]
 8038898:	0148      	lsls	r0, r1, #5
 803889a:	69f9      	ldr	r1, [r7, #28]
 803889c:	4401      	add	r1, r0
 803889e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80388a2:	4313      	orrs	r3, r2
 80388a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80388a6:	69bb      	ldr	r3, [r7, #24]
 80388a8:	015a      	lsls	r2, r3, #5
 80388aa:	69fb      	ldr	r3, [r7, #28]
 80388ac:	4413      	add	r3, r2
 80388ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80388b2:	691a      	ldr	r2, [r3, #16]
 80388b4:	68bb      	ldr	r3, [r7, #8]
 80388b6:	69db      	ldr	r3, [r3, #28]
 80388b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80388bc:	69b9      	ldr	r1, [r7, #24]
 80388be:	0148      	lsls	r0, r1, #5
 80388c0:	69f9      	ldr	r1, [r7, #28]
 80388c2:	4401      	add	r1, r0
 80388c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80388c8:	4313      	orrs	r3, r2
 80388ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80388cc:	79fb      	ldrb	r3, [r7, #7]
 80388ce:	2b01      	cmp	r3, #1
 80388d0:	d10d      	bne.n	80388ee <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80388d2:	68bb      	ldr	r3, [r7, #8]
 80388d4:	691b      	ldr	r3, [r3, #16]
 80388d6:	2b00      	cmp	r3, #0
 80388d8:	d009      	beq.n	80388ee <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80388da:	68bb      	ldr	r3, [r7, #8]
 80388dc:	6919      	ldr	r1, [r3, #16]
 80388de:	69bb      	ldr	r3, [r7, #24]
 80388e0:	015a      	lsls	r2, r3, #5
 80388e2:	69fb      	ldr	r3, [r7, #28]
 80388e4:	4413      	add	r3, r2
 80388e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80388ea:	460a      	mov	r2, r1
 80388ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80388ee:	68bb      	ldr	r3, [r7, #8]
 80388f0:	791b      	ldrb	r3, [r3, #4]
 80388f2:	2b01      	cmp	r3, #1
 80388f4:	d128      	bne.n	8038948 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80388f6:	69fb      	ldr	r3, [r7, #28]
 80388f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80388fc:	689b      	ldr	r3, [r3, #8]
 80388fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8038902:	2b00      	cmp	r3, #0
 8038904:	d110      	bne.n	8038928 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8038906:	69bb      	ldr	r3, [r7, #24]
 8038908:	015a      	lsls	r2, r3, #5
 803890a:	69fb      	ldr	r3, [r7, #28]
 803890c:	4413      	add	r3, r2
 803890e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038912:	681b      	ldr	r3, [r3, #0]
 8038914:	69ba      	ldr	r2, [r7, #24]
 8038916:	0151      	lsls	r1, r2, #5
 8038918:	69fa      	ldr	r2, [r7, #28]
 803891a:	440a      	add	r2, r1
 803891c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8038924:	6013      	str	r3, [r2, #0]
 8038926:	e00f      	b.n	8038948 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8038928:	69bb      	ldr	r3, [r7, #24]
 803892a:	015a      	lsls	r2, r3, #5
 803892c:	69fb      	ldr	r3, [r7, #28]
 803892e:	4413      	add	r3, r2
 8038930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038934:	681b      	ldr	r3, [r3, #0]
 8038936:	69ba      	ldr	r2, [r7, #24]
 8038938:	0151      	lsls	r1, r2, #5
 803893a:	69fa      	ldr	r2, [r7, #28]
 803893c:	440a      	add	r2, r1
 803893e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038946:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038948:	69bb      	ldr	r3, [r7, #24]
 803894a:	015a      	lsls	r2, r3, #5
 803894c:	69fb      	ldr	r3, [r7, #28]
 803894e:	4413      	add	r3, r2
 8038950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038954:	681b      	ldr	r3, [r3, #0]
 8038956:	69ba      	ldr	r2, [r7, #24]
 8038958:	0151      	lsls	r1, r2, #5
 803895a:	69fa      	ldr	r2, [r7, #28]
 803895c:	440a      	add	r2, r1
 803895e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038968:	2300      	movs	r3, #0
}
 803896a:	4618      	mov	r0, r3
 803896c:	3720      	adds	r7, #32
 803896e:	46bd      	mov	sp, r7
 8038970:	bd80      	pop	{r7, pc}
 8038972:	bf00      	nop
 8038974:	fff80000 	.word	0xfff80000
 8038978:	e007ffff 	.word	0xe007ffff
 803897c:	1ff80000 	.word	0x1ff80000

08038980 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8038980:	b480      	push	{r7}
 8038982:	b087      	sub	sp, #28
 8038984:	af00      	add	r7, sp, #0
 8038986:	60f8      	str	r0, [r7, #12]
 8038988:	60b9      	str	r1, [r7, #8]
 803898a:	4613      	mov	r3, r2
 803898c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803898e:	68fb      	ldr	r3, [r7, #12]
 8038990:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8038992:	68bb      	ldr	r3, [r7, #8]
 8038994:	781b      	ldrb	r3, [r3, #0]
 8038996:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038998:	68bb      	ldr	r3, [r7, #8]
 803899a:	785b      	ldrb	r3, [r3, #1]
 803899c:	2b01      	cmp	r3, #1
 803899e:	f040 80ce 	bne.w	8038b3e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80389a2:	68bb      	ldr	r3, [r7, #8]
 80389a4:	699b      	ldr	r3, [r3, #24]
 80389a6:	2b00      	cmp	r3, #0
 80389a8:	d132      	bne.n	8038a10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80389aa:	693b      	ldr	r3, [r7, #16]
 80389ac:	015a      	lsls	r2, r3, #5
 80389ae:	697b      	ldr	r3, [r7, #20]
 80389b0:	4413      	add	r3, r2
 80389b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389b6:	691a      	ldr	r2, [r3, #16]
 80389b8:	693b      	ldr	r3, [r7, #16]
 80389ba:	0159      	lsls	r1, r3, #5
 80389bc:	697b      	ldr	r3, [r7, #20]
 80389be:	440b      	add	r3, r1
 80389c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389c4:	4619      	mov	r1, r3
 80389c6:	4b9a      	ldr	r3, [pc, #616]	; (8038c30 <USB_EP0StartXfer+0x2b0>)
 80389c8:	4013      	ands	r3, r2
 80389ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80389cc:	693b      	ldr	r3, [r7, #16]
 80389ce:	015a      	lsls	r2, r3, #5
 80389d0:	697b      	ldr	r3, [r7, #20]
 80389d2:	4413      	add	r3, r2
 80389d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389d8:	691b      	ldr	r3, [r3, #16]
 80389da:	693a      	ldr	r2, [r7, #16]
 80389dc:	0151      	lsls	r1, r2, #5
 80389de:	697a      	ldr	r2, [r7, #20]
 80389e0:	440a      	add	r2, r1
 80389e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80389e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80389ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80389ec:	693b      	ldr	r3, [r7, #16]
 80389ee:	015a      	lsls	r2, r3, #5
 80389f0:	697b      	ldr	r3, [r7, #20]
 80389f2:	4413      	add	r3, r2
 80389f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80389f8:	691a      	ldr	r2, [r3, #16]
 80389fa:	693b      	ldr	r3, [r7, #16]
 80389fc:	0159      	lsls	r1, r3, #5
 80389fe:	697b      	ldr	r3, [r7, #20]
 8038a00:	440b      	add	r3, r1
 8038a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a06:	4619      	mov	r1, r3
 8038a08:	4b8a      	ldr	r3, [pc, #552]	; (8038c34 <USB_EP0StartXfer+0x2b4>)
 8038a0a:	4013      	ands	r3, r2
 8038a0c:	610b      	str	r3, [r1, #16]
 8038a0e:	e04e      	b.n	8038aae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8038a10:	693b      	ldr	r3, [r7, #16]
 8038a12:	015a      	lsls	r2, r3, #5
 8038a14:	697b      	ldr	r3, [r7, #20]
 8038a16:	4413      	add	r3, r2
 8038a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a1c:	691a      	ldr	r2, [r3, #16]
 8038a1e:	693b      	ldr	r3, [r7, #16]
 8038a20:	0159      	lsls	r1, r3, #5
 8038a22:	697b      	ldr	r3, [r7, #20]
 8038a24:	440b      	add	r3, r1
 8038a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a2a:	4619      	mov	r1, r3
 8038a2c:	4b81      	ldr	r3, [pc, #516]	; (8038c34 <USB_EP0StartXfer+0x2b4>)
 8038a2e:	4013      	ands	r3, r2
 8038a30:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8038a32:	693b      	ldr	r3, [r7, #16]
 8038a34:	015a      	lsls	r2, r3, #5
 8038a36:	697b      	ldr	r3, [r7, #20]
 8038a38:	4413      	add	r3, r2
 8038a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a3e:	691a      	ldr	r2, [r3, #16]
 8038a40:	693b      	ldr	r3, [r7, #16]
 8038a42:	0159      	lsls	r1, r3, #5
 8038a44:	697b      	ldr	r3, [r7, #20]
 8038a46:	440b      	add	r3, r1
 8038a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a4c:	4619      	mov	r1, r3
 8038a4e:	4b78      	ldr	r3, [pc, #480]	; (8038c30 <USB_EP0StartXfer+0x2b0>)
 8038a50:	4013      	ands	r3, r2
 8038a52:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8038a54:	68bb      	ldr	r3, [r7, #8]
 8038a56:	699a      	ldr	r2, [r3, #24]
 8038a58:	68bb      	ldr	r3, [r7, #8]
 8038a5a:	68db      	ldr	r3, [r3, #12]
 8038a5c:	429a      	cmp	r2, r3
 8038a5e:	d903      	bls.n	8038a68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8038a60:	68bb      	ldr	r3, [r7, #8]
 8038a62:	68da      	ldr	r2, [r3, #12]
 8038a64:	68bb      	ldr	r3, [r7, #8]
 8038a66:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8038a68:	693b      	ldr	r3, [r7, #16]
 8038a6a:	015a      	lsls	r2, r3, #5
 8038a6c:	697b      	ldr	r3, [r7, #20]
 8038a6e:	4413      	add	r3, r2
 8038a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a74:	691b      	ldr	r3, [r3, #16]
 8038a76:	693a      	ldr	r2, [r7, #16]
 8038a78:	0151      	lsls	r1, r2, #5
 8038a7a:	697a      	ldr	r2, [r7, #20]
 8038a7c:	440a      	add	r2, r1
 8038a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038a86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8038a88:	693b      	ldr	r3, [r7, #16]
 8038a8a:	015a      	lsls	r2, r3, #5
 8038a8c:	697b      	ldr	r3, [r7, #20]
 8038a8e:	4413      	add	r3, r2
 8038a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038a94:	691a      	ldr	r2, [r3, #16]
 8038a96:	68bb      	ldr	r3, [r7, #8]
 8038a98:	699b      	ldr	r3, [r3, #24]
 8038a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038a9e:	6939      	ldr	r1, [r7, #16]
 8038aa0:	0148      	lsls	r0, r1, #5
 8038aa2:	6979      	ldr	r1, [r7, #20]
 8038aa4:	4401      	add	r1, r0
 8038aa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8038aaa:	4313      	orrs	r3, r2
 8038aac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8038aae:	79fb      	ldrb	r3, [r7, #7]
 8038ab0:	2b01      	cmp	r3, #1
 8038ab2:	d11e      	bne.n	8038af2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8038ab4:	68bb      	ldr	r3, [r7, #8]
 8038ab6:	695b      	ldr	r3, [r3, #20]
 8038ab8:	2b00      	cmp	r3, #0
 8038aba:	d009      	beq.n	8038ad0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8038abc:	693b      	ldr	r3, [r7, #16]
 8038abe:	015a      	lsls	r2, r3, #5
 8038ac0:	697b      	ldr	r3, [r7, #20]
 8038ac2:	4413      	add	r3, r2
 8038ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ac8:	461a      	mov	r2, r3
 8038aca:	68bb      	ldr	r3, [r7, #8]
 8038acc:	695b      	ldr	r3, [r3, #20]
 8038ace:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038ad0:	693b      	ldr	r3, [r7, #16]
 8038ad2:	015a      	lsls	r2, r3, #5
 8038ad4:	697b      	ldr	r3, [r7, #20]
 8038ad6:	4413      	add	r3, r2
 8038ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038adc:	681b      	ldr	r3, [r3, #0]
 8038ade:	693a      	ldr	r2, [r7, #16]
 8038ae0:	0151      	lsls	r1, r2, #5
 8038ae2:	697a      	ldr	r2, [r7, #20]
 8038ae4:	440a      	add	r2, r1
 8038ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038aea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038aee:	6013      	str	r3, [r2, #0]
 8038af0:	e097      	b.n	8038c22 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8038af2:	693b      	ldr	r3, [r7, #16]
 8038af4:	015a      	lsls	r2, r3, #5
 8038af6:	697b      	ldr	r3, [r7, #20]
 8038af8:	4413      	add	r3, r2
 8038afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038afe:	681b      	ldr	r3, [r3, #0]
 8038b00:	693a      	ldr	r2, [r7, #16]
 8038b02:	0151      	lsls	r1, r2, #5
 8038b04:	697a      	ldr	r2, [r7, #20]
 8038b06:	440a      	add	r2, r1
 8038b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038b10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8038b12:	68bb      	ldr	r3, [r7, #8]
 8038b14:	699b      	ldr	r3, [r3, #24]
 8038b16:	2b00      	cmp	r3, #0
 8038b18:	f000 8083 	beq.w	8038c22 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8038b1c:	697b      	ldr	r3, [r7, #20]
 8038b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8038b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8038b24:	68bb      	ldr	r3, [r7, #8]
 8038b26:	781b      	ldrb	r3, [r3, #0]
 8038b28:	f003 030f 	and.w	r3, r3, #15
 8038b2c:	2101      	movs	r1, #1
 8038b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8038b32:	6979      	ldr	r1, [r7, #20]
 8038b34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8038b38:	4313      	orrs	r3, r2
 8038b3a:	634b      	str	r3, [r1, #52]	; 0x34
 8038b3c:	e071      	b.n	8038c22 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8038b3e:	693b      	ldr	r3, [r7, #16]
 8038b40:	015a      	lsls	r2, r3, #5
 8038b42:	697b      	ldr	r3, [r7, #20]
 8038b44:	4413      	add	r3, r2
 8038b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b4a:	691a      	ldr	r2, [r3, #16]
 8038b4c:	693b      	ldr	r3, [r7, #16]
 8038b4e:	0159      	lsls	r1, r3, #5
 8038b50:	697b      	ldr	r3, [r7, #20]
 8038b52:	440b      	add	r3, r1
 8038b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b58:	4619      	mov	r1, r3
 8038b5a:	4b36      	ldr	r3, [pc, #216]	; (8038c34 <USB_EP0StartXfer+0x2b4>)
 8038b5c:	4013      	ands	r3, r2
 8038b5e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8038b60:	693b      	ldr	r3, [r7, #16]
 8038b62:	015a      	lsls	r2, r3, #5
 8038b64:	697b      	ldr	r3, [r7, #20]
 8038b66:	4413      	add	r3, r2
 8038b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b6c:	691a      	ldr	r2, [r3, #16]
 8038b6e:	693b      	ldr	r3, [r7, #16]
 8038b70:	0159      	lsls	r1, r3, #5
 8038b72:	697b      	ldr	r3, [r7, #20]
 8038b74:	440b      	add	r3, r1
 8038b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038b7a:	4619      	mov	r1, r3
 8038b7c:	4b2c      	ldr	r3, [pc, #176]	; (8038c30 <USB_EP0StartXfer+0x2b0>)
 8038b7e:	4013      	ands	r3, r2
 8038b80:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8038b82:	68bb      	ldr	r3, [r7, #8]
 8038b84:	699b      	ldr	r3, [r3, #24]
 8038b86:	2b00      	cmp	r3, #0
 8038b88:	d003      	beq.n	8038b92 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8038b8a:	68bb      	ldr	r3, [r7, #8]
 8038b8c:	68da      	ldr	r2, [r3, #12]
 8038b8e:	68bb      	ldr	r3, [r7, #8]
 8038b90:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8038b92:	68bb      	ldr	r3, [r7, #8]
 8038b94:	68da      	ldr	r2, [r3, #12]
 8038b96:	68bb      	ldr	r3, [r7, #8]
 8038b98:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8038b9a:	693b      	ldr	r3, [r7, #16]
 8038b9c:	015a      	lsls	r2, r3, #5
 8038b9e:	697b      	ldr	r3, [r7, #20]
 8038ba0:	4413      	add	r3, r2
 8038ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038ba6:	691b      	ldr	r3, [r3, #16]
 8038ba8:	693a      	ldr	r2, [r7, #16]
 8038baa:	0151      	lsls	r1, r2, #5
 8038bac:	697a      	ldr	r2, [r7, #20]
 8038bae:	440a      	add	r2, r1
 8038bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038bb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8038bb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8038bba:	693b      	ldr	r3, [r7, #16]
 8038bbc:	015a      	lsls	r2, r3, #5
 8038bbe:	697b      	ldr	r3, [r7, #20]
 8038bc0:	4413      	add	r3, r2
 8038bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038bc6:	691a      	ldr	r2, [r3, #16]
 8038bc8:	68bb      	ldr	r3, [r7, #8]
 8038bca:	69db      	ldr	r3, [r3, #28]
 8038bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8038bd0:	6939      	ldr	r1, [r7, #16]
 8038bd2:	0148      	lsls	r0, r1, #5
 8038bd4:	6979      	ldr	r1, [r7, #20]
 8038bd6:	4401      	add	r1, r0
 8038bd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8038bdc:	4313      	orrs	r3, r2
 8038bde:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8038be0:	79fb      	ldrb	r3, [r7, #7]
 8038be2:	2b01      	cmp	r3, #1
 8038be4:	d10d      	bne.n	8038c02 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8038be6:	68bb      	ldr	r3, [r7, #8]
 8038be8:	691b      	ldr	r3, [r3, #16]
 8038bea:	2b00      	cmp	r3, #0
 8038bec:	d009      	beq.n	8038c02 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8038bee:	68bb      	ldr	r3, [r7, #8]
 8038bf0:	6919      	ldr	r1, [r3, #16]
 8038bf2:	693b      	ldr	r3, [r7, #16]
 8038bf4:	015a      	lsls	r2, r3, #5
 8038bf6:	697b      	ldr	r3, [r7, #20]
 8038bf8:	4413      	add	r3, r2
 8038bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038bfe:	460a      	mov	r2, r1
 8038c00:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8038c02:	693b      	ldr	r3, [r7, #16]
 8038c04:	015a      	lsls	r2, r3, #5
 8038c06:	697b      	ldr	r3, [r7, #20]
 8038c08:	4413      	add	r3, r2
 8038c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038c0e:	681b      	ldr	r3, [r3, #0]
 8038c10:	693a      	ldr	r2, [r7, #16]
 8038c12:	0151      	lsls	r1, r2, #5
 8038c14:	697a      	ldr	r2, [r7, #20]
 8038c16:	440a      	add	r2, r1
 8038c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038c1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8038c20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038c22:	2300      	movs	r3, #0
}
 8038c24:	4618      	mov	r0, r3
 8038c26:	371c      	adds	r7, #28
 8038c28:	46bd      	mov	sp, r7
 8038c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038c2e:	4770      	bx	lr
 8038c30:	e007ffff 	.word	0xe007ffff
 8038c34:	fff80000 	.word	0xfff80000

08038c38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038c38:	b480      	push	{r7}
 8038c3a:	b087      	sub	sp, #28
 8038c3c:	af00      	add	r7, sp, #0
 8038c3e:	6078      	str	r0, [r7, #4]
 8038c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8038c42:	2300      	movs	r3, #0
 8038c44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8038c46:	2300      	movs	r3, #0
 8038c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038c4a:	687b      	ldr	r3, [r7, #4]
 8038c4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8038c4e:	683b      	ldr	r3, [r7, #0]
 8038c50:	785b      	ldrb	r3, [r3, #1]
 8038c52:	2b01      	cmp	r3, #1
 8038c54:	d14a      	bne.n	8038cec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8038c56:	683b      	ldr	r3, [r7, #0]
 8038c58:	781b      	ldrb	r3, [r3, #0]
 8038c5a:	015a      	lsls	r2, r3, #5
 8038c5c:	693b      	ldr	r3, [r7, #16]
 8038c5e:	4413      	add	r3, r2
 8038c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038c64:	681b      	ldr	r3, [r3, #0]
 8038c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038c6e:	f040 8086 	bne.w	8038d7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8038c72:	683b      	ldr	r3, [r7, #0]
 8038c74:	781b      	ldrb	r3, [r3, #0]
 8038c76:	015a      	lsls	r2, r3, #5
 8038c78:	693b      	ldr	r3, [r7, #16]
 8038c7a:	4413      	add	r3, r2
 8038c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038c80:	681b      	ldr	r3, [r3, #0]
 8038c82:	683a      	ldr	r2, [r7, #0]
 8038c84:	7812      	ldrb	r2, [r2, #0]
 8038c86:	0151      	lsls	r1, r2, #5
 8038c88:	693a      	ldr	r2, [r7, #16]
 8038c8a:	440a      	add	r2, r1
 8038c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038c94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8038c96:	683b      	ldr	r3, [r7, #0]
 8038c98:	781b      	ldrb	r3, [r3, #0]
 8038c9a:	015a      	lsls	r2, r3, #5
 8038c9c:	693b      	ldr	r3, [r7, #16]
 8038c9e:	4413      	add	r3, r2
 8038ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ca4:	681b      	ldr	r3, [r3, #0]
 8038ca6:	683a      	ldr	r2, [r7, #0]
 8038ca8:	7812      	ldrb	r2, [r2, #0]
 8038caa:	0151      	lsls	r1, r2, #5
 8038cac:	693a      	ldr	r2, [r7, #16]
 8038cae:	440a      	add	r2, r1
 8038cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038cba:	68fb      	ldr	r3, [r7, #12]
 8038cbc:	3301      	adds	r3, #1
 8038cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038cc0:	68fb      	ldr	r3, [r7, #12]
 8038cc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8038cc6:	4293      	cmp	r3, r2
 8038cc8:	d902      	bls.n	8038cd0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8038cca:	2301      	movs	r3, #1
 8038ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8038cce:	e056      	b.n	8038d7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8038cd0:	683b      	ldr	r3, [r7, #0]
 8038cd2:	781b      	ldrb	r3, [r3, #0]
 8038cd4:	015a      	lsls	r2, r3, #5
 8038cd6:	693b      	ldr	r3, [r7, #16]
 8038cd8:	4413      	add	r3, r2
 8038cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038cde:	681b      	ldr	r3, [r3, #0]
 8038ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038ce8:	d0e7      	beq.n	8038cba <USB_EPStopXfer+0x82>
 8038cea:	e048      	b.n	8038d7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8038cec:	683b      	ldr	r3, [r7, #0]
 8038cee:	781b      	ldrb	r3, [r3, #0]
 8038cf0:	015a      	lsls	r2, r3, #5
 8038cf2:	693b      	ldr	r3, [r7, #16]
 8038cf4:	4413      	add	r3, r2
 8038cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038cfa:	681b      	ldr	r3, [r3, #0]
 8038cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038d04:	d13b      	bne.n	8038d7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8038d06:	683b      	ldr	r3, [r7, #0]
 8038d08:	781b      	ldrb	r3, [r3, #0]
 8038d0a:	015a      	lsls	r2, r3, #5
 8038d0c:	693b      	ldr	r3, [r7, #16]
 8038d0e:	4413      	add	r3, r2
 8038d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d14:	681b      	ldr	r3, [r3, #0]
 8038d16:	683a      	ldr	r2, [r7, #0]
 8038d18:	7812      	ldrb	r2, [r2, #0]
 8038d1a:	0151      	lsls	r1, r2, #5
 8038d1c:	693a      	ldr	r2, [r7, #16]
 8038d1e:	440a      	add	r2, r1
 8038d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038d24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8038d28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8038d2a:	683b      	ldr	r3, [r7, #0]
 8038d2c:	781b      	ldrb	r3, [r3, #0]
 8038d2e:	015a      	lsls	r2, r3, #5
 8038d30:	693b      	ldr	r3, [r7, #16]
 8038d32:	4413      	add	r3, r2
 8038d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d38:	681b      	ldr	r3, [r3, #0]
 8038d3a:	683a      	ldr	r2, [r7, #0]
 8038d3c:	7812      	ldrb	r2, [r2, #0]
 8038d3e:	0151      	lsls	r1, r2, #5
 8038d40:	693a      	ldr	r2, [r7, #16]
 8038d42:	440a      	add	r2, r1
 8038d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038d48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8038d4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8038d4e:	68fb      	ldr	r3, [r7, #12]
 8038d50:	3301      	adds	r3, #1
 8038d52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8038d54:	68fb      	ldr	r3, [r7, #12]
 8038d56:	f242 7210 	movw	r2, #10000	; 0x2710
 8038d5a:	4293      	cmp	r3, r2
 8038d5c:	d902      	bls.n	8038d64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8038d5e:	2301      	movs	r3, #1
 8038d60:	75fb      	strb	r3, [r7, #23]
          break;
 8038d62:	e00c      	b.n	8038d7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8038d64:	683b      	ldr	r3, [r7, #0]
 8038d66:	781b      	ldrb	r3, [r3, #0]
 8038d68:	015a      	lsls	r2, r3, #5
 8038d6a:	693b      	ldr	r3, [r7, #16]
 8038d6c:	4413      	add	r3, r2
 8038d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038d72:	681b      	ldr	r3, [r3, #0]
 8038d74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8038d78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8038d7c:	d0e7      	beq.n	8038d4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8038d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8038d80:	4618      	mov	r0, r3
 8038d82:	371c      	adds	r7, #28
 8038d84:	46bd      	mov	sp, r7
 8038d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038d8a:	4770      	bx	lr

08038d8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8038d8c:	b480      	push	{r7}
 8038d8e:	b089      	sub	sp, #36	; 0x24
 8038d90:	af00      	add	r7, sp, #0
 8038d92:	60f8      	str	r0, [r7, #12]
 8038d94:	60b9      	str	r1, [r7, #8]
 8038d96:	4611      	mov	r1, r2
 8038d98:	461a      	mov	r2, r3
 8038d9a:	460b      	mov	r3, r1
 8038d9c:	71fb      	strb	r3, [r7, #7]
 8038d9e:	4613      	mov	r3, r2
 8038da0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038da2:	68fb      	ldr	r3, [r7, #12]
 8038da4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8038da6:	68bb      	ldr	r3, [r7, #8]
 8038da8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8038daa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8038dae:	2b00      	cmp	r3, #0
 8038db0:	d123      	bne.n	8038dfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8038db2:	88bb      	ldrh	r3, [r7, #4]
 8038db4:	3303      	adds	r3, #3
 8038db6:	089b      	lsrs	r3, r3, #2
 8038db8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8038dba:	2300      	movs	r3, #0
 8038dbc:	61bb      	str	r3, [r7, #24]
 8038dbe:	e018      	b.n	8038df2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8038dc0:	79fb      	ldrb	r3, [r7, #7]
 8038dc2:	031a      	lsls	r2, r3, #12
 8038dc4:	697b      	ldr	r3, [r7, #20]
 8038dc6:	4413      	add	r3, r2
 8038dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038dcc:	461a      	mov	r2, r3
 8038dce:	69fb      	ldr	r3, [r7, #28]
 8038dd0:	681b      	ldr	r3, [r3, #0]
 8038dd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8038dd4:	69fb      	ldr	r3, [r7, #28]
 8038dd6:	3301      	adds	r3, #1
 8038dd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038dda:	69fb      	ldr	r3, [r7, #28]
 8038ddc:	3301      	adds	r3, #1
 8038dde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038de0:	69fb      	ldr	r3, [r7, #28]
 8038de2:	3301      	adds	r3, #1
 8038de4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8038de6:	69fb      	ldr	r3, [r7, #28]
 8038de8:	3301      	adds	r3, #1
 8038dea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8038dec:	69bb      	ldr	r3, [r7, #24]
 8038dee:	3301      	adds	r3, #1
 8038df0:	61bb      	str	r3, [r7, #24]
 8038df2:	69ba      	ldr	r2, [r7, #24]
 8038df4:	693b      	ldr	r3, [r7, #16]
 8038df6:	429a      	cmp	r2, r3
 8038df8:	d3e2      	bcc.n	8038dc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8038dfa:	2300      	movs	r3, #0
}
 8038dfc:	4618      	mov	r0, r3
 8038dfe:	3724      	adds	r7, #36	; 0x24
 8038e00:	46bd      	mov	sp, r7
 8038e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038e06:	4770      	bx	lr

08038e08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8038e08:	b480      	push	{r7}
 8038e0a:	b08b      	sub	sp, #44	; 0x2c
 8038e0c:	af00      	add	r7, sp, #0
 8038e0e:	60f8      	str	r0, [r7, #12]
 8038e10:	60b9      	str	r1, [r7, #8]
 8038e12:	4613      	mov	r3, r2
 8038e14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038e16:	68fb      	ldr	r3, [r7, #12]
 8038e18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8038e1a:	68bb      	ldr	r3, [r7, #8]
 8038e1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8038e1e:	88fb      	ldrh	r3, [r7, #6]
 8038e20:	089b      	lsrs	r3, r3, #2
 8038e22:	b29b      	uxth	r3, r3
 8038e24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8038e26:	88fb      	ldrh	r3, [r7, #6]
 8038e28:	f003 0303 	and.w	r3, r3, #3
 8038e2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8038e2e:	2300      	movs	r3, #0
 8038e30:	623b      	str	r3, [r7, #32]
 8038e32:	e014      	b.n	8038e5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8038e34:	69bb      	ldr	r3, [r7, #24]
 8038e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038e3a:	681a      	ldr	r2, [r3, #0]
 8038e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8038e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e42:	3301      	adds	r3, #1
 8038e44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e48:	3301      	adds	r3, #1
 8038e4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e4e:	3301      	adds	r3, #1
 8038e50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8038e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e54:	3301      	adds	r3, #1
 8038e56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8038e58:	6a3b      	ldr	r3, [r7, #32]
 8038e5a:	3301      	adds	r3, #1
 8038e5c:	623b      	str	r3, [r7, #32]
 8038e5e:	6a3a      	ldr	r2, [r7, #32]
 8038e60:	697b      	ldr	r3, [r7, #20]
 8038e62:	429a      	cmp	r2, r3
 8038e64:	d3e6      	bcc.n	8038e34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8038e66:	8bfb      	ldrh	r3, [r7, #30]
 8038e68:	2b00      	cmp	r3, #0
 8038e6a:	d01e      	beq.n	8038eaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8038e6c:	2300      	movs	r3, #0
 8038e6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8038e70:	69bb      	ldr	r3, [r7, #24]
 8038e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8038e76:	461a      	mov	r2, r3
 8038e78:	f107 0310 	add.w	r3, r7, #16
 8038e7c:	6812      	ldr	r2, [r2, #0]
 8038e7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8038e80:	693a      	ldr	r2, [r7, #16]
 8038e82:	6a3b      	ldr	r3, [r7, #32]
 8038e84:	b2db      	uxtb	r3, r3
 8038e86:	00db      	lsls	r3, r3, #3
 8038e88:	fa22 f303 	lsr.w	r3, r2, r3
 8038e8c:	b2da      	uxtb	r2, r3
 8038e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e90:	701a      	strb	r2, [r3, #0]
      i++;
 8038e92:	6a3b      	ldr	r3, [r7, #32]
 8038e94:	3301      	adds	r3, #1
 8038e96:	623b      	str	r3, [r7, #32]
      pDest++;
 8038e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e9a:	3301      	adds	r3, #1
 8038e9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8038e9e:	8bfb      	ldrh	r3, [r7, #30]
 8038ea0:	3b01      	subs	r3, #1
 8038ea2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8038ea4:	8bfb      	ldrh	r3, [r7, #30]
 8038ea6:	2b00      	cmp	r3, #0
 8038ea8:	d1ea      	bne.n	8038e80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8038eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8038eac:	4618      	mov	r0, r3
 8038eae:	372c      	adds	r7, #44	; 0x2c
 8038eb0:	46bd      	mov	sp, r7
 8038eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038eb6:	4770      	bx	lr

08038eb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038eb8:	b480      	push	{r7}
 8038eba:	b085      	sub	sp, #20
 8038ebc:	af00      	add	r7, sp, #0
 8038ebe:	6078      	str	r0, [r7, #4]
 8038ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038ec2:	687b      	ldr	r3, [r7, #4]
 8038ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038ec6:	683b      	ldr	r3, [r7, #0]
 8038ec8:	781b      	ldrb	r3, [r3, #0]
 8038eca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038ecc:	683b      	ldr	r3, [r7, #0]
 8038ece:	785b      	ldrb	r3, [r3, #1]
 8038ed0:	2b01      	cmp	r3, #1
 8038ed2:	d12c      	bne.n	8038f2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038ed4:	68bb      	ldr	r3, [r7, #8]
 8038ed6:	015a      	lsls	r2, r3, #5
 8038ed8:	68fb      	ldr	r3, [r7, #12]
 8038eda:	4413      	add	r3, r2
 8038edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ee0:	681b      	ldr	r3, [r3, #0]
 8038ee2:	2b00      	cmp	r3, #0
 8038ee4:	db12      	blt.n	8038f0c <USB_EPSetStall+0x54>
 8038ee6:	68bb      	ldr	r3, [r7, #8]
 8038ee8:	2b00      	cmp	r3, #0
 8038eea:	d00f      	beq.n	8038f0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8038eec:	68bb      	ldr	r3, [r7, #8]
 8038eee:	015a      	lsls	r2, r3, #5
 8038ef0:	68fb      	ldr	r3, [r7, #12]
 8038ef2:	4413      	add	r3, r2
 8038ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038ef8:	681b      	ldr	r3, [r3, #0]
 8038efa:	68ba      	ldr	r2, [r7, #8]
 8038efc:	0151      	lsls	r1, r2, #5
 8038efe:	68fa      	ldr	r2, [r7, #12]
 8038f00:	440a      	add	r2, r1
 8038f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038f06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038f0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8038f0c:	68bb      	ldr	r3, [r7, #8]
 8038f0e:	015a      	lsls	r2, r3, #5
 8038f10:	68fb      	ldr	r3, [r7, #12]
 8038f12:	4413      	add	r3, r2
 8038f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038f18:	681b      	ldr	r3, [r3, #0]
 8038f1a:	68ba      	ldr	r2, [r7, #8]
 8038f1c:	0151      	lsls	r1, r2, #5
 8038f1e:	68fa      	ldr	r2, [r7, #12]
 8038f20:	440a      	add	r2, r1
 8038f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038f2a:	6013      	str	r3, [r2, #0]
 8038f2c:	e02b      	b.n	8038f86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8038f2e:	68bb      	ldr	r3, [r7, #8]
 8038f30:	015a      	lsls	r2, r3, #5
 8038f32:	68fb      	ldr	r3, [r7, #12]
 8038f34:	4413      	add	r3, r2
 8038f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f3a:	681b      	ldr	r3, [r3, #0]
 8038f3c:	2b00      	cmp	r3, #0
 8038f3e:	db12      	blt.n	8038f66 <USB_EPSetStall+0xae>
 8038f40:	68bb      	ldr	r3, [r7, #8]
 8038f42:	2b00      	cmp	r3, #0
 8038f44:	d00f      	beq.n	8038f66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8038f46:	68bb      	ldr	r3, [r7, #8]
 8038f48:	015a      	lsls	r2, r3, #5
 8038f4a:	68fb      	ldr	r3, [r7, #12]
 8038f4c:	4413      	add	r3, r2
 8038f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f52:	681b      	ldr	r3, [r3, #0]
 8038f54:	68ba      	ldr	r2, [r7, #8]
 8038f56:	0151      	lsls	r1, r2, #5
 8038f58:	68fa      	ldr	r2, [r7, #12]
 8038f5a:	440a      	add	r2, r1
 8038f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038f60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8038f64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8038f66:	68bb      	ldr	r3, [r7, #8]
 8038f68:	015a      	lsls	r2, r3, #5
 8038f6a:	68fb      	ldr	r3, [r7, #12]
 8038f6c:	4413      	add	r3, r2
 8038f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8038f72:	681b      	ldr	r3, [r3, #0]
 8038f74:	68ba      	ldr	r2, [r7, #8]
 8038f76:	0151      	lsls	r1, r2, #5
 8038f78:	68fa      	ldr	r2, [r7, #12]
 8038f7a:	440a      	add	r2, r1
 8038f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8038f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8038f84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8038f86:	2300      	movs	r3, #0
}
 8038f88:	4618      	mov	r0, r3
 8038f8a:	3714      	adds	r7, #20
 8038f8c:	46bd      	mov	sp, r7
 8038f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f92:	4770      	bx	lr

08038f94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8038f94:	b480      	push	{r7}
 8038f96:	b085      	sub	sp, #20
 8038f98:	af00      	add	r7, sp, #0
 8038f9a:	6078      	str	r0, [r7, #4]
 8038f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8038f9e:	687b      	ldr	r3, [r7, #4]
 8038fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8038fa2:	683b      	ldr	r3, [r7, #0]
 8038fa4:	781b      	ldrb	r3, [r3, #0]
 8038fa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8038fa8:	683b      	ldr	r3, [r7, #0]
 8038faa:	785b      	ldrb	r3, [r3, #1]
 8038fac:	2b01      	cmp	r3, #1
 8038fae:	d128      	bne.n	8039002 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8038fb0:	68bb      	ldr	r3, [r7, #8]
 8038fb2:	015a      	lsls	r2, r3, #5
 8038fb4:	68fb      	ldr	r3, [r7, #12]
 8038fb6:	4413      	add	r3, r2
 8038fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038fbc:	681b      	ldr	r3, [r3, #0]
 8038fbe:	68ba      	ldr	r2, [r7, #8]
 8038fc0:	0151      	lsls	r1, r2, #5
 8038fc2:	68fa      	ldr	r2, [r7, #12]
 8038fc4:	440a      	add	r2, r1
 8038fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038fca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8038fce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8038fd0:	683b      	ldr	r3, [r7, #0]
 8038fd2:	791b      	ldrb	r3, [r3, #4]
 8038fd4:	2b03      	cmp	r3, #3
 8038fd6:	d003      	beq.n	8038fe0 <USB_EPClearStall+0x4c>
 8038fd8:	683b      	ldr	r3, [r7, #0]
 8038fda:	791b      	ldrb	r3, [r3, #4]
 8038fdc:	2b02      	cmp	r3, #2
 8038fde:	d138      	bne.n	8039052 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8038fe0:	68bb      	ldr	r3, [r7, #8]
 8038fe2:	015a      	lsls	r2, r3, #5
 8038fe4:	68fb      	ldr	r3, [r7, #12]
 8038fe6:	4413      	add	r3, r2
 8038fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8038fec:	681b      	ldr	r3, [r3, #0]
 8038fee:	68ba      	ldr	r2, [r7, #8]
 8038ff0:	0151      	lsls	r1, r2, #5
 8038ff2:	68fa      	ldr	r2, [r7, #12]
 8038ff4:	440a      	add	r2, r1
 8038ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8038ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8038ffe:	6013      	str	r3, [r2, #0]
 8039000:	e027      	b.n	8039052 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8039002:	68bb      	ldr	r3, [r7, #8]
 8039004:	015a      	lsls	r2, r3, #5
 8039006:	68fb      	ldr	r3, [r7, #12]
 8039008:	4413      	add	r3, r2
 803900a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803900e:	681b      	ldr	r3, [r3, #0]
 8039010:	68ba      	ldr	r2, [r7, #8]
 8039012:	0151      	lsls	r1, r2, #5
 8039014:	68fa      	ldr	r2, [r7, #12]
 8039016:	440a      	add	r2, r1
 8039018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803901c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8039020:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8039022:	683b      	ldr	r3, [r7, #0]
 8039024:	791b      	ldrb	r3, [r3, #4]
 8039026:	2b03      	cmp	r3, #3
 8039028:	d003      	beq.n	8039032 <USB_EPClearStall+0x9e>
 803902a:	683b      	ldr	r3, [r7, #0]
 803902c:	791b      	ldrb	r3, [r3, #4]
 803902e:	2b02      	cmp	r3, #2
 8039030:	d10f      	bne.n	8039052 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8039032:	68bb      	ldr	r3, [r7, #8]
 8039034:	015a      	lsls	r2, r3, #5
 8039036:	68fb      	ldr	r3, [r7, #12]
 8039038:	4413      	add	r3, r2
 803903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803903e:	681b      	ldr	r3, [r3, #0]
 8039040:	68ba      	ldr	r2, [r7, #8]
 8039042:	0151      	lsls	r1, r2, #5
 8039044:	68fa      	ldr	r2, [r7, #12]
 8039046:	440a      	add	r2, r1
 8039048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803904c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8039050:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8039052:	2300      	movs	r3, #0
}
 8039054:	4618      	mov	r0, r3
 8039056:	3714      	adds	r7, #20
 8039058:	46bd      	mov	sp, r7
 803905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803905e:	4770      	bx	lr

08039060 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8039060:	b480      	push	{r7}
 8039062:	b085      	sub	sp, #20
 8039064:	af00      	add	r7, sp, #0
 8039066:	6078      	str	r0, [r7, #4]
 8039068:	460b      	mov	r3, r1
 803906a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803906c:	687b      	ldr	r3, [r7, #4]
 803906e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8039070:	68fb      	ldr	r3, [r7, #12]
 8039072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039076:	681b      	ldr	r3, [r3, #0]
 8039078:	68fa      	ldr	r2, [r7, #12]
 803907a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803907e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8039082:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8039084:	68fb      	ldr	r3, [r7, #12]
 8039086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803908a:	681a      	ldr	r2, [r3, #0]
 803908c:	78fb      	ldrb	r3, [r7, #3]
 803908e:	011b      	lsls	r3, r3, #4
 8039090:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8039094:	68f9      	ldr	r1, [r7, #12]
 8039096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 803909a:	4313      	orrs	r3, r2
 803909c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 803909e:	2300      	movs	r3, #0
}
 80390a0:	4618      	mov	r0, r3
 80390a2:	3714      	adds	r7, #20
 80390a4:	46bd      	mov	sp, r7
 80390a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390aa:	4770      	bx	lr

080390ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80390ac:	b480      	push	{r7}
 80390ae:	b085      	sub	sp, #20
 80390b0:	af00      	add	r7, sp, #0
 80390b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80390b4:	687b      	ldr	r3, [r7, #4]
 80390b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80390b8:	68fb      	ldr	r3, [r7, #12]
 80390ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80390be:	681b      	ldr	r3, [r3, #0]
 80390c0:	68fa      	ldr	r2, [r7, #12]
 80390c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80390c6:	f023 0303 	bic.w	r3, r3, #3
 80390ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80390cc:	68fb      	ldr	r3, [r7, #12]
 80390ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80390d2:	685b      	ldr	r3, [r3, #4]
 80390d4:	68fa      	ldr	r2, [r7, #12]
 80390d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80390da:	f023 0302 	bic.w	r3, r3, #2
 80390de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80390e0:	2300      	movs	r3, #0
}
 80390e2:	4618      	mov	r0, r3
 80390e4:	3714      	adds	r7, #20
 80390e6:	46bd      	mov	sp, r7
 80390e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80390ec:	4770      	bx	lr

080390ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80390ee:	b480      	push	{r7}
 80390f0:	b085      	sub	sp, #20
 80390f2:	af00      	add	r7, sp, #0
 80390f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80390f6:	687b      	ldr	r3, [r7, #4]
 80390f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80390fa:	68fb      	ldr	r3, [r7, #12]
 80390fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8039100:	681b      	ldr	r3, [r3, #0]
 8039102:	68fa      	ldr	r2, [r7, #12]
 8039104:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8039108:	f023 0303 	bic.w	r3, r3, #3
 803910c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 803910e:	68fb      	ldr	r3, [r7, #12]
 8039110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039114:	685b      	ldr	r3, [r3, #4]
 8039116:	68fa      	ldr	r2, [r7, #12]
 8039118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 803911c:	f043 0302 	orr.w	r3, r3, #2
 8039120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8039122:	2300      	movs	r3, #0
}
 8039124:	4618      	mov	r0, r3
 8039126:	3714      	adds	r7, #20
 8039128:	46bd      	mov	sp, r7
 803912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803912e:	4770      	bx	lr

08039130 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8039130:	b480      	push	{r7}
 8039132:	b085      	sub	sp, #20
 8039134:	af00      	add	r7, sp, #0
 8039136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8039138:	687b      	ldr	r3, [r7, #4]
 803913a:	695b      	ldr	r3, [r3, #20]
 803913c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 803913e:	687b      	ldr	r3, [r7, #4]
 8039140:	699b      	ldr	r3, [r3, #24]
 8039142:	68fa      	ldr	r2, [r7, #12]
 8039144:	4013      	ands	r3, r2
 8039146:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8039148:	68fb      	ldr	r3, [r7, #12]
}
 803914a:	4618      	mov	r0, r3
 803914c:	3714      	adds	r7, #20
 803914e:	46bd      	mov	sp, r7
 8039150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039154:	4770      	bx	lr

08039156 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8039156:	b480      	push	{r7}
 8039158:	b085      	sub	sp, #20
 803915a:	af00      	add	r7, sp, #0
 803915c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803915e:	687b      	ldr	r3, [r7, #4]
 8039160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8039162:	68fb      	ldr	r3, [r7, #12]
 8039164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039168:	699b      	ldr	r3, [r3, #24]
 803916a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 803916c:	68fb      	ldr	r3, [r7, #12]
 803916e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039172:	69db      	ldr	r3, [r3, #28]
 8039174:	68ba      	ldr	r2, [r7, #8]
 8039176:	4013      	ands	r3, r2
 8039178:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 803917a:	68bb      	ldr	r3, [r7, #8]
 803917c:	0c1b      	lsrs	r3, r3, #16
}
 803917e:	4618      	mov	r0, r3
 8039180:	3714      	adds	r7, #20
 8039182:	46bd      	mov	sp, r7
 8039184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039188:	4770      	bx	lr

0803918a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 803918a:	b480      	push	{r7}
 803918c:	b085      	sub	sp, #20
 803918e:	af00      	add	r7, sp, #0
 8039190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039192:	687b      	ldr	r3, [r7, #4]
 8039194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8039196:	68fb      	ldr	r3, [r7, #12]
 8039198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803919c:	699b      	ldr	r3, [r3, #24]
 803919e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80391a0:	68fb      	ldr	r3, [r7, #12]
 80391a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80391a6:	69db      	ldr	r3, [r3, #28]
 80391a8:	68ba      	ldr	r2, [r7, #8]
 80391aa:	4013      	ands	r3, r2
 80391ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80391ae:	68bb      	ldr	r3, [r7, #8]
 80391b0:	b29b      	uxth	r3, r3
}
 80391b2:	4618      	mov	r0, r3
 80391b4:	3714      	adds	r7, #20
 80391b6:	46bd      	mov	sp, r7
 80391b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391bc:	4770      	bx	lr

080391be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80391be:	b480      	push	{r7}
 80391c0:	b085      	sub	sp, #20
 80391c2:	af00      	add	r7, sp, #0
 80391c4:	6078      	str	r0, [r7, #4]
 80391c6:	460b      	mov	r3, r1
 80391c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80391ca:	687b      	ldr	r3, [r7, #4]
 80391cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80391ce:	78fb      	ldrb	r3, [r7, #3]
 80391d0:	015a      	lsls	r2, r3, #5
 80391d2:	68fb      	ldr	r3, [r7, #12]
 80391d4:	4413      	add	r3, r2
 80391d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80391da:	689b      	ldr	r3, [r3, #8]
 80391dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80391de:	68fb      	ldr	r3, [r7, #12]
 80391e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80391e4:	695b      	ldr	r3, [r3, #20]
 80391e6:	68ba      	ldr	r2, [r7, #8]
 80391e8:	4013      	ands	r3, r2
 80391ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80391ec:	68bb      	ldr	r3, [r7, #8]
}
 80391ee:	4618      	mov	r0, r3
 80391f0:	3714      	adds	r7, #20
 80391f2:	46bd      	mov	sp, r7
 80391f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80391f8:	4770      	bx	lr

080391fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80391fa:	b480      	push	{r7}
 80391fc:	b087      	sub	sp, #28
 80391fe:	af00      	add	r7, sp, #0
 8039200:	6078      	str	r0, [r7, #4]
 8039202:	460b      	mov	r3, r1
 8039204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8039206:	687b      	ldr	r3, [r7, #4]
 8039208:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 803920a:	697b      	ldr	r3, [r7, #20]
 803920c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8039210:	691b      	ldr	r3, [r3, #16]
 8039212:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8039214:	697b      	ldr	r3, [r7, #20]
 8039216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803921a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803921c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 803921e:	78fb      	ldrb	r3, [r7, #3]
 8039220:	f003 030f 	and.w	r3, r3, #15
 8039224:	68fa      	ldr	r2, [r7, #12]
 8039226:	fa22 f303 	lsr.w	r3, r2, r3
 803922a:	01db      	lsls	r3, r3, #7
 803922c:	b2db      	uxtb	r3, r3
 803922e:	693a      	ldr	r2, [r7, #16]
 8039230:	4313      	orrs	r3, r2
 8039232:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8039234:	78fb      	ldrb	r3, [r7, #3]
 8039236:	015a      	lsls	r2, r3, #5
 8039238:	697b      	ldr	r3, [r7, #20]
 803923a:	4413      	add	r3, r2
 803923c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039240:	689b      	ldr	r3, [r3, #8]
 8039242:	693a      	ldr	r2, [r7, #16]
 8039244:	4013      	ands	r3, r2
 8039246:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8039248:	68bb      	ldr	r3, [r7, #8]
}
 803924a:	4618      	mov	r0, r3
 803924c:	371c      	adds	r7, #28
 803924e:	46bd      	mov	sp, r7
 8039250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039254:	4770      	bx	lr

08039256 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8039256:	b480      	push	{r7}
 8039258:	b083      	sub	sp, #12
 803925a:	af00      	add	r7, sp, #0
 803925c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 803925e:	687b      	ldr	r3, [r7, #4]
 8039260:	695b      	ldr	r3, [r3, #20]
 8039262:	f003 0301 	and.w	r3, r3, #1
}
 8039266:	4618      	mov	r0, r3
 8039268:	370c      	adds	r7, #12
 803926a:	46bd      	mov	sp, r7
 803926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039270:	4770      	bx	lr
	...

08039274 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8039274:	b480      	push	{r7}
 8039276:	b085      	sub	sp, #20
 8039278:	af00      	add	r7, sp, #0
 803927a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 803927c:	687b      	ldr	r3, [r7, #4]
 803927e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8039280:	68fb      	ldr	r3, [r7, #12]
 8039282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8039286:	681a      	ldr	r2, [r3, #0]
 8039288:	68fb      	ldr	r3, [r7, #12]
 803928a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 803928e:	4619      	mov	r1, r3
 8039290:	4b09      	ldr	r3, [pc, #36]	; (80392b8 <USB_ActivateSetup+0x44>)
 8039292:	4013      	ands	r3, r2
 8039294:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8039296:	68fb      	ldr	r3, [r7, #12]
 8039298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 803929c:	685b      	ldr	r3, [r3, #4]
 803929e:	68fa      	ldr	r2, [r7, #12]
 80392a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80392a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80392a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80392aa:	2300      	movs	r3, #0
}
 80392ac:	4618      	mov	r0, r3
 80392ae:	3714      	adds	r7, #20
 80392b0:	46bd      	mov	sp, r7
 80392b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80392b6:	4770      	bx	lr
 80392b8:	fffff800 	.word	0xfffff800

080392bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80392bc:	b480      	push	{r7}
 80392be:	b087      	sub	sp, #28
 80392c0:	af00      	add	r7, sp, #0
 80392c2:	60f8      	str	r0, [r7, #12]
 80392c4:	460b      	mov	r3, r1
 80392c6:	607a      	str	r2, [r7, #4]
 80392c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80392ca:	68fb      	ldr	r3, [r7, #12]
 80392cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80392ce:	68fb      	ldr	r3, [r7, #12]
 80392d0:	333c      	adds	r3, #60	; 0x3c
 80392d2:	3304      	adds	r3, #4
 80392d4:	681b      	ldr	r3, [r3, #0]
 80392d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80392d8:	693b      	ldr	r3, [r7, #16]
 80392da:	4a26      	ldr	r2, [pc, #152]	; (8039374 <USB_EP0_OutStart+0xb8>)
 80392dc:	4293      	cmp	r3, r2
 80392de:	d90a      	bls.n	80392f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80392e0:	697b      	ldr	r3, [r7, #20]
 80392e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80392e6:	681b      	ldr	r3, [r3, #0]
 80392e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80392ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80392f0:	d101      	bne.n	80392f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80392f2:	2300      	movs	r3, #0
 80392f4:	e037      	b.n	8039366 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80392f6:	697b      	ldr	r3, [r7, #20]
 80392f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80392fc:	461a      	mov	r2, r3
 80392fe:	2300      	movs	r3, #0
 8039300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8039302:	697b      	ldr	r3, [r7, #20]
 8039304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039308:	691b      	ldr	r3, [r3, #16]
 803930a:	697a      	ldr	r2, [r7, #20]
 803930c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8039314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8039316:	697b      	ldr	r3, [r7, #20]
 8039318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803931c:	691b      	ldr	r3, [r3, #16]
 803931e:	697a      	ldr	r2, [r7, #20]
 8039320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039324:	f043 0318 	orr.w	r3, r3, #24
 8039328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 803932a:	697b      	ldr	r3, [r7, #20]
 803932c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039330:	691b      	ldr	r3, [r3, #16]
 8039332:	697a      	ldr	r2, [r7, #20]
 8039334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8039338:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 803933c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 803933e:	7afb      	ldrb	r3, [r7, #11]
 8039340:	2b01      	cmp	r3, #1
 8039342:	d10f      	bne.n	8039364 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8039344:	697b      	ldr	r3, [r7, #20]
 8039346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 803934a:	461a      	mov	r2, r3
 803934c:	687b      	ldr	r3, [r7, #4]
 803934e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8039350:	697b      	ldr	r3, [r7, #20]
 8039352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8039356:	681b      	ldr	r3, [r3, #0]
 8039358:	697a      	ldr	r2, [r7, #20]
 803935a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 803935e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8039362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8039364:	2300      	movs	r3, #0
}
 8039366:	4618      	mov	r0, r3
 8039368:	371c      	adds	r7, #28
 803936a:	46bd      	mov	sp, r7
 803936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039370:	4770      	bx	lr
 8039372:	bf00      	nop
 8039374:	4f54300a 	.word	0x4f54300a

08039378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8039378:	b480      	push	{r7}
 803937a:	b085      	sub	sp, #20
 803937c:	af00      	add	r7, sp, #0
 803937e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8039380:	2300      	movs	r3, #0
 8039382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8039384:	68fb      	ldr	r3, [r7, #12]
 8039386:	3301      	adds	r3, #1
 8039388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 803938a:	68fb      	ldr	r3, [r7, #12]
 803938c:	4a13      	ldr	r2, [pc, #76]	; (80393dc <USB_CoreReset+0x64>)
 803938e:	4293      	cmp	r3, r2
 8039390:	d901      	bls.n	8039396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8039392:	2303      	movs	r3, #3
 8039394:	e01b      	b.n	80393ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8039396:	687b      	ldr	r3, [r7, #4]
 8039398:	691b      	ldr	r3, [r3, #16]
 803939a:	2b00      	cmp	r3, #0
 803939c:	daf2      	bge.n	8039384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 803939e:	2300      	movs	r3, #0
 80393a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80393a2:	687b      	ldr	r3, [r7, #4]
 80393a4:	691b      	ldr	r3, [r3, #16]
 80393a6:	f043 0201 	orr.w	r2, r3, #1
 80393aa:	687b      	ldr	r3, [r7, #4]
 80393ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80393ae:	68fb      	ldr	r3, [r7, #12]
 80393b0:	3301      	adds	r3, #1
 80393b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80393b4:	68fb      	ldr	r3, [r7, #12]
 80393b6:	4a09      	ldr	r2, [pc, #36]	; (80393dc <USB_CoreReset+0x64>)
 80393b8:	4293      	cmp	r3, r2
 80393ba:	d901      	bls.n	80393c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80393bc:	2303      	movs	r3, #3
 80393be:	e006      	b.n	80393ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80393c0:	687b      	ldr	r3, [r7, #4]
 80393c2:	691b      	ldr	r3, [r3, #16]
 80393c4:	f003 0301 	and.w	r3, r3, #1
 80393c8:	2b01      	cmp	r3, #1
 80393ca:	d0f0      	beq.n	80393ae <USB_CoreReset+0x36>

  return HAL_OK;
 80393cc:	2300      	movs	r3, #0
}
 80393ce:	4618      	mov	r0, r3
 80393d0:	3714      	adds	r7, #20
 80393d2:	46bd      	mov	sp, r7
 80393d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80393d8:	4770      	bx	lr
 80393da:	bf00      	nop
 80393dc:	00030d40 	.word	0x00030d40

080393e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80393e0:	b580      	push	{r7, lr}
 80393e2:	b084      	sub	sp, #16
 80393e4:	af00      	add	r7, sp, #0
 80393e6:	6078      	str	r0, [r7, #4]
 80393e8:	460b      	mov	r3, r1
 80393ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80393ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80393f0:	f002 fc54 	bl	803bc9c <USBD_static_malloc>
 80393f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80393f6:	68fb      	ldr	r3, [r7, #12]
 80393f8:	2b00      	cmp	r3, #0
 80393fa:	d109      	bne.n	8039410 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80393fc:	687b      	ldr	r3, [r7, #4]
 80393fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039402:	687b      	ldr	r3, [r7, #4]
 8039404:	32b0      	adds	r2, #176	; 0xb0
 8039406:	2100      	movs	r1, #0
 8039408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 803940c:	2302      	movs	r3, #2
 803940e:	e0d4      	b.n	80395ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8039410:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8039414:	2100      	movs	r1, #0
 8039416:	68f8      	ldr	r0, [r7, #12]
 8039418:	f002 fd42 	bl	803bea0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 803941c:	687b      	ldr	r3, [r7, #4]
 803941e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039422:	687b      	ldr	r3, [r7, #4]
 8039424:	32b0      	adds	r2, #176	; 0xb0
 8039426:	68f9      	ldr	r1, [r7, #12]
 8039428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 803942c:	687b      	ldr	r3, [r7, #4]
 803942e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039432:	687b      	ldr	r3, [r7, #4]
 8039434:	32b0      	adds	r2, #176	; 0xb0
 8039436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 803943a:	687b      	ldr	r3, [r7, #4]
 803943c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039440:	687b      	ldr	r3, [r7, #4]
 8039442:	7c1b      	ldrb	r3, [r3, #16]
 8039444:	2b00      	cmp	r3, #0
 8039446:	d138      	bne.n	80394ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8039448:	4b5e      	ldr	r3, [pc, #376]	; (80395c4 <USBD_CDC_Init+0x1e4>)
 803944a:	7819      	ldrb	r1, [r3, #0]
 803944c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039450:	2202      	movs	r2, #2
 8039452:	6878      	ldr	r0, [r7, #4]
 8039454:	f002 faff 	bl	803ba56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8039458:	4b5a      	ldr	r3, [pc, #360]	; (80395c4 <USBD_CDC_Init+0x1e4>)
 803945a:	781b      	ldrb	r3, [r3, #0]
 803945c:	f003 020f 	and.w	r2, r3, #15
 8039460:	6879      	ldr	r1, [r7, #4]
 8039462:	4613      	mov	r3, r2
 8039464:	009b      	lsls	r3, r3, #2
 8039466:	4413      	add	r3, r2
 8039468:	009b      	lsls	r3, r3, #2
 803946a:	440b      	add	r3, r1
 803946c:	3324      	adds	r3, #36	; 0x24
 803946e:	2201      	movs	r2, #1
 8039470:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8039472:	4b55      	ldr	r3, [pc, #340]	; (80395c8 <USBD_CDC_Init+0x1e8>)
 8039474:	7819      	ldrb	r1, [r3, #0]
 8039476:	f44f 7300 	mov.w	r3, #512	; 0x200
 803947a:	2202      	movs	r2, #2
 803947c:	6878      	ldr	r0, [r7, #4]
 803947e:	f002 faea 	bl	803ba56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8039482:	4b51      	ldr	r3, [pc, #324]	; (80395c8 <USBD_CDC_Init+0x1e8>)
 8039484:	781b      	ldrb	r3, [r3, #0]
 8039486:	f003 020f 	and.w	r2, r3, #15
 803948a:	6879      	ldr	r1, [r7, #4]
 803948c:	4613      	mov	r3, r2
 803948e:	009b      	lsls	r3, r3, #2
 8039490:	4413      	add	r3, r2
 8039492:	009b      	lsls	r3, r3, #2
 8039494:	440b      	add	r3, r1
 8039496:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803949a:	2201      	movs	r2, #1
 803949c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 803949e:	4b4b      	ldr	r3, [pc, #300]	; (80395cc <USBD_CDC_Init+0x1ec>)
 80394a0:	781b      	ldrb	r3, [r3, #0]
 80394a2:	f003 020f 	and.w	r2, r3, #15
 80394a6:	6879      	ldr	r1, [r7, #4]
 80394a8:	4613      	mov	r3, r2
 80394aa:	009b      	lsls	r3, r3, #2
 80394ac:	4413      	add	r3, r2
 80394ae:	009b      	lsls	r3, r3, #2
 80394b0:	440b      	add	r3, r1
 80394b2:	3326      	adds	r3, #38	; 0x26
 80394b4:	2210      	movs	r2, #16
 80394b6:	801a      	strh	r2, [r3, #0]
 80394b8:	e035      	b.n	8039526 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80394ba:	4b42      	ldr	r3, [pc, #264]	; (80395c4 <USBD_CDC_Init+0x1e4>)
 80394bc:	7819      	ldrb	r1, [r3, #0]
 80394be:	2340      	movs	r3, #64	; 0x40
 80394c0:	2202      	movs	r2, #2
 80394c2:	6878      	ldr	r0, [r7, #4]
 80394c4:	f002 fac7 	bl	803ba56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80394c8:	4b3e      	ldr	r3, [pc, #248]	; (80395c4 <USBD_CDC_Init+0x1e4>)
 80394ca:	781b      	ldrb	r3, [r3, #0]
 80394cc:	f003 020f 	and.w	r2, r3, #15
 80394d0:	6879      	ldr	r1, [r7, #4]
 80394d2:	4613      	mov	r3, r2
 80394d4:	009b      	lsls	r3, r3, #2
 80394d6:	4413      	add	r3, r2
 80394d8:	009b      	lsls	r3, r3, #2
 80394da:	440b      	add	r3, r1
 80394dc:	3324      	adds	r3, #36	; 0x24
 80394de:	2201      	movs	r2, #1
 80394e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80394e2:	4b39      	ldr	r3, [pc, #228]	; (80395c8 <USBD_CDC_Init+0x1e8>)
 80394e4:	7819      	ldrb	r1, [r3, #0]
 80394e6:	2340      	movs	r3, #64	; 0x40
 80394e8:	2202      	movs	r2, #2
 80394ea:	6878      	ldr	r0, [r7, #4]
 80394ec:	f002 fab3 	bl	803ba56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80394f0:	4b35      	ldr	r3, [pc, #212]	; (80395c8 <USBD_CDC_Init+0x1e8>)
 80394f2:	781b      	ldrb	r3, [r3, #0]
 80394f4:	f003 020f 	and.w	r2, r3, #15
 80394f8:	6879      	ldr	r1, [r7, #4]
 80394fa:	4613      	mov	r3, r2
 80394fc:	009b      	lsls	r3, r3, #2
 80394fe:	4413      	add	r3, r2
 8039500:	009b      	lsls	r3, r3, #2
 8039502:	440b      	add	r3, r1
 8039504:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8039508:	2201      	movs	r2, #1
 803950a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 803950c:	4b2f      	ldr	r3, [pc, #188]	; (80395cc <USBD_CDC_Init+0x1ec>)
 803950e:	781b      	ldrb	r3, [r3, #0]
 8039510:	f003 020f 	and.w	r2, r3, #15
 8039514:	6879      	ldr	r1, [r7, #4]
 8039516:	4613      	mov	r3, r2
 8039518:	009b      	lsls	r3, r3, #2
 803951a:	4413      	add	r3, r2
 803951c:	009b      	lsls	r3, r3, #2
 803951e:	440b      	add	r3, r1
 8039520:	3326      	adds	r3, #38	; 0x26
 8039522:	2210      	movs	r2, #16
 8039524:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8039526:	4b29      	ldr	r3, [pc, #164]	; (80395cc <USBD_CDC_Init+0x1ec>)
 8039528:	7819      	ldrb	r1, [r3, #0]
 803952a:	2308      	movs	r3, #8
 803952c:	2203      	movs	r2, #3
 803952e:	6878      	ldr	r0, [r7, #4]
 8039530:	f002 fa91 	bl	803ba56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8039534:	4b25      	ldr	r3, [pc, #148]	; (80395cc <USBD_CDC_Init+0x1ec>)
 8039536:	781b      	ldrb	r3, [r3, #0]
 8039538:	f003 020f 	and.w	r2, r3, #15
 803953c:	6879      	ldr	r1, [r7, #4]
 803953e:	4613      	mov	r3, r2
 8039540:	009b      	lsls	r3, r3, #2
 8039542:	4413      	add	r3, r2
 8039544:	009b      	lsls	r3, r3, #2
 8039546:	440b      	add	r3, r1
 8039548:	3324      	adds	r3, #36	; 0x24
 803954a:	2201      	movs	r2, #1
 803954c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 803954e:	68fb      	ldr	r3, [r7, #12]
 8039550:	2200      	movs	r2, #0
 8039552:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8039556:	687b      	ldr	r3, [r7, #4]
 8039558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803955c:	687a      	ldr	r2, [r7, #4]
 803955e:	33b0      	adds	r3, #176	; 0xb0
 8039560:	009b      	lsls	r3, r3, #2
 8039562:	4413      	add	r3, r2
 8039564:	685b      	ldr	r3, [r3, #4]
 8039566:	681b      	ldr	r3, [r3, #0]
 8039568:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 803956a:	68fb      	ldr	r3, [r7, #12]
 803956c:	2200      	movs	r2, #0
 803956e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8039572:	68fb      	ldr	r3, [r7, #12]
 8039574:	2200      	movs	r2, #0
 8039576:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 803957a:	68fb      	ldr	r3, [r7, #12]
 803957c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8039580:	2b00      	cmp	r3, #0
 8039582:	d101      	bne.n	8039588 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8039584:	2302      	movs	r3, #2
 8039586:	e018      	b.n	80395ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039588:	687b      	ldr	r3, [r7, #4]
 803958a:	7c1b      	ldrb	r3, [r3, #16]
 803958c:	2b00      	cmp	r3, #0
 803958e:	d10a      	bne.n	80395a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039590:	4b0d      	ldr	r3, [pc, #52]	; (80395c8 <USBD_CDC_Init+0x1e8>)
 8039592:	7819      	ldrb	r1, [r3, #0]
 8039594:	68fb      	ldr	r3, [r7, #12]
 8039596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 803959a:	f44f 7300 	mov.w	r3, #512	; 0x200
 803959e:	6878      	ldr	r0, [r7, #4]
 80395a0:	f002 fb48 	bl	803bc34 <USBD_LL_PrepareReceive>
 80395a4:	e008      	b.n	80395b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80395a6:	4b08      	ldr	r3, [pc, #32]	; (80395c8 <USBD_CDC_Init+0x1e8>)
 80395a8:	7819      	ldrb	r1, [r3, #0]
 80395aa:	68fb      	ldr	r3, [r7, #12]
 80395ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80395b0:	2340      	movs	r3, #64	; 0x40
 80395b2:	6878      	ldr	r0, [r7, #4]
 80395b4:	f002 fb3e 	bl	803bc34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80395b8:	2300      	movs	r3, #0
}
 80395ba:	4618      	mov	r0, r3
 80395bc:	3710      	adds	r7, #16
 80395be:	46bd      	mov	sp, r7
 80395c0:	bd80      	pop	{r7, pc}
 80395c2:	bf00      	nop
 80395c4:	2400009b 	.word	0x2400009b
 80395c8:	2400009c 	.word	0x2400009c
 80395cc:	2400009d 	.word	0x2400009d

080395d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80395d0:	b580      	push	{r7, lr}
 80395d2:	b082      	sub	sp, #8
 80395d4:	af00      	add	r7, sp, #0
 80395d6:	6078      	str	r0, [r7, #4]
 80395d8:	460b      	mov	r3, r1
 80395da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80395dc:	4b3a      	ldr	r3, [pc, #232]	; (80396c8 <USBD_CDC_DeInit+0xf8>)
 80395de:	781b      	ldrb	r3, [r3, #0]
 80395e0:	4619      	mov	r1, r3
 80395e2:	6878      	ldr	r0, [r7, #4]
 80395e4:	f002 fa5d 	bl	803baa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80395e8:	4b37      	ldr	r3, [pc, #220]	; (80396c8 <USBD_CDC_DeInit+0xf8>)
 80395ea:	781b      	ldrb	r3, [r3, #0]
 80395ec:	f003 020f 	and.w	r2, r3, #15
 80395f0:	6879      	ldr	r1, [r7, #4]
 80395f2:	4613      	mov	r3, r2
 80395f4:	009b      	lsls	r3, r3, #2
 80395f6:	4413      	add	r3, r2
 80395f8:	009b      	lsls	r3, r3, #2
 80395fa:	440b      	add	r3, r1
 80395fc:	3324      	adds	r3, #36	; 0x24
 80395fe:	2200      	movs	r2, #0
 8039600:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8039602:	4b32      	ldr	r3, [pc, #200]	; (80396cc <USBD_CDC_DeInit+0xfc>)
 8039604:	781b      	ldrb	r3, [r3, #0]
 8039606:	4619      	mov	r1, r3
 8039608:	6878      	ldr	r0, [r7, #4]
 803960a:	f002 fa4a 	bl	803baa2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 803960e:	4b2f      	ldr	r3, [pc, #188]	; (80396cc <USBD_CDC_DeInit+0xfc>)
 8039610:	781b      	ldrb	r3, [r3, #0]
 8039612:	f003 020f 	and.w	r2, r3, #15
 8039616:	6879      	ldr	r1, [r7, #4]
 8039618:	4613      	mov	r3, r2
 803961a:	009b      	lsls	r3, r3, #2
 803961c:	4413      	add	r3, r2
 803961e:	009b      	lsls	r3, r3, #2
 8039620:	440b      	add	r3, r1
 8039622:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8039626:	2200      	movs	r2, #0
 8039628:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 803962a:	4b29      	ldr	r3, [pc, #164]	; (80396d0 <USBD_CDC_DeInit+0x100>)
 803962c:	781b      	ldrb	r3, [r3, #0]
 803962e:	4619      	mov	r1, r3
 8039630:	6878      	ldr	r0, [r7, #4]
 8039632:	f002 fa36 	bl	803baa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8039636:	4b26      	ldr	r3, [pc, #152]	; (80396d0 <USBD_CDC_DeInit+0x100>)
 8039638:	781b      	ldrb	r3, [r3, #0]
 803963a:	f003 020f 	and.w	r2, r3, #15
 803963e:	6879      	ldr	r1, [r7, #4]
 8039640:	4613      	mov	r3, r2
 8039642:	009b      	lsls	r3, r3, #2
 8039644:	4413      	add	r3, r2
 8039646:	009b      	lsls	r3, r3, #2
 8039648:	440b      	add	r3, r1
 803964a:	3324      	adds	r3, #36	; 0x24
 803964c:	2200      	movs	r2, #0
 803964e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8039650:	4b1f      	ldr	r3, [pc, #124]	; (80396d0 <USBD_CDC_DeInit+0x100>)
 8039652:	781b      	ldrb	r3, [r3, #0]
 8039654:	f003 020f 	and.w	r2, r3, #15
 8039658:	6879      	ldr	r1, [r7, #4]
 803965a:	4613      	mov	r3, r2
 803965c:	009b      	lsls	r3, r3, #2
 803965e:	4413      	add	r3, r2
 8039660:	009b      	lsls	r3, r3, #2
 8039662:	440b      	add	r3, r1
 8039664:	3326      	adds	r3, #38	; 0x26
 8039666:	2200      	movs	r2, #0
 8039668:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 803966a:	687b      	ldr	r3, [r7, #4]
 803966c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039670:	687b      	ldr	r3, [r7, #4]
 8039672:	32b0      	adds	r2, #176	; 0xb0
 8039674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039678:	2b00      	cmp	r3, #0
 803967a:	d01f      	beq.n	80396bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 803967c:	687b      	ldr	r3, [r7, #4]
 803967e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039682:	687a      	ldr	r2, [r7, #4]
 8039684:	33b0      	adds	r3, #176	; 0xb0
 8039686:	009b      	lsls	r3, r3, #2
 8039688:	4413      	add	r3, r2
 803968a:	685b      	ldr	r3, [r3, #4]
 803968c:	685b      	ldr	r3, [r3, #4]
 803968e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8039690:	687b      	ldr	r3, [r7, #4]
 8039692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039696:	687b      	ldr	r3, [r7, #4]
 8039698:	32b0      	adds	r2, #176	; 0xb0
 803969a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803969e:	4618      	mov	r0, r3
 80396a0:	f002 fb0a 	bl	803bcb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80396a4:	687b      	ldr	r3, [r7, #4]
 80396a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80396aa:	687b      	ldr	r3, [r7, #4]
 80396ac:	32b0      	adds	r2, #176	; 0xb0
 80396ae:	2100      	movs	r1, #0
 80396b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80396b4:	687b      	ldr	r3, [r7, #4]
 80396b6:	2200      	movs	r2, #0
 80396b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80396bc:	2300      	movs	r3, #0
}
 80396be:	4618      	mov	r0, r3
 80396c0:	3708      	adds	r7, #8
 80396c2:	46bd      	mov	sp, r7
 80396c4:	bd80      	pop	{r7, pc}
 80396c6:	bf00      	nop
 80396c8:	2400009b 	.word	0x2400009b
 80396cc:	2400009c 	.word	0x2400009c
 80396d0:	2400009d 	.word	0x2400009d

080396d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80396d4:	b580      	push	{r7, lr}
 80396d6:	b086      	sub	sp, #24
 80396d8:	af00      	add	r7, sp, #0
 80396da:	6078      	str	r0, [r7, #4]
 80396dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80396de:	687b      	ldr	r3, [r7, #4]
 80396e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80396e4:	687b      	ldr	r3, [r7, #4]
 80396e6:	32b0      	adds	r2, #176	; 0xb0
 80396e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80396ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80396ee:	2300      	movs	r3, #0
 80396f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80396f2:	2300      	movs	r3, #0
 80396f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80396f6:	2300      	movs	r3, #0
 80396f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80396fa:	693b      	ldr	r3, [r7, #16]
 80396fc:	2b00      	cmp	r3, #0
 80396fe:	d101      	bne.n	8039704 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8039700:	2303      	movs	r3, #3
 8039702:	e0bf      	b.n	8039884 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8039704:	683b      	ldr	r3, [r7, #0]
 8039706:	781b      	ldrb	r3, [r3, #0]
 8039708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803970c:	2b00      	cmp	r3, #0
 803970e:	d050      	beq.n	80397b2 <USBD_CDC_Setup+0xde>
 8039710:	2b20      	cmp	r3, #32
 8039712:	f040 80af 	bne.w	8039874 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8039716:	683b      	ldr	r3, [r7, #0]
 8039718:	88db      	ldrh	r3, [r3, #6]
 803971a:	2b00      	cmp	r3, #0
 803971c:	d03a      	beq.n	8039794 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 803971e:	683b      	ldr	r3, [r7, #0]
 8039720:	781b      	ldrb	r3, [r3, #0]
 8039722:	b25b      	sxtb	r3, r3
 8039724:	2b00      	cmp	r3, #0
 8039726:	da1b      	bge.n	8039760 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039728:	687b      	ldr	r3, [r7, #4]
 803972a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803972e:	687a      	ldr	r2, [r7, #4]
 8039730:	33b0      	adds	r3, #176	; 0xb0
 8039732:	009b      	lsls	r3, r3, #2
 8039734:	4413      	add	r3, r2
 8039736:	685b      	ldr	r3, [r3, #4]
 8039738:	689b      	ldr	r3, [r3, #8]
 803973a:	683a      	ldr	r2, [r7, #0]
 803973c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 803973e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039740:	683a      	ldr	r2, [r7, #0]
 8039742:	88d2      	ldrh	r2, [r2, #6]
 8039744:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8039746:	683b      	ldr	r3, [r7, #0]
 8039748:	88db      	ldrh	r3, [r3, #6]
 803974a:	2b07      	cmp	r3, #7
 803974c:	bf28      	it	cs
 803974e:	2307      	movcs	r3, #7
 8039750:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8039752:	693b      	ldr	r3, [r7, #16]
 8039754:	89fa      	ldrh	r2, [r7, #14]
 8039756:	4619      	mov	r1, r3
 8039758:	6878      	ldr	r0, [r7, #4]
 803975a:	f001 fd43 	bl	803b1e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 803975e:	e090      	b.n	8039882 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8039760:	683b      	ldr	r3, [r7, #0]
 8039762:	785a      	ldrb	r2, [r3, #1]
 8039764:	693b      	ldr	r3, [r7, #16]
 8039766:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 803976a:	683b      	ldr	r3, [r7, #0]
 803976c:	88db      	ldrh	r3, [r3, #6]
 803976e:	2b3f      	cmp	r3, #63	; 0x3f
 8039770:	d803      	bhi.n	803977a <USBD_CDC_Setup+0xa6>
 8039772:	683b      	ldr	r3, [r7, #0]
 8039774:	88db      	ldrh	r3, [r3, #6]
 8039776:	b2da      	uxtb	r2, r3
 8039778:	e000      	b.n	803977c <USBD_CDC_Setup+0xa8>
 803977a:	2240      	movs	r2, #64	; 0x40
 803977c:	693b      	ldr	r3, [r7, #16]
 803977e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8039782:	6939      	ldr	r1, [r7, #16]
 8039784:	693b      	ldr	r3, [r7, #16]
 8039786:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 803978a:	461a      	mov	r2, r3
 803978c:	6878      	ldr	r0, [r7, #4]
 803978e:	f001 fd55 	bl	803b23c <USBD_CtlPrepareRx>
      break;
 8039792:	e076      	b.n	8039882 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8039794:	687b      	ldr	r3, [r7, #4]
 8039796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803979a:	687a      	ldr	r2, [r7, #4]
 803979c:	33b0      	adds	r3, #176	; 0xb0
 803979e:	009b      	lsls	r3, r3, #2
 80397a0:	4413      	add	r3, r2
 80397a2:	685b      	ldr	r3, [r3, #4]
 80397a4:	689b      	ldr	r3, [r3, #8]
 80397a6:	683a      	ldr	r2, [r7, #0]
 80397a8:	7850      	ldrb	r0, [r2, #1]
 80397aa:	2200      	movs	r2, #0
 80397ac:	6839      	ldr	r1, [r7, #0]
 80397ae:	4798      	blx	r3
      break;
 80397b0:	e067      	b.n	8039882 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80397b2:	683b      	ldr	r3, [r7, #0]
 80397b4:	785b      	ldrb	r3, [r3, #1]
 80397b6:	2b0b      	cmp	r3, #11
 80397b8:	d851      	bhi.n	803985e <USBD_CDC_Setup+0x18a>
 80397ba:	a201      	add	r2, pc, #4	; (adr r2, 80397c0 <USBD_CDC_Setup+0xec>)
 80397bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80397c0:	080397f1 	.word	0x080397f1
 80397c4:	0803986d 	.word	0x0803986d
 80397c8:	0803985f 	.word	0x0803985f
 80397cc:	0803985f 	.word	0x0803985f
 80397d0:	0803985f 	.word	0x0803985f
 80397d4:	0803985f 	.word	0x0803985f
 80397d8:	0803985f 	.word	0x0803985f
 80397dc:	0803985f 	.word	0x0803985f
 80397e0:	0803985f 	.word	0x0803985f
 80397e4:	0803985f 	.word	0x0803985f
 80397e8:	0803981b 	.word	0x0803981b
 80397ec:	08039845 	.word	0x08039845
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80397f0:	687b      	ldr	r3, [r7, #4]
 80397f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80397f6:	b2db      	uxtb	r3, r3
 80397f8:	2b03      	cmp	r3, #3
 80397fa:	d107      	bne.n	803980c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80397fc:	f107 030a 	add.w	r3, r7, #10
 8039800:	2202      	movs	r2, #2
 8039802:	4619      	mov	r1, r3
 8039804:	6878      	ldr	r0, [r7, #4]
 8039806:	f001 fced 	bl	803b1e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 803980a:	e032      	b.n	8039872 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 803980c:	6839      	ldr	r1, [r7, #0]
 803980e:	6878      	ldr	r0, [r7, #4]
 8039810:	f001 fc77 	bl	803b102 <USBD_CtlError>
            ret = USBD_FAIL;
 8039814:	2303      	movs	r3, #3
 8039816:	75fb      	strb	r3, [r7, #23]
          break;
 8039818:	e02b      	b.n	8039872 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803981a:	687b      	ldr	r3, [r7, #4]
 803981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039820:	b2db      	uxtb	r3, r3
 8039822:	2b03      	cmp	r3, #3
 8039824:	d107      	bne.n	8039836 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8039826:	f107 030d 	add.w	r3, r7, #13
 803982a:	2201      	movs	r2, #1
 803982c:	4619      	mov	r1, r3
 803982e:	6878      	ldr	r0, [r7, #4]
 8039830:	f001 fcd8 	bl	803b1e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8039834:	e01d      	b.n	8039872 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8039836:	6839      	ldr	r1, [r7, #0]
 8039838:	6878      	ldr	r0, [r7, #4]
 803983a:	f001 fc62 	bl	803b102 <USBD_CtlError>
            ret = USBD_FAIL;
 803983e:	2303      	movs	r3, #3
 8039840:	75fb      	strb	r3, [r7, #23]
          break;
 8039842:	e016      	b.n	8039872 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8039844:	687b      	ldr	r3, [r7, #4]
 8039846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803984a:	b2db      	uxtb	r3, r3
 803984c:	2b03      	cmp	r3, #3
 803984e:	d00f      	beq.n	8039870 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8039850:	6839      	ldr	r1, [r7, #0]
 8039852:	6878      	ldr	r0, [r7, #4]
 8039854:	f001 fc55 	bl	803b102 <USBD_CtlError>
            ret = USBD_FAIL;
 8039858:	2303      	movs	r3, #3
 803985a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 803985c:	e008      	b.n	8039870 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 803985e:	6839      	ldr	r1, [r7, #0]
 8039860:	6878      	ldr	r0, [r7, #4]
 8039862:	f001 fc4e 	bl	803b102 <USBD_CtlError>
          ret = USBD_FAIL;
 8039866:	2303      	movs	r3, #3
 8039868:	75fb      	strb	r3, [r7, #23]
          break;
 803986a:	e002      	b.n	8039872 <USBD_CDC_Setup+0x19e>
          break;
 803986c:	bf00      	nop
 803986e:	e008      	b.n	8039882 <USBD_CDC_Setup+0x1ae>
          break;
 8039870:	bf00      	nop
      }
      break;
 8039872:	e006      	b.n	8039882 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8039874:	6839      	ldr	r1, [r7, #0]
 8039876:	6878      	ldr	r0, [r7, #4]
 8039878:	f001 fc43 	bl	803b102 <USBD_CtlError>
      ret = USBD_FAIL;
 803987c:	2303      	movs	r3, #3
 803987e:	75fb      	strb	r3, [r7, #23]
      break;
 8039880:	bf00      	nop
  }

  return (uint8_t)ret;
 8039882:	7dfb      	ldrb	r3, [r7, #23]
}
 8039884:	4618      	mov	r0, r3
 8039886:	3718      	adds	r7, #24
 8039888:	46bd      	mov	sp, r7
 803988a:	bd80      	pop	{r7, pc}

0803988c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803988c:	b580      	push	{r7, lr}
 803988e:	b084      	sub	sp, #16
 8039890:	af00      	add	r7, sp, #0
 8039892:	6078      	str	r0, [r7, #4]
 8039894:	460b      	mov	r3, r1
 8039896:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8039898:	687b      	ldr	r3, [r7, #4]
 803989a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803989e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80398a0:	687b      	ldr	r3, [r7, #4]
 80398a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80398a6:	687b      	ldr	r3, [r7, #4]
 80398a8:	32b0      	adds	r2, #176	; 0xb0
 80398aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80398ae:	2b00      	cmp	r3, #0
 80398b0:	d101      	bne.n	80398b6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80398b2:	2303      	movs	r3, #3
 80398b4:	e065      	b.n	8039982 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80398b6:	687b      	ldr	r3, [r7, #4]
 80398b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80398bc:	687b      	ldr	r3, [r7, #4]
 80398be:	32b0      	adds	r2, #176	; 0xb0
 80398c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80398c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80398c6:	78fb      	ldrb	r3, [r7, #3]
 80398c8:	f003 020f 	and.w	r2, r3, #15
 80398cc:	6879      	ldr	r1, [r7, #4]
 80398ce:	4613      	mov	r3, r2
 80398d0:	009b      	lsls	r3, r3, #2
 80398d2:	4413      	add	r3, r2
 80398d4:	009b      	lsls	r3, r3, #2
 80398d6:	440b      	add	r3, r1
 80398d8:	3318      	adds	r3, #24
 80398da:	681b      	ldr	r3, [r3, #0]
 80398dc:	2b00      	cmp	r3, #0
 80398de:	d02f      	beq.n	8039940 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80398e0:	78fb      	ldrb	r3, [r7, #3]
 80398e2:	f003 020f 	and.w	r2, r3, #15
 80398e6:	6879      	ldr	r1, [r7, #4]
 80398e8:	4613      	mov	r3, r2
 80398ea:	009b      	lsls	r3, r3, #2
 80398ec:	4413      	add	r3, r2
 80398ee:	009b      	lsls	r3, r3, #2
 80398f0:	440b      	add	r3, r1
 80398f2:	3318      	adds	r3, #24
 80398f4:	681a      	ldr	r2, [r3, #0]
 80398f6:	78fb      	ldrb	r3, [r7, #3]
 80398f8:	f003 010f 	and.w	r1, r3, #15
 80398fc:	68f8      	ldr	r0, [r7, #12]
 80398fe:	460b      	mov	r3, r1
 8039900:	00db      	lsls	r3, r3, #3
 8039902:	440b      	add	r3, r1
 8039904:	009b      	lsls	r3, r3, #2
 8039906:	4403      	add	r3, r0
 8039908:	3348      	adds	r3, #72	; 0x48
 803990a:	681b      	ldr	r3, [r3, #0]
 803990c:	fbb2 f1f3 	udiv	r1, r2, r3
 8039910:	fb01 f303 	mul.w	r3, r1, r3
 8039914:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8039916:	2b00      	cmp	r3, #0
 8039918:	d112      	bne.n	8039940 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 803991a:	78fb      	ldrb	r3, [r7, #3]
 803991c:	f003 020f 	and.w	r2, r3, #15
 8039920:	6879      	ldr	r1, [r7, #4]
 8039922:	4613      	mov	r3, r2
 8039924:	009b      	lsls	r3, r3, #2
 8039926:	4413      	add	r3, r2
 8039928:	009b      	lsls	r3, r3, #2
 803992a:	440b      	add	r3, r1
 803992c:	3318      	adds	r3, #24
 803992e:	2200      	movs	r2, #0
 8039930:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8039932:	78f9      	ldrb	r1, [r7, #3]
 8039934:	2300      	movs	r3, #0
 8039936:	2200      	movs	r2, #0
 8039938:	6878      	ldr	r0, [r7, #4]
 803993a:	f002 f95a 	bl	803bbf2 <USBD_LL_Transmit>
 803993e:	e01f      	b.n	8039980 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8039940:	68bb      	ldr	r3, [r7, #8]
 8039942:	2200      	movs	r2, #0
 8039944:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8039948:	687b      	ldr	r3, [r7, #4]
 803994a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 803994e:	687a      	ldr	r2, [r7, #4]
 8039950:	33b0      	adds	r3, #176	; 0xb0
 8039952:	009b      	lsls	r3, r3, #2
 8039954:	4413      	add	r3, r2
 8039956:	685b      	ldr	r3, [r3, #4]
 8039958:	691b      	ldr	r3, [r3, #16]
 803995a:	2b00      	cmp	r3, #0
 803995c:	d010      	beq.n	8039980 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 803995e:	687b      	ldr	r3, [r7, #4]
 8039960:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039964:	687a      	ldr	r2, [r7, #4]
 8039966:	33b0      	adds	r3, #176	; 0xb0
 8039968:	009b      	lsls	r3, r3, #2
 803996a:	4413      	add	r3, r2
 803996c:	685b      	ldr	r3, [r3, #4]
 803996e:	691b      	ldr	r3, [r3, #16]
 8039970:	68ba      	ldr	r2, [r7, #8]
 8039972:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8039976:	68ba      	ldr	r2, [r7, #8]
 8039978:	f502 7104 	add.w	r1, r2, #528	; 0x210
 803997c:	78fa      	ldrb	r2, [r7, #3]
 803997e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8039980:	2300      	movs	r3, #0
}
 8039982:	4618      	mov	r0, r3
 8039984:	3710      	adds	r7, #16
 8039986:	46bd      	mov	sp, r7
 8039988:	bd80      	pop	{r7, pc}

0803998a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 803998a:	b580      	push	{r7, lr}
 803998c:	b084      	sub	sp, #16
 803998e:	af00      	add	r7, sp, #0
 8039990:	6078      	str	r0, [r7, #4]
 8039992:	460b      	mov	r3, r1
 8039994:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039996:	687b      	ldr	r3, [r7, #4]
 8039998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803999c:	687b      	ldr	r3, [r7, #4]
 803999e:	32b0      	adds	r2, #176	; 0xb0
 80399a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80399a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80399a6:	687b      	ldr	r3, [r7, #4]
 80399a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80399ac:	687b      	ldr	r3, [r7, #4]
 80399ae:	32b0      	adds	r2, #176	; 0xb0
 80399b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80399b4:	2b00      	cmp	r3, #0
 80399b6:	d101      	bne.n	80399bc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80399b8:	2303      	movs	r3, #3
 80399ba:	e01a      	b.n	80399f2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80399bc:	78fb      	ldrb	r3, [r7, #3]
 80399be:	4619      	mov	r1, r3
 80399c0:	6878      	ldr	r0, [r7, #4]
 80399c2:	f002 f958 	bl	803bc76 <USBD_LL_GetRxDataSize>
 80399c6:	4602      	mov	r2, r0
 80399c8:	68fb      	ldr	r3, [r7, #12]
 80399ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80399ce:	687b      	ldr	r3, [r7, #4]
 80399d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80399d4:	687a      	ldr	r2, [r7, #4]
 80399d6:	33b0      	adds	r3, #176	; 0xb0
 80399d8:	009b      	lsls	r3, r3, #2
 80399da:	4413      	add	r3, r2
 80399dc:	685b      	ldr	r3, [r3, #4]
 80399de:	68db      	ldr	r3, [r3, #12]
 80399e0:	68fa      	ldr	r2, [r7, #12]
 80399e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80399e6:	68fa      	ldr	r2, [r7, #12]
 80399e8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80399ec:	4611      	mov	r1, r2
 80399ee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80399f0:	2300      	movs	r3, #0
}
 80399f2:	4618      	mov	r0, r3
 80399f4:	3710      	adds	r7, #16
 80399f6:	46bd      	mov	sp, r7
 80399f8:	bd80      	pop	{r7, pc}

080399fa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80399fa:	b580      	push	{r7, lr}
 80399fc:	b084      	sub	sp, #16
 80399fe:	af00      	add	r7, sp, #0
 8039a00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039a02:	687b      	ldr	r3, [r7, #4]
 8039a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039a08:	687b      	ldr	r3, [r7, #4]
 8039a0a:	32b0      	adds	r2, #176	; 0xb0
 8039a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039a10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039a12:	68fb      	ldr	r3, [r7, #12]
 8039a14:	2b00      	cmp	r3, #0
 8039a16:	d101      	bne.n	8039a1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8039a18:	2303      	movs	r3, #3
 8039a1a:	e025      	b.n	8039a68 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8039a1c:	687b      	ldr	r3, [r7, #4]
 8039a1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039a22:	687a      	ldr	r2, [r7, #4]
 8039a24:	33b0      	adds	r3, #176	; 0xb0
 8039a26:	009b      	lsls	r3, r3, #2
 8039a28:	4413      	add	r3, r2
 8039a2a:	685b      	ldr	r3, [r3, #4]
 8039a2c:	2b00      	cmp	r3, #0
 8039a2e:	d01a      	beq.n	8039a66 <USBD_CDC_EP0_RxReady+0x6c>
 8039a30:	68fb      	ldr	r3, [r7, #12]
 8039a32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8039a36:	2bff      	cmp	r3, #255	; 0xff
 8039a38:	d015      	beq.n	8039a66 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8039a3a:	687b      	ldr	r3, [r7, #4]
 8039a3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039a40:	687a      	ldr	r2, [r7, #4]
 8039a42:	33b0      	adds	r3, #176	; 0xb0
 8039a44:	009b      	lsls	r3, r3, #2
 8039a46:	4413      	add	r3, r2
 8039a48:	685b      	ldr	r3, [r3, #4]
 8039a4a:	689b      	ldr	r3, [r3, #8]
 8039a4c:	68fa      	ldr	r2, [r7, #12]
 8039a4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8039a52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8039a54:	68fa      	ldr	r2, [r7, #12]
 8039a56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8039a5a:	b292      	uxth	r2, r2
 8039a5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8039a5e:	68fb      	ldr	r3, [r7, #12]
 8039a60:	22ff      	movs	r2, #255	; 0xff
 8039a62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8039a66:	2300      	movs	r3, #0
}
 8039a68:	4618      	mov	r0, r3
 8039a6a:	3710      	adds	r7, #16
 8039a6c:	46bd      	mov	sp, r7
 8039a6e:	bd80      	pop	{r7, pc}

08039a70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8039a70:	b580      	push	{r7, lr}
 8039a72:	b086      	sub	sp, #24
 8039a74:	af00      	add	r7, sp, #0
 8039a76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039a78:	2182      	movs	r1, #130	; 0x82
 8039a7a:	4818      	ldr	r0, [pc, #96]	; (8039adc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039a7c:	f000 fd09 	bl	803a492 <USBD_GetEpDesc>
 8039a80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039a82:	2101      	movs	r1, #1
 8039a84:	4815      	ldr	r0, [pc, #84]	; (8039adc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039a86:	f000 fd04 	bl	803a492 <USBD_GetEpDesc>
 8039a8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039a8c:	2181      	movs	r1, #129	; 0x81
 8039a8e:	4813      	ldr	r0, [pc, #76]	; (8039adc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8039a90:	f000 fcff 	bl	803a492 <USBD_GetEpDesc>
 8039a94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039a96:	697b      	ldr	r3, [r7, #20]
 8039a98:	2b00      	cmp	r3, #0
 8039a9a:	d002      	beq.n	8039aa2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8039a9c:	697b      	ldr	r3, [r7, #20]
 8039a9e:	2210      	movs	r2, #16
 8039aa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039aa2:	693b      	ldr	r3, [r7, #16]
 8039aa4:	2b00      	cmp	r3, #0
 8039aa6:	d006      	beq.n	8039ab6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039aa8:	693b      	ldr	r3, [r7, #16]
 8039aaa:	2200      	movs	r2, #0
 8039aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039ab0:	711a      	strb	r2, [r3, #4]
 8039ab2:	2200      	movs	r2, #0
 8039ab4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039ab6:	68fb      	ldr	r3, [r7, #12]
 8039ab8:	2b00      	cmp	r3, #0
 8039aba:	d006      	beq.n	8039aca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039abc:	68fb      	ldr	r3, [r7, #12]
 8039abe:	2200      	movs	r2, #0
 8039ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039ac4:	711a      	strb	r2, [r3, #4]
 8039ac6:	2200      	movs	r2, #0
 8039ac8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039aca:	687b      	ldr	r3, [r7, #4]
 8039acc:	2243      	movs	r2, #67	; 0x43
 8039ace:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039ad0:	4b02      	ldr	r3, [pc, #8]	; (8039adc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8039ad2:	4618      	mov	r0, r3
 8039ad4:	3718      	adds	r7, #24
 8039ad6:	46bd      	mov	sp, r7
 8039ad8:	bd80      	pop	{r7, pc}
 8039ada:	bf00      	nop
 8039adc:	24000058 	.word	0x24000058

08039ae0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8039ae0:	b580      	push	{r7, lr}
 8039ae2:	b086      	sub	sp, #24
 8039ae4:	af00      	add	r7, sp, #0
 8039ae6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039ae8:	2182      	movs	r1, #130	; 0x82
 8039aea:	4818      	ldr	r0, [pc, #96]	; (8039b4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039aec:	f000 fcd1 	bl	803a492 <USBD_GetEpDesc>
 8039af0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039af2:	2101      	movs	r1, #1
 8039af4:	4815      	ldr	r0, [pc, #84]	; (8039b4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039af6:	f000 fccc 	bl	803a492 <USBD_GetEpDesc>
 8039afa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039afc:	2181      	movs	r1, #129	; 0x81
 8039afe:	4813      	ldr	r0, [pc, #76]	; (8039b4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8039b00:	f000 fcc7 	bl	803a492 <USBD_GetEpDesc>
 8039b04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039b06:	697b      	ldr	r3, [r7, #20]
 8039b08:	2b00      	cmp	r3, #0
 8039b0a:	d002      	beq.n	8039b12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8039b0c:	697b      	ldr	r3, [r7, #20]
 8039b0e:	2210      	movs	r2, #16
 8039b10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039b12:	693b      	ldr	r3, [r7, #16]
 8039b14:	2b00      	cmp	r3, #0
 8039b16:	d006      	beq.n	8039b26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039b18:	693b      	ldr	r3, [r7, #16]
 8039b1a:	2200      	movs	r2, #0
 8039b1c:	711a      	strb	r2, [r3, #4]
 8039b1e:	2200      	movs	r2, #0
 8039b20:	f042 0202 	orr.w	r2, r2, #2
 8039b24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039b26:	68fb      	ldr	r3, [r7, #12]
 8039b28:	2b00      	cmp	r3, #0
 8039b2a:	d006      	beq.n	8039b3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8039b2c:	68fb      	ldr	r3, [r7, #12]
 8039b2e:	2200      	movs	r2, #0
 8039b30:	711a      	strb	r2, [r3, #4]
 8039b32:	2200      	movs	r2, #0
 8039b34:	f042 0202 	orr.w	r2, r2, #2
 8039b38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039b3a:	687b      	ldr	r3, [r7, #4]
 8039b3c:	2243      	movs	r2, #67	; 0x43
 8039b3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039b40:	4b02      	ldr	r3, [pc, #8]	; (8039b4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8039b42:	4618      	mov	r0, r3
 8039b44:	3718      	adds	r7, #24
 8039b46:	46bd      	mov	sp, r7
 8039b48:	bd80      	pop	{r7, pc}
 8039b4a:	bf00      	nop
 8039b4c:	24000058 	.word	0x24000058

08039b50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8039b50:	b580      	push	{r7, lr}
 8039b52:	b086      	sub	sp, #24
 8039b54:	af00      	add	r7, sp, #0
 8039b56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8039b58:	2182      	movs	r1, #130	; 0x82
 8039b5a:	4818      	ldr	r0, [pc, #96]	; (8039bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b5c:	f000 fc99 	bl	803a492 <USBD_GetEpDesc>
 8039b60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8039b62:	2101      	movs	r1, #1
 8039b64:	4815      	ldr	r0, [pc, #84]	; (8039bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b66:	f000 fc94 	bl	803a492 <USBD_GetEpDesc>
 8039b6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8039b6c:	2181      	movs	r1, #129	; 0x81
 8039b6e:	4813      	ldr	r0, [pc, #76]	; (8039bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8039b70:	f000 fc8f 	bl	803a492 <USBD_GetEpDesc>
 8039b74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8039b76:	697b      	ldr	r3, [r7, #20]
 8039b78:	2b00      	cmp	r3, #0
 8039b7a:	d002      	beq.n	8039b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8039b7c:	697b      	ldr	r3, [r7, #20]
 8039b7e:	2210      	movs	r2, #16
 8039b80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8039b82:	693b      	ldr	r3, [r7, #16]
 8039b84:	2b00      	cmp	r3, #0
 8039b86:	d006      	beq.n	8039b96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039b88:	693b      	ldr	r3, [r7, #16]
 8039b8a:	2200      	movs	r2, #0
 8039b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039b90:	711a      	strb	r2, [r3, #4]
 8039b92:	2200      	movs	r2, #0
 8039b94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8039b96:	68fb      	ldr	r3, [r7, #12]
 8039b98:	2b00      	cmp	r3, #0
 8039b9a:	d006      	beq.n	8039baa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8039b9c:	68fb      	ldr	r3, [r7, #12]
 8039b9e:	2200      	movs	r2, #0
 8039ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8039ba4:	711a      	strb	r2, [r3, #4]
 8039ba6:	2200      	movs	r2, #0
 8039ba8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8039baa:	687b      	ldr	r3, [r7, #4]
 8039bac:	2243      	movs	r2, #67	; 0x43
 8039bae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8039bb0:	4b02      	ldr	r3, [pc, #8]	; (8039bbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8039bb2:	4618      	mov	r0, r3
 8039bb4:	3718      	adds	r7, #24
 8039bb6:	46bd      	mov	sp, r7
 8039bb8:	bd80      	pop	{r7, pc}
 8039bba:	bf00      	nop
 8039bbc:	24000058 	.word	0x24000058

08039bc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8039bc0:	b480      	push	{r7}
 8039bc2:	b083      	sub	sp, #12
 8039bc4:	af00      	add	r7, sp, #0
 8039bc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8039bc8:	687b      	ldr	r3, [r7, #4]
 8039bca:	220a      	movs	r2, #10
 8039bcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8039bce:	4b03      	ldr	r3, [pc, #12]	; (8039bdc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8039bd0:	4618      	mov	r0, r3
 8039bd2:	370c      	adds	r7, #12
 8039bd4:	46bd      	mov	sp, r7
 8039bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039bda:	4770      	bx	lr
 8039bdc:	24000014 	.word	0x24000014

08039be0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8039be0:	b480      	push	{r7}
 8039be2:	b083      	sub	sp, #12
 8039be4:	af00      	add	r7, sp, #0
 8039be6:	6078      	str	r0, [r7, #4]
 8039be8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8039bea:	683b      	ldr	r3, [r7, #0]
 8039bec:	2b00      	cmp	r3, #0
 8039bee:	d101      	bne.n	8039bf4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8039bf0:	2303      	movs	r3, #3
 8039bf2:	e009      	b.n	8039c08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8039bf4:	687b      	ldr	r3, [r7, #4]
 8039bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8039bfa:	687a      	ldr	r2, [r7, #4]
 8039bfc:	33b0      	adds	r3, #176	; 0xb0
 8039bfe:	009b      	lsls	r3, r3, #2
 8039c00:	4413      	add	r3, r2
 8039c02:	683a      	ldr	r2, [r7, #0]
 8039c04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8039c06:	2300      	movs	r3, #0
}
 8039c08:	4618      	mov	r0, r3
 8039c0a:	370c      	adds	r7, #12
 8039c0c:	46bd      	mov	sp, r7
 8039c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c12:	4770      	bx	lr

08039c14 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8039c14:	b480      	push	{r7}
 8039c16:	b087      	sub	sp, #28
 8039c18:	af00      	add	r7, sp, #0
 8039c1a:	60f8      	str	r0, [r7, #12]
 8039c1c:	60b9      	str	r1, [r7, #8]
 8039c1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039c20:	68fb      	ldr	r3, [r7, #12]
 8039c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039c26:	68fb      	ldr	r3, [r7, #12]
 8039c28:	32b0      	adds	r2, #176	; 0xb0
 8039c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039c2e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8039c30:	697b      	ldr	r3, [r7, #20]
 8039c32:	2b00      	cmp	r3, #0
 8039c34:	d101      	bne.n	8039c3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8039c36:	2303      	movs	r3, #3
 8039c38:	e008      	b.n	8039c4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8039c3a:	697b      	ldr	r3, [r7, #20]
 8039c3c:	68ba      	ldr	r2, [r7, #8]
 8039c3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8039c42:	697b      	ldr	r3, [r7, #20]
 8039c44:	687a      	ldr	r2, [r7, #4]
 8039c46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8039c4a:	2300      	movs	r3, #0
}
 8039c4c:	4618      	mov	r0, r3
 8039c4e:	371c      	adds	r7, #28
 8039c50:	46bd      	mov	sp, r7
 8039c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c56:	4770      	bx	lr

08039c58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8039c58:	b480      	push	{r7}
 8039c5a:	b085      	sub	sp, #20
 8039c5c:	af00      	add	r7, sp, #0
 8039c5e:	6078      	str	r0, [r7, #4]
 8039c60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039c62:	687b      	ldr	r3, [r7, #4]
 8039c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039c68:	687b      	ldr	r3, [r7, #4]
 8039c6a:	32b0      	adds	r2, #176	; 0xb0
 8039c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039c70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8039c72:	68fb      	ldr	r3, [r7, #12]
 8039c74:	2b00      	cmp	r3, #0
 8039c76:	d101      	bne.n	8039c7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8039c78:	2303      	movs	r3, #3
 8039c7a:	e004      	b.n	8039c86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8039c7c:	68fb      	ldr	r3, [r7, #12]
 8039c7e:	683a      	ldr	r2, [r7, #0]
 8039c80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8039c84:	2300      	movs	r3, #0
}
 8039c86:	4618      	mov	r0, r3
 8039c88:	3714      	adds	r7, #20
 8039c8a:	46bd      	mov	sp, r7
 8039c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039c90:	4770      	bx	lr
	...

08039c94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8039c94:	b580      	push	{r7, lr}
 8039c96:	b084      	sub	sp, #16
 8039c98:	af00      	add	r7, sp, #0
 8039c9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8039c9c:	687b      	ldr	r3, [r7, #4]
 8039c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039ca2:	687b      	ldr	r3, [r7, #4]
 8039ca4:	32b0      	adds	r2, #176	; 0xb0
 8039ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039caa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8039cac:	687b      	ldr	r3, [r7, #4]
 8039cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039cb2:	687b      	ldr	r3, [r7, #4]
 8039cb4:	32b0      	adds	r2, #176	; 0xb0
 8039cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039cba:	2b00      	cmp	r3, #0
 8039cbc:	d101      	bne.n	8039cc2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8039cbe:	2303      	movs	r3, #3
 8039cc0:	e018      	b.n	8039cf4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8039cc2:	687b      	ldr	r3, [r7, #4]
 8039cc4:	7c1b      	ldrb	r3, [r3, #16]
 8039cc6:	2b00      	cmp	r3, #0
 8039cc8:	d10a      	bne.n	8039ce0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039cca:	4b0c      	ldr	r3, [pc, #48]	; (8039cfc <USBD_CDC_ReceivePacket+0x68>)
 8039ccc:	7819      	ldrb	r1, [r3, #0]
 8039cce:	68fb      	ldr	r3, [r7, #12]
 8039cd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8039cd8:	6878      	ldr	r0, [r7, #4]
 8039cda:	f001 ffab 	bl	803bc34 <USBD_LL_PrepareReceive>
 8039cde:	e008      	b.n	8039cf2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8039ce0:	4b06      	ldr	r3, [pc, #24]	; (8039cfc <USBD_CDC_ReceivePacket+0x68>)
 8039ce2:	7819      	ldrb	r1, [r3, #0]
 8039ce4:	68fb      	ldr	r3, [r7, #12]
 8039ce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8039cea:	2340      	movs	r3, #64	; 0x40
 8039cec:	6878      	ldr	r0, [r7, #4]
 8039cee:	f001 ffa1 	bl	803bc34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8039cf2:	2300      	movs	r3, #0
}
 8039cf4:	4618      	mov	r0, r3
 8039cf6:	3710      	adds	r7, #16
 8039cf8:	46bd      	mov	sp, r7
 8039cfa:	bd80      	pop	{r7, pc}
 8039cfc:	2400009c 	.word	0x2400009c

08039d00 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8039d00:	b580      	push	{r7, lr}
 8039d02:	b086      	sub	sp, #24
 8039d04:	af00      	add	r7, sp, #0
 8039d06:	60f8      	str	r0, [r7, #12]
 8039d08:	60b9      	str	r1, [r7, #8]
 8039d0a:	4613      	mov	r3, r2
 8039d0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8039d0e:	68fb      	ldr	r3, [r7, #12]
 8039d10:	2b00      	cmp	r3, #0
 8039d12:	d101      	bne.n	8039d18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039d14:	2303      	movs	r3, #3
 8039d16:	e01f      	b.n	8039d58 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8039d18:	68fb      	ldr	r3, [r7, #12]
 8039d1a:	2200      	movs	r2, #0
 8039d1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8039d20:	68fb      	ldr	r3, [r7, #12]
 8039d22:	2200      	movs	r2, #0
 8039d24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8039d28:	68fb      	ldr	r3, [r7, #12]
 8039d2a:	2200      	movs	r2, #0
 8039d2c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8039d30:	68bb      	ldr	r3, [r7, #8]
 8039d32:	2b00      	cmp	r3, #0
 8039d34:	d003      	beq.n	8039d3e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8039d36:	68fb      	ldr	r3, [r7, #12]
 8039d38:	68ba      	ldr	r2, [r7, #8]
 8039d3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8039d3e:	68fb      	ldr	r3, [r7, #12]
 8039d40:	2201      	movs	r2, #1
 8039d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8039d46:	68fb      	ldr	r3, [r7, #12]
 8039d48:	79fa      	ldrb	r2, [r7, #7]
 8039d4a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8039d4c:	68f8      	ldr	r0, [r7, #12]
 8039d4e:	f001 fe17 	bl	803b980 <USBD_LL_Init>
 8039d52:	4603      	mov	r3, r0
 8039d54:	75fb      	strb	r3, [r7, #23]

  return ret;
 8039d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8039d58:	4618      	mov	r0, r3
 8039d5a:	3718      	adds	r7, #24
 8039d5c:	46bd      	mov	sp, r7
 8039d5e:	bd80      	pop	{r7, pc}

08039d60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8039d60:	b580      	push	{r7, lr}
 8039d62:	b084      	sub	sp, #16
 8039d64:	af00      	add	r7, sp, #0
 8039d66:	6078      	str	r0, [r7, #4]
 8039d68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8039d6a:	2300      	movs	r3, #0
 8039d6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8039d6e:	683b      	ldr	r3, [r7, #0]
 8039d70:	2b00      	cmp	r3, #0
 8039d72:	d101      	bne.n	8039d78 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8039d74:	2303      	movs	r3, #3
 8039d76:	e025      	b.n	8039dc4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8039d78:	687b      	ldr	r3, [r7, #4]
 8039d7a:	683a      	ldr	r2, [r7, #0]
 8039d7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8039d80:	687b      	ldr	r3, [r7, #4]
 8039d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039d86:	687b      	ldr	r3, [r7, #4]
 8039d88:	32ae      	adds	r2, #174	; 0xae
 8039d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039d90:	2b00      	cmp	r3, #0
 8039d92:	d00f      	beq.n	8039db4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8039d94:	687b      	ldr	r3, [r7, #4]
 8039d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8039d9a:	687b      	ldr	r3, [r7, #4]
 8039d9c:	32ae      	adds	r2, #174	; 0xae
 8039d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039da4:	f107 020e 	add.w	r2, r7, #14
 8039da8:	4610      	mov	r0, r2
 8039daa:	4798      	blx	r3
 8039dac:	4602      	mov	r2, r0
 8039dae:	687b      	ldr	r3, [r7, #4]
 8039db0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8039db4:	687b      	ldr	r3, [r7, #4]
 8039db6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8039dba:	1c5a      	adds	r2, r3, #1
 8039dbc:	687b      	ldr	r3, [r7, #4]
 8039dbe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8039dc2:	2300      	movs	r3, #0
}
 8039dc4:	4618      	mov	r0, r3
 8039dc6:	3710      	adds	r7, #16
 8039dc8:	46bd      	mov	sp, r7
 8039dca:	bd80      	pop	{r7, pc}

08039dcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8039dcc:	b580      	push	{r7, lr}
 8039dce:	b082      	sub	sp, #8
 8039dd0:	af00      	add	r7, sp, #0
 8039dd2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8039dd4:	6878      	ldr	r0, [r7, #4]
 8039dd6:	f001 fe23 	bl	803ba20 <USBD_LL_Start>
 8039dda:	4603      	mov	r3, r0
}
 8039ddc:	4618      	mov	r0, r3
 8039dde:	3708      	adds	r7, #8
 8039de0:	46bd      	mov	sp, r7
 8039de2:	bd80      	pop	{r7, pc}

08039de4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8039de4:	b480      	push	{r7}
 8039de6:	b083      	sub	sp, #12
 8039de8:	af00      	add	r7, sp, #0
 8039dea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8039dec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8039dee:	4618      	mov	r0, r3
 8039df0:	370c      	adds	r7, #12
 8039df2:	46bd      	mov	sp, r7
 8039df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039df8:	4770      	bx	lr

08039dfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039dfa:	b580      	push	{r7, lr}
 8039dfc:	b084      	sub	sp, #16
 8039dfe:	af00      	add	r7, sp, #0
 8039e00:	6078      	str	r0, [r7, #4]
 8039e02:	460b      	mov	r3, r1
 8039e04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039e06:	2300      	movs	r3, #0
 8039e08:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8039e0a:	687b      	ldr	r3, [r7, #4]
 8039e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039e10:	2b00      	cmp	r3, #0
 8039e12:	d009      	beq.n	8039e28 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8039e14:	687b      	ldr	r3, [r7, #4]
 8039e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039e1a:	681b      	ldr	r3, [r3, #0]
 8039e1c:	78fa      	ldrb	r2, [r7, #3]
 8039e1e:	4611      	mov	r1, r2
 8039e20:	6878      	ldr	r0, [r7, #4]
 8039e22:	4798      	blx	r3
 8039e24:	4603      	mov	r3, r0
 8039e26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8039e2a:	4618      	mov	r0, r3
 8039e2c:	3710      	adds	r7, #16
 8039e2e:	46bd      	mov	sp, r7
 8039e30:	bd80      	pop	{r7, pc}

08039e32 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8039e32:	b580      	push	{r7, lr}
 8039e34:	b084      	sub	sp, #16
 8039e36:	af00      	add	r7, sp, #0
 8039e38:	6078      	str	r0, [r7, #4]
 8039e3a:	460b      	mov	r3, r1
 8039e3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8039e3e:	2300      	movs	r3, #0
 8039e40:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8039e42:	687b      	ldr	r3, [r7, #4]
 8039e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8039e48:	685b      	ldr	r3, [r3, #4]
 8039e4a:	78fa      	ldrb	r2, [r7, #3]
 8039e4c:	4611      	mov	r1, r2
 8039e4e:	6878      	ldr	r0, [r7, #4]
 8039e50:	4798      	blx	r3
 8039e52:	4603      	mov	r3, r0
 8039e54:	2b00      	cmp	r3, #0
 8039e56:	d001      	beq.n	8039e5c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8039e58:	2303      	movs	r3, #3
 8039e5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8039e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8039e5e:	4618      	mov	r0, r3
 8039e60:	3710      	adds	r7, #16
 8039e62:	46bd      	mov	sp, r7
 8039e64:	bd80      	pop	{r7, pc}

08039e66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8039e66:	b580      	push	{r7, lr}
 8039e68:	b084      	sub	sp, #16
 8039e6a:	af00      	add	r7, sp, #0
 8039e6c:	6078      	str	r0, [r7, #4]
 8039e6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8039e70:	687b      	ldr	r3, [r7, #4]
 8039e72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039e76:	6839      	ldr	r1, [r7, #0]
 8039e78:	4618      	mov	r0, r3
 8039e7a:	f001 f908 	bl	803b08e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8039e7e:	687b      	ldr	r3, [r7, #4]
 8039e80:	2201      	movs	r2, #1
 8039e82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8039e86:	687b      	ldr	r3, [r7, #4]
 8039e88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8039e8c:	461a      	mov	r2, r3
 8039e8e:	687b      	ldr	r3, [r7, #4]
 8039e90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8039e94:	687b      	ldr	r3, [r7, #4]
 8039e96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039e9a:	f003 031f 	and.w	r3, r3, #31
 8039e9e:	2b02      	cmp	r3, #2
 8039ea0:	d01a      	beq.n	8039ed8 <USBD_LL_SetupStage+0x72>
 8039ea2:	2b02      	cmp	r3, #2
 8039ea4:	d822      	bhi.n	8039eec <USBD_LL_SetupStage+0x86>
 8039ea6:	2b00      	cmp	r3, #0
 8039ea8:	d002      	beq.n	8039eb0 <USBD_LL_SetupStage+0x4a>
 8039eaa:	2b01      	cmp	r3, #1
 8039eac:	d00a      	beq.n	8039ec4 <USBD_LL_SetupStage+0x5e>
 8039eae:	e01d      	b.n	8039eec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8039eb0:	687b      	ldr	r3, [r7, #4]
 8039eb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039eb6:	4619      	mov	r1, r3
 8039eb8:	6878      	ldr	r0, [r7, #4]
 8039eba:	f000 fb5f 	bl	803a57c <USBD_StdDevReq>
 8039ebe:	4603      	mov	r3, r0
 8039ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8039ec2:	e020      	b.n	8039f06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8039ec4:	687b      	ldr	r3, [r7, #4]
 8039ec6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039eca:	4619      	mov	r1, r3
 8039ecc:	6878      	ldr	r0, [r7, #4]
 8039ece:	f000 fbc7 	bl	803a660 <USBD_StdItfReq>
 8039ed2:	4603      	mov	r3, r0
 8039ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8039ed6:	e016      	b.n	8039f06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8039ed8:	687b      	ldr	r3, [r7, #4]
 8039eda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8039ede:	4619      	mov	r1, r3
 8039ee0:	6878      	ldr	r0, [r7, #4]
 8039ee2:	f000 fc29 	bl	803a738 <USBD_StdEPReq>
 8039ee6:	4603      	mov	r3, r0
 8039ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8039eea:	e00c      	b.n	8039f06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8039eec:	687b      	ldr	r3, [r7, #4]
 8039eee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039ef2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8039ef6:	b2db      	uxtb	r3, r3
 8039ef8:	4619      	mov	r1, r3
 8039efa:	6878      	ldr	r0, [r7, #4]
 8039efc:	f001 fdf0 	bl	803bae0 <USBD_LL_StallEP>
 8039f00:	4603      	mov	r3, r0
 8039f02:	73fb      	strb	r3, [r7, #15]
      break;
 8039f04:	bf00      	nop
  }

  return ret;
 8039f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8039f08:	4618      	mov	r0, r3
 8039f0a:	3710      	adds	r7, #16
 8039f0c:	46bd      	mov	sp, r7
 8039f0e:	bd80      	pop	{r7, pc}

08039f10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8039f10:	b580      	push	{r7, lr}
 8039f12:	b086      	sub	sp, #24
 8039f14:	af00      	add	r7, sp, #0
 8039f16:	60f8      	str	r0, [r7, #12]
 8039f18:	460b      	mov	r3, r1
 8039f1a:	607a      	str	r2, [r7, #4]
 8039f1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8039f1e:	2300      	movs	r3, #0
 8039f20:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8039f22:	7afb      	ldrb	r3, [r7, #11]
 8039f24:	2b00      	cmp	r3, #0
 8039f26:	d16e      	bne.n	803a006 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8039f28:	68fb      	ldr	r3, [r7, #12]
 8039f2a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8039f2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8039f30:	68fb      	ldr	r3, [r7, #12]
 8039f32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8039f36:	2b03      	cmp	r3, #3
 8039f38:	f040 8098 	bne.w	803a06c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8039f3c:	693b      	ldr	r3, [r7, #16]
 8039f3e:	689a      	ldr	r2, [r3, #8]
 8039f40:	693b      	ldr	r3, [r7, #16]
 8039f42:	68db      	ldr	r3, [r3, #12]
 8039f44:	429a      	cmp	r2, r3
 8039f46:	d913      	bls.n	8039f70 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8039f48:	693b      	ldr	r3, [r7, #16]
 8039f4a:	689a      	ldr	r2, [r3, #8]
 8039f4c:	693b      	ldr	r3, [r7, #16]
 8039f4e:	68db      	ldr	r3, [r3, #12]
 8039f50:	1ad2      	subs	r2, r2, r3
 8039f52:	693b      	ldr	r3, [r7, #16]
 8039f54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8039f56:	693b      	ldr	r3, [r7, #16]
 8039f58:	68da      	ldr	r2, [r3, #12]
 8039f5a:	693b      	ldr	r3, [r7, #16]
 8039f5c:	689b      	ldr	r3, [r3, #8]
 8039f5e:	4293      	cmp	r3, r2
 8039f60:	bf28      	it	cs
 8039f62:	4613      	movcs	r3, r2
 8039f64:	461a      	mov	r2, r3
 8039f66:	6879      	ldr	r1, [r7, #4]
 8039f68:	68f8      	ldr	r0, [r7, #12]
 8039f6a:	f001 f984 	bl	803b276 <USBD_CtlContinueRx>
 8039f6e:	e07d      	b.n	803a06c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8039f70:	68fb      	ldr	r3, [r7, #12]
 8039f72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8039f76:	f003 031f 	and.w	r3, r3, #31
 8039f7a:	2b02      	cmp	r3, #2
 8039f7c:	d014      	beq.n	8039fa8 <USBD_LL_DataOutStage+0x98>
 8039f7e:	2b02      	cmp	r3, #2
 8039f80:	d81d      	bhi.n	8039fbe <USBD_LL_DataOutStage+0xae>
 8039f82:	2b00      	cmp	r3, #0
 8039f84:	d002      	beq.n	8039f8c <USBD_LL_DataOutStage+0x7c>
 8039f86:	2b01      	cmp	r3, #1
 8039f88:	d003      	beq.n	8039f92 <USBD_LL_DataOutStage+0x82>
 8039f8a:	e018      	b.n	8039fbe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8039f8c:	2300      	movs	r3, #0
 8039f8e:	75bb      	strb	r3, [r7, #22]
            break;
 8039f90:	e018      	b.n	8039fc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8039f92:	68fb      	ldr	r3, [r7, #12]
 8039f94:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039f98:	b2db      	uxtb	r3, r3
 8039f9a:	4619      	mov	r1, r3
 8039f9c:	68f8      	ldr	r0, [r7, #12]
 8039f9e:	f000 fa5e 	bl	803a45e <USBD_CoreFindIF>
 8039fa2:	4603      	mov	r3, r0
 8039fa4:	75bb      	strb	r3, [r7, #22]
            break;
 8039fa6:	e00d      	b.n	8039fc4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8039fa8:	68fb      	ldr	r3, [r7, #12]
 8039faa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8039fae:	b2db      	uxtb	r3, r3
 8039fb0:	4619      	mov	r1, r3
 8039fb2:	68f8      	ldr	r0, [r7, #12]
 8039fb4:	f000 fa60 	bl	803a478 <USBD_CoreFindEP>
 8039fb8:	4603      	mov	r3, r0
 8039fba:	75bb      	strb	r3, [r7, #22]
            break;
 8039fbc:	e002      	b.n	8039fc4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8039fbe:	2300      	movs	r3, #0
 8039fc0:	75bb      	strb	r3, [r7, #22]
            break;
 8039fc2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8039fc4:	7dbb      	ldrb	r3, [r7, #22]
 8039fc6:	2b00      	cmp	r3, #0
 8039fc8:	d119      	bne.n	8039ffe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8039fca:	68fb      	ldr	r3, [r7, #12]
 8039fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8039fd0:	b2db      	uxtb	r3, r3
 8039fd2:	2b03      	cmp	r3, #3
 8039fd4:	d113      	bne.n	8039ffe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8039fd6:	7dba      	ldrb	r2, [r7, #22]
 8039fd8:	68fb      	ldr	r3, [r7, #12]
 8039fda:	32ae      	adds	r2, #174	; 0xae
 8039fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039fe0:	691b      	ldr	r3, [r3, #16]
 8039fe2:	2b00      	cmp	r3, #0
 8039fe4:	d00b      	beq.n	8039ffe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8039fe6:	7dba      	ldrb	r2, [r7, #22]
 8039fe8:	68fb      	ldr	r3, [r7, #12]
 8039fea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8039fee:	7dba      	ldrb	r2, [r7, #22]
 8039ff0:	68fb      	ldr	r3, [r7, #12]
 8039ff2:	32ae      	adds	r2, #174	; 0xae
 8039ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8039ff8:	691b      	ldr	r3, [r3, #16]
 8039ffa:	68f8      	ldr	r0, [r7, #12]
 8039ffc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8039ffe:	68f8      	ldr	r0, [r7, #12]
 803a000:	f001 f94a 	bl	803b298 <USBD_CtlSendStatus>
 803a004:	e032      	b.n	803a06c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 803a006:	7afb      	ldrb	r3, [r7, #11]
 803a008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a00c:	b2db      	uxtb	r3, r3
 803a00e:	4619      	mov	r1, r3
 803a010:	68f8      	ldr	r0, [r7, #12]
 803a012:	f000 fa31 	bl	803a478 <USBD_CoreFindEP>
 803a016:	4603      	mov	r3, r0
 803a018:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a01a:	7dbb      	ldrb	r3, [r7, #22]
 803a01c:	2bff      	cmp	r3, #255	; 0xff
 803a01e:	d025      	beq.n	803a06c <USBD_LL_DataOutStage+0x15c>
 803a020:	7dbb      	ldrb	r3, [r7, #22]
 803a022:	2b00      	cmp	r3, #0
 803a024:	d122      	bne.n	803a06c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a026:	68fb      	ldr	r3, [r7, #12]
 803a028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a02c:	b2db      	uxtb	r3, r3
 803a02e:	2b03      	cmp	r3, #3
 803a030:	d117      	bne.n	803a062 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 803a032:	7dba      	ldrb	r2, [r7, #22]
 803a034:	68fb      	ldr	r3, [r7, #12]
 803a036:	32ae      	adds	r2, #174	; 0xae
 803a038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a03c:	699b      	ldr	r3, [r3, #24]
 803a03e:	2b00      	cmp	r3, #0
 803a040:	d00f      	beq.n	803a062 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 803a042:	7dba      	ldrb	r2, [r7, #22]
 803a044:	68fb      	ldr	r3, [r7, #12]
 803a046:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 803a04a:	7dba      	ldrb	r2, [r7, #22]
 803a04c:	68fb      	ldr	r3, [r7, #12]
 803a04e:	32ae      	adds	r2, #174	; 0xae
 803a050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a054:	699b      	ldr	r3, [r3, #24]
 803a056:	7afa      	ldrb	r2, [r7, #11]
 803a058:	4611      	mov	r1, r2
 803a05a:	68f8      	ldr	r0, [r7, #12]
 803a05c:	4798      	blx	r3
 803a05e:	4603      	mov	r3, r0
 803a060:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 803a062:	7dfb      	ldrb	r3, [r7, #23]
 803a064:	2b00      	cmp	r3, #0
 803a066:	d001      	beq.n	803a06c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 803a068:	7dfb      	ldrb	r3, [r7, #23]
 803a06a:	e000      	b.n	803a06e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 803a06c:	2300      	movs	r3, #0
}
 803a06e:	4618      	mov	r0, r3
 803a070:	3718      	adds	r7, #24
 803a072:	46bd      	mov	sp, r7
 803a074:	bd80      	pop	{r7, pc}

0803a076 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 803a076:	b580      	push	{r7, lr}
 803a078:	b086      	sub	sp, #24
 803a07a:	af00      	add	r7, sp, #0
 803a07c:	60f8      	str	r0, [r7, #12]
 803a07e:	460b      	mov	r3, r1
 803a080:	607a      	str	r2, [r7, #4]
 803a082:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 803a084:	7afb      	ldrb	r3, [r7, #11]
 803a086:	2b00      	cmp	r3, #0
 803a088:	d16f      	bne.n	803a16a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 803a08a:	68fb      	ldr	r3, [r7, #12]
 803a08c:	3314      	adds	r3, #20
 803a08e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 803a090:	68fb      	ldr	r3, [r7, #12]
 803a092:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 803a096:	2b02      	cmp	r3, #2
 803a098:	d15a      	bne.n	803a150 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 803a09a:	693b      	ldr	r3, [r7, #16]
 803a09c:	689a      	ldr	r2, [r3, #8]
 803a09e:	693b      	ldr	r3, [r7, #16]
 803a0a0:	68db      	ldr	r3, [r3, #12]
 803a0a2:	429a      	cmp	r2, r3
 803a0a4:	d914      	bls.n	803a0d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 803a0a6:	693b      	ldr	r3, [r7, #16]
 803a0a8:	689a      	ldr	r2, [r3, #8]
 803a0aa:	693b      	ldr	r3, [r7, #16]
 803a0ac:	68db      	ldr	r3, [r3, #12]
 803a0ae:	1ad2      	subs	r2, r2, r3
 803a0b0:	693b      	ldr	r3, [r7, #16]
 803a0b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 803a0b4:	693b      	ldr	r3, [r7, #16]
 803a0b6:	689b      	ldr	r3, [r3, #8]
 803a0b8:	461a      	mov	r2, r3
 803a0ba:	6879      	ldr	r1, [r7, #4]
 803a0bc:	68f8      	ldr	r0, [r7, #12]
 803a0be:	f001 f8ac 	bl	803b21a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803a0c2:	2300      	movs	r3, #0
 803a0c4:	2200      	movs	r2, #0
 803a0c6:	2100      	movs	r1, #0
 803a0c8:	68f8      	ldr	r0, [r7, #12]
 803a0ca:	f001 fdb3 	bl	803bc34 <USBD_LL_PrepareReceive>
 803a0ce:	e03f      	b.n	803a150 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 803a0d0:	693b      	ldr	r3, [r7, #16]
 803a0d2:	68da      	ldr	r2, [r3, #12]
 803a0d4:	693b      	ldr	r3, [r7, #16]
 803a0d6:	689b      	ldr	r3, [r3, #8]
 803a0d8:	429a      	cmp	r2, r3
 803a0da:	d11c      	bne.n	803a116 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 803a0dc:	693b      	ldr	r3, [r7, #16]
 803a0de:	685a      	ldr	r2, [r3, #4]
 803a0e0:	693b      	ldr	r3, [r7, #16]
 803a0e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 803a0e4:	429a      	cmp	r2, r3
 803a0e6:	d316      	bcc.n	803a116 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 803a0e8:	693b      	ldr	r3, [r7, #16]
 803a0ea:	685a      	ldr	r2, [r3, #4]
 803a0ec:	68fb      	ldr	r3, [r7, #12]
 803a0ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 803a0f2:	429a      	cmp	r2, r3
 803a0f4:	d20f      	bcs.n	803a116 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 803a0f6:	2200      	movs	r2, #0
 803a0f8:	2100      	movs	r1, #0
 803a0fa:	68f8      	ldr	r0, [r7, #12]
 803a0fc:	f001 f88d 	bl	803b21a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 803a100:	68fb      	ldr	r3, [r7, #12]
 803a102:	2200      	movs	r2, #0
 803a104:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803a108:	2300      	movs	r3, #0
 803a10a:	2200      	movs	r2, #0
 803a10c:	2100      	movs	r1, #0
 803a10e:	68f8      	ldr	r0, [r7, #12]
 803a110:	f001 fd90 	bl	803bc34 <USBD_LL_PrepareReceive>
 803a114:	e01c      	b.n	803a150 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a116:	68fb      	ldr	r3, [r7, #12]
 803a118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a11c:	b2db      	uxtb	r3, r3
 803a11e:	2b03      	cmp	r3, #3
 803a120:	d10f      	bne.n	803a142 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 803a122:	68fb      	ldr	r3, [r7, #12]
 803a124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a128:	68db      	ldr	r3, [r3, #12]
 803a12a:	2b00      	cmp	r3, #0
 803a12c:	d009      	beq.n	803a142 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 803a12e:	68fb      	ldr	r3, [r7, #12]
 803a130:	2200      	movs	r2, #0
 803a132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 803a136:	68fb      	ldr	r3, [r7, #12]
 803a138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a13c:	68db      	ldr	r3, [r3, #12]
 803a13e:	68f8      	ldr	r0, [r7, #12]
 803a140:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 803a142:	2180      	movs	r1, #128	; 0x80
 803a144:	68f8      	ldr	r0, [r7, #12]
 803a146:	f001 fccb 	bl	803bae0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 803a14a:	68f8      	ldr	r0, [r7, #12]
 803a14c:	f001 f8b7 	bl	803b2be <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 803a150:	68fb      	ldr	r3, [r7, #12]
 803a152:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 803a156:	2b00      	cmp	r3, #0
 803a158:	d03a      	beq.n	803a1d0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 803a15a:	68f8      	ldr	r0, [r7, #12]
 803a15c:	f7ff fe42 	bl	8039de4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 803a160:	68fb      	ldr	r3, [r7, #12]
 803a162:	2200      	movs	r2, #0
 803a164:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 803a168:	e032      	b.n	803a1d0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 803a16a:	7afb      	ldrb	r3, [r7, #11]
 803a16c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803a170:	b2db      	uxtb	r3, r3
 803a172:	4619      	mov	r1, r3
 803a174:	68f8      	ldr	r0, [r7, #12]
 803a176:	f000 f97f 	bl	803a478 <USBD_CoreFindEP>
 803a17a:	4603      	mov	r3, r0
 803a17c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a17e:	7dfb      	ldrb	r3, [r7, #23]
 803a180:	2bff      	cmp	r3, #255	; 0xff
 803a182:	d025      	beq.n	803a1d0 <USBD_LL_DataInStage+0x15a>
 803a184:	7dfb      	ldrb	r3, [r7, #23]
 803a186:	2b00      	cmp	r3, #0
 803a188:	d122      	bne.n	803a1d0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a18a:	68fb      	ldr	r3, [r7, #12]
 803a18c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a190:	b2db      	uxtb	r3, r3
 803a192:	2b03      	cmp	r3, #3
 803a194:	d11c      	bne.n	803a1d0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 803a196:	7dfa      	ldrb	r2, [r7, #23]
 803a198:	68fb      	ldr	r3, [r7, #12]
 803a19a:	32ae      	adds	r2, #174	; 0xae
 803a19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a1a0:	695b      	ldr	r3, [r3, #20]
 803a1a2:	2b00      	cmp	r3, #0
 803a1a4:	d014      	beq.n	803a1d0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 803a1a6:	7dfa      	ldrb	r2, [r7, #23]
 803a1a8:	68fb      	ldr	r3, [r7, #12]
 803a1aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 803a1ae:	7dfa      	ldrb	r2, [r7, #23]
 803a1b0:	68fb      	ldr	r3, [r7, #12]
 803a1b2:	32ae      	adds	r2, #174	; 0xae
 803a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a1b8:	695b      	ldr	r3, [r3, #20]
 803a1ba:	7afa      	ldrb	r2, [r7, #11]
 803a1bc:	4611      	mov	r1, r2
 803a1be:	68f8      	ldr	r0, [r7, #12]
 803a1c0:	4798      	blx	r3
 803a1c2:	4603      	mov	r3, r0
 803a1c4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 803a1c6:	7dbb      	ldrb	r3, [r7, #22]
 803a1c8:	2b00      	cmp	r3, #0
 803a1ca:	d001      	beq.n	803a1d0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 803a1cc:	7dbb      	ldrb	r3, [r7, #22]
 803a1ce:	e000      	b.n	803a1d2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 803a1d0:	2300      	movs	r3, #0
}
 803a1d2:	4618      	mov	r0, r3
 803a1d4:	3718      	adds	r7, #24
 803a1d6:	46bd      	mov	sp, r7
 803a1d8:	bd80      	pop	{r7, pc}

0803a1da <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 803a1da:	b580      	push	{r7, lr}
 803a1dc:	b084      	sub	sp, #16
 803a1de:	af00      	add	r7, sp, #0
 803a1e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 803a1e2:	2300      	movs	r3, #0
 803a1e4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a1e6:	687b      	ldr	r3, [r7, #4]
 803a1e8:	2201      	movs	r2, #1
 803a1ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 803a1ee:	687b      	ldr	r3, [r7, #4]
 803a1f0:	2200      	movs	r2, #0
 803a1f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 803a1f6:	687b      	ldr	r3, [r7, #4]
 803a1f8:	2200      	movs	r2, #0
 803a1fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 803a1fc:	687b      	ldr	r3, [r7, #4]
 803a1fe:	2200      	movs	r2, #0
 803a200:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 803a204:	687b      	ldr	r3, [r7, #4]
 803a206:	2200      	movs	r2, #0
 803a208:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 803a20c:	687b      	ldr	r3, [r7, #4]
 803a20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a212:	2b00      	cmp	r3, #0
 803a214:	d014      	beq.n	803a240 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 803a216:	687b      	ldr	r3, [r7, #4]
 803a218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a21c:	685b      	ldr	r3, [r3, #4]
 803a21e:	2b00      	cmp	r3, #0
 803a220:	d00e      	beq.n	803a240 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 803a222:	687b      	ldr	r3, [r7, #4]
 803a224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a228:	685b      	ldr	r3, [r3, #4]
 803a22a:	687a      	ldr	r2, [r7, #4]
 803a22c:	6852      	ldr	r2, [r2, #4]
 803a22e:	b2d2      	uxtb	r2, r2
 803a230:	4611      	mov	r1, r2
 803a232:	6878      	ldr	r0, [r7, #4]
 803a234:	4798      	blx	r3
 803a236:	4603      	mov	r3, r0
 803a238:	2b00      	cmp	r3, #0
 803a23a:	d001      	beq.n	803a240 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 803a23c:	2303      	movs	r3, #3
 803a23e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a240:	2340      	movs	r3, #64	; 0x40
 803a242:	2200      	movs	r2, #0
 803a244:	2100      	movs	r1, #0
 803a246:	6878      	ldr	r0, [r7, #4]
 803a248:	f001 fc05 	bl	803ba56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 803a24c:	687b      	ldr	r3, [r7, #4]
 803a24e:	2201      	movs	r2, #1
 803a250:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 803a254:	687b      	ldr	r3, [r7, #4]
 803a256:	2240      	movs	r2, #64	; 0x40
 803a258:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 803a25c:	2340      	movs	r3, #64	; 0x40
 803a25e:	2200      	movs	r2, #0
 803a260:	2180      	movs	r1, #128	; 0x80
 803a262:	6878      	ldr	r0, [r7, #4]
 803a264:	f001 fbf7 	bl	803ba56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 803a268:	687b      	ldr	r3, [r7, #4]
 803a26a:	2201      	movs	r2, #1
 803a26c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 803a26e:	687b      	ldr	r3, [r7, #4]
 803a270:	2240      	movs	r2, #64	; 0x40
 803a272:	621a      	str	r2, [r3, #32]

  return ret;
 803a274:	7bfb      	ldrb	r3, [r7, #15]
}
 803a276:	4618      	mov	r0, r3
 803a278:	3710      	adds	r7, #16
 803a27a:	46bd      	mov	sp, r7
 803a27c:	bd80      	pop	{r7, pc}

0803a27e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 803a27e:	b480      	push	{r7}
 803a280:	b083      	sub	sp, #12
 803a282:	af00      	add	r7, sp, #0
 803a284:	6078      	str	r0, [r7, #4]
 803a286:	460b      	mov	r3, r1
 803a288:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 803a28a:	687b      	ldr	r3, [r7, #4]
 803a28c:	78fa      	ldrb	r2, [r7, #3]
 803a28e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 803a290:	2300      	movs	r3, #0
}
 803a292:	4618      	mov	r0, r3
 803a294:	370c      	adds	r7, #12
 803a296:	46bd      	mov	sp, r7
 803a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a29c:	4770      	bx	lr

0803a29e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 803a29e:	b480      	push	{r7}
 803a2a0:	b083      	sub	sp, #12
 803a2a2:	af00      	add	r7, sp, #0
 803a2a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 803a2a6:	687b      	ldr	r3, [r7, #4]
 803a2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a2ac:	b2da      	uxtb	r2, r3
 803a2ae:	687b      	ldr	r3, [r7, #4]
 803a2b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 803a2b4:	687b      	ldr	r3, [r7, #4]
 803a2b6:	2204      	movs	r2, #4
 803a2b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 803a2bc:	2300      	movs	r3, #0
}
 803a2be:	4618      	mov	r0, r3
 803a2c0:	370c      	adds	r7, #12
 803a2c2:	46bd      	mov	sp, r7
 803a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2c8:	4770      	bx	lr

0803a2ca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 803a2ca:	b480      	push	{r7}
 803a2cc:	b083      	sub	sp, #12
 803a2ce:	af00      	add	r7, sp, #0
 803a2d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 803a2d2:	687b      	ldr	r3, [r7, #4]
 803a2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a2d8:	b2db      	uxtb	r3, r3
 803a2da:	2b04      	cmp	r3, #4
 803a2dc:	d106      	bne.n	803a2ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 803a2de:	687b      	ldr	r3, [r7, #4]
 803a2e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 803a2e4:	b2da      	uxtb	r2, r3
 803a2e6:	687b      	ldr	r3, [r7, #4]
 803a2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 803a2ec:	2300      	movs	r3, #0
}
 803a2ee:	4618      	mov	r0, r3
 803a2f0:	370c      	adds	r7, #12
 803a2f2:	46bd      	mov	sp, r7
 803a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a2f8:	4770      	bx	lr

0803a2fa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 803a2fa:	b580      	push	{r7, lr}
 803a2fc:	b082      	sub	sp, #8
 803a2fe:	af00      	add	r7, sp, #0
 803a300:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a302:	687b      	ldr	r3, [r7, #4]
 803a304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a308:	b2db      	uxtb	r3, r3
 803a30a:	2b03      	cmp	r3, #3
 803a30c:	d110      	bne.n	803a330 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 803a30e:	687b      	ldr	r3, [r7, #4]
 803a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a314:	2b00      	cmp	r3, #0
 803a316:	d00b      	beq.n	803a330 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 803a318:	687b      	ldr	r3, [r7, #4]
 803a31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a31e:	69db      	ldr	r3, [r3, #28]
 803a320:	2b00      	cmp	r3, #0
 803a322:	d005      	beq.n	803a330 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 803a324:	687b      	ldr	r3, [r7, #4]
 803a326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a32a:	69db      	ldr	r3, [r3, #28]
 803a32c:	6878      	ldr	r0, [r7, #4]
 803a32e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 803a330:	2300      	movs	r3, #0
}
 803a332:	4618      	mov	r0, r3
 803a334:	3708      	adds	r7, #8
 803a336:	46bd      	mov	sp, r7
 803a338:	bd80      	pop	{r7, pc}

0803a33a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 803a33a:	b580      	push	{r7, lr}
 803a33c:	b082      	sub	sp, #8
 803a33e:	af00      	add	r7, sp, #0
 803a340:	6078      	str	r0, [r7, #4]
 803a342:	460b      	mov	r3, r1
 803a344:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a346:	687b      	ldr	r3, [r7, #4]
 803a348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a34c:	687b      	ldr	r3, [r7, #4]
 803a34e:	32ae      	adds	r2, #174	; 0xae
 803a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a354:	2b00      	cmp	r3, #0
 803a356:	d101      	bne.n	803a35c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 803a358:	2303      	movs	r3, #3
 803a35a:	e01c      	b.n	803a396 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a35c:	687b      	ldr	r3, [r7, #4]
 803a35e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a362:	b2db      	uxtb	r3, r3
 803a364:	2b03      	cmp	r3, #3
 803a366:	d115      	bne.n	803a394 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 803a368:	687b      	ldr	r3, [r7, #4]
 803a36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a36e:	687b      	ldr	r3, [r7, #4]
 803a370:	32ae      	adds	r2, #174	; 0xae
 803a372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a376:	6a1b      	ldr	r3, [r3, #32]
 803a378:	2b00      	cmp	r3, #0
 803a37a:	d00b      	beq.n	803a394 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 803a37c:	687b      	ldr	r3, [r7, #4]
 803a37e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a382:	687b      	ldr	r3, [r7, #4]
 803a384:	32ae      	adds	r2, #174	; 0xae
 803a386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a38a:	6a1b      	ldr	r3, [r3, #32]
 803a38c:	78fa      	ldrb	r2, [r7, #3]
 803a38e:	4611      	mov	r1, r2
 803a390:	6878      	ldr	r0, [r7, #4]
 803a392:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a394:	2300      	movs	r3, #0
}
 803a396:	4618      	mov	r0, r3
 803a398:	3708      	adds	r7, #8
 803a39a:	46bd      	mov	sp, r7
 803a39c:	bd80      	pop	{r7, pc}

0803a39e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 803a39e:	b580      	push	{r7, lr}
 803a3a0:	b082      	sub	sp, #8
 803a3a2:	af00      	add	r7, sp, #0
 803a3a4:	6078      	str	r0, [r7, #4]
 803a3a6:	460b      	mov	r3, r1
 803a3a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 803a3aa:	687b      	ldr	r3, [r7, #4]
 803a3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a3b0:	687b      	ldr	r3, [r7, #4]
 803a3b2:	32ae      	adds	r2, #174	; 0xae
 803a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3b8:	2b00      	cmp	r3, #0
 803a3ba:	d101      	bne.n	803a3c0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 803a3bc:	2303      	movs	r3, #3
 803a3be:	e01c      	b.n	803a3fa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803a3c0:	687b      	ldr	r3, [r7, #4]
 803a3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a3c6:	b2db      	uxtb	r3, r3
 803a3c8:	2b03      	cmp	r3, #3
 803a3ca:	d115      	bne.n	803a3f8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 803a3cc:	687b      	ldr	r3, [r7, #4]
 803a3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a3d2:	687b      	ldr	r3, [r7, #4]
 803a3d4:	32ae      	adds	r2, #174	; 0xae
 803a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a3dc:	2b00      	cmp	r3, #0
 803a3de:	d00b      	beq.n	803a3f8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 803a3e0:	687b      	ldr	r3, [r7, #4]
 803a3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a3e6:	687b      	ldr	r3, [r7, #4]
 803a3e8:	32ae      	adds	r2, #174	; 0xae
 803a3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a3f0:	78fa      	ldrb	r2, [r7, #3]
 803a3f2:	4611      	mov	r1, r2
 803a3f4:	6878      	ldr	r0, [r7, #4]
 803a3f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 803a3f8:	2300      	movs	r3, #0
}
 803a3fa:	4618      	mov	r0, r3
 803a3fc:	3708      	adds	r7, #8
 803a3fe:	46bd      	mov	sp, r7
 803a400:	bd80      	pop	{r7, pc}

0803a402 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 803a402:	b480      	push	{r7}
 803a404:	b083      	sub	sp, #12
 803a406:	af00      	add	r7, sp, #0
 803a408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 803a40a:	2300      	movs	r3, #0
}
 803a40c:	4618      	mov	r0, r3
 803a40e:	370c      	adds	r7, #12
 803a410:	46bd      	mov	sp, r7
 803a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a416:	4770      	bx	lr

0803a418 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 803a418:	b580      	push	{r7, lr}
 803a41a:	b084      	sub	sp, #16
 803a41c:	af00      	add	r7, sp, #0
 803a41e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 803a420:	2300      	movs	r3, #0
 803a422:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 803a424:	687b      	ldr	r3, [r7, #4]
 803a426:	2201      	movs	r2, #1
 803a428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 803a42c:	687b      	ldr	r3, [r7, #4]
 803a42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a432:	2b00      	cmp	r3, #0
 803a434:	d00e      	beq.n	803a454 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 803a436:	687b      	ldr	r3, [r7, #4]
 803a438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803a43c:	685b      	ldr	r3, [r3, #4]
 803a43e:	687a      	ldr	r2, [r7, #4]
 803a440:	6852      	ldr	r2, [r2, #4]
 803a442:	b2d2      	uxtb	r2, r2
 803a444:	4611      	mov	r1, r2
 803a446:	6878      	ldr	r0, [r7, #4]
 803a448:	4798      	blx	r3
 803a44a:	4603      	mov	r3, r0
 803a44c:	2b00      	cmp	r3, #0
 803a44e:	d001      	beq.n	803a454 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 803a450:	2303      	movs	r3, #3
 803a452:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 803a454:	7bfb      	ldrb	r3, [r7, #15]
}
 803a456:	4618      	mov	r0, r3
 803a458:	3710      	adds	r7, #16
 803a45a:	46bd      	mov	sp, r7
 803a45c:	bd80      	pop	{r7, pc}

0803a45e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a45e:	b480      	push	{r7}
 803a460:	b083      	sub	sp, #12
 803a462:	af00      	add	r7, sp, #0
 803a464:	6078      	str	r0, [r7, #4]
 803a466:	460b      	mov	r3, r1
 803a468:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a46a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a46c:	4618      	mov	r0, r3
 803a46e:	370c      	adds	r7, #12
 803a470:	46bd      	mov	sp, r7
 803a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a476:	4770      	bx	lr

0803a478 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 803a478:	b480      	push	{r7}
 803a47a:	b083      	sub	sp, #12
 803a47c:	af00      	add	r7, sp, #0
 803a47e:	6078      	str	r0, [r7, #4]
 803a480:	460b      	mov	r3, r1
 803a482:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 803a484:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 803a486:	4618      	mov	r0, r3
 803a488:	370c      	adds	r7, #12
 803a48a:	46bd      	mov	sp, r7
 803a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a490:	4770      	bx	lr

0803a492 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 803a492:	b580      	push	{r7, lr}
 803a494:	b086      	sub	sp, #24
 803a496:	af00      	add	r7, sp, #0
 803a498:	6078      	str	r0, [r7, #4]
 803a49a:	460b      	mov	r3, r1
 803a49c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 803a49e:	687b      	ldr	r3, [r7, #4]
 803a4a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 803a4a2:	687b      	ldr	r3, [r7, #4]
 803a4a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 803a4a6:	2300      	movs	r3, #0
 803a4a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 803a4aa:	68fb      	ldr	r3, [r7, #12]
 803a4ac:	885b      	ldrh	r3, [r3, #2]
 803a4ae:	b29a      	uxth	r2, r3
 803a4b0:	68fb      	ldr	r3, [r7, #12]
 803a4b2:	781b      	ldrb	r3, [r3, #0]
 803a4b4:	b29b      	uxth	r3, r3
 803a4b6:	429a      	cmp	r2, r3
 803a4b8:	d920      	bls.n	803a4fc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 803a4ba:	68fb      	ldr	r3, [r7, #12]
 803a4bc:	781b      	ldrb	r3, [r3, #0]
 803a4be:	b29b      	uxth	r3, r3
 803a4c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 803a4c2:	e013      	b.n	803a4ec <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 803a4c4:	f107 030a 	add.w	r3, r7, #10
 803a4c8:	4619      	mov	r1, r3
 803a4ca:	6978      	ldr	r0, [r7, #20]
 803a4cc:	f000 f81b 	bl	803a506 <USBD_GetNextDesc>
 803a4d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 803a4d2:	697b      	ldr	r3, [r7, #20]
 803a4d4:	785b      	ldrb	r3, [r3, #1]
 803a4d6:	2b05      	cmp	r3, #5
 803a4d8:	d108      	bne.n	803a4ec <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 803a4da:	697b      	ldr	r3, [r7, #20]
 803a4dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 803a4de:	693b      	ldr	r3, [r7, #16]
 803a4e0:	789b      	ldrb	r3, [r3, #2]
 803a4e2:	78fa      	ldrb	r2, [r7, #3]
 803a4e4:	429a      	cmp	r2, r3
 803a4e6:	d008      	beq.n	803a4fa <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 803a4e8:	2300      	movs	r3, #0
 803a4ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 803a4ec:	68fb      	ldr	r3, [r7, #12]
 803a4ee:	885b      	ldrh	r3, [r3, #2]
 803a4f0:	b29a      	uxth	r2, r3
 803a4f2:	897b      	ldrh	r3, [r7, #10]
 803a4f4:	429a      	cmp	r2, r3
 803a4f6:	d8e5      	bhi.n	803a4c4 <USBD_GetEpDesc+0x32>
 803a4f8:	e000      	b.n	803a4fc <USBD_GetEpDesc+0x6a>
          break;
 803a4fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 803a4fc:	693b      	ldr	r3, [r7, #16]
}
 803a4fe:	4618      	mov	r0, r3
 803a500:	3718      	adds	r7, #24
 803a502:	46bd      	mov	sp, r7
 803a504:	bd80      	pop	{r7, pc}

0803a506 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 803a506:	b480      	push	{r7}
 803a508:	b085      	sub	sp, #20
 803a50a:	af00      	add	r7, sp, #0
 803a50c:	6078      	str	r0, [r7, #4]
 803a50e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 803a510:	687b      	ldr	r3, [r7, #4]
 803a512:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 803a514:	683b      	ldr	r3, [r7, #0]
 803a516:	881a      	ldrh	r2, [r3, #0]
 803a518:	68fb      	ldr	r3, [r7, #12]
 803a51a:	781b      	ldrb	r3, [r3, #0]
 803a51c:	b29b      	uxth	r3, r3
 803a51e:	4413      	add	r3, r2
 803a520:	b29a      	uxth	r2, r3
 803a522:	683b      	ldr	r3, [r7, #0]
 803a524:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 803a526:	68fb      	ldr	r3, [r7, #12]
 803a528:	781b      	ldrb	r3, [r3, #0]
 803a52a:	461a      	mov	r2, r3
 803a52c:	687b      	ldr	r3, [r7, #4]
 803a52e:	4413      	add	r3, r2
 803a530:	60fb      	str	r3, [r7, #12]

  return (pnext);
 803a532:	68fb      	ldr	r3, [r7, #12]
}
 803a534:	4618      	mov	r0, r3
 803a536:	3714      	adds	r7, #20
 803a538:	46bd      	mov	sp, r7
 803a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a53e:	4770      	bx	lr

0803a540 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 803a540:	b480      	push	{r7}
 803a542:	b087      	sub	sp, #28
 803a544:	af00      	add	r7, sp, #0
 803a546:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 803a548:	687b      	ldr	r3, [r7, #4]
 803a54a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 803a54c:	697b      	ldr	r3, [r7, #20]
 803a54e:	781b      	ldrb	r3, [r3, #0]
 803a550:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 803a552:	697b      	ldr	r3, [r7, #20]
 803a554:	3301      	adds	r3, #1
 803a556:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 803a558:	697b      	ldr	r3, [r7, #20]
 803a55a:	781b      	ldrb	r3, [r3, #0]
 803a55c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 803a55e:	8a3b      	ldrh	r3, [r7, #16]
 803a560:	021b      	lsls	r3, r3, #8
 803a562:	b21a      	sxth	r2, r3
 803a564:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 803a568:	4313      	orrs	r3, r2
 803a56a:	b21b      	sxth	r3, r3
 803a56c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 803a56e:	89fb      	ldrh	r3, [r7, #14]
}
 803a570:	4618      	mov	r0, r3
 803a572:	371c      	adds	r7, #28
 803a574:	46bd      	mov	sp, r7
 803a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a57a:	4770      	bx	lr

0803a57c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a57c:	b580      	push	{r7, lr}
 803a57e:	b084      	sub	sp, #16
 803a580:	af00      	add	r7, sp, #0
 803a582:	6078      	str	r0, [r7, #4]
 803a584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a586:	2300      	movs	r3, #0
 803a588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a58a:	683b      	ldr	r3, [r7, #0]
 803a58c:	781b      	ldrb	r3, [r3, #0]
 803a58e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a592:	2b40      	cmp	r3, #64	; 0x40
 803a594:	d005      	beq.n	803a5a2 <USBD_StdDevReq+0x26>
 803a596:	2b40      	cmp	r3, #64	; 0x40
 803a598:	d857      	bhi.n	803a64a <USBD_StdDevReq+0xce>
 803a59a:	2b00      	cmp	r3, #0
 803a59c:	d00f      	beq.n	803a5be <USBD_StdDevReq+0x42>
 803a59e:	2b20      	cmp	r3, #32
 803a5a0:	d153      	bne.n	803a64a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 803a5a2:	687b      	ldr	r3, [r7, #4]
 803a5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 803a5a8:	687b      	ldr	r3, [r7, #4]
 803a5aa:	32ae      	adds	r2, #174	; 0xae
 803a5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a5b0:	689b      	ldr	r3, [r3, #8]
 803a5b2:	6839      	ldr	r1, [r7, #0]
 803a5b4:	6878      	ldr	r0, [r7, #4]
 803a5b6:	4798      	blx	r3
 803a5b8:	4603      	mov	r3, r0
 803a5ba:	73fb      	strb	r3, [r7, #15]
      break;
 803a5bc:	e04a      	b.n	803a654 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a5be:	683b      	ldr	r3, [r7, #0]
 803a5c0:	785b      	ldrb	r3, [r3, #1]
 803a5c2:	2b09      	cmp	r3, #9
 803a5c4:	d83b      	bhi.n	803a63e <USBD_StdDevReq+0xc2>
 803a5c6:	a201      	add	r2, pc, #4	; (adr r2, 803a5cc <USBD_StdDevReq+0x50>)
 803a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803a5cc:	0803a621 	.word	0x0803a621
 803a5d0:	0803a635 	.word	0x0803a635
 803a5d4:	0803a63f 	.word	0x0803a63f
 803a5d8:	0803a62b 	.word	0x0803a62b
 803a5dc:	0803a63f 	.word	0x0803a63f
 803a5e0:	0803a5ff 	.word	0x0803a5ff
 803a5e4:	0803a5f5 	.word	0x0803a5f5
 803a5e8:	0803a63f 	.word	0x0803a63f
 803a5ec:	0803a617 	.word	0x0803a617
 803a5f0:	0803a609 	.word	0x0803a609
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 803a5f4:	6839      	ldr	r1, [r7, #0]
 803a5f6:	6878      	ldr	r0, [r7, #4]
 803a5f8:	f000 fa3c 	bl	803aa74 <USBD_GetDescriptor>
          break;
 803a5fc:	e024      	b.n	803a648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 803a5fe:	6839      	ldr	r1, [r7, #0]
 803a600:	6878      	ldr	r0, [r7, #4]
 803a602:	f000 fba1 	bl	803ad48 <USBD_SetAddress>
          break;
 803a606:	e01f      	b.n	803a648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 803a608:	6839      	ldr	r1, [r7, #0]
 803a60a:	6878      	ldr	r0, [r7, #4]
 803a60c:	f000 fbe0 	bl	803add0 <USBD_SetConfig>
 803a610:	4603      	mov	r3, r0
 803a612:	73fb      	strb	r3, [r7, #15]
          break;
 803a614:	e018      	b.n	803a648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 803a616:	6839      	ldr	r1, [r7, #0]
 803a618:	6878      	ldr	r0, [r7, #4]
 803a61a:	f000 fc83 	bl	803af24 <USBD_GetConfig>
          break;
 803a61e:	e013      	b.n	803a648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 803a620:	6839      	ldr	r1, [r7, #0]
 803a622:	6878      	ldr	r0, [r7, #4]
 803a624:	f000 fcb4 	bl	803af90 <USBD_GetStatus>
          break;
 803a628:	e00e      	b.n	803a648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 803a62a:	6839      	ldr	r1, [r7, #0]
 803a62c:	6878      	ldr	r0, [r7, #4]
 803a62e:	f000 fce3 	bl	803aff8 <USBD_SetFeature>
          break;
 803a632:	e009      	b.n	803a648 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 803a634:	6839      	ldr	r1, [r7, #0]
 803a636:	6878      	ldr	r0, [r7, #4]
 803a638:	f000 fd07 	bl	803b04a <USBD_ClrFeature>
          break;
 803a63c:	e004      	b.n	803a648 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 803a63e:	6839      	ldr	r1, [r7, #0]
 803a640:	6878      	ldr	r0, [r7, #4]
 803a642:	f000 fd5e 	bl	803b102 <USBD_CtlError>
          break;
 803a646:	bf00      	nop
      }
      break;
 803a648:	e004      	b.n	803a654 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 803a64a:	6839      	ldr	r1, [r7, #0]
 803a64c:	6878      	ldr	r0, [r7, #4]
 803a64e:	f000 fd58 	bl	803b102 <USBD_CtlError>
      break;
 803a652:	bf00      	nop
  }

  return ret;
 803a654:	7bfb      	ldrb	r3, [r7, #15]
}
 803a656:	4618      	mov	r0, r3
 803a658:	3710      	adds	r7, #16
 803a65a:	46bd      	mov	sp, r7
 803a65c:	bd80      	pop	{r7, pc}
 803a65e:	bf00      	nop

0803a660 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a660:	b580      	push	{r7, lr}
 803a662:	b084      	sub	sp, #16
 803a664:	af00      	add	r7, sp, #0
 803a666:	6078      	str	r0, [r7, #4]
 803a668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803a66a:	2300      	movs	r3, #0
 803a66c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a66e:	683b      	ldr	r3, [r7, #0]
 803a670:	781b      	ldrb	r3, [r3, #0]
 803a672:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a676:	2b40      	cmp	r3, #64	; 0x40
 803a678:	d005      	beq.n	803a686 <USBD_StdItfReq+0x26>
 803a67a:	2b40      	cmp	r3, #64	; 0x40
 803a67c:	d852      	bhi.n	803a724 <USBD_StdItfReq+0xc4>
 803a67e:	2b00      	cmp	r3, #0
 803a680:	d001      	beq.n	803a686 <USBD_StdItfReq+0x26>
 803a682:	2b20      	cmp	r3, #32
 803a684:	d14e      	bne.n	803a724 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 803a686:	687b      	ldr	r3, [r7, #4]
 803a688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a68c:	b2db      	uxtb	r3, r3
 803a68e:	3b01      	subs	r3, #1
 803a690:	2b02      	cmp	r3, #2
 803a692:	d840      	bhi.n	803a716 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 803a694:	683b      	ldr	r3, [r7, #0]
 803a696:	889b      	ldrh	r3, [r3, #4]
 803a698:	b2db      	uxtb	r3, r3
 803a69a:	2b01      	cmp	r3, #1
 803a69c:	d836      	bhi.n	803a70c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 803a69e:	683b      	ldr	r3, [r7, #0]
 803a6a0:	889b      	ldrh	r3, [r3, #4]
 803a6a2:	b2db      	uxtb	r3, r3
 803a6a4:	4619      	mov	r1, r3
 803a6a6:	6878      	ldr	r0, [r7, #4]
 803a6a8:	f7ff fed9 	bl	803a45e <USBD_CoreFindIF>
 803a6ac:	4603      	mov	r3, r0
 803a6ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a6b0:	7bbb      	ldrb	r3, [r7, #14]
 803a6b2:	2bff      	cmp	r3, #255	; 0xff
 803a6b4:	d01d      	beq.n	803a6f2 <USBD_StdItfReq+0x92>
 803a6b6:	7bbb      	ldrb	r3, [r7, #14]
 803a6b8:	2b00      	cmp	r3, #0
 803a6ba:	d11a      	bne.n	803a6f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 803a6bc:	7bba      	ldrb	r2, [r7, #14]
 803a6be:	687b      	ldr	r3, [r7, #4]
 803a6c0:	32ae      	adds	r2, #174	; 0xae
 803a6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a6c6:	689b      	ldr	r3, [r3, #8]
 803a6c8:	2b00      	cmp	r3, #0
 803a6ca:	d00f      	beq.n	803a6ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 803a6cc:	7bba      	ldrb	r2, [r7, #14]
 803a6ce:	687b      	ldr	r3, [r7, #4]
 803a6d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a6d4:	7bba      	ldrb	r2, [r7, #14]
 803a6d6:	687b      	ldr	r3, [r7, #4]
 803a6d8:	32ae      	adds	r2, #174	; 0xae
 803a6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a6de:	689b      	ldr	r3, [r3, #8]
 803a6e0:	6839      	ldr	r1, [r7, #0]
 803a6e2:	6878      	ldr	r0, [r7, #4]
 803a6e4:	4798      	blx	r3
 803a6e6:	4603      	mov	r3, r0
 803a6e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a6ea:	e004      	b.n	803a6f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 803a6ec:	2303      	movs	r3, #3
 803a6ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 803a6f0:	e001      	b.n	803a6f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 803a6f2:	2303      	movs	r3, #3
 803a6f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 803a6f6:	683b      	ldr	r3, [r7, #0]
 803a6f8:	88db      	ldrh	r3, [r3, #6]
 803a6fa:	2b00      	cmp	r3, #0
 803a6fc:	d110      	bne.n	803a720 <USBD_StdItfReq+0xc0>
 803a6fe:	7bfb      	ldrb	r3, [r7, #15]
 803a700:	2b00      	cmp	r3, #0
 803a702:	d10d      	bne.n	803a720 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 803a704:	6878      	ldr	r0, [r7, #4]
 803a706:	f000 fdc7 	bl	803b298 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 803a70a:	e009      	b.n	803a720 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 803a70c:	6839      	ldr	r1, [r7, #0]
 803a70e:	6878      	ldr	r0, [r7, #4]
 803a710:	f000 fcf7 	bl	803b102 <USBD_CtlError>
          break;
 803a714:	e004      	b.n	803a720 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 803a716:	6839      	ldr	r1, [r7, #0]
 803a718:	6878      	ldr	r0, [r7, #4]
 803a71a:	f000 fcf2 	bl	803b102 <USBD_CtlError>
          break;
 803a71e:	e000      	b.n	803a722 <USBD_StdItfReq+0xc2>
          break;
 803a720:	bf00      	nop
      }
      break;
 803a722:	e004      	b.n	803a72e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 803a724:	6839      	ldr	r1, [r7, #0]
 803a726:	6878      	ldr	r0, [r7, #4]
 803a728:	f000 fceb 	bl	803b102 <USBD_CtlError>
      break;
 803a72c:	bf00      	nop
  }

  return ret;
 803a72e:	7bfb      	ldrb	r3, [r7, #15]
}
 803a730:	4618      	mov	r0, r3
 803a732:	3710      	adds	r7, #16
 803a734:	46bd      	mov	sp, r7
 803a736:	bd80      	pop	{r7, pc}

0803a738 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803a738:	b580      	push	{r7, lr}
 803a73a:	b084      	sub	sp, #16
 803a73c:	af00      	add	r7, sp, #0
 803a73e:	6078      	str	r0, [r7, #4]
 803a740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 803a742:	2300      	movs	r3, #0
 803a744:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 803a746:	683b      	ldr	r3, [r7, #0]
 803a748:	889b      	ldrh	r3, [r3, #4]
 803a74a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 803a74c:	683b      	ldr	r3, [r7, #0]
 803a74e:	781b      	ldrb	r3, [r3, #0]
 803a750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 803a754:	2b40      	cmp	r3, #64	; 0x40
 803a756:	d007      	beq.n	803a768 <USBD_StdEPReq+0x30>
 803a758:	2b40      	cmp	r3, #64	; 0x40
 803a75a:	f200 817f 	bhi.w	803aa5c <USBD_StdEPReq+0x324>
 803a75e:	2b00      	cmp	r3, #0
 803a760:	d02a      	beq.n	803a7b8 <USBD_StdEPReq+0x80>
 803a762:	2b20      	cmp	r3, #32
 803a764:	f040 817a 	bne.w	803aa5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 803a768:	7bbb      	ldrb	r3, [r7, #14]
 803a76a:	4619      	mov	r1, r3
 803a76c:	6878      	ldr	r0, [r7, #4]
 803a76e:	f7ff fe83 	bl	803a478 <USBD_CoreFindEP>
 803a772:	4603      	mov	r3, r0
 803a774:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a776:	7b7b      	ldrb	r3, [r7, #13]
 803a778:	2bff      	cmp	r3, #255	; 0xff
 803a77a:	f000 8174 	beq.w	803aa66 <USBD_StdEPReq+0x32e>
 803a77e:	7b7b      	ldrb	r3, [r7, #13]
 803a780:	2b00      	cmp	r3, #0
 803a782:	f040 8170 	bne.w	803aa66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 803a786:	7b7a      	ldrb	r2, [r7, #13]
 803a788:	687b      	ldr	r3, [r7, #4]
 803a78a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 803a78e:	7b7a      	ldrb	r2, [r7, #13]
 803a790:	687b      	ldr	r3, [r7, #4]
 803a792:	32ae      	adds	r2, #174	; 0xae
 803a794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a798:	689b      	ldr	r3, [r3, #8]
 803a79a:	2b00      	cmp	r3, #0
 803a79c:	f000 8163 	beq.w	803aa66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 803a7a0:	7b7a      	ldrb	r2, [r7, #13]
 803a7a2:	687b      	ldr	r3, [r7, #4]
 803a7a4:	32ae      	adds	r2, #174	; 0xae
 803a7a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a7aa:	689b      	ldr	r3, [r3, #8]
 803a7ac:	6839      	ldr	r1, [r7, #0]
 803a7ae:	6878      	ldr	r0, [r7, #4]
 803a7b0:	4798      	blx	r3
 803a7b2:	4603      	mov	r3, r0
 803a7b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 803a7b6:	e156      	b.n	803aa66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 803a7b8:	683b      	ldr	r3, [r7, #0]
 803a7ba:	785b      	ldrb	r3, [r3, #1]
 803a7bc:	2b03      	cmp	r3, #3
 803a7be:	d008      	beq.n	803a7d2 <USBD_StdEPReq+0x9a>
 803a7c0:	2b03      	cmp	r3, #3
 803a7c2:	f300 8145 	bgt.w	803aa50 <USBD_StdEPReq+0x318>
 803a7c6:	2b00      	cmp	r3, #0
 803a7c8:	f000 809b 	beq.w	803a902 <USBD_StdEPReq+0x1ca>
 803a7cc:	2b01      	cmp	r3, #1
 803a7ce:	d03c      	beq.n	803a84a <USBD_StdEPReq+0x112>
 803a7d0:	e13e      	b.n	803aa50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 803a7d2:	687b      	ldr	r3, [r7, #4]
 803a7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a7d8:	b2db      	uxtb	r3, r3
 803a7da:	2b02      	cmp	r3, #2
 803a7dc:	d002      	beq.n	803a7e4 <USBD_StdEPReq+0xac>
 803a7de:	2b03      	cmp	r3, #3
 803a7e0:	d016      	beq.n	803a810 <USBD_StdEPReq+0xd8>
 803a7e2:	e02c      	b.n	803a83e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a7e4:	7bbb      	ldrb	r3, [r7, #14]
 803a7e6:	2b00      	cmp	r3, #0
 803a7e8:	d00d      	beq.n	803a806 <USBD_StdEPReq+0xce>
 803a7ea:	7bbb      	ldrb	r3, [r7, #14]
 803a7ec:	2b80      	cmp	r3, #128	; 0x80
 803a7ee:	d00a      	beq.n	803a806 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a7f0:	7bbb      	ldrb	r3, [r7, #14]
 803a7f2:	4619      	mov	r1, r3
 803a7f4:	6878      	ldr	r0, [r7, #4]
 803a7f6:	f001 f973 	bl	803bae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a7fa:	2180      	movs	r1, #128	; 0x80
 803a7fc:	6878      	ldr	r0, [r7, #4]
 803a7fe:	f001 f96f 	bl	803bae0 <USBD_LL_StallEP>
 803a802:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a804:	e020      	b.n	803a848 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 803a806:	6839      	ldr	r1, [r7, #0]
 803a808:	6878      	ldr	r0, [r7, #4]
 803a80a:	f000 fc7a 	bl	803b102 <USBD_CtlError>
              break;
 803a80e:	e01b      	b.n	803a848 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a810:	683b      	ldr	r3, [r7, #0]
 803a812:	885b      	ldrh	r3, [r3, #2]
 803a814:	2b00      	cmp	r3, #0
 803a816:	d10e      	bne.n	803a836 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 803a818:	7bbb      	ldrb	r3, [r7, #14]
 803a81a:	2b00      	cmp	r3, #0
 803a81c:	d00b      	beq.n	803a836 <USBD_StdEPReq+0xfe>
 803a81e:	7bbb      	ldrb	r3, [r7, #14]
 803a820:	2b80      	cmp	r3, #128	; 0x80
 803a822:	d008      	beq.n	803a836 <USBD_StdEPReq+0xfe>
 803a824:	683b      	ldr	r3, [r7, #0]
 803a826:	88db      	ldrh	r3, [r3, #6]
 803a828:	2b00      	cmp	r3, #0
 803a82a:	d104      	bne.n	803a836 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 803a82c:	7bbb      	ldrb	r3, [r7, #14]
 803a82e:	4619      	mov	r1, r3
 803a830:	6878      	ldr	r0, [r7, #4]
 803a832:	f001 f955 	bl	803bae0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 803a836:	6878      	ldr	r0, [r7, #4]
 803a838:	f000 fd2e 	bl	803b298 <USBD_CtlSendStatus>

              break;
 803a83c:	e004      	b.n	803a848 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 803a83e:	6839      	ldr	r1, [r7, #0]
 803a840:	6878      	ldr	r0, [r7, #4]
 803a842:	f000 fc5e 	bl	803b102 <USBD_CtlError>
              break;
 803a846:	bf00      	nop
          }
          break;
 803a848:	e107      	b.n	803aa5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 803a84a:	687b      	ldr	r3, [r7, #4]
 803a84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a850:	b2db      	uxtb	r3, r3
 803a852:	2b02      	cmp	r3, #2
 803a854:	d002      	beq.n	803a85c <USBD_StdEPReq+0x124>
 803a856:	2b03      	cmp	r3, #3
 803a858:	d016      	beq.n	803a888 <USBD_StdEPReq+0x150>
 803a85a:	e04b      	b.n	803a8f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a85c:	7bbb      	ldrb	r3, [r7, #14]
 803a85e:	2b00      	cmp	r3, #0
 803a860:	d00d      	beq.n	803a87e <USBD_StdEPReq+0x146>
 803a862:	7bbb      	ldrb	r3, [r7, #14]
 803a864:	2b80      	cmp	r3, #128	; 0x80
 803a866:	d00a      	beq.n	803a87e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 803a868:	7bbb      	ldrb	r3, [r7, #14]
 803a86a:	4619      	mov	r1, r3
 803a86c:	6878      	ldr	r0, [r7, #4]
 803a86e:	f001 f937 	bl	803bae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 803a872:	2180      	movs	r1, #128	; 0x80
 803a874:	6878      	ldr	r0, [r7, #4]
 803a876:	f001 f933 	bl	803bae0 <USBD_LL_StallEP>
 803a87a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 803a87c:	e040      	b.n	803a900 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 803a87e:	6839      	ldr	r1, [r7, #0]
 803a880:	6878      	ldr	r0, [r7, #4]
 803a882:	f000 fc3e 	bl	803b102 <USBD_CtlError>
              break;
 803a886:	e03b      	b.n	803a900 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 803a888:	683b      	ldr	r3, [r7, #0]
 803a88a:	885b      	ldrh	r3, [r3, #2]
 803a88c:	2b00      	cmp	r3, #0
 803a88e:	d136      	bne.n	803a8fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 803a890:	7bbb      	ldrb	r3, [r7, #14]
 803a892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a896:	2b00      	cmp	r3, #0
 803a898:	d004      	beq.n	803a8a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 803a89a:	7bbb      	ldrb	r3, [r7, #14]
 803a89c:	4619      	mov	r1, r3
 803a89e:	6878      	ldr	r0, [r7, #4]
 803a8a0:	f001 f93d 	bl	803bb1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 803a8a4:	6878      	ldr	r0, [r7, #4]
 803a8a6:	f000 fcf7 	bl	803b298 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 803a8aa:	7bbb      	ldrb	r3, [r7, #14]
 803a8ac:	4619      	mov	r1, r3
 803a8ae:	6878      	ldr	r0, [r7, #4]
 803a8b0:	f7ff fde2 	bl	803a478 <USBD_CoreFindEP>
 803a8b4:	4603      	mov	r3, r0
 803a8b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 803a8b8:	7b7b      	ldrb	r3, [r7, #13]
 803a8ba:	2bff      	cmp	r3, #255	; 0xff
 803a8bc:	d01f      	beq.n	803a8fe <USBD_StdEPReq+0x1c6>
 803a8be:	7b7b      	ldrb	r3, [r7, #13]
 803a8c0:	2b00      	cmp	r3, #0
 803a8c2:	d11c      	bne.n	803a8fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 803a8c4:	7b7a      	ldrb	r2, [r7, #13]
 803a8c6:	687b      	ldr	r3, [r7, #4]
 803a8c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 803a8cc:	7b7a      	ldrb	r2, [r7, #13]
 803a8ce:	687b      	ldr	r3, [r7, #4]
 803a8d0:	32ae      	adds	r2, #174	; 0xae
 803a8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a8d6:	689b      	ldr	r3, [r3, #8]
 803a8d8:	2b00      	cmp	r3, #0
 803a8da:	d010      	beq.n	803a8fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 803a8dc:	7b7a      	ldrb	r2, [r7, #13]
 803a8de:	687b      	ldr	r3, [r7, #4]
 803a8e0:	32ae      	adds	r2, #174	; 0xae
 803a8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803a8e6:	689b      	ldr	r3, [r3, #8]
 803a8e8:	6839      	ldr	r1, [r7, #0]
 803a8ea:	6878      	ldr	r0, [r7, #4]
 803a8ec:	4798      	blx	r3
 803a8ee:	4603      	mov	r3, r0
 803a8f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 803a8f2:	e004      	b.n	803a8fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 803a8f4:	6839      	ldr	r1, [r7, #0]
 803a8f6:	6878      	ldr	r0, [r7, #4]
 803a8f8:	f000 fc03 	bl	803b102 <USBD_CtlError>
              break;
 803a8fc:	e000      	b.n	803a900 <USBD_StdEPReq+0x1c8>
              break;
 803a8fe:	bf00      	nop
          }
          break;
 803a900:	e0ab      	b.n	803aa5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 803a902:	687b      	ldr	r3, [r7, #4]
 803a904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803a908:	b2db      	uxtb	r3, r3
 803a90a:	2b02      	cmp	r3, #2
 803a90c:	d002      	beq.n	803a914 <USBD_StdEPReq+0x1dc>
 803a90e:	2b03      	cmp	r3, #3
 803a910:	d032      	beq.n	803a978 <USBD_StdEPReq+0x240>
 803a912:	e097      	b.n	803aa44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 803a914:	7bbb      	ldrb	r3, [r7, #14]
 803a916:	2b00      	cmp	r3, #0
 803a918:	d007      	beq.n	803a92a <USBD_StdEPReq+0x1f2>
 803a91a:	7bbb      	ldrb	r3, [r7, #14]
 803a91c:	2b80      	cmp	r3, #128	; 0x80
 803a91e:	d004      	beq.n	803a92a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 803a920:	6839      	ldr	r1, [r7, #0]
 803a922:	6878      	ldr	r0, [r7, #4]
 803a924:	f000 fbed 	bl	803b102 <USBD_CtlError>
                break;
 803a928:	e091      	b.n	803aa4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a92a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a92e:	2b00      	cmp	r3, #0
 803a930:	da0b      	bge.n	803a94a <USBD_StdEPReq+0x212>
 803a932:	7bbb      	ldrb	r3, [r7, #14]
 803a934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a938:	4613      	mov	r3, r2
 803a93a:	009b      	lsls	r3, r3, #2
 803a93c:	4413      	add	r3, r2
 803a93e:	009b      	lsls	r3, r3, #2
 803a940:	3310      	adds	r3, #16
 803a942:	687a      	ldr	r2, [r7, #4]
 803a944:	4413      	add	r3, r2
 803a946:	3304      	adds	r3, #4
 803a948:	e00b      	b.n	803a962 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a94a:	7bbb      	ldrb	r3, [r7, #14]
 803a94c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a950:	4613      	mov	r3, r2
 803a952:	009b      	lsls	r3, r3, #2
 803a954:	4413      	add	r3, r2
 803a956:	009b      	lsls	r3, r3, #2
 803a958:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a95c:	687a      	ldr	r2, [r7, #4]
 803a95e:	4413      	add	r3, r2
 803a960:	3304      	adds	r3, #4
 803a962:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 803a964:	68bb      	ldr	r3, [r7, #8]
 803a966:	2200      	movs	r2, #0
 803a968:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803a96a:	68bb      	ldr	r3, [r7, #8]
 803a96c:	2202      	movs	r2, #2
 803a96e:	4619      	mov	r1, r3
 803a970:	6878      	ldr	r0, [r7, #4]
 803a972:	f000 fc37 	bl	803b1e4 <USBD_CtlSendData>
              break;
 803a976:	e06a      	b.n	803aa4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 803a978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a97c:	2b00      	cmp	r3, #0
 803a97e:	da11      	bge.n	803a9a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 803a980:	7bbb      	ldrb	r3, [r7, #14]
 803a982:	f003 020f 	and.w	r2, r3, #15
 803a986:	6879      	ldr	r1, [r7, #4]
 803a988:	4613      	mov	r3, r2
 803a98a:	009b      	lsls	r3, r3, #2
 803a98c:	4413      	add	r3, r2
 803a98e:	009b      	lsls	r3, r3, #2
 803a990:	440b      	add	r3, r1
 803a992:	3324      	adds	r3, #36	; 0x24
 803a994:	881b      	ldrh	r3, [r3, #0]
 803a996:	2b00      	cmp	r3, #0
 803a998:	d117      	bne.n	803a9ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a99a:	6839      	ldr	r1, [r7, #0]
 803a99c:	6878      	ldr	r0, [r7, #4]
 803a99e:	f000 fbb0 	bl	803b102 <USBD_CtlError>
                  break;
 803a9a2:	e054      	b.n	803aa4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 803a9a4:	7bbb      	ldrb	r3, [r7, #14]
 803a9a6:	f003 020f 	and.w	r2, r3, #15
 803a9aa:	6879      	ldr	r1, [r7, #4]
 803a9ac:	4613      	mov	r3, r2
 803a9ae:	009b      	lsls	r3, r3, #2
 803a9b0:	4413      	add	r3, r2
 803a9b2:	009b      	lsls	r3, r3, #2
 803a9b4:	440b      	add	r3, r1
 803a9b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 803a9ba:	881b      	ldrh	r3, [r3, #0]
 803a9bc:	2b00      	cmp	r3, #0
 803a9be:	d104      	bne.n	803a9ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 803a9c0:	6839      	ldr	r1, [r7, #0]
 803a9c2:	6878      	ldr	r0, [r7, #4]
 803a9c4:	f000 fb9d 	bl	803b102 <USBD_CtlError>
                  break;
 803a9c8:	e041      	b.n	803aa4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a9ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 803a9ce:	2b00      	cmp	r3, #0
 803a9d0:	da0b      	bge.n	803a9ea <USBD_StdEPReq+0x2b2>
 803a9d2:	7bbb      	ldrb	r3, [r7, #14]
 803a9d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803a9d8:	4613      	mov	r3, r2
 803a9da:	009b      	lsls	r3, r3, #2
 803a9dc:	4413      	add	r3, r2
 803a9de:	009b      	lsls	r3, r3, #2
 803a9e0:	3310      	adds	r3, #16
 803a9e2:	687a      	ldr	r2, [r7, #4]
 803a9e4:	4413      	add	r3, r2
 803a9e6:	3304      	adds	r3, #4
 803a9e8:	e00b      	b.n	803aa02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 803a9ea:	7bbb      	ldrb	r3, [r7, #14]
 803a9ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 803a9f0:	4613      	mov	r3, r2
 803a9f2:	009b      	lsls	r3, r3, #2
 803a9f4:	4413      	add	r3, r2
 803a9f6:	009b      	lsls	r3, r3, #2
 803a9f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 803a9fc:	687a      	ldr	r2, [r7, #4]
 803a9fe:	4413      	add	r3, r2
 803aa00:	3304      	adds	r3, #4
 803aa02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 803aa04:	7bbb      	ldrb	r3, [r7, #14]
 803aa06:	2b00      	cmp	r3, #0
 803aa08:	d002      	beq.n	803aa10 <USBD_StdEPReq+0x2d8>
 803aa0a:	7bbb      	ldrb	r3, [r7, #14]
 803aa0c:	2b80      	cmp	r3, #128	; 0x80
 803aa0e:	d103      	bne.n	803aa18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 803aa10:	68bb      	ldr	r3, [r7, #8]
 803aa12:	2200      	movs	r2, #0
 803aa14:	601a      	str	r2, [r3, #0]
 803aa16:	e00e      	b.n	803aa36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 803aa18:	7bbb      	ldrb	r3, [r7, #14]
 803aa1a:	4619      	mov	r1, r3
 803aa1c:	6878      	ldr	r0, [r7, #4]
 803aa1e:	f001 f89d 	bl	803bb5c <USBD_LL_IsStallEP>
 803aa22:	4603      	mov	r3, r0
 803aa24:	2b00      	cmp	r3, #0
 803aa26:	d003      	beq.n	803aa30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 803aa28:	68bb      	ldr	r3, [r7, #8]
 803aa2a:	2201      	movs	r2, #1
 803aa2c:	601a      	str	r2, [r3, #0]
 803aa2e:	e002      	b.n	803aa36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 803aa30:	68bb      	ldr	r3, [r7, #8]
 803aa32:	2200      	movs	r2, #0
 803aa34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 803aa36:	68bb      	ldr	r3, [r7, #8]
 803aa38:	2202      	movs	r2, #2
 803aa3a:	4619      	mov	r1, r3
 803aa3c:	6878      	ldr	r0, [r7, #4]
 803aa3e:	f000 fbd1 	bl	803b1e4 <USBD_CtlSendData>
              break;
 803aa42:	e004      	b.n	803aa4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 803aa44:	6839      	ldr	r1, [r7, #0]
 803aa46:	6878      	ldr	r0, [r7, #4]
 803aa48:	f000 fb5b 	bl	803b102 <USBD_CtlError>
              break;
 803aa4c:	bf00      	nop
          }
          break;
 803aa4e:	e004      	b.n	803aa5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 803aa50:	6839      	ldr	r1, [r7, #0]
 803aa52:	6878      	ldr	r0, [r7, #4]
 803aa54:	f000 fb55 	bl	803b102 <USBD_CtlError>
          break;
 803aa58:	bf00      	nop
      }
      break;
 803aa5a:	e005      	b.n	803aa68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 803aa5c:	6839      	ldr	r1, [r7, #0]
 803aa5e:	6878      	ldr	r0, [r7, #4]
 803aa60:	f000 fb4f 	bl	803b102 <USBD_CtlError>
      break;
 803aa64:	e000      	b.n	803aa68 <USBD_StdEPReq+0x330>
      break;
 803aa66:	bf00      	nop
  }

  return ret;
 803aa68:	7bfb      	ldrb	r3, [r7, #15]
}
 803aa6a:	4618      	mov	r0, r3
 803aa6c:	3710      	adds	r7, #16
 803aa6e:	46bd      	mov	sp, r7
 803aa70:	bd80      	pop	{r7, pc}
	...

0803aa74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803aa74:	b580      	push	{r7, lr}
 803aa76:	b084      	sub	sp, #16
 803aa78:	af00      	add	r7, sp, #0
 803aa7a:	6078      	str	r0, [r7, #4]
 803aa7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 803aa7e:	2300      	movs	r3, #0
 803aa80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 803aa82:	2300      	movs	r3, #0
 803aa84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 803aa86:	2300      	movs	r3, #0
 803aa88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 803aa8a:	683b      	ldr	r3, [r7, #0]
 803aa8c:	885b      	ldrh	r3, [r3, #2]
 803aa8e:	0a1b      	lsrs	r3, r3, #8
 803aa90:	b29b      	uxth	r3, r3
 803aa92:	3b01      	subs	r3, #1
 803aa94:	2b06      	cmp	r3, #6
 803aa96:	f200 8128 	bhi.w	803acea <USBD_GetDescriptor+0x276>
 803aa9a:	a201      	add	r2, pc, #4	; (adr r2, 803aaa0 <USBD_GetDescriptor+0x2c>)
 803aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803aaa0:	0803aabd 	.word	0x0803aabd
 803aaa4:	0803aad5 	.word	0x0803aad5
 803aaa8:	0803ab15 	.word	0x0803ab15
 803aaac:	0803aceb 	.word	0x0803aceb
 803aab0:	0803aceb 	.word	0x0803aceb
 803aab4:	0803ac8b 	.word	0x0803ac8b
 803aab8:	0803acb7 	.word	0x0803acb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 803aabc:	687b      	ldr	r3, [r7, #4]
 803aabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803aac2:	681b      	ldr	r3, [r3, #0]
 803aac4:	687a      	ldr	r2, [r7, #4]
 803aac6:	7c12      	ldrb	r2, [r2, #16]
 803aac8:	f107 0108 	add.w	r1, r7, #8
 803aacc:	4610      	mov	r0, r2
 803aace:	4798      	blx	r3
 803aad0:	60f8      	str	r0, [r7, #12]
      break;
 803aad2:	e112      	b.n	803acfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803aad4:	687b      	ldr	r3, [r7, #4]
 803aad6:	7c1b      	ldrb	r3, [r3, #16]
 803aad8:	2b00      	cmp	r3, #0
 803aada:	d10d      	bne.n	803aaf8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 803aadc:	687b      	ldr	r3, [r7, #4]
 803aade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803aae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803aae4:	f107 0208 	add.w	r2, r7, #8
 803aae8:	4610      	mov	r0, r2
 803aaea:	4798      	blx	r3
 803aaec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803aaee:	68fb      	ldr	r3, [r7, #12]
 803aaf0:	3301      	adds	r3, #1
 803aaf2:	2202      	movs	r2, #2
 803aaf4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 803aaf6:	e100      	b.n	803acfa <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 803aaf8:	687b      	ldr	r3, [r7, #4]
 803aafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803ab00:	f107 0208 	add.w	r2, r7, #8
 803ab04:	4610      	mov	r0, r2
 803ab06:	4798      	blx	r3
 803ab08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 803ab0a:	68fb      	ldr	r3, [r7, #12]
 803ab0c:	3301      	adds	r3, #1
 803ab0e:	2202      	movs	r2, #2
 803ab10:	701a      	strb	r2, [r3, #0]
      break;
 803ab12:	e0f2      	b.n	803acfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 803ab14:	683b      	ldr	r3, [r7, #0]
 803ab16:	885b      	ldrh	r3, [r3, #2]
 803ab18:	b2db      	uxtb	r3, r3
 803ab1a:	2b05      	cmp	r3, #5
 803ab1c:	f200 80ac 	bhi.w	803ac78 <USBD_GetDescriptor+0x204>
 803ab20:	a201      	add	r2, pc, #4	; (adr r2, 803ab28 <USBD_GetDescriptor+0xb4>)
 803ab22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ab26:	bf00      	nop
 803ab28:	0803ab41 	.word	0x0803ab41
 803ab2c:	0803ab75 	.word	0x0803ab75
 803ab30:	0803aba9 	.word	0x0803aba9
 803ab34:	0803abdd 	.word	0x0803abdd
 803ab38:	0803ac11 	.word	0x0803ac11
 803ab3c:	0803ac45 	.word	0x0803ac45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 803ab40:	687b      	ldr	r3, [r7, #4]
 803ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab46:	685b      	ldr	r3, [r3, #4]
 803ab48:	2b00      	cmp	r3, #0
 803ab4a:	d00b      	beq.n	803ab64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 803ab4c:	687b      	ldr	r3, [r7, #4]
 803ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab52:	685b      	ldr	r3, [r3, #4]
 803ab54:	687a      	ldr	r2, [r7, #4]
 803ab56:	7c12      	ldrb	r2, [r2, #16]
 803ab58:	f107 0108 	add.w	r1, r7, #8
 803ab5c:	4610      	mov	r0, r2
 803ab5e:	4798      	blx	r3
 803ab60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab62:	e091      	b.n	803ac88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab64:	6839      	ldr	r1, [r7, #0]
 803ab66:	6878      	ldr	r0, [r7, #4]
 803ab68:	f000 facb 	bl	803b102 <USBD_CtlError>
            err++;
 803ab6c:	7afb      	ldrb	r3, [r7, #11]
 803ab6e:	3301      	adds	r3, #1
 803ab70:	72fb      	strb	r3, [r7, #11]
          break;
 803ab72:	e089      	b.n	803ac88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 803ab74:	687b      	ldr	r3, [r7, #4]
 803ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab7a:	689b      	ldr	r3, [r3, #8]
 803ab7c:	2b00      	cmp	r3, #0
 803ab7e:	d00b      	beq.n	803ab98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 803ab80:	687b      	ldr	r3, [r7, #4]
 803ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ab86:	689b      	ldr	r3, [r3, #8]
 803ab88:	687a      	ldr	r2, [r7, #4]
 803ab8a:	7c12      	ldrb	r2, [r2, #16]
 803ab8c:	f107 0108 	add.w	r1, r7, #8
 803ab90:	4610      	mov	r0, r2
 803ab92:	4798      	blx	r3
 803ab94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ab96:	e077      	b.n	803ac88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ab98:	6839      	ldr	r1, [r7, #0]
 803ab9a:	6878      	ldr	r0, [r7, #4]
 803ab9c:	f000 fab1 	bl	803b102 <USBD_CtlError>
            err++;
 803aba0:	7afb      	ldrb	r3, [r7, #11]
 803aba2:	3301      	adds	r3, #1
 803aba4:	72fb      	strb	r3, [r7, #11]
          break;
 803aba6:	e06f      	b.n	803ac88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 803aba8:	687b      	ldr	r3, [r7, #4]
 803abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abae:	68db      	ldr	r3, [r3, #12]
 803abb0:	2b00      	cmp	r3, #0
 803abb2:	d00b      	beq.n	803abcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 803abb4:	687b      	ldr	r3, [r7, #4]
 803abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abba:	68db      	ldr	r3, [r3, #12]
 803abbc:	687a      	ldr	r2, [r7, #4]
 803abbe:	7c12      	ldrb	r2, [r2, #16]
 803abc0:	f107 0108 	add.w	r1, r7, #8
 803abc4:	4610      	mov	r0, r2
 803abc6:	4798      	blx	r3
 803abc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803abca:	e05d      	b.n	803ac88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803abcc:	6839      	ldr	r1, [r7, #0]
 803abce:	6878      	ldr	r0, [r7, #4]
 803abd0:	f000 fa97 	bl	803b102 <USBD_CtlError>
            err++;
 803abd4:	7afb      	ldrb	r3, [r7, #11]
 803abd6:	3301      	adds	r3, #1
 803abd8:	72fb      	strb	r3, [r7, #11]
          break;
 803abda:	e055      	b.n	803ac88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 803abdc:	687b      	ldr	r3, [r7, #4]
 803abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abe2:	691b      	ldr	r3, [r3, #16]
 803abe4:	2b00      	cmp	r3, #0
 803abe6:	d00b      	beq.n	803ac00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 803abe8:	687b      	ldr	r3, [r7, #4]
 803abea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803abee:	691b      	ldr	r3, [r3, #16]
 803abf0:	687a      	ldr	r2, [r7, #4]
 803abf2:	7c12      	ldrb	r2, [r2, #16]
 803abf4:	f107 0108 	add.w	r1, r7, #8
 803abf8:	4610      	mov	r0, r2
 803abfa:	4798      	blx	r3
 803abfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803abfe:	e043      	b.n	803ac88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ac00:	6839      	ldr	r1, [r7, #0]
 803ac02:	6878      	ldr	r0, [r7, #4]
 803ac04:	f000 fa7d 	bl	803b102 <USBD_CtlError>
            err++;
 803ac08:	7afb      	ldrb	r3, [r7, #11]
 803ac0a:	3301      	adds	r3, #1
 803ac0c:	72fb      	strb	r3, [r7, #11]
          break;
 803ac0e:	e03b      	b.n	803ac88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 803ac10:	687b      	ldr	r3, [r7, #4]
 803ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac16:	695b      	ldr	r3, [r3, #20]
 803ac18:	2b00      	cmp	r3, #0
 803ac1a:	d00b      	beq.n	803ac34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 803ac1c:	687b      	ldr	r3, [r7, #4]
 803ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac22:	695b      	ldr	r3, [r3, #20]
 803ac24:	687a      	ldr	r2, [r7, #4]
 803ac26:	7c12      	ldrb	r2, [r2, #16]
 803ac28:	f107 0108 	add.w	r1, r7, #8
 803ac2c:	4610      	mov	r0, r2
 803ac2e:	4798      	blx	r3
 803ac30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ac32:	e029      	b.n	803ac88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ac34:	6839      	ldr	r1, [r7, #0]
 803ac36:	6878      	ldr	r0, [r7, #4]
 803ac38:	f000 fa63 	bl	803b102 <USBD_CtlError>
            err++;
 803ac3c:	7afb      	ldrb	r3, [r7, #11]
 803ac3e:	3301      	adds	r3, #1
 803ac40:	72fb      	strb	r3, [r7, #11]
          break;
 803ac42:	e021      	b.n	803ac88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 803ac44:	687b      	ldr	r3, [r7, #4]
 803ac46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac4a:	699b      	ldr	r3, [r3, #24]
 803ac4c:	2b00      	cmp	r3, #0
 803ac4e:	d00b      	beq.n	803ac68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 803ac50:	687b      	ldr	r3, [r7, #4]
 803ac52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 803ac56:	699b      	ldr	r3, [r3, #24]
 803ac58:	687a      	ldr	r2, [r7, #4]
 803ac5a:	7c12      	ldrb	r2, [r2, #16]
 803ac5c:	f107 0108 	add.w	r1, r7, #8
 803ac60:	4610      	mov	r0, r2
 803ac62:	4798      	blx	r3
 803ac64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 803ac66:	e00f      	b.n	803ac88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 803ac68:	6839      	ldr	r1, [r7, #0]
 803ac6a:	6878      	ldr	r0, [r7, #4]
 803ac6c:	f000 fa49 	bl	803b102 <USBD_CtlError>
            err++;
 803ac70:	7afb      	ldrb	r3, [r7, #11]
 803ac72:	3301      	adds	r3, #1
 803ac74:	72fb      	strb	r3, [r7, #11]
          break;
 803ac76:	e007      	b.n	803ac88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 803ac78:	6839      	ldr	r1, [r7, #0]
 803ac7a:	6878      	ldr	r0, [r7, #4]
 803ac7c:	f000 fa41 	bl	803b102 <USBD_CtlError>
          err++;
 803ac80:	7afb      	ldrb	r3, [r7, #11]
 803ac82:	3301      	adds	r3, #1
 803ac84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 803ac86:	bf00      	nop
      }
      break;
 803ac88:	e037      	b.n	803acfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803ac8a:	687b      	ldr	r3, [r7, #4]
 803ac8c:	7c1b      	ldrb	r3, [r3, #16]
 803ac8e:	2b00      	cmp	r3, #0
 803ac90:	d109      	bne.n	803aca6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 803ac92:	687b      	ldr	r3, [r7, #4]
 803ac94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803ac98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803ac9a:	f107 0208 	add.w	r2, r7, #8
 803ac9e:	4610      	mov	r0, r2
 803aca0:	4798      	blx	r3
 803aca2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803aca4:	e029      	b.n	803acfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803aca6:	6839      	ldr	r1, [r7, #0]
 803aca8:	6878      	ldr	r0, [r7, #4]
 803acaa:	f000 fa2a 	bl	803b102 <USBD_CtlError>
        err++;
 803acae:	7afb      	ldrb	r3, [r7, #11]
 803acb0:	3301      	adds	r3, #1
 803acb2:	72fb      	strb	r3, [r7, #11]
      break;
 803acb4:	e021      	b.n	803acfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 803acb6:	687b      	ldr	r3, [r7, #4]
 803acb8:	7c1b      	ldrb	r3, [r3, #16]
 803acba:	2b00      	cmp	r3, #0
 803acbc:	d10d      	bne.n	803acda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 803acbe:	687b      	ldr	r3, [r7, #4]
 803acc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 803acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803acc6:	f107 0208 	add.w	r2, r7, #8
 803acca:	4610      	mov	r0, r2
 803accc:	4798      	blx	r3
 803acce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 803acd0:	68fb      	ldr	r3, [r7, #12]
 803acd2:	3301      	adds	r3, #1
 803acd4:	2207      	movs	r2, #7
 803acd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 803acd8:	e00f      	b.n	803acfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 803acda:	6839      	ldr	r1, [r7, #0]
 803acdc:	6878      	ldr	r0, [r7, #4]
 803acde:	f000 fa10 	bl	803b102 <USBD_CtlError>
        err++;
 803ace2:	7afb      	ldrb	r3, [r7, #11]
 803ace4:	3301      	adds	r3, #1
 803ace6:	72fb      	strb	r3, [r7, #11]
      break;
 803ace8:	e007      	b.n	803acfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 803acea:	6839      	ldr	r1, [r7, #0]
 803acec:	6878      	ldr	r0, [r7, #4]
 803acee:	f000 fa08 	bl	803b102 <USBD_CtlError>
      err++;
 803acf2:	7afb      	ldrb	r3, [r7, #11]
 803acf4:	3301      	adds	r3, #1
 803acf6:	72fb      	strb	r3, [r7, #11]
      break;
 803acf8:	bf00      	nop
  }

  if (err != 0U)
 803acfa:	7afb      	ldrb	r3, [r7, #11]
 803acfc:	2b00      	cmp	r3, #0
 803acfe:	d11e      	bne.n	803ad3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 803ad00:	683b      	ldr	r3, [r7, #0]
 803ad02:	88db      	ldrh	r3, [r3, #6]
 803ad04:	2b00      	cmp	r3, #0
 803ad06:	d016      	beq.n	803ad36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 803ad08:	893b      	ldrh	r3, [r7, #8]
 803ad0a:	2b00      	cmp	r3, #0
 803ad0c:	d00e      	beq.n	803ad2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 803ad0e:	683b      	ldr	r3, [r7, #0]
 803ad10:	88da      	ldrh	r2, [r3, #6]
 803ad12:	893b      	ldrh	r3, [r7, #8]
 803ad14:	4293      	cmp	r3, r2
 803ad16:	bf28      	it	cs
 803ad18:	4613      	movcs	r3, r2
 803ad1a:	b29b      	uxth	r3, r3
 803ad1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 803ad1e:	893b      	ldrh	r3, [r7, #8]
 803ad20:	461a      	mov	r2, r3
 803ad22:	68f9      	ldr	r1, [r7, #12]
 803ad24:	6878      	ldr	r0, [r7, #4]
 803ad26:	f000 fa5d 	bl	803b1e4 <USBD_CtlSendData>
 803ad2a:	e009      	b.n	803ad40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 803ad2c:	6839      	ldr	r1, [r7, #0]
 803ad2e:	6878      	ldr	r0, [r7, #4]
 803ad30:	f000 f9e7 	bl	803b102 <USBD_CtlError>
 803ad34:	e004      	b.n	803ad40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 803ad36:	6878      	ldr	r0, [r7, #4]
 803ad38:	f000 faae 	bl	803b298 <USBD_CtlSendStatus>
 803ad3c:	e000      	b.n	803ad40 <USBD_GetDescriptor+0x2cc>
    return;
 803ad3e:	bf00      	nop
  }
}
 803ad40:	3710      	adds	r7, #16
 803ad42:	46bd      	mov	sp, r7
 803ad44:	bd80      	pop	{r7, pc}
 803ad46:	bf00      	nop

0803ad48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803ad48:	b580      	push	{r7, lr}
 803ad4a:	b084      	sub	sp, #16
 803ad4c:	af00      	add	r7, sp, #0
 803ad4e:	6078      	str	r0, [r7, #4]
 803ad50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 803ad52:	683b      	ldr	r3, [r7, #0]
 803ad54:	889b      	ldrh	r3, [r3, #4]
 803ad56:	2b00      	cmp	r3, #0
 803ad58:	d131      	bne.n	803adbe <USBD_SetAddress+0x76>
 803ad5a:	683b      	ldr	r3, [r7, #0]
 803ad5c:	88db      	ldrh	r3, [r3, #6]
 803ad5e:	2b00      	cmp	r3, #0
 803ad60:	d12d      	bne.n	803adbe <USBD_SetAddress+0x76>
 803ad62:	683b      	ldr	r3, [r7, #0]
 803ad64:	885b      	ldrh	r3, [r3, #2]
 803ad66:	2b7f      	cmp	r3, #127	; 0x7f
 803ad68:	d829      	bhi.n	803adbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 803ad6a:	683b      	ldr	r3, [r7, #0]
 803ad6c:	885b      	ldrh	r3, [r3, #2]
 803ad6e:	b2db      	uxtb	r3, r3
 803ad70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803ad74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ad76:	687b      	ldr	r3, [r7, #4]
 803ad78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ad7c:	b2db      	uxtb	r3, r3
 803ad7e:	2b03      	cmp	r3, #3
 803ad80:	d104      	bne.n	803ad8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 803ad82:	6839      	ldr	r1, [r7, #0]
 803ad84:	6878      	ldr	r0, [r7, #4]
 803ad86:	f000 f9bc 	bl	803b102 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803ad8a:	e01d      	b.n	803adc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 803ad8c:	687b      	ldr	r3, [r7, #4]
 803ad8e:	7bfa      	ldrb	r2, [r7, #15]
 803ad90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 803ad94:	7bfb      	ldrb	r3, [r7, #15]
 803ad96:	4619      	mov	r1, r3
 803ad98:	6878      	ldr	r0, [r7, #4]
 803ad9a:	f000 ff0b 	bl	803bbb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 803ad9e:	6878      	ldr	r0, [r7, #4]
 803ada0:	f000 fa7a 	bl	803b298 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 803ada4:	7bfb      	ldrb	r3, [r7, #15]
 803ada6:	2b00      	cmp	r3, #0
 803ada8:	d004      	beq.n	803adb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803adaa:	687b      	ldr	r3, [r7, #4]
 803adac:	2202      	movs	r2, #2
 803adae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803adb2:	e009      	b.n	803adc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 803adb4:	687b      	ldr	r3, [r7, #4]
 803adb6:	2201      	movs	r2, #1
 803adb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 803adbc:	e004      	b.n	803adc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 803adbe:	6839      	ldr	r1, [r7, #0]
 803adc0:	6878      	ldr	r0, [r7, #4]
 803adc2:	f000 f99e 	bl	803b102 <USBD_CtlError>
  }
}
 803adc6:	bf00      	nop
 803adc8:	bf00      	nop
 803adca:	3710      	adds	r7, #16
 803adcc:	46bd      	mov	sp, r7
 803adce:	bd80      	pop	{r7, pc}

0803add0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803add0:	b580      	push	{r7, lr}
 803add2:	b084      	sub	sp, #16
 803add4:	af00      	add	r7, sp, #0
 803add6:	6078      	str	r0, [r7, #4]
 803add8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 803adda:	2300      	movs	r3, #0
 803addc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 803adde:	683b      	ldr	r3, [r7, #0]
 803ade0:	885b      	ldrh	r3, [r3, #2]
 803ade2:	b2da      	uxtb	r2, r3
 803ade4:	4b4e      	ldr	r3, [pc, #312]	; (803af20 <USBD_SetConfig+0x150>)
 803ade6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 803ade8:	4b4d      	ldr	r3, [pc, #308]	; (803af20 <USBD_SetConfig+0x150>)
 803adea:	781b      	ldrb	r3, [r3, #0]
 803adec:	2b01      	cmp	r3, #1
 803adee:	d905      	bls.n	803adfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 803adf0:	6839      	ldr	r1, [r7, #0]
 803adf2:	6878      	ldr	r0, [r7, #4]
 803adf4:	f000 f985 	bl	803b102 <USBD_CtlError>
    return USBD_FAIL;
 803adf8:	2303      	movs	r3, #3
 803adfa:	e08c      	b.n	803af16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 803adfc:	687b      	ldr	r3, [r7, #4]
 803adfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803ae02:	b2db      	uxtb	r3, r3
 803ae04:	2b02      	cmp	r3, #2
 803ae06:	d002      	beq.n	803ae0e <USBD_SetConfig+0x3e>
 803ae08:	2b03      	cmp	r3, #3
 803ae0a:	d029      	beq.n	803ae60 <USBD_SetConfig+0x90>
 803ae0c:	e075      	b.n	803aefa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 803ae0e:	4b44      	ldr	r3, [pc, #272]	; (803af20 <USBD_SetConfig+0x150>)
 803ae10:	781b      	ldrb	r3, [r3, #0]
 803ae12:	2b00      	cmp	r3, #0
 803ae14:	d020      	beq.n	803ae58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 803ae16:	4b42      	ldr	r3, [pc, #264]	; (803af20 <USBD_SetConfig+0x150>)
 803ae18:	781b      	ldrb	r3, [r3, #0]
 803ae1a:	461a      	mov	r2, r3
 803ae1c:	687b      	ldr	r3, [r7, #4]
 803ae1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 803ae20:	4b3f      	ldr	r3, [pc, #252]	; (803af20 <USBD_SetConfig+0x150>)
 803ae22:	781b      	ldrb	r3, [r3, #0]
 803ae24:	4619      	mov	r1, r3
 803ae26:	6878      	ldr	r0, [r7, #4]
 803ae28:	f7fe ffe7 	bl	8039dfa <USBD_SetClassConfig>
 803ae2c:	4603      	mov	r3, r0
 803ae2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 803ae30:	7bfb      	ldrb	r3, [r7, #15]
 803ae32:	2b00      	cmp	r3, #0
 803ae34:	d008      	beq.n	803ae48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 803ae36:	6839      	ldr	r1, [r7, #0]
 803ae38:	6878      	ldr	r0, [r7, #4]
 803ae3a:	f000 f962 	bl	803b102 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803ae3e:	687b      	ldr	r3, [r7, #4]
 803ae40:	2202      	movs	r2, #2
 803ae42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803ae46:	e065      	b.n	803af14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803ae48:	6878      	ldr	r0, [r7, #4]
 803ae4a:	f000 fa25 	bl	803b298 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 803ae4e:	687b      	ldr	r3, [r7, #4]
 803ae50:	2203      	movs	r2, #3
 803ae52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803ae56:	e05d      	b.n	803af14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803ae58:	6878      	ldr	r0, [r7, #4]
 803ae5a:	f000 fa1d 	bl	803b298 <USBD_CtlSendStatus>
      break;
 803ae5e:	e059      	b.n	803af14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 803ae60:	4b2f      	ldr	r3, [pc, #188]	; (803af20 <USBD_SetConfig+0x150>)
 803ae62:	781b      	ldrb	r3, [r3, #0]
 803ae64:	2b00      	cmp	r3, #0
 803ae66:	d112      	bne.n	803ae8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 803ae68:	687b      	ldr	r3, [r7, #4]
 803ae6a:	2202      	movs	r2, #2
 803ae6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 803ae70:	4b2b      	ldr	r3, [pc, #172]	; (803af20 <USBD_SetConfig+0x150>)
 803ae72:	781b      	ldrb	r3, [r3, #0]
 803ae74:	461a      	mov	r2, r3
 803ae76:	687b      	ldr	r3, [r7, #4]
 803ae78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 803ae7a:	4b29      	ldr	r3, [pc, #164]	; (803af20 <USBD_SetConfig+0x150>)
 803ae7c:	781b      	ldrb	r3, [r3, #0]
 803ae7e:	4619      	mov	r1, r3
 803ae80:	6878      	ldr	r0, [r7, #4]
 803ae82:	f7fe ffd6 	bl	8039e32 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 803ae86:	6878      	ldr	r0, [r7, #4]
 803ae88:	f000 fa06 	bl	803b298 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 803ae8c:	e042      	b.n	803af14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 803ae8e:	4b24      	ldr	r3, [pc, #144]	; (803af20 <USBD_SetConfig+0x150>)
 803ae90:	781b      	ldrb	r3, [r3, #0]
 803ae92:	461a      	mov	r2, r3
 803ae94:	687b      	ldr	r3, [r7, #4]
 803ae96:	685b      	ldr	r3, [r3, #4]
 803ae98:	429a      	cmp	r2, r3
 803ae9a:	d02a      	beq.n	803aef2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803ae9c:	687b      	ldr	r3, [r7, #4]
 803ae9e:	685b      	ldr	r3, [r3, #4]
 803aea0:	b2db      	uxtb	r3, r3
 803aea2:	4619      	mov	r1, r3
 803aea4:	6878      	ldr	r0, [r7, #4]
 803aea6:	f7fe ffc4 	bl	8039e32 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 803aeaa:	4b1d      	ldr	r3, [pc, #116]	; (803af20 <USBD_SetConfig+0x150>)
 803aeac:	781b      	ldrb	r3, [r3, #0]
 803aeae:	461a      	mov	r2, r3
 803aeb0:	687b      	ldr	r3, [r7, #4]
 803aeb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 803aeb4:	4b1a      	ldr	r3, [pc, #104]	; (803af20 <USBD_SetConfig+0x150>)
 803aeb6:	781b      	ldrb	r3, [r3, #0]
 803aeb8:	4619      	mov	r1, r3
 803aeba:	6878      	ldr	r0, [r7, #4]
 803aebc:	f7fe ff9d 	bl	8039dfa <USBD_SetClassConfig>
 803aec0:	4603      	mov	r3, r0
 803aec2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 803aec4:	7bfb      	ldrb	r3, [r7, #15]
 803aec6:	2b00      	cmp	r3, #0
 803aec8:	d00f      	beq.n	803aeea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 803aeca:	6839      	ldr	r1, [r7, #0]
 803aecc:	6878      	ldr	r0, [r7, #4]
 803aece:	f000 f918 	bl	803b102 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 803aed2:	687b      	ldr	r3, [r7, #4]
 803aed4:	685b      	ldr	r3, [r3, #4]
 803aed6:	b2db      	uxtb	r3, r3
 803aed8:	4619      	mov	r1, r3
 803aeda:	6878      	ldr	r0, [r7, #4]
 803aedc:	f7fe ffa9 	bl	8039e32 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 803aee0:	687b      	ldr	r3, [r7, #4]
 803aee2:	2202      	movs	r2, #2
 803aee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 803aee8:	e014      	b.n	803af14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 803aeea:	6878      	ldr	r0, [r7, #4]
 803aeec:	f000 f9d4 	bl	803b298 <USBD_CtlSendStatus>
      break;
 803aef0:	e010      	b.n	803af14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 803aef2:	6878      	ldr	r0, [r7, #4]
 803aef4:	f000 f9d0 	bl	803b298 <USBD_CtlSendStatus>
      break;
 803aef8:	e00c      	b.n	803af14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 803aefa:	6839      	ldr	r1, [r7, #0]
 803aefc:	6878      	ldr	r0, [r7, #4]
 803aefe:	f000 f900 	bl	803b102 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 803af02:	4b07      	ldr	r3, [pc, #28]	; (803af20 <USBD_SetConfig+0x150>)
 803af04:	781b      	ldrb	r3, [r3, #0]
 803af06:	4619      	mov	r1, r3
 803af08:	6878      	ldr	r0, [r7, #4]
 803af0a:	f7fe ff92 	bl	8039e32 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 803af0e:	2303      	movs	r3, #3
 803af10:	73fb      	strb	r3, [r7, #15]
      break;
 803af12:	bf00      	nop
  }

  return ret;
 803af14:	7bfb      	ldrb	r3, [r7, #15]
}
 803af16:	4618      	mov	r0, r3
 803af18:	3710      	adds	r7, #16
 803af1a:	46bd      	mov	sp, r7
 803af1c:	bd80      	pop	{r7, pc}
 803af1e:	bf00      	nop
 803af20:	24024bc8 	.word	0x24024bc8

0803af24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803af24:	b580      	push	{r7, lr}
 803af26:	b082      	sub	sp, #8
 803af28:	af00      	add	r7, sp, #0
 803af2a:	6078      	str	r0, [r7, #4]
 803af2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 803af2e:	683b      	ldr	r3, [r7, #0]
 803af30:	88db      	ldrh	r3, [r3, #6]
 803af32:	2b01      	cmp	r3, #1
 803af34:	d004      	beq.n	803af40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 803af36:	6839      	ldr	r1, [r7, #0]
 803af38:	6878      	ldr	r0, [r7, #4]
 803af3a:	f000 f8e2 	bl	803b102 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 803af3e:	e023      	b.n	803af88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 803af40:	687b      	ldr	r3, [r7, #4]
 803af42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803af46:	b2db      	uxtb	r3, r3
 803af48:	2b02      	cmp	r3, #2
 803af4a:	dc02      	bgt.n	803af52 <USBD_GetConfig+0x2e>
 803af4c:	2b00      	cmp	r3, #0
 803af4e:	dc03      	bgt.n	803af58 <USBD_GetConfig+0x34>
 803af50:	e015      	b.n	803af7e <USBD_GetConfig+0x5a>
 803af52:	2b03      	cmp	r3, #3
 803af54:	d00b      	beq.n	803af6e <USBD_GetConfig+0x4a>
 803af56:	e012      	b.n	803af7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 803af58:	687b      	ldr	r3, [r7, #4]
 803af5a:	2200      	movs	r2, #0
 803af5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 803af5e:	687b      	ldr	r3, [r7, #4]
 803af60:	3308      	adds	r3, #8
 803af62:	2201      	movs	r2, #1
 803af64:	4619      	mov	r1, r3
 803af66:	6878      	ldr	r0, [r7, #4]
 803af68:	f000 f93c 	bl	803b1e4 <USBD_CtlSendData>
        break;
 803af6c:	e00c      	b.n	803af88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 803af6e:	687b      	ldr	r3, [r7, #4]
 803af70:	3304      	adds	r3, #4
 803af72:	2201      	movs	r2, #1
 803af74:	4619      	mov	r1, r3
 803af76:	6878      	ldr	r0, [r7, #4]
 803af78:	f000 f934 	bl	803b1e4 <USBD_CtlSendData>
        break;
 803af7c:	e004      	b.n	803af88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 803af7e:	6839      	ldr	r1, [r7, #0]
 803af80:	6878      	ldr	r0, [r7, #4]
 803af82:	f000 f8be 	bl	803b102 <USBD_CtlError>
        break;
 803af86:	bf00      	nop
}
 803af88:	bf00      	nop
 803af8a:	3708      	adds	r7, #8
 803af8c:	46bd      	mov	sp, r7
 803af8e:	bd80      	pop	{r7, pc}

0803af90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803af90:	b580      	push	{r7, lr}
 803af92:	b082      	sub	sp, #8
 803af94:	af00      	add	r7, sp, #0
 803af96:	6078      	str	r0, [r7, #4]
 803af98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803af9a:	687b      	ldr	r3, [r7, #4]
 803af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803afa0:	b2db      	uxtb	r3, r3
 803afa2:	3b01      	subs	r3, #1
 803afa4:	2b02      	cmp	r3, #2
 803afa6:	d81e      	bhi.n	803afe6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 803afa8:	683b      	ldr	r3, [r7, #0]
 803afaa:	88db      	ldrh	r3, [r3, #6]
 803afac:	2b02      	cmp	r3, #2
 803afae:	d004      	beq.n	803afba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 803afb0:	6839      	ldr	r1, [r7, #0]
 803afb2:	6878      	ldr	r0, [r7, #4]
 803afb4:	f000 f8a5 	bl	803b102 <USBD_CtlError>
        break;
 803afb8:	e01a      	b.n	803aff0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 803afba:	687b      	ldr	r3, [r7, #4]
 803afbc:	2201      	movs	r2, #1
 803afbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 803afc0:	687b      	ldr	r3, [r7, #4]
 803afc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 803afc6:	2b00      	cmp	r3, #0
 803afc8:	d005      	beq.n	803afd6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 803afca:	687b      	ldr	r3, [r7, #4]
 803afcc:	68db      	ldr	r3, [r3, #12]
 803afce:	f043 0202 	orr.w	r2, r3, #2
 803afd2:	687b      	ldr	r3, [r7, #4]
 803afd4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 803afd6:	687b      	ldr	r3, [r7, #4]
 803afd8:	330c      	adds	r3, #12
 803afda:	2202      	movs	r2, #2
 803afdc:	4619      	mov	r1, r3
 803afde:	6878      	ldr	r0, [r7, #4]
 803afe0:	f000 f900 	bl	803b1e4 <USBD_CtlSendData>
      break;
 803afe4:	e004      	b.n	803aff0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 803afe6:	6839      	ldr	r1, [r7, #0]
 803afe8:	6878      	ldr	r0, [r7, #4]
 803afea:	f000 f88a 	bl	803b102 <USBD_CtlError>
      break;
 803afee:	bf00      	nop
  }
}
 803aff0:	bf00      	nop
 803aff2:	3708      	adds	r7, #8
 803aff4:	46bd      	mov	sp, r7
 803aff6:	bd80      	pop	{r7, pc}

0803aff8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803aff8:	b580      	push	{r7, lr}
 803affa:	b082      	sub	sp, #8
 803affc:	af00      	add	r7, sp, #0
 803affe:	6078      	str	r0, [r7, #4]
 803b000:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803b002:	683b      	ldr	r3, [r7, #0]
 803b004:	885b      	ldrh	r3, [r3, #2]
 803b006:	2b01      	cmp	r3, #1
 803b008:	d107      	bne.n	803b01a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 803b00a:	687b      	ldr	r3, [r7, #4]
 803b00c:	2201      	movs	r2, #1
 803b00e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 803b012:	6878      	ldr	r0, [r7, #4]
 803b014:	f000 f940 	bl	803b298 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 803b018:	e013      	b.n	803b042 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 803b01a:	683b      	ldr	r3, [r7, #0]
 803b01c:	885b      	ldrh	r3, [r3, #2]
 803b01e:	2b02      	cmp	r3, #2
 803b020:	d10b      	bne.n	803b03a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 803b022:	683b      	ldr	r3, [r7, #0]
 803b024:	889b      	ldrh	r3, [r3, #4]
 803b026:	0a1b      	lsrs	r3, r3, #8
 803b028:	b29b      	uxth	r3, r3
 803b02a:	b2da      	uxtb	r2, r3
 803b02c:	687b      	ldr	r3, [r7, #4]
 803b02e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 803b032:	6878      	ldr	r0, [r7, #4]
 803b034:	f000 f930 	bl	803b298 <USBD_CtlSendStatus>
}
 803b038:	e003      	b.n	803b042 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 803b03a:	6839      	ldr	r1, [r7, #0]
 803b03c:	6878      	ldr	r0, [r7, #4]
 803b03e:	f000 f860 	bl	803b102 <USBD_CtlError>
}
 803b042:	bf00      	nop
 803b044:	3708      	adds	r7, #8
 803b046:	46bd      	mov	sp, r7
 803b048:	bd80      	pop	{r7, pc}

0803b04a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b04a:	b580      	push	{r7, lr}
 803b04c:	b082      	sub	sp, #8
 803b04e:	af00      	add	r7, sp, #0
 803b050:	6078      	str	r0, [r7, #4]
 803b052:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 803b054:	687b      	ldr	r3, [r7, #4]
 803b056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 803b05a:	b2db      	uxtb	r3, r3
 803b05c:	3b01      	subs	r3, #1
 803b05e:	2b02      	cmp	r3, #2
 803b060:	d80b      	bhi.n	803b07a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 803b062:	683b      	ldr	r3, [r7, #0]
 803b064:	885b      	ldrh	r3, [r3, #2]
 803b066:	2b01      	cmp	r3, #1
 803b068:	d10c      	bne.n	803b084 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 803b06a:	687b      	ldr	r3, [r7, #4]
 803b06c:	2200      	movs	r2, #0
 803b06e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 803b072:	6878      	ldr	r0, [r7, #4]
 803b074:	f000 f910 	bl	803b298 <USBD_CtlSendStatus>
      }
      break;
 803b078:	e004      	b.n	803b084 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 803b07a:	6839      	ldr	r1, [r7, #0]
 803b07c:	6878      	ldr	r0, [r7, #4]
 803b07e:	f000 f840 	bl	803b102 <USBD_CtlError>
      break;
 803b082:	e000      	b.n	803b086 <USBD_ClrFeature+0x3c>
      break;
 803b084:	bf00      	nop
  }
}
 803b086:	bf00      	nop
 803b088:	3708      	adds	r7, #8
 803b08a:	46bd      	mov	sp, r7
 803b08c:	bd80      	pop	{r7, pc}

0803b08e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 803b08e:	b580      	push	{r7, lr}
 803b090:	b084      	sub	sp, #16
 803b092:	af00      	add	r7, sp, #0
 803b094:	6078      	str	r0, [r7, #4]
 803b096:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 803b098:	683b      	ldr	r3, [r7, #0]
 803b09a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 803b09c:	68fb      	ldr	r3, [r7, #12]
 803b09e:	781a      	ldrb	r2, [r3, #0]
 803b0a0:	687b      	ldr	r3, [r7, #4]
 803b0a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 803b0a4:	68fb      	ldr	r3, [r7, #12]
 803b0a6:	3301      	adds	r3, #1
 803b0a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 803b0aa:	68fb      	ldr	r3, [r7, #12]
 803b0ac:	781a      	ldrb	r2, [r3, #0]
 803b0ae:	687b      	ldr	r3, [r7, #4]
 803b0b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 803b0b2:	68fb      	ldr	r3, [r7, #12]
 803b0b4:	3301      	adds	r3, #1
 803b0b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 803b0b8:	68f8      	ldr	r0, [r7, #12]
 803b0ba:	f7ff fa41 	bl	803a540 <SWAPBYTE>
 803b0be:	4603      	mov	r3, r0
 803b0c0:	461a      	mov	r2, r3
 803b0c2:	687b      	ldr	r3, [r7, #4]
 803b0c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 803b0c6:	68fb      	ldr	r3, [r7, #12]
 803b0c8:	3301      	adds	r3, #1
 803b0ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803b0cc:	68fb      	ldr	r3, [r7, #12]
 803b0ce:	3301      	adds	r3, #1
 803b0d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 803b0d2:	68f8      	ldr	r0, [r7, #12]
 803b0d4:	f7ff fa34 	bl	803a540 <SWAPBYTE>
 803b0d8:	4603      	mov	r3, r0
 803b0da:	461a      	mov	r2, r3
 803b0dc:	687b      	ldr	r3, [r7, #4]
 803b0de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 803b0e0:	68fb      	ldr	r3, [r7, #12]
 803b0e2:	3301      	adds	r3, #1
 803b0e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 803b0e6:	68fb      	ldr	r3, [r7, #12]
 803b0e8:	3301      	adds	r3, #1
 803b0ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 803b0ec:	68f8      	ldr	r0, [r7, #12]
 803b0ee:	f7ff fa27 	bl	803a540 <SWAPBYTE>
 803b0f2:	4603      	mov	r3, r0
 803b0f4:	461a      	mov	r2, r3
 803b0f6:	687b      	ldr	r3, [r7, #4]
 803b0f8:	80da      	strh	r2, [r3, #6]
}
 803b0fa:	bf00      	nop
 803b0fc:	3710      	adds	r7, #16
 803b0fe:	46bd      	mov	sp, r7
 803b100:	bd80      	pop	{r7, pc}

0803b102 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 803b102:	b580      	push	{r7, lr}
 803b104:	b082      	sub	sp, #8
 803b106:	af00      	add	r7, sp, #0
 803b108:	6078      	str	r0, [r7, #4]
 803b10a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 803b10c:	2180      	movs	r1, #128	; 0x80
 803b10e:	6878      	ldr	r0, [r7, #4]
 803b110:	f000 fce6 	bl	803bae0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 803b114:	2100      	movs	r1, #0
 803b116:	6878      	ldr	r0, [r7, #4]
 803b118:	f000 fce2 	bl	803bae0 <USBD_LL_StallEP>
}
 803b11c:	bf00      	nop
 803b11e:	3708      	adds	r7, #8
 803b120:	46bd      	mov	sp, r7
 803b122:	bd80      	pop	{r7, pc}

0803b124 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 803b124:	b580      	push	{r7, lr}
 803b126:	b086      	sub	sp, #24
 803b128:	af00      	add	r7, sp, #0
 803b12a:	60f8      	str	r0, [r7, #12]
 803b12c:	60b9      	str	r1, [r7, #8]
 803b12e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 803b130:	2300      	movs	r3, #0
 803b132:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 803b134:	68fb      	ldr	r3, [r7, #12]
 803b136:	2b00      	cmp	r3, #0
 803b138:	d036      	beq.n	803b1a8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 803b13a:	68fb      	ldr	r3, [r7, #12]
 803b13c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 803b13e:	6938      	ldr	r0, [r7, #16]
 803b140:	f000 f836 	bl	803b1b0 <USBD_GetLen>
 803b144:	4603      	mov	r3, r0
 803b146:	3301      	adds	r3, #1
 803b148:	b29b      	uxth	r3, r3
 803b14a:	005b      	lsls	r3, r3, #1
 803b14c:	b29a      	uxth	r2, r3
 803b14e:	687b      	ldr	r3, [r7, #4]
 803b150:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 803b152:	7dfb      	ldrb	r3, [r7, #23]
 803b154:	68ba      	ldr	r2, [r7, #8]
 803b156:	4413      	add	r3, r2
 803b158:	687a      	ldr	r2, [r7, #4]
 803b15a:	7812      	ldrb	r2, [r2, #0]
 803b15c:	701a      	strb	r2, [r3, #0]
  idx++;
 803b15e:	7dfb      	ldrb	r3, [r7, #23]
 803b160:	3301      	adds	r3, #1
 803b162:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 803b164:	7dfb      	ldrb	r3, [r7, #23]
 803b166:	68ba      	ldr	r2, [r7, #8]
 803b168:	4413      	add	r3, r2
 803b16a:	2203      	movs	r2, #3
 803b16c:	701a      	strb	r2, [r3, #0]
  idx++;
 803b16e:	7dfb      	ldrb	r3, [r7, #23]
 803b170:	3301      	adds	r3, #1
 803b172:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 803b174:	e013      	b.n	803b19e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 803b176:	7dfb      	ldrb	r3, [r7, #23]
 803b178:	68ba      	ldr	r2, [r7, #8]
 803b17a:	4413      	add	r3, r2
 803b17c:	693a      	ldr	r2, [r7, #16]
 803b17e:	7812      	ldrb	r2, [r2, #0]
 803b180:	701a      	strb	r2, [r3, #0]
    pdesc++;
 803b182:	693b      	ldr	r3, [r7, #16]
 803b184:	3301      	adds	r3, #1
 803b186:	613b      	str	r3, [r7, #16]
    idx++;
 803b188:	7dfb      	ldrb	r3, [r7, #23]
 803b18a:	3301      	adds	r3, #1
 803b18c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 803b18e:	7dfb      	ldrb	r3, [r7, #23]
 803b190:	68ba      	ldr	r2, [r7, #8]
 803b192:	4413      	add	r3, r2
 803b194:	2200      	movs	r2, #0
 803b196:	701a      	strb	r2, [r3, #0]
    idx++;
 803b198:	7dfb      	ldrb	r3, [r7, #23]
 803b19a:	3301      	adds	r3, #1
 803b19c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 803b19e:	693b      	ldr	r3, [r7, #16]
 803b1a0:	781b      	ldrb	r3, [r3, #0]
 803b1a2:	2b00      	cmp	r3, #0
 803b1a4:	d1e7      	bne.n	803b176 <USBD_GetString+0x52>
 803b1a6:	e000      	b.n	803b1aa <USBD_GetString+0x86>
    return;
 803b1a8:	bf00      	nop
  }
}
 803b1aa:	3718      	adds	r7, #24
 803b1ac:	46bd      	mov	sp, r7
 803b1ae:	bd80      	pop	{r7, pc}

0803b1b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 803b1b0:	b480      	push	{r7}
 803b1b2:	b085      	sub	sp, #20
 803b1b4:	af00      	add	r7, sp, #0
 803b1b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 803b1b8:	2300      	movs	r3, #0
 803b1ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 803b1bc:	687b      	ldr	r3, [r7, #4]
 803b1be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 803b1c0:	e005      	b.n	803b1ce <USBD_GetLen+0x1e>
  {
    len++;
 803b1c2:	7bfb      	ldrb	r3, [r7, #15]
 803b1c4:	3301      	adds	r3, #1
 803b1c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 803b1c8:	68bb      	ldr	r3, [r7, #8]
 803b1ca:	3301      	adds	r3, #1
 803b1cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 803b1ce:	68bb      	ldr	r3, [r7, #8]
 803b1d0:	781b      	ldrb	r3, [r3, #0]
 803b1d2:	2b00      	cmp	r3, #0
 803b1d4:	d1f5      	bne.n	803b1c2 <USBD_GetLen+0x12>
  }

  return len;
 803b1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 803b1d8:	4618      	mov	r0, r3
 803b1da:	3714      	adds	r7, #20
 803b1dc:	46bd      	mov	sp, r7
 803b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b1e2:	4770      	bx	lr

0803b1e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 803b1e4:	b580      	push	{r7, lr}
 803b1e6:	b084      	sub	sp, #16
 803b1e8:	af00      	add	r7, sp, #0
 803b1ea:	60f8      	str	r0, [r7, #12]
 803b1ec:	60b9      	str	r1, [r7, #8]
 803b1ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 803b1f0:	68fb      	ldr	r3, [r7, #12]
 803b1f2:	2202      	movs	r2, #2
 803b1f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 803b1f8:	68fb      	ldr	r3, [r7, #12]
 803b1fa:	687a      	ldr	r2, [r7, #4]
 803b1fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 803b1fe:	68fb      	ldr	r3, [r7, #12]
 803b200:	687a      	ldr	r2, [r7, #4]
 803b202:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b204:	687b      	ldr	r3, [r7, #4]
 803b206:	68ba      	ldr	r2, [r7, #8]
 803b208:	2100      	movs	r1, #0
 803b20a:	68f8      	ldr	r0, [r7, #12]
 803b20c:	f000 fcf1 	bl	803bbf2 <USBD_LL_Transmit>

  return USBD_OK;
 803b210:	2300      	movs	r3, #0
}
 803b212:	4618      	mov	r0, r3
 803b214:	3710      	adds	r7, #16
 803b216:	46bd      	mov	sp, r7
 803b218:	bd80      	pop	{r7, pc}

0803b21a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 803b21a:	b580      	push	{r7, lr}
 803b21c:	b084      	sub	sp, #16
 803b21e:	af00      	add	r7, sp, #0
 803b220:	60f8      	str	r0, [r7, #12]
 803b222:	60b9      	str	r1, [r7, #8]
 803b224:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 803b226:	687b      	ldr	r3, [r7, #4]
 803b228:	68ba      	ldr	r2, [r7, #8]
 803b22a:	2100      	movs	r1, #0
 803b22c:	68f8      	ldr	r0, [r7, #12]
 803b22e:	f000 fce0 	bl	803bbf2 <USBD_LL_Transmit>

  return USBD_OK;
 803b232:	2300      	movs	r3, #0
}
 803b234:	4618      	mov	r0, r3
 803b236:	3710      	adds	r7, #16
 803b238:	46bd      	mov	sp, r7
 803b23a:	bd80      	pop	{r7, pc}

0803b23c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 803b23c:	b580      	push	{r7, lr}
 803b23e:	b084      	sub	sp, #16
 803b240:	af00      	add	r7, sp, #0
 803b242:	60f8      	str	r0, [r7, #12]
 803b244:	60b9      	str	r1, [r7, #8]
 803b246:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 803b248:	68fb      	ldr	r3, [r7, #12]
 803b24a:	2203      	movs	r2, #3
 803b24c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 803b250:	68fb      	ldr	r3, [r7, #12]
 803b252:	687a      	ldr	r2, [r7, #4]
 803b254:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 803b258:	68fb      	ldr	r3, [r7, #12]
 803b25a:	687a      	ldr	r2, [r7, #4]
 803b25c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b260:	687b      	ldr	r3, [r7, #4]
 803b262:	68ba      	ldr	r2, [r7, #8]
 803b264:	2100      	movs	r1, #0
 803b266:	68f8      	ldr	r0, [r7, #12]
 803b268:	f000 fce4 	bl	803bc34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b26c:	2300      	movs	r3, #0
}
 803b26e:	4618      	mov	r0, r3
 803b270:	3710      	adds	r7, #16
 803b272:	46bd      	mov	sp, r7
 803b274:	bd80      	pop	{r7, pc}

0803b276 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 803b276:	b580      	push	{r7, lr}
 803b278:	b084      	sub	sp, #16
 803b27a:	af00      	add	r7, sp, #0
 803b27c:	60f8      	str	r0, [r7, #12]
 803b27e:	60b9      	str	r1, [r7, #8]
 803b280:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 803b282:	687b      	ldr	r3, [r7, #4]
 803b284:	68ba      	ldr	r2, [r7, #8]
 803b286:	2100      	movs	r1, #0
 803b288:	68f8      	ldr	r0, [r7, #12]
 803b28a:	f000 fcd3 	bl	803bc34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b28e:	2300      	movs	r3, #0
}
 803b290:	4618      	mov	r0, r3
 803b292:	3710      	adds	r7, #16
 803b294:	46bd      	mov	sp, r7
 803b296:	bd80      	pop	{r7, pc}

0803b298 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 803b298:	b580      	push	{r7, lr}
 803b29a:	b082      	sub	sp, #8
 803b29c:	af00      	add	r7, sp, #0
 803b29e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 803b2a0:	687b      	ldr	r3, [r7, #4]
 803b2a2:	2204      	movs	r2, #4
 803b2a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 803b2a8:	2300      	movs	r3, #0
 803b2aa:	2200      	movs	r2, #0
 803b2ac:	2100      	movs	r1, #0
 803b2ae:	6878      	ldr	r0, [r7, #4]
 803b2b0:	f000 fc9f 	bl	803bbf2 <USBD_LL_Transmit>

  return USBD_OK;
 803b2b4:	2300      	movs	r3, #0
}
 803b2b6:	4618      	mov	r0, r3
 803b2b8:	3708      	adds	r7, #8
 803b2ba:	46bd      	mov	sp, r7
 803b2bc:	bd80      	pop	{r7, pc}

0803b2be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 803b2be:	b580      	push	{r7, lr}
 803b2c0:	b082      	sub	sp, #8
 803b2c2:	af00      	add	r7, sp, #0
 803b2c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 803b2c6:	687b      	ldr	r3, [r7, #4]
 803b2c8:	2205      	movs	r2, #5
 803b2ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 803b2ce:	2300      	movs	r3, #0
 803b2d0:	2200      	movs	r2, #0
 803b2d2:	2100      	movs	r1, #0
 803b2d4:	6878      	ldr	r0, [r7, #4]
 803b2d6:	f000 fcad 	bl	803bc34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 803b2da:	2300      	movs	r3, #0
}
 803b2dc:	4618      	mov	r0, r3
 803b2de:	3708      	adds	r7, #8
 803b2e0:	46bd      	mov	sp, r7
 803b2e2:	bd80      	pop	{r7, pc}

0803b2e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 803b2e4:	b580      	push	{r7, lr}
 803b2e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803b2e8:	2200      	movs	r2, #0
 803b2ea:	4913      	ldr	r1, [pc, #76]	; (803b338 <MX_USB_DEVICE_Init+0x54>)
 803b2ec:	4813      	ldr	r0, [pc, #76]	; (803b33c <MX_USB_DEVICE_Init+0x58>)
 803b2ee:	f7fe fd07 	bl	8039d00 <USBD_Init>
 803b2f2:	4603      	mov	r3, r0
 803b2f4:	2b00      	cmp	r3, #0
 803b2f6:	d001      	beq.n	803b2fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 803b2f8:	f7ee fc10 	bl	8029b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 803b2fc:	4910      	ldr	r1, [pc, #64]	; (803b340 <MX_USB_DEVICE_Init+0x5c>)
 803b2fe:	480f      	ldr	r0, [pc, #60]	; (803b33c <MX_USB_DEVICE_Init+0x58>)
 803b300:	f7fe fd2e 	bl	8039d60 <USBD_RegisterClass>
 803b304:	4603      	mov	r3, r0
 803b306:	2b00      	cmp	r3, #0
 803b308:	d001      	beq.n	803b30e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 803b30a:	f7ee fc07 	bl	8029b1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 803b30e:	490d      	ldr	r1, [pc, #52]	; (803b344 <MX_USB_DEVICE_Init+0x60>)
 803b310:	480a      	ldr	r0, [pc, #40]	; (803b33c <MX_USB_DEVICE_Init+0x58>)
 803b312:	f7fe fc65 	bl	8039be0 <USBD_CDC_RegisterInterface>
 803b316:	4603      	mov	r3, r0
 803b318:	2b00      	cmp	r3, #0
 803b31a:	d001      	beq.n	803b320 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 803b31c:	f7ee fbfe 	bl	8029b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 803b320:	4806      	ldr	r0, [pc, #24]	; (803b33c <MX_USB_DEVICE_Init+0x58>)
 803b322:	f7fe fd53 	bl	8039dcc <USBD_Start>
 803b326:	4603      	mov	r3, r0
 803b328:	2b00      	cmp	r3, #0
 803b32a:	d001      	beq.n	803b330 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 803b32c:	f7ee fbf6 	bl	8029b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 803b330:	f7f5 fc82 	bl	8030c38 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 803b334:	bf00      	nop
 803b336:	bd80      	pop	{r7, pc}
 803b338:	240000b4 	.word	0x240000b4
 803b33c:	24024bcc 	.word	0x24024bcc
 803b340:	24000020 	.word	0x24000020
 803b344:	240000a0 	.word	0x240000a0

0803b348 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 803b348:	b580      	push	{r7, lr}
 803b34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 803b34c:	2200      	movs	r2, #0
 803b34e:	4905      	ldr	r1, [pc, #20]	; (803b364 <CDC_Init_FS+0x1c>)
 803b350:	4805      	ldr	r0, [pc, #20]	; (803b368 <CDC_Init_FS+0x20>)
 803b352:	f7fe fc5f 	bl	8039c14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 803b356:	4905      	ldr	r1, [pc, #20]	; (803b36c <CDC_Init_FS+0x24>)
 803b358:	4803      	ldr	r0, [pc, #12]	; (803b368 <CDC_Init_FS+0x20>)
 803b35a:	f7fe fc7d 	bl	8039c58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 803b35e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 803b360:	4618      	mov	r0, r3
 803b362:	bd80      	pop	{r7, pc}
 803b364:	240256a8 	.word	0x240256a8
 803b368:	24024bcc 	.word	0x24024bcc
 803b36c:	24024ea8 	.word	0x24024ea8

0803b370 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 803b370:	b480      	push	{r7}
 803b372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 803b374:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 803b376:	4618      	mov	r0, r3
 803b378:	46bd      	mov	sp, r7
 803b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b37e:	4770      	bx	lr

0803b380 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 803b380:	b480      	push	{r7}
 803b382:	b083      	sub	sp, #12
 803b384:	af00      	add	r7, sp, #0
 803b386:	4603      	mov	r3, r0
 803b388:	6039      	str	r1, [r7, #0]
 803b38a:	71fb      	strb	r3, [r7, #7]
 803b38c:	4613      	mov	r3, r2
 803b38e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 803b390:	79fb      	ldrb	r3, [r7, #7]
 803b392:	2b23      	cmp	r3, #35	; 0x23
 803b394:	d84a      	bhi.n	803b42c <CDC_Control_FS+0xac>
 803b396:	a201      	add	r2, pc, #4	; (adr r2, 803b39c <CDC_Control_FS+0x1c>)
 803b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b39c:	0803b42d 	.word	0x0803b42d
 803b3a0:	0803b42d 	.word	0x0803b42d
 803b3a4:	0803b42d 	.word	0x0803b42d
 803b3a8:	0803b42d 	.word	0x0803b42d
 803b3ac:	0803b42d 	.word	0x0803b42d
 803b3b0:	0803b42d 	.word	0x0803b42d
 803b3b4:	0803b42d 	.word	0x0803b42d
 803b3b8:	0803b42d 	.word	0x0803b42d
 803b3bc:	0803b42d 	.word	0x0803b42d
 803b3c0:	0803b42d 	.word	0x0803b42d
 803b3c4:	0803b42d 	.word	0x0803b42d
 803b3c8:	0803b42d 	.word	0x0803b42d
 803b3cc:	0803b42d 	.word	0x0803b42d
 803b3d0:	0803b42d 	.word	0x0803b42d
 803b3d4:	0803b42d 	.word	0x0803b42d
 803b3d8:	0803b42d 	.word	0x0803b42d
 803b3dc:	0803b42d 	.word	0x0803b42d
 803b3e0:	0803b42d 	.word	0x0803b42d
 803b3e4:	0803b42d 	.word	0x0803b42d
 803b3e8:	0803b42d 	.word	0x0803b42d
 803b3ec:	0803b42d 	.word	0x0803b42d
 803b3f0:	0803b42d 	.word	0x0803b42d
 803b3f4:	0803b42d 	.word	0x0803b42d
 803b3f8:	0803b42d 	.word	0x0803b42d
 803b3fc:	0803b42d 	.word	0x0803b42d
 803b400:	0803b42d 	.word	0x0803b42d
 803b404:	0803b42d 	.word	0x0803b42d
 803b408:	0803b42d 	.word	0x0803b42d
 803b40c:	0803b42d 	.word	0x0803b42d
 803b410:	0803b42d 	.word	0x0803b42d
 803b414:	0803b42d 	.word	0x0803b42d
 803b418:	0803b42d 	.word	0x0803b42d
 803b41c:	0803b42d 	.word	0x0803b42d
 803b420:	0803b42d 	.word	0x0803b42d
 803b424:	0803b42d 	.word	0x0803b42d
 803b428:	0803b42d 	.word	0x0803b42d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 803b42c:	bf00      	nop
  }

  return (USBD_OK);
 803b42e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 803b430:	4618      	mov	r0, r3
 803b432:	370c      	adds	r7, #12
 803b434:	46bd      	mov	sp, r7
 803b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b43a:	4770      	bx	lr

0803b43c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 803b43c:	b580      	push	{r7, lr}
 803b43e:	b082      	sub	sp, #8
 803b440:	af00      	add	r7, sp, #0
 803b442:	6078      	str	r0, [r7, #4]
 803b444:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 803b446:	6879      	ldr	r1, [r7, #4]
 803b448:	4805      	ldr	r0, [pc, #20]	; (803b460 <CDC_Receive_FS+0x24>)
 803b44a:	f7fe fc05 	bl	8039c58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 803b44e:	4804      	ldr	r0, [pc, #16]	; (803b460 <CDC_Receive_FS+0x24>)
 803b450:	f7fe fc20 	bl	8039c94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 803b454:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 803b456:	4618      	mov	r0, r3
 803b458:	3708      	adds	r7, #8
 803b45a:	46bd      	mov	sp, r7
 803b45c:	bd80      	pop	{r7, pc}
 803b45e:	bf00      	nop
 803b460:	24024bcc 	.word	0x24024bcc

0803b464 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 803b464:	b480      	push	{r7}
 803b466:	b087      	sub	sp, #28
 803b468:	af00      	add	r7, sp, #0
 803b46a:	60f8      	str	r0, [r7, #12]
 803b46c:	60b9      	str	r1, [r7, #8]
 803b46e:	4613      	mov	r3, r2
 803b470:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 803b472:	2300      	movs	r3, #0
 803b474:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 803b476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 803b47a:	4618      	mov	r0, r3
 803b47c:	371c      	adds	r7, #28
 803b47e:	46bd      	mov	sp, r7
 803b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b484:	4770      	bx	lr
	...

0803b488 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b488:	b480      	push	{r7}
 803b48a:	b083      	sub	sp, #12
 803b48c:	af00      	add	r7, sp, #0
 803b48e:	4603      	mov	r3, r0
 803b490:	6039      	str	r1, [r7, #0]
 803b492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 803b494:	683b      	ldr	r3, [r7, #0]
 803b496:	2212      	movs	r2, #18
 803b498:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 803b49a:	4b03      	ldr	r3, [pc, #12]	; (803b4a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 803b49c:	4618      	mov	r0, r3
 803b49e:	370c      	adds	r7, #12
 803b4a0:	46bd      	mov	sp, r7
 803b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b4a6:	4770      	bx	lr
 803b4a8:	240000d0 	.word	0x240000d0

0803b4ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b4ac:	b480      	push	{r7}
 803b4ae:	b083      	sub	sp, #12
 803b4b0:	af00      	add	r7, sp, #0
 803b4b2:	4603      	mov	r3, r0
 803b4b4:	6039      	str	r1, [r7, #0]
 803b4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 803b4b8:	683b      	ldr	r3, [r7, #0]
 803b4ba:	2204      	movs	r2, #4
 803b4bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 803b4be:	4b03      	ldr	r3, [pc, #12]	; (803b4cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 803b4c0:	4618      	mov	r0, r3
 803b4c2:	370c      	adds	r7, #12
 803b4c4:	46bd      	mov	sp, r7
 803b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b4ca:	4770      	bx	lr
 803b4cc:	240000e4 	.word	0x240000e4

0803b4d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b4d0:	b580      	push	{r7, lr}
 803b4d2:	b082      	sub	sp, #8
 803b4d4:	af00      	add	r7, sp, #0
 803b4d6:	4603      	mov	r3, r0
 803b4d8:	6039      	str	r1, [r7, #0]
 803b4da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b4dc:	79fb      	ldrb	r3, [r7, #7]
 803b4de:	2b00      	cmp	r3, #0
 803b4e0:	d105      	bne.n	803b4ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b4e2:	683a      	ldr	r2, [r7, #0]
 803b4e4:	4907      	ldr	r1, [pc, #28]	; (803b504 <USBD_FS_ProductStrDescriptor+0x34>)
 803b4e6:	4808      	ldr	r0, [pc, #32]	; (803b508 <USBD_FS_ProductStrDescriptor+0x38>)
 803b4e8:	f7ff fe1c 	bl	803b124 <USBD_GetString>
 803b4ec:	e004      	b.n	803b4f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 803b4ee:	683a      	ldr	r2, [r7, #0]
 803b4f0:	4904      	ldr	r1, [pc, #16]	; (803b504 <USBD_FS_ProductStrDescriptor+0x34>)
 803b4f2:	4805      	ldr	r0, [pc, #20]	; (803b508 <USBD_FS_ProductStrDescriptor+0x38>)
 803b4f4:	f7ff fe16 	bl	803b124 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b4f8:	4b02      	ldr	r3, [pc, #8]	; (803b504 <USBD_FS_ProductStrDescriptor+0x34>)
}
 803b4fa:	4618      	mov	r0, r3
 803b4fc:	3708      	adds	r7, #8
 803b4fe:	46bd      	mov	sp, r7
 803b500:	bd80      	pop	{r7, pc}
 803b502:	bf00      	nop
 803b504:	24025ea8 	.word	0x24025ea8
 803b508:	0803de58 	.word	0x0803de58

0803b50c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b50c:	b580      	push	{r7, lr}
 803b50e:	b082      	sub	sp, #8
 803b510:	af00      	add	r7, sp, #0
 803b512:	4603      	mov	r3, r0
 803b514:	6039      	str	r1, [r7, #0]
 803b516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803b518:	683a      	ldr	r2, [r7, #0]
 803b51a:	4904      	ldr	r1, [pc, #16]	; (803b52c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 803b51c:	4804      	ldr	r0, [pc, #16]	; (803b530 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 803b51e:	f7ff fe01 	bl	803b124 <USBD_GetString>
  return USBD_StrDesc;
 803b522:	4b02      	ldr	r3, [pc, #8]	; (803b52c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 803b524:	4618      	mov	r0, r3
 803b526:	3708      	adds	r7, #8
 803b528:	46bd      	mov	sp, r7
 803b52a:	bd80      	pop	{r7, pc}
 803b52c:	24025ea8 	.word	0x24025ea8
 803b530:	0803de70 	.word	0x0803de70

0803b534 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b534:	b580      	push	{r7, lr}
 803b536:	b082      	sub	sp, #8
 803b538:	af00      	add	r7, sp, #0
 803b53a:	4603      	mov	r3, r0
 803b53c:	6039      	str	r1, [r7, #0]
 803b53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 803b540:	683b      	ldr	r3, [r7, #0]
 803b542:	221a      	movs	r2, #26
 803b544:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 803b546:	f000 f843 	bl	803b5d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 803b54a:	4b02      	ldr	r3, [pc, #8]	; (803b554 <USBD_FS_SerialStrDescriptor+0x20>)
}
 803b54c:	4618      	mov	r0, r3
 803b54e:	3708      	adds	r7, #8
 803b550:	46bd      	mov	sp, r7
 803b552:	bd80      	pop	{r7, pc}
 803b554:	240000e8 	.word	0x240000e8

0803b558 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b558:	b580      	push	{r7, lr}
 803b55a:	b082      	sub	sp, #8
 803b55c:	af00      	add	r7, sp, #0
 803b55e:	4603      	mov	r3, r0
 803b560:	6039      	str	r1, [r7, #0]
 803b562:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 803b564:	79fb      	ldrb	r3, [r7, #7]
 803b566:	2b00      	cmp	r3, #0
 803b568:	d105      	bne.n	803b576 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b56a:	683a      	ldr	r2, [r7, #0]
 803b56c:	4907      	ldr	r1, [pc, #28]	; (803b58c <USBD_FS_ConfigStrDescriptor+0x34>)
 803b56e:	4808      	ldr	r0, [pc, #32]	; (803b590 <USBD_FS_ConfigStrDescriptor+0x38>)
 803b570:	f7ff fdd8 	bl	803b124 <USBD_GetString>
 803b574:	e004      	b.n	803b580 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803b576:	683a      	ldr	r2, [r7, #0]
 803b578:	4904      	ldr	r1, [pc, #16]	; (803b58c <USBD_FS_ConfigStrDescriptor+0x34>)
 803b57a:	4805      	ldr	r0, [pc, #20]	; (803b590 <USBD_FS_ConfigStrDescriptor+0x38>)
 803b57c:	f7ff fdd2 	bl	803b124 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b580:	4b02      	ldr	r3, [pc, #8]	; (803b58c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 803b582:	4618      	mov	r0, r3
 803b584:	3708      	adds	r7, #8
 803b586:	46bd      	mov	sp, r7
 803b588:	bd80      	pop	{r7, pc}
 803b58a:	bf00      	nop
 803b58c:	24025ea8 	.word	0x24025ea8
 803b590:	0803de84 	.word	0x0803de84

0803b594 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 803b594:	b580      	push	{r7, lr}
 803b596:	b082      	sub	sp, #8
 803b598:	af00      	add	r7, sp, #0
 803b59a:	4603      	mov	r3, r0
 803b59c:	6039      	str	r1, [r7, #0]
 803b59e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 803b5a0:	79fb      	ldrb	r3, [r7, #7]
 803b5a2:	2b00      	cmp	r3, #0
 803b5a4:	d105      	bne.n	803b5b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b5a6:	683a      	ldr	r2, [r7, #0]
 803b5a8:	4907      	ldr	r1, [pc, #28]	; (803b5c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b5aa:	4808      	ldr	r0, [pc, #32]	; (803b5cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b5ac:	f7ff fdba 	bl	803b124 <USBD_GetString>
 803b5b0:	e004      	b.n	803b5bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 803b5b2:	683a      	ldr	r2, [r7, #0]
 803b5b4:	4904      	ldr	r1, [pc, #16]	; (803b5c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 803b5b6:	4805      	ldr	r0, [pc, #20]	; (803b5cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 803b5b8:	f7ff fdb4 	bl	803b124 <USBD_GetString>
  }
  return USBD_StrDesc;
 803b5bc:	4b02      	ldr	r3, [pc, #8]	; (803b5c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 803b5be:	4618      	mov	r0, r3
 803b5c0:	3708      	adds	r7, #8
 803b5c2:	46bd      	mov	sp, r7
 803b5c4:	bd80      	pop	{r7, pc}
 803b5c6:	bf00      	nop
 803b5c8:	24025ea8 	.word	0x24025ea8
 803b5cc:	0803de90 	.word	0x0803de90

0803b5d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 803b5d0:	b580      	push	{r7, lr}
 803b5d2:	b084      	sub	sp, #16
 803b5d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803b5d6:	4b0f      	ldr	r3, [pc, #60]	; (803b614 <Get_SerialNum+0x44>)
 803b5d8:	681b      	ldr	r3, [r3, #0]
 803b5da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803b5dc:	4b0e      	ldr	r3, [pc, #56]	; (803b618 <Get_SerialNum+0x48>)
 803b5de:	681b      	ldr	r3, [r3, #0]
 803b5e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 803b5e2:	4b0e      	ldr	r3, [pc, #56]	; (803b61c <Get_SerialNum+0x4c>)
 803b5e4:	681b      	ldr	r3, [r3, #0]
 803b5e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 803b5e8:	68fa      	ldr	r2, [r7, #12]
 803b5ea:	687b      	ldr	r3, [r7, #4]
 803b5ec:	4413      	add	r3, r2
 803b5ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 803b5f0:	68fb      	ldr	r3, [r7, #12]
 803b5f2:	2b00      	cmp	r3, #0
 803b5f4:	d009      	beq.n	803b60a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 803b5f6:	2208      	movs	r2, #8
 803b5f8:	4909      	ldr	r1, [pc, #36]	; (803b620 <Get_SerialNum+0x50>)
 803b5fa:	68f8      	ldr	r0, [r7, #12]
 803b5fc:	f000 f814 	bl	803b628 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 803b600:	2204      	movs	r2, #4
 803b602:	4908      	ldr	r1, [pc, #32]	; (803b624 <Get_SerialNum+0x54>)
 803b604:	68b8      	ldr	r0, [r7, #8]
 803b606:	f000 f80f 	bl	803b628 <IntToUnicode>
  }
}
 803b60a:	bf00      	nop
 803b60c:	3710      	adds	r7, #16
 803b60e:	46bd      	mov	sp, r7
 803b610:	bd80      	pop	{r7, pc}
 803b612:	bf00      	nop
 803b614:	1ff1e800 	.word	0x1ff1e800
 803b618:	1ff1e804 	.word	0x1ff1e804
 803b61c:	1ff1e808 	.word	0x1ff1e808
 803b620:	240000ea 	.word	0x240000ea
 803b624:	240000fa 	.word	0x240000fa

0803b628 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 803b628:	b480      	push	{r7}
 803b62a:	b087      	sub	sp, #28
 803b62c:	af00      	add	r7, sp, #0
 803b62e:	60f8      	str	r0, [r7, #12]
 803b630:	60b9      	str	r1, [r7, #8]
 803b632:	4613      	mov	r3, r2
 803b634:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 803b636:	2300      	movs	r3, #0
 803b638:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 803b63a:	2300      	movs	r3, #0
 803b63c:	75fb      	strb	r3, [r7, #23]
 803b63e:	e027      	b.n	803b690 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 803b640:	68fb      	ldr	r3, [r7, #12]
 803b642:	0f1b      	lsrs	r3, r3, #28
 803b644:	2b09      	cmp	r3, #9
 803b646:	d80b      	bhi.n	803b660 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 803b648:	68fb      	ldr	r3, [r7, #12]
 803b64a:	0f1b      	lsrs	r3, r3, #28
 803b64c:	b2da      	uxtb	r2, r3
 803b64e:	7dfb      	ldrb	r3, [r7, #23]
 803b650:	005b      	lsls	r3, r3, #1
 803b652:	4619      	mov	r1, r3
 803b654:	68bb      	ldr	r3, [r7, #8]
 803b656:	440b      	add	r3, r1
 803b658:	3230      	adds	r2, #48	; 0x30
 803b65a:	b2d2      	uxtb	r2, r2
 803b65c:	701a      	strb	r2, [r3, #0]
 803b65e:	e00a      	b.n	803b676 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 803b660:	68fb      	ldr	r3, [r7, #12]
 803b662:	0f1b      	lsrs	r3, r3, #28
 803b664:	b2da      	uxtb	r2, r3
 803b666:	7dfb      	ldrb	r3, [r7, #23]
 803b668:	005b      	lsls	r3, r3, #1
 803b66a:	4619      	mov	r1, r3
 803b66c:	68bb      	ldr	r3, [r7, #8]
 803b66e:	440b      	add	r3, r1
 803b670:	3237      	adds	r2, #55	; 0x37
 803b672:	b2d2      	uxtb	r2, r2
 803b674:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 803b676:	68fb      	ldr	r3, [r7, #12]
 803b678:	011b      	lsls	r3, r3, #4
 803b67a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 803b67c:	7dfb      	ldrb	r3, [r7, #23]
 803b67e:	005b      	lsls	r3, r3, #1
 803b680:	3301      	adds	r3, #1
 803b682:	68ba      	ldr	r2, [r7, #8]
 803b684:	4413      	add	r3, r2
 803b686:	2200      	movs	r2, #0
 803b688:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 803b68a:	7dfb      	ldrb	r3, [r7, #23]
 803b68c:	3301      	adds	r3, #1
 803b68e:	75fb      	strb	r3, [r7, #23]
 803b690:	7dfa      	ldrb	r2, [r7, #23]
 803b692:	79fb      	ldrb	r3, [r7, #7]
 803b694:	429a      	cmp	r2, r3
 803b696:	d3d3      	bcc.n	803b640 <IntToUnicode+0x18>
  }
}
 803b698:	bf00      	nop
 803b69a:	bf00      	nop
 803b69c:	371c      	adds	r7, #28
 803b69e:	46bd      	mov	sp, r7
 803b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b6a4:	4770      	bx	lr
	...

0803b6a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803b6a8:	b580      	push	{r7, lr}
 803b6aa:	b0b8      	sub	sp, #224	; 0xe0
 803b6ac:	af00      	add	r7, sp, #0
 803b6ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803b6b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b6b4:	2200      	movs	r2, #0
 803b6b6:	601a      	str	r2, [r3, #0]
 803b6b8:	605a      	str	r2, [r3, #4]
 803b6ba:	609a      	str	r2, [r3, #8]
 803b6bc:	60da      	str	r2, [r3, #12]
 803b6be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 803b6c0:	f107 0310 	add.w	r3, r7, #16
 803b6c4:	22bc      	movs	r2, #188	; 0xbc
 803b6c6:	2100      	movs	r1, #0
 803b6c8:	4618      	mov	r0, r3
 803b6ca:	f000 fbe9 	bl	803bea0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803b6ce:	687b      	ldr	r3, [r7, #4]
 803b6d0:	681b      	ldr	r3, [r3, #0]
 803b6d2:	4a2f      	ldr	r2, [pc, #188]	; (803b790 <HAL_PCD_MspInit+0xe8>)
 803b6d4:	4293      	cmp	r3, r2
 803b6d6:	d156      	bne.n	803b786 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 803b6d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 803b6dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 803b6de:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 803b6e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 803b6e6:	f107 0310 	add.w	r3, r7, #16
 803b6ea:	4618      	mov	r0, r3
 803b6ec:	f7f6 fa6e 	bl	8031bcc <HAL_RCCEx_PeriphCLKConfig>
 803b6f0:	4603      	mov	r3, r0
 803b6f2:	2b00      	cmp	r3, #0
 803b6f4:	d001      	beq.n	803b6fa <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 803b6f6:	f7ee fa11 	bl	8029b1c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 803b6fa:	f7f5 fa9d 	bl	8030c38 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803b6fe:	4b25      	ldr	r3, [pc, #148]	; (803b794 <HAL_PCD_MspInit+0xec>)
 803b700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b704:	4a23      	ldr	r2, [pc, #140]	; (803b794 <HAL_PCD_MspInit+0xec>)
 803b706:	f043 0301 	orr.w	r3, r3, #1
 803b70a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 803b70e:	4b21      	ldr	r3, [pc, #132]	; (803b794 <HAL_PCD_MspInit+0xec>)
 803b710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 803b714:	f003 0301 	and.w	r3, r3, #1
 803b718:	60fb      	str	r3, [r7, #12]
 803b71a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 803b71c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 803b720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803b724:	2302      	movs	r3, #2
 803b726:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803b72a:	2300      	movs	r3, #0
 803b72c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803b730:	2300      	movs	r3, #0
 803b732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 803b736:	230a      	movs	r3, #10
 803b738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803b73c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 803b740:	4619      	mov	r1, r3
 803b742:	4815      	ldr	r0, [pc, #84]	; (803b798 <HAL_PCD_MspInit+0xf0>)
 803b744:	f7f2 fdf2 	bl	802e32c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 803b748:	4b12      	ldr	r3, [pc, #72]	; (803b794 <HAL_PCD_MspInit+0xec>)
 803b74a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b74e:	4a11      	ldr	r2, [pc, #68]	; (803b794 <HAL_PCD_MspInit+0xec>)
 803b750:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 803b754:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 803b758:	4b0e      	ldr	r3, [pc, #56]	; (803b794 <HAL_PCD_MspInit+0xec>)
 803b75a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 803b75e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 803b762:	60bb      	str	r3, [r7, #8]
 803b764:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 803b766:	2200      	movs	r2, #0
 803b768:	2100      	movs	r1, #0
 803b76a:	2062      	movs	r0, #98	; 0x62
 803b76c:	f7ef fd8b 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 803b770:	2062      	movs	r0, #98	; 0x62
 803b772:	f7ef fda2 	bl	802b2ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 803b776:	2200      	movs	r2, #0
 803b778:	2100      	movs	r1, #0
 803b77a:	2065      	movs	r0, #101	; 0x65
 803b77c:	f7ef fd83 	bl	802b286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 803b780:	2065      	movs	r0, #101	; 0x65
 803b782:	f7ef fd9a 	bl	802b2ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 803b786:	bf00      	nop
 803b788:	37e0      	adds	r7, #224	; 0xe0
 803b78a:	46bd      	mov	sp, r7
 803b78c:	bd80      	pop	{r7, pc}
 803b78e:	bf00      	nop
 803b790:	40080000 	.word	0x40080000
 803b794:	58024400 	.word	0x58024400
 803b798:	58020000 	.word	0x58020000

0803b79c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b79c:	b580      	push	{r7, lr}
 803b79e:	b082      	sub	sp, #8
 803b7a0:	af00      	add	r7, sp, #0
 803b7a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 803b7a4:	687b      	ldr	r3, [r7, #4]
 803b7a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 803b7aa:	687b      	ldr	r3, [r7, #4]
 803b7ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 803b7b0:	4619      	mov	r1, r3
 803b7b2:	4610      	mov	r0, r2
 803b7b4:	f7fe fb57 	bl	8039e66 <USBD_LL_SetupStage>
}
 803b7b8:	bf00      	nop
 803b7ba:	3708      	adds	r7, #8
 803b7bc:	46bd      	mov	sp, r7
 803b7be:	bd80      	pop	{r7, pc}

0803b7c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b7c0:	b580      	push	{r7, lr}
 803b7c2:	b082      	sub	sp, #8
 803b7c4:	af00      	add	r7, sp, #0
 803b7c6:	6078      	str	r0, [r7, #4]
 803b7c8:	460b      	mov	r3, r1
 803b7ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 803b7cc:	687b      	ldr	r3, [r7, #4]
 803b7ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b7d2:	78fa      	ldrb	r2, [r7, #3]
 803b7d4:	6879      	ldr	r1, [r7, #4]
 803b7d6:	4613      	mov	r3, r2
 803b7d8:	00db      	lsls	r3, r3, #3
 803b7da:	4413      	add	r3, r2
 803b7dc:	009b      	lsls	r3, r3, #2
 803b7de:	440b      	add	r3, r1
 803b7e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 803b7e4:	681a      	ldr	r2, [r3, #0]
 803b7e6:	78fb      	ldrb	r3, [r7, #3]
 803b7e8:	4619      	mov	r1, r3
 803b7ea:	f7fe fb91 	bl	8039f10 <USBD_LL_DataOutStage>
}
 803b7ee:	bf00      	nop
 803b7f0:	3708      	adds	r7, #8
 803b7f2:	46bd      	mov	sp, r7
 803b7f4:	bd80      	pop	{r7, pc}

0803b7f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b7f6:	b580      	push	{r7, lr}
 803b7f8:	b082      	sub	sp, #8
 803b7fa:	af00      	add	r7, sp, #0
 803b7fc:	6078      	str	r0, [r7, #4]
 803b7fe:	460b      	mov	r3, r1
 803b800:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 803b802:	687b      	ldr	r3, [r7, #4]
 803b804:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 803b808:	78fa      	ldrb	r2, [r7, #3]
 803b80a:	6879      	ldr	r1, [r7, #4]
 803b80c:	4613      	mov	r3, r2
 803b80e:	00db      	lsls	r3, r3, #3
 803b810:	4413      	add	r3, r2
 803b812:	009b      	lsls	r3, r3, #2
 803b814:	440b      	add	r3, r1
 803b816:	334c      	adds	r3, #76	; 0x4c
 803b818:	681a      	ldr	r2, [r3, #0]
 803b81a:	78fb      	ldrb	r3, [r7, #3]
 803b81c:	4619      	mov	r1, r3
 803b81e:	f7fe fc2a 	bl	803a076 <USBD_LL_DataInStage>
}
 803b822:	bf00      	nop
 803b824:	3708      	adds	r7, #8
 803b826:	46bd      	mov	sp, r7
 803b828:	bd80      	pop	{r7, pc}

0803b82a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b82a:	b580      	push	{r7, lr}
 803b82c:	b082      	sub	sp, #8
 803b82e:	af00      	add	r7, sp, #0
 803b830:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803b832:	687b      	ldr	r3, [r7, #4]
 803b834:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b838:	4618      	mov	r0, r3
 803b83a:	f7fe fd5e 	bl	803a2fa <USBD_LL_SOF>
}
 803b83e:	bf00      	nop
 803b840:	3708      	adds	r7, #8
 803b842:	46bd      	mov	sp, r7
 803b844:	bd80      	pop	{r7, pc}

0803b846 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b846:	b580      	push	{r7, lr}
 803b848:	b084      	sub	sp, #16
 803b84a:	af00      	add	r7, sp, #0
 803b84c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 803b84e:	2301      	movs	r3, #1
 803b850:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 803b852:	687b      	ldr	r3, [r7, #4]
 803b854:	68db      	ldr	r3, [r3, #12]
 803b856:	2b00      	cmp	r3, #0
 803b858:	d102      	bne.n	803b860 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 803b85a:	2300      	movs	r3, #0
 803b85c:	73fb      	strb	r3, [r7, #15]
 803b85e:	e008      	b.n	803b872 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 803b860:	687b      	ldr	r3, [r7, #4]
 803b862:	68db      	ldr	r3, [r3, #12]
 803b864:	2b02      	cmp	r3, #2
 803b866:	d102      	bne.n	803b86e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 803b868:	2301      	movs	r3, #1
 803b86a:	73fb      	strb	r3, [r7, #15]
 803b86c:	e001      	b.n	803b872 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 803b86e:	f7ee f955 	bl	8029b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 803b872:	687b      	ldr	r3, [r7, #4]
 803b874:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b878:	7bfa      	ldrb	r2, [r7, #15]
 803b87a:	4611      	mov	r1, r2
 803b87c:	4618      	mov	r0, r3
 803b87e:	f7fe fcfe 	bl	803a27e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803b882:	687b      	ldr	r3, [r7, #4]
 803b884:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b888:	4618      	mov	r0, r3
 803b88a:	f7fe fca6 	bl	803a1da <USBD_LL_Reset>
}
 803b88e:	bf00      	nop
 803b890:	3710      	adds	r7, #16
 803b892:	46bd      	mov	sp, r7
 803b894:	bd80      	pop	{r7, pc}
	...

0803b898 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b898:	b580      	push	{r7, lr}
 803b89a:	b082      	sub	sp, #8
 803b89c:	af00      	add	r7, sp, #0
 803b89e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803b8a0:	687b      	ldr	r3, [r7, #4]
 803b8a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b8a6:	4618      	mov	r0, r3
 803b8a8:	f7fe fcf9 	bl	803a29e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 803b8ac:	687b      	ldr	r3, [r7, #4]
 803b8ae:	681b      	ldr	r3, [r3, #0]
 803b8b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 803b8b4:	681b      	ldr	r3, [r3, #0]
 803b8b6:	687a      	ldr	r2, [r7, #4]
 803b8b8:	6812      	ldr	r2, [r2, #0]
 803b8ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 803b8be:	f043 0301 	orr.w	r3, r3, #1
 803b8c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 803b8c4:	687b      	ldr	r3, [r7, #4]
 803b8c6:	6a1b      	ldr	r3, [r3, #32]
 803b8c8:	2b00      	cmp	r3, #0
 803b8ca:	d005      	beq.n	803b8d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803b8cc:	4b04      	ldr	r3, [pc, #16]	; (803b8e0 <HAL_PCD_SuspendCallback+0x48>)
 803b8ce:	691b      	ldr	r3, [r3, #16]
 803b8d0:	4a03      	ldr	r2, [pc, #12]	; (803b8e0 <HAL_PCD_SuspendCallback+0x48>)
 803b8d2:	f043 0306 	orr.w	r3, r3, #6
 803b8d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 803b8d8:	bf00      	nop
 803b8da:	3708      	adds	r7, #8
 803b8dc:	46bd      	mov	sp, r7
 803b8de:	bd80      	pop	{r7, pc}
 803b8e0:	e000ed00 	.word	0xe000ed00

0803b8e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b8e4:	b580      	push	{r7, lr}
 803b8e6:	b082      	sub	sp, #8
 803b8e8:	af00      	add	r7, sp, #0
 803b8ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 803b8ec:	687b      	ldr	r3, [r7, #4]
 803b8ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b8f2:	4618      	mov	r0, r3
 803b8f4:	f7fe fce9 	bl	803a2ca <USBD_LL_Resume>
}
 803b8f8:	bf00      	nop
 803b8fa:	3708      	adds	r7, #8
 803b8fc:	46bd      	mov	sp, r7
 803b8fe:	bd80      	pop	{r7, pc}

0803b900 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b900:	b580      	push	{r7, lr}
 803b902:	b082      	sub	sp, #8
 803b904:	af00      	add	r7, sp, #0
 803b906:	6078      	str	r0, [r7, #4]
 803b908:	460b      	mov	r3, r1
 803b90a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b90c:	687b      	ldr	r3, [r7, #4]
 803b90e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b912:	78fa      	ldrb	r2, [r7, #3]
 803b914:	4611      	mov	r1, r2
 803b916:	4618      	mov	r0, r3
 803b918:	f7fe fd41 	bl	803a39e <USBD_LL_IsoOUTIncomplete>
}
 803b91c:	bf00      	nop
 803b91e:	3708      	adds	r7, #8
 803b920:	46bd      	mov	sp, r7
 803b922:	bd80      	pop	{r7, pc}

0803b924 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b924:	b580      	push	{r7, lr}
 803b926:	b082      	sub	sp, #8
 803b928:	af00      	add	r7, sp, #0
 803b92a:	6078      	str	r0, [r7, #4]
 803b92c:	460b      	mov	r3, r1
 803b92e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 803b930:	687b      	ldr	r3, [r7, #4]
 803b932:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b936:	78fa      	ldrb	r2, [r7, #3]
 803b938:	4611      	mov	r1, r2
 803b93a:	4618      	mov	r0, r3
 803b93c:	f7fe fcfd 	bl	803a33a <USBD_LL_IsoINIncomplete>
}
 803b940:	bf00      	nop
 803b942:	3708      	adds	r7, #8
 803b944:	46bd      	mov	sp, r7
 803b946:	bd80      	pop	{r7, pc}

0803b948 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b948:	b580      	push	{r7, lr}
 803b94a:	b082      	sub	sp, #8
 803b94c:	af00      	add	r7, sp, #0
 803b94e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 803b950:	687b      	ldr	r3, [r7, #4]
 803b952:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b956:	4618      	mov	r0, r3
 803b958:	f7fe fd53 	bl	803a402 <USBD_LL_DevConnected>
}
 803b95c:	bf00      	nop
 803b95e:	3708      	adds	r7, #8
 803b960:	46bd      	mov	sp, r7
 803b962:	bd80      	pop	{r7, pc}

0803b964 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 803b964:	b580      	push	{r7, lr}
 803b966:	b082      	sub	sp, #8
 803b968:	af00      	add	r7, sp, #0
 803b96a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 803b96c:	687b      	ldr	r3, [r7, #4]
 803b96e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 803b972:	4618      	mov	r0, r3
 803b974:	f7fe fd50 	bl	803a418 <USBD_LL_DevDisconnected>
}
 803b978:	bf00      	nop
 803b97a:	3708      	adds	r7, #8
 803b97c:	46bd      	mov	sp, r7
 803b97e:	bd80      	pop	{r7, pc}

0803b980 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 803b980:	b580      	push	{r7, lr}
 803b982:	b082      	sub	sp, #8
 803b984:	af00      	add	r7, sp, #0
 803b986:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 803b988:	687b      	ldr	r3, [r7, #4]
 803b98a:	781b      	ldrb	r3, [r3, #0]
 803b98c:	2b00      	cmp	r3, #0
 803b98e:	d13e      	bne.n	803ba0e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 803b990:	4a21      	ldr	r2, [pc, #132]	; (803ba18 <USBD_LL_Init+0x98>)
 803b992:	687b      	ldr	r3, [r7, #4]
 803b994:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 803b998:	687b      	ldr	r3, [r7, #4]
 803b99a:	4a1f      	ldr	r2, [pc, #124]	; (803ba18 <USBD_LL_Init+0x98>)
 803b99c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 803b9a0:	4b1d      	ldr	r3, [pc, #116]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9a2:	4a1e      	ldr	r2, [pc, #120]	; (803ba1c <USBD_LL_Init+0x9c>)
 803b9a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 803b9a6:	4b1c      	ldr	r3, [pc, #112]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9a8:	2209      	movs	r2, #9
 803b9aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 803b9ac:	4b1a      	ldr	r3, [pc, #104]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9ae:	2202      	movs	r2, #2
 803b9b0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 803b9b2:	4b19      	ldr	r3, [pc, #100]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9b4:	2200      	movs	r2, #0
 803b9b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 803b9b8:	4b17      	ldr	r3, [pc, #92]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9ba:	2202      	movs	r2, #2
 803b9bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 803b9be:	4b16      	ldr	r3, [pc, #88]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9c0:	2200      	movs	r2, #0
 803b9c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 803b9c4:	4b14      	ldr	r3, [pc, #80]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9c6:	2200      	movs	r2, #0
 803b9c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 803b9ca:	4b13      	ldr	r3, [pc, #76]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9cc:	2200      	movs	r2, #0
 803b9ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 803b9d0:	4b11      	ldr	r3, [pc, #68]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9d2:	2200      	movs	r2, #0
 803b9d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 803b9d6:	4b10      	ldr	r3, [pc, #64]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9d8:	2200      	movs	r2, #0
 803b9da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 803b9dc:	4b0e      	ldr	r3, [pc, #56]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9de:	2200      	movs	r2, #0
 803b9e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 803b9e2:	480d      	ldr	r0, [pc, #52]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9e4:	f7f3 fe18 	bl	802f618 <HAL_PCD_Init>
 803b9e8:	4603      	mov	r3, r0
 803b9ea:	2b00      	cmp	r3, #0
 803b9ec:	d001      	beq.n	803b9f2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 803b9ee:	f7ee f895 	bl	8029b1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 803b9f2:	2180      	movs	r1, #128	; 0x80
 803b9f4:	4808      	ldr	r0, [pc, #32]	; (803ba18 <USBD_LL_Init+0x98>)
 803b9f6:	f7f5 f8a4 	bl	8030b42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 803b9fa:	2240      	movs	r2, #64	; 0x40
 803b9fc:	2100      	movs	r1, #0
 803b9fe:	4806      	ldr	r0, [pc, #24]	; (803ba18 <USBD_LL_Init+0x98>)
 803ba00:	f7f5 f858 	bl	8030ab4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 803ba04:	2280      	movs	r2, #128	; 0x80
 803ba06:	2101      	movs	r1, #1
 803ba08:	4803      	ldr	r0, [pc, #12]	; (803ba18 <USBD_LL_Init+0x98>)
 803ba0a:	f7f5 f853 	bl	8030ab4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 803ba0e:	2300      	movs	r3, #0
}
 803ba10:	4618      	mov	r0, r3
 803ba12:	3708      	adds	r7, #8
 803ba14:	46bd      	mov	sp, r7
 803ba16:	bd80      	pop	{r7, pc}
 803ba18:	240260a8 	.word	0x240260a8
 803ba1c:	40080000 	.word	0x40080000

0803ba20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 803ba20:	b580      	push	{r7, lr}
 803ba22:	b084      	sub	sp, #16
 803ba24:	af00      	add	r7, sp, #0
 803ba26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba28:	2300      	movs	r3, #0
 803ba2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba2c:	2300      	movs	r3, #0
 803ba2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 803ba30:	687b      	ldr	r3, [r7, #4]
 803ba32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803ba36:	4618      	mov	r0, r3
 803ba38:	f7f3 ff12 	bl	802f860 <HAL_PCD_Start>
 803ba3c:	4603      	mov	r3, r0
 803ba3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba40:	7bfb      	ldrb	r3, [r7, #15]
 803ba42:	4618      	mov	r0, r3
 803ba44:	f000 f942 	bl	803bccc <USBD_Get_USB_Status>
 803ba48:	4603      	mov	r3, r0
 803ba4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ba4c:	7bbb      	ldrb	r3, [r7, #14]
}
 803ba4e:	4618      	mov	r0, r3
 803ba50:	3710      	adds	r7, #16
 803ba52:	46bd      	mov	sp, r7
 803ba54:	bd80      	pop	{r7, pc}

0803ba56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 803ba56:	b580      	push	{r7, lr}
 803ba58:	b084      	sub	sp, #16
 803ba5a:	af00      	add	r7, sp, #0
 803ba5c:	6078      	str	r0, [r7, #4]
 803ba5e:	4608      	mov	r0, r1
 803ba60:	4611      	mov	r1, r2
 803ba62:	461a      	mov	r2, r3
 803ba64:	4603      	mov	r3, r0
 803ba66:	70fb      	strb	r3, [r7, #3]
 803ba68:	460b      	mov	r3, r1
 803ba6a:	70bb      	strb	r3, [r7, #2]
 803ba6c:	4613      	mov	r3, r2
 803ba6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803ba70:	2300      	movs	r3, #0
 803ba72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803ba74:	2300      	movs	r3, #0
 803ba76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803ba78:	687b      	ldr	r3, [r7, #4]
 803ba7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803ba7e:	78bb      	ldrb	r3, [r7, #2]
 803ba80:	883a      	ldrh	r2, [r7, #0]
 803ba82:	78f9      	ldrb	r1, [r7, #3]
 803ba84:	f7f4 fc10 	bl	80302a8 <HAL_PCD_EP_Open>
 803ba88:	4603      	mov	r3, r0
 803ba8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803ba8c:	7bfb      	ldrb	r3, [r7, #15]
 803ba8e:	4618      	mov	r0, r3
 803ba90:	f000 f91c 	bl	803bccc <USBD_Get_USB_Status>
 803ba94:	4603      	mov	r3, r0
 803ba96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803ba98:	7bbb      	ldrb	r3, [r7, #14]
}
 803ba9a:	4618      	mov	r0, r3
 803ba9c:	3710      	adds	r7, #16
 803ba9e:	46bd      	mov	sp, r7
 803baa0:	bd80      	pop	{r7, pc}

0803baa2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803baa2:	b580      	push	{r7, lr}
 803baa4:	b084      	sub	sp, #16
 803baa6:	af00      	add	r7, sp, #0
 803baa8:	6078      	str	r0, [r7, #4]
 803baaa:	460b      	mov	r3, r1
 803baac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803baae:	2300      	movs	r3, #0
 803bab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bab2:	2300      	movs	r3, #0
 803bab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 803bab6:	687b      	ldr	r3, [r7, #4]
 803bab8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803babc:	78fa      	ldrb	r2, [r7, #3]
 803babe:	4611      	mov	r1, r2
 803bac0:	4618      	mov	r0, r3
 803bac2:	f7f4 fc59 	bl	8030378 <HAL_PCD_EP_Close>
 803bac6:	4603      	mov	r3, r0
 803bac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803baca:	7bfb      	ldrb	r3, [r7, #15]
 803bacc:	4618      	mov	r0, r3
 803bace:	f000 f8fd 	bl	803bccc <USBD_Get_USB_Status>
 803bad2:	4603      	mov	r3, r0
 803bad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bad6:	7bbb      	ldrb	r3, [r7, #14]
}
 803bad8:	4618      	mov	r0, r3
 803bada:	3710      	adds	r7, #16
 803badc:	46bd      	mov	sp, r7
 803bade:	bd80      	pop	{r7, pc}

0803bae0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bae0:	b580      	push	{r7, lr}
 803bae2:	b084      	sub	sp, #16
 803bae4:	af00      	add	r7, sp, #0
 803bae6:	6078      	str	r0, [r7, #4]
 803bae8:	460b      	mov	r3, r1
 803baea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803baec:	2300      	movs	r3, #0
 803baee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803baf0:	2300      	movs	r3, #0
 803baf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803baf4:	687b      	ldr	r3, [r7, #4]
 803baf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bafa:	78fa      	ldrb	r2, [r7, #3]
 803bafc:	4611      	mov	r1, r2
 803bafe:	4618      	mov	r0, r3
 803bb00:	f7f4 fd31 	bl	8030566 <HAL_PCD_EP_SetStall>
 803bb04:	4603      	mov	r3, r0
 803bb06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bb08:	7bfb      	ldrb	r3, [r7, #15]
 803bb0a:	4618      	mov	r0, r3
 803bb0c:	f000 f8de 	bl	803bccc <USBD_Get_USB_Status>
 803bb10:	4603      	mov	r3, r0
 803bb12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bb14:	7bbb      	ldrb	r3, [r7, #14]
}
 803bb16:	4618      	mov	r0, r3
 803bb18:	3710      	adds	r7, #16
 803bb1a:	46bd      	mov	sp, r7
 803bb1c:	bd80      	pop	{r7, pc}

0803bb1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bb1e:	b580      	push	{r7, lr}
 803bb20:	b084      	sub	sp, #16
 803bb22:	af00      	add	r7, sp, #0
 803bb24:	6078      	str	r0, [r7, #4]
 803bb26:	460b      	mov	r3, r1
 803bb28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bb2a:	2300      	movs	r3, #0
 803bb2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bb2e:	2300      	movs	r3, #0
 803bb30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 803bb32:	687b      	ldr	r3, [r7, #4]
 803bb34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bb38:	78fa      	ldrb	r2, [r7, #3]
 803bb3a:	4611      	mov	r1, r2
 803bb3c:	4618      	mov	r0, r3
 803bb3e:	f7f4 fd76 	bl	803062e <HAL_PCD_EP_ClrStall>
 803bb42:	4603      	mov	r3, r0
 803bb44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bb46:	7bfb      	ldrb	r3, [r7, #15]
 803bb48:	4618      	mov	r0, r3
 803bb4a:	f000 f8bf 	bl	803bccc <USBD_Get_USB_Status>
 803bb4e:	4603      	mov	r3, r0
 803bb50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bb52:	7bbb      	ldrb	r3, [r7, #14]
}
 803bb54:	4618      	mov	r0, r3
 803bb56:	3710      	adds	r7, #16
 803bb58:	46bd      	mov	sp, r7
 803bb5a:	bd80      	pop	{r7, pc}

0803bb5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bb5c:	b480      	push	{r7}
 803bb5e:	b085      	sub	sp, #20
 803bb60:	af00      	add	r7, sp, #0
 803bb62:	6078      	str	r0, [r7, #4]
 803bb64:	460b      	mov	r3, r1
 803bb66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 803bb68:	687b      	ldr	r3, [r7, #4]
 803bb6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bb6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 803bb70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 803bb74:	2b00      	cmp	r3, #0
 803bb76:	da0b      	bge.n	803bb90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 803bb78:	78fb      	ldrb	r3, [r7, #3]
 803bb7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803bb7e:	68f9      	ldr	r1, [r7, #12]
 803bb80:	4613      	mov	r3, r2
 803bb82:	00db      	lsls	r3, r3, #3
 803bb84:	4413      	add	r3, r2
 803bb86:	009b      	lsls	r3, r3, #2
 803bb88:	440b      	add	r3, r1
 803bb8a:	333e      	adds	r3, #62	; 0x3e
 803bb8c:	781b      	ldrb	r3, [r3, #0]
 803bb8e:	e00b      	b.n	803bba8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 803bb90:	78fb      	ldrb	r3, [r7, #3]
 803bb92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 803bb96:	68f9      	ldr	r1, [r7, #12]
 803bb98:	4613      	mov	r3, r2
 803bb9a:	00db      	lsls	r3, r3, #3
 803bb9c:	4413      	add	r3, r2
 803bb9e:	009b      	lsls	r3, r3, #2
 803bba0:	440b      	add	r3, r1
 803bba2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 803bba6:	781b      	ldrb	r3, [r3, #0]
  }
}
 803bba8:	4618      	mov	r0, r3
 803bbaa:	3714      	adds	r7, #20
 803bbac:	46bd      	mov	sp, r7
 803bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bbb2:	4770      	bx	lr

0803bbb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 803bbb4:	b580      	push	{r7, lr}
 803bbb6:	b084      	sub	sp, #16
 803bbb8:	af00      	add	r7, sp, #0
 803bbba:	6078      	str	r0, [r7, #4]
 803bbbc:	460b      	mov	r3, r1
 803bbbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bbc0:	2300      	movs	r3, #0
 803bbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bbc4:	2300      	movs	r3, #0
 803bbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 803bbc8:	687b      	ldr	r3, [r7, #4]
 803bbca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bbce:	78fa      	ldrb	r2, [r7, #3]
 803bbd0:	4611      	mov	r1, r2
 803bbd2:	4618      	mov	r0, r3
 803bbd4:	f7f4 fb43 	bl	803025e <HAL_PCD_SetAddress>
 803bbd8:	4603      	mov	r3, r0
 803bbda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bbdc:	7bfb      	ldrb	r3, [r7, #15]
 803bbde:	4618      	mov	r0, r3
 803bbe0:	f000 f874 	bl	803bccc <USBD_Get_USB_Status>
 803bbe4:	4603      	mov	r3, r0
 803bbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 803bbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 803bbea:	4618      	mov	r0, r3
 803bbec:	3710      	adds	r7, #16
 803bbee:	46bd      	mov	sp, r7
 803bbf0:	bd80      	pop	{r7, pc}

0803bbf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803bbf2:	b580      	push	{r7, lr}
 803bbf4:	b086      	sub	sp, #24
 803bbf6:	af00      	add	r7, sp, #0
 803bbf8:	60f8      	str	r0, [r7, #12]
 803bbfa:	607a      	str	r2, [r7, #4]
 803bbfc:	603b      	str	r3, [r7, #0]
 803bbfe:	460b      	mov	r3, r1
 803bc00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bc02:	2300      	movs	r3, #0
 803bc04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bc06:	2300      	movs	r3, #0
 803bc08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 803bc0a:	68fb      	ldr	r3, [r7, #12]
 803bc0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803bc10:	7af9      	ldrb	r1, [r7, #11]
 803bc12:	683b      	ldr	r3, [r7, #0]
 803bc14:	687a      	ldr	r2, [r7, #4]
 803bc16:	f7f4 fc5c 	bl	80304d2 <HAL_PCD_EP_Transmit>
 803bc1a:	4603      	mov	r3, r0
 803bc1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bc1e:	7dfb      	ldrb	r3, [r7, #23]
 803bc20:	4618      	mov	r0, r3
 803bc22:	f000 f853 	bl	803bccc <USBD_Get_USB_Status>
 803bc26:	4603      	mov	r3, r0
 803bc28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803bc2a:	7dbb      	ldrb	r3, [r7, #22]
}
 803bc2c:	4618      	mov	r0, r3
 803bc2e:	3718      	adds	r7, #24
 803bc30:	46bd      	mov	sp, r7
 803bc32:	bd80      	pop	{r7, pc}

0803bc34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 803bc34:	b580      	push	{r7, lr}
 803bc36:	b086      	sub	sp, #24
 803bc38:	af00      	add	r7, sp, #0
 803bc3a:	60f8      	str	r0, [r7, #12]
 803bc3c:	607a      	str	r2, [r7, #4]
 803bc3e:	603b      	str	r3, [r7, #0]
 803bc40:	460b      	mov	r3, r1
 803bc42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 803bc44:	2300      	movs	r3, #0
 803bc46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bc48:	2300      	movs	r3, #0
 803bc4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 803bc4c:	68fb      	ldr	r3, [r7, #12]
 803bc4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 803bc52:	7af9      	ldrb	r1, [r7, #11]
 803bc54:	683b      	ldr	r3, [r7, #0]
 803bc56:	687a      	ldr	r2, [r7, #4]
 803bc58:	f7f4 fbd8 	bl	803040c <HAL_PCD_EP_Receive>
 803bc5c:	4603      	mov	r3, r0
 803bc5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 803bc60:	7dfb      	ldrb	r3, [r7, #23]
 803bc62:	4618      	mov	r0, r3
 803bc64:	f000 f832 	bl	803bccc <USBD_Get_USB_Status>
 803bc68:	4603      	mov	r3, r0
 803bc6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 803bc6c:	7dbb      	ldrb	r3, [r7, #22]
}
 803bc6e:	4618      	mov	r0, r3
 803bc70:	3718      	adds	r7, #24
 803bc72:	46bd      	mov	sp, r7
 803bc74:	bd80      	pop	{r7, pc}

0803bc76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 803bc76:	b580      	push	{r7, lr}
 803bc78:	b082      	sub	sp, #8
 803bc7a:	af00      	add	r7, sp, #0
 803bc7c:	6078      	str	r0, [r7, #4]
 803bc7e:	460b      	mov	r3, r1
 803bc80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803bc82:	687b      	ldr	r3, [r7, #4]
 803bc84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 803bc88:	78fa      	ldrb	r2, [r7, #3]
 803bc8a:	4611      	mov	r1, r2
 803bc8c:	4618      	mov	r0, r3
 803bc8e:	f7f4 fc08 	bl	80304a2 <HAL_PCD_EP_GetRxCount>
 803bc92:	4603      	mov	r3, r0
}
 803bc94:	4618      	mov	r0, r3
 803bc96:	3708      	adds	r7, #8
 803bc98:	46bd      	mov	sp, r7
 803bc9a:	bd80      	pop	{r7, pc}

0803bc9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 803bc9c:	b480      	push	{r7}
 803bc9e:	b083      	sub	sp, #12
 803bca0:	af00      	add	r7, sp, #0
 803bca2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 803bca4:	4b03      	ldr	r3, [pc, #12]	; (803bcb4 <USBD_static_malloc+0x18>)
}
 803bca6:	4618      	mov	r0, r3
 803bca8:	370c      	adds	r7, #12
 803bcaa:	46bd      	mov	sp, r7
 803bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bcb0:	4770      	bx	lr
 803bcb2:	bf00      	nop
 803bcb4:	240265b4 	.word	0x240265b4

0803bcb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 803bcb8:	b480      	push	{r7}
 803bcba:	b083      	sub	sp, #12
 803bcbc:	af00      	add	r7, sp, #0
 803bcbe:	6078      	str	r0, [r7, #4]

}
 803bcc0:	bf00      	nop
 803bcc2:	370c      	adds	r7, #12
 803bcc4:	46bd      	mov	sp, r7
 803bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bcca:	4770      	bx	lr

0803bccc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 803bccc:	b480      	push	{r7}
 803bcce:	b085      	sub	sp, #20
 803bcd0:	af00      	add	r7, sp, #0
 803bcd2:	4603      	mov	r3, r0
 803bcd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 803bcd6:	2300      	movs	r3, #0
 803bcd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 803bcda:	79fb      	ldrb	r3, [r7, #7]
 803bcdc:	2b03      	cmp	r3, #3
 803bcde:	d817      	bhi.n	803bd10 <USBD_Get_USB_Status+0x44>
 803bce0:	a201      	add	r2, pc, #4	; (adr r2, 803bce8 <USBD_Get_USB_Status+0x1c>)
 803bce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803bce6:	bf00      	nop
 803bce8:	0803bcf9 	.word	0x0803bcf9
 803bcec:	0803bcff 	.word	0x0803bcff
 803bcf0:	0803bd05 	.word	0x0803bd05
 803bcf4:	0803bd0b 	.word	0x0803bd0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 803bcf8:	2300      	movs	r3, #0
 803bcfa:	73fb      	strb	r3, [r7, #15]
    break;
 803bcfc:	e00b      	b.n	803bd16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 803bcfe:	2303      	movs	r3, #3
 803bd00:	73fb      	strb	r3, [r7, #15]
    break;
 803bd02:	e008      	b.n	803bd16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 803bd04:	2301      	movs	r3, #1
 803bd06:	73fb      	strb	r3, [r7, #15]
    break;
 803bd08:	e005      	b.n	803bd16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 803bd0a:	2303      	movs	r3, #3
 803bd0c:	73fb      	strb	r3, [r7, #15]
    break;
 803bd0e:	e002      	b.n	803bd16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 803bd10:	2303      	movs	r3, #3
 803bd12:	73fb      	strb	r3, [r7, #15]
    break;
 803bd14:	bf00      	nop
  }
  return usb_status;
 803bd16:	7bfb      	ldrb	r3, [r7, #15]
}
 803bd18:	4618      	mov	r0, r3
 803bd1a:	3714      	adds	r7, #20
 803bd1c:	46bd      	mov	sp, r7
 803bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803bd22:	4770      	bx	lr

0803bd24 <_ZdlPvj>:
 803bd24:	f000 b817 	b.w	803bd56 <_ZdlPv>

0803bd28 <_Znwj>:
 803bd28:	2801      	cmp	r0, #1
 803bd2a:	bf38      	it	cc
 803bd2c:	2001      	movcc	r0, #1
 803bd2e:	b510      	push	{r4, lr}
 803bd30:	4604      	mov	r4, r0
 803bd32:	4620      	mov	r0, r4
 803bd34:	f000 f87c 	bl	803be30 <malloc>
 803bd38:	b930      	cbnz	r0, 803bd48 <_Znwj+0x20>
 803bd3a:	f000 f80f 	bl	803bd5c <_ZSt15get_new_handlerv>
 803bd3e:	b908      	cbnz	r0, 803bd44 <_Znwj+0x1c>
 803bd40:	f000 f814 	bl	803bd6c <abort>
 803bd44:	4780      	blx	r0
 803bd46:	e7f4      	b.n	803bd32 <_Znwj+0xa>
 803bd48:	bd10      	pop	{r4, pc}

0803bd4a <_ZSt17__throw_bad_allocv>:
 803bd4a:	b508      	push	{r3, lr}
 803bd4c:	f000 f80e 	bl	803bd6c <abort>

0803bd50 <_ZSt20__throw_length_errorPKc>:
 803bd50:	b508      	push	{r3, lr}
 803bd52:	f000 f80b 	bl	803bd6c <abort>

0803bd56 <_ZdlPv>:
 803bd56:	f000 b873 	b.w	803be40 <free>
	...

0803bd5c <_ZSt15get_new_handlerv>:
 803bd5c:	4b02      	ldr	r3, [pc, #8]	; (803bd68 <_ZSt15get_new_handlerv+0xc>)
 803bd5e:	6818      	ldr	r0, [r3, #0]
 803bd60:	f3bf 8f5b 	dmb	ish
 803bd64:	4770      	bx	lr
 803bd66:	bf00      	nop
 803bd68:	240267d4 	.word	0x240267d4

0803bd6c <abort>:
 803bd6c:	b508      	push	{r3, lr}
 803bd6e:	2006      	movs	r0, #6
 803bd70:	f000 fca4 	bl	803c6bc <raise>
 803bd74:	2001      	movs	r0, #1
 803bd76:	f7ee f90f 	bl	8029f98 <_exit>
	...

0803bd7c <__assert_func>:
 803bd7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803bd7e:	4614      	mov	r4, r2
 803bd80:	461a      	mov	r2, r3
 803bd82:	4b09      	ldr	r3, [pc, #36]	; (803bda8 <__assert_func+0x2c>)
 803bd84:	681b      	ldr	r3, [r3, #0]
 803bd86:	4605      	mov	r5, r0
 803bd88:	68d8      	ldr	r0, [r3, #12]
 803bd8a:	b14c      	cbz	r4, 803bda0 <__assert_func+0x24>
 803bd8c:	4b07      	ldr	r3, [pc, #28]	; (803bdac <__assert_func+0x30>)
 803bd8e:	9100      	str	r1, [sp, #0]
 803bd90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803bd94:	4906      	ldr	r1, [pc, #24]	; (803bdb0 <__assert_func+0x34>)
 803bd96:	462b      	mov	r3, r5
 803bd98:	f000 f814 	bl	803bdc4 <fiprintf>
 803bd9c:	f7ff ffe6 	bl	803bd6c <abort>
 803bda0:	4b04      	ldr	r3, [pc, #16]	; (803bdb4 <__assert_func+0x38>)
 803bda2:	461c      	mov	r4, r3
 803bda4:	e7f3      	b.n	803bd8e <__assert_func+0x12>
 803bda6:	bf00      	nop
 803bda8:	24000104 	.word	0x24000104
 803bdac:	08058558 	.word	0x08058558
 803bdb0:	08058565 	.word	0x08058565
 803bdb4:	08058593 	.word	0x08058593

0803bdb8 <__errno>:
 803bdb8:	4b01      	ldr	r3, [pc, #4]	; (803bdc0 <__errno+0x8>)
 803bdba:	6818      	ldr	r0, [r3, #0]
 803bdbc:	4770      	bx	lr
 803bdbe:	bf00      	nop
 803bdc0:	24000104 	.word	0x24000104

0803bdc4 <fiprintf>:
 803bdc4:	b40e      	push	{r1, r2, r3}
 803bdc6:	b503      	push	{r0, r1, lr}
 803bdc8:	4601      	mov	r1, r0
 803bdca:	ab03      	add	r3, sp, #12
 803bdcc:	4805      	ldr	r0, [pc, #20]	; (803bde4 <fiprintf+0x20>)
 803bdce:	f853 2b04 	ldr.w	r2, [r3], #4
 803bdd2:	6800      	ldr	r0, [r0, #0]
 803bdd4:	9301      	str	r3, [sp, #4]
 803bdd6:	f000 f975 	bl	803c0c4 <_vfiprintf_r>
 803bdda:	b002      	add	sp, #8
 803bddc:	f85d eb04 	ldr.w	lr, [sp], #4
 803bde0:	b003      	add	sp, #12
 803bde2:	4770      	bx	lr
 803bde4:	24000104 	.word	0x24000104

0803bde8 <__libc_init_array>:
 803bde8:	b570      	push	{r4, r5, r6, lr}
 803bdea:	4d0d      	ldr	r5, [pc, #52]	; (803be20 <__libc_init_array+0x38>)
 803bdec:	4c0d      	ldr	r4, [pc, #52]	; (803be24 <__libc_init_array+0x3c>)
 803bdee:	1b64      	subs	r4, r4, r5
 803bdf0:	10a4      	asrs	r4, r4, #2
 803bdf2:	2600      	movs	r6, #0
 803bdf4:	42a6      	cmp	r6, r4
 803bdf6:	d109      	bne.n	803be0c <__libc_init_array+0x24>
 803bdf8:	4d0b      	ldr	r5, [pc, #44]	; (803be28 <__libc_init_array+0x40>)
 803bdfa:	4c0c      	ldr	r4, [pc, #48]	; (803be2c <__libc_init_array+0x44>)
 803bdfc:	f001 f812 	bl	803ce24 <_init>
 803be00:	1b64      	subs	r4, r4, r5
 803be02:	10a4      	asrs	r4, r4, #2
 803be04:	2600      	movs	r6, #0
 803be06:	42a6      	cmp	r6, r4
 803be08:	d105      	bne.n	803be16 <__libc_init_array+0x2e>
 803be0a:	bd70      	pop	{r4, r5, r6, pc}
 803be0c:	f855 3b04 	ldr.w	r3, [r5], #4
 803be10:	4798      	blx	r3
 803be12:	3601      	adds	r6, #1
 803be14:	e7ee      	b.n	803bdf4 <__libc_init_array+0xc>
 803be16:	f855 3b04 	ldr.w	r3, [r5], #4
 803be1a:	4798      	blx	r3
 803be1c:	3601      	adds	r6, #1
 803be1e:	e7f2      	b.n	803be06 <__libc_init_array+0x1e>
 803be20:	08058634 	.word	0x08058634
 803be24:	08058634 	.word	0x08058634
 803be28:	08058634 	.word	0x08058634
 803be2c:	0805863c 	.word	0x0805863c

0803be30 <malloc>:
 803be30:	4b02      	ldr	r3, [pc, #8]	; (803be3c <malloc+0xc>)
 803be32:	4601      	mov	r1, r0
 803be34:	6818      	ldr	r0, [r3, #0]
 803be36:	f000 b8a7 	b.w	803bf88 <_malloc_r>
 803be3a:	bf00      	nop
 803be3c:	24000104 	.word	0x24000104

0803be40 <free>:
 803be40:	4b02      	ldr	r3, [pc, #8]	; (803be4c <free+0xc>)
 803be42:	4601      	mov	r1, r0
 803be44:	6818      	ldr	r0, [r3, #0]
 803be46:	f000 b833 	b.w	803beb0 <_free_r>
 803be4a:	bf00      	nop
 803be4c:	24000104 	.word	0x24000104

0803be50 <memcpy>:
 803be50:	440a      	add	r2, r1
 803be52:	4291      	cmp	r1, r2
 803be54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 803be58:	d100      	bne.n	803be5c <memcpy+0xc>
 803be5a:	4770      	bx	lr
 803be5c:	b510      	push	{r4, lr}
 803be5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 803be62:	f803 4f01 	strb.w	r4, [r3, #1]!
 803be66:	4291      	cmp	r1, r2
 803be68:	d1f9      	bne.n	803be5e <memcpy+0xe>
 803be6a:	bd10      	pop	{r4, pc}

0803be6c <memmove>:
 803be6c:	4288      	cmp	r0, r1
 803be6e:	b510      	push	{r4, lr}
 803be70:	eb01 0402 	add.w	r4, r1, r2
 803be74:	d902      	bls.n	803be7c <memmove+0x10>
 803be76:	4284      	cmp	r4, r0
 803be78:	4623      	mov	r3, r4
 803be7a:	d807      	bhi.n	803be8c <memmove+0x20>
 803be7c:	1e43      	subs	r3, r0, #1
 803be7e:	42a1      	cmp	r1, r4
 803be80:	d008      	beq.n	803be94 <memmove+0x28>
 803be82:	f811 2b01 	ldrb.w	r2, [r1], #1
 803be86:	f803 2f01 	strb.w	r2, [r3, #1]!
 803be8a:	e7f8      	b.n	803be7e <memmove+0x12>
 803be8c:	4402      	add	r2, r0
 803be8e:	4601      	mov	r1, r0
 803be90:	428a      	cmp	r2, r1
 803be92:	d100      	bne.n	803be96 <memmove+0x2a>
 803be94:	bd10      	pop	{r4, pc}
 803be96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803be9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803be9e:	e7f7      	b.n	803be90 <memmove+0x24>

0803bea0 <memset>:
 803bea0:	4402      	add	r2, r0
 803bea2:	4603      	mov	r3, r0
 803bea4:	4293      	cmp	r3, r2
 803bea6:	d100      	bne.n	803beaa <memset+0xa>
 803bea8:	4770      	bx	lr
 803beaa:	f803 1b01 	strb.w	r1, [r3], #1
 803beae:	e7f9      	b.n	803bea4 <memset+0x4>

0803beb0 <_free_r>:
 803beb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803beb2:	2900      	cmp	r1, #0
 803beb4:	d044      	beq.n	803bf40 <_free_r+0x90>
 803beb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803beba:	9001      	str	r0, [sp, #4]
 803bebc:	2b00      	cmp	r3, #0
 803bebe:	f1a1 0404 	sub.w	r4, r1, #4
 803bec2:	bfb8      	it	lt
 803bec4:	18e4      	addlt	r4, r4, r3
 803bec6:	f000 fef5 	bl	803ccb4 <__malloc_lock>
 803beca:	4a1e      	ldr	r2, [pc, #120]	; (803bf44 <_free_r+0x94>)
 803becc:	9801      	ldr	r0, [sp, #4]
 803bece:	6813      	ldr	r3, [r2, #0]
 803bed0:	b933      	cbnz	r3, 803bee0 <_free_r+0x30>
 803bed2:	6063      	str	r3, [r4, #4]
 803bed4:	6014      	str	r4, [r2, #0]
 803bed6:	b003      	add	sp, #12
 803bed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803bedc:	f000 bef0 	b.w	803ccc0 <__malloc_unlock>
 803bee0:	42a3      	cmp	r3, r4
 803bee2:	d908      	bls.n	803bef6 <_free_r+0x46>
 803bee4:	6825      	ldr	r5, [r4, #0]
 803bee6:	1961      	adds	r1, r4, r5
 803bee8:	428b      	cmp	r3, r1
 803beea:	bf01      	itttt	eq
 803beec:	6819      	ldreq	r1, [r3, #0]
 803beee:	685b      	ldreq	r3, [r3, #4]
 803bef0:	1949      	addeq	r1, r1, r5
 803bef2:	6021      	streq	r1, [r4, #0]
 803bef4:	e7ed      	b.n	803bed2 <_free_r+0x22>
 803bef6:	461a      	mov	r2, r3
 803bef8:	685b      	ldr	r3, [r3, #4]
 803befa:	b10b      	cbz	r3, 803bf00 <_free_r+0x50>
 803befc:	42a3      	cmp	r3, r4
 803befe:	d9fa      	bls.n	803bef6 <_free_r+0x46>
 803bf00:	6811      	ldr	r1, [r2, #0]
 803bf02:	1855      	adds	r5, r2, r1
 803bf04:	42a5      	cmp	r5, r4
 803bf06:	d10b      	bne.n	803bf20 <_free_r+0x70>
 803bf08:	6824      	ldr	r4, [r4, #0]
 803bf0a:	4421      	add	r1, r4
 803bf0c:	1854      	adds	r4, r2, r1
 803bf0e:	42a3      	cmp	r3, r4
 803bf10:	6011      	str	r1, [r2, #0]
 803bf12:	d1e0      	bne.n	803bed6 <_free_r+0x26>
 803bf14:	681c      	ldr	r4, [r3, #0]
 803bf16:	685b      	ldr	r3, [r3, #4]
 803bf18:	6053      	str	r3, [r2, #4]
 803bf1a:	4421      	add	r1, r4
 803bf1c:	6011      	str	r1, [r2, #0]
 803bf1e:	e7da      	b.n	803bed6 <_free_r+0x26>
 803bf20:	d902      	bls.n	803bf28 <_free_r+0x78>
 803bf22:	230c      	movs	r3, #12
 803bf24:	6003      	str	r3, [r0, #0]
 803bf26:	e7d6      	b.n	803bed6 <_free_r+0x26>
 803bf28:	6825      	ldr	r5, [r4, #0]
 803bf2a:	1961      	adds	r1, r4, r5
 803bf2c:	428b      	cmp	r3, r1
 803bf2e:	bf04      	itt	eq
 803bf30:	6819      	ldreq	r1, [r3, #0]
 803bf32:	685b      	ldreq	r3, [r3, #4]
 803bf34:	6063      	str	r3, [r4, #4]
 803bf36:	bf04      	itt	eq
 803bf38:	1949      	addeq	r1, r1, r5
 803bf3a:	6021      	streq	r1, [r4, #0]
 803bf3c:	6054      	str	r4, [r2, #4]
 803bf3e:	e7ca      	b.n	803bed6 <_free_r+0x26>
 803bf40:	b003      	add	sp, #12
 803bf42:	bd30      	pop	{r4, r5, pc}
 803bf44:	240267d8 	.word	0x240267d8

0803bf48 <sbrk_aligned>:
 803bf48:	b570      	push	{r4, r5, r6, lr}
 803bf4a:	4e0e      	ldr	r6, [pc, #56]	; (803bf84 <sbrk_aligned+0x3c>)
 803bf4c:	460c      	mov	r4, r1
 803bf4e:	6831      	ldr	r1, [r6, #0]
 803bf50:	4605      	mov	r5, r0
 803bf52:	b911      	cbnz	r1, 803bf5a <sbrk_aligned+0x12>
 803bf54:	f000 fb7a 	bl	803c64c <_sbrk_r>
 803bf58:	6030      	str	r0, [r6, #0]
 803bf5a:	4621      	mov	r1, r4
 803bf5c:	4628      	mov	r0, r5
 803bf5e:	f000 fb75 	bl	803c64c <_sbrk_r>
 803bf62:	1c43      	adds	r3, r0, #1
 803bf64:	d00a      	beq.n	803bf7c <sbrk_aligned+0x34>
 803bf66:	1cc4      	adds	r4, r0, #3
 803bf68:	f024 0403 	bic.w	r4, r4, #3
 803bf6c:	42a0      	cmp	r0, r4
 803bf6e:	d007      	beq.n	803bf80 <sbrk_aligned+0x38>
 803bf70:	1a21      	subs	r1, r4, r0
 803bf72:	4628      	mov	r0, r5
 803bf74:	f000 fb6a 	bl	803c64c <_sbrk_r>
 803bf78:	3001      	adds	r0, #1
 803bf7a:	d101      	bne.n	803bf80 <sbrk_aligned+0x38>
 803bf7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 803bf80:	4620      	mov	r0, r4
 803bf82:	bd70      	pop	{r4, r5, r6, pc}
 803bf84:	240267dc 	.word	0x240267dc

0803bf88 <_malloc_r>:
 803bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803bf8c:	1ccd      	adds	r5, r1, #3
 803bf8e:	f025 0503 	bic.w	r5, r5, #3
 803bf92:	3508      	adds	r5, #8
 803bf94:	2d0c      	cmp	r5, #12
 803bf96:	bf38      	it	cc
 803bf98:	250c      	movcc	r5, #12
 803bf9a:	2d00      	cmp	r5, #0
 803bf9c:	4607      	mov	r7, r0
 803bf9e:	db01      	blt.n	803bfa4 <_malloc_r+0x1c>
 803bfa0:	42a9      	cmp	r1, r5
 803bfa2:	d905      	bls.n	803bfb0 <_malloc_r+0x28>
 803bfa4:	230c      	movs	r3, #12
 803bfa6:	603b      	str	r3, [r7, #0]
 803bfa8:	2600      	movs	r6, #0
 803bfaa:	4630      	mov	r0, r6
 803bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803bfb0:	4e2e      	ldr	r6, [pc, #184]	; (803c06c <_malloc_r+0xe4>)
 803bfb2:	f000 fe7f 	bl	803ccb4 <__malloc_lock>
 803bfb6:	6833      	ldr	r3, [r6, #0]
 803bfb8:	461c      	mov	r4, r3
 803bfba:	bb34      	cbnz	r4, 803c00a <_malloc_r+0x82>
 803bfbc:	4629      	mov	r1, r5
 803bfbe:	4638      	mov	r0, r7
 803bfc0:	f7ff ffc2 	bl	803bf48 <sbrk_aligned>
 803bfc4:	1c43      	adds	r3, r0, #1
 803bfc6:	4604      	mov	r4, r0
 803bfc8:	d14d      	bne.n	803c066 <_malloc_r+0xde>
 803bfca:	6834      	ldr	r4, [r6, #0]
 803bfcc:	4626      	mov	r6, r4
 803bfce:	2e00      	cmp	r6, #0
 803bfd0:	d140      	bne.n	803c054 <_malloc_r+0xcc>
 803bfd2:	6823      	ldr	r3, [r4, #0]
 803bfd4:	4631      	mov	r1, r6
 803bfd6:	4638      	mov	r0, r7
 803bfd8:	eb04 0803 	add.w	r8, r4, r3
 803bfdc:	f000 fb36 	bl	803c64c <_sbrk_r>
 803bfe0:	4580      	cmp	r8, r0
 803bfe2:	d13a      	bne.n	803c05a <_malloc_r+0xd2>
 803bfe4:	6821      	ldr	r1, [r4, #0]
 803bfe6:	3503      	adds	r5, #3
 803bfe8:	1a6d      	subs	r5, r5, r1
 803bfea:	f025 0503 	bic.w	r5, r5, #3
 803bfee:	3508      	adds	r5, #8
 803bff0:	2d0c      	cmp	r5, #12
 803bff2:	bf38      	it	cc
 803bff4:	250c      	movcc	r5, #12
 803bff6:	4629      	mov	r1, r5
 803bff8:	4638      	mov	r0, r7
 803bffa:	f7ff ffa5 	bl	803bf48 <sbrk_aligned>
 803bffe:	3001      	adds	r0, #1
 803c000:	d02b      	beq.n	803c05a <_malloc_r+0xd2>
 803c002:	6823      	ldr	r3, [r4, #0]
 803c004:	442b      	add	r3, r5
 803c006:	6023      	str	r3, [r4, #0]
 803c008:	e00e      	b.n	803c028 <_malloc_r+0xa0>
 803c00a:	6822      	ldr	r2, [r4, #0]
 803c00c:	1b52      	subs	r2, r2, r5
 803c00e:	d41e      	bmi.n	803c04e <_malloc_r+0xc6>
 803c010:	2a0b      	cmp	r2, #11
 803c012:	d916      	bls.n	803c042 <_malloc_r+0xba>
 803c014:	1961      	adds	r1, r4, r5
 803c016:	42a3      	cmp	r3, r4
 803c018:	6025      	str	r5, [r4, #0]
 803c01a:	bf18      	it	ne
 803c01c:	6059      	strne	r1, [r3, #4]
 803c01e:	6863      	ldr	r3, [r4, #4]
 803c020:	bf08      	it	eq
 803c022:	6031      	streq	r1, [r6, #0]
 803c024:	5162      	str	r2, [r4, r5]
 803c026:	604b      	str	r3, [r1, #4]
 803c028:	4638      	mov	r0, r7
 803c02a:	f104 060b 	add.w	r6, r4, #11
 803c02e:	f000 fe47 	bl	803ccc0 <__malloc_unlock>
 803c032:	f026 0607 	bic.w	r6, r6, #7
 803c036:	1d23      	adds	r3, r4, #4
 803c038:	1af2      	subs	r2, r6, r3
 803c03a:	d0b6      	beq.n	803bfaa <_malloc_r+0x22>
 803c03c:	1b9b      	subs	r3, r3, r6
 803c03e:	50a3      	str	r3, [r4, r2]
 803c040:	e7b3      	b.n	803bfaa <_malloc_r+0x22>
 803c042:	6862      	ldr	r2, [r4, #4]
 803c044:	42a3      	cmp	r3, r4
 803c046:	bf0c      	ite	eq
 803c048:	6032      	streq	r2, [r6, #0]
 803c04a:	605a      	strne	r2, [r3, #4]
 803c04c:	e7ec      	b.n	803c028 <_malloc_r+0xa0>
 803c04e:	4623      	mov	r3, r4
 803c050:	6864      	ldr	r4, [r4, #4]
 803c052:	e7b2      	b.n	803bfba <_malloc_r+0x32>
 803c054:	4634      	mov	r4, r6
 803c056:	6876      	ldr	r6, [r6, #4]
 803c058:	e7b9      	b.n	803bfce <_malloc_r+0x46>
 803c05a:	230c      	movs	r3, #12
 803c05c:	603b      	str	r3, [r7, #0]
 803c05e:	4638      	mov	r0, r7
 803c060:	f000 fe2e 	bl	803ccc0 <__malloc_unlock>
 803c064:	e7a1      	b.n	803bfaa <_malloc_r+0x22>
 803c066:	6025      	str	r5, [r4, #0]
 803c068:	e7de      	b.n	803c028 <_malloc_r+0xa0>
 803c06a:	bf00      	nop
 803c06c:	240267d8 	.word	0x240267d8

0803c070 <__sfputc_r>:
 803c070:	6893      	ldr	r3, [r2, #8]
 803c072:	3b01      	subs	r3, #1
 803c074:	2b00      	cmp	r3, #0
 803c076:	b410      	push	{r4}
 803c078:	6093      	str	r3, [r2, #8]
 803c07a:	da08      	bge.n	803c08e <__sfputc_r+0x1e>
 803c07c:	6994      	ldr	r4, [r2, #24]
 803c07e:	42a3      	cmp	r3, r4
 803c080:	db01      	blt.n	803c086 <__sfputc_r+0x16>
 803c082:	290a      	cmp	r1, #10
 803c084:	d103      	bne.n	803c08e <__sfputc_r+0x1e>
 803c086:	f85d 4b04 	ldr.w	r4, [sp], #4
 803c08a:	f000 bb33 	b.w	803c6f4 <__swbuf_r>
 803c08e:	6813      	ldr	r3, [r2, #0]
 803c090:	1c58      	adds	r0, r3, #1
 803c092:	6010      	str	r0, [r2, #0]
 803c094:	7019      	strb	r1, [r3, #0]
 803c096:	4608      	mov	r0, r1
 803c098:	f85d 4b04 	ldr.w	r4, [sp], #4
 803c09c:	4770      	bx	lr

0803c09e <__sfputs_r>:
 803c09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c0a0:	4606      	mov	r6, r0
 803c0a2:	460f      	mov	r7, r1
 803c0a4:	4614      	mov	r4, r2
 803c0a6:	18d5      	adds	r5, r2, r3
 803c0a8:	42ac      	cmp	r4, r5
 803c0aa:	d101      	bne.n	803c0b0 <__sfputs_r+0x12>
 803c0ac:	2000      	movs	r0, #0
 803c0ae:	e007      	b.n	803c0c0 <__sfputs_r+0x22>
 803c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c0b4:	463a      	mov	r2, r7
 803c0b6:	4630      	mov	r0, r6
 803c0b8:	f7ff ffda 	bl	803c070 <__sfputc_r>
 803c0bc:	1c43      	adds	r3, r0, #1
 803c0be:	d1f3      	bne.n	803c0a8 <__sfputs_r+0xa>
 803c0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803c0c4 <_vfiprintf_r>:
 803c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c0c8:	460d      	mov	r5, r1
 803c0ca:	b09d      	sub	sp, #116	; 0x74
 803c0cc:	4614      	mov	r4, r2
 803c0ce:	4698      	mov	r8, r3
 803c0d0:	4606      	mov	r6, r0
 803c0d2:	b118      	cbz	r0, 803c0dc <_vfiprintf_r+0x18>
 803c0d4:	6983      	ldr	r3, [r0, #24]
 803c0d6:	b90b      	cbnz	r3, 803c0dc <_vfiprintf_r+0x18>
 803c0d8:	f000 fce6 	bl	803caa8 <__sinit>
 803c0dc:	4b89      	ldr	r3, [pc, #548]	; (803c304 <_vfiprintf_r+0x240>)
 803c0de:	429d      	cmp	r5, r3
 803c0e0:	d11b      	bne.n	803c11a <_vfiprintf_r+0x56>
 803c0e2:	6875      	ldr	r5, [r6, #4]
 803c0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c0e6:	07d9      	lsls	r1, r3, #31
 803c0e8:	d405      	bmi.n	803c0f6 <_vfiprintf_r+0x32>
 803c0ea:	89ab      	ldrh	r3, [r5, #12]
 803c0ec:	059a      	lsls	r2, r3, #22
 803c0ee:	d402      	bmi.n	803c0f6 <_vfiprintf_r+0x32>
 803c0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c0f2:	f000 fd77 	bl	803cbe4 <__retarget_lock_acquire_recursive>
 803c0f6:	89ab      	ldrh	r3, [r5, #12]
 803c0f8:	071b      	lsls	r3, r3, #28
 803c0fa:	d501      	bpl.n	803c100 <_vfiprintf_r+0x3c>
 803c0fc:	692b      	ldr	r3, [r5, #16]
 803c0fe:	b9eb      	cbnz	r3, 803c13c <_vfiprintf_r+0x78>
 803c100:	4629      	mov	r1, r5
 803c102:	4630      	mov	r0, r6
 803c104:	f000 fb48 	bl	803c798 <__swsetup_r>
 803c108:	b1c0      	cbz	r0, 803c13c <_vfiprintf_r+0x78>
 803c10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c10c:	07dc      	lsls	r4, r3, #31
 803c10e:	d50e      	bpl.n	803c12e <_vfiprintf_r+0x6a>
 803c110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c114:	b01d      	add	sp, #116	; 0x74
 803c116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803c11a:	4b7b      	ldr	r3, [pc, #492]	; (803c308 <_vfiprintf_r+0x244>)
 803c11c:	429d      	cmp	r5, r3
 803c11e:	d101      	bne.n	803c124 <_vfiprintf_r+0x60>
 803c120:	68b5      	ldr	r5, [r6, #8]
 803c122:	e7df      	b.n	803c0e4 <_vfiprintf_r+0x20>
 803c124:	4b79      	ldr	r3, [pc, #484]	; (803c30c <_vfiprintf_r+0x248>)
 803c126:	429d      	cmp	r5, r3
 803c128:	bf08      	it	eq
 803c12a:	68f5      	ldreq	r5, [r6, #12]
 803c12c:	e7da      	b.n	803c0e4 <_vfiprintf_r+0x20>
 803c12e:	89ab      	ldrh	r3, [r5, #12]
 803c130:	0598      	lsls	r0, r3, #22
 803c132:	d4ed      	bmi.n	803c110 <_vfiprintf_r+0x4c>
 803c134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c136:	f000 fd56 	bl	803cbe6 <__retarget_lock_release_recursive>
 803c13a:	e7e9      	b.n	803c110 <_vfiprintf_r+0x4c>
 803c13c:	2300      	movs	r3, #0
 803c13e:	9309      	str	r3, [sp, #36]	; 0x24
 803c140:	2320      	movs	r3, #32
 803c142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803c146:	f8cd 800c 	str.w	r8, [sp, #12]
 803c14a:	2330      	movs	r3, #48	; 0x30
 803c14c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803c310 <_vfiprintf_r+0x24c>
 803c150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803c154:	f04f 0901 	mov.w	r9, #1
 803c158:	4623      	mov	r3, r4
 803c15a:	469a      	mov	sl, r3
 803c15c:	f813 2b01 	ldrb.w	r2, [r3], #1
 803c160:	b10a      	cbz	r2, 803c166 <_vfiprintf_r+0xa2>
 803c162:	2a25      	cmp	r2, #37	; 0x25
 803c164:	d1f9      	bne.n	803c15a <_vfiprintf_r+0x96>
 803c166:	ebba 0b04 	subs.w	fp, sl, r4
 803c16a:	d00b      	beq.n	803c184 <_vfiprintf_r+0xc0>
 803c16c:	465b      	mov	r3, fp
 803c16e:	4622      	mov	r2, r4
 803c170:	4629      	mov	r1, r5
 803c172:	4630      	mov	r0, r6
 803c174:	f7ff ff93 	bl	803c09e <__sfputs_r>
 803c178:	3001      	adds	r0, #1
 803c17a:	f000 80aa 	beq.w	803c2d2 <_vfiprintf_r+0x20e>
 803c17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803c180:	445a      	add	r2, fp
 803c182:	9209      	str	r2, [sp, #36]	; 0x24
 803c184:	f89a 3000 	ldrb.w	r3, [sl]
 803c188:	2b00      	cmp	r3, #0
 803c18a:	f000 80a2 	beq.w	803c2d2 <_vfiprintf_r+0x20e>
 803c18e:	2300      	movs	r3, #0
 803c190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 803c194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803c198:	f10a 0a01 	add.w	sl, sl, #1
 803c19c:	9304      	str	r3, [sp, #16]
 803c19e:	9307      	str	r3, [sp, #28]
 803c1a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803c1a4:	931a      	str	r3, [sp, #104]	; 0x68
 803c1a6:	4654      	mov	r4, sl
 803c1a8:	2205      	movs	r2, #5
 803c1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c1ae:	4858      	ldr	r0, [pc, #352]	; (803c310 <_vfiprintf_r+0x24c>)
 803c1b0:	f7e4 f896 	bl	80202e0 <memchr>
 803c1b4:	9a04      	ldr	r2, [sp, #16]
 803c1b6:	b9d8      	cbnz	r0, 803c1f0 <_vfiprintf_r+0x12c>
 803c1b8:	06d1      	lsls	r1, r2, #27
 803c1ba:	bf44      	itt	mi
 803c1bc:	2320      	movmi	r3, #32
 803c1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c1c2:	0713      	lsls	r3, r2, #28
 803c1c4:	bf44      	itt	mi
 803c1c6:	232b      	movmi	r3, #43	; 0x2b
 803c1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803c1cc:	f89a 3000 	ldrb.w	r3, [sl]
 803c1d0:	2b2a      	cmp	r3, #42	; 0x2a
 803c1d2:	d015      	beq.n	803c200 <_vfiprintf_r+0x13c>
 803c1d4:	9a07      	ldr	r2, [sp, #28]
 803c1d6:	4654      	mov	r4, sl
 803c1d8:	2000      	movs	r0, #0
 803c1da:	f04f 0c0a 	mov.w	ip, #10
 803c1de:	4621      	mov	r1, r4
 803c1e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 803c1e4:	3b30      	subs	r3, #48	; 0x30
 803c1e6:	2b09      	cmp	r3, #9
 803c1e8:	d94e      	bls.n	803c288 <_vfiprintf_r+0x1c4>
 803c1ea:	b1b0      	cbz	r0, 803c21a <_vfiprintf_r+0x156>
 803c1ec:	9207      	str	r2, [sp, #28]
 803c1ee:	e014      	b.n	803c21a <_vfiprintf_r+0x156>
 803c1f0:	eba0 0308 	sub.w	r3, r0, r8
 803c1f4:	fa09 f303 	lsl.w	r3, r9, r3
 803c1f8:	4313      	orrs	r3, r2
 803c1fa:	9304      	str	r3, [sp, #16]
 803c1fc:	46a2      	mov	sl, r4
 803c1fe:	e7d2      	b.n	803c1a6 <_vfiprintf_r+0xe2>
 803c200:	9b03      	ldr	r3, [sp, #12]
 803c202:	1d19      	adds	r1, r3, #4
 803c204:	681b      	ldr	r3, [r3, #0]
 803c206:	9103      	str	r1, [sp, #12]
 803c208:	2b00      	cmp	r3, #0
 803c20a:	bfbb      	ittet	lt
 803c20c:	425b      	neglt	r3, r3
 803c20e:	f042 0202 	orrlt.w	r2, r2, #2
 803c212:	9307      	strge	r3, [sp, #28]
 803c214:	9307      	strlt	r3, [sp, #28]
 803c216:	bfb8      	it	lt
 803c218:	9204      	strlt	r2, [sp, #16]
 803c21a:	7823      	ldrb	r3, [r4, #0]
 803c21c:	2b2e      	cmp	r3, #46	; 0x2e
 803c21e:	d10c      	bne.n	803c23a <_vfiprintf_r+0x176>
 803c220:	7863      	ldrb	r3, [r4, #1]
 803c222:	2b2a      	cmp	r3, #42	; 0x2a
 803c224:	d135      	bne.n	803c292 <_vfiprintf_r+0x1ce>
 803c226:	9b03      	ldr	r3, [sp, #12]
 803c228:	1d1a      	adds	r2, r3, #4
 803c22a:	681b      	ldr	r3, [r3, #0]
 803c22c:	9203      	str	r2, [sp, #12]
 803c22e:	2b00      	cmp	r3, #0
 803c230:	bfb8      	it	lt
 803c232:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 803c236:	3402      	adds	r4, #2
 803c238:	9305      	str	r3, [sp, #20]
 803c23a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803c320 <_vfiprintf_r+0x25c>
 803c23e:	7821      	ldrb	r1, [r4, #0]
 803c240:	2203      	movs	r2, #3
 803c242:	4650      	mov	r0, sl
 803c244:	f7e4 f84c 	bl	80202e0 <memchr>
 803c248:	b140      	cbz	r0, 803c25c <_vfiprintf_r+0x198>
 803c24a:	2340      	movs	r3, #64	; 0x40
 803c24c:	eba0 000a 	sub.w	r0, r0, sl
 803c250:	fa03 f000 	lsl.w	r0, r3, r0
 803c254:	9b04      	ldr	r3, [sp, #16]
 803c256:	4303      	orrs	r3, r0
 803c258:	3401      	adds	r4, #1
 803c25a:	9304      	str	r3, [sp, #16]
 803c25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 803c260:	482c      	ldr	r0, [pc, #176]	; (803c314 <_vfiprintf_r+0x250>)
 803c262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803c266:	2206      	movs	r2, #6
 803c268:	f7e4 f83a 	bl	80202e0 <memchr>
 803c26c:	2800      	cmp	r0, #0
 803c26e:	d03f      	beq.n	803c2f0 <_vfiprintf_r+0x22c>
 803c270:	4b29      	ldr	r3, [pc, #164]	; (803c318 <_vfiprintf_r+0x254>)
 803c272:	bb1b      	cbnz	r3, 803c2bc <_vfiprintf_r+0x1f8>
 803c274:	9b03      	ldr	r3, [sp, #12]
 803c276:	3307      	adds	r3, #7
 803c278:	f023 0307 	bic.w	r3, r3, #7
 803c27c:	3308      	adds	r3, #8
 803c27e:	9303      	str	r3, [sp, #12]
 803c280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c282:	443b      	add	r3, r7
 803c284:	9309      	str	r3, [sp, #36]	; 0x24
 803c286:	e767      	b.n	803c158 <_vfiprintf_r+0x94>
 803c288:	fb0c 3202 	mla	r2, ip, r2, r3
 803c28c:	460c      	mov	r4, r1
 803c28e:	2001      	movs	r0, #1
 803c290:	e7a5      	b.n	803c1de <_vfiprintf_r+0x11a>
 803c292:	2300      	movs	r3, #0
 803c294:	3401      	adds	r4, #1
 803c296:	9305      	str	r3, [sp, #20]
 803c298:	4619      	mov	r1, r3
 803c29a:	f04f 0c0a 	mov.w	ip, #10
 803c29e:	4620      	mov	r0, r4
 803c2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 803c2a4:	3a30      	subs	r2, #48	; 0x30
 803c2a6:	2a09      	cmp	r2, #9
 803c2a8:	d903      	bls.n	803c2b2 <_vfiprintf_r+0x1ee>
 803c2aa:	2b00      	cmp	r3, #0
 803c2ac:	d0c5      	beq.n	803c23a <_vfiprintf_r+0x176>
 803c2ae:	9105      	str	r1, [sp, #20]
 803c2b0:	e7c3      	b.n	803c23a <_vfiprintf_r+0x176>
 803c2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 803c2b6:	4604      	mov	r4, r0
 803c2b8:	2301      	movs	r3, #1
 803c2ba:	e7f0      	b.n	803c29e <_vfiprintf_r+0x1da>
 803c2bc:	ab03      	add	r3, sp, #12
 803c2be:	9300      	str	r3, [sp, #0]
 803c2c0:	462a      	mov	r2, r5
 803c2c2:	4b16      	ldr	r3, [pc, #88]	; (803c31c <_vfiprintf_r+0x258>)
 803c2c4:	a904      	add	r1, sp, #16
 803c2c6:	4630      	mov	r0, r6
 803c2c8:	f3af 8000 	nop.w
 803c2cc:	4607      	mov	r7, r0
 803c2ce:	1c78      	adds	r0, r7, #1
 803c2d0:	d1d6      	bne.n	803c280 <_vfiprintf_r+0x1bc>
 803c2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803c2d4:	07d9      	lsls	r1, r3, #31
 803c2d6:	d405      	bmi.n	803c2e4 <_vfiprintf_r+0x220>
 803c2d8:	89ab      	ldrh	r3, [r5, #12]
 803c2da:	059a      	lsls	r2, r3, #22
 803c2dc:	d402      	bmi.n	803c2e4 <_vfiprintf_r+0x220>
 803c2de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803c2e0:	f000 fc81 	bl	803cbe6 <__retarget_lock_release_recursive>
 803c2e4:	89ab      	ldrh	r3, [r5, #12]
 803c2e6:	065b      	lsls	r3, r3, #25
 803c2e8:	f53f af12 	bmi.w	803c110 <_vfiprintf_r+0x4c>
 803c2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 803c2ee:	e711      	b.n	803c114 <_vfiprintf_r+0x50>
 803c2f0:	ab03      	add	r3, sp, #12
 803c2f2:	9300      	str	r3, [sp, #0]
 803c2f4:	462a      	mov	r2, r5
 803c2f6:	4b09      	ldr	r3, [pc, #36]	; (803c31c <_vfiprintf_r+0x258>)
 803c2f8:	a904      	add	r1, sp, #16
 803c2fa:	4630      	mov	r0, r6
 803c2fc:	f000 f880 	bl	803c400 <_printf_i>
 803c300:	e7e4      	b.n	803c2cc <_vfiprintf_r+0x208>
 803c302:	bf00      	nop
 803c304:	080585ec 	.word	0x080585ec
 803c308:	0805860c 	.word	0x0805860c
 803c30c:	080585cc 	.word	0x080585cc
 803c310:	08058598 	.word	0x08058598
 803c314:	080585a2 	.word	0x080585a2
 803c318:	00000000 	.word	0x00000000
 803c31c:	0803c09f 	.word	0x0803c09f
 803c320:	0805859e 	.word	0x0805859e

0803c324 <_printf_common>:
 803c324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c328:	4616      	mov	r6, r2
 803c32a:	4699      	mov	r9, r3
 803c32c:	688a      	ldr	r2, [r1, #8]
 803c32e:	690b      	ldr	r3, [r1, #16]
 803c330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803c334:	4293      	cmp	r3, r2
 803c336:	bfb8      	it	lt
 803c338:	4613      	movlt	r3, r2
 803c33a:	6033      	str	r3, [r6, #0]
 803c33c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803c340:	4607      	mov	r7, r0
 803c342:	460c      	mov	r4, r1
 803c344:	b10a      	cbz	r2, 803c34a <_printf_common+0x26>
 803c346:	3301      	adds	r3, #1
 803c348:	6033      	str	r3, [r6, #0]
 803c34a:	6823      	ldr	r3, [r4, #0]
 803c34c:	0699      	lsls	r1, r3, #26
 803c34e:	bf42      	ittt	mi
 803c350:	6833      	ldrmi	r3, [r6, #0]
 803c352:	3302      	addmi	r3, #2
 803c354:	6033      	strmi	r3, [r6, #0]
 803c356:	6825      	ldr	r5, [r4, #0]
 803c358:	f015 0506 	ands.w	r5, r5, #6
 803c35c:	d106      	bne.n	803c36c <_printf_common+0x48>
 803c35e:	f104 0a19 	add.w	sl, r4, #25
 803c362:	68e3      	ldr	r3, [r4, #12]
 803c364:	6832      	ldr	r2, [r6, #0]
 803c366:	1a9b      	subs	r3, r3, r2
 803c368:	42ab      	cmp	r3, r5
 803c36a:	dc26      	bgt.n	803c3ba <_printf_common+0x96>
 803c36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803c370:	1e13      	subs	r3, r2, #0
 803c372:	6822      	ldr	r2, [r4, #0]
 803c374:	bf18      	it	ne
 803c376:	2301      	movne	r3, #1
 803c378:	0692      	lsls	r2, r2, #26
 803c37a:	d42b      	bmi.n	803c3d4 <_printf_common+0xb0>
 803c37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803c380:	4649      	mov	r1, r9
 803c382:	4638      	mov	r0, r7
 803c384:	47c0      	blx	r8
 803c386:	3001      	adds	r0, #1
 803c388:	d01e      	beq.n	803c3c8 <_printf_common+0xa4>
 803c38a:	6823      	ldr	r3, [r4, #0]
 803c38c:	68e5      	ldr	r5, [r4, #12]
 803c38e:	6832      	ldr	r2, [r6, #0]
 803c390:	f003 0306 	and.w	r3, r3, #6
 803c394:	2b04      	cmp	r3, #4
 803c396:	bf08      	it	eq
 803c398:	1aad      	subeq	r5, r5, r2
 803c39a:	68a3      	ldr	r3, [r4, #8]
 803c39c:	6922      	ldr	r2, [r4, #16]
 803c39e:	bf0c      	ite	eq
 803c3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803c3a4:	2500      	movne	r5, #0
 803c3a6:	4293      	cmp	r3, r2
 803c3a8:	bfc4      	itt	gt
 803c3aa:	1a9b      	subgt	r3, r3, r2
 803c3ac:	18ed      	addgt	r5, r5, r3
 803c3ae:	2600      	movs	r6, #0
 803c3b0:	341a      	adds	r4, #26
 803c3b2:	42b5      	cmp	r5, r6
 803c3b4:	d11a      	bne.n	803c3ec <_printf_common+0xc8>
 803c3b6:	2000      	movs	r0, #0
 803c3b8:	e008      	b.n	803c3cc <_printf_common+0xa8>
 803c3ba:	2301      	movs	r3, #1
 803c3bc:	4652      	mov	r2, sl
 803c3be:	4649      	mov	r1, r9
 803c3c0:	4638      	mov	r0, r7
 803c3c2:	47c0      	blx	r8
 803c3c4:	3001      	adds	r0, #1
 803c3c6:	d103      	bne.n	803c3d0 <_printf_common+0xac>
 803c3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c3d0:	3501      	adds	r5, #1
 803c3d2:	e7c6      	b.n	803c362 <_printf_common+0x3e>
 803c3d4:	18e1      	adds	r1, r4, r3
 803c3d6:	1c5a      	adds	r2, r3, #1
 803c3d8:	2030      	movs	r0, #48	; 0x30
 803c3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803c3de:	4422      	add	r2, r4
 803c3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803c3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803c3e8:	3302      	adds	r3, #2
 803c3ea:	e7c7      	b.n	803c37c <_printf_common+0x58>
 803c3ec:	2301      	movs	r3, #1
 803c3ee:	4622      	mov	r2, r4
 803c3f0:	4649      	mov	r1, r9
 803c3f2:	4638      	mov	r0, r7
 803c3f4:	47c0      	blx	r8
 803c3f6:	3001      	adds	r0, #1
 803c3f8:	d0e6      	beq.n	803c3c8 <_printf_common+0xa4>
 803c3fa:	3601      	adds	r6, #1
 803c3fc:	e7d9      	b.n	803c3b2 <_printf_common+0x8e>
	...

0803c400 <_printf_i>:
 803c400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803c404:	7e0f      	ldrb	r7, [r1, #24]
 803c406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803c408:	2f78      	cmp	r7, #120	; 0x78
 803c40a:	4691      	mov	r9, r2
 803c40c:	4680      	mov	r8, r0
 803c40e:	460c      	mov	r4, r1
 803c410:	469a      	mov	sl, r3
 803c412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 803c416:	d807      	bhi.n	803c428 <_printf_i+0x28>
 803c418:	2f62      	cmp	r7, #98	; 0x62
 803c41a:	d80a      	bhi.n	803c432 <_printf_i+0x32>
 803c41c:	2f00      	cmp	r7, #0
 803c41e:	f000 80d8 	beq.w	803c5d2 <_printf_i+0x1d2>
 803c422:	2f58      	cmp	r7, #88	; 0x58
 803c424:	f000 80a3 	beq.w	803c56e <_printf_i+0x16e>
 803c428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803c430:	e03a      	b.n	803c4a8 <_printf_i+0xa8>
 803c432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803c436:	2b15      	cmp	r3, #21
 803c438:	d8f6      	bhi.n	803c428 <_printf_i+0x28>
 803c43a:	a101      	add	r1, pc, #4	; (adr r1, 803c440 <_printf_i+0x40>)
 803c43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803c440:	0803c499 	.word	0x0803c499
 803c444:	0803c4ad 	.word	0x0803c4ad
 803c448:	0803c429 	.word	0x0803c429
 803c44c:	0803c429 	.word	0x0803c429
 803c450:	0803c429 	.word	0x0803c429
 803c454:	0803c429 	.word	0x0803c429
 803c458:	0803c4ad 	.word	0x0803c4ad
 803c45c:	0803c429 	.word	0x0803c429
 803c460:	0803c429 	.word	0x0803c429
 803c464:	0803c429 	.word	0x0803c429
 803c468:	0803c429 	.word	0x0803c429
 803c46c:	0803c5b9 	.word	0x0803c5b9
 803c470:	0803c4dd 	.word	0x0803c4dd
 803c474:	0803c59b 	.word	0x0803c59b
 803c478:	0803c429 	.word	0x0803c429
 803c47c:	0803c429 	.word	0x0803c429
 803c480:	0803c5db 	.word	0x0803c5db
 803c484:	0803c429 	.word	0x0803c429
 803c488:	0803c4dd 	.word	0x0803c4dd
 803c48c:	0803c429 	.word	0x0803c429
 803c490:	0803c429 	.word	0x0803c429
 803c494:	0803c5a3 	.word	0x0803c5a3
 803c498:	682b      	ldr	r3, [r5, #0]
 803c49a:	1d1a      	adds	r2, r3, #4
 803c49c:	681b      	ldr	r3, [r3, #0]
 803c49e:	602a      	str	r2, [r5, #0]
 803c4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 803c4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803c4a8:	2301      	movs	r3, #1
 803c4aa:	e0a3      	b.n	803c5f4 <_printf_i+0x1f4>
 803c4ac:	6820      	ldr	r0, [r4, #0]
 803c4ae:	6829      	ldr	r1, [r5, #0]
 803c4b0:	0606      	lsls	r6, r0, #24
 803c4b2:	f101 0304 	add.w	r3, r1, #4
 803c4b6:	d50a      	bpl.n	803c4ce <_printf_i+0xce>
 803c4b8:	680e      	ldr	r6, [r1, #0]
 803c4ba:	602b      	str	r3, [r5, #0]
 803c4bc:	2e00      	cmp	r6, #0
 803c4be:	da03      	bge.n	803c4c8 <_printf_i+0xc8>
 803c4c0:	232d      	movs	r3, #45	; 0x2d
 803c4c2:	4276      	negs	r6, r6
 803c4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c4c8:	485e      	ldr	r0, [pc, #376]	; (803c644 <_printf_i+0x244>)
 803c4ca:	230a      	movs	r3, #10
 803c4cc:	e019      	b.n	803c502 <_printf_i+0x102>
 803c4ce:	680e      	ldr	r6, [r1, #0]
 803c4d0:	602b      	str	r3, [r5, #0]
 803c4d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 803c4d6:	bf18      	it	ne
 803c4d8:	b236      	sxthne	r6, r6
 803c4da:	e7ef      	b.n	803c4bc <_printf_i+0xbc>
 803c4dc:	682b      	ldr	r3, [r5, #0]
 803c4de:	6820      	ldr	r0, [r4, #0]
 803c4e0:	1d19      	adds	r1, r3, #4
 803c4e2:	6029      	str	r1, [r5, #0]
 803c4e4:	0601      	lsls	r1, r0, #24
 803c4e6:	d501      	bpl.n	803c4ec <_printf_i+0xec>
 803c4e8:	681e      	ldr	r6, [r3, #0]
 803c4ea:	e002      	b.n	803c4f2 <_printf_i+0xf2>
 803c4ec:	0646      	lsls	r6, r0, #25
 803c4ee:	d5fb      	bpl.n	803c4e8 <_printf_i+0xe8>
 803c4f0:	881e      	ldrh	r6, [r3, #0]
 803c4f2:	4854      	ldr	r0, [pc, #336]	; (803c644 <_printf_i+0x244>)
 803c4f4:	2f6f      	cmp	r7, #111	; 0x6f
 803c4f6:	bf0c      	ite	eq
 803c4f8:	2308      	moveq	r3, #8
 803c4fa:	230a      	movne	r3, #10
 803c4fc:	2100      	movs	r1, #0
 803c4fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803c502:	6865      	ldr	r5, [r4, #4]
 803c504:	60a5      	str	r5, [r4, #8]
 803c506:	2d00      	cmp	r5, #0
 803c508:	bfa2      	ittt	ge
 803c50a:	6821      	ldrge	r1, [r4, #0]
 803c50c:	f021 0104 	bicge.w	r1, r1, #4
 803c510:	6021      	strge	r1, [r4, #0]
 803c512:	b90e      	cbnz	r6, 803c518 <_printf_i+0x118>
 803c514:	2d00      	cmp	r5, #0
 803c516:	d04d      	beq.n	803c5b4 <_printf_i+0x1b4>
 803c518:	4615      	mov	r5, r2
 803c51a:	fbb6 f1f3 	udiv	r1, r6, r3
 803c51e:	fb03 6711 	mls	r7, r3, r1, r6
 803c522:	5dc7      	ldrb	r7, [r0, r7]
 803c524:	f805 7d01 	strb.w	r7, [r5, #-1]!
 803c528:	4637      	mov	r7, r6
 803c52a:	42bb      	cmp	r3, r7
 803c52c:	460e      	mov	r6, r1
 803c52e:	d9f4      	bls.n	803c51a <_printf_i+0x11a>
 803c530:	2b08      	cmp	r3, #8
 803c532:	d10b      	bne.n	803c54c <_printf_i+0x14c>
 803c534:	6823      	ldr	r3, [r4, #0]
 803c536:	07de      	lsls	r6, r3, #31
 803c538:	d508      	bpl.n	803c54c <_printf_i+0x14c>
 803c53a:	6923      	ldr	r3, [r4, #16]
 803c53c:	6861      	ldr	r1, [r4, #4]
 803c53e:	4299      	cmp	r1, r3
 803c540:	bfde      	ittt	le
 803c542:	2330      	movle	r3, #48	; 0x30
 803c544:	f805 3c01 	strble.w	r3, [r5, #-1]
 803c548:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 803c54c:	1b52      	subs	r2, r2, r5
 803c54e:	6122      	str	r2, [r4, #16]
 803c550:	f8cd a000 	str.w	sl, [sp]
 803c554:	464b      	mov	r3, r9
 803c556:	aa03      	add	r2, sp, #12
 803c558:	4621      	mov	r1, r4
 803c55a:	4640      	mov	r0, r8
 803c55c:	f7ff fee2 	bl	803c324 <_printf_common>
 803c560:	3001      	adds	r0, #1
 803c562:	d14c      	bne.n	803c5fe <_printf_i+0x1fe>
 803c564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c568:	b004      	add	sp, #16
 803c56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c56e:	4835      	ldr	r0, [pc, #212]	; (803c644 <_printf_i+0x244>)
 803c570:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 803c574:	6829      	ldr	r1, [r5, #0]
 803c576:	6823      	ldr	r3, [r4, #0]
 803c578:	f851 6b04 	ldr.w	r6, [r1], #4
 803c57c:	6029      	str	r1, [r5, #0]
 803c57e:	061d      	lsls	r5, r3, #24
 803c580:	d514      	bpl.n	803c5ac <_printf_i+0x1ac>
 803c582:	07df      	lsls	r7, r3, #31
 803c584:	bf44      	itt	mi
 803c586:	f043 0320 	orrmi.w	r3, r3, #32
 803c58a:	6023      	strmi	r3, [r4, #0]
 803c58c:	b91e      	cbnz	r6, 803c596 <_printf_i+0x196>
 803c58e:	6823      	ldr	r3, [r4, #0]
 803c590:	f023 0320 	bic.w	r3, r3, #32
 803c594:	6023      	str	r3, [r4, #0]
 803c596:	2310      	movs	r3, #16
 803c598:	e7b0      	b.n	803c4fc <_printf_i+0xfc>
 803c59a:	6823      	ldr	r3, [r4, #0]
 803c59c:	f043 0320 	orr.w	r3, r3, #32
 803c5a0:	6023      	str	r3, [r4, #0]
 803c5a2:	2378      	movs	r3, #120	; 0x78
 803c5a4:	4828      	ldr	r0, [pc, #160]	; (803c648 <_printf_i+0x248>)
 803c5a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803c5aa:	e7e3      	b.n	803c574 <_printf_i+0x174>
 803c5ac:	0659      	lsls	r1, r3, #25
 803c5ae:	bf48      	it	mi
 803c5b0:	b2b6      	uxthmi	r6, r6
 803c5b2:	e7e6      	b.n	803c582 <_printf_i+0x182>
 803c5b4:	4615      	mov	r5, r2
 803c5b6:	e7bb      	b.n	803c530 <_printf_i+0x130>
 803c5b8:	682b      	ldr	r3, [r5, #0]
 803c5ba:	6826      	ldr	r6, [r4, #0]
 803c5bc:	6961      	ldr	r1, [r4, #20]
 803c5be:	1d18      	adds	r0, r3, #4
 803c5c0:	6028      	str	r0, [r5, #0]
 803c5c2:	0635      	lsls	r5, r6, #24
 803c5c4:	681b      	ldr	r3, [r3, #0]
 803c5c6:	d501      	bpl.n	803c5cc <_printf_i+0x1cc>
 803c5c8:	6019      	str	r1, [r3, #0]
 803c5ca:	e002      	b.n	803c5d2 <_printf_i+0x1d2>
 803c5cc:	0670      	lsls	r0, r6, #25
 803c5ce:	d5fb      	bpl.n	803c5c8 <_printf_i+0x1c8>
 803c5d0:	8019      	strh	r1, [r3, #0]
 803c5d2:	2300      	movs	r3, #0
 803c5d4:	6123      	str	r3, [r4, #16]
 803c5d6:	4615      	mov	r5, r2
 803c5d8:	e7ba      	b.n	803c550 <_printf_i+0x150>
 803c5da:	682b      	ldr	r3, [r5, #0]
 803c5dc:	1d1a      	adds	r2, r3, #4
 803c5de:	602a      	str	r2, [r5, #0]
 803c5e0:	681d      	ldr	r5, [r3, #0]
 803c5e2:	6862      	ldr	r2, [r4, #4]
 803c5e4:	2100      	movs	r1, #0
 803c5e6:	4628      	mov	r0, r5
 803c5e8:	f7e3 fe7a 	bl	80202e0 <memchr>
 803c5ec:	b108      	cbz	r0, 803c5f2 <_printf_i+0x1f2>
 803c5ee:	1b40      	subs	r0, r0, r5
 803c5f0:	6060      	str	r0, [r4, #4]
 803c5f2:	6863      	ldr	r3, [r4, #4]
 803c5f4:	6123      	str	r3, [r4, #16]
 803c5f6:	2300      	movs	r3, #0
 803c5f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803c5fc:	e7a8      	b.n	803c550 <_printf_i+0x150>
 803c5fe:	6923      	ldr	r3, [r4, #16]
 803c600:	462a      	mov	r2, r5
 803c602:	4649      	mov	r1, r9
 803c604:	4640      	mov	r0, r8
 803c606:	47d0      	blx	sl
 803c608:	3001      	adds	r0, #1
 803c60a:	d0ab      	beq.n	803c564 <_printf_i+0x164>
 803c60c:	6823      	ldr	r3, [r4, #0]
 803c60e:	079b      	lsls	r3, r3, #30
 803c610:	d413      	bmi.n	803c63a <_printf_i+0x23a>
 803c612:	68e0      	ldr	r0, [r4, #12]
 803c614:	9b03      	ldr	r3, [sp, #12]
 803c616:	4298      	cmp	r0, r3
 803c618:	bfb8      	it	lt
 803c61a:	4618      	movlt	r0, r3
 803c61c:	e7a4      	b.n	803c568 <_printf_i+0x168>
 803c61e:	2301      	movs	r3, #1
 803c620:	4632      	mov	r2, r6
 803c622:	4649      	mov	r1, r9
 803c624:	4640      	mov	r0, r8
 803c626:	47d0      	blx	sl
 803c628:	3001      	adds	r0, #1
 803c62a:	d09b      	beq.n	803c564 <_printf_i+0x164>
 803c62c:	3501      	adds	r5, #1
 803c62e:	68e3      	ldr	r3, [r4, #12]
 803c630:	9903      	ldr	r1, [sp, #12]
 803c632:	1a5b      	subs	r3, r3, r1
 803c634:	42ab      	cmp	r3, r5
 803c636:	dcf2      	bgt.n	803c61e <_printf_i+0x21e>
 803c638:	e7eb      	b.n	803c612 <_printf_i+0x212>
 803c63a:	2500      	movs	r5, #0
 803c63c:	f104 0619 	add.w	r6, r4, #25
 803c640:	e7f5      	b.n	803c62e <_printf_i+0x22e>
 803c642:	bf00      	nop
 803c644:	080585a9 	.word	0x080585a9
 803c648:	080585ba 	.word	0x080585ba

0803c64c <_sbrk_r>:
 803c64c:	b538      	push	{r3, r4, r5, lr}
 803c64e:	4d06      	ldr	r5, [pc, #24]	; (803c668 <_sbrk_r+0x1c>)
 803c650:	2300      	movs	r3, #0
 803c652:	4604      	mov	r4, r0
 803c654:	4608      	mov	r0, r1
 803c656:	602b      	str	r3, [r5, #0]
 803c658:	f7ed fd16 	bl	802a088 <_sbrk>
 803c65c:	1c43      	adds	r3, r0, #1
 803c65e:	d102      	bne.n	803c666 <_sbrk_r+0x1a>
 803c660:	682b      	ldr	r3, [r5, #0]
 803c662:	b103      	cbz	r3, 803c666 <_sbrk_r+0x1a>
 803c664:	6023      	str	r3, [r4, #0]
 803c666:	bd38      	pop	{r3, r4, r5, pc}
 803c668:	240267e4 	.word	0x240267e4

0803c66c <_raise_r>:
 803c66c:	291f      	cmp	r1, #31
 803c66e:	b538      	push	{r3, r4, r5, lr}
 803c670:	4604      	mov	r4, r0
 803c672:	460d      	mov	r5, r1
 803c674:	d904      	bls.n	803c680 <_raise_r+0x14>
 803c676:	2316      	movs	r3, #22
 803c678:	6003      	str	r3, [r0, #0]
 803c67a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c67e:	bd38      	pop	{r3, r4, r5, pc}
 803c680:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803c682:	b112      	cbz	r2, 803c68a <_raise_r+0x1e>
 803c684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803c688:	b94b      	cbnz	r3, 803c69e <_raise_r+0x32>
 803c68a:	4620      	mov	r0, r4
 803c68c:	f000 f830 	bl	803c6f0 <_getpid_r>
 803c690:	462a      	mov	r2, r5
 803c692:	4601      	mov	r1, r0
 803c694:	4620      	mov	r0, r4
 803c696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803c69a:	f000 b817 	b.w	803c6cc <_kill_r>
 803c69e:	2b01      	cmp	r3, #1
 803c6a0:	d00a      	beq.n	803c6b8 <_raise_r+0x4c>
 803c6a2:	1c59      	adds	r1, r3, #1
 803c6a4:	d103      	bne.n	803c6ae <_raise_r+0x42>
 803c6a6:	2316      	movs	r3, #22
 803c6a8:	6003      	str	r3, [r0, #0]
 803c6aa:	2001      	movs	r0, #1
 803c6ac:	e7e7      	b.n	803c67e <_raise_r+0x12>
 803c6ae:	2400      	movs	r4, #0
 803c6b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803c6b4:	4628      	mov	r0, r5
 803c6b6:	4798      	blx	r3
 803c6b8:	2000      	movs	r0, #0
 803c6ba:	e7e0      	b.n	803c67e <_raise_r+0x12>

0803c6bc <raise>:
 803c6bc:	4b02      	ldr	r3, [pc, #8]	; (803c6c8 <raise+0xc>)
 803c6be:	4601      	mov	r1, r0
 803c6c0:	6818      	ldr	r0, [r3, #0]
 803c6c2:	f7ff bfd3 	b.w	803c66c <_raise_r>
 803c6c6:	bf00      	nop
 803c6c8:	24000104 	.word	0x24000104

0803c6cc <_kill_r>:
 803c6cc:	b538      	push	{r3, r4, r5, lr}
 803c6ce:	4d07      	ldr	r5, [pc, #28]	; (803c6ec <_kill_r+0x20>)
 803c6d0:	2300      	movs	r3, #0
 803c6d2:	4604      	mov	r4, r0
 803c6d4:	4608      	mov	r0, r1
 803c6d6:	4611      	mov	r1, r2
 803c6d8:	602b      	str	r3, [r5, #0]
 803c6da:	f7ed fc4d 	bl	8029f78 <_kill>
 803c6de:	1c43      	adds	r3, r0, #1
 803c6e0:	d102      	bne.n	803c6e8 <_kill_r+0x1c>
 803c6e2:	682b      	ldr	r3, [r5, #0]
 803c6e4:	b103      	cbz	r3, 803c6e8 <_kill_r+0x1c>
 803c6e6:	6023      	str	r3, [r4, #0]
 803c6e8:	bd38      	pop	{r3, r4, r5, pc}
 803c6ea:	bf00      	nop
 803c6ec:	240267e4 	.word	0x240267e4

0803c6f0 <_getpid_r>:
 803c6f0:	f7ed bc3a 	b.w	8029f68 <_getpid>

0803c6f4 <__swbuf_r>:
 803c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803c6f6:	460e      	mov	r6, r1
 803c6f8:	4614      	mov	r4, r2
 803c6fa:	4605      	mov	r5, r0
 803c6fc:	b118      	cbz	r0, 803c706 <__swbuf_r+0x12>
 803c6fe:	6983      	ldr	r3, [r0, #24]
 803c700:	b90b      	cbnz	r3, 803c706 <__swbuf_r+0x12>
 803c702:	f000 f9d1 	bl	803caa8 <__sinit>
 803c706:	4b21      	ldr	r3, [pc, #132]	; (803c78c <__swbuf_r+0x98>)
 803c708:	429c      	cmp	r4, r3
 803c70a:	d12b      	bne.n	803c764 <__swbuf_r+0x70>
 803c70c:	686c      	ldr	r4, [r5, #4]
 803c70e:	69a3      	ldr	r3, [r4, #24]
 803c710:	60a3      	str	r3, [r4, #8]
 803c712:	89a3      	ldrh	r3, [r4, #12]
 803c714:	071a      	lsls	r2, r3, #28
 803c716:	d52f      	bpl.n	803c778 <__swbuf_r+0x84>
 803c718:	6923      	ldr	r3, [r4, #16]
 803c71a:	b36b      	cbz	r3, 803c778 <__swbuf_r+0x84>
 803c71c:	6923      	ldr	r3, [r4, #16]
 803c71e:	6820      	ldr	r0, [r4, #0]
 803c720:	1ac0      	subs	r0, r0, r3
 803c722:	6963      	ldr	r3, [r4, #20]
 803c724:	b2f6      	uxtb	r6, r6
 803c726:	4283      	cmp	r3, r0
 803c728:	4637      	mov	r7, r6
 803c72a:	dc04      	bgt.n	803c736 <__swbuf_r+0x42>
 803c72c:	4621      	mov	r1, r4
 803c72e:	4628      	mov	r0, r5
 803c730:	f000 f926 	bl	803c980 <_fflush_r>
 803c734:	bb30      	cbnz	r0, 803c784 <__swbuf_r+0x90>
 803c736:	68a3      	ldr	r3, [r4, #8]
 803c738:	3b01      	subs	r3, #1
 803c73a:	60a3      	str	r3, [r4, #8]
 803c73c:	6823      	ldr	r3, [r4, #0]
 803c73e:	1c5a      	adds	r2, r3, #1
 803c740:	6022      	str	r2, [r4, #0]
 803c742:	701e      	strb	r6, [r3, #0]
 803c744:	6963      	ldr	r3, [r4, #20]
 803c746:	3001      	adds	r0, #1
 803c748:	4283      	cmp	r3, r0
 803c74a:	d004      	beq.n	803c756 <__swbuf_r+0x62>
 803c74c:	89a3      	ldrh	r3, [r4, #12]
 803c74e:	07db      	lsls	r3, r3, #31
 803c750:	d506      	bpl.n	803c760 <__swbuf_r+0x6c>
 803c752:	2e0a      	cmp	r6, #10
 803c754:	d104      	bne.n	803c760 <__swbuf_r+0x6c>
 803c756:	4621      	mov	r1, r4
 803c758:	4628      	mov	r0, r5
 803c75a:	f000 f911 	bl	803c980 <_fflush_r>
 803c75e:	b988      	cbnz	r0, 803c784 <__swbuf_r+0x90>
 803c760:	4638      	mov	r0, r7
 803c762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803c764:	4b0a      	ldr	r3, [pc, #40]	; (803c790 <__swbuf_r+0x9c>)
 803c766:	429c      	cmp	r4, r3
 803c768:	d101      	bne.n	803c76e <__swbuf_r+0x7a>
 803c76a:	68ac      	ldr	r4, [r5, #8]
 803c76c:	e7cf      	b.n	803c70e <__swbuf_r+0x1a>
 803c76e:	4b09      	ldr	r3, [pc, #36]	; (803c794 <__swbuf_r+0xa0>)
 803c770:	429c      	cmp	r4, r3
 803c772:	bf08      	it	eq
 803c774:	68ec      	ldreq	r4, [r5, #12]
 803c776:	e7ca      	b.n	803c70e <__swbuf_r+0x1a>
 803c778:	4621      	mov	r1, r4
 803c77a:	4628      	mov	r0, r5
 803c77c:	f000 f80c 	bl	803c798 <__swsetup_r>
 803c780:	2800      	cmp	r0, #0
 803c782:	d0cb      	beq.n	803c71c <__swbuf_r+0x28>
 803c784:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 803c788:	e7ea      	b.n	803c760 <__swbuf_r+0x6c>
 803c78a:	bf00      	nop
 803c78c:	080585ec 	.word	0x080585ec
 803c790:	0805860c 	.word	0x0805860c
 803c794:	080585cc 	.word	0x080585cc

0803c798 <__swsetup_r>:
 803c798:	4b32      	ldr	r3, [pc, #200]	; (803c864 <__swsetup_r+0xcc>)
 803c79a:	b570      	push	{r4, r5, r6, lr}
 803c79c:	681d      	ldr	r5, [r3, #0]
 803c79e:	4606      	mov	r6, r0
 803c7a0:	460c      	mov	r4, r1
 803c7a2:	b125      	cbz	r5, 803c7ae <__swsetup_r+0x16>
 803c7a4:	69ab      	ldr	r3, [r5, #24]
 803c7a6:	b913      	cbnz	r3, 803c7ae <__swsetup_r+0x16>
 803c7a8:	4628      	mov	r0, r5
 803c7aa:	f000 f97d 	bl	803caa8 <__sinit>
 803c7ae:	4b2e      	ldr	r3, [pc, #184]	; (803c868 <__swsetup_r+0xd0>)
 803c7b0:	429c      	cmp	r4, r3
 803c7b2:	d10f      	bne.n	803c7d4 <__swsetup_r+0x3c>
 803c7b4:	686c      	ldr	r4, [r5, #4]
 803c7b6:	89a3      	ldrh	r3, [r4, #12]
 803c7b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c7bc:	0719      	lsls	r1, r3, #28
 803c7be:	d42c      	bmi.n	803c81a <__swsetup_r+0x82>
 803c7c0:	06dd      	lsls	r5, r3, #27
 803c7c2:	d411      	bmi.n	803c7e8 <__swsetup_r+0x50>
 803c7c4:	2309      	movs	r3, #9
 803c7c6:	6033      	str	r3, [r6, #0]
 803c7c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803c7cc:	81a3      	strh	r3, [r4, #12]
 803c7ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c7d2:	e03e      	b.n	803c852 <__swsetup_r+0xba>
 803c7d4:	4b25      	ldr	r3, [pc, #148]	; (803c86c <__swsetup_r+0xd4>)
 803c7d6:	429c      	cmp	r4, r3
 803c7d8:	d101      	bne.n	803c7de <__swsetup_r+0x46>
 803c7da:	68ac      	ldr	r4, [r5, #8]
 803c7dc:	e7eb      	b.n	803c7b6 <__swsetup_r+0x1e>
 803c7de:	4b24      	ldr	r3, [pc, #144]	; (803c870 <__swsetup_r+0xd8>)
 803c7e0:	429c      	cmp	r4, r3
 803c7e2:	bf08      	it	eq
 803c7e4:	68ec      	ldreq	r4, [r5, #12]
 803c7e6:	e7e6      	b.n	803c7b6 <__swsetup_r+0x1e>
 803c7e8:	0758      	lsls	r0, r3, #29
 803c7ea:	d512      	bpl.n	803c812 <__swsetup_r+0x7a>
 803c7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c7ee:	b141      	cbz	r1, 803c802 <__swsetup_r+0x6a>
 803c7f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c7f4:	4299      	cmp	r1, r3
 803c7f6:	d002      	beq.n	803c7fe <__swsetup_r+0x66>
 803c7f8:	4630      	mov	r0, r6
 803c7fa:	f7ff fb59 	bl	803beb0 <_free_r>
 803c7fe:	2300      	movs	r3, #0
 803c800:	6363      	str	r3, [r4, #52]	; 0x34
 803c802:	89a3      	ldrh	r3, [r4, #12]
 803c804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803c808:	81a3      	strh	r3, [r4, #12]
 803c80a:	2300      	movs	r3, #0
 803c80c:	6063      	str	r3, [r4, #4]
 803c80e:	6923      	ldr	r3, [r4, #16]
 803c810:	6023      	str	r3, [r4, #0]
 803c812:	89a3      	ldrh	r3, [r4, #12]
 803c814:	f043 0308 	orr.w	r3, r3, #8
 803c818:	81a3      	strh	r3, [r4, #12]
 803c81a:	6923      	ldr	r3, [r4, #16]
 803c81c:	b94b      	cbnz	r3, 803c832 <__swsetup_r+0x9a>
 803c81e:	89a3      	ldrh	r3, [r4, #12]
 803c820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803c824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803c828:	d003      	beq.n	803c832 <__swsetup_r+0x9a>
 803c82a:	4621      	mov	r1, r4
 803c82c:	4630      	mov	r0, r6
 803c82e:	f000 fa01 	bl	803cc34 <__smakebuf_r>
 803c832:	89a0      	ldrh	r0, [r4, #12]
 803c834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c838:	f010 0301 	ands.w	r3, r0, #1
 803c83c:	d00a      	beq.n	803c854 <__swsetup_r+0xbc>
 803c83e:	2300      	movs	r3, #0
 803c840:	60a3      	str	r3, [r4, #8]
 803c842:	6963      	ldr	r3, [r4, #20]
 803c844:	425b      	negs	r3, r3
 803c846:	61a3      	str	r3, [r4, #24]
 803c848:	6923      	ldr	r3, [r4, #16]
 803c84a:	b943      	cbnz	r3, 803c85e <__swsetup_r+0xc6>
 803c84c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803c850:	d1ba      	bne.n	803c7c8 <__swsetup_r+0x30>
 803c852:	bd70      	pop	{r4, r5, r6, pc}
 803c854:	0781      	lsls	r1, r0, #30
 803c856:	bf58      	it	pl
 803c858:	6963      	ldrpl	r3, [r4, #20]
 803c85a:	60a3      	str	r3, [r4, #8]
 803c85c:	e7f4      	b.n	803c848 <__swsetup_r+0xb0>
 803c85e:	2000      	movs	r0, #0
 803c860:	e7f7      	b.n	803c852 <__swsetup_r+0xba>
 803c862:	bf00      	nop
 803c864:	24000104 	.word	0x24000104
 803c868:	080585ec 	.word	0x080585ec
 803c86c:	0805860c 	.word	0x0805860c
 803c870:	080585cc 	.word	0x080585cc

0803c874 <__sflush_r>:
 803c874:	898a      	ldrh	r2, [r1, #12]
 803c876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c87a:	4605      	mov	r5, r0
 803c87c:	0710      	lsls	r0, r2, #28
 803c87e:	460c      	mov	r4, r1
 803c880:	d458      	bmi.n	803c934 <__sflush_r+0xc0>
 803c882:	684b      	ldr	r3, [r1, #4]
 803c884:	2b00      	cmp	r3, #0
 803c886:	dc05      	bgt.n	803c894 <__sflush_r+0x20>
 803c888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803c88a:	2b00      	cmp	r3, #0
 803c88c:	dc02      	bgt.n	803c894 <__sflush_r+0x20>
 803c88e:	2000      	movs	r0, #0
 803c890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c896:	2e00      	cmp	r6, #0
 803c898:	d0f9      	beq.n	803c88e <__sflush_r+0x1a>
 803c89a:	2300      	movs	r3, #0
 803c89c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803c8a0:	682f      	ldr	r7, [r5, #0]
 803c8a2:	602b      	str	r3, [r5, #0]
 803c8a4:	d032      	beq.n	803c90c <__sflush_r+0x98>
 803c8a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803c8a8:	89a3      	ldrh	r3, [r4, #12]
 803c8aa:	075a      	lsls	r2, r3, #29
 803c8ac:	d505      	bpl.n	803c8ba <__sflush_r+0x46>
 803c8ae:	6863      	ldr	r3, [r4, #4]
 803c8b0:	1ac0      	subs	r0, r0, r3
 803c8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803c8b4:	b10b      	cbz	r3, 803c8ba <__sflush_r+0x46>
 803c8b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803c8b8:	1ac0      	subs	r0, r0, r3
 803c8ba:	2300      	movs	r3, #0
 803c8bc:	4602      	mov	r2, r0
 803c8be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803c8c0:	6a21      	ldr	r1, [r4, #32]
 803c8c2:	4628      	mov	r0, r5
 803c8c4:	47b0      	blx	r6
 803c8c6:	1c43      	adds	r3, r0, #1
 803c8c8:	89a3      	ldrh	r3, [r4, #12]
 803c8ca:	d106      	bne.n	803c8da <__sflush_r+0x66>
 803c8cc:	6829      	ldr	r1, [r5, #0]
 803c8ce:	291d      	cmp	r1, #29
 803c8d0:	d82c      	bhi.n	803c92c <__sflush_r+0xb8>
 803c8d2:	4a2a      	ldr	r2, [pc, #168]	; (803c97c <__sflush_r+0x108>)
 803c8d4:	40ca      	lsrs	r2, r1
 803c8d6:	07d6      	lsls	r6, r2, #31
 803c8d8:	d528      	bpl.n	803c92c <__sflush_r+0xb8>
 803c8da:	2200      	movs	r2, #0
 803c8dc:	6062      	str	r2, [r4, #4]
 803c8de:	04d9      	lsls	r1, r3, #19
 803c8e0:	6922      	ldr	r2, [r4, #16]
 803c8e2:	6022      	str	r2, [r4, #0]
 803c8e4:	d504      	bpl.n	803c8f0 <__sflush_r+0x7c>
 803c8e6:	1c42      	adds	r2, r0, #1
 803c8e8:	d101      	bne.n	803c8ee <__sflush_r+0x7a>
 803c8ea:	682b      	ldr	r3, [r5, #0]
 803c8ec:	b903      	cbnz	r3, 803c8f0 <__sflush_r+0x7c>
 803c8ee:	6560      	str	r0, [r4, #84]	; 0x54
 803c8f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803c8f2:	602f      	str	r7, [r5, #0]
 803c8f4:	2900      	cmp	r1, #0
 803c8f6:	d0ca      	beq.n	803c88e <__sflush_r+0x1a>
 803c8f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803c8fc:	4299      	cmp	r1, r3
 803c8fe:	d002      	beq.n	803c906 <__sflush_r+0x92>
 803c900:	4628      	mov	r0, r5
 803c902:	f7ff fad5 	bl	803beb0 <_free_r>
 803c906:	2000      	movs	r0, #0
 803c908:	6360      	str	r0, [r4, #52]	; 0x34
 803c90a:	e7c1      	b.n	803c890 <__sflush_r+0x1c>
 803c90c:	6a21      	ldr	r1, [r4, #32]
 803c90e:	2301      	movs	r3, #1
 803c910:	4628      	mov	r0, r5
 803c912:	47b0      	blx	r6
 803c914:	1c41      	adds	r1, r0, #1
 803c916:	d1c7      	bne.n	803c8a8 <__sflush_r+0x34>
 803c918:	682b      	ldr	r3, [r5, #0]
 803c91a:	2b00      	cmp	r3, #0
 803c91c:	d0c4      	beq.n	803c8a8 <__sflush_r+0x34>
 803c91e:	2b1d      	cmp	r3, #29
 803c920:	d001      	beq.n	803c926 <__sflush_r+0xb2>
 803c922:	2b16      	cmp	r3, #22
 803c924:	d101      	bne.n	803c92a <__sflush_r+0xb6>
 803c926:	602f      	str	r7, [r5, #0]
 803c928:	e7b1      	b.n	803c88e <__sflush_r+0x1a>
 803c92a:	89a3      	ldrh	r3, [r4, #12]
 803c92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c930:	81a3      	strh	r3, [r4, #12]
 803c932:	e7ad      	b.n	803c890 <__sflush_r+0x1c>
 803c934:	690f      	ldr	r7, [r1, #16]
 803c936:	2f00      	cmp	r7, #0
 803c938:	d0a9      	beq.n	803c88e <__sflush_r+0x1a>
 803c93a:	0793      	lsls	r3, r2, #30
 803c93c:	680e      	ldr	r6, [r1, #0]
 803c93e:	bf08      	it	eq
 803c940:	694b      	ldreq	r3, [r1, #20]
 803c942:	600f      	str	r7, [r1, #0]
 803c944:	bf18      	it	ne
 803c946:	2300      	movne	r3, #0
 803c948:	eba6 0807 	sub.w	r8, r6, r7
 803c94c:	608b      	str	r3, [r1, #8]
 803c94e:	f1b8 0f00 	cmp.w	r8, #0
 803c952:	dd9c      	ble.n	803c88e <__sflush_r+0x1a>
 803c954:	6a21      	ldr	r1, [r4, #32]
 803c956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803c958:	4643      	mov	r3, r8
 803c95a:	463a      	mov	r2, r7
 803c95c:	4628      	mov	r0, r5
 803c95e:	47b0      	blx	r6
 803c960:	2800      	cmp	r0, #0
 803c962:	dc06      	bgt.n	803c972 <__sflush_r+0xfe>
 803c964:	89a3      	ldrh	r3, [r4, #12]
 803c966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803c96a:	81a3      	strh	r3, [r4, #12]
 803c96c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 803c970:	e78e      	b.n	803c890 <__sflush_r+0x1c>
 803c972:	4407      	add	r7, r0
 803c974:	eba8 0800 	sub.w	r8, r8, r0
 803c978:	e7e9      	b.n	803c94e <__sflush_r+0xda>
 803c97a:	bf00      	nop
 803c97c:	20400001 	.word	0x20400001

0803c980 <_fflush_r>:
 803c980:	b538      	push	{r3, r4, r5, lr}
 803c982:	690b      	ldr	r3, [r1, #16]
 803c984:	4605      	mov	r5, r0
 803c986:	460c      	mov	r4, r1
 803c988:	b913      	cbnz	r3, 803c990 <_fflush_r+0x10>
 803c98a:	2500      	movs	r5, #0
 803c98c:	4628      	mov	r0, r5
 803c98e:	bd38      	pop	{r3, r4, r5, pc}
 803c990:	b118      	cbz	r0, 803c99a <_fflush_r+0x1a>
 803c992:	6983      	ldr	r3, [r0, #24]
 803c994:	b90b      	cbnz	r3, 803c99a <_fflush_r+0x1a>
 803c996:	f000 f887 	bl	803caa8 <__sinit>
 803c99a:	4b14      	ldr	r3, [pc, #80]	; (803c9ec <_fflush_r+0x6c>)
 803c99c:	429c      	cmp	r4, r3
 803c99e:	d11b      	bne.n	803c9d8 <_fflush_r+0x58>
 803c9a0:	686c      	ldr	r4, [r5, #4]
 803c9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803c9a6:	2b00      	cmp	r3, #0
 803c9a8:	d0ef      	beq.n	803c98a <_fflush_r+0xa>
 803c9aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803c9ac:	07d0      	lsls	r0, r2, #31
 803c9ae:	d404      	bmi.n	803c9ba <_fflush_r+0x3a>
 803c9b0:	0599      	lsls	r1, r3, #22
 803c9b2:	d402      	bmi.n	803c9ba <_fflush_r+0x3a>
 803c9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c9b6:	f000 f915 	bl	803cbe4 <__retarget_lock_acquire_recursive>
 803c9ba:	4628      	mov	r0, r5
 803c9bc:	4621      	mov	r1, r4
 803c9be:	f7ff ff59 	bl	803c874 <__sflush_r>
 803c9c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803c9c4:	07da      	lsls	r2, r3, #31
 803c9c6:	4605      	mov	r5, r0
 803c9c8:	d4e0      	bmi.n	803c98c <_fflush_r+0xc>
 803c9ca:	89a3      	ldrh	r3, [r4, #12]
 803c9cc:	059b      	lsls	r3, r3, #22
 803c9ce:	d4dd      	bmi.n	803c98c <_fflush_r+0xc>
 803c9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803c9d2:	f000 f908 	bl	803cbe6 <__retarget_lock_release_recursive>
 803c9d6:	e7d9      	b.n	803c98c <_fflush_r+0xc>
 803c9d8:	4b05      	ldr	r3, [pc, #20]	; (803c9f0 <_fflush_r+0x70>)
 803c9da:	429c      	cmp	r4, r3
 803c9dc:	d101      	bne.n	803c9e2 <_fflush_r+0x62>
 803c9de:	68ac      	ldr	r4, [r5, #8]
 803c9e0:	e7df      	b.n	803c9a2 <_fflush_r+0x22>
 803c9e2:	4b04      	ldr	r3, [pc, #16]	; (803c9f4 <_fflush_r+0x74>)
 803c9e4:	429c      	cmp	r4, r3
 803c9e6:	bf08      	it	eq
 803c9e8:	68ec      	ldreq	r4, [r5, #12]
 803c9ea:	e7da      	b.n	803c9a2 <_fflush_r+0x22>
 803c9ec:	080585ec 	.word	0x080585ec
 803c9f0:	0805860c 	.word	0x0805860c
 803c9f4:	080585cc 	.word	0x080585cc

0803c9f8 <std>:
 803c9f8:	2300      	movs	r3, #0
 803c9fa:	b510      	push	{r4, lr}
 803c9fc:	4604      	mov	r4, r0
 803c9fe:	e9c0 3300 	strd	r3, r3, [r0]
 803ca02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803ca06:	6083      	str	r3, [r0, #8]
 803ca08:	8181      	strh	r1, [r0, #12]
 803ca0a:	6643      	str	r3, [r0, #100]	; 0x64
 803ca0c:	81c2      	strh	r2, [r0, #14]
 803ca0e:	6183      	str	r3, [r0, #24]
 803ca10:	4619      	mov	r1, r3
 803ca12:	2208      	movs	r2, #8
 803ca14:	305c      	adds	r0, #92	; 0x5c
 803ca16:	f7ff fa43 	bl	803bea0 <memset>
 803ca1a:	4b05      	ldr	r3, [pc, #20]	; (803ca30 <std+0x38>)
 803ca1c:	6263      	str	r3, [r4, #36]	; 0x24
 803ca1e:	4b05      	ldr	r3, [pc, #20]	; (803ca34 <std+0x3c>)
 803ca20:	62a3      	str	r3, [r4, #40]	; 0x28
 803ca22:	4b05      	ldr	r3, [pc, #20]	; (803ca38 <std+0x40>)
 803ca24:	62e3      	str	r3, [r4, #44]	; 0x2c
 803ca26:	4b05      	ldr	r3, [pc, #20]	; (803ca3c <std+0x44>)
 803ca28:	6224      	str	r4, [r4, #32]
 803ca2a:	6323      	str	r3, [r4, #48]	; 0x30
 803ca2c:	bd10      	pop	{r4, pc}
 803ca2e:	bf00      	nop
 803ca30:	0803cccd 	.word	0x0803cccd
 803ca34:	0803ccef 	.word	0x0803ccef
 803ca38:	0803cd27 	.word	0x0803cd27
 803ca3c:	0803cd4b 	.word	0x0803cd4b

0803ca40 <_cleanup_r>:
 803ca40:	4901      	ldr	r1, [pc, #4]	; (803ca48 <_cleanup_r+0x8>)
 803ca42:	f000 b8af 	b.w	803cba4 <_fwalk_reent>
 803ca46:	bf00      	nop
 803ca48:	0803c981 	.word	0x0803c981

0803ca4c <__sfmoreglue>:
 803ca4c:	b570      	push	{r4, r5, r6, lr}
 803ca4e:	2268      	movs	r2, #104	; 0x68
 803ca50:	1e4d      	subs	r5, r1, #1
 803ca52:	4355      	muls	r5, r2
 803ca54:	460e      	mov	r6, r1
 803ca56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803ca5a:	f7ff fa95 	bl	803bf88 <_malloc_r>
 803ca5e:	4604      	mov	r4, r0
 803ca60:	b140      	cbz	r0, 803ca74 <__sfmoreglue+0x28>
 803ca62:	2100      	movs	r1, #0
 803ca64:	e9c0 1600 	strd	r1, r6, [r0]
 803ca68:	300c      	adds	r0, #12
 803ca6a:	60a0      	str	r0, [r4, #8]
 803ca6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803ca70:	f7ff fa16 	bl	803bea0 <memset>
 803ca74:	4620      	mov	r0, r4
 803ca76:	bd70      	pop	{r4, r5, r6, pc}

0803ca78 <__sfp_lock_acquire>:
 803ca78:	4801      	ldr	r0, [pc, #4]	; (803ca80 <__sfp_lock_acquire+0x8>)
 803ca7a:	f000 b8b3 	b.w	803cbe4 <__retarget_lock_acquire_recursive>
 803ca7e:	bf00      	nop
 803ca80:	240267e1 	.word	0x240267e1

0803ca84 <__sfp_lock_release>:
 803ca84:	4801      	ldr	r0, [pc, #4]	; (803ca8c <__sfp_lock_release+0x8>)
 803ca86:	f000 b8ae 	b.w	803cbe6 <__retarget_lock_release_recursive>
 803ca8a:	bf00      	nop
 803ca8c:	240267e1 	.word	0x240267e1

0803ca90 <__sinit_lock_acquire>:
 803ca90:	4801      	ldr	r0, [pc, #4]	; (803ca98 <__sinit_lock_acquire+0x8>)
 803ca92:	f000 b8a7 	b.w	803cbe4 <__retarget_lock_acquire_recursive>
 803ca96:	bf00      	nop
 803ca98:	240267e2 	.word	0x240267e2

0803ca9c <__sinit_lock_release>:
 803ca9c:	4801      	ldr	r0, [pc, #4]	; (803caa4 <__sinit_lock_release+0x8>)
 803ca9e:	f000 b8a2 	b.w	803cbe6 <__retarget_lock_release_recursive>
 803caa2:	bf00      	nop
 803caa4:	240267e2 	.word	0x240267e2

0803caa8 <__sinit>:
 803caa8:	b510      	push	{r4, lr}
 803caaa:	4604      	mov	r4, r0
 803caac:	f7ff fff0 	bl	803ca90 <__sinit_lock_acquire>
 803cab0:	69a3      	ldr	r3, [r4, #24]
 803cab2:	b11b      	cbz	r3, 803cabc <__sinit+0x14>
 803cab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803cab8:	f7ff bff0 	b.w	803ca9c <__sinit_lock_release>
 803cabc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803cac0:	6523      	str	r3, [r4, #80]	; 0x50
 803cac2:	4b13      	ldr	r3, [pc, #76]	; (803cb10 <__sinit+0x68>)
 803cac4:	4a13      	ldr	r2, [pc, #76]	; (803cb14 <__sinit+0x6c>)
 803cac6:	681b      	ldr	r3, [r3, #0]
 803cac8:	62a2      	str	r2, [r4, #40]	; 0x28
 803caca:	42a3      	cmp	r3, r4
 803cacc:	bf04      	itt	eq
 803cace:	2301      	moveq	r3, #1
 803cad0:	61a3      	streq	r3, [r4, #24]
 803cad2:	4620      	mov	r0, r4
 803cad4:	f000 f820 	bl	803cb18 <__sfp>
 803cad8:	6060      	str	r0, [r4, #4]
 803cada:	4620      	mov	r0, r4
 803cadc:	f000 f81c 	bl	803cb18 <__sfp>
 803cae0:	60a0      	str	r0, [r4, #8]
 803cae2:	4620      	mov	r0, r4
 803cae4:	f000 f818 	bl	803cb18 <__sfp>
 803cae8:	2200      	movs	r2, #0
 803caea:	60e0      	str	r0, [r4, #12]
 803caec:	2104      	movs	r1, #4
 803caee:	6860      	ldr	r0, [r4, #4]
 803caf0:	f7ff ff82 	bl	803c9f8 <std>
 803caf4:	68a0      	ldr	r0, [r4, #8]
 803caf6:	2201      	movs	r2, #1
 803caf8:	2109      	movs	r1, #9
 803cafa:	f7ff ff7d 	bl	803c9f8 <std>
 803cafe:	68e0      	ldr	r0, [r4, #12]
 803cb00:	2202      	movs	r2, #2
 803cb02:	2112      	movs	r1, #18
 803cb04:	f7ff ff78 	bl	803c9f8 <std>
 803cb08:	2301      	movs	r3, #1
 803cb0a:	61a3      	str	r3, [r4, #24]
 803cb0c:	e7d2      	b.n	803cab4 <__sinit+0xc>
 803cb0e:	bf00      	nop
 803cb10:	08058594 	.word	0x08058594
 803cb14:	0803ca41 	.word	0x0803ca41

0803cb18 <__sfp>:
 803cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cb1a:	4607      	mov	r7, r0
 803cb1c:	f7ff ffac 	bl	803ca78 <__sfp_lock_acquire>
 803cb20:	4b1e      	ldr	r3, [pc, #120]	; (803cb9c <__sfp+0x84>)
 803cb22:	681e      	ldr	r6, [r3, #0]
 803cb24:	69b3      	ldr	r3, [r6, #24]
 803cb26:	b913      	cbnz	r3, 803cb2e <__sfp+0x16>
 803cb28:	4630      	mov	r0, r6
 803cb2a:	f7ff ffbd 	bl	803caa8 <__sinit>
 803cb2e:	3648      	adds	r6, #72	; 0x48
 803cb30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803cb34:	3b01      	subs	r3, #1
 803cb36:	d503      	bpl.n	803cb40 <__sfp+0x28>
 803cb38:	6833      	ldr	r3, [r6, #0]
 803cb3a:	b30b      	cbz	r3, 803cb80 <__sfp+0x68>
 803cb3c:	6836      	ldr	r6, [r6, #0]
 803cb3e:	e7f7      	b.n	803cb30 <__sfp+0x18>
 803cb40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803cb44:	b9d5      	cbnz	r5, 803cb7c <__sfp+0x64>
 803cb46:	4b16      	ldr	r3, [pc, #88]	; (803cba0 <__sfp+0x88>)
 803cb48:	60e3      	str	r3, [r4, #12]
 803cb4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803cb4e:	6665      	str	r5, [r4, #100]	; 0x64
 803cb50:	f000 f847 	bl	803cbe2 <__retarget_lock_init_recursive>
 803cb54:	f7ff ff96 	bl	803ca84 <__sfp_lock_release>
 803cb58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803cb5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803cb60:	6025      	str	r5, [r4, #0]
 803cb62:	61a5      	str	r5, [r4, #24]
 803cb64:	2208      	movs	r2, #8
 803cb66:	4629      	mov	r1, r5
 803cb68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803cb6c:	f7ff f998 	bl	803bea0 <memset>
 803cb70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803cb74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803cb78:	4620      	mov	r0, r4
 803cb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803cb7c:	3468      	adds	r4, #104	; 0x68
 803cb7e:	e7d9      	b.n	803cb34 <__sfp+0x1c>
 803cb80:	2104      	movs	r1, #4
 803cb82:	4638      	mov	r0, r7
 803cb84:	f7ff ff62 	bl	803ca4c <__sfmoreglue>
 803cb88:	4604      	mov	r4, r0
 803cb8a:	6030      	str	r0, [r6, #0]
 803cb8c:	2800      	cmp	r0, #0
 803cb8e:	d1d5      	bne.n	803cb3c <__sfp+0x24>
 803cb90:	f7ff ff78 	bl	803ca84 <__sfp_lock_release>
 803cb94:	230c      	movs	r3, #12
 803cb96:	603b      	str	r3, [r7, #0]
 803cb98:	e7ee      	b.n	803cb78 <__sfp+0x60>
 803cb9a:	bf00      	nop
 803cb9c:	08058594 	.word	0x08058594
 803cba0:	ffff0001 	.word	0xffff0001

0803cba4 <_fwalk_reent>:
 803cba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803cba8:	4606      	mov	r6, r0
 803cbaa:	4688      	mov	r8, r1
 803cbac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803cbb0:	2700      	movs	r7, #0
 803cbb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803cbb6:	f1b9 0901 	subs.w	r9, r9, #1
 803cbba:	d505      	bpl.n	803cbc8 <_fwalk_reent+0x24>
 803cbbc:	6824      	ldr	r4, [r4, #0]
 803cbbe:	2c00      	cmp	r4, #0
 803cbc0:	d1f7      	bne.n	803cbb2 <_fwalk_reent+0xe>
 803cbc2:	4638      	mov	r0, r7
 803cbc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803cbc8:	89ab      	ldrh	r3, [r5, #12]
 803cbca:	2b01      	cmp	r3, #1
 803cbcc:	d907      	bls.n	803cbde <_fwalk_reent+0x3a>
 803cbce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803cbd2:	3301      	adds	r3, #1
 803cbd4:	d003      	beq.n	803cbde <_fwalk_reent+0x3a>
 803cbd6:	4629      	mov	r1, r5
 803cbd8:	4630      	mov	r0, r6
 803cbda:	47c0      	blx	r8
 803cbdc:	4307      	orrs	r7, r0
 803cbde:	3568      	adds	r5, #104	; 0x68
 803cbe0:	e7e9      	b.n	803cbb6 <_fwalk_reent+0x12>

0803cbe2 <__retarget_lock_init_recursive>:
 803cbe2:	4770      	bx	lr

0803cbe4 <__retarget_lock_acquire_recursive>:
 803cbe4:	4770      	bx	lr

0803cbe6 <__retarget_lock_release_recursive>:
 803cbe6:	4770      	bx	lr

0803cbe8 <__swhatbuf_r>:
 803cbe8:	b570      	push	{r4, r5, r6, lr}
 803cbea:	460e      	mov	r6, r1
 803cbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cbf0:	2900      	cmp	r1, #0
 803cbf2:	b096      	sub	sp, #88	; 0x58
 803cbf4:	4614      	mov	r4, r2
 803cbf6:	461d      	mov	r5, r3
 803cbf8:	da08      	bge.n	803cc0c <__swhatbuf_r+0x24>
 803cbfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 803cbfe:	2200      	movs	r2, #0
 803cc00:	602a      	str	r2, [r5, #0]
 803cc02:	061a      	lsls	r2, r3, #24
 803cc04:	d410      	bmi.n	803cc28 <__swhatbuf_r+0x40>
 803cc06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803cc0a:	e00e      	b.n	803cc2a <__swhatbuf_r+0x42>
 803cc0c:	466a      	mov	r2, sp
 803cc0e:	f000 f8c3 	bl	803cd98 <_fstat_r>
 803cc12:	2800      	cmp	r0, #0
 803cc14:	dbf1      	blt.n	803cbfa <__swhatbuf_r+0x12>
 803cc16:	9a01      	ldr	r2, [sp, #4]
 803cc18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803cc1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803cc20:	425a      	negs	r2, r3
 803cc22:	415a      	adcs	r2, r3
 803cc24:	602a      	str	r2, [r5, #0]
 803cc26:	e7ee      	b.n	803cc06 <__swhatbuf_r+0x1e>
 803cc28:	2340      	movs	r3, #64	; 0x40
 803cc2a:	2000      	movs	r0, #0
 803cc2c:	6023      	str	r3, [r4, #0]
 803cc2e:	b016      	add	sp, #88	; 0x58
 803cc30:	bd70      	pop	{r4, r5, r6, pc}
	...

0803cc34 <__smakebuf_r>:
 803cc34:	898b      	ldrh	r3, [r1, #12]
 803cc36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803cc38:	079d      	lsls	r5, r3, #30
 803cc3a:	4606      	mov	r6, r0
 803cc3c:	460c      	mov	r4, r1
 803cc3e:	d507      	bpl.n	803cc50 <__smakebuf_r+0x1c>
 803cc40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803cc44:	6023      	str	r3, [r4, #0]
 803cc46:	6123      	str	r3, [r4, #16]
 803cc48:	2301      	movs	r3, #1
 803cc4a:	6163      	str	r3, [r4, #20]
 803cc4c:	b002      	add	sp, #8
 803cc4e:	bd70      	pop	{r4, r5, r6, pc}
 803cc50:	ab01      	add	r3, sp, #4
 803cc52:	466a      	mov	r2, sp
 803cc54:	f7ff ffc8 	bl	803cbe8 <__swhatbuf_r>
 803cc58:	9900      	ldr	r1, [sp, #0]
 803cc5a:	4605      	mov	r5, r0
 803cc5c:	4630      	mov	r0, r6
 803cc5e:	f7ff f993 	bl	803bf88 <_malloc_r>
 803cc62:	b948      	cbnz	r0, 803cc78 <__smakebuf_r+0x44>
 803cc64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803cc68:	059a      	lsls	r2, r3, #22
 803cc6a:	d4ef      	bmi.n	803cc4c <__smakebuf_r+0x18>
 803cc6c:	f023 0303 	bic.w	r3, r3, #3
 803cc70:	f043 0302 	orr.w	r3, r3, #2
 803cc74:	81a3      	strh	r3, [r4, #12]
 803cc76:	e7e3      	b.n	803cc40 <__smakebuf_r+0xc>
 803cc78:	4b0d      	ldr	r3, [pc, #52]	; (803ccb0 <__smakebuf_r+0x7c>)
 803cc7a:	62b3      	str	r3, [r6, #40]	; 0x28
 803cc7c:	89a3      	ldrh	r3, [r4, #12]
 803cc7e:	6020      	str	r0, [r4, #0]
 803cc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803cc84:	81a3      	strh	r3, [r4, #12]
 803cc86:	9b00      	ldr	r3, [sp, #0]
 803cc88:	6163      	str	r3, [r4, #20]
 803cc8a:	9b01      	ldr	r3, [sp, #4]
 803cc8c:	6120      	str	r0, [r4, #16]
 803cc8e:	b15b      	cbz	r3, 803cca8 <__smakebuf_r+0x74>
 803cc90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cc94:	4630      	mov	r0, r6
 803cc96:	f000 f891 	bl	803cdbc <_isatty_r>
 803cc9a:	b128      	cbz	r0, 803cca8 <__smakebuf_r+0x74>
 803cc9c:	89a3      	ldrh	r3, [r4, #12]
 803cc9e:	f023 0303 	bic.w	r3, r3, #3
 803cca2:	f043 0301 	orr.w	r3, r3, #1
 803cca6:	81a3      	strh	r3, [r4, #12]
 803cca8:	89a0      	ldrh	r0, [r4, #12]
 803ccaa:	4305      	orrs	r5, r0
 803ccac:	81a5      	strh	r5, [r4, #12]
 803ccae:	e7cd      	b.n	803cc4c <__smakebuf_r+0x18>
 803ccb0:	0803ca41 	.word	0x0803ca41

0803ccb4 <__malloc_lock>:
 803ccb4:	4801      	ldr	r0, [pc, #4]	; (803ccbc <__malloc_lock+0x8>)
 803ccb6:	f7ff bf95 	b.w	803cbe4 <__retarget_lock_acquire_recursive>
 803ccba:	bf00      	nop
 803ccbc:	240267e0 	.word	0x240267e0

0803ccc0 <__malloc_unlock>:
 803ccc0:	4801      	ldr	r0, [pc, #4]	; (803ccc8 <__malloc_unlock+0x8>)
 803ccc2:	f7ff bf90 	b.w	803cbe6 <__retarget_lock_release_recursive>
 803ccc6:	bf00      	nop
 803ccc8:	240267e0 	.word	0x240267e0

0803cccc <__sread>:
 803cccc:	b510      	push	{r4, lr}
 803ccce:	460c      	mov	r4, r1
 803ccd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803ccd4:	f000 f894 	bl	803ce00 <_read_r>
 803ccd8:	2800      	cmp	r0, #0
 803ccda:	bfab      	itete	ge
 803ccdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803ccde:	89a3      	ldrhlt	r3, [r4, #12]
 803cce0:	181b      	addge	r3, r3, r0
 803cce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803cce6:	bfac      	ite	ge
 803cce8:	6563      	strge	r3, [r4, #84]	; 0x54
 803ccea:	81a3      	strhlt	r3, [r4, #12]
 803ccec:	bd10      	pop	{r4, pc}

0803ccee <__swrite>:
 803ccee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803ccf2:	461f      	mov	r7, r3
 803ccf4:	898b      	ldrh	r3, [r1, #12]
 803ccf6:	05db      	lsls	r3, r3, #23
 803ccf8:	4605      	mov	r5, r0
 803ccfa:	460c      	mov	r4, r1
 803ccfc:	4616      	mov	r6, r2
 803ccfe:	d505      	bpl.n	803cd0c <__swrite+0x1e>
 803cd00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cd04:	2302      	movs	r3, #2
 803cd06:	2200      	movs	r2, #0
 803cd08:	f000 f868 	bl	803cddc <_lseek_r>
 803cd0c:	89a3      	ldrh	r3, [r4, #12]
 803cd0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803cd12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803cd16:	81a3      	strh	r3, [r4, #12]
 803cd18:	4632      	mov	r2, r6
 803cd1a:	463b      	mov	r3, r7
 803cd1c:	4628      	mov	r0, r5
 803cd1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803cd22:	f000 b817 	b.w	803cd54 <_write_r>

0803cd26 <__sseek>:
 803cd26:	b510      	push	{r4, lr}
 803cd28:	460c      	mov	r4, r1
 803cd2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cd2e:	f000 f855 	bl	803cddc <_lseek_r>
 803cd32:	1c43      	adds	r3, r0, #1
 803cd34:	89a3      	ldrh	r3, [r4, #12]
 803cd36:	bf15      	itete	ne
 803cd38:	6560      	strne	r0, [r4, #84]	; 0x54
 803cd3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803cd3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803cd42:	81a3      	strheq	r3, [r4, #12]
 803cd44:	bf18      	it	ne
 803cd46:	81a3      	strhne	r3, [r4, #12]
 803cd48:	bd10      	pop	{r4, pc}

0803cd4a <__sclose>:
 803cd4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803cd4e:	f000 b813 	b.w	803cd78 <_close_r>
	...

0803cd54 <_write_r>:
 803cd54:	b538      	push	{r3, r4, r5, lr}
 803cd56:	4d07      	ldr	r5, [pc, #28]	; (803cd74 <_write_r+0x20>)
 803cd58:	4604      	mov	r4, r0
 803cd5a:	4608      	mov	r0, r1
 803cd5c:	4611      	mov	r1, r2
 803cd5e:	2200      	movs	r2, #0
 803cd60:	602a      	str	r2, [r5, #0]
 803cd62:	461a      	mov	r2, r3
 803cd64:	f7ed f93f 	bl	8029fe6 <_write>
 803cd68:	1c43      	adds	r3, r0, #1
 803cd6a:	d102      	bne.n	803cd72 <_write_r+0x1e>
 803cd6c:	682b      	ldr	r3, [r5, #0]
 803cd6e:	b103      	cbz	r3, 803cd72 <_write_r+0x1e>
 803cd70:	6023      	str	r3, [r4, #0]
 803cd72:	bd38      	pop	{r3, r4, r5, pc}
 803cd74:	240267e4 	.word	0x240267e4

0803cd78 <_close_r>:
 803cd78:	b538      	push	{r3, r4, r5, lr}
 803cd7a:	4d06      	ldr	r5, [pc, #24]	; (803cd94 <_close_r+0x1c>)
 803cd7c:	2300      	movs	r3, #0
 803cd7e:	4604      	mov	r4, r0
 803cd80:	4608      	mov	r0, r1
 803cd82:	602b      	str	r3, [r5, #0]
 803cd84:	f7ed f94b 	bl	802a01e <_close>
 803cd88:	1c43      	adds	r3, r0, #1
 803cd8a:	d102      	bne.n	803cd92 <_close_r+0x1a>
 803cd8c:	682b      	ldr	r3, [r5, #0]
 803cd8e:	b103      	cbz	r3, 803cd92 <_close_r+0x1a>
 803cd90:	6023      	str	r3, [r4, #0]
 803cd92:	bd38      	pop	{r3, r4, r5, pc}
 803cd94:	240267e4 	.word	0x240267e4

0803cd98 <_fstat_r>:
 803cd98:	b538      	push	{r3, r4, r5, lr}
 803cd9a:	4d07      	ldr	r5, [pc, #28]	; (803cdb8 <_fstat_r+0x20>)
 803cd9c:	2300      	movs	r3, #0
 803cd9e:	4604      	mov	r4, r0
 803cda0:	4608      	mov	r0, r1
 803cda2:	4611      	mov	r1, r2
 803cda4:	602b      	str	r3, [r5, #0]
 803cda6:	f7ed f946 	bl	802a036 <_fstat>
 803cdaa:	1c43      	adds	r3, r0, #1
 803cdac:	d102      	bne.n	803cdb4 <_fstat_r+0x1c>
 803cdae:	682b      	ldr	r3, [r5, #0]
 803cdb0:	b103      	cbz	r3, 803cdb4 <_fstat_r+0x1c>
 803cdb2:	6023      	str	r3, [r4, #0]
 803cdb4:	bd38      	pop	{r3, r4, r5, pc}
 803cdb6:	bf00      	nop
 803cdb8:	240267e4 	.word	0x240267e4

0803cdbc <_isatty_r>:
 803cdbc:	b538      	push	{r3, r4, r5, lr}
 803cdbe:	4d06      	ldr	r5, [pc, #24]	; (803cdd8 <_isatty_r+0x1c>)
 803cdc0:	2300      	movs	r3, #0
 803cdc2:	4604      	mov	r4, r0
 803cdc4:	4608      	mov	r0, r1
 803cdc6:	602b      	str	r3, [r5, #0]
 803cdc8:	f7ed f945 	bl	802a056 <_isatty>
 803cdcc:	1c43      	adds	r3, r0, #1
 803cdce:	d102      	bne.n	803cdd6 <_isatty_r+0x1a>
 803cdd0:	682b      	ldr	r3, [r5, #0]
 803cdd2:	b103      	cbz	r3, 803cdd6 <_isatty_r+0x1a>
 803cdd4:	6023      	str	r3, [r4, #0]
 803cdd6:	bd38      	pop	{r3, r4, r5, pc}
 803cdd8:	240267e4 	.word	0x240267e4

0803cddc <_lseek_r>:
 803cddc:	b538      	push	{r3, r4, r5, lr}
 803cdde:	4d07      	ldr	r5, [pc, #28]	; (803cdfc <_lseek_r+0x20>)
 803cde0:	4604      	mov	r4, r0
 803cde2:	4608      	mov	r0, r1
 803cde4:	4611      	mov	r1, r2
 803cde6:	2200      	movs	r2, #0
 803cde8:	602a      	str	r2, [r5, #0]
 803cdea:	461a      	mov	r2, r3
 803cdec:	f7ed f93e 	bl	802a06c <_lseek>
 803cdf0:	1c43      	adds	r3, r0, #1
 803cdf2:	d102      	bne.n	803cdfa <_lseek_r+0x1e>
 803cdf4:	682b      	ldr	r3, [r5, #0]
 803cdf6:	b103      	cbz	r3, 803cdfa <_lseek_r+0x1e>
 803cdf8:	6023      	str	r3, [r4, #0]
 803cdfa:	bd38      	pop	{r3, r4, r5, pc}
 803cdfc:	240267e4 	.word	0x240267e4

0803ce00 <_read_r>:
 803ce00:	b538      	push	{r3, r4, r5, lr}
 803ce02:	4d07      	ldr	r5, [pc, #28]	; (803ce20 <_read_r+0x20>)
 803ce04:	4604      	mov	r4, r0
 803ce06:	4608      	mov	r0, r1
 803ce08:	4611      	mov	r1, r2
 803ce0a:	2200      	movs	r2, #0
 803ce0c:	602a      	str	r2, [r5, #0]
 803ce0e:	461a      	mov	r2, r3
 803ce10:	f7ed f8cc 	bl	8029fac <_read>
 803ce14:	1c43      	adds	r3, r0, #1
 803ce16:	d102      	bne.n	803ce1e <_read_r+0x1e>
 803ce18:	682b      	ldr	r3, [r5, #0]
 803ce1a:	b103      	cbz	r3, 803ce1e <_read_r+0x1e>
 803ce1c:	6023      	str	r3, [r4, #0]
 803ce1e:	bd38      	pop	{r3, r4, r5, pc}
 803ce20:	240267e4 	.word	0x240267e4

0803ce24 <_init>:
 803ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ce26:	bf00      	nop
 803ce28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803ce2a:	bc08      	pop	{r3}
 803ce2c:	469e      	mov	lr, r3
 803ce2e:	4770      	bx	lr

0803ce30 <_fini>:
 803ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ce32:	bf00      	nop
 803ce34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803ce36:	bc08      	pop	{r3}
 803ce38:	469e      	mov	lr, r3
 803ce3a:	4770      	bx	lr
