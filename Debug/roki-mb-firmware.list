
roki-mb-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000194f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001aabc  08019798  08019798  00029798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08034254  08034254  00044254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0803425c  0803425c  0004425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08034264  08034264  00044264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  0803426c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003480  240001e8  08034454  000501e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24003668  08034454  00053668  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000501e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004f7af  00000000  00000000  00050216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000076a7  00000000  00000000  0009f9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003378  00000000  00000000  000a7070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000030c8  00000000  00000000  000aa3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00045497  00000000  00000000  000ad4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039a04  00000000  00000000  000f2947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018bc56  00000000  00000000  0012c34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002b7fa1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000eaac  00000000  00000000  002b7ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019780 	.word	0x08019780

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08019780 	.word	0x08019780

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>:
 *      Author: tndrd
 */

#include "BHYWrapper.hpp"

BHYWrapper::BHYWrapper(SPI_HandleTypeDef *spiHandle) :
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
		SPIHandle { spiHandle } {
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	683a      	ldr	r2, [r7, #0]
 8000692:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
	assert(spiHandle);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d105      	bne.n	80006a8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x24>
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x30>)
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x34>)
 80006a0:	210c      	movs	r1, #12
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef+0x38>)
 80006a4:	f018 f818 	bl	80186d8 <__assert_func>
}
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	08019798 	.word	0x08019798
 80006b8:	080197a4 	.word	0x080197a4
 80006bc:	080197d0 	.word	0x080197d0

080006c0 <_ZN10BHYWrapper4InitEfm>:

int BHYWrapper::Init(float sampleRate, uint32_t reportLatency) {
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b08b      	sub	sp, #44	; 0x2c
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80006cc:	6079      	str	r1, [r7, #4]
	uint8_t product_id = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75bb      	strb	r3, [r7, #22]
	uint16_t bhy2KernelVersion;

	uint8_t hintr_ctrl = BHY2_ICTL_DISABLE_STATUS_FIFO | BHY2_ICTL_DISABLE_DEBUG;
 80006d2:	230c      	movs	r3, #12
 80006d4:	74fb      	strb	r3, [r7, #19]

	uint8_t hif_ctrl = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	75fb      	strb	r3, [r7, #23]
	uint8_t boot_status;
	uint8_t sensor_error;

	spi_init(SPIHandle);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f8d3 3938 	ldr.w	r3, [r3, #2360]	; 0x938
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa27 	bl	8000b34 <_Z8spi_initP19__SPI_HandleTypeDef>

	if (bhy2_init(BHY2_SPI_INTERFACE, &bhy2_spi_read, &bhy2_spi_write,
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	9302      	str	r3, [sp, #8]
 80006ea:	2300      	movs	r3, #0
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4b99      	ldr	r3, [pc, #612]	; (8000958 <_ZN10BHYWrapper4InitEfm+0x298>)
 80006f4:	4a99      	ldr	r2, [pc, #612]	; (800095c <_ZN10BHYWrapper4InitEfm+0x29c>)
 80006f6:	499a      	ldr	r1, [pc, #616]	; (8000960 <_ZN10BHYWrapper4InitEfm+0x2a0>)
 80006f8:	2001      	movs	r0, #1
 80006fa:	f005 fb48 	bl	8005d8e <bhy2_init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf14      	ite	ne
 8000704:	2301      	movne	r3, #1
 8000706:	2300      	moveq	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <_ZN10BHYWrapper4InitEfm+0x52>
			bhy2_delay_us, 64, NULL, &bhy2))
		return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e11d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_soft_reset(&bhy2))
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f005 fb22 	bl	8005d5e <bhy2_soft_reset>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf14      	ite	ne
 8000720:	2301      	movne	r3, #1
 8000722:	2300      	moveq	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <_ZN10BHYWrapper4InitEfm+0x6e>
		return 2;
 800072a:	2302      	movs	r3, #2
 800072c:	e10f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_product_id(&product_id, &bhy2))
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	f107 0316 	add.w	r3, r7, #22
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f005 f9fd 	bl	8005b36 <bhy2_get_product_id>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_ZN10BHYWrapper4InitEfm+0x90>
		return 3;
 800074c:	2303      	movs	r3, #3
 800074e:	e0fe      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (product_id != BHY2_PRODUCT_ID)
 8000750:	7dbb      	ldrb	r3, [r7, #22]
 8000752:	2b89      	cmp	r3, #137	; 0x89
 8000754:	d001      	beq.n	800075a <_ZN10BHYWrapper4InitEfm+0x9a>
		return 4;
 8000756:	2304      	movs	r3, #4
 8000758:	e0f9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_interrupt_ctrl(hintr_ctrl, &bhy2))
 800075a:	7cfb      	ldrb	r3, [r7, #19]
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f005 fa8f 	bl	8005c84 <bhy2_set_host_interrupt_ctrl>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZN10BHYWrapper4InitEfm+0xba>
		return 5;
 8000776:	2305      	movs	r3, #5
 8000778:	e0e9      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_host_interrupt_ctrl(&hintr_ctrl, &bhy2))
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f107 0313 	add.w	r3, r7, #19
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f005 fa9a 	bl	8005cbc <bhy2_get_host_interrupt_ctrl>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	bf14      	ite	ne
 800078e:	2301      	movne	r3, #1
 8000790:	2300      	moveq	r3, #0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <_ZN10BHYWrapper4InitEfm+0xdc>
		return 6;
 8000798:	2306      	movs	r3, #6
 800079a:	e0d8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_host_intf_ctrl(hif_ctrl, &bhy2))
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fabf 	bl	8005d26 <bhy2_set_host_intf_ctrl>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	bf14      	ite	ne
 80007ae:	2301      	movne	r3, #1
 80007b0:	2300      	moveq	r3, #0
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <_ZN10BHYWrapper4InitEfm+0xfc>
		return 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	e0c8      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_boot_status(&boot_status, &bhy2))
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	f107 0312 	add.w	r3, r7, #18
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 f9ea 	bl	8005b9e <bhy2_get_boot_status>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <_ZN10BHYWrapper4InitEfm+0x11e>
		return 8;
 80007da:	2308      	movs	r3, #8
 80007dc:	e0b7      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 80007de:	7cbb      	ldrb	r3, [r7, #18]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <_ZN10BHYWrapper4InitEfm+0x12c>
		return 9;
 80007e8:	2309      	movs	r3, #9
 80007ea:	e0b0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_upload_firmware_to_ram(bhy2_firmware_image,
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	461a      	mov	r2, r3
 80007f0:	495c      	ldr	r1, [pc, #368]	; (8000964 <_ZN10BHYWrapper4InitEfm+0x2a4>)
 80007f2:	485d      	ldr	r0, [pc, #372]	; (8000968 <_ZN10BHYWrapper4InitEfm+0x2a8>)
 80007f4:	f005 fa0f 	bl	8005c16 <bhy2_upload_firmware_to_ram>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf14      	ite	ne
 80007fe:	2301      	movne	r3, #1
 8000800:	2300      	moveq	r3, #0
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <_ZN10BHYWrapper4InitEfm+0x14c>
			sizeof(bhy2_firmware_image), &bhy2))
		return 9;
 8000808:	2309      	movs	r3, #9
 800080a:	e0a0      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	f107 0311 	add.w	r3, r7, #17
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fba1 	bl	8005f5c <bhy2_get_error_value>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <_ZN10BHYWrapper4InitEfm+0x16e>
		return 10;
 800082a:	230a      	movs	r3, #10
 800082c:	e08f      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 800082e:	7c7b      	ldrb	r3, [r7, #17]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <_ZN10BHYWrapper4InitEfm+0x178>
		return 11;
 8000834:	230b      	movs	r3, #11
 8000836:	e08a      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_boot_from_ram(&bhy2))
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fa0a 	bl	8005c54 <bhy2_boot_from_ram>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	bf14      	ite	ne
 8000846:	2301      	movne	r3, #1
 8000848:	2300      	moveq	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <_ZN10BHYWrapper4InitEfm+0x194>
		return 12;
 8000850:	230c      	movs	r3, #12
 8000852:	e07c      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_error_value(&sensor_error, &bhy2))
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	f107 0311 	add.w	r3, r7, #17
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f005 fb7d 	bl	8005f5c <bhy2_get_error_value>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_ZN10BHYWrapper4InitEfm+0x1b6>
		return 13;
 8000872:	230d      	movs	r3, #13
 8000874:	e06b      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (sensor_error)
 8000876:	7c7b      	ldrb	r3, [r7, #17]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZN10BHYWrapper4InitEfm+0x1c0>
		return 14;
 800087c:	230e      	movs	r3, #14
 800087e:	e066      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_kernel_version(&bhy2KernelVersion, &bhy2))
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f005 f96e 	bl	8005b6a <bhy2_get_kernel_version>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	bf14      	ite	ne
 8000894:	2301      	movne	r3, #1
 8000896:	2300      	moveq	r3, #0
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <_ZN10BHYWrapper4InitEfm+0x1e2>
		return 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	e055      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2KernelVersion == 0)
 80008a2:	8abb      	ldrh	r3, [r7, #20]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d101      	bne.n	80008ac <_ZN10BHYWrapper4InitEfm+0x1ec>
		return 16;
 80008a8:	2310      	movs	r3, #16
 80008aa:	e050      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
			BHYWrapper::ParseFrame, &CurrentFrame, &bhy2))
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f241 123c 	movw	r2, #4412	; 0x113c
 80008b2:	441a      	add	r2, r3
	if (bhy2_register_fifo_parse_callback(BHY2_SENSOR_ID_GAMERV,
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	492d      	ldr	r1, [pc, #180]	; (800096c <_ZN10BHYWrapper4InitEfm+0x2ac>)
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f005 fa92 	bl	8005de2 <bhy2_register_fifo_parse_callback>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <_ZN10BHYWrapper4InitEfm+0x212>
		return 17;
 80008ce:	2311      	movs	r3, #17
 80008d0:	e03d      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f907 	bl	8000aec <_ZNSt5arrayIhLj2048EE4dataEv>
 80008de:	4604      	mov	r4, r0
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f90d 	bl	8000b06 <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80008ec:	4601      	mov	r1, r0
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4620      	mov	r0, r4
 80008f4:	f004 ffcd 	bl	8005892 <bhy2_get_and_process_fifo>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZN10BHYWrapper4InitEfm+0x24c>
		return 18;
 8000908:	2312      	movs	r3, #18
 800090a:	e020      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_update_virtual_sensor_list(&bhy2))
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4618      	mov	r0, r3
 8000910:	f005 fa96 	bl	8005e40 <bhy2_update_virtual_sensor_list>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	bf14      	ite	ne
 800091a:	2301      	movne	r3, #1
 800091c:	2300      	moveq	r3, #0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <_ZN10BHYWrapper4InitEfm+0x268>
		return 16;
 8000924:	2310      	movs	r3, #16
 8000926:	e012      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	if (bhy2_set_virt_sensor_cfg(BHY2_SENSOR_ID_GAMERV, sampleRate,
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	461a      	mov	r2, r3
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f005 f8de 	bl	8005af4 <bhy2_set_virt_sensor_cfg>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <_ZN10BHYWrapper4InitEfm+0x28c>
			reportLatency, &bhy2))
		return 17;
 8000948:	2311      	movs	r3, #17
 800094a:	e000      	b.n	800094e <_ZN10BHYWrapper4InitEfm+0x28e>

	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	371c      	adds	r7, #28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	08000cdd 	.word	0x08000cdd
 800095c:	08000c59 	.word	0x08000c59
 8000960:	08000bcd 	.word	0x08000bcd
 8000964:	0001a66c 	.word	0x0001a66c
 8000968:	08019ac8 	.word	0x08019ac8
 800096c:	080009f5 	.word	0x080009f5

08000970 <_ZN10BHYWrapper4PollEv>:

bool BHYWrapper::Poll() {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	uint8_t interruptStatus = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
	bhy2_get_interrupt_status(&interruptStatus, &bhy2);
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f107 030f 	add.w	r3, r7, #15
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f005 f9b4 	bl	8005cf2 <bhy2_get_interrupt_status>

	if (interruptStatus) {
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d014      	beq.n	80009ba <_ZN10BHYWrapper4PollEv+0x4a>
		bhy2_get_and_process_fifo(WorkBuffer.data(), WorkBuffer.size(), &bhy2);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8a8 	bl	8000aec <_ZNSt5arrayIhLj2048EE4dataEv>
 800099c:	4604      	mov	r4, r0
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f8ae 	bl	8000b06 <_ZNKSt5arrayIhLj2048EE4sizeEv>
 80009aa:	4601      	mov	r1, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4620      	mov	r0, r4
 80009b2:	f004 ff6e 	bl	8005892 <bhy2_get_and_process_fifo>
		return true;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <_ZN10BHYWrapper4PollEv+0x4c>
	}

	return false;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}

080009c4 <_ZNK10BHYWrapper8GetFrameEv>:

BHYWrapper::BHYFrame BHYWrapper::GetFrame() const {
 80009c4:	b4b0      	push	{r4, r5, r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	return CurrentFrame;
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009d6:	4615      	mov	r5, r2
 80009d8:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 80009dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009e4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bcb0      	pop	{r4, r5, r7}
 80009f0:	4770      	bx	lr
	...

080009f4 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv>:

void BHYWrapper::ParseFrame(const bhy2_fifo_parse_data_info *cbInfo,
		void *cbRef) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	BHYFrame *frame = reinterpret_cast<BHYFrame*>(cbRef);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
	bhy2_data_quaternion qtData;

	assert(frame);
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d105      	bne.n	8000a14 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0x20>
 8000a08:	4b30      	ldr	r3, [pc, #192]	; (8000acc <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xd8>)
 8000a0a:	4a31      	ldr	r2, [pc, #196]	; (8000ad0 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xdc>)
 8000a0c:	2176      	movs	r1, #118	; 0x76
 8000a0e:	4831      	ldr	r0, [pc, #196]	; (8000ad4 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xe0>)
 8000a10:	f017 fe62 	bl	80186d8 <__assert_func>
	auto &timestamp = frame->Timestamp;
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	330c      	adds	r3, #12
 8000a18:	623b      	str	r3, [r7, #32]
	auto &quaternion = frame->Orientation;
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	61fb      	str	r3, [r7, #28]

	if (cbInfo->data_size != CallbackDataSize)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	789b      	ldrb	r3, [r3, #2]
 8000a22:	2b0b      	cmp	r3, #11
 8000a24:	d14d      	bne.n	8000ac2 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xce>
		return;

	bhy2_parse_quaternion(cbInfo->data_ptr, &qtData);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f107 020c 	add.w	r2, r7, #12
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f006 fc1a 	bl	800726a <bhy2_parse_quaternion>

	frame->SensorId = cbInfo->sensor_id;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	751a      	strb	r2, [r3, #20]

	uint32_t timeData = *cbInfo->time_stamp; /* Store the last timestamp */
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a46:	4613      	mov	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
	timeData *= 15625;
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	f643 5209 	movw	r2, #15625	; 0x3d09
 8000a50:	fb02 f303 	mul.w	r3, r2, r3
 8000a54:	61bb      	str	r3, [r7, #24]

	timestamp.TimeS = (timeData / UINT64_C(1000000000));
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	0a5b      	lsrs	r3, r3, #9
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xe4>)
 8000a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a60:	09da      	lsrs	r2, r3, #7
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	601a      	str	r2, [r3, #0]
	timestamp.TimeNS = (timeData - (timestamp.TimeS * UINT64_C(1000000000)));
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	; (8000adc <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xe8>)
 8000a6c:	fb02 f303 	mul.w	r3, r2, r3
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	605a      	str	r2, [r3, #4]

	quaternion.X = qtData.x;
 8000a78:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	801a      	strh	r2, [r3, #0]
	quaternion.Y = qtData.y;
 8000a80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	805a      	strh	r2, [r3, #2]
	quaternion.Z = qtData.z;
 8000a88:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	809a      	strh	r2, [r3, #4]
	quaternion.W = qtData.w;
 8000a90:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	80da      	strh	r2, [r3, #6]

	quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
 8000a98:	8abb      	ldrh	r3, [r7, #20]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ae0 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xec>
 8000aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aaa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000ae4 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xf0>
 8000aae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			/ 3.141592653589793f;
 8000ab2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000ae8 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xf4>
 8000ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
	quaternion.Accuracy = ((qtData.accuracy * 180.0f) / 16384.0f)
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ac0:	e000      	b.n	8000ac4 <_ZN10BHYWrapper10ParseFrameEPK25bhy2_fifo_parse_data_infoPv+0xd0>
		return;
 8000ac2:	bf00      	nop
}
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	080197ec 	.word	0x080197ec
 8000ad0:	080197f4 	.word	0x080197f4
 8000ad4:	080197d0 	.word	0x080197d0
 8000ad8:	00044b83 	.word	0x00044b83
 8000adc:	3b9aca00 	.word	0x3b9aca00
 8000ae0:	43340000 	.word	0x43340000
 8000ae4:	46800000 	.word	0x46800000
 8000ae8:	40490fdb 	.word	0x40490fdb

08000aec <_ZNSt5arrayIhLj2048EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f811 	bl	8000b1e <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_ZNKSt5arrayIhLj2048EE4sizeEv>:
      size() const noexcept { return _Nm; }
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_ZNSt14__array_traitsIhLj2048EE6_S_ptrERA2048_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_Z8spi_initP19__SPI_HandleTypeDef>:

  CDC_Transmit_FS( (uint8_t*)line, strlen(line) );
  }

void spi_init( SPI_HandleTypeDef *hspi)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  mSPI = hspi;
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <_Z8spi_initP19__SPI_HandleTypeDef+0x1c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	24000204 	.word	0x24000204

08000b54 <_Z11spiTransmitPht>:
//! \param data        Данные для передачи
//! \param size        Количество байт для передачи
//! \return            true - если операция выполнена успешно
//!
int8_t spiTransmit( uint8_t *data, uint16_t size )
  {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
  //HAL_I2C_Master_Transmit_DMA( mI2c, mDevAddress, data, size );
	HAL_SPI_Transmit(mSPI, data, size, 10);
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <_Z11spiTransmitPht+0x38>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	887a      	ldrh	r2, [r7, #2]
 8000b66:	230a      	movs	r3, #10
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	f00f fe53 	bl	8010814 <HAL_SPI_Transmit>
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_Z11spiTransmitPht+0x38>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf0c      	ite	eq
 8000b7a:	2301      	moveq	r3, #1
 8000b7c:	2300      	movne	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	b25b      	sxtb	r3, r3
  }
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24000204 	.word	0x24000204

08000b90 <_Z9spiReceivPht>:
//! \param data      Указатель на буфер, в который размещаются принятые данные
//! \param size      Количество принимаемых байтов
//! \return            true - если операция выполнена успешно
//!
int8_t spiReceiv( uint8_t *data, uint16_t size )
  {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
  //Инициировать передачу по DMA
  //HAL_I2C_Master_Receive_DMA( mI2c, mDevAddress, data, size );
	HAL_SPI_Receive(mSPI, data, size,  10);
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <_Z9spiReceivPht+0x38>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	887a      	ldrh	r2, [r7, #2]
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	f010 f827 	bl	8010bf8 <HAL_SPI_Receive>
  //HAL_Delay(10);
  //Ожидать завершения приема
  //Возвращает истину при успешном завершении операции
  return mSPI->ErrorCode == HAL_SPI_ERROR_NONE;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_Z9spiReceivPht+0x38>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf0c      	ite	eq
 8000bb6:	2301      	moveq	r3, #1
 8000bb8:	2300      	movne	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	b25b      	sxtb	r3, r3
  }
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	24000204 	.word	0x24000204

08000bcc <_Z13bhy2_spi_readhPhmPv>:
//! \param length        Длина данных
//! \param intf_ptr      Указатель на интерфейс (не используем)
//! \return              Результат операции
//!
int8_t bhy2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;
  //Выставляем CS в 0
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	481c      	ldr	r0, [pc, #112]	; (8000c54 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000be2:	f00b f80f 	bl	800bc04 <HAL_GPIO_WritePin>

  reg_addr = reg_addr | 0x80;//записываем в старший бит адреса 1 для чтения данных
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	73fb      	strb	r3, [r7, #15]

  //Записываем адрес регистра
  if( !spiTransmit( &reg_addr, 1 ) )
 8000bf0:	f107 030f 	add.w	r3, r7, #15
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ffac 	bl	8000b54 <_Z11spiTransmitPht>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	bf0c      	ite	eq
 8000c02:	2301      	moveq	r3, #1
 8000c04:	2300      	movne	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <_Z13bhy2_spi_readhPhmPv+0x46>
    return IMU_ERR_SPI;
 8000c0c:	f06f 0301 	mvn.w	r3, #1
 8000c10:	e01b      	b.n	8000c4a <_Z13bhy2_spi_readhPhmPv+0x7e>

  //Читаем содержимое регистра
  if( spiReceiv( reg_data, length ) )
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4619      	mov	r1, r3
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f7ff ffb9 	bl	8000b90 <_Z9spiReceivPht>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <_Z13bhy2_spi_readhPhmPv+0x70>
  {
	  //Выставляем CS в 1
	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2110      	movs	r1, #16
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000c34:	f00a ffe6 	bl	800bc04 <HAL_GPIO_WritePin>
	  //Возвращаем успех операции
    return IMU_ERR_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e006      	b.n	8000c4a <_Z13bhy2_spi_readhPhmPv+0x7e>
  }
  //Выставляем CS в 1
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <_Z13bhy2_spi_readhPhmPv+0x88>)
 8000c42:	f00a ffdf 	bl	800bc04 <HAL_GPIO_WritePin>
  return IMU_ERR_SPI;
 8000c46:	f06f 0301 	mvn.w	r3, #1
  }
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	58020000 	.word	0x58020000

08000c58 <_Z14bhy2_spi_writehPKhmPv>:
//! \param length         Длина данных
//! \param intf_ptr       Указатель на интерфейс (не используем)
//! \return               Результат операции
//!
int8_t bhy2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
  {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
  //Промежуточный буфер нужен чтобы передать данные вместе с адресом регистра
  static uint8_t buffer[65];

  if( length > 64 )
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b40      	cmp	r3, #64	; 0x40
 8000c6c:	d902      	bls.n	8000c74 <_Z14bhy2_spi_writehPKhmPv+0x1c>
    return -4;
 8000c6e:	f06f 0303 	mvn.w	r3, #3
 8000c72:	e029      	b.n	8000cc8 <_Z14bhy2_spi_writehPKhmPv+0x70>

  //I2cDmaTransfer *i2cDmaTransfer = (I2cDmaTransfer*)intf_ptr;

  buffer[0] = reg_addr & 0x7F; //записываем в старший бит адреса 0 для записи данных
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000c7e:	701a      	strb	r2, [r3, #0]
  //Скопировать данные из исходного буфера в промежуточный, чтобы адрес регистра был частью буфера данных
  memcpy( buffer + 1, reg_data, length );
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <_Z14bhy2_spi_writehPKhmPv+0x7c>)
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f017 fd90 	bl	80187ac <memcpy>
  //Выставляем CS в 0
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2110      	movs	r1, #16
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000c92:	f00a ffb7 	bl	800bc04 <HAL_GPIO_WritePin>
  if( spiTransmit( buffer, length + 1 ) )
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <_Z14bhy2_spi_writehPKhmPv+0x78>)
 8000ca2:	f7ff ff57 	bl	8000b54 <_Z11spiTransmitPht>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf14      	ite	ne
 8000cac:	2301      	movne	r3, #1
 8000cae:	2300      	moveq	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <_Z14bhy2_spi_writehPKhmPv+0x62>
  {
    return IMU_ERR_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e006      	b.n	8000cc8 <_Z14bhy2_spi_writehPKhmPv+0x70>
	  //Выставляем CS в 1
	  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
  }
  //Выставляем CS в 1
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <_Z14bhy2_spi_writehPKhmPv+0x80>)
 8000cc0:	f00a ffa0 	bl	800bc04 <HAL_GPIO_WritePin>
  return IMU_ERR_I2C;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24000208 	.word	0x24000208
 8000cd4:	24000209 	.word	0x24000209
 8000cd8:	58020000 	.word	0x58020000

08000cdc <_Z13bhy2_delay_usmPv>:
//! \brief bhy2_delay_us Сформировать задержку на заданное количество мкс
//! \param us            Количество мкс, на которое нужно сформировать задержку
//! \param private_data  Неиспользуемый указатель на устройство
//!
void bhy2_delay_us(uint32_t us, void *private_data)
  {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  //Чтобы компилятор не ругался на неиспользуемую переменную
  (void)private_data;
  //Если задержка превышает 1мс, то задерживаем средствами ОС
  if( us >= 1000 )
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cec:	d308      	bcc.n	8000d00 <_Z13bhy2_delay_usmPv+0x24>
    HAL_Delay( us / 1000 );
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <_Z13bhy2_delay_usmPv+0x44>)
 8000cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf6:	099b      	lsrs	r3, r3, #6
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f007 ff4b 	bl	8008b94 <HAL_Delay>
    //Задержка менее 1мс, делаем тупым счетом
    while( us-- ) {
      __NOP();
      }
    }
  }
 8000cfe:	e00b      	b.n	8000d18 <_Z13bhy2_delay_usmPv+0x3c>
    while( us-- ) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	1e5a      	subs	r2, r3, #1
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	bf14      	ite	ne
 8000d0a:	2301      	movne	r3, #1
 8000d0c:	2300      	moveq	r3, #0
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <_Z13bhy2_delay_usmPv+0x3c>
      __NOP();
 8000d14:	bf00      	nop
    while( us-- ) {
 8000d16:	e7f3      	b.n	8000d00 <_Z13bhy2_delay_usmPv+0x24>
  }
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	10624dd3 	.word	0x10624dd3

08000d24 <_ZSt17__size_to_integerj>:

  // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
  inline _GLIBCXX_CONSTEXPR int
  __size_to_integer(int __n) { return __n; }
  inline _GLIBCXX_CONSTEXPR unsigned
  __size_to_integer(unsigned __n) { return __n; }
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d60:	d205      	bcs.n	8000d6e <_ZSt16__deque_buf_sizej+0x1c>
 8000d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	e000      	b.n	8000d70 <_ZSt16__deque_buf_sizej+0x1e>
 8000d6e:	2301      	movs	r3, #1
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_ZN10BHYWrapper8BHYFrame11SerializeToERSt6vectorIhSaIhEE>:
		BHYQuaternion Orientation;
		BHYTimestamp Timestamp;

		uint8_t SensorId;

		void SerializeTo(std::vector<uint8_t> &dest) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
			dest.resize(
 8000d86:	2115      	movs	r1, #21
 8000d88:	6838      	ldr	r0, [r7, #0]
 8000d8a:	f000 fe55 	bl	8001a38 <_ZNSt6vectorIhSaIhEE6resizeEj>
					4 * sizeof(int16_t) + sizeof(float) + 2 * sizeof(uint32_t)
							+ sizeof(uint8_t));

			uint8_t *ptr = dest.data();
 8000d8e:	6838      	ldr	r0, [r7, #0]
 8000d90:	f000 fe86 	bl	8001aa0 <_ZNSt6vectorIhSaIhEE4dataEv>
 8000d94:	60f8      	str	r0, [r7, #12]

			*reinterpret_cast<uint16_t*>(ptr) = Orientation.X;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	801a      	strh	r2, [r3, #0]
			ptr += sizeof(uint16_t);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3302      	adds	r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]

			*reinterpret_cast<uint16_t*>(ptr) = Orientation.Y;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	801a      	strh	r2, [r3, #0]
			ptr += sizeof(uint16_t);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3302      	adds	r3, #2
 8000db8:	60fb      	str	r3, [r7, #12]

			*reinterpret_cast<uint16_t*>(ptr) = Orientation.Z;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	801a      	strh	r2, [r3, #0]
			ptr += sizeof(uint16_t);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3302      	adds	r3, #2
 8000dca:	60fb      	str	r3, [r7, #12]

			*reinterpret_cast<uint16_t*>(ptr) = Orientation.W;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	801a      	strh	r2, [r3, #0]
			ptr += sizeof(uint16_t);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	3302      	adds	r3, #2
 8000ddc:	60fb      	str	r3, [r7, #12]

			*reinterpret_cast<float*>(ptr) = Orientation.Accuracy;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	601a      	str	r2, [r3, #0]
			ptr += sizeof(float);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3304      	adds	r3, #4
 8000dea:	60fb      	str	r3, [r7, #12]

			*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeS;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	601a      	str	r2, [r3, #0]
			ptr += sizeof(uint32_t);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3304      	adds	r3, #4
 8000df8:	60fb      	str	r3, [r7, #12]

			*reinterpret_cast<uint32_t*>(ptr) = Timestamp.TimeNS;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	601a      	str	r2, [r3, #0]
			ptr += sizeof(uint32_t);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	3304      	adds	r3, #4
 8000e06:	60fb      	str	r3, [r7, #12]

			*reinterpret_cast<uint8_t*>(ptr) = SensorId;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7d1a      	ldrb	r2, [r3, #20]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	701a      	strb	r2, [r3, #0]
			ptr += sizeof(uint8_t);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
		}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fe54 	bl	8001ad6 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fec0 	bl	8001bc8 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 fee9 	bl	8001c32 <_ZNSaIhED1Ev>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fecc 	bl	8001c12 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_ZNSt6vectorIhSaIhEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ffeb 	bl	8000e6a <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>:

	size_t TimeoutS;

	QueueSender() = default;

	QueueSender(UART_HandleTypeDef *uart, size_t timeoutS) :
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ffb5 	bl	8000e1e <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3328      	adds	r3, #40	; 0x28
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fe71 	bl	8001ba0 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3354      	adds	r3, #84	; 0x54
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ffda 	bl	8000e84 <_ZNSt6vectorIhSaIhEEC1Ev>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	665a      	str	r2, [r3, #100]	; 0x64
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	669a      	str	r2, [r3, #104]	; 0x68
		assert(uart != NULL);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d105      	bne.n	8000eee <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x4e>
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x58>)
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x5c>)
 8000ee6:	214a      	movs	r1, #74	; 0x4a
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj+0x60>)
 8000eea:	f017 fbf5 	bl	80186d8 <__assert_func>
	}
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08019840 	.word	0x08019840
 8000efc:	08019850 	.word	0x08019850
 8000f00:	08019888 	.word	0x08019888

08000f04 <_ZN11QueueSender14GetMessageModeERK7Request>:

	MessageModeT GetMessageMode(const Request &request) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
		return request.MetaInfo;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	7c1b      	ldrb	r3, [r3, #16]
	}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_ZN11QueueSender10AddRequestEO7Request>:

	void SetMessageMode(Responce &responce, MessageModeT mode) {
		responce.MetaInfo = mode;
	}

	void AddRequest(Request &&request) {
 8000f1e:	b590      	push	{r4, r7, lr}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
		switch (GetMessageMode(request)) {
 8000f28:	6839      	ldr	r1, [r7, #0]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffea 	bl	8000f04 <_ZN11QueueSender14GetMessageModeERK7Request>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	dc02      	bgt.n	8000f3c <_ZN11QueueSender10AddRequestEO7Request+0x1e>
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da03      	bge.n	8000f42 <_ZN11QueueSender10AddRequestEO7Request+0x24>
			break;
		case MessageMode::Priority:
			Requests.emplace_front(std::move(request));
			break;
		}
	}
 8000f3a:	e016      	b.n	8000f6a <_ZN11QueueSender10AddRequestEO7Request+0x4c>
		switch (GetMessageMode(request)) {
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d00a      	beq.n	8000f56 <_ZN11QueueSender10AddRequestEO7Request+0x38>
	}
 8000f40:	e013      	b.n	8000f6a <_ZN11QueueSender10AddRequestEO7Request+0x4c>
			Requests.emplace_back(std::move(request));
 8000f42:	687c      	ldr	r4, [r7, #4]
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	f000 feb3 	bl	8001cb0 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f000 feb9 	bl	8001cc6 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
			break;
 8000f54:	e009      	b.n	8000f6a <_ZN11QueueSender10AddRequestEO7Request+0x4c>
			Requests.emplace_front(std::move(request));
 8000f56:	687c      	ldr	r4, [r7, #4]
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f000 fea9 	bl	8001cb0 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4619      	mov	r1, r3
 8000f62:	4620      	mov	r0, r4
 8000f64:	f000 feda 	bl	8001d1c <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
			break;
 8000f68:	bf00      	nop
	}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}

08000f72 <_ZNK11QueueSender11HasResponceEv>:

	bool HasResponce() const {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
		return !Responces.empty();
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3328      	adds	r3, #40	; 0x28
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fef8 	bl	8001d74 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
	}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>:
      _Vector_base(_Vector_base&&) = default;
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 ff0a 	bl	8001dbe <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_ZNSt6vectorIhSaIhEEC1EOS1_>:
       *  The newly-created %vector contains the exact contents of the
       *  moved instance.
       *  The contents of the moved instance are a valid, but unspecified
       *  %vector.
       */
      vector(vector&&) noexcept = default;
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffe5 	bl	8000f94 <_ZNSt12_Vector_baseIhSaIhEEC1EOS1_>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZN8ResponceC1EOS_>:
struct Responce {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ffe5 	bl	8000fb4 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	7b1a      	ldrb	r2, [r3, #12]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	731a      	strb	r2, [r3, #12]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	7b5a      	ldrb	r2, [r3, #13]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	735a      	strb	r2, [r3, #13]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	7b9a      	ldrb	r2, [r3, #14]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	739a      	strb	r2, [r3, #14]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN8ResponceD1Ev>:
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fe2f 	bl	8001c7a <_ZNSt6vectorIhSaIhEED1Ev>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <_ZN11QueueSender11GetResponceEv>:

	Responce GetResponce() {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
		assert(HasResponce());
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f7ff ff9d 	bl	8000f72 <_ZNK11QueueSender11HasResponceEv>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d105      	bne.n	800104a <_ZN11QueueSender11GetResponceEv+0x22>
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <_ZN11QueueSender11GetResponceEv+0x54>)
 8001040:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <_ZN11QueueSender11GetResponceEv+0x58>)
 8001042:	2167      	movs	r1, #103	; 0x67
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <_ZN11QueueSender11GetResponceEv+0x5c>)
 8001046:	f017 fb47 	bl	80186d8 <__assert_func>
		auto responce = std::move(Responces.front());
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3328      	adds	r3, #40	; 0x28
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fe9d 	bl	8001d8e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>
 8001054:	4603      	mov	r3, r0
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fea6 	bl	8001da8 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffb7 	bl	8000fd4 <_ZN8ResponceC1EOS_>
		Responces.pop();
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3328      	adds	r3, #40	; 0x28
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fec2 	bl	8001df4 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>
		return responce;
 8001070:	bf00      	nop
	}
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	080198a4 	.word	0x080198a4
 8001080:	080198b4 	.word	0x080198b4
 8001084:	08019888 	.word	0x08019888

08001088 <_ZN8ResponceC1Ev>:
struct Responce {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fef6 	bl	8000e84 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>:
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fd45 	bl	8001b3c <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_ZN7RequestC1Ev>:
struct Request {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fedc 	bl	8000e84 <_ZNSt6vectorIhSaIhEEC1Ev>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZN7RequestD1Ev>:
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fdca 	bl	8001c7a <_ZNSt6vectorIhSaIhEED1Ev>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>:
	UART_HandleTypeDef *UartHandle;
	size_t TimeoutS;

	HeadInterface() = default;

	HeadInterface(UART_HandleTypeDef *uart, size_t timeoutS) :
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
			UartHandle { uart }, TimeoutS { timeoutS } {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fedd 	bl	8001ebe <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3334      	adds	r3, #52	; 0x34
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ffd7 	bl	80010bc <_ZN7RequestC1Ev>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3348      	adds	r3, #72	; 0x48
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff feb6 	bl	8000e84 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	655a      	str	r2, [r3, #84]	; 0x54
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	659a      	str	r2, [r3, #88]	; 0x58
		assert(uart != NULL);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d105      	bne.n	8001136 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x46>
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x50>)
 800112c:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x54>)
 800112e:	21b1      	movs	r1, #177	; 0xb1
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj+0x58>)
 8001132:	f017 fad1 	bl	80186d8 <__assert_func>
	}
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	08019840 	.word	0x08019840
 8001144:	080198d8 	.word	0x080198d8
 8001148:	08019888 	.word	0x08019888

0800114c <_ZN13HeadInterface14ResetReadStateEv>:

	void ResetReadState() {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
		CurrentState = ReadState::SOM1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	631a      	str	r2, [r3, #48]	; 0x30
		HAL_UART_Receive_IT(UartHandle, &CurrentValue, 1);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3328      	adds	r3, #40	; 0x28
 8001162:	2201      	movs	r2, #1
 8001164:	4619      	mov	r1, r3
 8001166:	f011 fa9b 	bl	80126a0 <HAL_UART_Receive_IT>
	}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZNK13HeadInterface10HasRequestEv>:

	bool HasRequest() const {
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
		return !Requests.empty();
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 feb2 	bl	8001ee6 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>
 8001182:	4603      	mov	r3, r0
 8001184:	f083 0301 	eor.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
	}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_ZN13HeadInterface4SendERK8Responce>:

	void Send(const Responce &responce) {
 8001192:	b5b0      	push	{r4, r5, r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
		size_t size = responce.Data.size() + 3 + 3;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fe5a 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80011a4:	4603      	mov	r3, r0
 80011a6:	3306      	adds	r3, #6
 80011a8:	60fb      	str	r3, [r7, #12]
		CurrentResponceBuffer.resize(size);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3348      	adds	r3, #72	; 0x48
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fc41 	bl	8001a38 <_ZNSt6vectorIhSaIhEE6resizeEj>

		uint8_t *ptr = CurrentResponceBuffer.data();
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3348      	adds	r3, #72	; 0x48
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fc70 	bl	8001aa0 <_ZNSt6vectorIhSaIhEE4dataEv>
 80011c0:	60b8      	str	r0, [r7, #8]

		*(ptr++) = SOM1Val;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	60ba      	str	r2, [r7, #8]
 80011c8:	22ff      	movs	r2, #255	; 0xff
 80011ca:	701a      	strb	r2, [r3, #0]
		*(ptr++) = SOM2Val;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	60ba      	str	r2, [r7, #8]
 80011d2:	22aa      	movs	r2, #170	; 0xaa
 80011d4:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.PeripheryID;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	60ba      	str	r2, [r7, #8]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	7b12      	ldrb	r2, [r2, #12]
 80011e0:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.MetaInfo;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	60ba      	str	r2, [r7, #8]
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	7b52      	ldrb	r2, [r2, #13]
 80011ec:	701a      	strb	r2, [r3, #0]
		*(ptr++) = responce.Error;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	60ba      	str	r2, [r7, #8]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	7b92      	ldrb	r2, [r2, #14]
 80011f8:	701a      	strb	r2, [r3, #0]

		memcpy(ptr, responce.Data.data(), responce.Data.size());
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fe7f 	bl	8001f00 <_ZNKSt6vectorIhSaIhEE4dataEv>
 8001202:	4604      	mov	r4, r0
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fe26 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4621      	mov	r1, r4
 8001212:	68b8      	ldr	r0, [r7, #8]
 8001214:	f017 faca 	bl	80187ac <memcpy>

		ptr += responce.Data.size();
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fe1c 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]

		*ptr = SOM3Val;
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	22af      	movs	r2, #175	; 0xaf
 800122c:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3348      	adds	r3, #72	; 0x48
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fc32 	bl	8001aa0 <_ZNSt6vectorIhSaIhEE4dataEv>
 800123c:	4605      	mov	r5, r0
				CurrentResponceBuffer.size(), TimeoutS);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3348      	adds	r3, #72	; 0x48
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fe08 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001248:	4603      	mov	r3, r0
		HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 800124a:	b29a      	uxth	r2, r3
				CurrentResponceBuffer.size(), TimeoutS);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		HAL_UART_Transmit(UartHandle, CurrentResponceBuffer.data(),
 8001250:	4629      	mov	r1, r5
 8001252:	4620      	mov	r0, r4
 8001254:	f011 f98e 	bl	8012574 <HAL_UART_Transmit>
	}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}

08001260 <_ZN7RequestC1EOS_>:
struct Request {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe9f 	bl	8000fb4 <_ZNSt6vectorIhSaIhEEC1EOS1_>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	7c1a      	ldrb	r2, [r3, #16]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	741a      	strb	r2, [r3, #16]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	7c5a      	ldrb	r2, [r3, #17]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	745a      	strb	r2, [r3, #17]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN13HeadInterface10GetRequestEv>:

	Request GetRequest() {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
		assert(HasRequest());
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f7ff ff65 	bl	8001172 <_ZNK13HeadInterface10HasRequestEv>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <_ZN13HeadInterface10GetRequestEv+0x22>
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <_ZN13HeadInterface10GetRequestEv+0x50>)
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <_ZN13HeadInterface10GetRequestEv+0x54>)
 80012b2:	21d4      	movs	r1, #212	; 0xd4
 80012b4:	480e      	ldr	r0, [pc, #56]	; (80012f0 <_ZN13HeadInterface10GetRequestEv+0x58>)
 80012b6:	f017 fa0f 	bl	80186d8 <__assert_func>
		auto request = std::move(Requests.front());
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fe2e 	bl	8001f1e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fcf3 	bl	8001cb0 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffc6 	bl	8001260 <_ZN7RequestC1EOS_>
		Requests.pop();
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fe2e 	bl	8001f38 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>
		return request;
 80012dc:	bf00      	nop
	}
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	08019914 	.word	0x08019914
 80012ec:	08019924 	.word	0x08019924
 80012f0:	08019888 	.word	0x08019888

080012f4 <_ZN7RequestaSEOS_>:
struct Request {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fe39 	bl	8001f7c <_ZNSt6vectorIhSaIhEEaSEOS1_>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	7c1a      	ldrb	r2, [r3, #16]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	741a      	strb	r2, [r3, #16]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	7c5a      	ldrb	r2, [r3, #17]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	745a      	strb	r2, [r3, #17]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>:
};

struct IMUFrame: public BHYWrapper::BHYFrame {
	size_t Seq;

	IMUFrame(const BHYWrapper::BHYFrame &frame, size_t seq) :
 800132c:	b4b0      	push	{r4, r5, r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
			BHYFrame { frame }, Seq { seq } {
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	4614      	mov	r4, r2
 800133e:	461d      	mov	r5, r3
 8001340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001344:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001348:	e884 0003 	stmia.w	r4, {r0, r1}
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
	}
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bcb0      	pop	{r4, r5, r7}
 800135c:	4770      	bx	lr

0800135e <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>:
	void Reset() {
		FrameQueue = { };
		LastSeq = 0;
	}

	void Add(const BHYWrapper::BHYFrame &frame) {
 800135e:	b590      	push	{r4, r7, lr}
 8001360:	b08b      	sub	sp, #44	; 0x2c
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
		FrameQueue.push_front( { frame, TestSeq++ });
 8001368:	687c      	ldr	r4, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	1c59      	adds	r1, r3, #1
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001374:	f107 000c 	add.w	r0, r7, #12
 8001378:	461a      	mov	r2, r3
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	f7ff ffd6 	bl	800132c <_ZN8IMUFrameC1ERKN10BHYWrapper8BHYFrameEj>
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	4619      	mov	r1, r3
 8001386:	4620      	mov	r0, r4
 8001388:	f000 fe0d 	bl	8001fa6 <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>
	}
 800138c:	bf00      	nop
 800138e:	372c      	adds	r7, #44	; 0x2c
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}

08001394 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>:
	void Remove() {
		FrameQueue.pop_back();
		LastSeq++;
	}

	bool Get(size_t seq, BHYWrapper::BHYFrame &frame) const {
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b08c      	sub	sp, #48	; 0x30
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]

		if (seq < LastSeq || seq > FrameQueue.size() + LastSeq - 1)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d30b      	bcc.n	80013c2 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x2e>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 fe0b 	bl	8001fc8 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	4413      	add	r3, r2
 80013ba:	3b01      	subs	r3, #1
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d901      	bls.n	80013c6 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x32>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x34>
 80013c6:	2300      	movs	r3, #0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x3c>
			return false;
 80013cc:	2300      	movs	r3, #0
 80013ce:	e027      	b.n	8001420 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x8c>

		auto imuFrame = FrameQueue[seq - LastSeq];
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	f000 fe06 	bl	8001fec <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f107 0414 	add.w	r4, r7, #20
 80013e6:	461d      	mov	r5, r3
 80013e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		assert(imuFrame.Seq == seq);
 80013f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d006      	beq.n	800140a <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x76>
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x94>)
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x98>)
 8001400:	f240 113b 	movw	r1, #315	; 0x13b
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE+0x9c>)
 8001406:	f017 f967 	bl	80186d8 <__assert_func>

		frame = imuFrame;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	461d      	mov	r5, r3
 800140e:	f107 0414 	add.w	r4, r7, #20
 8001412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001416:	e894 0003 	ldmia.w	r4, {r0, r1}
 800141a:	e885 0003 	stmia.w	r5, {r0, r1}
		return true;
 800141e:	2301      	movs	r3, #1
	}
 8001420:	4618      	mov	r0, r3
 8001422:	3730      	adds	r7, #48	; 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bdb0      	pop	{r4, r5, r7, pc}
 8001428:	08019948 	.word	0x08019948
 800142c:	0801995c 	.word	0x0801995c
 8001430:	08019888 	.word	0x08019888

08001434 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer>:
};

class IMURequestHandler {
public:
	Responce Handle(const Request &request,
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
			const IMUFrameContainer &container) {
		assert(request.PeripheryID == Periphery::Imu);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7c5b      	ldrb	r3, [r3, #17]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d006      	beq.n	8001458 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0x24>
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xa8>)
 800144c:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xac>)
 800144e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001452:	4824      	ldr	r0, [pc, #144]	; (80014e4 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xb0>)
 8001454:	f017 f940 	bl	80186d8 <__assert_func>
		assert(request.Data.size() == 2);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fcfc 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001460:	4603      	mov	r3, r0
 8001462:	2b02      	cmp	r3, #2
 8001464:	d006      	beq.n	8001474 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0x40>
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xb4>)
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xac>)
 800146a:	f240 1147 	movw	r1, #327	; 0x147
 800146e:	481d      	ldr	r0, [pc, #116]	; (80014e4 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xb0>)
 8001470:	f017 f932 	bl	80186d8 <__assert_func>
		Responce responce;
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f7ff fe07 	bl	8001088 <_ZN8ResponceC1Ev>
		responce.PeripheryID = Periphery::Imu;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	731a      	strb	r2, [r3, #12]
		responce.MetaInfo = 0;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	735a      	strb	r2, [r3, #13]

		uint16_t frameSeq =
				*reinterpret_cast<const uint16_t*>(request.Data.data());
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fd39 	bl	8001f00 <_ZNKSt6vectorIhSaIhEE4dataEv>
 800148e:	4603      	mov	r3, r0
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	85fb      	strh	r3, [r7, #46]	; 0x2e

		BHYWrapper::BHYFrame imuFrame;
		bool ok = container.Get(frameSeq, imuFrame);
 8001494:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001496:	f107 0214 	add.w	r2, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f7ff ff79 	bl	8001394 <_ZNK17IMUFrameContainer3GetEjRN10BHYWrapper8BHYFrameE>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		if (!ok) {
 80014a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ac:	f083 0301 	eor.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0x8a>
			responce.Error = 1;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2201      	movs	r2, #1
 80014ba:	739a      	strb	r2, [r3, #14]
			return responce;
 80014bc:	e00a      	b.n	80014d4 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer+0xa0>
		}

		imuFrame.SerializeTo(responce.Data);
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc58 	bl	8000d7c <_ZN10BHYWrapper8BHYFrame11SerializeToERSt6vectorIhSaIhEE>
		responce.Error = 0;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	739a      	strb	r2, [r3, #14]

		return responce;
 80014d2:	bf00      	nop
	}
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	3730      	adds	r7, #48	; 0x30
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	080199a0 	.word	0x080199a0
 80014e0:	080199c8 	.word	0x080199c8
 80014e4:	08019888 	.word	0x08019888
 80014e8:	08019a18 	.word	0x08019a18

080014ec <_ZN13HeadInterfaceD1Ev>:
struct HeadInterface {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3348      	adds	r3, #72	; 0x48
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fbbe 	bl	8001c7a <_ZNSt6vectorIhSaIhEED1Ev>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3334      	adds	r3, #52	; 0x34
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fde7 	bl	80010d6 <_ZN7RequestD1Ev>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fdc9 	bl	80010a2 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEED1Ev>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_ZN11QueueSenderD1Ev>:
struct QueueSender {
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3354      	adds	r3, #84	; 0x54
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fba7 	bl	8001c7a <_ZNSt6vectorIhSaIhEED1Ev>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3328      	adds	r3, #40	; 0x28
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fc81 	bl	8000e38 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEED1Ev>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	f000 faff 	bl	8001b3c <_ZNSt5dequeI7RequestSaIS0_EED1Ev>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>:
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fd67 	bl	8002026 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_ZN17IMUFrameContainerC1Ev>:
class IMUFrameContainer {
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ffeb 	bl	8001548 <_ZNSt5dequeI8IMUFrameSaIS0_EEC1Ev>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_ZN17IMUFrameContainerD1Ev>:
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fd7a 	bl	800208c <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_ZN18MotherboardContextC1E17MotherboardConfig>:
	BHYWrapper IMU;
	IMURequestHandler IMUHandler;

	bool UpdateIMU = false;

	MotherboardContext(MotherboardConfig conf) :
 80015a2:	b084      	sub	sp, #16
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	f107 0014 	add.w	r0, r7, #20
 80015b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		Head{conf.HeadUart, conf.HeadTimeout},
		Body{conf.BodyUart, conf.BodyTimeout},
		FrameContainer{},
		IMU{conf.IMUSpi},
		IMUHandler{} {}
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6979      	ldr	r1, [r7, #20]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd98 	bl	80010f0 <_ZN13HeadInterfaceC1EP20__UART_HandleTypeDefj>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	335c      	adds	r3, #92	; 0x5c
 80015c4:	69f9      	ldr	r1, [r7, #28]
 80015c6:	6a3a      	ldr	r2, [r7, #32]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc69 	bl	8000ea0 <_ZN11QueueSenderC1EP20__UART_HandleTypeDefj>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	33c8      	adds	r3, #200	; 0xc8
 80015d2:	2230      	movs	r2, #48	; 0x30
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f017 f910 	bl	80187fc <memset>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	33c8      	adds	r3, #200	; 0xc8
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ffbe 	bl	8001562 <_ZN17IMUFrameContainerC1Ev>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	33f8      	adds	r3, #248	; 0xf8
 80015ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f848 	bl	8000684 <_ZN10BHYWrapperC1EP19__SPI_HandleTypeDef>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800160c:	b004      	add	sp, #16
 800160e:	4770      	bx	lr

08001610 <_ZN13HeadInterfaceC1Ev>:
	HeadInterface() = default;
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fc4f 	bl	8001ebe <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3334      	adds	r3, #52	; 0x34
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fd49 	bl	80010bc <_ZN7RequestC1Ev>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3348      	adds	r3, #72	; 0x48
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fc28 	bl	8000e84 <_ZNSt6vectorIhSaIhEEC1Ev>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN11QueueSenderC1Ev>:
	QueueSender() = default;
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fbe8 	bl	8000e1e <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3328      	adds	r3, #40	; 0x28
 8001652:	4618      	mov	r0, r3
 8001654:	f000 faa4 	bl	8001ba0 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3354      	adds	r3, #84	; 0x54
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc0d 	bl	8000e84 <_ZNSt6vectorIhSaIhEEC1Ev>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_ZN18MotherboardContextC1Ev>:

	MotherboardContext() = default;
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffc6 	bl	8001610 <_ZN13HeadInterfaceC1Ev>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	335c      	adds	r3, #92	; 0x5c
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ffd8 	bl	800163e <_ZN11QueueSenderC1Ev>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	33c8      	adds	r3, #200	; 0xc8
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff65 	bl	8001562 <_ZN17IMUFrameContainerC1Ev>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZN18MotherboardContextD1Ev>:
struct MotherboardContext {
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	33c8      	adds	r3, #200	; 0xc8
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff64 	bl	8001588 <_ZN17IMUFrameContainerD1Ev>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	335c      	adds	r3, #92	; 0x5c
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff28 	bl	800151a <_ZN11QueueSenderD1Ev>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff0d 	bl	80014ec <_ZN13HeadInterfaceD1Ev>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fcf2 	bl	80020d6 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_ZN13HeadInterfaceaSEOS_>:
struct HeadInterface {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ffe5 	bl	80016dc <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEaSEOS4_>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	631a      	str	r2, [r3, #48]	; 0x30
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3334      	adds	r3, #52	; 0x34
 8001738:	4619      	mov	r1, r3
 800173a:	4610      	mov	r0, r2
 800173c:	f7ff fdda 	bl	80012f4 <_ZN7RequestaSEOS_>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3348      	adds	r3, #72	; 0x48
 800174a:	4619      	mov	r1, r3
 800174c:	4610      	mov	r0, r2
 800174e:	f000 fc15 	bl	8001f7c <_ZNSt6vectorIhSaIhEEaSEOS1_>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	655a      	str	r2, [r3, #84]	; 0x54
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	659a      	str	r2, [r3, #88]	; 0x58
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>:
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fcbd 	bl	80020fc <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZN11QueueSenderaSEOS_>:
struct QueueSender {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fc9a 	bl	80020d6 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	3328      	adds	r3, #40	; 0x28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f7ff ffdc 	bl	800176c <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEaSEOS4_>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	3354      	adds	r3, #84	; 0x54
 80017ca:	4619      	mov	r1, r3
 80017cc:	4610      	mov	r0, r2
 80017ce:	f000 fbd5 	bl	8001f7c <_ZNSt6vectorIhSaIhEEaSEOS1_>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	665a      	str	r2, [r3, #100]	; 0x64
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	669a      	str	r2, [r3, #104]	; 0x68
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZN17IMUFrameContaineraSEOS_>:
class IMUFrameContainer {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fc8a 	bl	8002122 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_ZN18MotherboardContextaSEOS_>:
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff5f 	bl	80016fc <_ZN13HeadInterfaceaSEOS_>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	335c      	adds	r3, #92	; 0x5c
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f7ff ff9e 	bl	800178c <_ZN11QueueSenderaSEOS_>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	33c8      	adds	r3, #200	; 0xc8
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f7ff ffcb 	bl	80017f8 <_ZN17IMUFrameContaineraSEOS_>
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f102 00f8 	add.w	r0, r2, #248	; 0xf8
 800186a:	33f8      	adds	r3, #248	; 0xf8
 800186c:	f241 1254 	movw	r2, #4436	; 0x1154
 8001870:	4619      	mov	r1, r3
 8001872:	f016 ff9b 	bl	80187ac <memcpy>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187c:	f893 2251 	ldrb.w	r2, [r3, #593]	; 0x251
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001886:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <MotherboardInit>:
};

static MotherboardContext mbctx;

int MotherboardInit(MotherboardConfig conf) {
 8001894:	b084      	sub	sp, #16
 8001896:	b590      	push	{r4, r7, lr}
 8001898:	f5ad 5d93 	sub.w	sp, sp, #4704	; 0x1260
 800189c:	b081      	sub	sp, #4
 800189e:	af02      	add	r7, sp, #8
 80018a0:	f241 2468 	movw	r4, #4712	; 0x1268
 80018a4:	443c      	add	r4, r7
 80018a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	mbctx = MotherboardContext { conf };
 80018aa:	4c1d      	ldr	r4, [pc, #116]	; (8001920 <MotherboardInit+0x8c>)
 80018ac:	f241 2358 	movw	r3, #4696	; 0x1258
 80018b0:	4423      	add	r3, r4
 80018b2:	19dc      	adds	r4, r3, r7
 80018b4:	466a      	mov	r2, sp
 80018b6:	f241 2374 	movw	r3, #4724	; 0x1274
 80018ba:	443b      	add	r3, r7
 80018bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c0:	e882 0003 	stmia.w	r2, {r0, r1}
 80018c4:	f241 2368 	movw	r3, #4712	; 0x1268
 80018c8:	443b      	add	r3, r7
 80018ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff fe68 	bl	80015a2 <_ZN18MotherboardContextC1E17MotherboardConfig>
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MotherboardInit+0x8c>)
 80018d4:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 80018d8:	f103 0318 	add.w	r3, r3, #24
 80018dc:	443b      	add	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4810      	ldr	r0, [pc, #64]	; (8001924 <MotherboardInit+0x90>)
 80018e2:	f7ff ffa1 	bl	8001828 <_ZN18MotherboardContextaSEOS_>
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MotherboardInit+0x8c>)
 80018e8:	f503 5392 	add.w	r3, r3, #4672	; 0x1240
 80018ec:	f103 0318 	add.w	r3, r3, #24
 80018f0:	443b      	add	r3, r7
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fedb 	bl	80016ae <_ZN18MotherboardContextD1Ev>

	mbctx.Head.ResetReadState();
 80018f8:	480a      	ldr	r0, [pc, #40]	; (8001924 <MotherboardInit+0x90>)
 80018fa:	f7ff fc27 	bl	800114c <_ZN13HeadInterface14ResetReadStateEv>
	return mbctx.IMU.Init(800, 0);
 80018fe:	2100      	movs	r1, #0
 8001900:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001928 <MotherboardInit+0x94>
 8001904:	4809      	ldr	r0, [pc, #36]	; (800192c <MotherboardInit+0x98>)
 8001906:	f7fe fedb 	bl	80006c0 <_ZN10BHYWrapper4InitEfm>
 800190a:	4603      	mov	r3, r0
}
 800190c:	4618      	mov	r0, r3
 800190e:	f507 5792 	add.w	r7, r7, #4672	; 0x1240
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800191a:	b004      	add	sp, #16
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	ffffeda8 	.word	0xffffeda8
 8001924:	24000250 	.word	0x24000250
 8001928:	44480000 	.word	0x44480000
 800192c:	24000348 	.word	0x24000348

08001930 <MotherboardTick>:

int MotherboardTick() {
 8001930:	b580      	push	{r7, lr}
 8001932:	b08e      	sub	sp, #56	; 0x38
 8001934:	af00      	add	r7, sp, #0
	if (mbctx.UpdateIMU)
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <MotherboardTick+0xc8>)
 8001938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193c:	f893 3251 	ldrb.w	r3, [r3, #593]	; 0x251
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00b      	beq.n	800195c <MotherboardTick+0x2c>
		mbctx.UpdateIMU = !mbctx.IMU.Poll();
 8001944:	482d      	ldr	r0, [pc, #180]	; (80019fc <MotherboardTick+0xcc>)
 8001946:	f7ff f813 	bl	8000970 <_ZN10BHYWrapper4PollEv>
 800194a:	4603      	mov	r3, r0
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <MotherboardTick+0xc8>)
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251

	if (mbctx.Head.HasRequest()) {
 800195c:	4826      	ldr	r0, [pc, #152]	; (80019f8 <MotherboardTick+0xc8>)
 800195e:	f7ff fc08 	bl	8001172 <_ZNK13HeadInterface10HasRequestEv>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d02b      	beq.n	80019c0 <MotherboardTick+0x90>
		auto request = mbctx.Head.GetRequest();
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4923      	ldr	r1, [pc, #140]	; (80019f8 <MotherboardTick+0xc8>)
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fc93 	bl	8001298 <_ZN13HeadInterface10GetRequestEv>

		switch (request.PeripheryID) {
 8001972:	7d7b      	ldrb	r3, [r7, #21]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <MotherboardTick+0x4e>
 8001978:	2b01      	cmp	r3, #1
 800197a:	d00a      	beq.n	8001992 <MotherboardTick+0x62>
 800197c:	e01c      	b.n	80019b8 <MotherboardTick+0x88>
		case Periphery::Body:
			mbctx.Body.AddRequest(std::move(request));
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f995 	bl	8001cb0 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	481d      	ldr	r0, [pc, #116]	; (8001a00 <MotherboardTick+0xd0>)
 800198c:	f7ff fac7 	bl	8000f1e <_ZN11QueueSender10AddRequestEO7Request>
			break;
 8001990:	e012      	b.n	80019b8 <MotherboardTick+0x88>
		case Periphery::Imu:
			mbctx.Head.Send(
					mbctx.IMUHandler.Handle(request,
 8001992:	f107 0018 	add.w	r0, r7, #24
 8001996:	1d3a      	adds	r2, r7, #4
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <MotherboardTick+0xd4>)
 800199a:	491b      	ldr	r1, [pc, #108]	; (8001a08 <MotherboardTick+0xd8>)
 800199c:	f7ff fd4a 	bl	8001434 <_ZN17IMURequestHandler6HandleERK7RequestRK17IMUFrameContainer>
			mbctx.Head.Send(
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	4619      	mov	r1, r3
 80019a6:	4814      	ldr	r0, [pc, #80]	; (80019f8 <MotherboardTick+0xc8>)
 80019a8:	f7ff fbf3 	bl	8001192 <_ZN13HeadInterface4SendERK8Responce>
					mbctx.IMUHandler.Handle(request,
 80019ac:	f107 0318 	add.w	r3, r7, #24
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb2b 	bl	800100c <_ZN8ResponceD1Ev>
							mbctx.FrameContainer));
			break;
 80019b6:	bf00      	nop
		auto request = mbctx.Head.GetRequest();
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fb8b 	bl	80010d6 <_ZN7RequestD1Ev>
		}
	}

	if (mbctx.Body.HasResponce()) {
 80019c0:	480f      	ldr	r0, [pc, #60]	; (8001a00 <MotherboardTick+0xd0>)
 80019c2:	f7ff fad6 	bl	8000f72 <_ZNK11QueueSender11HasResponceEv>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d010      	beq.n	80019ee <MotherboardTick+0xbe>
		mbctx.Head.Send(mbctx.Body.GetResponce());
 80019cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d0:	490b      	ldr	r1, [pc, #44]	; (8001a00 <MotherboardTick+0xd0>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fb28 	bl	8001028 <_ZN11QueueSender11GetResponceEv>
 80019d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <MotherboardTick+0xc8>)
 80019e0:	f7ff fbd7 	bl	8001192 <_ZN13HeadInterface4SendERK8Responce>
 80019e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fb0f 	bl	800100c <_ZN8ResponceD1Ev>
	}

	return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3738      	adds	r7, #56	; 0x38
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	24000250 	.word	0x24000250
 80019fc:	24000348 	.word	0x24000348
 8001a00:	240002ac 	.word	0x240002ac
 8001a04:	24000318 	.word	0x24000318
 8001a08:	240014a0 	.word	0x240014a0

08001a0c <MotherboardOnStrobe>:

void MotherboardOnStrobe() {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
	mbctx.FrameContainer.Add(mbctx.IMU.GetFrame());
 8001a12:	463b      	mov	r3, r7
 8001a14:	4906      	ldr	r1, [pc, #24]	; (8001a30 <MotherboardOnStrobe+0x24>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe ffd4 	bl	80009c4 <_ZNK10BHYWrapper8GetFrameEv>
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MotherboardOnStrobe+0x28>)
 8001a22:	f7ff fc9c 	bl	800135e <_ZN17IMUFrameContainer3AddERKN10BHYWrapper8BHYFrameE>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	24000348 	.word	0x24000348
 8001a34:	24000318 	.word	0x24000318

08001a38 <_ZNSt6vectorIhSaIhEE6resizeEj>:
       *  number of elements.  If the number is smaller than the
       *  %vector's current size the %vector is truncated, otherwise
       *  default constructed elements are appended.
       */
      void
      resize(size_type __new_size)
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
      {
	if (__new_size > size())
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fa08 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf8c      	ite	hi
 8001a50:	2301      	movhi	r3, #1
 8001a52:	2300      	movls	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <_ZNSt6vectorIhSaIhEE6resizeEj+0x38>
	  _M_default_append(__new_size - size());
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f9fc 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fb6d 	bl	8002148 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 8001a6e:	e013      	b.n	8001a98 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	else if (__new_size < size())
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f9f1 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8001a76:	4602      	mov	r2, r0
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	bf34      	ite	cc
 8001a7e:	2301      	movcc	r3, #1
 8001a80:	2300      	movcs	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <_ZNSt6vectorIhSaIhEE6resizeEj+0x60>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fc10 	bl	80022b8 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZNSt6vectorIhSaIhEE4dataEv>:
      /**
       *   Returns a pointer such that [data(), data() + size()) is a valid
       *   range.  For a non-empty %vector, data() == &front().
       */
      _Tp*
      data() _GLIBCXX_NOEXCEPT
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fc22 	bl	80022f8 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fc32 	bl	8002330 <_ZNSaI7RequestED1Ev>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_ZNSt11_Deque_baseI7RequestSaIS0_EEC1Ev>:
      _Deque_base()
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fc15 	bl	8002310 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fc2d 	bl	8002348 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001b10:	3304      	adds	r3, #4
 8001b12:	461a      	mov	r2, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fc7d 	bl	8002414 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fc8f 	bl	8002448 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ffc6 	bl	8001abe <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implD1Ev>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_ZNSt5dequeI7RequestSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fc98 	bl	8002480 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fca1 	bl	800249e <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fcac 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f107 0218 	add.w	r2, r7, #24
 8001b6a:	f107 0108 	add.w	r1, r7, #8
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fccb 	bl	800250a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ffbe 	bl	8001af8 <_ZNSt11_Deque_baseI7RequestSaIS0_EED1Ev>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3728      	adds	r7, #40	; 0x28
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>:
      deque() = default;
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fce5 	bl	8002560 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	: c() { }
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	2328      	movs	r3, #40	; 0x28
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	f016 fe23 	bl	80187fc <memset>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ffe4 	bl	8001b86 <_ZNSt5dequeI8ResponceSaIS0_EEC1Ev>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_ZNSt5dequeI8ResponceSaIS0_EED1Ev>:
      ~deque()
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fcf5 	bl	80025c6 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fcfe 	bl	80025e4 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fd09 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f107 0218 	add.w	r2, r7, #24
 8001bf6:	f107 0108 	add.w	r1, r7, #8
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fd28 	bl	8002650 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fcbd 	bl	8002582 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fd37 	bl	800268e <_ZNSaIhEC1Ev>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fd3f 	bl	80026a6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_ZNSaIhED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fd47 	bl	80026ce <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1ad3      	subs	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001c60:	461a      	mov	r2, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fd3e 	bl	80026e4 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
      }
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f8f1 	bl	8000e52 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001c7a:	b5b0      	push	{r4, r5, r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681c      	ldr	r4, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fd3c 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001c92:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c94:	461a      	mov	r2, r3
 8001c96:	4629      	mov	r1, r5
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f000 fd41 	bl	8002720 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
      }
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ffd2 	bl	8001c4a <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bdb0      	pop	{r4, r5, r7, pc}

08001cb0 <_ZSt4moveIR7RequestEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8001cc6:	b5b0      	push	{r4, r5, r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	3b14      	subs	r3, #20
	if (this->_M_impl._M_finish._M_cur
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d012      	beq.n	8001d04 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3e>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8001cde:	687c      	ldr	r4, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699d      	ldr	r5, [r3, #24]
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f000 fd29 	bl	800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f000 fd2e 	bl	8002752 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f103 0214 	add.w	r2, r3, #20
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8001d02:	e007      	b.n	8001d14 <_ZNSt5dequeI7RequestSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x4e>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8001d04:	6838      	ldr	r0, [r7, #0]
 8001d06:	f000 fd19 	bl	800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fd32 	bl	8002778 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>
      }
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdb0      	pop	{r4, r5, r7, pc}

08001d1c <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8001d1c:	b5b0      	push	{r4, r5, r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d014      	beq.n	8001d5c <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 8001d32:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8001d38:	f1a3 0514 	sub.w	r5, r3, #20
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f000 fcfd 	bl	800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4629      	mov	r1, r5
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f000 fd02 	bl	8002752 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f1a3 0214 	sub.w	r2, r3, #20
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	609a      	str	r2, [r3, #8]
      }
 8001d5a:	e007      	b.n	8001d6c <_ZNSt5dequeI7RequestSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f000 fced 	bl	800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4619      	mov	r1, r3
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fd4a 	bl	8002800 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bdb0      	pop	{r4, r5, r7, pc}

08001d74 <_ZNKSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fd84 	bl	800288c <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fd89 	bl	80028b0 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>
 8001d9e:	4603      	mov	r3, r0
      }
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_ZSt4moveIR8ResponceEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1EOS2_>:
	_Vector_impl(_Vector_impl&& __x) noexcept
 8001dbe:	b590      	push	{r4, r7, lr}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f000 fd85 	bl	80028d8 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fd8b 	bl	80028ee <_ZNSaIhEC1ERKS_>
 8001dd8:	687c      	ldr	r4, [r7, #4]
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f000 fd7c 	bl	80028d8 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4619      	mov	r1, r3
 8001de4:	4620      	mov	r0, r4
 8001de6:	f000 fd90 	bl	800290a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>
	{ }
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd90      	pop	{r4, r7, pc}

08001df4 <_ZNSt5queueI8ResponceSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fda6 	bl	8002950 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>
      }
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 0218 	add.w	r2, r3, #24
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3308      	adds	r3, #8
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4610      	mov	r0, r2
 8001e22:	f000 fdb9 	bl	8002998 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8001e38:	f107 0308 	add.w	r3, r7, #8
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fb1e 	bl	8002480 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8001e44:	f107 0308 	add.w	r3, r7, #8
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fdb9 	bl	80029c0 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>
 8001e4e:	4603      	mov	r3, r0
      }
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	3b14      	subs	r3, #20
	if (this->_M_impl._M_start._M_cur
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d011      	beq.n	8001eb0 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x3a>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fb14 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e94:	4602      	mov	r2, r0
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f000 fd9b 	bl	80029d8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f103 0214 	add.w	r2, r3, #20
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8001eae:	e002      	b.n	8001eb6 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fd9e 	bl	80029f2 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>
      }
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
	queue()
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	: c() { }
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	2328      	movs	r3, #40	; 0x28
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f016 fc94 	bl	80187fc <memset>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe ffa1 	bl	8000e1e <_ZNSt5dequeI7RequestSaIS0_EEC1Ev>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_ZNKSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5emptyEv>:
      empty() const
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff8b 	bl	8001e0c <_ZNKSt5dequeI7RequestSaIS0_EE5emptyEv>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZNKSt6vectorIhSaIhEE4dataEv>:

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
      { return _M_data_ptr(this->_M_impl._M_start); }
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f9f2 	bl	80022f8 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE5frontEv>:
      front()
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
	return c.front();
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff81 	bl	8001e30 <_ZNSt5dequeI7RequestSaIS0_EE5frontEv>
 8001f2e:	4603      	mov	r3, r0
      }
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_ZNSt5queueI7RequestSt5dequeIS0_SaIS0_EEE3popEv>:
      pop()
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	c.pop_front();
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff97 	bl	8001e76 <_ZNSt5dequeI7RequestSaIS0_EE9pop_frontEv>
      }
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>:
      _S_use_relocate()
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f805 	bl	8001f66 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001f5c:	4603      	mov	r3, r0
      }
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_ZNSt6vectorIhSaIhEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001f6e:	2301      	movs	r3, #1
      }
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_ZNSt6vectorIhSaIhEEaSEOS1_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 8001f8a:	6838      	ldr	r0, [r7, #0]
 8001f8c:	f000 fdac 	bl	8002ae8 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4622      	mov	r2, r4
 8001f94:	4619      	mov	r1, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fdb1 	bl	8002afe <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>
	return *this;
 8001f9c:	687b      	ldr	r3, [r7, #4]
      }
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}

08001fa6 <_ZNSt5dequeI8IMUFrameSaIS0_EE10push_frontEOS0_>:
      push_front(value_type&& __x)
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
      { emplace_front(std::move(__x)); }
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f000 fde2 	bl	8002b7a <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fde8 	bl	8002b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f103 0218 	add.w	r2, r3, #24
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f000 fe0f 	bl	8002c00 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_ZNKSt5dequeI8IMUFrameSaIS0_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fe2a 	bl	8002c58 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>
 8002004:	4603      	mov	r3, r0
      }
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fe44 	bl	8002ca4 <_ZNSaI8IMUFrameED1Ev>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EEC1Ev>:
      _Deque_base()
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
      : _M_impl()
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fe27 	bl	8002c84 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002036:	2100      	movs	r1, #0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fe3f 	bl	8002cbc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002060:	3304      	adds	r3, #4
 8002062:	461a      	mov	r2, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fe8f 	bl	8002d88 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	461a      	mov	r2, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fea1 	bl	8002dbc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ffc6 	bl	800200e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implD1Ev>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_ZNSt5dequeI8IMUFrameSaIS0_EED1Ev>:
      ~deque()
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	; 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002094:	f107 0308 	add.w	r3, r7, #8
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 feaa 	bl	8002df4 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 80020a0:	f107 0318 	add.w	r3, r7, #24
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 feb3 	bl	8002e12 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fd9a 	bl	8002be8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f107 0218 	add.w	r2, r7, #24
 80020ba:	f107 0108 	add.w	r1, r7, #8
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fed2 	bl	8002e68 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ffbe 	bl	8002048 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EED1Ev>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4618      	mov	r0, r3
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <_ZNSt5dequeI7RequestSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 80020e0:	6838      	ldr	r0, [r7, #0]
 80020e2:	f000 fece 	bl	8002e82 <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4622      	mov	r2, r4
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fed3 	bl	8002e98 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 80020f2:	687b      	ldr	r3, [r7, #4]
      }
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd90      	pop	{r4, r7, pc}

080020fc <_ZNSt5dequeI8ResponceSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 8002106:	6838      	ldr	r0, [r7, #0]
 8002108:	f000 fee7 	bl	8002eda <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 800210c:	4603      	mov	r3, r0
 800210e:	4622      	mov	r2, r4
 8002110:	4619      	mov	r1, r3
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 feec 	bl	8002ef0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 8002118:	687b      	ldr	r3, [r7, #4]
      }
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}

08002122 <_ZNSt5dequeI8IMUFrameSaIS0_EEaSEOS2_>:
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
 8002122:	b590      	push	{r4, r7, lr}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
	_M_move_assign1(std::move(__x), __always_equal{});
 800212c:	6838      	ldr	r0, [r7, #0]
 800212e:	f000 ff00 	bl	8002f32 <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>
 8002132:	4603      	mov	r3, r0
 8002134:	4622      	mov	r2, r4
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 ff05 	bl	8002f48 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>
	return *this;
 800213e:	687b      	ldr	r3, [r7, #4]
      }
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}

08002148 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a8 	beq.w	80022aa <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
	{
	  const size_type __size = size();
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fe7c 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002160:	61f8      	str	r0, [r7, #28]
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689a      	ldr	r2, [r3, #8]
					 - this->_M_impl._M_finish);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	1ad3      	subs	r3, r2, r3
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 800216c:	61bb      	str	r3, [r7, #24]

	  if (__size > max_size() || __navail > max_size() - __size)
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fc72 	bl	8002a58 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8002174:	4602      	mov	r2, r0
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	4293      	cmp	r3, r2
 800217a:	d808      	bhi.n	800218e <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x46>
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fc6b 	bl	8002a58 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8002182:	4602      	mov	r2, r0
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	429a      	cmp	r2, r3
 800218c:	d901      	bls.n	8002192 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4a>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x4c>
 8002192:	2300      	movs	r3, #0
 8002194:	2b00      	cmp	r3, #0
	    __builtin_unreachable();

	  if (__navail >= __n)
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d30f      	bcc.n	80021be <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x76>
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685c      	ldr	r4, [r3, #4]
						 __n, _M_get_Tp_allocator());
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fab0 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80021aa:	4603      	mov	r3, r0
		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 80021ac:	461a      	mov	r2, r3
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	4620      	mov	r0, r4
 80021b2:	f000 feea 	bl	8002f8a <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
 80021b6:	4602      	mov	r2, r0
	      this->_M_impl._M_finish =
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 80021bc:	e075      	b.n	80022aa <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x162>
		_M_check_len(__n, "vector::_M_default_append");
 80021be:	4a3d      	ldr	r2, [pc, #244]	; (80022b4 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x16c>)
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fef0 	bl	8002fa8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80021c8:	6178      	str	r0, [r7, #20]
	      pointer __new_start(this->_M_allocate(__len));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6979      	ldr	r1, [r7, #20]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fc53 	bl	8002a7a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80021d4:	6138      	str	r0, [r7, #16]
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80021d6:	f7ff febb 	bl	8001f50 <_ZNSt6vectorIhSaIhEE15_S_use_relocateEv>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d01b      	beq.n	8002218 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0xd0>
		      std::__uninitialized_default_n_a(__new_start + __size,
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fa8e 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80021ee:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 80021f0:	461a      	mov	r2, r3
 80021f2:	6839      	ldr	r1, [r7, #0]
 80021f4:	4620      	mov	r0, r4
 80021f6:	f000 fec8 	bl	8002f8a <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681c      	ldr	r4, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fa80 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800220a:	4603      	mov	r3, r0
		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4629      	mov	r1, r5
 8002210:	4620      	mov	r0, r4
 8002212:	f000 fc46 	bl	8002aa2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>
 8002216:	e02e      	b.n	8002276 <_ZNSt6vectorIhSaIhEE17_M_default_appendEj+0x12e>
		  pointer __destroy_from = pointer();
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_default_n_a(__new_start + __size,
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	18d4      	adds	r4, r2, r3
			      __n, _M_get_Tp_allocator());
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fa70 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800222a:	4603      	mov	r3, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 800222c:	461a      	mov	r2, r3
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4620      	mov	r0, r4
 8002232:	f000 feaa 	bl	8002f8a <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>
		      __destroy_from = __new_start + __size;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
		      std::__uninitialized_move_if_noexcept_a(
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681c      	ldr	r4, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685d      	ldr	r5, [r3, #4]
			      __new_start, _M_get_Tp_allocator());
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fa5e 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800224e:	4603      	mov	r3, r0
		      std::__uninitialized_move_if_noexcept_a(
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4629      	mov	r1, r5
 8002254:	4620      	mov	r0, r4
 8002256:	f000 feee 	bl	8003036 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681c      	ldr	r4, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685d      	ldr	r5, [r3, #4]
				_M_get_Tp_allocator());
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fa50 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800226a:	4603      	mov	r3, r0
		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800226c:	461a      	mov	r2, r3
 800226e:	4629      	mov	r1, r5
 8002270:	4620      	mov	r0, r4
 8002272:	f000 fa55 	bl	8002720 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8002286:	461a      	mov	r2, r3
 8002288:	f000 fa2c 	bl	80026e4 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4413      	add	r3, r2
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	441a      	add	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	441a      	add	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	609a      	str	r2, [r3, #8]
    }
 80022aa:	bf00      	nop
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdb0      	pop	{r4, r5, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	08019a34 	.word	0x08019a34

080022b8 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00e      	beq.n	80022f0 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh+0x38>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fa16 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80022de:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 80022e0:	461a      	mov	r2, r3
 80022e2:	4621      	mov	r1, r4
 80022e4:	6838      	ldr	r0, [r7, #0]
 80022e6:	f000 fa1b 	bl	8002720 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}

080022f8 <_ZNKSt6vectorIhSaIhEE11_M_data_ptrIhEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
	{ return __ptr; }
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_ZNSt11_Deque_baseI7RequestSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fea5 	bl	8003068 <_ZNSaI7RequestEC1Ev>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fead 	bl	8003080 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZNSaI7RequestED1Ev>:
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 feba 	bl	80030b2 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8002352:	2014      	movs	r0, #20
 8002354:	f7fe fcfd 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8002358:	4602      	mov	r2, r0
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002364:	2308      	movs	r3, #8
 8002366:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	3302      	adds	r3, #2
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	f107 0210 	add.w	r2, r7, #16
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fea5 	bl	80030c8 <_ZSt3maxIjERKT_S2_S2_>
 800237e:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 feaf 	bl	80030f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 8002392:	4602      	mov	r2, r0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	1acb      	subs	r3, r1, r3
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80023a8:	4413      	add	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	69b9      	ldr	r1, [r7, #24]
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 feb5 	bl	800312a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3308      	adds	r3, #8
 80023c4:	69b9      	ldr	r1, [r7, #24]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fec9 	bl	800315e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f103 0218 	add.w	r2, r3, #24
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3b04      	subs	r3, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f000 fec0 	bl	800315e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80023ea:	2014      	movs	r0, #20
 80023ec:	f7fe fcb1 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 80023f0:	4602      	mov	r2, r0
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80023f8:	fb01 f202 	mul.w	r2, r1, r2
 80023fc:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
    }
 800240c:	bf00      	nop
 800240e:	3724      	adds	r7, #36	; 0x24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}

08002414 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d209      	bcs.n	8002440 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 feaf 	bl	8003196 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3304      	adds	r3, #4
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e7f1      	b.n	8002424 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8002440:	bf00      	nop
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 feae 	bl	80031bc <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fec4 	bl	80031f6 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4618      	mov	r0, r3
 8002474:	f000 feb3 	bl	80031de <_ZNSaIP7RequestED1Ev>
      }
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	3308      	adds	r3, #8
 800248e:	4619      	mov	r1, r3
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f81e 	bl	80024d2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <_ZNSt5dequeI7RequestSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	3318      	adds	r3, #24
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f80f 	bl	80024d2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800250a:	b580      	push	{r7, lr}
 800250c:	b08c      	sub	sp, #48	; 0x30
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ffd7 	bl	80024d2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002524:	f107 0320 	add.w	r3, r7, #32
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ffd1 	bl	80024d2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8002530:	f107 0220 	add.w	r2, r7, #32
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	4619      	mov	r1, r3
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fe6a 	bl	8003214 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8002540:	bf00      	nop
 8002542:	3730      	adds	r7, #48	; 0x30
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fecd 	bl	80032f0 <_ZNSaI8ResponceED1Ev>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_ZNSt11_Deque_baseI8ResponceSaIS0_EEC1Ev>:
      _Deque_base()
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 feb0 	bl	80032d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002570:	2100      	movs	r1, #0
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fec8 	bl	8003308 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d010      	beq.n	80025b4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 800259a:	3304      	adds	r3, #4
 800259c:	461a      	mov	r2, r3
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 ff15 	bl	80033ce <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	461a      	mov	r2, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 ff27 	bl	8003402 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffc6 	bl	8002548 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implD1Ev>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	3308      	adds	r3, #8
 80025d4:	4619      	mov	r1, r3
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f81e 	bl	8002618 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	3318      	adds	r3, #24
 80025f2:	4619      	mov	r1, r3
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f80f 	bl	8002618 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
	  _M_destroy_data_aux(__first, __last);
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ffd7 	bl	8002618 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 800266a:	f107 0320 	add.w	r3, r7, #32
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ffd1 	bl	8002618 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8002676:	f107 0220 	add.w	r2, r7, #32
 800267a:	f107 0310 	add.w	r3, r7, #16
 800267e:	4619      	mov	r1, r3
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 feda 	bl	800343a <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>
      }
 8002686:	bf00      	nop
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 ff2a 	bl	80034f0 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
	{ }
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
	if (__p)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 ff02 	bl	8003506 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fef8 	bl	8003524 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffec 	bl	800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fee7 	bl	800353e <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fef3 	bl	800356e <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8002788:	4604      	mov	r4, r0
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 ff01 	bl	8003592 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8002790:	4603      	mov	r3, r0
 8002792:	429c      	cmp	r4, r3
 8002794:	bf0c      	ite	eq
 8002796:	2301      	moveq	r3, #1
 8002798:	2300      	movne	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 80027a0:	4816      	ldr	r0, [pc, #88]	; (80027fc <_ZNSt5dequeI7RequestSaIS0_EE16_M_push_back_auxIJS0_EEEvDpOT_+0x84>)
 80027a2:	f015 ff83 	bl	80186ac <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 80027a6:	2101      	movs	r1, #1
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 ff03 	bl	80035b4 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1d1c      	adds	r4, r3, #4
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 ff17 	bl	80035ea <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 80027bc:	4603      	mov	r3, r0
 80027be:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80027c0:	687c      	ldr	r4, [r7, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699d      	ldr	r5, [r3, #24]
 80027c6:	6838      	ldr	r0, [r7, #0]
 80027c8:	f7ff ffb8 	bl	800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4629      	mov	r1, r5
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7ff ffbd 	bl	8002752 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f103 0218 	add.w	r2, r3, #24
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fcb9 	bl	800315e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bdb0      	pop	{r4, r5, r7, pc}
 80027fc:	08019a50 	.word	0x08019a50

08002800 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
  // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8002800:	b5b0      	push	{r4, r5, r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 feaf 	bl	800356e <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>
 8002810:	4604      	mov	r4, r0
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 febd 	bl	8003592 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>
 8002818:	4603      	mov	r3, r0
 800281a:	429c      	cmp	r4, r3
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8002828:	4817      	ldr	r0, [pc, #92]	; (8002888 <_ZNSt5dequeI7RequestSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 800282a:	f015 ff3f 	bl	80186ac <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_front();
 800282e:	2101      	movs	r1, #1
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 feec 	bl	800360e <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	1f1c      	subs	r4, r3, #4
 800283e:	4610      	mov	r0, r2
 8002840:	f000 fed3 	bl	80035ea <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8002844:	4603      	mov	r3, r0
 8002846:	6023      	str	r3, [r4, #0]
	__try
	  {
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f103 0208 	add.w	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	3b04      	subs	r3, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f000 fc81 	bl	800315e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
					       - 1);
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f1a3 0214 	sub.w	r2, r3, #20
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	609a      	str	r2, [r3, #8]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8002868:	687c      	ldr	r4, [r7, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689d      	ldr	r5, [r3, #8]
 800286e:	6838      	ldr	r0, [r7, #0]
 8002870:	f7ff ff64 	bl	800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	4629      	mov	r1, r5
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff ff69 	bl	8002752 <_ZNSt16allocator_traitsISaI7RequestEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  {
	    ++this->_M_impl._M_start;
	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
	    __throw_exception_again;
	  }
      }
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bdb0      	pop	{r4, r5, r7, pc}
 8002888:	08019a50 	.word	0x08019a50

0800288c <_ZNKSt5dequeI8ResponceSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f103 0218 	add.w	r2, r3, #24
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3308      	adds	r3, #8
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f000 fecc 	bl	800363e <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_ZNSt5dequeI8ResponceSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	return *begin();
 80028b8:	f107 0308 	add.w	r3, r7, #8
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fe81 	bl	80025c6 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 80028c4:	f107 0308 	add.w	r3, r7, #8
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fecc 	bl	8003666 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>
 80028ce:	4603      	mov	r3, r0
      }
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_ZSt4moveIRNSt12_Vector_baseIhSaIhEE12_Vector_implEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80028f8:	6839      	ldr	r1, [r7, #0]
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 febf 	bl	800367e <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1EOS2_>:
	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
	  _M_end_of_storage(__x._M_end_of_storage)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	601a      	str	r2, [r3, #0]
	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
	  _M_end_of_storage(__x._M_end_of_storage)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]
	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	3b10      	subs	r3, #16
	if (this->_M_impl._M_start._M_cur
 8002962:	429a      	cmp	r2, r3
 8002964:	d011      	beq.n	800298a <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x3a>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fe4a 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 fe8d 	bl	8003696 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
	    ++this->_M_impl._M_start._M_cur;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f103 0210 	add.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]
      }
 8002988:	e002      	b.n	8002990 <_ZNSt5dequeI8ResponceSaIS0_EE9pop_frontEv+0x40>
	  _M_pop_front_aux();
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fe90 	bl	80036b0 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>
      }
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <_ZSteqRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_ZNKSt15_Deque_iteratorI7RequestRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fe8b 	bl	8003700 <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>
	}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_ZNSt5dequeI7RequestSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fd5d 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a02:	4602      	mov	r2, r0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	f7ff ffe4 	bl	80029d8 <_ZNSt16allocator_traitsISaI7RequestEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4619      	mov	r1, r3
 8002a18:	4610      	mov	r0, r2
 8002a1a:	f000 fbbc 	bl	8003196 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f103 0208 	add.w	r2, r3, #8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f000 fb96 	bl	800315e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	609a      	str	r2, [r3, #8]
    }
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ffed 	bl	8002a42 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fe5f 	bl	800372e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fe67 	bl	8003762 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8002a94:	4603      	mov	r3, r0
 8002a96:	e000      	b.n	8002a9a <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8002a98:	2300      	movs	r3, #0
      }
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_ZNSt6vectorIhSaIhEE11_S_relocateEPhS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002aa2:	b590      	push	{r4, r7, lr}
 8002aa4:	b087      	sub	sp, #28
 8002aa6:	af02      	add	r7, sp, #8
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002ab0:	f88d 4000 	strb.w	r4, [sp]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fe60 	bl	8003780 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>
 8002ac0:	4603      	mov	r3, r0
      }
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}

08002aca <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fe63 	bl	80037a4 <_ZNSt13move_iteratorIPhEC1ES0_>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_ZSt4moveIRSt6vectorIhSaIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <_ZNSt6vectorIhSaIhEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
      _M_move_assign(vector&& __x, true_type) noexcept
 8002afe:	b590      	push	{r4, r7, lr}
 8002b00:	b089      	sub	sp, #36	; 0x24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	713a      	strb	r2, [r7, #4]
	vector __tmp(get_allocator());
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fe69 	bl	80037ea <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>
 8002b18:	f107 021c 	add.w	r2, r7, #28
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fe72 	bl	800380c <_ZNSt6vectorIhSaIhEEC1ERKS0_>
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff f880 	bl	8001c32 <_ZNSaIhED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fe76 	bl	800382a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fe6f 	bl	800382a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fddb 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b54:	4604      	mov	r4, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fdd6 	bl	800270a <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4619      	mov	r1, r3
 8002b62:	4620      	mov	r0, r4
 8002b64:	f000 fe7f 	bl	8003866 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>
	vector __tmp(get_allocator());
 8002b68:	f107 0310 	add.w	r3, r7, #16
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f884 	bl	8001c7a <_ZNSt6vectorIhSaIhEED1Ev>
      }
 8002b72:	bf00      	nop
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd90      	pop	{r4, r7, pc}

08002b7a <_ZSt4moveIR8IMUFrameEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d014      	beq.n	8002bd0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x40>
	    _Alloc_traits::construct(this->_M_impl,
 8002ba6:	687c      	ldr	r4, [r7, #4]
				     this->_M_impl._M_start._M_cur - 1,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 8002bac:	f1a3 051c 	sub.w	r5, r3, #28
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f000 fe99 	bl	80038e8 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4629      	mov	r1, r5
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f000 fe9e 	bl	80038fe <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    --this->_M_impl._M_start._M_cur;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f1a3 021c 	sub.w	r2, r3, #28
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
      }
 8002bce:	e007      	b.n	8002be0 <_ZNSt5dequeI8IMUFrameSaIS0_EE13emplace_frontIJS0_EEEvDpOT_+0x50>
	  _M_push_front_aux(std::forward<_Args>(__args)...);
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f000 fe89 	bl	80038e8 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fea2 	bl	8003924 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>
      }
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdb0      	pop	{r4, r5, r7, pc}

08002be8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002c0a:	f000 ff00 	bl	8003a0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	109b      	asrs	r3, r3, #2
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6811      	ldr	r1, [r2, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6852      	ldr	r2, [r2, #4]
 8002c2c:	1a8a      	subs	r2, r1, r2
 8002c2e:	1092      	asrs	r2, r2, #2
 8002c30:	4908      	ldr	r1, [pc, #32]	; (8002c54 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 8002c32:	fb01 f202 	mul.w	r2, r1, r2
 8002c36:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	6891      	ldr	r1, [r2, #8]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	1a8a      	subs	r2, r1, r2
 8002c42:	1092      	asrs	r2, r2, #2
 8002c44:	4903      	ldr	r1, [pc, #12]	; (8002c54 <_ZStmiRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_ES5_+0x54>)
 8002c46:	fb01 f202 	mul.w	r2, r1, r2
 8002c4a:	4413      	add	r3, r2
      }
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	b6db6db7 	.word	0xb6db6db7

08002c58 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fed7 	bl	8003a1e <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>
 8002c70:	f107 0308 	add.w	r3, r7, #8
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fee5 	bl	8003a44 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fee5 	bl	8003a5c <_ZNSaI8IMUFrameEC1Ev>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 feed 	bl	8003a74 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_ZNSaI8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fefa 	bl	8003aa6 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8002cc6:	201c      	movs	r0, #28
 8002cc8:	f7fe f843 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002cd8:	2308      	movs	r3, #8
 8002cda:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3302      	adds	r3, #2
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	f107 0210 	add.w	r2, r7, #16
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 f9eb 	bl	80030c8 <_ZSt3maxIjERKT_S2_S2_>
 8002cf2:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fedb 	bl	8003abc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8002d06:	4602      	mov	r2, r0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	1acb      	subs	r3, r1, r3
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002d1c:	4413      	add	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4413      	add	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	69b9      	ldr	r1, [r7, #24]
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fee1 	bl	8003af6 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3308      	adds	r3, #8
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 fe4b 	bl	80039d6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f103 0218 	add.w	r2, r3, #24
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3b04      	subs	r3, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	f000 fe42 	bl	80039d6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002d5e:	201c      	movs	r0, #28
 8002d60:	f7fd fff7 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8002d64:	4602      	mov	r2, r0
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d6c:	fb01 f202 	mul.w	r2, r1, r2
 8002d70:	1a9a      	subs	r2, r3, r2
					+ __num_elements
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	619a      	str	r2, [r3, #24]
    }
 8002d80:	bf00      	nop
 8002d82:	3724      	adds	r7, #36	; 0x24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd90      	pop	{r4, r7, pc}

08002d88 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d209      	bcs.n	8002db4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4619      	mov	r1, r3
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fe02 	bl	80039b0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3304      	adds	r3, #4
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e7f1      	b.n	8002d98 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 8002db4:	bf00      	nop
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	68f9      	ldr	r1, [r7, #12]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 feab 	bl	8003b2a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fec1 	bl	8003b64 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 feb0 	bl	8003b4c <_ZNSaIP8IMUFrameED1Ev>
      }
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	3308      	adds	r3, #8
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f813 	bl	8002e30 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	3318      	adds	r3, #24
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f804 	bl	8002e30 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
      _M_destroy_data(iterator __first, iterator __last,
 8002e68:	b480      	push	{r7}
 8002e6a:	b08d      	sub	sp, #52	; 0x34
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
      }
 8002e76:	bf00      	nop
 8002e78:	3734      	adds	r7, #52	; 0x34
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_ZSt4moveIRSt5dequeI7RequestSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_ZNSt5dequeI7RequestSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:

#if __cplusplus >= 201103L
      // Constant-time, nothrow move assignment when source object's memory
      // can be moved because the allocators are equal.
      void
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	713a      	strb	r2, [r7, #4]
      {
	this->_M_impl._M_swap_data(__x._M_impl);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fe69 	bl	8003b82 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8002eb0:	68b8      	ldr	r0, [r7, #8]
 8002eb2:	f000 fe73 	bl	8003b9c <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff faff 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fafa 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f000 fe79 	bl	8003bc4 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>
      }
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}

08002eda <_ZSt4moveIRSt5dequeI8ResponceSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fe6c 	bl	8003be0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8002f08:	68b8      	ldr	r0, [r7, #8]
 8002f0a:	f000 fe76 	bl	8003bfa <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fb76 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8002f16:	4604      	mov	r4, r0
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fb71 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4620      	mov	r0, r4
 8002f26:	f000 fe7c 	bl	8003c22 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>
      }
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}

08002f32 <_ZSt4moveIRSt5dequeI8IMUFrameSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_move_assign1EOS2_St17integral_constantIbLb1EE>:
      _M_move_assign1(deque&& __x, /* always equal: */ true_type) noexcept
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	713a      	strb	r2, [r7, #4]
	this->_M_impl._M_swap_data(__x._M_impl);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fe6f 	bl	8003c3e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>
	__x.clear();
 8002f60:	68b8      	ldr	r0, [r7, #8]
 8002f62:	f000 fe79 	bl	8003c58 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fe3d 	bl	8002be8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fe38 	bl	8002be8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f000 fe7f 	bl	8003c80 <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>
      }
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd90      	pop	{r4, r7, pc}

08002f8a <_ZSt27__uninitialized_default_n_aIPhjhET_S1_T0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fe7f 	bl	8003c9c <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff fd4f 	bl	8002a58 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7fe ff4b 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	1ae2      	subs	r2, r4, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	bf34      	ite	cc
 8002fcc:	2301      	movcc	r3, #1
 8002fce:	2300      	movcs	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f015 fb68 	bl	80186ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f7fe ff3b 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7fe ff37 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8002fea:	4603      	mov	r3, r0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	f107 0208 	add.w	r2, r7, #8
 8002ff2:	f107 0310 	add.w	r3, r7, #16
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f865 	bl	80030c8 <_ZSt3maxIjERKT_S2_S2_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4423      	add	r3, r4
 8003004:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7fe ff26 	bl	8001e58 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4293      	cmp	r3, r2
 8003012:	d306      	bcc.n	8003022 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7ff fd1f 	bl	8002a58 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800301a:	4602      	mov	r2, r0
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	4293      	cmp	r3, r2
 8003020:	d904      	bls.n	800302c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff fd18 	bl	8002a58 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8003028:	4603      	mov	r3, r0
 800302a:	e000      	b.n	800302e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 800302c:	697b      	ldr	r3, [r7, #20]
      }
 800302e:	4618      	mov	r0, r3
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}

08003036 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003036:	b590      	push	{r4, r7, lr}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fd40 	bl	8002aca <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 800304a:	4604      	mov	r4, r0
 800304c:	68b8      	ldr	r0, [r7, #8]
 800304e:	f7ff fd3c 	bl	8002aca <_ZSt32__make_move_if_noexcept_iteratorIhSt13move_iteratorIPhEET0_PT_>
 8003052:	4601      	mov	r1, r0
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4620      	mov	r0, r4
 800305a:	f000 fbb5 	bl	80037c8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>
 800305e:	4603      	mov	r3, r0
    }
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}

08003068 <_ZNSaI7RequestEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fe23 	bl	8003cbc <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3308      	adds	r3, #8
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fe1a 	bl	8003cd2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3318      	adds	r3, #24
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fe15 	bl	8003cd2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>
	{ }
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <_ZN9__gnu_cxx13new_allocatorI7RequestED1Ev>:
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d201      	bcs.n	80030e2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	e000      	b.n	80030e4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80030e2:	687b      	ldr	r3, [r7, #4]
    }
 80030e4:	4618      	mov	r0, r3
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f85b 	bl	80031bc <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	6839      	ldr	r1, [r7, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fdf7 	bl	8003d00 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>
 8003112:	4604      	mov	r4, r0
 8003114:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003116:	f107 030c 	add.w	r3, r7, #12
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f85f 	bl	80031de <_ZNSaIP7RequestED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003120:	4623      	mov	r3, r4
      }
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}

0800312a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 800312a:	b580      	push	{r7, lr}
 800312c:	b086      	sub	sp, #24
 800312e:	af00      	add	r7, sp, #0
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	60b9      	str	r1, [r7, #8]
 8003134:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	429a      	cmp	r2, r3
 8003140:	d209      	bcs.n	8003156 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fa51 	bl	80035ea <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>
 8003148:	4602      	mov	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3304      	adds	r3, #4
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e7f1      	b.n	800313a <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 800315e:	b590      	push	{r4, r7, lr}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685c      	ldr	r4, [r3, #4]
 800317a:	f000 fdd0 	bl	8003d1e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 800317e:	4602      	mov	r2, r0
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	18e2      	adds	r2, r4, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]
      }
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}

08003196 <_ZNSt11_Deque_baseI7RequestSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003196:	b590      	push	{r4, r7, lr}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80031a0:	687c      	ldr	r4, [r7, #4]
 80031a2:	2014      	movs	r0, #20
 80031a4:	f7fd fdd5 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 80031a8:	4603      	mov	r3, r0
 80031aa:	461a      	mov	r2, r3
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	4620      	mov	r0, r4
 80031b0:	f000 fdbd 	bl	8003d2e <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>
      }
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}

080031bc <_ZNKSt11_Deque_baseI7RequestSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	f000 fdc0 	bl	8003d4c <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4619      	mov	r1, r3
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fdc6 	bl	8003d62 <_ZNSaIP7RequestEC1IS_EERKSaIT_E>
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <_ZNSaIP7RequestED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fdc8 	bl	8003d7c <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_ZNSt16allocator_traitsISaIP7RequestEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fdc3 	bl	8003d92 <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
	}
      }

   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	3304      	adds	r3, #4
 8003226:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	429a      	cmp	r2, r3
 8003230:	d219      	bcs.n	8003266 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x52>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	681c      	ldr	r4, [r3, #0]
 800323a:	f000 fdba 	bl	8003db2 <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>
 800323e:	4602      	mov	r2, r0
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f935 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003252:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003254:	461a      	mov	r2, r3
 8003256:	4621      	mov	r1, r4
 8003258:	4628      	mov	r0, r5
 800325a:	f000 fdb2 	bl	8003dc2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3304      	adds	r3, #4
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e7e0      	b.n	8003228 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>

       if (__first._M_node != __last._M_node)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	429a      	cmp	r2, r3
 8003270:	d01c      	beq.n	80032ac <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x98>
	 {
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	681c      	ldr	r4, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f91d 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8003282:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003284:	461a      	mov	r2, r3
 8003286:	4629      	mov	r1, r5
 8003288:	4620      	mov	r0, r4
 800328a:	f000 fd9a 	bl	8003dc2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685c      	ldr	r4, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff f90f 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 800329e:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 80032a0:	461a      	mov	r2, r3
 80032a2:	4629      	mov	r1, r5
 80032a4:	4620      	mov	r0, r4
 80032a6:	f000 fd8c 	bl	8003dc2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
	 }
       else
	 std::_Destroy(__first._M_cur, __last._M_cur,
		       _M_get_Tp_allocator());
     }
 80032aa:	e00d      	b.n	80032c8 <_ZNSt5dequeI7RequestSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xb4>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	681c      	ldr	r4, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f900 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80032bc:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80032be:	461a      	mov	r2, r3
 80032c0:	4629      	mov	r1, r5
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 fd7d 	bl	8003dc2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>
     }
 80032c8:	bf00      	nop
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bdb0      	pop	{r4, r5, r7, pc}

080032d0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fd80 	bl	8003dde <_ZNSaI8ResponceEC1Ev>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fd88 	bl	8003df6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZNSaI8ResponceED1Ev>:
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fd95 	bl	8003e28 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8003312:	2010      	movs	r0, #16
 8003314:	f7fd fd1d 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8003318:	4602      	mov	r2, r0
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003320:	3301      	adds	r3, #1
 8003322:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003324:	2308      	movs	r3, #8
 8003326:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3302      	adds	r3, #2
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	f107 0210 	add.w	r2, r7, #16
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	4611      	mov	r1, r2
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fec5 	bl	80030c8 <_ZSt3maxIjERKT_S2_S2_>
 800333e:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fd76 	bl	8003e3e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	1acb      	subs	r3, r1, r3
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8003368:	4413      	add	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4413      	add	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	69b9      	ldr	r1, [r7, #24]
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fd7c 	bl	8003e78 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3308      	adds	r3, #8
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fd90 	bl	8003eac <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0218 	add.w	r2, r3, #24
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	3b04      	subs	r3, #4
 8003396:	4619      	mov	r1, r3
 8003398:	4610      	mov	r0, r2
 800339a:	f000 fd87 	bl	8003eac <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80033aa:	2010      	movs	r0, #16
 80033ac:	f7fd fcd1 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 80033b0:	4602      	mov	r2, r0
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80033b8:	fb01 f202 	mul.w	r2, r1, r2
 80033bc:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	619a      	str	r2, [r3, #24]
    }
 80033c6:	bf00      	nop
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}

080033ce <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d209      	bcs.n	80033fa <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4619      	mov	r1, r3
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fd76 	bl	8003ede <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3304      	adds	r3, #4
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e7f1      	b.n	80033de <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
    }
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fd75 	bl	8003f04 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fd8b 	bl	8003f3e <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fd7a 	bl	8003f26 <_ZNSaIP8ResponceED1Ev>
      }
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_>:
     deque<_Tp, _Alloc>::
 800343a:	b5b0      	push	{r4, r5, r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
       for (_Map_pointer __node = __first._M_node + 1;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	3304      	adds	r3, #4
 800344c:	617b      	str	r3, [r7, #20]
	    __node < __last._M_node; ++__node)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	429a      	cmp	r2, r3
 8003456:	d216      	bcs.n	8003486 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x4c>
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681d      	ldr	r5, [r3, #0]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681c      	ldr	r4, [r3, #0]
 8003460:	f000 fd7c 	bl	8003f5c <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>
 8003464:	4603      	mov	r3, r0
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	441c      	add	r4, r3
		       _M_get_Tp_allocator());
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff f8c8 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003472:	4603      	mov	r3, r0
	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 8003474:	461a      	mov	r2, r3
 8003476:	4621      	mov	r1, r4
 8003478:	4628      	mov	r0, r5
 800347a:	f000 fd77 	bl	8003f6c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
       for (_Map_pointer __node = __first._M_node + 1;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	3304      	adds	r3, #4
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e7e3      	b.n	800344e <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x14>
       if (__first._M_node != __last._M_node)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	429a      	cmp	r2, r3
 8003490:	d01c      	beq.n	80034cc <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0x92>
	   std::_Destroy(__first._M_cur, __first._M_last,
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	681c      	ldr	r4, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	689d      	ldr	r5, [r3, #8]
			 _M_get_Tp_allocator());
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f8b0 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80034a2:	4603      	mov	r3, r0
	   std::_Destroy(__first._M_cur, __first._M_last,
 80034a4:	461a      	mov	r2, r3
 80034a6:	4629      	mov	r1, r5
 80034a8:	4620      	mov	r0, r4
 80034aa:	f000 fd5f 	bl	8003f6c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
	   std::_Destroy(__last._M_first, __last._M_cur,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685c      	ldr	r4, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681d      	ldr	r5, [r3, #0]
			 _M_get_Tp_allocator());
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff f8a2 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80034be:	4603      	mov	r3, r0
	   std::_Destroy(__last._M_first, __last._M_cur,
 80034c0:	461a      	mov	r2, r3
 80034c2:	4629      	mov	r1, r5
 80034c4:	4620      	mov	r0, r4
 80034c6:	f000 fd51 	bl	8003f6c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 80034ca:	e00d      	b.n	80034e8 <_ZNSt5dequeI8ResponceSaIS0_EE19_M_destroy_data_auxESt15_Deque_iteratorIS0_RS0_PS0_ES6_+0xae>
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	681c      	ldr	r4, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681d      	ldr	r5, [r3, #0]
		       _M_get_Tp_allocator());
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f893 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80034dc:	4603      	mov	r3, r0
	 std::_Destroy(__first._M_cur, __last._M_cur,
 80034de:	461a      	mov	r2, r3
 80034e0:	4629      	mov	r1, r5
 80034e2:	4620      	mov	r0, r4
 80034e4:	f000 fd42 	bl	8003f6c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>
     }
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bdb0      	pop	{r4, r5, r7, pc}

080034f0 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fd36 	bl	8003f88 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <_ZSt8_DestroyIPhEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fd37 	bl	8003fa4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <_ZN9__gnu_cxx13new_allocatorI7RequestE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800353e:	b590      	push	{r4, r7, lr}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff f8f6 	bl	800273c <_ZSt7forwardI7RequestEOT_RNSt16remove_referenceIS1_E4typeE>
 8003550:	4604      	mov	r4, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4619      	mov	r1, r3
 8003556:	2014      	movs	r0, #20
 8003558:	f7fd fbef 	bl	8000d3a <_ZnwjPv>
 800355c:	4603      	mov	r3, r0
 800355e:	4621      	mov	r1, r4
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd fe7d 	bl	8001260 <_ZN7RequestC1EOS_>
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bd90      	pop	{r4, r7, pc}

0800356e <_ZNKSt5dequeI7RequestSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f103 0218 	add.w	r2, r3, #24
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3308      	adds	r3, #8
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f000 fd1a 	bl	8003fbc <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>
 8003588:	4603      	mov	r3, r0
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <_ZNKSt5dequeI7RequestSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fbd5 	bl	8003d4c <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fd35 	bl	8004014 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	6809      	ldr	r1, [r1, #0]
 80035ce:	1a41      	subs	r1, r0, r1
 80035d0:	1089      	asrs	r1, r1, #2
 80035d2:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d904      	bls.n	80035e2 <_ZNSt5dequeI7RequestSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80035d8:	2200      	movs	r2, #0
 80035da:	6839      	ldr	r1, [r7, #0]
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fd33 	bl	8004048 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80035ea:	b590      	push	{r4, r7, lr}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80035f2:	687c      	ldr	r4, [r7, #4]
 80035f4:	2014      	movs	r0, #20
 80035f6:	f7fd fbac 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4619      	mov	r1, r3
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 fdbc 	bl	800417c <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>
 8003604:	4603      	mov	r3, r0
      }
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}

0800360e <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 8003624:	461a      	mov	r2, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	4293      	cmp	r3, r2
 800362a:	d904      	bls.n	8003636 <_ZNSt5dequeI7RequestSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 800362c:	2201      	movs	r2, #1
 800362e:	6839      	ldr	r1, [r7, #0]
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fd09 	bl	8004048 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>
      }
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_ZSteqRKSt15_Deque_iteratorI8ResponceRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_ZNKSt15_Deque_iteratorI8ResponceRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fd79 	bl	800419a <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>
	}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_ZNSt5dequeI8ResponceSaIS0_EE16_M_pop_front_auxEv>:
    void deque<_Tp, _Alloc>::
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe ffa1 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 80036c0:	4602      	mov	r2, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f7ff ffe4 	bl	8003696 <_ZNSt16allocator_traitsISaI8ResponceEE7destroyIS0_EEvRS1_PT_>
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 fc01 	bl	8003ede <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f103 0208 	add.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	3304      	adds	r3, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f000 fbde 	bl	8003eac <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]
    }
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <_ZN9__gnu_cxx13new_allocatorI7RequestE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	f7fd fce3 	bl	80010d6 <_ZN7RequestD1Ev>
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_ZNSt6vectorIhSaIhEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003736:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800373a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fd61 	bl	8004204 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>
 8003742:	4603      	mov	r3, r0
 8003744:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003746:	f107 0208 	add.w	r2, r7, #8
 800374a:	f107 030c 	add.w	r3, r7, #12
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fd63 	bl	800421c <_ZSt3minIjERKT_S2_S2_>
 8003756:	4603      	mov	r3, r0
 8003758:	681b      	ldr	r3, [r3, #0]
      }
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800376c:	2200      	movs	r2, #0
 800376e:	6839      	ldr	r1, [r7, #0]
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fd67 	bl	8004244 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8003776:	4603      	mov	r3, r0
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <_ZNSt6vectorIhSaIhEE14_S_do_relocateEPhS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fd71 	bl	800427c <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 800379a:	4603      	mov	r3, r0
      }
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <_ZNSt13move_iteratorIPhEC1ES0_>:
      move_iterator(iterator_type __i)
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80037ae:	463b      	mov	r3, r7
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fd80 	bl	80042b6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>
 80037b6:	4603      	mov	r3, r0
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPhES1_hET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fd76 	bl	80042cc <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_ZNKSt12_Vector_baseIhSaIhEE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 80037f4:	6838      	ldr	r0, [r7, #0]
 80037f6:	f7ff f924 	bl	8002a42 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff f875 	bl	80028ee <_ZNSaIhEC1ERKS_>
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZNSt6vectorIhSaIhEEC1ERKS0_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6839      	ldr	r1, [r7, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fd68 	bl	80042f0 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_swap_dataERS2_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe ff34 	bl	80026a6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fd62 	bl	800430e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  _M_copy_data(__x);
 800384a:	6839      	ldr	r1, [r7, #0]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fd5e 	bl	800430e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	  __x._M_copy_data(__tmp);
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	4619      	mov	r1, r3
 8003858:	6838      	ldr	r0, [r7, #0]
 800385a:	f000 fd58 	bl	800430e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>
	}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <_ZSt15__alloc_on_moveISaIhEEvRT_S2_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8003870:	461a      	mov	r2, r3
 8003872:	6839      	ldr	r1, [r7, #0]
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fd61 	bl	800433c <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>
    }
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8003882:	b590      	push	{r4, r7, lr}
 8003884:	b08b      	sub	sp, #44	; 0x2c
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 800388c:	f107 0308 	add.w	r3, r7, #8
 8003890:	6839      	ldr	r1, [r7, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff facc 	bl	8002e30 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8003898:	f107 0318 	add.w	r3, r7, #24
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fab7 	bl	8002e12 <_ZNSt5dequeI8IMUFrameSaIS0_EE3endEv>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff f99e 	bl	8002be8 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f107 0218 	add.w	r2, r7, #24
 80038b2:	f107 0108 	add.w	r1, r7, #8
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fad6 	bl	8002e68 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 80038c8:	3304      	adds	r3, #4
 80038ca:	461a      	mov	r2, r3
 80038cc:	f7ff fa5c 	bl	8002d88 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	f103 0418 	add.w	r4, r3, #24
 80038d8:	4613      	mov	r3, r2
 80038da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 80038e0:	bf00      	nop
 80038e2:	372c      	adds	r7, #44	; 0x2c
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}

080038e8 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff ffec 	bl	80038e8 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fd1d 	bl	8004356 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe fb4a 	bl	8001fc8 <_ZNKSt5dequeI8IMUFrameSaIS0_EE4sizeEv>
 8003934:	4604      	mov	r4, r0
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fd28 	bl	800438c <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>
 800393c:	4603      	mov	r3, r0
 800393e:	429c      	cmp	r4, r3
 8003940:	bf0c      	ite	eq
 8003942:	2301      	moveq	r3, #1
 8003944:	2300      	movne	r3, #0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 800394c:	4817      	ldr	r0, [pc, #92]	; (80039ac <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_push_front_auxIJS0_EEEvDpOT_+0x88>)
 800394e:	f014 fead 	bl	80186ac <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_front();
 8003952:	2101      	movs	r1, #1
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fd2a 	bl	80043ae <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	1f1c      	subs	r4, r3, #4
 8003962:	4610      	mov	r0, r2
 8003964:	f000 fd3b 	bl	80043de <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8003968:	4603      	mov	r3, r0
 800396a:	6023      	str	r3, [r4, #0]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f103 0208 	add.w	r2, r3, #8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	3b04      	subs	r3, #4
 8003978:	4619      	mov	r1, r3
 800397a:	4610      	mov	r0, r2
 800397c:	f000 f82b 	bl	80039d6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f1a3 021c 	sub.w	r2, r3, #28
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	609a      	str	r2, [r3, #8]
	    _Alloc_traits::construct(this->_M_impl,
 800398c:	687c      	ldr	r4, [r7, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689d      	ldr	r5, [r3, #8]
 8003992:	6838      	ldr	r0, [r7, #0]
 8003994:	f7ff ffa8 	bl	80038e8 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	4629      	mov	r1, r5
 800399e:	4620      	mov	r0, r4
 80039a0:	f7ff ffad 	bl	80038fe <_ZNSt16allocator_traitsISaI8IMUFrameEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      }
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bdb0      	pop	{r4, r5, r7, pc}
 80039ac:	08019a50 	.word	0x08019a50

080039b0 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80039ba:	687c      	ldr	r4, [r7, #4]
 80039bc:	201c      	movs	r0, #28
 80039be:	f7fd f9c8 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 80039c2:	4603      	mov	r3, r0
 80039c4:	461a      	mov	r2, r3
 80039c6:	6839      	ldr	r1, [r7, #0]
 80039c8:	4620      	mov	r0, r4
 80039ca:	f000 fd1a 	bl	8004402 <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>
      }
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd90      	pop	{r4, r7, pc}

080039d6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80039d6:	b590      	push	{r4, r7, lr}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685c      	ldr	r4, [r3, #4]
 80039f2:	f000 f80c 	bl	8003a0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	18e2      	adds	r2, r4, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]
      }
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}

08003a0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8003a12:	201c      	movs	r0, #28
 8003a14:	f7fd f99d 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <_ZStplRKSt15_Deque_iteratorI8IMUFrameRS0_PS0_Ei>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff f9ff 	bl	8002e30 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
	__tmp += __n;
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fcf3 	bl	8004420 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>
	return __tmp;
 8003a3a:	bf00      	nop
      }
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_ZNKSt15_Deque_iteratorI8IMUFrameRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <_ZNSaI8IMUFrameEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fd3f 	bl	80044e8 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fd36 	bl	80044fe <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3318      	adds	r3, #24
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fd31 	bl	80044fe <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>
	{ }
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f82c 	bl	8003b2a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	6839      	ldr	r1, [r7, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fd27 	bl	800452c <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>
 8003ade:	4604      	mov	r4, r0
 8003ae0:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f830 	bl	8003b4c <_ZNSaIP8IMUFrameED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003aec:	4623      	mov	r3, r4
      }
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd90      	pop	{r4, r7, pc}

08003af6 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d209      	bcs.n	8003b22 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fc65 	bl	80043de <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>
 8003b14:	4602      	mov	r2, r0
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e7f1      	b.n	8003b06 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8003b22:	bf00      	nop
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003b34:	6838      	ldr	r0, [r7, #0]
 8003b36:	f000 fd08 	bl	800454a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fd0e 	bl	8004560 <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_ZNSaIP8IMUFrameED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fd10 	bl	800457a <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <_ZNSt16allocator_traitsISaIP8IMUFrameEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fd0b 	bl	8004590 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8003b8c:	6839      	ldr	r1, [r7, #0]
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fd0e 	bl	80045b0 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZNSt5dequeI7RequestSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8003ba4:	f107 0308 	add.w	r3, r7, #8
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fc68 	bl	8002480 <_ZNSt5dequeI7RequestSaIS0_EE5beginEv>
 8003bb0:	f107 0308 	add.w	r3, r7, #8
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fd2d 	bl	8004616 <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <_ZSt15__alloc_on_moveISaI7RequestEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fd52 	bl	800467c <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8003bea:	6839      	ldr	r1, [r7, #0]
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fd52 	bl	8004696 <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_ZNSt5dequeI8ResponceSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8003c02:	f107 0308 	add.w	r3, r7, #8
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fcdc 	bl	80025c6 <_ZNSt5dequeI8ResponceSaIS0_EE5beginEv>
 8003c0e:	f107 0308 	add.w	r3, r7, #8
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fd71 	bl	80046fc <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8003c1a:	bf00      	nop
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <_ZSt15__alloc_on_moveISaI8ResponceEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6839      	ldr	r1, [r7, #0]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fd96 	bl	8004762 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_data12_M_swap_dataERS3_>:
	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
	  std::swap(*this, __x);
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fd96 	bl	800477c <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
	}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <_ZNSt5dequeI8IMUFrameSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(begin()); }
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff f8c4 	bl	8002df4 <_ZNSt5dequeI8IMUFrameSaIS0_EE5beginEv>
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff fe05 	bl	8003882 <_ZNSt5dequeI8IMUFrameSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>
 8003c78:	bf00      	nop
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZSt15__alloc_on_moveISaI8IMUFrameEEvRT_S3_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
      __do_alloc_on_move(__one, __two, __pocma());
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fda7 	bl	80047e2 <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>
    }
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <_ZSt25__uninitialized_default_nIPhjET_S1_T0_>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
	__uninit_default_n(__first, __n);
 8003caa:	6839      	ldr	r1, [r7, #0]
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fda5 	bl	80047fc <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>
 8003cb2:	4603      	mov	r3, r0
    }
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ZN9__gnu_cxx13new_allocatorI7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <_ZNSt16allocator_traitsISaIP7RequestEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fd87 	bl	8004822 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8003d22:	2014      	movs	r0, #20
 8003d24:	f7fd f815 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <_ZNSt16allocator_traitsISaI7RequestEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fd8d 	bl	800485e <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <_ZNKSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_ZNSaIP7RequestEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fd89 	bl	8004884 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN9__gnu_cxx13new_allocatorIP7RequestED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_ZN9__gnu_cxx13new_allocatorIP7RequestE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4619      	mov	r1, r3
 8003da4:	68b8      	ldr	r0, [r7, #8]
 8003da6:	f014 fc6b 	bl	8018680 <_ZdlPvj>
      }
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_ZNSt5dequeI7RequestSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8003db2:	b580      	push	{r7, lr}
 8003db4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8003db6:	2014      	movs	r0, #20
 8003db8:	f7fc ffcb 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <_ZSt8_DestroyIP7RequestS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fd62 	bl	800489a <_ZSt8_DestroyIP7RequestEvT_S2_>
    }
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_ZNSaI8ResponceEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fd64 	bl	80048b4 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fd5b 	bl	80048ca <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3318      	adds	r3, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fd56 	bl	80048ca <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>
	{ }
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <_ZN9__gnu_cxx13new_allocatorI8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003e3e:	b590      	push	{r4, r7, lr}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003e48:	f107 030c 	add.w	r3, r7, #12
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f858 	bl	8003f04 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003e54:	f107 030c 	add.w	r3, r7, #12
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fd4c 	bl	80048f8 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>
 8003e60:	4604      	mov	r4, r0
 8003e62:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003e64:	f107 030c 	add.w	r3, r7, #12
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f85c 	bl	8003f26 <_ZNSaIP8ResponceED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003e6e:	4623      	mov	r3, r4
      }
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd90      	pop	{r4, r7, pc}

08003e78 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d209      	bcs.n	8003ea4 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f98e 	bl	80041b2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>
 8003e96:	4602      	mov	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e7f1      	b.n	8003e88 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
    }
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685c      	ldr	r4, [r3, #4]
 8003ec8:	f000 fd25 	bl	8004916 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	18e2      	adds	r2, r4, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	609a      	str	r2, [r3, #8]
      }
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}

08003ede <_ZNSt11_Deque_baseI8ResponceSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8003ede:	b590      	push	{r4, r7, lr}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8003ee8:	687c      	ldr	r4, [r7, #4]
 8003eea:	2010      	movs	r0, #16
 8003eec:	f7fc ff31 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f000 fd15 	bl	8004926 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>
      }
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd90      	pop	{r4, r7, pc}

08003f04 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003f0e:	6838      	ldr	r0, [r7, #0]
 8003f10:	f000 fd18 	bl	8004944 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fd1e 	bl	800495a <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <_ZNSaIP8ResponceED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 fd20 	bl	8004974 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <_ZNSt16allocator_traitsISaIP8ResponceEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fd1b 	bl	800498a <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZNSt5dequeI8ResponceSaIS0_EE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8003f60:	2010      	movs	r0, #16
 8003f62:	f7fc fef6 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_ZSt8_DestroyIP8ResponceS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fd15 	bl	80049aa <_ZSt8_DestroyIP8ResponceEvT_S2_>
    }
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
      deallocate(_Tp* __p, size_type __t)
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	68b8      	ldr	r0, [r7, #8]
 8003f98:	f014 fb72 	bl	8018680 <_ZdlPvj>
      }
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003fc6:	f7ff feaa 	bl	8003d1e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E14_S_buffer_sizeEv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	109b      	asrs	r3, r3, #2
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6811      	ldr	r1, [r2, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6852      	ldr	r2, [r2, #4]
 8003fe8:	1a8a      	subs	r2, r1, r2
 8003fea:	1092      	asrs	r2, r2, #2
 8003fec:	4908      	ldr	r1, [pc, #32]	; (8004010 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8003fee:	fb01 f202 	mul.w	r2, r1, r2
 8003ff2:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	6891      	ldr	r1, [r2, #8]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	1a8a      	subs	r2, r1, r2
 8003ffe:	1092      	asrs	r2, r2, #2
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <_ZStmiRKSt15_Deque_iteratorI7RequestRS0_PS0_ES5_+0x54>)
 8004002:	fb01 f202 	mul.w	r2, r1, r2
 8004006:	4413      	add	r3, r2
      }
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	cccccccd 	.word	0xcccccccd

08004014 <_ZNSt5dequeI7RequestSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 800401c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004020:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fcce 	bl	80049c4 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>
 8004028:	4603      	mov	r3, r0
 800402a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800402c:	f107 0208 	add.w	r2, r7, #8
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f8f0 	bl	800421c <_ZSt3minIjERKT_S2_S2_>
 800403c:	4603      	mov	r3, r0
 800403e:	681b      	ldr	r3, [r3, #0]
      }
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8004048:	b590      	push	{r4, r7, lr}
 800404a:	b08b      	sub	sp, #44	; 0x2c
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	109b      	asrs	r3, r3, #2
 8004062:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8004064:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	4413      	add	r3, r2
 800406c:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	429a      	cmp	r2, r3
 8004078:	d92d      	bls.n	80040d6 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	1acb      	subs	r3, r1, r3
 8004086:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004088:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	e000      	b.n	8004098 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8004096:	2300      	movs	r3, #0
 8004098:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800409a:	4413      	add	r3, r2
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d209      	bcs.n	80040bc <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80040b0:	3304      	adds	r3, #4
 80040b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b4:	4619      	mov	r1, r3
 80040b6:	f000 fc91 	bl	80049dc <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
 80040ba:	e048      	b.n	800414e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80040c4:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	4413      	add	r3, r2
 80040ce:	461a      	mov	r2, r3
 80040d0:	f000 fc9c 	bl	8004a0c <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>
 80040d4:	e03b      	b.n	800414e <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3304      	adds	r3, #4
 80040de:	f107 0208 	add.w	r2, r7, #8
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe ffef 	bl	80030c8 <_ZSt3maxIjERKT_S2_S2_>
 80040ea:	4603      	mov	r3, r0
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80040f0:	3302      	adds	r3, #2
 80040f2:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	69b9      	ldr	r1, [r7, #24]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fff9 	bl	80030f0 <_ZNSt11_Deque_baseI7RequestSaIS0_EE15_M_allocate_mapEj>
 80040fe:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	e000      	b.n	8004118 <_ZNSt5dequeI7RequestSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8004116:	2300      	movs	r3, #0
 8004118:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4413      	add	r3, r2
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004128:	3304      	adds	r3, #4
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	4619      	mov	r1, r3
 800412e:	f000 fc55 	bl	80049dc <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6819      	ldr	r1, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	461a      	mov	r2, r3
 800413e:	f7fe f983 	bl	8002448 <_ZNSt11_Deque_baseI7RequestSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3308      	adds	r3, #8
 8004152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff f802 	bl	800315e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f103 0018 	add.w	r0, r3, #24
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	4413      	add	r3, r2
 800416e:	4619      	mov	r1, r3
 8004170:	f7fe fff5 	bl	800315e <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8004174:	bf00      	nop
 8004176:	372c      	adds	r7, #44	; 0x2c
 8004178:	46bd      	mov	sp, r7
 800417a:	bd90      	pop	{r4, r7, pc}

0800417c <_ZNSt16allocator_traitsISaI7RequestEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004186:	2200      	movs	r2, #0
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fc56 	bl	8004a3c <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>
 8004190:	4603      	mov	r3, r0
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <_ZN9__gnu_cxx13new_allocatorI8ResponceE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 80041a4:	6838      	ldr	r0, [r7, #0]
 80041a6:	f7fc ff31 	bl	800100c <_ZN8ResponceD1Ev>
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80041b2:	b590      	push	{r4, r7, lr}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80041ba:	687c      	ldr	r4, [r7, #4]
 80041bc:	2010      	movs	r0, #16
 80041be:	f7fc fdc8 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4619      	mov	r1, r3
 80041c6:	4620      	mov	r0, r4
 80041c8:	f000 fc59 	bl	8004a7e <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>
 80041cc:	4603      	mov	r3, r0
      }
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}

080041d6 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
    { return __res; }
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <_ZNSt16allocator_traitsISaIhEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fc45 	bl	8004a9c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8004212:	4603      	mov	r3, r0
      }
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d201      	bcs.n	8004236 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	e000      	b.n	8004238 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8004236:	687b      	ldr	r3, [r7, #4]
    }
 8004238:	4618      	mov	r0, r3
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fc2f 	bl	8004ab4 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8004256:	4602      	mov	r2, r0
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4293      	cmp	r3, r2
 800425c:	bf8c      	ite	hi
 800425e:	2301      	movhi	r3, #1
 8004260:	2300      	movls	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004268:	f014 fa1d 	bl	80186a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800426c:	68b8      	ldr	r0, [r7, #8]
 800426e:	f014 fa09 	bl	8018684 <_Znwj>
 8004272:	4603      	mov	r3, r0
      }
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <_ZSt12__relocate_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800427c:	b5b0      	push	{r4, r5, r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff ffa3 	bl	80041d6 <_ZSt12__niter_baseIPhET_S1_>
 8004290:	4604      	mov	r4, r0
 8004292:	68b8      	ldr	r0, [r7, #8]
 8004294:	f7ff ff9f 	bl	80041d6 <_ZSt12__niter_baseIPhET_S1_>
 8004298:	4605      	mov	r5, r0
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff9b 	bl	80041d6 <_ZSt12__niter_baseIPhET_S1_>
 80042a0:	4602      	mov	r2, r0
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	4629      	mov	r1, r5
 80042a6:	4620      	mov	r0, r4
 80042a8:	f000 fc10 	bl	8004acc <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80042ac:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bdb0      	pop	{r4, r5, r7, pc}

080042b6 <_ZSt4moveIRPhEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_ZSt18uninitialized_copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fc0e 	bl	8004b02 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>
 80042e6:	4603      	mov	r3, r0
    }
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fc0f 	bl	8004b22 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_data12_M_copy_dataERKS2_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]
	}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_ZSt18__do_alloc_on_moveISaIhEEvRT_S2_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8004348:	68b8      	ldr	r0, [r7, #8]
 800434a:	f000 fbfc 	bl	8004b46 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004356:	b5b0      	push	{r4, r5, r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	60f8      	str	r0, [r7, #12]
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fac0 	bl	80038e8 <_ZSt7forwardI8IMUFrameEOT_RNSt16remove_referenceIS1_E4typeE>
 8004368:	4605      	mov	r5, r0
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4619      	mov	r1, r3
 800436e:	201c      	movs	r0, #28
 8004370:	f7fc fce3 	bl	8000d3a <_ZnwjPv>
 8004374:	4603      	mov	r3, r0
 8004376:	461c      	mov	r4, r3
 8004378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800437a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800437c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bdb0      	pop	{r4, r5, r7, pc}

0800438c <_ZNKSt5dequeI8IMUFrameSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f8d7 	bl	800454a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>
 800439c:	4603      	mov	r3, r0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fbdc 	bl	8004b5c <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj>:
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695a      	ldr	r2, [r3, #20]
				       - this->_M_impl._M_map))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	109b      	asrs	r3, r3, #2
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 80043c4:	461a      	mov	r2, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d904      	bls.n	80043d6 <_ZNSt5dequeI8IMUFrameSaIS0_EE23_M_reserve_map_at_frontEj+0x28>
	  _M_reallocate_map(__nodes_to_add, true);
 80043cc:	2201      	movs	r2, #1
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fbdd 	bl	8004b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>
      }
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80043de:	b590      	push	{r4, r7, lr}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80043e6:	687c      	ldr	r4, [r7, #4]
 80043e8:	201c      	movs	r0, #28
 80043ea:	f7fc fcb2 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4619      	mov	r1, r3
 80043f2:	4620      	mov	r0, r4
 80043f4:	f000 fc66 	bl	8004cc4 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>
 80043f8:	4603      	mov	r3, r0
      }
 80043fa:	4618      	mov	r0, r3
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd90      	pop	{r4, r7, pc}

08004402 <_ZNSt16allocator_traitsISaI8IMUFrameEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fc65 	bl	8004ce2 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	109b      	asrs	r3, r3, #2
 8004436:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xc4>)
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	461a      	mov	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db08      	blt.n	800445c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 800444a:	f7ff fae0 	bl	8003a0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 800444e:	4603      	mov	r3, r0
 8004450:	461a      	mov	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4293      	cmp	r3, r2
 8004456:	da01      	bge.n	800445c <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3c>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x3e>
 800445c:	2300      	movs	r3, #0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x58>
	  _M_cur += __n;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6819      	ldr	r1, [r3, #0]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	18ca      	adds	r2, r1, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e02f      	b.n	80044d8 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0xb8>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	dd07      	ble.n	800448e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x6e>
 800447e:	f7ff fac6 	bl	8003a0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	fb93 f3f2 	sdiv	r3, r3, r2
 800448c:	e007      	b.n	800449e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EpLEi+0x7e>
			   : -difference_type((-__offset - 1)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8004492:	f7ff fabc 	bl	8003a0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 8004496:	4603      	mov	r3, r0
 8004498:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 800449c:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 800449e:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fa92 	bl	80039d6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first + (__offset - __node_offset
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 80044b6:	f7ff faaa 	bl	8003a0e <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E14_S_buffer_sizeEv>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	18e2      	adds	r2, r4, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	601a      	str	r2, [r3, #0]
	return *this;
 80044d8:	687b      	ldr	r3, [r7, #4]
      }
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd90      	pop	{r4, r7, pc}
 80044e2:	bf00      	nop
 80044e4:	b6db6db7 	.word	0xb6db6db7

080044e8 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <_ZNSt16allocator_traitsISaIP8IMUFrameEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004536:	2200      	movs	r2, #0
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fbe4 	bl	8004d08 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>
 8004540:	4603      	mov	r3, r0
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <_ZNKSt11_Deque_baseI8IMUFrameSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4618      	mov	r0, r3
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <_ZNSaIP8IMUFrameEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fbea 	bl	8004d44 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4619      	mov	r1, r3
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	f014 f86c 	bl	8018680 <_ZdlPvj>
      }
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <_ZSt4swapINSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80045b0:	b5b0      	push	{r4, r5, r7, lr}
 80045b2:	b08c      	sub	sp, #48	; 0x30
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fbcd 	bl	8004d5a <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80045c0:	4602      	mov	r2, r0
 80045c2:	f107 0308 	add.w	r3, r7, #8
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fbf5 	bl	8004db8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 80045ce:	6838      	ldr	r0, [r7, #0]
 80045d0:	f000 fbc3 	bl	8004d5a <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80045d4:	4602      	mov	r2, r0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	461c      	mov	r4, r3
 80045da:	4615      	mov	r5, r2
 80045dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045e8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fbb2 	bl	8004d5a <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80045f6:	4602      	mov	r2, r0
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	461c      	mov	r4, r3
 80045fc:	4615      	mov	r5, r2
 80045fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004606:	e895 0003 	ldmia.w	r5, {r0, r1}
 800460a:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 800460e:	bf00      	nop
 8004610:	3730      	adds	r7, #48	; 0x30
 8004612:	46bd      	mov	sp, r7
 8004614:	bdb0      	pop	{r4, r5, r7, pc}

08004616 <_ZNSt5dequeI7RequestSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 8004616:	b590      	push	{r4, r7, lr}
 8004618:	b08b      	sub	sp, #44	; 0x2c
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fd ff53 	bl	80024d2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 800462c:	f107 0318 	add.w	r3, r7, #24
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fd ff33 	bl	800249e <_ZNSt5dequeI7RequestSaIS0_EE3endEv>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd ff3e 	bl	80024bc <_ZNSt11_Deque_baseI7RequestSaIS0_EE19_M_get_Tp_allocatorEv>
 8004640:	4603      	mov	r3, r0
 8004642:	f107 0218 	add.w	r2, r7, #24
 8004646:	f107 0108 	add.w	r1, r7, #8
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fd ff5d 	bl	800250a <_ZNSt5dequeI7RequestSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 800465c:	3304      	adds	r3, #4
 800465e:	461a      	mov	r2, r3
 8004660:	f7fd fed8 	bl	8002414 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	f103 0418 	add.w	r4, r3, #24
 800466c:	4613      	mov	r3, r2
 800466e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 8004674:	bf00      	nop
 8004676:	372c      	adds	r7, #44	; 0x2c
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}

0800467c <_ZSt18__do_alloc_on_moveISaI7RequestEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 8004688:	68b8      	ldr	r0, [r7, #8]
 800468a:	f000 fbb4 	bl	8004df6 <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_ZSt4swapINSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8004696:	b5b0      	push	{r4, r5, r7, lr}
 8004698:	b08c      	sub	sp, #48	; 0x30
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fbb3 	bl	8004e0c <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80046a6:	4602      	mov	r2, r0
 80046a8:	f107 0308 	add.w	r3, r7, #8
 80046ac:	4611      	mov	r1, r2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fbdb 	bl	8004e6a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 80046b4:	6838      	ldr	r0, [r7, #0]
 80046b6:	f000 fba9 	bl	8004e0c <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80046ba:	4602      	mov	r2, r0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	461c      	mov	r4, r3
 80046c0:	4615      	mov	r5, r2
 80046c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046ce:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80046d2:	f107 0308 	add.w	r3, r7, #8
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fb98 	bl	8004e0c <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80046dc:	4602      	mov	r2, r0
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	461c      	mov	r4, r3
 80046e2:	4615      	mov	r5, r2
 80046e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046f0:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80046f4:	bf00      	nop
 80046f6:	3730      	adds	r7, #48	; 0x30
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}

080046fc <_ZNSt5dequeI8ResponceSaIS0_EE15_M_erase_at_endESt15_Deque_iteratorIS0_RS0_PS0_E>:
      _M_erase_at_end(iterator __pos)
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b08b      	sub	sp, #44	; 0x2c
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 8004706:	f107 0308 	add.w	r3, r7, #8
 800470a:	6839      	ldr	r1, [r7, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7fd ff83 	bl	8002618 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8004712:	f107 0318 	add.w	r3, r7, #24
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fd ff63 	bl	80025e4 <_ZNSt5dequeI8ResponceSaIS0_EE3endEv>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fd ff6e 	bl	8002602 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>
 8004726:	4603      	mov	r3, r0
 8004728:	f107 0218 	add.w	r2, r7, #24
 800472c:	f107 0108 	add.w	r1, r7, #8
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fd ff8d 	bl	8002650 <_ZNSt5dequeI8ResponceSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
	_M_destroy_nodes(__pos._M_node + 1,
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	1d19      	adds	r1, r3, #4
			 this->_M_impl._M_finish._M_node + 1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	_M_destroy_nodes(__pos._M_node + 1,
 8004742:	3304      	adds	r3, #4
 8004744:	461a      	mov	r2, r3
 8004746:	f7fe fe42 	bl	80033ce <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	this->_M_impl._M_finish = __pos;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	f103 0418 	add.w	r4, r3, #24
 8004752:	4613      	mov	r3, r2
 8004754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004756:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      }
 800475a:	bf00      	nop
 800475c:	372c      	adds	r7, #44	; 0x2c
 800475e:	46bd      	mov	sp, r7
 8004760:	bd90      	pop	{r4, r7, pc}

08004762 <_ZSt18__do_alloc_on_moveISaI8ResponceEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 800476e:	68b8      	ldr	r0, [r7, #8]
 8004770:	f000 fb9a 	bl	8004ea8 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>
 8004774:	bf00      	nop
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <_ZSt4swapINSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b08c      	sub	sp, #48	; 0x30
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fb99 	bl	8004ebe <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 800478c:	4602      	mov	r2, r0
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fbc1 	bl	8004f1c <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>
      __a = _GLIBCXX_MOVE(__b);
 800479a:	6838      	ldr	r0, [r7, #0]
 800479c:	f000 fb8f 	bl	8004ebe <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80047a0:	4602      	mov	r2, r0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	461c      	mov	r4, r3
 80047a6:	4615      	mov	r5, r2
 80047a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047b4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80047b8:	f107 0308 	add.w	r3, r7, #8
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fb7e 	bl	8004ebe <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80047c2:	4602      	mov	r2, r0
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	461c      	mov	r4, r3
 80047c8:	4615      	mov	r5, r2
 80047ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047d6:	e884 0003 	stmia.w	r4, {r0, r1}
    }
 80047da:	bf00      	nop
 80047dc:	3730      	adds	r7, #48	; 0x30
 80047de:	46bd      	mov	sp, r7
 80047e0:	bdb0      	pop	{r4, r5, r7, pc}

080047e2 <_ZSt18__do_alloc_on_moveISaI8IMUFrameEEvRT_S3_St17integral_constantIbLb1EE>:
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	713a      	strb	r2, [r7, #4]
    { __one = std::move(__two); }
 80047ee:	68b8      	ldr	r0, [r7, #8]
 80047f0:	f000 fbb3 	bl	8004f5a <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPhjEET_S3_T0_>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
	  return std::fill_n(__first, __n, _ValueType());
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	f107 030f 	add.w	r3, r7, #15
 800480e:	461a      	mov	r2, r3
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fbac 	bl	8004f70 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8004818:	4603      	mov	r3, r0
	}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fbb9 	bl	8004fa6 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>
 8004834:	4602      	mov	r2, r0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4293      	cmp	r3, r2
 800483a:	bf8c      	ite	hi
 800483c:	2301      	movhi	r3, #1
 800483e:	2300      	movls	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <_ZN9__gnu_cxx13new_allocatorIP7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004846:	f013 ff2e 	bl	80186a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f013 ff18 	bl	8018684 <_Znwj>
 8004854:	4603      	mov	r3, r0
      }
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <_ZN9__gnu_cxx13new_allocatorI7RequestE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4619      	mov	r1, r3
 8004876:	68b8      	ldr	r0, [r7, #8]
 8004878:	f013 ff02 	bl	8018680 <_ZdlPvj>
      }
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <_ZN9__gnu_cxx13new_allocatorIP7RequestEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZSt8_DestroyIP7RequestEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800489a:	b580      	push	{r7, lr}
 800489c:	b082      	sub	sp, #8
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fb89 	bl	8004fbe <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>
    }
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_ZN9__gnu_cxx13new_allocatorI8ResponceEC1Ev>:
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <_ZNSt16allocator_traitsISaIP8ResponceEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004902:	2200      	movs	r2, #0
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fb71 	bl	8004fee <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>
 800490c:	4603      	mov	r3, r0
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004916:	b580      	push	{r7, lr}
 8004918:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800491a:	2010      	movs	r0, #16
 800491c:	f7fc fa19 	bl	8000d52 <_ZSt16__deque_buf_sizej>
 8004920:	4603      	mov	r3, r0
 8004922:	4618      	mov	r0, r3
 8004924:	bd80      	pop	{r7, pc}

08004926 <_ZNSt16allocator_traitsISaI8ResponceEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fb77 	bl	800502a <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <_ZNKSt11_Deque_baseI8ResponceSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <_ZNSaIP8ResponceEC1IS_EERKSaIT_E>:
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fb70 	bl	800504a <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZN9__gnu_cxx13new_allocatorIP8ResponceED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <_ZN9__gnu_cxx13new_allocatorIP8ResponceE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4619      	mov	r1, r3
 800499c:	68b8      	ldr	r0, [r7, #8]
 800499e:	f013 fe6f 	bl	8018680 <_ZdlPvj>
      }
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <_ZSt8_DestroyIP8ResponceEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fb52 	bl	8005060 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>
    }
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <_ZNSt16allocator_traitsISaI7RequestEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fb5f 	bl	8005090 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>
 80049d2:	4603      	mov	r3, r0
      }
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <_ZSt4copyIPP7RequestS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80049dc:	b590      	push	{r4, r7, lr}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fb5d 	bl	80050a8 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80049ee:	4604      	mov	r4, r0
 80049f0:	68b8      	ldr	r0, [r7, #8]
 80049f2:	f000 fb59 	bl	80050a8 <_ZSt12__miter_baseIPP7RequestET_S3_>
 80049f6:	4603      	mov	r3, r0
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4619      	mov	r1, r3
 80049fc:	4620      	mov	r0, r4
 80049fe:	f000 fb5e 	bl	80050be <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8004a02:	4603      	mov	r3, r0
    }
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}

08004a0c <_ZSt13copy_backwardIPP7RequestS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fb45 	bl	80050a8 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8004a1e:	4604      	mov	r4, r0
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	f000 fb41 	bl	80050a8 <_ZSt12__miter_baseIPP7RequestET_S3_>
 8004a26:	4603      	mov	r3, r0
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f000 fb69 	bl	8005104 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8004a32:	4603      	mov	r3, r0
    }
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd90      	pop	{r4, r7, pc}

08004a3c <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fb7f 	bl	800514c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4293      	cmp	r3, r2
 8004a54:	bf8c      	ite	hi
 8004a56:	2301      	movhi	r3, #1
 8004a58:	2300      	movls	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <_ZN9__gnu_cxx13new_allocatorI7RequestE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004a60:	f013 fe21 	bl	80186a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f013 fe08 	bl	8018684 <_Znwj>
 8004a74:	4603      	mov	r3, r0
      }
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <_ZNSt16allocator_traitsISaI8ResponceEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004a88:	2200      	movs	r2, #0
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fb6b 	bl	8005168 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f805 	bl	8004ab4 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZNK9__gnu_cxx13new_allocatorIhE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004abc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	dd05      	ble.n	8004af4 <_ZSt14__relocate_a_1IhhENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x28>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	461a      	mov	r2, r3
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f013 fe6a 	bl	80187c8 <memmove>
      return __result + __count;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4413      	add	r3, r2
    }
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPhES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fb46 	bl	80051a4 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b082      	sub	sp, #8
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd fedd 	bl	80028ee <_ZNSaIhEC1ERKS_>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd fdb5 	bl	80026a6 <_ZNSt12_Vector_baseIhSaIhEE17_Vector_impl_dataC1Ev>
	{ }
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <_ZSt4moveIRSaIhEEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_ZNSt5dequeI8IMUFrameSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8004b64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004b68:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fb32 	bl	80051d4 <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>
 8004b70:	4603      	mov	r3, r0
 8004b72:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004b74:	f107 0208 	add.w	r2, r7, #8
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff fb4c 	bl	800421c <_ZSt3minIjERKT_S2_S2_>
 8004b84:	4603      	mov	r3, r0
 8004b86:	681b      	ldr	r3, [r3, #0]
      }
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b08b      	sub	sp, #44	; 0x2c
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	109b      	asrs	r3, r3, #2
 8004baa:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8004bac:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6a3a      	ldr	r2, [r7, #32]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d92d      	bls.n	8004c1e <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	1acb      	subs	r3, r1, r3
 8004bce:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004bd0:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	e000      	b.n	8004be0 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8004bde:	2300      	movs	r3, #0
 8004be0:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8004be2:	4413      	add	r3, r2
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d209      	bcs.n	8004c04 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f000 faf5 	bl	80051ec <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
 8004c02:	e048      	b.n	8004c96 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004c0c:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	4413      	add	r3, r2
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fb00 	bl	800521c <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>
 8004c1c:	e03b      	b.n	8004c96 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3304      	adds	r3, #4
 8004c26:	f107 0208 	add.w	r2, r7, #8
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe fa4b 	bl	80030c8 <_ZSt3maxIjERKT_S2_S2_>
 8004c32:	4603      	mov	r3, r0
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8004c38:	3302      	adds	r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	69b9      	ldr	r1, [r7, #24]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fe ff3b 	bl	8003abc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE15_M_allocate_mapEj>
 8004c46:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xce>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	e000      	b.n	8004c60 <_ZNSt5dequeI8IMUFrameSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4413      	add	r3, r2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8004c70:	3304      	adds	r3, #4
 8004c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c74:	4619      	mov	r1, r3
 8004c76:	f000 fab9 	bl	80051ec <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6819      	ldr	r1, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	461a      	mov	r2, r3
 8004c86:	f7fe f899 	bl	8002dbc <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE17_M_deallocate_mapEPPS0_j>
	  this->_M_impl._M_map = __new_map;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fe9a 	bl	80039d6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f103 0018 	add.w	r0, r3, #24
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	4413      	add	r3, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7fe fe8d 	bl	80039d6 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8004cbc:	bf00      	nop
 8004cbe:	372c      	adds	r7, #44	; 0x2c
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd90      	pop	{r4, r7, pc}

08004cc4 <_ZNSt16allocator_traitsISaI8IMUFrameEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004cce:	2200      	movs	r2, #0
 8004cd0:	6839      	ldr	r1, [r7, #0]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 faba 	bl	800524c <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	f013 fcc0 	bl	8018680 <_ZdlPvj>
      }
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 faba 	bl	800528e <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	bf8c      	ite	hi
 8004d22:	2301      	movhi	r3, #1
 8004d24:	2300      	movls	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004d2c:	f013 fcbb 	bl	80186a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f013 fca5 	bl	8018684 <_Znwj>
 8004d3a:	4603      	mov	r3, r0
      }
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <_ZN9__gnu_cxx13new_allocatorIP8IMUFrameEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <_ZSt4moveIRNSt11_Deque_baseI7RequestSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f103 0208 	add.w	r2, r3, #8
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	3308      	adds	r3, #8
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7fd fb9b 	bl	80024d2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f103 0218 	add.w	r2, r3, #24
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	3318      	adds	r3, #24
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f7fd fb92 	bl	80024d2 <_ZNSt15_Deque_iteratorI7RequestRS0_PS0_EC1ERKS3_>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8004db8:	b5b0      	push	{r4, r5, r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ffd3 	bl	8004d70 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe f956 	bl	8003080 <_ZNSt11_Deque_baseI7RequestSaIS0_EE16_Deque_impl_dataC1Ev>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	461d      	mov	r5, r3
 8004dd8:	f107 0408 	add.w	r4, r7, #8
 8004ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004de4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004de8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4618      	mov	r0, r3
 8004df0:	3730      	adds	r7, #48	; 0x30
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bdb0      	pop	{r4, r5, r7, pc}

08004df6 <_ZSt4moveIRSaI7RequestEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <_ZSt4moveIRNSt11_Deque_baseI8ResponceSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	6039      	str	r1, [r7, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f103 0208 	add.w	r2, r3, #8
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	3308      	adds	r3, #8
 8004e46:	4619      	mov	r1, r3
 8004e48:	4610      	mov	r0, r2
 8004e4a:	f7fd fbe5 	bl	8002618 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f103 0218 	add.w	r2, r3, #24
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	3318      	adds	r3, #24
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f7fd fbdc 	bl	8002618 <_ZNSt15_Deque_iteratorI8ResponceRS0_PS0_EC1ERKS3_>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8004e6a:	b5b0      	push	{r4, r5, r7, lr}
 8004e6c:	b08c      	sub	sp, #48	; 0x30
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ffd3 	bl	8004e22 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8004e7c:	f107 0308 	add.w	r3, r7, #8
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe ffb8 	bl	8003df6 <_ZNSt11_Deque_baseI8ResponceSaIS0_EE16_Deque_impl_dataC1Ev>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	461d      	mov	r5, r3
 8004e8a:	f107 0408 	add.w	r4, r7, #8
 8004e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3730      	adds	r7, #48	; 0x30
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bdb0      	pop	{r4, r5, r7, pc}

08004ea8 <_ZSt4moveIRSaI8ResponceEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <_ZSt4moveIRNSt11_Deque_baseI8IMUFrameSaIS1_EE16_Deque_impl_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>:
	_Deque_impl_data(const _Deque_impl_data&) = default;
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f103 0208 	add.w	r2, r3, #8
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f7fd ff98 	bl	8002e30 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f103 0218 	add.w	r2, r3, #24
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	3318      	adds	r3, #24
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f7fd ff8f 	bl	8002e30 <_ZNSt15_Deque_iteratorI8IMUFrameRS0_PS0_EC1ERKS3_>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1EOS3_>:
	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 8004f1c:	b5b0      	push	{r4, r5, r7, lr}
 8004f1e:	b08c      	sub	sp, #48	; 0x30
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
	: _Deque_impl_data(__x)
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ffd3 	bl	8004ed4 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1ERKS3_>
	{ __x = _Deque_impl_data(); }
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fd9e 	bl	8003a74 <_ZNSt11_Deque_baseI8IMUFrameSaIS0_EE16_Deque_impl_dataC1Ev>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	461d      	mov	r5, r3
 8004f3c:	f107 0408 	add.w	r4, r7, #8
 8004f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4618      	mov	r0, r3
 8004f54:	3730      	adds	r7, #48	; 0x30
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bdb0      	pop	{r4, r5, r7, pc}

08004f5a <_ZSt4moveIRSaI8IMUFrameEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
  // DR 865. More algorithms that throw away information
  // DR 426. search_n(), fill_n(), and generate_n() with negative n
  template<typename _OI, typename _Size, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8004f7c:	68fc      	ldr	r4, [r7, #12]
 8004f7e:	68b8      	ldr	r0, [r7, #8]
 8004f80:	f7fb fed0 	bl	8000d24 <_ZSt17__size_to_integerj>
 8004f84:	4605      	mov	r5, r0
			       std::__iterator_category(__first));
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f98b 	bl	80052a6 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
 8004f90:	4633      	mov	r3, r6
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	4629      	mov	r1, r5
 8004f96:	4620      	mov	r0, r4
 8004f98:	f000 f990 	bl	80052bc <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>
 8004f9c:	4603      	mov	r3, r0
    }
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fa6 <_ZNK9__gnu_cxx13new_allocatorIP7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004fae:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d00a      	beq.n	8004fe6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f98e 	bl	80052f2 <_ZSt11__addressofI7RequestEPT_RS1_>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f995 	bl	8005308 <_ZSt8_DestroyI7RequestEvPT_>
	  for (; __first != __last; ++__first)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3314      	adds	r3, #20
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	e7f0      	b.n	8004fc8 <_ZNSt12_Destroy_auxILb0EE9__destroyIP7RequestEEvT_S4_+0xa>
	}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f98f 	bl	800531e <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4293      	cmp	r3, r2
 8005006:	bf8c      	ite	hi
 8005008:	2301      	movhi	r3, #1
 800500a:	2300      	movls	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <_ZN9__gnu_cxx13new_allocatorIP8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005012:	f013 fb48 	bl	80186a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4618      	mov	r0, r3
 800501c:	f013 fb32 	bl	8018684 <_Znwj>
 8005020:	4603      	mov	r3, r0
      }
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <_ZN9__gnu_cxx13new_allocatorI8ResponceE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	68b8      	ldr	r0, [r7, #8]
 800503e:	f013 fb1f 	bl	8018680 <_ZdlPvj>
      }
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <_ZN9__gnu_cxx13new_allocatorIP8ResponceEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d00a      	beq.n	8005088 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f95f 	bl	8005336 <_ZSt11__addressofI8ResponceEPT_RS1_>
 8005078:	4603      	mov	r3, r0
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f966 	bl	800534c <_ZSt8_DestroyI8ResponceEvPT_>
	  for (; __first != __last; ++__first)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3310      	adds	r3, #16
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	e7f0      	b.n	800506a <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ResponceEEvT_S4_+0xa>
	}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <_ZNK9__gnu_cxx13new_allocatorI7RequestE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f857 	bl	800514c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>
 800509e:	4603      	mov	r3, r0
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <_ZSt12__miter_baseIPP7RequestET_S3_>:
    __miter_base(_Iterator __it)
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
    { return __it; }
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <_ZSt13__copy_move_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80050be:	b5b0      	push	{r4, r5, r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f949 	bl	8005362 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80050d0:	4604      	mov	r4, r0
 80050d2:	68b8      	ldr	r0, [r7, #8]
 80050d4:	f000 f945 	bl	8005362 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80050d8:	4605      	mov	r5, r0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f940 	bl	8005362 <_ZSt12__niter_baseIPP7RequestET_S3_>
 80050e2:	4603      	mov	r3, r0
 80050e4:	461a      	mov	r2, r3
 80050e6:	4629      	mov	r1, r5
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 f945 	bl	8005378 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80050ee:	4602      	mov	r2, r0
 80050f0:	1d3b      	adds	r3, r7, #4
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f94f 	bl	8005398 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 80050fa:	4603      	mov	r3, r0
    }
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bdb0      	pop	{r4, r5, r7, pc}

08005104 <_ZSt22__copy_move_backward_aILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8005104:	b5b0      	push	{r4, r5, r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f926 	bl	8005362 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8005116:	4604      	mov	r4, r0
 8005118:	68b8      	ldr	r0, [r7, #8]
 800511a:	f000 f922 	bl	8005362 <_ZSt12__niter_baseIPP7RequestET_S3_>
 800511e:	4605      	mov	r5, r0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f91d 	bl	8005362 <_ZSt12__niter_baseIPP7RequestET_S3_>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	4629      	mov	r1, r5
 800512e:	4620      	mov	r0, r4
 8005130:	f000 f93e 	bl	80053b0 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 8005134:	4602      	mov	r2, r0
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f92c 	bl	8005398 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>
 8005140:	4603      	mov	r3, r0
    }
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800514c <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005154:	4b03      	ldr	r3, [pc, #12]	; (8005164 <_ZNK9__gnu_cxx13new_allocatorI7RequestE11_M_max_sizeEv+0x18>)
      }
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	06666666 	.word	0x06666666

08005168 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f92b 	bl	80053d0 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>
 800517a:	4602      	mov	r2, r0
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4293      	cmp	r3, r2
 8005180:	bf8c      	ite	hi
 8005182:	2301      	movhi	r3, #1
 8005184:	2300      	movls	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <_ZN9__gnu_cxx13new_allocatorI8ResponceE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800518c:	f013 fa8b 	bl	80186a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f013 fa75 	bl	8018684 <_Znwj>
 800519a:	4603      	mov	r3, r0
      }
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <_ZSt4copyISt13move_iteratorIPhES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f919 	bl	80053e8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80051b6:	4604      	mov	r4, r0
 80051b8:	68b8      	ldr	r0, [r7, #8]
 80051ba:	f000 f915 	bl	80053e8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80051be:	4603      	mov	r3, r0
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4619      	mov	r1, r3
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 f920 	bl	800540a <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>
 80051ca:	4603      	mov	r3, r0
    }
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd90      	pop	{r4, r7, pc}

080051d4 <_ZNSt16allocator_traitsISaI8IMUFrameEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f937 	bl	8005450 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>
 80051e2:	4603      	mov	r3, r0
      }
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <_ZSt4copyIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f935 	bl	8005468 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 80051fe:	4604      	mov	r4, r0
 8005200:	68b8      	ldr	r0, [r7, #8]
 8005202:	f000 f931 	bl	8005468 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8005206:	4603      	mov	r3, r0
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	4619      	mov	r1, r3
 800520c:	4620      	mov	r0, r4
 800520e:	f000 f936 	bl	800547e <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8005212:	4603      	mov	r3, r0
    }
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	bd90      	pop	{r4, r7, pc}

0800521c <_ZSt13copy_backwardIPP8IMUFrameS2_ET0_T_S4_S3_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f91d 	bl	8005468 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 800522e:	4604      	mov	r4, r0
 8005230:	68b8      	ldr	r0, [r7, #8]
 8005232:	f000 f919 	bl	8005468 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>
 8005236:	4603      	mov	r3, r0
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	4619      	mov	r1, r3
 800523c:	4620      	mov	r0, r4
 800523e:	f000 f941 	bl	80054c4 <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8005242:	4603      	mov	r3, r0
    }
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}

0800524c <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f957 	bl	800550c <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 800525e:	4602      	mov	r2, r0
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4293      	cmp	r3, r2
 8005264:	bf8c      	ite	hi
 8005266:	2301      	movhi	r3, #1
 8005268:	2300      	movls	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <_ZN9__gnu_cxx13new_allocatorI8IMUFrameE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005270:	f013 fa19 	bl	80186a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4618      	mov	r0, r3
 8005280:	f013 fa00 	bl	8018684 <_Znwj>
 8005284:	4603      	mov	r3, r0
      }
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <_ZNK9__gnu_cxx13new_allocatorIP8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005296:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <_ZSt19__iterator_categoryIPhENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80052ae:	bf00      	nop
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	703b      	strb	r3, [r7, #0]
      if (__n <= 0)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x18>
	return __first;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	e00a      	b.n	80052ea <_ZSt10__fill_n_aIPhjhET_S1_T0_RKT1_St26random_access_iterator_tag+0x2e>
      std::__fill_a(__first, __first + __n, __value);
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	4413      	add	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4619      	mov	r1, r3
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f922 	bl	8005528 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>
      return __first + __n;
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4413      	add	r3, r2
    }
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <_ZSt11__addressofI7RequestEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <_ZSt8_DestroyI7RequestEvPT_>:
    _Destroy(_Tp* __pointer)
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fb fee0 	bl	80010d6 <_ZN7RequestD1Ev>
    }
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <_ZNK9__gnu_cxx13new_allocatorIP8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005326:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <_ZSt11__addressofI8ResponceEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <_ZSt8_DestroyI8ResponceEvPT_>:
    _Destroy(_Tp* __pointer)
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fb fe59 	bl	800100c <_ZN8ResponceD1Ev>
    }
 800535a:	bf00      	nop
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <_ZSt12__niter_baseIPP7RequestET_S3_>:
    __niter_base(_Iterator __it)
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
    { return __it; }
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <_ZSt14__copy_move_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f8dc 	bl	8005546 <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 800538e:	4603      	mov	r3, r0
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <_ZSt12__niter_wrapIPP7RequestET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
    { return __res; }
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <_ZSt23__copy_move_backward_a1ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f8d0 	bl	8005566 <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>
 80053c6:	4603      	mov	r3, r0
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_ZNK9__gnu_cxx13new_allocatorI8ResponceE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80053d8:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <_ZSt12__miter_baseIPhEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f8c7 	bl	8005586 <_ZNKSt13move_iteratorIPhE4baseEv>
 80053f8:	4603      	mov	r3, r0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe f98c 	bl	8003718 <_ZSt12__miter_baseIPhET_S1_>
 8005400:	4603      	mov	r3, r0
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <_ZSt13__copy_move_aILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800540a:	b5b0      	push	{r4, r5, r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	60f8      	str	r0, [r7, #12]
 8005412:	60b9      	str	r1, [r7, #8]
 8005414:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7fe fedd 	bl	80041d6 <_ZSt12__niter_baseIPhET_S1_>
 800541c:	4604      	mov	r4, r0
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f7fe fed9 	bl	80041d6 <_ZSt12__niter_baseIPhET_S1_>
 8005424:	4605      	mov	r5, r0
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4618      	mov	r0, r3
 800542a:	f7fe fed4 	bl	80041d6 <_ZSt12__niter_baseIPhET_S1_>
 800542e:	4603      	mov	r3, r0
 8005430:	461a      	mov	r2, r3
 8005432:	4629      	mov	r1, r5
 8005434:	4620      	mov	r0, r4
 8005436:	f000 f8b2 	bl	800559e <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>
 800543a:	4602      	mov	r2, r0
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe fed3 	bl	80041ec <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8005446:	4603      	mov	r3, r0
    }
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bdb0      	pop	{r4, r5, r7, pc}

08005450 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f857 	bl	800550c <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>
 800545e:	4603      	mov	r3, r0
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZSt12__miter_baseIPP8IMUFrameET_S3_>:
    __miter_base(_Iterator __it)
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <_ZSt13__copy_move_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800547e:	b5b0      	push	{r4, r5, r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f897 	bl	80055be <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8005490:	4604      	mov	r4, r0
 8005492:	68b8      	ldr	r0, [r7, #8]
 8005494:	f000 f893 	bl	80055be <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 8005498:	4605      	mov	r5, r0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f88e 	bl	80055be <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 80054a2:	4603      	mov	r3, r0
 80054a4:	461a      	mov	r2, r3
 80054a6:	4629      	mov	r1, r5
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f893 	bl	80055d4 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 80054ae:	4602      	mov	r2, r0
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f89d 	bl	80055f4 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 80054ba:	4603      	mov	r3, r0
    }
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bdb0      	pop	{r4, r5, r7, pc}

080054c4 <_ZSt22__copy_move_backward_aILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f874 	bl	80055be <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 80054d6:	4604      	mov	r4, r0
 80054d8:	68b8      	ldr	r0, [r7, #8]
 80054da:	f000 f870 	bl	80055be <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 80054de:	4605      	mov	r5, r0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f86b 	bl	80055be <_ZSt12__niter_baseIPP8IMUFrameET_S3_>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	4629      	mov	r1, r5
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f88c 	bl	800560c <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 80054f4:	4602      	mov	r2, r0
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f87a 	bl	80055f4 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>
 8005500:	4603      	mov	r3, r0
    }
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800550c <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8005514:	4b03      	ldr	r3, [pc, #12]	; (8005524 <_ZNK9__gnu_cxx13new_allocatorI8IMUFrameE11_M_max_sizeEv+0x18>)
      }
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	04924924 	.word	0x04924924

08005528 <_ZSt8__fill_aIPhhEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f877 	bl	800562c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <_ZSt14__copy_move_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 f882 	bl	8005660 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>
 800555c:	4603      	mov	r3, r0
    }
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_ZSt23__copy_move_backward_a2ILb0EPP7RequestS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	68b9      	ldr	r1, [r7, #8]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f88f 	bl	800569a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>
 800557c:	4603      	mov	r3, r0
    }
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <_ZNKSt13move_iteratorIPhE4baseEv>:
      base() const
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <_ZSt14__copy_move_a1ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f895 	bl	80056de <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <_ZSt12__niter_baseIPP8IMUFrameET_S3_>:
    __niter_base(_Iterator __it)
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <_ZSt14__copy_move_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f88a 	bl	80056fe <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 80055ea:	4603      	mov	r3, r0
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <_ZSt12__niter_wrapIPP8IMUFrameET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
    { return __res; }
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <_ZSt23__copy_move_backward_a1ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f87e 	bl	800571e <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>
 8005622:	4603      	mov	r3, r0
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <_ZSt9__fill_a1IhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 800564c:	7dfb      	ldrb	r3, [r7, #23]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4619      	mov	r1, r3
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f013 f8d2 	bl	80187fc <memset>
    }
 8005658:	bf00      	nop
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	109b      	asrs	r3, r3, #2
 8005674:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP7RequestEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	461a      	mov	r2, r3
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f013 f89f 	bl	80187c8 <memmove>
	  return __result + _Num;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4413      	add	r3, r2
	}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800569a:	b580      	push	{r7, lr}
 800569c:	b086      	sub	sp, #24
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	109b      	asrs	r3, r3, #2
 80056ae:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP7RequestEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	425b      	negs	r3, r3
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	18d0      	adds	r0, r2, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	461a      	mov	r2, r3
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	f013 f87e 	bl	80187c8 <memmove>
	  return __result - _Num;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	425b      	negs	r3, r3
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4413      	add	r3, r2
	}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <_ZSt14__copy_move_a2ILb1EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f825 	bl	800573e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80056f4:	4603      	mov	r3, r0
    }
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <_ZSt14__copy_move_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f82f 	bl	8005772 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>
 8005714:	4603      	mov	r3, r0
    }
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <_ZSt23__copy_move_backward_a2ILb0EPP8IMUFrameS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f83c 	bl	80057ac <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>
 8005734:	4603      	mov	r3, r0
    }
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800573e:	b580      	push	{r7, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	461a      	mov	r2, r3
 800575c:	68f9      	ldr	r1, [r7, #12]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f013 f832 	bl	80187c8 <memmove>
	  return __result + _Num;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4413      	add	r3, r2
	}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8005772:	b580      	push	{r7, lr}
 8005774:	b086      	sub	sp, #24
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	109b      	asrs	r3, r3, #2
 8005786:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d006      	beq.n	800579c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8IMUFrameEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	461a      	mov	r2, r3
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f013 f816 	bl	80187c8 <memmove>
	  return __result + _Num;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	4413      	add	r3, r2
	}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	109b      	asrs	r3, r3, #2
 80057c0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8IMUFrameEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	425b      	negs	r3, r3
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	18d0      	adds	r0, r2, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	461a      	mov	r2, r3
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	f012 fff5 	bl	80187c8 <memmove>
	  return __result - _Num;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	425b      	negs	r3, r3
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	4413      	add	r3, r2
	}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <_Z41__static_initialization_and_destruction_0ii>:
	mbctx.Body.ProcessRequests();
}

void MotherboardOnImuTimerTick() {
	mbctx.UpdateIMU = true;
}
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d107      	bne.n	8005810 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005806:	4293      	cmp	r3, r2
 8005808:	d102      	bne.n	8005810 <_Z41__static_initialization_and_destruction_0ii+0x20>
static MotherboardContext mbctx;
 800580a:	4809      	ldr	r0, [pc, #36]	; (8005830 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800580c:	f7fb ff32 	bl	8001674 <_ZN18MotherboardContextC1Ev>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581c:	4293      	cmp	r3, r2
 800581e:	d102      	bne.n	8005826 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005820:	4803      	ldr	r0, [pc, #12]	; (8005830 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005822:	f7fb ff44 	bl	80016ae <_ZN18MotherboardContextD1Ev>
}
 8005826:	bf00      	nop
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	24000250 	.word	0x24000250

08005834 <_GLOBAL__sub_I_MotherboardInit>:
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
 8005838:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800583c:	2001      	movs	r0, #1
 800583e:	f7ff ffd7 	bl	80057f0 <_Z41__static_initialization_and_destruction_0ii>
 8005842:	bd80      	pop	{r7, pc}

08005844 <_GLOBAL__sub_D_MotherboardInit>:
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
 8005848:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800584c:	2000      	movs	r0, #0
 800584e:	f7ff ffcf 	bl	80057f0 <_Z41__static_initialization_and_destruction_0ii>
 8005852:	bd80      	pop	{r7, pc}

08005854 <bhy2_get_regs>:
static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev);

int8_t bhy2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t length, struct bhy2_dev *dev)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607b      	str	r3, [r7, #4]
 800585e:	4603      	mov	r3, r0
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	4613      	mov	r3, r2
 8005864:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BHY2_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <bhy2_get_regs+0x2e>
    {
        rslt = bhy2_hif_get_regs(reg_addr, reg_data, length, &dev->hif);
 8005870:	89ba      	ldrh	r2, [r7, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	7bf8      	ldrb	r0, [r7, #15]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	f001 f925 	bl	8006ac6 <bhy2_hif_get_regs>
 800587c:	4603      	mov	r3, r0
 800587e:	75fb      	strb	r3, [r7, #23]
 8005880:	e001      	b.n	8005886 <bhy2_get_regs+0x32>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8005882:	23ff      	movs	r3, #255	; 0xff
 8005884:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005886:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <bhy2_get_and_process_fifo>:

    return rslt;
}

int8_t bhy2_get_and_process_fifo(uint8_t *work_buffer, uint32_t buffer_size, struct bhy2_dev *dev)
{
 8005892:	b590      	push	{r4, r7, lr}
 8005894:	b08f      	sub	sp, #60	; 0x3c
 8005896:	af02      	add	r7, sp, #8
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
    uint8_t int_status, int_status_bak;
    uint32_t bytes_read = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
    int8_t rslt;
    struct bhy2_fifo_buffer fifos;

    if ((dev == NULL) || (work_buffer == NULL))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <bhy2_get_and_process_fifo+0x1c>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <bhy2_get_and_process_fifo+0x22>
    {
        return BHY2_E_NULL_PTR;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058b2:	e11b      	b.n	8005aec <bhy2_get_and_process_fifo+0x25a>
    }

    if (buffer_size == 0)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <bhy2_get_and_process_fifo+0x2e>
    {
        return BHY2_E_BUFFER;
 80058ba:	f06f 0305 	mvn.w	r3, #5
 80058be:	e115      	b.n	8005aec <bhy2_get_and_process_fifo+0x25a>
    }

    memset(work_buffer, 0, buffer_size);
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	2100      	movs	r1, #0
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f012 ff99 	bl	80187fc <memset>
    memset(&fifos, 0, sizeof(struct bhy2_fifo_buffer));
 80058ca:	f107 0314 	add.w	r3, r7, #20
 80058ce:	2214      	movs	r2, #20
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f012 ff92 	bl	80187fc <memset>

    fifos.buffer = work_buffer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
    fifos.buffer_size = buffer_size;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	623b      	str	r3, [r7, #32]

    rslt = bhy2_hif_get_interrupt_status(&int_status_bak, &dev->hif);
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 fa5f 	bl	8006dac <bhy2_hif_get_interrupt_status>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (rslt != BHY2_OK)
 80058f4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <bhy2_get_and_process_fifo+0x70>
    {
        return rslt;
 80058fc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005900:	e0f4      	b.n	8005aec <bhy2_get_and_process_fifo+0x25a>
    }

    /* Get and process the Wake up FIFO */
    fifos.read_length = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8005906:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800590a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 800590e:	e042      	b.n	8005996 <bhy2_get_and_process_fifo+0x104>
    {
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8005910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005914:	f003 0306 	and.w	r3, r3, #6
 8005918:	2b02      	cmp	r3, #2
 800591a:	d00e      	beq.n	800593a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 800591c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005920:	f003 0306 	and.w	r3, r3, #6
        if (((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_DRDY) ||
 8005924:	2b04      	cmp	r3, #4
 8005926:	d008      	beq.n	800593a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8005928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800592c:	f003 0306 	and.w	r3, r3, #6
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_LTCY) ||
 8005930:	2b06      	cmp	r3, #6
 8005932:	d002      	beq.n	800593a <bhy2_get_and_process_fifo+0xa8>
            ((BHY2_IS_INT_FIFO_W(int_status)) == BHY2_IST_FIFO_W_WM) || (fifos.remain_length))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d020      	beq.n	800597c <bhy2_get_and_process_fifo+0xea>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	18d0      	adds	r0, r2, r3
                                            (fifos.buffer_size - fifos.read_length),
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_wakeup_fifo(&fifos.buffer[fifos.read_length],
 8005948:	1ad1      	subs	r1, r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f107 0214 	add.w	r2, r7, #20
 8005950:	f102 0408 	add.w	r4, r2, #8
 8005954:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	4623      	mov	r3, r4
 800595c:	f001 fad7 	bl	8006f0e <bhy2_hif_get_wakeup_fifo>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                            &bytes_read,
                                            &fifos.remain_length,
                                            &dev->hif);
            if (rslt != BHY2_OK)
 8005966:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <bhy2_get_and_process_fifo+0xe2>
            {
                return rslt;
 800596e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005972:	e0bb      	b.n	8005aec <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	4413      	add	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_WAKEUP, &fifos, dev);
 800597c:	f107 0314 	add.w	r3, r7, #20
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	4619      	mov	r1, r3
 8005984:	2000      	movs	r0, #0
 8005986:	f000 fbad 	bl	80060e4 <parse_fifo>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8005996:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <bhy2_get_and_process_fifo+0x112>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <bhy2_get_and_process_fifo+0x11a>
 80059a4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0b1      	beq.n	8005910 <bhy2_get_and_process_fifo+0x7e>
    }

    /* Get and process the Non Wake-up FIFO */
    fifos.read_length = 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 80059b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 80059b8:	e042      	b.n	8005a40 <bhy2_get_and_process_fifo+0x1ae>
    {
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 80059ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059be:	f003 0318 	and.w	r3, r3, #24
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d00e      	beq.n	80059e4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 80059c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059ca:	f003 0318 	and.w	r3, r3, #24
        if (((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_DRDY) ||
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d008      	beq.n	80059e4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 80059d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059d6:	f003 0318 	and.w	r3, r3, #24
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_LTCY) ||
 80059da:	2b18      	cmp	r3, #24
 80059dc:	d002      	beq.n	80059e4 <bhy2_get_and_process_fifo+0x152>
            ((BHY2_IS_INT_FIFO_NW(int_status)) == BHY2_IST_FIFO_NW_WM) || (fifos.remain_length))
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d020      	beq.n	8005a26 <bhy2_get_and_process_fifo+0x194>
        {
            /* Reset read_pos to the start of the buffer */
            fifos.read_pos = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]

            /* Append data into the work_buffer linked through fifos */
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	69bb      	ldr	r3, [r7, #24]
            rslt = bhy2_hif_get_nonwakeup_fifo(&fifos.buffer[fifos.read_length],
 80059f2:	1ad1      	subs	r1, r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f107 0214 	add.w	r2, r7, #20
 80059fa:	f102 0408 	add.w	r4, r2, #8
 80059fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	4623      	mov	r3, r4
 8005a06:	f001 fa98 	bl	8006f3a <bhy2_hif_get_nonwakeup_fifo>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8005a10:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <bhy2_get_and_process_fifo+0x18c>
            {
                return rslt;
 8005a18:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005a1c:	e066      	b.n	8005aec <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	4413      	add	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_NON_WAKEUP, &fifos, dev);
 8005a26:	f107 0314 	add.w	r3, r7, #20
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 fb58 	bl	80060e4 <parse_fifo>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8005a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <bhy2_get_and_process_fifo+0x1bc>
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <bhy2_get_and_process_fifo+0x1c4>
 8005a4e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0b1      	beq.n	80059ba <bhy2_get_and_process_fifo+0x128>
    }

    /* Get and process the Status fifo */
    fifos.read_length = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61bb      	str	r3, [r7, #24]
    int_status = int_status_bak;
 8005a5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8005a62:	e036      	b.n	8005ad2 <bhy2_get_and_process_fifo+0x240>
    {
        if ((((BHY2_IS_INT_ASYNC_STATUS(int_status)) == BHY2_IST_MASK_DEBUG) || (fifos.remain_length)))
 8005a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <bhy2_get_and_process_fifo+0x1e4>
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d020      	beq.n	8005ab8 <bhy2_get_and_process_fifo+0x226>
        {
            fifos.read_pos = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]
            rslt =
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	18d0      	adds	r0, r2, r3
                                               (fifos.buffer_size - fifos.read_length),
 8005a80:	6a3a      	ldr	r2, [r7, #32]
 8005a82:	69bb      	ldr	r3, [r7, #24]
                bhy2_hif_get_status_fifo_async(&fifos.buffer[fifos.read_length],
 8005a84:	1ad1      	subs	r1, r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f107 0214 	add.w	r2, r7, #20
 8005a8c:	f102 0408 	add.w	r4, r2, #8
 8005a90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4623      	mov	r3, r4
 8005a98:	f001 fab0 	bl	8006ffc <bhy2_hif_get_status_fifo_async>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                                               &bytes_read,
                                               &fifos.remain_length,
                                               &dev->hif);
            if (rslt != BHY2_OK)
 8005aa2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <bhy2_get_and_process_fifo+0x21e>
            {
                return rslt;
 8005aaa:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005aae:	e01d      	b.n	8005aec <bhy2_get_and_process_fifo+0x25a>
            }
            fifos.read_length += bytes_read;
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	4413      	add	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        }

        rslt = parse_fifo(BHY2_FIFO_TYPE_STATUS, &fifos, dev);
 8005ab8:	f107 0314 	add.w	r3, r7, #20
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	f000 fb0f 	bl	80060e4 <parse_fifo>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        int_status = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while ((int_status || fifos.remain_length) && (rslt == BHY2_OK))
 8005ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <bhy2_get_and_process_fifo+0x24e>
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <bhy2_get_and_process_fifo+0x256>
 8005ae0:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0bd      	beq.n	8005a64 <bhy2_get_and_process_fifo+0x1d2>
    }

    return rslt;
 8005ae8:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3734      	adds	r7, #52	; 0x34
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd90      	pop	{r4, r7, pc}

08005af4 <bhy2_set_virt_sensor_cfg>:

    return rslt;
}

int8_t bhy2_set_virt_sensor_cfg(uint8_t sensor_id, bhy2_float sample_rate, uint32_t latency, struct bhy2_dev *dev)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b00:	6079      	str	r1, [r7, #4]
 8005b02:	603a      	str	r2, [r7, #0]
 8005b04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <bhy2_set_virt_sensor_cfg+0x32>
    {
        rslt = bhy2_hif_exec_sensor_conf_cmd(sensor_id, sample_rate, latency, &dev->hif);
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 fa84 	bl	8007028 <bhy2_hif_exec_sensor_conf_cmd>
 8005b20:	4603      	mov	r3, r0
 8005b22:	75fb      	strb	r3, [r7, #23]
 8005b24:	e001      	b.n	8005b2a <bhy2_set_virt_sensor_cfg+0x36>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8005b26:	23ff      	movs	r3, #255	; 0xff
 8005b28:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <bhy2_get_product_id>:

    return rslt;
}

int8_t bhy2_get_product_id(uint8_t *product_id, struct bhy2_dev *dev)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <bhy2_get_product_id+0x24>
    {
        rslt = bhy2_hif_get_product_id(product_id, &dev->hif);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f001 f8e8 	bl	8006d24 <bhy2_hif_get_product_id>
 8005b54:	4603      	mov	r3, r0
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	e001      	b.n	8005b5e <bhy2_get_product_id+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8005b5a:	23ff      	movs	r3, #255	; 0xff
 8005b5c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <bhy2_get_kernel_version>:

    return rslt;
}

int8_t bhy2_get_kernel_version(uint16_t *kernel_version, struct bhy2_dev *dev)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <bhy2_get_kernel_version+0x24>
    {
        rslt = bhy2_hif_get_kernel_version(kernel_version, &dev->hif);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 f8de 	bl	8006d44 <bhy2_hif_get_kernel_version>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]
 8005b8c:	e001      	b.n	8005b92 <bhy2_get_kernel_version+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8005b8e:	23ff      	movs	r3, #255	; 0xff
 8005b90:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <bhy2_get_boot_status>:

    return rslt;
}

int8_t bhy2_get_boot_status(uint8_t *boot_status, struct bhy2_dev *dev)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d007      	beq.n	8005bc2 <bhy2_get_boot_status+0x24>
    {
        rslt = bhy2_hif_get_boot_status(boot_status, &dev->hif);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 f8e8 	bl	8006d8c <bhy2_hif_get_boot_status>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
 8005bc0:	e001      	b.n	8005bc6 <bhy2_get_boot_status+0x28>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8005bc2:	23ff      	movs	r3, #255	; 0xff
 8005bc4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <bhy2_get_virt_sensor_list>:

    return rslt;
}

int8_t bhy2_get_virt_sensor_list(uint8_t *sensor_list, struct bhy2_dev *dev)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af02      	add	r7, sp, #8
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
    uint32_t bytes_read = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60bb      	str	r3, [r7, #8]
    int8_t rslt = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]

    if (dev != NULL)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00d      	beq.n	8005c06 <bhy2_get_virt_sensor_list+0x34>
    {
        rslt = bhy2_hif_get_parameter(BHY2_PARAM_SYS_VIRT_SENSOR_PRESENT, sensor_list, 32, &bytes_read, &dev->hif);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	f107 0208 	add.w	r2, r7, #8
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	f240 101f 	movw	r0, #287	; 0x11f
 8005bfc:	f001 f80a 	bl	8006c14 <bhy2_hif_get_parameter>
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
 8005c04:	e001      	b.n	8005c0a <bhy2_get_virt_sensor_list+0x38>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8005c06:	23ff      	movs	r3, #255	; 0xff
 8005c08:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <bhy2_upload_firmware_to_ram>:

int8_t bhy2_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_dev *dev)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (firmware == NULL))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <bhy2_upload_firmware_to_ram+0x1c>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <bhy2_upload_firmware_to_ram+0x22>
    {
        rslt = BHY2_E_NULL_PTR;
 8005c32:	23ff      	movs	r3, #255	; 0xff
 8005c34:	75fb      	strb	r3, [r7, #23]
 8005c36:	e007      	b.n	8005c48 <bhy2_upload_firmware_to_ram+0x32>
    }
    else
    {
        rslt = bhy2_hif_upload_firmware_to_ram(firmware, length, &dev->hif);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f001 f90d 	bl	8006e5e <bhy2_hif_upload_firmware_to_ram>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <bhy2_boot_from_ram>:

    return rslt;
}

int8_t bhy2_boot_from_ram(struct bhy2_dev *dev)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <bhy2_boot_from_ram+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8005c66:	23ff      	movs	r3, #255	; 0xff
 8005c68:	73fb      	strb	r3, [r7, #15]
 8005c6a:	e005      	b.n	8005c78 <bhy2_boot_from_ram+0x24>
    }
    else
    {
        rslt = bhy2_hif_boot_program_ram(&dev->hif);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 f932 	bl	8006ed8 <bhy2_hif_boot_program_ram>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <bhy2_set_host_interrupt_ctrl>:

    return rslt;
}

int8_t bhy2_set_host_interrupt_ctrl(uint8_t hintr_ctrl, struct bhy2_dev *dev)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	6039      	str	r1, [r7, #0]
 8005c8e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d102      	bne.n	8005ca0 <bhy2_set_host_interrupt_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8005c9a:	23ff      	movs	r3, #255	; 0xff
 8005c9c:	73fb      	strb	r3, [r7, #15]
 8005c9e:	e007      	b.n	8005cb0 <bhy2_set_host_interrupt_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERRUPT_CTRL, &hintr_ctrl, 1, &dev->hif);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	1df9      	adds	r1, r7, #7
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	2007      	movs	r0, #7
 8005ca8:	f000 ff45 	bl	8006b36 <bhy2_hif_set_regs>
 8005cac:	4603      	mov	r3, r0
 8005cae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <bhy2_get_host_interrupt_ctrl>:

int8_t bhy2_get_host_interrupt_ctrl(uint8_t *hintr_ctrl, struct bhy2_dev *dev)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <bhy2_get_host_interrupt_ctrl+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8005cd0:	23ff      	movs	r3, #255	; 0xff
 8005cd2:	73fb      	strb	r3, [r7, #15]
 8005cd4:	e007      	b.n	8005ce6 <bhy2_get_host_interrupt_ctrl+0x2a>
    }
    else
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERRUPT_CTRL, hintr_ctrl, 1, &dev->hif);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	2007      	movs	r0, #7
 8005cde:	f000 fef2 	bl	8006ac6 <bhy2_hif_get_regs>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <bhy2_get_interrupt_status>:

int8_t bhy2_get_interrupt_status(uint8_t *int_status, struct bhy2_dev *dev)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <bhy2_get_interrupt_status+0x1a>
    {
        rslt = BHY2_E_NULL_PTR;
 8005d06:	23ff      	movs	r3, #255	; 0xff
 8005d08:	73fb      	strb	r3, [r7, #15]
 8005d0a:	e006      	b.n	8005d1a <bhy2_get_interrupt_status+0x28>
    }
    else
    {
        rslt = bhy2_hif_get_interrupt_status(int_status, &dev->hif);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 f84b 	bl	8006dac <bhy2_hif_get_interrupt_status>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <bhy2_set_host_intf_ctrl>:

int8_t bhy2_set_host_intf_ctrl(uint8_t hintf_ctrl, struct bhy2_dev *dev)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	6039      	str	r1, [r7, #0]
 8005d30:	71fb      	strb	r3, [r7, #7]
    int8_t rslt = BHY2_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <bhy2_set_host_intf_ctrl+0x1c>
    {
        rslt = BHY2_E_NULL_PTR;
 8005d3c:	23ff      	movs	r3, #255	; 0xff
 8005d3e:	73fb      	strb	r3, [r7, #15]
 8005d40:	e007      	b.n	8005d52 <bhy2_set_host_intf_ctrl+0x2c>
    }
    else
    {
        rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hintf_ctrl, 1, &dev->hif);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	1df9      	adds	r1, r7, #7
 8005d46:	2201      	movs	r2, #1
 8005d48:	2006      	movs	r0, #6
 8005d4a:	f000 fef4 	bl	8006b36 <bhy2_hif_set_regs>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <bhy2_soft_reset>:

    return rslt;
}

int8_t bhy2_soft_reset(struct bhy2_dev *dev)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
    int8_t rslt = BHY2_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]

    if (dev == NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <bhy2_soft_reset+0x18>
    {
        rslt = BHY2_E_NULL_PTR;
 8005d70:	23ff      	movs	r3, #255	; 0xff
 8005d72:	73fb      	strb	r3, [r7, #15]
 8005d74:	e005      	b.n	8005d82 <bhy2_soft_reset+0x24>
    }
    else
    {
        rslt = bhy2_hif_reset(&dev->hif);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 f827 	bl	8006dcc <bhy2_hif_reset>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <bhy2_init>:
                 bhy2_write_fptr_t write,
                 bhy2_delay_us_fptr_t delay_us,
                 uint32_t read_write_len,
                 void *intf_ptr,
                 struct bhy2_dev *dev)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b08a      	sub	sp, #40	; 0x28
 8005d92:	af04      	add	r7, sp, #16
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]

    if (dev != NULL)
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d014      	beq.n	8005dd2 <bhy2_init+0x44>
    {
        memset(dev, 0, sizeof(struct bhy2_dev));
 8005da8:	f640 1238 	movw	r2, #2360	; 0x938
 8005dac:	2100      	movs	r1, #0
 8005dae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db0:	f012 fd24 	bl	80187fc <memset>

        rslt = bhy2_hif_init(intf, read, write, delay_us, read_write_len, intf_ptr, &dev->hif);
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	7bf8      	ldrb	r0, [r7, #15]
 8005db8:	9302      	str	r3, [sp, #8]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	f000 fe3e 	bl	8006a48 <bhy2_hif_init>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]
 8005dd0:	e001      	b.n	8005dd6 <bhy2_init+0x48>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8005dd2:	23ff      	movs	r3, #255	; 0xff
 8005dd4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8005dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <bhy2_register_fifo_parse_callback>:

int8_t bhy2_register_fifo_parse_callback(uint8_t sensor_id,
                                         bhy2_fifo_parse_callback_t callback,
                                         void *callback_ref,
                                         struct bhy2_dev *dev)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b087      	sub	sp, #28
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	75fb      	strb	r3, [r7, #23]

    if ((dev == NULL) || (callback == NULL))
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <bhy2_register_fifo_parse_callback+0x20>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <bhy2_register_fifo_parse_callback+0x26>
    {
        rslt = BHY2_E_NULL_PTR;
 8005e02:	23ff      	movs	r3, #255	; 0xff
 8005e04:	75fb      	strb	r3, [r7, #23]
 8005e06:	e013      	b.n	8005e30 <bhy2_register_fifo_parse_callback+0x4e>
    }
    else
    {
        dev->table[sensor_id].callback = callback;
 8005e08:	7bfa      	ldrb	r2, [r7, #15]
 8005e0a:	6839      	ldr	r1, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4413      	add	r3, r2
 8005e12:	440b      	add	r3, r1
 8005e14:	3318      	adds	r3, #24
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	f8c3 2005 	str.w	r2, [r3, #5]
        dev->table[sensor_id].callback_ref = callback_ref;
 8005e1c:	7bfa      	ldrb	r2, [r7, #15]
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	4413      	add	r3, r2
 8005e26:	440b      	add	r3, r1
 8005e28:	3318      	adds	r3, #24
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	f8c3 2009 	str.w	r2, [r3, #9]
    }

    return rslt;
 8005e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <bhy2_update_virtual_sensor_list>:

int8_t bhy2_update_virtual_sensor_list(struct bhy2_dev *dev)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b092      	sub	sp, #72	; 0x48
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
    struct bhy2_sensor_info info;
    uint8_t present_buff[32];
    uint8_t sensor_index;
    uint8_t bit_mask;

    if (dev == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d103      	bne.n	8005e56 <bhy2_update_virtual_sensor_list+0x16>
    {
        rslt = BHY2_E_NULL_PTR;
 8005e4e:	23ff      	movs	r3, #255	; 0xff
 8005e50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005e54:	e079      	b.n	8005f4a <bhy2_update_virtual_sensor_list+0x10a>
    }
    else
    {
        /* Each bit corresponds to presence of Virtual sensor */
        rslt = bhy2_get_virt_sensor_list(present_buff, dev);
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff feb8 	bl	8005bd2 <bhy2_get_virt_sensor_list>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (rslt == BHY2_OK)
 8005e68:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d16c      	bne.n	8005f4a <bhy2_update_virtual_sensor_list+0x10a>
        {
            /* Padding: Sensor id*/
            dev->table[0].event_size = 1;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	771a      	strb	r2, [r3, #28]

            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005e7c:	e041      	b.n	8005f02 <bhy2_update_virtual_sensor_list+0xc2>
            {
                sensor_index = (uint8_t)(sensor_id / 8);
 8005e7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005e82:	08db      	lsrs	r3, r3, #3
 8005e84:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
                bit_mask = (uint8_t)(0x01 << (sensor_id % 8));
 8005e88:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	2201      	movs	r2, #1
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

                if (present_buff[sensor_index] & bit_mask)
 8005e9a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005e9e:	3348      	adds	r3, #72	; 0x48
 8005ea0:	443b      	add	r3, r7
 8005ea2:	f813 2c40 	ldrb.w	r2, [r3, #-64]
 8005ea6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005eaa:	4013      	ands	r3, r2
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d022      	beq.n	8005ef8 <bhy2_update_virtual_sensor_list+0xb8>
                {
                    rslt = bhy2_hif_get_sensor_info(sensor_id, &info, &dev->hif);
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005eb8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f8e6 	bl	800708e <bhy2_hif_get_sensor_info>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    if (rslt == BHY2_OK)
 8005ec8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d113      	bne.n	8005ef8 <bhy2_update_virtual_sensor_list+0xb8>
                    {
                        if (info.event_size == 0)
 8005ed0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d103      	bne.n	8005ee0 <bhy2_update_virtual_sensor_list+0xa0>
                        {
                            rslt = BHY2_E_INVALID_EVENT_SIZE;
 8005ed8:	23f8      	movs	r3, #248	; 0xf8
 8005eda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                            break;
 8005ede:	e018      	b.n	8005f12 <bhy2_update_virtual_sensor_list+0xd2>
                        }
                        else
                        {
                            dev->table[sensor_id].event_size = info.event_size;
 8005ee0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005ee4:	f897 003c 	ldrb.w	r0, [r7, #60]	; 0x3c
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4413      	add	r3, r2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	331c      	adds	r3, #28
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	701a      	strb	r2, [r3, #0]
            for (sensor_id = 1; (sensor_id < BHY2_SPECIAL_SENSOR_ID_OFFSET) && (rslt == BHY2_OK); sensor_id++)
 8005ef8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005efc:	3301      	adds	r3, #1
 8005efe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005f02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f06:	2bf4      	cmp	r3, #244	; 0xf4
 8005f08:	d803      	bhi.n	8005f12 <bhy2_update_virtual_sensor_list+0xd2>
 8005f0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0b5      	beq.n	8005e7e <bhy2_update_virtual_sensor_list+0x3e>
                        }
                    }
                }
            }

            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8005f12:	23ff      	movs	r3, #255	; 0xff
 8005f14:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005f18:	e013      	b.n	8005f42 <bhy2_update_virtual_sensor_list+0x102>
            {
                dev->table[sensor_id].event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8005f1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f1e:	3bf5      	subs	r3, #245	; 0xf5
 8005f20:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005f24:	490c      	ldr	r1, [pc, #48]	; (8005f58 <bhy2_update_virtual_sensor_list+0x118>)
 8005f26:	5cc8      	ldrb	r0, [r1, r3]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	4413      	add	r3, r2
 8005f30:	440b      	add	r3, r1
 8005f32:	331c      	adds	r3, #28
 8005f34:	4602      	mov	r2, r0
 8005f36:	701a      	strb	r2, [r3, #0]
            for (sensor_id = BHY2_N_VIRTUAL_SENSOR_MAX - 1; sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET; sensor_id--)
 8005f38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005f42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005f46:	2bf4      	cmp	r3, #244	; 0xf4
 8005f48:	d8e7      	bhi.n	8005f1a <bhy2_update_virtual_sensor_list+0xda>
            }
        }
    }

    return rslt;
 8005f4a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3748      	adds	r7, #72	; 0x48
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	08034134 	.word	0x08034134

08005f5c <bhy2_get_error_value>:

    return rslt;
}

int8_t bhy2_get_error_value(uint8_t *error_value, struct bhy2_dev *dev)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (error_value == NULL))
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <bhy2_get_error_value+0x1a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <bhy2_get_error_value+0x20>
    {
        rslt = BHY2_E_NULL_PTR;
 8005f76:	23ff      	movs	r3, #255	; 0xff
 8005f78:	73fb      	strb	r3, [r7, #15]
 8005f7a:	e007      	b.n	8005f8c <bhy2_get_error_value+0x30>
    }
    else
    {
        rslt = bhy2_get_regs(BHY2_REG_ERROR_VALUE, error_value, 1, dev);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	202e      	movs	r0, #46	; 0x2e
 8005f84:	f7ff fc66 	bl	8005854 <bhy2_get_regs>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <get_callback_info>:
}

static int8_t get_callback_info(uint8_t sensor_id,
                                struct bhy2_fifo_parse_callback_table *info,
                                const struct bhy2_dev *dev)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	73fb      	strb	r3, [r7, #15]

    int8_t rslt = BHY2_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	75fb      	strb	r3, [r7, #23]

    if ((dev != NULL) && (info != NULL))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d04e      	beq.n	800604e <get_callback_info+0xb6>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d04b      	beq.n	800604e <get_callback_info+0xb6>
    {
        *info = dev->table[sensor_id];
 8005fb6:	7bfa      	ldrb	r2, [r7, #15]
 8005fb8:	68b8      	ldr	r0, [r7, #8]
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	3318      	adds	r3, #24
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	3304      	adds	r3, #4
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	6859      	ldr	r1, [r3, #4]
 8005fce:	6010      	str	r0, [r2, #0]
 8005fd0:	6051      	str	r1, [r2, #4]
 8005fd2:	7a1b      	ldrb	r3, [r3, #8]
 8005fd4:	7213      	strb	r3, [r2, #8]
        if ((sensor_id >= BHY2_SPECIAL_SENSOR_ID_OFFSET) && (info->event_size == 0))
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	2bf4      	cmp	r3, #244	; 0xf4
 8005fda:	d91b      	bls.n	8006014 <get_callback_info+0x7c>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d117      	bne.n	8006014 <get_callback_info+0x7c>
        {
            info->callback = NULL;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	705a      	strb	r2, [r3, #1]
 8005fea:	2200      	movs	r2, #0
 8005fec:	709a      	strb	r2, [r3, #2]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	70da      	strb	r2, [r3, #3]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	715a      	strb	r2, [r3, #5]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	719a      	strb	r2, [r3, #6]
 8006000:	2200      	movs	r2, #0
 8006002:	71da      	strb	r2, [r3, #7]
 8006004:	2200      	movs	r2, #0
 8006006:	721a      	strb	r2, [r3, #8]
            info->event_size = bhy2_sysid_event_size[sensor_id - BHY2_SPECIAL_SENSOR_ID_OFFSET];
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	3bf5      	subs	r3, #245	; 0xf5
 800600c:	4a16      	ldr	r2, [pc, #88]	; (8006068 <get_callback_info+0xd0>)
 800600e:	5cd2      	ldrb	r2, [r2, r3]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	701a      	strb	r2, [r3, #0]
        }
        if ((sensor_id == 0) && (info->event_size == 0))
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d11c      	bne.n	8006054 <get_callback_info+0xbc>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d118      	bne.n	8006054 <get_callback_info+0xbc>
        {
            info->callback = NULL;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2200      	movs	r2, #0
 8006026:	705a      	strb	r2, [r3, #1]
 8006028:	2200      	movs	r2, #0
 800602a:	709a      	strb	r2, [r3, #2]
 800602c:	2200      	movs	r2, #0
 800602e:	70da      	strb	r2, [r3, #3]
 8006030:	2200      	movs	r2, #0
 8006032:	711a      	strb	r2, [r3, #4]
            info->callback_ref = NULL;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	715a      	strb	r2, [r3, #5]
 800603a:	2200      	movs	r2, #0
 800603c:	719a      	strb	r2, [r3, #6]
 800603e:	2200      	movs	r2, #0
 8006040:	71da      	strb	r2, [r3, #7]
 8006042:	2200      	movs	r2, #0
 8006044:	721a      	strb	r2, [r3, #8]
            info->event_size = 1;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2201      	movs	r2, #1
 800604a:	701a      	strb	r2, [r3, #0]
        if ((sensor_id == 0) && (info->event_size == 0))
 800604c:	e002      	b.n	8006054 <get_callback_info+0xbc>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 800604e:	23ff      	movs	r3, #255	; 0xff
 8006050:	75fb      	strb	r3, [r7, #23]
 8006052:	e000      	b.n	8006056 <get_callback_info+0xbe>
        if ((sensor_id == 0) && (info->event_size == 0))
 8006054:	bf00      	nop
    }

    return rslt;
 8006056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800605a:	4618      	mov	r0, r3
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	08034134 	.word	0x08034134

0800606c <get_buffer_status>:

static int8_t get_buffer_status(const struct bhy2_fifo_buffer *fifo_p, uint8_t event_size, buffer_status_t *status)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	460b      	mov	r3, r1
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	72fb      	strb	r3, [r7, #11]
    if ((fifo_p->read_pos + event_size) <= fifo_p->read_length)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	429a      	cmp	r2, r3
 8006088:	d803      	bhi.n	8006092 <get_buffer_status+0x26>
    {
        *status = BHY2_BUFFER_STATUS_OK;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	e002      	b.n	8006098 <get_buffer_status+0x2c>
    }
    else
    {
        *status = BHY2_BUFFER_STATUS_RELOAD;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	701a      	strb	r2, [r3, #0]
    }

    return BHY2_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <get_time_stamp>:

static int8_t get_time_stamp(enum bhy2_fifo_type source, uint64_t **time_stamp, struct bhy2_dev *dev)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b087      	sub	sp, #28
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	4603      	mov	r3, r0
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	75fb      	strb	r3, [r7, #23]

    if (source < BHY2_FIFO_TYPE_MAX)
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d808      	bhi.n	80060d0 <get_time_stamp+0x2a>
    {
        *time_stamp = &dev->last_time_stamp[source];
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	441a      	add	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e001      	b.n	80060d4 <get_time_stamp+0x2e>
    }
    else
    {
        rslt = BHY2_E_INVALID_FIFO_TYPE;
 80060d0:	23f9      	movs	r3, #249	; 0xf9
 80060d2:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80060d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	371c      	adds	r7, #28
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <parse_fifo>:

static int8_t parse_fifo(enum bhy2_fifo_type source, struct bhy2_fifo_buffer *fifo_p, struct bhy2_dev *dev)
{
 80060e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e8:	b099      	sub	sp, #100	; 0x64
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	4603      	mov	r3, r0
 80060ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80060f0:	627a      	str	r2, [r7, #36]	; 0x24
 80060f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t tmp_sensor_id = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    int8_t rslt = BHY2_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t i = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint32_t tmp_read_pos;
    struct bhy2_fifo_parse_data_info data_info;
    uint64_t *time_stamp;
    struct bhy2_fifo_parse_callback_table info;
    buffer_status_t status = BHY2_BUFFER_STATUS_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 800610e:	e16a      	b.n	80063e6 <parse_fifo+0x302>
    {
        tmp_read_pos = fifo_p->read_pos;
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	657b      	str	r3, [r7, #84]	; 0x54
        tmp_sensor_id = fifo_p->buffer[tmp_read_pos];
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611c:	4413      	add	r3, r2
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

        rslt = get_time_stamp(source, &time_stamp, dev);
 8006124:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8006128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800612c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff ffb9 	bl	80060a6 <get_time_stamp>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        if (rslt != BHY2_OK)
 800613a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <parse_fifo+0x64>
        {
            return rslt;
 8006142:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006146:	e191      	b.n	800646c <parse_fifo+0x388>
        }
        switch (tmp_sensor_id)
 8006148:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800614c:	2b00      	cmp	r3, #0
 800614e:	d025      	beq.n	800619c <parse_fifo+0xb8>
 8006150:	2b00      	cmp	r3, #0
 8006152:	f2c0 80f6 	blt.w	8006342 <parse_fifo+0x25e>
 8006156:	2bff      	cmp	r3, #255	; 0xff
 8006158:	f300 80f3 	bgt.w	8006342 <parse_fifo+0x25e>
 800615c:	2bf5      	cmp	r3, #245	; 0xf5
 800615e:	f2c0 80f0 	blt.w	8006342 <parse_fifo+0x25e>
 8006162:	3bf5      	subs	r3, #245	; 0xf5
 8006164:	2b0a      	cmp	r3, #10
 8006166:	f200 80ec 	bhi.w	8006342 <parse_fifo+0x25e>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <parse_fifo+0x8c>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	080061a9 	.word	0x080061a9
 8006174:	08006211 	.word	0x08006211
 8006178:	0800628f 	.word	0x0800628f
 800617c:	08006343 	.word	0x08006343
 8006180:	08006343 	.word	0x08006343
 8006184:	08006343 	.word	0x08006343
 8006188:	080061a9 	.word	0x080061a9
 800618c:	08006211 	.word	0x08006211
 8006190:	0800628f 	.word	0x0800628f
 8006194:	08006343 	.word	0x08006343
 8006198:	0800619d 	.word	0x0800619d
        {
            case BHY2_SYS_ID_FILLER:
            case BHY2_SYS_ID_PADDING:
                fifo_p->read_pos += 1;
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	601a      	str	r2, [r3, #0]
                break;
 80061a6:	e11e      	b.n	80063e6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_SMALL_DELTA_WU:
            case BHY2_SYS_ID_TS_SMALL_DELTA:
                rslt = get_buffer_status(fifo_p, 2, &status);
 80061a8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80061ac:	461a      	mov	r2, r3
 80061ae:	2102      	movs	r1, #2
 80061b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b2:	f7ff ff5b 	bl	800606c <get_buffer_status>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80061bc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <parse_fifo+0xe6>
                {
                    return rslt;
 80061c4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80061c8:	e150      	b.n	800646c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80061ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d000      	beq.n	80061d4 <parse_fifo+0xf0>
                {
                    break;
 80061d2:	e108      	b.n	80063e6 <parse_fifo+0x302>
                }
                *time_stamp += fifo_p->buffer[tmp_read_pos + 1];
 80061d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	691a      	ldr	r2, [r3, #16]
 80061de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061e0:	3301      	adds	r3, #1
 80061e2:	4413      	add	r3, r2
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2200      	movs	r2, #0
 80061ea:	469a      	mov	sl, r3
 80061ec:	4693      	mov	fp, r2
 80061ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f0:	eb10 020a 	adds.w	r2, r0, sl
 80061f4:	61ba      	str	r2, [r7, #24]
 80061f6:	eb41 020b 	adc.w	r2, r1, fp
 80061fa:	61fa      	str	r2, [r7, #28]
 80061fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006200:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 2;
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	1c9a      	adds	r2, r3, #2
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	601a      	str	r2, [r3, #0]
                break;
 800620e:	e0ea      	b.n	80063e6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_LARGE_DELTA:
            case BHY2_SYS_ID_TS_LARGE_DELTA_WU:
                rslt = get_buffer_status(fifo_p, 3, &status);
 8006210:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006214:	461a      	mov	r2, r3
 8006216:	2103      	movs	r1, #3
 8006218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621a:	f7ff ff27 	bl	800606c <get_buffer_status>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 8006224:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <parse_fifo+0x14e>
                {
                    return rslt;
 800622c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006230:	e11c      	b.n	800646c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 8006232:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006236:	2b00      	cmp	r3, #0
 8006238:	d000      	beq.n	800623c <parse_fifo+0x158>
                {
                    break;
 800623a:	e0d4      	b.n	80063e6 <parse_fifo+0x302>
                }
                *time_stamp += BHY2_LE2U16(fifo_p->buffer + tmp_read_pos + 1);
 800623c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006248:	3301      	adds	r3, #1
 800624a:	4413      	add	r3, r2
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	b21c      	sxth	r4, r3
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006256:	3302      	adds	r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	b21b      	sxth	r3, r3
 8006260:	4323      	orrs	r3, r4
 8006262:	b21b      	sxth	r3, r3
 8006264:	b29b      	uxth	r3, r3
 8006266:	b29b      	uxth	r3, r3
 8006268:	2200      	movs	r2, #0
 800626a:	461d      	mov	r5, r3
 800626c:	4616      	mov	r6, r2
 800626e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006270:	1942      	adds	r2, r0, r5
 8006272:	613a      	str	r2, [r7, #16]
 8006274:	eb41 0206 	adc.w	r2, r1, r6
 8006278:	617a      	str	r2, [r7, #20]
 800627a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800627e:	e9c3 1200 	strd	r1, r2, [r3]
                fifo_p->read_pos += 3;
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1cda      	adds	r2, r3, #3
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	601a      	str	r2, [r3, #0]
                break;
 800628c:	e0ab      	b.n	80063e6 <parse_fifo+0x302>
            case BHY2_SYS_ID_TS_FULL:
            case BHY2_SYS_ID_TS_FULL_WU:
                rslt = get_buffer_status(fifo_p, 6, &status);
 800628e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006292:	461a      	mov	r2, r3
 8006294:	2106      	movs	r1, #6
 8006296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006298:	f7ff fee8 	bl	800606c <get_buffer_status>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 80062a2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <parse_fifo+0x1cc>
                {
                    return rslt;
 80062aa:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80062ae:	e0dd      	b.n	800646c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 80062b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d000      	beq.n	80062ba <parse_fifo+0x1d6>
                {
                    break;
 80062b8:	e095      	b.n	80063e6 <parse_fifo+0x302>
                }
                *time_stamp = BHY2_LE2U40(fifo_p->buffer + tmp_read_pos + UINT8_C(1));
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c0:	3301      	adds	r3, #1
 80062c2:	4413      	add	r3, r2
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	4619      	mov	r1, r3
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ce:	3302      	adds	r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	4319      	orrs	r1, r3
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062de:	3303      	adds	r3, #3
 80062e0:	4413      	add	r3, r2
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	4319      	orrs	r1, r3
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ee:	3304      	adds	r3, #4
 80062f0:	4413      	add	r3, r2
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	061b      	lsls	r3, r3, #24
 80062f6:	430b      	orrs	r3, r1
 80062f8:	2200      	movs	r2, #0
 80062fa:	4698      	mov	r8, r3
 80062fc:	4691      	mov	r9, r2
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006304:	3305      	adds	r3, #5
 8006306:	4413      	add	r3, r2
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2200      	movs	r2, #0
 800630e:	60bb      	str	r3, [r7, #8]
 8006310:	60fa      	str	r2, [r7, #12]
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	000b      	movs	r3, r1
 800631e:	2200      	movs	r2, #0
 8006320:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006322:	ea48 0002 	orr.w	r0, r8, r2
 8006326:	6038      	str	r0, [r7, #0]
 8006328:	ea49 0303 	orr.w	r3, r9, r3
 800632c:	607b      	str	r3, [r7, #4]
 800632e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006332:	e9c1 3400 	strd	r3, r4, [r1]
                fifo_p->read_pos += 6;
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	1d9a      	adds	r2, r3, #6
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	601a      	str	r2, [r3, #0]
                break;
 8006340:	e051      	b.n	80063e6 <parse_fifo+0x302>
            default:

                rslt = get_callback_info(tmp_sensor_id, &info, dev);
 8006342:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006346:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fe23 	bl	8005f98 <get_callback_info>
 8006352:	4603      	mov	r3, r0
 8006354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

                if (rslt != BHY2_OK)
 8006358:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <parse_fifo+0x282>
                {
                    return rslt;
 8006360:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006364:	e082      	b.n	800646c <parse_fifo+0x388>
                }
                rslt = get_buffer_status(fifo_p, info.event_size, &status);
 8006366:	f897 1038 	ldrb.w	r1, [r7, #56]	; 0x38
 800636a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800636e:	461a      	mov	r2, r3
 8006370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006372:	f7ff fe7b 	bl	800606c <get_buffer_status>
 8006376:	4603      	mov	r3, r0
 8006378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                if (rslt != BHY2_OK)
 800637c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <parse_fifo+0x2a6>
                {
                    return rslt;
 8006384:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006388:	e070      	b.n	800646c <parse_fifo+0x388>
                }
                if (status != BHY2_BUFFER_STATUS_OK)
 800638a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800638e:	2b00      	cmp	r3, #0
 8006390:	d000      	beq.n	8006394 <parse_fifo+0x2b0>
                {
                    break;
 8006392:	e028      	b.n	80063e6 <parse_fifo+0x302>
                }
                if (info.callback != NULL)
 8006394:	f8d7 3039 	ldr.w	r3, [r7, #57]	; 0x39
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01c      	beq.n	80063d6 <parse_fifo+0x2f2>
                {
                    /* Read position is incremented by 1 to exclude sensor id */
                    data_info.data_ptr = &fifo_p->buffer[tmp_read_pos + 1];
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a2:	3301      	adds	r3, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	64fb      	str	r3, [r7, #76]	; 0x4c
                    data_info.fifo_type = source;
 80063a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063ac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                    data_info.time_stamp = time_stamp;
 80063b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b2:	653b      	str	r3, [r7, #80]	; 0x50
                    data_info.sensor_id = tmp_sensor_id;
 80063b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80063b8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                    data_info.data_size = info.event_size;
 80063bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80063c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                    info.callback(&data_info, info.callback_ref);
 80063c4:	f8d7 4039 	ldr.w	r4, [r7, #57]	; 0x39
 80063c8:	f8d7 203d 	ldr.w	r2, [r7, #61]	; 0x3d
 80063cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80063d0:	4611      	mov	r1, r2
 80063d2:	4618      	mov	r0, r3
 80063d4:	47a0      	blx	r4

                }
                fifo_p->read_pos += info.event_size;
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80063de:	441a      	add	r2, r3
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	601a      	str	r2, [r3, #0]
                break;
 80063e4:	bf00      	nop
    for (; (fifo_p->read_pos < fifo_p->read_length) && (status == BHY2_BUFFER_STATUS_OK);)
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d204      	bcs.n	80063fc <parse_fifo+0x318>
 80063f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f43f ae8a 	beq.w	8006110 <parse_fifo+0x2c>
        }
    }
    if (fifo_p->read_length)
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d031      	beq.n	8006468 <parse_fifo+0x384>
    {
        if (fifo_p->read_length < fifo_p->read_pos)
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d202      	bcs.n	8006416 <parse_fifo+0x332>
        {
            return BHY2_E_INVALID_PARAM;
 8006410:	f06f 0301 	mvn.w	r3, #1
 8006414:	e02a      	b.n	800646c <parse_fifo+0x388>
        }
        fifo_p->read_length -= fifo_p->read_pos;
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	605a      	str	r2, [r3, #4]
        if (fifo_p->read_length)
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01d      	beq.n	8006468 <parse_fifo+0x384>
        {
            for (i = 0; i < fifo_p->read_length; i++)
 800642c:	2300      	movs	r3, #0
 800642e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006432:	e013      	b.n	800645c <parse_fifo+0x378>
            {
                fifo_p->buffer[i] = fifo_p->buffer[fifo_p->read_pos + i];
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006440:	440b      	add	r3, r1
 8006442:	441a      	add	r2, r3
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	6919      	ldr	r1, [r3, #16]
 8006448:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800644c:	440b      	add	r3, r1
 800644e:	7812      	ldrb	r2, [r2, #0]
 8006450:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < fifo_p->read_length; i++)
 8006452:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006456:	3301      	adds	r3, #1
 8006458:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800645c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8006460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d3e5      	bcc.n	8006434 <parse_fifo+0x350>
            }
        }
    }

    return rslt;
 8006468:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800646c:	4618      	mov	r0, r3
 800646e:	3764      	adds	r7, #100	; 0x64
 8006470:	46bd      	mov	sp, r7
 8006472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	bf00      	nop

08006478 <bhy2_hif_exec_cmd_generic>:
                                        uint32_t length,
                                        const uint8_t *pre_payload,
                                        uint32_t pre_length,
                                        uint32_t cmd_length,
                                        struct bhy2_hif_dev *hif)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b0cf      	sub	sp, #316	; 0x13c
 800647c:	af00      	add	r7, sp, #0
 800647e:	4604      	mov	r4, r0
 8006480:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006484:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8006488:	6001      	str	r1, [r0, #0]
 800648a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800648e:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8006492:	600a      	str	r2, [r1, #0]
 8006494:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006498:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80064a6:	4622      	mov	r2, r4
 80064a8:	801a      	strh	r2, [r3, #0]
    int8_t rslt = BHY2_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    uint32_t remain, trans_len, copy_len, pos, total_len, temp_total_len, loop_remain_len, max_len;
    uint8_t command_buf[BHY2_COMMAND_PACKET_LEN];

    if ((hif != NULL) && !((length != 0) && (payload == NULL)) && !((pre_length != 0) && (pre_payload == NULL)))
 80064b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 81af 	beq.w	8006818 <bhy2_hif_exec_cmd_generic+0x3a0>
 80064ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <bhy2_hif_exec_cmd_generic+0x60>
 80064c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 81a0 	beq.w	8006818 <bhy2_hif_exec_cmd_generic+0x3a0>
 80064d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <bhy2_hif_exec_cmd_generic+0x78>
 80064e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80064e4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8194 	beq.w	8006818 <bhy2_hif_exec_cmd_generic+0x3a0>
    {
        if (hif->read_write_len != 0)
 80064f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 8188 	beq.w	800680c <bhy2_hif_exec_cmd_generic+0x394>
        {
            total_len = pre_length + length;
 80064fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006500:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006504:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4413      	add	r3, r2
 800650c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

            if (cmd_length)
 8006510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <bhy2_hif_exec_cmd_generic+0xb0>
            {
                temp_total_len = pre_length + cmd_length;
 8006518:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800651c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006520:	4413      	add	r3, r2
 8006522:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006526:	e003      	b.n	8006530 <bhy2_hif_exec_cmd_generic+0xb8>
            }
            else
            {
                temp_total_len = total_len;
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800652c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            /* Align 4 bytes */
            if (temp_total_len % 4)
 8006530:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <bhy2_hif_exec_cmd_generic+0xd2>
            {
                temp_total_len = ((temp_total_len >> 2) + 1) << 2;
 800653c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006540:	089b      	lsrs	r3, r3, #2
 8006542:	3301      	adds	r3, #1
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
            }

            command_buf[0] = (uint8_t)(cmd & 0xFF);
 800654a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800654e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b2da      	uxtb	r2, r3
 8006556:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800655a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800655e:	701a      	strb	r2, [r3, #0]
            command_buf[1] = (uint8_t)((cmd >> 8) & 0xFF);
 8006560:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006564:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	b2da      	uxtb	r2, r3
 8006570:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006574:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006578:	705a      	strb	r2, [r3, #1]

            /* Length in word */
            if (cmd == BHY2_CMD_UPLOAD_TO_PROGRAM_RAM)
 800657a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800657e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d113      	bne.n	80065b0 <bhy2_hif_exec_cmd_generic+0x138>
            {
                command_buf[2] = (temp_total_len / 4) & 0xFF;
 8006588:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800658c:	089b      	lsrs	r3, r3, #2
 800658e:	b2da      	uxtb	r2, r3
 8006590:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006594:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006598:	709a      	strb	r2, [r3, #2]
                command_buf[3] = ((temp_total_len / 4) >> 8) & 0xFF;
 800659a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800659e:	089b      	lsrs	r3, r3, #2
 80065a0:	0a1b      	lsrs	r3, r3, #8
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065ac:	70da      	strb	r2, [r3, #3]
 80065ae:	e010      	b.n	80065d2 <bhy2_hif_exec_cmd_generic+0x15a>
            }
            /* Length in byte */
            else
            {
                command_buf[2] = temp_total_len & 0xFF;
 80065b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065ba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065be:	709a      	strb	r2, [r3, #2]
                command_buf[3] = (temp_total_len >> 8) & 0xFF;
 80065c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80065c4:	0a1b      	lsrs	r3, r3, #8
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065d0:	70da      	strb	r2, [r3, #3]
            }

            pos = 4;
 80065d2:	2304      	movs	r3, #4
 80065d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            remain = total_len;
 80065d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            loop_remain_len = remain + pos;
 80065e0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80065e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80065e8:	4413      	add	r3, r2
 80065ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            max_len = BHY2_COMMAND_PACKET_LEN;
 80065ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

            if (hif->read_write_len < max_len)
 80065f6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006600:	429a      	cmp	r2, r3
 8006602:	f240 80f9 	bls.w	80067f8 <bhy2_hif_exec_cmd_generic+0x380>
            {
                max_len = hif->read_write_len;
 8006606:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
            }

            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 8006610:	e0f2      	b.n	80067f8 <bhy2_hif_exec_cmd_generic+0x380>
            {
                if ((remain + pos) > max_len)
 8006612:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006616:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800661a:	4413      	add	r3, r2
 800661c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006620:	429a      	cmp	r2, r3
 8006622:	d20b      	bcs.n	800663c <bhy2_hif_exec_cmd_generic+0x1c4>
                {
                    trans_len = max_len;
 8006624:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006628:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = max_len - pos;
 800662c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006630:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800663a:	e020      	b.n	800667e <bhy2_hif_exec_cmd_generic+0x206>
                }
                else
                {
                    trans_len = remain + pos;
 800663c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006640:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006644:	4413      	add	r3, r2
 8006646:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    copy_len = remain;
 800664a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800664e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

                    /* Align to 4 bytes */
                    if (trans_len % 4)
 8006652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <bhy2_hif_exec_cmd_generic+0x1f4>
                    {
                        trans_len = ((trans_len >> 2) + 1) << 2;
 800665e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006662:	089b      	lsrs	r3, r3, #2
 8006664:	3301      	adds	r3, #1
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }

                    if (trans_len > BHY2_COMMAND_PACKET_LEN)
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	d903      	bls.n	800667e <bhy2_hif_exec_cmd_generic+0x206>
                    {
                        trans_len = BHY2_COMMAND_PACKET_LEN;
 8006676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800667a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    }
                }

                if (copy_len > 0)
 800667e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006682:	2b00      	cmp	r3, #0
 8006684:	d07e      	beq.n	8006784 <bhy2_hif_exec_cmd_generic+0x30c>
                {
                    if (remain >= (length + copy_len))
 8006686:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800668a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006694:	4413      	add	r3, r2
 8006696:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800669a:	429a      	cmp	r2, r3
 800669c:	d315      	bcc.n	80066ca <bhy2_hif_exec_cmd_generic+0x252>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], copy_len);
 800669e:	f107 0214 	add.w	r2, r7, #20
 80066a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80066a6:	18d0      	adds	r0, r2, r3
 80066a8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80066ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066b6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	4413      	add	r3, r2
 80066be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80066c2:	4619      	mov	r1, r3
 80066c4:	f012 f872 	bl	80187ac <memcpy>
 80066c8:	e05c      	b.n	8006784 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else if (remain > length)
 80066ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80066d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d93b      	bls.n	8006754 <bhy2_hif_exec_cmd_generic+0x2dc>
                    {
                        memcpy(&command_buf[pos], &pre_payload[total_len - remain], remain - length);
 80066dc:	f107 0214 	add.w	r2, r7, #20
 80066e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80066e4:	18d0      	adds	r0, r2, r3
 80066e6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80066ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066f4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	18d1      	adds	r1, r2, r3
 80066fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006700:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006704:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	461a      	mov	r2, r3
 800670e:	f012 f84d 	bl	80187ac <memcpy>
                        memcpy(&command_buf[pos + remain - length], payload, copy_len - (remain - length));
 8006712:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006716:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800671a:	441a      	add	r2, r3
 800671c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006720:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	f107 0214 	add.w	r2, r7, #20
 800672c:	18d0      	adds	r0, r2, r3
 800672e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006732:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800673c:	1ad2      	subs	r2, r2, r3
 800673e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006742:	441a      	add	r2, r3
 8006744:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	f012 f82d 	bl	80187ac <memcpy>
 8006752:	e017      	b.n	8006784 <bhy2_hif_exec_cmd_generic+0x30c>
                    }
                    else
                    {
                        memcpy(&command_buf[pos], &payload[length - remain], copy_len);
 8006754:	f107 0214 	add.w	r2, r7, #20
 8006758:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800675c:	18d0      	adds	r0, r2, r3
 800675e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006762:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006772:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	4413      	add	r3, r2
 800677a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800677e:	4619      	mov	r1, r3
 8006780:	f012 f814 	bl	80187ac <memcpy>
                    }
                }

                if ((trans_len - (pos + copy_len)) > 0)
 8006784:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006788:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800678c:	4413      	add	r3, r2
 800678e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006792:	429a      	cmp	r2, r3
 8006794:	d012      	beq.n	80067bc <bhy2_hif_exec_cmd_generic+0x344>
                {
                    memset(&command_buf[pos + copy_len], 0, BHY2_COMMAND_PACKET_LEN - (pos + copy_len));
 8006796:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800679a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800679e:	4413      	add	r3, r2
 80067a0:	f107 0214 	add.w	r2, r7, #20
 80067a4:	18d0      	adds	r0, r2, r3
 80067a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80067aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067ae:	4413      	add	r3, r2
 80067b0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80067b4:	461a      	mov	r2, r3
 80067b6:	2100      	movs	r1, #0
 80067b8:	f012 f820 	bl	80187fc <memset>
                }

                rslt = bhy2_hif_set_regs(BHY2_REG_CHAN_CMD, command_buf, trans_len, hif);
 80067bc:	f107 0114 	add.w	r1, r7, #20
 80067c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80067c4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80067c8:	2000      	movs	r0, #0
 80067ca:	f000 f9b4 	bl	8006b36 <bhy2_hif_set_regs>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                if (rslt != BHY2_OK)
 80067d4:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11b      	bne.n	8006814 <bhy2_hif_exec_cmd_generic+0x39c>
                {
                    break;
                }
                pos = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                remain -= copy_len;
 80067e2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80067e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                loop_remain_len = remain;
 80067f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80067f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
            while ((loop_remain_len > 0) && (rslt == BHY2_OK))
 80067f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00f      	beq.n	8006820 <bhy2_hif_exec_cmd_generic+0x3a8>
 8006800:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 8006804:	2b00      	cmp	r3, #0
 8006806:	f43f af04 	beq.w	8006612 <bhy2_hif_exec_cmd_generic+0x19a>
        if (hif->read_write_len != 0)
 800680a:	e009      	b.n	8006820 <bhy2_hif_exec_cmd_generic+0x3a8>
            }

        }
        else
        {
            rslt = BHY2_E_INVALID_PARAM;
 800680c:	23fe      	movs	r3, #254	; 0xfe
 800680e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        if (hif->read_write_len != 0)
 8006812:	e005      	b.n	8006820 <bhy2_hif_exec_cmd_generic+0x3a8>
                    break;
 8006814:	bf00      	nop
        if (hif->read_write_len != 0)
 8006816:	e003      	b.n	8006820 <bhy2_hif_exec_cmd_generic+0x3a8>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006818:	23ff      	movs	r3, #255	; 0xff
 800681a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800681e:	e000      	b.n	8006822 <bhy2_hif_exec_cmd_generic+0x3aa>
        if (hif->read_write_len != 0)
 8006820:	bf00      	nop
    }

    return rslt;
 8006822:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
}
 8006826:	4618      	mov	r0, r3
 8006828:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800682c:	46bd      	mov	sp, r7
 800682e:	bd90      	pop	{r4, r7, pc}

08006830 <bhy2_wait_status_ready>:

static int8_t bhy2_wait_status_ready(struct bhy2_hif_dev *hif)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
    uint16_t retry;
    uint8_t int_status;
    int8_t rslt;

    /* Wait status ready */
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8006838:	2300      	movs	r3, #0
 800683a:	81fb      	strh	r3, [r7, #14]
 800683c:	e027      	b.n	800688e <bhy2_wait_status_ready+0x5e>
    {
        rslt = bhy2_hif_get_interrupt_status(&int_status, hif);
 800683e:	f107 030c 	add.w	r3, r7, #12
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fab1 	bl	8006dac <bhy2_hif_get_interrupt_status>
 800684a:	4603      	mov	r3, r0
 800684c:	737b      	strb	r3, [r7, #13]
        if (rslt == BHY2_OK)
 800684e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d115      	bne.n	8006882 <bhy2_wait_status_ready+0x52>
        {
            if (int_status & BHY2_IST_MASK_STATUS)
 8006856:	7b3b      	ldrb	r3, [r7, #12]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <bhy2_wait_status_ready+0x36>
            {
                rslt = BHY2_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	737b      	strb	r3, [r7, #13]
                break;
 8006864:	e017      	b.n	8006896 <bhy2_wait_status_ready+0x66>
            }

            /* 10ms */
            rslt = bhy2_hif_delay_us(10000, hif);
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	f242 7010 	movw	r0, #10000	; 0x2710
 800686c:	f000 f99b 	bl	8006ba6 <bhy2_hif_delay_us>
 8006870:	4603      	mov	r3, r0
 8006872:	737b      	strb	r3, [r7, #13]
            if (rslt != BHY2_OK)
 8006874:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <bhy2_wait_status_ready+0x58>
            {
                return rslt;
 800687c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006880:	e00b      	b.n	800689a <bhy2_wait_status_ready+0x6a>
            }
        }
        else
        {
            return rslt; /*break; */
 8006882:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006886:	e008      	b.n	800689a <bhy2_wait_status_ready+0x6a>
    for (retry = 0; retry < BHY2_QUERY_PARAM_STATUS_READY_MAX_RETRY; ++retry)
 8006888:	89fb      	ldrh	r3, [r7, #14]
 800688a:	3301      	adds	r3, #1
 800688c:	81fb      	strh	r3, [r7, #14]
 800688e:	89fb      	ldrh	r3, [r7, #14]
 8006890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006894:	d3d3      	bcc.n	800683e <bhy2_wait_status_ready+0xe>
        }
    }

    return rslt;
 8006896:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <bhy2_hif_check_boot_status_ram>:

static int8_t bhy2_hif_check_boot_status_ram(struct bhy2_hif_dev *hif)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint16_t i;
    uint8_t boot_status;

    /* total 5s */
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 80068aa:	2300      	movs	r3, #0
 80068ac:	81fb      	strh	r3, [r7, #14]
 80068ae:	e02f      	b.n	8006910 <bhy2_hif_check_boot_status_ram+0x6e>
    {
        /* 50ms */
        rslt = bhy2_hif_delay_us(50000, hif);
 80068b0:	6879      	ldr	r1, [r7, #4]
 80068b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80068b6:	f000 f976 	bl	8006ba6 <bhy2_hif_delay_us>
 80068ba:	4603      	mov	r3, r0
 80068bc:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 80068be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da02      	bge.n	80068cc <bhy2_hif_check_boot_status_ram+0x2a>
        {
            return rslt;
 80068c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80068ca:	e02d      	b.n	8006928 <bhy2_hif_check_boot_status_ram+0x86>
        }

        rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, sizeof(boot_status), hif);
 80068cc:	f107 010c 	add.w	r1, r7, #12
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	2025      	movs	r0, #37	; 0x25
 80068d6:	f000 f8f6 	bl	8006ac6 <bhy2_hif_get_regs>
 80068da:	4603      	mov	r3, r0
 80068dc:	737b      	strb	r3, [r7, #13]
        if (rslt < 0)
 80068de:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da02      	bge.n	80068ec <bhy2_hif_check_boot_status_ram+0x4a>
        {
            return rslt;
 80068e6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80068ea:	e01d      	b.n	8006928 <bhy2_hif_check_boot_status_ram+0x86>
        }

        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 80068ec:	7b3b      	ldrb	r3, [r7, #12]
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <bhy2_hif_check_boot_status_ram+0x68>
 80068f6:	7b3b      	ldrb	r3, [r7, #12]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <bhy2_hif_check_boot_status_ram+0x68>
            (!(boot_status & BHY2_BST_HOST_FW_VERIFY_ERROR)))
 8006900:	7b3b      	ldrb	r3, [r7, #12]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
        if ((boot_status & BHY2_BST_HOST_INTERFACE_READY) && (boot_status & BHY2_BST_HOST_FW_VERIFY_DONE) &&
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <bhy2_hif_check_boot_status_ram+0x76>
    for (i = 0; i < BHY2_BST_CHECK_RETRY; ++i)
 800690a:	89fb      	ldrh	r3, [r7, #14]
 800690c:	3301      	adds	r3, #1
 800690e:	81fb      	strh	r3, [r7, #14]
 8006910:	89fb      	ldrh	r3, [r7, #14]
 8006912:	2b63      	cmp	r3, #99	; 0x63
 8006914:	d9cc      	bls.n	80068b0 <bhy2_hif_check_boot_status_ram+0xe>
 8006916:	e000      	b.n	800691a <bhy2_hif_check_boot_status_ram+0x78>
        {
            break;
 8006918:	bf00      	nop
        }
    }

    if (i == BHY2_BST_CHECK_RETRY)
 800691a:	89fb      	ldrh	r3, [r7, #14]
 800691c:	2b64      	cmp	r3, #100	; 0x64
 800691e:	d102      	bne.n	8006926 <bhy2_hif_check_boot_status_ram+0x84>
    {
        return BHY2_E_TIMEOUT;
 8006920:	f06f 0304 	mvn.w	r3, #4
 8006924:	e000      	b.n	8006928 <bhy2_hif_check_boot_status_ram+0x86>
    }

    return BHY2_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <bhy2_hif_get_fifo>:
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08a      	sub	sp, #40	; 0x28
 8006934:	af00      	add	r7, sp, #0
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t n_bytes[2];
    uint32_t read_len;
    uint32_t read_write_len;
    uint32_t offset;

    if ((hif != NULL) && (fifo != NULL) && (bytes_read != NULL) && (bytes_remain != NULL))
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	2b00      	cmp	r3, #0
 800694a:	d072      	beq.n	8006a32 <bhy2_hif_get_fifo+0x102>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d06f      	beq.n	8006a32 <bhy2_hif_get_fifo+0x102>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d06c      	beq.n	8006a32 <bhy2_hif_get_fifo+0x102>
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	2b00      	cmp	r3, #0
 800695c:	d069      	beq.n	8006a32 <bhy2_hif_get_fifo+0x102>
    {
        read_write_len = hif->read_write_len;
 800695e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	61bb      	str	r3, [r7, #24]

        if (*bytes_remain == 0)
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d114      	bne.n	8006996 <bhy2_hif_get_fifo+0x66>
        {
            rslt = bhy2_hif_get_regs(reg, n_bytes, 2, hif); /* Read the the available size */
 800696c:	f107 0114 	add.w	r1, r7, #20
 8006970:	7bf8      	ldrb	r0, [r7, #15]
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	2202      	movs	r2, #2
 8006976:	f000 f8a6 	bl	8006ac6 <bhy2_hif_get_regs>
 800697a:	4603      	mov	r3, r0
 800697c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            *bytes_remain = BHY2_LE2U16(n_bytes);
 8006980:	7d3b      	ldrb	r3, [r7, #20]
 8006982:	b21a      	sxth	r2, r3
 8006984:	7d7b      	ldrb	r3, [r7, #21]
 8006986:	021b      	lsls	r3, r3, #8
 8006988:	b21b      	sxth	r3, r3
 800698a:	4313      	orrs	r3, r2
 800698c:	b21b      	sxth	r3, r3
 800698e:	b29b      	uxth	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	601a      	str	r2, [r3, #0]
        }

        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d04d      	beq.n	8006a3a <bhy2_hif_get_fifo+0x10a>
 800699e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d149      	bne.n	8006a3a <bhy2_hif_get_fifo+0x10a>
        {
            if (fifo_len < *bytes_remain)
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d203      	bcs.n	80069b8 <bhy2_hif_get_fifo+0x88>
            {
                *bytes_read = fifo_len;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e003      	b.n	80069c0 <bhy2_hif_get_fifo+0x90>
            }
            else
            {
                *bytes_read = *bytes_remain;
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	601a      	str	r2, [r3, #0]
            }
            read_len = *bytes_read;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	623b      	str	r3, [r7, #32]
            offset = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80069ca:	e016      	b.n	80069fa <bhy2_hif_get_fifo+0xca>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_write_len, hif);
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	18d1      	adds	r1, r2, r3
 80069d2:	7bf8      	ldrb	r0, [r7, #15]
 80069d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	f000 f875 	bl	8006ac6 <bhy2_hif_get_regs>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if (rslt != BHY2_OK)
 80069e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10c      	bne.n	8006a04 <bhy2_hif_get_fifo+0xd4>
                {
                    break;
                }
                read_len -= read_write_len;
 80069ea:	6a3a      	ldr	r2, [r7, #32]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	623b      	str	r3, [r7, #32]
                offset += read_write_len;
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	4413      	add	r3, r2
 80069f8:	61fb      	str	r3, [r7, #28]
            while (read_len > read_write_len)
 80069fa:	6a3a      	ldr	r2, [r7, #32]
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d8e4      	bhi.n	80069cc <bhy2_hif_get_fifo+0x9c>
 8006a02:	e000      	b.n	8006a06 <bhy2_hif_get_fifo+0xd6>
                    break;
 8006a04:	bf00      	nop
            }

            if (read_len != 0)
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00a      	beq.n	8006a22 <bhy2_hif_get_fifo+0xf2>
            {
                rslt = bhy2_hif_get_regs(reg, &fifo[offset], read_len, hif);
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	18d1      	adds	r1, r2, r3
 8006a12:	7bf8      	ldrb	r0, [r7, #15]
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	f000 f855 	bl	8006ac6 <bhy2_hif_get_regs>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            *bytes_remain -= *bytes_read;
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	1ad2      	subs	r2, r2, r3
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	601a      	str	r2, [r3, #0]
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8006a30:	e003      	b.n	8006a3a <bhy2_hif_get_fifo+0x10a>
        }

    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006a32:	23ff      	movs	r3, #255	; 0xff
 8006a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a38:	e000      	b.n	8006a3c <bhy2_hif_get_fifo+0x10c>
        if ((*bytes_remain != 0) && (rslt == BHY2_OK))
 8006a3a:	bf00      	nop
    }

    return rslt;
 8006a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3728      	adds	r7, #40	; 0x28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <bhy2_hif_init>:
                     bhy2_write_fptr_t write,
                     bhy2_delay_us_fptr_t delay_us,
                     uint32_t read_write_len,
                     void *intf_ptr,
                     struct bhy2_hif_dev *hif)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (read != NULL) && (write != NULL) && (delay_us != NULL))
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d027      	beq.n	8006ab2 <bhy2_hif_init+0x6a>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d024      	beq.n	8006ab2 <bhy2_hif_init+0x6a>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d021      	beq.n	8006ab2 <bhy2_hif_init+0x6a>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01e      	beq.n	8006ab2 <bhy2_hif_init+0x6a>
    {
        hif->read = read;
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	601a      	str	r2, [r3, #0]
        hif->write = write;
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	605a      	str	r2, [r3, #4]
        hif->delay_us = delay_us;
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	609a      	str	r2, [r3, #8]
        hif->intf_ptr = intf_ptr;
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a8a:	611a      	str	r2, [r3, #16]
        hif->intf = intf;
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	7bfa      	ldrb	r2, [r7, #15]
 8006a90:	731a      	strb	r2, [r3, #12]
        if (read_write_len % 4)
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <bhy2_hif_init+0x62>
        {
            hif->read_write_len = ((read_write_len >> 2) + 1) << 2;
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	089b      	lsrs	r3, r3, #2
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	009a      	lsls	r2, r3, #2
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8006aa8:	e005      	b.n	8006ab6 <bhy2_hif_init+0x6e>
        }
        else
        {
            hif->read_write_len = read_write_len;
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	6a3a      	ldr	r2, [r7, #32]
 8006aae:	619a      	str	r2, [r3, #24]
        if (read_write_len % 4)
 8006ab0:	e001      	b.n	8006ab6 <bhy2_hif_init+0x6e>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006ab2:	23ff      	movs	r3, #255	; 0xff
 8006ab4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <bhy2_hif_get_regs>:

int8_t bhy2_hif_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8006ac6:	b590      	push	{r4, r7, lr}
 8006ac8:	b087      	sub	sp, #28
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d022      	beq.n	8006b26 <bhy2_hif_get_regs+0x60>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01e      	beq.n	8006b26 <bhy2_hif_get_regs+0x60>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01b      	beq.n	8006b26 <bhy2_hif_get_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	7b1b      	ldrb	r3, [r3, #12]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d103      	bne.n	8006afe <bhy2_hif_get_regs+0x38>
        {
            reg_addr |= BHY2_SPI_RD_MASK;
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006afc:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->read(reg_addr, reg_data, length, hif->intf_ptr);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681c      	ldr	r4, [r3, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	7bf8      	ldrb	r0, [r7, #15]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	47a0      	blx	r4
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d004      	beq.n	8006b2a <bhy2_hif_get_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8006b20:	23fd      	movs	r3, #253	; 0xfd
 8006b22:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8006b24:	e001      	b.n	8006b2a <bhy2_hif_get_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006b26:	23ff      	movs	r3, #255	; 0xff
 8006b28:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd90      	pop	{r4, r7, pc}

08006b36 <bhy2_hif_set_regs>:

int8_t bhy2_hif_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, struct bhy2_hif_dev *hif)
{
 8006b36:	b590      	push	{r4, r7, lr}
 8006b38:	b087      	sub	sp, #28
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BHY2_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (hif->read != NULL) && (reg_data != NULL))
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d022      	beq.n	8006b96 <bhy2_hif_set_regs+0x60>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d01e      	beq.n	8006b96 <bhy2_hif_set_regs+0x60>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d01b      	beq.n	8006b96 <bhy2_hif_set_regs+0x60>
    {
        if (hif->intf == BHY2_SPI_INTERFACE)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	7b1b      	ldrb	r3, [r3, #12]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d103      	bne.n	8006b6e <bhy2_hif_set_regs+0x38>
        {
            reg_addr &= BHY2_SPI_WR_MASK;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b6c:	73fb      	strb	r3, [r7, #15]
        }

        hif->intf_rslt = hif->write(reg_addr, reg_data, length, hif->intf_ptr);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685c      	ldr	r4, [r3, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	7bf8      	ldrb	r0, [r7, #15]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	47a0      	blx	r4
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	751a      	strb	r2, [r3, #20]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <bhy2_hif_set_regs+0x64>
        {
            rslt = BHY2_E_IO;
 8006b90:	23fd      	movs	r3, #253	; 0xfd
 8006b92:	75fb      	strb	r3, [r7, #23]
        if (hif->intf_rslt != BHY2_INTF_RET_SUCCESS)
 8006b94:	e001      	b.n	8006b9a <bhy2_hif_set_regs+0x64>
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006b96:	23ff      	movs	r3, #255	; 0xff
 8006b98:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd90      	pop	{r4, r7, pc}

08006ba6 <bhy2_hif_delay_us>:

int8_t bhy2_hif_delay_us(uint32_t period_us, const struct bhy2_hif_dev *hif)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
    int8_t rslt = BHY2_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	73fb      	strb	r3, [r7, #15]

    if ((hif != NULL) && (hif->delay_us != NULL))
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <bhy2_hif_delay_us+0x2c>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <bhy2_hif_delay_us+0x2c>
    {
        hif->delay_us(period_us, hif->intf_ptr);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	6912      	ldr	r2, [r2, #16]
 8006bca:	4611      	mov	r1, r2
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
 8006bd0:	e001      	b.n	8006bd6 <bhy2_hif_delay_us+0x30>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006bd2:	23ff      	movs	r3, #255	; 0xff
 8006bd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <bhy2_hif_exec_cmd>:

int8_t bhy2_hif_exec_cmd(uint16_t cmd, const uint8_t *payload, uint32_t length, struct bhy2_hif_dev *hif)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b088      	sub	sp, #32
 8006be6:	af04      	add	r7, sp, #16
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	4603      	mov	r3, r0
 8006bf0:	81fb      	strh	r3, [r7, #14]
    return bhy2_hif_exec_cmd_generic(cmd, payload, length, NULL, 0, 0, hif);
 8006bf2:	89f8      	ldrh	r0, [r7, #14]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	9302      	str	r3, [sp, #8]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	2300      	movs	r3, #0
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	f7ff fc37 	bl	8006478 <bhy2_hif_exec_cmd_generic>
 8006c0a:	4603      	mov	r3, r0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <bhy2_hif_get_parameter>:
int8_t bhy2_hif_get_parameter(uint16_t param,
                              uint8_t *payload,
                              uint32_t payload_len,
                              uint32_t *actual_len,
                              struct bhy2_hif_dev *hif)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	603b      	str	r3, [r7, #0]
 8006c20:	4603      	mov	r3, r0
 8006c22:	81fb      	strh	r3, [r7, #14]
    uint16_t code = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	82bb      	strh	r3, [r7, #20]
    uint8_t prev_hif_ctrl, hif_ctrl;
    int8_t rslt = BHY2_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	75fb      	strb	r3, [r7, #23]

    if ((hif != NULL) && (payload != NULL) && (actual_len != NULL))
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d06e      	beq.n	8006d10 <bhy2_hif_get_parameter+0xfc>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d06b      	beq.n	8006d10 <bhy2_hif_get_parameter+0xfc>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d068      	beq.n	8006d10 <bhy2_hif_get_parameter+0xfc>
    {
        *actual_len = 0;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	601a      	str	r2, [r3, #0]

        rslt = bhy2_hif_get_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8006c44:	f107 0113 	add.w	r1, r7, #19
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	2006      	movs	r0, #6
 8006c4e:	f7ff ff3a 	bl	8006ac6 <bhy2_hif_get_regs>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8006c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d15b      	bne.n	8006d16 <bhy2_hif_get_parameter+0x102>
        {
            prev_hif_ctrl = hif_ctrl;
 8006c5e:	7cfb      	ldrb	r3, [r7, #19]
 8006c60:	75bb      	strb	r3, [r7, #22]
            hif_ctrl &= (uint8_t)(~(BHY2_HIF_CTRL_ASYNC_STATUS_CHANNEL)); /* Change the Status FIFO to synchronous mode
 8006c62:	7cfb      	ldrb	r3, [r7, #19]
 8006c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	74fb      	strb	r3, [r7, #19]
                                                                           * */
            if (hif_ctrl != prev_hif_ctrl)
 8006c6c:	7cfb      	ldrb	r3, [r7, #19]
 8006c6e:	7dba      	ldrb	r2, [r7, #22]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d008      	beq.n	8006c86 <bhy2_hif_get_parameter+0x72>
            {
                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8006c74:	f107 0113 	add.w	r1, r7, #19
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	2006      	movs	r0, #6
 8006c7e:	f7ff ff5a 	bl	8006b36 <bhy2_hif_set_regs>
 8006c82:	4603      	mov	r3, r0
 8006c84:	75fb      	strb	r3, [r7, #23]
            }

            if (rslt == BHY2_OK)
 8006c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d143      	bne.n	8006d16 <bhy2_hif_get_parameter+0x102>
            {
                rslt = bhy2_hif_exec_cmd(param | BHY2_PARAM_READ_MASK, NULL, 0, hif);
 8006c8e:	89fb      	ldrh	r3, [r7, #14]
 8006c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c94:	b298      	uxth	r0, r3
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	f7ff ffa1 	bl	8006be2 <bhy2_hif_exec_cmd>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	75fb      	strb	r3, [r7, #23]

                if (rslt == BHY2_OK)
 8006ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d134      	bne.n	8006d16 <bhy2_hif_get_parameter+0x102>
                {
                    rslt = bhy2_wait_status_ready(hif);
 8006cac:	6a38      	ldr	r0, [r7, #32]
 8006cae:	f7ff fdbf 	bl	8006830 <bhy2_wait_status_ready>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	75fb      	strb	r3, [r7, #23]

                    if (rslt == BHY2_OK)
 8006cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d12b      	bne.n	8006d16 <bhy2_hif_get_parameter+0x102>
                    {
                        rslt = bhy2_hif_get_status_fifo(&code, payload, payload_len, actual_len, hif);
 8006cbe:	f107 0014 	add.w	r0, r7, #20
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	f000 f94b 	bl	8006f66 <bhy2_hif_get_status_fifo>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	75fb      	strb	r3, [r7, #23]

                        if (rslt == BHY2_OK)
 8006cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d11c      	bne.n	8006d16 <bhy2_hif_get_parameter+0x102>
                        {
                            if (hif_ctrl != prev_hif_ctrl)
 8006cdc:	7cfb      	ldrb	r3, [r7, #19]
 8006cde:	7dba      	ldrb	r2, [r7, #22]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d00a      	beq.n	8006cfa <bhy2_hif_get_parameter+0xe6>
                            {
                                hif_ctrl = prev_hif_ctrl;
 8006ce4:	7dbb      	ldrb	r3, [r7, #22]
 8006ce6:	74fb      	strb	r3, [r7, #19]
                                rslt = bhy2_hif_set_regs(BHY2_REG_HOST_INTERFACE_CTRL, &hif_ctrl, 1, hif);
 8006ce8:	f107 0113 	add.w	r1, r7, #19
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	2006      	movs	r0, #6
 8006cf2:	f7ff ff20 	bl	8006b36 <bhy2_hif_set_regs>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]
                            }

                            if (rslt == BHY2_OK)
 8006cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <bhy2_hif_get_parameter+0x102>
                            {
                                if (code != param)
 8006d02:	8abb      	ldrh	r3, [r7, #20]
 8006d04:	89fa      	ldrh	r2, [r7, #14]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d005      	beq.n	8006d16 <bhy2_hif_get_parameter+0x102>
                                {
                                    rslt = BHY2_E_TIMEOUT;
 8006d0a:	23fb      	movs	r3, #251	; 0xfb
 8006d0c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BHY2_OK)
 8006d0e:	e002      	b.n	8006d16 <bhy2_hif_get_parameter+0x102>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006d10:	23ff      	movs	r3, #255	; 0xff
 8006d12:	75fb      	strb	r3, [r7, #23]
 8006d14:	e000      	b.n	8006d18 <bhy2_hif_get_parameter+0x104>
        if (rslt == BHY2_OK)
 8006d16:	bf00      	nop
    }

    return rslt;
 8006d18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <bhy2_hif_get_product_id>:
{
    return bhy2_hif_exec_cmd(param, payload, length, hif);
}

int8_t bhy2_hif_get_product_id(uint8_t *product_id, struct bhy2_hif_dev *hif)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_PRODUCT_ID, product_id, 1, hif);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2201      	movs	r2, #1
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	201c      	movs	r0, #28
 8006d36:	f7ff fec6 	bl	8006ac6 <bhy2_hif_get_regs>
 8006d3a:	4603      	mov	r3, r0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <bhy2_hif_get_kernel_version>:

    return rslt;
}

int8_t bhy2_hif_get_kernel_version(uint16_t *kernel_version, struct bhy2_hif_dev *hif)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int8_t rslt;

    if (kernel_version != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d013      	beq.n	8006d7c <bhy2_hif_get_kernel_version+0x38>
    {
        rslt = bhy2_hif_get_regs(BHY2_REG_KERNEL_VERSION_0, buffer, 2, hif);
 8006d54:	f107 010c 	add.w	r1, r7, #12
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	2020      	movs	r0, #32
 8006d5e:	f7ff feb2 	bl	8006ac6 <bhy2_hif_get_regs>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
        *kernel_version = BHY2_LE2U16(buffer);
 8006d66:	7b3b      	ldrb	r3, [r7, #12]
 8006d68:	b21a      	sxth	r2, r3
 8006d6a:	7b7b      	ldrb	r3, [r7, #13]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	b21b      	sxth	r3, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b21b      	sxth	r3, r3
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e001      	b.n	8006d80 <bhy2_hif_get_kernel_version+0x3c>
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006d7c:	23ff      	movs	r3, #255	; 0xff
 8006d7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <bhy2_hif_get_boot_status>:

    return rslt;
}

int8_t bhy2_hif_get_boot_status(uint8_t *boot_status, struct bhy2_hif_dev *hif)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, boot_status, 1, hif);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	2025      	movs	r0, #37	; 0x25
 8006d9e:	f7ff fe92 	bl	8006ac6 <bhy2_hif_get_regs>
 8006da2:	4603      	mov	r3, r0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <bhy2_hif_get_interrupt_status>:
{
    return bhy2_hif_get_regs(BHY2_REG_HOST_STATUS, host_status, 1, hif);
}

int8_t bhy2_hif_get_interrupt_status(uint8_t *int_status, struct bhy2_hif_dev *hif)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
    return bhy2_hif_get_regs(BHY2_REG_INT_STATUS, int_status, 1, hif);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2201      	movs	r2, #1
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	202d      	movs	r0, #45	; 0x2d
 8006dbe:	f7ff fe82 	bl	8006ac6 <bhy2_hif_get_regs>
 8006dc2:	4603      	mov	r3, r0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <bhy2_hif_reset>:
{
    return bhy2_hif_get_regs(BHY2_REG_ERROR_VALUE, fw_error, 1, hif);
}

int8_t bhy2_hif_reset(struct bhy2_hif_dev *hif)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
    uint8_t reset_req = BHY2_REQUEST_RESET;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	72fb      	strb	r3, [r7, #11]
    uint8_t boot_status = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	72bb      	strb	r3, [r7, #10]
    int8_t rslt;

    /* Timeout at 150ms (15 * 10000 microseconds) */
    uint16_t count = 15;
 8006ddc:	230f      	movs	r3, #15
 8006dde:	81bb      	strh	r3, [r7, #12]

    rslt = bhy2_hif_set_regs(BHY2_REG_RESET_REQ, &reset_req, 1, hif);
 8006de0:	f107 010b 	add.w	r1, r7, #11
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	2014      	movs	r0, #20
 8006dea:	f7ff fea4 	bl	8006b36 <bhy2_hif_set_regs>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8006df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d12b      	bne.n	8006e52 <bhy2_hif_reset+0x86>
    {
        while (count--)
 8006dfa:	e01c      	b.n	8006e36 <bhy2_hif_reset+0x6a>
        {
            rslt = bhy2_hif_delay_us(10000, hif);
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e02:	f7ff fed0 	bl	8006ba6 <bhy2_hif_delay_us>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73fb      	strb	r3, [r7, #15]
            if (rslt == BHY2_OK)
 8006e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d111      	bne.n	8006e36 <bhy2_hif_reset+0x6a>
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_BOOT_STATUS, &boot_status, 1, hif);
 8006e12:	f107 010a 	add.w	r1, r7, #10
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	2025      	movs	r0, #37	; 0x25
 8006e1c:	f7ff fe53 	bl	8006ac6 <bhy2_hif_get_regs>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]
                if (rslt == BHY2_OK)
 8006e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <bhy2_hif_reset+0x6a>
                {
                    if (boot_status & BHY2_BST_HOST_INTERFACE_READY)
 8006e2c:	7abb      	ldrb	r3, [r7, #10]
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <bhy2_hif_reset+0x76>
        while (count--)
 8006e36:	89bb      	ldrh	r3, [r7, #12]
 8006e38:	1e5a      	subs	r2, r3, #1
 8006e3a:	81ba      	strh	r2, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1dd      	bne.n	8006dfc <bhy2_hif_reset+0x30>
 8006e40:	e000      	b.n	8006e44 <bhy2_hif_reset+0x78>
                    {
                        break;
 8006e42:	bf00      	nop
                }
            }

        }

        if (!(boot_status & BHY2_BST_HOST_INTERFACE_READY))
 8006e44:	7abb      	ldrb	r3, [r7, #10]
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <bhy2_hif_reset+0x86>
        {
            rslt = BHY2_E_TIMEOUT;
 8006e4e:	23fb      	movs	r3, #251	; 0xfb
 8006e50:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8006e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <bhy2_hif_upload_firmware_to_ram>:

int8_t bhy2_hif_upload_firmware_to_ram(const uint8_t *firmware, uint32_t length, struct bhy2_hif_dev *hif)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b086      	sub	sp, #24
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
    int8_t rslt = BHY2_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	75fb      	strb	r3, [r7, #23]
    uint16_t magic;

    if ((hif != NULL) && (firmware != NULL))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d027      	beq.n	8006ec4 <bhy2_hif_upload_firmware_to_ram+0x66>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d024      	beq.n	8006ec4 <bhy2_hif_upload_firmware_to_ram+0x66>
    {
        magic = BHY2_LE2U16(firmware);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b21a      	sxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3301      	adds	r3, #1
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	b21b      	sxth	r3, r3
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b21b      	sxth	r3, r3
 8006e8e:	82bb      	strh	r3, [r7, #20]
        if (magic != BHY2_FW_MAGIC)
 8006e90:	8abb      	ldrh	r3, [r7, #20]
 8006e92:	f246 622b 	movw	r2, #26155	; 0x662b
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d002      	beq.n	8006ea0 <bhy2_hif_upload_firmware_to_ram+0x42>
        {
            rslt = BHY2_E_MAGIC;
 8006e9a:	23fc      	movs	r3, #252	; 0xfc
 8006e9c:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8006e9e:	e014      	b.n	8006eca <bhy2_hif_upload_firmware_to_ram+0x6c>
        }
        else
        {
            rslt = bhy2_hif_exec_cmd(BHY2_CMD_UPLOAD_TO_PROGRAM_RAM, firmware, length, hif);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	68f9      	ldr	r1, [r7, #12]
 8006ea6:	2002      	movs	r0, #2
 8006ea8:	f7ff fe9b 	bl	8006be2 <bhy2_hif_exec_cmd>
 8006eac:	4603      	mov	r3, r0
 8006eae:	75fb      	strb	r3, [r7, #23]
            if (rslt == BHY2_OK)
 8006eb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d108      	bne.n	8006eca <bhy2_hif_upload_firmware_to_ram+0x6c>
            {
                rslt = bhy2_hif_check_boot_status_ram(hif);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff fcf2 	bl	80068a2 <bhy2_hif_check_boot_status_ram>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]
        if (magic != BHY2_FW_MAGIC)
 8006ec2:	e002      	b.n	8006eca <bhy2_hif_upload_firmware_to_ram+0x6c>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8006ec4:	23ff      	movs	r3, #255	; 0xff
 8006ec6:	75fb      	strb	r3, [r7, #23]
 8006ec8:	e000      	b.n	8006ecc <bhy2_hif_upload_firmware_to_ram+0x6e>
        if (magic != BHY2_FW_MAGIC)
 8006eca:	bf00      	nop
    }

    return rslt;
 8006ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <bhy2_hif_boot_program_ram>:

    return rslt;
}

int8_t bhy2_hif_boot_program_ram(struct bhy2_hif_dev *hif)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bhy2_hif_exec_cmd(BHY2_CMD_BOOT_PROGRAM_RAM, NULL, 0, hif);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	2003      	movs	r0, #3
 8006ee8:	f7ff fe7b 	bl	8006be2 <bhy2_hif_exec_cmd>
 8006eec:	4603      	mov	r3, r0
 8006eee:	73fb      	strb	r3, [r7, #15]
    if (rslt == BHY2_OK)
 8006ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <bhy2_hif_boot_program_ram+0x2a>
    {
        rslt = bhy2_hif_check_boot_status_ram(hif);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff fcd2 	bl	80068a2 <bhy2_hif_check_boot_status_ram>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <bhy2_hif_get_wakeup_fifo>:
int8_t bhy2_hif_get_wakeup_fifo(uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_read,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af02      	add	r7, sp, #8
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_W, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	9301      	str	r3, [sp, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	68f9      	ldr	r1, [r7, #12]
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	f7ff fd00 	bl	8006930 <bhy2_hif_get_fifo>
 8006f30:	4603      	mov	r3, r0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <bhy2_hif_get_nonwakeup_fifo>:
int8_t bhy2_hif_get_nonwakeup_fifo(uint8_t *fifo,
                                   uint32_t fifo_len,
                                   uint32_t *bytes_read,
                                   uint32_t *bytes_remain,
                                   struct bhy2_hif_dev *hif)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b086      	sub	sp, #24
 8006f3e:	af02      	add	r7, sp, #8
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_FIFO_NW, fifo, fifo_len, bytes_read, bytes_remain, hif);
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	68f9      	ldr	r1, [r7, #12]
 8006f56:	2002      	movs	r0, #2
 8006f58:	f7ff fcea 	bl	8006930 <bhy2_hif_get_fifo>
 8006f5c:	4603      	mov	r3, r0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <bhy2_hif_get_status_fifo>:
int8_t bhy2_hif_get_status_fifo(uint16_t *status_code,
                                uint8_t *fifo,
                                uint32_t fifo_len,
                                uint32_t *bytes_remain,
                                struct bhy2_hif_dev *hif)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b086      	sub	sp, #24
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	607a      	str	r2, [r7, #4]
 8006f72:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t tmp_fifo[4];

    rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, tmp_fifo, 4, hif);
 8006f74:	f107 0110 	add.w	r1, r7, #16
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	2003      	movs	r0, #3
 8006f7e:	f7ff fda2 	bl	8006ac6 <bhy2_hif_get_regs>
 8006f82:	4603      	mov	r3, r0
 8006f84:	75fb      	strb	r3, [r7, #23]
    if (rslt == BHY2_OK)
 8006f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d130      	bne.n	8006ff0 <bhy2_hif_get_status_fifo+0x8a>
    {
        *status_code = BHY2_LE2U16(&tmp_fifo[0]);
 8006f8e:	7c3b      	ldrb	r3, [r7, #16]
 8006f90:	b21a      	sxth	r2, r3
 8006f92:	f107 0310 	add.w	r3, r7, #16
 8006f96:	3301      	adds	r3, #1
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	b21b      	sxth	r3, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	b21b      	sxth	r3, r3
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	801a      	strh	r2, [r3, #0]
        *bytes_remain = BHY2_LE2U16(&tmp_fifo[2]);
 8006fa8:	7cbb      	ldrb	r3, [r7, #18]
 8006faa:	b21a      	sxth	r2, r3
 8006fac:	f107 0310 	add.w	r3, r7, #16
 8006fb0:	3302      	adds	r3, #2
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	b21b      	sxth	r3, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b21b      	sxth	r3, r3
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	601a      	str	r2, [r3, #0]
        if (*bytes_remain != 0)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <bhy2_hif_get_status_fifo+0x8a>
        {
            if (fifo_len < *bytes_remain)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d202      	bcs.n	8006fde <bhy2_hif_get_status_fifo+0x78>
            {
                rslt = BHY2_E_BUFFER;
 8006fd8:	23fa      	movs	r3, #250	; 0xfa
 8006fda:	75fb      	strb	r3, [r7, #23]
 8006fdc:	e008      	b.n	8006ff0 <bhy2_hif_get_status_fifo+0x8a>
            }
            else
            {
                rslt = bhy2_hif_get_regs(BHY2_REG_CHAN_STATUS, fifo, *bytes_remain, hif);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	2003      	movs	r0, #3
 8006fe8:	f7ff fd6d 	bl	8006ac6 <bhy2_hif_get_regs>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8006ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <bhy2_hif_get_status_fifo_async>:
int8_t bhy2_hif_get_status_fifo_async(uint8_t *fifo,
                                      uint32_t fifo_len,
                                      uint32_t *bytes_read,
                                      uint32_t *bytes_remain,
                                      struct bhy2_hif_dev *hif)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
    return bhy2_hif_get_fifo(BHY2_REG_CHAN_STATUS, fifo, fifo_len, bytes_read, bytes_remain, hif);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	2003      	movs	r0, #3
 800701a:	f7ff fc89 	bl	8006930 <bhy2_hif_get_fifo>
 800701e:	4603      	mov	r3, r0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <bhy2_hif_exec_sensor_conf_cmd>:

int8_t bhy2_hif_exec_sensor_conf_cmd(uint8_t sensor_id,
                                     bhy2_float sample_rate,
                                     uint32_t latency,
                                     struct bhy2_hif_dev *hif)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	ed87 0a02 	vstr	s0, [r7, #8]
 8007034:	6079      	str	r1, [r7, #4]
 8007036:	603a      	str	r2, [r7, #0]
 8007038:	73fb      	strb	r3, [r7, #15]
    uint8_t tmp_buf[8];
    union bhy2_hif_float_u32 sample_rate_u;

    sample_rate_u.as_float = sample_rate;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	617b      	str	r3, [r7, #20]

    /* Sample rate is 32bits, latency is 24bits */
    tmp_buf[0] = sensor_id;
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	763b      	strb	r3, [r7, #24]
    tmp_buf[1] = (uint8_t)(sample_rate_u.reg & 0xFF);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	767b      	strb	r3, [r7, #25]
    tmp_buf[2] = (uint8_t)((sample_rate_u.reg >> 8) & 0xFF);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	b2db      	uxtb	r3, r3
 800704e:	76bb      	strb	r3, [r7, #26]
    tmp_buf[3] = (uint8_t)((sample_rate_u.reg >> 16) & 0xFF);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	b2db      	uxtb	r3, r3
 8007056:	76fb      	strb	r3, [r7, #27]
    tmp_buf[4] = (uint8_t)((sample_rate_u.reg >> 24) & 0xFF);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	0e1b      	lsrs	r3, r3, #24
 800705c:	b2db      	uxtb	r3, r3
 800705e:	773b      	strb	r3, [r7, #28]
    tmp_buf[5] = (uint8_t)(latency & 0xFF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	777b      	strb	r3, [r7, #29]
    tmp_buf[6] = (uint8_t)((latency >> 8) & 0xFF);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	b2db      	uxtb	r3, r3
 800706c:	77bb      	strb	r3, [r7, #30]
    tmp_buf[7] = (uint8_t)((latency >> 16) & 0xFF);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0c1b      	lsrs	r3, r3, #16
 8007072:	b2db      	uxtb	r3, r3
 8007074:	77fb      	strb	r3, [r7, #31]

    return bhy2_hif_exec_cmd(BHY2_CMD_CONFIG_SENSOR, tmp_buf, 8, hif);
 8007076:	f107 0118 	add.w	r1, r7, #24
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2208      	movs	r2, #8
 800707e:	200d      	movs	r0, #13
 8007080:	f7ff fdaf 	bl	8006be2 <bhy2_hif_exec_cmd>
 8007084:	4603      	mov	r3, r0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3720      	adds	r7, #32
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <bhy2_hif_get_sensor_info>:

    return rslt;
}

int8_t bhy2_hif_get_sensor_info(uint8_t sensor_id, struct bhy2_sensor_info *info, struct bhy2_hif_dev *hif)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b090      	sub	sp, #64	; 0x40
 8007092:	af02      	add	r7, sp, #8
 8007094:	4603      	mov	r3, r0
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	607a      	str	r2, [r7, #4]
 800709a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t length;
    uint8_t bytes[28];

    if (info != NULL)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80da 	beq.w	8007258 <bhy2_hif_get_sensor_info+0x1ca>
    {
        /* Checking for a valid sensor ID */
        if (sensor_id > BHY2_SPECIAL_SENSOR_ID_OFFSET)
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	2bf5      	cmp	r3, #245	; 0xf5
 80070a8:	d903      	bls.n	80070b2 <bhy2_hif_get_sensor_info+0x24>
        {
            rslt = BHY2_E_INVALID_PARAM;
 80070aa:	23fe      	movs	r3, #254	; 0xfe
 80070ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80070b0:	e0d5      	b.n	800725e <bhy2_hif_get_sensor_info+0x1d0>
        }
        else
        {
            rslt = bhy2_hif_get_parameter((uint16_t)(BHY2_PARAM_SENSOR_INFO_0 + sensor_id), bytes, 28, &length, hif);
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80070ba:	b298      	uxth	r0, r3
 80070bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80070c0:	f107 0114 	add.w	r1, r7, #20
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	4613      	mov	r3, r2
 80070ca:	221c      	movs	r2, #28
 80070cc:	f7ff fda2 	bl	8006c14 <bhy2_hif_get_parameter>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BHY2_OK)
 80070d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f040 80bf 	bne.w	800725e <bhy2_hif_get_sensor_info+0x1d0>
            {
                if (length != 28)
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	2b1c      	cmp	r3, #28
 80070e4:	d003      	beq.n	80070ee <bhy2_hif_get_sensor_info+0x60>
                {
                    rslt = BHY2_E_INVALID_PARAM;
 80070e6:	23fe      	movs	r3, #254	; 0xfe
 80070e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80070ec:	e0b7      	b.n	800725e <bhy2_hif_get_sensor_info+0x1d0>
                }
                else
                {
                    info->sensor_type = bytes[0];
 80070ee:	7d3a      	ldrb	r2, [r7, #20]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	701a      	strb	r2, [r3, #0]
                    info->driver_id = bytes[1];
 80070f4:	7d7a      	ldrb	r2, [r7, #21]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	705a      	strb	r2, [r3, #1]
                    info->driver_version = bytes[2];
 80070fa:	7dba      	ldrb	r2, [r7, #22]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	709a      	strb	r2, [r3, #2]
                    info->power = bytes[3];
 8007100:	7dfa      	ldrb	r2, [r7, #23]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	70da      	strb	r2, [r3, #3]
                    info->max_range.bytes[0] = bytes[4];
 8007106:	7e3a      	ldrb	r2, [r7, #24]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	711a      	strb	r2, [r3, #4]
                    info->max_range.bytes[1] = bytes[5];
 800710c:	7e7a      	ldrb	r2, [r7, #25]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	715a      	strb	r2, [r3, #5]
                    info->resolution.bytes[0] = bytes[6];
 8007112:	7eba      	ldrb	r2, [r7, #26]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	719a      	strb	r2, [r3, #6]
                    info->resolution.bytes[1] = bytes[7];
 8007118:	7efa      	ldrb	r2, [r7, #27]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	71da      	strb	r2, [r3, #7]
                    info->max_rate.bytes[0] = bytes[8];
 800711e:	7f3a      	ldrb	r2, [r7, #28]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	721a      	strb	r2, [r3, #8]
                    info->max_rate.bytes[1] = bytes[9];
 8007124:	7f7a      	ldrb	r2, [r7, #29]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	725a      	strb	r2, [r3, #9]
                    info->max_rate.bytes[2] = bytes[10];
 800712a:	7fba      	ldrb	r2, [r7, #30]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	729a      	strb	r2, [r3, #10]
                    info->max_rate.bytes[3] = bytes[11];
 8007130:	7ffa      	ldrb	r2, [r7, #31]
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	72da      	strb	r2, [r3, #11]
                    info->fifo_reserved.bytes[0] = bytes[12];
 8007136:	f897 2020 	ldrb.w	r2, [r7, #32]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	731a      	strb	r2, [r3, #12]
                    info->fifo_reserved.bytes[1] = bytes[13];
 800713e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	735a      	strb	r2, [r3, #13]
                    info->fifo_reserved.bytes[2] = bytes[14];
 8007146:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	739a      	strb	r2, [r3, #14]
                    info->fifo_reserved.bytes[3] = bytes[15];
 800714e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	73da      	strb	r2, [r3, #15]
                    info->fifo_max.bytes[0] = bytes[16];
 8007156:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	741a      	strb	r2, [r3, #16]
                    info->fifo_max.bytes[1] = bytes[17];
 800715e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	745a      	strb	r2, [r3, #17]
                    info->fifo_max.bytes[2] = bytes[18];
 8007166:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	749a      	strb	r2, [r3, #18]
                    info->fifo_max.bytes[3] = bytes[19];
 800716e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	74da      	strb	r2, [r3, #19]
                    info->event_size = bytes[20];
 8007176:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	751a      	strb	r2, [r3, #20]
                    info->min_rate.bytes[0] = bytes[21];
 800717e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	761a      	strb	r2, [r3, #24]
                    info->min_rate.bytes[1] = bytes[22];
 8007186:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	765a      	strb	r2, [r3, #25]
                    info->min_rate.bytes[2] = bytes[23];
 800718e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	769a      	strb	r2, [r3, #26]
                    info->min_rate.bytes[3] = bytes[24];
 8007196:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	76da      	strb	r2, [r3, #27]
                    info->max_range.u16_val = BHY2_LE2U16(info->max_range.bytes);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	791b      	ldrb	r3, [r3, #4]
 80071a2:	b21a      	sxth	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	795b      	ldrb	r3, [r3, #5]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	b21b      	sxth	r3, r3
 80071ac:	4313      	orrs	r3, r2
 80071ae:	b21b      	sxth	r3, r3
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	809a      	strh	r2, [r3, #4]
                    info->resolution.u16_val = BHY2_LE2U16(info->resolution.bytes);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	799b      	ldrb	r3, [r3, #6]
 80071ba:	b21a      	sxth	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	79db      	ldrb	r3, [r3, #7]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	b21b      	sxth	r3, r3
 80071c4:	4313      	orrs	r3, r2
 80071c6:	b21b      	sxth	r3, r3
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	80da      	strh	r2, [r3, #6]
                    info->max_rate.u32_val = BHY2_LE2U32(info->max_rate.bytes);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	7a1b      	ldrb	r3, [r3, #8]
 80071d2:	461a      	mov	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	7a5b      	ldrb	r3, [r3, #9]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	431a      	orrs	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	7a9b      	ldrb	r3, [r3, #10]
 80071e0:	041b      	lsls	r3, r3, #16
 80071e2:	431a      	orrs	r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	7adb      	ldrb	r3, [r3, #11]
 80071e8:	061b      	lsls	r3, r3, #24
 80071ea:	431a      	orrs	r2, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	609a      	str	r2, [r3, #8]
                    info->fifo_reserved.u32_val = BHY2_LE2U32(info->fifo_reserved.bytes);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	7b1b      	ldrb	r3, [r3, #12]
 80071f4:	461a      	mov	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	7b5b      	ldrb	r3, [r3, #13]
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	431a      	orrs	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	7b9b      	ldrb	r3, [r3, #14]
 8007202:	041b      	lsls	r3, r3, #16
 8007204:	431a      	orrs	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	7bdb      	ldrb	r3, [r3, #15]
 800720a:	061b      	lsls	r3, r3, #24
 800720c:	431a      	orrs	r2, r3
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	60da      	str	r2, [r3, #12]
                    info->fifo_max.u32_val = BHY2_LE2U32(info->fifo_max.bytes);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	7c1b      	ldrb	r3, [r3, #16]
 8007216:	461a      	mov	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	7c5b      	ldrb	r3, [r3, #17]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	431a      	orrs	r2, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	7c9b      	ldrb	r3, [r3, #18]
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	431a      	orrs	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	7cdb      	ldrb	r3, [r3, #19]
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	431a      	orrs	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	611a      	str	r2, [r3, #16]
                    info->min_rate.u32_val = BHY2_LE2U32(info->min_rate.bytes);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	7e1b      	ldrb	r3, [r3, #24]
 8007238:	461a      	mov	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	7e5b      	ldrb	r3, [r3, #25]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	431a      	orrs	r2, r3
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	7e9b      	ldrb	r3, [r3, #26]
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	431a      	orrs	r2, r3
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	7edb      	ldrb	r3, [r3, #27]
 800724e:	061b      	lsls	r3, r3, #24
 8007250:	431a      	orrs	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	619a      	str	r2, [r3, #24]
 8007256:	e002      	b.n	800725e <bhy2_hif_get_sensor_info+0x1d0>
            }
        }
    }
    else
    {
        rslt = BHY2_E_NULL_PTR;
 8007258:	23ff      	movs	r3, #255	; 0xff
 800725a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    return rslt;
 800725e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007262:	4618      	mov	r0, r3
 8007264:	3738      	adds	r7, #56	; 0x38
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <bhy2_parse_quaternion>:
{
    *altitude = (float)(data[0] | ((uint32_t)data[1] << 8) | ((uint32_t)data[2] << 16) | ((uint32_t)data[3] << 24));
}

void bhy2_parse_quaternion(const uint8_t *data, struct bhy2_data_quaternion *quaternion)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
    quaternion->x = BHY2_LE2S16(data);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	b21a      	sxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	3301      	adds	r3, #1
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	b21b      	sxth	r3, r3
 8007284:	4313      	orrs	r3, r2
 8007286:	b21a      	sxth	r2, r3
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	801a      	strh	r2, [r3, #0]
    quaternion->y = BHY2_LE2S16(data + 2);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3302      	adds	r3, #2
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b21a      	sxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3303      	adds	r3, #3
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	b21b      	sxth	r3, r3
 800729e:	4313      	orrs	r3, r2
 80072a0:	b21a      	sxth	r2, r3
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	805a      	strh	r2, [r3, #2]
    quaternion->z = BHY2_LE2S16(data + 4);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3304      	adds	r3, #4
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b21a      	sxth	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3305      	adds	r3, #5
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	b21b      	sxth	r3, r3
 80072b8:	4313      	orrs	r3, r2
 80072ba:	b21a      	sxth	r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	809a      	strh	r2, [r3, #4]
    quaternion->w = BHY2_LE2S16(data + 6);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3306      	adds	r3, #6
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b21a      	sxth	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3307      	adds	r3, #7
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	021b      	lsls	r3, r3, #8
 80072d0:	b21b      	sxth	r3, r3
 80072d2:	4313      	orrs	r3, r2
 80072d4:	b21a      	sxth	r2, r3
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	80da      	strh	r2, [r3, #6]
    quaternion->accuracy = BHY2_LE2U16(data + 8);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3308      	adds	r3, #8
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b21a      	sxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3309      	adds	r3, #9
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	b21b      	sxth	r3, r3
 80072ec:	4313      	orrs	r3, r2
 80072ee:	b21b      	sxth	r3, r3
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	811a      	strh	r2, [r3, #8]
}
 80072f6:	bf00      	nop
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8007308:	4b12      	ldr	r3, [pc, #72]	; (8007354 <MX_COMP2_Init+0x50>)
 800730a:	4a13      	ldr	r2, [pc, #76]	; (8007358 <MX_COMP2_Init+0x54>)
 800730c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_DAC1_CH1;
 800730e:	4b11      	ldr	r3, [pc, #68]	; (8007354 <MX_COMP2_Init+0x50>)
 8007310:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007314:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8007316:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <MX_COMP2_Init+0x50>)
 8007318:	2200      	movs	r2, #0
 800731a:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <MX_COMP2_Init+0x50>)
 800731e:	2200      	movs	r2, #0
 8007320:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8007322:	4b0c      	ldr	r3, [pc, #48]	; (8007354 <MX_COMP2_Init+0x50>)
 8007324:	2200      	movs	r2, #0
 8007326:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8007328:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <MX_COMP2_Init+0x50>)
 800732a:	2200      	movs	r2, #0
 800732c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800732e:	4b09      	ldr	r3, [pc, #36]	; (8007354 <MX_COMP2_Init+0x50>)
 8007330:	2200      	movs	r2, #0
 8007332:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <MX_COMP2_Init+0x50>)
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 800733a:	4b06      	ldr	r3, [pc, #24]	; (8007354 <MX_COMP2_Init+0x50>)
 800733c:	2211      	movs	r2, #17
 800733e:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8007340:	4804      	ldr	r0, [pc, #16]	; (8007354 <MX_COMP2_Init+0x50>)
 8007342:	f001 fc57 	bl	8008bf4 <HAL_COMP_Init>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 800734c:	f000 fb76 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8007350:	bf00      	nop
 8007352:	bd80      	pop	{r7, pc}
 8007354:	240014a8 	.word	0x240014a8
 8007358:	58003810 	.word	0x58003810

0800735c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007364:	f107 0314 	add.w	r3, r7, #20
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	609a      	str	r2, [r3, #8]
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a1c      	ldr	r2, [pc, #112]	; (80073ec <HAL_COMP_MspInit+0x90>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d132      	bne.n	80073e4 <HAL_COMP_MspInit+0x88>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* COMP2 clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800737e:	4b1c      	ldr	r3, [pc, #112]	; (80073f0 <HAL_COMP_MspInit+0x94>)
 8007380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007384:	4a1a      	ldr	r2, [pc, #104]	; (80073f0 <HAL_COMP_MspInit+0x94>)
 8007386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800738a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <HAL_COMP_MspInit+0x94>)
 8007390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800739c:	4b14      	ldr	r3, [pc, #80]	; (80073f0 <HAL_COMP_MspInit+0x94>)
 800739e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073a2:	4a13      	ldr	r2, [pc, #76]	; (80073f0 <HAL_COMP_MspInit+0x94>)
 80073a4:	f043 0310 	orr.w	r3, r3, #16
 80073a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <HAL_COMP_MspInit+0x94>)
 80073ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE9     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073c0:	2303      	movs	r3, #3
 80073c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073c8:	f107 0314 	add.w	r3, r7, #20
 80073cc:	4619      	mov	r1, r3
 80073ce:	4809      	ldr	r0, [pc, #36]	; (80073f4 <HAL_COMP_MspInit+0x98>)
 80073d0:	f004 fa68 	bl	800b8a4 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 80073d4:	2200      	movs	r2, #0
 80073d6:	2100      	movs	r1, #0
 80073d8:	2089      	movs	r0, #137	; 0x89
 80073da:	f001 fe84 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80073de:	2089      	movs	r0, #137	; 0x89
 80073e0:	f001 fe9b 	bl	800911a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 80073e4:	bf00      	nop
 80073e6:	3728      	adds	r7, #40	; 0x28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	58003810 	.word	0x58003810
 80073f0:	58024400 	.word	0x58024400
 80073f4:	58021000 	.word	0x58021000

080073f8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	; 0x28
 80073fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80073fe:	1d3b      	adds	r3, r7, #4
 8007400:	2224      	movs	r2, #36	; 0x24
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f011 f9f9 	bl	80187fc <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <MX_DAC1_Init+0x5c>)
 800740c:	4a12      	ldr	r2, [pc, #72]	; (8007458 <MX_DAC1_Init+0x60>)
 800740e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007410:	4810      	ldr	r0, [pc, #64]	; (8007454 <MX_DAC1_Init+0x5c>)
 8007412:	f001 fe9c 	bl	800914e <HAL_DAC_Init>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800741c:	f000 fb0e 	bl	8007a3c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007420:	2300      	movs	r3, #0
 8007422:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007424:	2300      	movs	r3, #0
 8007426:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8007428:	2302      	movs	r3, #2
 800742a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 800742c:	2302      	movs	r3, #2
 800742e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007434:	1d3b      	adds	r3, r7, #4
 8007436:	2200      	movs	r2, #0
 8007438:	4619      	mov	r1, r3
 800743a:	4806      	ldr	r0, [pc, #24]	; (8007454 <MX_DAC1_Init+0x5c>)
 800743c:	f001 fece 	bl	80091dc <HAL_DAC_ConfigChannel>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8007446:	f000 faf9 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800744a:	bf00      	nop
 800744c:	3728      	adds	r7, #40	; 0x28
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	240014d4 	.word	0x240014d4
 8007458:	40007400 	.word	0x40007400

0800745c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a0b      	ldr	r2, [pc, #44]	; (8007498 <HAL_DAC_MspInit+0x3c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d10e      	bne.n	800748c <HAL_DAC_MspInit+0x30>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <HAL_DAC_MspInit+0x40>)
 8007470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007474:	4a09      	ldr	r2, [pc, #36]	; (800749c <HAL_DAC_MspInit+0x40>)
 8007476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800747a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <HAL_DAC_MspInit+0x40>)
 8007480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800748c:	bf00      	nop
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	40007400 	.word	0x40007400
 800749c:	58024400 	.word	0x58024400

080074a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80074a6:	4b19      	ldr	r3, [pc, #100]	; (800750c <MX_DMA_Init+0x6c>)
 80074a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074ac:	4a17      	ldr	r2, [pc, #92]	; (800750c <MX_DMA_Init+0x6c>)
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <MX_DMA_Init+0x6c>)
 80074b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	200b      	movs	r0, #11
 80074ca:	f001 fe0c 	bl	80090e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80074ce:	200b      	movs	r0, #11
 80074d0:	f001 fe23 	bl	800911a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80074d4:	2200      	movs	r2, #0
 80074d6:	2100      	movs	r1, #0
 80074d8:	200c      	movs	r0, #12
 80074da:	f001 fe04 	bl	80090e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80074de:	200c      	movs	r0, #12
 80074e0:	f001 fe1b 	bl	800911a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80074e4:	2200      	movs	r2, #0
 80074e6:	2100      	movs	r1, #0
 80074e8:	200f      	movs	r0, #15
 80074ea:	f001 fdfc 	bl	80090e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80074ee:	200f      	movs	r0, #15
 80074f0:	f001 fe13 	bl	800911a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80074f4:	2200      	movs	r2, #0
 80074f6:	2100      	movs	r1, #0
 80074f8:	2010      	movs	r0, #16
 80074fa:	f001 fdf4 	bl	80090e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80074fe:	2010      	movs	r0, #16
 8007500:	f001 fe0b 	bl	800911a <HAL_NVIC_EnableIRQ>

}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	58024400 	.word	0x58024400

08007510 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007516:	f107 0314 	add.w	r3, r7, #20
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	605a      	str	r2, [r3, #4]
 8007520:	609a      	str	r2, [r3, #8]
 8007522:	60da      	str	r2, [r3, #12]
 8007524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007526:	4b45      	ldr	r3, [pc, #276]	; (800763c <MX_GPIO_Init+0x12c>)
 8007528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800752c:	4a43      	ldr	r2, [pc, #268]	; (800763c <MX_GPIO_Init+0x12c>)
 800752e:	f043 0304 	orr.w	r3, r3, #4
 8007532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007536:	4b41      	ldr	r3, [pc, #260]	; (800763c <MX_GPIO_Init+0x12c>)
 8007538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007544:	4b3d      	ldr	r3, [pc, #244]	; (800763c <MX_GPIO_Init+0x12c>)
 8007546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800754a:	4a3c      	ldr	r2, [pc, #240]	; (800763c <MX_GPIO_Init+0x12c>)
 800754c:	f043 0301 	orr.w	r3, r3, #1
 8007550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007554:	4b39      	ldr	r3, [pc, #228]	; (800763c <MX_GPIO_Init+0x12c>)
 8007556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007562:	4b36      	ldr	r3, [pc, #216]	; (800763c <MX_GPIO_Init+0x12c>)
 8007564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007568:	4a34      	ldr	r2, [pc, #208]	; (800763c <MX_GPIO_Init+0x12c>)
 800756a:	f043 0310 	orr.w	r3, r3, #16
 800756e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007572:	4b32      	ldr	r3, [pc, #200]	; (800763c <MX_GPIO_Init+0x12c>)
 8007574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007580:	4b2e      	ldr	r3, [pc, #184]	; (800763c <MX_GPIO_Init+0x12c>)
 8007582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007586:	4a2d      	ldr	r2, [pc, #180]	; (800763c <MX_GPIO_Init+0x12c>)
 8007588:	f043 0302 	orr.w	r3, r3, #2
 800758c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007590:	4b2a      	ldr	r3, [pc, #168]	; (800763c <MX_GPIO_Init+0x12c>)
 8007592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	607b      	str	r3, [r7, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800759e:	4b27      	ldr	r3, [pc, #156]	; (800763c <MX_GPIO_Init+0x12c>)
 80075a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075a4:	4a25      	ldr	r2, [pc, #148]	; (800763c <MX_GPIO_Init+0x12c>)
 80075a6:	f043 0308 	orr.w	r3, r3, #8
 80075aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075ae:	4b23      	ldr	r3, [pc, #140]	; (800763c <MX_GPIO_Init+0x12c>)
 80075b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_SYNC_GPIO_Port, CAM_SYNC_Pin, GPIO_PIN_RESET);
 80075bc:	2200      	movs	r2, #0
 80075be:	2101      	movs	r1, #1
 80075c0:	481f      	ldr	r0, [pc, #124]	; (8007640 <MX_GPIO_Init+0x130>)
 80075c2:	f004 fb1f 	bl	800bc04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80075c6:	2201      	movs	r2, #1
 80075c8:	2110      	movs	r1, #16
 80075ca:	481e      	ldr	r0, [pc, #120]	; (8007644 <MX_GPIO_Init+0x134>)
 80075cc:	f004 fb1a 	bl	800bc04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 80075d0:	2201      	movs	r2, #1
 80075d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075d6:	481c      	ldr	r0, [pc, #112]	; (8007648 <MX_GPIO_Init+0x138>)
 80075d8:	f004 fb14 	bl	800bc04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAM_SYNC_Pin;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075e0:	2301      	movs	r3, #1
 80075e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80075e4:	2302      	movs	r3, #2
 80075e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075e8:	2303      	movs	r3, #3
 80075ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_SYNC_GPIO_Port, &GPIO_InitStruct);
 80075ec:	f107 0314 	add.w	r3, r7, #20
 80075f0:	4619      	mov	r1, r3
 80075f2:	4813      	ldr	r0, [pc, #76]	; (8007640 <MX_GPIO_Init+0x130>)
 80075f4:	f004 f956 	bl	800b8a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80075f8:	2310      	movs	r3, #16
 80075fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075fc:	2301      	movs	r3, #1
 80075fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007600:	2301      	movs	r3, #1
 8007602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007604:	2303      	movs	r3, #3
 8007606:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8007608:	f107 0314 	add.w	r3, r7, #20
 800760c:	4619      	mov	r1, r3
 800760e:	480d      	ldr	r0, [pc, #52]	; (8007644 <MX_GPIO_Init+0x134>)
 8007610:	f004 f948 	bl	800b8a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8007614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800761a:	2301      	movs	r3, #1
 800761c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800761e:	2301      	movs	r3, #1
 8007620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007622:	2303      	movs	r3, #3
 8007624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8007626:	f107 0314 	add.w	r3, r7, #20
 800762a:	4619      	mov	r1, r3
 800762c:	4806      	ldr	r0, [pc, #24]	; (8007648 <MX_GPIO_Init+0x138>)
 800762e:	f004 f939 	bl	800b8a4 <HAL_GPIO_Init>

}
 8007632:	bf00      	nop
 8007634:	3728      	adds	r7, #40	; 0x28
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	58024400 	.word	0x58024400
 8007640:	58020800 	.word	0x58020800
 8007644:	58020000 	.word	0x58020000
 8007648:	58021000 	.word	0x58021000

0800764c <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007650:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <MX_I2C2_Init+0x74>)
 8007652:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <MX_I2C2_Init+0x78>)
 8007654:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8007656:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <MX_I2C2_Init+0x74>)
 8007658:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <MX_I2C2_Init+0x7c>)
 800765a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800765c:	4b18      	ldr	r3, [pc, #96]	; (80076c0 <MX_I2C2_Init+0x74>)
 800765e:	2200      	movs	r2, #0
 8007660:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007662:	4b17      	ldr	r3, [pc, #92]	; (80076c0 <MX_I2C2_Init+0x74>)
 8007664:	2201      	movs	r2, #1
 8007666:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007668:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <MX_I2C2_Init+0x74>)
 800766a:	2200      	movs	r2, #0
 800766c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800766e:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <MX_I2C2_Init+0x74>)
 8007670:	2200      	movs	r2, #0
 8007672:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007674:	4b12      	ldr	r3, [pc, #72]	; (80076c0 <MX_I2C2_Init+0x74>)
 8007676:	2200      	movs	r2, #0
 8007678:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800767a:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <MX_I2C2_Init+0x74>)
 800767c:	2200      	movs	r2, #0
 800767e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007680:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <MX_I2C2_Init+0x74>)
 8007682:	2200      	movs	r2, #0
 8007684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007686:	480e      	ldr	r0, [pc, #56]	; (80076c0 <MX_I2C2_Init+0x74>)
 8007688:	f004 fad6 	bl	800bc38 <HAL_I2C_Init>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007692:	f000 f9d3 	bl	8007a3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007696:	2100      	movs	r1, #0
 8007698:	4809      	ldr	r0, [pc, #36]	; (80076c0 <MX_I2C2_Init+0x74>)
 800769a:	f005 f9e2 	bl	800ca62 <HAL_I2CEx_ConfigAnalogFilter>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80076a4:	f000 f9ca 	bl	8007a3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80076a8:	2100      	movs	r1, #0
 80076aa:	4805      	ldr	r0, [pc, #20]	; (80076c0 <MX_I2C2_Init+0x74>)
 80076ac:	f005 fa24 	bl	800caf8 <HAL_I2CEx_ConfigDigitalFilter>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80076b6:	f000 f9c1 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80076ba:	bf00      	nop
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	240014e8 	.word	0x240014e8
 80076c4:	40005800 	.word	0x40005800
 80076c8:	00b03fdb 	.word	0x00b03fdb

080076cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b0b8      	sub	sp, #224	; 0xe0
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	609a      	str	r2, [r3, #8]
 80076e0:	60da      	str	r2, [r3, #12]
 80076e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80076e4:	f107 0310 	add.w	r3, r7, #16
 80076e8:	22bc      	movs	r2, #188	; 0xbc
 80076ea:	2100      	movs	r1, #0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f011 f885 	bl	80187fc <memset>
  if(i2cHandle->Instance==I2C2)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a5a      	ldr	r2, [pc, #360]	; (8007860 <HAL_I2C_MspInit+0x194>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	f040 80ad 	bne.w	8007858 <HAL_I2C_MspInit+0x18c>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80076fe:	2308      	movs	r3, #8
 8007700:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8007702:	2300      	movs	r3, #0
 8007704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007708:	f107 0310 	add.w	r3, r7, #16
 800770c:	4618      	mov	r0, r3
 800770e:	f007 fc13 	bl	800ef38 <HAL_RCCEx_PeriphCLKConfig>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8007718:	f000 f990 	bl	8007a3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800771c:	4b51      	ldr	r3, [pc, #324]	; (8007864 <HAL_I2C_MspInit+0x198>)
 800771e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007722:	4a50      	ldr	r2, [pc, #320]	; (8007864 <HAL_I2C_MspInit+0x198>)
 8007724:	f043 0302 	orr.w	r3, r3, #2
 8007728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800772c:	4b4d      	ldr	r3, [pc, #308]	; (8007864 <HAL_I2C_MspInit+0x198>)
 800772e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800773a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800773e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007742:	2312      	movs	r3, #18
 8007744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007748:	2300      	movs	r3, #0
 800774a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007754:	2304      	movs	r3, #4
 8007756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800775a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800775e:	4619      	mov	r1, r3
 8007760:	4841      	ldr	r0, [pc, #260]	; (8007868 <HAL_I2C_MspInit+0x19c>)
 8007762:	f004 f89f 	bl	800b8a4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007766:	4b3f      	ldr	r3, [pc, #252]	; (8007864 <HAL_I2C_MspInit+0x198>)
 8007768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800776c:	4a3d      	ldr	r2, [pc, #244]	; (8007864 <HAL_I2C_MspInit+0x198>)
 800776e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007772:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007776:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <HAL_I2C_MspInit+0x198>)
 8007778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800777c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream0;
 8007784:	4b39      	ldr	r3, [pc, #228]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 8007786:	4a3a      	ldr	r2, [pc, #232]	; (8007870 <HAL_I2C_MspInit+0x1a4>)
 8007788:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 800778a:	4b38      	ldr	r3, [pc, #224]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 800778c:	2223      	movs	r2, #35	; 0x23
 800778e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007790:	4b36      	ldr	r3, [pc, #216]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 8007792:	2200      	movs	r2, #0
 8007794:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007796:	4b35      	ldr	r3, [pc, #212]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 8007798:	2200      	movs	r2, #0
 800779a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800779c:	4b33      	ldr	r3, [pc, #204]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 800779e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077a2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077a4:	4b31      	ldr	r3, [pc, #196]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077aa:	4b30      	ldr	r3, [pc, #192]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80077b0:	4b2e      	ldr	r3, [pc, #184]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80077b6:	4b2d      	ldr	r3, [pc, #180]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80077bc:	4b2b      	ldr	r3, [pc, #172]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 80077be:	2200      	movs	r2, #0
 80077c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80077c2:	482a      	ldr	r0, [pc, #168]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 80077c4:	f001 fe3a 	bl	800943c <HAL_DMA_Init>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <HAL_I2C_MspInit+0x106>
    {
      Error_Handler();
 80077ce:	f000 f935 	bl	8007a3c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a25      	ldr	r2, [pc, #148]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 80077d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80077d8:	4a24      	ldr	r2, [pc, #144]	; (800786c <HAL_I2C_MspInit+0x1a0>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 80077de:	4b25      	ldr	r3, [pc, #148]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 80077e0:	4a25      	ldr	r2, [pc, #148]	; (8007878 <HAL_I2C_MspInit+0x1ac>)
 80077e2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 80077e4:	4b23      	ldr	r3, [pc, #140]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 80077e6:	2224      	movs	r2, #36	; 0x24
 80077e8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80077ea:	4b22      	ldr	r3, [pc, #136]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 80077ec:	2240      	movs	r2, #64	; 0x40
 80077ee:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077f0:	4b20      	ldr	r3, [pc, #128]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80077f6:	4b1f      	ldr	r3, [pc, #124]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 80077f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077fc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077fe:	4b1d      	ldr	r3, [pc, #116]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 8007800:	2200      	movs	r2, #0
 8007802:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 8007806:	2200      	movs	r2, #0
 8007808:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800780a:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 800780c:	2200      	movs	r2, #0
 800780e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007810:	4b18      	ldr	r3, [pc, #96]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 8007812:	2200      	movs	r2, #0
 8007814:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007816:	4b17      	ldr	r3, [pc, #92]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 8007818:	2200      	movs	r2, #0
 800781a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800781c:	4815      	ldr	r0, [pc, #84]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 800781e:	f001 fe0d 	bl	800943c <HAL_DMA_Init>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <HAL_I2C_MspInit+0x160>
    {
      Error_Handler();
 8007828:	f000 f908 	bl	8007a3c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a11      	ldr	r2, [pc, #68]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
 8007832:	4a10      	ldr	r2, [pc, #64]	; (8007874 <HAL_I2C_MspInit+0x1a8>)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8007838:	2200      	movs	r2, #0
 800783a:	2100      	movs	r1, #0
 800783c:	2021      	movs	r0, #33	; 0x21
 800783e:	f001 fc52 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007842:	2021      	movs	r0, #33	; 0x21
 8007844:	f001 fc69 	bl	800911a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8007848:	2200      	movs	r2, #0
 800784a:	2100      	movs	r1, #0
 800784c:	2022      	movs	r0, #34	; 0x22
 800784e:	f001 fc4a 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8007852:	2022      	movs	r0, #34	; 0x22
 8007854:	f001 fc61 	bl	800911a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007858:	bf00      	nop
 800785a:	37e0      	adds	r7, #224	; 0xe0
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40005800 	.word	0x40005800
 8007864:	58024400 	.word	0x58024400
 8007868:	58020400 	.word	0x58020400
 800786c:	24001534 	.word	0x24001534
 8007870:	40020010 	.word	0x40020010
 8007874:	240015ac 	.word	0x240015ac
 8007878:	40020028 	.word	0x40020028

0800787c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007882:	f001 f8f5 	bl	8008a70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007886:	f000 f841 	bl	800790c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800788a:	f7ff fe41 	bl	8007510 <MX_GPIO_Init>
	MX_DMA_Init();
 800788e:	f7ff fe07 	bl	80074a0 <MX_DMA_Init>
	MX_I2C2_Init();
 8007892:	f7ff fedb 	bl	800764c <MX_I2C2_Init>
	MX_SPI1_Init();
 8007896:	f000 f8d7 	bl	8007a48 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 800789a:	f010 f9d1 	bl	8017c40 <MX_USB_DEVICE_Init>
	MX_USART2_UART_Init();
 800789e:	f000 fe77 	bl	8008590 <MX_USART2_UART_Init>
	MX_UART4_Init();
 80078a2:	f000 fd83 	bl	80083ac <MX_UART4_Init>
	MX_UART7_Init();
 80078a6:	f000 fdcf 	bl	8008448 <MX_UART7_Init>
	MX_UART8_Init();
 80078aa:	f000 fe1b 	bl	80084e4 <MX_UART8_Init>
	MX_USART3_UART_Init();
 80078ae:	f000 febb 	bl	8008628 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80078b2:	f000 fc7b 	bl	80081ac <MX_TIM3_Init>
	MX_TIM2_Init();
 80078b6:	f000 fc2b 	bl	8008110 <MX_TIM2_Init>
	MX_TIM4_Init();
 80078ba:	f000 fcc5 	bl	8008248 <MX_TIM4_Init>
	MX_COMP2_Init();
 80078be:	f7ff fd21 	bl	8007304 <MX_COMP2_Init>
	MX_DAC1_Init();
 80078c2:	f7ff fd99 	bl	80073f8 <MX_DAC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 4095 * 1.8 / 3.3);
 80078c6:	f640 03b9 	movw	r3, #2233	; 0x8b9
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	480b      	ldr	r0, [pc, #44]	; (80078fc <main+0x80>)
 80078d0:	f001 fc5f 	bl	8009192 <HAL_DAC_SetValue>

	struct MotherboardConfig config;

	config.HeadUart = &huart3;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <main+0x84>)
 80078d6:	607b      	str	r3, [r7, #4]
	config.HeadTimeout = 10;
 80078d8:	230a      	movs	r3, #10
 80078da:	60bb      	str	r3, [r7, #8]

	config.BodyUart = &huart8;
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <main+0x88>)
 80078de:	60fb      	str	r3, [r7, #12]
	config.BodyTimeout = 10;
 80078e0:	230a      	movs	r3, #10
 80078e2:	613b      	str	r3, [r7, #16]

	config.IMUSpi = &hspi1;
 80078e4:	4b08      	ldr	r3, [pc, #32]	; (8007908 <main+0x8c>)
 80078e6:	617b      	str	r3, [r7, #20]

	MotherboardInit(config);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	1d3b      	adds	r3, r7, #4
 80078ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078f0:	f7f9 ffd0 	bl	8001894 <MotherboardInit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MotherboardTick();
 80078f4:	f7fa f81c 	bl	8001930 <MotherboardTick>
 80078f8:	e7fc      	b.n	80078f4 <main+0x78>
 80078fa:	bf00      	nop
 80078fc:	240014d4 	.word	0x240014d4
 8007900:	24001ac4 	.word	0x24001ac4
 8007904:	240019a4 	.word	0x240019a4
 8007908:	24001624 	.word	0x24001624

0800790c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b09c      	sub	sp, #112	; 0x70
 8007910:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007916:	224c      	movs	r2, #76	; 0x4c
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f010 ff6e 	bl	80187fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007920:	1d3b      	adds	r3, r7, #4
 8007922:	2220      	movs	r2, #32
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f010 ff68 	bl	80187fc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800792c:	2002      	movs	r0, #2
 800792e:	f006 faff 	bl	800df30 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007932:	2300      	movs	r3, #0
 8007934:	603b      	str	r3, [r7, #0]
 8007936:	4b35      	ldr	r3, [pc, #212]	; (8007a0c <SystemClock_Config+0x100>)
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	4a34      	ldr	r2, [pc, #208]	; (8007a0c <SystemClock_Config+0x100>)
 800793c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007940:	6193      	str	r3, [r2, #24]
 8007942:	4b32      	ldr	r3, [pc, #200]	; (8007a0c <SystemClock_Config+0x100>)
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4b30      	ldr	r3, [pc, #192]	; (8007a10 <SystemClock_Config+0x104>)
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	4a2f      	ldr	r2, [pc, #188]	; (8007a10 <SystemClock_Config+0x104>)
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007958:	4b2d      	ldr	r3, [pc, #180]	; (8007a10 <SystemClock_Config+0x104>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8007964:	bf00      	nop
 8007966:	4b29      	ldr	r3, [pc, #164]	; (8007a0c <SystemClock_Config+0x100>)
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800796e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007972:	d1f8      	bne.n	8007966 <SystemClock_Config+0x5a>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8007974:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <SystemClock_Config+0x108>)
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <SystemClock_Config+0x108>)
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8007980:	2322      	movs	r3, #34	; 0x22
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8007984:	2301      	movs	r3, #1
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800798c:	2301      	movs	r3, #1
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007990:	2302      	movs	r3, #2
 8007992:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007994:	2300      	movs	r3, #0
 8007996:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8007998:	2304      	movs	r3, #4
 800799a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 60;
 800799c:	233c      	movs	r3, #60	; 0x3c
 800799e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80079a0:	2302      	movs	r3, #2
 80079a2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80079a4:	2305      	movs	r3, #5
 80079a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80079a8:	2302      	movs	r3, #2
 80079aa:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80079ac:	230c      	movs	r3, #12
 80079ae:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80079b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079bc:	4618      	mov	r0, r3
 80079be:	f006 fb01 	bl	800dfc4 <HAL_RCC_OscConfig>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <SystemClock_Config+0xc0>
		Error_Handler();
 80079c8:	f000 f838 	bl	8007a3c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80079cc:	233f      	movs	r3, #63	; 0x3f
 80079ce:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80079d0:	2303      	movs	r3, #3
 80079d2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80079d8:	2308      	movs	r3, #8
 80079da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80079e0:	2340      	movs	r3, #64	; 0x40
 80079e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80079e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80079ea:	2340      	movs	r3, #64	; 0x40
 80079ec:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80079ee:	1d3b      	adds	r3, r7, #4
 80079f0:	2104      	movs	r1, #4
 80079f2:	4618      	mov	r0, r3
 80079f4:	f006 ff14 	bl	800e820 <HAL_RCC_ClockConfig>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <SystemClock_Config+0xf6>
		Error_Handler();
 80079fe:	f000 f81d 	bl	8007a3c <Error_Handler>
	}
}
 8007a02:	bf00      	nop
 8007a04:	3770      	adds	r7, #112	; 0x70
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	58024800 	.word	0x58024800
 8007a10:	58000400 	.word	0x58000400
 8007a14:	58024400 	.word	0x58024400

08007a18 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	if (hcomp->Instance == COMP2) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a04      	ldr	r2, [pc, #16]	; (8007a38 <HAL_COMP_TriggerCallback+0x20>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d101      	bne.n	8007a2e <HAL_COMP_TriggerCallback+0x16>
		MotherboardOnStrobe();
 8007a2a:	f7f9 ffef 	bl	8001a0c <MotherboardOnStrobe>
	}
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	58003810 	.word	0x58003810

08007a3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007a40:	b672      	cpsid	i
}
 8007a42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8007a44:	e7fe      	b.n	8007a44 <Error_Handler+0x8>
	...

08007a48 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007a4c:	4b28      	ldr	r3, [pc, #160]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a4e:	4a29      	ldr	r2, [pc, #164]	; (8007af4 <MX_SPI1_Init+0xac>)
 8007a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007a52:	4b27      	ldr	r3, [pc, #156]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007a5a:	4b25      	ldr	r3, [pc, #148]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007a60:	4b23      	ldr	r3, [pc, #140]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a62:	2207      	movs	r2, #7
 8007a64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007a66:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007a6e:	4b20      	ldr	r3, [pc, #128]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007a76:	4b1e      	ldr	r3, [pc, #120]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007a7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007a7e:	4b1c      	ldr	r3, [pc, #112]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007a86:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007a8c:	4b18      	ldr	r3, [pc, #96]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a92:	4b17      	ldr	r3, [pc, #92]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8007a98:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007a9e:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007aa4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007aa6:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007ab2:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007ab8:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007aca:	4b09      	ldr	r3, [pc, #36]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007ad6:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007adc:	4804      	ldr	r0, [pc, #16]	; (8007af0 <MX_SPI1_Init+0xa8>)
 8007ade:	f008 fd93 	bl	8010608 <HAL_SPI_Init>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8007ae8:	f7ff ffa8 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007aec:	bf00      	nop
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	24001624 	.word	0x24001624
 8007af4:	40013000 	.word	0x40013000

08007af8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b0b8      	sub	sp, #224	; 0xe0
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007b04:	2200      	movs	r2, #0
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	609a      	str	r2, [r3, #8]
 8007b0c:	60da      	str	r2, [r3, #12]
 8007b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b10:	f107 0310 	add.w	r3, r7, #16
 8007b14:	22bc      	movs	r2, #188	; 0xbc
 8007b16:	2100      	movs	r1, #0
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f010 fe6f 	bl	80187fc <memset>
  if(spiHandle->Instance==SPI1)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a60      	ldr	r2, [pc, #384]	; (8007ca4 <HAL_SPI_MspInit+0x1ac>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	f040 80b8 	bne.w	8007c9a <HAL_SPI_MspInit+0x1a2>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8007b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8007b30:	2320      	movs	r3, #32
 8007b32:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8007b34:	2381      	movs	r3, #129	; 0x81
 8007b36:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8007b38:	2302      	movs	r3, #2
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8007b40:	2302      	movs	r3, #2
 8007b42:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8007b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b48:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8007b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b56:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b58:	f107 0310 	add.w	r3, r7, #16
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f007 f9eb 	bl	800ef38 <HAL_RCCEx_PeriphCLKConfig>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8007b68:	f7ff ff68 	bl	8007a3c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b6c:	4b4e      	ldr	r3, [pc, #312]	; (8007ca8 <HAL_SPI_MspInit+0x1b0>)
 8007b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b72:	4a4d      	ldr	r2, [pc, #308]	; (8007ca8 <HAL_SPI_MspInit+0x1b0>)
 8007b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007b7c:	4b4a      	ldr	r3, [pc, #296]	; (8007ca8 <HAL_SPI_MspInit+0x1b0>)
 8007b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b8a:	4b47      	ldr	r3, [pc, #284]	; (8007ca8 <HAL_SPI_MspInit+0x1b0>)
 8007b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b90:	4a45      	ldr	r2, [pc, #276]	; (8007ca8 <HAL_SPI_MspInit+0x1b0>)
 8007b92:	f043 0301 	orr.w	r3, r3, #1
 8007b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b9a:	4b43      	ldr	r3, [pc, #268]	; (8007ca8 <HAL_SPI_MspInit+0x1b0>)
 8007b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007ba8:	23e0      	movs	r3, #224	; 0xe0
 8007baa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bae:	2302      	movs	r3, #2
 8007bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007bc0:	2305      	movs	r3, #5
 8007bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bc6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4837      	ldr	r0, [pc, #220]	; (8007cac <HAL_SPI_MspInit+0x1b4>)
 8007bce:	f003 fe69 	bl	800b8a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream4;
 8007bd2:	4b37      	ldr	r3, [pc, #220]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007bd4:	4a37      	ldr	r2, [pc, #220]	; (8007cb4 <HAL_SPI_MspInit+0x1bc>)
 8007bd6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8007bd8:	4b35      	ldr	r3, [pc, #212]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007bda:	2226      	movs	r2, #38	; 0x26
 8007bdc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bde:	4b34      	ldr	r3, [pc, #208]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007be0:	2240      	movs	r2, #64	; 0x40
 8007be2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007be4:	4b32      	ldr	r3, [pc, #200]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007bea:	4b31      	ldr	r3, [pc, #196]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bf0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bf2:	4b2f      	ldr	r3, [pc, #188]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bf8:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007bfe:	4b2c      	ldr	r3, [pc, #176]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007c04:	4b2a      	ldr	r3, [pc, #168]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007c0a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c0c:	4b28      	ldr	r3, [pc, #160]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007c12:	4827      	ldr	r0, [pc, #156]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007c14:	f001 fc12 	bl	800943c <HAL_DMA_Init>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8007c1e:	f7ff ff0d 	bl	8007a3c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a22      	ldr	r2, [pc, #136]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007c26:	679a      	str	r2, [r3, #120]	; 0x78
 8007c28:	4a21      	ldr	r2, [pc, #132]	; (8007cb0 <HAL_SPI_MspInit+0x1b8>)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream5;
 8007c2e:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c30:	4a22      	ldr	r2, [pc, #136]	; (8007cbc <HAL_SPI_MspInit+0x1c4>)
 8007c32:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8007c34:	4b20      	ldr	r3, [pc, #128]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c36:	2225      	movs	r2, #37	; 0x25
 8007c38:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c3a:	4b1f      	ldr	r3, [pc, #124]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c40:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c42:	2200      	movs	r2, #0
 8007c44:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c46:	4b1c      	ldr	r3, [pc, #112]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c4c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c4e:	4b1a      	ldr	r3, [pc, #104]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c54:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8007c5a:	4b17      	ldr	r3, [pc, #92]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007c60:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007c66:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c68:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8007c6e:	4812      	ldr	r0, [pc, #72]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c70:	f001 fbe4 	bl	800943c <HAL_DMA_Init>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_SPI_MspInit+0x186>
    {
      Error_Handler();
 8007c7a:	f7ff fedf 	bl	8007a3c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a0d      	ldr	r2, [pc, #52]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c82:	67da      	str	r2, [r3, #124]	; 0x7c
 8007c84:	4a0c      	ldr	r2, [pc, #48]	; (8007cb8 <HAL_SPI_MspInit+0x1c0>)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	2023      	movs	r0, #35	; 0x23
 8007c90:	f001 fa29 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007c94:	2023      	movs	r0, #35	; 0x23
 8007c96:	f001 fa40 	bl	800911a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007c9a:	bf00      	nop
 8007c9c:	37e0      	adds	r7, #224	; 0xe0
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40013000 	.word	0x40013000
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	58020000 	.word	0x58020000
 8007cb0:	240016ac 	.word	0x240016ac
 8007cb4:	40020070 	.word	0x40020070
 8007cb8:	24001724 	.word	0x24001724
 8007cbc:	40020088 	.word	0x40020088

08007cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cc6:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <HAL_MspInit+0x30>)
 8007cc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ccc:	4a08      	ldr	r2, [pc, #32]	; (8007cf0 <HAL_MspInit+0x30>)
 8007cce:	f043 0302 	orr.w	r3, r3, #2
 8007cd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007cd6:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <HAL_MspInit+0x30>)
 8007cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	607b      	str	r3, [r7, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	58024400 	.word	0x58024400

08007cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007cf8:	e7fe      	b.n	8007cf8 <NMI_Handler+0x4>

08007cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cfe:	e7fe      	b.n	8007cfe <HardFault_Handler+0x4>

08007d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d04:	e7fe      	b.n	8007d04 <MemManage_Handler+0x4>

08007d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d06:	b480      	push	{r7}
 8007d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d0a:	e7fe      	b.n	8007d0a <BusFault_Handler+0x4>

08007d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d10:	e7fe      	b.n	8007d10 <UsageFault_Handler+0x4>

08007d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d12:	b480      	push	{r7}
 8007d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d16:	bf00      	nop
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d24:	bf00      	nop
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d32:	bf00      	nop
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d40:	f000 ff08 	bl	8008b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d44:	bf00      	nop
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8007d4c:	4802      	ldr	r0, [pc, #8]	; (8007d58 <DMA1_Stream0_IRQHandler+0x10>)
 8007d4e:	f002 fc35 	bl	800a5bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007d52:	bf00      	nop
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	24001534 	.word	0x24001534

08007d5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8007d60:	4802      	ldr	r0, [pc, #8]	; (8007d6c <DMA1_Stream1_IRQHandler+0x10>)
 8007d62:	f002 fc2b 	bl	800a5bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007d66:	bf00      	nop
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	240015ac 	.word	0x240015ac

08007d70 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007d74:	4802      	ldr	r0, [pc, #8]	; (8007d80 <DMA1_Stream4_IRQHandler+0x10>)
 8007d76:	f002 fc21 	bl	800a5bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007d7a:	bf00      	nop
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	240016ac 	.word	0x240016ac

08007d84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007d88:	4802      	ldr	r0, [pc, #8]	; (8007d94 <DMA1_Stream5_IRQHandler+0x10>)
 8007d8a:	f002 fc17 	bl	800a5bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007d8e:	bf00      	nop
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	24001724 	.word	0x24001724

08007d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007d9c:	4802      	ldr	r0, [pc, #8]	; (8007da8 <TIM2_IRQHandler+0x10>)
 8007d9e:	f009 ff6b 	bl	8011c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007da2:	bf00      	nop
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	240017a0 	.word	0x240017a0

08007dac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007db0:	4802      	ldr	r0, [pc, #8]	; (8007dbc <TIM3_IRQHandler+0x10>)
 8007db2:	f009 ff61 	bl	8011c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007db6:	bf00      	nop
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	240017ec 	.word	0x240017ec

08007dc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007dc4:	4802      	ldr	r0, [pc, #8]	; (8007dd0 <TIM4_IRQHandler+0x10>)
 8007dc6:	f009 ff57 	bl	8011c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	24001838 	.word	0x24001838

08007dd4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8007dd8:	4802      	ldr	r0, [pc, #8]	; (8007de4 <I2C2_EV_IRQHandler+0x10>)
 8007dda:	f003 ffbd 	bl	800bd58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8007dde:	bf00      	nop
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	240014e8 	.word	0x240014e8

08007de8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8007dec:	4802      	ldr	r0, [pc, #8]	; (8007df8 <I2C2_ER_IRQHandler+0x10>)
 8007dee:	f003 ffcd 	bl	800bd8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8007df2:	bf00      	nop
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	240014e8 	.word	0x240014e8

08007dfc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8007e00:	4802      	ldr	r0, [pc, #8]	; (8007e0c <SPI1_IRQHandler+0x10>)
 8007e02:	f009 fbd7 	bl	80115b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8007e06:	bf00      	nop
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	24001624 	.word	0x24001624

08007e10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007e14:	4802      	ldr	r0, [pc, #8]	; (8007e20 <USART3_IRQHandler+0x10>)
 8007e16:	f00a fc99 	bl	801274c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007e1a:	bf00      	nop
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	24001ac4 	.word	0x24001ac4

08007e24 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8007e28:	4802      	ldr	r0, [pc, #8]	; (8007e34 <UART8_IRQHandler+0x10>)
 8007e2a:	f00a fc8f 	bl	801274c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8007e2e:	bf00      	nop
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	240019a4 	.word	0x240019a4

08007e38 <OTG_FS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 Out global interrupt.
  */
void OTG_FS_EP1_OUT_IRQHandler(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007e3c:	4802      	ldr	r0, [pc, #8]	; (8007e48 <OTG_FS_EP1_OUT_IRQHandler+0x10>)
 8007e3e:	f004 fffe 	bl	800ce3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_OUT_IRQn 1 */
}
 8007e42:	bf00      	nop
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	2400302c 	.word	0x2400302c

08007e4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8007e50:	4802      	ldr	r0, [pc, #8]	; (8007e5c <OTG_FS_IRQHandler+0x10>)
 8007e52:	f004 fff4 	bl	800ce3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007e56:	bf00      	nop
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	2400302c 	.word	0x2400302c

08007e60 <COMP1_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8007e64:	4802      	ldr	r0, [pc, #8]	; (8007e70 <COMP1_IRQHandler+0x10>)
 8007e66:	f000 ffef 	bl	8008e48 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8007e6a:	bf00      	nop
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	240014a8 	.word	0x240014a8

08007e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
	return 1;
 8007e78:	2301      	movs	r3, #1
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <_kill>:

int _kill(int pid, int sig)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007e8e:	f010 fc41 	bl	8018714 <__errno>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2216      	movs	r2, #22
 8007e96:	601a      	str	r2, [r3, #0]
	return -1;
 8007e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <_exit>:

void _exit (int status)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff ffe7 	bl	8007e84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007eb6:	e7fe      	b.n	8007eb6 <_exit+0x12>

08007eb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	e00a      	b.n	8007ee0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007eca:	f3af 8000 	nop.w
 8007ece:	4601      	mov	r1, r0
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	60ba      	str	r2, [r7, #8]
 8007ed6:	b2ca      	uxtb	r2, r1
 8007ed8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	3301      	adds	r3, #1
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	dbf0      	blt.n	8007eca <_read+0x12>
	}

return len;
 8007ee8:	687b      	ldr	r3, [r7, #4]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b086      	sub	sp, #24
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e009      	b.n	8007f18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	60ba      	str	r2, [r7, #8]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	3301      	adds	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	dbf1      	blt.n	8007f04 <_write+0x12>
	}
	return len;
 8007f20:	687b      	ldr	r3, [r7, #4]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <_close>:

int _close(int file)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
	return -1;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f52:	605a      	str	r2, [r3, #4]
	return 0;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <_isatty>:

int _isatty(int file)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
	return 1;
 8007f6a:	2301      	movs	r3, #1
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
	return 0;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f9c:	4a14      	ldr	r2, [pc, #80]	; (8007ff0 <_sbrk+0x5c>)
 8007f9e:	4b15      	ldr	r3, [pc, #84]	; (8007ff4 <_sbrk+0x60>)
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007fa8:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <_sbrk+0x64>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007fb0:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <_sbrk+0x64>)
 8007fb2:	4a12      	ldr	r2, [pc, #72]	; (8007ffc <_sbrk+0x68>)
 8007fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <_sbrk+0x64>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d207      	bcs.n	8007fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007fc4:	f010 fba6 	bl	8018714 <__errno>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	220c      	movs	r2, #12
 8007fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fd2:	e009      	b.n	8007fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007fd4:	4b08      	ldr	r3, [pc, #32]	; (8007ff8 <_sbrk+0x64>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007fda:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <_sbrk+0x64>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	4a05      	ldr	r2, [pc, #20]	; (8007ff8 <_sbrk+0x64>)
 8007fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	24080000 	.word	0x24080000
 8007ff4:	00000400 	.word	0x00000400
 8007ff8:	2400179c 	.word	0x2400179c
 8007ffc:	24003668 	.word	0x24003668

08008000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008000:	b480      	push	{r7}
 8008002:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008004:	4b37      	ldr	r3, [pc, #220]	; (80080e4 <SystemInit+0xe4>)
 8008006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800a:	4a36      	ldr	r2, [pc, #216]	; (80080e4 <SystemInit+0xe4>)
 800800c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008014:	4b34      	ldr	r3, [pc, #208]	; (80080e8 <SystemInit+0xe8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 030f 	and.w	r3, r3, #15
 800801c:	2b06      	cmp	r3, #6
 800801e:	d807      	bhi.n	8008030 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008020:	4b31      	ldr	r3, [pc, #196]	; (80080e8 <SystemInit+0xe8>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f023 030f 	bic.w	r3, r3, #15
 8008028:	4a2f      	ldr	r2, [pc, #188]	; (80080e8 <SystemInit+0xe8>)
 800802a:	f043 0307 	orr.w	r3, r3, #7
 800802e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008030:	4b2e      	ldr	r3, [pc, #184]	; (80080ec <SystemInit+0xec>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a2d      	ldr	r2, [pc, #180]	; (80080ec <SystemInit+0xec>)
 8008036:	f043 0301 	orr.w	r3, r3, #1
 800803a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800803c:	4b2b      	ldr	r3, [pc, #172]	; (80080ec <SystemInit+0xec>)
 800803e:	2200      	movs	r2, #0
 8008040:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008042:	4b2a      	ldr	r3, [pc, #168]	; (80080ec <SystemInit+0xec>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	4929      	ldr	r1, [pc, #164]	; (80080ec <SystemInit+0xec>)
 8008048:	4b29      	ldr	r3, [pc, #164]	; (80080f0 <SystemInit+0xf0>)
 800804a:	4013      	ands	r3, r2
 800804c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800804e:	4b26      	ldr	r3, [pc, #152]	; (80080e8 <SystemInit+0xe8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800805a:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <SystemInit+0xe8>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f023 030f 	bic.w	r3, r3, #15
 8008062:	4a21      	ldr	r2, [pc, #132]	; (80080e8 <SystemInit+0xe8>)
 8008064:	f043 0307 	orr.w	r3, r3, #7
 8008068:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800806a:	4b20      	ldr	r3, [pc, #128]	; (80080ec <SystemInit+0xec>)
 800806c:	2200      	movs	r2, #0
 800806e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008070:	4b1e      	ldr	r3, [pc, #120]	; (80080ec <SystemInit+0xec>)
 8008072:	2200      	movs	r2, #0
 8008074:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008076:	4b1d      	ldr	r3, [pc, #116]	; (80080ec <SystemInit+0xec>)
 8008078:	2200      	movs	r2, #0
 800807a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <SystemInit+0xec>)
 800807e:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <SystemInit+0xf4>)
 8008080:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008082:	4b1a      	ldr	r3, [pc, #104]	; (80080ec <SystemInit+0xec>)
 8008084:	4a1c      	ldr	r2, [pc, #112]	; (80080f8 <SystemInit+0xf8>)
 8008086:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008088:	4b18      	ldr	r3, [pc, #96]	; (80080ec <SystemInit+0xec>)
 800808a:	4a1c      	ldr	r2, [pc, #112]	; (80080fc <SystemInit+0xfc>)
 800808c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800808e:	4b17      	ldr	r3, [pc, #92]	; (80080ec <SystemInit+0xec>)
 8008090:	2200      	movs	r2, #0
 8008092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008094:	4b15      	ldr	r3, [pc, #84]	; (80080ec <SystemInit+0xec>)
 8008096:	4a19      	ldr	r2, [pc, #100]	; (80080fc <SystemInit+0xfc>)
 8008098:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800809a:	4b14      	ldr	r3, [pc, #80]	; (80080ec <SystemInit+0xec>)
 800809c:	2200      	movs	r2, #0
 800809e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80080a0:	4b12      	ldr	r3, [pc, #72]	; (80080ec <SystemInit+0xec>)
 80080a2:	4a16      	ldr	r2, [pc, #88]	; (80080fc <SystemInit+0xfc>)
 80080a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80080a6:	4b11      	ldr	r3, [pc, #68]	; (80080ec <SystemInit+0xec>)
 80080a8:	2200      	movs	r2, #0
 80080aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <SystemInit+0xec>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a0e      	ldr	r2, [pc, #56]	; (80080ec <SystemInit+0xec>)
 80080b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <SystemInit+0xec>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80080be:	4b10      	ldr	r3, [pc, #64]	; (8008100 <SystemInit+0x100>)
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b10      	ldr	r3, [pc, #64]	; (8008104 <SystemInit+0x104>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ca:	d202      	bcs.n	80080d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80080cc:	4b0e      	ldr	r3, [pc, #56]	; (8008108 <SystemInit+0x108>)
 80080ce:	2201      	movs	r2, #1
 80080d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80080d2:	4b0e      	ldr	r3, [pc, #56]	; (800810c <SystemInit+0x10c>)
 80080d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80080d8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80080da:	bf00      	nop
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	e000ed00 	.word	0xe000ed00
 80080e8:	52002000 	.word	0x52002000
 80080ec:	58024400 	.word	0x58024400
 80080f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80080f4:	02020200 	.word	0x02020200
 80080f8:	01ff0000 	.word	0x01ff0000
 80080fc:	01010280 	.word	0x01010280
 8008100:	5c001000 	.word	0x5c001000
 8008104:	ffff0000 	.word	0xffff0000
 8008108:	51008108 	.word	0x51008108
 800810c:	52004000 	.word	0x52004000

08008110 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008116:	f107 0310 	add.w	r3, r7, #16
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	605a      	str	r2, [r3, #4]
 8008120:	609a      	str	r2, [r3, #8]
 8008122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008124:	1d3b      	adds	r3, r7, #4
 8008126:	2200      	movs	r2, #0
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	605a      	str	r2, [r3, #4]
 800812c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800812e:	4b1e      	ldr	r3, [pc, #120]	; (80081a8 <MX_TIM2_Init+0x98>)
 8008130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008134:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000;
 8008136:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <MX_TIM2_Init+0x98>)
 8008138:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800813c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800813e:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <MX_TIM2_Init+0x98>)
 8008140:	2200      	movs	r2, #0
 8008142:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8008144:	4b18      	ldr	r3, [pc, #96]	; (80081a8 <MX_TIM2_Init+0x98>)
 8008146:	2264      	movs	r2, #100	; 0x64
 8008148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800814a:	4b17      	ldr	r3, [pc, #92]	; (80081a8 <MX_TIM2_Init+0x98>)
 800814c:	2200      	movs	r2, #0
 800814e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008150:	4b15      	ldr	r3, [pc, #84]	; (80081a8 <MX_TIM2_Init+0x98>)
 8008152:	2200      	movs	r2, #0
 8008154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008156:	4814      	ldr	r0, [pc, #80]	; (80081a8 <MX_TIM2_Init+0x98>)
 8008158:	f009 fd37 	bl	8011bca <HAL_TIM_Base_Init>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008162:	f7ff fc6b 	bl	8007a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800816a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800816c:	f107 0310 	add.w	r3, r7, #16
 8008170:	4619      	mov	r1, r3
 8008172:	480d      	ldr	r0, [pc, #52]	; (80081a8 <MX_TIM2_Init+0x98>)
 8008174:	f009 fea0 	bl	8011eb8 <HAL_TIM_ConfigClockSource>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800817e:	f7ff fc5d 	bl	8007a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008182:	2300      	movs	r3, #0
 8008184:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800818a:	1d3b      	adds	r3, r7, #4
 800818c:	4619      	mov	r1, r3
 800818e:	4806      	ldr	r0, [pc, #24]	; (80081a8 <MX_TIM2_Init+0x98>)
 8008190:	f00a f8f4 	bl	801237c <HAL_TIMEx_MasterConfigSynchronization>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800819a:	f7ff fc4f 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800819e:	bf00      	nop
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	240017a0 	.word	0x240017a0

080081ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081b2:	f107 0310 	add.w	r3, r7, #16
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	605a      	str	r2, [r3, #4]
 80081bc:	609a      	str	r2, [r3, #8]
 80081be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081c0:	1d3b      	adds	r3, r7, #4
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	605a      	str	r2, [r3, #4]
 80081c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80081ca:	4b1d      	ldr	r3, [pc, #116]	; (8008240 <MX_TIM3_Init+0x94>)
 80081cc:	4a1d      	ldr	r2, [pc, #116]	; (8008244 <MX_TIM3_Init+0x98>)
 80081ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000;
 80081d0:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <MX_TIM3_Init+0x94>)
 80081d2:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 80081d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081d8:	4b19      	ldr	r3, [pc, #100]	; (8008240 <MX_TIM3_Init+0x94>)
 80081da:	2200      	movs	r2, #0
 80081dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80081de:	4b18      	ldr	r3, [pc, #96]	; (8008240 <MX_TIM3_Init+0x94>)
 80081e0:	2264      	movs	r2, #100	; 0x64
 80081e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081e4:	4b16      	ldr	r3, [pc, #88]	; (8008240 <MX_TIM3_Init+0x94>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <MX_TIM3_Init+0x94>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80081f0:	4813      	ldr	r0, [pc, #76]	; (8008240 <MX_TIM3_Init+0x94>)
 80081f2:	f009 fcea 	bl	8011bca <HAL_TIM_Base_Init>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80081fc:	f7ff fc1e 	bl	8007a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008204:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008206:	f107 0310 	add.w	r3, r7, #16
 800820a:	4619      	mov	r1, r3
 800820c:	480c      	ldr	r0, [pc, #48]	; (8008240 <MX_TIM3_Init+0x94>)
 800820e:	f009 fe53 	bl	8011eb8 <HAL_TIM_ConfigClockSource>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008218:	f7ff fc10 	bl	8007a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800821c:	2300      	movs	r3, #0
 800821e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008224:	1d3b      	adds	r3, r7, #4
 8008226:	4619      	mov	r1, r3
 8008228:	4805      	ldr	r0, [pc, #20]	; (8008240 <MX_TIM3_Init+0x94>)
 800822a:	f00a f8a7 	bl	801237c <HAL_TIMEx_MasterConfigSynchronization>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008234:	f7ff fc02 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008238:	bf00      	nop
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	240017ec 	.word	0x240017ec
 8008244:	40000400 	.word	0x40000400

08008248 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800824e:	f107 0310 	add.w	r3, r7, #16
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	605a      	str	r2, [r3, #4]
 8008258:	609a      	str	r2, [r3, #8]
 800825a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	2200      	movs	r2, #0
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008266:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <MX_TIM4_Init+0x94>)
 8008268:	4a1d      	ldr	r2, [pc, #116]	; (80082e0 <MX_TIM4_Init+0x98>)
 800826a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000;
 800826c:	4b1b      	ldr	r3, [pc, #108]	; (80082dc <MX_TIM4_Init+0x94>)
 800826e:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8008272:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008274:	4b19      	ldr	r3, [pc, #100]	; (80082dc <MX_TIM4_Init+0x94>)
 8008276:	2200      	movs	r2, #0
 8008278:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800827a:	4b18      	ldr	r3, [pc, #96]	; (80082dc <MX_TIM4_Init+0x94>)
 800827c:	2264      	movs	r2, #100	; 0x64
 800827e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008280:	4b16      	ldr	r3, [pc, #88]	; (80082dc <MX_TIM4_Init+0x94>)
 8008282:	2200      	movs	r2, #0
 8008284:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008286:	4b15      	ldr	r3, [pc, #84]	; (80082dc <MX_TIM4_Init+0x94>)
 8008288:	2200      	movs	r2, #0
 800828a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800828c:	4813      	ldr	r0, [pc, #76]	; (80082dc <MX_TIM4_Init+0x94>)
 800828e:	f009 fc9c 	bl	8011bca <HAL_TIM_Base_Init>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8008298:	f7ff fbd0 	bl	8007a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800829c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80082a2:	f107 0310 	add.w	r3, r7, #16
 80082a6:	4619      	mov	r1, r3
 80082a8:	480c      	ldr	r0, [pc, #48]	; (80082dc <MX_TIM4_Init+0x94>)
 80082aa:	f009 fe05 	bl	8011eb8 <HAL_TIM_ConfigClockSource>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80082b4:	f7ff fbc2 	bl	8007a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082b8:	2300      	movs	r3, #0
 80082ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80082c0:	1d3b      	adds	r3, r7, #4
 80082c2:	4619      	mov	r1, r3
 80082c4:	4805      	ldr	r0, [pc, #20]	; (80082dc <MX_TIM4_Init+0x94>)
 80082c6:	f00a f859 	bl	801237c <HAL_TIMEx_MasterConfigSynchronization>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80082d0:	f7ff fbb4 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80082d4:	bf00      	nop
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	24001838 	.word	0x24001838
 80082e0:	40000800 	.word	0x40000800

080082e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f4:	d117      	bne.n	8008326 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80082f6:	4b2a      	ldr	r3, [pc, #168]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 80082f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082fc:	4a28      	ldr	r2, [pc, #160]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008306:	4b26      	ldr	r3, [pc, #152]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 8008308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008314:	2200      	movs	r2, #0
 8008316:	2100      	movs	r1, #0
 8008318:	201c      	movs	r0, #28
 800831a:	f000 fee4 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800831e:	201c      	movs	r0, #28
 8008320:	f000 fefb 	bl	800911a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8008324:	e038      	b.n	8008398 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a1e      	ldr	r2, [pc, #120]	; (80083a4 <HAL_TIM_Base_MspInit+0xc0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d117      	bne.n	8008360 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008330:	4b1b      	ldr	r3, [pc, #108]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 8008332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008336:	4a1a      	ldr	r2, [pc, #104]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 8008338:	f043 0302 	orr.w	r3, r3, #2
 800833c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008340:	4b17      	ldr	r3, [pc, #92]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 8008342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800834e:	2200      	movs	r2, #0
 8008350:	2100      	movs	r1, #0
 8008352:	201d      	movs	r0, #29
 8008354:	f000 fec7 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008358:	201d      	movs	r0, #29
 800835a:	f000 fede 	bl	800911a <HAL_NVIC_EnableIRQ>
}
 800835e:	e01b      	b.n	8008398 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM4)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a10      	ldr	r2, [pc, #64]	; (80083a8 <HAL_TIM_Base_MspInit+0xc4>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d116      	bne.n	8008398 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800836a:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 800836c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008370:	4a0b      	ldr	r2, [pc, #44]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 8008372:	f043 0304 	orr.w	r3, r3, #4
 8008376:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800837a:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <HAL_TIM_Base_MspInit+0xbc>)
 800837c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008388:	2200      	movs	r2, #0
 800838a:	2100      	movs	r1, #0
 800838c:	201e      	movs	r0, #30
 800838e:	f000 feaa 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008392:	201e      	movs	r0, #30
 8008394:	f000 fec1 	bl	800911a <HAL_NVIC_EnableIRQ>
}
 8008398:	bf00      	nop
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	58024400 	.word	0x58024400
 80083a4:	40000400 	.word	0x40000400
 80083a8:	40000800 	.word	0x40000800

080083ac <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80083b0:	4b22      	ldr	r3, [pc, #136]	; (800843c <MX_UART4_Init+0x90>)
 80083b2:	4a23      	ldr	r2, [pc, #140]	; (8008440 <MX_UART4_Init+0x94>)
 80083b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1250000;
 80083b6:	4b21      	ldr	r3, [pc, #132]	; (800843c <MX_UART4_Init+0x90>)
 80083b8:	4a22      	ldr	r2, [pc, #136]	; (8008444 <MX_UART4_Init+0x98>)
 80083ba:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80083bc:	4b1f      	ldr	r3, [pc, #124]	; (800843c <MX_UART4_Init+0x90>)
 80083be:	2200      	movs	r2, #0
 80083c0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80083c2:	4b1e      	ldr	r3, [pc, #120]	; (800843c <MX_UART4_Init+0x90>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80083c8:	4b1c      	ldr	r3, [pc, #112]	; (800843c <MX_UART4_Init+0x90>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80083ce:	4b1b      	ldr	r3, [pc, #108]	; (800843c <MX_UART4_Init+0x90>)
 80083d0:	220c      	movs	r2, #12
 80083d2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083d4:	4b19      	ldr	r3, [pc, #100]	; (800843c <MX_UART4_Init+0x90>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80083da:	4b18      	ldr	r3, [pc, #96]	; (800843c <MX_UART4_Init+0x90>)
 80083dc:	2200      	movs	r2, #0
 80083de:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083e0:	4b16      	ldr	r3, [pc, #88]	; (800843c <MX_UART4_Init+0x90>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80083e6:	4b15      	ldr	r3, [pc, #84]	; (800843c <MX_UART4_Init+0x90>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083ec:	4b13      	ldr	r3, [pc, #76]	; (800843c <MX_UART4_Init+0x90>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80083f2:	4812      	ldr	r0, [pc, #72]	; (800843c <MX_UART4_Init+0x90>)
 80083f4:	f00a f86e 	bl	80124d4 <HAL_UART_Init>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <MX_UART4_Init+0x56>
  {
    Error_Handler();
 80083fe:	f7ff fb1d 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008402:	2100      	movs	r1, #0
 8008404:	480d      	ldr	r0, [pc, #52]	; (800843c <MX_UART4_Init+0x90>)
 8008406:	f00c fb47 	bl	8014a98 <HAL_UARTEx_SetTxFifoThreshold>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8008410:	f7ff fb14 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008414:	2100      	movs	r1, #0
 8008416:	4809      	ldr	r0, [pc, #36]	; (800843c <MX_UART4_Init+0x90>)
 8008418:	f00c fb7c 	bl	8014b14 <HAL_UARTEx_SetRxFifoThreshold>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8008422:	f7ff fb0b 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8008426:	4805      	ldr	r0, [pc, #20]	; (800843c <MX_UART4_Init+0x90>)
 8008428:	f00c fafd 	bl	8014a26 <HAL_UARTEx_DisableFifoMode>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8008432:	f7ff fb03 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	24001884 	.word	0x24001884
 8008440:	40004c00 	.word	0x40004c00
 8008444:	001312d0 	.word	0x001312d0

08008448 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800844c:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <MX_UART7_Init+0x90>)
 800844e:	4a23      	ldr	r2, [pc, #140]	; (80084dc <MX_UART7_Init+0x94>)
 8008450:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 1250000;
 8008452:	4b21      	ldr	r3, [pc, #132]	; (80084d8 <MX_UART7_Init+0x90>)
 8008454:	4a22      	ldr	r2, [pc, #136]	; (80084e0 <MX_UART7_Init+0x98>)
 8008456:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8008458:	4b1f      	ldr	r3, [pc, #124]	; (80084d8 <MX_UART7_Init+0x90>)
 800845a:	2200      	movs	r2, #0
 800845c:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800845e:	4b1e      	ldr	r3, [pc, #120]	; (80084d8 <MX_UART7_Init+0x90>)
 8008460:	2200      	movs	r2, #0
 8008462:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8008464:	4b1c      	ldr	r3, [pc, #112]	; (80084d8 <MX_UART7_Init+0x90>)
 8008466:	2200      	movs	r2, #0
 8008468:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <MX_UART7_Init+0x90>)
 800846c:	220c      	movs	r2, #12
 800846e:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008470:	4b19      	ldr	r3, [pc, #100]	; (80084d8 <MX_UART7_Init+0x90>)
 8008472:	2200      	movs	r2, #0
 8008474:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8008476:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <MX_UART7_Init+0x90>)
 8008478:	2200      	movs	r2, #0
 800847a:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800847c:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <MX_UART7_Init+0x90>)
 800847e:	2200      	movs	r2, #0
 8008480:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <MX_UART7_Init+0x90>)
 8008484:	2200      	movs	r2, #0
 8008486:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008488:	4b13      	ldr	r3, [pc, #76]	; (80084d8 <MX_UART7_Init+0x90>)
 800848a:	2200      	movs	r2, #0
 800848c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800848e:	4812      	ldr	r0, [pc, #72]	; (80084d8 <MX_UART7_Init+0x90>)
 8008490:	f00a f820 	bl	80124d4 <HAL_UART_Init>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <MX_UART7_Init+0x56>
  {
    Error_Handler();
 800849a:	f7ff facf 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800849e:	2100      	movs	r1, #0
 80084a0:	480d      	ldr	r0, [pc, #52]	; (80084d8 <MX_UART7_Init+0x90>)
 80084a2:	f00c faf9 	bl	8014a98 <HAL_UARTEx_SetTxFifoThreshold>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <MX_UART7_Init+0x68>
  {
    Error_Handler();
 80084ac:	f7ff fac6 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80084b0:	2100      	movs	r1, #0
 80084b2:	4809      	ldr	r0, [pc, #36]	; (80084d8 <MX_UART7_Init+0x90>)
 80084b4:	f00c fb2e 	bl	8014b14 <HAL_UARTEx_SetRxFifoThreshold>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <MX_UART7_Init+0x7a>
  {
    Error_Handler();
 80084be:	f7ff fabd 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80084c2:	4805      	ldr	r0, [pc, #20]	; (80084d8 <MX_UART7_Init+0x90>)
 80084c4:	f00c faaf 	bl	8014a26 <HAL_UARTEx_DisableFifoMode>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <MX_UART7_Init+0x8a>
  {
    Error_Handler();
 80084ce:	f7ff fab5 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80084d2:	bf00      	nop
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	24001914 	.word	0x24001914
 80084dc:	40007800 	.word	0x40007800
 80084e0:	001312d0 	.word	0x001312d0

080084e4 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80084e8:	4b26      	ldr	r3, [pc, #152]	; (8008584 <MX_UART8_Init+0xa0>)
 80084ea:	4a27      	ldr	r2, [pc, #156]	; (8008588 <MX_UART8_Init+0xa4>)
 80084ec:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 1250000;
 80084ee:	4b25      	ldr	r3, [pc, #148]	; (8008584 <MX_UART8_Init+0xa0>)
 80084f0:	4a26      	ldr	r2, [pc, #152]	; (800858c <MX_UART8_Init+0xa8>)
 80084f2:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 80084f4:	4b23      	ldr	r3, [pc, #140]	; (8008584 <MX_UART8_Init+0xa0>)
 80084f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084fa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80084fc:	4b21      	ldr	r3, [pc, #132]	; (8008584 <MX_UART8_Init+0xa0>)
 80084fe:	2200      	movs	r2, #0
 8008500:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 8008502:	4b20      	ldr	r3, [pc, #128]	; (8008584 <MX_UART8_Init+0xa0>)
 8008504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008508:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800850a:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <MX_UART8_Init+0xa0>)
 800850c:	220c      	movs	r2, #12
 800850e:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008510:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <MX_UART8_Init+0xa0>)
 8008512:	2200      	movs	r2, #0
 8008514:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8008516:	4b1b      	ldr	r3, [pc, #108]	; (8008584 <MX_UART8_Init+0xa0>)
 8008518:	2200      	movs	r2, #0
 800851a:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800851c:	4b19      	ldr	r3, [pc, #100]	; (8008584 <MX_UART8_Init+0xa0>)
 800851e:	2200      	movs	r2, #0
 8008520:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008522:	4b18      	ldr	r3, [pc, #96]	; (8008584 <MX_UART8_Init+0xa0>)
 8008524:	2200      	movs	r2, #0
 8008526:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8008528:	4b16      	ldr	r3, [pc, #88]	; (8008584 <MX_UART8_Init+0xa0>)
 800852a:	2220      	movs	r2, #32
 800852c:	629a      	str	r2, [r3, #40]	; 0x28
  huart8.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800852e:	4b15      	ldr	r3, [pc, #84]	; (8008584 <MX_UART8_Init+0xa0>)
 8008530:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008534:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8008536:	4813      	ldr	r0, [pc, #76]	; (8008584 <MX_UART8_Init+0xa0>)
 8008538:	f009 ffcc 	bl	80124d4 <HAL_UART_Init>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <MX_UART8_Init+0x62>
  {
    Error_Handler();
 8008542:	f7ff fa7b 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8008546:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800854a:	480e      	ldr	r0, [pc, #56]	; (8008584 <MX_UART8_Init+0xa0>)
 800854c:	f00c faa4 	bl	8014a98 <HAL_UARTEx_SetTxFifoThreshold>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <MX_UART8_Init+0x76>
  {
    Error_Handler();
 8008556:	f7ff fa71 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800855a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800855e:	4809      	ldr	r0, [pc, #36]	; (8008584 <MX_UART8_Init+0xa0>)
 8008560:	f00c fad8 	bl	8014b14 <HAL_UARTEx_SetRxFifoThreshold>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <MX_UART8_Init+0x8a>
  {
    Error_Handler();
 800856a:	f7ff fa67 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart8) != HAL_OK)
 800856e:	4805      	ldr	r0, [pc, #20]	; (8008584 <MX_UART8_Init+0xa0>)
 8008570:	f00c fa1e 	bl	80149b0 <HAL_UARTEx_EnableFifoMode>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <MX_UART8_Init+0x9a>
  {
    Error_Handler();
 800857a:	f7ff fa5f 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800857e:	bf00      	nop
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	240019a4 	.word	0x240019a4
 8008588:	40007c00 	.word	0x40007c00
 800858c:	001312d0 	.word	0x001312d0

08008590 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008594:	4b22      	ldr	r3, [pc, #136]	; (8008620 <MX_USART2_UART_Init+0x90>)
 8008596:	4a23      	ldr	r2, [pc, #140]	; (8008624 <MX_USART2_UART_Init+0x94>)
 8008598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800859a:	4b21      	ldr	r3, [pc, #132]	; (8008620 <MX_USART2_UART_Init+0x90>)
 800859c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80085a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80085a2:	4b1f      	ldr	r3, [pc, #124]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80085a8:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80085ae:	4b1c      	ldr	r3, [pc, #112]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80085b4:	4b1a      	ldr	r3, [pc, #104]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085b6:	220c      	movs	r2, #12
 80085b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085ba:	4b19      	ldr	r3, [pc, #100]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085bc:	2200      	movs	r2, #0
 80085be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80085c0:	4b17      	ldr	r3, [pc, #92]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80085cc:	4b14      	ldr	r3, [pc, #80]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085ce:	2200      	movs	r2, #0
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80085d2:	4b13      	ldr	r3, [pc, #76]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80085d8:	4811      	ldr	r0, [pc, #68]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085da:	f009 ff7b 	bl	80124d4 <HAL_UART_Init>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80085e4:	f7ff fa2a 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80085e8:	2100      	movs	r1, #0
 80085ea:	480d      	ldr	r0, [pc, #52]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085ec:	f00c fa54 	bl	8014a98 <HAL_UARTEx_SetTxFifoThreshold>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80085f6:	f7ff fa21 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80085fa:	2100      	movs	r1, #0
 80085fc:	4808      	ldr	r0, [pc, #32]	; (8008620 <MX_USART2_UART_Init+0x90>)
 80085fe:	f00c fa89 	bl	8014b14 <HAL_UARTEx_SetRxFifoThreshold>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008608:	f7ff fa18 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800860c:	4804      	ldr	r0, [pc, #16]	; (8008620 <MX_USART2_UART_Init+0x90>)
 800860e:	f00c fa0a 	bl	8014a26 <HAL_UARTEx_DisableFifoMode>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008618:	f7ff fa10 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800861c:	bf00      	nop
 800861e:	bd80      	pop	{r7, pc}
 8008620:	24001a34 	.word	0x24001a34
 8008624:	40004400 	.word	0x40004400

08008628 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800862c:	4b26      	ldr	r3, [pc, #152]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 800862e:	4a27      	ldr	r2, [pc, #156]	; (80086cc <MX_USART3_UART_Init+0xa4>)
 8008630:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1250000;
 8008632:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 8008634:	4a26      	ldr	r2, [pc, #152]	; (80086d0 <MX_USART3_UART_Init+0xa8>)
 8008636:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8008638:	4b23      	ldr	r3, [pc, #140]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 800863a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800863e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 8008640:	4b21      	ldr	r3, [pc, #132]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 8008642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008646:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8008648:	4b1f      	ldr	r3, [pc, #124]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 800864a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800864e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008650:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 8008652:	220c      	movs	r2, #12
 8008654:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008656:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 8008658:	2200      	movs	r2, #0
 800865a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 800865e:	2200      	movs	r2, #0
 8008660:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008662:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 8008664:	2200      	movs	r2, #0
 8008666:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008668:	4b17      	ldr	r3, [pc, #92]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 800866a:	2200      	movs	r2, #0
 800866c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800866e:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 8008670:	2220      	movs	r2, #32
 8008672:	629a      	str	r2, [r3, #40]	; 0x28
  huart3.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8008674:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 8008676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800867a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800867c:	4812      	ldr	r0, [pc, #72]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 800867e:	f009 ff29 	bl	80124d4 <HAL_UART_Init>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
 8008688:	f7ff f9d8 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800868c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8008690:	480d      	ldr	r0, [pc, #52]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 8008692:	f00c fa01 	bl	8014a98 <HAL_UARTEx_SetTxFifoThreshold>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <MX_USART3_UART_Init+0x78>
  {
    Error_Handler();
 800869c:	f7ff f9ce 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80086a0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80086a4:	4808      	ldr	r0, [pc, #32]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 80086a6:	f00c fa35 	bl	8014b14 <HAL_UARTEx_SetRxFifoThreshold>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80086b0:	f7ff f9c4 	bl	8007a3c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 80086b4:	4804      	ldr	r0, [pc, #16]	; (80086c8 <MX_USART3_UART_Init+0xa0>)
 80086b6:	f00c f97b 	bl	80149b0 <HAL_UARTEx_EnableFifoMode>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <MX_USART3_UART_Init+0x9c>
  {
    Error_Handler();
 80086c0:	f7ff f9bc 	bl	8007a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80086c4:	bf00      	nop
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	24001ac4 	.word	0x24001ac4
 80086cc:	40004800 	.word	0x40004800
 80086d0:	001312d0 	.word	0x001312d0

080086d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b0c0      	sub	sp, #256	; 0x100
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	605a      	str	r2, [r3, #4]
 80086e6:	609a      	str	r2, [r3, #8]
 80086e8:	60da      	str	r2, [r3, #12]
 80086ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80086ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086f0:	22bc      	movs	r2, #188	; 0xbc
 80086f2:	2100      	movs	r1, #0
 80086f4:	4618      	mov	r0, r3
 80086f6:	f010 f881 	bl	80187fc <memset>
  if(uartHandle->Instance==UART4)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4abe      	ldr	r2, [pc, #760]	; (80089f8 <HAL_UART_MspInit+0x324>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d142      	bne.n	800878a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8008704:	2302      	movs	r3, #2
 8008706:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008708:	2300      	movs	r3, #0
 800870a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800870e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008712:	4618      	mov	r0, r3
 8008714:	f006 fc10 	bl	800ef38 <HAL_RCCEx_PeriphCLKConfig>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800871e:	f7ff f98d 	bl	8007a3c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008722:	4bb6      	ldr	r3, [pc, #728]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008728:	4ab4      	ldr	r2, [pc, #720]	; (80089fc <HAL_UART_MspInit+0x328>)
 800872a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800872e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008732:	4bb2      	ldr	r3, [pc, #712]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800873c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008740:	4bae      	ldr	r3, [pc, #696]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008746:	4aad      	ldr	r2, [pc, #692]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008748:	f043 0301 	orr.w	r3, r3, #1
 800874c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008750:	4baa      	ldr	r3, [pc, #680]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	62bb      	str	r3, [r7, #40]	; 0x28
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800875e:	2303      	movs	r3, #3
 8008760:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008764:	2302      	movs	r3, #2
 8008766:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876a:	2300      	movs	r3, #0
 800876c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008770:	2300      	movs	r3, #0
 8008772:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008776:	2308      	movs	r3, #8
 8008778:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800877c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008780:	4619      	mov	r1, r3
 8008782:	489f      	ldr	r0, [pc, #636]	; (8008a00 <HAL_UART_MspInit+0x32c>)
 8008784:	f003 f88e 	bl	800b8a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008788:	e130      	b.n	80089ec <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART7)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a9d      	ldr	r2, [pc, #628]	; (8008a04 <HAL_UART_MspInit+0x330>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d143      	bne.n	800881c <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8008794:	2302      	movs	r3, #2
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008798:	2300      	movs	r3, #0
 800879a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800879e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087a2:	4618      	mov	r0, r3
 80087a4:	f006 fbc8 	bl	800ef38 <HAL_RCCEx_PeriphCLKConfig>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <HAL_UART_MspInit+0xde>
      Error_Handler();
 80087ae:	f7ff f945 	bl	8007a3c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80087b2:	4b92      	ldr	r3, [pc, #584]	; (80089fc <HAL_UART_MspInit+0x328>)
 80087b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087b8:	4a90      	ldr	r2, [pc, #576]	; (80089fc <HAL_UART_MspInit+0x328>)
 80087ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80087c2:	4b8e      	ldr	r3, [pc, #568]	; (80089fc <HAL_UART_MspInit+0x328>)
 80087c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80087d0:	4b8a      	ldr	r3, [pc, #552]	; (80089fc <HAL_UART_MspInit+0x328>)
 80087d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087d6:	4a89      	ldr	r2, [pc, #548]	; (80089fc <HAL_UART_MspInit+0x328>)
 80087d8:	f043 0310 	orr.w	r3, r3, #16
 80087dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087e0:	4b86      	ldr	r3, [pc, #536]	; (80089fc <HAL_UART_MspInit+0x328>)
 80087e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087e6:	f003 0310 	and.w	r3, r3, #16
 80087ea:	623b      	str	r3, [r7, #32]
 80087ec:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80087ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80087f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f6:	2302      	movs	r3, #2
 80087f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008802:	2300      	movs	r3, #0
 8008804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8008808:	2307      	movs	r3, #7
 800880a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800880e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008812:	4619      	mov	r1, r3
 8008814:	487c      	ldr	r0, [pc, #496]	; (8008a08 <HAL_UART_MspInit+0x334>)
 8008816:	f003 f845 	bl	800b8a4 <HAL_GPIO_Init>
}
 800881a:	e0e7      	b.n	80089ec <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==UART8)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a7a      	ldr	r2, [pc, #488]	; (8008a0c <HAL_UART_MspInit+0x338>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d14a      	bne.n	80088bc <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8008826:	2302      	movs	r3, #2
 8008828:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800882a:	2300      	movs	r3, #0
 800882c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008834:	4618      	mov	r0, r3
 8008836:	f006 fb7f 	bl	800ef38 <HAL_RCCEx_PeriphCLKConfig>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d001      	beq.n	8008844 <HAL_UART_MspInit+0x170>
      Error_Handler();
 8008840:	f7ff f8fc 	bl	8007a3c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8008844:	4b6d      	ldr	r3, [pc, #436]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008846:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800884a:	4a6c      	ldr	r2, [pc, #432]	; (80089fc <HAL_UART_MspInit+0x328>)
 800884c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008850:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008854:	4b69      	ldr	r3, [pc, #420]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800885a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008862:	4b66      	ldr	r3, [pc, #408]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008868:	4a64      	ldr	r2, [pc, #400]	; (80089fc <HAL_UART_MspInit+0x328>)
 800886a:	f043 0310 	orr.w	r3, r3, #16
 800886e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008872:	4b62      	ldr	r3, [pc, #392]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008880:	2303      	movs	r3, #3
 8008882:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008886:	2302      	movs	r3, #2
 8008888:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800888c:	2300      	movs	r3, #0
 800888e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008892:	2300      	movs	r3, #0
 8008894:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8008898:	2308      	movs	r3, #8
 800889a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800889e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80088a2:	4619      	mov	r1, r3
 80088a4:	4858      	ldr	r0, [pc, #352]	; (8008a08 <HAL_UART_MspInit+0x334>)
 80088a6:	f002 fffd 	bl	800b8a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	2053      	movs	r0, #83	; 0x53
 80088b0:	f000 fc19 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80088b4:	2053      	movs	r0, #83	; 0x53
 80088b6:	f000 fc30 	bl	800911a <HAL_NVIC_EnableIRQ>
}
 80088ba:	e097      	b.n	80089ec <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART2)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a53      	ldr	r2, [pc, #332]	; (8008a10 <HAL_UART_MspInit+0x33c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d142      	bne.n	800894c <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80088c6:	2302      	movs	r3, #2
 80088c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088d4:	4618      	mov	r0, r3
 80088d6:	f006 fb2f 	bl	800ef38 <HAL_RCCEx_PeriphCLKConfig>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <HAL_UART_MspInit+0x210>
      Error_Handler();
 80088e0:	f7ff f8ac 	bl	8007a3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80088e4:	4b45      	ldr	r3, [pc, #276]	; (80089fc <HAL_UART_MspInit+0x328>)
 80088e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088ea:	4a44      	ldr	r2, [pc, #272]	; (80089fc <HAL_UART_MspInit+0x328>)
 80088ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80088f4:	4b41      	ldr	r3, [pc, #260]	; (80089fc <HAL_UART_MspInit+0x328>)
 80088f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008902:	4b3e      	ldr	r3, [pc, #248]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008908:	4a3c      	ldr	r2, [pc, #240]	; (80089fc <HAL_UART_MspInit+0x328>)
 800890a:	f043 0301 	orr.w	r3, r3, #1
 800890e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008912:	4b3a      	ldr	r3, [pc, #232]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	613b      	str	r3, [r7, #16]
 800891e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008920:	230c      	movs	r3, #12
 8008922:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008926:	2302      	movs	r3, #2
 8008928:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892c:	2300      	movs	r3, #0
 800892e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008932:	2300      	movs	r3, #0
 8008934:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008938:	2307      	movs	r3, #7
 800893a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800893e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008942:	4619      	mov	r1, r3
 8008944:	482e      	ldr	r0, [pc, #184]	; (8008a00 <HAL_UART_MspInit+0x32c>)
 8008946:	f002 ffad 	bl	800b8a4 <HAL_GPIO_Init>
}
 800894a:	e04f      	b.n	80089ec <HAL_UART_MspInit+0x318>
  else if(uartHandle->Instance==USART3)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a30      	ldr	r2, [pc, #192]	; (8008a14 <HAL_UART_MspInit+0x340>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d14a      	bne.n	80089ec <HAL_UART_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8008956:	2302      	movs	r3, #2
 8008958:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800895a:	2300      	movs	r3, #0
 800895c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008960:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008964:	4618      	mov	r0, r3
 8008966:	f006 fae7 	bl	800ef38 <HAL_RCCEx_PeriphCLKConfig>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8008970:	f7ff f864 	bl	8007a3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008974:	4b21      	ldr	r3, [pc, #132]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800897a:	4a20      	ldr	r2, [pc, #128]	; (80089fc <HAL_UART_MspInit+0x328>)
 800897c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008980:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008984:	4b1d      	ldr	r3, [pc, #116]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800898a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008992:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <HAL_UART_MspInit+0x328>)
 8008994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008998:	4a18      	ldr	r2, [pc, #96]	; (80089fc <HAL_UART_MspInit+0x328>)
 800899a:	f043 0308 	orr.w	r3, r3, #8
 800899e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80089a2:	4b16      	ldr	r3, [pc, #88]	; (80089fc <HAL_UART_MspInit+0x328>)
 80089a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	60bb      	str	r3, [r7, #8]
 80089ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80089b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80089b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b8:	2302      	movs	r3, #2
 80089ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089c4:	2300      	movs	r3, #0
 80089c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80089ca:	2307      	movs	r3, #7
 80089cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80089d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80089d4:	4619      	mov	r1, r3
 80089d6:	4810      	ldr	r0, [pc, #64]	; (8008a18 <HAL_UART_MspInit+0x344>)
 80089d8:	f002 ff64 	bl	800b8a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80089dc:	2200      	movs	r2, #0
 80089de:	2100      	movs	r1, #0
 80089e0:	2027      	movs	r0, #39	; 0x27
 80089e2:	f000 fb80 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80089e6:	2027      	movs	r0, #39	; 0x27
 80089e8:	f000 fb97 	bl	800911a <HAL_NVIC_EnableIRQ>
}
 80089ec:	bf00      	nop
 80089ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	40004c00 	.word	0x40004c00
 80089fc:	58024400 	.word	0x58024400
 8008a00:	58020000 	.word	0x58020000
 8008a04:	40007800 	.word	0x40007800
 8008a08:	58021000 	.word	0x58021000
 8008a0c:	40007c00 	.word	0x40007c00
 8008a10:	40004400 	.word	0x40004400
 8008a14:	40004800 	.word	0x40004800
 8008a18:	58020c00 	.word	0x58020c00

08008a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008a20:	f7ff faee 	bl	8008000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a24:	480c      	ldr	r0, [pc, #48]	; (8008a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008a26:	490d      	ldr	r1, [pc, #52]	; (8008a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008a28:	4a0d      	ldr	r2, [pc, #52]	; (8008a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a2c:	e002      	b.n	8008a34 <LoopCopyDataInit>

08008a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a32:	3304      	adds	r3, #4

08008a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a38:	d3f9      	bcc.n	8008a2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a3a:	4a0a      	ldr	r2, [pc, #40]	; (8008a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008a3c:	4c0a      	ldr	r4, [pc, #40]	; (8008a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a40:	e001      	b.n	8008a46 <LoopFillZerobss>

08008a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a44:	3204      	adds	r2, #4

08008a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a48:	d3fb      	bcc.n	8008a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008a4a:	f00f fe7b 	bl	8018744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a4e:	f7fe ff15 	bl	800787c <main>
  bx  lr
 8008a52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008a54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8008a58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008a5c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8008a60:	0803426c 	.word	0x0803426c
  ldr r2, =_sbss
 8008a64:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8008a68:	24003668 	.word	0x24003668

08008a6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a6c:	e7fe      	b.n	8008a6c <ADC3_IRQHandler>
	...

08008a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a76:	2003      	movs	r0, #3
 8008a78:	f000 fb2a 	bl	80090d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008a7c:	f006 f886 	bl	800eb8c <HAL_RCC_GetSysClockFreq>
 8008a80:	4602      	mov	r2, r0
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <HAL_Init+0x68>)
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	4913      	ldr	r1, [pc, #76]	; (8008adc <HAL_Init+0x6c>)
 8008a8e:	5ccb      	ldrb	r3, [r1, r3]
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
 8008a98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <HAL_Init+0x68>)
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	f003 030f 	and.w	r3, r3, #15
 8008aa2:	4a0e      	ldr	r2, [pc, #56]	; (8008adc <HAL_Init+0x6c>)
 8008aa4:	5cd3      	ldrb	r3, [r2, r3]
 8008aa6:	f003 031f 	and.w	r3, r3, #31
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab0:	4a0b      	ldr	r2, [pc, #44]	; (8008ae0 <HAL_Init+0x70>)
 8008ab2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ab4:	4a0b      	ldr	r2, [pc, #44]	; (8008ae4 <HAL_Init+0x74>)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008aba:	200f      	movs	r0, #15
 8008abc:	f000 f814 	bl	8008ae8 <HAL_InitTick>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e002      	b.n	8008ad0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008aca:	f7ff f8f9 	bl	8007cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	58024400 	.word	0x58024400
 8008adc:	08034140 	.word	0x08034140
 8008ae0:	24000004 	.word	0x24000004
 8008ae4:	24000000 	.word	0x24000000

08008ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008af0:	4b15      	ldr	r3, [pc, #84]	; (8008b48 <HAL_InitTick+0x60>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e021      	b.n	8008b40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008afc:	4b13      	ldr	r3, [pc, #76]	; (8008b4c <HAL_InitTick+0x64>)
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <HAL_InitTick+0x60>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	4619      	mov	r1, r3
 8008b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fb0f 	bl	8009136 <HAL_SYSTICK_Config>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e00e      	b.n	8008b40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b0f      	cmp	r3, #15
 8008b26:	d80a      	bhi.n	8008b3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b30:	f000 fad9 	bl	80090e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008b34:	4a06      	ldr	r2, [pc, #24]	; (8008b50 <HAL_InitTick+0x68>)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e000      	b.n	8008b40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	2400000c 	.word	0x2400000c
 8008b4c:	24000000 	.word	0x24000000
 8008b50:	24000008 	.word	0x24000008

08008b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008b58:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <HAL_IncTick+0x20>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <HAL_IncTick+0x24>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4413      	add	r3, r2
 8008b64:	4a04      	ldr	r2, [pc, #16]	; (8008b78 <HAL_IncTick+0x24>)
 8008b66:	6013      	str	r3, [r2, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	2400000c 	.word	0x2400000c
 8008b78:	24001b54 	.word	0x24001b54

08008b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8008b80:	4b03      	ldr	r3, [pc, #12]	; (8008b90 <HAL_GetTick+0x14>)
 8008b82:	681b      	ldr	r3, [r3, #0]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	24001b54 	.word	0x24001b54

08008b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b9c:	f7ff ffee 	bl	8008b7c <HAL_GetTick>
 8008ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bac:	d005      	beq.n	8008bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008bae:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <HAL_Delay+0x44>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008bba:	bf00      	nop
 8008bbc:	f7ff ffde 	bl	8008b7c <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d8f7      	bhi.n	8008bbc <HAL_Delay+0x28>
  {
  }
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	2400000c 	.word	0x2400000c

08008bdc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8008be0:	4b03      	ldr	r3, [pc, #12]	; (8008bf0 <HAL_GetREVID+0x14>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	0c1b      	lsrs	r3, r3, #16
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	5c001000 	.word	0x5c001000

08008bf4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d102      	bne.n	8008c10 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	77fb      	strb	r3, [r7, #31]
 8008c0e:	e10e      	b.n	8008e2e <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c1e:	d102      	bne.n	8008c26 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	77fb      	strb	r3, [r7, #31]
 8008c24:	e103      	b.n	8008e2e <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d109      	bne.n	8008c46 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7fe fb8b 	bl	800735c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8008c5a:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8008c60:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8008c66:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8008c6c:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8008c72:	4313      	orrs	r3, r2
 8008c74:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4b6e      	ldr	r3, [pc, #440]	; (8008e38 <HAL_COMP_Init+0x244>)
 8008c7e:	4013      	ands	r3, r2
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	6812      	ldr	r2, [r2, #0]
 8008c84:	6979      	ldr	r1, [r7, #20]
 8008c86:	430b      	orrs	r3, r1
 8008c88:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b10      	cmp	r3, #16
 8008c90:	d108      	bne.n	8008ca4 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f042 0210 	orr.w	r2, r2, #16
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	e007      	b.n	8008cb4 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0210 	bic.w	r2, r2, #16
 8008cb2:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d016      	beq.n	8008cf0 <HAL_COMP_Init+0xfc>
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d013      	beq.n	8008cf0 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008cc8:	4b5c      	ldr	r3, [pc, #368]	; (8008e3c <HAL_COMP_Init+0x248>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	099b      	lsrs	r3, r3, #6
 8008cce:	4a5c      	ldr	r2, [pc, #368]	; (8008e40 <HAL_COMP_Init+0x24c>)
 8008cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd4:	099b      	lsrs	r3, r3, #6
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	4613      	mov	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8008ce2:	e002      	b.n	8008cea <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1f9      	bne.n	8008ce4 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a53      	ldr	r2, [pc, #332]	; (8008e44 <HAL_COMP_Init+0x250>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d102      	bne.n	8008d00 <HAL_COMP_Init+0x10c>
 8008cfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cfe:	e001      	b.n	8008d04 <HAL_COMP_Init+0x110>
 8008d00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008d04:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d06d      	beq.n	8008dee <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d008      	beq.n	8008d30 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8008d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	600b      	str	r3, [r1, #0]
 8008d2e:	e008      	b.n	8008d42 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8008d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	43db      	mvns	r3, r3
 8008d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d3e:	4013      	ands	r3, r2
 8008d40:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d008      	beq.n	8008d60 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8008d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	604b      	str	r3, [r1, #4]
 8008d5e:	e008      	b.n	8008d72 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8008d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d6e:	4013      	ands	r3, r2
 8008d70:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8008d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	f003 0302 	and.w	r3, r3, #2
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00a      	beq.n	8008d9e <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8008d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d8c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008d90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8008d9c:	e00a      	b.n	8008db4 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8008d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008da2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	43db      	mvns	r3, r3
 8008daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dae:	4013      	ands	r3, r2
 8008db0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8008dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8008dd4:	e021      	b.n	8008e1a <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8008dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	43db      	mvns	r3, r3
 8008de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008de6:	4013      	ands	r3, r2
 8008de8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8008dec:	e015      	b.n	8008e1a <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8008dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dfe:	4013      	ands	r3, r2
 8008e00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8008e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e08:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	43db      	mvns	r3, r3
 8008e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e14:	4013      	ands	r3, r2
 8008e16:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d103      	bne.n	8008e2e <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 8008e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	f0e8cce1 	.word	0xf0e8cce1
 8008e3c:	24000000 	.word	0x24000000
 8008e40:	053e2d63 	.word	0x053e2d63
 8008e44:	5800380c 	.word	0x5800380c

08008e48 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ Handler. 
  * @param  hcomp COMP handle
  * @retval HAL status
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a33      	ldr	r2, [pc, #204]	; (8008f24 <HAL_COMP_IRQHandler+0xdc>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d102      	bne.n	8008e60 <HAL_COMP_IRQHandler+0x18>
 8008e5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e5e:	e001      	b.n	8008e64 <HAL_COMP_IRQHandler+0x1c>
 8008e60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e64:	60fb      	str	r3, [r7, #12]

 
 } 
#else
    /* Check COMP EXTI flag */
    if(READ_BIT(EXTI->PR1, exti_line) != 0UL)
 8008e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d014      	beq.n	8008ea0 <HAL_COMP_IRQHandler+0x58>
    {    
       /* Check whether comparator is in independent or window mode */
        if(READ_BIT(COMP12_COMMON->CFGR, COMP_CFGRx_WINMODE) != 0UL)
 8008e76:	4b2c      	ldr	r3, [pc, #176]	; (8008f28 <HAL_COMP_IRQHandler+0xe0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d006      	beq.n	8008e90 <HAL_COMP_IRQHandler+0x48>
          /* Note: Pair of comparators in window mode can both trig IRQ when      */
          /*       input voltage is changing from "out of window" area            */
          /*       (low or high ) to the other "out of window" area (high or low).*/
          /*       Both flags must be cleared to call comparator trigger          */
          /*       callback is called once.                                       */
          WRITE_REG(EXTI->PR1, (COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8008e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e86:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8008e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008e8e:	e004      	b.n	8008e9a <HAL_COMP_IRQHandler+0x52>
        }
        else
        {
          /* Clear COMP EXTI line pending bit */
          WRITE_REG(EXTI->PR1, exti_line);
 8008e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7fe fdbc 	bl	8007a18 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
#endif /*DUAL_CORE*/

   /* Get COMP interrupt source */
  if (__HAL_COMP_GET_IT_SOURCE(hcomp, COMP_IT_EN) != RESET)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eaa:	2b40      	cmp	r3, #64	; 0x40
 8008eac:	d136      	bne.n	8008f1c <HAL_COMP_IRQHandler+0xd4>
  {

    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C1I)) != 0UL)
 8008eae:	4b1f      	ldr	r3, [pc, #124]	; (8008f2c <HAL_COMP_IRQHandler+0xe4>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eba:	d101      	bne.n	8008ec0 <HAL_COMP_IRQHandler+0x78>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e000      	b.n	8008ec2 <HAL_COMP_IRQHandler+0x7a>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <HAL_COMP_IRQHandler+0x96>
    {
      /* Clear the COMP channel 1 interrupt flag */
         __HAL_COMP_CLEAR_C1IFLAG();
 8008ec6:	4b19      	ldr	r3, [pc, #100]	; (8008f2c <HAL_COMP_IRQHandler+0xe4>)
 8008ec8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008ecc:	605a      	str	r2, [r3, #4]
   
      /* Disable COMP interrupt */
       __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008edc:	601a      	str	r2, [r3, #0]
   
    }
    if((__HAL_COMP_GET_FLAG( COMP_FLAG_C2I)) != 0UL)
 8008ede:	4b13      	ldr	r3, [pc, #76]	; (8008f2c <HAL_COMP_IRQHandler+0xe4>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eea:	d101      	bne.n	8008ef0 <HAL_COMP_IRQHandler+0xa8>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e000      	b.n	8008ef2 <HAL_COMP_IRQHandler+0xaa>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00b      	beq.n	8008f0e <HAL_COMP_IRQHandler+0xc6>
    {
     /* Clear the COMP channel 2 interrupt flag */
       __HAL_COMP_CLEAR_C2IFLAG();
 8008ef6:	4b0d      	ldr	r3, [pc, #52]	; (8008f2c <HAL_COMP_IRQHandler+0xe4>)
 8008ef8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008efc:	605a      	str	r2, [r3, #4]
   
     /* Disable COMP interrupt */
     __HAL_COMP_DISABLE_IT(hcomp,COMP_IT_EN);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f0c:	601a      	str	r2, [r3, #0]
       
    }

    /* Change COMP state */
    hcomp->State = HAL_COMP_STATE_READY;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7fe fd7e 	bl	8007a18 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }    
 

}
 8008f1c:	bf00      	nop
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	5800380c 	.word	0x5800380c
 8008f28:	58003810 	.word	0x58003810
 8008f2c:	58003800 	.word	0x58003800

08008f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f40:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <__NVIC_SetPriorityGrouping+0x40>)
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008f58:	4b06      	ldr	r3, [pc, #24]	; (8008f74 <__NVIC_SetPriorityGrouping+0x44>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f5e:	4a04      	ldr	r2, [pc, #16]	; (8008f70 <__NVIC_SetPriorityGrouping+0x40>)
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	60d3      	str	r3, [r2, #12]
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	e000ed00 	.word	0xe000ed00
 8008f74:	05fa0000 	.word	0x05fa0000

08008f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f7c:	4b04      	ldr	r3, [pc, #16]	; (8008f90 <__NVIC_GetPriorityGrouping+0x18>)
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	f003 0307 	and.w	r3, r3, #7
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	e000ed00 	.word	0xe000ed00

08008f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	db0b      	blt.n	8008fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fa6:	88fb      	ldrh	r3, [r7, #6]
 8008fa8:	f003 021f 	and.w	r2, r3, #31
 8008fac:	4907      	ldr	r1, [pc, #28]	; (8008fcc <__NVIC_EnableIRQ+0x38>)
 8008fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8008fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	e000e100 	.word	0xe000e100

08008fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	6039      	str	r1, [r7, #0]
 8008fda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	db0a      	blt.n	8008ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	490c      	ldr	r1, [pc, #48]	; (800901c <__NVIC_SetPriority+0x4c>)
 8008fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fee:	0112      	lsls	r2, r2, #4
 8008ff0:	b2d2      	uxtb	r2, r2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ff8:	e00a      	b.n	8009010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	4908      	ldr	r1, [pc, #32]	; (8009020 <__NVIC_SetPriority+0x50>)
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	3b04      	subs	r3, #4
 8009008:	0112      	lsls	r2, r2, #4
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	440b      	add	r3, r1
 800900e:	761a      	strb	r2, [r3, #24]
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	e000e100 	.word	0xe000e100
 8009020:	e000ed00 	.word	0xe000ed00

08009024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009024:	b480      	push	{r7}
 8009026:	b089      	sub	sp, #36	; 0x24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	f1c3 0307 	rsb	r3, r3, #7
 800903e:	2b04      	cmp	r3, #4
 8009040:	bf28      	it	cs
 8009042:	2304      	movcs	r3, #4
 8009044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	3304      	adds	r3, #4
 800904a:	2b06      	cmp	r3, #6
 800904c:	d902      	bls.n	8009054 <NVIC_EncodePriority+0x30>
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	3b03      	subs	r3, #3
 8009052:	e000      	b.n	8009056 <NVIC_EncodePriority+0x32>
 8009054:	2300      	movs	r3, #0
 8009056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	43da      	mvns	r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	401a      	ands	r2, r3
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800906c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	fa01 f303 	lsl.w	r3, r1, r3
 8009076:	43d9      	mvns	r1, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800907c:	4313      	orrs	r3, r2
         );
}
 800907e:	4618      	mov	r0, r3
 8009080:	3724      	adds	r7, #36	; 0x24
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
	...

0800908c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3b01      	subs	r3, #1
 8009098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800909c:	d301      	bcc.n	80090a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800909e:	2301      	movs	r3, #1
 80090a0:	e00f      	b.n	80090c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090a2:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <SysTick_Config+0x40>)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090aa:	210f      	movs	r1, #15
 80090ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090b0:	f7ff ff8e 	bl	8008fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090b4:	4b05      	ldr	r3, [pc, #20]	; (80090cc <SysTick_Config+0x40>)
 80090b6:	2200      	movs	r2, #0
 80090b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090ba:	4b04      	ldr	r3, [pc, #16]	; (80090cc <SysTick_Config+0x40>)
 80090bc:	2207      	movs	r2, #7
 80090be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	e000e010 	.word	0xe000e010

080090d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff ff29 	bl	8008f30 <__NVIC_SetPriorityGrouping>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	4603      	mov	r3, r0
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80090f4:	f7ff ff40 	bl	8008f78 <__NVIC_GetPriorityGrouping>
 80090f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	68b9      	ldr	r1, [r7, #8]
 80090fe:	6978      	ldr	r0, [r7, #20]
 8009100:	f7ff ff90 	bl	8009024 <NVIC_EncodePriority>
 8009104:	4602      	mov	r2, r0
 8009106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800910a:	4611      	mov	r1, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff ff5f 	bl	8008fd0 <__NVIC_SetPriority>
}
 8009112:	bf00      	nop
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	4603      	mov	r3, r0
 8009122:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff ff33 	bl	8008f94 <__NVIC_EnableIRQ>
}
 800912e:	bf00      	nop
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff ffa4 	bl	800908c <SysTick_Config>
 8009144:	4603      	mov	r3, r0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b082      	sub	sp, #8
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e014      	b.n	800918a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	791b      	ldrb	r3, [r3, #4]
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d105      	bne.n	8009176 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7fe f973 	bl	800745c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2202      	movs	r2, #2
 800917a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009192:	b480      	push	{r7}
 8009194:	b087      	sub	sp, #28
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
 800919e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80091a0:	2300      	movs	r3, #0
 80091a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d105      	bne.n	80091bc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4413      	add	r3, r2
 80091b6:	3308      	adds	r3, #8
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	e004      	b.n	80091c6 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4413      	add	r3, r2
 80091c2:	3314      	adds	r3, #20
 80091c4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	461a      	mov	r2, r3
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	371c      	adds	r7, #28
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	795b      	ldrb	r3, [r3, #5]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_DAC_ConfigChannel+0x18>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e11d      	b.n	8009430 <HAL_DAC_ConfigChannel+0x254>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2201      	movs	r2, #1
 80091f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2202      	movs	r2, #2
 80091fe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b04      	cmp	r3, #4
 8009206:	d174      	bne.n	80092f2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8009208:	f7ff fcb8 	bl	8008b7c <HAL_GetTick>
 800920c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d134      	bne.n	800927e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009214:	e011      	b.n	800923a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009216:	f7ff fcb1 	bl	8008b7c <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	2b01      	cmp	r3, #1
 8009222:	d90a      	bls.n	800923a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f043 0208 	orr.w	r2, r3, #8
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2203      	movs	r2, #3
 8009234:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e0fa      	b.n	8009430 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009240:	4b7d      	ldr	r3, [pc, #500]	; (8009438 <HAL_DAC_ConfigChannel+0x25c>)
 8009242:	4013      	ands	r3, r2
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e6      	bne.n	8009216 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8009248:	2001      	movs	r0, #1
 800924a:	f7ff fca3 	bl	8008b94 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	6992      	ldr	r2, [r2, #24]
 8009256:	641a      	str	r2, [r3, #64]	; 0x40
 8009258:	e01e      	b.n	8009298 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800925a:	f7ff fc8f 	bl	8008b7c <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b01      	cmp	r3, #1
 8009266:	d90a      	bls.n	800927e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	f043 0208 	orr.w	r2, r3, #8
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2203      	movs	r2, #3
 8009278:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e0d8      	b.n	8009430 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009284:	2b00      	cmp	r3, #0
 8009286:	dbe8      	blt.n	800925a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8009288:	2001      	movs	r0, #1
 800928a:	f7ff fc83 	bl	8008b94 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	6992      	ldr	r2, [r2, #24]
 8009296:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80092a8:	fa01 f303 	lsl.w	r3, r1, r3
 80092ac:	43db      	mvns	r3, r3
 80092ae:	ea02 0103 	and.w	r1, r2, r3
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	69da      	ldr	r2, [r3, #28]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f003 0310 	and.w	r3, r3, #16
 80092bc:	409a      	lsls	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f003 0310 	and.w	r3, r3, #16
 80092d2:	21ff      	movs	r1, #255	; 0xff
 80092d4:	fa01 f303 	lsl.w	r3, r1, r3
 80092d8:	43db      	mvns	r3, r3
 80092da:	ea02 0103 	and.w	r1, r2, r3
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6a1a      	ldr	r2, [r3, #32]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f003 0310 	and.w	r3, r3, #16
 80092e8:	409a      	lsls	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d11d      	bne.n	8009336 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f003 0310 	and.w	r3, r3, #16
 8009308:	221f      	movs	r2, #31
 800930a:	fa02 f303 	lsl.w	r3, r2, r3
 800930e:	43db      	mvns	r3, r3
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	4013      	ands	r3, r2
 8009314:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f003 0310 	and.w	r3, r3, #16
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	fa02 f303 	lsl.w	r3, r2, r3
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2207      	movs	r2, #7
 8009346:	fa02 f303 	lsl.w	r3, r2, r3
 800934a:	43db      	mvns	r3, r3
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4013      	ands	r3, r2
 8009350:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d102      	bne.n	8009360 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	e00f      	b.n	8009380 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d102      	bne.n	800936e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009368:	2301      	movs	r3, #1
 800936a:	61fb      	str	r3, [r7, #28]
 800936c:	e008      	b.n	8009380 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d102      	bne.n	800937c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009376:	2301      	movs	r3, #1
 8009378:	61fb      	str	r3, [r7, #28]
 800937a:	e001      	b.n	8009380 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800937c:	2300      	movs	r3, #0
 800937e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	4313      	orrs	r3, r2
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	4313      	orrs	r3, r2
 800938e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f003 0310 	and.w	r3, r3, #16
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	fa02 f303 	lsl.w	r3, r2, r3
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	4313      	orrs	r3, r2
 80093a0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6819      	ldr	r1, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f003 0310 	and.w	r3, r3, #16
 80093b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80093ba:	fa02 f303 	lsl.w	r3, r2, r3
 80093be:	43da      	mvns	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	400a      	ands	r2, r1
 80093c6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f003 0310 	and.w	r3, r3, #16
 80093d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80093da:	fa02 f303 	lsl.w	r3, r2, r3
 80093de:	43db      	mvns	r3, r3
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4013      	ands	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	fa02 f303 	lsl.w	r3, r2, r3
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6819      	ldr	r1, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f003 0310 	and.w	r3, r3, #16
 8009412:	22c0      	movs	r2, #192	; 0xc0
 8009414:	fa02 f303 	lsl.w	r3, r2, r3
 8009418:	43da      	mvns	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	400a      	ands	r2, r1
 8009420:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2201      	movs	r2, #1
 8009426:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3720      	adds	r7, #32
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20008000 	.word	0x20008000

0800943c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009444:	f7ff fb9a 	bl	8008b7c <HAL_GetTick>
 8009448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e316      	b.n	8009a82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a66      	ldr	r2, [pc, #408]	; (80095f4 <HAL_DMA_Init+0x1b8>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d04a      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a65      	ldr	r2, [pc, #404]	; (80095f8 <HAL_DMA_Init+0x1bc>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d045      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a63      	ldr	r2, [pc, #396]	; (80095fc <HAL_DMA_Init+0x1c0>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d040      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a62      	ldr	r2, [pc, #392]	; (8009600 <HAL_DMA_Init+0x1c4>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d03b      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a60      	ldr	r2, [pc, #384]	; (8009604 <HAL_DMA_Init+0x1c8>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d036      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a5f      	ldr	r2, [pc, #380]	; (8009608 <HAL_DMA_Init+0x1cc>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d031      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a5d      	ldr	r2, [pc, #372]	; (800960c <HAL_DMA_Init+0x1d0>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d02c      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a5c      	ldr	r2, [pc, #368]	; (8009610 <HAL_DMA_Init+0x1d4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d027      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a5a      	ldr	r2, [pc, #360]	; (8009614 <HAL_DMA_Init+0x1d8>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d022      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a59      	ldr	r2, [pc, #356]	; (8009618 <HAL_DMA_Init+0x1dc>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d01d      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a57      	ldr	r2, [pc, #348]	; (800961c <HAL_DMA_Init+0x1e0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d018      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a56      	ldr	r2, [pc, #344]	; (8009620 <HAL_DMA_Init+0x1e4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d013      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a54      	ldr	r2, [pc, #336]	; (8009624 <HAL_DMA_Init+0x1e8>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00e      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a53      	ldr	r2, [pc, #332]	; (8009628 <HAL_DMA_Init+0x1ec>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d009      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a51      	ldr	r2, [pc, #324]	; (800962c <HAL_DMA_Init+0x1f0>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d004      	beq.n	80094f4 <HAL_DMA_Init+0xb8>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a50      	ldr	r2, [pc, #320]	; (8009630 <HAL_DMA_Init+0x1f4>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d101      	bne.n	80094f8 <HAL_DMA_Init+0xbc>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <HAL_DMA_Init+0xbe>
 80094f8:	2300      	movs	r3, #0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 813b 	beq.w	8009776 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2202      	movs	r2, #2
 8009504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a37      	ldr	r2, [pc, #220]	; (80095f4 <HAL_DMA_Init+0x1b8>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d04a      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a36      	ldr	r2, [pc, #216]	; (80095f8 <HAL_DMA_Init+0x1bc>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d045      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a34      	ldr	r2, [pc, #208]	; (80095fc <HAL_DMA_Init+0x1c0>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d040      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a33      	ldr	r2, [pc, #204]	; (8009600 <HAL_DMA_Init+0x1c4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d03b      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a31      	ldr	r2, [pc, #196]	; (8009604 <HAL_DMA_Init+0x1c8>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d036      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a30      	ldr	r2, [pc, #192]	; (8009608 <HAL_DMA_Init+0x1cc>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d031      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a2e      	ldr	r2, [pc, #184]	; (800960c <HAL_DMA_Init+0x1d0>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d02c      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a2d      	ldr	r2, [pc, #180]	; (8009610 <HAL_DMA_Init+0x1d4>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d027      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a2b      	ldr	r2, [pc, #172]	; (8009614 <HAL_DMA_Init+0x1d8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d022      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a2a      	ldr	r2, [pc, #168]	; (8009618 <HAL_DMA_Init+0x1dc>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d01d      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a28      	ldr	r2, [pc, #160]	; (800961c <HAL_DMA_Init+0x1e0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d018      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a27      	ldr	r2, [pc, #156]	; (8009620 <HAL_DMA_Init+0x1e4>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d013      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a25      	ldr	r2, [pc, #148]	; (8009624 <HAL_DMA_Init+0x1e8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00e      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a24      	ldr	r2, [pc, #144]	; (8009628 <HAL_DMA_Init+0x1ec>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d009      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a22      	ldr	r2, [pc, #136]	; (800962c <HAL_DMA_Init+0x1f0>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d004      	beq.n	80095b0 <HAL_DMA_Init+0x174>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a21      	ldr	r2, [pc, #132]	; (8009630 <HAL_DMA_Init+0x1f4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d108      	bne.n	80095c2 <HAL_DMA_Init+0x186>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0201 	bic.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	e007      	b.n	80095d2 <HAL_DMA_Init+0x196>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f022 0201 	bic.w	r2, r2, #1
 80095d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80095d2:	e02f      	b.n	8009634 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80095d4:	f7ff fad2 	bl	8008b7c <HAL_GetTick>
 80095d8:	4602      	mov	r2, r0
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	2b05      	cmp	r3, #5
 80095e0:	d928      	bls.n	8009634 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2220      	movs	r2, #32
 80095e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2203      	movs	r2, #3
 80095ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e246      	b.n	8009a82 <HAL_DMA_Init+0x646>
 80095f4:	40020010 	.word	0x40020010
 80095f8:	40020028 	.word	0x40020028
 80095fc:	40020040 	.word	0x40020040
 8009600:	40020058 	.word	0x40020058
 8009604:	40020070 	.word	0x40020070
 8009608:	40020088 	.word	0x40020088
 800960c:	400200a0 	.word	0x400200a0
 8009610:	400200b8 	.word	0x400200b8
 8009614:	40020410 	.word	0x40020410
 8009618:	40020428 	.word	0x40020428
 800961c:	40020440 	.word	0x40020440
 8009620:	40020458 	.word	0x40020458
 8009624:	40020470 	.word	0x40020470
 8009628:	40020488 	.word	0x40020488
 800962c:	400204a0 	.word	0x400204a0
 8009630:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1c8      	bne.n	80095d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	4b83      	ldr	r3, [pc, #524]	; (800985c <HAL_DMA_Init+0x420>)
 800964e:	4013      	ands	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800965a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009666:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009672:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	4313      	orrs	r3, r2
 800967e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009684:	2b04      	cmp	r3, #4
 8009686:	d107      	bne.n	8009698 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009690:	4313      	orrs	r3, r2
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	4313      	orrs	r3, r2
 8009696:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009698:	4b71      	ldr	r3, [pc, #452]	; (8009860 <HAL_DMA_Init+0x424>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	4b71      	ldr	r3, [pc, #452]	; (8009864 <HAL_DMA_Init+0x428>)
 800969e:	4013      	ands	r3, r2
 80096a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096a4:	d328      	bcc.n	80096f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2b28      	cmp	r3, #40	; 0x28
 80096ac:	d903      	bls.n	80096b6 <HAL_DMA_Init+0x27a>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2b2e      	cmp	r3, #46	; 0x2e
 80096b4:	d917      	bls.n	80096e6 <HAL_DMA_Init+0x2aa>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2b3e      	cmp	r3, #62	; 0x3e
 80096bc:	d903      	bls.n	80096c6 <HAL_DMA_Init+0x28a>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2b42      	cmp	r3, #66	; 0x42
 80096c4:	d90f      	bls.n	80096e6 <HAL_DMA_Init+0x2aa>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2b46      	cmp	r3, #70	; 0x46
 80096cc:	d903      	bls.n	80096d6 <HAL_DMA_Init+0x29a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b48      	cmp	r3, #72	; 0x48
 80096d4:	d907      	bls.n	80096e6 <HAL_DMA_Init+0x2aa>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2b4e      	cmp	r3, #78	; 0x4e
 80096dc:	d905      	bls.n	80096ea <HAL_DMA_Init+0x2ae>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	2b52      	cmp	r3, #82	; 0x52
 80096e4:	d801      	bhi.n	80096ea <HAL_DMA_Init+0x2ae>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e000      	b.n	80096ec <HAL_DMA_Init+0x2b0>
 80096ea:	2300      	movs	r3, #0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d003      	beq.n	80096f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f023 0307 	bic.w	r3, r3, #7
 800970e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b04      	cmp	r3, #4
 8009720:	d117      	bne.n	8009752 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	4313      	orrs	r3, r2
 800972a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00e      	beq.n	8009752 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 ff2b 	bl	800b590 <DMA_CheckFifoParam>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d008      	beq.n	8009752 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2240      	movs	r2, #64	; 0x40
 8009744:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e197      	b.n	8009a82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 fe66 	bl	800b42c <DMA_CalcBaseAndBitshift>
 8009760:	4603      	mov	r3, r0
 8009762:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009768:	f003 031f 	and.w	r3, r3, #31
 800976c:	223f      	movs	r2, #63	; 0x3f
 800976e:	409a      	lsls	r2, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	609a      	str	r2, [r3, #8]
 8009774:	e0cd      	b.n	8009912 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a3b      	ldr	r2, [pc, #236]	; (8009868 <HAL_DMA_Init+0x42c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d022      	beq.n	80097c6 <HAL_DMA_Init+0x38a>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a39      	ldr	r2, [pc, #228]	; (800986c <HAL_DMA_Init+0x430>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d01d      	beq.n	80097c6 <HAL_DMA_Init+0x38a>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a38      	ldr	r2, [pc, #224]	; (8009870 <HAL_DMA_Init+0x434>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d018      	beq.n	80097c6 <HAL_DMA_Init+0x38a>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a36      	ldr	r2, [pc, #216]	; (8009874 <HAL_DMA_Init+0x438>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d013      	beq.n	80097c6 <HAL_DMA_Init+0x38a>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a35      	ldr	r2, [pc, #212]	; (8009878 <HAL_DMA_Init+0x43c>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00e      	beq.n	80097c6 <HAL_DMA_Init+0x38a>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a33      	ldr	r2, [pc, #204]	; (800987c <HAL_DMA_Init+0x440>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d009      	beq.n	80097c6 <HAL_DMA_Init+0x38a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a32      	ldr	r2, [pc, #200]	; (8009880 <HAL_DMA_Init+0x444>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d004      	beq.n	80097c6 <HAL_DMA_Init+0x38a>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a30      	ldr	r2, [pc, #192]	; (8009884 <HAL_DMA_Init+0x448>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d101      	bne.n	80097ca <HAL_DMA_Init+0x38e>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e000      	b.n	80097cc <HAL_DMA_Init+0x390>
 80097ca:	2300      	movs	r3, #0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8097 	beq.w	8009900 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a24      	ldr	r2, [pc, #144]	; (8009868 <HAL_DMA_Init+0x42c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d021      	beq.n	8009820 <HAL_DMA_Init+0x3e4>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a22      	ldr	r2, [pc, #136]	; (800986c <HAL_DMA_Init+0x430>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d01c      	beq.n	8009820 <HAL_DMA_Init+0x3e4>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a21      	ldr	r2, [pc, #132]	; (8009870 <HAL_DMA_Init+0x434>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d017      	beq.n	8009820 <HAL_DMA_Init+0x3e4>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a1f      	ldr	r2, [pc, #124]	; (8009874 <HAL_DMA_Init+0x438>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d012      	beq.n	8009820 <HAL_DMA_Init+0x3e4>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a1e      	ldr	r2, [pc, #120]	; (8009878 <HAL_DMA_Init+0x43c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00d      	beq.n	8009820 <HAL_DMA_Init+0x3e4>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a1c      	ldr	r2, [pc, #112]	; (800987c <HAL_DMA_Init+0x440>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d008      	beq.n	8009820 <HAL_DMA_Init+0x3e4>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a1b      	ldr	r2, [pc, #108]	; (8009880 <HAL_DMA_Init+0x444>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <HAL_DMA_Init+0x3e4>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a19      	ldr	r2, [pc, #100]	; (8009884 <HAL_DMA_Init+0x448>)
 800981e:	4293      	cmp	r3, r2
 8009820:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2202      	movs	r2, #2
 8009826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4b12      	ldr	r3, [pc, #72]	; (8009888 <HAL_DMA_Init+0x44c>)
 800983e:	4013      	ands	r3, r2
 8009840:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d020      	beq.n	800988c <HAL_DMA_Init+0x450>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	2b80      	cmp	r3, #128	; 0x80
 8009850:	d102      	bne.n	8009858 <HAL_DMA_Init+0x41c>
 8009852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009856:	e01a      	b.n	800988e <HAL_DMA_Init+0x452>
 8009858:	2300      	movs	r3, #0
 800985a:	e018      	b.n	800988e <HAL_DMA_Init+0x452>
 800985c:	fe10803f 	.word	0xfe10803f
 8009860:	5c001000 	.word	0x5c001000
 8009864:	ffff0000 	.word	0xffff0000
 8009868:	58025408 	.word	0x58025408
 800986c:	5802541c 	.word	0x5802541c
 8009870:	58025430 	.word	0x58025430
 8009874:	58025444 	.word	0x58025444
 8009878:	58025458 	.word	0x58025458
 800987c:	5802546c 	.word	0x5802546c
 8009880:	58025480 	.word	0x58025480
 8009884:	58025494 	.word	0x58025494
 8009888:	fffe000f 	.word	0xfffe000f
 800988c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	68d2      	ldr	r2, [r2, #12]
 8009892:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009894:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800989c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80098a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80098ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	69db      	ldr	r3, [r3, #28]
 80098b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80098b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80098bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	4b6e      	ldr	r3, [pc, #440]	; (8009a8c <HAL_DMA_Init+0x650>)
 80098d4:	4413      	add	r3, r2
 80098d6:	4a6e      	ldr	r2, [pc, #440]	; (8009a90 <HAL_DMA_Init+0x654>)
 80098d8:	fba2 2303 	umull	r2, r3, r2, r3
 80098dc:	091b      	lsrs	r3, r3, #4
 80098de:	009a      	lsls	r2, r3, #2
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 fda1 	bl	800b42c <DMA_CalcBaseAndBitshift>
 80098ea:	4603      	mov	r3, r0
 80098ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f2:	f003 031f 	and.w	r3, r3, #31
 80098f6:	2201      	movs	r2, #1
 80098f8:	409a      	lsls	r2, r3
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	605a      	str	r2, [r3, #4]
 80098fe:	e008      	b.n	8009912 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2240      	movs	r2, #64	; 0x40
 8009904:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2203      	movs	r2, #3
 800990a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e0b7      	b.n	8009a82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a5f      	ldr	r2, [pc, #380]	; (8009a94 <HAL_DMA_Init+0x658>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d072      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a5d      	ldr	r2, [pc, #372]	; (8009a98 <HAL_DMA_Init+0x65c>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d06d      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a5c      	ldr	r2, [pc, #368]	; (8009a9c <HAL_DMA_Init+0x660>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d068      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a5a      	ldr	r2, [pc, #360]	; (8009aa0 <HAL_DMA_Init+0x664>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d063      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a59      	ldr	r2, [pc, #356]	; (8009aa4 <HAL_DMA_Init+0x668>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d05e      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a57      	ldr	r2, [pc, #348]	; (8009aa8 <HAL_DMA_Init+0x66c>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d059      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a56      	ldr	r2, [pc, #344]	; (8009aac <HAL_DMA_Init+0x670>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d054      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a54      	ldr	r2, [pc, #336]	; (8009ab0 <HAL_DMA_Init+0x674>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d04f      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a53      	ldr	r2, [pc, #332]	; (8009ab4 <HAL_DMA_Init+0x678>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d04a      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a51      	ldr	r2, [pc, #324]	; (8009ab8 <HAL_DMA_Init+0x67c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d045      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a50      	ldr	r2, [pc, #320]	; (8009abc <HAL_DMA_Init+0x680>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d040      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a4e      	ldr	r2, [pc, #312]	; (8009ac0 <HAL_DMA_Init+0x684>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d03b      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a4d      	ldr	r2, [pc, #308]	; (8009ac4 <HAL_DMA_Init+0x688>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d036      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a4b      	ldr	r2, [pc, #300]	; (8009ac8 <HAL_DMA_Init+0x68c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d031      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a4a      	ldr	r2, [pc, #296]	; (8009acc <HAL_DMA_Init+0x690>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d02c      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a48      	ldr	r2, [pc, #288]	; (8009ad0 <HAL_DMA_Init+0x694>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d027      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a47      	ldr	r2, [pc, #284]	; (8009ad4 <HAL_DMA_Init+0x698>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d022      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a45      	ldr	r2, [pc, #276]	; (8009ad8 <HAL_DMA_Init+0x69c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d01d      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a44      	ldr	r2, [pc, #272]	; (8009adc <HAL_DMA_Init+0x6a0>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d018      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a42      	ldr	r2, [pc, #264]	; (8009ae0 <HAL_DMA_Init+0x6a4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d013      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a41      	ldr	r2, [pc, #260]	; (8009ae4 <HAL_DMA_Init+0x6a8>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00e      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a3f      	ldr	r2, [pc, #252]	; (8009ae8 <HAL_DMA_Init+0x6ac>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d009      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a3e      	ldr	r2, [pc, #248]	; (8009aec <HAL_DMA_Init+0x6b0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d004      	beq.n	8009a02 <HAL_DMA_Init+0x5c6>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a3c      	ldr	r2, [pc, #240]	; (8009af0 <HAL_DMA_Init+0x6b4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d101      	bne.n	8009a06 <HAL_DMA_Init+0x5ca>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e000      	b.n	8009a08 <HAL_DMA_Init+0x5cc>
 8009a06:	2300      	movs	r3, #0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d032      	beq.n	8009a72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f001 fe3b 	bl	800b688 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	2b80      	cmp	r3, #128	; 0x80
 8009a18:	d102      	bne.n	8009a20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a28:	b2d2      	uxtb	r2, r2
 8009a2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009a34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d010      	beq.n	8009a60 <HAL_DMA_Init+0x624>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	2b08      	cmp	r3, #8
 8009a44:	d80c      	bhi.n	8009a60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 feb8 	bl	800b7bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009a5c:	605a      	str	r2, [r3, #4]
 8009a5e:	e008      	b.n	8009a72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	a7fdabf8 	.word	0xa7fdabf8
 8009a90:	cccccccd 	.word	0xcccccccd
 8009a94:	40020010 	.word	0x40020010
 8009a98:	40020028 	.word	0x40020028
 8009a9c:	40020040 	.word	0x40020040
 8009aa0:	40020058 	.word	0x40020058
 8009aa4:	40020070 	.word	0x40020070
 8009aa8:	40020088 	.word	0x40020088
 8009aac:	400200a0 	.word	0x400200a0
 8009ab0:	400200b8 	.word	0x400200b8
 8009ab4:	40020410 	.word	0x40020410
 8009ab8:	40020428 	.word	0x40020428
 8009abc:	40020440 	.word	0x40020440
 8009ac0:	40020458 	.word	0x40020458
 8009ac4:	40020470 	.word	0x40020470
 8009ac8:	40020488 	.word	0x40020488
 8009acc:	400204a0 	.word	0x400204a0
 8009ad0:	400204b8 	.word	0x400204b8
 8009ad4:	58025408 	.word	0x58025408
 8009ad8:	5802541c 	.word	0x5802541c
 8009adc:	58025430 	.word	0x58025430
 8009ae0:	58025444 	.word	0x58025444
 8009ae4:	58025458 	.word	0x58025458
 8009ae8:	5802546c 	.word	0x5802546c
 8009aec:	58025480 	.word	0x58025480
 8009af0:	58025494 	.word	0x58025494

08009af4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009afc:	f7ff f83e 	bl	8008b7c <HAL_GetTick>
 8009b00:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e2dc      	b.n	800a0c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d008      	beq.n	8009b2a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2280      	movs	r2, #128	; 0x80
 8009b1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e2cd      	b.n	800a0c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a76      	ldr	r2, [pc, #472]	; (8009d08 <HAL_DMA_Abort+0x214>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d04a      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a74      	ldr	r2, [pc, #464]	; (8009d0c <HAL_DMA_Abort+0x218>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d045      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a73      	ldr	r2, [pc, #460]	; (8009d10 <HAL_DMA_Abort+0x21c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d040      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a71      	ldr	r2, [pc, #452]	; (8009d14 <HAL_DMA_Abort+0x220>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d03b      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a70      	ldr	r2, [pc, #448]	; (8009d18 <HAL_DMA_Abort+0x224>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d036      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a6e      	ldr	r2, [pc, #440]	; (8009d1c <HAL_DMA_Abort+0x228>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d031      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a6d      	ldr	r2, [pc, #436]	; (8009d20 <HAL_DMA_Abort+0x22c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d02c      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a6b      	ldr	r2, [pc, #428]	; (8009d24 <HAL_DMA_Abort+0x230>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d027      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a6a      	ldr	r2, [pc, #424]	; (8009d28 <HAL_DMA_Abort+0x234>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d022      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a68      	ldr	r2, [pc, #416]	; (8009d2c <HAL_DMA_Abort+0x238>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d01d      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a67      	ldr	r2, [pc, #412]	; (8009d30 <HAL_DMA_Abort+0x23c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d018      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a65      	ldr	r2, [pc, #404]	; (8009d34 <HAL_DMA_Abort+0x240>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d013      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a64      	ldr	r2, [pc, #400]	; (8009d38 <HAL_DMA_Abort+0x244>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d00e      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a62      	ldr	r2, [pc, #392]	; (8009d3c <HAL_DMA_Abort+0x248>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d009      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a61      	ldr	r2, [pc, #388]	; (8009d40 <HAL_DMA_Abort+0x24c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d004      	beq.n	8009bca <HAL_DMA_Abort+0xd6>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a5f      	ldr	r2, [pc, #380]	; (8009d44 <HAL_DMA_Abort+0x250>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d101      	bne.n	8009bce <HAL_DMA_Abort+0xda>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e000      	b.n	8009bd0 <HAL_DMA_Abort+0xdc>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d013      	beq.n	8009bfc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 021e 	bic.w	r2, r2, #30
 8009be2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	695a      	ldr	r2, [r3, #20]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bf2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	617b      	str	r3, [r7, #20]
 8009bfa:	e00a      	b.n	8009c12 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 020e 	bic.w	r2, r2, #14
 8009c0a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a3c      	ldr	r2, [pc, #240]	; (8009d08 <HAL_DMA_Abort+0x214>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d072      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a3a      	ldr	r2, [pc, #232]	; (8009d0c <HAL_DMA_Abort+0x218>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d06d      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a39      	ldr	r2, [pc, #228]	; (8009d10 <HAL_DMA_Abort+0x21c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d068      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a37      	ldr	r2, [pc, #220]	; (8009d14 <HAL_DMA_Abort+0x220>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d063      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a36      	ldr	r2, [pc, #216]	; (8009d18 <HAL_DMA_Abort+0x224>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d05e      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a34      	ldr	r2, [pc, #208]	; (8009d1c <HAL_DMA_Abort+0x228>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d059      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a33      	ldr	r2, [pc, #204]	; (8009d20 <HAL_DMA_Abort+0x22c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d054      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a31      	ldr	r2, [pc, #196]	; (8009d24 <HAL_DMA_Abort+0x230>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d04f      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a30      	ldr	r2, [pc, #192]	; (8009d28 <HAL_DMA_Abort+0x234>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d04a      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a2e      	ldr	r2, [pc, #184]	; (8009d2c <HAL_DMA_Abort+0x238>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d045      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a2d      	ldr	r2, [pc, #180]	; (8009d30 <HAL_DMA_Abort+0x23c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d040      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a2b      	ldr	r2, [pc, #172]	; (8009d34 <HAL_DMA_Abort+0x240>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d03b      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a2a      	ldr	r2, [pc, #168]	; (8009d38 <HAL_DMA_Abort+0x244>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d036      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a28      	ldr	r2, [pc, #160]	; (8009d3c <HAL_DMA_Abort+0x248>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d031      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a27      	ldr	r2, [pc, #156]	; (8009d40 <HAL_DMA_Abort+0x24c>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d02c      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a25      	ldr	r2, [pc, #148]	; (8009d44 <HAL_DMA_Abort+0x250>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d027      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a24      	ldr	r2, [pc, #144]	; (8009d48 <HAL_DMA_Abort+0x254>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d022      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a22      	ldr	r2, [pc, #136]	; (8009d4c <HAL_DMA_Abort+0x258>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d01d      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a21      	ldr	r2, [pc, #132]	; (8009d50 <HAL_DMA_Abort+0x25c>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d018      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a1f      	ldr	r2, [pc, #124]	; (8009d54 <HAL_DMA_Abort+0x260>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d013      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a1e      	ldr	r2, [pc, #120]	; (8009d58 <HAL_DMA_Abort+0x264>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00e      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a1c      	ldr	r2, [pc, #112]	; (8009d5c <HAL_DMA_Abort+0x268>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d009      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a1b      	ldr	r2, [pc, #108]	; (8009d60 <HAL_DMA_Abort+0x26c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d004      	beq.n	8009d02 <HAL_DMA_Abort+0x20e>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a19      	ldr	r2, [pc, #100]	; (8009d64 <HAL_DMA_Abort+0x270>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d132      	bne.n	8009d68 <HAL_DMA_Abort+0x274>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e031      	b.n	8009d6a <HAL_DMA_Abort+0x276>
 8009d06:	bf00      	nop
 8009d08:	40020010 	.word	0x40020010
 8009d0c:	40020028 	.word	0x40020028
 8009d10:	40020040 	.word	0x40020040
 8009d14:	40020058 	.word	0x40020058
 8009d18:	40020070 	.word	0x40020070
 8009d1c:	40020088 	.word	0x40020088
 8009d20:	400200a0 	.word	0x400200a0
 8009d24:	400200b8 	.word	0x400200b8
 8009d28:	40020410 	.word	0x40020410
 8009d2c:	40020428 	.word	0x40020428
 8009d30:	40020440 	.word	0x40020440
 8009d34:	40020458 	.word	0x40020458
 8009d38:	40020470 	.word	0x40020470
 8009d3c:	40020488 	.word	0x40020488
 8009d40:	400204a0 	.word	0x400204a0
 8009d44:	400204b8 	.word	0x400204b8
 8009d48:	58025408 	.word	0x58025408
 8009d4c:	5802541c 	.word	0x5802541c
 8009d50:	58025430 	.word	0x58025430
 8009d54:	58025444 	.word	0x58025444
 8009d58:	58025458 	.word	0x58025458
 8009d5c:	5802546c 	.word	0x5802546c
 8009d60:	58025480 	.word	0x58025480
 8009d64:	58025494 	.word	0x58025494
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d007      	beq.n	8009d7e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a6d      	ldr	r2, [pc, #436]	; (8009f38 <HAL_DMA_Abort+0x444>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d04a      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a6b      	ldr	r2, [pc, #428]	; (8009f3c <HAL_DMA_Abort+0x448>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d045      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a6a      	ldr	r2, [pc, #424]	; (8009f40 <HAL_DMA_Abort+0x44c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d040      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a68      	ldr	r2, [pc, #416]	; (8009f44 <HAL_DMA_Abort+0x450>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d03b      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a67      	ldr	r2, [pc, #412]	; (8009f48 <HAL_DMA_Abort+0x454>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d036      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a65      	ldr	r2, [pc, #404]	; (8009f4c <HAL_DMA_Abort+0x458>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d031      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a64      	ldr	r2, [pc, #400]	; (8009f50 <HAL_DMA_Abort+0x45c>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d02c      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a62      	ldr	r2, [pc, #392]	; (8009f54 <HAL_DMA_Abort+0x460>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d027      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a61      	ldr	r2, [pc, #388]	; (8009f58 <HAL_DMA_Abort+0x464>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d022      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a5f      	ldr	r2, [pc, #380]	; (8009f5c <HAL_DMA_Abort+0x468>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d01d      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a5e      	ldr	r2, [pc, #376]	; (8009f60 <HAL_DMA_Abort+0x46c>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d018      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a5c      	ldr	r2, [pc, #368]	; (8009f64 <HAL_DMA_Abort+0x470>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d013      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a5b      	ldr	r2, [pc, #364]	; (8009f68 <HAL_DMA_Abort+0x474>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d00e      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a59      	ldr	r2, [pc, #356]	; (8009f6c <HAL_DMA_Abort+0x478>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d009      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a58      	ldr	r2, [pc, #352]	; (8009f70 <HAL_DMA_Abort+0x47c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d004      	beq.n	8009e1e <HAL_DMA_Abort+0x32a>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a56      	ldr	r2, [pc, #344]	; (8009f74 <HAL_DMA_Abort+0x480>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d108      	bne.n	8009e30 <HAL_DMA_Abort+0x33c>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f022 0201 	bic.w	r2, r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e007      	b.n	8009e40 <HAL_DMA_Abort+0x34c>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0201 	bic.w	r2, r2, #1
 8009e3e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009e40:	e013      	b.n	8009e6a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009e42:	f7fe fe9b 	bl	8008b7c <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	2b05      	cmp	r3, #5
 8009e4e:	d90c      	bls.n	8009e6a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2220      	movs	r2, #32
 8009e54:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2203      	movs	r2, #3
 8009e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e12d      	b.n	800a0c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1e5      	bne.n	8009e42 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a2f      	ldr	r2, [pc, #188]	; (8009f38 <HAL_DMA_Abort+0x444>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d04a      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a2d      	ldr	r2, [pc, #180]	; (8009f3c <HAL_DMA_Abort+0x448>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d045      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a2c      	ldr	r2, [pc, #176]	; (8009f40 <HAL_DMA_Abort+0x44c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d040      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a2a      	ldr	r2, [pc, #168]	; (8009f44 <HAL_DMA_Abort+0x450>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d03b      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a29      	ldr	r2, [pc, #164]	; (8009f48 <HAL_DMA_Abort+0x454>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d036      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a27      	ldr	r2, [pc, #156]	; (8009f4c <HAL_DMA_Abort+0x458>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d031      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a26      	ldr	r2, [pc, #152]	; (8009f50 <HAL_DMA_Abort+0x45c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d02c      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a24      	ldr	r2, [pc, #144]	; (8009f54 <HAL_DMA_Abort+0x460>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d027      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a23      	ldr	r2, [pc, #140]	; (8009f58 <HAL_DMA_Abort+0x464>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d022      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a21      	ldr	r2, [pc, #132]	; (8009f5c <HAL_DMA_Abort+0x468>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d01d      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a20      	ldr	r2, [pc, #128]	; (8009f60 <HAL_DMA_Abort+0x46c>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d018      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a1e      	ldr	r2, [pc, #120]	; (8009f64 <HAL_DMA_Abort+0x470>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d013      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a1d      	ldr	r2, [pc, #116]	; (8009f68 <HAL_DMA_Abort+0x474>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00e      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a1b      	ldr	r2, [pc, #108]	; (8009f6c <HAL_DMA_Abort+0x478>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d009      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a1a      	ldr	r2, [pc, #104]	; (8009f70 <HAL_DMA_Abort+0x47c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d004      	beq.n	8009f16 <HAL_DMA_Abort+0x422>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a18      	ldr	r2, [pc, #96]	; (8009f74 <HAL_DMA_Abort+0x480>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d101      	bne.n	8009f1a <HAL_DMA_Abort+0x426>
 8009f16:	2301      	movs	r3, #1
 8009f18:	e000      	b.n	8009f1c <HAL_DMA_Abort+0x428>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d02b      	beq.n	8009f78 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f24:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f2a:	f003 031f 	and.w	r3, r3, #31
 8009f2e:	223f      	movs	r2, #63	; 0x3f
 8009f30:	409a      	lsls	r2, r3
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	609a      	str	r2, [r3, #8]
 8009f36:	e02a      	b.n	8009f8e <HAL_DMA_Abort+0x49a>
 8009f38:	40020010 	.word	0x40020010
 8009f3c:	40020028 	.word	0x40020028
 8009f40:	40020040 	.word	0x40020040
 8009f44:	40020058 	.word	0x40020058
 8009f48:	40020070 	.word	0x40020070
 8009f4c:	40020088 	.word	0x40020088
 8009f50:	400200a0 	.word	0x400200a0
 8009f54:	400200b8 	.word	0x400200b8
 8009f58:	40020410 	.word	0x40020410
 8009f5c:	40020428 	.word	0x40020428
 8009f60:	40020440 	.word	0x40020440
 8009f64:	40020458 	.word	0x40020458
 8009f68:	40020470 	.word	0x40020470
 8009f6c:	40020488 	.word	0x40020488
 8009f70:	400204a0 	.word	0x400204a0
 8009f74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f82:	f003 031f 	and.w	r3, r3, #31
 8009f86:	2201      	movs	r2, #1
 8009f88:	409a      	lsls	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a4f      	ldr	r2, [pc, #316]	; (800a0d0 <HAL_DMA_Abort+0x5dc>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d072      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a4d      	ldr	r2, [pc, #308]	; (800a0d4 <HAL_DMA_Abort+0x5e0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d06d      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a4c      	ldr	r2, [pc, #304]	; (800a0d8 <HAL_DMA_Abort+0x5e4>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d068      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a4a      	ldr	r2, [pc, #296]	; (800a0dc <HAL_DMA_Abort+0x5e8>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d063      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a49      	ldr	r2, [pc, #292]	; (800a0e0 <HAL_DMA_Abort+0x5ec>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d05e      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a47      	ldr	r2, [pc, #284]	; (800a0e4 <HAL_DMA_Abort+0x5f0>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d059      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a46      	ldr	r2, [pc, #280]	; (800a0e8 <HAL_DMA_Abort+0x5f4>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d054      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a44      	ldr	r2, [pc, #272]	; (800a0ec <HAL_DMA_Abort+0x5f8>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d04f      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a43      	ldr	r2, [pc, #268]	; (800a0f0 <HAL_DMA_Abort+0x5fc>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d04a      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a41      	ldr	r2, [pc, #260]	; (800a0f4 <HAL_DMA_Abort+0x600>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d045      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a40      	ldr	r2, [pc, #256]	; (800a0f8 <HAL_DMA_Abort+0x604>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d040      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a3e      	ldr	r2, [pc, #248]	; (800a0fc <HAL_DMA_Abort+0x608>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d03b      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a3d      	ldr	r2, [pc, #244]	; (800a100 <HAL_DMA_Abort+0x60c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d036      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a3b      	ldr	r2, [pc, #236]	; (800a104 <HAL_DMA_Abort+0x610>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d031      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a3a      	ldr	r2, [pc, #232]	; (800a108 <HAL_DMA_Abort+0x614>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d02c      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a38      	ldr	r2, [pc, #224]	; (800a10c <HAL_DMA_Abort+0x618>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d027      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a37      	ldr	r2, [pc, #220]	; (800a110 <HAL_DMA_Abort+0x61c>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d022      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a35      	ldr	r2, [pc, #212]	; (800a114 <HAL_DMA_Abort+0x620>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d01d      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a34      	ldr	r2, [pc, #208]	; (800a118 <HAL_DMA_Abort+0x624>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d018      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a32      	ldr	r2, [pc, #200]	; (800a11c <HAL_DMA_Abort+0x628>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d013      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a31      	ldr	r2, [pc, #196]	; (800a120 <HAL_DMA_Abort+0x62c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00e      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a2f      	ldr	r2, [pc, #188]	; (800a124 <HAL_DMA_Abort+0x630>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a2e      	ldr	r2, [pc, #184]	; (800a128 <HAL_DMA_Abort+0x634>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_DMA_Abort+0x58a>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a2c      	ldr	r2, [pc, #176]	; (800a12c <HAL_DMA_Abort+0x638>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d101      	bne.n	800a082 <HAL_DMA_Abort+0x58e>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <HAL_DMA_Abort+0x590>
 800a082:	2300      	movs	r3, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d015      	beq.n	800a0b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a090:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00c      	beq.n	800a0b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a0a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a0b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	40020010 	.word	0x40020010
 800a0d4:	40020028 	.word	0x40020028
 800a0d8:	40020040 	.word	0x40020040
 800a0dc:	40020058 	.word	0x40020058
 800a0e0:	40020070 	.word	0x40020070
 800a0e4:	40020088 	.word	0x40020088
 800a0e8:	400200a0 	.word	0x400200a0
 800a0ec:	400200b8 	.word	0x400200b8
 800a0f0:	40020410 	.word	0x40020410
 800a0f4:	40020428 	.word	0x40020428
 800a0f8:	40020440 	.word	0x40020440
 800a0fc:	40020458 	.word	0x40020458
 800a100:	40020470 	.word	0x40020470
 800a104:	40020488 	.word	0x40020488
 800a108:	400204a0 	.word	0x400204a0
 800a10c:	400204b8 	.word	0x400204b8
 800a110:	58025408 	.word	0x58025408
 800a114:	5802541c 	.word	0x5802541c
 800a118:	58025430 	.word	0x58025430
 800a11c:	58025444 	.word	0x58025444
 800a120:	58025458 	.word	0x58025458
 800a124:	5802546c 	.word	0x5802546c
 800a128:	58025480 	.word	0x58025480
 800a12c:	58025494 	.word	0x58025494

0800a130 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e237      	b.n	800a5b2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d004      	beq.n	800a158 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2280      	movs	r2, #128	; 0x80
 800a152:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e22c      	b.n	800a5b2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a5c      	ldr	r2, [pc, #368]	; (800a2d0 <HAL_DMA_Abort_IT+0x1a0>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d04a      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a5b      	ldr	r2, [pc, #364]	; (800a2d4 <HAL_DMA_Abort_IT+0x1a4>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d045      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a59      	ldr	r2, [pc, #356]	; (800a2d8 <HAL_DMA_Abort_IT+0x1a8>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d040      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a58      	ldr	r2, [pc, #352]	; (800a2dc <HAL_DMA_Abort_IT+0x1ac>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d03b      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a56      	ldr	r2, [pc, #344]	; (800a2e0 <HAL_DMA_Abort_IT+0x1b0>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d036      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a55      	ldr	r2, [pc, #340]	; (800a2e4 <HAL_DMA_Abort_IT+0x1b4>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d031      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a53      	ldr	r2, [pc, #332]	; (800a2e8 <HAL_DMA_Abort_IT+0x1b8>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d02c      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a52      	ldr	r2, [pc, #328]	; (800a2ec <HAL_DMA_Abort_IT+0x1bc>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d027      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a50      	ldr	r2, [pc, #320]	; (800a2f0 <HAL_DMA_Abort_IT+0x1c0>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d022      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a4f      	ldr	r2, [pc, #316]	; (800a2f4 <HAL_DMA_Abort_IT+0x1c4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d01d      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a4d      	ldr	r2, [pc, #308]	; (800a2f8 <HAL_DMA_Abort_IT+0x1c8>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d018      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a4c      	ldr	r2, [pc, #304]	; (800a2fc <HAL_DMA_Abort_IT+0x1cc>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d013      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a4a      	ldr	r2, [pc, #296]	; (800a300 <HAL_DMA_Abort_IT+0x1d0>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00e      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a49      	ldr	r2, [pc, #292]	; (800a304 <HAL_DMA_Abort_IT+0x1d4>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d009      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a47      	ldr	r2, [pc, #284]	; (800a308 <HAL_DMA_Abort_IT+0x1d8>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d004      	beq.n	800a1f8 <HAL_DMA_Abort_IT+0xc8>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a46      	ldr	r2, [pc, #280]	; (800a30c <HAL_DMA_Abort_IT+0x1dc>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d101      	bne.n	800a1fc <HAL_DMA_Abort_IT+0xcc>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <HAL_DMA_Abort_IT+0xce>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 8086 	beq.w	800a310 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2204      	movs	r2, #4
 800a208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a2f      	ldr	r2, [pc, #188]	; (800a2d0 <HAL_DMA_Abort_IT+0x1a0>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d04a      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a2e      	ldr	r2, [pc, #184]	; (800a2d4 <HAL_DMA_Abort_IT+0x1a4>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d045      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a2c      	ldr	r2, [pc, #176]	; (800a2d8 <HAL_DMA_Abort_IT+0x1a8>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d040      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a2b      	ldr	r2, [pc, #172]	; (800a2dc <HAL_DMA_Abort_IT+0x1ac>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d03b      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a29      	ldr	r2, [pc, #164]	; (800a2e0 <HAL_DMA_Abort_IT+0x1b0>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d036      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a28      	ldr	r2, [pc, #160]	; (800a2e4 <HAL_DMA_Abort_IT+0x1b4>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d031      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a26      	ldr	r2, [pc, #152]	; (800a2e8 <HAL_DMA_Abort_IT+0x1b8>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d02c      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a25      	ldr	r2, [pc, #148]	; (800a2ec <HAL_DMA_Abort_IT+0x1bc>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d027      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a23      	ldr	r2, [pc, #140]	; (800a2f0 <HAL_DMA_Abort_IT+0x1c0>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d022      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a22      	ldr	r2, [pc, #136]	; (800a2f4 <HAL_DMA_Abort_IT+0x1c4>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d01d      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a20      	ldr	r2, [pc, #128]	; (800a2f8 <HAL_DMA_Abort_IT+0x1c8>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d018      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a1f      	ldr	r2, [pc, #124]	; (800a2fc <HAL_DMA_Abort_IT+0x1cc>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d013      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1d      	ldr	r2, [pc, #116]	; (800a300 <HAL_DMA_Abort_IT+0x1d0>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d00e      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a1c      	ldr	r2, [pc, #112]	; (800a304 <HAL_DMA_Abort_IT+0x1d4>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d009      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a1a      	ldr	r2, [pc, #104]	; (800a308 <HAL_DMA_Abort_IT+0x1d8>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d004      	beq.n	800a2ac <HAL_DMA_Abort_IT+0x17c>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a19      	ldr	r2, [pc, #100]	; (800a30c <HAL_DMA_Abort_IT+0x1dc>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d108      	bne.n	800a2be <HAL_DMA_Abort_IT+0x18e>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f022 0201 	bic.w	r2, r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	e178      	b.n	800a5b0 <HAL_DMA_Abort_IT+0x480>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0201 	bic.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	e16f      	b.n	800a5b0 <HAL_DMA_Abort_IT+0x480>
 800a2d0:	40020010 	.word	0x40020010
 800a2d4:	40020028 	.word	0x40020028
 800a2d8:	40020040 	.word	0x40020040
 800a2dc:	40020058 	.word	0x40020058
 800a2e0:	40020070 	.word	0x40020070
 800a2e4:	40020088 	.word	0x40020088
 800a2e8:	400200a0 	.word	0x400200a0
 800a2ec:	400200b8 	.word	0x400200b8
 800a2f0:	40020410 	.word	0x40020410
 800a2f4:	40020428 	.word	0x40020428
 800a2f8:	40020440 	.word	0x40020440
 800a2fc:	40020458 	.word	0x40020458
 800a300:	40020470 	.word	0x40020470
 800a304:	40020488 	.word	0x40020488
 800a308:	400204a0 	.word	0x400204a0
 800a30c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 020e 	bic.w	r2, r2, #14
 800a31e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a6c      	ldr	r2, [pc, #432]	; (800a4d8 <HAL_DMA_Abort_IT+0x3a8>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d04a      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a6b      	ldr	r2, [pc, #428]	; (800a4dc <HAL_DMA_Abort_IT+0x3ac>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d045      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a69      	ldr	r2, [pc, #420]	; (800a4e0 <HAL_DMA_Abort_IT+0x3b0>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d040      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a68      	ldr	r2, [pc, #416]	; (800a4e4 <HAL_DMA_Abort_IT+0x3b4>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d03b      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a66      	ldr	r2, [pc, #408]	; (800a4e8 <HAL_DMA_Abort_IT+0x3b8>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d036      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a65      	ldr	r2, [pc, #404]	; (800a4ec <HAL_DMA_Abort_IT+0x3bc>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d031      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a63      	ldr	r2, [pc, #396]	; (800a4f0 <HAL_DMA_Abort_IT+0x3c0>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d02c      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a62      	ldr	r2, [pc, #392]	; (800a4f4 <HAL_DMA_Abort_IT+0x3c4>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d027      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a60      	ldr	r2, [pc, #384]	; (800a4f8 <HAL_DMA_Abort_IT+0x3c8>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d022      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a5f      	ldr	r2, [pc, #380]	; (800a4fc <HAL_DMA_Abort_IT+0x3cc>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d01d      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a5d      	ldr	r2, [pc, #372]	; (800a500 <HAL_DMA_Abort_IT+0x3d0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d018      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a5c      	ldr	r2, [pc, #368]	; (800a504 <HAL_DMA_Abort_IT+0x3d4>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d013      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a5a      	ldr	r2, [pc, #360]	; (800a508 <HAL_DMA_Abort_IT+0x3d8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d00e      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a59      	ldr	r2, [pc, #356]	; (800a50c <HAL_DMA_Abort_IT+0x3dc>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d009      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a57      	ldr	r2, [pc, #348]	; (800a510 <HAL_DMA_Abort_IT+0x3e0>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d004      	beq.n	800a3c0 <HAL_DMA_Abort_IT+0x290>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a56      	ldr	r2, [pc, #344]	; (800a514 <HAL_DMA_Abort_IT+0x3e4>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d108      	bne.n	800a3d2 <HAL_DMA_Abort_IT+0x2a2>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f022 0201 	bic.w	r2, r2, #1
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	e007      	b.n	800a3e2 <HAL_DMA_Abort_IT+0x2b2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 0201 	bic.w	r2, r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a3c      	ldr	r2, [pc, #240]	; (800a4d8 <HAL_DMA_Abort_IT+0x3a8>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d072      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a3a      	ldr	r2, [pc, #232]	; (800a4dc <HAL_DMA_Abort_IT+0x3ac>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d06d      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a39      	ldr	r2, [pc, #228]	; (800a4e0 <HAL_DMA_Abort_IT+0x3b0>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d068      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a37      	ldr	r2, [pc, #220]	; (800a4e4 <HAL_DMA_Abort_IT+0x3b4>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d063      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a36      	ldr	r2, [pc, #216]	; (800a4e8 <HAL_DMA_Abort_IT+0x3b8>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d05e      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a34      	ldr	r2, [pc, #208]	; (800a4ec <HAL_DMA_Abort_IT+0x3bc>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d059      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a33      	ldr	r2, [pc, #204]	; (800a4f0 <HAL_DMA_Abort_IT+0x3c0>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d054      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a31      	ldr	r2, [pc, #196]	; (800a4f4 <HAL_DMA_Abort_IT+0x3c4>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d04f      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a30      	ldr	r2, [pc, #192]	; (800a4f8 <HAL_DMA_Abort_IT+0x3c8>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d04a      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a2e      	ldr	r2, [pc, #184]	; (800a4fc <HAL_DMA_Abort_IT+0x3cc>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d045      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a2d      	ldr	r2, [pc, #180]	; (800a500 <HAL_DMA_Abort_IT+0x3d0>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d040      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a2b      	ldr	r2, [pc, #172]	; (800a504 <HAL_DMA_Abort_IT+0x3d4>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d03b      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a2a      	ldr	r2, [pc, #168]	; (800a508 <HAL_DMA_Abort_IT+0x3d8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d036      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a28      	ldr	r2, [pc, #160]	; (800a50c <HAL_DMA_Abort_IT+0x3dc>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d031      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a27      	ldr	r2, [pc, #156]	; (800a510 <HAL_DMA_Abort_IT+0x3e0>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d02c      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a25      	ldr	r2, [pc, #148]	; (800a514 <HAL_DMA_Abort_IT+0x3e4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d027      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a24      	ldr	r2, [pc, #144]	; (800a518 <HAL_DMA_Abort_IT+0x3e8>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d022      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a22      	ldr	r2, [pc, #136]	; (800a51c <HAL_DMA_Abort_IT+0x3ec>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d01d      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a21      	ldr	r2, [pc, #132]	; (800a520 <HAL_DMA_Abort_IT+0x3f0>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d018      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a1f      	ldr	r2, [pc, #124]	; (800a524 <HAL_DMA_Abort_IT+0x3f4>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d013      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a1e      	ldr	r2, [pc, #120]	; (800a528 <HAL_DMA_Abort_IT+0x3f8>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d00e      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a1c      	ldr	r2, [pc, #112]	; (800a52c <HAL_DMA_Abort_IT+0x3fc>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d009      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <HAL_DMA_Abort_IT+0x400>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d004      	beq.n	800a4d2 <HAL_DMA_Abort_IT+0x3a2>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a19      	ldr	r2, [pc, #100]	; (800a534 <HAL_DMA_Abort_IT+0x404>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d132      	bne.n	800a538 <HAL_DMA_Abort_IT+0x408>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e031      	b.n	800a53a <HAL_DMA_Abort_IT+0x40a>
 800a4d6:	bf00      	nop
 800a4d8:	40020010 	.word	0x40020010
 800a4dc:	40020028 	.word	0x40020028
 800a4e0:	40020040 	.word	0x40020040
 800a4e4:	40020058 	.word	0x40020058
 800a4e8:	40020070 	.word	0x40020070
 800a4ec:	40020088 	.word	0x40020088
 800a4f0:	400200a0 	.word	0x400200a0
 800a4f4:	400200b8 	.word	0x400200b8
 800a4f8:	40020410 	.word	0x40020410
 800a4fc:	40020428 	.word	0x40020428
 800a500:	40020440 	.word	0x40020440
 800a504:	40020458 	.word	0x40020458
 800a508:	40020470 	.word	0x40020470
 800a50c:	40020488 	.word	0x40020488
 800a510:	400204a0 	.word	0x400204a0
 800a514:	400204b8 	.word	0x400204b8
 800a518:	58025408 	.word	0x58025408
 800a51c:	5802541c 	.word	0x5802541c
 800a520:	58025430 	.word	0x58025430
 800a524:	58025444 	.word	0x58025444
 800a528:	58025458 	.word	0x58025458
 800a52c:	5802546c 	.word	0x5802546c
 800a530:	58025480 	.word	0x58025480
 800a534:	58025494 	.word	0x58025494
 800a538:	2300      	movs	r3, #0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d028      	beq.n	800a590 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a54c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a552:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a558:	f003 031f 	and.w	r3, r3, #31
 800a55c:	2201      	movs	r2, #1
 800a55e:	409a      	lsls	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a56c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00c      	beq.n	800a590 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a584:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a58e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop

0800a5bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	; 0x28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5c8:	4b67      	ldr	r3, [pc, #412]	; (800a768 <HAL_DMA_IRQHandler+0x1ac>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a67      	ldr	r2, [pc, #412]	; (800a76c <HAL_DMA_IRQHandler+0x1b0>)
 800a5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d2:	0a9b      	lsrs	r3, r3, #10
 800a5d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a5f      	ldr	r2, [pc, #380]	; (800a770 <HAL_DMA_IRQHandler+0x1b4>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d04a      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a5d      	ldr	r2, [pc, #372]	; (800a774 <HAL_DMA_IRQHandler+0x1b8>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d045      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a5c      	ldr	r2, [pc, #368]	; (800a778 <HAL_DMA_IRQHandler+0x1bc>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d040      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a5a      	ldr	r2, [pc, #360]	; (800a77c <HAL_DMA_IRQHandler+0x1c0>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d03b      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a59      	ldr	r2, [pc, #356]	; (800a780 <HAL_DMA_IRQHandler+0x1c4>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d036      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a57      	ldr	r2, [pc, #348]	; (800a784 <HAL_DMA_IRQHandler+0x1c8>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d031      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a56      	ldr	r2, [pc, #344]	; (800a788 <HAL_DMA_IRQHandler+0x1cc>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d02c      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a54      	ldr	r2, [pc, #336]	; (800a78c <HAL_DMA_IRQHandler+0x1d0>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d027      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a53      	ldr	r2, [pc, #332]	; (800a790 <HAL_DMA_IRQHandler+0x1d4>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d022      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a51      	ldr	r2, [pc, #324]	; (800a794 <HAL_DMA_IRQHandler+0x1d8>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d01d      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a50      	ldr	r2, [pc, #320]	; (800a798 <HAL_DMA_IRQHandler+0x1dc>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d018      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a4e      	ldr	r2, [pc, #312]	; (800a79c <HAL_DMA_IRQHandler+0x1e0>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d013      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a4d      	ldr	r2, [pc, #308]	; (800a7a0 <HAL_DMA_IRQHandler+0x1e4>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00e      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a4b      	ldr	r2, [pc, #300]	; (800a7a4 <HAL_DMA_IRQHandler+0x1e8>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d009      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a4a      	ldr	r2, [pc, #296]	; (800a7a8 <HAL_DMA_IRQHandler+0x1ec>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d004      	beq.n	800a68e <HAL_DMA_IRQHandler+0xd2>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a48      	ldr	r2, [pc, #288]	; (800a7ac <HAL_DMA_IRQHandler+0x1f0>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d101      	bne.n	800a692 <HAL_DMA_IRQHandler+0xd6>
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <HAL_DMA_IRQHandler+0xd8>
 800a692:	2300      	movs	r3, #0
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 842b 	beq.w	800aef0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a69e:	f003 031f 	and.w	r3, r3, #31
 800a6a2:	2208      	movs	r2, #8
 800a6a4:	409a      	lsls	r2, r3
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 80a2 	beq.w	800a7f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a2e      	ldr	r2, [pc, #184]	; (800a770 <HAL_DMA_IRQHandler+0x1b4>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d04a      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a2d      	ldr	r2, [pc, #180]	; (800a774 <HAL_DMA_IRQHandler+0x1b8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d045      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a2b      	ldr	r2, [pc, #172]	; (800a778 <HAL_DMA_IRQHandler+0x1bc>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d040      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a2a      	ldr	r2, [pc, #168]	; (800a77c <HAL_DMA_IRQHandler+0x1c0>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d03b      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a28      	ldr	r2, [pc, #160]	; (800a780 <HAL_DMA_IRQHandler+0x1c4>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d036      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a27      	ldr	r2, [pc, #156]	; (800a784 <HAL_DMA_IRQHandler+0x1c8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d031      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a25      	ldr	r2, [pc, #148]	; (800a788 <HAL_DMA_IRQHandler+0x1cc>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d02c      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a24      	ldr	r2, [pc, #144]	; (800a78c <HAL_DMA_IRQHandler+0x1d0>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d027      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a22      	ldr	r2, [pc, #136]	; (800a790 <HAL_DMA_IRQHandler+0x1d4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d022      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a21      	ldr	r2, [pc, #132]	; (800a794 <HAL_DMA_IRQHandler+0x1d8>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d01d      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a1f      	ldr	r2, [pc, #124]	; (800a798 <HAL_DMA_IRQHandler+0x1dc>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d018      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a1e      	ldr	r2, [pc, #120]	; (800a79c <HAL_DMA_IRQHandler+0x1e0>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d013      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a1c      	ldr	r2, [pc, #112]	; (800a7a0 <HAL_DMA_IRQHandler+0x1e4>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d00e      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a1b      	ldr	r2, [pc, #108]	; (800a7a4 <HAL_DMA_IRQHandler+0x1e8>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d009      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a19      	ldr	r2, [pc, #100]	; (800a7a8 <HAL_DMA_IRQHandler+0x1ec>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d004      	beq.n	800a750 <HAL_DMA_IRQHandler+0x194>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a18      	ldr	r2, [pc, #96]	; (800a7ac <HAL_DMA_IRQHandler+0x1f0>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d12f      	bne.n	800a7b0 <HAL_DMA_IRQHandler+0x1f4>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0304 	and.w	r3, r3, #4
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bf14      	ite	ne
 800a75e:	2301      	movne	r3, #1
 800a760:	2300      	moveq	r3, #0
 800a762:	b2db      	uxtb	r3, r3
 800a764:	e02e      	b.n	800a7c4 <HAL_DMA_IRQHandler+0x208>
 800a766:	bf00      	nop
 800a768:	24000000 	.word	0x24000000
 800a76c:	1b4e81b5 	.word	0x1b4e81b5
 800a770:	40020010 	.word	0x40020010
 800a774:	40020028 	.word	0x40020028
 800a778:	40020040 	.word	0x40020040
 800a77c:	40020058 	.word	0x40020058
 800a780:	40020070 	.word	0x40020070
 800a784:	40020088 	.word	0x40020088
 800a788:	400200a0 	.word	0x400200a0
 800a78c:	400200b8 	.word	0x400200b8
 800a790:	40020410 	.word	0x40020410
 800a794:	40020428 	.word	0x40020428
 800a798:	40020440 	.word	0x40020440
 800a79c:	40020458 	.word	0x40020458
 800a7a0:	40020470 	.word	0x40020470
 800a7a4:	40020488 	.word	0x40020488
 800a7a8:	400204a0 	.word	0x400204a0
 800a7ac:	400204b8 	.word	0x400204b8
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	bf14      	ite	ne
 800a7be:	2301      	movne	r3, #1
 800a7c0:	2300      	moveq	r3, #0
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d015      	beq.n	800a7f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f022 0204 	bic.w	r2, r2, #4
 800a7d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7dc:	f003 031f 	and.w	r3, r3, #31
 800a7e0:	2208      	movs	r2, #8
 800a7e2:	409a      	lsls	r2, r3
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ec:	f043 0201 	orr.w	r2, r3, #1
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f8:	f003 031f 	and.w	r3, r3, #31
 800a7fc:	69ba      	ldr	r2, [r7, #24]
 800a7fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b00      	cmp	r3, #0
 800a808:	d06e      	beq.n	800a8e8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a69      	ldr	r2, [pc, #420]	; (800a9b4 <HAL_DMA_IRQHandler+0x3f8>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d04a      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a67      	ldr	r2, [pc, #412]	; (800a9b8 <HAL_DMA_IRQHandler+0x3fc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d045      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a66      	ldr	r2, [pc, #408]	; (800a9bc <HAL_DMA_IRQHandler+0x400>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d040      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a64      	ldr	r2, [pc, #400]	; (800a9c0 <HAL_DMA_IRQHandler+0x404>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d03b      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a63      	ldr	r2, [pc, #396]	; (800a9c4 <HAL_DMA_IRQHandler+0x408>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d036      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a61      	ldr	r2, [pc, #388]	; (800a9c8 <HAL_DMA_IRQHandler+0x40c>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d031      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a60      	ldr	r2, [pc, #384]	; (800a9cc <HAL_DMA_IRQHandler+0x410>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d02c      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a5e      	ldr	r2, [pc, #376]	; (800a9d0 <HAL_DMA_IRQHandler+0x414>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d027      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a5d      	ldr	r2, [pc, #372]	; (800a9d4 <HAL_DMA_IRQHandler+0x418>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d022      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a5b      	ldr	r2, [pc, #364]	; (800a9d8 <HAL_DMA_IRQHandler+0x41c>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d01d      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a5a      	ldr	r2, [pc, #360]	; (800a9dc <HAL_DMA_IRQHandler+0x420>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d018      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a58      	ldr	r2, [pc, #352]	; (800a9e0 <HAL_DMA_IRQHandler+0x424>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d013      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a57      	ldr	r2, [pc, #348]	; (800a9e4 <HAL_DMA_IRQHandler+0x428>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d00e      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a55      	ldr	r2, [pc, #340]	; (800a9e8 <HAL_DMA_IRQHandler+0x42c>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d009      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a54      	ldr	r2, [pc, #336]	; (800a9ec <HAL_DMA_IRQHandler+0x430>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d004      	beq.n	800a8aa <HAL_DMA_IRQHandler+0x2ee>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a52      	ldr	r2, [pc, #328]	; (800a9f0 <HAL_DMA_IRQHandler+0x434>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d10a      	bne.n	800a8c0 <HAL_DMA_IRQHandler+0x304>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	695b      	ldr	r3, [r3, #20]
 800a8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bf14      	ite	ne
 800a8b8:	2301      	movne	r3, #1
 800a8ba:	2300      	moveq	r3, #0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	e003      	b.n	800a8c8 <HAL_DMA_IRQHandler+0x30c>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00d      	beq.n	800a8e8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d0:	f003 031f 	and.w	r3, r3, #31
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	409a      	lsls	r2, r3
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e0:	f043 0202 	orr.w	r2, r3, #2
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ec:	f003 031f 	and.w	r3, r3, #31
 800a8f0:	2204      	movs	r2, #4
 800a8f2:	409a      	lsls	r2, r3
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 808f 	beq.w	800aa1c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a2c      	ldr	r2, [pc, #176]	; (800a9b4 <HAL_DMA_IRQHandler+0x3f8>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d04a      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a2a      	ldr	r2, [pc, #168]	; (800a9b8 <HAL_DMA_IRQHandler+0x3fc>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d045      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a29      	ldr	r2, [pc, #164]	; (800a9bc <HAL_DMA_IRQHandler+0x400>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d040      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a27      	ldr	r2, [pc, #156]	; (800a9c0 <HAL_DMA_IRQHandler+0x404>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d03b      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a26      	ldr	r2, [pc, #152]	; (800a9c4 <HAL_DMA_IRQHandler+0x408>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d036      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a24      	ldr	r2, [pc, #144]	; (800a9c8 <HAL_DMA_IRQHandler+0x40c>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d031      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a23      	ldr	r2, [pc, #140]	; (800a9cc <HAL_DMA_IRQHandler+0x410>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d02c      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a21      	ldr	r2, [pc, #132]	; (800a9d0 <HAL_DMA_IRQHandler+0x414>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d027      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a20      	ldr	r2, [pc, #128]	; (800a9d4 <HAL_DMA_IRQHandler+0x418>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d022      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a1e      	ldr	r2, [pc, #120]	; (800a9d8 <HAL_DMA_IRQHandler+0x41c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d01d      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a1d      	ldr	r2, [pc, #116]	; (800a9dc <HAL_DMA_IRQHandler+0x420>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d018      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a1b      	ldr	r2, [pc, #108]	; (800a9e0 <HAL_DMA_IRQHandler+0x424>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d013      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a1a      	ldr	r2, [pc, #104]	; (800a9e4 <HAL_DMA_IRQHandler+0x428>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d00e      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a18      	ldr	r2, [pc, #96]	; (800a9e8 <HAL_DMA_IRQHandler+0x42c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d009      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a17      	ldr	r2, [pc, #92]	; (800a9ec <HAL_DMA_IRQHandler+0x430>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d004      	beq.n	800a99e <HAL_DMA_IRQHandler+0x3e2>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a15      	ldr	r2, [pc, #84]	; (800a9f0 <HAL_DMA_IRQHandler+0x434>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d12a      	bne.n	800a9f4 <HAL_DMA_IRQHandler+0x438>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0302 	and.w	r3, r3, #2
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	bf14      	ite	ne
 800a9ac:	2301      	movne	r3, #1
 800a9ae:	2300      	moveq	r3, #0
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	e023      	b.n	800a9fc <HAL_DMA_IRQHandler+0x440>
 800a9b4:	40020010 	.word	0x40020010
 800a9b8:	40020028 	.word	0x40020028
 800a9bc:	40020040 	.word	0x40020040
 800a9c0:	40020058 	.word	0x40020058
 800a9c4:	40020070 	.word	0x40020070
 800a9c8:	40020088 	.word	0x40020088
 800a9cc:	400200a0 	.word	0x400200a0
 800a9d0:	400200b8 	.word	0x400200b8
 800a9d4:	40020410 	.word	0x40020410
 800a9d8:	40020428 	.word	0x40020428
 800a9dc:	40020440 	.word	0x40020440
 800a9e0:	40020458 	.word	0x40020458
 800a9e4:	40020470 	.word	0x40020470
 800a9e8:	40020488 	.word	0x40020488
 800a9ec:	400204a0 	.word	0x400204a0
 800a9f0:	400204b8 	.word	0x400204b8
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00d      	beq.n	800aa1c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa04:	f003 031f 	and.w	r3, r3, #31
 800aa08:	2204      	movs	r2, #4
 800aa0a:	409a      	lsls	r2, r3
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa14:	f043 0204 	orr.w	r2, r3, #4
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa20:	f003 031f 	and.w	r3, r3, #31
 800aa24:	2210      	movs	r2, #16
 800aa26:	409a      	lsls	r2, r3
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 80a6 	beq.w	800ab7e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a85      	ldr	r2, [pc, #532]	; (800ac4c <HAL_DMA_IRQHandler+0x690>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d04a      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a83      	ldr	r2, [pc, #524]	; (800ac50 <HAL_DMA_IRQHandler+0x694>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d045      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a82      	ldr	r2, [pc, #520]	; (800ac54 <HAL_DMA_IRQHandler+0x698>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d040      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a80      	ldr	r2, [pc, #512]	; (800ac58 <HAL_DMA_IRQHandler+0x69c>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d03b      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a7f      	ldr	r2, [pc, #508]	; (800ac5c <HAL_DMA_IRQHandler+0x6a0>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d036      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a7d      	ldr	r2, [pc, #500]	; (800ac60 <HAL_DMA_IRQHandler+0x6a4>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d031      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a7c      	ldr	r2, [pc, #496]	; (800ac64 <HAL_DMA_IRQHandler+0x6a8>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d02c      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a7a      	ldr	r2, [pc, #488]	; (800ac68 <HAL_DMA_IRQHandler+0x6ac>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d027      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a79      	ldr	r2, [pc, #484]	; (800ac6c <HAL_DMA_IRQHandler+0x6b0>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d022      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a77      	ldr	r2, [pc, #476]	; (800ac70 <HAL_DMA_IRQHandler+0x6b4>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d01d      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a76      	ldr	r2, [pc, #472]	; (800ac74 <HAL_DMA_IRQHandler+0x6b8>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d018      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a74      	ldr	r2, [pc, #464]	; (800ac78 <HAL_DMA_IRQHandler+0x6bc>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d013      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a73      	ldr	r2, [pc, #460]	; (800ac7c <HAL_DMA_IRQHandler+0x6c0>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d00e      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a71      	ldr	r2, [pc, #452]	; (800ac80 <HAL_DMA_IRQHandler+0x6c4>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d009      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a70      	ldr	r2, [pc, #448]	; (800ac84 <HAL_DMA_IRQHandler+0x6c8>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d004      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x516>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a6e      	ldr	r2, [pc, #440]	; (800ac88 <HAL_DMA_IRQHandler+0x6cc>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d10a      	bne.n	800aae8 <HAL_DMA_IRQHandler+0x52c>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 0308 	and.w	r3, r3, #8
 800aadc:	2b00      	cmp	r3, #0
 800aade:	bf14      	ite	ne
 800aae0:	2301      	movne	r3, #1
 800aae2:	2300      	moveq	r3, #0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	e009      	b.n	800aafc <HAL_DMA_IRQHandler+0x540>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0304 	and.w	r3, r3, #4
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	bf14      	ite	ne
 800aaf6:	2301      	movne	r3, #1
 800aaf8:	2300      	moveq	r3, #0
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d03e      	beq.n	800ab7e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab04:	f003 031f 	and.w	r3, r3, #31
 800ab08:	2210      	movs	r2, #16
 800ab0a:	409a      	lsls	r2, r3
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d018      	beq.n	800ab50 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d108      	bne.n	800ab3e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d024      	beq.n	800ab7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	4798      	blx	r3
 800ab3c:	e01f      	b.n	800ab7e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01b      	beq.n	800ab7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	4798      	blx	r3
 800ab4e:	e016      	b.n	800ab7e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d107      	bne.n	800ab6e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 0208 	bic.w	r2, r2, #8
 800ab6c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d003      	beq.n	800ab7e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab82:	f003 031f 	and.w	r3, r3, #31
 800ab86:	2220      	movs	r2, #32
 800ab88:	409a      	lsls	r2, r3
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 8110 	beq.w	800adb4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a2c      	ldr	r2, [pc, #176]	; (800ac4c <HAL_DMA_IRQHandler+0x690>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d04a      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a2b      	ldr	r2, [pc, #172]	; (800ac50 <HAL_DMA_IRQHandler+0x694>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d045      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a29      	ldr	r2, [pc, #164]	; (800ac54 <HAL_DMA_IRQHandler+0x698>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d040      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a28      	ldr	r2, [pc, #160]	; (800ac58 <HAL_DMA_IRQHandler+0x69c>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d03b      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a26      	ldr	r2, [pc, #152]	; (800ac5c <HAL_DMA_IRQHandler+0x6a0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d036      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a25      	ldr	r2, [pc, #148]	; (800ac60 <HAL_DMA_IRQHandler+0x6a4>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d031      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a23      	ldr	r2, [pc, #140]	; (800ac64 <HAL_DMA_IRQHandler+0x6a8>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d02c      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a22      	ldr	r2, [pc, #136]	; (800ac68 <HAL_DMA_IRQHandler+0x6ac>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d027      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a20      	ldr	r2, [pc, #128]	; (800ac6c <HAL_DMA_IRQHandler+0x6b0>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d022      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a1f      	ldr	r2, [pc, #124]	; (800ac70 <HAL_DMA_IRQHandler+0x6b4>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d01d      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a1d      	ldr	r2, [pc, #116]	; (800ac74 <HAL_DMA_IRQHandler+0x6b8>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d018      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a1c      	ldr	r2, [pc, #112]	; (800ac78 <HAL_DMA_IRQHandler+0x6bc>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d013      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a1a      	ldr	r2, [pc, #104]	; (800ac7c <HAL_DMA_IRQHandler+0x6c0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00e      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a19      	ldr	r2, [pc, #100]	; (800ac80 <HAL_DMA_IRQHandler+0x6c4>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d009      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a17      	ldr	r2, [pc, #92]	; (800ac84 <HAL_DMA_IRQHandler+0x6c8>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d004      	beq.n	800ac34 <HAL_DMA_IRQHandler+0x678>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a16      	ldr	r2, [pc, #88]	; (800ac88 <HAL_DMA_IRQHandler+0x6cc>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d12b      	bne.n	800ac8c <HAL_DMA_IRQHandler+0x6d0>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0310 	and.w	r3, r3, #16
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	bf14      	ite	ne
 800ac42:	2301      	movne	r3, #1
 800ac44:	2300      	moveq	r3, #0
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	e02a      	b.n	800aca0 <HAL_DMA_IRQHandler+0x6e4>
 800ac4a:	bf00      	nop
 800ac4c:	40020010 	.word	0x40020010
 800ac50:	40020028 	.word	0x40020028
 800ac54:	40020040 	.word	0x40020040
 800ac58:	40020058 	.word	0x40020058
 800ac5c:	40020070 	.word	0x40020070
 800ac60:	40020088 	.word	0x40020088
 800ac64:	400200a0 	.word	0x400200a0
 800ac68:	400200b8 	.word	0x400200b8
 800ac6c:	40020410 	.word	0x40020410
 800ac70:	40020428 	.word	0x40020428
 800ac74:	40020440 	.word	0x40020440
 800ac78:	40020458 	.word	0x40020458
 800ac7c:	40020470 	.word	0x40020470
 800ac80:	40020488 	.word	0x40020488
 800ac84:	400204a0 	.word	0x400204a0
 800ac88:	400204b8 	.word	0x400204b8
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	bf14      	ite	ne
 800ac9a:	2301      	movne	r3, #1
 800ac9c:	2300      	moveq	r3, #0
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 8087 	beq.w	800adb4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acaa:	f003 031f 	and.w	r3, r3, #31
 800acae:	2220      	movs	r2, #32
 800acb0:	409a      	lsls	r2, r3
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d139      	bne.n	800ad36 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0216 	bic.w	r2, r2, #22
 800acd0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	695a      	ldr	r2, [r3, #20]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ace0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d103      	bne.n	800acf2 <HAL_DMA_IRQHandler+0x736>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d007      	beq.n	800ad02 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f022 0208 	bic.w	r2, r2, #8
 800ad00:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad06:	f003 031f 	and.w	r3, r3, #31
 800ad0a:	223f      	movs	r2, #63	; 0x3f
 800ad0c:	409a      	lsls	r2, r3
 800ad0e:	6a3b      	ldr	r3, [r7, #32]
 800ad10:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f000 834a 	beq.w	800b3c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	4798      	blx	r3
          }
          return;
 800ad34:	e344      	b.n	800b3c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d018      	beq.n	800ad76 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d108      	bne.n	800ad64 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d02c      	beq.n	800adb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	4798      	blx	r3
 800ad62:	e027      	b.n	800adb4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d023      	beq.n	800adb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	4798      	blx	r3
 800ad74:	e01e      	b.n	800adb4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10f      	bne.n	800ada4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 0210 	bic.w	r2, r2, #16
 800ad92:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d003      	beq.n	800adb4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 8306 	beq.w	800b3ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8088 	beq.w	800aedc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2204      	movs	r2, #4
 800add0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a7a      	ldr	r2, [pc, #488]	; (800afc4 <HAL_DMA_IRQHandler+0xa08>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d04a      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a79      	ldr	r2, [pc, #484]	; (800afc8 <HAL_DMA_IRQHandler+0xa0c>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d045      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a77      	ldr	r2, [pc, #476]	; (800afcc <HAL_DMA_IRQHandler+0xa10>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d040      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a76      	ldr	r2, [pc, #472]	; (800afd0 <HAL_DMA_IRQHandler+0xa14>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d03b      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a74      	ldr	r2, [pc, #464]	; (800afd4 <HAL_DMA_IRQHandler+0xa18>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d036      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a73      	ldr	r2, [pc, #460]	; (800afd8 <HAL_DMA_IRQHandler+0xa1c>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d031      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a71      	ldr	r2, [pc, #452]	; (800afdc <HAL_DMA_IRQHandler+0xa20>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d02c      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a70      	ldr	r2, [pc, #448]	; (800afe0 <HAL_DMA_IRQHandler+0xa24>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d027      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a6e      	ldr	r2, [pc, #440]	; (800afe4 <HAL_DMA_IRQHandler+0xa28>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d022      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a6d      	ldr	r2, [pc, #436]	; (800afe8 <HAL_DMA_IRQHandler+0xa2c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d01d      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a6b      	ldr	r2, [pc, #428]	; (800afec <HAL_DMA_IRQHandler+0xa30>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d018      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a6a      	ldr	r2, [pc, #424]	; (800aff0 <HAL_DMA_IRQHandler+0xa34>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d013      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a68      	ldr	r2, [pc, #416]	; (800aff4 <HAL_DMA_IRQHandler+0xa38>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00e      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a67      	ldr	r2, [pc, #412]	; (800aff8 <HAL_DMA_IRQHandler+0xa3c>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d009      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a65      	ldr	r2, [pc, #404]	; (800affc <HAL_DMA_IRQHandler+0xa40>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d004      	beq.n	800ae74 <HAL_DMA_IRQHandler+0x8b8>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a64      	ldr	r2, [pc, #400]	; (800b000 <HAL_DMA_IRQHandler+0xa44>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d108      	bne.n	800ae86 <HAL_DMA_IRQHandler+0x8ca>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f022 0201 	bic.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	e007      	b.n	800ae96 <HAL_DMA_IRQHandler+0x8da>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 0201 	bic.w	r2, r2, #1
 800ae94:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d307      	bcc.n	800aeb2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1f2      	bne.n	800ae96 <HAL_DMA_IRQHandler+0x8da>
 800aeb0:	e000      	b.n	800aeb4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800aeb2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d004      	beq.n	800aecc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2203      	movs	r2, #3
 800aec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800aeca:	e003      	b.n	800aed4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 8272 	beq.w	800b3ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	4798      	blx	r3
 800aeee:	e26c      	b.n	800b3ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a43      	ldr	r2, [pc, #268]	; (800b004 <HAL_DMA_IRQHandler+0xa48>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d022      	beq.n	800af40 <HAL_DMA_IRQHandler+0x984>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a42      	ldr	r2, [pc, #264]	; (800b008 <HAL_DMA_IRQHandler+0xa4c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d01d      	beq.n	800af40 <HAL_DMA_IRQHandler+0x984>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a40      	ldr	r2, [pc, #256]	; (800b00c <HAL_DMA_IRQHandler+0xa50>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d018      	beq.n	800af40 <HAL_DMA_IRQHandler+0x984>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a3f      	ldr	r2, [pc, #252]	; (800b010 <HAL_DMA_IRQHandler+0xa54>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d013      	beq.n	800af40 <HAL_DMA_IRQHandler+0x984>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a3d      	ldr	r2, [pc, #244]	; (800b014 <HAL_DMA_IRQHandler+0xa58>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d00e      	beq.n	800af40 <HAL_DMA_IRQHandler+0x984>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a3c      	ldr	r2, [pc, #240]	; (800b018 <HAL_DMA_IRQHandler+0xa5c>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d009      	beq.n	800af40 <HAL_DMA_IRQHandler+0x984>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a3a      	ldr	r2, [pc, #232]	; (800b01c <HAL_DMA_IRQHandler+0xa60>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d004      	beq.n	800af40 <HAL_DMA_IRQHandler+0x984>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a39      	ldr	r2, [pc, #228]	; (800b020 <HAL_DMA_IRQHandler+0xa64>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d101      	bne.n	800af44 <HAL_DMA_IRQHandler+0x988>
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <HAL_DMA_IRQHandler+0x98a>
 800af44:	2300      	movs	r3, #0
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 823f 	beq.w	800b3ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af58:	f003 031f 	and.w	r3, r3, #31
 800af5c:	2204      	movs	r2, #4
 800af5e:	409a      	lsls	r2, r3
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	4013      	ands	r3, r2
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 80cd 	beq.w	800b104 <HAL_DMA_IRQHandler+0xb48>
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 80c7 	beq.w	800b104 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af7a:	f003 031f 	and.w	r3, r3, #31
 800af7e:	2204      	movs	r2, #4
 800af80:	409a      	lsls	r2, r3
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d049      	beq.n	800b024 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d109      	bne.n	800afae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 8210 	beq.w	800b3c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800afac:	e20a      	b.n	800b3c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	f000 8206 	beq.w	800b3c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800afc0:	e200      	b.n	800b3c4 <HAL_DMA_IRQHandler+0xe08>
 800afc2:	bf00      	nop
 800afc4:	40020010 	.word	0x40020010
 800afc8:	40020028 	.word	0x40020028
 800afcc:	40020040 	.word	0x40020040
 800afd0:	40020058 	.word	0x40020058
 800afd4:	40020070 	.word	0x40020070
 800afd8:	40020088 	.word	0x40020088
 800afdc:	400200a0 	.word	0x400200a0
 800afe0:	400200b8 	.word	0x400200b8
 800afe4:	40020410 	.word	0x40020410
 800afe8:	40020428 	.word	0x40020428
 800afec:	40020440 	.word	0x40020440
 800aff0:	40020458 	.word	0x40020458
 800aff4:	40020470 	.word	0x40020470
 800aff8:	40020488 	.word	0x40020488
 800affc:	400204a0 	.word	0x400204a0
 800b000:	400204b8 	.word	0x400204b8
 800b004:	58025408 	.word	0x58025408
 800b008:	5802541c 	.word	0x5802541c
 800b00c:	58025430 	.word	0x58025430
 800b010:	58025444 	.word	0x58025444
 800b014:	58025458 	.word	0x58025458
 800b018:	5802546c 	.word	0x5802546c
 800b01c:	58025480 	.word	0x58025480
 800b020:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	f003 0320 	and.w	r3, r3, #32
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d160      	bne.n	800b0f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a7f      	ldr	r2, [pc, #508]	; (800b230 <HAL_DMA_IRQHandler+0xc74>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d04a      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a7d      	ldr	r2, [pc, #500]	; (800b234 <HAL_DMA_IRQHandler+0xc78>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d045      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a7c      	ldr	r2, [pc, #496]	; (800b238 <HAL_DMA_IRQHandler+0xc7c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d040      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a7a      	ldr	r2, [pc, #488]	; (800b23c <HAL_DMA_IRQHandler+0xc80>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d03b      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a79      	ldr	r2, [pc, #484]	; (800b240 <HAL_DMA_IRQHandler+0xc84>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d036      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a77      	ldr	r2, [pc, #476]	; (800b244 <HAL_DMA_IRQHandler+0xc88>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d031      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a76      	ldr	r2, [pc, #472]	; (800b248 <HAL_DMA_IRQHandler+0xc8c>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d02c      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a74      	ldr	r2, [pc, #464]	; (800b24c <HAL_DMA_IRQHandler+0xc90>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d027      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a73      	ldr	r2, [pc, #460]	; (800b250 <HAL_DMA_IRQHandler+0xc94>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d022      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a71      	ldr	r2, [pc, #452]	; (800b254 <HAL_DMA_IRQHandler+0xc98>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d01d      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a70      	ldr	r2, [pc, #448]	; (800b258 <HAL_DMA_IRQHandler+0xc9c>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d018      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a6e      	ldr	r2, [pc, #440]	; (800b25c <HAL_DMA_IRQHandler+0xca0>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d013      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a6d      	ldr	r2, [pc, #436]	; (800b260 <HAL_DMA_IRQHandler+0xca4>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00e      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a6b      	ldr	r2, [pc, #428]	; (800b264 <HAL_DMA_IRQHandler+0xca8>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d009      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a6a      	ldr	r2, [pc, #424]	; (800b268 <HAL_DMA_IRQHandler+0xcac>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d004      	beq.n	800b0ce <HAL_DMA_IRQHandler+0xb12>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a68      	ldr	r2, [pc, #416]	; (800b26c <HAL_DMA_IRQHandler+0xcb0>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d108      	bne.n	800b0e0 <HAL_DMA_IRQHandler+0xb24>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f022 0208 	bic.w	r2, r2, #8
 800b0dc:	601a      	str	r2, [r3, #0]
 800b0de:	e007      	b.n	800b0f0 <HAL_DMA_IRQHandler+0xb34>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f022 0204 	bic.w	r2, r2, #4
 800b0ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 8165 	beq.w	800b3c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b102:	e15f      	b.n	800b3c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b108:	f003 031f 	and.w	r3, r3, #31
 800b10c:	2202      	movs	r2, #2
 800b10e:	409a      	lsls	r2, r3
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	4013      	ands	r3, r2
 800b114:	2b00      	cmp	r3, #0
 800b116:	f000 80c5 	beq.w	800b2a4 <HAL_DMA_IRQHandler+0xce8>
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 80bf 	beq.w	800b2a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b12a:	f003 031f 	and.w	r3, r3, #31
 800b12e:	2202      	movs	r2, #2
 800b130:	409a      	lsls	r2, r3
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d018      	beq.n	800b172 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b146:	2b00      	cmp	r3, #0
 800b148:	d109      	bne.n	800b15e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 813a 	beq.w	800b3c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b15c:	e134      	b.n	800b3c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b162:	2b00      	cmp	r3, #0
 800b164:	f000 8130 	beq.w	800b3c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b170:	e12a      	b.n	800b3c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f003 0320 	and.w	r3, r3, #32
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f040 8089 	bne.w	800b290 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a2b      	ldr	r2, [pc, #172]	; (800b230 <HAL_DMA_IRQHandler+0xc74>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d04a      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a29      	ldr	r2, [pc, #164]	; (800b234 <HAL_DMA_IRQHandler+0xc78>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d045      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a28      	ldr	r2, [pc, #160]	; (800b238 <HAL_DMA_IRQHandler+0xc7c>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d040      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a26      	ldr	r2, [pc, #152]	; (800b23c <HAL_DMA_IRQHandler+0xc80>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d03b      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a25      	ldr	r2, [pc, #148]	; (800b240 <HAL_DMA_IRQHandler+0xc84>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d036      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a23      	ldr	r2, [pc, #140]	; (800b244 <HAL_DMA_IRQHandler+0xc88>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d031      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a22      	ldr	r2, [pc, #136]	; (800b248 <HAL_DMA_IRQHandler+0xc8c>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d02c      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a20      	ldr	r2, [pc, #128]	; (800b24c <HAL_DMA_IRQHandler+0xc90>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d027      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a1f      	ldr	r2, [pc, #124]	; (800b250 <HAL_DMA_IRQHandler+0xc94>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d022      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a1d      	ldr	r2, [pc, #116]	; (800b254 <HAL_DMA_IRQHandler+0xc98>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d01d      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a1c      	ldr	r2, [pc, #112]	; (800b258 <HAL_DMA_IRQHandler+0xc9c>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d018      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a1a      	ldr	r2, [pc, #104]	; (800b25c <HAL_DMA_IRQHandler+0xca0>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d013      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a19      	ldr	r2, [pc, #100]	; (800b260 <HAL_DMA_IRQHandler+0xca4>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d00e      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a17      	ldr	r2, [pc, #92]	; (800b264 <HAL_DMA_IRQHandler+0xca8>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d009      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a16      	ldr	r2, [pc, #88]	; (800b268 <HAL_DMA_IRQHandler+0xcac>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d004      	beq.n	800b21e <HAL_DMA_IRQHandler+0xc62>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a14      	ldr	r2, [pc, #80]	; (800b26c <HAL_DMA_IRQHandler+0xcb0>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d128      	bne.n	800b270 <HAL_DMA_IRQHandler+0xcb4>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f022 0214 	bic.w	r2, r2, #20
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	e027      	b.n	800b280 <HAL_DMA_IRQHandler+0xcc4>
 800b230:	40020010 	.word	0x40020010
 800b234:	40020028 	.word	0x40020028
 800b238:	40020040 	.word	0x40020040
 800b23c:	40020058 	.word	0x40020058
 800b240:	40020070 	.word	0x40020070
 800b244:	40020088 	.word	0x40020088
 800b248:	400200a0 	.word	0x400200a0
 800b24c:	400200b8 	.word	0x400200b8
 800b250:	40020410 	.word	0x40020410
 800b254:	40020428 	.word	0x40020428
 800b258:	40020440 	.word	0x40020440
 800b25c:	40020458 	.word	0x40020458
 800b260:	40020470 	.word	0x40020470
 800b264:	40020488 	.word	0x40020488
 800b268:	400204a0 	.word	0x400204a0
 800b26c:	400204b8 	.word	0x400204b8
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f022 020a 	bic.w	r2, r2, #10
 800b27e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b294:	2b00      	cmp	r3, #0
 800b296:	f000 8097 	beq.w	800b3c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2a2:	e091      	b.n	800b3c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2a8:	f003 031f 	and.w	r3, r3, #31
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	409a      	lsls	r2, r3
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f000 8088 	beq.w	800b3ca <HAL_DMA_IRQHandler+0xe0e>
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f003 0308 	and.w	r3, r3, #8
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f000 8082 	beq.w	800b3ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a41      	ldr	r2, [pc, #260]	; (800b3d0 <HAL_DMA_IRQHandler+0xe14>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d04a      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a3f      	ldr	r2, [pc, #252]	; (800b3d4 <HAL_DMA_IRQHandler+0xe18>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d045      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a3e      	ldr	r2, [pc, #248]	; (800b3d8 <HAL_DMA_IRQHandler+0xe1c>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d040      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a3c      	ldr	r2, [pc, #240]	; (800b3dc <HAL_DMA_IRQHandler+0xe20>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d03b      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a3b      	ldr	r2, [pc, #236]	; (800b3e0 <HAL_DMA_IRQHandler+0xe24>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d036      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a39      	ldr	r2, [pc, #228]	; (800b3e4 <HAL_DMA_IRQHandler+0xe28>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d031      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a38      	ldr	r2, [pc, #224]	; (800b3e8 <HAL_DMA_IRQHandler+0xe2c>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d02c      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a36      	ldr	r2, [pc, #216]	; (800b3ec <HAL_DMA_IRQHandler+0xe30>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d027      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a35      	ldr	r2, [pc, #212]	; (800b3f0 <HAL_DMA_IRQHandler+0xe34>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d022      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a33      	ldr	r2, [pc, #204]	; (800b3f4 <HAL_DMA_IRQHandler+0xe38>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d01d      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a32      	ldr	r2, [pc, #200]	; (800b3f8 <HAL_DMA_IRQHandler+0xe3c>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d018      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a30      	ldr	r2, [pc, #192]	; (800b3fc <HAL_DMA_IRQHandler+0xe40>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d013      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a2f      	ldr	r2, [pc, #188]	; (800b400 <HAL_DMA_IRQHandler+0xe44>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d00e      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a2d      	ldr	r2, [pc, #180]	; (800b404 <HAL_DMA_IRQHandler+0xe48>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d009      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a2c      	ldr	r2, [pc, #176]	; (800b408 <HAL_DMA_IRQHandler+0xe4c>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d004      	beq.n	800b366 <HAL_DMA_IRQHandler+0xdaa>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a2a      	ldr	r2, [pc, #168]	; (800b40c <HAL_DMA_IRQHandler+0xe50>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d108      	bne.n	800b378 <HAL_DMA_IRQHandler+0xdbc>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f022 021c 	bic.w	r2, r2, #28
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	e007      	b.n	800b388 <HAL_DMA_IRQHandler+0xdcc>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f022 020e 	bic.w	r2, r2, #14
 800b386:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b38c:	f003 031f 	and.w	r3, r3, #31
 800b390:	2201      	movs	r2, #1
 800b392:	409a      	lsls	r2, r3
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	4798      	blx	r3
 800b3be:	e004      	b.n	800b3ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b3c0:	bf00      	nop
 800b3c2:	e002      	b.n	800b3ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b3c4:	bf00      	nop
 800b3c6:	e000      	b.n	800b3ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b3c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b3ca:	3728      	adds	r7, #40	; 0x28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	40020010 	.word	0x40020010
 800b3d4:	40020028 	.word	0x40020028
 800b3d8:	40020040 	.word	0x40020040
 800b3dc:	40020058 	.word	0x40020058
 800b3e0:	40020070 	.word	0x40020070
 800b3e4:	40020088 	.word	0x40020088
 800b3e8:	400200a0 	.word	0x400200a0
 800b3ec:	400200b8 	.word	0x400200b8
 800b3f0:	40020410 	.word	0x40020410
 800b3f4:	40020428 	.word	0x40020428
 800b3f8:	40020440 	.word	0x40020440
 800b3fc:	40020458 	.word	0x40020458
 800b400:	40020470 	.word	0x40020470
 800b404:	40020488 	.word	0x40020488
 800b408:	400204a0 	.word	0x400204a0
 800b40c:	400204b8 	.word	0x400204b8

0800b410 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b41e:	b2db      	uxtb	r3, r3
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a42      	ldr	r2, [pc, #264]	; (800b544 <DMA_CalcBaseAndBitshift+0x118>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d04a      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a41      	ldr	r2, [pc, #260]	; (800b548 <DMA_CalcBaseAndBitshift+0x11c>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d045      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a3f      	ldr	r2, [pc, #252]	; (800b54c <DMA_CalcBaseAndBitshift+0x120>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d040      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a3e      	ldr	r2, [pc, #248]	; (800b550 <DMA_CalcBaseAndBitshift+0x124>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d03b      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a3c      	ldr	r2, [pc, #240]	; (800b554 <DMA_CalcBaseAndBitshift+0x128>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d036      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a3b      	ldr	r2, [pc, #236]	; (800b558 <DMA_CalcBaseAndBitshift+0x12c>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d031      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a39      	ldr	r2, [pc, #228]	; (800b55c <DMA_CalcBaseAndBitshift+0x130>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d02c      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a38      	ldr	r2, [pc, #224]	; (800b560 <DMA_CalcBaseAndBitshift+0x134>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d027      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a36      	ldr	r2, [pc, #216]	; (800b564 <DMA_CalcBaseAndBitshift+0x138>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d022      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a35      	ldr	r2, [pc, #212]	; (800b568 <DMA_CalcBaseAndBitshift+0x13c>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d01d      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a33      	ldr	r2, [pc, #204]	; (800b56c <DMA_CalcBaseAndBitshift+0x140>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d018      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a32      	ldr	r2, [pc, #200]	; (800b570 <DMA_CalcBaseAndBitshift+0x144>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d013      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a30      	ldr	r2, [pc, #192]	; (800b574 <DMA_CalcBaseAndBitshift+0x148>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d00e      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a2f      	ldr	r2, [pc, #188]	; (800b578 <DMA_CalcBaseAndBitshift+0x14c>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d009      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a2d      	ldr	r2, [pc, #180]	; (800b57c <DMA_CalcBaseAndBitshift+0x150>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d004      	beq.n	800b4d4 <DMA_CalcBaseAndBitshift+0xa8>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a2c      	ldr	r2, [pc, #176]	; (800b580 <DMA_CalcBaseAndBitshift+0x154>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d101      	bne.n	800b4d8 <DMA_CalcBaseAndBitshift+0xac>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e000      	b.n	800b4da <DMA_CalcBaseAndBitshift+0xae>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d024      	beq.n	800b528 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	3b10      	subs	r3, #16
 800b4e6:	4a27      	ldr	r2, [pc, #156]	; (800b584 <DMA_CalcBaseAndBitshift+0x158>)
 800b4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ec:	091b      	lsrs	r3, r3, #4
 800b4ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	4a24      	ldr	r2, [pc, #144]	; (800b588 <DMA_CalcBaseAndBitshift+0x15c>)
 800b4f8:	5cd3      	ldrb	r3, [r2, r3]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2b03      	cmp	r3, #3
 800b504:	d908      	bls.n	800b518 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	4b1f      	ldr	r3, [pc, #124]	; (800b58c <DMA_CalcBaseAndBitshift+0x160>)
 800b50e:	4013      	ands	r3, r2
 800b510:	1d1a      	adds	r2, r3, #4
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	659a      	str	r2, [r3, #88]	; 0x58
 800b516:	e00d      	b.n	800b534 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	461a      	mov	r2, r3
 800b51e:	4b1b      	ldr	r3, [pc, #108]	; (800b58c <DMA_CalcBaseAndBitshift+0x160>)
 800b520:	4013      	ands	r3, r2
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	6593      	str	r3, [r2, #88]	; 0x58
 800b526:	e005      	b.n	800b534 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	40020010 	.word	0x40020010
 800b548:	40020028 	.word	0x40020028
 800b54c:	40020040 	.word	0x40020040
 800b550:	40020058 	.word	0x40020058
 800b554:	40020070 	.word	0x40020070
 800b558:	40020088 	.word	0x40020088
 800b55c:	400200a0 	.word	0x400200a0
 800b560:	400200b8 	.word	0x400200b8
 800b564:	40020410 	.word	0x40020410
 800b568:	40020428 	.word	0x40020428
 800b56c:	40020440 	.word	0x40020440
 800b570:	40020458 	.word	0x40020458
 800b574:	40020470 	.word	0x40020470
 800b578:	40020488 	.word	0x40020488
 800b57c:	400204a0 	.word	0x400204a0
 800b580:	400204b8 	.word	0x400204b8
 800b584:	aaaaaaab 	.word	0xaaaaaaab
 800b588:	08034150 	.word	0x08034150
 800b58c:	fffffc00 	.word	0xfffffc00

0800b590 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b598:	2300      	movs	r3, #0
 800b59a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d120      	bne.n	800b5e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d858      	bhi.n	800b65e <DMA_CheckFifoParam+0xce>
 800b5ac:	a201      	add	r2, pc, #4	; (adr r2, 800b5b4 <DMA_CheckFifoParam+0x24>)
 800b5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b2:	bf00      	nop
 800b5b4:	0800b5c5 	.word	0x0800b5c5
 800b5b8:	0800b5d7 	.word	0x0800b5d7
 800b5bc:	0800b5c5 	.word	0x0800b5c5
 800b5c0:	0800b65f 	.word	0x0800b65f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d048      	beq.n	800b662 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b5d4:	e045      	b.n	800b662 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b5de:	d142      	bne.n	800b666 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b5e4:	e03f      	b.n	800b666 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	699b      	ldr	r3, [r3, #24]
 800b5ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ee:	d123      	bne.n	800b638 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d838      	bhi.n	800b66a <DMA_CheckFifoParam+0xda>
 800b5f8:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <DMA_CheckFifoParam+0x70>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b611 	.word	0x0800b611
 800b604:	0800b617 	.word	0x0800b617
 800b608:	0800b611 	.word	0x0800b611
 800b60c:	0800b629 	.word	0x0800b629
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	73fb      	strb	r3, [r7, #15]
        break;
 800b614:	e030      	b.n	800b678 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b61a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d025      	beq.n	800b66e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b626:	e022      	b.n	800b66e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b630:	d11f      	bne.n	800b672 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b636:	e01c      	b.n	800b672 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d902      	bls.n	800b646 <DMA_CheckFifoParam+0xb6>
 800b640:	2b03      	cmp	r3, #3
 800b642:	d003      	beq.n	800b64c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b644:	e018      	b.n	800b678 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	73fb      	strb	r3, [r7, #15]
        break;
 800b64a:	e015      	b.n	800b678 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00e      	beq.n	800b676 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
    break;
 800b65c:	e00b      	b.n	800b676 <DMA_CheckFifoParam+0xe6>
        break;
 800b65e:	bf00      	nop
 800b660:	e00a      	b.n	800b678 <DMA_CheckFifoParam+0xe8>
        break;
 800b662:	bf00      	nop
 800b664:	e008      	b.n	800b678 <DMA_CheckFifoParam+0xe8>
        break;
 800b666:	bf00      	nop
 800b668:	e006      	b.n	800b678 <DMA_CheckFifoParam+0xe8>
        break;
 800b66a:	bf00      	nop
 800b66c:	e004      	b.n	800b678 <DMA_CheckFifoParam+0xe8>
        break;
 800b66e:	bf00      	nop
 800b670:	e002      	b.n	800b678 <DMA_CheckFifoParam+0xe8>
        break;
 800b672:	bf00      	nop
 800b674:	e000      	b.n	800b678 <DMA_CheckFifoParam+0xe8>
    break;
 800b676:	bf00      	nop
    }
  }

  return status;
 800b678:	7bfb      	ldrb	r3, [r7, #15]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop

0800b688 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a38      	ldr	r2, [pc, #224]	; (800b77c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d022      	beq.n	800b6e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a36      	ldr	r2, [pc, #216]	; (800b780 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d01d      	beq.n	800b6e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a35      	ldr	r2, [pc, #212]	; (800b784 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d018      	beq.n	800b6e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a33      	ldr	r2, [pc, #204]	; (800b788 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d013      	beq.n	800b6e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a32      	ldr	r2, [pc, #200]	; (800b78c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00e      	beq.n	800b6e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a30      	ldr	r2, [pc, #192]	; (800b790 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d009      	beq.n	800b6e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a2f      	ldr	r2, [pc, #188]	; (800b794 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d004      	beq.n	800b6e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a2d      	ldr	r2, [pc, #180]	; (800b798 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d101      	bne.n	800b6ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e000      	b.n	800b6ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d01a      	beq.n	800b726 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	3b08      	subs	r3, #8
 800b6f8:	4a28      	ldr	r2, [pc, #160]	; (800b79c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b6fe:	091b      	lsrs	r3, r3, #4
 800b700:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	4b26      	ldr	r3, [pc, #152]	; (800b7a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b706:	4413      	add	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	461a      	mov	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a24      	ldr	r2, [pc, #144]	; (800b7a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b714:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f003 031f 	and.w	r3, r3, #31
 800b71c:	2201      	movs	r2, #1
 800b71e:	409a      	lsls	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b724:	e024      	b.n	800b770 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	3b10      	subs	r3, #16
 800b72e:	4a1e      	ldr	r2, [pc, #120]	; (800b7a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b730:	fba2 2303 	umull	r2, r3, r2, r3
 800b734:	091b      	lsrs	r3, r3, #4
 800b736:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	4a1c      	ldr	r2, [pc, #112]	; (800b7ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d806      	bhi.n	800b74e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	4a1b      	ldr	r2, [pc, #108]	; (800b7b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d902      	bls.n	800b74e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	3308      	adds	r3, #8
 800b74c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	4b18      	ldr	r3, [pc, #96]	; (800b7b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b752:	4413      	add	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	461a      	mov	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a16      	ldr	r2, [pc, #88]	; (800b7b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b760:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f003 031f 	and.w	r3, r3, #31
 800b768:	2201      	movs	r2, #1
 800b76a:	409a      	lsls	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b770:	bf00      	nop
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	58025408 	.word	0x58025408
 800b780:	5802541c 	.word	0x5802541c
 800b784:	58025430 	.word	0x58025430
 800b788:	58025444 	.word	0x58025444
 800b78c:	58025458 	.word	0x58025458
 800b790:	5802546c 	.word	0x5802546c
 800b794:	58025480 	.word	0x58025480
 800b798:	58025494 	.word	0x58025494
 800b79c:	cccccccd 	.word	0xcccccccd
 800b7a0:	16009600 	.word	0x16009600
 800b7a4:	58025880 	.word	0x58025880
 800b7a8:	aaaaaaab 	.word	0xaaaaaaab
 800b7ac:	400204b8 	.word	0x400204b8
 800b7b0:	4002040f 	.word	0x4002040f
 800b7b4:	10008200 	.word	0x10008200
 800b7b8:	40020880 	.word	0x40020880

0800b7bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d04a      	beq.n	800b868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2b08      	cmp	r3, #8
 800b7d6:	d847      	bhi.n	800b868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a25      	ldr	r2, [pc, #148]	; (800b874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d022      	beq.n	800b828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a24      	ldr	r2, [pc, #144]	; (800b878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d01d      	beq.n	800b828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a22      	ldr	r2, [pc, #136]	; (800b87c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d018      	beq.n	800b828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a21      	ldr	r2, [pc, #132]	; (800b880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d013      	beq.n	800b828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a1f      	ldr	r2, [pc, #124]	; (800b884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d00e      	beq.n	800b828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a1e      	ldr	r2, [pc, #120]	; (800b888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d009      	beq.n	800b828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a1c      	ldr	r2, [pc, #112]	; (800b88c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d004      	beq.n	800b828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a1b      	ldr	r2, [pc, #108]	; (800b890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d101      	bne.n	800b82c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b828:	2301      	movs	r3, #1
 800b82a:	e000      	b.n	800b82e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b82c:	2300      	movs	r3, #0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00a      	beq.n	800b848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	4b17      	ldr	r3, [pc, #92]	; (800b894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b836:	4413      	add	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	461a      	mov	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a15      	ldr	r2, [pc, #84]	; (800b898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b844:	671a      	str	r2, [r3, #112]	; 0x70
 800b846:	e009      	b.n	800b85c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	4b14      	ldr	r3, [pc, #80]	; (800b89c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b84c:	4413      	add	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	461a      	mov	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a11      	ldr	r2, [pc, #68]	; (800b8a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b85a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3b01      	subs	r3, #1
 800b860:	2201      	movs	r2, #1
 800b862:	409a      	lsls	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b868:	bf00      	nop
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	58025408 	.word	0x58025408
 800b878:	5802541c 	.word	0x5802541c
 800b87c:	58025430 	.word	0x58025430
 800b880:	58025444 	.word	0x58025444
 800b884:	58025458 	.word	0x58025458
 800b888:	5802546c 	.word	0x5802546c
 800b88c:	58025480 	.word	0x58025480
 800b890:	58025494 	.word	0x58025494
 800b894:	1600963f 	.word	0x1600963f
 800b898:	58025940 	.word	0x58025940
 800b89c:	1000823f 	.word	0x1000823f
 800b8a0:	40020940 	.word	0x40020940

0800b8a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b089      	sub	sp, #36	; 0x24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b8b2:	4b89      	ldr	r3, [pc, #548]	; (800bad8 <HAL_GPIO_Init+0x234>)
 800b8b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b8b6:	e194      	b.n	800bbe2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	2101      	movs	r1, #1
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	f000 8186 	beq.w	800bbdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	f003 0303 	and.w	r3, r3, #3
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d005      	beq.n	800b8e8 <HAL_GPIO_Init+0x44>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d130      	bne.n	800b94a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f8:	43db      	mvns	r3, r3
 800b8fa:	69ba      	ldr	r2, [r7, #24]
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	005b      	lsls	r3, r3, #1
 800b908:	fa02 f303 	lsl.w	r3, r2, r3
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	4313      	orrs	r3, r2
 800b910:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b91e:	2201      	movs	r2, #1
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	fa02 f303 	lsl.w	r3, r2, r3
 800b926:	43db      	mvns	r3, r3
 800b928:	69ba      	ldr	r2, [r7, #24]
 800b92a:	4013      	ands	r3, r2
 800b92c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	091b      	lsrs	r3, r3, #4
 800b934:	f003 0201 	and.w	r2, r3, #1
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	fa02 f303 	lsl.w	r3, r2, r3
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	4313      	orrs	r3, r2
 800b942:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	69ba      	ldr	r2, [r7, #24]
 800b948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b03      	cmp	r3, #3
 800b954:	d017      	beq.n	800b986 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	2203      	movs	r2, #3
 800b962:	fa02 f303 	lsl.w	r3, r2, r3
 800b966:	43db      	mvns	r3, r3
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	4013      	ands	r3, r2
 800b96c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	689a      	ldr	r2, [r3, #8]
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	fa02 f303 	lsl.w	r3, r2, r3
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d123      	bne.n	800b9da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	08da      	lsrs	r2, r3, #3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	3208      	adds	r2, #8
 800b99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	f003 0307 	and.w	r3, r3, #7
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	220f      	movs	r2, #15
 800b9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ae:	43db      	mvns	r3, r3
 800b9b0:	69ba      	ldr	r2, [r7, #24]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	691a      	ldr	r2, [r3, #16]
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	f003 0307 	and.w	r3, r3, #7
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	69ba      	ldr	r2, [r7, #24]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	08da      	lsrs	r2, r3, #3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	3208      	adds	r2, #8
 800b9d4:	69b9      	ldr	r1, [r7, #24]
 800b9d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	005b      	lsls	r3, r3, #1
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ea:	43db      	mvns	r3, r3
 800b9ec:	69ba      	ldr	r2, [r7, #24]
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f003 0203 	and.w	r2, r3, #3
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	69ba      	ldr	r2, [r7, #24]
 800ba0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 80e0 	beq.w	800bbdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ba1c:	4b2f      	ldr	r3, [pc, #188]	; (800badc <HAL_GPIO_Init+0x238>)
 800ba1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba22:	4a2e      	ldr	r2, [pc, #184]	; (800badc <HAL_GPIO_Init+0x238>)
 800ba24:	f043 0302 	orr.w	r3, r3, #2
 800ba28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ba2c:	4b2b      	ldr	r3, [pc, #172]	; (800badc <HAL_GPIO_Init+0x238>)
 800ba2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	60fb      	str	r3, [r7, #12]
 800ba38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ba3a:	4a29      	ldr	r2, [pc, #164]	; (800bae0 <HAL_GPIO_Init+0x23c>)
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	089b      	lsrs	r3, r3, #2
 800ba40:	3302      	adds	r3, #2
 800ba42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	f003 0303 	and.w	r3, r3, #3
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	220f      	movs	r2, #15
 800ba52:	fa02 f303 	lsl.w	r3, r2, r3
 800ba56:	43db      	mvns	r3, r3
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a20      	ldr	r2, [pc, #128]	; (800bae4 <HAL_GPIO_Init+0x240>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d052      	beq.n	800bb0c <HAL_GPIO_Init+0x268>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a1f      	ldr	r2, [pc, #124]	; (800bae8 <HAL_GPIO_Init+0x244>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d031      	beq.n	800bad2 <HAL_GPIO_Init+0x22e>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a1e      	ldr	r2, [pc, #120]	; (800baec <HAL_GPIO_Init+0x248>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d02b      	beq.n	800bace <HAL_GPIO_Init+0x22a>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a1d      	ldr	r2, [pc, #116]	; (800baf0 <HAL_GPIO_Init+0x24c>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d025      	beq.n	800baca <HAL_GPIO_Init+0x226>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a1c      	ldr	r2, [pc, #112]	; (800baf4 <HAL_GPIO_Init+0x250>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d01f      	beq.n	800bac6 <HAL_GPIO_Init+0x222>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a1b      	ldr	r2, [pc, #108]	; (800baf8 <HAL_GPIO_Init+0x254>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d019      	beq.n	800bac2 <HAL_GPIO_Init+0x21e>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a1a      	ldr	r2, [pc, #104]	; (800bafc <HAL_GPIO_Init+0x258>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d013      	beq.n	800babe <HAL_GPIO_Init+0x21a>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	4a19      	ldr	r2, [pc, #100]	; (800bb00 <HAL_GPIO_Init+0x25c>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d00d      	beq.n	800baba <HAL_GPIO_Init+0x216>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a18      	ldr	r2, [pc, #96]	; (800bb04 <HAL_GPIO_Init+0x260>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d007      	beq.n	800bab6 <HAL_GPIO_Init+0x212>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4a17      	ldr	r2, [pc, #92]	; (800bb08 <HAL_GPIO_Init+0x264>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d101      	bne.n	800bab2 <HAL_GPIO_Init+0x20e>
 800baae:	2309      	movs	r3, #9
 800bab0:	e02d      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bab2:	230a      	movs	r3, #10
 800bab4:	e02b      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bab6:	2308      	movs	r3, #8
 800bab8:	e029      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800baba:	2307      	movs	r3, #7
 800babc:	e027      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800babe:	2306      	movs	r3, #6
 800bac0:	e025      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bac2:	2305      	movs	r3, #5
 800bac4:	e023      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bac6:	2304      	movs	r3, #4
 800bac8:	e021      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800baca:	2303      	movs	r3, #3
 800bacc:	e01f      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bace:	2302      	movs	r3, #2
 800bad0:	e01d      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e01b      	b.n	800bb0e <HAL_GPIO_Init+0x26a>
 800bad6:	bf00      	nop
 800bad8:	58000080 	.word	0x58000080
 800badc:	58024400 	.word	0x58024400
 800bae0:	58000400 	.word	0x58000400
 800bae4:	58020000 	.word	0x58020000
 800bae8:	58020400 	.word	0x58020400
 800baec:	58020800 	.word	0x58020800
 800baf0:	58020c00 	.word	0x58020c00
 800baf4:	58021000 	.word	0x58021000
 800baf8:	58021400 	.word	0x58021400
 800bafc:	58021800 	.word	0x58021800
 800bb00:	58021c00 	.word	0x58021c00
 800bb04:	58022000 	.word	0x58022000
 800bb08:	58022400 	.word	0x58022400
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	69fa      	ldr	r2, [r7, #28]
 800bb10:	f002 0203 	and.w	r2, r2, #3
 800bb14:	0092      	lsls	r2, r2, #2
 800bb16:	4093      	lsls	r3, r2
 800bb18:	69ba      	ldr	r2, [r7, #24]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bb1e:	4938      	ldr	r1, [pc, #224]	; (800bc00 <HAL_GPIO_Init+0x35c>)
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	089b      	lsrs	r3, r3, #2
 800bb24:	3302      	adds	r3, #2
 800bb26:	69ba      	ldr	r2, [r7, #24]
 800bb28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bb2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	43db      	mvns	r3, r3
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d003      	beq.n	800bb52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bb52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bb5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	43db      	mvns	r3, r3
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800bb78:	69ba      	ldr	r2, [r7, #24]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bb80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	43db      	mvns	r3, r3
 800bb92:	69ba      	ldr	r2, [r7, #24]
 800bb94:	4013      	ands	r3, r2
 800bb96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800bba4:	69ba      	ldr	r2, [r7, #24]
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	69ba      	ldr	r2, [r7, #24]
 800bbb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	43db      	mvns	r3, r3
 800bbbc:	69ba      	ldr	r2, [r7, #24]
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f47f ae63 	bne.w	800b8b8 <HAL_GPIO_Init+0x14>
  }
}
 800bbf2:	bf00      	nop
 800bbf4:	bf00      	nop
 800bbf6:	3724      	adds	r7, #36	; 0x24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	58000400 	.word	0x58000400

0800bc04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	807b      	strh	r3, [r7, #2]
 800bc10:	4613      	mov	r3, r2
 800bc12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bc14:	787b      	ldrb	r3, [r7, #1]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bc1a:	887a      	ldrh	r2, [r7, #2]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800bc20:	e003      	b.n	800bc2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bc22:	887b      	ldrh	r3, [r7, #2]
 800bc24:	041a      	lsls	r2, r3, #16
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	619a      	str	r2, [r3, #24]
}
 800bc2a:	bf00      	nop
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
	...

0800bc38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	e07f      	b.n	800bd4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7fb fd34 	bl	80076cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2224      	movs	r2, #36	; 0x24
 800bc68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f022 0201 	bic.w	r2, r2, #1
 800bc7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bc88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	689a      	ldr	r2, [r3, #8]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d107      	bne.n	800bcb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	689a      	ldr	r2, [r3, #8]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcae:	609a      	str	r2, [r3, #8]
 800bcb0:	e006      	b.n	800bcc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	689a      	ldr	r2, [r3, #8]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bcbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d104      	bne.n	800bcd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6859      	ldr	r1, [r3, #4]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	4b1d      	ldr	r3, [pc, #116]	; (800bd54 <HAL_I2C_Init+0x11c>)
 800bcde:	430b      	orrs	r3, r1
 800bce0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68da      	ldr	r2, [r3, #12]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bcf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	691a      	ldr	r2, [r3, #16]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	69d9      	ldr	r1, [r3, #28]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a1a      	ldr	r2, [r3, #32]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f042 0201 	orr.w	r2, r2, #1
 800bd2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	02008000 	.word	0x02008000

0800bd58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d005      	beq.n	800bd84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	4798      	blx	r3
  }
}
 800bd84:	bf00      	nop
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	699b      	ldr	r3, [r3, #24]
 800bd9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	0a1b      	lsrs	r3, r3, #8
 800bda8:	f003 0301 	and.w	r3, r3, #1
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d010      	beq.n	800bdd2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	09db      	lsrs	r3, r3, #7
 800bdb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00a      	beq.n	800bdd2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdc0:	f043 0201 	orr.w	r2, r3, #1
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bdd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	0a9b      	lsrs	r3, r3, #10
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d010      	beq.n	800be00 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	09db      	lsrs	r3, r3, #7
 800bde2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00a      	beq.n	800be00 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdee:	f043 0208 	orr.w	r2, r3, #8
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bdfe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	0a5b      	lsrs	r3, r3, #9
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d010      	beq.n	800be2e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	09db      	lsrs	r3, r3, #7
 800be10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00a      	beq.n	800be2e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be1c:	f043 0202 	orr.w	r2, r3, #2
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be2c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be32:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f003 030b 	and.w	r3, r3, #11
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800be3e:	68f9      	ldr	r1, [r7, #12]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fc77 	bl	800c734 <I2C_ITError>
  }
}
 800be46:	bf00      	nop
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be62:	b480      	push	{r7}
 800be64:	b083      	sub	sp, #12
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800be6a:	bf00      	nop
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	70fb      	strb	r3, [r7, #3]
 800be82:	4613      	mov	r3, r2
 800be84:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800be92:	b480      	push	{r7}
 800be94:	b083      	sub	sp, #12
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800be9a:	bf00      	nop
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800beae:	bf00      	nop
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800beba:	b480      	push	{r7}
 800bebc:	b083      	sub	sp, #12
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bec2:	bf00      	nop
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b086      	sub	sp, #24
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bede:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800beea:	2b01      	cmp	r3, #1
 800beec:	d101      	bne.n	800bef2 <I2C_Slave_ISR_IT+0x24>
 800beee:	2302      	movs	r3, #2
 800bef0:	e0ec      	b.n	800c0cc <I2C_Slave_ISR_IT+0x1fe>
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	095b      	lsrs	r3, r3, #5
 800befe:	f003 0301 	and.w	r3, r3, #1
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d009      	beq.n	800bf1a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	095b      	lsrs	r3, r3, #5
 800bf0a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bf12:	6939      	ldr	r1, [r7, #16]
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 f9bf 	bl	800c298 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	091b      	lsrs	r3, r3, #4
 800bf1e:	f003 0301 	and.w	r3, r3, #1
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d04d      	beq.n	800bfc2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	091b      	lsrs	r3, r3, #4
 800bf2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d047      	beq.n	800bfc2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d128      	bne.n	800bf8e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	2b28      	cmp	r3, #40	; 0x28
 800bf46:	d108      	bne.n	800bf5a <I2C_Slave_ISR_IT+0x8c>
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf4e:	d104      	bne.n	800bf5a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bf50:	6939      	ldr	r1, [r7, #16]
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 fb98 	bl	800c688 <I2C_ITListenCplt>
 800bf58:	e032      	b.n	800bfc0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	2b29      	cmp	r3, #41	; 0x29
 800bf64:	d10e      	bne.n	800bf84 <I2C_Slave_ISR_IT+0xb6>
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bf6c:	d00a      	beq.n	800bf84 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2210      	movs	r2, #16
 800bf74:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f000 fcd3 	bl	800c922 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 f92d 	bl	800c1dc <I2C_ITSlaveSeqCplt>
 800bf82:	e01d      	b.n	800bfc0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2210      	movs	r2, #16
 800bf8a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bf8c:	e096      	b.n	800c0bc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2210      	movs	r2, #16
 800bf94:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9a:	f043 0204 	orr.w	r2, r3, #4
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <I2C_Slave_ISR_IT+0xe4>
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bfae:	f040 8085 	bne.w	800c0bc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 fbbb 	bl	800c734 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800bfbe:	e07d      	b.n	800c0bc <I2C_Slave_ISR_IT+0x1ee>
 800bfc0:	e07c      	b.n	800c0bc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	089b      	lsrs	r3, r3, #2
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d030      	beq.n	800c030 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	089b      	lsrs	r3, r3, #2
 800bfd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d02a      	beq.n	800c030 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d018      	beq.n	800c016 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfee:	b2d2      	uxtb	r2, r2
 800bff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff6:	1c5a      	adds	r2, r3, #1
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c000:	3b01      	subs	r3, #1
 800c002:	b29a      	uxth	r2, r3
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	3b01      	subs	r3, #1
 800c010:	b29a      	uxth	r2, r3
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d14f      	bne.n	800c0c0 <I2C_Slave_ISR_IT+0x1f2>
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c026:	d04b      	beq.n	800c0c0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 f8d7 	bl	800c1dc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c02e:	e047      	b.n	800c0c0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	08db      	lsrs	r3, r3, #3
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00a      	beq.n	800c052 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	08db      	lsrs	r3, r3, #3
 800c040:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c044:	2b00      	cmp	r3, #0
 800c046:	d004      	beq.n	800c052 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c048:	6939      	ldr	r1, [r7, #16]
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f000 f842 	bl	800c0d4 <I2C_ITAddrCplt>
 800c050:	e037      	b.n	800c0c2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	085b      	lsrs	r3, r3, #1
 800c056:	f003 0301 	and.w	r3, r3, #1
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d031      	beq.n	800c0c2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	085b      	lsrs	r3, r3, #1
 800c062:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c066:	2b00      	cmp	r3, #0
 800c068:	d02b      	beq.n	800c0c2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c06e:	b29b      	uxth	r3, r3
 800c070:	2b00      	cmp	r3, #0
 800c072:	d018      	beq.n	800c0a6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c078:	781a      	ldrb	r2, [r3, #0]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c08e:	b29b      	uxth	r3, r3
 800c090:	3b01      	subs	r3, #1
 800c092:	b29a      	uxth	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c09c:	3b01      	subs	r3, #1
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800c0a4:	e00d      	b.n	800c0c2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c0ac:	d002      	beq.n	800c0b4 <I2C_Slave_ISR_IT+0x1e6>
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	f000 f891 	bl	800c1dc <I2C_ITSlaveSeqCplt>
 800c0ba:	e002      	b.n	800c0c2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800c0bc:	bf00      	nop
 800c0be:	e000      	b.n	800c0c2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800c0c0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c0ea:	2b28      	cmp	r3, #40	; 0x28
 800c0ec:	d16a      	bne.n	800c1c4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	0c1b      	lsrs	r3, r3, #16
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	f003 0301 	and.w	r3, r3, #1
 800c0fc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	0c1b      	lsrs	r3, r3, #16
 800c106:	b29b      	uxth	r3, r3
 800c108:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c10c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	b29b      	uxth	r3, r3
 800c116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c11a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	b29b      	uxth	r3, r3
 800c124:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c128:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d138      	bne.n	800c1a4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c132:	897b      	ldrh	r3, [r7, #10]
 800c134:	09db      	lsrs	r3, r3, #7
 800c136:	b29a      	uxth	r2, r3
 800c138:	89bb      	ldrh	r3, [r7, #12]
 800c13a:	4053      	eors	r3, r2
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	f003 0306 	and.w	r3, r3, #6
 800c142:	2b00      	cmp	r3, #0
 800c144:	d11c      	bne.n	800c180 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c146:	897b      	ldrh	r3, [r7, #10]
 800c148:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d13b      	bne.n	800c1d4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2208      	movs	r2, #8
 800c168:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c172:	89ba      	ldrh	r2, [r7, #12]
 800c174:	7bfb      	ldrb	r3, [r7, #15]
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7ff fe7c 	bl	800be76 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c17e:	e029      	b.n	800c1d4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c180:	893b      	ldrh	r3, [r7, #8]
 800c182:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fc0c 	bl	800c9a6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c196:	89ba      	ldrh	r2, [r7, #12]
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7ff fe6a 	bl	800be76 <HAL_I2C_AddrCallback>
}
 800c1a2:	e017      	b.n	800c1d4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c1a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fbfc 	bl	800c9a6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c1b6:	89ba      	ldrh	r2, [r7, #12]
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff fe5a 	bl	800be76 <HAL_I2C_AddrCallback>
}
 800c1c2:	e007      	b.n	800c1d4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2208      	movs	r2, #8
 800c1ca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c1d4:	bf00      	nop
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	0b9b      	lsrs	r3, r3, #14
 800c1f8:	f003 0301 	and.w	r3, r3, #1
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d008      	beq.n	800c212 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c20e:	601a      	str	r2, [r3, #0]
 800c210:	e00d      	b.n	800c22e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	0bdb      	lsrs	r3, r3, #15
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d007      	beq.n	800c22e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c22c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b29      	cmp	r3, #41	; 0x29
 800c238:	d112      	bne.n	800c260 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2228      	movs	r2, #40	; 0x28
 800c23e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2221      	movs	r2, #33	; 0x21
 800c246:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c248:	2101      	movs	r1, #1
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fbab 	bl	800c9a6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f7ff fdf8 	bl	800be4e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c25e:	e017      	b.n	800c290 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c266:	b2db      	uxtb	r3, r3
 800c268:	2b2a      	cmp	r3, #42	; 0x2a
 800c26a:	d111      	bne.n	800c290 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2228      	movs	r2, #40	; 0x28
 800c270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2222      	movs	r2, #34	; 0x22
 800c278:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c27a:	2102      	movs	r1, #2
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 fb92 	bl	800c9a6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff fde9 	bl	800be62 <HAL_I2C_SlaveRxCpltCallback>
}
 800c290:	bf00      	nop
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2b4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2220      	movs	r2, #32
 800c2bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	2b21      	cmp	r3, #33	; 0x21
 800c2c2:	d002      	beq.n	800c2ca <I2C_ITSlaveCplt+0x32>
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	2b29      	cmp	r3, #41	; 0x29
 800c2c8:	d108      	bne.n	800c2dc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c2ca:	f248 0101 	movw	r1, #32769	; 0x8001
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fb69 	bl	800c9a6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2221      	movs	r2, #33	; 0x21
 800c2d8:	631a      	str	r2, [r3, #48]	; 0x30
 800c2da:	e00d      	b.n	800c2f8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	2b22      	cmp	r3, #34	; 0x22
 800c2e0:	d002      	beq.n	800c2e8 <I2C_ITSlaveCplt+0x50>
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c2e6:	d107      	bne.n	800c2f8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c2e8:	f248 0102 	movw	r1, #32770	; 0x8002
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 fb5a 	bl	800c9a6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2222      	movs	r2, #34	; 0x22
 800c2f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c306:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6859      	ldr	r1, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	4b80      	ldr	r3, [pc, #512]	; (800c514 <I2C_ITSlaveCplt+0x27c>)
 800c314:	400b      	ands	r3, r1
 800c316:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fb02 	bl	800c922 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	0b9b      	lsrs	r3, r3, #14
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	2b00      	cmp	r3, #0
 800c328:	d07a      	beq.n	800c420 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c338:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 8111 	beq.w	800c566 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a73      	ldr	r2, [pc, #460]	; (800c518 <I2C_ITSlaveCplt+0x280>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d059      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a71      	ldr	r2, [pc, #452]	; (800c51c <I2C_ITSlaveCplt+0x284>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d053      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a6f      	ldr	r2, [pc, #444]	; (800c520 <I2C_ITSlaveCplt+0x288>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d04d      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a6d      	ldr	r2, [pc, #436]	; (800c524 <I2C_ITSlaveCplt+0x28c>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d047      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a6b      	ldr	r2, [pc, #428]	; (800c528 <I2C_ITSlaveCplt+0x290>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d041      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4a69      	ldr	r2, [pc, #420]	; (800c52c <I2C_ITSlaveCplt+0x294>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d03b      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4a67      	ldr	r2, [pc, #412]	; (800c530 <I2C_ITSlaveCplt+0x298>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d035      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a65      	ldr	r2, [pc, #404]	; (800c534 <I2C_ITSlaveCplt+0x29c>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d02f      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4a63      	ldr	r2, [pc, #396]	; (800c538 <I2C_ITSlaveCplt+0x2a0>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d029      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a61      	ldr	r2, [pc, #388]	; (800c53c <I2C_ITSlaveCplt+0x2a4>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d023      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a5f      	ldr	r2, [pc, #380]	; (800c540 <I2C_ITSlaveCplt+0x2a8>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d01d      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a5d      	ldr	r2, [pc, #372]	; (800c544 <I2C_ITSlaveCplt+0x2ac>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d017      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a5b      	ldr	r2, [pc, #364]	; (800c548 <I2C_ITSlaveCplt+0x2b0>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d011      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a59      	ldr	r2, [pc, #356]	; (800c54c <I2C_ITSlaveCplt+0x2b4>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d00b      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a57      	ldr	r2, [pc, #348]	; (800c550 <I2C_ITSlaveCplt+0x2b8>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d005      	beq.n	800c404 <I2C_ITSlaveCplt+0x16c>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a55      	ldr	r2, [pc, #340]	; (800c554 <I2C_ITSlaveCplt+0x2bc>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d105      	bne.n	800c410 <I2C_ITSlaveCplt+0x178>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	e004      	b.n	800c41a <I2C_ITSlaveCplt+0x182>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	b29b      	uxth	r3, r3
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c41e:	e0a2      	b.n	800c566 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	0bdb      	lsrs	r3, r3, #15
 800c424:	f003 0301 	and.w	r3, r3, #1
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 809c 	beq.w	800c566 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c43c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c442:	2b00      	cmp	r3, #0
 800c444:	f000 808f 	beq.w	800c566 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a32      	ldr	r2, [pc, #200]	; (800c518 <I2C_ITSlaveCplt+0x280>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d059      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a30      	ldr	r2, [pc, #192]	; (800c51c <I2C_ITSlaveCplt+0x284>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d053      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a2e      	ldr	r2, [pc, #184]	; (800c520 <I2C_ITSlaveCplt+0x288>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d04d      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a2c      	ldr	r2, [pc, #176]	; (800c524 <I2C_ITSlaveCplt+0x28c>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d047      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a2a      	ldr	r2, [pc, #168]	; (800c528 <I2C_ITSlaveCplt+0x290>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d041      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a28      	ldr	r2, [pc, #160]	; (800c52c <I2C_ITSlaveCplt+0x294>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d03b      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a26      	ldr	r2, [pc, #152]	; (800c530 <I2C_ITSlaveCplt+0x298>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d035      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a24      	ldr	r2, [pc, #144]	; (800c534 <I2C_ITSlaveCplt+0x29c>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d02f      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a22      	ldr	r2, [pc, #136]	; (800c538 <I2C_ITSlaveCplt+0x2a0>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d029      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a20      	ldr	r2, [pc, #128]	; (800c53c <I2C_ITSlaveCplt+0x2a4>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d023      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a1e      	ldr	r2, [pc, #120]	; (800c540 <I2C_ITSlaveCplt+0x2a8>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d01d      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a1c      	ldr	r2, [pc, #112]	; (800c544 <I2C_ITSlaveCplt+0x2ac>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d017      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a1a      	ldr	r2, [pc, #104]	; (800c548 <I2C_ITSlaveCplt+0x2b0>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d011      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a18      	ldr	r2, [pc, #96]	; (800c54c <I2C_ITSlaveCplt+0x2b4>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d00b      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a16      	ldr	r2, [pc, #88]	; (800c550 <I2C_ITSlaveCplt+0x2b8>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d005      	beq.n	800c508 <I2C_ITSlaveCplt+0x270>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a14      	ldr	r2, [pc, #80]	; (800c554 <I2C_ITSlaveCplt+0x2bc>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d127      	bne.n	800c558 <I2C_ITSlaveCplt+0x2c0>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	b29b      	uxth	r3, r3
 800c512:	e026      	b.n	800c562 <I2C_ITSlaveCplt+0x2ca>
 800c514:	fe00e800 	.word	0xfe00e800
 800c518:	40020010 	.word	0x40020010
 800c51c:	40020028 	.word	0x40020028
 800c520:	40020040 	.word	0x40020040
 800c524:	40020058 	.word	0x40020058
 800c528:	40020070 	.word	0x40020070
 800c52c:	40020088 	.word	0x40020088
 800c530:	400200a0 	.word	0x400200a0
 800c534:	400200b8 	.word	0x400200b8
 800c538:	40020410 	.word	0x40020410
 800c53c:	40020428 	.word	0x40020428
 800c540:	40020440 	.word	0x40020440
 800c544:	40020458 	.word	0x40020458
 800c548:	40020470 	.word	0x40020470
 800c54c:	40020488 	.word	0x40020488
 800c550:	400204a0 	.word	0x400204a0
 800c554:	400204b8 	.word	0x400204b8
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	b29b      	uxth	r3, r3
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	089b      	lsrs	r3, r3, #2
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d020      	beq.n	800c5b4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f023 0304 	bic.w	r3, r3, #4
 800c578:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c584:	b2d2      	uxtb	r2, r2
 800c586:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	1c5a      	adds	r2, r3, #1
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00c      	beq.n	800c5b4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d005      	beq.n	800c5ca <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5c2:	f043 0204 	orr.w	r2, r3, #4
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d010      	beq.n	800c602 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f8a4 	bl	800c734 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b28      	cmp	r3, #40	; 0x28
 800c5f6:	d141      	bne.n	800c67c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c5f8:	6979      	ldr	r1, [r7, #20]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 f844 	bl	800c688 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c600:	e03c      	b.n	800c67c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c606:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c60a:	d014      	beq.n	800c636 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7ff fde5 	bl	800c1dc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a1b      	ldr	r2, [pc, #108]	; (800c684 <I2C_ITSlaveCplt+0x3ec>)
 800c616:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2220      	movs	r2, #32
 800c61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff fc2f 	bl	800be92 <HAL_I2C_ListenCpltCallback>
}
 800c634:	e022      	b.n	800c67c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	2b22      	cmp	r3, #34	; 0x22
 800c640:	d10e      	bne.n	800c660 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2220      	movs	r2, #32
 800c646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff fc02 	bl	800be62 <HAL_I2C_SlaveRxCpltCallback>
}
 800c65e:	e00d      	b.n	800c67c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2220      	movs	r2, #32
 800c664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff fbe9 	bl	800be4e <HAL_I2C_SlaveTxCpltCallback>
}
 800c67c:	bf00      	nop
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	ffff0000 	.word	0xffff0000

0800c688 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a26      	ldr	r2, [pc, #152]	; (800c730 <I2C_ITListenCplt+0xa8>)
 800c696:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2220      	movs	r2, #32
 800c6a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	089b      	lsrs	r3, r3, #2
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d022      	beq.n	800c706 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ca:	b2d2      	uxtb	r2, r2
 800c6cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d012      	beq.n	800c706 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6fe:	f043 0204 	orr.w	r2, r3, #4
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c706:	f248 0103 	movw	r1, #32771	; 0x8003
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f94b 	bl	800c9a6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2210      	movs	r2, #16
 800c716:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff fbb6 	bl	800be92 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	ffff0000 	.word	0xffff0000

0800c734 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a5d      	ldr	r2, [pc, #372]	; (800c8c8 <I2C_ITError+0x194>)
 800c752:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	431a      	orrs	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	2b28      	cmp	r3, #40	; 0x28
 800c76a:	d005      	beq.n	800c778 <I2C_ITError+0x44>
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	2b29      	cmp	r3, #41	; 0x29
 800c770:	d002      	beq.n	800c778 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	2b2a      	cmp	r3, #42	; 0x2a
 800c776:	d10b      	bne.n	800c790 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c778:	2103      	movs	r1, #3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f913 	bl	800c9a6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2228      	movs	r2, #40	; 0x28
 800c784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a50      	ldr	r2, [pc, #320]	; (800c8cc <I2C_ITError+0x198>)
 800c78c:	635a      	str	r2, [r3, #52]	; 0x34
 800c78e:	e011      	b.n	800c7b4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c790:	f248 0103 	movw	r1, #32771	; 0x8003
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f906 	bl	800c9a6 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b60      	cmp	r3, #96	; 0x60
 800c7a4:	d003      	beq.n	800c7ae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d039      	beq.n	800c836 <I2C_ITError+0x102>
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2b11      	cmp	r3, #17
 800c7c6:	d002      	beq.n	800c7ce <I2C_ITError+0x9a>
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b21      	cmp	r3, #33	; 0x21
 800c7cc:	d133      	bne.n	800c836 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7dc:	d107      	bne.n	800c7ee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c7ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe fe0c 	bl	800b410 <HAL_DMA_GetState>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d017      	beq.n	800c82e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c802:	4a33      	ldr	r2, [pc, #204]	; (800c8d0 <I2C_ITError+0x19c>)
 800c804:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c812:	4618      	mov	r0, r3
 800c814:	f7fd fc8c 	bl	800a130 <HAL_DMA_Abort_IT>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d04d      	beq.n	800c8ba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c828:	4610      	mov	r0, r2
 800c82a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c82c:	e045      	b.n	800c8ba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f850 	bl	800c8d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c834:	e041      	b.n	800c8ba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d039      	beq.n	800c8b2 <I2C_ITError+0x17e>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2b12      	cmp	r3, #18
 800c842:	d002      	beq.n	800c84a <I2C_ITError+0x116>
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2b22      	cmp	r3, #34	; 0x22
 800c848:	d133      	bne.n	800c8b2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c858:	d107      	bne.n	800c86a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c868:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe fdce 	bl	800b410 <HAL_DMA_GetState>
 800c874:	4603      	mov	r3, r0
 800c876:	2b01      	cmp	r3, #1
 800c878:	d017      	beq.n	800c8aa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87e:	4a14      	ldr	r2, [pc, #80]	; (800c8d0 <I2C_ITError+0x19c>)
 800c880:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fd fc4e 	bl	800a130 <HAL_DMA_Abort_IT>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d011      	beq.n	800c8be <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c8a8:	e009      	b.n	800c8be <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f812 	bl	800c8d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c8b0:	e005      	b.n	800c8be <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f80e 	bl	800c8d4 <I2C_TreatErrorCallback>
  }
}
 800c8b8:	e002      	b.n	800c8c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c8ba:	bf00      	nop
 800c8bc:	e000      	b.n	800c8c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c8be:	bf00      	nop
}
 800c8c0:	bf00      	nop
 800c8c2:	3710      	adds	r7, #16
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	ffff0000 	.word	0xffff0000
 800c8cc:	0800becf 	.word	0x0800becf
 800c8d0:	0800c96b 	.word	0x0800c96b

0800c8d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b60      	cmp	r3, #96	; 0x60
 800c8e6:	d10e      	bne.n	800c906 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2220      	movs	r2, #32
 800c8ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff fadb 	bl	800beba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c904:	e009      	b.n	800c91a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff fac6 	bl	800bea6 <HAL_I2C_ErrorCallback>
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c922:	b480      	push	{r7}
 800c924:	b083      	sub	sp, #12
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	699b      	ldr	r3, [r3, #24]
 800c930:	f003 0302 	and.w	r3, r3, #2
 800c934:	2b02      	cmp	r3, #2
 800c936:	d103      	bne.n	800c940 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2200      	movs	r2, #0
 800c93e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d007      	beq.n	800c95e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	699a      	ldr	r2, [r3, #24]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f042 0201 	orr.w	r2, r2, #1
 800c95c:	619a      	str	r2, [r3, #24]
  }
}
 800c95e:	bf00      	nop
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d003      	beq.n	800c988 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c984:	2200      	movs	r2, #0
 800c986:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d003      	beq.n	800c998 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c994:	2200      	movs	r2, #0
 800c996:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff ff9b 	bl	800c8d4 <I2C_TreatErrorCallback>
}
 800c99e:	bf00      	nop
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b085      	sub	sp, #20
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c9b6:	887b      	ldrh	r3, [r7, #2]
 800c9b8:	f003 0301 	and.w	r3, r3, #1
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d00f      	beq.n	800c9e0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800c9c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c9d4:	2b28      	cmp	r3, #40	; 0x28
 800c9d6:	d003      	beq.n	800c9e0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c9de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c9e0:	887b      	ldrh	r3, [r7, #2]
 800c9e2:	f003 0302 	and.w	r3, r3, #2
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00f      	beq.n	800ca0a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800c9f0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c9fe:	2b28      	cmp	r3, #40	; 0x28
 800ca00:	d003      	beq.n	800ca0a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ca08:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ca0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	da03      	bge.n	800ca1a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ca18:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ca1a:	887b      	ldrh	r3, [r7, #2]
 800ca1c:	2b10      	cmp	r3, #16
 800ca1e:	d103      	bne.n	800ca28 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ca26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ca28:	887b      	ldrh	r3, [r7, #2]
 800ca2a:	2b20      	cmp	r3, #32
 800ca2c:	d103      	bne.n	800ca36 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f043 0320 	orr.w	r3, r3, #32
 800ca34:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ca36:	887b      	ldrh	r3, [r7, #2]
 800ca38:	2b40      	cmp	r3, #64	; 0x40
 800ca3a:	d103      	bne.n	800ca44 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca42:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6819      	ldr	r1, [r3, #0]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	43da      	mvns	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	400a      	ands	r2, r1
 800ca54:	601a      	str	r2, [r3, #0]
}
 800ca56:	bf00      	nop
 800ca58:	3714      	adds	r7, #20
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b20      	cmp	r3, #32
 800ca76:	d138      	bne.n	800caea <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d101      	bne.n	800ca86 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ca82:	2302      	movs	r3, #2
 800ca84:	e032      	b.n	800caec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2224      	movs	r2, #36	; 0x24
 800ca92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f022 0201 	bic.w	r2, r2, #1
 800caa4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cab4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	6819      	ldr	r1, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	430a      	orrs	r2, r1
 800cac4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f042 0201 	orr.w	r2, r2, #1
 800cad4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2220      	movs	r2, #32
 800cada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	e000      	b.n	800caec <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800caea:	2302      	movs	r3, #2
  }
}
 800caec:	4618      	mov	r0, r3
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b20      	cmp	r3, #32
 800cb0c:	d139      	bne.n	800cb82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d101      	bne.n	800cb1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800cb18:	2302      	movs	r3, #2
 800cb1a:	e033      	b.n	800cb84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2224      	movs	r2, #36	; 0x24
 800cb28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f022 0201 	bic.w	r2, r2, #1
 800cb3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cb4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	021b      	lsls	r3, r3, #8
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f042 0201 	orr.w	r2, r2, #1
 800cb6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	e000      	b.n	800cb84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800cb82:	2302      	movs	r3, #2
  }
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cb90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb92:	b08f      	sub	sp, #60	; 0x3c
 800cb94:	af0a      	add	r7, sp, #40	; 0x28
 800cb96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d101      	bne.n	800cba2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e116      	b.n	800cdd0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d106      	bne.n	800cbc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f00b fa21 	bl	8018004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2203      	movs	r2, #3
 800cbc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d102      	bne.n	800cbdc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f008 f944 	bl	8014e6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	603b      	str	r3, [r7, #0]
 800cbec:	687e      	ldr	r6, [r7, #4]
 800cbee:	466d      	mov	r5, sp
 800cbf0:	f106 0410 	add.w	r4, r6, #16
 800cbf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cc00:	e885 0003 	stmia.w	r5, {r0, r1}
 800cc04:	1d33      	adds	r3, r6, #4
 800cc06:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc08:	6838      	ldr	r0, [r7, #0]
 800cc0a:	f008 f80f 	bl	8014c2c <USB_CoreInit>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d005      	beq.n	800cc20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2202      	movs	r2, #2
 800cc18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e0d7      	b.n	800cdd0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2100      	movs	r1, #0
 800cc26:	4618      	mov	r0, r3
 800cc28:	f008 f932 	bl	8014e90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73fb      	strb	r3, [r7, #15]
 800cc30:	e04a      	b.n	800ccc8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cc32:	7bfa      	ldrb	r2, [r7, #15]
 800cc34:	6879      	ldr	r1, [r7, #4]
 800cc36:	4613      	mov	r3, r2
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	1a9b      	subs	r3, r3, r2
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	440b      	add	r3, r1
 800cc40:	333d      	adds	r3, #61	; 0x3d
 800cc42:	2201      	movs	r2, #1
 800cc44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cc46:	7bfa      	ldrb	r2, [r7, #15]
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	1a9b      	subs	r3, r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	440b      	add	r3, r1
 800cc54:	333c      	adds	r3, #60	; 0x3c
 800cc56:	7bfa      	ldrb	r2, [r7, #15]
 800cc58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800cc5a:	7bfa      	ldrb	r2, [r7, #15]
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
 800cc5e:	b298      	uxth	r0, r3
 800cc60:	6879      	ldr	r1, [r7, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	1a9b      	subs	r3, r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	440b      	add	r3, r1
 800cc6c:	3342      	adds	r3, #66	; 0x42
 800cc6e:	4602      	mov	r2, r0
 800cc70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cc72:	7bfa      	ldrb	r2, [r7, #15]
 800cc74:	6879      	ldr	r1, [r7, #4]
 800cc76:	4613      	mov	r3, r2
 800cc78:	00db      	lsls	r3, r3, #3
 800cc7a:	1a9b      	subs	r3, r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	440b      	add	r3, r1
 800cc80:	333f      	adds	r3, #63	; 0x3f
 800cc82:	2200      	movs	r2, #0
 800cc84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cc86:	7bfa      	ldrb	r2, [r7, #15]
 800cc88:	6879      	ldr	r1, [r7, #4]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	1a9b      	subs	r3, r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	440b      	add	r3, r1
 800cc94:	3344      	adds	r3, #68	; 0x44
 800cc96:	2200      	movs	r2, #0
 800cc98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cc9a:	7bfa      	ldrb	r2, [r7, #15]
 800cc9c:	6879      	ldr	r1, [r7, #4]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	1a9b      	subs	r3, r3, r2
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	440b      	add	r3, r1
 800cca8:	3348      	adds	r3, #72	; 0x48
 800ccaa:	2200      	movs	r2, #0
 800ccac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ccae:	7bfa      	ldrb	r2, [r7, #15]
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	1a9b      	subs	r3, r3, r2
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	440b      	add	r3, r1
 800ccbc:	3350      	adds	r3, #80	; 0x50
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	73fb      	strb	r3, [r7, #15]
 800ccc8:	7bfa      	ldrb	r2, [r7, #15]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d3af      	bcc.n	800cc32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	73fb      	strb	r3, [r7, #15]
 800ccd6:	e044      	b.n	800cd62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ccd8:	7bfa      	ldrb	r2, [r7, #15]
 800ccda:	6879      	ldr	r1, [r7, #4]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	1a9b      	subs	r3, r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	440b      	add	r3, r1
 800cce6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ccea:	2200      	movs	r2, #0
 800ccec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ccee:	7bfa      	ldrb	r2, [r7, #15]
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	00db      	lsls	r3, r3, #3
 800ccf6:	1a9b      	subs	r3, r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	440b      	add	r3, r1
 800ccfc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800cd00:	7bfa      	ldrb	r2, [r7, #15]
 800cd02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cd04:	7bfa      	ldrb	r2, [r7, #15]
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	1a9b      	subs	r3, r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	440b      	add	r3, r1
 800cd12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cd16:	2200      	movs	r2, #0
 800cd18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cd1a:	7bfa      	ldrb	r2, [r7, #15]
 800cd1c:	6879      	ldr	r1, [r7, #4]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	00db      	lsls	r3, r3, #3
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	440b      	add	r3, r1
 800cd28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cd30:	7bfa      	ldrb	r2, [r7, #15]
 800cd32:	6879      	ldr	r1, [r7, #4]
 800cd34:	4613      	mov	r3, r2
 800cd36:	00db      	lsls	r3, r3, #3
 800cd38:	1a9b      	subs	r3, r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	440b      	add	r3, r1
 800cd3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cd46:	7bfa      	ldrb	r2, [r7, #15]
 800cd48:	6879      	ldr	r1, [r7, #4]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	1a9b      	subs	r3, r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	440b      	add	r3, r1
 800cd54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd5c:	7bfb      	ldrb	r3, [r7, #15]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	73fb      	strb	r3, [r7, #15]
 800cd62:	7bfa      	ldrb	r2, [r7, #15]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d3b5      	bcc.n	800ccd8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	603b      	str	r3, [r7, #0]
 800cd72:	687e      	ldr	r6, [r7, #4]
 800cd74:	466d      	mov	r5, sp
 800cd76:	f106 0410 	add.w	r4, r6, #16
 800cd7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd82:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cd86:	e885 0003 	stmia.w	r5, {r0, r1}
 800cd8a:	1d33      	adds	r3, r6, #4
 800cd8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd8e:	6838      	ldr	r0, [r7, #0]
 800cd90:	f008 f8ca 	bl	8014f28 <USB_DevInit>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d005      	beq.n	800cda6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e014      	b.n	800cdd0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d102      	bne.n	800cdc4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f001 f886 	bl	800ded0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f009 f962 	bl	8016092 <USB_DevDisconnect>

  return HAL_OK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3714      	adds	r7, #20
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d101      	bne.n	800cdf4 <HAL_PCD_Start+0x1c>
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	e020      	b.n	800ce36 <HAL_PCD_Start+0x5e>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d109      	bne.n	800ce18 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d005      	beq.n	800ce18 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f008 f815 	bl	8014e4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f009 f912 	bl	8016050 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ce3e:	b590      	push	{r4, r7, lr}
 800ce40:	b08d      	sub	sp, #52	; 0x34
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce4c:	6a3b      	ldr	r3, [r7, #32]
 800ce4e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f009 f9d0 	bl	80161fa <USB_GetMode>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f040 83be 	bne.w	800d5de <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f009 f934 	bl	80160d4 <USB_ReadInterrupts>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f000 83b4 	beq.w	800d5dc <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f009 f92b 	bl	80160d4 <USB_ReadInterrupts>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	f003 0302 	and.w	r3, r3, #2
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d107      	bne.n	800ce98 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	695a      	ldr	r2, [r3, #20]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f002 0202 	and.w	r2, r2, #2
 800ce96:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f009 f919 	bl	80160d4 <USB_ReadInterrupts>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f003 0310 	and.w	r3, r3, #16
 800cea8:	2b10      	cmp	r3, #16
 800ceaa:	d161      	bne.n	800cf70 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699a      	ldr	r2, [r3, #24]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 0210 	bic.w	r2, r2, #16
 800ceba:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	6a1b      	ldr	r3, [r3, #32]
 800cec0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	f003 020f 	and.w	r2, r3, #15
 800cec8:	4613      	mov	r3, r2
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	4413      	add	r3, r2
 800ced8:	3304      	adds	r3, #4
 800ceda:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	0c5b      	lsrs	r3, r3, #17
 800cee0:	f003 030f 	and.w	r3, r3, #15
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d124      	bne.n	800cf32 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800cee8:	69ba      	ldr	r2, [r7, #24]
 800ceea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800ceee:	4013      	ands	r3, r2
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d035      	beq.n	800cf60 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	091b      	lsrs	r3, r3, #4
 800cefc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cefe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	461a      	mov	r2, r3
 800cf06:	6a38      	ldr	r0, [r7, #32]
 800cf08:	f008 ff50 	bl	8015dac <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	68da      	ldr	r2, [r3, #12]
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	091b      	lsrs	r3, r3, #4
 800cf14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf18:	441a      	add	r2, r3
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	699a      	ldr	r2, [r3, #24]
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	091b      	lsrs	r3, r3, #4
 800cf26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf2a:	441a      	add	r2, r3
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	619a      	str	r2, [r3, #24]
 800cf30:	e016      	b.n	800cf60 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	0c5b      	lsrs	r3, r3, #17
 800cf36:	f003 030f 	and.w	r3, r3, #15
 800cf3a:	2b06      	cmp	r3, #6
 800cf3c:	d110      	bne.n	800cf60 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cf44:	2208      	movs	r2, #8
 800cf46:	4619      	mov	r1, r3
 800cf48:	6a38      	ldr	r0, [r7, #32]
 800cf4a:	f008 ff2f 	bl	8015dac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	699a      	ldr	r2, [r3, #24]
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	091b      	lsrs	r3, r3, #4
 800cf56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf5a:	441a      	add	r2, r3
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	699a      	ldr	r2, [r3, #24]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f042 0210 	orr.w	r2, r2, #16
 800cf6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f009 f8ad 	bl	80160d4 <USB_ReadInterrupts>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cf80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cf84:	d16e      	bne.n	800d064 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800cf86:	2300      	movs	r3, #0
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f009 f8b3 	bl	80160fa <USB_ReadDevAllOutEpInterrupt>
 800cf94:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800cf96:	e062      	b.n	800d05e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800cf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d057      	beq.n	800d052 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfa8:	b2d2      	uxtb	r2, r2
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4618      	mov	r0, r3
 800cfae:	f009 f8d8 	bl	8016162 <USB_ReadDevOutEPInterrupt>
 800cfb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00c      	beq.n	800cfd8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfca:	461a      	mov	r2, r3
 800cfcc:	2301      	movs	r3, #1
 800cfce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800cfd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 fdd2 	bl	800db7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	f003 0308 	and.w	r3, r3, #8
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00c      	beq.n	800cffc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe4:	015a      	lsls	r2, r3, #5
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	4413      	add	r3, r2
 800cfea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfee:	461a      	mov	r2, r3
 800cff0:	2308      	movs	r3, #8
 800cff2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800cff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fecc 	bl	800dd94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	f003 0310 	and.w	r3, r3, #16
 800d002:	2b00      	cmp	r3, #0
 800d004:	d008      	beq.n	800d018 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d008:	015a      	lsls	r2, r3, #5
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	4413      	add	r3, r2
 800d00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d012:	461a      	mov	r2, r3
 800d014:	2310      	movs	r3, #16
 800d016:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	f003 0320 	and.w	r3, r3, #32
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d008      	beq.n	800d034 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d024:	015a      	lsls	r2, r3, #5
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	4413      	add	r3, r2
 800d02a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d02e:	461a      	mov	r2, r3
 800d030:	2320      	movs	r3, #32
 800d032:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d009      	beq.n	800d052 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	015a      	lsls	r2, r3, #5
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	4413      	add	r3, r2
 800d046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d04a:	461a      	mov	r2, r3
 800d04c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d050:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	3301      	adds	r3, #1
 800d056:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05a:	085b      	lsrs	r3, r3, #1
 800d05c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	2b00      	cmp	r3, #0
 800d062:	d199      	bne.n	800cf98 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	f009 f833 	bl	80160d4 <USB_ReadInterrupts>
 800d06e:	4603      	mov	r3, r0
 800d070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d078:	f040 80c4 	bne.w	800d204 <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4618      	mov	r0, r3
 800d082:	f009 f854 	bl	801612e <USB_ReadDevAllInEpInterrupt>
 800d086:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800d088:	2300      	movs	r3, #0
 800d08a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800d08c:	e0b6      	b.n	800d1fc <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	f000 80ab 	beq.w	800d1f0 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0a0:	b2d2      	uxtb	r2, r2
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f009 f87a 	bl	801619e <USB_ReadDevInEPInterrupt>
 800d0aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d057      	beq.n	800d166 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b8:	f003 030f 	and.w	r3, r3, #15
 800d0bc:	2201      	movs	r2, #1
 800d0be:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	43db      	mvns	r3, r3
 800d0d0:	69f9      	ldr	r1, [r7, #28]
 800d0d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d132      	bne.n	800d15a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d0f4:	6879      	ldr	r1, [r7, #4]
 800d0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	1a9b      	subs	r3, r3, r2
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	440b      	add	r3, r1
 800d102:	3348      	adds	r3, #72	; 0x48
 800d104:	6819      	ldr	r1, [r3, #0]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d10a:	4613      	mov	r3, r2
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	1a9b      	subs	r3, r3, r2
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	4403      	add	r3, r0
 800d114:	3344      	adds	r3, #68	; 0x44
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4419      	add	r1, r3
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d11e:	4613      	mov	r3, r2
 800d120:	00db      	lsls	r3, r3, #3
 800d122:	1a9b      	subs	r3, r3, r2
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	4403      	add	r3, r0
 800d128:	3348      	adds	r3, #72	; 0x48
 800d12a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d113      	bne.n	800d15a <HAL_PCD_IRQHandler+0x31c>
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d136:	4613      	mov	r3, r2
 800d138:	00db      	lsls	r3, r3, #3
 800d13a:	1a9b      	subs	r3, r3, r2
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	440b      	add	r3, r1
 800d140:	3350      	adds	r3, #80	; 0x50
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d108      	bne.n	800d15a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6818      	ldr	r0, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d152:	461a      	mov	r2, r3
 800d154:	2101      	movs	r1, #1
 800d156:	f009 f883 	bl	8016260 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f00a fff6 	bl	8018152 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	f003 0308 	and.w	r3, r3, #8
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d008      	beq.n	800d182 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	015a      	lsls	r2, r3, #5
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	4413      	add	r3, r2
 800d178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d17c:	461a      	mov	r2, r3
 800d17e:	2308      	movs	r3, #8
 800d180:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	f003 0310 	and.w	r3, r3, #16
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d008      	beq.n	800d19e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	015a      	lsls	r2, r3, #5
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	4413      	add	r3, r2
 800d194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d198:	461a      	mov	r2, r3
 800d19a:	2310      	movs	r3, #16
 800d19c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d008      	beq.n	800d1ba <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1aa:	015a      	lsls	r2, r3, #5
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2340      	movs	r3, #64	; 0x40
 800d1b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f003 0302 	and.w	r3, r3, #2
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00c      	beq.n	800d1de <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800d1c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1c6:	6a38      	ldr	r0, [r7, #32]
 800d1c8:	f008 f80c 	bl	80151e4 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ce:	015a      	lsls	r2, r3, #5
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	4413      	add	r3, r2
 800d1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d8:	461a      	mov	r2, r3
 800d1da:	2302      	movs	r3, #2
 800d1dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d003      	beq.n	800d1f0 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800d1e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 fc38 	bl	800da60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800d1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f8:	085b      	lsrs	r3, r3, #1
 800d1fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f47f af45 	bne.w	800d08e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4618      	mov	r0, r3
 800d20a:	f008 ff63 	bl	80160d4 <USB_ReadInterrupts>
 800d20e:	4603      	mov	r3, r0
 800d210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d218:	d122      	bne.n	800d260 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	69fa      	ldr	r2, [r7, #28]
 800d224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d228:	f023 0301 	bic.w	r3, r3, #1
 800d22c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800d234:	2b01      	cmp	r3, #1
 800d236:	d108      	bne.n	800d24a <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d240:	2100      	movs	r1, #0
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fe68 	bl	800df18 <HAL_PCDEx_LPM_Callback>
 800d248:	e002      	b.n	800d250 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f00a fff8 	bl	8018240 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	695a      	ldr	r2, [r3, #20]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800d25e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f008 ff35 	bl	80160d4 <USB_ReadInterrupts>
 800d26a:	4603      	mov	r3, r0
 800d26c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d274:	d112      	bne.n	800d29c <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	2b01      	cmp	r3, #1
 800d284:	d102      	bne.n	800d28c <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f00a ffb4 	bl	80181f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	695a      	ldr	r2, [r3, #20]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800d29a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f008 ff17 	bl	80160d4 <USB_ReadInterrupts>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2b0:	d121      	bne.n	800d2f6 <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	695a      	ldr	r2, [r3, #20]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800d2c0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d111      	bne.n	800d2f0 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2da:	089b      	lsrs	r3, r3, #2
 800d2dc:	f003 020f 	and.w	r2, r3, #15
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d2e6:	2101      	movs	r1, #1
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 fe15 	bl	800df18 <HAL_PCDEx_LPM_Callback>
 800d2ee:	e002      	b.n	800d2f6 <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f00a ff7f 	bl	80181f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f008 feea 	bl	80160d4 <USB_ReadInterrupts>
 800d300:	4603      	mov	r3, r0
 800d302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d30a:	f040 80b7 	bne.w	800d47c <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	69fa      	ldr	r2, [r7, #28]
 800d318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d31c:	f023 0301 	bic.w	r3, r3, #1
 800d320:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2110      	movs	r1, #16
 800d328:	4618      	mov	r0, r3
 800d32a:	f007 ff5b 	bl	80151e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d32e:	2300      	movs	r3, #0
 800d330:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d332:	e046      	b.n	800d3c2 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	015a      	lsls	r2, r3, #5
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	4413      	add	r3, r2
 800d33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d340:	461a      	mov	r2, r3
 800d342:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d346:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d358:	0151      	lsls	r1, r2, #5
 800d35a:	69fa      	ldr	r2, [r7, #28]
 800d35c:	440a      	add	r2, r1
 800d35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d362:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d366:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	015a      	lsls	r2, r3, #5
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	4413      	add	r3, r2
 800d370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d374:	461a      	mov	r2, r3
 800d376:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d37a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	015a      	lsls	r2, r3, #5
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	4413      	add	r3, r2
 800d384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d38c:	0151      	lsls	r1, r2, #5
 800d38e:	69fa      	ldr	r2, [r7, #28]
 800d390:	440a      	add	r2, r1
 800d392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d396:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d39a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39e:	015a      	lsls	r2, r3, #5
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ac:	0151      	lsls	r1, r2, #5
 800d3ae:	69fa      	ldr	r2, [r7, #28]
 800d3b0:	440a      	add	r2, r1
 800d3b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d3ba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	3301      	adds	r3, #1
 800d3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d3b3      	bcc.n	800d334 <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d2:	69db      	ldr	r3, [r3, #28]
 800d3d4:	69fa      	ldr	r2, [r7, #28]
 800d3d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800d3de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d016      	beq.n	800d416 <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3f2:	69fa      	ldr	r2, [r7, #28]
 800d3f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3f8:	f043 030b 	orr.w	r3, r3, #11
 800d3fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d408:	69fa      	ldr	r2, [r7, #28]
 800d40a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d40e:	f043 030b 	orr.w	r3, r3, #11
 800d412:	6453      	str	r3, [r2, #68]	; 0x44
 800d414:	e015      	b.n	800d442 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d41c:	695a      	ldr	r2, [r3, #20]
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d424:	4619      	mov	r1, r3
 800d426:	f242 032b 	movw	r3, #8235	; 0x202b
 800d42a:	4313      	orrs	r3, r2
 800d42c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	69fa      	ldr	r2, [r7, #28]
 800d438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d43c:	f043 030b 	orr.w	r3, r3, #11
 800d440:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	69fa      	ldr	r2, [r7, #28]
 800d44c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d450:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d454:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6818      	ldr	r0, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	691b      	ldr	r3, [r3, #16]
 800d45e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800d466:	461a      	mov	r2, r3
 800d468:	f008 fefa 	bl	8016260 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	695a      	ldr	r2, [r3, #20]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800d47a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	f008 fe27 	bl	80160d4 <USB_ReadInterrupts>
 800d486:	4603      	mov	r3, r0
 800d488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d48c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d490:	d124      	bne.n	800d4dc <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4618      	mov	r0, r3
 800d498:	f008 febe 	bl	8016218 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f007 ff18 	bl	80152d6 <USB_GetDevSpeed>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681c      	ldr	r4, [r3, #0]
 800d4b2:	f001 fce5 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800d4b6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	461a      	mov	r2, r3
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f007 fc21 	bl	8014d08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f00a fe6b 	bl	80181a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	695a      	ldr	r2, [r3, #20]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800d4da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f008 fdf7 	bl	80160d4 <USB_ReadInterrupts>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	f003 0308 	and.w	r3, r3, #8
 800d4ec:	2b08      	cmp	r3, #8
 800d4ee:	d10a      	bne.n	800d506 <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f00a fe48 	bl	8018186 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	695a      	ldr	r2, [r3, #20]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f002 0208 	and.w	r2, r2, #8
 800d504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f008 fde2 	bl	80160d4 <USB_ReadInterrupts>
 800d510:	4603      	mov	r3, r0
 800d512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d51a:	d10f      	bne.n	800d53c <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d51c:	2300      	movs	r3, #0
 800d51e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	b2db      	uxtb	r3, r3
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f00a feaa 	bl	8018280 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	695a      	ldr	r2, [r3, #20]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800d53a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4618      	mov	r0, r3
 800d542:	f008 fdc7 	bl	80160d4 <USB_ReadInterrupts>
 800d546:	4603      	mov	r3, r0
 800d548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d54c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d550:	d10f      	bne.n	800d572 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800d552:	2300      	movs	r3, #0
 800d554:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f00a fe7d 	bl	801825c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	695a      	ldr	r2, [r3, #20]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800d570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4618      	mov	r0, r3
 800d578:	f008 fdac 	bl	80160d4 <USB_ReadInterrupts>
 800d57c:	4603      	mov	r3, r0
 800d57e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d586:	d10a      	bne.n	800d59e <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f00a fe8b 	bl	80182a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	695a      	ldr	r2, [r3, #20]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800d59c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f008 fd96 	bl	80160d4 <USB_ReadInterrupts>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	f003 0304 	and.w	r3, r3, #4
 800d5ae:	2b04      	cmp	r3, #4
 800d5b0:	d115      	bne.n	800d5de <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	f003 0304 	and.w	r3, r3, #4
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f00a fe7b 	bl	80182c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6859      	ldr	r1, [r3, #4]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	69ba      	ldr	r2, [r7, #24]
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	605a      	str	r2, [r3, #4]
 800d5da:	e000      	b.n	800d5de <HAL_PCD_IRQHandler+0x7a0>
      return;
 800d5dc:	bf00      	nop
    }
  }
}
 800d5de:	3734      	adds	r7, #52	; 0x34
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd90      	pop	{r4, r7, pc}

0800d5e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d101      	bne.n	800d5fe <HAL_PCD_SetAddress+0x1a>
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	e013      	b.n	800d626 <HAL_PCD_SetAddress+0x42>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	78fa      	ldrb	r2, [r7, #3]
 800d60a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	78fa      	ldrb	r2, [r7, #3]
 800d614:	4611      	mov	r1, r2
 800d616:	4618      	mov	r0, r3
 800d618:	f008 fcf4 	bl	8016004 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2200      	movs	r2, #0
 800d620:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b084      	sub	sp, #16
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	4608      	mov	r0, r1
 800d638:	4611      	mov	r1, r2
 800d63a:	461a      	mov	r2, r3
 800d63c:	4603      	mov	r3, r0
 800d63e:	70fb      	strb	r3, [r7, #3]
 800d640:	460b      	mov	r3, r1
 800d642:	803b      	strh	r3, [r7, #0]
 800d644:	4613      	mov	r3, r2
 800d646:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d64c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d650:	2b00      	cmp	r3, #0
 800d652:	da0f      	bge.n	800d674 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d654:	78fb      	ldrb	r3, [r7, #3]
 800d656:	f003 020f 	and.w	r2, r3, #15
 800d65a:	4613      	mov	r3, r2
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	1a9b      	subs	r3, r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	3338      	adds	r3, #56	; 0x38
 800d664:	687a      	ldr	r2, [r7, #4]
 800d666:	4413      	add	r3, r2
 800d668:	3304      	adds	r3, #4
 800d66a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2201      	movs	r2, #1
 800d670:	705a      	strb	r2, [r3, #1]
 800d672:	e00f      	b.n	800d694 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d674:	78fb      	ldrb	r3, [r7, #3]
 800d676:	f003 020f 	and.w	r2, r3, #15
 800d67a:	4613      	mov	r3, r2
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	1a9b      	subs	r3, r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	4413      	add	r3, r2
 800d68a:	3304      	adds	r3, #4
 800d68c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d694:	78fb      	ldrb	r3, [r7, #3]
 800d696:	f003 030f 	and.w	r3, r3, #15
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d6a0:	883a      	ldrh	r2, [r7, #0]
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	78ba      	ldrb	r2, [r7, #2]
 800d6aa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	785b      	ldrb	r3, [r3, #1]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d004      	beq.n	800d6be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d6be:	78bb      	ldrb	r3, [r7, #2]
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d102      	bne.n	800d6ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d101      	bne.n	800d6d8 <HAL_PCD_EP_Open+0xaa>
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	e00e      	b.n	800d6f6 <HAL_PCD_EP_Open+0xc8>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68f9      	ldr	r1, [r7, #12]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f007 fe1a 	bl	8015320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800d6f4:	7afb      	ldrb	r3, [r7, #11]
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b084      	sub	sp, #16
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
 800d706:	460b      	mov	r3, r1
 800d708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d70a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	da0f      	bge.n	800d732 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d712:	78fb      	ldrb	r3, [r7, #3]
 800d714:	f003 020f 	and.w	r2, r3, #15
 800d718:	4613      	mov	r3, r2
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	1a9b      	subs	r3, r3, r2
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	3338      	adds	r3, #56	; 0x38
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	4413      	add	r3, r2
 800d726:	3304      	adds	r3, #4
 800d728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2201      	movs	r2, #1
 800d72e:	705a      	strb	r2, [r3, #1]
 800d730:	e00f      	b.n	800d752 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d732:	78fb      	ldrb	r3, [r7, #3]
 800d734:	f003 020f 	and.w	r2, r3, #15
 800d738:	4613      	mov	r3, r2
 800d73a:	00db      	lsls	r3, r3, #3
 800d73c:	1a9b      	subs	r3, r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	4413      	add	r3, r2
 800d748:	3304      	adds	r3, #4
 800d74a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d752:	78fb      	ldrb	r3, [r7, #3]
 800d754:	f003 030f 	and.w	r3, r3, #15
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d764:	2b01      	cmp	r3, #1
 800d766:	d101      	bne.n	800d76c <HAL_PCD_EP_Close+0x6e>
 800d768:	2302      	movs	r3, #2
 800d76a:	e00e      	b.n	800d78a <HAL_PCD_EP_Close+0x8c>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	68f9      	ldr	r1, [r7, #12]
 800d77a:	4618      	mov	r0, r3
 800d77c:	f007 fe58 	bl	8015430 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800d788:	2300      	movs	r3, #0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b086      	sub	sp, #24
 800d796:	af00      	add	r7, sp, #0
 800d798:	60f8      	str	r0, [r7, #12]
 800d79a:	607a      	str	r2, [r7, #4]
 800d79c:	603b      	str	r3, [r7, #0]
 800d79e:	460b      	mov	r3, r1
 800d7a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d7a2:	7afb      	ldrb	r3, [r7, #11]
 800d7a4:	f003 020f 	and.w	r2, r3, #15
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	1a9b      	subs	r3, r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d7b4:	68fa      	ldr	r2, [r7, #12]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d7d4:	7afb      	ldrb	r3, [r7, #11]
 800d7d6:	f003 030f 	and.w	r3, r3, #15
 800d7da:	b2da      	uxtb	r2, r3
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	691b      	ldr	r3, [r3, #16]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d102      	bne.n	800d7ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d7ee:	7afb      	ldrb	r3, [r7, #11]
 800d7f0:	f003 030f 	and.w	r3, r3, #15
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d109      	bne.n	800d80c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6818      	ldr	r0, [r3, #0]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	b2db      	uxtb	r3, r3
 800d802:	461a      	mov	r2, r3
 800d804:	6979      	ldr	r1, [r7, #20]
 800d806:	f008 f93b 	bl	8015a80 <USB_EP0StartXfer>
 800d80a:	e008      	b.n	800d81e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6818      	ldr	r0, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	691b      	ldr	r3, [r3, #16]
 800d814:	b2db      	uxtb	r3, r3
 800d816:	461a      	mov	r2, r3
 800d818:	6979      	ldr	r1, [r7, #20]
 800d81a:	f007 fee5 	bl	80155e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3718      	adds	r7, #24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d834:	78fb      	ldrb	r3, [r7, #3]
 800d836:	f003 020f 	and.w	r2, r3, #15
 800d83a:	6879      	ldr	r1, [r7, #4]
 800d83c:	4613      	mov	r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	1a9b      	subs	r3, r3, r2
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	440b      	add	r3, r1
 800d846:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d84a:	681b      	ldr	r3, [r3, #0]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	607a      	str	r2, [r7, #4]
 800d862:	603b      	str	r3, [r7, #0]
 800d864:	460b      	mov	r3, r1
 800d866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d868:	7afb      	ldrb	r3, [r7, #11]
 800d86a:	f003 020f 	and.w	r2, r3, #15
 800d86e:	4613      	mov	r3, r2
 800d870:	00db      	lsls	r3, r3, #3
 800d872:	1a9b      	subs	r3, r3, r2
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	3338      	adds	r3, #56	; 0x38
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	4413      	add	r3, r2
 800d87c:	3304      	adds	r3, #4
 800d87e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	2200      	movs	r2, #0
 800d890:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	2201      	movs	r2, #1
 800d896:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d898:	7afb      	ldrb	r3, [r7, #11]
 800d89a:	f003 030f 	and.w	r3, r3, #15
 800d89e:	b2da      	uxtb	r2, r3
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	691b      	ldr	r3, [r3, #16]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d102      	bne.n	800d8b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d8b2:	7afb      	ldrb	r3, [r7, #11]
 800d8b4:	f003 030f 	and.w	r3, r3, #15
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d109      	bne.n	800d8d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	6818      	ldr	r0, [r3, #0]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	6979      	ldr	r1, [r7, #20]
 800d8ca:	f008 f8d9 	bl	8015a80 <USB_EP0StartXfer>
 800d8ce:	e008      	b.n	800d8e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6818      	ldr	r0, [r3, #0]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	461a      	mov	r2, r3
 800d8dc:	6979      	ldr	r1, [r7, #20]
 800d8de:	f007 fe83 	bl	80155e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800d8e2:	2300      	movs	r3, #0
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3718      	adds	r7, #24
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d8f8:	78fb      	ldrb	r3, [r7, #3]
 800d8fa:	f003 020f 	and.w	r2, r3, #15
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	429a      	cmp	r2, r3
 800d904:	d901      	bls.n	800d90a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d906:	2301      	movs	r3, #1
 800d908:	e050      	b.n	800d9ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d90a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	da0f      	bge.n	800d932 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d912:	78fb      	ldrb	r3, [r7, #3]
 800d914:	f003 020f 	and.w	r2, r3, #15
 800d918:	4613      	mov	r3, r2
 800d91a:	00db      	lsls	r3, r3, #3
 800d91c:	1a9b      	subs	r3, r3, r2
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	3338      	adds	r3, #56	; 0x38
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	4413      	add	r3, r2
 800d926:	3304      	adds	r3, #4
 800d928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2201      	movs	r2, #1
 800d92e:	705a      	strb	r2, [r3, #1]
 800d930:	e00d      	b.n	800d94e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d932:	78fa      	ldrb	r2, [r7, #3]
 800d934:	4613      	mov	r3, r2
 800d936:	00db      	lsls	r3, r3, #3
 800d938:	1a9b      	subs	r3, r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	4413      	add	r3, r2
 800d944:	3304      	adds	r3, #4
 800d946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2200      	movs	r2, #0
 800d94c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2201      	movs	r2, #1
 800d952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d954:	78fb      	ldrb	r3, [r7, #3]
 800d956:	f003 030f 	and.w	r3, r3, #15
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800d966:	2b01      	cmp	r3, #1
 800d968:	d101      	bne.n	800d96e <HAL_PCD_EP_SetStall+0x82>
 800d96a:	2302      	movs	r3, #2
 800d96c:	e01e      	b.n	800d9ac <HAL_PCD_EP_SetStall+0xc0>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	68f9      	ldr	r1, [r7, #12]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f008 fa6d 	bl	8015e5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d982:	78fb      	ldrb	r3, [r7, #3]
 800d984:	f003 030f 	and.w	r3, r3, #15
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d10a      	bne.n	800d9a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6818      	ldr	r0, [r3, #0]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	b2d9      	uxtb	r1, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d99c:	461a      	mov	r2, r3
 800d99e:	f008 fc5f 	bl	8016260 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	f003 020f 	and.w	r2, r3, #15
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d901      	bls.n	800d9d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e042      	b.n	800da58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d9d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	da0f      	bge.n	800d9fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d9da:	78fb      	ldrb	r3, [r7, #3]
 800d9dc:	f003 020f 	and.w	r2, r3, #15
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	00db      	lsls	r3, r3, #3
 800d9e4:	1a9b      	subs	r3, r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	3338      	adds	r3, #56	; 0x38
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	3304      	adds	r3, #4
 800d9f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	705a      	strb	r2, [r3, #1]
 800d9f8:	e00f      	b.n	800da1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d9fa:	78fb      	ldrb	r3, [r7, #3]
 800d9fc:	f003 020f 	and.w	r2, r3, #15
 800da00:	4613      	mov	r3, r2
 800da02:	00db      	lsls	r3, r3, #3
 800da04:	1a9b      	subs	r3, r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800da0c:	687a      	ldr	r2, [r7, #4]
 800da0e:	4413      	add	r3, r2
 800da10:	3304      	adds	r3, #4
 800da12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2200      	movs	r2, #0
 800da1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800da20:	78fb      	ldrb	r3, [r7, #3]
 800da22:	f003 030f 	and.w	r3, r3, #15
 800da26:	b2da      	uxtb	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800da32:	2b01      	cmp	r3, #1
 800da34:	d101      	bne.n	800da3a <HAL_PCD_EP_ClrStall+0x86>
 800da36:	2302      	movs	r3, #2
 800da38:	e00e      	b.n	800da58 <HAL_PCD_EP_ClrStall+0xa4>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68f9      	ldr	r1, [r7, #12]
 800da48:	4618      	mov	r0, r3
 800da4a:	f008 fa75 	bl	8015f38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08a      	sub	sp, #40	; 0x28
 800da64:	af02      	add	r7, sp, #8
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800da74:	683a      	ldr	r2, [r7, #0]
 800da76:	4613      	mov	r3, r2
 800da78:	00db      	lsls	r3, r3, #3
 800da7a:	1a9b      	subs	r3, r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	3338      	adds	r3, #56	; 0x38
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	4413      	add	r3, r2
 800da84:	3304      	adds	r3, #4
 800da86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	699a      	ldr	r2, [r3, #24]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	695b      	ldr	r3, [r3, #20]
 800da90:	429a      	cmp	r2, r3
 800da92:	d901      	bls.n	800da98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e06c      	b.n	800db72 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	695a      	ldr	r2, [r3, #20]
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	69fa      	ldr	r2, [r7, #28]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d902      	bls.n	800dab4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	3303      	adds	r3, #3
 800dab8:	089b      	lsrs	r3, r3, #2
 800daba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800dabc:	e02b      	b.n	800db16 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	695a      	ldr	r2, [r3, #20]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	699b      	ldr	r3, [r3, #24]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	69fa      	ldr	r2, [r7, #28]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d902      	bls.n	800dada <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	3303      	adds	r3, #3
 800dade:	089b      	lsrs	r3, r3, #2
 800dae0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	68d9      	ldr	r1, [r3, #12]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	b2da      	uxtb	r2, r3
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	4603      	mov	r3, r0
 800daf8:	6978      	ldr	r0, [r7, #20]
 800dafa:	f008 f919 	bl	8015d30 <USB_WritePacket>

    ep->xfer_buff  += len;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	68da      	ldr	r2, [r3, #12]
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	441a      	add	r2, r3
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	699a      	ldr	r2, [r3, #24]
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	441a      	add	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	015a      	lsls	r2, r3, #5
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	4413      	add	r3, r2
 800db1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db22:	699b      	ldr	r3, [r3, #24]
 800db24:	b29b      	uxth	r3, r3
 800db26:	69ba      	ldr	r2, [r7, #24]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d809      	bhi.n	800db40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	699a      	ldr	r2, [r3, #24]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800db34:	429a      	cmp	r2, r3
 800db36:	d203      	bcs.n	800db40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	695b      	ldr	r3, [r3, #20]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1be      	bne.n	800dabe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	695a      	ldr	r2, [r3, #20]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	699b      	ldr	r3, [r3, #24]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d811      	bhi.n	800db70 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	f003 030f 	and.w	r3, r3, #15
 800db52:	2201      	movs	r2, #1
 800db54:	fa02 f303 	lsl.w	r3, r2, r3
 800db58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	43db      	mvns	r3, r3
 800db66:	6939      	ldr	r1, [r7, #16]
 800db68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800db6c:	4013      	ands	r3, r2
 800db6e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3720      	adds	r7, #32
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
	...

0800db7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b086      	sub	sp, #24
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	333c      	adds	r3, #60	; 0x3c
 800db94:	3304      	adds	r3, #4
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dba6:	689b      	ldr	r3, [r3, #8]
 800dba8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	f040 80a0 	bne.w	800dcf4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	f003 0308 	and.w	r3, r3, #8
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d015      	beq.n	800dbea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	4a72      	ldr	r2, [pc, #456]	; (800dd8c <PCD_EP_OutXfrComplete_int+0x210>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	f240 80dd 	bls.w	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	f000 80d7 	beq.w	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	015a      	lsls	r2, r3, #5
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	4413      	add	r3, r2
 800dbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbe6:	6093      	str	r3, [r2, #8]
 800dbe8:	e0cb      	b.n	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	f003 0320 	and.w	r3, r3, #32
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d009      	beq.n	800dc08 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	015a      	lsls	r2, r3, #5
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc00:	461a      	mov	r2, r3
 800dc02:	2320      	movs	r3, #32
 800dc04:	6093      	str	r3, [r2, #8]
 800dc06:	e0bc      	b.n	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f040 80b7 	bne.w	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	4a5d      	ldr	r2, [pc, #372]	; (800dd8c <PCD_EP_OutXfrComplete_int+0x210>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d90f      	bls.n	800dc3c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00a      	beq.n	800dc3c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	015a      	lsls	r2, r3, #5
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc32:	461a      	mov	r2, r3
 800dc34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc38:	6093      	str	r3, [r2, #8]
 800dc3a:	e0a2      	b.n	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800dc3c:	6879      	ldr	r1, [r7, #4]
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	4613      	mov	r3, r2
 800dc42:	00db      	lsls	r3, r3, #3
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	440b      	add	r3, r1
 800dc4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800dc4e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	0159      	lsls	r1, r3, #5
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	440b      	add	r3, r1
 800dc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc5c:	691b      	ldr	r3, [r3, #16]
 800dc5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800dc62:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	00db      	lsls	r3, r3, #3
 800dc6c:	1a9b      	subs	r3, r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4403      	add	r3, r0
 800dc72:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800dc76:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	440b      	add	r3, r1
 800dc86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dc8a:	6819      	ldr	r1, [r3, #0]
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	683a      	ldr	r2, [r7, #0]
 800dc90:	4613      	mov	r3, r2
 800dc92:	00db      	lsls	r3, r3, #3
 800dc94:	1a9b      	subs	r3, r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4403      	add	r3, r0
 800dc9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4419      	add	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	4613      	mov	r3, r2
 800dca8:	00db      	lsls	r3, r3, #3
 800dcaa:	1a9b      	subs	r3, r3, r2
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	4403      	add	r3, r0
 800dcb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dcb4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d114      	bne.n	800dce6 <PCD_EP_OutXfrComplete_int+0x16a>
 800dcbc:	6879      	ldr	r1, [r7, #4]
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	00db      	lsls	r3, r3, #3
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	440b      	add	r3, r1
 800dcca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d108      	bne.n	800dce6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6818      	ldr	r0, [r3, #0]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dcde:	461a      	mov	r2, r3
 800dce0:	2101      	movs	r1, #1
 800dce2:	f008 fabd 	bl	8016260 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	4619      	mov	r1, r3
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f00a fa15 	bl	801811c <HAL_PCD_DataOutStageCallback>
 800dcf2:	e046      	b.n	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	4a26      	ldr	r2, [pc, #152]	; (800dd90 <PCD_EP_OutXfrComplete_int+0x214>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d124      	bne.n	800dd46 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00a      	beq.n	800dd1c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	015a      	lsls	r2, r3, #5
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd12:	461a      	mov	r2, r3
 800dd14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd18:	6093      	str	r3, [r2, #8]
 800dd1a:	e032      	b.n	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	f003 0320 	and.w	r3, r3, #32
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d008      	beq.n	800dd38 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	015a      	lsls	r2, r3, #5
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd32:	461a      	mov	r2, r3
 800dd34:	2320      	movs	r3, #32
 800dd36:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	f00a f9ec 	bl	801811c <HAL_PCD_DataOutStageCallback>
 800dd44:	e01d      	b.n	800dd82 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d114      	bne.n	800dd76 <PCD_EP_OutXfrComplete_int+0x1fa>
 800dd4c:	6879      	ldr	r1, [r7, #4]
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	4613      	mov	r3, r2
 800dd52:	00db      	lsls	r3, r3, #3
 800dd54:	1a9b      	subs	r3, r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	440b      	add	r3, r1
 800dd5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d108      	bne.n	800dd76 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6818      	ldr	r0, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dd6e:	461a      	mov	r2, r3
 800dd70:	2100      	movs	r1, #0
 800dd72:	f008 fa75 	bl	8016260 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f00a f9cd 	bl	801811c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3718      	adds	r7, #24
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	4f54300a 	.word	0x4f54300a
 800dd90:	4f54310a 	.word	0x4f54310a

0800dd94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	333c      	adds	r3, #60	; 0x3c
 800ddac:	3304      	adds	r3, #4
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	015a      	lsls	r2, r3, #5
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	4413      	add	r3, r2
 800ddba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	4a15      	ldr	r2, [pc, #84]	; (800de1c <PCD_EP_OutSetupPacket_int+0x88>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d90e      	bls.n	800dde8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d009      	beq.n	800dde8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	015a      	lsls	r2, r3, #5
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	4413      	add	r3, r2
 800dddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dde0:	461a      	mov	r2, r3
 800dde2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dde6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f00a f985 	bl	80180f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	4a0a      	ldr	r2, [pc, #40]	; (800de1c <PCD_EP_OutSetupPacket_int+0x88>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d90c      	bls.n	800de10 <PCD_EP_OutSetupPacket_int+0x7c>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d108      	bne.n	800de10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6818      	ldr	r0, [r3, #0]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800de08:	461a      	mov	r2, r3
 800de0a:	2101      	movs	r1, #1
 800de0c:	f008 fa28 	bl	8016260 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3718      	adds	r7, #24
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	4f54300a 	.word	0x4f54300a

0800de20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	460b      	mov	r3, r1
 800de2a:	70fb      	strb	r3, [r7, #3]
 800de2c:	4613      	mov	r3, r2
 800de2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800de38:	78fb      	ldrb	r3, [r7, #3]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d107      	bne.n	800de4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800de3e:	883b      	ldrh	r3, [r7, #0]
 800de40:	0419      	lsls	r1, r3, #16
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	430a      	orrs	r2, r1
 800de4a:	629a      	str	r2, [r3, #40]	; 0x28
 800de4c:	e028      	b.n	800dea0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de54:	0c1b      	lsrs	r3, r3, #16
 800de56:	68ba      	ldr	r2, [r7, #8]
 800de58:	4413      	add	r3, r2
 800de5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800de5c:	2300      	movs	r3, #0
 800de5e:	73fb      	strb	r3, [r7, #15]
 800de60:	e00d      	b.n	800de7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	7bfb      	ldrb	r3, [r7, #15]
 800de68:	3340      	adds	r3, #64	; 0x40
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4413      	add	r3, r2
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	0c1b      	lsrs	r3, r3, #16
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	4413      	add	r3, r2
 800de76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800de78:	7bfb      	ldrb	r3, [r7, #15]
 800de7a:	3301      	adds	r3, #1
 800de7c:	73fb      	strb	r3, [r7, #15]
 800de7e:	7bfa      	ldrb	r2, [r7, #15]
 800de80:	78fb      	ldrb	r3, [r7, #3]
 800de82:	3b01      	subs	r3, #1
 800de84:	429a      	cmp	r2, r3
 800de86:	d3ec      	bcc.n	800de62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800de88:	883b      	ldrh	r3, [r7, #0]
 800de8a:	0418      	lsls	r0, r3, #16
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6819      	ldr	r1, [r3, #0]
 800de90:	78fb      	ldrb	r3, [r7, #3]
 800de92:	3b01      	subs	r3, #1
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	4302      	orrs	r2, r0
 800de98:	3340      	adds	r3, #64	; 0x40
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	440b      	add	r3, r1
 800de9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800deae:	b480      	push	{r7}
 800deb0:	b083      	sub	sp, #12
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	460b      	mov	r3, r1
 800deb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	887a      	ldrh	r2, [r7, #2]
 800dec0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2201      	movs	r2, #1
 800dee2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800defe:	4b05      	ldr	r3, [pc, #20]	; (800df14 <HAL_PCDEx_ActivateLPM+0x44>)
 800df00:	4313      	orrs	r3, r2
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3714      	adds	r7, #20
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	10000003 	.word	0x10000003

0800df18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	460b      	mov	r3, r1
 800df22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800df24:	bf00      	nop
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b084      	sub	sp, #16
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800df38:	4b19      	ldr	r3, [pc, #100]	; (800dfa0 <HAL_PWREx_ConfigSupply+0x70>)
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	f003 0304 	and.w	r3, r3, #4
 800df40:	2b04      	cmp	r3, #4
 800df42:	d00a      	beq.n	800df5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800df44:	4b16      	ldr	r3, [pc, #88]	; (800dfa0 <HAL_PWREx_ConfigSupply+0x70>)
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	f003 0307 	and.w	r3, r3, #7
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d001      	beq.n	800df56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e01f      	b.n	800df96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	e01d      	b.n	800df96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800df5a:	4b11      	ldr	r3, [pc, #68]	; (800dfa0 <HAL_PWREx_ConfigSupply+0x70>)
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	f023 0207 	bic.w	r2, r3, #7
 800df62:	490f      	ldr	r1, [pc, #60]	; (800dfa0 <HAL_PWREx_ConfigSupply+0x70>)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	4313      	orrs	r3, r2
 800df68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800df6a:	f7fa fe07 	bl	8008b7c <HAL_GetTick>
 800df6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800df70:	e009      	b.n	800df86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800df72:	f7fa fe03 	bl	8008b7c <HAL_GetTick>
 800df76:	4602      	mov	r2, r0
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	1ad3      	subs	r3, r2, r3
 800df7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df80:	d901      	bls.n	800df86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800df82:	2301      	movs	r3, #1
 800df84:	e007      	b.n	800df96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800df86:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <HAL_PWREx_ConfigSupply+0x70>)
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df92:	d1ee      	bne.n	800df72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800df94:	2300      	movs	r3, #0
}
 800df96:	4618      	mov	r0, r3
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	58024800 	.word	0x58024800

0800dfa4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800dfa8:	4b05      	ldr	r3, [pc, #20]	; (800dfc0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	4a04      	ldr	r2, [pc, #16]	; (800dfc0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800dfae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dfb2:	60d3      	str	r3, [r2, #12]
}
 800dfb4:	bf00      	nop
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	58024800 	.word	0x58024800

0800dfc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b08c      	sub	sp, #48	; 0x30
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d102      	bne.n	800dfd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	f000 bc1d 	b.w	800e812 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 0301 	and.w	r3, r3, #1
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 8087 	beq.w	800e0f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dfe6:	4b99      	ldr	r3, [pc, #612]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dff0:	4b96      	ldr	r3, [pc, #600]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800dff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	2b10      	cmp	r3, #16
 800dffa:	d007      	beq.n	800e00c <HAL_RCC_OscConfig+0x48>
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	2b18      	cmp	r3, #24
 800e000:	d110      	bne.n	800e024 <HAL_RCC_OscConfig+0x60>
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	f003 0303 	and.w	r3, r3, #3
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d10b      	bne.n	800e024 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e00c:	4b8f      	ldr	r3, [pc, #572]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e014:	2b00      	cmp	r3, #0
 800e016:	d06c      	beq.n	800e0f2 <HAL_RCC_OscConfig+0x12e>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d168      	bne.n	800e0f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	e3f6      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e02c:	d106      	bne.n	800e03c <HAL_RCC_OscConfig+0x78>
 800e02e:	4b87      	ldr	r3, [pc, #540]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4a86      	ldr	r2, [pc, #536]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e038:	6013      	str	r3, [r2, #0]
 800e03a:	e02e      	b.n	800e09a <HAL_RCC_OscConfig+0xd6>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10c      	bne.n	800e05e <HAL_RCC_OscConfig+0x9a>
 800e044:	4b81      	ldr	r3, [pc, #516]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a80      	ldr	r2, [pc, #512]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e04a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e04e:	6013      	str	r3, [r2, #0]
 800e050:	4b7e      	ldr	r3, [pc, #504]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a7d      	ldr	r2, [pc, #500]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e05a:	6013      	str	r3, [r2, #0]
 800e05c:	e01d      	b.n	800e09a <HAL_RCC_OscConfig+0xd6>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e066:	d10c      	bne.n	800e082 <HAL_RCC_OscConfig+0xbe>
 800e068:	4b78      	ldr	r3, [pc, #480]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a77      	ldr	r2, [pc, #476]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e06e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e072:	6013      	str	r3, [r2, #0]
 800e074:	4b75      	ldr	r3, [pc, #468]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a74      	ldr	r2, [pc, #464]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e07a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e07e:	6013      	str	r3, [r2, #0]
 800e080:	e00b      	b.n	800e09a <HAL_RCC_OscConfig+0xd6>
 800e082:	4b72      	ldr	r3, [pc, #456]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a71      	ldr	r2, [pc, #452]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	4b6f      	ldr	r3, [pc, #444]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a6e      	ldr	r2, [pc, #440]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e098:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d013      	beq.n	800e0ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0a2:	f7fa fd6b 	bl	8008b7c <HAL_GetTick>
 800e0a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0a8:	e008      	b.n	800e0bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e0aa:	f7fa fd67 	bl	8008b7c <HAL_GetTick>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	2b64      	cmp	r3, #100	; 0x64
 800e0b6:	d901      	bls.n	800e0bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	e3aa      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e0bc:	4b63      	ldr	r3, [pc, #396]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d0f0      	beq.n	800e0aa <HAL_RCC_OscConfig+0xe6>
 800e0c8:	e014      	b.n	800e0f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0ca:	f7fa fd57 	bl	8008b7c <HAL_GetTick>
 800e0ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e0d0:	e008      	b.n	800e0e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e0d2:	f7fa fd53 	bl	8008b7c <HAL_GetTick>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	2b64      	cmp	r3, #100	; 0x64
 800e0de:	d901      	bls.n	800e0e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	e396      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e0e4:	4b59      	ldr	r3, [pc, #356]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1f0      	bne.n	800e0d2 <HAL_RCC_OscConfig+0x10e>
 800e0f0:	e000      	b.n	800e0f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e0f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f003 0302 	and.w	r3, r3, #2
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f000 80cb 	beq.w	800e298 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e102:	4b52      	ldr	r3, [pc, #328]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e10a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e10c:	4b4f      	ldr	r3, [pc, #316]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e110:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d007      	beq.n	800e128 <HAL_RCC_OscConfig+0x164>
 800e118:	6a3b      	ldr	r3, [r7, #32]
 800e11a:	2b18      	cmp	r3, #24
 800e11c:	d156      	bne.n	800e1cc <HAL_RCC_OscConfig+0x208>
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	f003 0303 	and.w	r3, r3, #3
 800e124:	2b00      	cmp	r3, #0
 800e126:	d151      	bne.n	800e1cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e128:	4b48      	ldr	r3, [pc, #288]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f003 0304 	and.w	r3, r3, #4
 800e130:	2b00      	cmp	r3, #0
 800e132:	d005      	beq.n	800e140 <HAL_RCC_OscConfig+0x17c>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d101      	bne.n	800e140 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	e368      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e140:	4b42      	ldr	r3, [pc, #264]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f023 0219 	bic.w	r2, r3, #25
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	493f      	ldr	r1, [pc, #252]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e14e:	4313      	orrs	r3, r2
 800e150:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e152:	f7fa fd13 	bl	8008b7c <HAL_GetTick>
 800e156:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e158:	e008      	b.n	800e16c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e15a:	f7fa fd0f 	bl	8008b7c <HAL_GetTick>
 800e15e:	4602      	mov	r2, r0
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	2b02      	cmp	r3, #2
 800e166:	d901      	bls.n	800e16c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800e168:	2303      	movs	r3, #3
 800e16a:	e352      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e16c:	4b37      	ldr	r3, [pc, #220]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f003 0304 	and.w	r3, r3, #4
 800e174:	2b00      	cmp	r3, #0
 800e176:	d0f0      	beq.n	800e15a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e178:	f7fa fd30 	bl	8008bdc <HAL_GetREVID>
 800e17c:	4603      	mov	r3, r0
 800e17e:	f241 0203 	movw	r2, #4099	; 0x1003
 800e182:	4293      	cmp	r3, r2
 800e184:	d817      	bhi.n	800e1b6 <HAL_RCC_OscConfig+0x1f2>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	2b40      	cmp	r3, #64	; 0x40
 800e18c:	d108      	bne.n	800e1a0 <HAL_RCC_OscConfig+0x1dc>
 800e18e:	4b2f      	ldr	r3, [pc, #188]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e190:	685b      	ldr	r3, [r3, #4]
 800e192:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e196:	4a2d      	ldr	r2, [pc, #180]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e19c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e19e:	e07b      	b.n	800e298 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1a0:	4b2a      	ldr	r3, [pc, #168]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	691b      	ldr	r3, [r3, #16]
 800e1ac:	031b      	lsls	r3, r3, #12
 800e1ae:	4927      	ldr	r1, [pc, #156]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1b4:	e070      	b.n	800e298 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e1b6:	4b25      	ldr	r3, [pc, #148]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	691b      	ldr	r3, [r3, #16]
 800e1c2:	061b      	lsls	r3, r3, #24
 800e1c4:	4921      	ldr	r1, [pc, #132]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e1ca:	e065      	b.n	800e298 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d048      	beq.n	800e266 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e1d4:	4b1d      	ldr	r3, [pc, #116]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f023 0219 	bic.w	r2, r3, #25
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	491a      	ldr	r1, [pc, #104]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1e6:	f7fa fcc9 	bl	8008b7c <HAL_GetTick>
 800e1ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e1ec:	e008      	b.n	800e200 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e1ee:	f7fa fcc5 	bl	8008b7c <HAL_GetTick>
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d901      	bls.n	800e200 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800e1fc:	2303      	movs	r3, #3
 800e1fe:	e308      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e200:	4b12      	ldr	r3, [pc, #72]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f003 0304 	and.w	r3, r3, #4
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d0f0      	beq.n	800e1ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e20c:	f7fa fce6 	bl	8008bdc <HAL_GetREVID>
 800e210:	4603      	mov	r3, r0
 800e212:	f241 0203 	movw	r2, #4099	; 0x1003
 800e216:	4293      	cmp	r3, r2
 800e218:	d81a      	bhi.n	800e250 <HAL_RCC_OscConfig+0x28c>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	2b40      	cmp	r3, #64	; 0x40
 800e220:	d108      	bne.n	800e234 <HAL_RCC_OscConfig+0x270>
 800e222:	4b0a      	ldr	r3, [pc, #40]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e22a:	4a08      	ldr	r2, [pc, #32]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e22c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e230:	6053      	str	r3, [r2, #4]
 800e232:	e031      	b.n	800e298 <HAL_RCC_OscConfig+0x2d4>
 800e234:	4b05      	ldr	r3, [pc, #20]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	691b      	ldr	r3, [r3, #16]
 800e240:	031b      	lsls	r3, r3, #12
 800e242:	4902      	ldr	r1, [pc, #8]	; (800e24c <HAL_RCC_OscConfig+0x288>)
 800e244:	4313      	orrs	r3, r2
 800e246:	604b      	str	r3, [r1, #4]
 800e248:	e026      	b.n	800e298 <HAL_RCC_OscConfig+0x2d4>
 800e24a:	bf00      	nop
 800e24c:	58024400 	.word	0x58024400
 800e250:	4b9a      	ldr	r3, [pc, #616]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	691b      	ldr	r3, [r3, #16]
 800e25c:	061b      	lsls	r3, r3, #24
 800e25e:	4997      	ldr	r1, [pc, #604]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e260:	4313      	orrs	r3, r2
 800e262:	604b      	str	r3, [r1, #4]
 800e264:	e018      	b.n	800e298 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e266:	4b95      	ldr	r3, [pc, #596]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a94      	ldr	r2, [pc, #592]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e26c:	f023 0301 	bic.w	r3, r3, #1
 800e270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e272:	f7fa fc83 	bl	8008b7c <HAL_GetTick>
 800e276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e278:	e008      	b.n	800e28c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e27a:	f7fa fc7f 	bl	8008b7c <HAL_GetTick>
 800e27e:	4602      	mov	r2, r0
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	1ad3      	subs	r3, r2, r3
 800e284:	2b02      	cmp	r3, #2
 800e286:	d901      	bls.n	800e28c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e288:	2303      	movs	r3, #3
 800e28a:	e2c2      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e28c:	4b8b      	ldr	r3, [pc, #556]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f003 0304 	and.w	r3, r3, #4
 800e294:	2b00      	cmp	r3, #0
 800e296:	d1f0      	bne.n	800e27a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f003 0310 	and.w	r3, r3, #16
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 80a9 	beq.w	800e3f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e2a6:	4b85      	ldr	r3, [pc, #532]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e2a8:	691b      	ldr	r3, [r3, #16]
 800e2aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e2b0:	4b82      	ldr	r3, [pc, #520]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	2b08      	cmp	r3, #8
 800e2ba:	d007      	beq.n	800e2cc <HAL_RCC_OscConfig+0x308>
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	2b18      	cmp	r3, #24
 800e2c0:	d13a      	bne.n	800e338 <HAL_RCC_OscConfig+0x374>
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f003 0303 	and.w	r3, r3, #3
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d135      	bne.n	800e338 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e2cc:	4b7b      	ldr	r3, [pc, #492]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d005      	beq.n	800e2e4 <HAL_RCC_OscConfig+0x320>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	69db      	ldr	r3, [r3, #28]
 800e2dc:	2b80      	cmp	r3, #128	; 0x80
 800e2de:	d001      	beq.n	800e2e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e296      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e2e4:	f7fa fc7a 	bl	8008bdc <HAL_GetREVID>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	f241 0203 	movw	r2, #4099	; 0x1003
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d817      	bhi.n	800e322 <HAL_RCC_OscConfig+0x35e>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a1b      	ldr	r3, [r3, #32]
 800e2f6:	2b20      	cmp	r3, #32
 800e2f8:	d108      	bne.n	800e30c <HAL_RCC_OscConfig+0x348>
 800e2fa:	4b70      	ldr	r3, [pc, #448]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e302:	4a6e      	ldr	r2, [pc, #440]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e304:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e308:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e30a:	e075      	b.n	800e3f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e30c:	4b6b      	ldr	r3, [pc, #428]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a1b      	ldr	r3, [r3, #32]
 800e318:	069b      	lsls	r3, r3, #26
 800e31a:	4968      	ldr	r1, [pc, #416]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e31c:	4313      	orrs	r3, r2
 800e31e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e320:	e06a      	b.n	800e3f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e322:	4b66      	ldr	r3, [pc, #408]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6a1b      	ldr	r3, [r3, #32]
 800e32e:	061b      	lsls	r3, r3, #24
 800e330:	4962      	ldr	r1, [pc, #392]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e332:	4313      	orrs	r3, r2
 800e334:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e336:	e05f      	b.n	800e3f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	69db      	ldr	r3, [r3, #28]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d042      	beq.n	800e3c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e340:	4b5e      	ldr	r3, [pc, #376]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a5d      	ldr	r2, [pc, #372]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e34a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e34c:	f7fa fc16 	bl	8008b7c <HAL_GetTick>
 800e350:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e352:	e008      	b.n	800e366 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e354:	f7fa fc12 	bl	8008b7c <HAL_GetTick>
 800e358:	4602      	mov	r2, r0
 800e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d901      	bls.n	800e366 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e255      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e366:	4b55      	ldr	r3, [pc, #340]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d0f0      	beq.n	800e354 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e372:	f7fa fc33 	bl	8008bdc <HAL_GetREVID>
 800e376:	4603      	mov	r3, r0
 800e378:	f241 0203 	movw	r2, #4099	; 0x1003
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d817      	bhi.n	800e3b0 <HAL_RCC_OscConfig+0x3ec>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a1b      	ldr	r3, [r3, #32]
 800e384:	2b20      	cmp	r3, #32
 800e386:	d108      	bne.n	800e39a <HAL_RCC_OscConfig+0x3d6>
 800e388:	4b4c      	ldr	r3, [pc, #304]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e390:	4a4a      	ldr	r2, [pc, #296]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e396:	6053      	str	r3, [r2, #4]
 800e398:	e02e      	b.n	800e3f8 <HAL_RCC_OscConfig+0x434>
 800e39a:	4b48      	ldr	r3, [pc, #288]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a1b      	ldr	r3, [r3, #32]
 800e3a6:	069b      	lsls	r3, r3, #26
 800e3a8:	4944      	ldr	r1, [pc, #272]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	604b      	str	r3, [r1, #4]
 800e3ae:	e023      	b.n	800e3f8 <HAL_RCC_OscConfig+0x434>
 800e3b0:	4b42      	ldr	r3, [pc, #264]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6a1b      	ldr	r3, [r3, #32]
 800e3bc:	061b      	lsls	r3, r3, #24
 800e3be:	493f      	ldr	r1, [pc, #252]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e3c0:	4313      	orrs	r3, r2
 800e3c2:	60cb      	str	r3, [r1, #12]
 800e3c4:	e018      	b.n	800e3f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e3c6:	4b3d      	ldr	r3, [pc, #244]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a3c      	ldr	r2, [pc, #240]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e3cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3d2:	f7fa fbd3 	bl	8008b7c <HAL_GetTick>
 800e3d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e3d8:	e008      	b.n	800e3ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e3da:	f7fa fbcf 	bl	8008b7c <HAL_GetTick>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d901      	bls.n	800e3ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e3e8:	2303      	movs	r3, #3
 800e3ea:	e212      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e3ec:	4b33      	ldr	r3, [pc, #204]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1f0      	bne.n	800e3da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f003 0308 	and.w	r3, r3, #8
 800e400:	2b00      	cmp	r3, #0
 800e402:	d036      	beq.n	800e472 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	695b      	ldr	r3, [r3, #20]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d019      	beq.n	800e440 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e40c:	4b2b      	ldr	r3, [pc, #172]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e410:	4a2a      	ldr	r2, [pc, #168]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e412:	f043 0301 	orr.w	r3, r3, #1
 800e416:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e418:	f7fa fbb0 	bl	8008b7c <HAL_GetTick>
 800e41c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e41e:	e008      	b.n	800e432 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e420:	f7fa fbac 	bl	8008b7c <HAL_GetTick>
 800e424:	4602      	mov	r2, r0
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d901      	bls.n	800e432 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e42e:	2303      	movs	r3, #3
 800e430:	e1ef      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e432:	4b22      	ldr	r3, [pc, #136]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e436:	f003 0302 	and.w	r3, r3, #2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d0f0      	beq.n	800e420 <HAL_RCC_OscConfig+0x45c>
 800e43e:	e018      	b.n	800e472 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e440:	4b1e      	ldr	r3, [pc, #120]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e444:	4a1d      	ldr	r2, [pc, #116]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e446:	f023 0301 	bic.w	r3, r3, #1
 800e44a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e44c:	f7fa fb96 	bl	8008b7c <HAL_GetTick>
 800e450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e452:	e008      	b.n	800e466 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e454:	f7fa fb92 	bl	8008b7c <HAL_GetTick>
 800e458:	4602      	mov	r2, r0
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	1ad3      	subs	r3, r2, r3
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d901      	bls.n	800e466 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e462:	2303      	movs	r3, #3
 800e464:	e1d5      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e466:	4b15      	ldr	r3, [pc, #84]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e46a:	f003 0302 	and.w	r3, r3, #2
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1f0      	bne.n	800e454 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f003 0320 	and.w	r3, r3, #32
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d039      	beq.n	800e4f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	699b      	ldr	r3, [r3, #24]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d01c      	beq.n	800e4c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e486:	4b0d      	ldr	r3, [pc, #52]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a0c      	ldr	r2, [pc, #48]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e48c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e490:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e492:	f7fa fb73 	bl	8008b7c <HAL_GetTick>
 800e496:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e498:	e008      	b.n	800e4ac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e49a:	f7fa fb6f 	bl	8008b7c <HAL_GetTick>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a2:	1ad3      	subs	r3, r2, r3
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d901      	bls.n	800e4ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e4a8:	2303      	movs	r3, #3
 800e4aa:	e1b2      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e4ac:	4b03      	ldr	r3, [pc, #12]	; (800e4bc <HAL_RCC_OscConfig+0x4f8>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d0f0      	beq.n	800e49a <HAL_RCC_OscConfig+0x4d6>
 800e4b8:	e01b      	b.n	800e4f2 <HAL_RCC_OscConfig+0x52e>
 800e4ba:	bf00      	nop
 800e4bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e4c0:	4b9b      	ldr	r3, [pc, #620]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a9a      	ldr	r2, [pc, #616]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e4c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e4cc:	f7fa fb56 	bl	8008b7c <HAL_GetTick>
 800e4d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e4d2:	e008      	b.n	800e4e6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800e4d4:	f7fa fb52 	bl	8008b7c <HAL_GetTick>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d901      	bls.n	800e4e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	e195      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e4e6:	4b92      	ldr	r3, [pc, #584]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1f0      	bne.n	800e4d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f003 0304 	and.w	r3, r3, #4
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	f000 8081 	beq.w	800e602 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e500:	4b8c      	ldr	r3, [pc, #560]	; (800e734 <HAL_RCC_OscConfig+0x770>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a8b      	ldr	r2, [pc, #556]	; (800e734 <HAL_RCC_OscConfig+0x770>)
 800e506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e50a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e50c:	f7fa fb36 	bl	8008b7c <HAL_GetTick>
 800e510:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e512:	e008      	b.n	800e526 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800e514:	f7fa fb32 	bl	8008b7c <HAL_GetTick>
 800e518:	4602      	mov	r2, r0
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	2b64      	cmp	r3, #100	; 0x64
 800e520:	d901      	bls.n	800e526 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e522:	2303      	movs	r3, #3
 800e524:	e175      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e526:	4b83      	ldr	r3, [pc, #524]	; (800e734 <HAL_RCC_OscConfig+0x770>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d0f0      	beq.n	800e514 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d106      	bne.n	800e548 <HAL_RCC_OscConfig+0x584>
 800e53a:	4b7d      	ldr	r3, [pc, #500]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e53e:	4a7c      	ldr	r2, [pc, #496]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e540:	f043 0301 	orr.w	r3, r3, #1
 800e544:	6713      	str	r3, [r2, #112]	; 0x70
 800e546:	e02d      	b.n	800e5a4 <HAL_RCC_OscConfig+0x5e0>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10c      	bne.n	800e56a <HAL_RCC_OscConfig+0x5a6>
 800e550:	4b77      	ldr	r3, [pc, #476]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e554:	4a76      	ldr	r2, [pc, #472]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e556:	f023 0301 	bic.w	r3, r3, #1
 800e55a:	6713      	str	r3, [r2, #112]	; 0x70
 800e55c:	4b74      	ldr	r3, [pc, #464]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e560:	4a73      	ldr	r2, [pc, #460]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e562:	f023 0304 	bic.w	r3, r3, #4
 800e566:	6713      	str	r3, [r2, #112]	; 0x70
 800e568:	e01c      	b.n	800e5a4 <HAL_RCC_OscConfig+0x5e0>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	2b05      	cmp	r3, #5
 800e570:	d10c      	bne.n	800e58c <HAL_RCC_OscConfig+0x5c8>
 800e572:	4b6f      	ldr	r3, [pc, #444]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e576:	4a6e      	ldr	r2, [pc, #440]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e578:	f043 0304 	orr.w	r3, r3, #4
 800e57c:	6713      	str	r3, [r2, #112]	; 0x70
 800e57e:	4b6c      	ldr	r3, [pc, #432]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e582:	4a6b      	ldr	r2, [pc, #428]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e584:	f043 0301 	orr.w	r3, r3, #1
 800e588:	6713      	str	r3, [r2, #112]	; 0x70
 800e58a:	e00b      	b.n	800e5a4 <HAL_RCC_OscConfig+0x5e0>
 800e58c:	4b68      	ldr	r3, [pc, #416]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e58e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e590:	4a67      	ldr	r2, [pc, #412]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e592:	f023 0301 	bic.w	r3, r3, #1
 800e596:	6713      	str	r3, [r2, #112]	; 0x70
 800e598:	4b65      	ldr	r3, [pc, #404]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59c:	4a64      	ldr	r2, [pc, #400]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e59e:	f023 0304 	bic.w	r3, r3, #4
 800e5a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d015      	beq.n	800e5d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5ac:	f7fa fae6 	bl	8008b7c <HAL_GetTick>
 800e5b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e5b2:	e00a      	b.n	800e5ca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5b4:	f7fa fae2 	bl	8008b7c <HAL_GetTick>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	1ad3      	subs	r3, r2, r3
 800e5be:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d901      	bls.n	800e5ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e5c6:	2303      	movs	r3, #3
 800e5c8:	e123      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e5ca:	4b59      	ldr	r3, [pc, #356]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ce:	f003 0302 	and.w	r3, r3, #2
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d0ee      	beq.n	800e5b4 <HAL_RCC_OscConfig+0x5f0>
 800e5d6:	e014      	b.n	800e602 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e5d8:	f7fa fad0 	bl	8008b7c <HAL_GetTick>
 800e5dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e5de:	e00a      	b.n	800e5f6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5e0:	f7fa facc 	bl	8008b7c <HAL_GetTick>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d901      	bls.n	800e5f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	e10d      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e5f6:	4b4e      	ldr	r3, [pc, #312]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1ee      	bne.n	800e5e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e606:	2b00      	cmp	r3, #0
 800e608:	f000 8102 	beq.w	800e810 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e60c:	4b48      	ldr	r3, [pc, #288]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e614:	2b18      	cmp	r3, #24
 800e616:	f000 80bd 	beq.w	800e794 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61e:	2b02      	cmp	r3, #2
 800e620:	f040 809e 	bne.w	800e760 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e624:	4b42      	ldr	r3, [pc, #264]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a41      	ldr	r2, [pc, #260]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e62a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e62e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e630:	f7fa faa4 	bl	8008b7c <HAL_GetTick>
 800e634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e636:	e008      	b.n	800e64a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e638:	f7fa faa0 	bl	8008b7c <HAL_GetTick>
 800e63c:	4602      	mov	r2, r0
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	2b02      	cmp	r3, #2
 800e644:	d901      	bls.n	800e64a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e646:	2303      	movs	r3, #3
 800e648:	e0e3      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e64a:	4b39      	ldr	r3, [pc, #228]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1f0      	bne.n	800e638 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e656:	4b36      	ldr	r3, [pc, #216]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e65a:	4b37      	ldr	r3, [pc, #220]	; (800e738 <HAL_RCC_OscConfig+0x774>)
 800e65c:	4013      	ands	r3, r2
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e666:	0112      	lsls	r2, r2, #4
 800e668:	430a      	orrs	r2, r1
 800e66a:	4931      	ldr	r1, [pc, #196]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e66c:	4313      	orrs	r3, r2
 800e66e:	628b      	str	r3, [r1, #40]	; 0x28
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e674:	3b01      	subs	r3, #1
 800e676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67e:	3b01      	subs	r3, #1
 800e680:	025b      	lsls	r3, r3, #9
 800e682:	b29b      	uxth	r3, r3
 800e684:	431a      	orrs	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e68a:	3b01      	subs	r3, #1
 800e68c:	041b      	lsls	r3, r3, #16
 800e68e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e692:	431a      	orrs	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e698:	3b01      	subs	r3, #1
 800e69a:	061b      	lsls	r3, r3, #24
 800e69c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e6a0:	4923      	ldr	r1, [pc, #140]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800e6a6:	4b22      	ldr	r3, [pc, #136]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6aa:	4a21      	ldr	r2, [pc, #132]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6ac:	f023 0301 	bic.w	r3, r3, #1
 800e6b0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e6b2:	4b1f      	ldr	r3, [pc, #124]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6b6:	4b21      	ldr	r3, [pc, #132]	; (800e73c <HAL_RCC_OscConfig+0x778>)
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e6be:	00d2      	lsls	r2, r2, #3
 800e6c0:	491b      	ldr	r1, [pc, #108]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e6c6:	4b1a      	ldr	r3, [pc, #104]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ca:	f023 020c 	bic.w	r2, r3, #12
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d2:	4917      	ldr	r1, [pc, #92]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e6d8:	4b15      	ldr	r3, [pc, #84]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6dc:	f023 0202 	bic.w	r2, r3, #2
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6e4:	4912      	ldr	r1, [pc, #72]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e6ea:	4b11      	ldr	r3, [pc, #68]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ee:	4a10      	ldr	r2, [pc, #64]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6f6:	4b0e      	ldr	r3, [pc, #56]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	4a0d      	ldr	r2, [pc, #52]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e6fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e700:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e702:	4b0b      	ldr	r3, [pc, #44]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e706:	4a0a      	ldr	r2, [pc, #40]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e70c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800e70e:	4b08      	ldr	r3, [pc, #32]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e712:	4a07      	ldr	r2, [pc, #28]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e714:	f043 0301 	orr.w	r3, r3, #1
 800e718:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e71a:	4b05      	ldr	r3, [pc, #20]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a04      	ldr	r2, [pc, #16]	; (800e730 <HAL_RCC_OscConfig+0x76c>)
 800e720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e726:	f7fa fa29 	bl	8008b7c <HAL_GetTick>
 800e72a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e72c:	e011      	b.n	800e752 <HAL_RCC_OscConfig+0x78e>
 800e72e:	bf00      	nop
 800e730:	58024400 	.word	0x58024400
 800e734:	58024800 	.word	0x58024800
 800e738:	fffffc0c 	.word	0xfffffc0c
 800e73c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e740:	f7fa fa1c 	bl	8008b7c <HAL_GetTick>
 800e744:	4602      	mov	r2, r0
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d901      	bls.n	800e752 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e74e:	2303      	movs	r3, #3
 800e750:	e05f      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e752:	4b32      	ldr	r3, [pc, #200]	; (800e81c <HAL_RCC_OscConfig+0x858>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d0f0      	beq.n	800e740 <HAL_RCC_OscConfig+0x77c>
 800e75e:	e057      	b.n	800e810 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e760:	4b2e      	ldr	r3, [pc, #184]	; (800e81c <HAL_RCC_OscConfig+0x858>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a2d      	ldr	r2, [pc, #180]	; (800e81c <HAL_RCC_OscConfig+0x858>)
 800e766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e76a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e76c:	f7fa fa06 	bl	8008b7c <HAL_GetTick>
 800e770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e772:	e008      	b.n	800e786 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e774:	f7fa fa02 	bl	8008b7c <HAL_GetTick>
 800e778:	4602      	mov	r2, r0
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	1ad3      	subs	r3, r2, r3
 800e77e:	2b02      	cmp	r3, #2
 800e780:	d901      	bls.n	800e786 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e782:	2303      	movs	r3, #3
 800e784:	e045      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e786:	4b25      	ldr	r3, [pc, #148]	; (800e81c <HAL_RCC_OscConfig+0x858>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1f0      	bne.n	800e774 <HAL_RCC_OscConfig+0x7b0>
 800e792:	e03d      	b.n	800e810 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e794:	4b21      	ldr	r3, [pc, #132]	; (800e81c <HAL_RCC_OscConfig+0x858>)
 800e796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e798:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e79a:	4b20      	ldr	r3, [pc, #128]	; (800e81c <HAL_RCC_OscConfig+0x858>)
 800e79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d031      	beq.n	800e80c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	f003 0203 	and.w	r2, r3, #3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d12a      	bne.n	800e80c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	091b      	lsrs	r3, r3, #4
 800e7ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d122      	bne.n	800e80c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d11a      	bne.n	800e80c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	0a5b      	lsrs	r3, r3, #9
 800e7da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d111      	bne.n	800e80c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	0c1b      	lsrs	r3, r3, #16
 800e7ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d108      	bne.n	800e80c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	0e1b      	lsrs	r3, r3, #24
 800e7fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e806:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e808:	429a      	cmp	r2, r3
 800e80a:	d001      	beq.n	800e810 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e80c:	2301      	movs	r3, #1
 800e80e:	e000      	b.n	800e812 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3730      	adds	r7, #48	; 0x30
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}
 800e81a:	bf00      	nop
 800e81c:	58024400 	.word	0x58024400

0800e820 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d101      	bne.n	800e834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	e19c      	b.n	800eb6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e834:	4b8a      	ldr	r3, [pc, #552]	; (800ea60 <HAL_RCC_ClockConfig+0x240>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f003 030f 	and.w	r3, r3, #15
 800e83c:	683a      	ldr	r2, [r7, #0]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d910      	bls.n	800e864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e842:	4b87      	ldr	r3, [pc, #540]	; (800ea60 <HAL_RCC_ClockConfig+0x240>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f023 020f 	bic.w	r2, r3, #15
 800e84a:	4985      	ldr	r1, [pc, #532]	; (800ea60 <HAL_RCC_ClockConfig+0x240>)
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	4313      	orrs	r3, r2
 800e850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e852:	4b83      	ldr	r3, [pc, #524]	; (800ea60 <HAL_RCC_ClockConfig+0x240>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f003 030f 	and.w	r3, r3, #15
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d001      	beq.n	800e864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	e184      	b.n	800eb6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f003 0304 	and.w	r3, r3, #4
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d010      	beq.n	800e892 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	691a      	ldr	r2, [r3, #16]
 800e874:	4b7b      	ldr	r3, [pc, #492]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e876:	699b      	ldr	r3, [r3, #24]
 800e878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d908      	bls.n	800e892 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e880:	4b78      	ldr	r3, [pc, #480]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	691b      	ldr	r3, [r3, #16]
 800e88c:	4975      	ldr	r1, [pc, #468]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e88e:	4313      	orrs	r3, r2
 800e890:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f003 0308 	and.w	r3, r3, #8
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d010      	beq.n	800e8c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	695a      	ldr	r2, [r3, #20]
 800e8a2:	4b70      	ldr	r3, [pc, #448]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e8a4:	69db      	ldr	r3, [r3, #28]
 800e8a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d908      	bls.n	800e8c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e8ae:	4b6d      	ldr	r3, [pc, #436]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e8b0:	69db      	ldr	r3, [r3, #28]
 800e8b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	496a      	ldr	r1, [pc, #424]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f003 0310 	and.w	r3, r3, #16
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d010      	beq.n	800e8ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	699a      	ldr	r2, [r3, #24]
 800e8d0:	4b64      	ldr	r3, [pc, #400]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e8d2:	69db      	ldr	r3, [r3, #28]
 800e8d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d908      	bls.n	800e8ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e8dc:	4b61      	ldr	r3, [pc, #388]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e8de:	69db      	ldr	r3, [r3, #28]
 800e8e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	699b      	ldr	r3, [r3, #24]
 800e8e8:	495e      	ldr	r1, [pc, #376]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f003 0320 	and.w	r3, r3, #32
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d010      	beq.n	800e91c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	69da      	ldr	r2, [r3, #28]
 800e8fe:	4b59      	ldr	r3, [pc, #356]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e900:	6a1b      	ldr	r3, [r3, #32]
 800e902:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e906:	429a      	cmp	r2, r3
 800e908:	d908      	bls.n	800e91c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800e90a:	4b56      	ldr	r3, [pc, #344]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	4953      	ldr	r1, [pc, #332]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e918:	4313      	orrs	r3, r2
 800e91a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f003 0302 	and.w	r3, r3, #2
 800e924:	2b00      	cmp	r3, #0
 800e926:	d010      	beq.n	800e94a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68da      	ldr	r2, [r3, #12]
 800e92c:	4b4d      	ldr	r3, [pc, #308]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e92e:	699b      	ldr	r3, [r3, #24]
 800e930:	f003 030f 	and.w	r3, r3, #15
 800e934:	429a      	cmp	r2, r3
 800e936:	d908      	bls.n	800e94a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e938:	4b4a      	ldr	r3, [pc, #296]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e93a:	699b      	ldr	r3, [r3, #24]
 800e93c:	f023 020f 	bic.w	r2, r3, #15
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	4947      	ldr	r1, [pc, #284]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e946:	4313      	orrs	r3, r2
 800e948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	2b00      	cmp	r3, #0
 800e954:	d055      	beq.n	800ea02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e956:	4b43      	ldr	r3, [pc, #268]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e958:	699b      	ldr	r3, [r3, #24]
 800e95a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	689b      	ldr	r3, [r3, #8]
 800e962:	4940      	ldr	r1, [pc, #256]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e964:	4313      	orrs	r3, r2
 800e966:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d107      	bne.n	800e980 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e970:	4b3c      	ldr	r3, [pc, #240]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d121      	bne.n	800e9c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e97c:	2301      	movs	r3, #1
 800e97e:	e0f6      	b.n	800eb6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	2b03      	cmp	r3, #3
 800e986:	d107      	bne.n	800e998 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e988:	4b36      	ldr	r3, [pc, #216]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e990:	2b00      	cmp	r3, #0
 800e992:	d115      	bne.n	800e9c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	e0ea      	b.n	800eb6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d107      	bne.n	800e9b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e9a0:	4b30      	ldr	r3, [pc, #192]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d109      	bne.n	800e9c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e0de      	b.n	800eb6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e9b0:	4b2c      	ldr	r3, [pc, #176]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f003 0304 	and.w	r3, r3, #4
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d101      	bne.n	800e9c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	e0d6      	b.n	800eb6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e9c0:	4b28      	ldr	r3, [pc, #160]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	f023 0207 	bic.w	r2, r3, #7
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	4925      	ldr	r1, [pc, #148]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9d2:	f7fa f8d3 	bl	8008b7c <HAL_GetTick>
 800e9d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e9d8:	e00a      	b.n	800e9f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e9da:	f7fa f8cf 	bl	8008b7c <HAL_GetTick>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d901      	bls.n	800e9f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	e0be      	b.n	800eb6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e9f0:	4b1c      	ldr	r3, [pc, #112]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800e9f2:	691b      	ldr	r3, [r3, #16]
 800e9f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	00db      	lsls	r3, r3, #3
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d1eb      	bne.n	800e9da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f003 0302 	and.w	r3, r3, #2
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d010      	beq.n	800ea30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	68da      	ldr	r2, [r3, #12]
 800ea12:	4b14      	ldr	r3, [pc, #80]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	f003 030f 	and.w	r3, r3, #15
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d208      	bcs.n	800ea30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ea1e:	4b11      	ldr	r3, [pc, #68]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800ea20:	699b      	ldr	r3, [r3, #24]
 800ea22:	f023 020f 	bic.w	r2, r3, #15
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	490e      	ldr	r1, [pc, #56]	; (800ea64 <HAL_RCC_ClockConfig+0x244>)
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ea30:	4b0b      	ldr	r3, [pc, #44]	; (800ea60 <HAL_RCC_ClockConfig+0x240>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f003 030f 	and.w	r3, r3, #15
 800ea38:	683a      	ldr	r2, [r7, #0]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d214      	bcs.n	800ea68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ea3e:	4b08      	ldr	r3, [pc, #32]	; (800ea60 <HAL_RCC_ClockConfig+0x240>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f023 020f 	bic.w	r2, r3, #15
 800ea46:	4906      	ldr	r1, [pc, #24]	; (800ea60 <HAL_RCC_ClockConfig+0x240>)
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea4e:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <HAL_RCC_ClockConfig+0x240>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f003 030f 	and.w	r3, r3, #15
 800ea56:	683a      	ldr	r2, [r7, #0]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d005      	beq.n	800ea68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e086      	b.n	800eb6e <HAL_RCC_ClockConfig+0x34e>
 800ea60:	52002000 	.word	0x52002000
 800ea64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f003 0304 	and.w	r3, r3, #4
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d010      	beq.n	800ea96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	691a      	ldr	r2, [r3, #16]
 800ea78:	4b3f      	ldr	r3, [pc, #252]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d208      	bcs.n	800ea96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ea84:	4b3c      	ldr	r3, [pc, #240]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	691b      	ldr	r3, [r3, #16]
 800ea90:	4939      	ldr	r1, [pc, #228]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800ea92:	4313      	orrs	r3, r2
 800ea94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f003 0308 	and.w	r3, r3, #8
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d010      	beq.n	800eac4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	695a      	ldr	r2, [r3, #20]
 800eaa6:	4b34      	ldr	r3, [pc, #208]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eaa8:	69db      	ldr	r3, [r3, #28]
 800eaaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d208      	bcs.n	800eac4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800eab2:	4b31      	ldr	r3, [pc, #196]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	695b      	ldr	r3, [r3, #20]
 800eabe:	492e      	ldr	r1, [pc, #184]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eac0:	4313      	orrs	r3, r2
 800eac2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f003 0310 	and.w	r3, r3, #16
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d010      	beq.n	800eaf2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	699a      	ldr	r2, [r3, #24]
 800ead4:	4b28      	ldr	r3, [pc, #160]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800ead6:	69db      	ldr	r3, [r3, #28]
 800ead8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eadc:	429a      	cmp	r2, r3
 800eade:	d208      	bcs.n	800eaf2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eae0:	4b25      	ldr	r3, [pc, #148]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eae2:	69db      	ldr	r3, [r3, #28]
 800eae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	4922      	ldr	r1, [pc, #136]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 0320 	and.w	r3, r3, #32
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d010      	beq.n	800eb20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	69da      	ldr	r2, [r3, #28]
 800eb02:	4b1d      	ldr	r3, [pc, #116]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eb04:	6a1b      	ldr	r3, [r3, #32]
 800eb06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d208      	bcs.n	800eb20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800eb0e:	4b1a      	ldr	r3, [pc, #104]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eb10:	6a1b      	ldr	r3, [r3, #32]
 800eb12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	69db      	ldr	r3, [r3, #28]
 800eb1a:	4917      	ldr	r1, [pc, #92]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800eb20:	f000 f834 	bl	800eb8c <HAL_RCC_GetSysClockFreq>
 800eb24:	4602      	mov	r2, r0
 800eb26:	4b14      	ldr	r3, [pc, #80]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	0a1b      	lsrs	r3, r3, #8
 800eb2c:	f003 030f 	and.w	r3, r3, #15
 800eb30:	4912      	ldr	r1, [pc, #72]	; (800eb7c <HAL_RCC_ClockConfig+0x35c>)
 800eb32:	5ccb      	ldrb	r3, [r1, r3]
 800eb34:	f003 031f 	and.w	r3, r3, #31
 800eb38:	fa22 f303 	lsr.w	r3, r2, r3
 800eb3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eb3e:	4b0e      	ldr	r3, [pc, #56]	; (800eb78 <HAL_RCC_ClockConfig+0x358>)
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	f003 030f 	and.w	r3, r3, #15
 800eb46:	4a0d      	ldr	r2, [pc, #52]	; (800eb7c <HAL_RCC_ClockConfig+0x35c>)
 800eb48:	5cd3      	ldrb	r3, [r2, r3]
 800eb4a:	f003 031f 	and.w	r3, r3, #31
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	fa22 f303 	lsr.w	r3, r2, r3
 800eb54:	4a0a      	ldr	r2, [pc, #40]	; (800eb80 <HAL_RCC_ClockConfig+0x360>)
 800eb56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800eb58:	4a0a      	ldr	r2, [pc, #40]	; (800eb84 <HAL_RCC_ClockConfig+0x364>)
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800eb5e:	4b0a      	ldr	r3, [pc, #40]	; (800eb88 <HAL_RCC_ClockConfig+0x368>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7f9 ffc0 	bl	8008ae8 <HAL_InitTick>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3718      	adds	r7, #24
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	58024400 	.word	0x58024400
 800eb7c:	08034140 	.word	0x08034140
 800eb80:	24000004 	.word	0x24000004
 800eb84:	24000000 	.word	0x24000000
 800eb88:	24000008 	.word	0x24000008

0800eb8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b089      	sub	sp, #36	; 0x24
 800eb90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eb92:	4bb3      	ldr	r3, [pc, #716]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eb94:	691b      	ldr	r3, [r3, #16]
 800eb96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb9a:	2b18      	cmp	r3, #24
 800eb9c:	f200 8155 	bhi.w	800ee4a <HAL_RCC_GetSysClockFreq+0x2be>
 800eba0:	a201      	add	r2, pc, #4	; (adr r2, 800eba8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800eba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba6:	bf00      	nop
 800eba8:	0800ec0d 	.word	0x0800ec0d
 800ebac:	0800ee4b 	.word	0x0800ee4b
 800ebb0:	0800ee4b 	.word	0x0800ee4b
 800ebb4:	0800ee4b 	.word	0x0800ee4b
 800ebb8:	0800ee4b 	.word	0x0800ee4b
 800ebbc:	0800ee4b 	.word	0x0800ee4b
 800ebc0:	0800ee4b 	.word	0x0800ee4b
 800ebc4:	0800ee4b 	.word	0x0800ee4b
 800ebc8:	0800ec33 	.word	0x0800ec33
 800ebcc:	0800ee4b 	.word	0x0800ee4b
 800ebd0:	0800ee4b 	.word	0x0800ee4b
 800ebd4:	0800ee4b 	.word	0x0800ee4b
 800ebd8:	0800ee4b 	.word	0x0800ee4b
 800ebdc:	0800ee4b 	.word	0x0800ee4b
 800ebe0:	0800ee4b 	.word	0x0800ee4b
 800ebe4:	0800ee4b 	.word	0x0800ee4b
 800ebe8:	0800ec39 	.word	0x0800ec39
 800ebec:	0800ee4b 	.word	0x0800ee4b
 800ebf0:	0800ee4b 	.word	0x0800ee4b
 800ebf4:	0800ee4b 	.word	0x0800ee4b
 800ebf8:	0800ee4b 	.word	0x0800ee4b
 800ebfc:	0800ee4b 	.word	0x0800ee4b
 800ec00:	0800ee4b 	.word	0x0800ee4b
 800ec04:	0800ee4b 	.word	0x0800ee4b
 800ec08:	0800ec3f 	.word	0x0800ec3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec0c:	4b94      	ldr	r3, [pc, #592]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f003 0320 	and.w	r3, r3, #32
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d009      	beq.n	800ec2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ec18:	4b91      	ldr	r3, [pc, #580]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	08db      	lsrs	r3, r3, #3
 800ec1e:	f003 0303 	and.w	r3, r3, #3
 800ec22:	4a90      	ldr	r2, [pc, #576]	; (800ee64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ec24:	fa22 f303 	lsr.w	r3, r2, r3
 800ec28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ec2a:	e111      	b.n	800ee50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ec2c:	4b8d      	ldr	r3, [pc, #564]	; (800ee64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ec2e:	61bb      	str	r3, [r7, #24]
    break;
 800ec30:	e10e      	b.n	800ee50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ec32:	4b8d      	ldr	r3, [pc, #564]	; (800ee68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ec34:	61bb      	str	r3, [r7, #24]
    break;
 800ec36:	e10b      	b.n	800ee50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ec38:	4b8c      	ldr	r3, [pc, #560]	; (800ee6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ec3a:	61bb      	str	r3, [r7, #24]
    break;
 800ec3c:	e108      	b.n	800ee50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ec3e:	4b88      	ldr	r3, [pc, #544]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec42:	f003 0303 	and.w	r3, r3, #3
 800ec46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ec48:	4b85      	ldr	r3, [pc, #532]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec4c:	091b      	lsrs	r3, r3, #4
 800ec4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ec54:	4b82      	ldr	r3, [pc, #520]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec58:	f003 0301 	and.w	r3, r3, #1
 800ec5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ec5e:	4b80      	ldr	r3, [pc, #512]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ec60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec62:	08db      	lsrs	r3, r3, #3
 800ec64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	fb02 f303 	mul.w	r3, r2, r3
 800ec6e:	ee07 3a90 	vmov	s15, r3
 800ec72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f000 80e1 	beq.w	800ee44 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	f000 8083 	beq.w	800ed90 <HAL_RCC_GetSysClockFreq+0x204>
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	2b02      	cmp	r3, #2
 800ec8e:	f200 80a1 	bhi.w	800edd4 <HAL_RCC_GetSysClockFreq+0x248>
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d003      	beq.n	800eca0 <HAL_RCC_GetSysClockFreq+0x114>
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	2b01      	cmp	r3, #1
 800ec9c:	d056      	beq.n	800ed4c <HAL_RCC_GetSysClockFreq+0x1c0>
 800ec9e:	e099      	b.n	800edd4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eca0:	4b6f      	ldr	r3, [pc, #444]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f003 0320 	and.w	r3, r3, #32
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d02d      	beq.n	800ed08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ecac:	4b6c      	ldr	r3, [pc, #432]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	08db      	lsrs	r3, r3, #3
 800ecb2:	f003 0303 	and.w	r3, r3, #3
 800ecb6:	4a6b      	ldr	r2, [pc, #428]	; (800ee64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ecb8:	fa22 f303 	lsr.w	r3, r2, r3
 800ecbc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	ee07 3a90 	vmov	s15, r3
 800ecc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	ee07 3a90 	vmov	s15, r3
 800ecce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecd6:	4b62      	ldr	r3, [pc, #392]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ecd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecde:	ee07 3a90 	vmov	s15, r3
 800ece2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ece6:	ed97 6a02 	vldr	s12, [r7, #8]
 800ecea:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ee70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ecee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ecfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800ed06:	e087      	b.n	800ee18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	ee07 3a90 	vmov	s15, r3
 800ed0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed12:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ee74 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ed16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed1a:	4b51      	ldr	r3, [pc, #324]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed22:	ee07 3a90 	vmov	s15, r3
 800ed26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed2a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ee70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed4a:	e065      	b.n	800ee18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	ee07 3a90 	vmov	s15, r3
 800ed52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed56:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ee78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ed5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed5e:	4b40      	ldr	r3, [pc, #256]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ed60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed66:	ee07 3a90 	vmov	s15, r3
 800ed6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed6e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ed72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ee70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ed76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed8e:	e043      	b.n	800ee18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	ee07 3a90 	vmov	s15, r3
 800ed96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ee7c <HAL_RCC_GetSysClockFreq+0x2f0>
 800ed9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eda2:	4b2f      	ldr	r3, [pc, #188]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800eda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edaa:	ee07 3a90 	vmov	s15, r3
 800edae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800edb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ee70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800edba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800edbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800edc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800edc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800edd2:	e021      	b.n	800ee18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	ee07 3a90 	vmov	s15, r3
 800edda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edde:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ee78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ede2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ede6:	4b1e      	ldr	r3, [pc, #120]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ede8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edee:	ee07 3a90 	vmov	s15, r3
 800edf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800edf6:	ed97 6a02 	vldr	s12, [r7, #8]
 800edfa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ee70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800edfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ee02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ee16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ee18:	4b11      	ldr	r3, [pc, #68]	; (800ee60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ee1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee1c:	0a5b      	lsrs	r3, r3, #9
 800ee1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee22:	3301      	adds	r3, #1
 800ee24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	ee07 3a90 	vmov	s15, r3
 800ee2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ee30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ee34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ee3c:	ee17 3a90 	vmov	r3, s15
 800ee40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ee42:	e005      	b.n	800ee50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ee44:	2300      	movs	r3, #0
 800ee46:	61bb      	str	r3, [r7, #24]
    break;
 800ee48:	e002      	b.n	800ee50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ee4a:	4b07      	ldr	r3, [pc, #28]	; (800ee68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ee4c:	61bb      	str	r3, [r7, #24]
    break;
 800ee4e:	bf00      	nop
  }

  return sysclockfreq;
 800ee50:	69bb      	ldr	r3, [r7, #24]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3724      	adds	r7, #36	; 0x24
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	58024400 	.word	0x58024400
 800ee64:	03d09000 	.word	0x03d09000
 800ee68:	003d0900 	.word	0x003d0900
 800ee6c:	017d7840 	.word	0x017d7840
 800ee70:	46000000 	.word	0x46000000
 800ee74:	4c742400 	.word	0x4c742400
 800ee78:	4a742400 	.word	0x4a742400
 800ee7c:	4bbebc20 	.word	0x4bbebc20

0800ee80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ee86:	f7ff fe81 	bl	800eb8c <HAL_RCC_GetSysClockFreq>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	4b10      	ldr	r3, [pc, #64]	; (800eed0 <HAL_RCC_GetHCLKFreq+0x50>)
 800ee8e:	699b      	ldr	r3, [r3, #24]
 800ee90:	0a1b      	lsrs	r3, r3, #8
 800ee92:	f003 030f 	and.w	r3, r3, #15
 800ee96:	490f      	ldr	r1, [pc, #60]	; (800eed4 <HAL_RCC_GetHCLKFreq+0x54>)
 800ee98:	5ccb      	ldrb	r3, [r1, r3]
 800ee9a:	f003 031f 	and.w	r3, r3, #31
 800ee9e:	fa22 f303 	lsr.w	r3, r2, r3
 800eea2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eea4:	4b0a      	ldr	r3, [pc, #40]	; (800eed0 <HAL_RCC_GetHCLKFreq+0x50>)
 800eea6:	699b      	ldr	r3, [r3, #24]
 800eea8:	f003 030f 	and.w	r3, r3, #15
 800eeac:	4a09      	ldr	r2, [pc, #36]	; (800eed4 <HAL_RCC_GetHCLKFreq+0x54>)
 800eeae:	5cd3      	ldrb	r3, [r2, r3]
 800eeb0:	f003 031f 	and.w	r3, r3, #31
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	fa22 f303 	lsr.w	r3, r2, r3
 800eeba:	4a07      	ldr	r2, [pc, #28]	; (800eed8 <HAL_RCC_GetHCLKFreq+0x58>)
 800eebc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800eebe:	4a07      	ldr	r2, [pc, #28]	; (800eedc <HAL_RCC_GetHCLKFreq+0x5c>)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800eec4:	4b04      	ldr	r3, [pc, #16]	; (800eed8 <HAL_RCC_GetHCLKFreq+0x58>)
 800eec6:	681b      	ldr	r3, [r3, #0]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	58024400 	.word	0x58024400
 800eed4:	08034140 	.word	0x08034140
 800eed8:	24000004 	.word	0x24000004
 800eedc:	24000000 	.word	0x24000000

0800eee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800eee4:	f7ff ffcc 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800eee8:	4602      	mov	r2, r0
 800eeea:	4b06      	ldr	r3, [pc, #24]	; (800ef04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eeec:	69db      	ldr	r3, [r3, #28]
 800eeee:	091b      	lsrs	r3, r3, #4
 800eef0:	f003 0307 	and.w	r3, r3, #7
 800eef4:	4904      	ldr	r1, [pc, #16]	; (800ef08 <HAL_RCC_GetPCLK1Freq+0x28>)
 800eef6:	5ccb      	ldrb	r3, [r1, r3]
 800eef8:	f003 031f 	and.w	r3, r3, #31
 800eefc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	58024400 	.word	0x58024400
 800ef08:	08034140 	.word	0x08034140

0800ef0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ef10:	f7ff ffb6 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800ef14:	4602      	mov	r2, r0
 800ef16:	4b06      	ldr	r3, [pc, #24]	; (800ef30 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ef18:	69db      	ldr	r3, [r3, #28]
 800ef1a:	0a1b      	lsrs	r3, r3, #8
 800ef1c:	f003 0307 	and.w	r3, r3, #7
 800ef20:	4904      	ldr	r1, [pc, #16]	; (800ef34 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ef22:	5ccb      	ldrb	r3, [r1, r3]
 800ef24:	f003 031f 	and.w	r3, r3, #31
 800ef28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	58024400 	.word	0x58024400
 800ef34:	08034140 	.word	0x08034140

0800ef38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b086      	sub	sp, #24
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ef40:	2300      	movs	r3, #0
 800ef42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ef44:	2300      	movs	r3, #0
 800ef46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d03f      	beq.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ef5c:	d02a      	beq.n	800efb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ef5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ef62:	d824      	bhi.n	800efae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ef64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef68:	d018      	beq.n	800ef9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ef6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef6e:	d81e      	bhi.n	800efae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d003      	beq.n	800ef7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ef74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef78:	d007      	beq.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ef7a:	e018      	b.n	800efae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef7c:	4ba3      	ldr	r3, [pc, #652]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ef7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef80:	4aa2      	ldr	r2, [pc, #648]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ef82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ef88:	e015      	b.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	2102      	movs	r1, #2
 800ef90:	4618      	mov	r0, r3
 800ef92:	f001 f9d5 	bl	8010340 <RCCEx_PLL2_Config>
 800ef96:	4603      	mov	r3, r0
 800ef98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ef9a:	e00c      	b.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3324      	adds	r3, #36	; 0x24
 800efa0:	2102      	movs	r1, #2
 800efa2:	4618      	mov	r0, r3
 800efa4:	f001 fa7e 	bl	80104a4 <RCCEx_PLL3_Config>
 800efa8:	4603      	mov	r3, r0
 800efaa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800efac:	e003      	b.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	75fb      	strb	r3, [r7, #23]
      break;
 800efb2:	e000      	b.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800efb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800efb6:	7dfb      	ldrb	r3, [r7, #23]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d109      	bne.n	800efd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800efbc:	4b93      	ldr	r3, [pc, #588]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800efbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efc8:	4990      	ldr	r1, [pc, #576]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800efca:	4313      	orrs	r3, r2
 800efcc:	650b      	str	r3, [r1, #80]	; 0x50
 800efce:	e001      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efd0:	7dfb      	ldrb	r3, [r7, #23]
 800efd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d03d      	beq.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe4:	2b04      	cmp	r3, #4
 800efe6:	d826      	bhi.n	800f036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800efe8:	a201      	add	r2, pc, #4	; (adr r2, 800eff0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800efea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efee:	bf00      	nop
 800eff0:	0800f005 	.word	0x0800f005
 800eff4:	0800f013 	.word	0x0800f013
 800eff8:	0800f025 	.word	0x0800f025
 800effc:	0800f03d 	.word	0x0800f03d
 800f000:	0800f03d 	.word	0x0800f03d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f004:	4b81      	ldr	r3, [pc, #516]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f008:	4a80      	ldr	r2, [pc, #512]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f00a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f00e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f010:	e015      	b.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	3304      	adds	r3, #4
 800f016:	2100      	movs	r1, #0
 800f018:	4618      	mov	r0, r3
 800f01a:	f001 f991 	bl	8010340 <RCCEx_PLL2_Config>
 800f01e:	4603      	mov	r3, r0
 800f020:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f022:	e00c      	b.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	3324      	adds	r3, #36	; 0x24
 800f028:	2100      	movs	r1, #0
 800f02a:	4618      	mov	r0, r3
 800f02c:	f001 fa3a 	bl	80104a4 <RCCEx_PLL3_Config>
 800f030:	4603      	mov	r3, r0
 800f032:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f034:	e003      	b.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	75fb      	strb	r3, [r7, #23]
      break;
 800f03a:	e000      	b.n	800f03e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800f03c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f03e:	7dfb      	ldrb	r3, [r7, #23]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d109      	bne.n	800f058 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f044:	4b71      	ldr	r3, [pc, #452]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f048:	f023 0207 	bic.w	r2, r3, #7
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f050:	496e      	ldr	r1, [pc, #440]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f052:	4313      	orrs	r3, r2
 800f054:	650b      	str	r3, [r1, #80]	; 0x50
 800f056:	e001      	b.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f058:	7dfb      	ldrb	r3, [r7, #23]
 800f05a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f064:	2b00      	cmp	r3, #0
 800f066:	d042      	beq.n	800f0ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f070:	d02b      	beq.n	800f0ca <HAL_RCCEx_PeriphCLKConfig+0x192>
 800f072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f076:	d825      	bhi.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800f078:	2bc0      	cmp	r3, #192	; 0xc0
 800f07a:	d028      	beq.n	800f0ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800f07c:	2bc0      	cmp	r3, #192	; 0xc0
 800f07e:	d821      	bhi.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800f080:	2b80      	cmp	r3, #128	; 0x80
 800f082:	d016      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800f084:	2b80      	cmp	r3, #128	; 0x80
 800f086:	d81d      	bhi.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d002      	beq.n	800f092 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800f08c:	2b40      	cmp	r3, #64	; 0x40
 800f08e:	d007      	beq.n	800f0a0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800f090:	e018      	b.n	800f0c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f092:	4b5e      	ldr	r3, [pc, #376]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f096:	4a5d      	ldr	r2, [pc, #372]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f09c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800f09e:	e017      	b.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f001 f94a 	bl	8010340 <RCCEx_PLL2_Config>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800f0b0:	e00e      	b.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	3324      	adds	r3, #36	; 0x24
 800f0b6:	2100      	movs	r1, #0
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f001 f9f3 	bl	80104a4 <RCCEx_PLL3_Config>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800f0c2:	e005      	b.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800f0c8:	e002      	b.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800f0ca:	bf00      	nop
 800f0cc:	e000      	b.n	800f0d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800f0ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d109      	bne.n	800f0ea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f0d6:	4b4d      	ldr	r3, [pc, #308]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f0d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0e2:	494a      	ldr	r1, [pc, #296]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	650b      	str	r3, [r1, #80]	; 0x50
 800f0e8:	e001      	b.n	800f0ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0ea:	7dfb      	ldrb	r3, [r7, #23]
 800f0ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d049      	beq.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f100:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f104:	d030      	beq.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800f106:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f10a:	d82a      	bhi.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f10c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f110:	d02c      	beq.n	800f16c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800f112:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f116:	d824      	bhi.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f11c:	d018      	beq.n	800f150 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800f11e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f122:	d81e      	bhi.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800f124:	2b00      	cmp	r3, #0
 800f126:	d003      	beq.n	800f130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800f128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f12c:	d007      	beq.n	800f13e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800f12e:	e018      	b.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f130:	4b36      	ldr	r3, [pc, #216]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f134:	4a35      	ldr	r2, [pc, #212]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f13a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f13c:	e017      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3304      	adds	r3, #4
 800f142:	2100      	movs	r1, #0
 800f144:	4618      	mov	r0, r3
 800f146:	f001 f8fb 	bl	8010340 <RCCEx_PLL2_Config>
 800f14a:	4603      	mov	r3, r0
 800f14c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f14e:	e00e      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	3324      	adds	r3, #36	; 0x24
 800f154:	2100      	movs	r1, #0
 800f156:	4618      	mov	r0, r3
 800f158:	f001 f9a4 	bl	80104a4 <RCCEx_PLL3_Config>
 800f15c:	4603      	mov	r3, r0
 800f15e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f160:	e005      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f162:	2301      	movs	r3, #1
 800f164:	75fb      	strb	r3, [r7, #23]
      break;
 800f166:	e002      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800f168:	bf00      	nop
 800f16a:	e000      	b.n	800f16e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800f16c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f16e:	7dfb      	ldrb	r3, [r7, #23]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d10a      	bne.n	800f18a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f174:	4b25      	ldr	r3, [pc, #148]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f178:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f182:	4922      	ldr	r1, [pc, #136]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f184:	4313      	orrs	r3, r2
 800f186:	658b      	str	r3, [r1, #88]	; 0x58
 800f188:	e001      	b.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f18a:	7dfb      	ldrb	r3, [r7, #23]
 800f18c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f196:	2b00      	cmp	r3, #0
 800f198:	d04b      	beq.n	800f232 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f1a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f1a4:	d030      	beq.n	800f208 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800f1a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f1aa:	d82a      	bhi.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800f1ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f1b0:	d02e      	beq.n	800f210 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800f1b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f1b6:	d824      	bhi.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800f1b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1bc:	d018      	beq.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800f1be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1c2:	d81e      	bhi.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d003      	beq.n	800f1d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800f1c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f1cc:	d007      	beq.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800f1ce:	e018      	b.n	800f202 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f1d0:	4b0e      	ldr	r3, [pc, #56]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1d4:	4a0d      	ldr	r2, [pc, #52]	; (800f20c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800f1d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f1da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f1dc:	e019      	b.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	3304      	adds	r3, #4
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f001 f8ab 	bl	8010340 <RCCEx_PLL2_Config>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f1ee:	e010      	b.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	3324      	adds	r3, #36	; 0x24
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f001 f954 	bl	80104a4 <RCCEx_PLL3_Config>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f200:	e007      	b.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f202:	2301      	movs	r3, #1
 800f204:	75fb      	strb	r3, [r7, #23]
      break;
 800f206:	e004      	b.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800f208:	bf00      	nop
 800f20a:	e002      	b.n	800f212 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800f20c:	58024400 	.word	0x58024400
      break;
 800f210:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f212:	7dfb      	ldrb	r3, [r7, #23]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10a      	bne.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f218:	4b99      	ldr	r3, [pc, #612]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f21c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f226:	4996      	ldr	r1, [pc, #600]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f228:	4313      	orrs	r3, r2
 800f22a:	658b      	str	r3, [r1, #88]	; 0x58
 800f22c:	e001      	b.n	800f232 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f22e:	7dfb      	ldrb	r3, [r7, #23]
 800f230:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d032      	beq.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f242:	2b30      	cmp	r3, #48	; 0x30
 800f244:	d01c      	beq.n	800f280 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800f246:	2b30      	cmp	r3, #48	; 0x30
 800f248:	d817      	bhi.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800f24a:	2b20      	cmp	r3, #32
 800f24c:	d00c      	beq.n	800f268 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800f24e:	2b20      	cmp	r3, #32
 800f250:	d813      	bhi.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800f252:	2b00      	cmp	r3, #0
 800f254:	d016      	beq.n	800f284 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800f256:	2b10      	cmp	r3, #16
 800f258:	d10f      	bne.n	800f27a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f25a:	4b89      	ldr	r3, [pc, #548]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25e:	4a88      	ldr	r2, [pc, #544]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800f266:	e00e      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	3304      	adds	r3, #4
 800f26c:	2102      	movs	r1, #2
 800f26e:	4618      	mov	r0, r3
 800f270:	f001 f866 	bl	8010340 <RCCEx_PLL2_Config>
 800f274:	4603      	mov	r3, r0
 800f276:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800f278:	e005      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f27a:	2301      	movs	r3, #1
 800f27c:	75fb      	strb	r3, [r7, #23]
      break;
 800f27e:	e002      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800f280:	bf00      	nop
 800f282:	e000      	b.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800f284:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f286:	7dfb      	ldrb	r3, [r7, #23]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d109      	bne.n	800f2a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f28c:	4b7c      	ldr	r3, [pc, #496]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f28e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f298:	4979      	ldr	r1, [pc, #484]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f29a:	4313      	orrs	r3, r2
 800f29c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f29e:	e001      	b.n	800f2a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2a0:	7dfb      	ldrb	r3, [r7, #23]
 800f2a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d047      	beq.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f2b8:	d030      	beq.n	800f31c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800f2ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f2be:	d82a      	bhi.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800f2c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2c4:	d02c      	beq.n	800f320 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800f2c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2ca:	d824      	bhi.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800f2cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2d0:	d018      	beq.n	800f304 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800f2d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f2d6:	d81e      	bhi.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d003      	beq.n	800f2e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800f2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2e0:	d007      	beq.n	800f2f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800f2e2:	e018      	b.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f2e4:	4b66      	ldr	r3, [pc, #408]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2e8:	4a65      	ldr	r2, [pc, #404]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f2ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f2f0:	e017      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f001 f821 	bl	8010340 <RCCEx_PLL2_Config>
 800f2fe:	4603      	mov	r3, r0
 800f300:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f302:	e00e      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	3324      	adds	r3, #36	; 0x24
 800f308:	2100      	movs	r1, #0
 800f30a:	4618      	mov	r0, r3
 800f30c:	f001 f8ca 	bl	80104a4 <RCCEx_PLL3_Config>
 800f310:	4603      	mov	r3, r0
 800f312:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f314:	e005      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f316:	2301      	movs	r3, #1
 800f318:	75fb      	strb	r3, [r7, #23]
      break;
 800f31a:	e002      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800f31c:	bf00      	nop
 800f31e:	e000      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800f320:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f322:	7dfb      	ldrb	r3, [r7, #23]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d109      	bne.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f328:	4b55      	ldr	r3, [pc, #340]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f32c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f334:	4952      	ldr	r1, [pc, #328]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f336:	4313      	orrs	r3, r2
 800f338:	650b      	str	r3, [r1, #80]	; 0x50
 800f33a:	e001      	b.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f33c:	7dfb      	ldrb	r3, [r7, #23]
 800f33e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d049      	beq.n	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f354:	d02e      	beq.n	800f3b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800f356:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f35a:	d828      	bhi.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800f35c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f360:	d02a      	beq.n	800f3b8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800f362:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f366:	d822      	bhi.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800f368:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f36c:	d026      	beq.n	800f3bc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800f36e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f372:	d81c      	bhi.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800f374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f378:	d010      	beq.n	800f39c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800f37a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f37e:	d816      	bhi.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800f380:	2b00      	cmp	r3, #0
 800f382:	d01d      	beq.n	800f3c0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800f384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f388:	d111      	bne.n	800f3ae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	3304      	adds	r3, #4
 800f38e:	2101      	movs	r1, #1
 800f390:	4618      	mov	r0, r3
 800f392:	f000 ffd5 	bl	8010340 <RCCEx_PLL2_Config>
 800f396:	4603      	mov	r3, r0
 800f398:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f39a:	e012      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	3324      	adds	r3, #36	; 0x24
 800f3a0:	2101      	movs	r1, #1
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f001 f87e 	bl	80104a4 <RCCEx_PLL3_Config>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f3ac:	e009      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	75fb      	strb	r3, [r7, #23]
      break;
 800f3b2:	e006      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800f3b4:	bf00      	nop
 800f3b6:	e004      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800f3b8:	bf00      	nop
 800f3ba:	e002      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800f3bc:	bf00      	nop
 800f3be:	e000      	b.n	800f3c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800f3c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f3c2:	7dfb      	ldrb	r3, [r7, #23]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d109      	bne.n	800f3dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f3c8:	4b2d      	ldr	r3, [pc, #180]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3d4:	492a      	ldr	r1, [pc, #168]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	650b      	str	r3, [r1, #80]	; 0x50
 800f3da:	e001      	b.n	800f3e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3dc:	7dfb      	ldrb	r3, [r7, #23]
 800f3de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d04d      	beq.n	800f488 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f3f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f3f6:	d02e      	beq.n	800f456 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800f3f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f3fc:	d828      	bhi.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800f3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f402:	d02a      	beq.n	800f45a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800f404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f408:	d822      	bhi.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800f40a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f40e:	d026      	beq.n	800f45e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800f410:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f414:	d81c      	bhi.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800f416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f41a:	d010      	beq.n	800f43e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800f41c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f420:	d816      	bhi.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800f422:	2b00      	cmp	r3, #0
 800f424:	d01d      	beq.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800f426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f42a:	d111      	bne.n	800f450 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3304      	adds	r3, #4
 800f430:	2101      	movs	r1, #1
 800f432:	4618      	mov	r0, r3
 800f434:	f000 ff84 	bl	8010340 <RCCEx_PLL2_Config>
 800f438:	4603      	mov	r3, r0
 800f43a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f43c:	e012      	b.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	3324      	adds	r3, #36	; 0x24
 800f442:	2101      	movs	r1, #1
 800f444:	4618      	mov	r0, r3
 800f446:	f001 f82d 	bl	80104a4 <RCCEx_PLL3_Config>
 800f44a:	4603      	mov	r3, r0
 800f44c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f44e:	e009      	b.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800f450:	2301      	movs	r3, #1
 800f452:	75fb      	strb	r3, [r7, #23]
      break;
 800f454:	e006      	b.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800f456:	bf00      	nop
 800f458:	e004      	b.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800f45a:	bf00      	nop
 800f45c:	e002      	b.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800f45e:	bf00      	nop
 800f460:	e000      	b.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800f462:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f464:	7dfb      	ldrb	r3, [r7, #23]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d10c      	bne.n	800f484 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f46a:	4b05      	ldr	r3, [pc, #20]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f46e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f478:	4901      	ldr	r1, [pc, #4]	; (800f480 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800f47a:	4313      	orrs	r3, r2
 800f47c:	658b      	str	r3, [r1, #88]	; 0x58
 800f47e:	e003      	b.n	800f488 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800f480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f484:	7dfb      	ldrb	r3, [r7, #23]
 800f486:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f490:	2b00      	cmp	r3, #0
 800f492:	d02f      	beq.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f49c:	d00e      	beq.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800f49e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4a2:	d814      	bhi.n	800f4ce <HAL_RCCEx_PeriphCLKConfig+0x596>
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d015      	beq.n	800f4d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800f4a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4ac:	d10f      	bne.n	800f4ce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4ae:	4baf      	ldr	r3, [pc, #700]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b2:	4aae      	ldr	r2, [pc, #696]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f4b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800f4ba:	e00c      	b.n	800f4d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	2101      	movs	r1, #1
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f000 ff3c 	bl	8010340 <RCCEx_PLL2_Config>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800f4cc:	e003      	b.n	800f4d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	75fb      	strb	r3, [r7, #23]
      break;
 800f4d2:	e000      	b.n	800f4d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800f4d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f4d6:	7dfb      	ldrb	r3, [r7, #23]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d109      	bne.n	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f4dc:	4ba3      	ldr	r3, [pc, #652]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4e8:	49a0      	ldr	r1, [pc, #640]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	650b      	str	r3, [r1, #80]	; 0x50
 800f4ee:	e001      	b.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4f0:	7dfb      	ldrb	r3, [r7, #23]
 800f4f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d032      	beq.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f504:	2b03      	cmp	r3, #3
 800f506:	d81b      	bhi.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800f508:	a201      	add	r2, pc, #4	; (adr r2, 800f510 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800f50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f50e:	bf00      	nop
 800f510:	0800f547 	.word	0x0800f547
 800f514:	0800f521 	.word	0x0800f521
 800f518:	0800f52f 	.word	0x0800f52f
 800f51c:	0800f547 	.word	0x0800f547
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f520:	4b92      	ldr	r3, [pc, #584]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f524:	4a91      	ldr	r2, [pc, #580]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f52a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800f52c:	e00c      	b.n	800f548 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	3304      	adds	r3, #4
 800f532:	2102      	movs	r1, #2
 800f534:	4618      	mov	r0, r3
 800f536:	f000 ff03 	bl	8010340 <RCCEx_PLL2_Config>
 800f53a:	4603      	mov	r3, r0
 800f53c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800f53e:	e003      	b.n	800f548 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f540:	2301      	movs	r3, #1
 800f542:	75fb      	strb	r3, [r7, #23]
      break;
 800f544:	e000      	b.n	800f548 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800f546:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f548:	7dfb      	ldrb	r3, [r7, #23]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d109      	bne.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f54e:	4b87      	ldr	r3, [pc, #540]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f552:	f023 0203 	bic.w	r2, r3, #3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f55a:	4984      	ldr	r1, [pc, #528]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f55c:	4313      	orrs	r3, r2
 800f55e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f560:	e001      	b.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f562:	7dfb      	ldrb	r3, [r7, #23]
 800f564:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f000 8086 	beq.w	800f680 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f574:	4b7e      	ldr	r3, [pc, #504]	; (800f770 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a7d      	ldr	r2, [pc, #500]	; (800f770 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800f57a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f57e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f580:	f7f9 fafc 	bl	8008b7c <HAL_GetTick>
 800f584:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f586:	e009      	b.n	800f59c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f588:	f7f9 faf8 	bl	8008b7c <HAL_GetTick>
 800f58c:	4602      	mov	r2, r0
 800f58e:	693b      	ldr	r3, [r7, #16]
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	2b64      	cmp	r3, #100	; 0x64
 800f594:	d902      	bls.n	800f59c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800f596:	2303      	movs	r3, #3
 800f598:	75fb      	strb	r3, [r7, #23]
        break;
 800f59a:	e005      	b.n	800f5a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f59c:	4b74      	ldr	r3, [pc, #464]	; (800f770 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d0ef      	beq.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800f5a8:	7dfb      	ldrb	r3, [r7, #23]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d166      	bne.n	800f67c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f5ae:	4b6f      	ldr	r3, [pc, #444]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f5b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f5b8:	4053      	eors	r3, r2
 800f5ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d013      	beq.n	800f5ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f5c2:	4b6a      	ldr	r3, [pc, #424]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f5cc:	4b67      	ldr	r3, [pc, #412]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5d0:	4a66      	ldr	r2, [pc, #408]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f5d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f5d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f5d8:	4b64      	ldr	r3, [pc, #400]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f5da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5dc:	4a63      	ldr	r2, [pc, #396]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f5de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f5e4:	4a61      	ldr	r2, [pc, #388]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f5f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5f4:	d115      	bne.n	800f622 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5f6:	f7f9 fac1 	bl	8008b7c <HAL_GetTick>
 800f5fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f5fc:	e00b      	b.n	800f616 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f5fe:	f7f9 fabd 	bl	8008b7c <HAL_GetTick>
 800f602:	4602      	mov	r2, r0
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	f241 3288 	movw	r2, #5000	; 0x1388
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d902      	bls.n	800f616 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800f610:	2303      	movs	r3, #3
 800f612:	75fb      	strb	r3, [r7, #23]
            break;
 800f614:	e005      	b.n	800f622 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f616:	4b55      	ldr	r3, [pc, #340]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f61a:	f003 0302 	and.w	r3, r3, #2
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d0ed      	beq.n	800f5fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d126      	bne.n	800f676 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f62e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f636:	d10d      	bne.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800f638:	4b4c      	ldr	r3, [pc, #304]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f63a:	691b      	ldr	r3, [r3, #16]
 800f63c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f646:	0919      	lsrs	r1, r3, #4
 800f648:	4b4a      	ldr	r3, [pc, #296]	; (800f774 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800f64a:	400b      	ands	r3, r1
 800f64c:	4947      	ldr	r1, [pc, #284]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f64e:	4313      	orrs	r3, r2
 800f650:	610b      	str	r3, [r1, #16]
 800f652:	e005      	b.n	800f660 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800f654:	4b45      	ldr	r3, [pc, #276]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	4a44      	ldr	r2, [pc, #272]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f65a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f65e:	6113      	str	r3, [r2, #16]
 800f660:	4b42      	ldr	r3, [pc, #264]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f66a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f66e:	493f      	ldr	r1, [pc, #252]	; (800f76c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800f670:	4313      	orrs	r3, r2
 800f672:	670b      	str	r3, [r1, #112]	; 0x70
 800f674:	e004      	b.n	800f680 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f676:	7dfb      	ldrb	r3, [r7, #23]
 800f678:	75bb      	strb	r3, [r7, #22]
 800f67a:	e001      	b.n	800f680 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f67c:	7dfb      	ldrb	r3, [r7, #23]
 800f67e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f003 0301 	and.w	r3, r3, #1
 800f688:	2b00      	cmp	r3, #0
 800f68a:	f000 8085 	beq.w	800f798 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f692:	2b28      	cmp	r3, #40	; 0x28
 800f694:	d866      	bhi.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800f696:	a201      	add	r2, pc, #4	; (adr r2, 800f69c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800f698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f69c:	0800f779 	.word	0x0800f779
 800f6a0:	0800f765 	.word	0x0800f765
 800f6a4:	0800f765 	.word	0x0800f765
 800f6a8:	0800f765 	.word	0x0800f765
 800f6ac:	0800f765 	.word	0x0800f765
 800f6b0:	0800f765 	.word	0x0800f765
 800f6b4:	0800f765 	.word	0x0800f765
 800f6b8:	0800f765 	.word	0x0800f765
 800f6bc:	0800f741 	.word	0x0800f741
 800f6c0:	0800f765 	.word	0x0800f765
 800f6c4:	0800f765 	.word	0x0800f765
 800f6c8:	0800f765 	.word	0x0800f765
 800f6cc:	0800f765 	.word	0x0800f765
 800f6d0:	0800f765 	.word	0x0800f765
 800f6d4:	0800f765 	.word	0x0800f765
 800f6d8:	0800f765 	.word	0x0800f765
 800f6dc:	0800f753 	.word	0x0800f753
 800f6e0:	0800f765 	.word	0x0800f765
 800f6e4:	0800f765 	.word	0x0800f765
 800f6e8:	0800f765 	.word	0x0800f765
 800f6ec:	0800f765 	.word	0x0800f765
 800f6f0:	0800f765 	.word	0x0800f765
 800f6f4:	0800f765 	.word	0x0800f765
 800f6f8:	0800f765 	.word	0x0800f765
 800f6fc:	0800f779 	.word	0x0800f779
 800f700:	0800f765 	.word	0x0800f765
 800f704:	0800f765 	.word	0x0800f765
 800f708:	0800f765 	.word	0x0800f765
 800f70c:	0800f765 	.word	0x0800f765
 800f710:	0800f765 	.word	0x0800f765
 800f714:	0800f765 	.word	0x0800f765
 800f718:	0800f765 	.word	0x0800f765
 800f71c:	0800f779 	.word	0x0800f779
 800f720:	0800f765 	.word	0x0800f765
 800f724:	0800f765 	.word	0x0800f765
 800f728:	0800f765 	.word	0x0800f765
 800f72c:	0800f765 	.word	0x0800f765
 800f730:	0800f765 	.word	0x0800f765
 800f734:	0800f765 	.word	0x0800f765
 800f738:	0800f765 	.word	0x0800f765
 800f73c:	0800f779 	.word	0x0800f779
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	3304      	adds	r3, #4
 800f744:	2101      	movs	r1, #1
 800f746:	4618      	mov	r0, r3
 800f748:	f000 fdfa 	bl	8010340 <RCCEx_PLL2_Config>
 800f74c:	4603      	mov	r3, r0
 800f74e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800f750:	e013      	b.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	3324      	adds	r3, #36	; 0x24
 800f756:	2101      	movs	r1, #1
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 fea3 	bl	80104a4 <RCCEx_PLL3_Config>
 800f75e:	4603      	mov	r3, r0
 800f760:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800f762:	e00a      	b.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f764:	2301      	movs	r3, #1
 800f766:	75fb      	strb	r3, [r7, #23]
      break;
 800f768:	e007      	b.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800f76a:	bf00      	nop
 800f76c:	58024400 	.word	0x58024400
 800f770:	58024800 	.word	0x58024800
 800f774:	00ffffcf 	.word	0x00ffffcf
      break;
 800f778:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f77a:	7dfb      	ldrb	r3, [r7, #23]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d109      	bne.n	800f794 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f780:	4b96      	ldr	r3, [pc, #600]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f784:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f78c:	4993      	ldr	r1, [pc, #588]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f78e:	4313      	orrs	r3, r2
 800f790:	654b      	str	r3, [r1, #84]	; 0x54
 800f792:	e001      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f794:	7dfb      	ldrb	r3, [r7, #23]
 800f796:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f003 0302 	and.w	r3, r3, #2
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d038      	beq.n	800f816 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7a8:	2b05      	cmp	r3, #5
 800f7aa:	d821      	bhi.n	800f7f0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800f7ac:	a201      	add	r2, pc, #4	; (adr r2, 800f7b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800f7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b2:	bf00      	nop
 800f7b4:	0800f7f7 	.word	0x0800f7f7
 800f7b8:	0800f7cd 	.word	0x0800f7cd
 800f7bc:	0800f7df 	.word	0x0800f7df
 800f7c0:	0800f7f7 	.word	0x0800f7f7
 800f7c4:	0800f7f7 	.word	0x0800f7f7
 800f7c8:	0800f7f7 	.word	0x0800f7f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	3304      	adds	r3, #4
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f000 fdb4 	bl	8010340 <RCCEx_PLL2_Config>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800f7dc:	e00c      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	3324      	adds	r3, #36	; 0x24
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f000 fe5d 	bl	80104a4 <RCCEx_PLL3_Config>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800f7ee:	e003      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	75fb      	strb	r3, [r7, #23]
      break;
 800f7f4:	e000      	b.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800f7f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d109      	bne.n	800f812 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f7fe:	4b77      	ldr	r3, [pc, #476]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f802:	f023 0207 	bic.w	r2, r3, #7
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f80a:	4974      	ldr	r1, [pc, #464]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f80c:	4313      	orrs	r3, r2
 800f80e:	654b      	str	r3, [r1, #84]	; 0x54
 800f810:	e001      	b.n	800f816 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f812:	7dfb      	ldrb	r3, [r7, #23]
 800f814:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f003 0304 	and.w	r3, r3, #4
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d03a      	beq.n	800f898 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f828:	2b05      	cmp	r3, #5
 800f82a:	d821      	bhi.n	800f870 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800f82c:	a201      	add	r2, pc, #4	; (adr r2, 800f834 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800f82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f832:	bf00      	nop
 800f834:	0800f877 	.word	0x0800f877
 800f838:	0800f84d 	.word	0x0800f84d
 800f83c:	0800f85f 	.word	0x0800f85f
 800f840:	0800f877 	.word	0x0800f877
 800f844:	0800f877 	.word	0x0800f877
 800f848:	0800f877 	.word	0x0800f877
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	3304      	adds	r3, #4
 800f850:	2101      	movs	r1, #1
 800f852:	4618      	mov	r0, r3
 800f854:	f000 fd74 	bl	8010340 <RCCEx_PLL2_Config>
 800f858:	4603      	mov	r3, r0
 800f85a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800f85c:	e00c      	b.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	3324      	adds	r3, #36	; 0x24
 800f862:	2101      	movs	r1, #1
 800f864:	4618      	mov	r0, r3
 800f866:	f000 fe1d 	bl	80104a4 <RCCEx_PLL3_Config>
 800f86a:	4603      	mov	r3, r0
 800f86c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800f86e:	e003      	b.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f870:	2301      	movs	r3, #1
 800f872:	75fb      	strb	r3, [r7, #23]
      break;
 800f874:	e000      	b.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800f876:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10a      	bne.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f87e:	4b57      	ldr	r3, [pc, #348]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f882:	f023 0207 	bic.w	r2, r3, #7
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f88c:	4953      	ldr	r1, [pc, #332]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f88e:	4313      	orrs	r3, r2
 800f890:	658b      	str	r3, [r1, #88]	; 0x58
 800f892:	e001      	b.n	800f898 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f894:	7dfb      	ldrb	r3, [r7, #23]
 800f896:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f003 0320 	and.w	r3, r3, #32
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d04b      	beq.n	800f93c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8ae:	d02e      	beq.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800f8b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8b4:	d828      	bhi.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800f8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8ba:	d02a      	beq.n	800f912 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800f8bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8c0:	d822      	bhi.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800f8c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f8c6:	d026      	beq.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800f8c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f8cc:	d81c      	bhi.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800f8ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8d2:	d010      	beq.n	800f8f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800f8d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8d8:	d816      	bhi.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d01d      	beq.n	800f91a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800f8de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f8e2:	d111      	bne.n	800f908 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	3304      	adds	r3, #4
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f000 fd28 	bl	8010340 <RCCEx_PLL2_Config>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800f8f4:	e012      	b.n	800f91c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	3324      	adds	r3, #36	; 0x24
 800f8fa:	2102      	movs	r1, #2
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f000 fdd1 	bl	80104a4 <RCCEx_PLL3_Config>
 800f902:	4603      	mov	r3, r0
 800f904:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800f906:	e009      	b.n	800f91c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f908:	2301      	movs	r3, #1
 800f90a:	75fb      	strb	r3, [r7, #23]
      break;
 800f90c:	e006      	b.n	800f91c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800f90e:	bf00      	nop
 800f910:	e004      	b.n	800f91c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800f912:	bf00      	nop
 800f914:	e002      	b.n	800f91c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800f916:	bf00      	nop
 800f918:	e000      	b.n	800f91c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800f91a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f91c:	7dfb      	ldrb	r3, [r7, #23]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d10a      	bne.n	800f938 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f922:	4b2e      	ldr	r3, [pc, #184]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f926:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f930:	492a      	ldr	r1, [pc, #168]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f932:	4313      	orrs	r3, r2
 800f934:	654b      	str	r3, [r1, #84]	; 0x54
 800f936:	e001      	b.n	800f93c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f938:	7dfb      	ldrb	r3, [r7, #23]
 800f93a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f944:	2b00      	cmp	r3, #0
 800f946:	d04d      	beq.n	800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f94e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f952:	d02e      	beq.n	800f9b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800f954:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f958:	d828      	bhi.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800f95a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f95e:	d02a      	beq.n	800f9b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800f960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f964:	d822      	bhi.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800f966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f96a:	d026      	beq.n	800f9ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800f96c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f970:	d81c      	bhi.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800f972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f976:	d010      	beq.n	800f99a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800f978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f97c:	d816      	bhi.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d01d      	beq.n	800f9be <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800f982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f986:	d111      	bne.n	800f9ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	3304      	adds	r3, #4
 800f98c:	2100      	movs	r1, #0
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 fcd6 	bl	8010340 <RCCEx_PLL2_Config>
 800f994:	4603      	mov	r3, r0
 800f996:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800f998:	e012      	b.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	3324      	adds	r3, #36	; 0x24
 800f99e:	2102      	movs	r1, #2
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f000 fd7f 	bl	80104a4 <RCCEx_PLL3_Config>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800f9aa:	e009      	b.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	75fb      	strb	r3, [r7, #23]
      break;
 800f9b0:	e006      	b.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800f9b2:	bf00      	nop
 800f9b4:	e004      	b.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800f9b6:	bf00      	nop
 800f9b8:	e002      	b.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800f9ba:	bf00      	nop
 800f9bc:	e000      	b.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800f9be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f9c0:	7dfb      	ldrb	r3, [r7, #23]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d10c      	bne.n	800f9e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f9c6:	4b05      	ldr	r3, [pc, #20]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f9d4:	4901      	ldr	r1, [pc, #4]	; (800f9dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	658b      	str	r3, [r1, #88]	; 0x58
 800f9da:	e003      	b.n	800f9e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800f9dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9e0:	7dfb      	ldrb	r3, [r7, #23]
 800f9e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d04b      	beq.n	800fa88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f9f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f9fa:	d02e      	beq.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800f9fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800fa00:	d828      	bhi.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800fa02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa06:	d02a      	beq.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800fa08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa0c:	d822      	bhi.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800fa0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fa12:	d026      	beq.n	800fa62 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800fa14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fa18:	d81c      	bhi.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800fa1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa1e:	d010      	beq.n	800fa42 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800fa20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fa24:	d816      	bhi.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d01d      	beq.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800fa2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa2e:	d111      	bne.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	3304      	adds	r3, #4
 800fa34:	2100      	movs	r1, #0
 800fa36:	4618      	mov	r0, r3
 800fa38:	f000 fc82 	bl	8010340 <RCCEx_PLL2_Config>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800fa40:	e012      	b.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3324      	adds	r3, #36	; 0x24
 800fa46:	2102      	movs	r1, #2
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f000 fd2b 	bl	80104a4 <RCCEx_PLL3_Config>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800fa52:	e009      	b.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fa54:	2301      	movs	r3, #1
 800fa56:	75fb      	strb	r3, [r7, #23]
      break;
 800fa58:	e006      	b.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800fa5a:	bf00      	nop
 800fa5c:	e004      	b.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800fa5e:	bf00      	nop
 800fa60:	e002      	b.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800fa62:	bf00      	nop
 800fa64:	e000      	b.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800fa66:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d10a      	bne.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fa6e:	4b9d      	ldr	r3, [pc, #628]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fa70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fa7c:	4999      	ldr	r1, [pc, #612]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fa7e:	4313      	orrs	r3, r2
 800fa80:	658b      	str	r3, [r1, #88]	; 0x58
 800fa82:	e001      	b.n	800fa88 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa84:	7dfb      	ldrb	r3, [r7, #23]
 800fa86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f003 0308 	and.w	r3, r3, #8
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d01a      	beq.n	800faca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa9e:	d10a      	bne.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3324      	adds	r3, #36	; 0x24
 800faa4:	2102      	movs	r1, #2
 800faa6:	4618      	mov	r0, r3
 800faa8:	f000 fcfc 	bl	80104a4 <RCCEx_PLL3_Config>
 800faac:	4603      	mov	r3, r0
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d001      	beq.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800fab2:	2301      	movs	r3, #1
 800fab4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fab6:	4b8b      	ldr	r3, [pc, #556]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fac4:	4987      	ldr	r1, [pc, #540]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fac6:	4313      	orrs	r3, r2
 800fac8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f003 0310 	and.w	r3, r3, #16
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d01a      	beq.n	800fb0c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fadc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fae0:	d10a      	bne.n	800faf8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	3324      	adds	r3, #36	; 0x24
 800fae6:	2102      	movs	r1, #2
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 fcdb 	bl	80104a4 <RCCEx_PLL3_Config>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d001      	beq.n	800faf8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800faf8:	4b7a      	ldr	r3, [pc, #488]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fafc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb06:	4977      	ldr	r1, [pc, #476]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d034      	beq.n	800fb82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fb1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb22:	d01d      	beq.n	800fb60 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800fb24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb28:	d817      	bhi.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d003      	beq.n	800fb36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800fb2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb32:	d009      	beq.n	800fb48 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800fb34:	e011      	b.n	800fb5a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	3304      	adds	r3, #4
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f000 fbff 	bl	8010340 <RCCEx_PLL2_Config>
 800fb42:	4603      	mov	r3, r0
 800fb44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800fb46:	e00c      	b.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	3324      	adds	r3, #36	; 0x24
 800fb4c:	2102      	movs	r1, #2
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f000 fca8 	bl	80104a4 <RCCEx_PLL3_Config>
 800fb54:	4603      	mov	r3, r0
 800fb56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800fb58:	e003      	b.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	75fb      	strb	r3, [r7, #23]
      break;
 800fb5e:	e000      	b.n	800fb62 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800fb60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fb62:	7dfb      	ldrb	r3, [r7, #23]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d10a      	bne.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fb68:	4b5e      	ldr	r3, [pc, #376]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fb6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fb76:	495b      	ldr	r1, [pc, #364]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	658b      	str	r3, [r1, #88]	; 0x58
 800fb7c:	e001      	b.n	800fb82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb7e:	7dfb      	ldrb	r3, [r7, #23]
 800fb80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d033      	beq.n	800fbf6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb98:	d01c      	beq.n	800fbd4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800fb9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb9e:	d816      	bhi.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800fba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fba4:	d003      	beq.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800fba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fbaa:	d007      	beq.n	800fbbc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800fbac:	e00f      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fbae:	4b4d      	ldr	r3, [pc, #308]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb2:	4a4c      	ldr	r2, [pc, #304]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fbb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fbb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800fbba:	e00c      	b.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	3324      	adds	r3, #36	; 0x24
 800fbc0:	2101      	movs	r1, #1
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f000 fc6e 	bl	80104a4 <RCCEx_PLL3_Config>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800fbcc:	e003      	b.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	75fb      	strb	r3, [r7, #23]
      break;
 800fbd2:	e000      	b.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800fbd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fbd6:	7dfb      	ldrb	r3, [r7, #23]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d10a      	bne.n	800fbf2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fbdc:	4b41      	ldr	r3, [pc, #260]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fbde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbea:	493e      	ldr	r1, [pc, #248]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fbec:	4313      	orrs	r3, r2
 800fbee:	654b      	str	r3, [r1, #84]	; 0x54
 800fbf0:	e001      	b.n	800fbf6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbf2:	7dfb      	ldrb	r3, [r7, #23]
 800fbf4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d029      	beq.n	800fc56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d003      	beq.n	800fc12 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800fc0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc0e:	d007      	beq.n	800fc20 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800fc10:	e00f      	b.n	800fc32 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fc12:	4b34      	ldr	r3, [pc, #208]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc16:	4a33      	ldr	r2, [pc, #204]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fc18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800fc1e:	e00b      	b.n	800fc38 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	3304      	adds	r3, #4
 800fc24:	2102      	movs	r1, #2
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 fb8a 	bl	8010340 <RCCEx_PLL2_Config>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800fc30:	e002      	b.n	800fc38 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800fc32:	2301      	movs	r3, #1
 800fc34:	75fb      	strb	r3, [r7, #23]
      break;
 800fc36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d109      	bne.n	800fc52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fc3e:	4b29      	ldr	r3, [pc, #164]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fc40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc4a:	4926      	ldr	r1, [pc, #152]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800fc50:	e001      	b.n	800fc56 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc52:	7dfb      	ldrb	r3, [r7, #23]
 800fc54:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00a      	beq.n	800fc78 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	3324      	adds	r3, #36	; 0x24
 800fc66:	2102      	movs	r1, #2
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f000 fc1b 	bl	80104a4 <RCCEx_PLL3_Config>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d001      	beq.n	800fc78 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800fc74:	2301      	movs	r3, #1
 800fc76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d033      	beq.n	800fcec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc8c:	d017      	beq.n	800fcbe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800fc8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc92:	d811      	bhi.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800fc94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc98:	d013      	beq.n	800fcc2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800fc9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc9e:	d80b      	bhi.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d010      	beq.n	800fcc6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800fca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fca8:	d106      	bne.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fcaa:	4b0e      	ldr	r3, [pc, #56]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcae:	4a0d      	ldr	r2, [pc, #52]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fcb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fcb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800fcb6:	e007      	b.n	800fcc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	75fb      	strb	r3, [r7, #23]
      break;
 800fcbc:	e004      	b.n	800fcc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800fcbe:	bf00      	nop
 800fcc0:	e002      	b.n	800fcc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800fcc2:	bf00      	nop
 800fcc4:	e000      	b.n	800fcc8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800fcc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fcc8:	7dfb      	ldrb	r3, [r7, #23]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d10c      	bne.n	800fce8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fcce:	4b05      	ldr	r3, [pc, #20]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fcda:	4902      	ldr	r1, [pc, #8]	; (800fce4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	654b      	str	r3, [r1, #84]	; 0x54
 800fce0:	e004      	b.n	800fcec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800fce2:	bf00      	nop
 800fce4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fce8:	7dfb      	ldrb	r3, [r7, #23]
 800fcea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d008      	beq.n	800fd0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fcf8:	4b31      	ldr	r3, [pc, #196]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fcfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd04:	492e      	ldr	r1, [pc, #184]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd06:	4313      	orrs	r3, r2
 800fd08:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d009      	beq.n	800fd2a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fd16:	4b2a      	ldr	r3, [pc, #168]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fd24:	4926      	ldr	r1, [pc, #152]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd26:	4313      	orrs	r3, r2
 800fd28:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d008      	beq.n	800fd48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fd36:	4b22      	ldr	r3, [pc, #136]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd42:	491f      	ldr	r1, [pc, #124]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd44:	4313      	orrs	r3, r2
 800fd46:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00d      	beq.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fd54:	4b1a      	ldr	r3, [pc, #104]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd56:	691b      	ldr	r3, [r3, #16]
 800fd58:	4a19      	ldr	r2, [pc, #100]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fd5e:	6113      	str	r3, [r2, #16]
 800fd60:	4b17      	ldr	r3, [pc, #92]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd62:	691a      	ldr	r2, [r3, #16]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fd6a:	4915      	ldr	r1, [pc, #84]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd6c:	4313      	orrs	r3, r2
 800fd6e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	da08      	bge.n	800fd8a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fd78:	4b11      	ldr	r3, [pc, #68]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd84:	490e      	ldr	r1, [pc, #56]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd86:	4313      	orrs	r3, r2
 800fd88:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d009      	beq.n	800fdaa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fd96:	4b0a      	ldr	r3, [pc, #40]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fd98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fda4:	4906      	ldr	r1, [pc, #24]	; (800fdc0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800fda6:	4313      	orrs	r3, r2
 800fda8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800fdaa:	7dbb      	ldrb	r3, [r7, #22]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d101      	bne.n	800fdb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	e000      	b.n	800fdb6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800fdb4:	2301      	movs	r3, #1
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3718      	adds	r7, #24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	58024400 	.word	0x58024400

0800fdc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fdc8:	f7ff f85a 	bl	800ee80 <HAL_RCC_GetHCLKFreq>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	4b06      	ldr	r3, [pc, #24]	; (800fde8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fdd0:	6a1b      	ldr	r3, [r3, #32]
 800fdd2:	091b      	lsrs	r3, r3, #4
 800fdd4:	f003 0307 	and.w	r3, r3, #7
 800fdd8:	4904      	ldr	r1, [pc, #16]	; (800fdec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fdda:	5ccb      	ldrb	r3, [r1, r3]
 800fddc:	f003 031f 	and.w	r3, r3, #31
 800fde0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	58024400 	.word	0x58024400
 800fdec:	08034140 	.word	0x08034140

0800fdf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b089      	sub	sp, #36	; 0x24
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdf8:	4ba1      	ldr	r3, [pc, #644]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdfc:	f003 0303 	and.w	r3, r3, #3
 800fe00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800fe02:	4b9f      	ldr	r3, [pc, #636]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe06:	0b1b      	lsrs	r3, r3, #12
 800fe08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fe0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fe0e:	4b9c      	ldr	r3, [pc, #624]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe12:	091b      	lsrs	r3, r3, #4
 800fe14:	f003 0301 	and.w	r3, r3, #1
 800fe18:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800fe1a:	4b99      	ldr	r3, [pc, #612]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe1e:	08db      	lsrs	r3, r3, #3
 800fe20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe24:	693a      	ldr	r2, [r7, #16]
 800fe26:	fb02 f303 	mul.w	r3, r2, r3
 800fe2a:	ee07 3a90 	vmov	s15, r3
 800fe2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 8111 	beq.w	8010060 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	2b02      	cmp	r3, #2
 800fe42:	f000 8083 	beq.w	800ff4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fe46:	69bb      	ldr	r3, [r7, #24]
 800fe48:	2b02      	cmp	r3, #2
 800fe4a:	f200 80a1 	bhi.w	800ff90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d003      	beq.n	800fe5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d056      	beq.n	800ff08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fe5a:	e099      	b.n	800ff90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe5c:	4b88      	ldr	r3, [pc, #544]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f003 0320 	and.w	r3, r3, #32
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d02d      	beq.n	800fec4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fe68:	4b85      	ldr	r3, [pc, #532]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	08db      	lsrs	r3, r3, #3
 800fe6e:	f003 0303 	and.w	r3, r3, #3
 800fe72:	4a84      	ldr	r2, [pc, #528]	; (8010084 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fe74:	fa22 f303 	lsr.w	r3, r2, r3
 800fe78:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	ee07 3a90 	vmov	s15, r3
 800fe80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	ee07 3a90 	vmov	s15, r3
 800fe8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe92:	4b7b      	ldr	r3, [pc, #492]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe9a:	ee07 3a90 	vmov	s15, r3
 800fe9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fea2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fea6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800feaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800febe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fec2:	e087      	b.n	800ffd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	ee07 3a90 	vmov	s15, r3
 800feca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fece:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801008c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fed6:	4b6a      	ldr	r3, [pc, #424]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fede:	ee07 3a90 	vmov	s15, r3
 800fee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fee6:	ed97 6a03 	vldr	s12, [r7, #12]
 800feea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800feee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fefa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fefe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff06:	e065      	b.n	800ffd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	ee07 3a90 	vmov	s15, r3
 800ff0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff1a:	4b59      	ldr	r3, [pc, #356]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff22:	ee07 3a90 	vmov	s15, r3
 800ff26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff4a:	e043      	b.n	800ffd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	ee07 3a90 	vmov	s15, r3
 800ff52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ff5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff5e:	4b48      	ldr	r3, [pc, #288]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff66:	ee07 3a90 	vmov	s15, r3
 800ff6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff72:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff8e:	e021      	b.n	800ffd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	ee07 3a90 	vmov	s15, r3
 800ff96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffa2:	4b37      	ldr	r3, [pc, #220]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffaa:	ee07 3a90 	vmov	s15, r3
 800ffae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ffb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010088 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ffba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ffd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ffd4:	4b2a      	ldr	r3, [pc, #168]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffd8:	0a5b      	lsrs	r3, r3, #9
 800ffda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffde:	ee07 3a90 	vmov	s15, r3
 800ffe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ffee:	edd7 6a07 	vldr	s13, [r7, #28]
 800fff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fffa:	ee17 2a90 	vmov	r2, s15
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8010002:	4b1f      	ldr	r3, [pc, #124]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010006:	0c1b      	lsrs	r3, r3, #16
 8010008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801000c:	ee07 3a90 	vmov	s15, r3
 8010010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010018:	ee37 7a87 	vadd.f32	s14, s15, s14
 801001c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010028:	ee17 2a90 	vmov	r2, s15
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8010030:	4b13      	ldr	r3, [pc, #76]	; (8010080 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010034:	0e1b      	lsrs	r3, r3, #24
 8010036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801003a:	ee07 3a90 	vmov	s15, r3
 801003e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010046:	ee37 7a87 	vadd.f32	s14, s15, s14
 801004a:	edd7 6a07 	vldr	s13, [r7, #28]
 801004e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010056:	ee17 2a90 	vmov	r2, s15
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801005e:	e008      	b.n	8010072 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2200      	movs	r2, #0
 8010064:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	609a      	str	r2, [r3, #8]
}
 8010072:	bf00      	nop
 8010074:	3724      	adds	r7, #36	; 0x24
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	58024400 	.word	0x58024400
 8010084:	03d09000 	.word	0x03d09000
 8010088:	46000000 	.word	0x46000000
 801008c:	4c742400 	.word	0x4c742400
 8010090:	4a742400 	.word	0x4a742400
 8010094:	4bbebc20 	.word	0x4bbebc20

08010098 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8010098:	b480      	push	{r7}
 801009a:	b089      	sub	sp, #36	; 0x24
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80100a0:	4ba1      	ldr	r3, [pc, #644]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a4:	f003 0303 	and.w	r3, r3, #3
 80100a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80100aa:	4b9f      	ldr	r3, [pc, #636]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ae:	0d1b      	lsrs	r3, r3, #20
 80100b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80100b6:	4b9c      	ldr	r3, [pc, #624]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ba:	0a1b      	lsrs	r3, r3, #8
 80100bc:	f003 0301 	and.w	r3, r3, #1
 80100c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80100c2:	4b99      	ldr	r3, [pc, #612]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100c6:	08db      	lsrs	r3, r3, #3
 80100c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	fb02 f303 	mul.w	r3, r2, r3
 80100d2:	ee07 3a90 	vmov	s15, r3
 80100d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	f000 8111 	beq.w	8010308 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	2b02      	cmp	r3, #2
 80100ea:	f000 8083 	beq.w	80101f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	2b02      	cmp	r3, #2
 80100f2:	f200 80a1 	bhi.w	8010238 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d003      	beq.n	8010104 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d056      	beq.n	80101b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010102:	e099      	b.n	8010238 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010104:	4b88      	ldr	r3, [pc, #544]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f003 0320 	and.w	r3, r3, #32
 801010c:	2b00      	cmp	r3, #0
 801010e:	d02d      	beq.n	801016c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010110:	4b85      	ldr	r3, [pc, #532]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	08db      	lsrs	r3, r3, #3
 8010116:	f003 0303 	and.w	r3, r3, #3
 801011a:	4a84      	ldr	r2, [pc, #528]	; (801032c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801011c:	fa22 f303 	lsr.w	r3, r2, r3
 8010120:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	ee07 3a90 	vmov	s15, r3
 8010128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	ee07 3a90 	vmov	s15, r3
 8010132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801013a:	4b7b      	ldr	r3, [pc, #492]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801013c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801013e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010142:	ee07 3a90 	vmov	s15, r3
 8010146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801014a:	ed97 6a03 	vldr	s12, [r7, #12]
 801014e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801015a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801015e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010166:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801016a:	e087      	b.n	801027c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	ee07 3a90 	vmov	s15, r3
 8010172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010176:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010334 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801017a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801017e:	4b6a      	ldr	r3, [pc, #424]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010186:	ee07 3a90 	vmov	s15, r3
 801018a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801018e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010192:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801019a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801019e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80101ae:	e065      	b.n	801027c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	ee07 3a90 	vmov	s15, r3
 80101b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80101be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101c2:	4b59      	ldr	r3, [pc, #356]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101ca:	ee07 3a90 	vmov	s15, r3
 80101ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80101d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80101f2:	e043      	b.n	801027c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	ee07 3a90 	vmov	s15, r3
 80101fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801033c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010206:	4b48      	ldr	r3, [pc, #288]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801020a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801020e:	ee07 3a90 	vmov	s15, r3
 8010212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010216:	ed97 6a03 	vldr	s12, [r7, #12]
 801021a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801021e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801022a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801022e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010232:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010236:	e021      	b.n	801027c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	ee07 3a90 	vmov	s15, r3
 801023e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010242:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801024a:	4b37      	ldr	r3, [pc, #220]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801024c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801024e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010252:	ee07 3a90 	vmov	s15, r3
 8010256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801025a:	ed97 6a03 	vldr	s12, [r7, #12]
 801025e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010330 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801026a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801026e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801027a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801027c:	4b2a      	ldr	r3, [pc, #168]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801027e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010280:	0a5b      	lsrs	r3, r3, #9
 8010282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010286:	ee07 3a90 	vmov	s15, r3
 801028a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801028e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010296:	edd7 6a07 	vldr	s13, [r7, #28]
 801029a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801029e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102a2:	ee17 2a90 	vmov	r2, s15
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80102aa:	4b1f      	ldr	r3, [pc, #124]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ae:	0c1b      	lsrs	r3, r3, #16
 80102b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102b4:	ee07 3a90 	vmov	s15, r3
 80102b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80102c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102d0:	ee17 2a90 	vmov	r2, s15
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80102d8:	4b13      	ldr	r3, [pc, #76]	; (8010328 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80102da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102dc:	0e1b      	lsrs	r3, r3, #24
 80102de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102e2:	ee07 3a90 	vmov	s15, r3
 80102e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80102f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80102f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102fe:	ee17 2a90 	vmov	r2, s15
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010306:	e008      	b.n	801031a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2200      	movs	r2, #0
 8010312:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	609a      	str	r2, [r3, #8]
}
 801031a:	bf00      	nop
 801031c:	3724      	adds	r7, #36	; 0x24
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	58024400 	.word	0x58024400
 801032c:	03d09000 	.word	0x03d09000
 8010330:	46000000 	.word	0x46000000
 8010334:	4c742400 	.word	0x4c742400
 8010338:	4a742400 	.word	0x4a742400
 801033c:	4bbebc20 	.word	0x4bbebc20

08010340 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b084      	sub	sp, #16
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801034a:	2300      	movs	r3, #0
 801034c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801034e:	4b53      	ldr	r3, [pc, #332]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010352:	f003 0303 	and.w	r3, r3, #3
 8010356:	2b03      	cmp	r3, #3
 8010358:	d101      	bne.n	801035e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801035a:	2301      	movs	r3, #1
 801035c:	e099      	b.n	8010492 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801035e:	4b4f      	ldr	r3, [pc, #316]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a4e      	ldr	r2, [pc, #312]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010364:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801036a:	f7f8 fc07 	bl	8008b7c <HAL_GetTick>
 801036e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010370:	e008      	b.n	8010384 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8010372:	f7f8 fc03 	bl	8008b7c <HAL_GetTick>
 8010376:	4602      	mov	r2, r0
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	2b02      	cmp	r3, #2
 801037e:	d901      	bls.n	8010384 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010380:	2303      	movs	r3, #3
 8010382:	e086      	b.n	8010492 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010384:	4b45      	ldr	r3, [pc, #276]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1f0      	bne.n	8010372 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010390:	4b42      	ldr	r3, [pc, #264]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010394:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	031b      	lsls	r3, r3, #12
 801039e:	493f      	ldr	r1, [pc, #252]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 80103a0:	4313      	orrs	r3, r2
 80103a2:	628b      	str	r3, [r1, #40]	; 0x28
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	3b01      	subs	r3, #1
 80103aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	689b      	ldr	r3, [r3, #8]
 80103b2:	3b01      	subs	r3, #1
 80103b4:	025b      	lsls	r3, r3, #9
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	431a      	orrs	r2, r3
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	68db      	ldr	r3, [r3, #12]
 80103be:	3b01      	subs	r3, #1
 80103c0:	041b      	lsls	r3, r3, #16
 80103c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80103c6:	431a      	orrs	r2, r3
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	691b      	ldr	r3, [r3, #16]
 80103cc:	3b01      	subs	r3, #1
 80103ce:	061b      	lsls	r3, r3, #24
 80103d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80103d4:	4931      	ldr	r1, [pc, #196]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 80103d6:	4313      	orrs	r3, r2
 80103d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80103da:	4b30      	ldr	r3, [pc, #192]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 80103dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	695b      	ldr	r3, [r3, #20]
 80103e6:	492d      	ldr	r1, [pc, #180]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 80103e8:	4313      	orrs	r3, r2
 80103ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80103ec:	4b2b      	ldr	r3, [pc, #172]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 80103ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f0:	f023 0220 	bic.w	r2, r3, #32
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	699b      	ldr	r3, [r3, #24]
 80103f8:	4928      	ldr	r1, [pc, #160]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 80103fa:	4313      	orrs	r3, r2
 80103fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80103fe:	4b27      	ldr	r3, [pc, #156]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010402:	4a26      	ldr	r2, [pc, #152]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010404:	f023 0310 	bic.w	r3, r3, #16
 8010408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801040a:	4b24      	ldr	r3, [pc, #144]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 801040c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801040e:	4b24      	ldr	r3, [pc, #144]	; (80104a0 <RCCEx_PLL2_Config+0x160>)
 8010410:	4013      	ands	r3, r2
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	69d2      	ldr	r2, [r2, #28]
 8010416:	00d2      	lsls	r2, r2, #3
 8010418:	4920      	ldr	r1, [pc, #128]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 801041a:	4313      	orrs	r3, r2
 801041c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801041e:	4b1f      	ldr	r3, [pc, #124]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010422:	4a1e      	ldr	r2, [pc, #120]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010424:	f043 0310 	orr.w	r3, r3, #16
 8010428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d106      	bne.n	801043e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010430:	4b1a      	ldr	r3, [pc, #104]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010434:	4a19      	ldr	r2, [pc, #100]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010436:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801043a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801043c:	e00f      	b.n	801045e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d106      	bne.n	8010452 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010444:	4b15      	ldr	r3, [pc, #84]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010448:	4a14      	ldr	r2, [pc, #80]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 801044a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801044e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010450:	e005      	b.n	801045e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010452:	4b12      	ldr	r3, [pc, #72]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010456:	4a11      	ldr	r2, [pc, #68]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801045c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801045e:	4b0f      	ldr	r3, [pc, #60]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4a0e      	ldr	r2, [pc, #56]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801046a:	f7f8 fb87 	bl	8008b7c <HAL_GetTick>
 801046e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010470:	e008      	b.n	8010484 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8010472:	f7f8 fb83 	bl	8008b7c <HAL_GetTick>
 8010476:	4602      	mov	r2, r0
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	1ad3      	subs	r3, r2, r3
 801047c:	2b02      	cmp	r3, #2
 801047e:	d901      	bls.n	8010484 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010480:	2303      	movs	r3, #3
 8010482:	e006      	b.n	8010492 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010484:	4b05      	ldr	r3, [pc, #20]	; (801049c <RCCEx_PLL2_Config+0x15c>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801048c:	2b00      	cmp	r3, #0
 801048e:	d0f0      	beq.n	8010472 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010490:	7bfb      	ldrb	r3, [r7, #15]
}
 8010492:	4618      	mov	r0, r3
 8010494:	3710      	adds	r7, #16
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	58024400 	.word	0x58024400
 80104a0:	ffff0007 	.word	0xffff0007

080104a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80104ae:	2300      	movs	r3, #0
 80104b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80104b2:	4b53      	ldr	r3, [pc, #332]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80104b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104b6:	f003 0303 	and.w	r3, r3, #3
 80104ba:	2b03      	cmp	r3, #3
 80104bc:	d101      	bne.n	80104c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80104be:	2301      	movs	r3, #1
 80104c0:	e099      	b.n	80105f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80104c2:	4b4f      	ldr	r3, [pc, #316]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4a4e      	ldr	r2, [pc, #312]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80104c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80104cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80104ce:	f7f8 fb55 	bl	8008b7c <HAL_GetTick>
 80104d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80104d4:	e008      	b.n	80104e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80104d6:	f7f8 fb51 	bl	8008b7c <HAL_GetTick>
 80104da:	4602      	mov	r2, r0
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	1ad3      	subs	r3, r2, r3
 80104e0:	2b02      	cmp	r3, #2
 80104e2:	d901      	bls.n	80104e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80104e4:	2303      	movs	r3, #3
 80104e6:	e086      	b.n	80105f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80104e8:	4b45      	ldr	r3, [pc, #276]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1f0      	bne.n	80104d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80104f4:	4b42      	ldr	r3, [pc, #264]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80104f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	051b      	lsls	r3, r3, #20
 8010502:	493f      	ldr	r1, [pc, #252]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010504:	4313      	orrs	r3, r2
 8010506:	628b      	str	r3, [r1, #40]	; 0x28
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	3b01      	subs	r3, #1
 801050e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	3b01      	subs	r3, #1
 8010518:	025b      	lsls	r3, r3, #9
 801051a:	b29b      	uxth	r3, r3
 801051c:	431a      	orrs	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	68db      	ldr	r3, [r3, #12]
 8010522:	3b01      	subs	r3, #1
 8010524:	041b      	lsls	r3, r3, #16
 8010526:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801052a:	431a      	orrs	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	3b01      	subs	r3, #1
 8010532:	061b      	lsls	r3, r3, #24
 8010534:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010538:	4931      	ldr	r1, [pc, #196]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 801053a:	4313      	orrs	r3, r2
 801053c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801053e:	4b30      	ldr	r3, [pc, #192]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010542:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	695b      	ldr	r3, [r3, #20]
 801054a:	492d      	ldr	r1, [pc, #180]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 801054c:	4313      	orrs	r3, r2
 801054e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010550:	4b2b      	ldr	r3, [pc, #172]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010554:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	699b      	ldr	r3, [r3, #24]
 801055c:	4928      	ldr	r1, [pc, #160]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 801055e:	4313      	orrs	r3, r2
 8010560:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010562:	4b27      	ldr	r3, [pc, #156]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010566:	4a26      	ldr	r2, [pc, #152]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801056c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801056e:	4b24      	ldr	r3, [pc, #144]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010572:	4b24      	ldr	r3, [pc, #144]	; (8010604 <RCCEx_PLL3_Config+0x160>)
 8010574:	4013      	ands	r3, r2
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	69d2      	ldr	r2, [r2, #28]
 801057a:	00d2      	lsls	r2, r2, #3
 801057c:	4920      	ldr	r1, [pc, #128]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 801057e:	4313      	orrs	r3, r2
 8010580:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010582:	4b1f      	ldr	r3, [pc, #124]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010586:	4a1e      	ldr	r2, [pc, #120]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801058c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d106      	bne.n	80105a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010594:	4b1a      	ldr	r3, [pc, #104]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 8010596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010598:	4a19      	ldr	r2, [pc, #100]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 801059a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801059e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80105a0:	e00f      	b.n	80105c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d106      	bne.n	80105b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80105a8:	4b15      	ldr	r3, [pc, #84]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80105aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ac:	4a14      	ldr	r2, [pc, #80]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80105ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80105b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80105b4:	e005      	b.n	80105c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80105b6:	4b12      	ldr	r3, [pc, #72]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80105b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ba:	4a11      	ldr	r2, [pc, #68]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80105bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80105c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80105c2:	4b0f      	ldr	r3, [pc, #60]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4a0e      	ldr	r2, [pc, #56]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80105c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80105ce:	f7f8 fad5 	bl	8008b7c <HAL_GetTick>
 80105d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80105d4:	e008      	b.n	80105e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80105d6:	f7f8 fad1 	bl	8008b7c <HAL_GetTick>
 80105da:	4602      	mov	r2, r0
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	2b02      	cmp	r3, #2
 80105e2:	d901      	bls.n	80105e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80105e4:	2303      	movs	r3, #3
 80105e6:	e006      	b.n	80105f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80105e8:	4b05      	ldr	r3, [pc, #20]	; (8010600 <RCCEx_PLL3_Config+0x15c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d0f0      	beq.n	80105d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80105f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	58024400 	.word	0x58024400
 8010604:	ffff0007 	.word	0xffff0007

08010608 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d101      	bne.n	801061a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010616:	2301      	movs	r3, #1
 8010618:	e0f1      	b.n	80107fe <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a78      	ldr	r2, [pc, #480]	; (8010808 <HAL_SPI_Init+0x200>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d00f      	beq.n	801064a <HAL_SPI_Init+0x42>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	4a77      	ldr	r2, [pc, #476]	; (801080c <HAL_SPI_Init+0x204>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d00a      	beq.n	801064a <HAL_SPI_Init+0x42>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a75      	ldr	r2, [pc, #468]	; (8010810 <HAL_SPI_Init+0x208>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d005      	beq.n	801064a <HAL_SPI_Init+0x42>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	68db      	ldr	r3, [r3, #12]
 8010642:	2b0f      	cmp	r3, #15
 8010644:	d901      	bls.n	801064a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010646:	2301      	movs	r3, #1
 8010648:	e0d9      	b.n	80107fe <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f001 faa2 	bl	8011b94 <SPI_GetPacketSize>
 8010650:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	4a6c      	ldr	r2, [pc, #432]	; (8010808 <HAL_SPI_Init+0x200>)
 8010658:	4293      	cmp	r3, r2
 801065a:	d00c      	beq.n	8010676 <HAL_SPI_Init+0x6e>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a6a      	ldr	r2, [pc, #424]	; (801080c <HAL_SPI_Init+0x204>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d007      	beq.n	8010676 <HAL_SPI_Init+0x6e>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a69      	ldr	r2, [pc, #420]	; (8010810 <HAL_SPI_Init+0x208>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d002      	beq.n	8010676 <HAL_SPI_Init+0x6e>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2b08      	cmp	r3, #8
 8010674:	d811      	bhi.n	801069a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801067a:	4a63      	ldr	r2, [pc, #396]	; (8010808 <HAL_SPI_Init+0x200>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d009      	beq.n	8010694 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a61      	ldr	r2, [pc, #388]	; (801080c <HAL_SPI_Init+0x204>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d004      	beq.n	8010694 <HAL_SPI_Init+0x8c>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a60      	ldr	r2, [pc, #384]	; (8010810 <HAL_SPI_Init+0x208>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d104      	bne.n	801069e <HAL_SPI_Init+0x96>
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b10      	cmp	r3, #16
 8010698:	d901      	bls.n	801069e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801069a:	2301      	movs	r3, #1
 801069c:	e0af      	b.n	80107fe <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d106      	bne.n	80106b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2200      	movs	r2, #0
 80106ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7f7 fa20 	bl	8007af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2202      	movs	r2, #2
 80106bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f022 0201 	bic.w	r2, r2, #1
 80106ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	689b      	ldr	r3, [r3, #8]
 80106d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80106da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80106e4:	d119      	bne.n	801071a <HAL_SPI_Init+0x112>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80106ee:	d103      	bne.n	80106f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d008      	beq.n	801070a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10c      	bne.n	801071a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010704:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010708:	d107      	bne.n	801071a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010718:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	69da      	ldr	r2, [r3, #28]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010722:	431a      	orrs	r2, r3
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	431a      	orrs	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801072c:	ea42 0103 	orr.w	r1, r2, r3
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	68da      	ldr	r2, [r3, #12]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	430a      	orrs	r2, r1
 801073a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010744:	431a      	orrs	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801074a:	431a      	orrs	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	699b      	ldr	r3, [r3, #24]
 8010750:	431a      	orrs	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	431a      	orrs	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	695b      	ldr	r3, [r3, #20]
 801075c:	431a      	orrs	r2, r3
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6a1b      	ldr	r3, [r3, #32]
 8010762:	431a      	orrs	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	431a      	orrs	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801076e:	431a      	orrs	r2, r3
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	431a      	orrs	r2, r3
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801077a:	ea42 0103 	orr.w	r1, r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	430a      	orrs	r2, r1
 8010788:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d113      	bne.n	80107ba <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80107a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	689b      	ldr	r3, [r3, #8]
 80107ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80107b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f022 0201 	bic.w	r2, r2, #1
 80107c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00a      	beq.n	80107ec <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	430a      	orrs	r2, r1
 80107ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2201      	movs	r2, #1
 80107f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80107fc:	2300      	movs	r3, #0
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3710      	adds	r7, #16
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	40013000 	.word	0x40013000
 801080c:	40003800 	.word	0x40003800
 8010810:	40003c00 	.word	0x40003c00

08010814 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b08a      	sub	sp, #40	; 0x28
 8010818:	af02      	add	r7, sp, #8
 801081a:	60f8      	str	r0, [r7, #12]
 801081c:	60b9      	str	r1, [r7, #8]
 801081e:	603b      	str	r3, [r7, #0]
 8010820:	4613      	mov	r3, r2
 8010822:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	3320      	adds	r3, #32
 801082a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801082c:	2300      	movs	r3, #0
 801082e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010836:	2b01      	cmp	r3, #1
 8010838:	d101      	bne.n	801083e <HAL_SPI_Transmit+0x2a>
 801083a:	2302      	movs	r3, #2
 801083c:	e1d7      	b.n	8010bee <HAL_SPI_Transmit+0x3da>
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2201      	movs	r2, #1
 8010842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010846:	f7f8 f999 	bl	8008b7c <HAL_GetTick>
 801084a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010852:	b2db      	uxtb	r3, r3
 8010854:	2b01      	cmp	r3, #1
 8010856:	d007      	beq.n	8010868 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8010858:	2302      	movs	r3, #2
 801085a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2200      	movs	r2, #0
 8010860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010864:	7efb      	ldrb	r3, [r7, #27]
 8010866:	e1c2      	b.n	8010bee <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d002      	beq.n	8010874 <HAL_SPI_Transmit+0x60>
 801086e:	88fb      	ldrh	r3, [r7, #6]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d107      	bne.n	8010884 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010874:	2301      	movs	r3, #1
 8010876:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010880:	7efb      	ldrb	r3, [r7, #27]
 8010882:	e1b4      	b.n	8010bee <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2203      	movs	r2, #3
 8010888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2200      	movs	r2, #0
 8010890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	68ba      	ldr	r2, [r7, #8]
 8010898:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	88fa      	ldrh	r2, [r7, #6]
 801089e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	88fa      	ldrh	r2, [r7, #6]
 80108a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2200      	movs	r2, #0
 80108ae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2200      	movs	r2, #0
 80108b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2200      	movs	r2, #0
 80108bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	2200      	movs	r2, #0
 80108c4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2200      	movs	r2, #0
 80108ca:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80108d4:	d107      	bne.n	80108e6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80108e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	685a      	ldr	r2, [r3, #4]
 80108ec:	4b96      	ldr	r3, [pc, #600]	; (8010b48 <HAL_SPI_Transmit+0x334>)
 80108ee:	4013      	ands	r3, r2
 80108f0:	88f9      	ldrh	r1, [r7, #6]
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	6812      	ldr	r2, [r2, #0]
 80108f6:	430b      	orrs	r3, r1
 80108f8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	f042 0201 	orr.w	r2, r2, #1
 8010908:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010912:	d107      	bne.n	8010924 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	2b0f      	cmp	r3, #15
 801092a:	d947      	bls.n	80109bc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801092c:	e03f      	b.n	80109ae <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	695b      	ldr	r3, [r3, #20]
 8010934:	f003 0302 	and.w	r3, r3, #2
 8010938:	2b02      	cmp	r3, #2
 801093a:	d114      	bne.n	8010966 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	6812      	ldr	r2, [r2, #0]
 8010946:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801094c:	1d1a      	adds	r2, r3, #4
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010958:	b29b      	uxth	r3, r3
 801095a:	3b01      	subs	r3, #1
 801095c:	b29a      	uxth	r2, r3
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010964:	e023      	b.n	80109ae <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010966:	f7f8 f909 	bl	8008b7c <HAL_GetTick>
 801096a:	4602      	mov	r2, r0
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	1ad3      	subs	r3, r2, r3
 8010970:	683a      	ldr	r2, [r7, #0]
 8010972:	429a      	cmp	r2, r3
 8010974:	d803      	bhi.n	801097e <HAL_SPI_Transmit+0x16a>
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801097c:	d102      	bne.n	8010984 <HAL_SPI_Transmit+0x170>
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d114      	bne.n	80109ae <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010984:	68f8      	ldr	r0, [r7, #12]
 8010986:	f001 f837 	bl	80119f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2200      	movs	r2, #0
 801098e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010998:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2201      	movs	r2, #1
 80109a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80109aa:	2303      	movs	r3, #3
 80109ac:	e11f      	b.n	8010bee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109b4:	b29b      	uxth	r3, r3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1b9      	bne.n	801092e <HAL_SPI_Transmit+0x11a>
 80109ba:	e0f2      	b.n	8010ba2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	2b07      	cmp	r3, #7
 80109c2:	f240 80e7 	bls.w	8010b94 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80109c6:	e05d      	b.n	8010a84 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	695b      	ldr	r3, [r3, #20]
 80109ce:	f003 0302 	and.w	r3, r3, #2
 80109d2:	2b02      	cmp	r3, #2
 80109d4:	d132      	bne.n	8010a3c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109dc:	b29b      	uxth	r3, r3
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d918      	bls.n	8010a14 <HAL_SPI_Transmit+0x200>
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d014      	beq.n	8010a14 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	6812      	ldr	r2, [r2, #0]
 80109f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109fa:	1d1a      	adds	r2, r3, #4
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	3b02      	subs	r3, #2
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a12:	e037      	b.n	8010a84 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a18:	881a      	ldrh	r2, [r3, #0]
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a22:	1c9a      	adds	r2, r3, #2
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	3b01      	subs	r3, #1
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a3a:	e023      	b.n	8010a84 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a3c:	f7f8 f89e 	bl	8008b7c <HAL_GetTick>
 8010a40:	4602      	mov	r2, r0
 8010a42:	697b      	ldr	r3, [r7, #20]
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	683a      	ldr	r2, [r7, #0]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d803      	bhi.n	8010a54 <HAL_SPI_Transmit+0x240>
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a52:	d102      	bne.n	8010a5a <HAL_SPI_Transmit+0x246>
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d114      	bne.n	8010a84 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010a5a:	68f8      	ldr	r0, [r7, #12]
 8010a5c:	f000 ffcc 	bl	80119f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2200      	movs	r2, #0
 8010a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010a80:	2303      	movs	r3, #3
 8010a82:	e0b4      	b.n	8010bee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d19b      	bne.n	80109c8 <HAL_SPI_Transmit+0x1b4>
 8010a90:	e087      	b.n	8010ba2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	695b      	ldr	r3, [r3, #20]
 8010a98:	f003 0302 	and.w	r3, r3, #2
 8010a9c:	2b02      	cmp	r3, #2
 8010a9e:	d155      	bne.n	8010b4c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	2b03      	cmp	r3, #3
 8010aaa:	d918      	bls.n	8010ade <HAL_SPI_Transmit+0x2ca>
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ab0:	2b40      	cmp	r3, #64	; 0x40
 8010ab2:	d914      	bls.n	8010ade <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	6812      	ldr	r2, [r2, #0]
 8010abe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ac4:	1d1a      	adds	r2, r3, #4
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	3b04      	subs	r3, #4
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010adc:	e05a      	b.n	8010b94 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d917      	bls.n	8010b1a <HAL_SPI_Transmit+0x306>
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d013      	beq.n	8010b1a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010af6:	881a      	ldrh	r2, [r3, #0]
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b00:	1c9a      	adds	r2, r3, #2
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	3b02      	subs	r3, #2
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010b18:	e03c      	b.n	8010b94 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	3320      	adds	r3, #32
 8010b24:	7812      	ldrb	r2, [r2, #0]
 8010b26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b2c:	1c5a      	adds	r2, r3, #1
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	3b01      	subs	r3, #1
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010b44:	e026      	b.n	8010b94 <HAL_SPI_Transmit+0x380>
 8010b46:	bf00      	nop
 8010b48:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b4c:	f7f8 f816 	bl	8008b7c <HAL_GetTick>
 8010b50:	4602      	mov	r2, r0
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	1ad3      	subs	r3, r2, r3
 8010b56:	683a      	ldr	r2, [r7, #0]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d803      	bhi.n	8010b64 <HAL_SPI_Transmit+0x350>
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b62:	d102      	bne.n	8010b6a <HAL_SPI_Transmit+0x356>
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d114      	bne.n	8010b94 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010b6a:	68f8      	ldr	r0, [r7, #12]
 8010b6c:	f000 ff44 	bl	80119f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2201      	movs	r2, #1
 8010b8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010b90:	2303      	movs	r3, #3
 8010b92:	e02c      	b.n	8010bee <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f47f af78 	bne.w	8010a92 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	9300      	str	r3, [sp, #0]
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	2108      	movs	r1, #8
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f000 ffc3 	bl	8011b38 <SPI_WaitOnFlagUntilTimeout>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d007      	beq.n	8010bc8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bbe:	f043 0220 	orr.w	r2, r3, #32
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f000 ff15 	bl	80119f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d001      	beq.n	8010bec <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8010be8:	2301      	movs	r3, #1
 8010bea:	e000      	b.n	8010bee <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8010bec:	7efb      	ldrb	r3, [r7, #27]
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3720      	adds	r7, #32
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop

08010bf8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b08a      	sub	sp, #40	; 0x28
 8010bfc:	af02      	add	r7, sp, #8
 8010bfe:	60f8      	str	r0, [r7, #12]
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	603b      	str	r3, [r7, #0]
 8010c04:	4613      	mov	r3, r2
 8010c06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	3330      	adds	r3, #48	; 0x30
 8010c12:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010c1c:	d112      	bne.n	8010c44 <HAL_SPI_Receive+0x4c>
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	689b      	ldr	r3, [r3, #8]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d10e      	bne.n	8010c44 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2204      	movs	r2, #4
 8010c2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010c2e:	88fa      	ldrh	r2, [r7, #6]
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	9300      	str	r3, [sp, #0]
 8010c34:	4613      	mov	r3, r2
 8010c36:	68ba      	ldr	r2, [r7, #8]
 8010c38:	68b9      	ldr	r1, [r7, #8]
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f000 f9ce 	bl	8010fdc <HAL_SPI_TransmitReceive>
 8010c40:	4603      	mov	r3, r0
 8010c42:	e1c7      	b.n	8010fd4 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	d101      	bne.n	8010c52 <HAL_SPI_Receive+0x5a>
 8010c4e:	2302      	movs	r3, #2
 8010c50:	e1c0      	b.n	8010fd4 <HAL_SPI_Receive+0x3dc>
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2201      	movs	r2, #1
 8010c56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010c5a:	f7f7 ff8f 	bl	8008b7c <HAL_GetTick>
 8010c5e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	d007      	beq.n	8010c7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8010c6c:	2302      	movs	r3, #2
 8010c6e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2200      	movs	r2, #0
 8010c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010c78:	7ffb      	ldrb	r3, [r7, #31]
 8010c7a:	e1ab      	b.n	8010fd4 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d002      	beq.n	8010c88 <HAL_SPI_Receive+0x90>
 8010c82:	88fb      	ldrh	r3, [r7, #6]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d107      	bne.n	8010c98 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010c94:	7ffb      	ldrb	r3, [r7, #31]
 8010c96:	e19d      	b.n	8010fd4 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2204      	movs	r2, #4
 8010c9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	88fa      	ldrh	r2, [r7, #6]
 8010cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	88fa      	ldrh	r2, [r7, #6]
 8010cba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	689b      	ldr	r3, [r3, #8]
 8010ce4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010ce8:	d107      	bne.n	8010cfa <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	685a      	ldr	r2, [r3, #4]
 8010d00:	4b94      	ldr	r3, [pc, #592]	; (8010f54 <HAL_SPI_Receive+0x35c>)
 8010d02:	4013      	ands	r3, r2
 8010d04:	88f9      	ldrh	r1, [r7, #6]
 8010d06:	68fa      	ldr	r2, [r7, #12]
 8010d08:	6812      	ldr	r2, [r2, #0]
 8010d0a:	430b      	orrs	r3, r1
 8010d0c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	681a      	ldr	r2, [r3, #0]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	f042 0201 	orr.w	r2, r2, #1
 8010d1c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010d26:	d107      	bne.n	8010d38 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	681a      	ldr	r2, [r3, #0]
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	2b0f      	cmp	r3, #15
 8010d3e:	d948      	bls.n	8010dd2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010d40:	e040      	b.n	8010dc4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	695a      	ldr	r2, [r3, #20]
 8010d48:	f248 0308 	movw	r3, #32776	; 0x8008
 8010d4c:	4013      	ands	r3, r2
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d014      	beq.n	8010d7c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010d5c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d62:	1d1a      	adds	r2, r3, #4
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	3b01      	subs	r3, #1
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010d7a:	e023      	b.n	8010dc4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d7c:	f7f7 fefe 	bl	8008b7c <HAL_GetTick>
 8010d80:	4602      	mov	r2, r0
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	1ad3      	subs	r3, r2, r3
 8010d86:	683a      	ldr	r2, [r7, #0]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d803      	bhi.n	8010d94 <HAL_SPI_Receive+0x19c>
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d92:	d102      	bne.n	8010d9a <HAL_SPI_Receive+0x1a2>
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d114      	bne.n	8010dc4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	f000 fe2c 	bl	80119f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2200      	movs	r2, #0
 8010da4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2201      	movs	r2, #1
 8010dbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010dc0:	2303      	movs	r3, #3
 8010dc2:	e107      	b.n	8010fd4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010dca:	b29b      	uxth	r3, r3
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d1b8      	bne.n	8010d42 <HAL_SPI_Receive+0x14a>
 8010dd0:	e0ed      	b.n	8010fae <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	2b07      	cmp	r3, #7
 8010dd8:	f240 80e2 	bls.w	8010fa0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010ddc:	e05b      	b.n	8010e96 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	695b      	ldr	r3, [r3, #20]
 8010de4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d030      	beq.n	8010e4e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	695b      	ldr	r3, [r3, #20]
 8010df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d014      	beq.n	8010e24 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010e04:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e0a:	1d1a      	adds	r2, r3, #4
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	3b02      	subs	r3, #2
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e22:	e038      	b.n	8010e96 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e28:	69ba      	ldr	r2, [r7, #24]
 8010e2a:	8812      	ldrh	r2, [r2, #0]
 8010e2c:	b292      	uxth	r2, r2
 8010e2e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e34:	1c9a      	adds	r2, r3, #2
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	3b01      	subs	r3, #1
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e4c:	e023      	b.n	8010e96 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e4e:	f7f7 fe95 	bl	8008b7c <HAL_GetTick>
 8010e52:	4602      	mov	r2, r0
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d803      	bhi.n	8010e66 <HAL_SPI_Receive+0x26e>
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e64:	d102      	bne.n	8010e6c <HAL_SPI_Receive+0x274>
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d114      	bne.n	8010e96 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010e6c:	68f8      	ldr	r0, [r7, #12]
 8010e6e:	f000 fdc3 	bl	80119f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010e92:	2303      	movs	r3, #3
 8010e94:	e09e      	b.n	8010fd4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d19d      	bne.n	8010dde <HAL_SPI_Receive+0x1e6>
 8010ea2:	e084      	b.n	8010fae <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	695b      	ldr	r3, [r3, #20]
 8010eaa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d052      	beq.n	8010f58 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	695b      	ldr	r3, [r3, #20]
 8010eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d014      	beq.n	8010eea <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ec8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010eca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ed0:	1d1a      	adds	r2, r3, #4
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	3b04      	subs	r3, #4
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010ee8:	e05a      	b.n	8010fa0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	695b      	ldr	r3, [r3, #20]
 8010ef0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8010ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ef8:	d914      	bls.n	8010f24 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010efe:	69ba      	ldr	r2, [r7, #24]
 8010f00:	8812      	ldrh	r2, [r2, #0]
 8010f02:	b292      	uxth	r2, r2
 8010f04:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f0a:	1c9a      	adds	r2, r3, #2
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	3b02      	subs	r3, #2
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f22:	e03d      	b.n	8010fa0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f30:	7812      	ldrb	r2, [r2, #0]
 8010f32:	b2d2      	uxtb	r2, r2
 8010f34:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f3a:	1c5a      	adds	r2, r3, #1
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	3b01      	subs	r3, #1
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f52:	e025      	b.n	8010fa0 <HAL_SPI_Receive+0x3a8>
 8010f54:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010f58:	f7f7 fe10 	bl	8008b7c <HAL_GetTick>
 8010f5c:	4602      	mov	r2, r0
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	1ad3      	subs	r3, r2, r3
 8010f62:	683a      	ldr	r2, [r7, #0]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d803      	bhi.n	8010f70 <HAL_SPI_Receive+0x378>
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f6e:	d102      	bne.n	8010f76 <HAL_SPI_Receive+0x37e>
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d114      	bne.n	8010fa0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f000 fd3e 	bl	80119f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2201      	movs	r2, #1
 8010f98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010f9c:	2303      	movs	r3, #3
 8010f9e:	e019      	b.n	8010fd4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	f47f af7b 	bne.w	8010ea4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f000 fd22 	bl	80119f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d001      	beq.n	8010fd2 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8010fce:	2301      	movs	r3, #1
 8010fd0:	e000      	b.n	8010fd4 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8010fd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3720      	adds	r7, #32
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}

08010fdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b08e      	sub	sp, #56	; 0x38
 8010fe0:	af02      	add	r7, sp, #8
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	607a      	str	r2, [r7, #4]
 8010fe8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010fea:	2300      	movs	r3, #0
 8010fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	3320      	adds	r3, #32
 8010ff6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	3330      	adds	r3, #48	; 0x30
 8010ffe:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011006:	2b01      	cmp	r3, #1
 8011008:	d101      	bne.n	801100e <HAL_SPI_TransmitReceive+0x32>
 801100a:	2302      	movs	r3, #2
 801100c:	e2ce      	b.n	80115ac <HAL_SPI_TransmitReceive+0x5d0>
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2201      	movs	r2, #1
 8011012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011016:	f7f7 fdb1 	bl	8008b7c <HAL_GetTick>
 801101a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 801101c:	887b      	ldrh	r3, [r7, #2]
 801101e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8011020:	887b      	ldrh	r3, [r7, #2]
 8011022:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801102a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011032:	7efb      	ldrb	r3, [r7, #27]
 8011034:	2b01      	cmp	r3, #1
 8011036:	d014      	beq.n	8011062 <HAL_SPI_TransmitReceive+0x86>
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801103e:	d106      	bne.n	801104e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8011044:	2b00      	cmp	r3, #0
 8011046:	d102      	bne.n	801104e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011048:	7efb      	ldrb	r3, [r7, #27]
 801104a:	2b04      	cmp	r3, #4
 801104c:	d009      	beq.n	8011062 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 801104e:	2302      	movs	r3, #2
 8011050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2200      	movs	r2, #0
 8011058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801105c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011060:	e2a4      	b.n	80115ac <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d005      	beq.n	8011074 <HAL_SPI_TransmitReceive+0x98>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d002      	beq.n	8011074 <HAL_SPI_TransmitReceive+0x98>
 801106e:	887b      	ldrh	r3, [r7, #2]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d109      	bne.n	8011088 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8011074:	2301      	movs	r3, #1
 8011076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2200      	movs	r2, #0
 801107e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011082:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011086:	e291      	b.n	80115ac <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801108e:	b2db      	uxtb	r3, r3
 8011090:	2b04      	cmp	r3, #4
 8011092:	d003      	beq.n	801109c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2205      	movs	r2, #5
 8011098:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	687a      	ldr	r2, [r7, #4]
 80110a8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	887a      	ldrh	r2, [r7, #2]
 80110ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	887a      	ldrh	r2, [r7, #2]
 80110b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	68ba      	ldr	r2, [r7, #8]
 80110be:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	887a      	ldrh	r2, [r7, #2]
 80110c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	887a      	ldrh	r2, [r7, #2]
 80110cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2200      	movs	r2, #0
 80110d4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2200      	movs	r2, #0
 80110da:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	685a      	ldr	r2, [r3, #4]
 80110e2:	4b81      	ldr	r3, [pc, #516]	; (80112e8 <HAL_SPI_TransmitReceive+0x30c>)
 80110e4:	4013      	ands	r3, r2
 80110e6:	8879      	ldrh	r1, [r7, #2]
 80110e8:	68fa      	ldr	r2, [r7, #12]
 80110ea:	6812      	ldr	r2, [r2, #0]
 80110ec:	430b      	orrs	r3, r1
 80110ee:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	681a      	ldr	r2, [r3, #0]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f042 0201 	orr.w	r2, r2, #1
 80110fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011108:	d107      	bne.n	801111a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	2b0f      	cmp	r3, #15
 8011120:	d970      	bls.n	8011204 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011122:	e068      	b.n	80111f6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	695b      	ldr	r3, [r3, #20]
 801112a:	f003 0302 	and.w	r3, r3, #2
 801112e:	2b02      	cmp	r3, #2
 8011130:	d11a      	bne.n	8011168 <HAL_SPI_TransmitReceive+0x18c>
 8011132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011134:	2b00      	cmp	r3, #0
 8011136:	d017      	beq.n	8011168 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	6812      	ldr	r2, [r2, #0]
 8011142:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011148:	1d1a      	adds	r2, r3, #4
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011154:	b29b      	uxth	r3, r3
 8011156:	3b01      	subs	r3, #1
 8011158:	b29a      	uxth	r2, r3
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011166:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	695a      	ldr	r2, [r3, #20]
 801116e:	f248 0308 	movw	r3, #32776	; 0x8008
 8011172:	4013      	ands	r3, r2
 8011174:	2b00      	cmp	r3, #0
 8011176:	d01a      	beq.n	80111ae <HAL_SPI_TransmitReceive+0x1d2>
 8011178:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801117a:	2b00      	cmp	r3, #0
 801117c:	d017      	beq.n	80111ae <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011186:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011188:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801118e:	1d1a      	adds	r2, r3, #4
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801119a:	b29b      	uxth	r3, r3
 801119c:	3b01      	subs	r3, #1
 801119e:	b29a      	uxth	r2, r3
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80111ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80111ae:	f7f7 fce5 	bl	8008b7c <HAL_GetTick>
 80111b2:	4602      	mov	r2, r0
 80111b4:	69fb      	ldr	r3, [r7, #28]
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d803      	bhi.n	80111c6 <HAL_SPI_TransmitReceive+0x1ea>
 80111be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80111c4:	d102      	bne.n	80111cc <HAL_SPI_TransmitReceive+0x1f0>
 80111c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d114      	bne.n	80111f6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f000 fc13 	bl	80119f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2200      	movs	r2, #0
 80111d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2201      	movs	r2, #1
 80111ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80111f2:	2303      	movs	r3, #3
 80111f4:	e1da      	b.n	80115ac <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80111f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d193      	bne.n	8011124 <HAL_SPI_TransmitReceive+0x148>
 80111fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d190      	bne.n	8011124 <HAL_SPI_TransmitReceive+0x148>
 8011202:	e1ac      	b.n	801155e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	2b07      	cmp	r3, #7
 801120a:	f240 81a0 	bls.w	801154e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801120e:	e0a9      	b.n	8011364 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	695b      	ldr	r3, [r3, #20]
 8011216:	f003 0302 	and.w	r3, r3, #2
 801121a:	2b02      	cmp	r3, #2
 801121c:	d139      	bne.n	8011292 <HAL_SPI_TransmitReceive+0x2b6>
 801121e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011220:	2b00      	cmp	r3, #0
 8011222:	d036      	beq.n	8011292 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011224:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011226:	2b01      	cmp	r3, #1
 8011228:	d91c      	bls.n	8011264 <HAL_SPI_TransmitReceive+0x288>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801122e:	2b00      	cmp	r3, #0
 8011230:	d018      	beq.n	8011264 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	6812      	ldr	r2, [r2, #0]
 801123c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011242:	1d1a      	adds	r2, r3, #4
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801124e:	b29b      	uxth	r3, r3
 8011250:	3b02      	subs	r3, #2
 8011252:	b29a      	uxth	r2, r3
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011260:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011262:	e016      	b.n	8011292 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011268:	881a      	ldrh	r2, [r3, #0]
 801126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011272:	1c9a      	adds	r2, r3, #2
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801127e:	b29b      	uxth	r3, r3
 8011280:	3b01      	subs	r3, #1
 8011282:	b29a      	uxth	r2, r3
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011290:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	695b      	ldr	r3, [r3, #20]
 8011298:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801129c:	2b00      	cmp	r3, #0
 801129e:	d03d      	beq.n	801131c <HAL_SPI_TransmitReceive+0x340>
 80112a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d03a      	beq.n	801131c <HAL_SPI_TransmitReceive+0x340>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	695b      	ldr	r3, [r3, #20]
 80112ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d01b      	beq.n	80112ec <HAL_SPI_TransmitReceive+0x310>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80112be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112c4:	1d1a      	adds	r2, r3, #4
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	3b02      	subs	r3, #2
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80112e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80112e4:	e01a      	b.n	801131c <HAL_SPI_TransmitReceive+0x340>
 80112e6:	bf00      	nop
 80112e8:	ffff0000 	.word	0xffff0000
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112f0:	6a3a      	ldr	r2, [r7, #32]
 80112f2:	8812      	ldrh	r2, [r2, #0]
 80112f4:	b292      	uxth	r2, r2
 80112f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112fc:	1c9a      	adds	r2, r3, #2
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011308:	b29b      	uxth	r3, r3
 801130a:	3b01      	subs	r3, #1
 801130c:	b29a      	uxth	r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801131a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801131c:	f7f7 fc2e 	bl	8008b7c <HAL_GetTick>
 8011320:	4602      	mov	r2, r0
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	1ad3      	subs	r3, r2, r3
 8011326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011328:	429a      	cmp	r2, r3
 801132a:	d803      	bhi.n	8011334 <HAL_SPI_TransmitReceive+0x358>
 801132c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011332:	d102      	bne.n	801133a <HAL_SPI_TransmitReceive+0x35e>
 8011334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011336:	2b00      	cmp	r3, #0
 8011338:	d114      	bne.n	8011364 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801133a:	68f8      	ldr	r0, [r7, #12]
 801133c:	f000 fb5c 	bl	80119f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2200      	movs	r2, #0
 8011344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801134e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2201      	movs	r2, #1
 801135c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8011360:	2303      	movs	r3, #3
 8011362:	e123      	b.n	80115ac <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8011364:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011366:	2b00      	cmp	r3, #0
 8011368:	f47f af52 	bne.w	8011210 <HAL_SPI_TransmitReceive+0x234>
 801136c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801136e:	2b00      	cmp	r3, #0
 8011370:	f47f af4e 	bne.w	8011210 <HAL_SPI_TransmitReceive+0x234>
 8011374:	e0f3      	b.n	801155e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	695b      	ldr	r3, [r3, #20]
 801137c:	f003 0302 	and.w	r3, r3, #2
 8011380:	2b02      	cmp	r3, #2
 8011382:	d15a      	bne.n	801143a <HAL_SPI_TransmitReceive+0x45e>
 8011384:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011386:	2b00      	cmp	r3, #0
 8011388:	d057      	beq.n	801143a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801138a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801138c:	2b03      	cmp	r3, #3
 801138e:	d91c      	bls.n	80113ca <HAL_SPI_TransmitReceive+0x3ee>
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011394:	2b40      	cmp	r3, #64	; 0x40
 8011396:	d918      	bls.n	80113ca <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	6812      	ldr	r2, [r2, #0]
 80113a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113a8:	1d1a      	adds	r2, r3, #4
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	3b04      	subs	r3, #4
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80113c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80113c8:	e037      	b.n	801143a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80113ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d91b      	bls.n	8011408 <HAL_SPI_TransmitReceive+0x42c>
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d017      	beq.n	8011408 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113dc:	881a      	ldrh	r2, [r3, #0]
 80113de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113e6:	1c9a      	adds	r2, r3, #2
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	3b02      	subs	r3, #2
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011404:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011406:	e018      	b.n	801143a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	3320      	adds	r3, #32
 8011412:	7812      	ldrb	r2, [r2, #0]
 8011414:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801141a:	1c5a      	adds	r2, r3, #1
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011426:	b29b      	uxth	r3, r3
 8011428:	3b01      	subs	r3, #1
 801142a:	b29a      	uxth	r2, r3
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011438:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	695b      	ldr	r3, [r3, #20]
 8011440:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011444:	2b00      	cmp	r3, #0
 8011446:	d05e      	beq.n	8011506 <HAL_SPI_TransmitReceive+0x52a>
 8011448:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801144a:	2b00      	cmp	r3, #0
 801144c:	d05b      	beq.n	8011506 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	695b      	ldr	r3, [r3, #20]
 8011454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011458:	2b00      	cmp	r3, #0
 801145a:	d018      	beq.n	801148e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011464:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011466:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801146c:	1d1a      	adds	r2, r3, #4
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011478:	b29b      	uxth	r3, r3
 801147a:	3b04      	subs	r3, #4
 801147c:	b29a      	uxth	r2, r3
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801148a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801148c:	e03b      	b.n	8011506 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	695b      	ldr	r3, [r3, #20]
 8011494:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8011498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801149c:	d918      	bls.n	80114d0 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80114a2:	6a3a      	ldr	r2, [r7, #32]
 80114a4:	8812      	ldrh	r2, [r2, #0]
 80114a6:	b292      	uxth	r2, r2
 80114a8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80114ae:	1c9a      	adds	r2, r3, #2
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	3b02      	subs	r3, #2
 80114be:	b29a      	uxth	r2, r3
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80114cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80114ce:	e01a      	b.n	8011506 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80114dc:	7812      	ldrb	r2, [r2, #0]
 80114de:	b2d2      	uxtb	r2, r2
 80114e0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80114e6:	1c5a      	adds	r2, r3, #1
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	3b01      	subs	r3, #1
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011504:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011506:	f7f7 fb39 	bl	8008b7c <HAL_GetTick>
 801150a:	4602      	mov	r2, r0
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	1ad3      	subs	r3, r2, r3
 8011510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011512:	429a      	cmp	r2, r3
 8011514:	d803      	bhi.n	801151e <HAL_SPI_TransmitReceive+0x542>
 8011516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801151c:	d102      	bne.n	8011524 <HAL_SPI_TransmitReceive+0x548>
 801151e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011520:	2b00      	cmp	r3, #0
 8011522:	d114      	bne.n	801154e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8011524:	68f8      	ldr	r0, [r7, #12]
 8011526:	f000 fa67 	bl	80119f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2200      	movs	r2, #0
 801152e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011538:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2201      	movs	r2, #1
 8011546:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 801154a:	2303      	movs	r3, #3
 801154c:	e02e      	b.n	80115ac <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801154e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011550:	2b00      	cmp	r3, #0
 8011552:	f47f af10 	bne.w	8011376 <HAL_SPI_TransmitReceive+0x39a>
 8011556:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011558:	2b00      	cmp	r3, #0
 801155a:	f47f af0c 	bne.w	8011376 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 801155e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	2200      	movs	r2, #0
 8011566:	2108      	movs	r1, #8
 8011568:	68f8      	ldr	r0, [r7, #12]
 801156a:	f000 fae5 	bl	8011b38 <SPI_WaitOnFlagUntilTimeout>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d007      	beq.n	8011584 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801157a:	f043 0220 	orr.w	r2, r3, #32
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f000 fa37 	bl	80119f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	2200      	movs	r2, #0
 801158e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	2201      	movs	r2, #1
 8011596:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d001      	beq.n	80115a8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 80115a4:	2301      	movs	r3, #1
 80115a6:	e001      	b.n	80115ac <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 80115a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3730      	adds	r7, #48	; 0x30
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b08a      	sub	sp, #40	; 0x28
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	691b      	ldr	r3, [r3, #16]
 80115c2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80115cc:	6a3a      	ldr	r2, [r7, #32]
 80115ce:	69fb      	ldr	r3, [r7, #28]
 80115d0:	4013      	ands	r3, r2
 80115d2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80115dc:	2300      	movs	r3, #0
 80115de:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80115e6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	3330      	adds	r3, #48	; 0x30
 80115ee:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d113      	bne.n	8011622 <HAL_SPI_IRQHandler+0x6e>
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	f003 0320 	and.w	r3, r3, #32
 8011600:	2b00      	cmp	r3, #0
 8011602:	d10e      	bne.n	8011622 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011604:	69bb      	ldr	r3, [r7, #24]
 8011606:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801160a:	2b00      	cmp	r3, #0
 801160c:	d009      	beq.n	8011622 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	4798      	blx	r3
    handled = 1UL;
 801161e:	2301      	movs	r3, #1
 8011620:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10f      	bne.n	801164c <HAL_SPI_IRQHandler+0x98>
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	f003 0301 	and.w	r3, r3, #1
 8011632:	2b00      	cmp	r3, #0
 8011634:	d00a      	beq.n	801164c <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801163c:	2b00      	cmp	r3, #0
 801163e:	d105      	bne.n	801164c <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	4798      	blx	r3
    handled = 1UL;
 8011648:	2301      	movs	r3, #1
 801164a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	f003 0320 	and.w	r3, r3, #32
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10f      	bne.n	8011676 <HAL_SPI_IRQHandler+0xc2>
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	f003 0302 	and.w	r3, r3, #2
 801165c:	2b00      	cmp	r3, #0
 801165e:	d00a      	beq.n	8011676 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011666:	2b00      	cmp	r3, #0
 8011668:	d105      	bne.n	8011676 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	4798      	blx	r3
    handled = 1UL;
 8011672:	2301      	movs	r3, #1
 8011674:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011678:	2b00      	cmp	r3, #0
 801167a:	f040 816f 	bne.w	801195c <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801167e:	69bb      	ldr	r3, [r7, #24]
 8011680:	f003 0308 	and.w	r3, r3, #8
 8011684:	2b00      	cmp	r3, #0
 8011686:	f000 80a0 	beq.w	80117ca <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	699a      	ldr	r2, [r3, #24]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f042 0208 	orr.w	r2, r2, #8
 8011698:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	699a      	ldr	r2, [r3, #24]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	f042 0210 	orr.w	r2, r2, #16
 80116a8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	699a      	ldr	r2, [r3, #24]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80116b8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	691a      	ldr	r2, [r3, #16]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f022 0208 	bic.w	r2, r2, #8
 80116c8:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d00f      	beq.n	80116f4 <HAL_SPI_IRQHandler+0x140>
 80116d4:	7cfb      	ldrb	r3, [r7, #19]
 80116d6:	2b04      	cmp	r3, #4
 80116d8:	d004      	beq.n	80116e4 <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116de:	69db      	ldr	r3, [r3, #28]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d007      	beq.n	80116f4 <HAL_SPI_IRQHandler+0x140>
 80116e4:	7cfb      	ldrb	r3, [r7, #19]
 80116e6:	2b03      	cmp	r3, #3
 80116e8:	d059      	beq.n	801179e <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116ee:	69db      	ldr	r3, [r3, #28]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d154      	bne.n	801179e <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	689b      	ldr	r3, [r3, #8]
 80116fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d13d      	bne.n	801177e <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8011702:	e036      	b.n	8011772 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	2b0f      	cmp	r3, #15
 801170a:	d90b      	bls.n	8011724 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011714:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011716:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801171c:	1d1a      	adds	r2, r3, #4
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	665a      	str	r2, [r3, #100]	; 0x64
 8011722:	e01d      	b.n	8011760 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	2b07      	cmp	r3, #7
 801172a:	d90b      	bls.n	8011744 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011730:	68fa      	ldr	r2, [r7, #12]
 8011732:	8812      	ldrh	r2, [r2, #0]
 8011734:	b292      	uxth	r2, r2
 8011736:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801173c:	1c9a      	adds	r2, r3, #2
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	665a      	str	r2, [r3, #100]	; 0x64
 8011742:	e00d      	b.n	8011760 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011750:	7812      	ldrb	r2, [r2, #0]
 8011752:	b2d2      	uxtb	r2, r2
 8011754:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801175a:	1c5a      	adds	r2, r3, #1
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011766:	b29b      	uxth	r3, r3
 8011768:	3b01      	subs	r3, #1
 801176a:	b29a      	uxth	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011778:	b29b      	uxth	r3, r3
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1c2      	bne.n	8011704 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 f93a 	bl	80119f8 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2201      	movs	r2, #1
 8011788:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011792:	2b00      	cmp	r3, #0
 8011794:	d003      	beq.n	801179e <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 f90a 	bl	80119b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 801179c:	e0e3      	b.n	8011966 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801179e:	7cfb      	ldrb	r3, [r7, #19]
 80117a0:	2b05      	cmp	r3, #5
 80117a2:	d103      	bne.n	80117ac <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80117a4:	6878      	ldr	r0, [r7, #4]
 80117a6:	f000 f8f9 	bl	801199c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80117aa:	e0d9      	b.n	8011960 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80117ac:	7cfb      	ldrb	r3, [r7, #19]
 80117ae:	2b04      	cmp	r3, #4
 80117b0:	d103      	bne.n	80117ba <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f000 f8e8 	bl	8011988 <HAL_SPI_RxCpltCallback>
    return;
 80117b8:	e0d2      	b.n	8011960 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80117ba:	7cfb      	ldrb	r3, [r7, #19]
 80117bc:	2b03      	cmp	r3, #3
 80117be:	f040 80cf 	bne.w	8011960 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 f8d6 	bl	8011974 <HAL_SPI_TxCpltCallback>
    return;
 80117c8:	e0ca      	b.n	8011960 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d00d      	beq.n	80117f0 <HAL_SPI_IRQHandler+0x23c>
 80117d4:	6a3b      	ldr	r3, [r7, #32]
 80117d6:	f003 0308 	and.w	r3, r3, #8
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d008      	beq.n	80117f0 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	699a      	ldr	r2, [r3, #24]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117ec:	619a      	str	r2, [r3, #24]

    return;
 80117ee:	e0ba      	b.n	8011966 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80117f0:	69bb      	ldr	r3, [r7, #24]
 80117f2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f000 80b5 	beq.w	8011966 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011802:	2b00      	cmp	r3, #0
 8011804:	d00f      	beq.n	8011826 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801180c:	f043 0204 	orr.w	r2, r3, #4
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	699a      	ldr	r2, [r3, #24]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011824:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801182c:	2b00      	cmp	r3, #0
 801182e:	d00f      	beq.n	8011850 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011836:	f043 0201 	orr.w	r2, r3, #1
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	699a      	ldr	r2, [r3, #24]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801184e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011850:	69bb      	ldr	r3, [r7, #24]
 8011852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00f      	beq.n	801187a <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011860:	f043 0208 	orr.w	r2, r3, #8
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	699a      	ldr	r2, [r3, #24]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011878:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	f003 0320 	and.w	r3, r3, #32
 8011880:	2b00      	cmp	r3, #0
 8011882:	d00f      	beq.n	80118a4 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801188a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	699a      	ldr	r2, [r3, #24]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	f042 0220 	orr.w	r2, r2, #32
 80118a2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d05a      	beq.n	8011964 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f022 0201 	bic.w	r2, r2, #1
 80118bc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	6919      	ldr	r1, [r3, #16]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681a      	ldr	r2, [r3, #0]
 80118c8:	4b28      	ldr	r3, [pc, #160]	; (801196c <HAL_SPI_IRQHandler+0x3b8>)
 80118ca:	400b      	ands	r3, r1
 80118cc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80118d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80118d8:	d138      	bne.n	801194c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	689a      	ldr	r2, [r3, #8]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80118e8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d013      	beq.n	801191a <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80118f6:	4a1e      	ldr	r2, [pc, #120]	; (8011970 <HAL_SPI_IRQHandler+0x3bc>)
 80118f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80118fe:	4618      	mov	r0, r3
 8011900:	f7f8 fc16 	bl	800a130 <HAL_DMA_Abort_IT>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d007      	beq.n	801191a <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011910:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801191e:	2b00      	cmp	r3, #0
 8011920:	d020      	beq.n	8011964 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011926:	4a12      	ldr	r2, [pc, #72]	; (8011970 <HAL_SPI_IRQHandler+0x3bc>)
 8011928:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801192e:	4618      	mov	r0, r3
 8011930:	f7f8 fbfe 	bl	800a130 <HAL_DMA_Abort_IT>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d014      	beq.n	8011964 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011940:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801194a:	e00b      	b.n	8011964 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2201      	movs	r2, #1
 8011950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f000 f82b 	bl	80119b0 <HAL_SPI_ErrorCallback>
    return;
 801195a:	e003      	b.n	8011964 <HAL_SPI_IRQHandler+0x3b0>
    return;
 801195c:	bf00      	nop
 801195e:	e002      	b.n	8011966 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8011960:	bf00      	nop
 8011962:	e000      	b.n	8011966 <HAL_SPI_IRQHandler+0x3b2>
    return;
 8011964:	bf00      	nop
  }
}
 8011966:	3728      	adds	r7, #40	; 0x28
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	fffffc94 	.word	0xfffffc94
 8011970:	080119c5 	.word	0x080119c5

08011974 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801197c:	bf00      	nop
 801197e:	370c      	adds	r7, #12
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011990:	bf00      	nop
 8011992:	370c      	adds	r7, #12
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr

0801199c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801199c:	b480      	push	{r7}
 801199e:	b083      	sub	sp, #12
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80119a4:	bf00      	nop
 80119a6:	370c      	adds	r7, #12
 80119a8:	46bd      	mov	sp, r7
 80119aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ae:	4770      	bx	lr

080119b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b083      	sub	sp, #12
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80119b8:	bf00      	nop
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	2200      	movs	r2, #0
 80119d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2200      	movs	r2, #0
 80119de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2201      	movs	r2, #1
 80119e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f7ff ffe0 	bl	80119b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80119f0:	bf00      	nop
 80119f2:	3710      	adds	r7, #16
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b085      	sub	sp, #20
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	695b      	ldr	r3, [r3, #20]
 8011a06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	699a      	ldr	r2, [r3, #24]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f042 0208 	orr.w	r2, r2, #8
 8011a16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	699a      	ldr	r2, [r3, #24]
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f042 0210 	orr.w	r2, r2, #16
 8011a26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	f022 0201 	bic.w	r2, r2, #1
 8011a36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	6919      	ldr	r1, [r3, #16]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	4b3c      	ldr	r3, [pc, #240]	; (8011b34 <SPI_CloseTransfer+0x13c>)
 8011a44:	400b      	ands	r3, r1
 8011a46:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	689a      	ldr	r2, [r3, #8]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8011a56:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011a5e:	b2db      	uxtb	r3, r3
 8011a60:	2b04      	cmp	r3, #4
 8011a62:	d014      	beq.n	8011a8e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	f003 0320 	and.w	r3, r3, #32
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d00f      	beq.n	8011a8e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	699a      	ldr	r2, [r3, #24]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f042 0220 	orr.w	r2, r2, #32
 8011a8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	2b03      	cmp	r3, #3
 8011a98:	d014      	beq.n	8011ac4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d00f      	beq.n	8011ac4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011aaa:	f043 0204 	orr.w	r2, r3, #4
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	699a      	ldr	r2, [r3, #24]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ac2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00f      	beq.n	8011aee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ad4:	f043 0201 	orr.w	r2, r3, #1
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	699a      	ldr	r2, [r3, #24]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011aec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00f      	beq.n	8011b18 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011afe:	f043 0208 	orr.w	r2, r3, #8
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	699a      	ldr	r2, [r3, #24]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011b16:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2200      	movs	r2, #0
 8011b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8011b28:	bf00      	nop
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr
 8011b34:	fffffc90 	.word	0xfffffc90

08011b38 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b084      	sub	sp, #16
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	603b      	str	r3, [r7, #0]
 8011b44:	4613      	mov	r3, r2
 8011b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011b48:	e010      	b.n	8011b6c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011b4a:	f7f7 f817 	bl	8008b7c <HAL_GetTick>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	1ad3      	subs	r3, r2, r3
 8011b54:	69ba      	ldr	r2, [r7, #24]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d803      	bhi.n	8011b62 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b60:	d102      	bne.n	8011b68 <SPI_WaitOnFlagUntilTimeout+0x30>
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d101      	bne.n	8011b6c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011b68:	2303      	movs	r3, #3
 8011b6a:	e00f      	b.n	8011b8c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	695a      	ldr	r2, [r3, #20]
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	4013      	ands	r3, r2
 8011b76:	68ba      	ldr	r2, [r7, #8]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	bf0c      	ite	eq
 8011b7c:	2301      	moveq	r3, #1
 8011b7e:	2300      	movne	r3, #0
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	461a      	mov	r2, r3
 8011b84:	79fb      	ldrb	r3, [r7, #7]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d0df      	beq.n	8011b4a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011b8a:	2300      	movs	r3, #0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3710      	adds	r7, #16
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b085      	sub	sp, #20
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ba0:	095b      	lsrs	r3, r3, #5
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	3301      	adds	r3, #1
 8011bac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	3307      	adds	r3, #7
 8011bb2:	08db      	lsrs	r3, r3, #3
 8011bb4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	fb02 f303 	mul.w	r3, r2, r3
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3714      	adds	r7, #20
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc8:	4770      	bx	lr

08011bca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011bca:	b580      	push	{r7, lr}
 8011bcc:	b082      	sub	sp, #8
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d101      	bne.n	8011bdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011bd8:	2301      	movs	r3, #1
 8011bda:	e049      	b.n	8011c70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d106      	bne.n	8011bf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f7f6 fb77 	bl	80082e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2202      	movs	r2, #2
 8011bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	3304      	adds	r3, #4
 8011c06:	4619      	mov	r1, r3
 8011c08:	4610      	mov	r0, r2
 8011c0a:	f000 fa7f 	bl	801210c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	2201      	movs	r2, #1
 8011c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2201      	movs	r2, #1
 8011c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2201      	movs	r2, #1
 8011c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2201      	movs	r2, #1
 8011c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2201      	movs	r2, #1
 8011c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2201      	movs	r2, #1
 8011c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2201      	movs	r2, #1
 8011c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2201      	movs	r2, #1
 8011c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2201      	movs	r2, #1
 8011c5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2201      	movs	r2, #1
 8011c62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011c6e:	2300      	movs	r3, #0
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3708      	adds	r7, #8
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	691b      	ldr	r3, [r3, #16]
 8011c86:	f003 0302 	and.w	r3, r3, #2
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	d122      	bne.n	8011cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	f003 0302 	and.w	r3, r3, #2
 8011c98:	2b02      	cmp	r3, #2
 8011c9a:	d11b      	bne.n	8011cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	f06f 0202 	mvn.w	r2, #2
 8011ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2201      	movs	r2, #1
 8011caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	f003 0303 	and.w	r3, r3, #3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d003      	beq.n	8011cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 fa08 	bl	80120d0 <HAL_TIM_IC_CaptureCallback>
 8011cc0:	e005      	b.n	8011cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f000 f9fa 	bl	80120bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f000 fa0b 	bl	80120e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	691b      	ldr	r3, [r3, #16]
 8011cda:	f003 0304 	and.w	r3, r3, #4
 8011cde:	2b04      	cmp	r3, #4
 8011ce0:	d122      	bne.n	8011d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	f003 0304 	and.w	r3, r3, #4
 8011cec:	2b04      	cmp	r3, #4
 8011cee:	d11b      	bne.n	8011d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f06f 0204 	mvn.w	r2, #4
 8011cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2202      	movs	r2, #2
 8011cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	699b      	ldr	r3, [r3, #24]
 8011d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d003      	beq.n	8011d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 f9de 	bl	80120d0 <HAL_TIM_IC_CaptureCallback>
 8011d14:	e005      	b.n	8011d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 f9d0 	bl	80120bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 f9e1 	bl	80120e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2200      	movs	r2, #0
 8011d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	691b      	ldr	r3, [r3, #16]
 8011d2e:	f003 0308 	and.w	r3, r3, #8
 8011d32:	2b08      	cmp	r3, #8
 8011d34:	d122      	bne.n	8011d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	f003 0308 	and.w	r3, r3, #8
 8011d40:	2b08      	cmp	r3, #8
 8011d42:	d11b      	bne.n	8011d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f06f 0208 	mvn.w	r2, #8
 8011d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2204      	movs	r2, #4
 8011d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	69db      	ldr	r3, [r3, #28]
 8011d5a:	f003 0303 	and.w	r3, r3, #3
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d003      	beq.n	8011d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f000 f9b4 	bl	80120d0 <HAL_TIM_IC_CaptureCallback>
 8011d68:	e005      	b.n	8011d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f000 f9a6 	bl	80120bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f000 f9b7 	bl	80120e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	691b      	ldr	r3, [r3, #16]
 8011d82:	f003 0310 	and.w	r3, r3, #16
 8011d86:	2b10      	cmp	r3, #16
 8011d88:	d122      	bne.n	8011dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	f003 0310 	and.w	r3, r3, #16
 8011d94:	2b10      	cmp	r3, #16
 8011d96:	d11b      	bne.n	8011dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f06f 0210 	mvn.w	r2, #16
 8011da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2208      	movs	r2, #8
 8011da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	69db      	ldr	r3, [r3, #28]
 8011dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d003      	beq.n	8011dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f000 f98a 	bl	80120d0 <HAL_TIM_IC_CaptureCallback>
 8011dbc:	e005      	b.n	8011dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f000 f97c 	bl	80120bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 f98d 	bl	80120e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2200      	movs	r2, #0
 8011dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	691b      	ldr	r3, [r3, #16]
 8011dd6:	f003 0301 	and.w	r3, r3, #1
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d10e      	bne.n	8011dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	f003 0301 	and.w	r3, r3, #1
 8011de8:	2b01      	cmp	r3, #1
 8011dea:	d107      	bne.n	8011dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f06f 0201 	mvn.w	r2, #1
 8011df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f000 f956 	bl	80120a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	691b      	ldr	r3, [r3, #16]
 8011e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e06:	2b80      	cmp	r3, #128	; 0x80
 8011e08:	d10e      	bne.n	8011e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e14:	2b80      	cmp	r3, #128	; 0x80
 8011e16:	d107      	bne.n	8011e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 fb42 	bl	80124ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	691b      	ldr	r3, [r3, #16]
 8011e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e36:	d10e      	bne.n	8011e56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	68db      	ldr	r3, [r3, #12]
 8011e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e42:	2b80      	cmp	r3, #128	; 0x80
 8011e44:	d107      	bne.n	8011e56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f000 fb35 	bl	80124c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	691b      	ldr	r3, [r3, #16]
 8011e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e60:	2b40      	cmp	r3, #64	; 0x40
 8011e62:	d10e      	bne.n	8011e82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e6e:	2b40      	cmp	r3, #64	; 0x40
 8011e70:	d107      	bne.n	8011e82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f000 f93b 	bl	80120f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	691b      	ldr	r3, [r3, #16]
 8011e88:	f003 0320 	and.w	r3, r3, #32
 8011e8c:	2b20      	cmp	r3, #32
 8011e8e:	d10e      	bne.n	8011eae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	68db      	ldr	r3, [r3, #12]
 8011e96:	f003 0320 	and.w	r3, r3, #32
 8011e9a:	2b20      	cmp	r3, #32
 8011e9c:	d107      	bne.n	8011eae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f06f 0220 	mvn.w	r2, #32
 8011ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 faf5 	bl	8012498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011eae:	bf00      	nop
 8011eb0:	3708      	adds	r7, #8
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
	...

08011eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d101      	bne.n	8011ed4 <HAL_TIM_ConfigClockSource+0x1c>
 8011ed0:	2302      	movs	r3, #2
 8011ed2:	e0dc      	b.n	801208e <HAL_TIM_ConfigClockSource+0x1d6>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2202      	movs	r2, #2
 8011ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011eec:	68ba      	ldr	r2, [r7, #8]
 8011eee:	4b6a      	ldr	r3, [pc, #424]	; (8012098 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011ef0:	4013      	ands	r3, r2
 8011ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011efa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	68ba      	ldr	r2, [r7, #8]
 8011f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	4a64      	ldr	r2, [pc, #400]	; (801209c <HAL_TIM_ConfigClockSource+0x1e4>)
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	f000 80a9 	beq.w	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f10:	4a62      	ldr	r2, [pc, #392]	; (801209c <HAL_TIM_ConfigClockSource+0x1e4>)
 8011f12:	4293      	cmp	r3, r2
 8011f14:	f200 80ae 	bhi.w	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f18:	4a61      	ldr	r2, [pc, #388]	; (80120a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	f000 80a1 	beq.w	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f20:	4a5f      	ldr	r2, [pc, #380]	; (80120a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	f200 80a6 	bhi.w	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f28:	4a5e      	ldr	r2, [pc, #376]	; (80120a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	f000 8099 	beq.w	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f30:	4a5c      	ldr	r2, [pc, #368]	; (80120a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	f200 809e 	bhi.w	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f3c:	f000 8091 	beq.w	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f44:	f200 8096 	bhi.w	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f4c:	f000 8089 	beq.w	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f54:	f200 808e 	bhi.w	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f5c:	d03e      	beq.n	8011fdc <HAL_TIM_ConfigClockSource+0x124>
 8011f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f62:	f200 8087 	bhi.w	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f6a:	f000 8086 	beq.w	801207a <HAL_TIM_ConfigClockSource+0x1c2>
 8011f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f72:	d87f      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f74:	2b70      	cmp	r3, #112	; 0x70
 8011f76:	d01a      	beq.n	8011fae <HAL_TIM_ConfigClockSource+0xf6>
 8011f78:	2b70      	cmp	r3, #112	; 0x70
 8011f7a:	d87b      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f7c:	2b60      	cmp	r3, #96	; 0x60
 8011f7e:	d050      	beq.n	8012022 <HAL_TIM_ConfigClockSource+0x16a>
 8011f80:	2b60      	cmp	r3, #96	; 0x60
 8011f82:	d877      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f84:	2b50      	cmp	r3, #80	; 0x50
 8011f86:	d03c      	beq.n	8012002 <HAL_TIM_ConfigClockSource+0x14a>
 8011f88:	2b50      	cmp	r3, #80	; 0x50
 8011f8a:	d873      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f8c:	2b40      	cmp	r3, #64	; 0x40
 8011f8e:	d058      	beq.n	8012042 <HAL_TIM_ConfigClockSource+0x18a>
 8011f90:	2b40      	cmp	r3, #64	; 0x40
 8011f92:	d86f      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f94:	2b30      	cmp	r3, #48	; 0x30
 8011f96:	d064      	beq.n	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011f98:	2b30      	cmp	r3, #48	; 0x30
 8011f9a:	d86b      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011f9c:	2b20      	cmp	r3, #32
 8011f9e:	d060      	beq.n	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fa0:	2b20      	cmp	r3, #32
 8011fa2:	d867      	bhi.n	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d05c      	beq.n	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fa8:	2b10      	cmp	r3, #16
 8011faa:	d05a      	beq.n	8012062 <HAL_TIM_ConfigClockSource+0x1aa>
 8011fac:	e062      	b.n	8012074 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6818      	ldr	r0, [r3, #0]
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	6899      	ldr	r1, [r3, #8]
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	685a      	ldr	r2, [r3, #4]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	68db      	ldr	r3, [r3, #12]
 8011fbe:	f000 f9bd 	bl	801233c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	689b      	ldr	r3, [r3, #8]
 8011fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	68ba      	ldr	r2, [r7, #8]
 8011fd8:	609a      	str	r2, [r3, #8]
      break;
 8011fda:	e04f      	b.n	801207c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6818      	ldr	r0, [r3, #0]
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	6899      	ldr	r1, [r3, #8]
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	685a      	ldr	r2, [r3, #4]
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	f000 f9a6 	bl	801233c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	689a      	ldr	r2, [r3, #8]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011ffe:	609a      	str	r2, [r3, #8]
      break;
 8012000:	e03c      	b.n	801207c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6818      	ldr	r0, [r3, #0]
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	6859      	ldr	r1, [r3, #4]
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	461a      	mov	r2, r3
 8012010:	f000 f916 	bl	8012240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	2150      	movs	r1, #80	; 0x50
 801201a:	4618      	mov	r0, r3
 801201c:	f000 f970 	bl	8012300 <TIM_ITRx_SetConfig>
      break;
 8012020:	e02c      	b.n	801207c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6818      	ldr	r0, [r3, #0]
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	6859      	ldr	r1, [r3, #4]
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	461a      	mov	r2, r3
 8012030:	f000 f935 	bl	801229e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2160      	movs	r1, #96	; 0x60
 801203a:	4618      	mov	r0, r3
 801203c:	f000 f960 	bl	8012300 <TIM_ITRx_SetConfig>
      break;
 8012040:	e01c      	b.n	801207c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	6818      	ldr	r0, [r3, #0]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	6859      	ldr	r1, [r3, #4]
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	461a      	mov	r2, r3
 8012050:	f000 f8f6 	bl	8012240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2140      	movs	r1, #64	; 0x40
 801205a:	4618      	mov	r0, r3
 801205c:	f000 f950 	bl	8012300 <TIM_ITRx_SetConfig>
      break;
 8012060:	e00c      	b.n	801207c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	4619      	mov	r1, r3
 801206c:	4610      	mov	r0, r2
 801206e:	f000 f947 	bl	8012300 <TIM_ITRx_SetConfig>
      break;
 8012072:	e003      	b.n	801207c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8012074:	2301      	movs	r3, #1
 8012076:	73fb      	strb	r3, [r7, #15]
      break;
 8012078:	e000      	b.n	801207c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801207a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2201      	movs	r2, #1
 8012080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2200      	movs	r2, #0
 8012088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801208c:	7bfb      	ldrb	r3, [r7, #15]
}
 801208e:	4618      	mov	r0, r3
 8012090:	3710      	adds	r7, #16
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop
 8012098:	ffceff88 	.word	0xffceff88
 801209c:	00100040 	.word	0x00100040
 80120a0:	00100030 	.word	0x00100030
 80120a4:	00100020 	.word	0x00100020

080120a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80120b0:	bf00      	nop
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80120bc:	b480      	push	{r7}
 80120be:	b083      	sub	sp, #12
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80120c4:	bf00      	nop
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr

080120d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80120d8:	bf00      	nop
 80120da:	370c      	adds	r7, #12
 80120dc:	46bd      	mov	sp, r7
 80120de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e2:	4770      	bx	lr

080120e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80120ec:	bf00      	nop
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012100:	bf00      	nop
 8012102:	370c      	adds	r7, #12
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801210c:	b480      	push	{r7}
 801210e:	b085      	sub	sp, #20
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	4a40      	ldr	r2, [pc, #256]	; (8012220 <TIM_Base_SetConfig+0x114>)
 8012120:	4293      	cmp	r3, r2
 8012122:	d013      	beq.n	801214c <TIM_Base_SetConfig+0x40>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801212a:	d00f      	beq.n	801214c <TIM_Base_SetConfig+0x40>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	4a3d      	ldr	r2, [pc, #244]	; (8012224 <TIM_Base_SetConfig+0x118>)
 8012130:	4293      	cmp	r3, r2
 8012132:	d00b      	beq.n	801214c <TIM_Base_SetConfig+0x40>
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	4a3c      	ldr	r2, [pc, #240]	; (8012228 <TIM_Base_SetConfig+0x11c>)
 8012138:	4293      	cmp	r3, r2
 801213a:	d007      	beq.n	801214c <TIM_Base_SetConfig+0x40>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4a3b      	ldr	r2, [pc, #236]	; (801222c <TIM_Base_SetConfig+0x120>)
 8012140:	4293      	cmp	r3, r2
 8012142:	d003      	beq.n	801214c <TIM_Base_SetConfig+0x40>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	4a3a      	ldr	r2, [pc, #232]	; (8012230 <TIM_Base_SetConfig+0x124>)
 8012148:	4293      	cmp	r3, r2
 801214a:	d108      	bne.n	801215e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	68fa      	ldr	r2, [r7, #12]
 801215a:	4313      	orrs	r3, r2
 801215c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	4a2f      	ldr	r2, [pc, #188]	; (8012220 <TIM_Base_SetConfig+0x114>)
 8012162:	4293      	cmp	r3, r2
 8012164:	d01f      	beq.n	80121a6 <TIM_Base_SetConfig+0x9a>
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801216c:	d01b      	beq.n	80121a6 <TIM_Base_SetConfig+0x9a>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4a2c      	ldr	r2, [pc, #176]	; (8012224 <TIM_Base_SetConfig+0x118>)
 8012172:	4293      	cmp	r3, r2
 8012174:	d017      	beq.n	80121a6 <TIM_Base_SetConfig+0x9a>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	4a2b      	ldr	r2, [pc, #172]	; (8012228 <TIM_Base_SetConfig+0x11c>)
 801217a:	4293      	cmp	r3, r2
 801217c:	d013      	beq.n	80121a6 <TIM_Base_SetConfig+0x9a>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	4a2a      	ldr	r2, [pc, #168]	; (801222c <TIM_Base_SetConfig+0x120>)
 8012182:	4293      	cmp	r3, r2
 8012184:	d00f      	beq.n	80121a6 <TIM_Base_SetConfig+0x9a>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	4a29      	ldr	r2, [pc, #164]	; (8012230 <TIM_Base_SetConfig+0x124>)
 801218a:	4293      	cmp	r3, r2
 801218c:	d00b      	beq.n	80121a6 <TIM_Base_SetConfig+0x9a>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	4a28      	ldr	r2, [pc, #160]	; (8012234 <TIM_Base_SetConfig+0x128>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d007      	beq.n	80121a6 <TIM_Base_SetConfig+0x9a>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	4a27      	ldr	r2, [pc, #156]	; (8012238 <TIM_Base_SetConfig+0x12c>)
 801219a:	4293      	cmp	r3, r2
 801219c:	d003      	beq.n	80121a6 <TIM_Base_SetConfig+0x9a>
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	4a26      	ldr	r2, [pc, #152]	; (801223c <TIM_Base_SetConfig+0x130>)
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d108      	bne.n	80121b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80121ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	68db      	ldr	r3, [r3, #12]
 80121b2:	68fa      	ldr	r2, [r7, #12]
 80121b4:	4313      	orrs	r3, r2
 80121b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	695b      	ldr	r3, [r3, #20]
 80121c2:	4313      	orrs	r3, r2
 80121c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	68fa      	ldr	r2, [r7, #12]
 80121ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	689a      	ldr	r2, [r3, #8]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	681a      	ldr	r2, [r3, #0]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	4a10      	ldr	r2, [pc, #64]	; (8012220 <TIM_Base_SetConfig+0x114>)
 80121e0:	4293      	cmp	r3, r2
 80121e2:	d00f      	beq.n	8012204 <TIM_Base_SetConfig+0xf8>
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	4a12      	ldr	r2, [pc, #72]	; (8012230 <TIM_Base_SetConfig+0x124>)
 80121e8:	4293      	cmp	r3, r2
 80121ea:	d00b      	beq.n	8012204 <TIM_Base_SetConfig+0xf8>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	4a11      	ldr	r2, [pc, #68]	; (8012234 <TIM_Base_SetConfig+0x128>)
 80121f0:	4293      	cmp	r3, r2
 80121f2:	d007      	beq.n	8012204 <TIM_Base_SetConfig+0xf8>
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	4a10      	ldr	r2, [pc, #64]	; (8012238 <TIM_Base_SetConfig+0x12c>)
 80121f8:	4293      	cmp	r3, r2
 80121fa:	d003      	beq.n	8012204 <TIM_Base_SetConfig+0xf8>
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	4a0f      	ldr	r2, [pc, #60]	; (801223c <TIM_Base_SetConfig+0x130>)
 8012200:	4293      	cmp	r3, r2
 8012202:	d103      	bne.n	801220c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	691a      	ldr	r2, [r3, #16]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	2201      	movs	r2, #1
 8012210:	615a      	str	r2, [r3, #20]
}
 8012212:	bf00      	nop
 8012214:	3714      	adds	r7, #20
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	40010000 	.word	0x40010000
 8012224:	40000400 	.word	0x40000400
 8012228:	40000800 	.word	0x40000800
 801222c:	40000c00 	.word	0x40000c00
 8012230:	40010400 	.word	0x40010400
 8012234:	40014000 	.word	0x40014000
 8012238:	40014400 	.word	0x40014400
 801223c:	40014800 	.word	0x40014800

08012240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012240:	b480      	push	{r7}
 8012242:	b087      	sub	sp, #28
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	6a1b      	ldr	r3, [r3, #32]
 8012250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	6a1b      	ldr	r3, [r3, #32]
 8012256:	f023 0201 	bic.w	r2, r3, #1
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	699b      	ldr	r3, [r3, #24]
 8012262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801226a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	011b      	lsls	r3, r3, #4
 8012270:	693a      	ldr	r2, [r7, #16]
 8012272:	4313      	orrs	r3, r2
 8012274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	f023 030a 	bic.w	r3, r3, #10
 801227c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801227e:	697a      	ldr	r2, [r7, #20]
 8012280:	68bb      	ldr	r3, [r7, #8]
 8012282:	4313      	orrs	r3, r2
 8012284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	693a      	ldr	r2, [r7, #16]
 801228a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	697a      	ldr	r2, [r7, #20]
 8012290:	621a      	str	r2, [r3, #32]
}
 8012292:	bf00      	nop
 8012294:	371c      	adds	r7, #28
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr

0801229e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801229e:	b480      	push	{r7}
 80122a0:	b087      	sub	sp, #28
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	60f8      	str	r0, [r7, #12]
 80122a6:	60b9      	str	r1, [r7, #8]
 80122a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	6a1b      	ldr	r3, [r3, #32]
 80122ae:	f023 0210 	bic.w	r2, r3, #16
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	699b      	ldr	r3, [r3, #24]
 80122ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	6a1b      	ldr	r3, [r3, #32]
 80122c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80122c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	031b      	lsls	r3, r3, #12
 80122ce:	697a      	ldr	r2, [r7, #20]
 80122d0:	4313      	orrs	r3, r2
 80122d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80122da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	011b      	lsls	r3, r3, #4
 80122e0:	693a      	ldr	r2, [r7, #16]
 80122e2:	4313      	orrs	r3, r2
 80122e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	697a      	ldr	r2, [r7, #20]
 80122ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	693a      	ldr	r2, [r7, #16]
 80122f0:	621a      	str	r2, [r3, #32]
}
 80122f2:	bf00      	nop
 80122f4:	371c      	adds	r7, #28
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
	...

08012300 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012300:	b480      	push	{r7}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	689b      	ldr	r3, [r3, #8]
 801230e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012310:	68fa      	ldr	r2, [r7, #12]
 8012312:	4b09      	ldr	r3, [pc, #36]	; (8012338 <TIM_ITRx_SetConfig+0x38>)
 8012314:	4013      	ands	r3, r2
 8012316:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012318:	683a      	ldr	r2, [r7, #0]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	4313      	orrs	r3, r2
 801231e:	f043 0307 	orr.w	r3, r3, #7
 8012322:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	68fa      	ldr	r2, [r7, #12]
 8012328:	609a      	str	r2, [r3, #8]
}
 801232a:	bf00      	nop
 801232c:	3714      	adds	r7, #20
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr
 8012336:	bf00      	nop
 8012338:	ffcfff8f 	.word	0xffcfff8f

0801233c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801233c:	b480      	push	{r7}
 801233e:	b087      	sub	sp, #28
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	607a      	str	r2, [r7, #4]
 8012348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	689b      	ldr	r3, [r3, #8]
 801234e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	021a      	lsls	r2, r3, #8
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	431a      	orrs	r2, r3
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	4313      	orrs	r3, r2
 8012364:	697a      	ldr	r2, [r7, #20]
 8012366:	4313      	orrs	r3, r2
 8012368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	697a      	ldr	r2, [r7, #20]
 801236e:	609a      	str	r2, [r3, #8]
}
 8012370:	bf00      	nop
 8012372:	371c      	adds	r7, #28
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801237c:	b480      	push	{r7}
 801237e:	b085      	sub	sp, #20
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801238c:	2b01      	cmp	r3, #1
 801238e:	d101      	bne.n	8012394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012390:	2302      	movs	r3, #2
 8012392:	e06d      	b.n	8012470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2201      	movs	r2, #1
 8012398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2202      	movs	r2, #2
 80123a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	689b      	ldr	r3, [r3, #8]
 80123b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	4a30      	ldr	r2, [pc, #192]	; (801247c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80123ba:	4293      	cmp	r3, r2
 80123bc:	d004      	beq.n	80123c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	4a2f      	ldr	r2, [pc, #188]	; (8012480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80123c4:	4293      	cmp	r3, r2
 80123c6:	d108      	bne.n	80123da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80123ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	68fa      	ldr	r2, [r7, #12]
 80123d6:	4313      	orrs	r3, r2
 80123d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	4313      	orrs	r3, r2
 80123ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	68fa      	ldr	r2, [r7, #12]
 80123f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	4a20      	ldr	r2, [pc, #128]	; (801247c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80123fa:	4293      	cmp	r3, r2
 80123fc:	d022      	beq.n	8012444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012406:	d01d      	beq.n	8012444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	4a1d      	ldr	r2, [pc, #116]	; (8012484 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801240e:	4293      	cmp	r3, r2
 8012410:	d018      	beq.n	8012444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	4a1c      	ldr	r2, [pc, #112]	; (8012488 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012418:	4293      	cmp	r3, r2
 801241a:	d013      	beq.n	8012444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	4a1a      	ldr	r2, [pc, #104]	; (801248c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8012422:	4293      	cmp	r3, r2
 8012424:	d00e      	beq.n	8012444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4a15      	ldr	r2, [pc, #84]	; (8012480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801242c:	4293      	cmp	r3, r2
 801242e:	d009      	beq.n	8012444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	4a16      	ldr	r2, [pc, #88]	; (8012490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012436:	4293      	cmp	r3, r2
 8012438:	d004      	beq.n	8012444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	4a15      	ldr	r2, [pc, #84]	; (8012494 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d10c      	bne.n	801245e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801244a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	689b      	ldr	r3, [r3, #8]
 8012450:	68ba      	ldr	r2, [r7, #8]
 8012452:	4313      	orrs	r3, r2
 8012454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	68ba      	ldr	r2, [r7, #8]
 801245c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2201      	movs	r2, #1
 8012462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2200      	movs	r2, #0
 801246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801246e:	2300      	movs	r3, #0
}
 8012470:	4618      	mov	r0, r3
 8012472:	3714      	adds	r7, #20
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr
 801247c:	40010000 	.word	0x40010000
 8012480:	40010400 	.word	0x40010400
 8012484:	40000400 	.word	0x40000400
 8012488:	40000800 	.word	0x40000800
 801248c:	40000c00 	.word	0x40000c00
 8012490:	40001800 	.word	0x40001800
 8012494:	40014000 	.word	0x40014000

08012498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80124a0:	bf00      	nop
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80124b4:	bf00      	nop
 80124b6:	370c      	adds	r7, #12
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr

080124c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80124c0:	b480      	push	{r7}
 80124c2:	b083      	sub	sp, #12
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80124c8:	bf00      	nop
 80124ca:	370c      	adds	r7, #12
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d101      	bne.n	80124e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80124e2:	2301      	movs	r3, #1
 80124e4:	e042      	b.n	801256c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d106      	bne.n	80124fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2200      	movs	r2, #0
 80124f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7f6 f8eb 	bl	80086d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2224      	movs	r2, #36	; 0x24
 8012502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f022 0201 	bic.w	r2, r2, #1
 8012514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 fce0 	bl	8012edc <UART_SetConfig>
 801251c:	4603      	mov	r3, r0
 801251e:	2b01      	cmp	r3, #1
 8012520:	d101      	bne.n	8012526 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012522:	2301      	movs	r3, #1
 8012524:	e022      	b.n	801256c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801252a:	2b00      	cmp	r3, #0
 801252c:	d002      	beq.n	8012534 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f001 fa3c 	bl	80139ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	685a      	ldr	r2, [r3, #4]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	689a      	ldr	r2, [r3, #8]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	681a      	ldr	r2, [r3, #0]
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f042 0201 	orr.w	r2, r2, #1
 8012562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f001 fac3 	bl	8013af0 <UART_CheckIdleState>
 801256a:	4603      	mov	r3, r0
}
 801256c:	4618      	mov	r0, r3
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b08a      	sub	sp, #40	; 0x28
 8012578:	af02      	add	r7, sp, #8
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	603b      	str	r3, [r7, #0]
 8012580:	4613      	mov	r3, r2
 8012582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801258a:	2b20      	cmp	r3, #32
 801258c:	f040 8083 	bne.w	8012696 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d002      	beq.n	801259c <HAL_UART_Transmit+0x28>
 8012596:	88fb      	ldrh	r3, [r7, #6]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d101      	bne.n	80125a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801259c:	2301      	movs	r3, #1
 801259e:	e07b      	b.n	8012698 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80125a6:	2b01      	cmp	r3, #1
 80125a8:	d101      	bne.n	80125ae <HAL_UART_Transmit+0x3a>
 80125aa:	2302      	movs	r3, #2
 80125ac:	e074      	b.n	8012698 <HAL_UART_Transmit+0x124>
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2201      	movs	r2, #1
 80125b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	2200      	movs	r2, #0
 80125ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2221      	movs	r2, #33	; 0x21
 80125c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80125c6:	f7f6 fad9 	bl	8008b7c <HAL_GetTick>
 80125ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	88fa      	ldrh	r2, [r7, #6]
 80125d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	88fa      	ldrh	r2, [r7, #6]
 80125d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125e4:	d108      	bne.n	80125f8 <HAL_UART_Transmit+0x84>
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	691b      	ldr	r3, [r3, #16]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d104      	bne.n	80125f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80125ee:	2300      	movs	r3, #0
 80125f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	61bb      	str	r3, [r7, #24]
 80125f6:	e003      	b.n	8012600 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80125f8:	68bb      	ldr	r3, [r7, #8]
 80125fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80125fc:	2300      	movs	r3, #0
 80125fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2200      	movs	r2, #0
 8012604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8012608:	e02c      	b.n	8012664 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	2200      	movs	r2, #0
 8012612:	2180      	movs	r1, #128	; 0x80
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f001 fab6 	bl	8013b86 <UART_WaitOnFlagUntilTimeout>
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d001      	beq.n	8012624 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8012620:	2303      	movs	r3, #3
 8012622:	e039      	b.n	8012698 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8012624:	69fb      	ldr	r3, [r7, #28]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d10b      	bne.n	8012642 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	881b      	ldrh	r3, [r3, #0]
 801262e:	461a      	mov	r2, r3
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012638:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	3302      	adds	r3, #2
 801263e:	61bb      	str	r3, [r7, #24]
 8012640:	e007      	b.n	8012652 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012642:	69fb      	ldr	r3, [r7, #28]
 8012644:	781a      	ldrb	r2, [r3, #0]
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	3301      	adds	r3, #1
 8012650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012658:	b29b      	uxth	r3, r3
 801265a:	3b01      	subs	r3, #1
 801265c:	b29a      	uxth	r2, r3
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801266a:	b29b      	uxth	r3, r3
 801266c:	2b00      	cmp	r3, #0
 801266e:	d1cc      	bne.n	801260a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012670:	683b      	ldr	r3, [r7, #0]
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	2200      	movs	r2, #0
 8012678:	2140      	movs	r1, #64	; 0x40
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f001 fa83 	bl	8013b86 <UART_WaitOnFlagUntilTimeout>
 8012680:	4603      	mov	r3, r0
 8012682:	2b00      	cmp	r3, #0
 8012684:	d001      	beq.n	801268a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8012686:	2303      	movs	r3, #3
 8012688:	e006      	b.n	8012698 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2220      	movs	r2, #32
 801268e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8012692:	2300      	movs	r3, #0
 8012694:	e000      	b.n	8012698 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8012696:	2302      	movs	r3, #2
  }
}
 8012698:	4618      	mov	r0, r3
 801269a:	3720      	adds	r7, #32
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b08a      	sub	sp, #40	; 0x28
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	4613      	mov	r3, r2
 80126ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126b4:	2b20      	cmp	r3, #32
 80126b6:	d142      	bne.n	801273e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d002      	beq.n	80126c4 <HAL_UART_Receive_IT+0x24>
 80126be:	88fb      	ldrh	r3, [r7, #6]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d101      	bne.n	80126c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80126c4:	2301      	movs	r3, #1
 80126c6:	e03b      	b.n	8012740 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d101      	bne.n	80126d6 <HAL_UART_Receive_IT+0x36>
 80126d2:	2302      	movs	r3, #2
 80126d4:	e034      	b.n	8012740 <HAL_UART_Receive_IT+0xa0>
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2201      	movs	r2, #1
 80126da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2200      	movs	r2, #0
 80126e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4a17      	ldr	r2, [pc, #92]	; (8012748 <HAL_UART_Receive_IT+0xa8>)
 80126ea:	4293      	cmp	r3, r2
 80126ec:	d01f      	beq.n	801272e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d018      	beq.n	801272e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	e853 3f00 	ldrex	r3, [r3]
 8012708:	613b      	str	r3, [r7, #16]
   return(result);
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012710:	627b      	str	r3, [r7, #36]	; 0x24
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	461a      	mov	r2, r3
 8012718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271a:	623b      	str	r3, [r7, #32]
 801271c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801271e:	69f9      	ldr	r1, [r7, #28]
 8012720:	6a3a      	ldr	r2, [r7, #32]
 8012722:	e841 2300 	strex	r3, r2, [r1]
 8012726:	61bb      	str	r3, [r7, #24]
   return(result);
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d1e6      	bne.n	80126fc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801272e:	88fb      	ldrh	r3, [r7, #6]
 8012730:	461a      	mov	r2, r3
 8012732:	68b9      	ldr	r1, [r7, #8]
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f001 faef 	bl	8013d18 <UART_Start_Receive_IT>
 801273a:	4603      	mov	r3, r0
 801273c:	e000      	b.n	8012740 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801273e:	2302      	movs	r3, #2
  }
}
 8012740:	4618      	mov	r0, r3
 8012742:	3728      	adds	r7, #40	; 0x28
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	58000c00 	.word	0x58000c00

0801274c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b0ba      	sub	sp, #232	; 0xe8
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	69db      	ldr	r3, [r3, #28]
 801275a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	689b      	ldr	r3, [r3, #8]
 801276e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012772:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012776:	f640 030f 	movw	r3, #2063	; 0x80f
 801277a:	4013      	ands	r3, r2
 801277c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012784:	2b00      	cmp	r3, #0
 8012786:	d11b      	bne.n	80127c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801278c:	f003 0320 	and.w	r3, r3, #32
 8012790:	2b00      	cmp	r3, #0
 8012792:	d015      	beq.n	80127c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012798:	f003 0320 	and.w	r3, r3, #32
 801279c:	2b00      	cmp	r3, #0
 801279e:	d105      	bne.n	80127ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80127a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80127a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d009      	beq.n	80127c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f000 835a 	beq.w	8012e6a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	4798      	blx	r3
      }
      return;
 80127be:	e354      	b.n	8012e6a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80127c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	f000 811f 	beq.w	8012a08 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80127ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80127ce:	4b8b      	ldr	r3, [pc, #556]	; (80129fc <HAL_UART_IRQHandler+0x2b0>)
 80127d0:	4013      	ands	r3, r2
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d106      	bne.n	80127e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80127d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80127da:	4b89      	ldr	r3, [pc, #548]	; (8012a00 <HAL_UART_IRQHandler+0x2b4>)
 80127dc:	4013      	ands	r3, r2
 80127de:	2b00      	cmp	r3, #0
 80127e0:	f000 8112 	beq.w	8012a08 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80127e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127e8:	f003 0301 	and.w	r3, r3, #1
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d011      	beq.n	8012814 <HAL_UART_IRQHandler+0xc8>
 80127f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d00b      	beq.n	8012814 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2201      	movs	r2, #1
 8012802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801280a:	f043 0201 	orr.w	r2, r3, #1
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012818:	f003 0302 	and.w	r3, r3, #2
 801281c:	2b00      	cmp	r3, #0
 801281e:	d011      	beq.n	8012844 <HAL_UART_IRQHandler+0xf8>
 8012820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012824:	f003 0301 	and.w	r3, r3, #1
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00b      	beq.n	8012844 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2202      	movs	r2, #2
 8012832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801283a:	f043 0204 	orr.w	r2, r3, #4
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012848:	f003 0304 	and.w	r3, r3, #4
 801284c:	2b00      	cmp	r3, #0
 801284e:	d011      	beq.n	8012874 <HAL_UART_IRQHandler+0x128>
 8012850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012854:	f003 0301 	and.w	r3, r3, #1
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00b      	beq.n	8012874 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2204      	movs	r2, #4
 8012862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801286a:	f043 0202 	orr.w	r2, r3, #2
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012878:	f003 0308 	and.w	r3, r3, #8
 801287c:	2b00      	cmp	r3, #0
 801287e:	d017      	beq.n	80128b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012884:	f003 0320 	and.w	r3, r3, #32
 8012888:	2b00      	cmp	r3, #0
 801288a:	d105      	bne.n	8012898 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801288c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012890:	4b5a      	ldr	r3, [pc, #360]	; (80129fc <HAL_UART_IRQHandler+0x2b0>)
 8012892:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00b      	beq.n	80128b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	2208      	movs	r2, #8
 801289e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80128a6:	f043 0208 	orr.w	r2, r3, #8
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80128b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80128b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d012      	beq.n	80128e2 <HAL_UART_IRQHandler+0x196>
 80128bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80128c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d00c      	beq.n	80128e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80128d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80128d8:	f043 0220 	orr.w	r2, r3, #32
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	f000 82c0 	beq.w	8012e6e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80128ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80128f2:	f003 0320 	and.w	r3, r3, #32
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d013      	beq.n	8012922 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80128fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80128fe:	f003 0320 	and.w	r3, r3, #32
 8012902:	2b00      	cmp	r3, #0
 8012904:	d105      	bne.n	8012912 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801290e:	2b00      	cmp	r3, #0
 8012910:	d007      	beq.n	8012922 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012916:	2b00      	cmp	r3, #0
 8012918:	d003      	beq.n	8012922 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	689b      	ldr	r3, [r3, #8]
 8012932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012936:	2b40      	cmp	r3, #64	; 0x40
 8012938:	d005      	beq.n	8012946 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801293a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801293e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012942:	2b00      	cmp	r3, #0
 8012944:	d04f      	beq.n	80129e6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f001 fb10 	bl	8013f6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	689b      	ldr	r3, [r3, #8]
 8012952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012956:	2b40      	cmp	r3, #64	; 0x40
 8012958:	d141      	bne.n	80129de <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	3308      	adds	r3, #8
 8012960:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012964:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012968:	e853 3f00 	ldrex	r3, [r3]
 801296c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012970:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	3308      	adds	r3, #8
 8012982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012986:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801298a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801298e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012996:	e841 2300 	strex	r3, r2, [r1]
 801299a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801299e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d1d9      	bne.n	801295a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d013      	beq.n	80129d6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129b2:	4a14      	ldr	r2, [pc, #80]	; (8012a04 <HAL_UART_IRQHandler+0x2b8>)
 80129b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7f7 fbb8 	bl	800a130 <HAL_DMA_Abort_IT>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d017      	beq.n	80129f6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129cc:	687a      	ldr	r2, [r7, #4]
 80129ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80129d0:	4610      	mov	r0, r2
 80129d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129d4:	e00f      	b.n	80129f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f000 fa6a 	bl	8012eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129dc:	e00b      	b.n	80129f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f000 fa66 	bl	8012eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129e4:	e007      	b.n	80129f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f000 fa62 	bl	8012eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80129f4:	e23b      	b.n	8012e6e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80129f6:	bf00      	nop
    return;
 80129f8:	e239      	b.n	8012e6e <HAL_UART_IRQHandler+0x722>
 80129fa:	bf00      	nop
 80129fc:	10000001 	.word	0x10000001
 8012a00:	04000120 	.word	0x04000120
 8012a04:	08014039 	.word	0x08014039

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	f040 81ce 	bne.w	8012dae <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a16:	f003 0310 	and.w	r3, r3, #16
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	f000 81c7 	beq.w	8012dae <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a24:	f003 0310 	and.w	r3, r3, #16
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 81c0 	beq.w	8012dae <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	2210      	movs	r2, #16
 8012a34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	689b      	ldr	r3, [r3, #8]
 8012a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a40:	2b40      	cmp	r3, #64	; 0x40
 8012a42:	f040 813b 	bne.w	8012cbc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	4a8b      	ldr	r2, [pc, #556]	; (8012c7c <HAL_UART_IRQHandler+0x530>)
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	d059      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	4a89      	ldr	r2, [pc, #548]	; (8012c80 <HAL_UART_IRQHandler+0x534>)
 8012a5a:	4293      	cmp	r3, r2
 8012a5c:	d053      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a87      	ldr	r2, [pc, #540]	; (8012c84 <HAL_UART_IRQHandler+0x538>)
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d04d      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a85      	ldr	r2, [pc, #532]	; (8012c88 <HAL_UART_IRQHandler+0x53c>)
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d047      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4a83      	ldr	r2, [pc, #524]	; (8012c8c <HAL_UART_IRQHandler+0x540>)
 8012a7e:	4293      	cmp	r3, r2
 8012a80:	d041      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4a81      	ldr	r2, [pc, #516]	; (8012c90 <HAL_UART_IRQHandler+0x544>)
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d03b      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	4a7f      	ldr	r2, [pc, #508]	; (8012c94 <HAL_UART_IRQHandler+0x548>)
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d035      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	4a7d      	ldr	r2, [pc, #500]	; (8012c98 <HAL_UART_IRQHandler+0x54c>)
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	d02f      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	4a7b      	ldr	r2, [pc, #492]	; (8012c9c <HAL_UART_IRQHandler+0x550>)
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d029      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	4a79      	ldr	r2, [pc, #484]	; (8012ca0 <HAL_UART_IRQHandler+0x554>)
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d023      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a77      	ldr	r2, [pc, #476]	; (8012ca4 <HAL_UART_IRQHandler+0x558>)
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d01d      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	4a75      	ldr	r2, [pc, #468]	; (8012ca8 <HAL_UART_IRQHandler+0x55c>)
 8012ad2:	4293      	cmp	r3, r2
 8012ad4:	d017      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4a73      	ldr	r2, [pc, #460]	; (8012cac <HAL_UART_IRQHandler+0x560>)
 8012ade:	4293      	cmp	r3, r2
 8012ae0:	d011      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	4a71      	ldr	r2, [pc, #452]	; (8012cb0 <HAL_UART_IRQHandler+0x564>)
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d00b      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	4a6f      	ldr	r2, [pc, #444]	; (8012cb4 <HAL_UART_IRQHandler+0x568>)
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d005      	beq.n	8012b06 <HAL_UART_IRQHandler+0x3ba>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4a6d      	ldr	r2, [pc, #436]	; (8012cb8 <HAL_UART_IRQHandler+0x56c>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d105      	bne.n	8012b12 <HAL_UART_IRQHandler+0x3c6>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	b29b      	uxth	r3, r3
 8012b10:	e004      	b.n	8012b1c <HAL_UART_IRQHandler+0x3d0>
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012b20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	f000 81a4 	beq.w	8012e72 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012b34:	429a      	cmp	r2, r3
 8012b36:	f080 819c 	bcs.w	8012e72 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012b40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b48:	69db      	ldr	r3, [r3, #28]
 8012b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b4e:	f000 8086 	beq.w	8012c5e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012b5e:	e853 3f00 	ldrex	r3, [r3]
 8012b62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	461a      	mov	r2, r3
 8012b78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012b80:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012b88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012b8c:	e841 2300 	strex	r3, r2, [r1]
 8012b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d1da      	bne.n	8012b52 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	3308      	adds	r3, #8
 8012ba2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ba6:	e853 3f00 	ldrex	r3, [r3]
 8012baa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012bae:	f023 0301 	bic.w	r3, r3, #1
 8012bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	3308      	adds	r3, #8
 8012bbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012bc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012bc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012bcc:	e841 2300 	strex	r3, r2, [r1]
 8012bd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d1e1      	bne.n	8012b9c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	3308      	adds	r3, #8
 8012bde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012be2:	e853 3f00 	ldrex	r3, [r3]
 8012be6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	3308      	adds	r3, #8
 8012bf8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012bfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012bfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012c02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012c04:	e841 2300 	strex	r3, r2, [r1]
 8012c08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d1e3      	bne.n	8012bd8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2220      	movs	r2, #32
 8012c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c26:	e853 3f00 	ldrex	r3, [r3]
 8012c2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c2e:	f023 0310 	bic.w	r3, r3, #16
 8012c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012c40:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012c46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c48:	e841 2300 	strex	r3, r2, [r1]
 8012c4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d1e4      	bne.n	8012c1e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7f6 ff4b 	bl	8009af4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	1ad3      	subs	r3, r2, r3
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	4619      	mov	r1, r3
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f000 f926 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012c78:	e0fb      	b.n	8012e72 <HAL_UART_IRQHandler+0x726>
 8012c7a:	bf00      	nop
 8012c7c:	40020010 	.word	0x40020010
 8012c80:	40020028 	.word	0x40020028
 8012c84:	40020040 	.word	0x40020040
 8012c88:	40020058 	.word	0x40020058
 8012c8c:	40020070 	.word	0x40020070
 8012c90:	40020088 	.word	0x40020088
 8012c94:	400200a0 	.word	0x400200a0
 8012c98:	400200b8 	.word	0x400200b8
 8012c9c:	40020410 	.word	0x40020410
 8012ca0:	40020428 	.word	0x40020428
 8012ca4:	40020440 	.word	0x40020440
 8012ca8:	40020458 	.word	0x40020458
 8012cac:	40020470 	.word	0x40020470
 8012cb0:	40020488 	.word	0x40020488
 8012cb4:	400204a0 	.word	0x400204a0
 8012cb8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	1ad3      	subs	r3, r2, r3
 8012ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	f000 80cc 	beq.w	8012e76 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8012cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f000 80c7 	beq.w	8012e76 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf0:	e853 3f00 	ldrex	r3, [r3]
 8012cf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	461a      	mov	r2, r3
 8012d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8012d0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d12:	e841 2300 	strex	r3, r2, [r1]
 8012d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d1e4      	bne.n	8012ce8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	3308      	adds	r3, #8
 8012d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d28:	e853 3f00 	ldrex	r3, [r3]
 8012d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8012d2e:	6a3a      	ldr	r2, [r7, #32]
 8012d30:	4b54      	ldr	r3, [pc, #336]	; (8012e84 <HAL_UART_IRQHandler+0x738>)
 8012d32:	4013      	ands	r3, r2
 8012d34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	3308      	adds	r3, #8
 8012d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012d42:	633a      	str	r2, [r7, #48]	; 0x30
 8012d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d4a:	e841 2300 	strex	r3, r2, [r1]
 8012d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d1e3      	bne.n	8012d1e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2220      	movs	r2, #32
 8012d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2200      	movs	r2, #0
 8012d62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2200      	movs	r2, #0
 8012d68:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	e853 3f00 	ldrex	r3, [r3]
 8012d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	f023 0310 	bic.w	r3, r3, #16
 8012d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	461a      	mov	r2, r3
 8012d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012d8c:	61fb      	str	r3, [r7, #28]
 8012d8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d90:	69b9      	ldr	r1, [r7, #24]
 8012d92:	69fa      	ldr	r2, [r7, #28]
 8012d94:	e841 2300 	strex	r3, r2, [r1]
 8012d98:	617b      	str	r3, [r7, #20]
   return(result);
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d1e4      	bne.n	8012d6a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012da4:	4619      	mov	r1, r3
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f000 f88c 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012dac:	e063      	b.n	8012e76 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d00e      	beq.n	8012dd8 <HAL_UART_IRQHandler+0x68c>
 8012dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d008      	beq.n	8012dd8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012dce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f001 fdcf 	bl	8014974 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012dd6:	e051      	b.n	8012e7c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d014      	beq.n	8012e0e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d105      	bne.n	8012dfc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d008      	beq.n	8012e0e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d03a      	beq.n	8012e7a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	4798      	blx	r3
    }
    return;
 8012e0c:	e035      	b.n	8012e7a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d009      	beq.n	8012e2e <HAL_UART_IRQHandler+0x6e2>
 8012e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d003      	beq.n	8012e2e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f001 f91c 	bl	8014064 <UART_EndTransmit_IT>
    return;
 8012e2c:	e026      	b.n	8012e7c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d009      	beq.n	8012e4e <HAL_UART_IRQHandler+0x702>
 8012e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d003      	beq.n	8012e4e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f001 fda8 	bl	801499c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012e4c:	e016      	b.n	8012e7c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d010      	beq.n	8012e7c <HAL_UART_IRQHandler+0x730>
 8012e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	da0c      	bge.n	8012e7c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f001 fd90 	bl	8014988 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012e68:	e008      	b.n	8012e7c <HAL_UART_IRQHandler+0x730>
      return;
 8012e6a:	bf00      	nop
 8012e6c:	e006      	b.n	8012e7c <HAL_UART_IRQHandler+0x730>
    return;
 8012e6e:	bf00      	nop
 8012e70:	e004      	b.n	8012e7c <HAL_UART_IRQHandler+0x730>
      return;
 8012e72:	bf00      	nop
 8012e74:	e002      	b.n	8012e7c <HAL_UART_IRQHandler+0x730>
      return;
 8012e76:	bf00      	nop
 8012e78:	e000      	b.n	8012e7c <HAL_UART_IRQHandler+0x730>
    return;
 8012e7a:	bf00      	nop
  }
}
 8012e7c:	37e8      	adds	r7, #232	; 0xe8
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	effffffe 	.word	0xeffffffe

08012e88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b083      	sub	sp, #12
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012e90:	bf00      	nop
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr

08012e9c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8012ea4:	bf00      	nop
 8012ea6:	370c      	adds	r7, #12
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eae:	4770      	bx	lr

08012eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b083      	sub	sp, #12
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012eb8:	bf00      	nop
 8012eba:	370c      	adds	r7, #12
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	460b      	mov	r3, r1
 8012ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012ed0:	bf00      	nop
 8012ed2:	370c      	adds	r7, #12
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ee0:	b092      	sub	sp, #72	; 0x48
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	689a      	ldr	r2, [r3, #8]
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	431a      	orrs	r2, r3
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	695b      	ldr	r3, [r3, #20]
 8012efa:	431a      	orrs	r2, r3
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	69db      	ldr	r3, [r3, #28]
 8012f00:	4313      	orrs	r3, r2
 8012f02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	681a      	ldr	r2, [r3, #0]
 8012f0a:	4bbe      	ldr	r3, [pc, #760]	; (8013204 <UART_SetConfig+0x328>)
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	697a      	ldr	r2, [r7, #20]
 8012f10:	6812      	ldr	r2, [r2, #0]
 8012f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012f14:	430b      	orrs	r3, r1
 8012f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	68da      	ldr	r2, [r3, #12]
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	430a      	orrs	r2, r1
 8012f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	699b      	ldr	r3, [r3, #24]
 8012f32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4ab3      	ldr	r2, [pc, #716]	; (8013208 <UART_SetConfig+0x32c>)
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d004      	beq.n	8012f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	6a1b      	ldr	r3, [r3, #32]
 8012f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f44:	4313      	orrs	r3, r2
 8012f46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	689a      	ldr	r2, [r3, #8]
 8012f4e:	4baf      	ldr	r3, [pc, #700]	; (801320c <UART_SetConfig+0x330>)
 8012f50:	4013      	ands	r3, r2
 8012f52:	697a      	ldr	r2, [r7, #20]
 8012f54:	6812      	ldr	r2, [r2, #0]
 8012f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012f58:	430b      	orrs	r3, r1
 8012f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f62:	f023 010f 	bic.w	r1, r3, #15
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	430a      	orrs	r2, r1
 8012f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4aa6      	ldr	r2, [pc, #664]	; (8013210 <UART_SetConfig+0x334>)
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	d177      	bne.n	801306c <UART_SetConfig+0x190>
 8012f7c:	4ba5      	ldr	r3, [pc, #660]	; (8013214 <UART_SetConfig+0x338>)
 8012f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012f84:	2b28      	cmp	r3, #40	; 0x28
 8012f86:	d86d      	bhi.n	8013064 <UART_SetConfig+0x188>
 8012f88:	a201      	add	r2, pc, #4	; (adr r2, 8012f90 <UART_SetConfig+0xb4>)
 8012f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f8e:	bf00      	nop
 8012f90:	08013035 	.word	0x08013035
 8012f94:	08013065 	.word	0x08013065
 8012f98:	08013065 	.word	0x08013065
 8012f9c:	08013065 	.word	0x08013065
 8012fa0:	08013065 	.word	0x08013065
 8012fa4:	08013065 	.word	0x08013065
 8012fa8:	08013065 	.word	0x08013065
 8012fac:	08013065 	.word	0x08013065
 8012fb0:	0801303d 	.word	0x0801303d
 8012fb4:	08013065 	.word	0x08013065
 8012fb8:	08013065 	.word	0x08013065
 8012fbc:	08013065 	.word	0x08013065
 8012fc0:	08013065 	.word	0x08013065
 8012fc4:	08013065 	.word	0x08013065
 8012fc8:	08013065 	.word	0x08013065
 8012fcc:	08013065 	.word	0x08013065
 8012fd0:	08013045 	.word	0x08013045
 8012fd4:	08013065 	.word	0x08013065
 8012fd8:	08013065 	.word	0x08013065
 8012fdc:	08013065 	.word	0x08013065
 8012fe0:	08013065 	.word	0x08013065
 8012fe4:	08013065 	.word	0x08013065
 8012fe8:	08013065 	.word	0x08013065
 8012fec:	08013065 	.word	0x08013065
 8012ff0:	0801304d 	.word	0x0801304d
 8012ff4:	08013065 	.word	0x08013065
 8012ff8:	08013065 	.word	0x08013065
 8012ffc:	08013065 	.word	0x08013065
 8013000:	08013065 	.word	0x08013065
 8013004:	08013065 	.word	0x08013065
 8013008:	08013065 	.word	0x08013065
 801300c:	08013065 	.word	0x08013065
 8013010:	08013055 	.word	0x08013055
 8013014:	08013065 	.word	0x08013065
 8013018:	08013065 	.word	0x08013065
 801301c:	08013065 	.word	0x08013065
 8013020:	08013065 	.word	0x08013065
 8013024:	08013065 	.word	0x08013065
 8013028:	08013065 	.word	0x08013065
 801302c:	08013065 	.word	0x08013065
 8013030:	0801305d 	.word	0x0801305d
 8013034:	2301      	movs	r3, #1
 8013036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801303a:	e222      	b.n	8013482 <UART_SetConfig+0x5a6>
 801303c:	2304      	movs	r3, #4
 801303e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013042:	e21e      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013044:	2308      	movs	r3, #8
 8013046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801304a:	e21a      	b.n	8013482 <UART_SetConfig+0x5a6>
 801304c:	2310      	movs	r3, #16
 801304e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013052:	e216      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013054:	2320      	movs	r3, #32
 8013056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801305a:	e212      	b.n	8013482 <UART_SetConfig+0x5a6>
 801305c:	2340      	movs	r3, #64	; 0x40
 801305e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013062:	e20e      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013064:	2380      	movs	r3, #128	; 0x80
 8013066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801306a:	e20a      	b.n	8013482 <UART_SetConfig+0x5a6>
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	4a69      	ldr	r2, [pc, #420]	; (8013218 <UART_SetConfig+0x33c>)
 8013072:	4293      	cmp	r3, r2
 8013074:	d130      	bne.n	80130d8 <UART_SetConfig+0x1fc>
 8013076:	4b67      	ldr	r3, [pc, #412]	; (8013214 <UART_SetConfig+0x338>)
 8013078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801307a:	f003 0307 	and.w	r3, r3, #7
 801307e:	2b05      	cmp	r3, #5
 8013080:	d826      	bhi.n	80130d0 <UART_SetConfig+0x1f4>
 8013082:	a201      	add	r2, pc, #4	; (adr r2, 8013088 <UART_SetConfig+0x1ac>)
 8013084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013088:	080130a1 	.word	0x080130a1
 801308c:	080130a9 	.word	0x080130a9
 8013090:	080130b1 	.word	0x080130b1
 8013094:	080130b9 	.word	0x080130b9
 8013098:	080130c1 	.word	0x080130c1
 801309c:	080130c9 	.word	0x080130c9
 80130a0:	2300      	movs	r3, #0
 80130a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130a6:	e1ec      	b.n	8013482 <UART_SetConfig+0x5a6>
 80130a8:	2304      	movs	r3, #4
 80130aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ae:	e1e8      	b.n	8013482 <UART_SetConfig+0x5a6>
 80130b0:	2308      	movs	r3, #8
 80130b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130b6:	e1e4      	b.n	8013482 <UART_SetConfig+0x5a6>
 80130b8:	2310      	movs	r3, #16
 80130ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130be:	e1e0      	b.n	8013482 <UART_SetConfig+0x5a6>
 80130c0:	2320      	movs	r3, #32
 80130c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130c6:	e1dc      	b.n	8013482 <UART_SetConfig+0x5a6>
 80130c8:	2340      	movs	r3, #64	; 0x40
 80130ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ce:	e1d8      	b.n	8013482 <UART_SetConfig+0x5a6>
 80130d0:	2380      	movs	r3, #128	; 0x80
 80130d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130d6:	e1d4      	b.n	8013482 <UART_SetConfig+0x5a6>
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	4a4f      	ldr	r2, [pc, #316]	; (801321c <UART_SetConfig+0x340>)
 80130de:	4293      	cmp	r3, r2
 80130e0:	d130      	bne.n	8013144 <UART_SetConfig+0x268>
 80130e2:	4b4c      	ldr	r3, [pc, #304]	; (8013214 <UART_SetConfig+0x338>)
 80130e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130e6:	f003 0307 	and.w	r3, r3, #7
 80130ea:	2b05      	cmp	r3, #5
 80130ec:	d826      	bhi.n	801313c <UART_SetConfig+0x260>
 80130ee:	a201      	add	r2, pc, #4	; (adr r2, 80130f4 <UART_SetConfig+0x218>)
 80130f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130f4:	0801310d 	.word	0x0801310d
 80130f8:	08013115 	.word	0x08013115
 80130fc:	0801311d 	.word	0x0801311d
 8013100:	08013125 	.word	0x08013125
 8013104:	0801312d 	.word	0x0801312d
 8013108:	08013135 	.word	0x08013135
 801310c:	2300      	movs	r3, #0
 801310e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013112:	e1b6      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013114:	2304      	movs	r3, #4
 8013116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801311a:	e1b2      	b.n	8013482 <UART_SetConfig+0x5a6>
 801311c:	2308      	movs	r3, #8
 801311e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013122:	e1ae      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013124:	2310      	movs	r3, #16
 8013126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801312a:	e1aa      	b.n	8013482 <UART_SetConfig+0x5a6>
 801312c:	2320      	movs	r3, #32
 801312e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013132:	e1a6      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013134:	2340      	movs	r3, #64	; 0x40
 8013136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801313a:	e1a2      	b.n	8013482 <UART_SetConfig+0x5a6>
 801313c:	2380      	movs	r3, #128	; 0x80
 801313e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013142:	e19e      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	4a35      	ldr	r2, [pc, #212]	; (8013220 <UART_SetConfig+0x344>)
 801314a:	4293      	cmp	r3, r2
 801314c:	d130      	bne.n	80131b0 <UART_SetConfig+0x2d4>
 801314e:	4b31      	ldr	r3, [pc, #196]	; (8013214 <UART_SetConfig+0x338>)
 8013150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013152:	f003 0307 	and.w	r3, r3, #7
 8013156:	2b05      	cmp	r3, #5
 8013158:	d826      	bhi.n	80131a8 <UART_SetConfig+0x2cc>
 801315a:	a201      	add	r2, pc, #4	; (adr r2, 8013160 <UART_SetConfig+0x284>)
 801315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013160:	08013179 	.word	0x08013179
 8013164:	08013181 	.word	0x08013181
 8013168:	08013189 	.word	0x08013189
 801316c:	08013191 	.word	0x08013191
 8013170:	08013199 	.word	0x08013199
 8013174:	080131a1 	.word	0x080131a1
 8013178:	2300      	movs	r3, #0
 801317a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801317e:	e180      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013180:	2304      	movs	r3, #4
 8013182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013186:	e17c      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013188:	2308      	movs	r3, #8
 801318a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801318e:	e178      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013190:	2310      	movs	r3, #16
 8013192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013196:	e174      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013198:	2320      	movs	r3, #32
 801319a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801319e:	e170      	b.n	8013482 <UART_SetConfig+0x5a6>
 80131a0:	2340      	movs	r3, #64	; 0x40
 80131a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131a6:	e16c      	b.n	8013482 <UART_SetConfig+0x5a6>
 80131a8:	2380      	movs	r3, #128	; 0x80
 80131aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ae:	e168      	b.n	8013482 <UART_SetConfig+0x5a6>
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a1b      	ldr	r2, [pc, #108]	; (8013224 <UART_SetConfig+0x348>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d142      	bne.n	8013240 <UART_SetConfig+0x364>
 80131ba:	4b16      	ldr	r3, [pc, #88]	; (8013214 <UART_SetConfig+0x338>)
 80131bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131be:	f003 0307 	and.w	r3, r3, #7
 80131c2:	2b05      	cmp	r3, #5
 80131c4:	d838      	bhi.n	8013238 <UART_SetConfig+0x35c>
 80131c6:	a201      	add	r2, pc, #4	; (adr r2, 80131cc <UART_SetConfig+0x2f0>)
 80131c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131cc:	080131e5 	.word	0x080131e5
 80131d0:	080131ed 	.word	0x080131ed
 80131d4:	080131f5 	.word	0x080131f5
 80131d8:	080131fd 	.word	0x080131fd
 80131dc:	08013229 	.word	0x08013229
 80131e0:	08013231 	.word	0x08013231
 80131e4:	2300      	movs	r3, #0
 80131e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ea:	e14a      	b.n	8013482 <UART_SetConfig+0x5a6>
 80131ec:	2304      	movs	r3, #4
 80131ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131f2:	e146      	b.n	8013482 <UART_SetConfig+0x5a6>
 80131f4:	2308      	movs	r3, #8
 80131f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131fa:	e142      	b.n	8013482 <UART_SetConfig+0x5a6>
 80131fc:	2310      	movs	r3, #16
 80131fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013202:	e13e      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013204:	cfff69f3 	.word	0xcfff69f3
 8013208:	58000c00 	.word	0x58000c00
 801320c:	11fff4ff 	.word	0x11fff4ff
 8013210:	40011000 	.word	0x40011000
 8013214:	58024400 	.word	0x58024400
 8013218:	40004400 	.word	0x40004400
 801321c:	40004800 	.word	0x40004800
 8013220:	40004c00 	.word	0x40004c00
 8013224:	40005000 	.word	0x40005000
 8013228:	2320      	movs	r3, #32
 801322a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801322e:	e128      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013230:	2340      	movs	r3, #64	; 0x40
 8013232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013236:	e124      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013238:	2380      	movs	r3, #128	; 0x80
 801323a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801323e:	e120      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	4acb      	ldr	r2, [pc, #812]	; (8013574 <UART_SetConfig+0x698>)
 8013246:	4293      	cmp	r3, r2
 8013248:	d176      	bne.n	8013338 <UART_SetConfig+0x45c>
 801324a:	4bcb      	ldr	r3, [pc, #812]	; (8013578 <UART_SetConfig+0x69c>)
 801324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801324e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013252:	2b28      	cmp	r3, #40	; 0x28
 8013254:	d86c      	bhi.n	8013330 <UART_SetConfig+0x454>
 8013256:	a201      	add	r2, pc, #4	; (adr r2, 801325c <UART_SetConfig+0x380>)
 8013258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801325c:	08013301 	.word	0x08013301
 8013260:	08013331 	.word	0x08013331
 8013264:	08013331 	.word	0x08013331
 8013268:	08013331 	.word	0x08013331
 801326c:	08013331 	.word	0x08013331
 8013270:	08013331 	.word	0x08013331
 8013274:	08013331 	.word	0x08013331
 8013278:	08013331 	.word	0x08013331
 801327c:	08013309 	.word	0x08013309
 8013280:	08013331 	.word	0x08013331
 8013284:	08013331 	.word	0x08013331
 8013288:	08013331 	.word	0x08013331
 801328c:	08013331 	.word	0x08013331
 8013290:	08013331 	.word	0x08013331
 8013294:	08013331 	.word	0x08013331
 8013298:	08013331 	.word	0x08013331
 801329c:	08013311 	.word	0x08013311
 80132a0:	08013331 	.word	0x08013331
 80132a4:	08013331 	.word	0x08013331
 80132a8:	08013331 	.word	0x08013331
 80132ac:	08013331 	.word	0x08013331
 80132b0:	08013331 	.word	0x08013331
 80132b4:	08013331 	.word	0x08013331
 80132b8:	08013331 	.word	0x08013331
 80132bc:	08013319 	.word	0x08013319
 80132c0:	08013331 	.word	0x08013331
 80132c4:	08013331 	.word	0x08013331
 80132c8:	08013331 	.word	0x08013331
 80132cc:	08013331 	.word	0x08013331
 80132d0:	08013331 	.word	0x08013331
 80132d4:	08013331 	.word	0x08013331
 80132d8:	08013331 	.word	0x08013331
 80132dc:	08013321 	.word	0x08013321
 80132e0:	08013331 	.word	0x08013331
 80132e4:	08013331 	.word	0x08013331
 80132e8:	08013331 	.word	0x08013331
 80132ec:	08013331 	.word	0x08013331
 80132f0:	08013331 	.word	0x08013331
 80132f4:	08013331 	.word	0x08013331
 80132f8:	08013331 	.word	0x08013331
 80132fc:	08013329 	.word	0x08013329
 8013300:	2301      	movs	r3, #1
 8013302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013306:	e0bc      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013308:	2304      	movs	r3, #4
 801330a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801330e:	e0b8      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013310:	2308      	movs	r3, #8
 8013312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013316:	e0b4      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013318:	2310      	movs	r3, #16
 801331a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801331e:	e0b0      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013320:	2320      	movs	r3, #32
 8013322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013326:	e0ac      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013328:	2340      	movs	r3, #64	; 0x40
 801332a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801332e:	e0a8      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013330:	2380      	movs	r3, #128	; 0x80
 8013332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013336:	e0a4      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	4a8f      	ldr	r2, [pc, #572]	; (801357c <UART_SetConfig+0x6a0>)
 801333e:	4293      	cmp	r3, r2
 8013340:	d130      	bne.n	80133a4 <UART_SetConfig+0x4c8>
 8013342:	4b8d      	ldr	r3, [pc, #564]	; (8013578 <UART_SetConfig+0x69c>)
 8013344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013346:	f003 0307 	and.w	r3, r3, #7
 801334a:	2b05      	cmp	r3, #5
 801334c:	d826      	bhi.n	801339c <UART_SetConfig+0x4c0>
 801334e:	a201      	add	r2, pc, #4	; (adr r2, 8013354 <UART_SetConfig+0x478>)
 8013350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013354:	0801336d 	.word	0x0801336d
 8013358:	08013375 	.word	0x08013375
 801335c:	0801337d 	.word	0x0801337d
 8013360:	08013385 	.word	0x08013385
 8013364:	0801338d 	.word	0x0801338d
 8013368:	08013395 	.word	0x08013395
 801336c:	2300      	movs	r3, #0
 801336e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013372:	e086      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013374:	2304      	movs	r3, #4
 8013376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801337a:	e082      	b.n	8013482 <UART_SetConfig+0x5a6>
 801337c:	2308      	movs	r3, #8
 801337e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013382:	e07e      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013384:	2310      	movs	r3, #16
 8013386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801338a:	e07a      	b.n	8013482 <UART_SetConfig+0x5a6>
 801338c:	2320      	movs	r3, #32
 801338e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013392:	e076      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013394:	2340      	movs	r3, #64	; 0x40
 8013396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801339a:	e072      	b.n	8013482 <UART_SetConfig+0x5a6>
 801339c:	2380      	movs	r3, #128	; 0x80
 801339e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133a2:	e06e      	b.n	8013482 <UART_SetConfig+0x5a6>
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4a75      	ldr	r2, [pc, #468]	; (8013580 <UART_SetConfig+0x6a4>)
 80133aa:	4293      	cmp	r3, r2
 80133ac:	d130      	bne.n	8013410 <UART_SetConfig+0x534>
 80133ae:	4b72      	ldr	r3, [pc, #456]	; (8013578 <UART_SetConfig+0x69c>)
 80133b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133b2:	f003 0307 	and.w	r3, r3, #7
 80133b6:	2b05      	cmp	r3, #5
 80133b8:	d826      	bhi.n	8013408 <UART_SetConfig+0x52c>
 80133ba:	a201      	add	r2, pc, #4	; (adr r2, 80133c0 <UART_SetConfig+0x4e4>)
 80133bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c0:	080133d9 	.word	0x080133d9
 80133c4:	080133e1 	.word	0x080133e1
 80133c8:	080133e9 	.word	0x080133e9
 80133cc:	080133f1 	.word	0x080133f1
 80133d0:	080133f9 	.word	0x080133f9
 80133d4:	08013401 	.word	0x08013401
 80133d8:	2300      	movs	r3, #0
 80133da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133de:	e050      	b.n	8013482 <UART_SetConfig+0x5a6>
 80133e0:	2304      	movs	r3, #4
 80133e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133e6:	e04c      	b.n	8013482 <UART_SetConfig+0x5a6>
 80133e8:	2308      	movs	r3, #8
 80133ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ee:	e048      	b.n	8013482 <UART_SetConfig+0x5a6>
 80133f0:	2310      	movs	r3, #16
 80133f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133f6:	e044      	b.n	8013482 <UART_SetConfig+0x5a6>
 80133f8:	2320      	movs	r3, #32
 80133fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133fe:	e040      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013400:	2340      	movs	r3, #64	; 0x40
 8013402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013406:	e03c      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013408:	2380      	movs	r3, #128	; 0x80
 801340a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801340e:	e038      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4a5b      	ldr	r2, [pc, #364]	; (8013584 <UART_SetConfig+0x6a8>)
 8013416:	4293      	cmp	r3, r2
 8013418:	d130      	bne.n	801347c <UART_SetConfig+0x5a0>
 801341a:	4b57      	ldr	r3, [pc, #348]	; (8013578 <UART_SetConfig+0x69c>)
 801341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801341e:	f003 0307 	and.w	r3, r3, #7
 8013422:	2b05      	cmp	r3, #5
 8013424:	d826      	bhi.n	8013474 <UART_SetConfig+0x598>
 8013426:	a201      	add	r2, pc, #4	; (adr r2, 801342c <UART_SetConfig+0x550>)
 8013428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801342c:	08013445 	.word	0x08013445
 8013430:	0801344d 	.word	0x0801344d
 8013434:	08013455 	.word	0x08013455
 8013438:	0801345d 	.word	0x0801345d
 801343c:	08013465 	.word	0x08013465
 8013440:	0801346d 	.word	0x0801346d
 8013444:	2302      	movs	r3, #2
 8013446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801344a:	e01a      	b.n	8013482 <UART_SetConfig+0x5a6>
 801344c:	2304      	movs	r3, #4
 801344e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013452:	e016      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013454:	2308      	movs	r3, #8
 8013456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801345a:	e012      	b.n	8013482 <UART_SetConfig+0x5a6>
 801345c:	2310      	movs	r3, #16
 801345e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013462:	e00e      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013464:	2320      	movs	r3, #32
 8013466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801346a:	e00a      	b.n	8013482 <UART_SetConfig+0x5a6>
 801346c:	2340      	movs	r3, #64	; 0x40
 801346e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013472:	e006      	b.n	8013482 <UART_SetConfig+0x5a6>
 8013474:	2380      	movs	r3, #128	; 0x80
 8013476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801347a:	e002      	b.n	8013482 <UART_SetConfig+0x5a6>
 801347c:	2380      	movs	r3, #128	; 0x80
 801347e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4a3f      	ldr	r2, [pc, #252]	; (8013584 <UART_SetConfig+0x6a8>)
 8013488:	4293      	cmp	r3, r2
 801348a:	f040 80f8 	bne.w	801367e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801348e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013492:	2b20      	cmp	r3, #32
 8013494:	dc46      	bgt.n	8013524 <UART_SetConfig+0x648>
 8013496:	2b02      	cmp	r3, #2
 8013498:	f2c0 8082 	blt.w	80135a0 <UART_SetConfig+0x6c4>
 801349c:	3b02      	subs	r3, #2
 801349e:	2b1e      	cmp	r3, #30
 80134a0:	d87e      	bhi.n	80135a0 <UART_SetConfig+0x6c4>
 80134a2:	a201      	add	r2, pc, #4	; (adr r2, 80134a8 <UART_SetConfig+0x5cc>)
 80134a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134a8:	0801352b 	.word	0x0801352b
 80134ac:	080135a1 	.word	0x080135a1
 80134b0:	08013533 	.word	0x08013533
 80134b4:	080135a1 	.word	0x080135a1
 80134b8:	080135a1 	.word	0x080135a1
 80134bc:	080135a1 	.word	0x080135a1
 80134c0:	08013543 	.word	0x08013543
 80134c4:	080135a1 	.word	0x080135a1
 80134c8:	080135a1 	.word	0x080135a1
 80134cc:	080135a1 	.word	0x080135a1
 80134d0:	080135a1 	.word	0x080135a1
 80134d4:	080135a1 	.word	0x080135a1
 80134d8:	080135a1 	.word	0x080135a1
 80134dc:	080135a1 	.word	0x080135a1
 80134e0:	08013553 	.word	0x08013553
 80134e4:	080135a1 	.word	0x080135a1
 80134e8:	080135a1 	.word	0x080135a1
 80134ec:	080135a1 	.word	0x080135a1
 80134f0:	080135a1 	.word	0x080135a1
 80134f4:	080135a1 	.word	0x080135a1
 80134f8:	080135a1 	.word	0x080135a1
 80134fc:	080135a1 	.word	0x080135a1
 8013500:	080135a1 	.word	0x080135a1
 8013504:	080135a1 	.word	0x080135a1
 8013508:	080135a1 	.word	0x080135a1
 801350c:	080135a1 	.word	0x080135a1
 8013510:	080135a1 	.word	0x080135a1
 8013514:	080135a1 	.word	0x080135a1
 8013518:	080135a1 	.word	0x080135a1
 801351c:	080135a1 	.word	0x080135a1
 8013520:	08013593 	.word	0x08013593
 8013524:	2b40      	cmp	r3, #64	; 0x40
 8013526:	d037      	beq.n	8013598 <UART_SetConfig+0x6bc>
 8013528:	e03a      	b.n	80135a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801352a:	f7fc fc4b 	bl	800fdc4 <HAL_RCCEx_GetD3PCLK1Freq>
 801352e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013530:	e03c      	b.n	80135ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013536:	4618      	mov	r0, r3
 8013538:	f7fc fc5a 	bl	800fdf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801353e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013540:	e034      	b.n	80135ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013542:	f107 0318 	add.w	r3, r7, #24
 8013546:	4618      	mov	r0, r3
 8013548:	f7fc fda6 	bl	8010098 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013550:	e02c      	b.n	80135ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013552:	4b09      	ldr	r3, [pc, #36]	; (8013578 <UART_SetConfig+0x69c>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	f003 0320 	and.w	r3, r3, #32
 801355a:	2b00      	cmp	r3, #0
 801355c:	d016      	beq.n	801358c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801355e:	4b06      	ldr	r3, [pc, #24]	; (8013578 <UART_SetConfig+0x69c>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	08db      	lsrs	r3, r3, #3
 8013564:	f003 0303 	and.w	r3, r3, #3
 8013568:	4a07      	ldr	r2, [pc, #28]	; (8013588 <UART_SetConfig+0x6ac>)
 801356a:	fa22 f303 	lsr.w	r3, r2, r3
 801356e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013570:	e01c      	b.n	80135ac <UART_SetConfig+0x6d0>
 8013572:	bf00      	nop
 8013574:	40011400 	.word	0x40011400
 8013578:	58024400 	.word	0x58024400
 801357c:	40007800 	.word	0x40007800
 8013580:	40007c00 	.word	0x40007c00
 8013584:	58000c00 	.word	0x58000c00
 8013588:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801358c:	4b9d      	ldr	r3, [pc, #628]	; (8013804 <UART_SetConfig+0x928>)
 801358e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013590:	e00c      	b.n	80135ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013592:	4b9d      	ldr	r3, [pc, #628]	; (8013808 <UART_SetConfig+0x92c>)
 8013594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013596:	e009      	b.n	80135ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801359c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801359e:	e005      	b.n	80135ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80135a0:	2300      	movs	r3, #0
 80135a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80135a4:	2301      	movs	r3, #1
 80135a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80135aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80135ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	f000 81de 	beq.w	8013970 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b8:	4a94      	ldr	r2, [pc, #592]	; (801380c <UART_SetConfig+0x930>)
 80135ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135be:	461a      	mov	r2, r3
 80135c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80135c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	685a      	ldr	r2, [r3, #4]
 80135cc:	4613      	mov	r3, r2
 80135ce:	005b      	lsls	r3, r3, #1
 80135d0:	4413      	add	r3, r2
 80135d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d305      	bcc.n	80135e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80135de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d903      	bls.n	80135ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80135e4:	2301      	movs	r3, #1
 80135e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80135ea:	e1c1      	b.n	8013970 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80135ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ee:	2200      	movs	r2, #0
 80135f0:	60bb      	str	r3, [r7, #8]
 80135f2:	60fa      	str	r2, [r7, #12]
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135f8:	4a84      	ldr	r2, [pc, #528]	; (801380c <UART_SetConfig+0x930>)
 80135fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135fe:	b29b      	uxth	r3, r3
 8013600:	2200      	movs	r2, #0
 8013602:	603b      	str	r3, [r7, #0]
 8013604:	607a      	str	r2, [r7, #4]
 8013606:	e9d7 2300 	ldrd	r2, r3, [r7]
 801360a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801360e:	f7ec feb7 	bl	8000380 <__aeabi_uldivmod>
 8013612:	4602      	mov	r2, r0
 8013614:	460b      	mov	r3, r1
 8013616:	4610      	mov	r0, r2
 8013618:	4619      	mov	r1, r3
 801361a:	f04f 0200 	mov.w	r2, #0
 801361e:	f04f 0300 	mov.w	r3, #0
 8013622:	020b      	lsls	r3, r1, #8
 8013624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013628:	0202      	lsls	r2, r0, #8
 801362a:	6979      	ldr	r1, [r7, #20]
 801362c:	6849      	ldr	r1, [r1, #4]
 801362e:	0849      	lsrs	r1, r1, #1
 8013630:	2000      	movs	r0, #0
 8013632:	460c      	mov	r4, r1
 8013634:	4605      	mov	r5, r0
 8013636:	eb12 0804 	adds.w	r8, r2, r4
 801363a:	eb43 0905 	adc.w	r9, r3, r5
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	2200      	movs	r2, #0
 8013644:	469a      	mov	sl, r3
 8013646:	4693      	mov	fp, r2
 8013648:	4652      	mov	r2, sl
 801364a:	465b      	mov	r3, fp
 801364c:	4640      	mov	r0, r8
 801364e:	4649      	mov	r1, r9
 8013650:	f7ec fe96 	bl	8000380 <__aeabi_uldivmod>
 8013654:	4602      	mov	r2, r0
 8013656:	460b      	mov	r3, r1
 8013658:	4613      	mov	r3, r2
 801365a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801365e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013662:	d308      	bcc.n	8013676 <UART_SetConfig+0x79a>
 8013664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801366a:	d204      	bcs.n	8013676 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013672:	60da      	str	r2, [r3, #12]
 8013674:	e17c      	b.n	8013970 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8013676:	2301      	movs	r3, #1
 8013678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801367c:	e178      	b.n	8013970 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	69db      	ldr	r3, [r3, #28]
 8013682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013686:	f040 80c5 	bne.w	8013814 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801368a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801368e:	2b20      	cmp	r3, #32
 8013690:	dc48      	bgt.n	8013724 <UART_SetConfig+0x848>
 8013692:	2b00      	cmp	r3, #0
 8013694:	db7b      	blt.n	801378e <UART_SetConfig+0x8b2>
 8013696:	2b20      	cmp	r3, #32
 8013698:	d879      	bhi.n	801378e <UART_SetConfig+0x8b2>
 801369a:	a201      	add	r2, pc, #4	; (adr r2, 80136a0 <UART_SetConfig+0x7c4>)
 801369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136a0:	0801372b 	.word	0x0801372b
 80136a4:	08013733 	.word	0x08013733
 80136a8:	0801378f 	.word	0x0801378f
 80136ac:	0801378f 	.word	0x0801378f
 80136b0:	0801373b 	.word	0x0801373b
 80136b4:	0801378f 	.word	0x0801378f
 80136b8:	0801378f 	.word	0x0801378f
 80136bc:	0801378f 	.word	0x0801378f
 80136c0:	0801374b 	.word	0x0801374b
 80136c4:	0801378f 	.word	0x0801378f
 80136c8:	0801378f 	.word	0x0801378f
 80136cc:	0801378f 	.word	0x0801378f
 80136d0:	0801378f 	.word	0x0801378f
 80136d4:	0801378f 	.word	0x0801378f
 80136d8:	0801378f 	.word	0x0801378f
 80136dc:	0801378f 	.word	0x0801378f
 80136e0:	0801375b 	.word	0x0801375b
 80136e4:	0801378f 	.word	0x0801378f
 80136e8:	0801378f 	.word	0x0801378f
 80136ec:	0801378f 	.word	0x0801378f
 80136f0:	0801378f 	.word	0x0801378f
 80136f4:	0801378f 	.word	0x0801378f
 80136f8:	0801378f 	.word	0x0801378f
 80136fc:	0801378f 	.word	0x0801378f
 8013700:	0801378f 	.word	0x0801378f
 8013704:	0801378f 	.word	0x0801378f
 8013708:	0801378f 	.word	0x0801378f
 801370c:	0801378f 	.word	0x0801378f
 8013710:	0801378f 	.word	0x0801378f
 8013714:	0801378f 	.word	0x0801378f
 8013718:	0801378f 	.word	0x0801378f
 801371c:	0801378f 	.word	0x0801378f
 8013720:	08013781 	.word	0x08013781
 8013724:	2b40      	cmp	r3, #64	; 0x40
 8013726:	d02e      	beq.n	8013786 <UART_SetConfig+0x8aa>
 8013728:	e031      	b.n	801378e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801372a:	f7fb fbd9 	bl	800eee0 <HAL_RCC_GetPCLK1Freq>
 801372e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013730:	e033      	b.n	801379a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013732:	f7fb fbeb 	bl	800ef0c <HAL_RCC_GetPCLK2Freq>
 8013736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013738:	e02f      	b.n	801379a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801373a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801373e:	4618      	mov	r0, r3
 8013740:	f7fc fb56 	bl	800fdf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013748:	e027      	b.n	801379a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801374a:	f107 0318 	add.w	r3, r7, #24
 801374e:	4618      	mov	r0, r3
 8013750:	f7fc fca2 	bl	8010098 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013758:	e01f      	b.n	801379a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801375a:	4b2d      	ldr	r3, [pc, #180]	; (8013810 <UART_SetConfig+0x934>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f003 0320 	and.w	r3, r3, #32
 8013762:	2b00      	cmp	r3, #0
 8013764:	d009      	beq.n	801377a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013766:	4b2a      	ldr	r3, [pc, #168]	; (8013810 <UART_SetConfig+0x934>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	08db      	lsrs	r3, r3, #3
 801376c:	f003 0303 	and.w	r3, r3, #3
 8013770:	4a24      	ldr	r2, [pc, #144]	; (8013804 <UART_SetConfig+0x928>)
 8013772:	fa22 f303 	lsr.w	r3, r2, r3
 8013776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013778:	e00f      	b.n	801379a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801377a:	4b22      	ldr	r3, [pc, #136]	; (8013804 <UART_SetConfig+0x928>)
 801377c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801377e:	e00c      	b.n	801379a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013780:	4b21      	ldr	r3, [pc, #132]	; (8013808 <UART_SetConfig+0x92c>)
 8013782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013784:	e009      	b.n	801379a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801378a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801378c:	e005      	b.n	801379a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801378e:	2300      	movs	r3, #0
 8013790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013792:	2301      	movs	r3, #1
 8013794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801379a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801379c:	2b00      	cmp	r3, #0
 801379e:	f000 80e7 	beq.w	8013970 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a6:	4a19      	ldr	r2, [pc, #100]	; (801380c <UART_SetConfig+0x930>)
 80137a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137ac:	461a      	mov	r2, r3
 80137ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80137b4:	005a      	lsls	r2, r3, #1
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	085b      	lsrs	r3, r3, #1
 80137bc:	441a      	add	r2, r3
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	685b      	ldr	r3, [r3, #4]
 80137c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80137c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80137c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ca:	2b0f      	cmp	r3, #15
 80137cc:	d916      	bls.n	80137fc <UART_SetConfig+0x920>
 80137ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137d4:	d212      	bcs.n	80137fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80137d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d8:	b29b      	uxth	r3, r3
 80137da:	f023 030f 	bic.w	r3, r3, #15
 80137de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80137e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e2:	085b      	lsrs	r3, r3, #1
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	f003 0307 	and.w	r3, r3, #7
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80137ee:	4313      	orrs	r3, r2
 80137f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80137f8:	60da      	str	r2, [r3, #12]
 80137fa:	e0b9      	b.n	8013970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80137fc:	2301      	movs	r3, #1
 80137fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013802:	e0b5      	b.n	8013970 <UART_SetConfig+0xa94>
 8013804:	03d09000 	.word	0x03d09000
 8013808:	003d0900 	.word	0x003d0900
 801380c:	08034158 	.word	0x08034158
 8013810:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013818:	2b20      	cmp	r3, #32
 801381a:	dc49      	bgt.n	80138b0 <UART_SetConfig+0x9d4>
 801381c:	2b00      	cmp	r3, #0
 801381e:	db7c      	blt.n	801391a <UART_SetConfig+0xa3e>
 8013820:	2b20      	cmp	r3, #32
 8013822:	d87a      	bhi.n	801391a <UART_SetConfig+0xa3e>
 8013824:	a201      	add	r2, pc, #4	; (adr r2, 801382c <UART_SetConfig+0x950>)
 8013826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801382a:	bf00      	nop
 801382c:	080138b7 	.word	0x080138b7
 8013830:	080138bf 	.word	0x080138bf
 8013834:	0801391b 	.word	0x0801391b
 8013838:	0801391b 	.word	0x0801391b
 801383c:	080138c7 	.word	0x080138c7
 8013840:	0801391b 	.word	0x0801391b
 8013844:	0801391b 	.word	0x0801391b
 8013848:	0801391b 	.word	0x0801391b
 801384c:	080138d7 	.word	0x080138d7
 8013850:	0801391b 	.word	0x0801391b
 8013854:	0801391b 	.word	0x0801391b
 8013858:	0801391b 	.word	0x0801391b
 801385c:	0801391b 	.word	0x0801391b
 8013860:	0801391b 	.word	0x0801391b
 8013864:	0801391b 	.word	0x0801391b
 8013868:	0801391b 	.word	0x0801391b
 801386c:	080138e7 	.word	0x080138e7
 8013870:	0801391b 	.word	0x0801391b
 8013874:	0801391b 	.word	0x0801391b
 8013878:	0801391b 	.word	0x0801391b
 801387c:	0801391b 	.word	0x0801391b
 8013880:	0801391b 	.word	0x0801391b
 8013884:	0801391b 	.word	0x0801391b
 8013888:	0801391b 	.word	0x0801391b
 801388c:	0801391b 	.word	0x0801391b
 8013890:	0801391b 	.word	0x0801391b
 8013894:	0801391b 	.word	0x0801391b
 8013898:	0801391b 	.word	0x0801391b
 801389c:	0801391b 	.word	0x0801391b
 80138a0:	0801391b 	.word	0x0801391b
 80138a4:	0801391b 	.word	0x0801391b
 80138a8:	0801391b 	.word	0x0801391b
 80138ac:	0801390d 	.word	0x0801390d
 80138b0:	2b40      	cmp	r3, #64	; 0x40
 80138b2:	d02e      	beq.n	8013912 <UART_SetConfig+0xa36>
 80138b4:	e031      	b.n	801391a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80138b6:	f7fb fb13 	bl	800eee0 <HAL_RCC_GetPCLK1Freq>
 80138ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80138bc:	e033      	b.n	8013926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80138be:	f7fb fb25 	bl	800ef0c <HAL_RCC_GetPCLK2Freq>
 80138c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80138c4:	e02f      	b.n	8013926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80138c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fc fa90 	bl	800fdf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80138d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80138d4:	e027      	b.n	8013926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80138d6:	f107 0318 	add.w	r3, r7, #24
 80138da:	4618      	mov	r0, r3
 80138dc:	f7fc fbdc 	bl	8010098 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80138e4:	e01f      	b.n	8013926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80138e6:	4b2d      	ldr	r3, [pc, #180]	; (801399c <UART_SetConfig+0xac0>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	f003 0320 	and.w	r3, r3, #32
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d009      	beq.n	8013906 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80138f2:	4b2a      	ldr	r3, [pc, #168]	; (801399c <UART_SetConfig+0xac0>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	08db      	lsrs	r3, r3, #3
 80138f8:	f003 0303 	and.w	r3, r3, #3
 80138fc:	4a28      	ldr	r2, [pc, #160]	; (80139a0 <UART_SetConfig+0xac4>)
 80138fe:	fa22 f303 	lsr.w	r3, r2, r3
 8013902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013904:	e00f      	b.n	8013926 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013906:	4b26      	ldr	r3, [pc, #152]	; (80139a0 <UART_SetConfig+0xac4>)
 8013908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801390a:	e00c      	b.n	8013926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801390c:	4b25      	ldr	r3, [pc, #148]	; (80139a4 <UART_SetConfig+0xac8>)
 801390e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013910:	e009      	b.n	8013926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013918:	e005      	b.n	8013926 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801391a:	2300      	movs	r3, #0
 801391c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801391e:	2301      	movs	r3, #1
 8013920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013924:	bf00      	nop
    }

    if (pclk != 0U)
 8013926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013928:	2b00      	cmp	r3, #0
 801392a:	d021      	beq.n	8013970 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013930:	4a1d      	ldr	r2, [pc, #116]	; (80139a8 <UART_SetConfig+0xacc>)
 8013932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013936:	461a      	mov	r2, r3
 8013938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801393a:	fbb3 f2f2 	udiv	r2, r3, r2
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	085b      	lsrs	r3, r3, #1
 8013944:	441a      	add	r2, r3
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	fbb2 f3f3 	udiv	r3, r2, r3
 801394e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013952:	2b0f      	cmp	r3, #15
 8013954:	d909      	bls.n	801396a <UART_SetConfig+0xa8e>
 8013956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801395c:	d205      	bcs.n	801396a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013960:	b29a      	uxth	r2, r3
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	60da      	str	r2, [r3, #12]
 8013968:	e002      	b.n	8013970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801396a:	2301      	movs	r3, #1
 801396c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	2201      	movs	r2, #1
 8013974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	2201      	movs	r2, #1
 801397c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	2200      	movs	r2, #0
 8013984:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	2200      	movs	r2, #0
 801398a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801398c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013990:	4618      	mov	r0, r3
 8013992:	3748      	adds	r7, #72	; 0x48
 8013994:	46bd      	mov	sp, r7
 8013996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801399a:	bf00      	nop
 801399c:	58024400 	.word	0x58024400
 80139a0:	03d09000 	.word	0x03d09000
 80139a4:	003d0900 	.word	0x003d0900
 80139a8:	08034158 	.word	0x08034158

080139ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80139ac:	b480      	push	{r7}
 80139ae:	b083      	sub	sp, #12
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139b8:	f003 0301 	and.w	r3, r3, #1
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d00a      	beq.n	80139d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	430a      	orrs	r2, r1
 80139d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139da:	f003 0302 	and.w	r3, r3, #2
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d00a      	beq.n	80139f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	685b      	ldr	r3, [r3, #4]
 80139e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	430a      	orrs	r2, r1
 80139f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139fc:	f003 0304 	and.w	r3, r3, #4
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d00a      	beq.n	8013a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	685b      	ldr	r3, [r3, #4]
 8013a0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	430a      	orrs	r2, r1
 8013a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a1e:	f003 0308 	and.w	r3, r3, #8
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00a      	beq.n	8013a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	685b      	ldr	r3, [r3, #4]
 8013a2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	430a      	orrs	r2, r1
 8013a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a40:	f003 0310 	and.w	r3, r3, #16
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d00a      	beq.n	8013a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	689b      	ldr	r3, [r3, #8]
 8013a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	430a      	orrs	r2, r1
 8013a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a62:	f003 0320 	and.w	r3, r3, #32
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d00a      	beq.n	8013a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	430a      	orrs	r2, r1
 8013a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d01a      	beq.n	8013ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	430a      	orrs	r2, r1
 8013aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013aaa:	d10a      	bne.n	8013ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	430a      	orrs	r2, r1
 8013ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d00a      	beq.n	8013ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	430a      	orrs	r2, r1
 8013ae2:	605a      	str	r2, [r3, #4]
  }
}
 8013ae4:	bf00      	nop
 8013ae6:	370c      	adds	r7, #12
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr

08013af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b086      	sub	sp, #24
 8013af4:	af02      	add	r7, sp, #8
 8013af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2200      	movs	r2, #0
 8013afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013b00:	f7f5 f83c 	bl	8008b7c <HAL_GetTick>
 8013b04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	f003 0308 	and.w	r3, r3, #8
 8013b10:	2b08      	cmp	r3, #8
 8013b12:	d10e      	bne.n	8013b32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013b18:	9300      	str	r3, [sp, #0]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f000 f82f 	bl	8013b86 <UART_WaitOnFlagUntilTimeout>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d001      	beq.n	8013b32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b2e:	2303      	movs	r3, #3
 8013b30:	e025      	b.n	8013b7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	f003 0304 	and.w	r3, r3, #4
 8013b3c:	2b04      	cmp	r3, #4
 8013b3e:	d10e      	bne.n	8013b5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013b44:	9300      	str	r3, [sp, #0]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f000 f819 	bl	8013b86 <UART_WaitOnFlagUntilTimeout>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d001      	beq.n	8013b5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b5a:	2303      	movs	r3, #3
 8013b5c:	e00f      	b.n	8013b7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2220      	movs	r2, #32
 8013b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2220      	movs	r2, #32
 8013b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2200      	movs	r2, #0
 8013b72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2200      	movs	r2, #0
 8013b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013b7c:	2300      	movs	r3, #0
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3710      	adds	r7, #16
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}

08013b86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013b86:	b580      	push	{r7, lr}
 8013b88:	b09c      	sub	sp, #112	; 0x70
 8013b8a:	af00      	add	r7, sp, #0
 8013b8c:	60f8      	str	r0, [r7, #12]
 8013b8e:	60b9      	str	r1, [r7, #8]
 8013b90:	603b      	str	r3, [r7, #0]
 8013b92:	4613      	mov	r3, r2
 8013b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b96:	e0a9      	b.n	8013cec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b9e:	f000 80a5 	beq.w	8013cec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013ba2:	f7f4 ffeb 	bl	8008b7c <HAL_GetTick>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	1ad3      	subs	r3, r2, r3
 8013bac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d302      	bcc.n	8013bb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8013bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d140      	bne.n	8013c3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bc0:	e853 3f00 	ldrex	r3, [r3]
 8013bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013bcc:	667b      	str	r3, [r7, #100]	; 0x64
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	461a      	mov	r2, r3
 8013bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013bd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013bdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013bde:	e841 2300 	strex	r3, r2, [r1]
 8013be2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d1e6      	bne.n	8013bb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	3308      	adds	r3, #8
 8013bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bf4:	e853 3f00 	ldrex	r3, [r3]
 8013bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bfc:	f023 0301 	bic.w	r3, r3, #1
 8013c00:	663b      	str	r3, [r7, #96]	; 0x60
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	3308      	adds	r3, #8
 8013c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013c0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8013c0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c12:	e841 2300 	strex	r3, r2, [r1]
 8013c16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d1e5      	bne.n	8013bea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2220      	movs	r2, #32
 8013c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2220      	movs	r2, #32
 8013c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2200      	movs	r2, #0
 8013c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8013c36:	2303      	movs	r3, #3
 8013c38:	e069      	b.n	8013d0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f003 0304 	and.w	r3, r3, #4
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d051      	beq.n	8013cec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	69db      	ldr	r3, [r3, #28]
 8013c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c56:	d149      	bne.n	8013cec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6a:	e853 3f00 	ldrex	r3, [r3]
 8013c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013c76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	461a      	mov	r2, r3
 8013c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c80:	637b      	str	r3, [r7, #52]	; 0x34
 8013c82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c88:	e841 2300 	strex	r3, r2, [r1]
 8013c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d1e6      	bne.n	8013c62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	3308      	adds	r3, #8
 8013c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	e853 3f00 	ldrex	r3, [r3]
 8013ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8013ca4:	693b      	ldr	r3, [r7, #16]
 8013ca6:	f023 0301 	bic.w	r3, r3, #1
 8013caa:	66bb      	str	r3, [r7, #104]	; 0x68
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	3308      	adds	r3, #8
 8013cb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013cb4:	623a      	str	r2, [r7, #32]
 8013cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cb8:	69f9      	ldr	r1, [r7, #28]
 8013cba:	6a3a      	ldr	r2, [r7, #32]
 8013cbc:	e841 2300 	strex	r3, r2, [r1]
 8013cc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8013cc2:	69bb      	ldr	r3, [r7, #24]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d1e5      	bne.n	8013c94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	2220      	movs	r2, #32
 8013ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	2220      	movs	r2, #32
 8013cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	2220      	movs	r2, #32
 8013cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8013ce8:	2303      	movs	r3, #3
 8013cea:	e010      	b.n	8013d0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	69da      	ldr	r2, [r3, #28]
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	4013      	ands	r3, r2
 8013cf6:	68ba      	ldr	r2, [r7, #8]
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	bf0c      	ite	eq
 8013cfc:	2301      	moveq	r3, #1
 8013cfe:	2300      	movne	r3, #0
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	461a      	mov	r2, r3
 8013d04:	79fb      	ldrb	r3, [r7, #7]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	f43f af46 	beq.w	8013b98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013d0c:	2300      	movs	r3, #0
}
 8013d0e:	4618      	mov	r0, r3
 8013d10:	3770      	adds	r7, #112	; 0x70
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
	...

08013d18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b0a3      	sub	sp, #140	; 0x8c
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	4613      	mov	r3, r2
 8013d24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	68ba      	ldr	r2, [r7, #8]
 8013d2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	88fa      	ldrh	r2, [r7, #6]
 8013d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	88fa      	ldrh	r2, [r7, #6]
 8013d38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	689b      	ldr	r3, [r3, #8]
 8013d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013d4a:	d10e      	bne.n	8013d6a <UART_Start_Receive_IT+0x52>
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	691b      	ldr	r3, [r3, #16]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d105      	bne.n	8013d60 <UART_Start_Receive_IT+0x48>
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013d5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d5e:	e02d      	b.n	8013dbc <UART_Start_Receive_IT+0xa4>
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	22ff      	movs	r2, #255	; 0xff
 8013d64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d68:	e028      	b.n	8013dbc <UART_Start_Receive_IT+0xa4>
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	689b      	ldr	r3, [r3, #8]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d10d      	bne.n	8013d8e <UART_Start_Receive_IT+0x76>
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	691b      	ldr	r3, [r3, #16]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d104      	bne.n	8013d84 <UART_Start_Receive_IT+0x6c>
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	22ff      	movs	r2, #255	; 0xff
 8013d7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d82:	e01b      	b.n	8013dbc <UART_Start_Receive_IT+0xa4>
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	227f      	movs	r2, #127	; 0x7f
 8013d88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d8c:	e016      	b.n	8013dbc <UART_Start_Receive_IT+0xa4>
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	689b      	ldr	r3, [r3, #8]
 8013d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013d96:	d10d      	bne.n	8013db4 <UART_Start_Receive_IT+0x9c>
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	691b      	ldr	r3, [r3, #16]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d104      	bne.n	8013daa <UART_Start_Receive_IT+0x92>
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	227f      	movs	r2, #127	; 0x7f
 8013da4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013da8:	e008      	b.n	8013dbc <UART_Start_Receive_IT+0xa4>
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	223f      	movs	r2, #63	; 0x3f
 8013dae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013db2:	e003      	b.n	8013dbc <UART_Start_Receive_IT+0xa4>
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	2200      	movs	r2, #0
 8013db8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2222      	movs	r2, #34	; 0x22
 8013dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	3308      	adds	r3, #8
 8013dd2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013dd6:	e853 3f00 	ldrex	r3, [r3]
 8013dda:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013dde:	f043 0301 	orr.w	r3, r3, #1
 8013de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	3308      	adds	r3, #8
 8013dec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013df0:	673a      	str	r2, [r7, #112]	; 0x70
 8013df2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013df4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013df6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013df8:	e841 2300 	strex	r3, r2, [r1]
 8013dfc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8013dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d1e3      	bne.n	8013dcc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013e0c:	d153      	bne.n	8013eb6 <UART_Start_Receive_IT+0x19e>
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013e14:	88fa      	ldrh	r2, [r7, #6]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d34d      	bcc.n	8013eb6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	689b      	ldr	r3, [r3, #8]
 8013e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e22:	d107      	bne.n	8013e34 <UART_Start_Receive_IT+0x11c>
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	691b      	ldr	r3, [r3, #16]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d103      	bne.n	8013e34 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	4a4b      	ldr	r2, [pc, #300]	; (8013f5c <UART_Start_Receive_IT+0x244>)
 8013e30:	671a      	str	r2, [r3, #112]	; 0x70
 8013e32:	e002      	b.n	8013e3a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	4a4a      	ldr	r2, [pc, #296]	; (8013f60 <UART_Start_Receive_IT+0x248>)
 8013e38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	691b      	ldr	r3, [r3, #16]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d01a      	beq.n	8013e80 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e52:	e853 3f00 	ldrex	r3, [r3]
 8013e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	461a      	mov	r2, r3
 8013e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013e6e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013e72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013e74:	e841 2300 	strex	r3, r2, [r1]
 8013e78:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d1e4      	bne.n	8013e4a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	3308      	adds	r3, #8
 8013e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e8a:	e853 3f00 	ldrex	r3, [r3]
 8013e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3308      	adds	r3, #8
 8013e9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013ea0:	64ba      	str	r2, [r7, #72]	; 0x48
 8013ea2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ea4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ea8:	e841 2300 	strex	r3, r2, [r1]
 8013eac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d1e5      	bne.n	8013e80 <UART_Start_Receive_IT+0x168>
 8013eb4:	e04a      	b.n	8013f4c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	689b      	ldr	r3, [r3, #8]
 8013eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013ebe:	d107      	bne.n	8013ed0 <UART_Start_Receive_IT+0x1b8>
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	691b      	ldr	r3, [r3, #16]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d103      	bne.n	8013ed0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	4a26      	ldr	r2, [pc, #152]	; (8013f64 <UART_Start_Receive_IT+0x24c>)
 8013ecc:	671a      	str	r2, [r3, #112]	; 0x70
 8013ece:	e002      	b.n	8013ed6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	4a25      	ldr	r2, [pc, #148]	; (8013f68 <UART_Start_Receive_IT+0x250>)
 8013ed4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	691b      	ldr	r3, [r3, #16]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d019      	beq.n	8013f1a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eee:	e853 3f00 	ldrex	r3, [r3]
 8013ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013efa:	677b      	str	r3, [r7, #116]	; 0x74
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	461a      	mov	r2, r3
 8013f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013f04:	637b      	str	r3, [r7, #52]	; 0x34
 8013f06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f0c:	e841 2300 	strex	r3, r2, [r1]
 8013f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d1e6      	bne.n	8013ee6 <UART_Start_Receive_IT+0x1ce>
 8013f18:	e018      	b.n	8013f4c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	e853 3f00 	ldrex	r3, [r3]
 8013f26:	613b      	str	r3, [r7, #16]
   return(result);
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	f043 0320 	orr.w	r3, r3, #32
 8013f2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	461a      	mov	r2, r3
 8013f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f38:	623b      	str	r3, [r7, #32]
 8013f3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f3c:	69f9      	ldr	r1, [r7, #28]
 8013f3e:	6a3a      	ldr	r2, [r7, #32]
 8013f40:	e841 2300 	strex	r3, r2, [r1]
 8013f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8013f46:	69bb      	ldr	r3, [r7, #24]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d1e6      	bne.n	8013f1a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8013f4c:	2300      	movs	r3, #0
}
 8013f4e:	4618      	mov	r0, r3
 8013f50:	378c      	adds	r7, #140	; 0x8c
 8013f52:	46bd      	mov	sp, r7
 8013f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f58:	4770      	bx	lr
 8013f5a:	bf00      	nop
 8013f5c:	08014675 	.word	0x08014675
 8013f60:	0801437d 	.word	0x0801437d
 8013f64:	0801421b 	.word	0x0801421b
 8013f68:	080140bb 	.word	0x080140bb

08013f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013f6c:	b480      	push	{r7}
 8013f6e:	b095      	sub	sp, #84	; 0x54
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f7c:	e853 3f00 	ldrex	r3, [r3]
 8013f80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	461a      	mov	r2, r3
 8013f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f92:	643b      	str	r3, [r7, #64]	; 0x40
 8013f94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f9a:	e841 2300 	strex	r3, r2, [r1]
 8013f9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d1e6      	bne.n	8013f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	3308      	adds	r3, #8
 8013fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fae:	6a3b      	ldr	r3, [r7, #32]
 8013fb0:	e853 3f00 	ldrex	r3, [r3]
 8013fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8013fb6:	69fa      	ldr	r2, [r7, #28]
 8013fb8:	4b1e      	ldr	r3, [pc, #120]	; (8014034 <UART_EndRxTransfer+0xc8>)
 8013fba:	4013      	ands	r3, r2
 8013fbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	3308      	adds	r3, #8
 8013fc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013fc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fce:	e841 2300 	strex	r3, r2, [r1]
 8013fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d1e5      	bne.n	8013fa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fde:	2b01      	cmp	r3, #1
 8013fe0:	d118      	bne.n	8014014 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	e853 3f00 	ldrex	r3, [r3]
 8013fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	f023 0310 	bic.w	r3, r3, #16
 8013ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014000:	61bb      	str	r3, [r7, #24]
 8014002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014004:	6979      	ldr	r1, [r7, #20]
 8014006:	69ba      	ldr	r2, [r7, #24]
 8014008:	e841 2300 	strex	r3, r2, [r1]
 801400c:	613b      	str	r3, [r7, #16]
   return(result);
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d1e6      	bne.n	8013fe2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2220      	movs	r2, #32
 8014018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2200      	movs	r2, #0
 8014020:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2200      	movs	r2, #0
 8014026:	671a      	str	r2, [r3, #112]	; 0x70
}
 8014028:	bf00      	nop
 801402a:	3754      	adds	r7, #84	; 0x54
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr
 8014034:	effffffe 	.word	0xeffffffe

08014038 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	2200      	movs	r2, #0
 801404a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2200      	movs	r2, #0
 8014052:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014056:	68f8      	ldr	r0, [r7, #12]
 8014058:	f7fe ff2a 	bl	8012eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801405c:	bf00      	nop
 801405e:	3710      	adds	r7, #16
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}

08014064 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b088      	sub	sp, #32
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	e853 3f00 	ldrex	r3, [r3]
 8014078:	60bb      	str	r3, [r7, #8]
   return(result);
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014080:	61fb      	str	r3, [r7, #28]
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	461a      	mov	r2, r3
 8014088:	69fb      	ldr	r3, [r7, #28]
 801408a:	61bb      	str	r3, [r7, #24]
 801408c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801408e:	6979      	ldr	r1, [r7, #20]
 8014090:	69ba      	ldr	r2, [r7, #24]
 8014092:	e841 2300 	strex	r3, r2, [r1]
 8014096:	613b      	str	r3, [r7, #16]
   return(result);
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d1e6      	bne.n	801406c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2220      	movs	r2, #32
 80140a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2200      	movs	r2, #0
 80140aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80140ac:	6878      	ldr	r0, [r7, #4]
 80140ae:	f7fe feeb 	bl	8012e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80140b2:	bf00      	nop
 80140b4:	3720      	adds	r7, #32
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}

080140ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80140ba:	b580      	push	{r7, lr}
 80140bc:	b096      	sub	sp, #88	; 0x58
 80140be:	af00      	add	r7, sp, #0
 80140c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140d2:	2b22      	cmp	r3, #34	; 0x22
 80140d4:	f040 8095 	bne.w	8014202 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80140e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80140e6:	b2d9      	uxtb	r1, r3
 80140e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80140ec:	b2da      	uxtb	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140f2:	400a      	ands	r2, r1
 80140f4:	b2d2      	uxtb	r2, r2
 80140f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140fc:	1c5a      	adds	r2, r3, #1
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014108:	b29b      	uxth	r3, r3
 801410a:	3b01      	subs	r3, #1
 801410c:	b29a      	uxth	r2, r3
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801411a:	b29b      	uxth	r3, r3
 801411c:	2b00      	cmp	r3, #0
 801411e:	d178      	bne.n	8014212 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014128:	e853 3f00 	ldrex	r3, [r3]
 801412c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014134:	653b      	str	r3, [r7, #80]	; 0x50
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	461a      	mov	r2, r3
 801413c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801413e:	647b      	str	r3, [r7, #68]	; 0x44
 8014140:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014146:	e841 2300 	strex	r3, r2, [r1]
 801414a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801414e:	2b00      	cmp	r3, #0
 8014150:	d1e6      	bne.n	8014120 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	3308      	adds	r3, #8
 8014158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	e853 3f00 	ldrex	r3, [r3]
 8014160:	623b      	str	r3, [r7, #32]
   return(result);
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	f023 0301 	bic.w	r3, r3, #1
 8014168:	64fb      	str	r3, [r7, #76]	; 0x4c
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	3308      	adds	r3, #8
 8014170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014172:	633a      	str	r2, [r7, #48]	; 0x30
 8014174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801417a:	e841 2300 	strex	r3, r2, [r1]
 801417e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014182:	2b00      	cmp	r3, #0
 8014184:	d1e5      	bne.n	8014152 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2220      	movs	r2, #32
 801418a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2200      	movs	r2, #0
 8014192:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014198:	2b01      	cmp	r3, #1
 801419a:	d12e      	bne.n	80141fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2200      	movs	r2, #0
 80141a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	e853 3f00 	ldrex	r3, [r3]
 80141ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f023 0310 	bic.w	r3, r3, #16
 80141b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	461a      	mov	r2, r3
 80141be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141c0:	61fb      	str	r3, [r7, #28]
 80141c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141c4:	69b9      	ldr	r1, [r7, #24]
 80141c6:	69fa      	ldr	r2, [r7, #28]
 80141c8:	e841 2300 	strex	r3, r2, [r1]
 80141cc:	617b      	str	r3, [r7, #20]
   return(result);
 80141ce:	697b      	ldr	r3, [r7, #20]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d1e6      	bne.n	80141a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	69db      	ldr	r3, [r3, #28]
 80141da:	f003 0310 	and.w	r3, r3, #16
 80141de:	2b10      	cmp	r3, #16
 80141e0:	d103      	bne.n	80141ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	2210      	movs	r2, #16
 80141e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80141f0:	4619      	mov	r1, r3
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f7fe fe66 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80141f8:	e00b      	b.n	8014212 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f7fe fe4e 	bl	8012e9c <HAL_UART_RxCpltCallback>
}
 8014200:	e007      	b.n	8014212 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	699a      	ldr	r2, [r3, #24]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	f042 0208 	orr.w	r2, r2, #8
 8014210:	619a      	str	r2, [r3, #24]
}
 8014212:	bf00      	nop
 8014214:	3758      	adds	r7, #88	; 0x58
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801421a:	b580      	push	{r7, lr}
 801421c:	b096      	sub	sp, #88	; 0x58
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014228:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014232:	2b22      	cmp	r3, #34	; 0x22
 8014234:	f040 8095 	bne.w	8014362 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801423e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014246:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8014248:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801424c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014250:	4013      	ands	r3, r2
 8014252:	b29a      	uxth	r2, r3
 8014254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014256:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801425c:	1c9a      	adds	r2, r3, #2
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014268:	b29b      	uxth	r3, r3
 801426a:	3b01      	subs	r3, #1
 801426c:	b29a      	uxth	r2, r3
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801427a:	b29b      	uxth	r3, r3
 801427c:	2b00      	cmp	r3, #0
 801427e:	d178      	bne.n	8014372 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014288:	e853 3f00 	ldrex	r3, [r3]
 801428c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	461a      	mov	r2, r3
 801429c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801429e:	643b      	str	r3, [r7, #64]	; 0x40
 80142a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80142a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80142a6:	e841 2300 	strex	r3, r2, [r1]
 80142aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80142ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d1e6      	bne.n	8014280 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	3308      	adds	r3, #8
 80142b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ba:	6a3b      	ldr	r3, [r7, #32]
 80142bc:	e853 3f00 	ldrex	r3, [r3]
 80142c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	f023 0301 	bic.w	r3, r3, #1
 80142c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	3308      	adds	r3, #8
 80142d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80142d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80142d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142da:	e841 2300 	strex	r3, r2, [r1]
 80142de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80142e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d1e5      	bne.n	80142b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2220      	movs	r2, #32
 80142ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2200      	movs	r2, #0
 80142f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d12e      	bne.n	801435a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	2200      	movs	r2, #0
 8014300:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	e853 3f00 	ldrex	r3, [r3]
 801430e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	f023 0310 	bic.w	r3, r3, #16
 8014316:	647b      	str	r3, [r7, #68]	; 0x44
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	461a      	mov	r2, r3
 801431e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014320:	61bb      	str	r3, [r7, #24]
 8014322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014324:	6979      	ldr	r1, [r7, #20]
 8014326:	69ba      	ldr	r2, [r7, #24]
 8014328:	e841 2300 	strex	r3, r2, [r1]
 801432c:	613b      	str	r3, [r7, #16]
   return(result);
 801432e:	693b      	ldr	r3, [r7, #16]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d1e6      	bne.n	8014302 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	69db      	ldr	r3, [r3, #28]
 801433a:	f003 0310 	and.w	r3, r3, #16
 801433e:	2b10      	cmp	r3, #16
 8014340:	d103      	bne.n	801434a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2210      	movs	r2, #16
 8014348:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014350:	4619      	mov	r1, r3
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7fe fdb6 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014358:	e00b      	b.n	8014372 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f7fe fd9e 	bl	8012e9c <HAL_UART_RxCpltCallback>
}
 8014360:	e007      	b.n	8014372 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	699a      	ldr	r2, [r3, #24]
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	f042 0208 	orr.w	r2, r2, #8
 8014370:	619a      	str	r2, [r3, #24]
}
 8014372:	bf00      	nop
 8014374:	3758      	adds	r7, #88	; 0x58
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}
	...

0801437c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b0a6      	sub	sp, #152	; 0x98
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801438a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	69db      	ldr	r3, [r3, #28]
 8014394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	689b      	ldr	r3, [r3, #8]
 80143a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143b2:	2b22      	cmp	r3, #34	; 0x22
 80143b4:	f040 814d 	bne.w	8014652 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80143be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80143c2:	e0f4      	b.n	80145ae <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80143ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80143d2:	b2d9      	uxtb	r1, r3
 80143d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80143d8:	b2da      	uxtb	r2, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143de:	400a      	ands	r2, r1
 80143e0:	b2d2      	uxtb	r2, r2
 80143e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143e8:	1c5a      	adds	r2, r3, #1
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80143f4:	b29b      	uxth	r3, r3
 80143f6:	3b01      	subs	r3, #1
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	69db      	ldr	r3, [r3, #28]
 8014406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801440a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801440e:	f003 0307 	and.w	r3, r3, #7
 8014412:	2b00      	cmp	r3, #0
 8014414:	d053      	beq.n	80144be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014416:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801441a:	f003 0301 	and.w	r3, r3, #1
 801441e:	2b00      	cmp	r3, #0
 8014420:	d011      	beq.n	8014446 <UART_RxISR_8BIT_FIFOEN+0xca>
 8014422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801442a:	2b00      	cmp	r3, #0
 801442c:	d00b      	beq.n	8014446 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	2201      	movs	r2, #1
 8014434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801443c:	f043 0201 	orr.w	r2, r3, #1
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801444a:	f003 0302 	and.w	r3, r3, #2
 801444e:	2b00      	cmp	r3, #0
 8014450:	d011      	beq.n	8014476 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8014452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014456:	f003 0301 	and.w	r3, r3, #1
 801445a:	2b00      	cmp	r3, #0
 801445c:	d00b      	beq.n	8014476 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2202      	movs	r2, #2
 8014464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801446c:	f043 0204 	orr.w	r2, r3, #4
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801447a:	f003 0304 	and.w	r3, r3, #4
 801447e:	2b00      	cmp	r3, #0
 8014480:	d011      	beq.n	80144a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8014482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014486:	f003 0301 	and.w	r3, r3, #1
 801448a:	2b00      	cmp	r3, #0
 801448c:	d00b      	beq.n	80144a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	2204      	movs	r2, #4
 8014494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801449c:	f043 0202 	orr.w	r2, r3, #2
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d006      	beq.n	80144be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f7fe fcfd 	bl	8012eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	2200      	movs	r2, #0
 80144ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d171      	bne.n	80145ae <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144d2:	e853 3f00 	ldrex	r3, [r3]
 80144d6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80144d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80144de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	461a      	mov	r2, r3
 80144e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80144ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80144ee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80144f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80144f4:	e841 2300 	strex	r3, r2, [r1]
 80144f8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80144fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d1e4      	bne.n	80144ca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	3308      	adds	r3, #8
 8014506:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801450a:	e853 3f00 	ldrex	r3, [r3]
 801450e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014512:	4b56      	ldr	r3, [pc, #344]	; (801466c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8014514:	4013      	ands	r3, r2
 8014516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	3308      	adds	r3, #8
 801451e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014520:	657a      	str	r2, [r7, #84]	; 0x54
 8014522:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014524:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014528:	e841 2300 	strex	r3, r2, [r1]
 801452c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014530:	2b00      	cmp	r3, #0
 8014532:	d1e5      	bne.n	8014500 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2220      	movs	r2, #32
 8014538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2200      	movs	r2, #0
 8014540:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014546:	2b01      	cmp	r3, #1
 8014548:	d12e      	bne.n	80145a8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2200      	movs	r2, #0
 801454e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014558:	e853 3f00 	ldrex	r3, [r3]
 801455c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014560:	f023 0310 	bic.w	r3, r3, #16
 8014564:	67bb      	str	r3, [r7, #120]	; 0x78
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	461a      	mov	r2, r3
 801456c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801456e:	643b      	str	r3, [r7, #64]	; 0x40
 8014570:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014572:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014576:	e841 2300 	strex	r3, r2, [r1]
 801457a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801457e:	2b00      	cmp	r3, #0
 8014580:	d1e6      	bne.n	8014550 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	69db      	ldr	r3, [r3, #28]
 8014588:	f003 0310 	and.w	r3, r3, #16
 801458c:	2b10      	cmp	r3, #16
 801458e:	d103      	bne.n	8014598 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	2210      	movs	r2, #16
 8014596:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801459e:	4619      	mov	r1, r3
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f7fe fc8f 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
 80145a6:	e002      	b.n	80145ae <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f7fe fc77 	bl	8012e9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80145ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d006      	beq.n	80145c4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80145b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80145ba:	f003 0320 	and.w	r3, r3, #32
 80145be:	2b00      	cmp	r3, #0
 80145c0:	f47f af00 	bne.w	80143c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80145ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80145ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d045      	beq.n	8014662 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80145dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d23e      	bcs.n	8014662 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	3308      	adds	r3, #8
 80145ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145ec:	6a3b      	ldr	r3, [r7, #32]
 80145ee:	e853 3f00 	ldrex	r3, [r3]
 80145f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80145f4:	69fb      	ldr	r3, [r7, #28]
 80145f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80145fa:	673b      	str	r3, [r7, #112]	; 0x70
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	3308      	adds	r3, #8
 8014602:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014604:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801460a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801460c:	e841 2300 	strex	r3, r2, [r1]
 8014610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014614:	2b00      	cmp	r3, #0
 8014616:	d1e5      	bne.n	80145e4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	4a15      	ldr	r2, [pc, #84]	; (8014670 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 801461c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	e853 3f00 	ldrex	r3, [r3]
 801462a:	60bb      	str	r3, [r7, #8]
   return(result);
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	f043 0320 	orr.w	r3, r3, #32
 8014632:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	461a      	mov	r2, r3
 801463a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801463c:	61bb      	str	r3, [r7, #24]
 801463e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014640:	6979      	ldr	r1, [r7, #20]
 8014642:	69ba      	ldr	r2, [r7, #24]
 8014644:	e841 2300 	strex	r3, r2, [r1]
 8014648:	613b      	str	r3, [r7, #16]
   return(result);
 801464a:	693b      	ldr	r3, [r7, #16]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d1e6      	bne.n	801461e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014650:	e007      	b.n	8014662 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	699a      	ldr	r2, [r3, #24]
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	f042 0208 	orr.w	r2, r2, #8
 8014660:	619a      	str	r2, [r3, #24]
}
 8014662:	bf00      	nop
 8014664:	3798      	adds	r7, #152	; 0x98
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}
 801466a:	bf00      	nop
 801466c:	effffffe 	.word	0xeffffffe
 8014670:	080140bb 	.word	0x080140bb

08014674 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b0a8      	sub	sp, #160	; 0xa0
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014682:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	69db      	ldr	r3, [r3, #28]
 801468c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	689b      	ldr	r3, [r3, #8]
 80146a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146aa:	2b22      	cmp	r3, #34	; 0x22
 80146ac:	f040 8151 	bne.w	8014952 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80146b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80146ba:	e0f8      	b.n	80148ae <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80146ce:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80146d2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80146d6:	4013      	ands	r3, r2
 80146d8:	b29a      	uxth	r2, r3
 80146da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80146de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146e4:	1c9a      	adds	r2, r3, #2
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	3b01      	subs	r3, #1
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	69db      	ldr	r3, [r3, #28]
 8014702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801470a:	f003 0307 	and.w	r3, r3, #7
 801470e:	2b00      	cmp	r3, #0
 8014710:	d053      	beq.n	80147ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014716:	f003 0301 	and.w	r3, r3, #1
 801471a:	2b00      	cmp	r3, #0
 801471c:	d011      	beq.n	8014742 <UART_RxISR_16BIT_FIFOEN+0xce>
 801471e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014726:	2b00      	cmp	r3, #0
 8014728:	d00b      	beq.n	8014742 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	2201      	movs	r2, #1
 8014730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014738:	f043 0201 	orr.w	r2, r3, #1
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014742:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014746:	f003 0302 	and.w	r3, r3, #2
 801474a:	2b00      	cmp	r3, #0
 801474c:	d011      	beq.n	8014772 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801474e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014752:	f003 0301 	and.w	r3, r3, #1
 8014756:	2b00      	cmp	r3, #0
 8014758:	d00b      	beq.n	8014772 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2202      	movs	r2, #2
 8014760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014768:	f043 0204 	orr.w	r2, r3, #4
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014776:	f003 0304 	and.w	r3, r3, #4
 801477a:	2b00      	cmp	r3, #0
 801477c:	d011      	beq.n	80147a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801477e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014782:	f003 0301 	and.w	r3, r3, #1
 8014786:	2b00      	cmp	r3, #0
 8014788:	d00b      	beq.n	80147a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2204      	movs	r2, #4
 8014790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014798:	f043 0202 	orr.w	r2, r3, #2
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d006      	beq.n	80147ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f7fe fb7f 	bl	8012eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	2200      	movs	r2, #0
 80147b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d173      	bne.n	80148ae <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80147ce:	e853 3f00 	ldrex	r3, [r3]
 80147d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80147d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80147d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80147da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	461a      	mov	r2, r3
 80147e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80147e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80147ea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80147ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80147f0:	e841 2300 	strex	r3, r2, [r1]
 80147f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80147f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d1e4      	bne.n	80147c6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	3308      	adds	r3, #8
 8014802:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014806:	e853 3f00 	ldrex	r3, [r3]
 801480a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801480c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801480e:	4b57      	ldr	r3, [pc, #348]	; (801496c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8014810:	4013      	ands	r3, r2
 8014812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	3308      	adds	r3, #8
 801481c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014820:	65ba      	str	r2, [r7, #88]	; 0x58
 8014822:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014828:	e841 2300 	strex	r3, r2, [r1]
 801482c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801482e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014830:	2b00      	cmp	r3, #0
 8014832:	d1e3      	bne.n	80147fc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2220      	movs	r2, #32
 8014838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2200      	movs	r2, #0
 8014840:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014846:	2b01      	cmp	r3, #1
 8014848:	d12e      	bne.n	80148a8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	2200      	movs	r2, #0
 801484e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014858:	e853 3f00 	ldrex	r3, [r3]
 801485c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014860:	f023 0310 	bic.w	r3, r3, #16
 8014864:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	461a      	mov	r2, r3
 801486c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801486e:	647b      	str	r3, [r7, #68]	; 0x44
 8014870:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014876:	e841 2300 	strex	r3, r2, [r1]
 801487a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801487e:	2b00      	cmp	r3, #0
 8014880:	d1e6      	bne.n	8014850 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	69db      	ldr	r3, [r3, #28]
 8014888:	f003 0310 	and.w	r3, r3, #16
 801488c:	2b10      	cmp	r3, #16
 801488e:	d103      	bne.n	8014898 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	2210      	movs	r2, #16
 8014896:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801489e:	4619      	mov	r1, r3
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f7fe fb0f 	bl	8012ec4 <HAL_UARTEx_RxEventCallback>
 80148a6:	e002      	b.n	80148ae <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7fe faf7 	bl	8012e9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80148ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d006      	beq.n	80148c4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80148b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80148ba:	f003 0320 	and.w	r3, r3, #32
 80148be:	2b00      	cmp	r3, #0
 80148c0:	f47f aefc 	bne.w	80146bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80148ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80148ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d045      	beq.n	8014962 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80148dc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d23e      	bcs.n	8014962 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	3308      	adds	r3, #8
 80148ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	e853 3f00 	ldrex	r3, [r3]
 80148f2:	623b      	str	r3, [r7, #32]
   return(result);
 80148f4:	6a3b      	ldr	r3, [r7, #32]
 80148f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80148fa:	677b      	str	r3, [r7, #116]	; 0x74
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	3308      	adds	r3, #8
 8014902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014904:	633a      	str	r2, [r7, #48]	; 0x30
 8014906:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801490a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801490c:	e841 2300 	strex	r3, r2, [r1]
 8014910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014914:	2b00      	cmp	r3, #0
 8014916:	d1e5      	bne.n	80148e4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	4a15      	ldr	r2, [pc, #84]	; (8014970 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 801491c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	e853 3f00 	ldrex	r3, [r3]
 801492a:	60fb      	str	r3, [r7, #12]
   return(result);
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	f043 0320 	orr.w	r3, r3, #32
 8014932:	673b      	str	r3, [r7, #112]	; 0x70
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	461a      	mov	r2, r3
 801493a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801493c:	61fb      	str	r3, [r7, #28]
 801493e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014940:	69b9      	ldr	r1, [r7, #24]
 8014942:	69fa      	ldr	r2, [r7, #28]
 8014944:	e841 2300 	strex	r3, r2, [r1]
 8014948:	617b      	str	r3, [r7, #20]
   return(result);
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d1e6      	bne.n	801491e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014950:	e007      	b.n	8014962 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	699a      	ldr	r2, [r3, #24]
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	f042 0208 	orr.w	r2, r2, #8
 8014960:	619a      	str	r2, [r3, #24]
}
 8014962:	bf00      	nop
 8014964:	37a0      	adds	r7, #160	; 0xa0
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	effffffe 	.word	0xeffffffe
 8014970:	0801421b 	.word	0x0801421b

08014974 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014974:	b480      	push	{r7}
 8014976:	b083      	sub	sp, #12
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801497c:	bf00      	nop
 801497e:	370c      	adds	r7, #12
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr

08014988 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014988:	b480      	push	{r7}
 801498a:	b083      	sub	sp, #12
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014990:	bf00      	nop
 8014992:	370c      	adds	r7, #12
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr

0801499c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801499c:	b480      	push	{r7}
 801499e:	b083      	sub	sp, #12
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80149a4:	bf00      	nop
 80149a6:	370c      	adds	r7, #12
 80149a8:	46bd      	mov	sp, r7
 80149aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ae:	4770      	bx	lr

080149b0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b084      	sub	sp, #16
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d101      	bne.n	80149c6 <HAL_UARTEx_EnableFifoMode+0x16>
 80149c2:	2302      	movs	r3, #2
 80149c4:	e02b      	b.n	8014a1e <HAL_UARTEx_EnableFifoMode+0x6e>
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2201      	movs	r2, #1
 80149ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2224      	movs	r2, #36	; 0x24
 80149d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	f022 0201 	bic.w	r2, r2, #1
 80149ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80149f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80149fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	68fa      	ldr	r2, [r7, #12]
 8014a04:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f000 f8c2 	bl	8014b90 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2220      	movs	r2, #32
 8014a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2200      	movs	r2, #0
 8014a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014a1c:	2300      	movs	r3, #0
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3710      	adds	r7, #16
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}

08014a26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014a26:	b480      	push	{r7}
 8014a28:	b085      	sub	sp, #20
 8014a2a:	af00      	add	r7, sp, #0
 8014a2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d101      	bne.n	8014a3c <HAL_UARTEx_DisableFifoMode+0x16>
 8014a38:	2302      	movs	r3, #2
 8014a3a:	e027      	b.n	8014a8c <HAL_UARTEx_DisableFifoMode+0x66>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2201      	movs	r2, #1
 8014a40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2224      	movs	r2, #36	; 0x24
 8014a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	681a      	ldr	r2, [r3, #0]
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	f022 0201 	bic.w	r2, r2, #1
 8014a62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014a6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	2200      	movs	r2, #0
 8014a70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	68fa      	ldr	r2, [r7, #12]
 8014a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	2220      	movs	r2, #32
 8014a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2200      	movs	r2, #0
 8014a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014a8a:	2300      	movs	r3, #0
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3714      	adds	r7, #20
 8014a90:	46bd      	mov	sp, r7
 8014a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a96:	4770      	bx	lr

08014a98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b084      	sub	sp, #16
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
 8014aa0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d101      	bne.n	8014ab0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014aac:	2302      	movs	r3, #2
 8014aae:	e02d      	b.n	8014b0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2224      	movs	r2, #36	; 0x24
 8014abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	681a      	ldr	r2, [r3, #0]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	f022 0201 	bic.w	r2, r2, #1
 8014ad6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	689b      	ldr	r3, [r3, #8]
 8014ade:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	683a      	ldr	r2, [r7, #0]
 8014ae8:	430a      	orrs	r2, r1
 8014aea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 f84f 	bl	8014b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	68fa      	ldr	r2, [r7, #12]
 8014af8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2220      	movs	r2, #32
 8014afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2200      	movs	r2, #0
 8014b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014b0a:	2300      	movs	r3, #0
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3710      	adds	r7, #16
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}

08014b14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d101      	bne.n	8014b2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014b28:	2302      	movs	r3, #2
 8014b2a:	e02d      	b.n	8014b88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2201      	movs	r2, #1
 8014b30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2224      	movs	r2, #36	; 0x24
 8014b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	681a      	ldr	r2, [r3, #0]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	f022 0201 	bic.w	r2, r2, #1
 8014b52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	689b      	ldr	r3, [r3, #8]
 8014b5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	683a      	ldr	r2, [r7, #0]
 8014b64:	430a      	orrs	r2, r1
 8014b66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f000 f811 	bl	8014b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	68fa      	ldr	r2, [r7, #12]
 8014b74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	2220      	movs	r2, #32
 8014b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2200      	movs	r2, #0
 8014b82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014b86:	2300      	movs	r3, #0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014b90:	b480      	push	{r7}
 8014b92:	b085      	sub	sp, #20
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d108      	bne.n	8014bb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2201      	movs	r2, #1
 8014ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2201      	movs	r2, #1
 8014bac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014bb0:	e031      	b.n	8014c16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014bb2:	2310      	movs	r3, #16
 8014bb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014bb6:	2310      	movs	r3, #16
 8014bb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	689b      	ldr	r3, [r3, #8]
 8014bc0:	0e5b      	lsrs	r3, r3, #25
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	f003 0307 	and.w	r3, r3, #7
 8014bc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	689b      	ldr	r3, [r3, #8]
 8014bd0:	0f5b      	lsrs	r3, r3, #29
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	f003 0307 	and.w	r3, r3, #7
 8014bd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014bda:	7bbb      	ldrb	r3, [r7, #14]
 8014bdc:	7b3a      	ldrb	r2, [r7, #12]
 8014bde:	4911      	ldr	r1, [pc, #68]	; (8014c24 <UARTEx_SetNbDataToProcess+0x94>)
 8014be0:	5c8a      	ldrb	r2, [r1, r2]
 8014be2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014be6:	7b3a      	ldrb	r2, [r7, #12]
 8014be8:	490f      	ldr	r1, [pc, #60]	; (8014c28 <UARTEx_SetNbDataToProcess+0x98>)
 8014bea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8014bf0:	b29a      	uxth	r2, r3
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014bf8:	7bfb      	ldrb	r3, [r7, #15]
 8014bfa:	7b7a      	ldrb	r2, [r7, #13]
 8014bfc:	4909      	ldr	r1, [pc, #36]	; (8014c24 <UARTEx_SetNbDataToProcess+0x94>)
 8014bfe:	5c8a      	ldrb	r2, [r1, r2]
 8014c00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014c04:	7b7a      	ldrb	r2, [r7, #13]
 8014c06:	4908      	ldr	r1, [pc, #32]	; (8014c28 <UARTEx_SetNbDataToProcess+0x98>)
 8014c08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014c0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014c16:	bf00      	nop
 8014c18:	3714      	adds	r7, #20
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c20:	4770      	bx	lr
 8014c22:	bf00      	nop
 8014c24:	08034170 	.word	0x08034170
 8014c28:	08034178 	.word	0x08034178

08014c2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014c2c:	b084      	sub	sp, #16
 8014c2e:	b580      	push	{r7, lr}
 8014c30:	b084      	sub	sp, #16
 8014c32:	af00      	add	r7, sp, #0
 8014c34:	6078      	str	r0, [r7, #4]
 8014c36:	f107 001c 	add.w	r0, r7, #28
 8014c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c40:	2b01      	cmp	r3, #1
 8014c42:	d120      	bne.n	8014c86 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	68da      	ldr	r2, [r3, #12]
 8014c54:	4b2a      	ldr	r3, [pc, #168]	; (8014d00 <USB_CoreInit+0xd4>)
 8014c56:	4013      	ands	r3, r2
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	68db      	ldr	r3, [r3, #12]
 8014c60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c6a:	2b01      	cmp	r3, #1
 8014c6c:	d105      	bne.n	8014c7a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f001 fb4e 	bl	801631c <USB_CoreReset>
 8014c80:	4603      	mov	r3, r0
 8014c82:	73fb      	strb	r3, [r7, #15]
 8014c84:	e01a      	b.n	8014cbc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014c92:	6878      	ldr	r0, [r7, #4]
 8014c94:	f001 fb42 	bl	801631c <USB_CoreReset>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d106      	bne.n	8014cb0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ca6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	639a      	str	r2, [r3, #56]	; 0x38
 8014cae:	e005      	b.n	8014cbc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	d116      	bne.n	8014cf0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014cc6:	b29a      	uxth	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014cd0:	4b0c      	ldr	r3, [pc, #48]	; (8014d04 <USB_CoreInit+0xd8>)
 8014cd2:	4313      	orrs	r3, r2
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	689b      	ldr	r3, [r3, #8]
 8014cdc:	f043 0206 	orr.w	r2, r3, #6
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	689b      	ldr	r3, [r3, #8]
 8014ce8:	f043 0220 	orr.w	r2, r3, #32
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3710      	adds	r7, #16
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014cfc:	b004      	add	sp, #16
 8014cfe:	4770      	bx	lr
 8014d00:	ffbdffbf 	.word	0xffbdffbf
 8014d04:	03ee0000 	.word	0x03ee0000

08014d08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014d08:	b480      	push	{r7}
 8014d0a:	b087      	sub	sp, #28
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	60f8      	str	r0, [r7, #12]
 8014d10:	60b9      	str	r1, [r7, #8]
 8014d12:	4613      	mov	r3, r2
 8014d14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014d16:	79fb      	ldrb	r3, [r7, #7]
 8014d18:	2b02      	cmp	r3, #2
 8014d1a:	d165      	bne.n	8014de8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	4a41      	ldr	r2, [pc, #260]	; (8014e24 <USB_SetTurnaroundTime+0x11c>)
 8014d20:	4293      	cmp	r3, r2
 8014d22:	d906      	bls.n	8014d32 <USB_SetTurnaroundTime+0x2a>
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	4a40      	ldr	r2, [pc, #256]	; (8014e28 <USB_SetTurnaroundTime+0x120>)
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d202      	bcs.n	8014d32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014d2c:	230f      	movs	r3, #15
 8014d2e:	617b      	str	r3, [r7, #20]
 8014d30:	e062      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	4a3c      	ldr	r2, [pc, #240]	; (8014e28 <USB_SetTurnaroundTime+0x120>)
 8014d36:	4293      	cmp	r3, r2
 8014d38:	d306      	bcc.n	8014d48 <USB_SetTurnaroundTime+0x40>
 8014d3a:	68bb      	ldr	r3, [r7, #8]
 8014d3c:	4a3b      	ldr	r2, [pc, #236]	; (8014e2c <USB_SetTurnaroundTime+0x124>)
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	d202      	bcs.n	8014d48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014d42:	230e      	movs	r3, #14
 8014d44:	617b      	str	r3, [r7, #20]
 8014d46:	e057      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	4a38      	ldr	r2, [pc, #224]	; (8014e2c <USB_SetTurnaroundTime+0x124>)
 8014d4c:	4293      	cmp	r3, r2
 8014d4e:	d306      	bcc.n	8014d5e <USB_SetTurnaroundTime+0x56>
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	4a37      	ldr	r2, [pc, #220]	; (8014e30 <USB_SetTurnaroundTime+0x128>)
 8014d54:	4293      	cmp	r3, r2
 8014d56:	d202      	bcs.n	8014d5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014d58:	230d      	movs	r3, #13
 8014d5a:	617b      	str	r3, [r7, #20]
 8014d5c:	e04c      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	4a33      	ldr	r2, [pc, #204]	; (8014e30 <USB_SetTurnaroundTime+0x128>)
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d306      	bcc.n	8014d74 <USB_SetTurnaroundTime+0x6c>
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	4a32      	ldr	r2, [pc, #200]	; (8014e34 <USB_SetTurnaroundTime+0x12c>)
 8014d6a:	4293      	cmp	r3, r2
 8014d6c:	d802      	bhi.n	8014d74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014d6e:	230c      	movs	r3, #12
 8014d70:	617b      	str	r3, [r7, #20]
 8014d72:	e041      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	4a2f      	ldr	r2, [pc, #188]	; (8014e34 <USB_SetTurnaroundTime+0x12c>)
 8014d78:	4293      	cmp	r3, r2
 8014d7a:	d906      	bls.n	8014d8a <USB_SetTurnaroundTime+0x82>
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	4a2e      	ldr	r2, [pc, #184]	; (8014e38 <USB_SetTurnaroundTime+0x130>)
 8014d80:	4293      	cmp	r3, r2
 8014d82:	d802      	bhi.n	8014d8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014d84:	230b      	movs	r3, #11
 8014d86:	617b      	str	r3, [r7, #20]
 8014d88:	e036      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	4a2a      	ldr	r2, [pc, #168]	; (8014e38 <USB_SetTurnaroundTime+0x130>)
 8014d8e:	4293      	cmp	r3, r2
 8014d90:	d906      	bls.n	8014da0 <USB_SetTurnaroundTime+0x98>
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	4a29      	ldr	r2, [pc, #164]	; (8014e3c <USB_SetTurnaroundTime+0x134>)
 8014d96:	4293      	cmp	r3, r2
 8014d98:	d802      	bhi.n	8014da0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014d9a:	230a      	movs	r3, #10
 8014d9c:	617b      	str	r3, [r7, #20]
 8014d9e:	e02b      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014da0:	68bb      	ldr	r3, [r7, #8]
 8014da2:	4a26      	ldr	r2, [pc, #152]	; (8014e3c <USB_SetTurnaroundTime+0x134>)
 8014da4:	4293      	cmp	r3, r2
 8014da6:	d906      	bls.n	8014db6 <USB_SetTurnaroundTime+0xae>
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	4a25      	ldr	r2, [pc, #148]	; (8014e40 <USB_SetTurnaroundTime+0x138>)
 8014dac:	4293      	cmp	r3, r2
 8014dae:	d202      	bcs.n	8014db6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014db0:	2309      	movs	r3, #9
 8014db2:	617b      	str	r3, [r7, #20]
 8014db4:	e020      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	4a21      	ldr	r2, [pc, #132]	; (8014e40 <USB_SetTurnaroundTime+0x138>)
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d306      	bcc.n	8014dcc <USB_SetTurnaroundTime+0xc4>
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	4a20      	ldr	r2, [pc, #128]	; (8014e44 <USB_SetTurnaroundTime+0x13c>)
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	d802      	bhi.n	8014dcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014dc6:	2308      	movs	r3, #8
 8014dc8:	617b      	str	r3, [r7, #20]
 8014dca:	e015      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	4a1d      	ldr	r2, [pc, #116]	; (8014e44 <USB_SetTurnaroundTime+0x13c>)
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d906      	bls.n	8014de2 <USB_SetTurnaroundTime+0xda>
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	4a1c      	ldr	r2, [pc, #112]	; (8014e48 <USB_SetTurnaroundTime+0x140>)
 8014dd8:	4293      	cmp	r3, r2
 8014dda:	d202      	bcs.n	8014de2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014ddc:	2307      	movs	r3, #7
 8014dde:	617b      	str	r3, [r7, #20]
 8014de0:	e00a      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014de2:	2306      	movs	r3, #6
 8014de4:	617b      	str	r3, [r7, #20]
 8014de6:	e007      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014de8:	79fb      	ldrb	r3, [r7, #7]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d102      	bne.n	8014df4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014dee:	2309      	movs	r3, #9
 8014df0:	617b      	str	r3, [r7, #20]
 8014df2:	e001      	b.n	8014df8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014df4:	2309      	movs	r3, #9
 8014df6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	68db      	ldr	r3, [r3, #12]
 8014dfc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	68da      	ldr	r2, [r3, #12]
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	029b      	lsls	r3, r3, #10
 8014e0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014e10:	431a      	orrs	r2, r3
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014e16:	2300      	movs	r3, #0
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	371c      	adds	r7, #28
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e22:	4770      	bx	lr
 8014e24:	00d8acbf 	.word	0x00d8acbf
 8014e28:	00e4e1c0 	.word	0x00e4e1c0
 8014e2c:	00f42400 	.word	0x00f42400
 8014e30:	01067380 	.word	0x01067380
 8014e34:	011a499f 	.word	0x011a499f
 8014e38:	01312cff 	.word	0x01312cff
 8014e3c:	014ca43f 	.word	0x014ca43f
 8014e40:	016e3600 	.word	0x016e3600
 8014e44:	01a6ab1f 	.word	0x01a6ab1f
 8014e48:	01e84800 	.word	0x01e84800

08014e4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b083      	sub	sp, #12
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	689b      	ldr	r3, [r3, #8]
 8014e58:	f043 0201 	orr.w	r2, r3, #1
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014e60:	2300      	movs	r3, #0
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	370c      	adds	r7, #12
 8014e66:	46bd      	mov	sp, r7
 8014e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6c:	4770      	bx	lr

08014e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014e6e:	b480      	push	{r7}
 8014e70:	b083      	sub	sp, #12
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	689b      	ldr	r3, [r3, #8]
 8014e7a:	f023 0201 	bic.w	r2, r3, #1
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014e82:	2300      	movs	r3, #0
}
 8014e84:	4618      	mov	r0, r3
 8014e86:	370c      	adds	r7, #12
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8e:	4770      	bx	lr

08014e90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	460b      	mov	r3, r1
 8014e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	68db      	ldr	r3, [r3, #12]
 8014ea4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014eac:	78fb      	ldrb	r3, [r7, #3]
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d115      	bne.n	8014ede <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	68db      	ldr	r3, [r3, #12]
 8014eb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014ebe:	2001      	movs	r0, #1
 8014ec0:	f7f3 fe68 	bl	8008b94 <HAL_Delay>
      ms++;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f001 f995 	bl	80161fa <USB_GetMode>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d01e      	beq.n	8014f14 <USB_SetCurrentMode+0x84>
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	2b31      	cmp	r3, #49	; 0x31
 8014eda:	d9f0      	bls.n	8014ebe <USB_SetCurrentMode+0x2e>
 8014edc:	e01a      	b.n	8014f14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014ede:	78fb      	ldrb	r3, [r7, #3]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d115      	bne.n	8014f10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	68db      	ldr	r3, [r3, #12]
 8014ee8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014ef0:	2001      	movs	r0, #1
 8014ef2:	f7f3 fe4f 	bl	8008b94 <HAL_Delay>
      ms++;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	3301      	adds	r3, #1
 8014efa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f001 f97c 	bl	80161fa <USB_GetMode>
 8014f02:	4603      	mov	r3, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d005      	beq.n	8014f14 <USB_SetCurrentMode+0x84>
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2b31      	cmp	r3, #49	; 0x31
 8014f0c:	d9f0      	bls.n	8014ef0 <USB_SetCurrentMode+0x60>
 8014f0e:	e001      	b.n	8014f14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014f10:	2301      	movs	r3, #1
 8014f12:	e005      	b.n	8014f20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	2b32      	cmp	r3, #50	; 0x32
 8014f18:	d101      	bne.n	8014f1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	e000      	b.n	8014f20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014f1e:	2300      	movs	r3, #0
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3710      	adds	r7, #16
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}

08014f28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014f28:	b084      	sub	sp, #16
 8014f2a:	b580      	push	{r7, lr}
 8014f2c:	b086      	sub	sp, #24
 8014f2e:	af00      	add	r7, sp, #0
 8014f30:	6078      	str	r0, [r7, #4]
 8014f32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014f42:	2300      	movs	r3, #0
 8014f44:	613b      	str	r3, [r7, #16]
 8014f46:	e009      	b.n	8014f5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	3340      	adds	r3, #64	; 0x40
 8014f4e:	009b      	lsls	r3, r3, #2
 8014f50:	4413      	add	r3, r2
 8014f52:	2200      	movs	r2, #0
 8014f54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	3301      	adds	r3, #1
 8014f5a:	613b      	str	r3, [r7, #16]
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	2b0e      	cmp	r3, #14
 8014f60:	d9f2      	bls.n	8014f48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d11c      	bne.n	8014fa2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	68fa      	ldr	r2, [r7, #12]
 8014f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014f76:	f043 0302 	orr.w	r3, r3, #2
 8014f7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	601a      	str	r2, [r3, #0]
 8014fa0:	e005      	b.n	8014fae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014fc8:	461a      	mov	r2, r3
 8014fca:	680b      	ldr	r3, [r1, #0]
 8014fcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fd0:	2b01      	cmp	r3, #1
 8014fd2:	d10c      	bne.n	8014fee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d104      	bne.n	8014fe4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014fda:	2100      	movs	r1, #0
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f000 f961 	bl	80152a4 <USB_SetDevSpeed>
 8014fe2:	e008      	b.n	8014ff6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014fe4:	2101      	movs	r1, #1
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f000 f95c 	bl	80152a4 <USB_SetDevSpeed>
 8014fec:	e003      	b.n	8014ff6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014fee:	2103      	movs	r1, #3
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f000 f957 	bl	80152a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014ff6:	2110      	movs	r1, #16
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f000 f8f3 	bl	80151e4 <USB_FlushTxFifo>
 8014ffe:	4603      	mov	r3, r0
 8015000:	2b00      	cmp	r3, #0
 8015002:	d001      	beq.n	8015008 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8015004:	2301      	movs	r3, #1
 8015006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f000 f91d 	bl	8015248 <USB_FlushRxFifo>
 801500e:	4603      	mov	r3, r0
 8015010:	2b00      	cmp	r3, #0
 8015012:	d001      	beq.n	8015018 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8015014:	2301      	movs	r3, #1
 8015016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801501e:	461a      	mov	r2, r3
 8015020:	2300      	movs	r3, #0
 8015022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801502a:	461a      	mov	r2, r3
 801502c:	2300      	movs	r3, #0
 801502e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015036:	461a      	mov	r2, r3
 8015038:	2300      	movs	r3, #0
 801503a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801503c:	2300      	movs	r3, #0
 801503e:	613b      	str	r3, [r7, #16]
 8015040:	e043      	b.n	80150ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	015a      	lsls	r2, r3, #5
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	4413      	add	r3, r2
 801504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015058:	d118      	bne.n	801508c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d10a      	bne.n	8015076 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015060:	693b      	ldr	r3, [r7, #16]
 8015062:	015a      	lsls	r2, r3, #5
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	4413      	add	r3, r2
 8015068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801506c:	461a      	mov	r2, r3
 801506e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015072:	6013      	str	r3, [r2, #0]
 8015074:	e013      	b.n	801509e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	015a      	lsls	r2, r3, #5
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	4413      	add	r3, r2
 801507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015082:	461a      	mov	r2, r3
 8015084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015088:	6013      	str	r3, [r2, #0]
 801508a:	e008      	b.n	801509e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801508c:	693b      	ldr	r3, [r7, #16]
 801508e:	015a      	lsls	r2, r3, #5
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	4413      	add	r3, r2
 8015094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015098:	461a      	mov	r2, r3
 801509a:	2300      	movs	r3, #0
 801509c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	015a      	lsls	r2, r3, #5
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	4413      	add	r3, r2
 80150a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150aa:	461a      	mov	r2, r3
 80150ac:	2300      	movs	r3, #0
 80150ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	015a      	lsls	r2, r3, #5
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	4413      	add	r3, r2
 80150b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150bc:	461a      	mov	r2, r3
 80150be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80150c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	3301      	adds	r3, #1
 80150c8:	613b      	str	r3, [r7, #16]
 80150ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150cc:	693a      	ldr	r2, [r7, #16]
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d3b7      	bcc.n	8015042 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80150d2:	2300      	movs	r3, #0
 80150d4:	613b      	str	r3, [r7, #16]
 80150d6:	e043      	b.n	8015160 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80150d8:	693b      	ldr	r3, [r7, #16]
 80150da:	015a      	lsls	r2, r3, #5
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	4413      	add	r3, r2
 80150e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80150ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80150ee:	d118      	bne.n	8015122 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d10a      	bne.n	801510c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	015a      	lsls	r2, r3, #5
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	4413      	add	r3, r2
 80150fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015102:	461a      	mov	r2, r3
 8015104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015108:	6013      	str	r3, [r2, #0]
 801510a:	e013      	b.n	8015134 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	015a      	lsls	r2, r3, #5
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	4413      	add	r3, r2
 8015114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015118:	461a      	mov	r2, r3
 801511a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801511e:	6013      	str	r3, [r2, #0]
 8015120:	e008      	b.n	8015134 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	015a      	lsls	r2, r3, #5
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	4413      	add	r3, r2
 801512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801512e:	461a      	mov	r2, r3
 8015130:	2300      	movs	r3, #0
 8015132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	015a      	lsls	r2, r3, #5
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	4413      	add	r3, r2
 801513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015140:	461a      	mov	r2, r3
 8015142:	2300      	movs	r3, #0
 8015144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	015a      	lsls	r2, r3, #5
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	4413      	add	r3, r2
 801514e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015152:	461a      	mov	r2, r3
 8015154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	3301      	adds	r3, #1
 801515e:	613b      	str	r3, [r7, #16]
 8015160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015162:	693a      	ldr	r2, [r7, #16]
 8015164:	429a      	cmp	r2, r3
 8015166:	d3b7      	bcc.n	80150d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801516e:	691b      	ldr	r3, [r3, #16]
 8015170:	68fa      	ldr	r2, [r7, #12]
 8015172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801517a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2200      	movs	r2, #0
 8015180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015188:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801518c:	2b00      	cmp	r3, #0
 801518e:	d105      	bne.n	801519c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	699b      	ldr	r3, [r3, #24]
 8015194:	f043 0210 	orr.w	r2, r3, #16
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	699a      	ldr	r2, [r3, #24]
 80151a0:	4b0e      	ldr	r3, [pc, #56]	; (80151dc <USB_DevInit+0x2b4>)
 80151a2:	4313      	orrs	r3, r2
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80151a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d005      	beq.n	80151ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	699b      	ldr	r3, [r3, #24]
 80151b2:	f043 0208 	orr.w	r2, r3, #8
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80151ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80151bc:	2b01      	cmp	r3, #1
 80151be:	d105      	bne.n	80151cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	699a      	ldr	r2, [r3, #24]
 80151c4:	4b06      	ldr	r3, [pc, #24]	; (80151e0 <USB_DevInit+0x2b8>)
 80151c6:	4313      	orrs	r3, r2
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80151cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3718      	adds	r7, #24
 80151d2:	46bd      	mov	sp, r7
 80151d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80151d8:	b004      	add	sp, #16
 80151da:	4770      	bx	lr
 80151dc:	803c3800 	.word	0x803c3800
 80151e0:	40000004 	.word	0x40000004

080151e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b085      	sub	sp, #20
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80151ee:	2300      	movs	r3, #0
 80151f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	3301      	adds	r3, #1
 80151f6:	60fb      	str	r3, [r7, #12]
 80151f8:	4a12      	ldr	r2, [pc, #72]	; (8015244 <USB_FlushTxFifo+0x60>)
 80151fa:	4293      	cmp	r3, r2
 80151fc:	d901      	bls.n	8015202 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80151fe:	2303      	movs	r3, #3
 8015200:	e01a      	b.n	8015238 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	691b      	ldr	r3, [r3, #16]
 8015206:	2b00      	cmp	r3, #0
 8015208:	daf3      	bge.n	80151f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801520a:	2300      	movs	r3, #0
 801520c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	019b      	lsls	r3, r3, #6
 8015212:	f043 0220 	orr.w	r2, r3, #32
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	3301      	adds	r3, #1
 801521e:	60fb      	str	r3, [r7, #12]
 8015220:	4a08      	ldr	r2, [pc, #32]	; (8015244 <USB_FlushTxFifo+0x60>)
 8015222:	4293      	cmp	r3, r2
 8015224:	d901      	bls.n	801522a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8015226:	2303      	movs	r3, #3
 8015228:	e006      	b.n	8015238 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	691b      	ldr	r3, [r3, #16]
 801522e:	f003 0320 	and.w	r3, r3, #32
 8015232:	2b20      	cmp	r3, #32
 8015234:	d0f1      	beq.n	801521a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8015236:	2300      	movs	r3, #0
}
 8015238:	4618      	mov	r0, r3
 801523a:	3714      	adds	r7, #20
 801523c:	46bd      	mov	sp, r7
 801523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015242:	4770      	bx	lr
 8015244:	00030d40 	.word	0x00030d40

08015248 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015248:	b480      	push	{r7}
 801524a:	b085      	sub	sp, #20
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015250:	2300      	movs	r3, #0
 8015252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	3301      	adds	r3, #1
 8015258:	60fb      	str	r3, [r7, #12]
 801525a:	4a11      	ldr	r2, [pc, #68]	; (80152a0 <USB_FlushRxFifo+0x58>)
 801525c:	4293      	cmp	r3, r2
 801525e:	d901      	bls.n	8015264 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8015260:	2303      	movs	r3, #3
 8015262:	e017      	b.n	8015294 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	691b      	ldr	r3, [r3, #16]
 8015268:	2b00      	cmp	r3, #0
 801526a:	daf3      	bge.n	8015254 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801526c:	2300      	movs	r3, #0
 801526e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2210      	movs	r2, #16
 8015274:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	3301      	adds	r3, #1
 801527a:	60fb      	str	r3, [r7, #12]
 801527c:	4a08      	ldr	r2, [pc, #32]	; (80152a0 <USB_FlushRxFifo+0x58>)
 801527e:	4293      	cmp	r3, r2
 8015280:	d901      	bls.n	8015286 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8015282:	2303      	movs	r3, #3
 8015284:	e006      	b.n	8015294 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	691b      	ldr	r3, [r3, #16]
 801528a:	f003 0310 	and.w	r3, r3, #16
 801528e:	2b10      	cmp	r3, #16
 8015290:	d0f1      	beq.n	8015276 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8015292:	2300      	movs	r3, #0
}
 8015294:	4618      	mov	r0, r3
 8015296:	3714      	adds	r7, #20
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr
 80152a0:	00030d40 	.word	0x00030d40

080152a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80152a4:	b480      	push	{r7}
 80152a6:	b085      	sub	sp, #20
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	460b      	mov	r3, r1
 80152ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	78fb      	ldrb	r3, [r7, #3]
 80152be:	68f9      	ldr	r1, [r7, #12]
 80152c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80152c4:	4313      	orrs	r3, r2
 80152c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80152c8:	2300      	movs	r3, #0
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3714      	adds	r7, #20
 80152ce:	46bd      	mov	sp, r7
 80152d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d4:	4770      	bx	lr

080152d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80152d6:	b480      	push	{r7}
 80152d8:	b087      	sub	sp, #28
 80152da:	af00      	add	r7, sp, #0
 80152dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80152e8:	689b      	ldr	r3, [r3, #8]
 80152ea:	f003 0306 	and.w	r3, r3, #6
 80152ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d102      	bne.n	80152fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80152f6:	2300      	movs	r3, #0
 80152f8:	75fb      	strb	r3, [r7, #23]
 80152fa:	e00a      	b.n	8015312 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	2b02      	cmp	r3, #2
 8015300:	d002      	beq.n	8015308 <USB_GetDevSpeed+0x32>
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	2b06      	cmp	r3, #6
 8015306:	d102      	bne.n	801530e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015308:	2302      	movs	r3, #2
 801530a:	75fb      	strb	r3, [r7, #23]
 801530c:	e001      	b.n	8015312 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801530e:	230f      	movs	r3, #15
 8015310:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8015312:	7dfb      	ldrb	r3, [r7, #23]
}
 8015314:	4618      	mov	r0, r3
 8015316:	371c      	adds	r7, #28
 8015318:	46bd      	mov	sp, r7
 801531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531e:	4770      	bx	lr

08015320 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015320:	b480      	push	{r7}
 8015322:	b085      	sub	sp, #20
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	785b      	ldrb	r3, [r3, #1]
 8015338:	2b01      	cmp	r3, #1
 801533a:	d139      	bne.n	80153b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015342:	69da      	ldr	r2, [r3, #28]
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	f003 030f 	and.w	r3, r3, #15
 801534c:	2101      	movs	r1, #1
 801534e:	fa01 f303 	lsl.w	r3, r1, r3
 8015352:	b29b      	uxth	r3, r3
 8015354:	68f9      	ldr	r1, [r7, #12]
 8015356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801535a:	4313      	orrs	r3, r2
 801535c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	015a      	lsls	r2, r3, #5
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	4413      	add	r3, r2
 8015366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015370:	2b00      	cmp	r3, #0
 8015372:	d153      	bne.n	801541c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	015a      	lsls	r2, r3, #5
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	4413      	add	r3, r2
 801537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015380:	681a      	ldr	r2, [r3, #0]
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	689b      	ldr	r3, [r3, #8]
 8015386:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	78db      	ldrb	r3, [r3, #3]
 801538e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015390:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	059b      	lsls	r3, r3, #22
 8015396:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015398:	431a      	orrs	r2, r3
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	0159      	lsls	r1, r3, #5
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	440b      	add	r3, r1
 80153a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153a6:	4619      	mov	r1, r3
 80153a8:	4b20      	ldr	r3, [pc, #128]	; (801542c <USB_ActivateEndpoint+0x10c>)
 80153aa:	4313      	orrs	r3, r2
 80153ac:	600b      	str	r3, [r1, #0]
 80153ae:	e035      	b.n	801541c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153b6:	69da      	ldr	r2, [r3, #28]
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	781b      	ldrb	r3, [r3, #0]
 80153bc:	f003 030f 	and.w	r3, r3, #15
 80153c0:	2101      	movs	r1, #1
 80153c2:	fa01 f303 	lsl.w	r3, r1, r3
 80153c6:	041b      	lsls	r3, r3, #16
 80153c8:	68f9      	ldr	r1, [r7, #12]
 80153ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80153ce:	4313      	orrs	r3, r2
 80153d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	015a      	lsls	r2, r3, #5
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	4413      	add	r3, r2
 80153da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d119      	bne.n	801541c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	015a      	lsls	r2, r3, #5
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	4413      	add	r3, r2
 80153f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153f4:	681a      	ldr	r2, [r3, #0]
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	689b      	ldr	r3, [r3, #8]
 80153fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	78db      	ldrb	r3, [r3, #3]
 8015402:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015404:	430b      	orrs	r3, r1
 8015406:	431a      	orrs	r2, r3
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	0159      	lsls	r1, r3, #5
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	440b      	add	r3, r1
 8015410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015414:	4619      	mov	r1, r3
 8015416:	4b05      	ldr	r3, [pc, #20]	; (801542c <USB_ActivateEndpoint+0x10c>)
 8015418:	4313      	orrs	r3, r2
 801541a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801541c:	2300      	movs	r3, #0
}
 801541e:	4618      	mov	r0, r3
 8015420:	3714      	adds	r7, #20
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr
 801542a:	bf00      	nop
 801542c:	10008000 	.word	0x10008000

08015430 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015430:	b480      	push	{r7}
 8015432:	b085      	sub	sp, #20
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	785b      	ldrb	r3, [r3, #1]
 8015448:	2b01      	cmp	r3, #1
 801544a:	d161      	bne.n	8015510 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	015a      	lsls	r2, r3, #5
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	4413      	add	r3, r2
 8015454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801545e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015462:	d11f      	bne.n	80154a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	015a      	lsls	r2, r3, #5
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	4413      	add	r3, r2
 801546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	68ba      	ldr	r2, [r7, #8]
 8015474:	0151      	lsls	r1, r2, #5
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	440a      	add	r2, r1
 801547a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801547e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015482:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	015a      	lsls	r2, r3, #5
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	4413      	add	r3, r2
 801548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	68ba      	ldr	r2, [r7, #8]
 8015494:	0151      	lsls	r1, r2, #5
 8015496:	68fa      	ldr	r2, [r7, #12]
 8015498:	440a      	add	r2, r1
 801549a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801549e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80154a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	f003 030f 	and.w	r3, r3, #15
 80154b4:	2101      	movs	r1, #1
 80154b6:	fa01 f303 	lsl.w	r3, r1, r3
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	43db      	mvns	r3, r3
 80154be:	68f9      	ldr	r1, [r7, #12]
 80154c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80154c4:	4013      	ands	r3, r2
 80154c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80154ce:	69da      	ldr	r2, [r3, #28]
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	f003 030f 	and.w	r3, r3, #15
 80154d8:	2101      	movs	r1, #1
 80154da:	fa01 f303 	lsl.w	r3, r1, r3
 80154de:	b29b      	uxth	r3, r3
 80154e0:	43db      	mvns	r3, r3
 80154e2:	68f9      	ldr	r1, [r7, #12]
 80154e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80154e8:	4013      	ands	r3, r2
 80154ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	015a      	lsls	r2, r3, #5
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	4413      	add	r3, r2
 80154f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154f8:	681a      	ldr	r2, [r3, #0]
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	0159      	lsls	r1, r3, #5
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	440b      	add	r3, r1
 8015502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015506:	4619      	mov	r1, r3
 8015508:	4b35      	ldr	r3, [pc, #212]	; (80155e0 <USB_DeactivateEndpoint+0x1b0>)
 801550a:	4013      	ands	r3, r2
 801550c:	600b      	str	r3, [r1, #0]
 801550e:	e060      	b.n	80155d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	015a      	lsls	r2, r3, #5
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	4413      	add	r3, r2
 8015518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015526:	d11f      	bne.n	8015568 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	015a      	lsls	r2, r3, #5
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	4413      	add	r3, r2
 8015530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	68ba      	ldr	r2, [r7, #8]
 8015538:	0151      	lsls	r1, r2, #5
 801553a:	68fa      	ldr	r2, [r7, #12]
 801553c:	440a      	add	r2, r1
 801553e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015546:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	015a      	lsls	r2, r3, #5
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	4413      	add	r3, r2
 8015550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	68ba      	ldr	r2, [r7, #8]
 8015558:	0151      	lsls	r1, r2, #5
 801555a:	68fa      	ldr	r2, [r7, #12]
 801555c:	440a      	add	r2, r1
 801555e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015566:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801556e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	781b      	ldrb	r3, [r3, #0]
 8015574:	f003 030f 	and.w	r3, r3, #15
 8015578:	2101      	movs	r1, #1
 801557a:	fa01 f303 	lsl.w	r3, r1, r3
 801557e:	041b      	lsls	r3, r3, #16
 8015580:	43db      	mvns	r3, r3
 8015582:	68f9      	ldr	r1, [r7, #12]
 8015584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015588:	4013      	ands	r3, r2
 801558a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015592:	69da      	ldr	r2, [r3, #28]
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	f003 030f 	and.w	r3, r3, #15
 801559c:	2101      	movs	r1, #1
 801559e:	fa01 f303 	lsl.w	r3, r1, r3
 80155a2:	041b      	lsls	r3, r3, #16
 80155a4:	43db      	mvns	r3, r3
 80155a6:	68f9      	ldr	r1, [r7, #12]
 80155a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80155ac:	4013      	ands	r3, r2
 80155ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	015a      	lsls	r2, r3, #5
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	4413      	add	r3, r2
 80155b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155bc:	681a      	ldr	r2, [r3, #0]
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	0159      	lsls	r1, r3, #5
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	440b      	add	r3, r1
 80155c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155ca:	4619      	mov	r1, r3
 80155cc:	4b05      	ldr	r3, [pc, #20]	; (80155e4 <USB_DeactivateEndpoint+0x1b4>)
 80155ce:	4013      	ands	r3, r2
 80155d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80155d2:	2300      	movs	r3, #0
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3714      	adds	r7, #20
 80155d8:	46bd      	mov	sp, r7
 80155da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155de:	4770      	bx	lr
 80155e0:	ec337800 	.word	0xec337800
 80155e4:	eff37800 	.word	0xeff37800

080155e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b08a      	sub	sp, #40	; 0x28
 80155ec:	af02      	add	r7, sp, #8
 80155ee:	60f8      	str	r0, [r7, #12]
 80155f0:	60b9      	str	r1, [r7, #8]
 80155f2:	4613      	mov	r3, r2
 80155f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	781b      	ldrb	r3, [r3, #0]
 80155fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	785b      	ldrb	r3, [r3, #1]
 8015604:	2b01      	cmp	r3, #1
 8015606:	f040 8163 	bne.w	80158d0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	695b      	ldr	r3, [r3, #20]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d132      	bne.n	8015678 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	015a      	lsls	r2, r3, #5
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	4413      	add	r3, r2
 801561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801561e:	691a      	ldr	r2, [r3, #16]
 8015620:	69bb      	ldr	r3, [r7, #24]
 8015622:	0159      	lsls	r1, r3, #5
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	440b      	add	r3, r1
 8015628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801562c:	4619      	mov	r1, r3
 801562e:	4ba5      	ldr	r3, [pc, #660]	; (80158c4 <USB_EPStartXfer+0x2dc>)
 8015630:	4013      	ands	r3, r2
 8015632:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	015a      	lsls	r2, r3, #5
 8015638:	69fb      	ldr	r3, [r7, #28]
 801563a:	4413      	add	r3, r2
 801563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015640:	691b      	ldr	r3, [r3, #16]
 8015642:	69ba      	ldr	r2, [r7, #24]
 8015644:	0151      	lsls	r1, r2, #5
 8015646:	69fa      	ldr	r2, [r7, #28]
 8015648:	440a      	add	r2, r1
 801564a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801564e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	015a      	lsls	r2, r3, #5
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	4413      	add	r3, r2
 801565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015660:	691a      	ldr	r2, [r3, #16]
 8015662:	69bb      	ldr	r3, [r7, #24]
 8015664:	0159      	lsls	r1, r3, #5
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	440b      	add	r3, r1
 801566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801566e:	4619      	mov	r1, r3
 8015670:	4b95      	ldr	r3, [pc, #596]	; (80158c8 <USB_EPStartXfer+0x2e0>)
 8015672:	4013      	ands	r3, r2
 8015674:	610b      	str	r3, [r1, #16]
 8015676:	e074      	b.n	8015762 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	015a      	lsls	r2, r3, #5
 801567c:	69fb      	ldr	r3, [r7, #28]
 801567e:	4413      	add	r3, r2
 8015680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015684:	691a      	ldr	r2, [r3, #16]
 8015686:	69bb      	ldr	r3, [r7, #24]
 8015688:	0159      	lsls	r1, r3, #5
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	440b      	add	r3, r1
 801568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015692:	4619      	mov	r1, r3
 8015694:	4b8c      	ldr	r3, [pc, #560]	; (80158c8 <USB_EPStartXfer+0x2e0>)
 8015696:	4013      	ands	r3, r2
 8015698:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	015a      	lsls	r2, r3, #5
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	4413      	add	r3, r2
 80156a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156a6:	691a      	ldr	r2, [r3, #16]
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	0159      	lsls	r1, r3, #5
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	440b      	add	r3, r1
 80156b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156b4:	4619      	mov	r1, r3
 80156b6:	4b83      	ldr	r3, [pc, #524]	; (80158c4 <USB_EPStartXfer+0x2dc>)
 80156b8:	4013      	ands	r3, r2
 80156ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80156bc:	69bb      	ldr	r3, [r7, #24]
 80156be:	015a      	lsls	r2, r3, #5
 80156c0:	69fb      	ldr	r3, [r7, #28]
 80156c2:	4413      	add	r3, r2
 80156c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	6959      	ldr	r1, [r3, #20]
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	689b      	ldr	r3, [r3, #8]
 80156d2:	440b      	add	r3, r1
 80156d4:	1e59      	subs	r1, r3, #1
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	689b      	ldr	r3, [r3, #8]
 80156da:	fbb1 f3f3 	udiv	r3, r1, r3
 80156de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80156e0:	4b7a      	ldr	r3, [pc, #488]	; (80158cc <USB_EPStartXfer+0x2e4>)
 80156e2:	400b      	ands	r3, r1
 80156e4:	69b9      	ldr	r1, [r7, #24]
 80156e6:	0148      	lsls	r0, r1, #5
 80156e8:	69f9      	ldr	r1, [r7, #28]
 80156ea:	4401      	add	r1, r0
 80156ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80156f0:	4313      	orrs	r3, r2
 80156f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80156f4:	69bb      	ldr	r3, [r7, #24]
 80156f6:	015a      	lsls	r2, r3, #5
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	4413      	add	r3, r2
 80156fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015700:	691a      	ldr	r2, [r3, #16]
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	695b      	ldr	r3, [r3, #20]
 8015706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801570a:	69b9      	ldr	r1, [r7, #24]
 801570c:	0148      	lsls	r0, r1, #5
 801570e:	69f9      	ldr	r1, [r7, #28]
 8015710:	4401      	add	r1, r0
 8015712:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015716:	4313      	orrs	r3, r2
 8015718:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	78db      	ldrb	r3, [r3, #3]
 801571e:	2b01      	cmp	r3, #1
 8015720:	d11f      	bne.n	8015762 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015722:	69bb      	ldr	r3, [r7, #24]
 8015724:	015a      	lsls	r2, r3, #5
 8015726:	69fb      	ldr	r3, [r7, #28]
 8015728:	4413      	add	r3, r2
 801572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801572e:	691b      	ldr	r3, [r3, #16]
 8015730:	69ba      	ldr	r2, [r7, #24]
 8015732:	0151      	lsls	r1, r2, #5
 8015734:	69fa      	ldr	r2, [r7, #28]
 8015736:	440a      	add	r2, r1
 8015738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801573c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8015740:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8015742:	69bb      	ldr	r3, [r7, #24]
 8015744:	015a      	lsls	r2, r3, #5
 8015746:	69fb      	ldr	r3, [r7, #28]
 8015748:	4413      	add	r3, r2
 801574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801574e:	691b      	ldr	r3, [r3, #16]
 8015750:	69ba      	ldr	r2, [r7, #24]
 8015752:	0151      	lsls	r1, r2, #5
 8015754:	69fa      	ldr	r2, [r7, #28]
 8015756:	440a      	add	r2, r1
 8015758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801575c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015760:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8015762:	79fb      	ldrb	r3, [r7, #7]
 8015764:	2b01      	cmp	r3, #1
 8015766:	d14b      	bne.n	8015800 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	691b      	ldr	r3, [r3, #16]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d009      	beq.n	8015784 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015770:	69bb      	ldr	r3, [r7, #24]
 8015772:	015a      	lsls	r2, r3, #5
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	4413      	add	r3, r2
 8015778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801577c:	461a      	mov	r2, r3
 801577e:	68bb      	ldr	r3, [r7, #8]
 8015780:	691b      	ldr	r3, [r3, #16]
 8015782:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	78db      	ldrb	r3, [r3, #3]
 8015788:	2b01      	cmp	r3, #1
 801578a:	d128      	bne.n	80157de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801578c:	69fb      	ldr	r3, [r7, #28]
 801578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015792:	689b      	ldr	r3, [r3, #8]
 8015794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015798:	2b00      	cmp	r3, #0
 801579a:	d110      	bne.n	80157be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	015a      	lsls	r2, r3, #5
 80157a0:	69fb      	ldr	r3, [r7, #28]
 80157a2:	4413      	add	r3, r2
 80157a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	69ba      	ldr	r2, [r7, #24]
 80157ac:	0151      	lsls	r1, r2, #5
 80157ae:	69fa      	ldr	r2, [r7, #28]
 80157b0:	440a      	add	r2, r1
 80157b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80157ba:	6013      	str	r3, [r2, #0]
 80157bc:	e00f      	b.n	80157de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	015a      	lsls	r2, r3, #5
 80157c2:	69fb      	ldr	r3, [r7, #28]
 80157c4:	4413      	add	r3, r2
 80157c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	69ba      	ldr	r2, [r7, #24]
 80157ce:	0151      	lsls	r1, r2, #5
 80157d0:	69fa      	ldr	r2, [r7, #28]
 80157d2:	440a      	add	r2, r1
 80157d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80157dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	015a      	lsls	r2, r3, #5
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	4413      	add	r3, r2
 80157e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	69ba      	ldr	r2, [r7, #24]
 80157ee:	0151      	lsls	r1, r2, #5
 80157f0:	69fa      	ldr	r2, [r7, #28]
 80157f2:	440a      	add	r2, r1
 80157f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80157f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80157fc:	6013      	str	r3, [r2, #0]
 80157fe:	e133      	b.n	8015a68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015800:	69bb      	ldr	r3, [r7, #24]
 8015802:	015a      	lsls	r2, r3, #5
 8015804:	69fb      	ldr	r3, [r7, #28]
 8015806:	4413      	add	r3, r2
 8015808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	69ba      	ldr	r2, [r7, #24]
 8015810:	0151      	lsls	r1, r2, #5
 8015812:	69fa      	ldr	r2, [r7, #28]
 8015814:	440a      	add	r2, r1
 8015816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801581a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801581e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	78db      	ldrb	r3, [r3, #3]
 8015824:	2b01      	cmp	r3, #1
 8015826:	d015      	beq.n	8015854 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	695b      	ldr	r3, [r3, #20]
 801582c:	2b00      	cmp	r3, #0
 801582e:	f000 811b 	beq.w	8015a68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	f003 030f 	and.w	r3, r3, #15
 8015842:	2101      	movs	r1, #1
 8015844:	fa01 f303 	lsl.w	r3, r1, r3
 8015848:	69f9      	ldr	r1, [r7, #28]
 801584a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801584e:	4313      	orrs	r3, r2
 8015850:	634b      	str	r3, [r1, #52]	; 0x34
 8015852:	e109      	b.n	8015a68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801585a:	689b      	ldr	r3, [r3, #8]
 801585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015860:	2b00      	cmp	r3, #0
 8015862:	d110      	bne.n	8015886 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015864:	69bb      	ldr	r3, [r7, #24]
 8015866:	015a      	lsls	r2, r3, #5
 8015868:	69fb      	ldr	r3, [r7, #28]
 801586a:	4413      	add	r3, r2
 801586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	69ba      	ldr	r2, [r7, #24]
 8015874:	0151      	lsls	r1, r2, #5
 8015876:	69fa      	ldr	r2, [r7, #28]
 8015878:	440a      	add	r2, r1
 801587a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801587e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015882:	6013      	str	r3, [r2, #0]
 8015884:	e00f      	b.n	80158a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015886:	69bb      	ldr	r3, [r7, #24]
 8015888:	015a      	lsls	r2, r3, #5
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	4413      	add	r3, r2
 801588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	69ba      	ldr	r2, [r7, #24]
 8015896:	0151      	lsls	r1, r2, #5
 8015898:	69fa      	ldr	r2, [r7, #28]
 801589a:	440a      	add	r2, r1
 801589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80158a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80158a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	68d9      	ldr	r1, [r3, #12]
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	781a      	ldrb	r2, [r3, #0]
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	695b      	ldr	r3, [r3, #20]
 80158b2:	b298      	uxth	r0, r3
 80158b4:	79fb      	ldrb	r3, [r7, #7]
 80158b6:	9300      	str	r3, [sp, #0]
 80158b8:	4603      	mov	r3, r0
 80158ba:	68f8      	ldr	r0, [r7, #12]
 80158bc:	f000 fa38 	bl	8015d30 <USB_WritePacket>
 80158c0:	e0d2      	b.n	8015a68 <USB_EPStartXfer+0x480>
 80158c2:	bf00      	nop
 80158c4:	e007ffff 	.word	0xe007ffff
 80158c8:	fff80000 	.word	0xfff80000
 80158cc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80158d0:	69bb      	ldr	r3, [r7, #24]
 80158d2:	015a      	lsls	r2, r3, #5
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	4413      	add	r3, r2
 80158d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158dc:	691a      	ldr	r2, [r3, #16]
 80158de:	69bb      	ldr	r3, [r7, #24]
 80158e0:	0159      	lsls	r1, r3, #5
 80158e2:	69fb      	ldr	r3, [r7, #28]
 80158e4:	440b      	add	r3, r1
 80158e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158ea:	4619      	mov	r1, r3
 80158ec:	4b61      	ldr	r3, [pc, #388]	; (8015a74 <USB_EPStartXfer+0x48c>)
 80158ee:	4013      	ands	r3, r2
 80158f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80158f2:	69bb      	ldr	r3, [r7, #24]
 80158f4:	015a      	lsls	r2, r3, #5
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	4413      	add	r3, r2
 80158fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158fe:	691a      	ldr	r2, [r3, #16]
 8015900:	69bb      	ldr	r3, [r7, #24]
 8015902:	0159      	lsls	r1, r3, #5
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	440b      	add	r3, r1
 8015908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801590c:	4619      	mov	r1, r3
 801590e:	4b5a      	ldr	r3, [pc, #360]	; (8015a78 <USB_EPStartXfer+0x490>)
 8015910:	4013      	ands	r3, r2
 8015912:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	695b      	ldr	r3, [r3, #20]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d123      	bne.n	8015964 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801591c:	69bb      	ldr	r3, [r7, #24]
 801591e:	015a      	lsls	r2, r3, #5
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	4413      	add	r3, r2
 8015924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015928:	691a      	ldr	r2, [r3, #16]
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	689b      	ldr	r3, [r3, #8]
 801592e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015932:	69b9      	ldr	r1, [r7, #24]
 8015934:	0148      	lsls	r0, r1, #5
 8015936:	69f9      	ldr	r1, [r7, #28]
 8015938:	4401      	add	r1, r0
 801593a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801593e:	4313      	orrs	r3, r2
 8015940:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	015a      	lsls	r2, r3, #5
 8015946:	69fb      	ldr	r3, [r7, #28]
 8015948:	4413      	add	r3, r2
 801594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801594e:	691b      	ldr	r3, [r3, #16]
 8015950:	69ba      	ldr	r2, [r7, #24]
 8015952:	0151      	lsls	r1, r2, #5
 8015954:	69fa      	ldr	r2, [r7, #28]
 8015956:	440a      	add	r2, r1
 8015958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801595c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015960:	6113      	str	r3, [r2, #16]
 8015962:	e033      	b.n	80159cc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	695a      	ldr	r2, [r3, #20]
 8015968:	68bb      	ldr	r3, [r7, #8]
 801596a:	689b      	ldr	r3, [r3, #8]
 801596c:	4413      	add	r3, r2
 801596e:	1e5a      	subs	r2, r3, #1
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	689b      	ldr	r3, [r3, #8]
 8015974:	fbb2 f3f3 	udiv	r3, r2, r3
 8015978:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	015a      	lsls	r2, r3, #5
 801597e:	69fb      	ldr	r3, [r7, #28]
 8015980:	4413      	add	r3, r2
 8015982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015986:	691a      	ldr	r2, [r3, #16]
 8015988:	8afb      	ldrh	r3, [r7, #22]
 801598a:	04d9      	lsls	r1, r3, #19
 801598c:	4b3b      	ldr	r3, [pc, #236]	; (8015a7c <USB_EPStartXfer+0x494>)
 801598e:	400b      	ands	r3, r1
 8015990:	69b9      	ldr	r1, [r7, #24]
 8015992:	0148      	lsls	r0, r1, #5
 8015994:	69f9      	ldr	r1, [r7, #28]
 8015996:	4401      	add	r1, r0
 8015998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801599c:	4313      	orrs	r3, r2
 801599e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80159a0:	69bb      	ldr	r3, [r7, #24]
 80159a2:	015a      	lsls	r2, r3, #5
 80159a4:	69fb      	ldr	r3, [r7, #28]
 80159a6:	4413      	add	r3, r2
 80159a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159ac:	691a      	ldr	r2, [r3, #16]
 80159ae:	68bb      	ldr	r3, [r7, #8]
 80159b0:	689b      	ldr	r3, [r3, #8]
 80159b2:	8af9      	ldrh	r1, [r7, #22]
 80159b4:	fb01 f303 	mul.w	r3, r1, r3
 80159b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80159bc:	69b9      	ldr	r1, [r7, #24]
 80159be:	0148      	lsls	r0, r1, #5
 80159c0:	69f9      	ldr	r1, [r7, #28]
 80159c2:	4401      	add	r1, r0
 80159c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80159c8:	4313      	orrs	r3, r2
 80159ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80159cc:	79fb      	ldrb	r3, [r7, #7]
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d10d      	bne.n	80159ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	68db      	ldr	r3, [r3, #12]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d009      	beq.n	80159ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	68d9      	ldr	r1, [r3, #12]
 80159de:	69bb      	ldr	r3, [r7, #24]
 80159e0:	015a      	lsls	r2, r3, #5
 80159e2:	69fb      	ldr	r3, [r7, #28]
 80159e4:	4413      	add	r3, r2
 80159e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159ea:	460a      	mov	r2, r1
 80159ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80159ee:	68bb      	ldr	r3, [r7, #8]
 80159f0:	78db      	ldrb	r3, [r3, #3]
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d128      	bne.n	8015a48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80159f6:	69fb      	ldr	r3, [r7, #28]
 80159f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80159fc:	689b      	ldr	r3, [r3, #8]
 80159fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d110      	bne.n	8015a28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015a06:	69bb      	ldr	r3, [r7, #24]
 8015a08:	015a      	lsls	r2, r3, #5
 8015a0a:	69fb      	ldr	r3, [r7, #28]
 8015a0c:	4413      	add	r3, r2
 8015a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	69ba      	ldr	r2, [r7, #24]
 8015a16:	0151      	lsls	r1, r2, #5
 8015a18:	69fa      	ldr	r2, [r7, #28]
 8015a1a:	440a      	add	r2, r1
 8015a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015a24:	6013      	str	r3, [r2, #0]
 8015a26:	e00f      	b.n	8015a48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	015a      	lsls	r2, r3, #5
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	4413      	add	r3, r2
 8015a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	69ba      	ldr	r2, [r7, #24]
 8015a38:	0151      	lsls	r1, r2, #5
 8015a3a:	69fa      	ldr	r2, [r7, #28]
 8015a3c:	440a      	add	r2, r1
 8015a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015a46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	015a      	lsls	r2, r3, #5
 8015a4c:	69fb      	ldr	r3, [r7, #28]
 8015a4e:	4413      	add	r3, r2
 8015a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	69ba      	ldr	r2, [r7, #24]
 8015a58:	0151      	lsls	r1, r2, #5
 8015a5a:	69fa      	ldr	r2, [r7, #28]
 8015a5c:	440a      	add	r2, r1
 8015a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015a66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015a68:	2300      	movs	r3, #0
}
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	3720      	adds	r7, #32
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	fff80000 	.word	0xfff80000
 8015a78:	e007ffff 	.word	0xe007ffff
 8015a7c:	1ff80000 	.word	0x1ff80000

08015a80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015a80:	b480      	push	{r7}
 8015a82:	b087      	sub	sp, #28
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	60f8      	str	r0, [r7, #12]
 8015a88:	60b9      	str	r1, [r7, #8]
 8015a8a:	4613      	mov	r3, r2
 8015a8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	781b      	ldrb	r3, [r3, #0]
 8015a96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	785b      	ldrb	r3, [r3, #1]
 8015a9c:	2b01      	cmp	r3, #1
 8015a9e:	f040 80cd 	bne.w	8015c3c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	695b      	ldr	r3, [r3, #20]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d132      	bne.n	8015b10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	015a      	lsls	r2, r3, #5
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	4413      	add	r3, r2
 8015ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ab6:	691a      	ldr	r2, [r3, #16]
 8015ab8:	693b      	ldr	r3, [r7, #16]
 8015aba:	0159      	lsls	r1, r3, #5
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	440b      	add	r3, r1
 8015ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ac4:	4619      	mov	r1, r3
 8015ac6:	4b98      	ldr	r3, [pc, #608]	; (8015d28 <USB_EP0StartXfer+0x2a8>)
 8015ac8:	4013      	ands	r3, r2
 8015aca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	015a      	lsls	r2, r3, #5
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	4413      	add	r3, r2
 8015ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ad8:	691b      	ldr	r3, [r3, #16]
 8015ada:	693a      	ldr	r2, [r7, #16]
 8015adc:	0151      	lsls	r1, r2, #5
 8015ade:	697a      	ldr	r2, [r7, #20]
 8015ae0:	440a      	add	r2, r1
 8015ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015aea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	015a      	lsls	r2, r3, #5
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	4413      	add	r3, r2
 8015af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015af8:	691a      	ldr	r2, [r3, #16]
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	0159      	lsls	r1, r3, #5
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	440b      	add	r3, r1
 8015b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b06:	4619      	mov	r1, r3
 8015b08:	4b88      	ldr	r3, [pc, #544]	; (8015d2c <USB_EP0StartXfer+0x2ac>)
 8015b0a:	4013      	ands	r3, r2
 8015b0c:	610b      	str	r3, [r1, #16]
 8015b0e:	e04e      	b.n	8015bae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	015a      	lsls	r2, r3, #5
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	4413      	add	r3, r2
 8015b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b1c:	691a      	ldr	r2, [r3, #16]
 8015b1e:	693b      	ldr	r3, [r7, #16]
 8015b20:	0159      	lsls	r1, r3, #5
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	440b      	add	r3, r1
 8015b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	4b7f      	ldr	r3, [pc, #508]	; (8015d2c <USB_EP0StartXfer+0x2ac>)
 8015b2e:	4013      	ands	r3, r2
 8015b30:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015b32:	693b      	ldr	r3, [r7, #16]
 8015b34:	015a      	lsls	r2, r3, #5
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	4413      	add	r3, r2
 8015b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b3e:	691a      	ldr	r2, [r3, #16]
 8015b40:	693b      	ldr	r3, [r7, #16]
 8015b42:	0159      	lsls	r1, r3, #5
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	440b      	add	r3, r1
 8015b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b4c:	4619      	mov	r1, r3
 8015b4e:	4b76      	ldr	r3, [pc, #472]	; (8015d28 <USB_EP0StartXfer+0x2a8>)
 8015b50:	4013      	ands	r3, r2
 8015b52:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	695a      	ldr	r2, [r3, #20]
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	689b      	ldr	r3, [r3, #8]
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d903      	bls.n	8015b68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	689a      	ldr	r2, [r3, #8]
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	015a      	lsls	r2, r3, #5
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	4413      	add	r3, r2
 8015b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b74:	691b      	ldr	r3, [r3, #16]
 8015b76:	693a      	ldr	r2, [r7, #16]
 8015b78:	0151      	lsls	r1, r2, #5
 8015b7a:	697a      	ldr	r2, [r7, #20]
 8015b7c:	440a      	add	r2, r1
 8015b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	015a      	lsls	r2, r3, #5
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	4413      	add	r3, r2
 8015b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b94:	691a      	ldr	r2, [r3, #16]
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	695b      	ldr	r3, [r3, #20]
 8015b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015b9e:	6939      	ldr	r1, [r7, #16]
 8015ba0:	0148      	lsls	r0, r1, #5
 8015ba2:	6979      	ldr	r1, [r7, #20]
 8015ba4:	4401      	add	r1, r0
 8015ba6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015baa:	4313      	orrs	r3, r2
 8015bac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8015bae:	79fb      	ldrb	r3, [r7, #7]
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	d11e      	bne.n	8015bf2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	691b      	ldr	r3, [r3, #16]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d009      	beq.n	8015bd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	015a      	lsls	r2, r3, #5
 8015bc0:	697b      	ldr	r3, [r7, #20]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bc8:	461a      	mov	r2, r3
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	691b      	ldr	r3, [r3, #16]
 8015bce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	015a      	lsls	r2, r3, #5
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	4413      	add	r3, r2
 8015bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	693a      	ldr	r2, [r7, #16]
 8015be0:	0151      	lsls	r1, r2, #5
 8015be2:	697a      	ldr	r2, [r7, #20]
 8015be4:	440a      	add	r2, r1
 8015be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015bea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015bee:	6013      	str	r3, [r2, #0]
 8015bf0:	e092      	b.n	8015d18 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015bf2:	693b      	ldr	r3, [r7, #16]
 8015bf4:	015a      	lsls	r2, r3, #5
 8015bf6:	697b      	ldr	r3, [r7, #20]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	693a      	ldr	r2, [r7, #16]
 8015c02:	0151      	lsls	r1, r2, #5
 8015c04:	697a      	ldr	r2, [r7, #20]
 8015c06:	440a      	add	r2, r1
 8015c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015c10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8015c12:	68bb      	ldr	r3, [r7, #8]
 8015c14:	695b      	ldr	r3, [r3, #20]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d07e      	beq.n	8015d18 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015c1a:	697b      	ldr	r3, [r7, #20]
 8015c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	f003 030f 	and.w	r3, r3, #15
 8015c2a:	2101      	movs	r1, #1
 8015c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8015c30:	6979      	ldr	r1, [r7, #20]
 8015c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015c36:	4313      	orrs	r3, r2
 8015c38:	634b      	str	r3, [r1, #52]	; 0x34
 8015c3a:	e06d      	b.n	8015d18 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	015a      	lsls	r2, r3, #5
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	4413      	add	r3, r2
 8015c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c48:	691a      	ldr	r2, [r3, #16]
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	0159      	lsls	r1, r3, #5
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	440b      	add	r3, r1
 8015c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c56:	4619      	mov	r1, r3
 8015c58:	4b34      	ldr	r3, [pc, #208]	; (8015d2c <USB_EP0StartXfer+0x2ac>)
 8015c5a:	4013      	ands	r3, r2
 8015c5c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	015a      	lsls	r2, r3, #5
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	4413      	add	r3, r2
 8015c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c6a:	691a      	ldr	r2, [r3, #16]
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	0159      	lsls	r1, r3, #5
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	440b      	add	r3, r1
 8015c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c78:	4619      	mov	r1, r3
 8015c7a:	4b2b      	ldr	r3, [pc, #172]	; (8015d28 <USB_EP0StartXfer+0x2a8>)
 8015c7c:	4013      	ands	r3, r2
 8015c7e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	695b      	ldr	r3, [r3, #20]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d003      	beq.n	8015c90 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	689a      	ldr	r2, [r3, #8]
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	015a      	lsls	r2, r3, #5
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	4413      	add	r3, r2
 8015c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c9c:	691b      	ldr	r3, [r3, #16]
 8015c9e:	693a      	ldr	r2, [r7, #16]
 8015ca0:	0151      	lsls	r1, r2, #5
 8015ca2:	697a      	ldr	r2, [r7, #20]
 8015ca4:	440a      	add	r2, r1
 8015ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015cae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8015cb0:	693b      	ldr	r3, [r7, #16]
 8015cb2:	015a      	lsls	r2, r3, #5
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	4413      	add	r3, r2
 8015cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cbc:	691a      	ldr	r2, [r3, #16]
 8015cbe:	68bb      	ldr	r3, [r7, #8]
 8015cc0:	689b      	ldr	r3, [r3, #8]
 8015cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015cc6:	6939      	ldr	r1, [r7, #16]
 8015cc8:	0148      	lsls	r0, r1, #5
 8015cca:	6979      	ldr	r1, [r7, #20]
 8015ccc:	4401      	add	r1, r0
 8015cce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015cd2:	4313      	orrs	r3, r2
 8015cd4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8015cd6:	79fb      	ldrb	r3, [r7, #7]
 8015cd8:	2b01      	cmp	r3, #1
 8015cda:	d10d      	bne.n	8015cf8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	68db      	ldr	r3, [r3, #12]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d009      	beq.n	8015cf8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015ce4:	68bb      	ldr	r3, [r7, #8]
 8015ce6:	68d9      	ldr	r1, [r3, #12]
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	015a      	lsls	r2, r3, #5
 8015cec:	697b      	ldr	r3, [r7, #20]
 8015cee:	4413      	add	r3, r2
 8015cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cf4:	460a      	mov	r2, r1
 8015cf6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015cf8:	693b      	ldr	r3, [r7, #16]
 8015cfa:	015a      	lsls	r2, r3, #5
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	4413      	add	r3, r2
 8015d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	693a      	ldr	r2, [r7, #16]
 8015d08:	0151      	lsls	r1, r2, #5
 8015d0a:	697a      	ldr	r2, [r7, #20]
 8015d0c:	440a      	add	r2, r1
 8015d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015d16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015d18:	2300      	movs	r3, #0
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	371c      	adds	r7, #28
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d24:	4770      	bx	lr
 8015d26:	bf00      	nop
 8015d28:	e007ffff 	.word	0xe007ffff
 8015d2c:	fff80000 	.word	0xfff80000

08015d30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015d30:	b480      	push	{r7}
 8015d32:	b089      	sub	sp, #36	; 0x24
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	60f8      	str	r0, [r7, #12]
 8015d38:	60b9      	str	r1, [r7, #8]
 8015d3a:	4611      	mov	r1, r2
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	460b      	mov	r3, r1
 8015d40:	71fb      	strb	r3, [r7, #7]
 8015d42:	4613      	mov	r3, r2
 8015d44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d123      	bne.n	8015d9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015d56:	88bb      	ldrh	r3, [r7, #4]
 8015d58:	3303      	adds	r3, #3
 8015d5a:	089b      	lsrs	r3, r3, #2
 8015d5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015d5e:	2300      	movs	r3, #0
 8015d60:	61bb      	str	r3, [r7, #24]
 8015d62:	e018      	b.n	8015d96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015d64:	79fb      	ldrb	r3, [r7, #7]
 8015d66:	031a      	lsls	r2, r3, #12
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	4413      	add	r3, r2
 8015d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015d70:	461a      	mov	r2, r3
 8015d72:	69fb      	ldr	r3, [r7, #28]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015d78:	69fb      	ldr	r3, [r7, #28]
 8015d7a:	3301      	adds	r3, #1
 8015d7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015d7e:	69fb      	ldr	r3, [r7, #28]
 8015d80:	3301      	adds	r3, #1
 8015d82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	3301      	adds	r3, #1
 8015d88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015d90:	69bb      	ldr	r3, [r7, #24]
 8015d92:	3301      	adds	r3, #1
 8015d94:	61bb      	str	r3, [r7, #24]
 8015d96:	69ba      	ldr	r2, [r7, #24]
 8015d98:	693b      	ldr	r3, [r7, #16]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d3e2      	bcc.n	8015d64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015d9e:	2300      	movs	r3, #0
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3724      	adds	r7, #36	; 0x24
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr

08015dac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015dac:	b480      	push	{r7}
 8015dae:	b08b      	sub	sp, #44	; 0x2c
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	60f8      	str	r0, [r7, #12]
 8015db4:	60b9      	str	r1, [r7, #8]
 8015db6:	4613      	mov	r3, r2
 8015db8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015dc2:	88fb      	ldrh	r3, [r7, #6]
 8015dc4:	089b      	lsrs	r3, r3, #2
 8015dc6:	b29b      	uxth	r3, r3
 8015dc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015dca:	88fb      	ldrh	r3, [r7, #6]
 8015dcc:	f003 0303 	and.w	r3, r3, #3
 8015dd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	623b      	str	r3, [r7, #32]
 8015dd6:	e014      	b.n	8015e02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015dd8:	69bb      	ldr	r3, [r7, #24]
 8015dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de2:	601a      	str	r2, [r3, #0]
    pDest++;
 8015de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de6:	3301      	adds	r3, #1
 8015de8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dec:	3301      	adds	r3, #1
 8015dee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df2:	3301      	adds	r3, #1
 8015df4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df8:	3301      	adds	r3, #1
 8015dfa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015dfc:	6a3b      	ldr	r3, [r7, #32]
 8015dfe:	3301      	adds	r3, #1
 8015e00:	623b      	str	r3, [r7, #32]
 8015e02:	6a3a      	ldr	r2, [r7, #32]
 8015e04:	697b      	ldr	r3, [r7, #20]
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d3e6      	bcc.n	8015dd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015e0a:	8bfb      	ldrh	r3, [r7, #30]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d01e      	beq.n	8015e4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015e10:	2300      	movs	r3, #0
 8015e12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015e14:	69bb      	ldr	r3, [r7, #24]
 8015e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e1a:	461a      	mov	r2, r3
 8015e1c:	f107 0310 	add.w	r3, r7, #16
 8015e20:	6812      	ldr	r2, [r2, #0]
 8015e22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015e24:	693a      	ldr	r2, [r7, #16]
 8015e26:	6a3b      	ldr	r3, [r7, #32]
 8015e28:	b2db      	uxtb	r3, r3
 8015e2a:	00db      	lsls	r3, r3, #3
 8015e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8015e30:	b2da      	uxtb	r2, r3
 8015e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e34:	701a      	strb	r2, [r3, #0]
      i++;
 8015e36:	6a3b      	ldr	r3, [r7, #32]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8015e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3e:	3301      	adds	r3, #1
 8015e40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8015e42:	8bfb      	ldrh	r3, [r7, #30]
 8015e44:	3b01      	subs	r3, #1
 8015e46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015e48:	8bfb      	ldrh	r3, [r7, #30]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d1ea      	bne.n	8015e24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e50:	4618      	mov	r0, r3
 8015e52:	372c      	adds	r7, #44	; 0x2c
 8015e54:	46bd      	mov	sp, r7
 8015e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5a:	4770      	bx	lr

08015e5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	b085      	sub	sp, #20
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
 8015e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	785b      	ldrb	r3, [r3, #1]
 8015e74:	2b01      	cmp	r3, #1
 8015e76:	d12c      	bne.n	8015ed2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015e78:	68bb      	ldr	r3, [r7, #8]
 8015e7a:	015a      	lsls	r2, r3, #5
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	4413      	add	r3, r2
 8015e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	db12      	blt.n	8015eb0 <USB_EPSetStall+0x54>
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d00f      	beq.n	8015eb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015e90:	68bb      	ldr	r3, [r7, #8]
 8015e92:	015a      	lsls	r2, r3, #5
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	4413      	add	r3, r2
 8015e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	68ba      	ldr	r2, [r7, #8]
 8015ea0:	0151      	lsls	r1, r2, #5
 8015ea2:	68fa      	ldr	r2, [r7, #12]
 8015ea4:	440a      	add	r2, r1
 8015ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015eae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	015a      	lsls	r2, r3, #5
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	4413      	add	r3, r2
 8015eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	68ba      	ldr	r2, [r7, #8]
 8015ec0:	0151      	lsls	r1, r2, #5
 8015ec2:	68fa      	ldr	r2, [r7, #12]
 8015ec4:	440a      	add	r2, r1
 8015ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015ece:	6013      	str	r3, [r2, #0]
 8015ed0:	e02b      	b.n	8015f2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	015a      	lsls	r2, r3, #5
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	4413      	add	r3, r2
 8015eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	db12      	blt.n	8015f0a <USB_EPSetStall+0xae>
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d00f      	beq.n	8015f0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	015a      	lsls	r2, r3, #5
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	4413      	add	r3, r2
 8015ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	68ba      	ldr	r2, [r7, #8]
 8015efa:	0151      	lsls	r1, r2, #5
 8015efc:	68fa      	ldr	r2, [r7, #12]
 8015efe:	440a      	add	r2, r1
 8015f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015f08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	015a      	lsls	r2, r3, #5
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	4413      	add	r3, r2
 8015f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	68ba      	ldr	r2, [r7, #8]
 8015f1a:	0151      	lsls	r1, r2, #5
 8015f1c:	68fa      	ldr	r2, [r7, #12]
 8015f1e:	440a      	add	r2, r1
 8015f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015f28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015f2a:	2300      	movs	r3, #0
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3714      	adds	r7, #20
 8015f30:	46bd      	mov	sp, r7
 8015f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f36:	4770      	bx	lr

08015f38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015f38:	b480      	push	{r7}
 8015f3a:	b085      	sub	sp, #20
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
 8015f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	781b      	ldrb	r3, [r3, #0]
 8015f4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	785b      	ldrb	r3, [r3, #1]
 8015f50:	2b01      	cmp	r3, #1
 8015f52:	d128      	bne.n	8015fa6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015f54:	68bb      	ldr	r3, [r7, #8]
 8015f56:	015a      	lsls	r2, r3, #5
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	4413      	add	r3, r2
 8015f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	68ba      	ldr	r2, [r7, #8]
 8015f64:	0151      	lsls	r1, r2, #5
 8015f66:	68fa      	ldr	r2, [r7, #12]
 8015f68:	440a      	add	r2, r1
 8015f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015f72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	78db      	ldrb	r3, [r3, #3]
 8015f78:	2b03      	cmp	r3, #3
 8015f7a:	d003      	beq.n	8015f84 <USB_EPClearStall+0x4c>
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	78db      	ldrb	r3, [r3, #3]
 8015f80:	2b02      	cmp	r3, #2
 8015f82:	d138      	bne.n	8015ff6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	015a      	lsls	r2, r3, #5
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	4413      	add	r3, r2
 8015f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	68ba      	ldr	r2, [r7, #8]
 8015f94:	0151      	lsls	r1, r2, #5
 8015f96:	68fa      	ldr	r2, [r7, #12]
 8015f98:	440a      	add	r2, r1
 8015f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015fa2:	6013      	str	r3, [r2, #0]
 8015fa4:	e027      	b.n	8015ff6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015fa6:	68bb      	ldr	r3, [r7, #8]
 8015fa8:	015a      	lsls	r2, r3, #5
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	4413      	add	r3, r2
 8015fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	68ba      	ldr	r2, [r7, #8]
 8015fb6:	0151      	lsls	r1, r2, #5
 8015fb8:	68fa      	ldr	r2, [r7, #12]
 8015fba:	440a      	add	r2, r1
 8015fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015fc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015fc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	78db      	ldrb	r3, [r3, #3]
 8015fca:	2b03      	cmp	r3, #3
 8015fcc:	d003      	beq.n	8015fd6 <USB_EPClearStall+0x9e>
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	78db      	ldrb	r3, [r3, #3]
 8015fd2:	2b02      	cmp	r3, #2
 8015fd4:	d10f      	bne.n	8015ff6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	015a      	lsls	r2, r3, #5
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	4413      	add	r3, r2
 8015fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	68ba      	ldr	r2, [r7, #8]
 8015fe6:	0151      	lsls	r1, r2, #5
 8015fe8:	68fa      	ldr	r2, [r7, #12]
 8015fea:	440a      	add	r2, r1
 8015fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015ff4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015ff6:	2300      	movs	r3, #0
}
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	3714      	adds	r7, #20
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016002:	4770      	bx	lr

08016004 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016004:	b480      	push	{r7}
 8016006:	b085      	sub	sp, #20
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
 801600c:	460b      	mov	r3, r1
 801600e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	68fa      	ldr	r2, [r7, #12]
 801601e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016022:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8016026:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801602e:	681a      	ldr	r2, [r3, #0]
 8016030:	78fb      	ldrb	r3, [r7, #3]
 8016032:	011b      	lsls	r3, r3, #4
 8016034:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8016038:	68f9      	ldr	r1, [r7, #12]
 801603a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801603e:	4313      	orrs	r3, r2
 8016040:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016042:	2300      	movs	r3, #0
}
 8016044:	4618      	mov	r0, r3
 8016046:	3714      	adds	r7, #20
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr

08016050 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016050:	b480      	push	{r7}
 8016052:	b085      	sub	sp, #20
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	68fa      	ldr	r2, [r7, #12]
 8016066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801606a:	f023 0303 	bic.w	r3, r3, #3
 801606e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	68fa      	ldr	r2, [r7, #12]
 801607a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801607e:	f023 0302 	bic.w	r3, r3, #2
 8016082:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016084:	2300      	movs	r3, #0
}
 8016086:	4618      	mov	r0, r3
 8016088:	3714      	adds	r7, #20
 801608a:	46bd      	mov	sp, r7
 801608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016090:	4770      	bx	lr

08016092 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016092:	b480      	push	{r7}
 8016094:	b085      	sub	sp, #20
 8016096:	af00      	add	r7, sp, #0
 8016098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	68fa      	ldr	r2, [r7, #12]
 80160a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80160ac:	f023 0303 	bic.w	r3, r3, #3
 80160b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	68fa      	ldr	r2, [r7, #12]
 80160bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80160c0:	f043 0302 	orr.w	r3, r3, #2
 80160c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80160c6:	2300      	movs	r3, #0
}
 80160c8:	4618      	mov	r0, r3
 80160ca:	3714      	adds	r7, #20
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80160d4:	b480      	push	{r7}
 80160d6:	b085      	sub	sp, #20
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	695b      	ldr	r3, [r3, #20]
 80160e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	699b      	ldr	r3, [r3, #24]
 80160e6:	68fa      	ldr	r2, [r7, #12]
 80160e8:	4013      	ands	r3, r2
 80160ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80160ec:	68fb      	ldr	r3, [r7, #12]
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3714      	adds	r7, #20
 80160f2:	46bd      	mov	sp, r7
 80160f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f8:	4770      	bx	lr

080160fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80160fa:	b480      	push	{r7}
 80160fc:	b085      	sub	sp, #20
 80160fe:	af00      	add	r7, sp, #0
 8016100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801610c:	699b      	ldr	r3, [r3, #24]
 801610e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016116:	69db      	ldr	r3, [r3, #28]
 8016118:	68ba      	ldr	r2, [r7, #8]
 801611a:	4013      	ands	r3, r2
 801611c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	0c1b      	lsrs	r3, r3, #16
}
 8016122:	4618      	mov	r0, r3
 8016124:	3714      	adds	r7, #20
 8016126:	46bd      	mov	sp, r7
 8016128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612c:	4770      	bx	lr

0801612e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801612e:	b480      	push	{r7}
 8016130:	b085      	sub	sp, #20
 8016132:	af00      	add	r7, sp, #0
 8016134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016140:	699b      	ldr	r3, [r3, #24]
 8016142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801614a:	69db      	ldr	r3, [r3, #28]
 801614c:	68ba      	ldr	r2, [r7, #8]
 801614e:	4013      	ands	r3, r2
 8016150:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016152:	68bb      	ldr	r3, [r7, #8]
 8016154:	b29b      	uxth	r3, r3
}
 8016156:	4618      	mov	r0, r3
 8016158:	3714      	adds	r7, #20
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr

08016162 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016162:	b480      	push	{r7}
 8016164:	b085      	sub	sp, #20
 8016166:	af00      	add	r7, sp, #0
 8016168:	6078      	str	r0, [r7, #4]
 801616a:	460b      	mov	r3, r1
 801616c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016172:	78fb      	ldrb	r3, [r7, #3]
 8016174:	015a      	lsls	r2, r3, #5
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	4413      	add	r3, r2
 801617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801617e:	689b      	ldr	r3, [r3, #8]
 8016180:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016188:	695b      	ldr	r3, [r3, #20]
 801618a:	68ba      	ldr	r2, [r7, #8]
 801618c:	4013      	ands	r3, r2
 801618e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016190:	68bb      	ldr	r3, [r7, #8]
}
 8016192:	4618      	mov	r0, r3
 8016194:	3714      	adds	r7, #20
 8016196:	46bd      	mov	sp, r7
 8016198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619c:	4770      	bx	lr

0801619e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801619e:	b480      	push	{r7}
 80161a0:	b087      	sub	sp, #28
 80161a2:	af00      	add	r7, sp, #0
 80161a4:	6078      	str	r0, [r7, #4]
 80161a6:	460b      	mov	r3, r1
 80161a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80161ae:	697b      	ldr	r3, [r7, #20]
 80161b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80161b4:	691b      	ldr	r3, [r3, #16]
 80161b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80161be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80161c2:	78fb      	ldrb	r3, [r7, #3]
 80161c4:	f003 030f 	and.w	r3, r3, #15
 80161c8:	68fa      	ldr	r2, [r7, #12]
 80161ca:	fa22 f303 	lsr.w	r3, r2, r3
 80161ce:	01db      	lsls	r3, r3, #7
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	693a      	ldr	r2, [r7, #16]
 80161d4:	4313      	orrs	r3, r2
 80161d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80161d8:	78fb      	ldrb	r3, [r7, #3]
 80161da:	015a      	lsls	r2, r3, #5
 80161dc:	697b      	ldr	r3, [r7, #20]
 80161de:	4413      	add	r3, r2
 80161e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161e4:	689b      	ldr	r3, [r3, #8]
 80161e6:	693a      	ldr	r2, [r7, #16]
 80161e8:	4013      	ands	r3, r2
 80161ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80161ec:	68bb      	ldr	r3, [r7, #8]
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	371c      	adds	r7, #28
 80161f2:	46bd      	mov	sp, r7
 80161f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f8:	4770      	bx	lr

080161fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80161fa:	b480      	push	{r7}
 80161fc:	b083      	sub	sp, #12
 80161fe:	af00      	add	r7, sp, #0
 8016200:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	695b      	ldr	r3, [r3, #20]
 8016206:	f003 0301 	and.w	r3, r3, #1
}
 801620a:	4618      	mov	r0, r3
 801620c:	370c      	adds	r7, #12
 801620e:	46bd      	mov	sp, r7
 8016210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016214:	4770      	bx	lr
	...

08016218 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8016218:	b480      	push	{r7}
 801621a:	b085      	sub	sp, #20
 801621c:	af00      	add	r7, sp, #0
 801621e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016232:	4619      	mov	r1, r3
 8016234:	4b09      	ldr	r3, [pc, #36]	; (801625c <USB_ActivateSetup+0x44>)
 8016236:	4013      	ands	r3, r2
 8016238:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016240:	685b      	ldr	r3, [r3, #4]
 8016242:	68fa      	ldr	r2, [r7, #12]
 8016244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801624c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801624e:	2300      	movs	r3, #0
}
 8016250:	4618      	mov	r0, r3
 8016252:	3714      	adds	r7, #20
 8016254:	46bd      	mov	sp, r7
 8016256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625a:	4770      	bx	lr
 801625c:	fffff800 	.word	0xfffff800

08016260 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8016260:	b480      	push	{r7}
 8016262:	b087      	sub	sp, #28
 8016264:	af00      	add	r7, sp, #0
 8016266:	60f8      	str	r0, [r7, #12]
 8016268:	460b      	mov	r3, r1
 801626a:	607a      	str	r2, [r7, #4]
 801626c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	333c      	adds	r3, #60	; 0x3c
 8016276:	3304      	adds	r3, #4
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	4a26      	ldr	r2, [pc, #152]	; (8016318 <USB_EP0_OutStart+0xb8>)
 8016280:	4293      	cmp	r3, r2
 8016282:	d90a      	bls.n	801629a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016294:	d101      	bne.n	801629a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016296:	2300      	movs	r3, #0
 8016298:	e037      	b.n	801630a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162a0:	461a      	mov	r2, r3
 80162a2:	2300      	movs	r3, #0
 80162a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80162a6:	697b      	ldr	r3, [r7, #20]
 80162a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162ac:	691b      	ldr	r3, [r3, #16]
 80162ae:	697a      	ldr	r2, [r7, #20]
 80162b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80162b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80162b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162c0:	691b      	ldr	r3, [r3, #16]
 80162c2:	697a      	ldr	r2, [r7, #20]
 80162c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80162c8:	f043 0318 	orr.w	r3, r3, #24
 80162cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80162ce:	697b      	ldr	r3, [r7, #20]
 80162d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162d4:	691b      	ldr	r3, [r3, #16]
 80162d6:	697a      	ldr	r2, [r7, #20]
 80162d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80162dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80162e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80162e2:	7afb      	ldrb	r3, [r7, #11]
 80162e4:	2b01      	cmp	r3, #1
 80162e6:	d10f      	bne.n	8016308 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162ee:	461a      	mov	r2, r3
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	697a      	ldr	r2, [r7, #20]
 80162fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016302:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8016306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016308:	2300      	movs	r3, #0
}
 801630a:	4618      	mov	r0, r3
 801630c:	371c      	adds	r7, #28
 801630e:	46bd      	mov	sp, r7
 8016310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016314:	4770      	bx	lr
 8016316:	bf00      	nop
 8016318:	4f54300a 	.word	0x4f54300a

0801631c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801631c:	b480      	push	{r7}
 801631e:	b085      	sub	sp, #20
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016324:	2300      	movs	r3, #0
 8016326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	3301      	adds	r3, #1
 801632c:	60fb      	str	r3, [r7, #12]
 801632e:	4a13      	ldr	r2, [pc, #76]	; (801637c <USB_CoreReset+0x60>)
 8016330:	4293      	cmp	r3, r2
 8016332:	d901      	bls.n	8016338 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8016334:	2303      	movs	r3, #3
 8016336:	e01a      	b.n	801636e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	691b      	ldr	r3, [r3, #16]
 801633c:	2b00      	cmp	r3, #0
 801633e:	daf3      	bge.n	8016328 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016340:	2300      	movs	r3, #0
 8016342:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	691b      	ldr	r3, [r3, #16]
 8016348:	f043 0201 	orr.w	r2, r3, #1
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	3301      	adds	r3, #1
 8016354:	60fb      	str	r3, [r7, #12]
 8016356:	4a09      	ldr	r2, [pc, #36]	; (801637c <USB_CoreReset+0x60>)
 8016358:	4293      	cmp	r3, r2
 801635a:	d901      	bls.n	8016360 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 801635c:	2303      	movs	r3, #3
 801635e:	e006      	b.n	801636e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	691b      	ldr	r3, [r3, #16]
 8016364:	f003 0301 	and.w	r3, r3, #1
 8016368:	2b01      	cmp	r3, #1
 801636a:	d0f1      	beq.n	8016350 <USB_CoreReset+0x34>

  return HAL_OK;
 801636c:	2300      	movs	r3, #0
}
 801636e:	4618      	mov	r0, r3
 8016370:	3714      	adds	r7, #20
 8016372:	46bd      	mov	sp, r7
 8016374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016378:	4770      	bx	lr
 801637a:	bf00      	nop
 801637c:	00030d40 	.word	0x00030d40

08016380 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b084      	sub	sp, #16
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	460b      	mov	r3, r1
 801638a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801638c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8016390:	f002 f932 	bl	80185f8 <USBD_static_malloc>
 8016394:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d105      	bne.n	80163a8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2200      	movs	r2, #0
 80163a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80163a4:	2302      	movs	r3, #2
 80163a6:	e066      	b.n	8016476 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	68fa      	ldr	r2, [r7, #12]
 80163ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	7c1b      	ldrb	r3, [r3, #16]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d119      	bne.n	80163ec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80163b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80163bc:	2202      	movs	r2, #2
 80163be:	2181      	movs	r1, #129	; 0x81
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f001 fff6 	bl	80183b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	2201      	movs	r2, #1
 80163ca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80163cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80163d0:	2202      	movs	r2, #2
 80163d2:	2101      	movs	r1, #1
 80163d4:	6878      	ldr	r0, [r7, #4]
 80163d6:	f001 ffec 	bl	80183b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2201      	movs	r2, #1
 80163de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	2210      	movs	r2, #16
 80163e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80163ea:	e016      	b.n	801641a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80163ec:	2340      	movs	r3, #64	; 0x40
 80163ee:	2202      	movs	r2, #2
 80163f0:	2181      	movs	r1, #129	; 0x81
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f001 ffdd 	bl	80183b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2201      	movs	r2, #1
 80163fc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80163fe:	2340      	movs	r3, #64	; 0x40
 8016400:	2202      	movs	r2, #2
 8016402:	2101      	movs	r1, #1
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f001 ffd4 	bl	80183b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	2201      	movs	r2, #1
 801640e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	2210      	movs	r2, #16
 8016416:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801641a:	2308      	movs	r3, #8
 801641c:	2203      	movs	r2, #3
 801641e:	2182      	movs	r1, #130	; 0x82
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	f001 ffc6 	bl	80183b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2201      	movs	r2, #1
 801642a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	2200      	movs	r2, #0
 801643c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	2200      	movs	r2, #0
 8016444:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	7c1b      	ldrb	r3, [r3, #16]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d109      	bne.n	8016464 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016456:	f44f 7300 	mov.w	r3, #512	; 0x200
 801645a:	2101      	movs	r1, #1
 801645c:	6878      	ldr	r0, [r7, #4]
 801645e:	f002 f897 	bl	8018590 <USBD_LL_PrepareReceive>
 8016462:	e007      	b.n	8016474 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801646a:	2340      	movs	r3, #64	; 0x40
 801646c:	2101      	movs	r1, #1
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f002 f88e 	bl	8018590 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016474:	2300      	movs	r3, #0
}
 8016476:	4618      	mov	r0, r3
 8016478:	3710      	adds	r7, #16
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}

0801647e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801647e:	b580      	push	{r7, lr}
 8016480:	b082      	sub	sp, #8
 8016482:	af00      	add	r7, sp, #0
 8016484:	6078      	str	r0, [r7, #4]
 8016486:	460b      	mov	r3, r1
 8016488:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801648a:	2181      	movs	r1, #129	; 0x81
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f001 ffb6 	bl	80183fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	2200      	movs	r2, #0
 8016496:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016498:	2101      	movs	r1, #1
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f001 ffaf 	bl	80183fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2200      	movs	r2, #0
 80164a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80164a8:	2182      	movs	r1, #130	; 0x82
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f001 ffa7 	bl	80183fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2200      	movs	r2, #0
 80164b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2200      	movs	r2, #0
 80164bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d00e      	beq.n	80164e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80164da:	4618      	mov	r0, r3
 80164dc:	f002 f89a 	bl	8018614 <USBD_static_free>
    pdev->pClassData = NULL;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2200      	movs	r2, #0
 80164e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80164e8:	2300      	movs	r3, #0
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3708      	adds	r7, #8
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
	...

080164f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b086      	sub	sp, #24
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016504:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016506:	2300      	movs	r3, #0
 8016508:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801650a:	2300      	movs	r3, #0
 801650c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801650e:	2300      	movs	r3, #0
 8016510:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d101      	bne.n	801651c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8016518:	2303      	movs	r3, #3
 801651a:	e0af      	b.n	801667c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	781b      	ldrb	r3, [r3, #0]
 8016520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016524:	2b00      	cmp	r3, #0
 8016526:	d03f      	beq.n	80165a8 <USBD_CDC_Setup+0xb4>
 8016528:	2b20      	cmp	r3, #32
 801652a:	f040 809f 	bne.w	801666c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	88db      	ldrh	r3, [r3, #6]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d02e      	beq.n	8016594 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	b25b      	sxtb	r3, r3
 801653c:	2b00      	cmp	r3, #0
 801653e:	da16      	bge.n	801656e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016546:	689b      	ldr	r3, [r3, #8]
 8016548:	683a      	ldr	r2, [r7, #0]
 801654a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 801654c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801654e:	683a      	ldr	r2, [r7, #0]
 8016550:	88d2      	ldrh	r2, [r2, #6]
 8016552:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	88db      	ldrh	r3, [r3, #6]
 8016558:	2b07      	cmp	r3, #7
 801655a:	bf28      	it	cs
 801655c:	2307      	movcs	r3, #7
 801655e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	89fa      	ldrh	r2, [r7, #14]
 8016564:	4619      	mov	r1, r3
 8016566:	6878      	ldr	r0, [r7, #4]
 8016568:	f001 fae9 	bl	8017b3e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 801656c:	e085      	b.n	801667a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	785a      	ldrb	r2, [r3, #1]
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	88db      	ldrh	r3, [r3, #6]
 801657c:	b2da      	uxtb	r2, r3
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8016584:	6939      	ldr	r1, [r7, #16]
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	88db      	ldrh	r3, [r3, #6]
 801658a:	461a      	mov	r2, r3
 801658c:	6878      	ldr	r0, [r7, #4]
 801658e:	f001 fb02 	bl	8017b96 <USBD_CtlPrepareRx>
      break;
 8016592:	e072      	b.n	801667a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801659a:	689b      	ldr	r3, [r3, #8]
 801659c:	683a      	ldr	r2, [r7, #0]
 801659e:	7850      	ldrb	r0, [r2, #1]
 80165a0:	2200      	movs	r2, #0
 80165a2:	6839      	ldr	r1, [r7, #0]
 80165a4:	4798      	blx	r3
      break;
 80165a6:	e068      	b.n	801667a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	785b      	ldrb	r3, [r3, #1]
 80165ac:	2b0b      	cmp	r3, #11
 80165ae:	d852      	bhi.n	8016656 <USBD_CDC_Setup+0x162>
 80165b0:	a201      	add	r2, pc, #4	; (adr r2, 80165b8 <USBD_CDC_Setup+0xc4>)
 80165b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b6:	bf00      	nop
 80165b8:	080165e9 	.word	0x080165e9
 80165bc:	08016665 	.word	0x08016665
 80165c0:	08016657 	.word	0x08016657
 80165c4:	08016657 	.word	0x08016657
 80165c8:	08016657 	.word	0x08016657
 80165cc:	08016657 	.word	0x08016657
 80165d0:	08016657 	.word	0x08016657
 80165d4:	08016657 	.word	0x08016657
 80165d8:	08016657 	.word	0x08016657
 80165dc:	08016657 	.word	0x08016657
 80165e0:	08016613 	.word	0x08016613
 80165e4:	0801663d 	.word	0x0801663d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165ee:	b2db      	uxtb	r3, r3
 80165f0:	2b03      	cmp	r3, #3
 80165f2:	d107      	bne.n	8016604 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80165f4:	f107 030a 	add.w	r3, r7, #10
 80165f8:	2202      	movs	r2, #2
 80165fa:	4619      	mov	r1, r3
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f001 fa9e 	bl	8017b3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016602:	e032      	b.n	801666a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016604:	6839      	ldr	r1, [r7, #0]
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f001 fa28 	bl	8017a5c <USBD_CtlError>
            ret = USBD_FAIL;
 801660c:	2303      	movs	r3, #3
 801660e:	75fb      	strb	r3, [r7, #23]
          break;
 8016610:	e02b      	b.n	801666a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016618:	b2db      	uxtb	r3, r3
 801661a:	2b03      	cmp	r3, #3
 801661c:	d107      	bne.n	801662e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801661e:	f107 030d 	add.w	r3, r7, #13
 8016622:	2201      	movs	r2, #1
 8016624:	4619      	mov	r1, r3
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f001 fa89 	bl	8017b3e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801662c:	e01d      	b.n	801666a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801662e:	6839      	ldr	r1, [r7, #0]
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f001 fa13 	bl	8017a5c <USBD_CtlError>
            ret = USBD_FAIL;
 8016636:	2303      	movs	r3, #3
 8016638:	75fb      	strb	r3, [r7, #23]
          break;
 801663a:	e016      	b.n	801666a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016642:	b2db      	uxtb	r3, r3
 8016644:	2b03      	cmp	r3, #3
 8016646:	d00f      	beq.n	8016668 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8016648:	6839      	ldr	r1, [r7, #0]
 801664a:	6878      	ldr	r0, [r7, #4]
 801664c:	f001 fa06 	bl	8017a5c <USBD_CtlError>
            ret = USBD_FAIL;
 8016650:	2303      	movs	r3, #3
 8016652:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016654:	e008      	b.n	8016668 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016656:	6839      	ldr	r1, [r7, #0]
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f001 f9ff 	bl	8017a5c <USBD_CtlError>
          ret = USBD_FAIL;
 801665e:	2303      	movs	r3, #3
 8016660:	75fb      	strb	r3, [r7, #23]
          break;
 8016662:	e002      	b.n	801666a <USBD_CDC_Setup+0x176>
          break;
 8016664:	bf00      	nop
 8016666:	e008      	b.n	801667a <USBD_CDC_Setup+0x186>
          break;
 8016668:	bf00      	nop
      }
      break;
 801666a:	e006      	b.n	801667a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 801666c:	6839      	ldr	r1, [r7, #0]
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f001 f9f4 	bl	8017a5c <USBD_CtlError>
      ret = USBD_FAIL;
 8016674:	2303      	movs	r3, #3
 8016676:	75fb      	strb	r3, [r7, #23]
      break;
 8016678:	bf00      	nop
  }

  return (uint8_t)ret;
 801667a:	7dfb      	ldrb	r3, [r7, #23]
}
 801667c:	4618      	mov	r0, r3
 801667e:	3718      	adds	r7, #24
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}

08016684 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b084      	sub	sp, #16
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
 801668c:	460b      	mov	r3, r1
 801668e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016696:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d101      	bne.n	80166a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80166a2:	2303      	movs	r3, #3
 80166a4:	e04f      	b.n	8016746 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80166ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80166ae:	78fa      	ldrb	r2, [r7, #3]
 80166b0:	6879      	ldr	r1, [r7, #4]
 80166b2:	4613      	mov	r3, r2
 80166b4:	009b      	lsls	r3, r3, #2
 80166b6:	4413      	add	r3, r2
 80166b8:	009b      	lsls	r3, r3, #2
 80166ba:	440b      	add	r3, r1
 80166bc:	3318      	adds	r3, #24
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d029      	beq.n	8016718 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80166c4:	78fa      	ldrb	r2, [r7, #3]
 80166c6:	6879      	ldr	r1, [r7, #4]
 80166c8:	4613      	mov	r3, r2
 80166ca:	009b      	lsls	r3, r3, #2
 80166cc:	4413      	add	r3, r2
 80166ce:	009b      	lsls	r3, r3, #2
 80166d0:	440b      	add	r3, r1
 80166d2:	3318      	adds	r3, #24
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	78f9      	ldrb	r1, [r7, #3]
 80166d8:	68f8      	ldr	r0, [r7, #12]
 80166da:	460b      	mov	r3, r1
 80166dc:	00db      	lsls	r3, r3, #3
 80166de:	1a5b      	subs	r3, r3, r1
 80166e0:	009b      	lsls	r3, r3, #2
 80166e2:	4403      	add	r3, r0
 80166e4:	3344      	adds	r3, #68	; 0x44
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80166ec:	fb01 f303 	mul.w	r3, r1, r3
 80166f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d110      	bne.n	8016718 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80166f6:	78fa      	ldrb	r2, [r7, #3]
 80166f8:	6879      	ldr	r1, [r7, #4]
 80166fa:	4613      	mov	r3, r2
 80166fc:	009b      	lsls	r3, r3, #2
 80166fe:	4413      	add	r3, r2
 8016700:	009b      	lsls	r3, r3, #2
 8016702:	440b      	add	r3, r1
 8016704:	3318      	adds	r3, #24
 8016706:	2200      	movs	r2, #0
 8016708:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801670a:	78f9      	ldrb	r1, [r7, #3]
 801670c:	2300      	movs	r3, #0
 801670e:	2200      	movs	r2, #0
 8016710:	6878      	ldr	r0, [r7, #4]
 8016712:	f001 ff1c 	bl	801854e <USBD_LL_Transmit>
 8016716:	e015      	b.n	8016744 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	2200      	movs	r2, #0
 801671c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016726:	691b      	ldr	r3, [r3, #16]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d00b      	beq.n	8016744 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016732:	691b      	ldr	r3, [r3, #16]
 8016734:	68ba      	ldr	r2, [r7, #8]
 8016736:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801673a:	68ba      	ldr	r2, [r7, #8]
 801673c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8016740:	78fa      	ldrb	r2, [r7, #3]
 8016742:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016744:	2300      	movs	r3, #0
}
 8016746:	4618      	mov	r0, r3
 8016748:	3710      	adds	r7, #16
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}

0801674e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801674e:	b580      	push	{r7, lr}
 8016750:	b084      	sub	sp, #16
 8016752:	af00      	add	r7, sp, #0
 8016754:	6078      	str	r0, [r7, #4]
 8016756:	460b      	mov	r3, r1
 8016758:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016760:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016768:	2b00      	cmp	r3, #0
 801676a:	d101      	bne.n	8016770 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801676c:	2303      	movs	r3, #3
 801676e:	e015      	b.n	801679c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016770:	78fb      	ldrb	r3, [r7, #3]
 8016772:	4619      	mov	r1, r3
 8016774:	6878      	ldr	r0, [r7, #4]
 8016776:	f001 ff2c 	bl	80185d2 <USBD_LL_GetRxDataSize>
 801677a:	4602      	mov	r2, r0
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016788:	68db      	ldr	r3, [r3, #12]
 801678a:	68fa      	ldr	r2, [r7, #12]
 801678c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8016790:	68fa      	ldr	r2, [r7, #12]
 8016792:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016796:	4611      	mov	r1, r2
 8016798:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801679a:	2300      	movs	r3, #0
}
 801679c:	4618      	mov	r0, r3
 801679e:	3710      	adds	r7, #16
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}

080167a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80167a4:	b580      	push	{r7, lr}
 80167a6:	b084      	sub	sp, #16
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d101      	bne.n	80167be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80167ba:	2303      	movs	r3, #3
 80167bc:	e01b      	b.n	80167f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d015      	beq.n	80167f4 <USBD_CDC_EP0_RxReady+0x50>
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80167ce:	2bff      	cmp	r3, #255	; 0xff
 80167d0:	d010      	beq.n	80167f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80167d8:	689b      	ldr	r3, [r3, #8]
 80167da:	68fa      	ldr	r2, [r7, #12]
 80167dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80167e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80167e2:	68fa      	ldr	r2, [r7, #12]
 80167e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80167e8:	b292      	uxth	r2, r2
 80167ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	22ff      	movs	r2, #255	; 0xff
 80167f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80167f4:	2300      	movs	r3, #0
}
 80167f6:	4618      	mov	r0, r3
 80167f8:	3710      	adds	r7, #16
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
	...

08016800 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016800:	b480      	push	{r7}
 8016802:	b083      	sub	sp, #12
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2243      	movs	r2, #67	; 0x43
 801680c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801680e:	4b03      	ldr	r3, [pc, #12]	; (801681c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016810:	4618      	mov	r0, r3
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr
 801681c:	24000098 	.word	0x24000098

08016820 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016820:	b480      	push	{r7}
 8016822:	b083      	sub	sp, #12
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	2243      	movs	r2, #67	; 0x43
 801682c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801682e:	4b03      	ldr	r3, [pc, #12]	; (801683c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016830:	4618      	mov	r0, r3
 8016832:	370c      	adds	r7, #12
 8016834:	46bd      	mov	sp, r7
 8016836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683a:	4770      	bx	lr
 801683c:	24000054 	.word	0x24000054

08016840 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016840:	b480      	push	{r7}
 8016842:	b083      	sub	sp, #12
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	2243      	movs	r2, #67	; 0x43
 801684c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801684e:	4b03      	ldr	r3, [pc, #12]	; (801685c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016850:	4618      	mov	r0, r3
 8016852:	370c      	adds	r7, #12
 8016854:	46bd      	mov	sp, r7
 8016856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685a:	4770      	bx	lr
 801685c:	240000dc 	.word	0x240000dc

08016860 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016860:	b480      	push	{r7}
 8016862:	b083      	sub	sp, #12
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	220a      	movs	r2, #10
 801686c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801686e:	4b03      	ldr	r3, [pc, #12]	; (801687c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016870:	4618      	mov	r0, r3
 8016872:	370c      	adds	r7, #12
 8016874:	46bd      	mov	sp, r7
 8016876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687a:	4770      	bx	lr
 801687c:	24000010 	.word	0x24000010

08016880 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016880:	b480      	push	{r7}
 8016882:	b083      	sub	sp, #12
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
 8016888:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d101      	bne.n	8016894 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016890:	2303      	movs	r3, #3
 8016892:	e004      	b.n	801689e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	683a      	ldr	r2, [r7, #0]
 8016898:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801689c:	2300      	movs	r3, #0
}
 801689e:	4618      	mov	r0, r3
 80168a0:	370c      	adds	r7, #12
 80168a2:	46bd      	mov	sp, r7
 80168a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a8:	4770      	bx	lr

080168aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80168aa:	b480      	push	{r7}
 80168ac:	b087      	sub	sp, #28
 80168ae:	af00      	add	r7, sp, #0
 80168b0:	60f8      	str	r0, [r7, #12]
 80168b2:	60b9      	str	r1, [r7, #8]
 80168b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80168be:	697b      	ldr	r3, [r7, #20]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d101      	bne.n	80168c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80168c4:	2303      	movs	r3, #3
 80168c6:	e008      	b.n	80168da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80168c8:	697b      	ldr	r3, [r7, #20]
 80168ca:	68ba      	ldr	r2, [r7, #8]
 80168cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	687a      	ldr	r2, [r7, #4]
 80168d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80168d8:	2300      	movs	r3, #0
}
 80168da:	4618      	mov	r0, r3
 80168dc:	371c      	adds	r7, #28
 80168de:	46bd      	mov	sp, r7
 80168e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e4:	4770      	bx	lr

080168e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80168e6:	b480      	push	{r7}
 80168e8:	b085      	sub	sp, #20
 80168ea:	af00      	add	r7, sp, #0
 80168ec:	6078      	str	r0, [r7, #4]
 80168ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80168f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d101      	bne.n	8016902 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80168fe:	2303      	movs	r3, #3
 8016900:	e004      	b.n	801690c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	683a      	ldr	r2, [r7, #0]
 8016906:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801690a:	2300      	movs	r3, #0
}
 801690c:	4618      	mov	r0, r3
 801690e:	3714      	adds	r7, #20
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr

08016918 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b084      	sub	sp, #16
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016926:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801692e:	2b00      	cmp	r3, #0
 8016930:	d101      	bne.n	8016936 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016932:	2303      	movs	r3, #3
 8016934:	e016      	b.n	8016964 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	7c1b      	ldrb	r3, [r3, #16]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d109      	bne.n	8016952 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016948:	2101      	movs	r1, #1
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f001 fe20 	bl	8018590 <USBD_LL_PrepareReceive>
 8016950:	e007      	b.n	8016962 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016958:	2340      	movs	r3, #64	; 0x40
 801695a:	2101      	movs	r1, #1
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f001 fe17 	bl	8018590 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016962:	2300      	movs	r3, #0
}
 8016964:	4618      	mov	r0, r3
 8016966:	3710      	adds	r7, #16
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}

0801696c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b086      	sub	sp, #24
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	4613      	mov	r3, r2
 8016978:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d101      	bne.n	8016984 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016980:	2303      	movs	r3, #3
 8016982:	e01f      	b.n	80169c4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	2200      	movs	r2, #0
 8016988:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2200      	movs	r2, #0
 8016990:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	2200      	movs	r2, #0
 8016998:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d003      	beq.n	80169aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	68ba      	ldr	r2, [r7, #8]
 80169a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	2201      	movs	r2, #1
 80169ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	79fa      	ldrb	r2, [r7, #7]
 80169b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80169b8:	68f8      	ldr	r0, [r7, #12]
 80169ba:	f001 fc8f 	bl	80182dc <USBD_LL_Init>
 80169be:	4603      	mov	r3, r0
 80169c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80169c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	3718      	adds	r7, #24
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}

080169cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b084      	sub	sp, #16
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
 80169d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80169d6:	2300      	movs	r3, #0
 80169d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d101      	bne.n	80169e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80169e0:	2303      	movs	r3, #3
 80169e2:	e016      	b.n	8016a12 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	683a      	ldr	r2, [r7, #0]
 80169e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d00b      	beq.n	8016a10 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a00:	f107 020e 	add.w	r2, r7, #14
 8016a04:	4610      	mov	r0, r2
 8016a06:	4798      	blx	r3
 8016a08:	4602      	mov	r2, r0
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016a10:	2300      	movs	r3, #0
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3710      	adds	r7, #16
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}

08016a1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016a1a:	b580      	push	{r7, lr}
 8016a1c:	b082      	sub	sp, #8
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016a22:	6878      	ldr	r0, [r7, #4]
 8016a24:	f001 fcaa 	bl	801837c <USBD_LL_Start>
 8016a28:	4603      	mov	r3, r0
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3708      	adds	r7, #8
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}

08016a32 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016a32:	b480      	push	{r7}
 8016a34:	b083      	sub	sp, #12
 8016a36:	af00      	add	r7, sp, #0
 8016a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016a3a:	2300      	movs	r3, #0
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	370c      	adds	r7, #12
 8016a40:	46bd      	mov	sp, r7
 8016a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a46:	4770      	bx	lr

08016a48 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b084      	sub	sp, #16
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
 8016a50:	460b      	mov	r3, r1
 8016a52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016a54:	2303      	movs	r3, #3
 8016a56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d009      	beq.n	8016a76 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	78fa      	ldrb	r2, [r7, #3]
 8016a6c:	4611      	mov	r1, r2
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	4798      	blx	r3
 8016a72:	4603      	mov	r3, r0
 8016a74:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3710      	adds	r7, #16
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}

08016a80 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b082      	sub	sp, #8
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	460b      	mov	r3, r1
 8016a8a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d007      	beq.n	8016aa6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a9c:	685b      	ldr	r3, [r3, #4]
 8016a9e:	78fa      	ldrb	r2, [r7, #3]
 8016aa0:	4611      	mov	r1, r2
 8016aa2:	6878      	ldr	r0, [r7, #4]
 8016aa4:	4798      	blx	r3
  }

  return USBD_OK;
 8016aa6:	2300      	movs	r3, #0
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3708      	adds	r7, #8
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b084      	sub	sp, #16
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016ac0:	6839      	ldr	r1, [r7, #0]
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f000 ff90 	bl	80179e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2201      	movs	r2, #1
 8016acc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016ae4:	f003 031f 	and.w	r3, r3, #31
 8016ae8:	2b02      	cmp	r3, #2
 8016aea:	d01a      	beq.n	8016b22 <USBD_LL_SetupStage+0x72>
 8016aec:	2b02      	cmp	r3, #2
 8016aee:	d822      	bhi.n	8016b36 <USBD_LL_SetupStage+0x86>
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d002      	beq.n	8016afa <USBD_LL_SetupStage+0x4a>
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d00a      	beq.n	8016b0e <USBD_LL_SetupStage+0x5e>
 8016af8:	e01d      	b.n	8016b36 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016b00:	4619      	mov	r1, r3
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	f000 fa62 	bl	8016fcc <USBD_StdDevReq>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8016b0c:	e020      	b.n	8016b50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016b14:	4619      	mov	r1, r3
 8016b16:	6878      	ldr	r0, [r7, #4]
 8016b18:	f000 fac6 	bl	80170a8 <USBD_StdItfReq>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8016b20:	e016      	b.n	8016b50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016b28:	4619      	mov	r1, r3
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f000 fb05 	bl	801713a <USBD_StdEPReq>
 8016b30:	4603      	mov	r3, r0
 8016b32:	73fb      	strb	r3, [r7, #15]
      break;
 8016b34:	e00c      	b.n	8016b50 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016b3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016b40:	b2db      	uxtb	r3, r3
 8016b42:	4619      	mov	r1, r3
 8016b44:	6878      	ldr	r0, [r7, #4]
 8016b46:	f001 fc79 	bl	801843c <USBD_LL_StallEP>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8016b4e:	bf00      	nop
  }

  return ret;
 8016b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3710      	adds	r7, #16
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}

08016b5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016b5a:	b580      	push	{r7, lr}
 8016b5c:	b086      	sub	sp, #24
 8016b5e:	af00      	add	r7, sp, #0
 8016b60:	60f8      	str	r0, [r7, #12]
 8016b62:	460b      	mov	r3, r1
 8016b64:	607a      	str	r2, [r7, #4]
 8016b66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016b68:	7afb      	ldrb	r3, [r7, #11]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d138      	bne.n	8016be0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016b74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016b7c:	2b03      	cmp	r3, #3
 8016b7e:	d14a      	bne.n	8016c16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016b80:	693b      	ldr	r3, [r7, #16]
 8016b82:	689a      	ldr	r2, [r3, #8]
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	68db      	ldr	r3, [r3, #12]
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d913      	bls.n	8016bb4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	689a      	ldr	r2, [r3, #8]
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	68db      	ldr	r3, [r3, #12]
 8016b94:	1ad2      	subs	r2, r2, r3
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016b9a:	693b      	ldr	r3, [r7, #16]
 8016b9c:	68da      	ldr	r2, [r3, #12]
 8016b9e:	693b      	ldr	r3, [r7, #16]
 8016ba0:	689b      	ldr	r3, [r3, #8]
 8016ba2:	4293      	cmp	r3, r2
 8016ba4:	bf28      	it	cs
 8016ba6:	4613      	movcs	r3, r2
 8016ba8:	461a      	mov	r2, r3
 8016baa:	6879      	ldr	r1, [r7, #4]
 8016bac:	68f8      	ldr	r0, [r7, #12]
 8016bae:	f001 f80f 	bl	8017bd0 <USBD_CtlContinueRx>
 8016bb2:	e030      	b.n	8016c16 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	2b03      	cmp	r3, #3
 8016bbe:	d10b      	bne.n	8016bd8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bc6:	691b      	ldr	r3, [r3, #16]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d005      	beq.n	8016bd8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bd2:	691b      	ldr	r3, [r3, #16]
 8016bd4:	68f8      	ldr	r0, [r7, #12]
 8016bd6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016bd8:	68f8      	ldr	r0, [r7, #12]
 8016bda:	f001 f80a 	bl	8017bf2 <USBD_CtlSendStatus>
 8016bde:	e01a      	b.n	8016c16 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016be6:	b2db      	uxtb	r3, r3
 8016be8:	2b03      	cmp	r3, #3
 8016bea:	d114      	bne.n	8016c16 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bf2:	699b      	ldr	r3, [r3, #24]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d00e      	beq.n	8016c16 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bfe:	699b      	ldr	r3, [r3, #24]
 8016c00:	7afa      	ldrb	r2, [r7, #11]
 8016c02:	4611      	mov	r1, r2
 8016c04:	68f8      	ldr	r0, [r7, #12]
 8016c06:	4798      	blx	r3
 8016c08:	4603      	mov	r3, r0
 8016c0a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016c0c:	7dfb      	ldrb	r3, [r7, #23]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d001      	beq.n	8016c16 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8016c12:	7dfb      	ldrb	r3, [r7, #23]
 8016c14:	e000      	b.n	8016c18 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8016c16:	2300      	movs	r3, #0
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3718      	adds	r7, #24
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b086      	sub	sp, #24
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	60f8      	str	r0, [r7, #12]
 8016c28:	460b      	mov	r3, r1
 8016c2a:	607a      	str	r2, [r7, #4]
 8016c2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016c2e:	7afb      	ldrb	r3, [r7, #11]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d16b      	bne.n	8016d0c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	3314      	adds	r3, #20
 8016c38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016c40:	2b02      	cmp	r3, #2
 8016c42:	d156      	bne.n	8016cf2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	689a      	ldr	r2, [r3, #8]
 8016c48:	693b      	ldr	r3, [r7, #16]
 8016c4a:	68db      	ldr	r3, [r3, #12]
 8016c4c:	429a      	cmp	r2, r3
 8016c4e:	d914      	bls.n	8016c7a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	689a      	ldr	r2, [r3, #8]
 8016c54:	693b      	ldr	r3, [r7, #16]
 8016c56:	68db      	ldr	r3, [r3, #12]
 8016c58:	1ad2      	subs	r2, r2, r3
 8016c5a:	693b      	ldr	r3, [r7, #16]
 8016c5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	689b      	ldr	r3, [r3, #8]
 8016c62:	461a      	mov	r2, r3
 8016c64:	6879      	ldr	r1, [r7, #4]
 8016c66:	68f8      	ldr	r0, [r7, #12]
 8016c68:	f000 ff84 	bl	8017b74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	2200      	movs	r2, #0
 8016c70:	2100      	movs	r1, #0
 8016c72:	68f8      	ldr	r0, [r7, #12]
 8016c74:	f001 fc8c 	bl	8018590 <USBD_LL_PrepareReceive>
 8016c78:	e03b      	b.n	8016cf2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016c7a:	693b      	ldr	r3, [r7, #16]
 8016c7c:	68da      	ldr	r2, [r3, #12]
 8016c7e:	693b      	ldr	r3, [r7, #16]
 8016c80:	689b      	ldr	r3, [r3, #8]
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d11c      	bne.n	8016cc0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016c86:	693b      	ldr	r3, [r7, #16]
 8016c88:	685a      	ldr	r2, [r3, #4]
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	d316      	bcc.n	8016cc0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	685a      	ldr	r2, [r3, #4]
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d20f      	bcs.n	8016cc0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	2100      	movs	r1, #0
 8016ca4:	68f8      	ldr	r0, [r7, #12]
 8016ca6:	f000 ff65 	bl	8017b74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	2200      	movs	r2, #0
 8016cae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	2100      	movs	r1, #0
 8016cb8:	68f8      	ldr	r0, [r7, #12]
 8016cba:	f001 fc69 	bl	8018590 <USBD_LL_PrepareReceive>
 8016cbe:	e018      	b.n	8016cf2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016cc6:	b2db      	uxtb	r3, r3
 8016cc8:	2b03      	cmp	r3, #3
 8016cca:	d10b      	bne.n	8016ce4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cd2:	68db      	ldr	r3, [r3, #12]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d005      	beq.n	8016ce4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cde:	68db      	ldr	r3, [r3, #12]
 8016ce0:	68f8      	ldr	r0, [r7, #12]
 8016ce2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016ce4:	2180      	movs	r1, #128	; 0x80
 8016ce6:	68f8      	ldr	r0, [r7, #12]
 8016ce8:	f001 fba8 	bl	801843c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016cec:	68f8      	ldr	r0, [r7, #12]
 8016cee:	f000 ff93 	bl	8017c18 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016cf8:	2b01      	cmp	r3, #1
 8016cfa:	d122      	bne.n	8016d42 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8016cfc:	68f8      	ldr	r0, [r7, #12]
 8016cfe:	f7ff fe98 	bl	8016a32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	2200      	movs	r2, #0
 8016d06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016d0a:	e01a      	b.n	8016d42 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d12:	b2db      	uxtb	r3, r3
 8016d14:	2b03      	cmp	r3, #3
 8016d16:	d114      	bne.n	8016d42 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d1e:	695b      	ldr	r3, [r3, #20]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d00e      	beq.n	8016d42 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d2a:	695b      	ldr	r3, [r3, #20]
 8016d2c:	7afa      	ldrb	r2, [r7, #11]
 8016d2e:	4611      	mov	r1, r2
 8016d30:	68f8      	ldr	r0, [r7, #12]
 8016d32:	4798      	blx	r3
 8016d34:	4603      	mov	r3, r0
 8016d36:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016d38:	7dfb      	ldrb	r3, [r7, #23]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d001      	beq.n	8016d42 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8016d3e:	7dfb      	ldrb	r3, [r7, #23]
 8016d40:	e000      	b.n	8016d44 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8016d42:	2300      	movs	r3, #0
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	3718      	adds	r7, #24
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}

08016d4c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b082      	sub	sp, #8
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2201      	movs	r2, #1
 8016d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2200      	movs	r2, #0
 8016d60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2200      	movs	r2, #0
 8016d68:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	2200      	movs	r2, #0
 8016d6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d101      	bne.n	8016d80 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8016d7c:	2303      	movs	r3, #3
 8016d7e:	e02f      	b.n	8016de0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d00f      	beq.n	8016daa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d90:	685b      	ldr	r3, [r3, #4]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d009      	beq.n	8016daa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d9c:	685b      	ldr	r3, [r3, #4]
 8016d9e:	687a      	ldr	r2, [r7, #4]
 8016da0:	6852      	ldr	r2, [r2, #4]
 8016da2:	b2d2      	uxtb	r2, r2
 8016da4:	4611      	mov	r1, r2
 8016da6:	6878      	ldr	r0, [r7, #4]
 8016da8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016daa:	2340      	movs	r3, #64	; 0x40
 8016dac:	2200      	movs	r2, #0
 8016dae:	2100      	movs	r1, #0
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f001 fafe 	bl	80183b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	2201      	movs	r2, #1
 8016dba:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	2240      	movs	r2, #64	; 0x40
 8016dc2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016dc6:	2340      	movs	r3, #64	; 0x40
 8016dc8:	2200      	movs	r2, #0
 8016dca:	2180      	movs	r1, #128	; 0x80
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f001 faf0 	bl	80183b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2201      	movs	r2, #1
 8016dd6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2240      	movs	r2, #64	; 0x40
 8016ddc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8016dde:	2300      	movs	r3, #0
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	3708      	adds	r7, #8
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016de8:	b480      	push	{r7}
 8016dea:	b083      	sub	sp, #12
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
 8016df0:	460b      	mov	r3, r1
 8016df2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	78fa      	ldrb	r2, [r7, #3]
 8016df8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016dfa:	2300      	movs	r3, #0
}
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	370c      	adds	r7, #12
 8016e00:	46bd      	mov	sp, r7
 8016e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e06:	4770      	bx	lr

08016e08 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e16:	b2da      	uxtb	r2, r3
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	2204      	movs	r2, #4
 8016e22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016e26:	2300      	movs	r3, #0
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	370c      	adds	r7, #12
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e32:	4770      	bx	lr

08016e34 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016e34:	b480      	push	{r7}
 8016e36:	b083      	sub	sp, #12
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e42:	b2db      	uxtb	r3, r3
 8016e44:	2b04      	cmp	r3, #4
 8016e46:	d106      	bne.n	8016e56 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016e4e:	b2da      	uxtb	r2, r3
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016e56:	2300      	movs	r3, #0
}
 8016e58:	4618      	mov	r0, r3
 8016e5a:	370c      	adds	r7, #12
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e62:	4770      	bx	lr

08016e64 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b082      	sub	sp, #8
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d101      	bne.n	8016e7a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8016e76:	2303      	movs	r3, #3
 8016e78:	e012      	b.n	8016ea0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e80:	b2db      	uxtb	r3, r3
 8016e82:	2b03      	cmp	r3, #3
 8016e84:	d10b      	bne.n	8016e9e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e8c:	69db      	ldr	r3, [r3, #28]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d005      	beq.n	8016e9e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e98:	69db      	ldr	r3, [r3, #28]
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016e9e:	2300      	movs	r3, #0
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	3708      	adds	r7, #8
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}

08016ea8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
 8016eb0:	460b      	mov	r3, r1
 8016eb2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d101      	bne.n	8016ec2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8016ebe:	2303      	movs	r3, #3
 8016ec0:	e014      	b.n	8016eec <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ec8:	b2db      	uxtb	r3, r3
 8016eca:	2b03      	cmp	r3, #3
 8016ecc:	d10d      	bne.n	8016eea <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ed4:	6a1b      	ldr	r3, [r3, #32]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d007      	beq.n	8016eea <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ee0:	6a1b      	ldr	r3, [r3, #32]
 8016ee2:	78fa      	ldrb	r2, [r7, #3]
 8016ee4:	4611      	mov	r1, r2
 8016ee6:	6878      	ldr	r0, [r7, #4]
 8016ee8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016eea:	2300      	movs	r3, #0
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	3708      	adds	r7, #8
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}

08016ef4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b082      	sub	sp, #8
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
 8016efc:	460b      	mov	r3, r1
 8016efe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d101      	bne.n	8016f0e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8016f0a:	2303      	movs	r3, #3
 8016f0c:	e014      	b.n	8016f38 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f14:	b2db      	uxtb	r3, r3
 8016f16:	2b03      	cmp	r3, #3
 8016f18:	d10d      	bne.n	8016f36 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d007      	beq.n	8016f36 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f2e:	78fa      	ldrb	r2, [r7, #3]
 8016f30:	4611      	mov	r1, r2
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016f36:	2300      	movs	r3, #0
}
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3708      	adds	r7, #8
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016f40:	b480      	push	{r7}
 8016f42:	b083      	sub	sp, #12
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016f48:	2300      	movs	r3, #0
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	370c      	adds	r7, #12
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f54:	4770      	bx	lr

08016f56 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016f56:	b580      	push	{r7, lr}
 8016f58:	b082      	sub	sp, #8
 8016f5a:	af00      	add	r7, sp, #0
 8016f5c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	2201      	movs	r2, #1
 8016f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d009      	beq.n	8016f84 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	687a      	ldr	r2, [r7, #4]
 8016f7a:	6852      	ldr	r2, [r2, #4]
 8016f7c:	b2d2      	uxtb	r2, r2
 8016f7e:	4611      	mov	r1, r2
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	4798      	blx	r3
  }

  return USBD_OK;
 8016f84:	2300      	movs	r3, #0
}
 8016f86:	4618      	mov	r0, r3
 8016f88:	3708      	adds	r7, #8
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}

08016f8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016f8e:	b480      	push	{r7}
 8016f90:	b087      	sub	sp, #28
 8016f92:	af00      	add	r7, sp, #0
 8016f94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016f9a:	697b      	ldr	r3, [r7, #20]
 8016f9c:	781b      	ldrb	r3, [r3, #0]
 8016f9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016fa0:	697b      	ldr	r3, [r7, #20]
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016fa6:	697b      	ldr	r3, [r7, #20]
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016fac:	8a3b      	ldrh	r3, [r7, #16]
 8016fae:	021b      	lsls	r3, r3, #8
 8016fb0:	b21a      	sxth	r2, r3
 8016fb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016fb6:	4313      	orrs	r3, r2
 8016fb8:	b21b      	sxth	r3, r3
 8016fba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016fbc:	89fb      	ldrh	r3, [r7, #14]
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	371c      	adds	r7, #28
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc8:	4770      	bx	lr
	...

08016fcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b084      	sub	sp, #16
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
 8016fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016fe2:	2b40      	cmp	r3, #64	; 0x40
 8016fe4:	d005      	beq.n	8016ff2 <USBD_StdDevReq+0x26>
 8016fe6:	2b40      	cmp	r3, #64	; 0x40
 8016fe8:	d853      	bhi.n	8017092 <USBD_StdDevReq+0xc6>
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d00b      	beq.n	8017006 <USBD_StdDevReq+0x3a>
 8016fee:	2b20      	cmp	r3, #32
 8016ff0:	d14f      	bne.n	8017092 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ff8:	689b      	ldr	r3, [r3, #8]
 8016ffa:	6839      	ldr	r1, [r7, #0]
 8016ffc:	6878      	ldr	r0, [r7, #4]
 8016ffe:	4798      	blx	r3
 8017000:	4603      	mov	r3, r0
 8017002:	73fb      	strb	r3, [r7, #15]
      break;
 8017004:	e04a      	b.n	801709c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	785b      	ldrb	r3, [r3, #1]
 801700a:	2b09      	cmp	r3, #9
 801700c:	d83b      	bhi.n	8017086 <USBD_StdDevReq+0xba>
 801700e:	a201      	add	r2, pc, #4	; (adr r2, 8017014 <USBD_StdDevReq+0x48>)
 8017010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017014:	08017069 	.word	0x08017069
 8017018:	0801707d 	.word	0x0801707d
 801701c:	08017087 	.word	0x08017087
 8017020:	08017073 	.word	0x08017073
 8017024:	08017087 	.word	0x08017087
 8017028:	08017047 	.word	0x08017047
 801702c:	0801703d 	.word	0x0801703d
 8017030:	08017087 	.word	0x08017087
 8017034:	0801705f 	.word	0x0801705f
 8017038:	08017051 	.word	0x08017051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801703c:	6839      	ldr	r1, [r7, #0]
 801703e:	6878      	ldr	r0, [r7, #4]
 8017040:	f000 f9de 	bl	8017400 <USBD_GetDescriptor>
          break;
 8017044:	e024      	b.n	8017090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017046:	6839      	ldr	r1, [r7, #0]
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f000 fb43 	bl	80176d4 <USBD_SetAddress>
          break;
 801704e:	e01f      	b.n	8017090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017050:	6839      	ldr	r1, [r7, #0]
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f000 fb82 	bl	801775c <USBD_SetConfig>
 8017058:	4603      	mov	r3, r0
 801705a:	73fb      	strb	r3, [r7, #15]
          break;
 801705c:	e018      	b.n	8017090 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801705e:	6839      	ldr	r1, [r7, #0]
 8017060:	6878      	ldr	r0, [r7, #4]
 8017062:	f000 fc21 	bl	80178a8 <USBD_GetConfig>
          break;
 8017066:	e013      	b.n	8017090 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017068:	6839      	ldr	r1, [r7, #0]
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f000 fc52 	bl	8017914 <USBD_GetStatus>
          break;
 8017070:	e00e      	b.n	8017090 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017072:	6839      	ldr	r1, [r7, #0]
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f000 fc81 	bl	801797c <USBD_SetFeature>
          break;
 801707a:	e009      	b.n	8017090 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801707c:	6839      	ldr	r1, [r7, #0]
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 fc90 	bl	80179a4 <USBD_ClrFeature>
          break;
 8017084:	e004      	b.n	8017090 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8017086:	6839      	ldr	r1, [r7, #0]
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f000 fce7 	bl	8017a5c <USBD_CtlError>
          break;
 801708e:	bf00      	nop
      }
      break;
 8017090:	e004      	b.n	801709c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8017092:	6839      	ldr	r1, [r7, #0]
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f000 fce1 	bl	8017a5c <USBD_CtlError>
      break;
 801709a:	bf00      	nop
  }

  return ret;
 801709c:	7bfb      	ldrb	r3, [r7, #15]
}
 801709e:	4618      	mov	r0, r3
 80170a0:	3710      	adds	r7, #16
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}
 80170a6:	bf00      	nop

080170a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b084      	sub	sp, #16
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
 80170b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80170b2:	2300      	movs	r3, #0
 80170b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80170be:	2b40      	cmp	r3, #64	; 0x40
 80170c0:	d005      	beq.n	80170ce <USBD_StdItfReq+0x26>
 80170c2:	2b40      	cmp	r3, #64	; 0x40
 80170c4:	d82f      	bhi.n	8017126 <USBD_StdItfReq+0x7e>
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d001      	beq.n	80170ce <USBD_StdItfReq+0x26>
 80170ca:	2b20      	cmp	r3, #32
 80170cc:	d12b      	bne.n	8017126 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170d4:	b2db      	uxtb	r3, r3
 80170d6:	3b01      	subs	r3, #1
 80170d8:	2b02      	cmp	r3, #2
 80170da:	d81d      	bhi.n	8017118 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	889b      	ldrh	r3, [r3, #4]
 80170e0:	b2db      	uxtb	r3, r3
 80170e2:	2b01      	cmp	r3, #1
 80170e4:	d813      	bhi.n	801710e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170ec:	689b      	ldr	r3, [r3, #8]
 80170ee:	6839      	ldr	r1, [r7, #0]
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	4798      	blx	r3
 80170f4:	4603      	mov	r3, r0
 80170f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	88db      	ldrh	r3, [r3, #6]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d110      	bne.n	8017122 <USBD_StdItfReq+0x7a>
 8017100:	7bfb      	ldrb	r3, [r7, #15]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d10d      	bne.n	8017122 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017106:	6878      	ldr	r0, [r7, #4]
 8017108:	f000 fd73 	bl	8017bf2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801710c:	e009      	b.n	8017122 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801710e:	6839      	ldr	r1, [r7, #0]
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f000 fca3 	bl	8017a5c <USBD_CtlError>
          break;
 8017116:	e004      	b.n	8017122 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8017118:	6839      	ldr	r1, [r7, #0]
 801711a:	6878      	ldr	r0, [r7, #4]
 801711c:	f000 fc9e 	bl	8017a5c <USBD_CtlError>
          break;
 8017120:	e000      	b.n	8017124 <USBD_StdItfReq+0x7c>
          break;
 8017122:	bf00      	nop
      }
      break;
 8017124:	e004      	b.n	8017130 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8017126:	6839      	ldr	r1, [r7, #0]
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	f000 fc97 	bl	8017a5c <USBD_CtlError>
      break;
 801712e:	bf00      	nop
  }

  return ret;
 8017130:	7bfb      	ldrb	r3, [r7, #15]
}
 8017132:	4618      	mov	r0, r3
 8017134:	3710      	adds	r7, #16
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}

0801713a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801713a:	b580      	push	{r7, lr}
 801713c:	b084      	sub	sp, #16
 801713e:	af00      	add	r7, sp, #0
 8017140:	6078      	str	r0, [r7, #4]
 8017142:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017144:	2300      	movs	r3, #0
 8017146:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	889b      	ldrh	r3, [r3, #4]
 801714c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801714e:	683b      	ldr	r3, [r7, #0]
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017156:	2b40      	cmp	r3, #64	; 0x40
 8017158:	d007      	beq.n	801716a <USBD_StdEPReq+0x30>
 801715a:	2b40      	cmp	r3, #64	; 0x40
 801715c:	f200 8145 	bhi.w	80173ea <USBD_StdEPReq+0x2b0>
 8017160:	2b00      	cmp	r3, #0
 8017162:	d00c      	beq.n	801717e <USBD_StdEPReq+0x44>
 8017164:	2b20      	cmp	r3, #32
 8017166:	f040 8140 	bne.w	80173ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017170:	689b      	ldr	r3, [r3, #8]
 8017172:	6839      	ldr	r1, [r7, #0]
 8017174:	6878      	ldr	r0, [r7, #4]
 8017176:	4798      	blx	r3
 8017178:	4603      	mov	r3, r0
 801717a:	73fb      	strb	r3, [r7, #15]
      break;
 801717c:	e13a      	b.n	80173f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801717e:	683b      	ldr	r3, [r7, #0]
 8017180:	785b      	ldrb	r3, [r3, #1]
 8017182:	2b03      	cmp	r3, #3
 8017184:	d007      	beq.n	8017196 <USBD_StdEPReq+0x5c>
 8017186:	2b03      	cmp	r3, #3
 8017188:	f300 8129 	bgt.w	80173de <USBD_StdEPReq+0x2a4>
 801718c:	2b00      	cmp	r3, #0
 801718e:	d07f      	beq.n	8017290 <USBD_StdEPReq+0x156>
 8017190:	2b01      	cmp	r3, #1
 8017192:	d03c      	beq.n	801720e <USBD_StdEPReq+0xd4>
 8017194:	e123      	b.n	80173de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801719c:	b2db      	uxtb	r3, r3
 801719e:	2b02      	cmp	r3, #2
 80171a0:	d002      	beq.n	80171a8 <USBD_StdEPReq+0x6e>
 80171a2:	2b03      	cmp	r3, #3
 80171a4:	d016      	beq.n	80171d4 <USBD_StdEPReq+0x9a>
 80171a6:	e02c      	b.n	8017202 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80171a8:	7bbb      	ldrb	r3, [r7, #14]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d00d      	beq.n	80171ca <USBD_StdEPReq+0x90>
 80171ae:	7bbb      	ldrb	r3, [r7, #14]
 80171b0:	2b80      	cmp	r3, #128	; 0x80
 80171b2:	d00a      	beq.n	80171ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80171b4:	7bbb      	ldrb	r3, [r7, #14]
 80171b6:	4619      	mov	r1, r3
 80171b8:	6878      	ldr	r0, [r7, #4]
 80171ba:	f001 f93f 	bl	801843c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80171be:	2180      	movs	r1, #128	; 0x80
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f001 f93b 	bl	801843c <USBD_LL_StallEP>
 80171c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80171c8:	e020      	b.n	801720c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80171ca:	6839      	ldr	r1, [r7, #0]
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f000 fc45 	bl	8017a5c <USBD_CtlError>
              break;
 80171d2:	e01b      	b.n	801720c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	885b      	ldrh	r3, [r3, #2]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d10e      	bne.n	80171fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80171dc:	7bbb      	ldrb	r3, [r7, #14]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d00b      	beq.n	80171fa <USBD_StdEPReq+0xc0>
 80171e2:	7bbb      	ldrb	r3, [r7, #14]
 80171e4:	2b80      	cmp	r3, #128	; 0x80
 80171e6:	d008      	beq.n	80171fa <USBD_StdEPReq+0xc0>
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	88db      	ldrh	r3, [r3, #6]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d104      	bne.n	80171fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80171f0:	7bbb      	ldrb	r3, [r7, #14]
 80171f2:	4619      	mov	r1, r3
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f001 f921 	bl	801843c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f000 fcf9 	bl	8017bf2 <USBD_CtlSendStatus>

              break;
 8017200:	e004      	b.n	801720c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8017202:	6839      	ldr	r1, [r7, #0]
 8017204:	6878      	ldr	r0, [r7, #4]
 8017206:	f000 fc29 	bl	8017a5c <USBD_CtlError>
              break;
 801720a:	bf00      	nop
          }
          break;
 801720c:	e0ec      	b.n	80173e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017214:	b2db      	uxtb	r3, r3
 8017216:	2b02      	cmp	r3, #2
 8017218:	d002      	beq.n	8017220 <USBD_StdEPReq+0xe6>
 801721a:	2b03      	cmp	r3, #3
 801721c:	d016      	beq.n	801724c <USBD_StdEPReq+0x112>
 801721e:	e030      	b.n	8017282 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017220:	7bbb      	ldrb	r3, [r7, #14]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d00d      	beq.n	8017242 <USBD_StdEPReq+0x108>
 8017226:	7bbb      	ldrb	r3, [r7, #14]
 8017228:	2b80      	cmp	r3, #128	; 0x80
 801722a:	d00a      	beq.n	8017242 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801722c:	7bbb      	ldrb	r3, [r7, #14]
 801722e:	4619      	mov	r1, r3
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f001 f903 	bl	801843c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017236:	2180      	movs	r1, #128	; 0x80
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f001 f8ff 	bl	801843c <USBD_LL_StallEP>
 801723e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017240:	e025      	b.n	801728e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8017242:	6839      	ldr	r1, [r7, #0]
 8017244:	6878      	ldr	r0, [r7, #4]
 8017246:	f000 fc09 	bl	8017a5c <USBD_CtlError>
              break;
 801724a:	e020      	b.n	801728e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	885b      	ldrh	r3, [r3, #2]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d11b      	bne.n	801728c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017254:	7bbb      	ldrb	r3, [r7, #14]
 8017256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801725a:	2b00      	cmp	r3, #0
 801725c:	d004      	beq.n	8017268 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801725e:	7bbb      	ldrb	r3, [r7, #14]
 8017260:	4619      	mov	r1, r3
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f001 f909 	bl	801847a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017268:	6878      	ldr	r0, [r7, #4]
 801726a:	f000 fcc2 	bl	8017bf2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017274:	689b      	ldr	r3, [r3, #8]
 8017276:	6839      	ldr	r1, [r7, #0]
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	4798      	blx	r3
 801727c:	4603      	mov	r3, r0
 801727e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8017280:	e004      	b.n	801728c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8017282:	6839      	ldr	r1, [r7, #0]
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f000 fbe9 	bl	8017a5c <USBD_CtlError>
              break;
 801728a:	e000      	b.n	801728e <USBD_StdEPReq+0x154>
              break;
 801728c:	bf00      	nop
          }
          break;
 801728e:	e0ab      	b.n	80173e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017296:	b2db      	uxtb	r3, r3
 8017298:	2b02      	cmp	r3, #2
 801729a:	d002      	beq.n	80172a2 <USBD_StdEPReq+0x168>
 801729c:	2b03      	cmp	r3, #3
 801729e:	d032      	beq.n	8017306 <USBD_StdEPReq+0x1cc>
 80172a0:	e097      	b.n	80173d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80172a2:	7bbb      	ldrb	r3, [r7, #14]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d007      	beq.n	80172b8 <USBD_StdEPReq+0x17e>
 80172a8:	7bbb      	ldrb	r3, [r7, #14]
 80172aa:	2b80      	cmp	r3, #128	; 0x80
 80172ac:	d004      	beq.n	80172b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80172ae:	6839      	ldr	r1, [r7, #0]
 80172b0:	6878      	ldr	r0, [r7, #4]
 80172b2:	f000 fbd3 	bl	8017a5c <USBD_CtlError>
                break;
 80172b6:	e091      	b.n	80173dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80172b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	da0b      	bge.n	80172d8 <USBD_StdEPReq+0x19e>
 80172c0:	7bbb      	ldrb	r3, [r7, #14]
 80172c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80172c6:	4613      	mov	r3, r2
 80172c8:	009b      	lsls	r3, r3, #2
 80172ca:	4413      	add	r3, r2
 80172cc:	009b      	lsls	r3, r3, #2
 80172ce:	3310      	adds	r3, #16
 80172d0:	687a      	ldr	r2, [r7, #4]
 80172d2:	4413      	add	r3, r2
 80172d4:	3304      	adds	r3, #4
 80172d6:	e00b      	b.n	80172f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80172d8:	7bbb      	ldrb	r3, [r7, #14]
 80172da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80172de:	4613      	mov	r3, r2
 80172e0:	009b      	lsls	r3, r3, #2
 80172e2:	4413      	add	r3, r2
 80172e4:	009b      	lsls	r3, r3, #2
 80172e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80172ea:	687a      	ldr	r2, [r7, #4]
 80172ec:	4413      	add	r3, r2
 80172ee:	3304      	adds	r3, #4
 80172f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80172f2:	68bb      	ldr	r3, [r7, #8]
 80172f4:	2200      	movs	r2, #0
 80172f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	2202      	movs	r2, #2
 80172fc:	4619      	mov	r1, r3
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f000 fc1d 	bl	8017b3e <USBD_CtlSendData>
              break;
 8017304:	e06a      	b.n	80173dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801730a:	2b00      	cmp	r3, #0
 801730c:	da11      	bge.n	8017332 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801730e:	7bbb      	ldrb	r3, [r7, #14]
 8017310:	f003 020f 	and.w	r2, r3, #15
 8017314:	6879      	ldr	r1, [r7, #4]
 8017316:	4613      	mov	r3, r2
 8017318:	009b      	lsls	r3, r3, #2
 801731a:	4413      	add	r3, r2
 801731c:	009b      	lsls	r3, r3, #2
 801731e:	440b      	add	r3, r1
 8017320:	3324      	adds	r3, #36	; 0x24
 8017322:	881b      	ldrh	r3, [r3, #0]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d117      	bne.n	8017358 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017328:	6839      	ldr	r1, [r7, #0]
 801732a:	6878      	ldr	r0, [r7, #4]
 801732c:	f000 fb96 	bl	8017a5c <USBD_CtlError>
                  break;
 8017330:	e054      	b.n	80173dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017332:	7bbb      	ldrb	r3, [r7, #14]
 8017334:	f003 020f 	and.w	r2, r3, #15
 8017338:	6879      	ldr	r1, [r7, #4]
 801733a:	4613      	mov	r3, r2
 801733c:	009b      	lsls	r3, r3, #2
 801733e:	4413      	add	r3, r2
 8017340:	009b      	lsls	r3, r3, #2
 8017342:	440b      	add	r3, r1
 8017344:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8017348:	881b      	ldrh	r3, [r3, #0]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d104      	bne.n	8017358 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801734e:	6839      	ldr	r1, [r7, #0]
 8017350:	6878      	ldr	r0, [r7, #4]
 8017352:	f000 fb83 	bl	8017a5c <USBD_CtlError>
                  break;
 8017356:	e041      	b.n	80173dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801735c:	2b00      	cmp	r3, #0
 801735e:	da0b      	bge.n	8017378 <USBD_StdEPReq+0x23e>
 8017360:	7bbb      	ldrb	r3, [r7, #14]
 8017362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017366:	4613      	mov	r3, r2
 8017368:	009b      	lsls	r3, r3, #2
 801736a:	4413      	add	r3, r2
 801736c:	009b      	lsls	r3, r3, #2
 801736e:	3310      	adds	r3, #16
 8017370:	687a      	ldr	r2, [r7, #4]
 8017372:	4413      	add	r3, r2
 8017374:	3304      	adds	r3, #4
 8017376:	e00b      	b.n	8017390 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017378:	7bbb      	ldrb	r3, [r7, #14]
 801737a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801737e:	4613      	mov	r3, r2
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	4413      	add	r3, r2
 8017384:	009b      	lsls	r3, r3, #2
 8017386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801738a:	687a      	ldr	r2, [r7, #4]
 801738c:	4413      	add	r3, r2
 801738e:	3304      	adds	r3, #4
 8017390:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017392:	7bbb      	ldrb	r3, [r7, #14]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d002      	beq.n	801739e <USBD_StdEPReq+0x264>
 8017398:	7bbb      	ldrb	r3, [r7, #14]
 801739a:	2b80      	cmp	r3, #128	; 0x80
 801739c:	d103      	bne.n	80173a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	2200      	movs	r2, #0
 80173a2:	601a      	str	r2, [r3, #0]
 80173a4:	e00e      	b.n	80173c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80173a6:	7bbb      	ldrb	r3, [r7, #14]
 80173a8:	4619      	mov	r1, r3
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f001 f884 	bl	80184b8 <USBD_LL_IsStallEP>
 80173b0:	4603      	mov	r3, r0
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d003      	beq.n	80173be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	2201      	movs	r2, #1
 80173ba:	601a      	str	r2, [r3, #0]
 80173bc:	e002      	b.n	80173c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80173be:	68bb      	ldr	r3, [r7, #8]
 80173c0:	2200      	movs	r2, #0
 80173c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	2202      	movs	r2, #2
 80173c8:	4619      	mov	r1, r3
 80173ca:	6878      	ldr	r0, [r7, #4]
 80173cc:	f000 fbb7 	bl	8017b3e <USBD_CtlSendData>
              break;
 80173d0:	e004      	b.n	80173dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80173d2:	6839      	ldr	r1, [r7, #0]
 80173d4:	6878      	ldr	r0, [r7, #4]
 80173d6:	f000 fb41 	bl	8017a5c <USBD_CtlError>
              break;
 80173da:	bf00      	nop
          }
          break;
 80173dc:	e004      	b.n	80173e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80173de:	6839      	ldr	r1, [r7, #0]
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	f000 fb3b 	bl	8017a5c <USBD_CtlError>
          break;
 80173e6:	bf00      	nop
      }
      break;
 80173e8:	e004      	b.n	80173f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80173ea:	6839      	ldr	r1, [r7, #0]
 80173ec:	6878      	ldr	r0, [r7, #4]
 80173ee:	f000 fb35 	bl	8017a5c <USBD_CtlError>
      break;
 80173f2:	bf00      	nop
  }

  return ret;
 80173f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3710      	adds	r7, #16
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}
	...

08017400 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b084      	sub	sp, #16
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801740a:	2300      	movs	r3, #0
 801740c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801740e:	2300      	movs	r3, #0
 8017410:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017412:	2300      	movs	r3, #0
 8017414:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	885b      	ldrh	r3, [r3, #2]
 801741a:	0a1b      	lsrs	r3, r3, #8
 801741c:	b29b      	uxth	r3, r3
 801741e:	3b01      	subs	r3, #1
 8017420:	2b06      	cmp	r3, #6
 8017422:	f200 8128 	bhi.w	8017676 <USBD_GetDescriptor+0x276>
 8017426:	a201      	add	r2, pc, #4	; (adr r2, 801742c <USBD_GetDescriptor+0x2c>)
 8017428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801742c:	08017449 	.word	0x08017449
 8017430:	08017461 	.word	0x08017461
 8017434:	080174a1 	.word	0x080174a1
 8017438:	08017677 	.word	0x08017677
 801743c:	08017677 	.word	0x08017677
 8017440:	08017617 	.word	0x08017617
 8017444:	08017643 	.word	0x08017643
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	687a      	ldr	r2, [r7, #4]
 8017452:	7c12      	ldrb	r2, [r2, #16]
 8017454:	f107 0108 	add.w	r1, r7, #8
 8017458:	4610      	mov	r0, r2
 801745a:	4798      	blx	r3
 801745c:	60f8      	str	r0, [r7, #12]
      break;
 801745e:	e112      	b.n	8017686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	7c1b      	ldrb	r3, [r3, #16]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d10d      	bne.n	8017484 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017470:	f107 0208 	add.w	r2, r7, #8
 8017474:	4610      	mov	r0, r2
 8017476:	4798      	blx	r3
 8017478:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	3301      	adds	r3, #1
 801747e:	2202      	movs	r2, #2
 8017480:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017482:	e100      	b.n	8017686 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801748c:	f107 0208 	add.w	r2, r7, #8
 8017490:	4610      	mov	r0, r2
 8017492:	4798      	blx	r3
 8017494:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	3301      	adds	r3, #1
 801749a:	2202      	movs	r2, #2
 801749c:	701a      	strb	r2, [r3, #0]
      break;
 801749e:	e0f2      	b.n	8017686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	885b      	ldrh	r3, [r3, #2]
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	2b05      	cmp	r3, #5
 80174a8:	f200 80ac 	bhi.w	8017604 <USBD_GetDescriptor+0x204>
 80174ac:	a201      	add	r2, pc, #4	; (adr r2, 80174b4 <USBD_GetDescriptor+0xb4>)
 80174ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174b2:	bf00      	nop
 80174b4:	080174cd 	.word	0x080174cd
 80174b8:	08017501 	.word	0x08017501
 80174bc:	08017535 	.word	0x08017535
 80174c0:	08017569 	.word	0x08017569
 80174c4:	0801759d 	.word	0x0801759d
 80174c8:	080175d1 	.word	0x080175d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80174d2:	685b      	ldr	r3, [r3, #4]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d00b      	beq.n	80174f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80174de:	685b      	ldr	r3, [r3, #4]
 80174e0:	687a      	ldr	r2, [r7, #4]
 80174e2:	7c12      	ldrb	r2, [r2, #16]
 80174e4:	f107 0108 	add.w	r1, r7, #8
 80174e8:	4610      	mov	r0, r2
 80174ea:	4798      	blx	r3
 80174ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80174ee:	e091      	b.n	8017614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80174f0:	6839      	ldr	r1, [r7, #0]
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f000 fab2 	bl	8017a5c <USBD_CtlError>
            err++;
 80174f8:	7afb      	ldrb	r3, [r7, #11]
 80174fa:	3301      	adds	r3, #1
 80174fc:	72fb      	strb	r3, [r7, #11]
          break;
 80174fe:	e089      	b.n	8017614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017506:	689b      	ldr	r3, [r3, #8]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d00b      	beq.n	8017524 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017512:	689b      	ldr	r3, [r3, #8]
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	7c12      	ldrb	r2, [r2, #16]
 8017518:	f107 0108 	add.w	r1, r7, #8
 801751c:	4610      	mov	r0, r2
 801751e:	4798      	blx	r3
 8017520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017522:	e077      	b.n	8017614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017524:	6839      	ldr	r1, [r7, #0]
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f000 fa98 	bl	8017a5c <USBD_CtlError>
            err++;
 801752c:	7afb      	ldrb	r3, [r7, #11]
 801752e:	3301      	adds	r3, #1
 8017530:	72fb      	strb	r3, [r7, #11]
          break;
 8017532:	e06f      	b.n	8017614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801753a:	68db      	ldr	r3, [r3, #12]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d00b      	beq.n	8017558 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017546:	68db      	ldr	r3, [r3, #12]
 8017548:	687a      	ldr	r2, [r7, #4]
 801754a:	7c12      	ldrb	r2, [r2, #16]
 801754c:	f107 0108 	add.w	r1, r7, #8
 8017550:	4610      	mov	r0, r2
 8017552:	4798      	blx	r3
 8017554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017556:	e05d      	b.n	8017614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017558:	6839      	ldr	r1, [r7, #0]
 801755a:	6878      	ldr	r0, [r7, #4]
 801755c:	f000 fa7e 	bl	8017a5c <USBD_CtlError>
            err++;
 8017560:	7afb      	ldrb	r3, [r7, #11]
 8017562:	3301      	adds	r3, #1
 8017564:	72fb      	strb	r3, [r7, #11]
          break;
 8017566:	e055      	b.n	8017614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801756e:	691b      	ldr	r3, [r3, #16]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d00b      	beq.n	801758c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801757a:	691b      	ldr	r3, [r3, #16]
 801757c:	687a      	ldr	r2, [r7, #4]
 801757e:	7c12      	ldrb	r2, [r2, #16]
 8017580:	f107 0108 	add.w	r1, r7, #8
 8017584:	4610      	mov	r0, r2
 8017586:	4798      	blx	r3
 8017588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801758a:	e043      	b.n	8017614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801758c:	6839      	ldr	r1, [r7, #0]
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f000 fa64 	bl	8017a5c <USBD_CtlError>
            err++;
 8017594:	7afb      	ldrb	r3, [r7, #11]
 8017596:	3301      	adds	r3, #1
 8017598:	72fb      	strb	r3, [r7, #11]
          break;
 801759a:	e03b      	b.n	8017614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175a2:	695b      	ldr	r3, [r3, #20]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d00b      	beq.n	80175c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175ae:	695b      	ldr	r3, [r3, #20]
 80175b0:	687a      	ldr	r2, [r7, #4]
 80175b2:	7c12      	ldrb	r2, [r2, #16]
 80175b4:	f107 0108 	add.w	r1, r7, #8
 80175b8:	4610      	mov	r0, r2
 80175ba:	4798      	blx	r3
 80175bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175be:	e029      	b.n	8017614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80175c0:	6839      	ldr	r1, [r7, #0]
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f000 fa4a 	bl	8017a5c <USBD_CtlError>
            err++;
 80175c8:	7afb      	ldrb	r3, [r7, #11]
 80175ca:	3301      	adds	r3, #1
 80175cc:	72fb      	strb	r3, [r7, #11]
          break;
 80175ce:	e021      	b.n	8017614 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175d6:	699b      	ldr	r3, [r3, #24]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d00b      	beq.n	80175f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80175e2:	699b      	ldr	r3, [r3, #24]
 80175e4:	687a      	ldr	r2, [r7, #4]
 80175e6:	7c12      	ldrb	r2, [r2, #16]
 80175e8:	f107 0108 	add.w	r1, r7, #8
 80175ec:	4610      	mov	r0, r2
 80175ee:	4798      	blx	r3
 80175f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80175f2:	e00f      	b.n	8017614 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80175f4:	6839      	ldr	r1, [r7, #0]
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f000 fa30 	bl	8017a5c <USBD_CtlError>
            err++;
 80175fc:	7afb      	ldrb	r3, [r7, #11]
 80175fe:	3301      	adds	r3, #1
 8017600:	72fb      	strb	r3, [r7, #11]
          break;
 8017602:	e007      	b.n	8017614 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017604:	6839      	ldr	r1, [r7, #0]
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f000 fa28 	bl	8017a5c <USBD_CtlError>
          err++;
 801760c:	7afb      	ldrb	r3, [r7, #11]
 801760e:	3301      	adds	r3, #1
 8017610:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8017612:	bf00      	nop
      }
      break;
 8017614:	e037      	b.n	8017686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	7c1b      	ldrb	r3, [r3, #16]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d109      	bne.n	8017632 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017626:	f107 0208 	add.w	r2, r7, #8
 801762a:	4610      	mov	r0, r2
 801762c:	4798      	blx	r3
 801762e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017630:	e029      	b.n	8017686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017632:	6839      	ldr	r1, [r7, #0]
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f000 fa11 	bl	8017a5c <USBD_CtlError>
        err++;
 801763a:	7afb      	ldrb	r3, [r7, #11]
 801763c:	3301      	adds	r3, #1
 801763e:	72fb      	strb	r3, [r7, #11]
      break;
 8017640:	e021      	b.n	8017686 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	7c1b      	ldrb	r3, [r3, #16]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d10d      	bne.n	8017666 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017652:	f107 0208 	add.w	r2, r7, #8
 8017656:	4610      	mov	r0, r2
 8017658:	4798      	blx	r3
 801765a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	3301      	adds	r3, #1
 8017660:	2207      	movs	r2, #7
 8017662:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017664:	e00f      	b.n	8017686 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017666:	6839      	ldr	r1, [r7, #0]
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f000 f9f7 	bl	8017a5c <USBD_CtlError>
        err++;
 801766e:	7afb      	ldrb	r3, [r7, #11]
 8017670:	3301      	adds	r3, #1
 8017672:	72fb      	strb	r3, [r7, #11]
      break;
 8017674:	e007      	b.n	8017686 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8017676:	6839      	ldr	r1, [r7, #0]
 8017678:	6878      	ldr	r0, [r7, #4]
 801767a:	f000 f9ef 	bl	8017a5c <USBD_CtlError>
      err++;
 801767e:	7afb      	ldrb	r3, [r7, #11]
 8017680:	3301      	adds	r3, #1
 8017682:	72fb      	strb	r3, [r7, #11]
      break;
 8017684:	bf00      	nop
  }

  if (err != 0U)
 8017686:	7afb      	ldrb	r3, [r7, #11]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d11e      	bne.n	80176ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	88db      	ldrh	r3, [r3, #6]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d016      	beq.n	80176c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017694:	893b      	ldrh	r3, [r7, #8]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d00e      	beq.n	80176b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	88da      	ldrh	r2, [r3, #6]
 801769e:	893b      	ldrh	r3, [r7, #8]
 80176a0:	4293      	cmp	r3, r2
 80176a2:	bf28      	it	cs
 80176a4:	4613      	movcs	r3, r2
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80176aa:	893b      	ldrh	r3, [r7, #8]
 80176ac:	461a      	mov	r2, r3
 80176ae:	68f9      	ldr	r1, [r7, #12]
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	f000 fa44 	bl	8017b3e <USBD_CtlSendData>
 80176b6:	e009      	b.n	80176cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80176b8:	6839      	ldr	r1, [r7, #0]
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f000 f9ce 	bl	8017a5c <USBD_CtlError>
 80176c0:	e004      	b.n	80176cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f000 fa95 	bl	8017bf2 <USBD_CtlSendStatus>
 80176c8:	e000      	b.n	80176cc <USBD_GetDescriptor+0x2cc>
    return;
 80176ca:	bf00      	nop
  }
}
 80176cc:	3710      	adds	r7, #16
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop

080176d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b084      	sub	sp, #16
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	889b      	ldrh	r3, [r3, #4]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d131      	bne.n	801774a <USBD_SetAddress+0x76>
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	88db      	ldrh	r3, [r3, #6]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d12d      	bne.n	801774a <USBD_SetAddress+0x76>
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	885b      	ldrh	r3, [r3, #2]
 80176f2:	2b7f      	cmp	r3, #127	; 0x7f
 80176f4:	d829      	bhi.n	801774a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	885b      	ldrh	r3, [r3, #2]
 80176fa:	b2db      	uxtb	r3, r3
 80176fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017700:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017708:	b2db      	uxtb	r3, r3
 801770a:	2b03      	cmp	r3, #3
 801770c:	d104      	bne.n	8017718 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801770e:	6839      	ldr	r1, [r7, #0]
 8017710:	6878      	ldr	r0, [r7, #4]
 8017712:	f000 f9a3 	bl	8017a5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017716:	e01d      	b.n	8017754 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	7bfa      	ldrb	r2, [r7, #15]
 801771c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017720:	7bfb      	ldrb	r3, [r7, #15]
 8017722:	4619      	mov	r1, r3
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	f000 fef3 	bl	8018510 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	f000 fa61 	bl	8017bf2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017730:	7bfb      	ldrb	r3, [r7, #15]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d004      	beq.n	8017740 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2202      	movs	r2, #2
 801773a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801773e:	e009      	b.n	8017754 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	2201      	movs	r2, #1
 8017744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017748:	e004      	b.n	8017754 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801774a:	6839      	ldr	r1, [r7, #0]
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f000 f985 	bl	8017a5c <USBD_CtlError>
  }
}
 8017752:	bf00      	nop
 8017754:	bf00      	nop
 8017756:	3710      	adds	r7, #16
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}

0801775c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b084      	sub	sp, #16
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
 8017764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017766:	2300      	movs	r3, #0
 8017768:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	885b      	ldrh	r3, [r3, #2]
 801776e:	b2da      	uxtb	r2, r3
 8017770:	4b4c      	ldr	r3, [pc, #304]	; (80178a4 <USBD_SetConfig+0x148>)
 8017772:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017774:	4b4b      	ldr	r3, [pc, #300]	; (80178a4 <USBD_SetConfig+0x148>)
 8017776:	781b      	ldrb	r3, [r3, #0]
 8017778:	2b01      	cmp	r3, #1
 801777a:	d905      	bls.n	8017788 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801777c:	6839      	ldr	r1, [r7, #0]
 801777e:	6878      	ldr	r0, [r7, #4]
 8017780:	f000 f96c 	bl	8017a5c <USBD_CtlError>
    return USBD_FAIL;
 8017784:	2303      	movs	r3, #3
 8017786:	e088      	b.n	801789a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801778e:	b2db      	uxtb	r3, r3
 8017790:	2b02      	cmp	r3, #2
 8017792:	d002      	beq.n	801779a <USBD_SetConfig+0x3e>
 8017794:	2b03      	cmp	r3, #3
 8017796:	d025      	beq.n	80177e4 <USBD_SetConfig+0x88>
 8017798:	e071      	b.n	801787e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801779a:	4b42      	ldr	r3, [pc, #264]	; (80178a4 <USBD_SetConfig+0x148>)
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d01c      	beq.n	80177dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80177a2:	4b40      	ldr	r3, [pc, #256]	; (80178a4 <USBD_SetConfig+0x148>)
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	461a      	mov	r2, r3
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80177ac:	4b3d      	ldr	r3, [pc, #244]	; (80178a4 <USBD_SetConfig+0x148>)
 80177ae:	781b      	ldrb	r3, [r3, #0]
 80177b0:	4619      	mov	r1, r3
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f7ff f948 	bl	8016a48 <USBD_SetClassConfig>
 80177b8:	4603      	mov	r3, r0
 80177ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80177bc:	7bfb      	ldrb	r3, [r7, #15]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d004      	beq.n	80177cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80177c2:	6839      	ldr	r1, [r7, #0]
 80177c4:	6878      	ldr	r0, [r7, #4]
 80177c6:	f000 f949 	bl	8017a5c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80177ca:	e065      	b.n	8017898 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80177cc:	6878      	ldr	r0, [r7, #4]
 80177ce:	f000 fa10 	bl	8017bf2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	2203      	movs	r2, #3
 80177d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80177da:	e05d      	b.n	8017898 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f000 fa08 	bl	8017bf2 <USBD_CtlSendStatus>
      break;
 80177e2:	e059      	b.n	8017898 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80177e4:	4b2f      	ldr	r3, [pc, #188]	; (80178a4 <USBD_SetConfig+0x148>)
 80177e6:	781b      	ldrb	r3, [r3, #0]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d112      	bne.n	8017812 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	2202      	movs	r2, #2
 80177f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80177f4:	4b2b      	ldr	r3, [pc, #172]	; (80178a4 <USBD_SetConfig+0x148>)
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	461a      	mov	r2, r3
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80177fe:	4b29      	ldr	r3, [pc, #164]	; (80178a4 <USBD_SetConfig+0x148>)
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	4619      	mov	r1, r3
 8017804:	6878      	ldr	r0, [r7, #4]
 8017806:	f7ff f93b 	bl	8016a80 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f000 f9f1 	bl	8017bf2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017810:	e042      	b.n	8017898 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8017812:	4b24      	ldr	r3, [pc, #144]	; (80178a4 <USBD_SetConfig+0x148>)
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	461a      	mov	r2, r3
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	685b      	ldr	r3, [r3, #4]
 801781c:	429a      	cmp	r2, r3
 801781e:	d02a      	beq.n	8017876 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	685b      	ldr	r3, [r3, #4]
 8017824:	b2db      	uxtb	r3, r3
 8017826:	4619      	mov	r1, r3
 8017828:	6878      	ldr	r0, [r7, #4]
 801782a:	f7ff f929 	bl	8016a80 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801782e:	4b1d      	ldr	r3, [pc, #116]	; (80178a4 <USBD_SetConfig+0x148>)
 8017830:	781b      	ldrb	r3, [r3, #0]
 8017832:	461a      	mov	r2, r3
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017838:	4b1a      	ldr	r3, [pc, #104]	; (80178a4 <USBD_SetConfig+0x148>)
 801783a:	781b      	ldrb	r3, [r3, #0]
 801783c:	4619      	mov	r1, r3
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f7ff f902 	bl	8016a48 <USBD_SetClassConfig>
 8017844:	4603      	mov	r3, r0
 8017846:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017848:	7bfb      	ldrb	r3, [r7, #15]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d00f      	beq.n	801786e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801784e:	6839      	ldr	r1, [r7, #0]
 8017850:	6878      	ldr	r0, [r7, #4]
 8017852:	f000 f903 	bl	8017a5c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	685b      	ldr	r3, [r3, #4]
 801785a:	b2db      	uxtb	r3, r3
 801785c:	4619      	mov	r1, r3
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f7ff f90e 	bl	8016a80 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2202      	movs	r2, #2
 8017868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801786c:	e014      	b.n	8017898 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801786e:	6878      	ldr	r0, [r7, #4]
 8017870:	f000 f9bf 	bl	8017bf2 <USBD_CtlSendStatus>
      break;
 8017874:	e010      	b.n	8017898 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017876:	6878      	ldr	r0, [r7, #4]
 8017878:	f000 f9bb 	bl	8017bf2 <USBD_CtlSendStatus>
      break;
 801787c:	e00c      	b.n	8017898 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801787e:	6839      	ldr	r1, [r7, #0]
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f000 f8eb 	bl	8017a5c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017886:	4b07      	ldr	r3, [pc, #28]	; (80178a4 <USBD_SetConfig+0x148>)
 8017888:	781b      	ldrb	r3, [r3, #0]
 801788a:	4619      	mov	r1, r3
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f7ff f8f7 	bl	8016a80 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017892:	2303      	movs	r3, #3
 8017894:	73fb      	strb	r3, [r7, #15]
      break;
 8017896:	bf00      	nop
  }

  return ret;
 8017898:	7bfb      	ldrb	r3, [r7, #15]
}
 801789a:	4618      	mov	r0, r3
 801789c:	3710      	adds	r7, #16
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	bf00      	nop
 80178a4:	24001b58 	.word	0x24001b58

080178a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b082      	sub	sp, #8
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80178b2:	683b      	ldr	r3, [r7, #0]
 80178b4:	88db      	ldrh	r3, [r3, #6]
 80178b6:	2b01      	cmp	r3, #1
 80178b8:	d004      	beq.n	80178c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80178ba:	6839      	ldr	r1, [r7, #0]
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f000 f8cd 	bl	8017a5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80178c2:	e023      	b.n	801790c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178ca:	b2db      	uxtb	r3, r3
 80178cc:	2b02      	cmp	r3, #2
 80178ce:	dc02      	bgt.n	80178d6 <USBD_GetConfig+0x2e>
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	dc03      	bgt.n	80178dc <USBD_GetConfig+0x34>
 80178d4:	e015      	b.n	8017902 <USBD_GetConfig+0x5a>
 80178d6:	2b03      	cmp	r3, #3
 80178d8:	d00b      	beq.n	80178f2 <USBD_GetConfig+0x4a>
 80178da:	e012      	b.n	8017902 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2200      	movs	r2, #0
 80178e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	3308      	adds	r3, #8
 80178e6:	2201      	movs	r2, #1
 80178e8:	4619      	mov	r1, r3
 80178ea:	6878      	ldr	r0, [r7, #4]
 80178ec:	f000 f927 	bl	8017b3e <USBD_CtlSendData>
        break;
 80178f0:	e00c      	b.n	801790c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	3304      	adds	r3, #4
 80178f6:	2201      	movs	r2, #1
 80178f8:	4619      	mov	r1, r3
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f000 f91f 	bl	8017b3e <USBD_CtlSendData>
        break;
 8017900:	e004      	b.n	801790c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017902:	6839      	ldr	r1, [r7, #0]
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f000 f8a9 	bl	8017a5c <USBD_CtlError>
        break;
 801790a:	bf00      	nop
}
 801790c:	bf00      	nop
 801790e:	3708      	adds	r7, #8
 8017910:	46bd      	mov	sp, r7
 8017912:	bd80      	pop	{r7, pc}

08017914 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b082      	sub	sp, #8
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
 801791c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017924:	b2db      	uxtb	r3, r3
 8017926:	3b01      	subs	r3, #1
 8017928:	2b02      	cmp	r3, #2
 801792a:	d81e      	bhi.n	801796a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	88db      	ldrh	r3, [r3, #6]
 8017930:	2b02      	cmp	r3, #2
 8017932:	d004      	beq.n	801793e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017934:	6839      	ldr	r1, [r7, #0]
 8017936:	6878      	ldr	r0, [r7, #4]
 8017938:	f000 f890 	bl	8017a5c <USBD_CtlError>
        break;
 801793c:	e01a      	b.n	8017974 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	2201      	movs	r2, #1
 8017942:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801794a:	2b00      	cmp	r3, #0
 801794c:	d005      	beq.n	801795a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	68db      	ldr	r3, [r3, #12]
 8017952:	f043 0202 	orr.w	r2, r3, #2
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	330c      	adds	r3, #12
 801795e:	2202      	movs	r2, #2
 8017960:	4619      	mov	r1, r3
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	f000 f8eb 	bl	8017b3e <USBD_CtlSendData>
      break;
 8017968:	e004      	b.n	8017974 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801796a:	6839      	ldr	r1, [r7, #0]
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f000 f875 	bl	8017a5c <USBD_CtlError>
      break;
 8017972:	bf00      	nop
  }
}
 8017974:	bf00      	nop
 8017976:	3708      	adds	r7, #8
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}

0801797c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b082      	sub	sp, #8
 8017980:	af00      	add	r7, sp, #0
 8017982:	6078      	str	r0, [r7, #4]
 8017984:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	885b      	ldrh	r3, [r3, #2]
 801798a:	2b01      	cmp	r3, #1
 801798c:	d106      	bne.n	801799c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	2201      	movs	r2, #1
 8017992:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017996:	6878      	ldr	r0, [r7, #4]
 8017998:	f000 f92b 	bl	8017bf2 <USBD_CtlSendStatus>
  }
}
 801799c:	bf00      	nop
 801799e:	3708      	adds	r7, #8
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}

080179a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80179b4:	b2db      	uxtb	r3, r3
 80179b6:	3b01      	subs	r3, #1
 80179b8:	2b02      	cmp	r3, #2
 80179ba:	d80b      	bhi.n	80179d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179bc:	683b      	ldr	r3, [r7, #0]
 80179be:	885b      	ldrh	r3, [r3, #2]
 80179c0:	2b01      	cmp	r3, #1
 80179c2:	d10c      	bne.n	80179de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2200      	movs	r2, #0
 80179c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	f000 f910 	bl	8017bf2 <USBD_CtlSendStatus>
      }
      break;
 80179d2:	e004      	b.n	80179de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80179d4:	6839      	ldr	r1, [r7, #0]
 80179d6:	6878      	ldr	r0, [r7, #4]
 80179d8:	f000 f840 	bl	8017a5c <USBD_CtlError>
      break;
 80179dc:	e000      	b.n	80179e0 <USBD_ClrFeature+0x3c>
      break;
 80179de:	bf00      	nop
  }
}
 80179e0:	bf00      	nop
 80179e2:	3708      	adds	r7, #8
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}

080179e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b084      	sub	sp, #16
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
 80179f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	781a      	ldrb	r2, [r3, #0]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	3301      	adds	r3, #1
 8017a02:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	781a      	ldrb	r2, [r3, #0]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	3301      	adds	r3, #1
 8017a10:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f7ff fabb 	bl	8016f8e <SWAPBYTE>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	461a      	mov	r2, r3
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	3301      	adds	r3, #1
 8017a24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	3301      	adds	r3, #1
 8017a2a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017a2c:	68f8      	ldr	r0, [r7, #12]
 8017a2e:	f7ff faae 	bl	8016f8e <SWAPBYTE>
 8017a32:	4603      	mov	r3, r0
 8017a34:	461a      	mov	r2, r3
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	3301      	adds	r3, #1
 8017a3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	3301      	adds	r3, #1
 8017a44:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017a46:	68f8      	ldr	r0, [r7, #12]
 8017a48:	f7ff faa1 	bl	8016f8e <SWAPBYTE>
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	461a      	mov	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	80da      	strh	r2, [r3, #6]
}
 8017a54:	bf00      	nop
 8017a56:	3710      	adds	r7, #16
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}

08017a5c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
 8017a64:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017a66:	2180      	movs	r1, #128	; 0x80
 8017a68:	6878      	ldr	r0, [r7, #4]
 8017a6a:	f000 fce7 	bl	801843c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017a6e:	2100      	movs	r1, #0
 8017a70:	6878      	ldr	r0, [r7, #4]
 8017a72:	f000 fce3 	bl	801843c <USBD_LL_StallEP>
}
 8017a76:	bf00      	nop
 8017a78:	3708      	adds	r7, #8
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}

08017a7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017a7e:	b580      	push	{r7, lr}
 8017a80:	b086      	sub	sp, #24
 8017a82:	af00      	add	r7, sp, #0
 8017a84:	60f8      	str	r0, [r7, #12]
 8017a86:	60b9      	str	r1, [r7, #8]
 8017a88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d036      	beq.n	8017b02 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017a98:	6938      	ldr	r0, [r7, #16]
 8017a9a:	f000 f836 	bl	8017b0a <USBD_GetLen>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	3301      	adds	r3, #1
 8017aa2:	b29b      	uxth	r3, r3
 8017aa4:	005b      	lsls	r3, r3, #1
 8017aa6:	b29a      	uxth	r2, r3
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017aac:	7dfb      	ldrb	r3, [r7, #23]
 8017aae:	68ba      	ldr	r2, [r7, #8]
 8017ab0:	4413      	add	r3, r2
 8017ab2:	687a      	ldr	r2, [r7, #4]
 8017ab4:	7812      	ldrb	r2, [r2, #0]
 8017ab6:	701a      	strb	r2, [r3, #0]
  idx++;
 8017ab8:	7dfb      	ldrb	r3, [r7, #23]
 8017aba:	3301      	adds	r3, #1
 8017abc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017abe:	7dfb      	ldrb	r3, [r7, #23]
 8017ac0:	68ba      	ldr	r2, [r7, #8]
 8017ac2:	4413      	add	r3, r2
 8017ac4:	2203      	movs	r2, #3
 8017ac6:	701a      	strb	r2, [r3, #0]
  idx++;
 8017ac8:	7dfb      	ldrb	r3, [r7, #23]
 8017aca:	3301      	adds	r3, #1
 8017acc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017ace:	e013      	b.n	8017af8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017ad0:	7dfb      	ldrb	r3, [r7, #23]
 8017ad2:	68ba      	ldr	r2, [r7, #8]
 8017ad4:	4413      	add	r3, r2
 8017ad6:	693a      	ldr	r2, [r7, #16]
 8017ad8:	7812      	ldrb	r2, [r2, #0]
 8017ada:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	3301      	adds	r3, #1
 8017ae0:	613b      	str	r3, [r7, #16]
    idx++;
 8017ae2:	7dfb      	ldrb	r3, [r7, #23]
 8017ae4:	3301      	adds	r3, #1
 8017ae6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017ae8:	7dfb      	ldrb	r3, [r7, #23]
 8017aea:	68ba      	ldr	r2, [r7, #8]
 8017aec:	4413      	add	r3, r2
 8017aee:	2200      	movs	r2, #0
 8017af0:	701a      	strb	r2, [r3, #0]
    idx++;
 8017af2:	7dfb      	ldrb	r3, [r7, #23]
 8017af4:	3301      	adds	r3, #1
 8017af6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	781b      	ldrb	r3, [r3, #0]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d1e7      	bne.n	8017ad0 <USBD_GetString+0x52>
 8017b00:	e000      	b.n	8017b04 <USBD_GetString+0x86>
    return;
 8017b02:	bf00      	nop
  }
}
 8017b04:	3718      	adds	r7, #24
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}

08017b0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017b0a:	b480      	push	{r7}
 8017b0c:	b085      	sub	sp, #20
 8017b0e:	af00      	add	r7, sp, #0
 8017b10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017b12:	2300      	movs	r3, #0
 8017b14:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017b1a:	e005      	b.n	8017b28 <USBD_GetLen+0x1e>
  {
    len++;
 8017b1c:	7bfb      	ldrb	r3, [r7, #15]
 8017b1e:	3301      	adds	r3, #1
 8017b20:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017b22:	68bb      	ldr	r3, [r7, #8]
 8017b24:	3301      	adds	r3, #1
 8017b26:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	781b      	ldrb	r3, [r3, #0]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d1f5      	bne.n	8017b1c <USBD_GetLen+0x12>
  }

  return len;
 8017b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b32:	4618      	mov	r0, r3
 8017b34:	3714      	adds	r7, #20
 8017b36:	46bd      	mov	sp, r7
 8017b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b3c:	4770      	bx	lr

08017b3e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017b3e:	b580      	push	{r7, lr}
 8017b40:	b084      	sub	sp, #16
 8017b42:	af00      	add	r7, sp, #0
 8017b44:	60f8      	str	r0, [r7, #12]
 8017b46:	60b9      	str	r1, [r7, #8]
 8017b48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	2202      	movs	r2, #2
 8017b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	687a      	ldr	r2, [r7, #4]
 8017b56:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	687a      	ldr	r2, [r7, #4]
 8017b5c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	68ba      	ldr	r2, [r7, #8]
 8017b62:	2100      	movs	r1, #0
 8017b64:	68f8      	ldr	r0, [r7, #12]
 8017b66:	f000 fcf2 	bl	801854e <USBD_LL_Transmit>

  return USBD_OK;
 8017b6a:	2300      	movs	r3, #0
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3710      	adds	r7, #16
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b084      	sub	sp, #16
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	68ba      	ldr	r2, [r7, #8]
 8017b84:	2100      	movs	r1, #0
 8017b86:	68f8      	ldr	r0, [r7, #12]
 8017b88:	f000 fce1 	bl	801854e <USBD_LL_Transmit>

  return USBD_OK;
 8017b8c:	2300      	movs	r3, #0
}
 8017b8e:	4618      	mov	r0, r3
 8017b90:	3710      	adds	r7, #16
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}

08017b96 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017b96:	b580      	push	{r7, lr}
 8017b98:	b084      	sub	sp, #16
 8017b9a:	af00      	add	r7, sp, #0
 8017b9c:	60f8      	str	r0, [r7, #12]
 8017b9e:	60b9      	str	r1, [r7, #8]
 8017ba0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	2203      	movs	r2, #3
 8017ba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	687a      	ldr	r2, [r7, #4]
 8017bae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	68ba      	ldr	r2, [r7, #8]
 8017bbe:	2100      	movs	r1, #0
 8017bc0:	68f8      	ldr	r0, [r7, #12]
 8017bc2:	f000 fce5 	bl	8018590 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017bc6:	2300      	movs	r3, #0
}
 8017bc8:	4618      	mov	r0, r3
 8017bca:	3710      	adds	r7, #16
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd80      	pop	{r7, pc}

08017bd0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b084      	sub	sp, #16
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	60f8      	str	r0, [r7, #12]
 8017bd8:	60b9      	str	r1, [r7, #8]
 8017bda:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	68ba      	ldr	r2, [r7, #8]
 8017be0:	2100      	movs	r1, #0
 8017be2:	68f8      	ldr	r0, [r7, #12]
 8017be4:	f000 fcd4 	bl	8018590 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017be8:	2300      	movs	r3, #0
}
 8017bea:	4618      	mov	r0, r3
 8017bec:	3710      	adds	r7, #16
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b082      	sub	sp, #8
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2204      	movs	r2, #4
 8017bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017c02:	2300      	movs	r3, #0
 8017c04:	2200      	movs	r2, #0
 8017c06:	2100      	movs	r1, #0
 8017c08:	6878      	ldr	r0, [r7, #4]
 8017c0a:	f000 fca0 	bl	801854e <USBD_LL_Transmit>

  return USBD_OK;
 8017c0e:	2300      	movs	r3, #0
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	3708      	adds	r7, #8
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	2205      	movs	r2, #5
 8017c24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017c28:	2300      	movs	r3, #0
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f000 fcae 	bl	8018590 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c34:	2300      	movs	r3, #0
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3708      	adds	r7, #8
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
	...

08017c40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017c44:	2200      	movs	r2, #0
 8017c46:	4913      	ldr	r1, [pc, #76]	; (8017c94 <MX_USB_DEVICE_Init+0x54>)
 8017c48:	4813      	ldr	r0, [pc, #76]	; (8017c98 <MX_USB_DEVICE_Init+0x58>)
 8017c4a:	f7fe fe8f 	bl	801696c <USBD_Init>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d001      	beq.n	8017c58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017c54:	f7ef fef2 	bl	8007a3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017c58:	4910      	ldr	r1, [pc, #64]	; (8017c9c <MX_USB_DEVICE_Init+0x5c>)
 8017c5a:	480f      	ldr	r0, [pc, #60]	; (8017c98 <MX_USB_DEVICE_Init+0x58>)
 8017c5c:	f7fe feb6 	bl	80169cc <USBD_RegisterClass>
 8017c60:	4603      	mov	r3, r0
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d001      	beq.n	8017c6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017c66:	f7ef fee9 	bl	8007a3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017c6a:	490d      	ldr	r1, [pc, #52]	; (8017ca0 <MX_USB_DEVICE_Init+0x60>)
 8017c6c:	480a      	ldr	r0, [pc, #40]	; (8017c98 <MX_USB_DEVICE_Init+0x58>)
 8017c6e:	f7fe fe07 	bl	8016880 <USBD_CDC_RegisterInterface>
 8017c72:	4603      	mov	r3, r0
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d001      	beq.n	8017c7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017c78:	f7ef fee0 	bl	8007a3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017c7c:	4806      	ldr	r0, [pc, #24]	; (8017c98 <MX_USB_DEVICE_Init+0x58>)
 8017c7e:	f7fe fecc 	bl	8016a1a <USBD_Start>
 8017c82:	4603      	mov	r3, r0
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d001      	beq.n	8017c8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017c88:	f7ef fed8 	bl	8007a3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017c8c:	f7f6 f98a 	bl	800dfa4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017c90:	bf00      	nop
 8017c92:	bd80      	pop	{r7, pc}
 8017c94:	24000134 	.word	0x24000134
 8017c98:	24001b5c 	.word	0x24001b5c
 8017c9c:	2400001c 	.word	0x2400001c
 8017ca0:	24000120 	.word	0x24000120

08017ca4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017ca8:	2200      	movs	r2, #0
 8017caa:	4905      	ldr	r1, [pc, #20]	; (8017cc0 <CDC_Init_FS+0x1c>)
 8017cac:	4805      	ldr	r0, [pc, #20]	; (8017cc4 <CDC_Init_FS+0x20>)
 8017cae:	f7fe fdfc 	bl	80168aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017cb2:	4905      	ldr	r1, [pc, #20]	; (8017cc8 <CDC_Init_FS+0x24>)
 8017cb4:	4803      	ldr	r0, [pc, #12]	; (8017cc4 <CDC_Init_FS+0x20>)
 8017cb6:	f7fe fe16 	bl	80168e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017cba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	bd80      	pop	{r7, pc}
 8017cc0:	2400262c 	.word	0x2400262c
 8017cc4:	24001b5c 	.word	0x24001b5c
 8017cc8:	24001e2c 	.word	0x24001e2c

08017ccc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017ccc:	b480      	push	{r7}
 8017cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017cd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cda:	4770      	bx	lr

08017cdc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017cdc:	b480      	push	{r7}
 8017cde:	b083      	sub	sp, #12
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	6039      	str	r1, [r7, #0]
 8017ce6:	71fb      	strb	r3, [r7, #7]
 8017ce8:	4613      	mov	r3, r2
 8017cea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017cec:	79fb      	ldrb	r3, [r7, #7]
 8017cee:	2b23      	cmp	r3, #35	; 0x23
 8017cf0:	d84a      	bhi.n	8017d88 <CDC_Control_FS+0xac>
 8017cf2:	a201      	add	r2, pc, #4	; (adr r2, 8017cf8 <CDC_Control_FS+0x1c>)
 8017cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cf8:	08017d89 	.word	0x08017d89
 8017cfc:	08017d89 	.word	0x08017d89
 8017d00:	08017d89 	.word	0x08017d89
 8017d04:	08017d89 	.word	0x08017d89
 8017d08:	08017d89 	.word	0x08017d89
 8017d0c:	08017d89 	.word	0x08017d89
 8017d10:	08017d89 	.word	0x08017d89
 8017d14:	08017d89 	.word	0x08017d89
 8017d18:	08017d89 	.word	0x08017d89
 8017d1c:	08017d89 	.word	0x08017d89
 8017d20:	08017d89 	.word	0x08017d89
 8017d24:	08017d89 	.word	0x08017d89
 8017d28:	08017d89 	.word	0x08017d89
 8017d2c:	08017d89 	.word	0x08017d89
 8017d30:	08017d89 	.word	0x08017d89
 8017d34:	08017d89 	.word	0x08017d89
 8017d38:	08017d89 	.word	0x08017d89
 8017d3c:	08017d89 	.word	0x08017d89
 8017d40:	08017d89 	.word	0x08017d89
 8017d44:	08017d89 	.word	0x08017d89
 8017d48:	08017d89 	.word	0x08017d89
 8017d4c:	08017d89 	.word	0x08017d89
 8017d50:	08017d89 	.word	0x08017d89
 8017d54:	08017d89 	.word	0x08017d89
 8017d58:	08017d89 	.word	0x08017d89
 8017d5c:	08017d89 	.word	0x08017d89
 8017d60:	08017d89 	.word	0x08017d89
 8017d64:	08017d89 	.word	0x08017d89
 8017d68:	08017d89 	.word	0x08017d89
 8017d6c:	08017d89 	.word	0x08017d89
 8017d70:	08017d89 	.word	0x08017d89
 8017d74:	08017d89 	.word	0x08017d89
 8017d78:	08017d89 	.word	0x08017d89
 8017d7c:	08017d89 	.word	0x08017d89
 8017d80:	08017d89 	.word	0x08017d89
 8017d84:	08017d89 	.word	0x08017d89
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017d88:	bf00      	nop
  }

  return (USBD_OK);
 8017d8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	370c      	adds	r7, #12
 8017d90:	46bd      	mov	sp, r7
 8017d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d96:	4770      	bx	lr

08017d98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b082      	sub	sp, #8
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017da2:	6879      	ldr	r1, [r7, #4]
 8017da4:	4805      	ldr	r0, [pc, #20]	; (8017dbc <CDC_Receive_FS+0x24>)
 8017da6:	f7fe fd9e 	bl	80168e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017daa:	4804      	ldr	r0, [pc, #16]	; (8017dbc <CDC_Receive_FS+0x24>)
 8017dac:	f7fe fdb4 	bl	8016918 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017db0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3708      	adds	r7, #8
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}
 8017dba:	bf00      	nop
 8017dbc:	24001b5c 	.word	0x24001b5c

08017dc0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017dc0:	b480      	push	{r7}
 8017dc2:	b087      	sub	sp, #28
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	60f8      	str	r0, [r7, #12]
 8017dc8:	60b9      	str	r1, [r7, #8]
 8017dca:	4613      	mov	r3, r2
 8017dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	371c      	adds	r7, #28
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de0:	4770      	bx	lr
	...

08017de4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017de4:	b480      	push	{r7}
 8017de6:	b083      	sub	sp, #12
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	4603      	mov	r3, r0
 8017dec:	6039      	str	r1, [r7, #0]
 8017dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	2212      	movs	r2, #18
 8017df4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017df6:	4b03      	ldr	r3, [pc, #12]	; (8017e04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	370c      	adds	r7, #12
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	24000150 	.word	0x24000150

08017e08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e08:	b480      	push	{r7}
 8017e0a:	b083      	sub	sp, #12
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	4603      	mov	r3, r0
 8017e10:	6039      	str	r1, [r7, #0]
 8017e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017e14:	683b      	ldr	r3, [r7, #0]
 8017e16:	2204      	movs	r2, #4
 8017e18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017e1a:	4b03      	ldr	r3, [pc, #12]	; (8017e28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	370c      	adds	r7, #12
 8017e20:	46bd      	mov	sp, r7
 8017e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e26:	4770      	bx	lr
 8017e28:	24000164 	.word	0x24000164

08017e2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	4603      	mov	r3, r0
 8017e34:	6039      	str	r1, [r7, #0]
 8017e36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017e38:	79fb      	ldrb	r3, [r7, #7]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d105      	bne.n	8017e4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017e3e:	683a      	ldr	r2, [r7, #0]
 8017e40:	4907      	ldr	r1, [pc, #28]	; (8017e60 <USBD_FS_ProductStrDescriptor+0x34>)
 8017e42:	4808      	ldr	r0, [pc, #32]	; (8017e64 <USBD_FS_ProductStrDescriptor+0x38>)
 8017e44:	f7ff fe1b 	bl	8017a7e <USBD_GetString>
 8017e48:	e004      	b.n	8017e54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017e4a:	683a      	ldr	r2, [r7, #0]
 8017e4c:	4904      	ldr	r1, [pc, #16]	; (8017e60 <USBD_FS_ProductStrDescriptor+0x34>)
 8017e4e:	4805      	ldr	r0, [pc, #20]	; (8017e64 <USBD_FS_ProductStrDescriptor+0x38>)
 8017e50:	f7ff fe15 	bl	8017a7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e54:	4b02      	ldr	r3, [pc, #8]	; (8017e60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017e56:	4618      	mov	r0, r3
 8017e58:	3708      	adds	r7, #8
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	bd80      	pop	{r7, pc}
 8017e5e:	bf00      	nop
 8017e60:	24002e2c 	.word	0x24002e2c
 8017e64:	08019a80 	.word	0x08019a80

08017e68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	4603      	mov	r3, r0
 8017e70:	6039      	str	r1, [r7, #0]
 8017e72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017e74:	683a      	ldr	r2, [r7, #0]
 8017e76:	4904      	ldr	r1, [pc, #16]	; (8017e88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017e78:	4804      	ldr	r0, [pc, #16]	; (8017e8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017e7a:	f7ff fe00 	bl	8017a7e <USBD_GetString>
  return USBD_StrDesc;
 8017e7e:	4b02      	ldr	r3, [pc, #8]	; (8017e88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017e80:	4618      	mov	r0, r3
 8017e82:	3708      	adds	r7, #8
 8017e84:	46bd      	mov	sp, r7
 8017e86:	bd80      	pop	{r7, pc}
 8017e88:	24002e2c 	.word	0x24002e2c
 8017e8c:	08019a98 	.word	0x08019a98

08017e90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b082      	sub	sp, #8
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	4603      	mov	r3, r0
 8017e98:	6039      	str	r1, [r7, #0]
 8017e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017e9c:	683b      	ldr	r3, [r7, #0]
 8017e9e:	221a      	movs	r2, #26
 8017ea0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017ea2:	f000 f843 	bl	8017f2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017ea6:	4b02      	ldr	r3, [pc, #8]	; (8017eb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	3708      	adds	r7, #8
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}
 8017eb0:	24000168 	.word	0x24000168

08017eb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b082      	sub	sp, #8
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	4603      	mov	r3, r0
 8017ebc:	6039      	str	r1, [r7, #0]
 8017ebe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017ec0:	79fb      	ldrb	r3, [r7, #7]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d105      	bne.n	8017ed2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017ec6:	683a      	ldr	r2, [r7, #0]
 8017ec8:	4907      	ldr	r1, [pc, #28]	; (8017ee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017eca:	4808      	ldr	r0, [pc, #32]	; (8017eec <USBD_FS_ConfigStrDescriptor+0x38>)
 8017ecc:	f7ff fdd7 	bl	8017a7e <USBD_GetString>
 8017ed0:	e004      	b.n	8017edc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017ed2:	683a      	ldr	r2, [r7, #0]
 8017ed4:	4904      	ldr	r1, [pc, #16]	; (8017ee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017ed6:	4805      	ldr	r0, [pc, #20]	; (8017eec <USBD_FS_ConfigStrDescriptor+0x38>)
 8017ed8:	f7ff fdd1 	bl	8017a7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8017edc:	4b02      	ldr	r3, [pc, #8]	; (8017ee8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3708      	adds	r7, #8
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	24002e2c 	.word	0x24002e2c
 8017eec:	08019aac 	.word	0x08019aac

08017ef0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b082      	sub	sp, #8
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	6039      	str	r1, [r7, #0]
 8017efa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017efc:	79fb      	ldrb	r3, [r7, #7]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d105      	bne.n	8017f0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017f02:	683a      	ldr	r2, [r7, #0]
 8017f04:	4907      	ldr	r1, [pc, #28]	; (8017f24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017f06:	4808      	ldr	r0, [pc, #32]	; (8017f28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017f08:	f7ff fdb9 	bl	8017a7e <USBD_GetString>
 8017f0c:	e004      	b.n	8017f18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017f0e:	683a      	ldr	r2, [r7, #0]
 8017f10:	4904      	ldr	r1, [pc, #16]	; (8017f24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017f12:	4805      	ldr	r0, [pc, #20]	; (8017f28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017f14:	f7ff fdb3 	bl	8017a7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8017f18:	4b02      	ldr	r3, [pc, #8]	; (8017f24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3708      	adds	r7, #8
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}
 8017f22:	bf00      	nop
 8017f24:	24002e2c 	.word	0x24002e2c
 8017f28:	08019ab8 	.word	0x08019ab8

08017f2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b084      	sub	sp, #16
 8017f30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017f32:	4b0f      	ldr	r3, [pc, #60]	; (8017f70 <Get_SerialNum+0x44>)
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017f38:	4b0e      	ldr	r3, [pc, #56]	; (8017f74 <Get_SerialNum+0x48>)
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017f3e:	4b0e      	ldr	r3, [pc, #56]	; (8017f78 <Get_SerialNum+0x4c>)
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017f44:	68fa      	ldr	r2, [r7, #12]
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	4413      	add	r3, r2
 8017f4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d009      	beq.n	8017f66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017f52:	2208      	movs	r2, #8
 8017f54:	4909      	ldr	r1, [pc, #36]	; (8017f7c <Get_SerialNum+0x50>)
 8017f56:	68f8      	ldr	r0, [r7, #12]
 8017f58:	f000 f814 	bl	8017f84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017f5c:	2204      	movs	r2, #4
 8017f5e:	4908      	ldr	r1, [pc, #32]	; (8017f80 <Get_SerialNum+0x54>)
 8017f60:	68b8      	ldr	r0, [r7, #8]
 8017f62:	f000 f80f 	bl	8017f84 <IntToUnicode>
  }
}
 8017f66:	bf00      	nop
 8017f68:	3710      	adds	r7, #16
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}
 8017f6e:	bf00      	nop
 8017f70:	1ff1e800 	.word	0x1ff1e800
 8017f74:	1ff1e804 	.word	0x1ff1e804
 8017f78:	1ff1e808 	.word	0x1ff1e808
 8017f7c:	2400016a 	.word	0x2400016a
 8017f80:	2400017a 	.word	0x2400017a

08017f84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017f84:	b480      	push	{r7}
 8017f86:	b087      	sub	sp, #28
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	60f8      	str	r0, [r7, #12]
 8017f8c:	60b9      	str	r1, [r7, #8]
 8017f8e:	4613      	mov	r3, r2
 8017f90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017f92:	2300      	movs	r3, #0
 8017f94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017f96:	2300      	movs	r3, #0
 8017f98:	75fb      	strb	r3, [r7, #23]
 8017f9a:	e027      	b.n	8017fec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	0f1b      	lsrs	r3, r3, #28
 8017fa0:	2b09      	cmp	r3, #9
 8017fa2:	d80b      	bhi.n	8017fbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	0f1b      	lsrs	r3, r3, #28
 8017fa8:	b2da      	uxtb	r2, r3
 8017faa:	7dfb      	ldrb	r3, [r7, #23]
 8017fac:	005b      	lsls	r3, r3, #1
 8017fae:	4619      	mov	r1, r3
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	440b      	add	r3, r1
 8017fb4:	3230      	adds	r2, #48	; 0x30
 8017fb6:	b2d2      	uxtb	r2, r2
 8017fb8:	701a      	strb	r2, [r3, #0]
 8017fba:	e00a      	b.n	8017fd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	0f1b      	lsrs	r3, r3, #28
 8017fc0:	b2da      	uxtb	r2, r3
 8017fc2:	7dfb      	ldrb	r3, [r7, #23]
 8017fc4:	005b      	lsls	r3, r3, #1
 8017fc6:	4619      	mov	r1, r3
 8017fc8:	68bb      	ldr	r3, [r7, #8]
 8017fca:	440b      	add	r3, r1
 8017fcc:	3237      	adds	r2, #55	; 0x37
 8017fce:	b2d2      	uxtb	r2, r2
 8017fd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	011b      	lsls	r3, r3, #4
 8017fd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017fd8:	7dfb      	ldrb	r3, [r7, #23]
 8017fda:	005b      	lsls	r3, r3, #1
 8017fdc:	3301      	adds	r3, #1
 8017fde:	68ba      	ldr	r2, [r7, #8]
 8017fe0:	4413      	add	r3, r2
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017fe6:	7dfb      	ldrb	r3, [r7, #23]
 8017fe8:	3301      	adds	r3, #1
 8017fea:	75fb      	strb	r3, [r7, #23]
 8017fec:	7dfa      	ldrb	r2, [r7, #23]
 8017fee:	79fb      	ldrb	r3, [r7, #7]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d3d3      	bcc.n	8017f9c <IntToUnicode+0x18>
  }
}
 8017ff4:	bf00      	nop
 8017ff6:	bf00      	nop
 8017ff8:	371c      	adds	r7, #28
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018000:	4770      	bx	lr
	...

08018004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b0b8      	sub	sp, #224	; 0xe0
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801800c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8018010:	2200      	movs	r2, #0
 8018012:	601a      	str	r2, [r3, #0]
 8018014:	605a      	str	r2, [r3, #4]
 8018016:	609a      	str	r2, [r3, #8]
 8018018:	60da      	str	r2, [r3, #12]
 801801a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801801c:	f107 0310 	add.w	r3, r7, #16
 8018020:	22bc      	movs	r2, #188	; 0xbc
 8018022:	2100      	movs	r1, #0
 8018024:	4618      	mov	r0, r3
 8018026:	f000 fbe9 	bl	80187fc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	4a2f      	ldr	r2, [pc, #188]	; (80180ec <HAL_PCD_MspInit+0xe8>)
 8018030:	4293      	cmp	r3, r2
 8018032:	d156      	bne.n	80180e2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018034:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8018038:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801803a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801803e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018042:	f107 0310 	add.w	r3, r7, #16
 8018046:	4618      	mov	r0, r3
 8018048:	f7f6 ff76 	bl	800ef38 <HAL_RCCEx_PeriphCLKConfig>
 801804c:	4603      	mov	r3, r0
 801804e:	2b00      	cmp	r3, #0
 8018050:	d001      	beq.n	8018056 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8018052:	f7ef fcf3 	bl	8007a3c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018056:	f7f5 ffa5 	bl	800dfa4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801805a:	4b25      	ldr	r3, [pc, #148]	; (80180f0 <HAL_PCD_MspInit+0xec>)
 801805c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018060:	4a23      	ldr	r2, [pc, #140]	; (80180f0 <HAL_PCD_MspInit+0xec>)
 8018062:	f043 0301 	orr.w	r3, r3, #1
 8018066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801806a:	4b21      	ldr	r3, [pc, #132]	; (80180f0 <HAL_PCD_MspInit+0xec>)
 801806c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018070:	f003 0301 	and.w	r3, r3, #1
 8018074:	60fb      	str	r3, [r7, #12]
 8018076:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018078:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801807c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018080:	2302      	movs	r3, #2
 8018082:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018086:	2300      	movs	r3, #0
 8018088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801808c:	2300      	movs	r3, #0
 801808e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018092:	230a      	movs	r3, #10
 8018094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018098:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801809c:	4619      	mov	r1, r3
 801809e:	4815      	ldr	r0, [pc, #84]	; (80180f4 <HAL_PCD_MspInit+0xf0>)
 80180a0:	f7f3 fc00 	bl	800b8a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80180a4:	4b12      	ldr	r3, [pc, #72]	; (80180f0 <HAL_PCD_MspInit+0xec>)
 80180a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80180aa:	4a11      	ldr	r2, [pc, #68]	; (80180f0 <HAL_PCD_MspInit+0xec>)
 80180ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80180b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80180b4:	4b0e      	ldr	r3, [pc, #56]	; (80180f0 <HAL_PCD_MspInit+0xec>)
 80180b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80180ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80180be:	60bb      	str	r3, [r7, #8]
 80180c0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_OUT_IRQn, 0, 0);
 80180c2:	2200      	movs	r2, #0
 80180c4:	2100      	movs	r1, #0
 80180c6:	2062      	movs	r0, #98	; 0x62
 80180c8:	f7f1 f80d 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_OUT_IRQn);
 80180cc:	2062      	movs	r0, #98	; 0x62
 80180ce:	f7f1 f824 	bl	800911a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80180d2:	2200      	movs	r2, #0
 80180d4:	2100      	movs	r1, #0
 80180d6:	2065      	movs	r0, #101	; 0x65
 80180d8:	f7f1 f805 	bl	80090e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80180dc:	2065      	movs	r0, #101	; 0x65
 80180de:	f7f1 f81c 	bl	800911a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80180e2:	bf00      	nop
 80180e4:	37e0      	adds	r7, #224	; 0xe0
 80180e6:	46bd      	mov	sp, r7
 80180e8:	bd80      	pop	{r7, pc}
 80180ea:	bf00      	nop
 80180ec:	40080000 	.word	0x40080000
 80180f0:	58024400 	.word	0x58024400
 80180f4:	58020000 	.word	0x58020000

080180f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b082      	sub	sp, #8
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801810c:	4619      	mov	r1, r3
 801810e:	4610      	mov	r0, r2
 8018110:	f7fe fcce 	bl	8016ab0 <USBD_LL_SetupStage>
}
 8018114:	bf00      	nop
 8018116:	3708      	adds	r7, #8
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}

0801811c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b082      	sub	sp, #8
 8018120:	af00      	add	r7, sp, #0
 8018122:	6078      	str	r0, [r7, #4]
 8018124:	460b      	mov	r3, r1
 8018126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801812e:	78fa      	ldrb	r2, [r7, #3]
 8018130:	6879      	ldr	r1, [r7, #4]
 8018132:	4613      	mov	r3, r2
 8018134:	00db      	lsls	r3, r3, #3
 8018136:	1a9b      	subs	r3, r3, r2
 8018138:	009b      	lsls	r3, r3, #2
 801813a:	440b      	add	r3, r1
 801813c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018140:	681a      	ldr	r2, [r3, #0]
 8018142:	78fb      	ldrb	r3, [r7, #3]
 8018144:	4619      	mov	r1, r3
 8018146:	f7fe fd08 	bl	8016b5a <USBD_LL_DataOutStage>
}
 801814a:	bf00      	nop
 801814c:	3708      	adds	r7, #8
 801814e:	46bd      	mov	sp, r7
 8018150:	bd80      	pop	{r7, pc}

08018152 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018152:	b580      	push	{r7, lr}
 8018154:	b082      	sub	sp, #8
 8018156:	af00      	add	r7, sp, #0
 8018158:	6078      	str	r0, [r7, #4]
 801815a:	460b      	mov	r3, r1
 801815c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018164:	78fa      	ldrb	r2, [r7, #3]
 8018166:	6879      	ldr	r1, [r7, #4]
 8018168:	4613      	mov	r3, r2
 801816a:	00db      	lsls	r3, r3, #3
 801816c:	1a9b      	subs	r3, r3, r2
 801816e:	009b      	lsls	r3, r3, #2
 8018170:	440b      	add	r3, r1
 8018172:	3348      	adds	r3, #72	; 0x48
 8018174:	681a      	ldr	r2, [r3, #0]
 8018176:	78fb      	ldrb	r3, [r7, #3]
 8018178:	4619      	mov	r1, r3
 801817a:	f7fe fd51 	bl	8016c20 <USBD_LL_DataInStage>
}
 801817e:	bf00      	nop
 8018180:	3708      	adds	r7, #8
 8018182:	46bd      	mov	sp, r7
 8018184:	bd80      	pop	{r7, pc}

08018186 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018186:	b580      	push	{r7, lr}
 8018188:	b082      	sub	sp, #8
 801818a:	af00      	add	r7, sp, #0
 801818c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018194:	4618      	mov	r0, r3
 8018196:	f7fe fe65 	bl	8016e64 <USBD_LL_SOF>
}
 801819a:	bf00      	nop
 801819c:	3708      	adds	r7, #8
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}

080181a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181a2:	b580      	push	{r7, lr}
 80181a4:	b084      	sub	sp, #16
 80181a6:	af00      	add	r7, sp, #0
 80181a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80181aa:	2301      	movs	r3, #1
 80181ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d102      	bne.n	80181bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80181b6:	2300      	movs	r3, #0
 80181b8:	73fb      	strb	r3, [r7, #15]
 80181ba:	e008      	b.n	80181ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	68db      	ldr	r3, [r3, #12]
 80181c0:	2b02      	cmp	r3, #2
 80181c2:	d102      	bne.n	80181ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80181c4:	2301      	movs	r3, #1
 80181c6:	73fb      	strb	r3, [r7, #15]
 80181c8:	e001      	b.n	80181ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80181ca:	f7ef fc37 	bl	8007a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80181d4:	7bfa      	ldrb	r2, [r7, #15]
 80181d6:	4611      	mov	r1, r2
 80181d8:	4618      	mov	r0, r3
 80181da:	f7fe fe05 	bl	8016de8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80181e4:	4618      	mov	r0, r3
 80181e6:	f7fe fdb1 	bl	8016d4c <USBD_LL_Reset>
}
 80181ea:	bf00      	nop
 80181ec:	3710      	adds	r7, #16
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}
	...

080181f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b082      	sub	sp, #8
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018202:	4618      	mov	r0, r3
 8018204:	f7fe fe00 	bl	8016e08 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	687a      	ldr	r2, [r7, #4]
 8018214:	6812      	ldr	r2, [r2, #0]
 8018216:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801821a:	f043 0301 	orr.w	r3, r3, #1
 801821e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	6a1b      	ldr	r3, [r3, #32]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d005      	beq.n	8018234 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018228:	4b04      	ldr	r3, [pc, #16]	; (801823c <HAL_PCD_SuspendCallback+0x48>)
 801822a:	691b      	ldr	r3, [r3, #16]
 801822c:	4a03      	ldr	r2, [pc, #12]	; (801823c <HAL_PCD_SuspendCallback+0x48>)
 801822e:	f043 0306 	orr.w	r3, r3, #6
 8018232:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018234:	bf00      	nop
 8018236:	3708      	adds	r7, #8
 8018238:	46bd      	mov	sp, r7
 801823a:	bd80      	pop	{r7, pc}
 801823c:	e000ed00 	.word	0xe000ed00

08018240 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801824e:	4618      	mov	r0, r3
 8018250:	f7fe fdf0 	bl	8016e34 <USBD_LL_Resume>
}
 8018254:	bf00      	nop
 8018256:	3708      	adds	r7, #8
 8018258:	46bd      	mov	sp, r7
 801825a:	bd80      	pop	{r7, pc}

0801825c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801825c:	b580      	push	{r7, lr}
 801825e:	b082      	sub	sp, #8
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
 8018264:	460b      	mov	r3, r1
 8018266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801826e:	78fa      	ldrb	r2, [r7, #3]
 8018270:	4611      	mov	r1, r2
 8018272:	4618      	mov	r0, r3
 8018274:	f7fe fe3e 	bl	8016ef4 <USBD_LL_IsoOUTIncomplete>
}
 8018278:	bf00      	nop
 801827a:	3708      	adds	r7, #8
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}

08018280 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018280:	b580      	push	{r7, lr}
 8018282:	b082      	sub	sp, #8
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]
 8018288:	460b      	mov	r3, r1
 801828a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018292:	78fa      	ldrb	r2, [r7, #3]
 8018294:	4611      	mov	r1, r2
 8018296:	4618      	mov	r0, r3
 8018298:	f7fe fe06 	bl	8016ea8 <USBD_LL_IsoINIncomplete>
}
 801829c:	bf00      	nop
 801829e:	3708      	adds	r7, #8
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}

080182a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7fe fe44 	bl	8016f40 <USBD_LL_DevConnected>
}
 80182b8:	bf00      	nop
 80182ba:	3708      	adds	r7, #8
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}

080182c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b082      	sub	sp, #8
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7fe fe41 	bl	8016f56 <USBD_LL_DevDisconnected>
}
 80182d4:	bf00      	nop
 80182d6:	3708      	adds	r7, #8
 80182d8:	46bd      	mov	sp, r7
 80182da:	bd80      	pop	{r7, pc}

080182dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b082      	sub	sp, #8
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	781b      	ldrb	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d13e      	bne.n	801836a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80182ec:	4a21      	ldr	r2, [pc, #132]	; (8018374 <USBD_LL_Init+0x98>)
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	4a1f      	ldr	r2, [pc, #124]	; (8018374 <USBD_LL_Init+0x98>)
 80182f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80182fc:	4b1d      	ldr	r3, [pc, #116]	; (8018374 <USBD_LL_Init+0x98>)
 80182fe:	4a1e      	ldr	r2, [pc, #120]	; (8018378 <USBD_LL_Init+0x9c>)
 8018300:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8018302:	4b1c      	ldr	r3, [pc, #112]	; (8018374 <USBD_LL_Init+0x98>)
 8018304:	2209      	movs	r2, #9
 8018306:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018308:	4b1a      	ldr	r3, [pc, #104]	; (8018374 <USBD_LL_Init+0x98>)
 801830a:	2202      	movs	r2, #2
 801830c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801830e:	4b19      	ldr	r3, [pc, #100]	; (8018374 <USBD_LL_Init+0x98>)
 8018310:	2200      	movs	r2, #0
 8018312:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018314:	4b17      	ldr	r3, [pc, #92]	; (8018374 <USBD_LL_Init+0x98>)
 8018316:	2202      	movs	r2, #2
 8018318:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801831a:	4b16      	ldr	r3, [pc, #88]	; (8018374 <USBD_LL_Init+0x98>)
 801831c:	2200      	movs	r2, #0
 801831e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018320:	4b14      	ldr	r3, [pc, #80]	; (8018374 <USBD_LL_Init+0x98>)
 8018322:	2200      	movs	r2, #0
 8018324:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018326:	4b13      	ldr	r3, [pc, #76]	; (8018374 <USBD_LL_Init+0x98>)
 8018328:	2200      	movs	r2, #0
 801832a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801832c:	4b11      	ldr	r3, [pc, #68]	; (8018374 <USBD_LL_Init+0x98>)
 801832e:	2200      	movs	r2, #0
 8018330:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018332:	4b10      	ldr	r3, [pc, #64]	; (8018374 <USBD_LL_Init+0x98>)
 8018334:	2200      	movs	r2, #0
 8018336:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018338:	4b0e      	ldr	r3, [pc, #56]	; (8018374 <USBD_LL_Init+0x98>)
 801833a:	2200      	movs	r2, #0
 801833c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801833e:	480d      	ldr	r0, [pc, #52]	; (8018374 <USBD_LL_Init+0x98>)
 8018340:	f7f4 fc26 	bl	800cb90 <HAL_PCD_Init>
 8018344:	4603      	mov	r3, r0
 8018346:	2b00      	cmp	r3, #0
 8018348:	d001      	beq.n	801834e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801834a:	f7ef fb77 	bl	8007a3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801834e:	2180      	movs	r1, #128	; 0x80
 8018350:	4808      	ldr	r0, [pc, #32]	; (8018374 <USBD_LL_Init+0x98>)
 8018352:	f7f5 fdac 	bl	800deae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018356:	2240      	movs	r2, #64	; 0x40
 8018358:	2100      	movs	r1, #0
 801835a:	4806      	ldr	r0, [pc, #24]	; (8018374 <USBD_LL_Init+0x98>)
 801835c:	f7f5 fd60 	bl	800de20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018360:	2280      	movs	r2, #128	; 0x80
 8018362:	2101      	movs	r1, #1
 8018364:	4803      	ldr	r0, [pc, #12]	; (8018374 <USBD_LL_Init+0x98>)
 8018366:	f7f5 fd5b 	bl	800de20 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801836a:	2300      	movs	r3, #0
}
 801836c:	4618      	mov	r0, r3
 801836e:	3708      	adds	r7, #8
 8018370:	46bd      	mov	sp, r7
 8018372:	bd80      	pop	{r7, pc}
 8018374:	2400302c 	.word	0x2400302c
 8018378:	40080000 	.word	0x40080000

0801837c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b084      	sub	sp, #16
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018384:	2300      	movs	r3, #0
 8018386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018388:	2300      	movs	r3, #0
 801838a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018392:	4618      	mov	r0, r3
 8018394:	f7f4 fd20 	bl	800cdd8 <HAL_PCD_Start>
 8018398:	4603      	mov	r3, r0
 801839a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801839c:	7bfb      	ldrb	r3, [r7, #15]
 801839e:	4618      	mov	r0, r3
 80183a0:	f000 f942 	bl	8018628 <USBD_Get_USB_Status>
 80183a4:	4603      	mov	r3, r0
 80183a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80183aa:	4618      	mov	r0, r3
 80183ac:	3710      	adds	r7, #16
 80183ae:	46bd      	mov	sp, r7
 80183b0:	bd80      	pop	{r7, pc}

080183b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80183b2:	b580      	push	{r7, lr}
 80183b4:	b084      	sub	sp, #16
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	6078      	str	r0, [r7, #4]
 80183ba:	4608      	mov	r0, r1
 80183bc:	4611      	mov	r1, r2
 80183be:	461a      	mov	r2, r3
 80183c0:	4603      	mov	r3, r0
 80183c2:	70fb      	strb	r3, [r7, #3]
 80183c4:	460b      	mov	r3, r1
 80183c6:	70bb      	strb	r3, [r7, #2]
 80183c8:	4613      	mov	r3, r2
 80183ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183cc:	2300      	movs	r3, #0
 80183ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183d0:	2300      	movs	r3, #0
 80183d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80183da:	78bb      	ldrb	r3, [r7, #2]
 80183dc:	883a      	ldrh	r2, [r7, #0]
 80183de:	78f9      	ldrb	r1, [r7, #3]
 80183e0:	f7f5 f925 	bl	800d62e <HAL_PCD_EP_Open>
 80183e4:	4603      	mov	r3, r0
 80183e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183e8:	7bfb      	ldrb	r3, [r7, #15]
 80183ea:	4618      	mov	r0, r3
 80183ec:	f000 f91c 	bl	8018628 <USBD_Get_USB_Status>
 80183f0:	4603      	mov	r3, r0
 80183f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3710      	adds	r7, #16
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}

080183fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183fe:	b580      	push	{r7, lr}
 8018400:	b084      	sub	sp, #16
 8018402:	af00      	add	r7, sp, #0
 8018404:	6078      	str	r0, [r7, #4]
 8018406:	460b      	mov	r3, r1
 8018408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801840a:	2300      	movs	r3, #0
 801840c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801840e:	2300      	movs	r3, #0
 8018410:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018418:	78fa      	ldrb	r2, [r7, #3]
 801841a:	4611      	mov	r1, r2
 801841c:	4618      	mov	r0, r3
 801841e:	f7f5 f96e 	bl	800d6fe <HAL_PCD_EP_Close>
 8018422:	4603      	mov	r3, r0
 8018424:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018426:	7bfb      	ldrb	r3, [r7, #15]
 8018428:	4618      	mov	r0, r3
 801842a:	f000 f8fd 	bl	8018628 <USBD_Get_USB_Status>
 801842e:	4603      	mov	r3, r0
 8018430:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018432:	7bbb      	ldrb	r3, [r7, #14]
}
 8018434:	4618      	mov	r0, r3
 8018436:	3710      	adds	r7, #16
 8018438:	46bd      	mov	sp, r7
 801843a:	bd80      	pop	{r7, pc}

0801843c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801843c:	b580      	push	{r7, lr}
 801843e:	b084      	sub	sp, #16
 8018440:	af00      	add	r7, sp, #0
 8018442:	6078      	str	r0, [r7, #4]
 8018444:	460b      	mov	r3, r1
 8018446:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018448:	2300      	movs	r3, #0
 801844a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801844c:	2300      	movs	r3, #0
 801844e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018456:	78fa      	ldrb	r2, [r7, #3]
 8018458:	4611      	mov	r1, r2
 801845a:	4618      	mov	r0, r3
 801845c:	f7f5 fa46 	bl	800d8ec <HAL_PCD_EP_SetStall>
 8018460:	4603      	mov	r3, r0
 8018462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018464:	7bfb      	ldrb	r3, [r7, #15]
 8018466:	4618      	mov	r0, r3
 8018468:	f000 f8de 	bl	8018628 <USBD_Get_USB_Status>
 801846c:	4603      	mov	r3, r0
 801846e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018470:	7bbb      	ldrb	r3, [r7, #14]
}
 8018472:	4618      	mov	r0, r3
 8018474:	3710      	adds	r7, #16
 8018476:	46bd      	mov	sp, r7
 8018478:	bd80      	pop	{r7, pc}

0801847a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801847a:	b580      	push	{r7, lr}
 801847c:	b084      	sub	sp, #16
 801847e:	af00      	add	r7, sp, #0
 8018480:	6078      	str	r0, [r7, #4]
 8018482:	460b      	mov	r3, r1
 8018484:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018486:	2300      	movs	r3, #0
 8018488:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801848a:	2300      	movs	r3, #0
 801848c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018494:	78fa      	ldrb	r2, [r7, #3]
 8018496:	4611      	mov	r1, r2
 8018498:	4618      	mov	r0, r3
 801849a:	f7f5 fa8b 	bl	800d9b4 <HAL_PCD_EP_ClrStall>
 801849e:	4603      	mov	r3, r0
 80184a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184a2:	7bfb      	ldrb	r3, [r7, #15]
 80184a4:	4618      	mov	r0, r3
 80184a6:	f000 f8bf 	bl	8018628 <USBD_Get_USB_Status>
 80184aa:	4603      	mov	r3, r0
 80184ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80184ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80184b0:	4618      	mov	r0, r3
 80184b2:	3710      	adds	r7, #16
 80184b4:	46bd      	mov	sp, r7
 80184b6:	bd80      	pop	{r7, pc}

080184b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184b8:	b480      	push	{r7}
 80184ba:	b085      	sub	sp, #20
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
 80184c0:	460b      	mov	r3, r1
 80184c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80184ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80184cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	da0b      	bge.n	80184ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80184d4:	78fb      	ldrb	r3, [r7, #3]
 80184d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80184da:	68f9      	ldr	r1, [r7, #12]
 80184dc:	4613      	mov	r3, r2
 80184de:	00db      	lsls	r3, r3, #3
 80184e0:	1a9b      	subs	r3, r3, r2
 80184e2:	009b      	lsls	r3, r3, #2
 80184e4:	440b      	add	r3, r1
 80184e6:	333e      	adds	r3, #62	; 0x3e
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	e00b      	b.n	8018504 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80184ec:	78fb      	ldrb	r3, [r7, #3]
 80184ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80184f2:	68f9      	ldr	r1, [r7, #12]
 80184f4:	4613      	mov	r3, r2
 80184f6:	00db      	lsls	r3, r3, #3
 80184f8:	1a9b      	subs	r3, r3, r2
 80184fa:	009b      	lsls	r3, r3, #2
 80184fc:	440b      	add	r3, r1
 80184fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018502:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018504:	4618      	mov	r0, r3
 8018506:	3714      	adds	r7, #20
 8018508:	46bd      	mov	sp, r7
 801850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850e:	4770      	bx	lr

08018510 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b084      	sub	sp, #16
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
 8018518:	460b      	mov	r3, r1
 801851a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801851c:	2300      	movs	r3, #0
 801851e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018520:	2300      	movs	r3, #0
 8018522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801852a:	78fa      	ldrb	r2, [r7, #3]
 801852c:	4611      	mov	r1, r2
 801852e:	4618      	mov	r0, r3
 8018530:	f7f5 f858 	bl	800d5e4 <HAL_PCD_SetAddress>
 8018534:	4603      	mov	r3, r0
 8018536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018538:	7bfb      	ldrb	r3, [r7, #15]
 801853a:	4618      	mov	r0, r3
 801853c:	f000 f874 	bl	8018628 <USBD_Get_USB_Status>
 8018540:	4603      	mov	r3, r0
 8018542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018544:	7bbb      	ldrb	r3, [r7, #14]
}
 8018546:	4618      	mov	r0, r3
 8018548:	3710      	adds	r7, #16
 801854a:	46bd      	mov	sp, r7
 801854c:	bd80      	pop	{r7, pc}

0801854e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801854e:	b580      	push	{r7, lr}
 8018550:	b086      	sub	sp, #24
 8018552:	af00      	add	r7, sp, #0
 8018554:	60f8      	str	r0, [r7, #12]
 8018556:	607a      	str	r2, [r7, #4]
 8018558:	603b      	str	r3, [r7, #0]
 801855a:	460b      	mov	r3, r1
 801855c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801855e:	2300      	movs	r3, #0
 8018560:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018562:	2300      	movs	r3, #0
 8018564:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801856c:	7af9      	ldrb	r1, [r7, #11]
 801856e:	683b      	ldr	r3, [r7, #0]
 8018570:	687a      	ldr	r2, [r7, #4]
 8018572:	f7f5 f971 	bl	800d858 <HAL_PCD_EP_Transmit>
 8018576:	4603      	mov	r3, r0
 8018578:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801857a:	7dfb      	ldrb	r3, [r7, #23]
 801857c:	4618      	mov	r0, r3
 801857e:	f000 f853 	bl	8018628 <USBD_Get_USB_Status>
 8018582:	4603      	mov	r3, r0
 8018584:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018586:	7dbb      	ldrb	r3, [r7, #22]
}
 8018588:	4618      	mov	r0, r3
 801858a:	3718      	adds	r7, #24
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b086      	sub	sp, #24
 8018594:	af00      	add	r7, sp, #0
 8018596:	60f8      	str	r0, [r7, #12]
 8018598:	607a      	str	r2, [r7, #4]
 801859a:	603b      	str	r3, [r7, #0]
 801859c:	460b      	mov	r3, r1
 801859e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185a0:	2300      	movs	r3, #0
 80185a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185a4:	2300      	movs	r3, #0
 80185a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80185ae:	7af9      	ldrb	r1, [r7, #11]
 80185b0:	683b      	ldr	r3, [r7, #0]
 80185b2:	687a      	ldr	r2, [r7, #4]
 80185b4:	f7f5 f8ed 	bl	800d792 <HAL_PCD_EP_Receive>
 80185b8:	4603      	mov	r3, r0
 80185ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185bc:	7dfb      	ldrb	r3, [r7, #23]
 80185be:	4618      	mov	r0, r3
 80185c0:	f000 f832 	bl	8018628 <USBD_Get_USB_Status>
 80185c4:	4603      	mov	r3, r0
 80185c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80185c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80185ca:	4618      	mov	r0, r3
 80185cc:	3718      	adds	r7, #24
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}

080185d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80185d2:	b580      	push	{r7, lr}
 80185d4:	b082      	sub	sp, #8
 80185d6:	af00      	add	r7, sp, #0
 80185d8:	6078      	str	r0, [r7, #4]
 80185da:	460b      	mov	r3, r1
 80185dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80185e4:	78fa      	ldrb	r2, [r7, #3]
 80185e6:	4611      	mov	r1, r2
 80185e8:	4618      	mov	r0, r3
 80185ea:	f7f5 f91d 	bl	800d828 <HAL_PCD_EP_GetRxCount>
 80185ee:	4603      	mov	r3, r0
}
 80185f0:	4618      	mov	r0, r3
 80185f2:	3708      	adds	r7, #8
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}

080185f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80185f8:	b480      	push	{r7}
 80185fa:	b083      	sub	sp, #12
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018600:	4b03      	ldr	r3, [pc, #12]	; (8018610 <USBD_static_malloc+0x18>)
}
 8018602:	4618      	mov	r0, r3
 8018604:	370c      	adds	r7, #12
 8018606:	46bd      	mov	sp, r7
 8018608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860c:	4770      	bx	lr
 801860e:	bf00      	nop
 8018610:	24003434 	.word	0x24003434

08018614 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018614:	b480      	push	{r7}
 8018616:	b083      	sub	sp, #12
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]

}
 801861c:	bf00      	nop
 801861e:	370c      	adds	r7, #12
 8018620:	46bd      	mov	sp, r7
 8018622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018626:	4770      	bx	lr

08018628 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018628:	b480      	push	{r7}
 801862a:	b085      	sub	sp, #20
 801862c:	af00      	add	r7, sp, #0
 801862e:	4603      	mov	r3, r0
 8018630:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018632:	2300      	movs	r3, #0
 8018634:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018636:	79fb      	ldrb	r3, [r7, #7]
 8018638:	2b03      	cmp	r3, #3
 801863a:	d817      	bhi.n	801866c <USBD_Get_USB_Status+0x44>
 801863c:	a201      	add	r2, pc, #4	; (adr r2, 8018644 <USBD_Get_USB_Status+0x1c>)
 801863e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018642:	bf00      	nop
 8018644:	08018655 	.word	0x08018655
 8018648:	0801865b 	.word	0x0801865b
 801864c:	08018661 	.word	0x08018661
 8018650:	08018667 	.word	0x08018667
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018654:	2300      	movs	r3, #0
 8018656:	73fb      	strb	r3, [r7, #15]
    break;
 8018658:	e00b      	b.n	8018672 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801865a:	2303      	movs	r3, #3
 801865c:	73fb      	strb	r3, [r7, #15]
    break;
 801865e:	e008      	b.n	8018672 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018660:	2301      	movs	r3, #1
 8018662:	73fb      	strb	r3, [r7, #15]
    break;
 8018664:	e005      	b.n	8018672 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018666:	2303      	movs	r3, #3
 8018668:	73fb      	strb	r3, [r7, #15]
    break;
 801866a:	e002      	b.n	8018672 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801866c:	2303      	movs	r3, #3
 801866e:	73fb      	strb	r3, [r7, #15]
    break;
 8018670:	bf00      	nop
  }
  return usb_status;
 8018672:	7bfb      	ldrb	r3, [r7, #15]
}
 8018674:	4618      	mov	r0, r3
 8018676:	3714      	adds	r7, #20
 8018678:	46bd      	mov	sp, r7
 801867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867e:	4770      	bx	lr

08018680 <_ZdlPvj>:
 8018680:	f000 b817 	b.w	80186b2 <_ZdlPv>

08018684 <_Znwj>:
 8018684:	2801      	cmp	r0, #1
 8018686:	bf38      	it	cc
 8018688:	2001      	movcc	r0, #1
 801868a:	b510      	push	{r4, lr}
 801868c:	4604      	mov	r4, r0
 801868e:	4620      	mov	r0, r4
 8018690:	f000 f87c 	bl	801878c <malloc>
 8018694:	b930      	cbnz	r0, 80186a4 <_Znwj+0x20>
 8018696:	f000 f80f 	bl	80186b8 <_ZSt15get_new_handlerv>
 801869a:	b908      	cbnz	r0, 80186a0 <_Znwj+0x1c>
 801869c:	f000 f814 	bl	80186c8 <abort>
 80186a0:	4780      	blx	r0
 80186a2:	e7f4      	b.n	801868e <_Znwj+0xa>
 80186a4:	bd10      	pop	{r4, pc}

080186a6 <_ZSt17__throw_bad_allocv>:
 80186a6:	b508      	push	{r3, lr}
 80186a8:	f000 f80e 	bl	80186c8 <abort>

080186ac <_ZSt20__throw_length_errorPKc>:
 80186ac:	b508      	push	{r3, lr}
 80186ae:	f000 f80b 	bl	80186c8 <abort>

080186b2 <_ZdlPv>:
 80186b2:	f000 b873 	b.w	801879c <free>
	...

080186b8 <_ZSt15get_new_handlerv>:
 80186b8:	4b02      	ldr	r3, [pc, #8]	; (80186c4 <_ZSt15get_new_handlerv+0xc>)
 80186ba:	6818      	ldr	r0, [r3, #0]
 80186bc:	f3bf 8f5b 	dmb	ish
 80186c0:	4770      	bx	lr
 80186c2:	bf00      	nop
 80186c4:	24003654 	.word	0x24003654

080186c8 <abort>:
 80186c8:	b508      	push	{r3, lr}
 80186ca:	2006      	movs	r0, #6
 80186cc:	f000 fca4 	bl	8019018 <raise>
 80186d0:	2001      	movs	r0, #1
 80186d2:	f7ef fbe7 	bl	8007ea4 <_exit>
	...

080186d8 <__assert_func>:
 80186d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80186da:	4614      	mov	r4, r2
 80186dc:	461a      	mov	r2, r3
 80186de:	4b09      	ldr	r3, [pc, #36]	; (8018704 <__assert_func+0x2c>)
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	4605      	mov	r5, r0
 80186e4:	68d8      	ldr	r0, [r3, #12]
 80186e6:	b14c      	cbz	r4, 80186fc <__assert_func+0x24>
 80186e8:	4b07      	ldr	r3, [pc, #28]	; (8018708 <__assert_func+0x30>)
 80186ea:	9100      	str	r1, [sp, #0]
 80186ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80186f0:	4906      	ldr	r1, [pc, #24]	; (801870c <__assert_func+0x34>)
 80186f2:	462b      	mov	r3, r5
 80186f4:	f000 f814 	bl	8018720 <fiprintf>
 80186f8:	f7ff ffe6 	bl	80186c8 <abort>
 80186fc:	4b04      	ldr	r3, [pc, #16]	; (8018710 <__assert_func+0x38>)
 80186fe:	461c      	mov	r4, r3
 8018700:	e7f3      	b.n	80186ea <__assert_func+0x12>
 8018702:	bf00      	nop
 8018704:	24000184 	.word	0x24000184
 8018708:	08034180 	.word	0x08034180
 801870c:	0803418d 	.word	0x0803418d
 8018710:	080341bb 	.word	0x080341bb

08018714 <__errno>:
 8018714:	4b01      	ldr	r3, [pc, #4]	; (801871c <__errno+0x8>)
 8018716:	6818      	ldr	r0, [r3, #0]
 8018718:	4770      	bx	lr
 801871a:	bf00      	nop
 801871c:	24000184 	.word	0x24000184

08018720 <fiprintf>:
 8018720:	b40e      	push	{r1, r2, r3}
 8018722:	b503      	push	{r0, r1, lr}
 8018724:	4601      	mov	r1, r0
 8018726:	ab03      	add	r3, sp, #12
 8018728:	4805      	ldr	r0, [pc, #20]	; (8018740 <fiprintf+0x20>)
 801872a:	f853 2b04 	ldr.w	r2, [r3], #4
 801872e:	6800      	ldr	r0, [r0, #0]
 8018730:	9301      	str	r3, [sp, #4]
 8018732:	f000 f975 	bl	8018a20 <_vfiprintf_r>
 8018736:	b002      	add	sp, #8
 8018738:	f85d eb04 	ldr.w	lr, [sp], #4
 801873c:	b003      	add	sp, #12
 801873e:	4770      	bx	lr
 8018740:	24000184 	.word	0x24000184

08018744 <__libc_init_array>:
 8018744:	b570      	push	{r4, r5, r6, lr}
 8018746:	4d0d      	ldr	r5, [pc, #52]	; (801877c <__libc_init_array+0x38>)
 8018748:	4c0d      	ldr	r4, [pc, #52]	; (8018780 <__libc_init_array+0x3c>)
 801874a:	1b64      	subs	r4, r4, r5
 801874c:	10a4      	asrs	r4, r4, #2
 801874e:	2600      	movs	r6, #0
 8018750:	42a6      	cmp	r6, r4
 8018752:	d109      	bne.n	8018768 <__libc_init_array+0x24>
 8018754:	4d0b      	ldr	r5, [pc, #44]	; (8018784 <__libc_init_array+0x40>)
 8018756:	4c0c      	ldr	r4, [pc, #48]	; (8018788 <__libc_init_array+0x44>)
 8018758:	f001 f812 	bl	8019780 <_init>
 801875c:	1b64      	subs	r4, r4, r5
 801875e:	10a4      	asrs	r4, r4, #2
 8018760:	2600      	movs	r6, #0
 8018762:	42a6      	cmp	r6, r4
 8018764:	d105      	bne.n	8018772 <__libc_init_array+0x2e>
 8018766:	bd70      	pop	{r4, r5, r6, pc}
 8018768:	f855 3b04 	ldr.w	r3, [r5], #4
 801876c:	4798      	blx	r3
 801876e:	3601      	adds	r6, #1
 8018770:	e7ee      	b.n	8018750 <__libc_init_array+0xc>
 8018772:	f855 3b04 	ldr.w	r3, [r5], #4
 8018776:	4798      	blx	r3
 8018778:	3601      	adds	r6, #1
 801877a:	e7f2      	b.n	8018762 <__libc_init_array+0x1e>
 801877c:	0803425c 	.word	0x0803425c
 8018780:	0803425c 	.word	0x0803425c
 8018784:	0803425c 	.word	0x0803425c
 8018788:	08034264 	.word	0x08034264

0801878c <malloc>:
 801878c:	4b02      	ldr	r3, [pc, #8]	; (8018798 <malloc+0xc>)
 801878e:	4601      	mov	r1, r0
 8018790:	6818      	ldr	r0, [r3, #0]
 8018792:	f000 b8a7 	b.w	80188e4 <_malloc_r>
 8018796:	bf00      	nop
 8018798:	24000184 	.word	0x24000184

0801879c <free>:
 801879c:	4b02      	ldr	r3, [pc, #8]	; (80187a8 <free+0xc>)
 801879e:	4601      	mov	r1, r0
 80187a0:	6818      	ldr	r0, [r3, #0]
 80187a2:	f000 b833 	b.w	801880c <_free_r>
 80187a6:	bf00      	nop
 80187a8:	24000184 	.word	0x24000184

080187ac <memcpy>:
 80187ac:	440a      	add	r2, r1
 80187ae:	4291      	cmp	r1, r2
 80187b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80187b4:	d100      	bne.n	80187b8 <memcpy+0xc>
 80187b6:	4770      	bx	lr
 80187b8:	b510      	push	{r4, lr}
 80187ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80187be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80187c2:	4291      	cmp	r1, r2
 80187c4:	d1f9      	bne.n	80187ba <memcpy+0xe>
 80187c6:	bd10      	pop	{r4, pc}

080187c8 <memmove>:
 80187c8:	4288      	cmp	r0, r1
 80187ca:	b510      	push	{r4, lr}
 80187cc:	eb01 0402 	add.w	r4, r1, r2
 80187d0:	d902      	bls.n	80187d8 <memmove+0x10>
 80187d2:	4284      	cmp	r4, r0
 80187d4:	4623      	mov	r3, r4
 80187d6:	d807      	bhi.n	80187e8 <memmove+0x20>
 80187d8:	1e43      	subs	r3, r0, #1
 80187da:	42a1      	cmp	r1, r4
 80187dc:	d008      	beq.n	80187f0 <memmove+0x28>
 80187de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80187e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80187e6:	e7f8      	b.n	80187da <memmove+0x12>
 80187e8:	4402      	add	r2, r0
 80187ea:	4601      	mov	r1, r0
 80187ec:	428a      	cmp	r2, r1
 80187ee:	d100      	bne.n	80187f2 <memmove+0x2a>
 80187f0:	bd10      	pop	{r4, pc}
 80187f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80187f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80187fa:	e7f7      	b.n	80187ec <memmove+0x24>

080187fc <memset>:
 80187fc:	4402      	add	r2, r0
 80187fe:	4603      	mov	r3, r0
 8018800:	4293      	cmp	r3, r2
 8018802:	d100      	bne.n	8018806 <memset+0xa>
 8018804:	4770      	bx	lr
 8018806:	f803 1b01 	strb.w	r1, [r3], #1
 801880a:	e7f9      	b.n	8018800 <memset+0x4>

0801880c <_free_r>:
 801880c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801880e:	2900      	cmp	r1, #0
 8018810:	d044      	beq.n	801889c <_free_r+0x90>
 8018812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018816:	9001      	str	r0, [sp, #4]
 8018818:	2b00      	cmp	r3, #0
 801881a:	f1a1 0404 	sub.w	r4, r1, #4
 801881e:	bfb8      	it	lt
 8018820:	18e4      	addlt	r4, r4, r3
 8018822:	f000 fef5 	bl	8019610 <__malloc_lock>
 8018826:	4a1e      	ldr	r2, [pc, #120]	; (80188a0 <_free_r+0x94>)
 8018828:	9801      	ldr	r0, [sp, #4]
 801882a:	6813      	ldr	r3, [r2, #0]
 801882c:	b933      	cbnz	r3, 801883c <_free_r+0x30>
 801882e:	6063      	str	r3, [r4, #4]
 8018830:	6014      	str	r4, [r2, #0]
 8018832:	b003      	add	sp, #12
 8018834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018838:	f000 bef0 	b.w	801961c <__malloc_unlock>
 801883c:	42a3      	cmp	r3, r4
 801883e:	d908      	bls.n	8018852 <_free_r+0x46>
 8018840:	6825      	ldr	r5, [r4, #0]
 8018842:	1961      	adds	r1, r4, r5
 8018844:	428b      	cmp	r3, r1
 8018846:	bf01      	itttt	eq
 8018848:	6819      	ldreq	r1, [r3, #0]
 801884a:	685b      	ldreq	r3, [r3, #4]
 801884c:	1949      	addeq	r1, r1, r5
 801884e:	6021      	streq	r1, [r4, #0]
 8018850:	e7ed      	b.n	801882e <_free_r+0x22>
 8018852:	461a      	mov	r2, r3
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	b10b      	cbz	r3, 801885c <_free_r+0x50>
 8018858:	42a3      	cmp	r3, r4
 801885a:	d9fa      	bls.n	8018852 <_free_r+0x46>
 801885c:	6811      	ldr	r1, [r2, #0]
 801885e:	1855      	adds	r5, r2, r1
 8018860:	42a5      	cmp	r5, r4
 8018862:	d10b      	bne.n	801887c <_free_r+0x70>
 8018864:	6824      	ldr	r4, [r4, #0]
 8018866:	4421      	add	r1, r4
 8018868:	1854      	adds	r4, r2, r1
 801886a:	42a3      	cmp	r3, r4
 801886c:	6011      	str	r1, [r2, #0]
 801886e:	d1e0      	bne.n	8018832 <_free_r+0x26>
 8018870:	681c      	ldr	r4, [r3, #0]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	6053      	str	r3, [r2, #4]
 8018876:	4421      	add	r1, r4
 8018878:	6011      	str	r1, [r2, #0]
 801887a:	e7da      	b.n	8018832 <_free_r+0x26>
 801887c:	d902      	bls.n	8018884 <_free_r+0x78>
 801887e:	230c      	movs	r3, #12
 8018880:	6003      	str	r3, [r0, #0]
 8018882:	e7d6      	b.n	8018832 <_free_r+0x26>
 8018884:	6825      	ldr	r5, [r4, #0]
 8018886:	1961      	adds	r1, r4, r5
 8018888:	428b      	cmp	r3, r1
 801888a:	bf04      	itt	eq
 801888c:	6819      	ldreq	r1, [r3, #0]
 801888e:	685b      	ldreq	r3, [r3, #4]
 8018890:	6063      	str	r3, [r4, #4]
 8018892:	bf04      	itt	eq
 8018894:	1949      	addeq	r1, r1, r5
 8018896:	6021      	streq	r1, [r4, #0]
 8018898:	6054      	str	r4, [r2, #4]
 801889a:	e7ca      	b.n	8018832 <_free_r+0x26>
 801889c:	b003      	add	sp, #12
 801889e:	bd30      	pop	{r4, r5, pc}
 80188a0:	24003658 	.word	0x24003658

080188a4 <sbrk_aligned>:
 80188a4:	b570      	push	{r4, r5, r6, lr}
 80188a6:	4e0e      	ldr	r6, [pc, #56]	; (80188e0 <sbrk_aligned+0x3c>)
 80188a8:	460c      	mov	r4, r1
 80188aa:	6831      	ldr	r1, [r6, #0]
 80188ac:	4605      	mov	r5, r0
 80188ae:	b911      	cbnz	r1, 80188b6 <sbrk_aligned+0x12>
 80188b0:	f000 fb7a 	bl	8018fa8 <_sbrk_r>
 80188b4:	6030      	str	r0, [r6, #0]
 80188b6:	4621      	mov	r1, r4
 80188b8:	4628      	mov	r0, r5
 80188ba:	f000 fb75 	bl	8018fa8 <_sbrk_r>
 80188be:	1c43      	adds	r3, r0, #1
 80188c0:	d00a      	beq.n	80188d8 <sbrk_aligned+0x34>
 80188c2:	1cc4      	adds	r4, r0, #3
 80188c4:	f024 0403 	bic.w	r4, r4, #3
 80188c8:	42a0      	cmp	r0, r4
 80188ca:	d007      	beq.n	80188dc <sbrk_aligned+0x38>
 80188cc:	1a21      	subs	r1, r4, r0
 80188ce:	4628      	mov	r0, r5
 80188d0:	f000 fb6a 	bl	8018fa8 <_sbrk_r>
 80188d4:	3001      	adds	r0, #1
 80188d6:	d101      	bne.n	80188dc <sbrk_aligned+0x38>
 80188d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80188dc:	4620      	mov	r0, r4
 80188de:	bd70      	pop	{r4, r5, r6, pc}
 80188e0:	2400365c 	.word	0x2400365c

080188e4 <_malloc_r>:
 80188e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188e8:	1ccd      	adds	r5, r1, #3
 80188ea:	f025 0503 	bic.w	r5, r5, #3
 80188ee:	3508      	adds	r5, #8
 80188f0:	2d0c      	cmp	r5, #12
 80188f2:	bf38      	it	cc
 80188f4:	250c      	movcc	r5, #12
 80188f6:	2d00      	cmp	r5, #0
 80188f8:	4607      	mov	r7, r0
 80188fa:	db01      	blt.n	8018900 <_malloc_r+0x1c>
 80188fc:	42a9      	cmp	r1, r5
 80188fe:	d905      	bls.n	801890c <_malloc_r+0x28>
 8018900:	230c      	movs	r3, #12
 8018902:	603b      	str	r3, [r7, #0]
 8018904:	2600      	movs	r6, #0
 8018906:	4630      	mov	r0, r6
 8018908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801890c:	4e2e      	ldr	r6, [pc, #184]	; (80189c8 <_malloc_r+0xe4>)
 801890e:	f000 fe7f 	bl	8019610 <__malloc_lock>
 8018912:	6833      	ldr	r3, [r6, #0]
 8018914:	461c      	mov	r4, r3
 8018916:	bb34      	cbnz	r4, 8018966 <_malloc_r+0x82>
 8018918:	4629      	mov	r1, r5
 801891a:	4638      	mov	r0, r7
 801891c:	f7ff ffc2 	bl	80188a4 <sbrk_aligned>
 8018920:	1c43      	adds	r3, r0, #1
 8018922:	4604      	mov	r4, r0
 8018924:	d14d      	bne.n	80189c2 <_malloc_r+0xde>
 8018926:	6834      	ldr	r4, [r6, #0]
 8018928:	4626      	mov	r6, r4
 801892a:	2e00      	cmp	r6, #0
 801892c:	d140      	bne.n	80189b0 <_malloc_r+0xcc>
 801892e:	6823      	ldr	r3, [r4, #0]
 8018930:	4631      	mov	r1, r6
 8018932:	4638      	mov	r0, r7
 8018934:	eb04 0803 	add.w	r8, r4, r3
 8018938:	f000 fb36 	bl	8018fa8 <_sbrk_r>
 801893c:	4580      	cmp	r8, r0
 801893e:	d13a      	bne.n	80189b6 <_malloc_r+0xd2>
 8018940:	6821      	ldr	r1, [r4, #0]
 8018942:	3503      	adds	r5, #3
 8018944:	1a6d      	subs	r5, r5, r1
 8018946:	f025 0503 	bic.w	r5, r5, #3
 801894a:	3508      	adds	r5, #8
 801894c:	2d0c      	cmp	r5, #12
 801894e:	bf38      	it	cc
 8018950:	250c      	movcc	r5, #12
 8018952:	4629      	mov	r1, r5
 8018954:	4638      	mov	r0, r7
 8018956:	f7ff ffa5 	bl	80188a4 <sbrk_aligned>
 801895a:	3001      	adds	r0, #1
 801895c:	d02b      	beq.n	80189b6 <_malloc_r+0xd2>
 801895e:	6823      	ldr	r3, [r4, #0]
 8018960:	442b      	add	r3, r5
 8018962:	6023      	str	r3, [r4, #0]
 8018964:	e00e      	b.n	8018984 <_malloc_r+0xa0>
 8018966:	6822      	ldr	r2, [r4, #0]
 8018968:	1b52      	subs	r2, r2, r5
 801896a:	d41e      	bmi.n	80189aa <_malloc_r+0xc6>
 801896c:	2a0b      	cmp	r2, #11
 801896e:	d916      	bls.n	801899e <_malloc_r+0xba>
 8018970:	1961      	adds	r1, r4, r5
 8018972:	42a3      	cmp	r3, r4
 8018974:	6025      	str	r5, [r4, #0]
 8018976:	bf18      	it	ne
 8018978:	6059      	strne	r1, [r3, #4]
 801897a:	6863      	ldr	r3, [r4, #4]
 801897c:	bf08      	it	eq
 801897e:	6031      	streq	r1, [r6, #0]
 8018980:	5162      	str	r2, [r4, r5]
 8018982:	604b      	str	r3, [r1, #4]
 8018984:	4638      	mov	r0, r7
 8018986:	f104 060b 	add.w	r6, r4, #11
 801898a:	f000 fe47 	bl	801961c <__malloc_unlock>
 801898e:	f026 0607 	bic.w	r6, r6, #7
 8018992:	1d23      	adds	r3, r4, #4
 8018994:	1af2      	subs	r2, r6, r3
 8018996:	d0b6      	beq.n	8018906 <_malloc_r+0x22>
 8018998:	1b9b      	subs	r3, r3, r6
 801899a:	50a3      	str	r3, [r4, r2]
 801899c:	e7b3      	b.n	8018906 <_malloc_r+0x22>
 801899e:	6862      	ldr	r2, [r4, #4]
 80189a0:	42a3      	cmp	r3, r4
 80189a2:	bf0c      	ite	eq
 80189a4:	6032      	streq	r2, [r6, #0]
 80189a6:	605a      	strne	r2, [r3, #4]
 80189a8:	e7ec      	b.n	8018984 <_malloc_r+0xa0>
 80189aa:	4623      	mov	r3, r4
 80189ac:	6864      	ldr	r4, [r4, #4]
 80189ae:	e7b2      	b.n	8018916 <_malloc_r+0x32>
 80189b0:	4634      	mov	r4, r6
 80189b2:	6876      	ldr	r6, [r6, #4]
 80189b4:	e7b9      	b.n	801892a <_malloc_r+0x46>
 80189b6:	230c      	movs	r3, #12
 80189b8:	603b      	str	r3, [r7, #0]
 80189ba:	4638      	mov	r0, r7
 80189bc:	f000 fe2e 	bl	801961c <__malloc_unlock>
 80189c0:	e7a1      	b.n	8018906 <_malloc_r+0x22>
 80189c2:	6025      	str	r5, [r4, #0]
 80189c4:	e7de      	b.n	8018984 <_malloc_r+0xa0>
 80189c6:	bf00      	nop
 80189c8:	24003658 	.word	0x24003658

080189cc <__sfputc_r>:
 80189cc:	6893      	ldr	r3, [r2, #8]
 80189ce:	3b01      	subs	r3, #1
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	b410      	push	{r4}
 80189d4:	6093      	str	r3, [r2, #8]
 80189d6:	da08      	bge.n	80189ea <__sfputc_r+0x1e>
 80189d8:	6994      	ldr	r4, [r2, #24]
 80189da:	42a3      	cmp	r3, r4
 80189dc:	db01      	blt.n	80189e2 <__sfputc_r+0x16>
 80189de:	290a      	cmp	r1, #10
 80189e0:	d103      	bne.n	80189ea <__sfputc_r+0x1e>
 80189e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189e6:	f000 bb33 	b.w	8019050 <__swbuf_r>
 80189ea:	6813      	ldr	r3, [r2, #0]
 80189ec:	1c58      	adds	r0, r3, #1
 80189ee:	6010      	str	r0, [r2, #0]
 80189f0:	7019      	strb	r1, [r3, #0]
 80189f2:	4608      	mov	r0, r1
 80189f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189f8:	4770      	bx	lr

080189fa <__sfputs_r>:
 80189fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189fc:	4606      	mov	r6, r0
 80189fe:	460f      	mov	r7, r1
 8018a00:	4614      	mov	r4, r2
 8018a02:	18d5      	adds	r5, r2, r3
 8018a04:	42ac      	cmp	r4, r5
 8018a06:	d101      	bne.n	8018a0c <__sfputs_r+0x12>
 8018a08:	2000      	movs	r0, #0
 8018a0a:	e007      	b.n	8018a1c <__sfputs_r+0x22>
 8018a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a10:	463a      	mov	r2, r7
 8018a12:	4630      	mov	r0, r6
 8018a14:	f7ff ffda 	bl	80189cc <__sfputc_r>
 8018a18:	1c43      	adds	r3, r0, #1
 8018a1a:	d1f3      	bne.n	8018a04 <__sfputs_r+0xa>
 8018a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018a20 <_vfiprintf_r>:
 8018a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a24:	460d      	mov	r5, r1
 8018a26:	b09d      	sub	sp, #116	; 0x74
 8018a28:	4614      	mov	r4, r2
 8018a2a:	4698      	mov	r8, r3
 8018a2c:	4606      	mov	r6, r0
 8018a2e:	b118      	cbz	r0, 8018a38 <_vfiprintf_r+0x18>
 8018a30:	6983      	ldr	r3, [r0, #24]
 8018a32:	b90b      	cbnz	r3, 8018a38 <_vfiprintf_r+0x18>
 8018a34:	f000 fce6 	bl	8019404 <__sinit>
 8018a38:	4b89      	ldr	r3, [pc, #548]	; (8018c60 <_vfiprintf_r+0x240>)
 8018a3a:	429d      	cmp	r5, r3
 8018a3c:	d11b      	bne.n	8018a76 <_vfiprintf_r+0x56>
 8018a3e:	6875      	ldr	r5, [r6, #4]
 8018a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a42:	07d9      	lsls	r1, r3, #31
 8018a44:	d405      	bmi.n	8018a52 <_vfiprintf_r+0x32>
 8018a46:	89ab      	ldrh	r3, [r5, #12]
 8018a48:	059a      	lsls	r2, r3, #22
 8018a4a:	d402      	bmi.n	8018a52 <_vfiprintf_r+0x32>
 8018a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018a4e:	f000 fd77 	bl	8019540 <__retarget_lock_acquire_recursive>
 8018a52:	89ab      	ldrh	r3, [r5, #12]
 8018a54:	071b      	lsls	r3, r3, #28
 8018a56:	d501      	bpl.n	8018a5c <_vfiprintf_r+0x3c>
 8018a58:	692b      	ldr	r3, [r5, #16]
 8018a5a:	b9eb      	cbnz	r3, 8018a98 <_vfiprintf_r+0x78>
 8018a5c:	4629      	mov	r1, r5
 8018a5e:	4630      	mov	r0, r6
 8018a60:	f000 fb48 	bl	80190f4 <__swsetup_r>
 8018a64:	b1c0      	cbz	r0, 8018a98 <_vfiprintf_r+0x78>
 8018a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a68:	07dc      	lsls	r4, r3, #31
 8018a6a:	d50e      	bpl.n	8018a8a <_vfiprintf_r+0x6a>
 8018a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a70:	b01d      	add	sp, #116	; 0x74
 8018a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a76:	4b7b      	ldr	r3, [pc, #492]	; (8018c64 <_vfiprintf_r+0x244>)
 8018a78:	429d      	cmp	r5, r3
 8018a7a:	d101      	bne.n	8018a80 <_vfiprintf_r+0x60>
 8018a7c:	68b5      	ldr	r5, [r6, #8]
 8018a7e:	e7df      	b.n	8018a40 <_vfiprintf_r+0x20>
 8018a80:	4b79      	ldr	r3, [pc, #484]	; (8018c68 <_vfiprintf_r+0x248>)
 8018a82:	429d      	cmp	r5, r3
 8018a84:	bf08      	it	eq
 8018a86:	68f5      	ldreq	r5, [r6, #12]
 8018a88:	e7da      	b.n	8018a40 <_vfiprintf_r+0x20>
 8018a8a:	89ab      	ldrh	r3, [r5, #12]
 8018a8c:	0598      	lsls	r0, r3, #22
 8018a8e:	d4ed      	bmi.n	8018a6c <_vfiprintf_r+0x4c>
 8018a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018a92:	f000 fd56 	bl	8019542 <__retarget_lock_release_recursive>
 8018a96:	e7e9      	b.n	8018a6c <_vfiprintf_r+0x4c>
 8018a98:	2300      	movs	r3, #0
 8018a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8018a9c:	2320      	movs	r3, #32
 8018a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018aa6:	2330      	movs	r3, #48	; 0x30
 8018aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018c6c <_vfiprintf_r+0x24c>
 8018aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ab0:	f04f 0901 	mov.w	r9, #1
 8018ab4:	4623      	mov	r3, r4
 8018ab6:	469a      	mov	sl, r3
 8018ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018abc:	b10a      	cbz	r2, 8018ac2 <_vfiprintf_r+0xa2>
 8018abe:	2a25      	cmp	r2, #37	; 0x25
 8018ac0:	d1f9      	bne.n	8018ab6 <_vfiprintf_r+0x96>
 8018ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8018ac6:	d00b      	beq.n	8018ae0 <_vfiprintf_r+0xc0>
 8018ac8:	465b      	mov	r3, fp
 8018aca:	4622      	mov	r2, r4
 8018acc:	4629      	mov	r1, r5
 8018ace:	4630      	mov	r0, r6
 8018ad0:	f7ff ff93 	bl	80189fa <__sfputs_r>
 8018ad4:	3001      	adds	r0, #1
 8018ad6:	f000 80aa 	beq.w	8018c2e <_vfiprintf_r+0x20e>
 8018ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018adc:	445a      	add	r2, fp
 8018ade:	9209      	str	r2, [sp, #36]	; 0x24
 8018ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	f000 80a2 	beq.w	8018c2e <_vfiprintf_r+0x20e>
 8018aea:	2300      	movs	r3, #0
 8018aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018af4:	f10a 0a01 	add.w	sl, sl, #1
 8018af8:	9304      	str	r3, [sp, #16]
 8018afa:	9307      	str	r3, [sp, #28]
 8018afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b00:	931a      	str	r3, [sp, #104]	; 0x68
 8018b02:	4654      	mov	r4, sl
 8018b04:	2205      	movs	r2, #5
 8018b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b0a:	4858      	ldr	r0, [pc, #352]	; (8018c6c <_vfiprintf_r+0x24c>)
 8018b0c:	f7e7 fbe8 	bl	80002e0 <memchr>
 8018b10:	9a04      	ldr	r2, [sp, #16]
 8018b12:	b9d8      	cbnz	r0, 8018b4c <_vfiprintf_r+0x12c>
 8018b14:	06d1      	lsls	r1, r2, #27
 8018b16:	bf44      	itt	mi
 8018b18:	2320      	movmi	r3, #32
 8018b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b1e:	0713      	lsls	r3, r2, #28
 8018b20:	bf44      	itt	mi
 8018b22:	232b      	movmi	r3, #43	; 0x2b
 8018b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b28:	f89a 3000 	ldrb.w	r3, [sl]
 8018b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8018b2e:	d015      	beq.n	8018b5c <_vfiprintf_r+0x13c>
 8018b30:	9a07      	ldr	r2, [sp, #28]
 8018b32:	4654      	mov	r4, sl
 8018b34:	2000      	movs	r0, #0
 8018b36:	f04f 0c0a 	mov.w	ip, #10
 8018b3a:	4621      	mov	r1, r4
 8018b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b40:	3b30      	subs	r3, #48	; 0x30
 8018b42:	2b09      	cmp	r3, #9
 8018b44:	d94e      	bls.n	8018be4 <_vfiprintf_r+0x1c4>
 8018b46:	b1b0      	cbz	r0, 8018b76 <_vfiprintf_r+0x156>
 8018b48:	9207      	str	r2, [sp, #28]
 8018b4a:	e014      	b.n	8018b76 <_vfiprintf_r+0x156>
 8018b4c:	eba0 0308 	sub.w	r3, r0, r8
 8018b50:	fa09 f303 	lsl.w	r3, r9, r3
 8018b54:	4313      	orrs	r3, r2
 8018b56:	9304      	str	r3, [sp, #16]
 8018b58:	46a2      	mov	sl, r4
 8018b5a:	e7d2      	b.n	8018b02 <_vfiprintf_r+0xe2>
 8018b5c:	9b03      	ldr	r3, [sp, #12]
 8018b5e:	1d19      	adds	r1, r3, #4
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	9103      	str	r1, [sp, #12]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	bfbb      	ittet	lt
 8018b68:	425b      	neglt	r3, r3
 8018b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8018b6e:	9307      	strge	r3, [sp, #28]
 8018b70:	9307      	strlt	r3, [sp, #28]
 8018b72:	bfb8      	it	lt
 8018b74:	9204      	strlt	r2, [sp, #16]
 8018b76:	7823      	ldrb	r3, [r4, #0]
 8018b78:	2b2e      	cmp	r3, #46	; 0x2e
 8018b7a:	d10c      	bne.n	8018b96 <_vfiprintf_r+0x176>
 8018b7c:	7863      	ldrb	r3, [r4, #1]
 8018b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8018b80:	d135      	bne.n	8018bee <_vfiprintf_r+0x1ce>
 8018b82:	9b03      	ldr	r3, [sp, #12]
 8018b84:	1d1a      	adds	r2, r3, #4
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	9203      	str	r2, [sp, #12]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	bfb8      	it	lt
 8018b8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018b92:	3402      	adds	r4, #2
 8018b94:	9305      	str	r3, [sp, #20]
 8018b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018c7c <_vfiprintf_r+0x25c>
 8018b9a:	7821      	ldrb	r1, [r4, #0]
 8018b9c:	2203      	movs	r2, #3
 8018b9e:	4650      	mov	r0, sl
 8018ba0:	f7e7 fb9e 	bl	80002e0 <memchr>
 8018ba4:	b140      	cbz	r0, 8018bb8 <_vfiprintf_r+0x198>
 8018ba6:	2340      	movs	r3, #64	; 0x40
 8018ba8:	eba0 000a 	sub.w	r0, r0, sl
 8018bac:	fa03 f000 	lsl.w	r0, r3, r0
 8018bb0:	9b04      	ldr	r3, [sp, #16]
 8018bb2:	4303      	orrs	r3, r0
 8018bb4:	3401      	adds	r4, #1
 8018bb6:	9304      	str	r3, [sp, #16]
 8018bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bbc:	482c      	ldr	r0, [pc, #176]	; (8018c70 <_vfiprintf_r+0x250>)
 8018bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018bc2:	2206      	movs	r2, #6
 8018bc4:	f7e7 fb8c 	bl	80002e0 <memchr>
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	d03f      	beq.n	8018c4c <_vfiprintf_r+0x22c>
 8018bcc:	4b29      	ldr	r3, [pc, #164]	; (8018c74 <_vfiprintf_r+0x254>)
 8018bce:	bb1b      	cbnz	r3, 8018c18 <_vfiprintf_r+0x1f8>
 8018bd0:	9b03      	ldr	r3, [sp, #12]
 8018bd2:	3307      	adds	r3, #7
 8018bd4:	f023 0307 	bic.w	r3, r3, #7
 8018bd8:	3308      	adds	r3, #8
 8018bda:	9303      	str	r3, [sp, #12]
 8018bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bde:	443b      	add	r3, r7
 8018be0:	9309      	str	r3, [sp, #36]	; 0x24
 8018be2:	e767      	b.n	8018ab4 <_vfiprintf_r+0x94>
 8018be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8018be8:	460c      	mov	r4, r1
 8018bea:	2001      	movs	r0, #1
 8018bec:	e7a5      	b.n	8018b3a <_vfiprintf_r+0x11a>
 8018bee:	2300      	movs	r3, #0
 8018bf0:	3401      	adds	r4, #1
 8018bf2:	9305      	str	r3, [sp, #20]
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	f04f 0c0a 	mov.w	ip, #10
 8018bfa:	4620      	mov	r0, r4
 8018bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c00:	3a30      	subs	r2, #48	; 0x30
 8018c02:	2a09      	cmp	r2, #9
 8018c04:	d903      	bls.n	8018c0e <_vfiprintf_r+0x1ee>
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d0c5      	beq.n	8018b96 <_vfiprintf_r+0x176>
 8018c0a:	9105      	str	r1, [sp, #20]
 8018c0c:	e7c3      	b.n	8018b96 <_vfiprintf_r+0x176>
 8018c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c12:	4604      	mov	r4, r0
 8018c14:	2301      	movs	r3, #1
 8018c16:	e7f0      	b.n	8018bfa <_vfiprintf_r+0x1da>
 8018c18:	ab03      	add	r3, sp, #12
 8018c1a:	9300      	str	r3, [sp, #0]
 8018c1c:	462a      	mov	r2, r5
 8018c1e:	4b16      	ldr	r3, [pc, #88]	; (8018c78 <_vfiprintf_r+0x258>)
 8018c20:	a904      	add	r1, sp, #16
 8018c22:	4630      	mov	r0, r6
 8018c24:	f3af 8000 	nop.w
 8018c28:	4607      	mov	r7, r0
 8018c2a:	1c78      	adds	r0, r7, #1
 8018c2c:	d1d6      	bne.n	8018bdc <_vfiprintf_r+0x1bc>
 8018c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c30:	07d9      	lsls	r1, r3, #31
 8018c32:	d405      	bmi.n	8018c40 <_vfiprintf_r+0x220>
 8018c34:	89ab      	ldrh	r3, [r5, #12]
 8018c36:	059a      	lsls	r2, r3, #22
 8018c38:	d402      	bmi.n	8018c40 <_vfiprintf_r+0x220>
 8018c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c3c:	f000 fc81 	bl	8019542 <__retarget_lock_release_recursive>
 8018c40:	89ab      	ldrh	r3, [r5, #12]
 8018c42:	065b      	lsls	r3, r3, #25
 8018c44:	f53f af12 	bmi.w	8018a6c <_vfiprintf_r+0x4c>
 8018c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c4a:	e711      	b.n	8018a70 <_vfiprintf_r+0x50>
 8018c4c:	ab03      	add	r3, sp, #12
 8018c4e:	9300      	str	r3, [sp, #0]
 8018c50:	462a      	mov	r2, r5
 8018c52:	4b09      	ldr	r3, [pc, #36]	; (8018c78 <_vfiprintf_r+0x258>)
 8018c54:	a904      	add	r1, sp, #16
 8018c56:	4630      	mov	r0, r6
 8018c58:	f000 f880 	bl	8018d5c <_printf_i>
 8018c5c:	e7e4      	b.n	8018c28 <_vfiprintf_r+0x208>
 8018c5e:	bf00      	nop
 8018c60:	08034214 	.word	0x08034214
 8018c64:	08034234 	.word	0x08034234
 8018c68:	080341f4 	.word	0x080341f4
 8018c6c:	080341c0 	.word	0x080341c0
 8018c70:	080341ca 	.word	0x080341ca
 8018c74:	00000000 	.word	0x00000000
 8018c78:	080189fb 	.word	0x080189fb
 8018c7c:	080341c6 	.word	0x080341c6

08018c80 <_printf_common>:
 8018c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c84:	4616      	mov	r6, r2
 8018c86:	4699      	mov	r9, r3
 8018c88:	688a      	ldr	r2, [r1, #8]
 8018c8a:	690b      	ldr	r3, [r1, #16]
 8018c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018c90:	4293      	cmp	r3, r2
 8018c92:	bfb8      	it	lt
 8018c94:	4613      	movlt	r3, r2
 8018c96:	6033      	str	r3, [r6, #0]
 8018c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018c9c:	4607      	mov	r7, r0
 8018c9e:	460c      	mov	r4, r1
 8018ca0:	b10a      	cbz	r2, 8018ca6 <_printf_common+0x26>
 8018ca2:	3301      	adds	r3, #1
 8018ca4:	6033      	str	r3, [r6, #0]
 8018ca6:	6823      	ldr	r3, [r4, #0]
 8018ca8:	0699      	lsls	r1, r3, #26
 8018caa:	bf42      	ittt	mi
 8018cac:	6833      	ldrmi	r3, [r6, #0]
 8018cae:	3302      	addmi	r3, #2
 8018cb0:	6033      	strmi	r3, [r6, #0]
 8018cb2:	6825      	ldr	r5, [r4, #0]
 8018cb4:	f015 0506 	ands.w	r5, r5, #6
 8018cb8:	d106      	bne.n	8018cc8 <_printf_common+0x48>
 8018cba:	f104 0a19 	add.w	sl, r4, #25
 8018cbe:	68e3      	ldr	r3, [r4, #12]
 8018cc0:	6832      	ldr	r2, [r6, #0]
 8018cc2:	1a9b      	subs	r3, r3, r2
 8018cc4:	42ab      	cmp	r3, r5
 8018cc6:	dc26      	bgt.n	8018d16 <_printf_common+0x96>
 8018cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018ccc:	1e13      	subs	r3, r2, #0
 8018cce:	6822      	ldr	r2, [r4, #0]
 8018cd0:	bf18      	it	ne
 8018cd2:	2301      	movne	r3, #1
 8018cd4:	0692      	lsls	r2, r2, #26
 8018cd6:	d42b      	bmi.n	8018d30 <_printf_common+0xb0>
 8018cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018cdc:	4649      	mov	r1, r9
 8018cde:	4638      	mov	r0, r7
 8018ce0:	47c0      	blx	r8
 8018ce2:	3001      	adds	r0, #1
 8018ce4:	d01e      	beq.n	8018d24 <_printf_common+0xa4>
 8018ce6:	6823      	ldr	r3, [r4, #0]
 8018ce8:	68e5      	ldr	r5, [r4, #12]
 8018cea:	6832      	ldr	r2, [r6, #0]
 8018cec:	f003 0306 	and.w	r3, r3, #6
 8018cf0:	2b04      	cmp	r3, #4
 8018cf2:	bf08      	it	eq
 8018cf4:	1aad      	subeq	r5, r5, r2
 8018cf6:	68a3      	ldr	r3, [r4, #8]
 8018cf8:	6922      	ldr	r2, [r4, #16]
 8018cfa:	bf0c      	ite	eq
 8018cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018d00:	2500      	movne	r5, #0
 8018d02:	4293      	cmp	r3, r2
 8018d04:	bfc4      	itt	gt
 8018d06:	1a9b      	subgt	r3, r3, r2
 8018d08:	18ed      	addgt	r5, r5, r3
 8018d0a:	2600      	movs	r6, #0
 8018d0c:	341a      	adds	r4, #26
 8018d0e:	42b5      	cmp	r5, r6
 8018d10:	d11a      	bne.n	8018d48 <_printf_common+0xc8>
 8018d12:	2000      	movs	r0, #0
 8018d14:	e008      	b.n	8018d28 <_printf_common+0xa8>
 8018d16:	2301      	movs	r3, #1
 8018d18:	4652      	mov	r2, sl
 8018d1a:	4649      	mov	r1, r9
 8018d1c:	4638      	mov	r0, r7
 8018d1e:	47c0      	blx	r8
 8018d20:	3001      	adds	r0, #1
 8018d22:	d103      	bne.n	8018d2c <_printf_common+0xac>
 8018d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d2c:	3501      	adds	r5, #1
 8018d2e:	e7c6      	b.n	8018cbe <_printf_common+0x3e>
 8018d30:	18e1      	adds	r1, r4, r3
 8018d32:	1c5a      	adds	r2, r3, #1
 8018d34:	2030      	movs	r0, #48	; 0x30
 8018d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018d3a:	4422      	add	r2, r4
 8018d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018d44:	3302      	adds	r3, #2
 8018d46:	e7c7      	b.n	8018cd8 <_printf_common+0x58>
 8018d48:	2301      	movs	r3, #1
 8018d4a:	4622      	mov	r2, r4
 8018d4c:	4649      	mov	r1, r9
 8018d4e:	4638      	mov	r0, r7
 8018d50:	47c0      	blx	r8
 8018d52:	3001      	adds	r0, #1
 8018d54:	d0e6      	beq.n	8018d24 <_printf_common+0xa4>
 8018d56:	3601      	adds	r6, #1
 8018d58:	e7d9      	b.n	8018d0e <_printf_common+0x8e>
	...

08018d5c <_printf_i>:
 8018d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018d60:	7e0f      	ldrb	r7, [r1, #24]
 8018d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018d64:	2f78      	cmp	r7, #120	; 0x78
 8018d66:	4691      	mov	r9, r2
 8018d68:	4680      	mov	r8, r0
 8018d6a:	460c      	mov	r4, r1
 8018d6c:	469a      	mov	sl, r3
 8018d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018d72:	d807      	bhi.n	8018d84 <_printf_i+0x28>
 8018d74:	2f62      	cmp	r7, #98	; 0x62
 8018d76:	d80a      	bhi.n	8018d8e <_printf_i+0x32>
 8018d78:	2f00      	cmp	r7, #0
 8018d7a:	f000 80d8 	beq.w	8018f2e <_printf_i+0x1d2>
 8018d7e:	2f58      	cmp	r7, #88	; 0x58
 8018d80:	f000 80a3 	beq.w	8018eca <_printf_i+0x16e>
 8018d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018d8c:	e03a      	b.n	8018e04 <_printf_i+0xa8>
 8018d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018d92:	2b15      	cmp	r3, #21
 8018d94:	d8f6      	bhi.n	8018d84 <_printf_i+0x28>
 8018d96:	a101      	add	r1, pc, #4	; (adr r1, 8018d9c <_printf_i+0x40>)
 8018d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018d9c:	08018df5 	.word	0x08018df5
 8018da0:	08018e09 	.word	0x08018e09
 8018da4:	08018d85 	.word	0x08018d85
 8018da8:	08018d85 	.word	0x08018d85
 8018dac:	08018d85 	.word	0x08018d85
 8018db0:	08018d85 	.word	0x08018d85
 8018db4:	08018e09 	.word	0x08018e09
 8018db8:	08018d85 	.word	0x08018d85
 8018dbc:	08018d85 	.word	0x08018d85
 8018dc0:	08018d85 	.word	0x08018d85
 8018dc4:	08018d85 	.word	0x08018d85
 8018dc8:	08018f15 	.word	0x08018f15
 8018dcc:	08018e39 	.word	0x08018e39
 8018dd0:	08018ef7 	.word	0x08018ef7
 8018dd4:	08018d85 	.word	0x08018d85
 8018dd8:	08018d85 	.word	0x08018d85
 8018ddc:	08018f37 	.word	0x08018f37
 8018de0:	08018d85 	.word	0x08018d85
 8018de4:	08018e39 	.word	0x08018e39
 8018de8:	08018d85 	.word	0x08018d85
 8018dec:	08018d85 	.word	0x08018d85
 8018df0:	08018eff 	.word	0x08018eff
 8018df4:	682b      	ldr	r3, [r5, #0]
 8018df6:	1d1a      	adds	r2, r3, #4
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	602a      	str	r2, [r5, #0]
 8018dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018e04:	2301      	movs	r3, #1
 8018e06:	e0a3      	b.n	8018f50 <_printf_i+0x1f4>
 8018e08:	6820      	ldr	r0, [r4, #0]
 8018e0a:	6829      	ldr	r1, [r5, #0]
 8018e0c:	0606      	lsls	r6, r0, #24
 8018e0e:	f101 0304 	add.w	r3, r1, #4
 8018e12:	d50a      	bpl.n	8018e2a <_printf_i+0xce>
 8018e14:	680e      	ldr	r6, [r1, #0]
 8018e16:	602b      	str	r3, [r5, #0]
 8018e18:	2e00      	cmp	r6, #0
 8018e1a:	da03      	bge.n	8018e24 <_printf_i+0xc8>
 8018e1c:	232d      	movs	r3, #45	; 0x2d
 8018e1e:	4276      	negs	r6, r6
 8018e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018e24:	485e      	ldr	r0, [pc, #376]	; (8018fa0 <_printf_i+0x244>)
 8018e26:	230a      	movs	r3, #10
 8018e28:	e019      	b.n	8018e5e <_printf_i+0x102>
 8018e2a:	680e      	ldr	r6, [r1, #0]
 8018e2c:	602b      	str	r3, [r5, #0]
 8018e2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018e32:	bf18      	it	ne
 8018e34:	b236      	sxthne	r6, r6
 8018e36:	e7ef      	b.n	8018e18 <_printf_i+0xbc>
 8018e38:	682b      	ldr	r3, [r5, #0]
 8018e3a:	6820      	ldr	r0, [r4, #0]
 8018e3c:	1d19      	adds	r1, r3, #4
 8018e3e:	6029      	str	r1, [r5, #0]
 8018e40:	0601      	lsls	r1, r0, #24
 8018e42:	d501      	bpl.n	8018e48 <_printf_i+0xec>
 8018e44:	681e      	ldr	r6, [r3, #0]
 8018e46:	e002      	b.n	8018e4e <_printf_i+0xf2>
 8018e48:	0646      	lsls	r6, r0, #25
 8018e4a:	d5fb      	bpl.n	8018e44 <_printf_i+0xe8>
 8018e4c:	881e      	ldrh	r6, [r3, #0]
 8018e4e:	4854      	ldr	r0, [pc, #336]	; (8018fa0 <_printf_i+0x244>)
 8018e50:	2f6f      	cmp	r7, #111	; 0x6f
 8018e52:	bf0c      	ite	eq
 8018e54:	2308      	moveq	r3, #8
 8018e56:	230a      	movne	r3, #10
 8018e58:	2100      	movs	r1, #0
 8018e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018e5e:	6865      	ldr	r5, [r4, #4]
 8018e60:	60a5      	str	r5, [r4, #8]
 8018e62:	2d00      	cmp	r5, #0
 8018e64:	bfa2      	ittt	ge
 8018e66:	6821      	ldrge	r1, [r4, #0]
 8018e68:	f021 0104 	bicge.w	r1, r1, #4
 8018e6c:	6021      	strge	r1, [r4, #0]
 8018e6e:	b90e      	cbnz	r6, 8018e74 <_printf_i+0x118>
 8018e70:	2d00      	cmp	r5, #0
 8018e72:	d04d      	beq.n	8018f10 <_printf_i+0x1b4>
 8018e74:	4615      	mov	r5, r2
 8018e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8018e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8018e7e:	5dc7      	ldrb	r7, [r0, r7]
 8018e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018e84:	4637      	mov	r7, r6
 8018e86:	42bb      	cmp	r3, r7
 8018e88:	460e      	mov	r6, r1
 8018e8a:	d9f4      	bls.n	8018e76 <_printf_i+0x11a>
 8018e8c:	2b08      	cmp	r3, #8
 8018e8e:	d10b      	bne.n	8018ea8 <_printf_i+0x14c>
 8018e90:	6823      	ldr	r3, [r4, #0]
 8018e92:	07de      	lsls	r6, r3, #31
 8018e94:	d508      	bpl.n	8018ea8 <_printf_i+0x14c>
 8018e96:	6923      	ldr	r3, [r4, #16]
 8018e98:	6861      	ldr	r1, [r4, #4]
 8018e9a:	4299      	cmp	r1, r3
 8018e9c:	bfde      	ittt	le
 8018e9e:	2330      	movle	r3, #48	; 0x30
 8018ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018ea4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018ea8:	1b52      	subs	r2, r2, r5
 8018eaa:	6122      	str	r2, [r4, #16]
 8018eac:	f8cd a000 	str.w	sl, [sp]
 8018eb0:	464b      	mov	r3, r9
 8018eb2:	aa03      	add	r2, sp, #12
 8018eb4:	4621      	mov	r1, r4
 8018eb6:	4640      	mov	r0, r8
 8018eb8:	f7ff fee2 	bl	8018c80 <_printf_common>
 8018ebc:	3001      	adds	r0, #1
 8018ebe:	d14c      	bne.n	8018f5a <_printf_i+0x1fe>
 8018ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ec4:	b004      	add	sp, #16
 8018ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eca:	4835      	ldr	r0, [pc, #212]	; (8018fa0 <_printf_i+0x244>)
 8018ecc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018ed0:	6829      	ldr	r1, [r5, #0]
 8018ed2:	6823      	ldr	r3, [r4, #0]
 8018ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8018ed8:	6029      	str	r1, [r5, #0]
 8018eda:	061d      	lsls	r5, r3, #24
 8018edc:	d514      	bpl.n	8018f08 <_printf_i+0x1ac>
 8018ede:	07df      	lsls	r7, r3, #31
 8018ee0:	bf44      	itt	mi
 8018ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8018ee6:	6023      	strmi	r3, [r4, #0]
 8018ee8:	b91e      	cbnz	r6, 8018ef2 <_printf_i+0x196>
 8018eea:	6823      	ldr	r3, [r4, #0]
 8018eec:	f023 0320 	bic.w	r3, r3, #32
 8018ef0:	6023      	str	r3, [r4, #0]
 8018ef2:	2310      	movs	r3, #16
 8018ef4:	e7b0      	b.n	8018e58 <_printf_i+0xfc>
 8018ef6:	6823      	ldr	r3, [r4, #0]
 8018ef8:	f043 0320 	orr.w	r3, r3, #32
 8018efc:	6023      	str	r3, [r4, #0]
 8018efe:	2378      	movs	r3, #120	; 0x78
 8018f00:	4828      	ldr	r0, [pc, #160]	; (8018fa4 <_printf_i+0x248>)
 8018f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018f06:	e7e3      	b.n	8018ed0 <_printf_i+0x174>
 8018f08:	0659      	lsls	r1, r3, #25
 8018f0a:	bf48      	it	mi
 8018f0c:	b2b6      	uxthmi	r6, r6
 8018f0e:	e7e6      	b.n	8018ede <_printf_i+0x182>
 8018f10:	4615      	mov	r5, r2
 8018f12:	e7bb      	b.n	8018e8c <_printf_i+0x130>
 8018f14:	682b      	ldr	r3, [r5, #0]
 8018f16:	6826      	ldr	r6, [r4, #0]
 8018f18:	6961      	ldr	r1, [r4, #20]
 8018f1a:	1d18      	adds	r0, r3, #4
 8018f1c:	6028      	str	r0, [r5, #0]
 8018f1e:	0635      	lsls	r5, r6, #24
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	d501      	bpl.n	8018f28 <_printf_i+0x1cc>
 8018f24:	6019      	str	r1, [r3, #0]
 8018f26:	e002      	b.n	8018f2e <_printf_i+0x1d2>
 8018f28:	0670      	lsls	r0, r6, #25
 8018f2a:	d5fb      	bpl.n	8018f24 <_printf_i+0x1c8>
 8018f2c:	8019      	strh	r1, [r3, #0]
 8018f2e:	2300      	movs	r3, #0
 8018f30:	6123      	str	r3, [r4, #16]
 8018f32:	4615      	mov	r5, r2
 8018f34:	e7ba      	b.n	8018eac <_printf_i+0x150>
 8018f36:	682b      	ldr	r3, [r5, #0]
 8018f38:	1d1a      	adds	r2, r3, #4
 8018f3a:	602a      	str	r2, [r5, #0]
 8018f3c:	681d      	ldr	r5, [r3, #0]
 8018f3e:	6862      	ldr	r2, [r4, #4]
 8018f40:	2100      	movs	r1, #0
 8018f42:	4628      	mov	r0, r5
 8018f44:	f7e7 f9cc 	bl	80002e0 <memchr>
 8018f48:	b108      	cbz	r0, 8018f4e <_printf_i+0x1f2>
 8018f4a:	1b40      	subs	r0, r0, r5
 8018f4c:	6060      	str	r0, [r4, #4]
 8018f4e:	6863      	ldr	r3, [r4, #4]
 8018f50:	6123      	str	r3, [r4, #16]
 8018f52:	2300      	movs	r3, #0
 8018f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018f58:	e7a8      	b.n	8018eac <_printf_i+0x150>
 8018f5a:	6923      	ldr	r3, [r4, #16]
 8018f5c:	462a      	mov	r2, r5
 8018f5e:	4649      	mov	r1, r9
 8018f60:	4640      	mov	r0, r8
 8018f62:	47d0      	blx	sl
 8018f64:	3001      	adds	r0, #1
 8018f66:	d0ab      	beq.n	8018ec0 <_printf_i+0x164>
 8018f68:	6823      	ldr	r3, [r4, #0]
 8018f6a:	079b      	lsls	r3, r3, #30
 8018f6c:	d413      	bmi.n	8018f96 <_printf_i+0x23a>
 8018f6e:	68e0      	ldr	r0, [r4, #12]
 8018f70:	9b03      	ldr	r3, [sp, #12]
 8018f72:	4298      	cmp	r0, r3
 8018f74:	bfb8      	it	lt
 8018f76:	4618      	movlt	r0, r3
 8018f78:	e7a4      	b.n	8018ec4 <_printf_i+0x168>
 8018f7a:	2301      	movs	r3, #1
 8018f7c:	4632      	mov	r2, r6
 8018f7e:	4649      	mov	r1, r9
 8018f80:	4640      	mov	r0, r8
 8018f82:	47d0      	blx	sl
 8018f84:	3001      	adds	r0, #1
 8018f86:	d09b      	beq.n	8018ec0 <_printf_i+0x164>
 8018f88:	3501      	adds	r5, #1
 8018f8a:	68e3      	ldr	r3, [r4, #12]
 8018f8c:	9903      	ldr	r1, [sp, #12]
 8018f8e:	1a5b      	subs	r3, r3, r1
 8018f90:	42ab      	cmp	r3, r5
 8018f92:	dcf2      	bgt.n	8018f7a <_printf_i+0x21e>
 8018f94:	e7eb      	b.n	8018f6e <_printf_i+0x212>
 8018f96:	2500      	movs	r5, #0
 8018f98:	f104 0619 	add.w	r6, r4, #25
 8018f9c:	e7f5      	b.n	8018f8a <_printf_i+0x22e>
 8018f9e:	bf00      	nop
 8018fa0:	080341d1 	.word	0x080341d1
 8018fa4:	080341e2 	.word	0x080341e2

08018fa8 <_sbrk_r>:
 8018fa8:	b538      	push	{r3, r4, r5, lr}
 8018faa:	4d06      	ldr	r5, [pc, #24]	; (8018fc4 <_sbrk_r+0x1c>)
 8018fac:	2300      	movs	r3, #0
 8018fae:	4604      	mov	r4, r0
 8018fb0:	4608      	mov	r0, r1
 8018fb2:	602b      	str	r3, [r5, #0]
 8018fb4:	f7ee ffee 	bl	8007f94 <_sbrk>
 8018fb8:	1c43      	adds	r3, r0, #1
 8018fba:	d102      	bne.n	8018fc2 <_sbrk_r+0x1a>
 8018fbc:	682b      	ldr	r3, [r5, #0]
 8018fbe:	b103      	cbz	r3, 8018fc2 <_sbrk_r+0x1a>
 8018fc0:	6023      	str	r3, [r4, #0]
 8018fc2:	bd38      	pop	{r3, r4, r5, pc}
 8018fc4:	24003664 	.word	0x24003664

08018fc8 <_raise_r>:
 8018fc8:	291f      	cmp	r1, #31
 8018fca:	b538      	push	{r3, r4, r5, lr}
 8018fcc:	4604      	mov	r4, r0
 8018fce:	460d      	mov	r5, r1
 8018fd0:	d904      	bls.n	8018fdc <_raise_r+0x14>
 8018fd2:	2316      	movs	r3, #22
 8018fd4:	6003      	str	r3, [r0, #0]
 8018fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018fda:	bd38      	pop	{r3, r4, r5, pc}
 8018fdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018fde:	b112      	cbz	r2, 8018fe6 <_raise_r+0x1e>
 8018fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018fe4:	b94b      	cbnz	r3, 8018ffa <_raise_r+0x32>
 8018fe6:	4620      	mov	r0, r4
 8018fe8:	f000 f830 	bl	801904c <_getpid_r>
 8018fec:	462a      	mov	r2, r5
 8018fee:	4601      	mov	r1, r0
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ff6:	f000 b817 	b.w	8019028 <_kill_r>
 8018ffa:	2b01      	cmp	r3, #1
 8018ffc:	d00a      	beq.n	8019014 <_raise_r+0x4c>
 8018ffe:	1c59      	adds	r1, r3, #1
 8019000:	d103      	bne.n	801900a <_raise_r+0x42>
 8019002:	2316      	movs	r3, #22
 8019004:	6003      	str	r3, [r0, #0]
 8019006:	2001      	movs	r0, #1
 8019008:	e7e7      	b.n	8018fda <_raise_r+0x12>
 801900a:	2400      	movs	r4, #0
 801900c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019010:	4628      	mov	r0, r5
 8019012:	4798      	blx	r3
 8019014:	2000      	movs	r0, #0
 8019016:	e7e0      	b.n	8018fda <_raise_r+0x12>

08019018 <raise>:
 8019018:	4b02      	ldr	r3, [pc, #8]	; (8019024 <raise+0xc>)
 801901a:	4601      	mov	r1, r0
 801901c:	6818      	ldr	r0, [r3, #0]
 801901e:	f7ff bfd3 	b.w	8018fc8 <_raise_r>
 8019022:	bf00      	nop
 8019024:	24000184 	.word	0x24000184

08019028 <_kill_r>:
 8019028:	b538      	push	{r3, r4, r5, lr}
 801902a:	4d07      	ldr	r5, [pc, #28]	; (8019048 <_kill_r+0x20>)
 801902c:	2300      	movs	r3, #0
 801902e:	4604      	mov	r4, r0
 8019030:	4608      	mov	r0, r1
 8019032:	4611      	mov	r1, r2
 8019034:	602b      	str	r3, [r5, #0]
 8019036:	f7ee ff25 	bl	8007e84 <_kill>
 801903a:	1c43      	adds	r3, r0, #1
 801903c:	d102      	bne.n	8019044 <_kill_r+0x1c>
 801903e:	682b      	ldr	r3, [r5, #0]
 8019040:	b103      	cbz	r3, 8019044 <_kill_r+0x1c>
 8019042:	6023      	str	r3, [r4, #0]
 8019044:	bd38      	pop	{r3, r4, r5, pc}
 8019046:	bf00      	nop
 8019048:	24003664 	.word	0x24003664

0801904c <_getpid_r>:
 801904c:	f7ee bf12 	b.w	8007e74 <_getpid>

08019050 <__swbuf_r>:
 8019050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019052:	460e      	mov	r6, r1
 8019054:	4614      	mov	r4, r2
 8019056:	4605      	mov	r5, r0
 8019058:	b118      	cbz	r0, 8019062 <__swbuf_r+0x12>
 801905a:	6983      	ldr	r3, [r0, #24]
 801905c:	b90b      	cbnz	r3, 8019062 <__swbuf_r+0x12>
 801905e:	f000 f9d1 	bl	8019404 <__sinit>
 8019062:	4b21      	ldr	r3, [pc, #132]	; (80190e8 <__swbuf_r+0x98>)
 8019064:	429c      	cmp	r4, r3
 8019066:	d12b      	bne.n	80190c0 <__swbuf_r+0x70>
 8019068:	686c      	ldr	r4, [r5, #4]
 801906a:	69a3      	ldr	r3, [r4, #24]
 801906c:	60a3      	str	r3, [r4, #8]
 801906e:	89a3      	ldrh	r3, [r4, #12]
 8019070:	071a      	lsls	r2, r3, #28
 8019072:	d52f      	bpl.n	80190d4 <__swbuf_r+0x84>
 8019074:	6923      	ldr	r3, [r4, #16]
 8019076:	b36b      	cbz	r3, 80190d4 <__swbuf_r+0x84>
 8019078:	6923      	ldr	r3, [r4, #16]
 801907a:	6820      	ldr	r0, [r4, #0]
 801907c:	1ac0      	subs	r0, r0, r3
 801907e:	6963      	ldr	r3, [r4, #20]
 8019080:	b2f6      	uxtb	r6, r6
 8019082:	4283      	cmp	r3, r0
 8019084:	4637      	mov	r7, r6
 8019086:	dc04      	bgt.n	8019092 <__swbuf_r+0x42>
 8019088:	4621      	mov	r1, r4
 801908a:	4628      	mov	r0, r5
 801908c:	f000 f926 	bl	80192dc <_fflush_r>
 8019090:	bb30      	cbnz	r0, 80190e0 <__swbuf_r+0x90>
 8019092:	68a3      	ldr	r3, [r4, #8]
 8019094:	3b01      	subs	r3, #1
 8019096:	60a3      	str	r3, [r4, #8]
 8019098:	6823      	ldr	r3, [r4, #0]
 801909a:	1c5a      	adds	r2, r3, #1
 801909c:	6022      	str	r2, [r4, #0]
 801909e:	701e      	strb	r6, [r3, #0]
 80190a0:	6963      	ldr	r3, [r4, #20]
 80190a2:	3001      	adds	r0, #1
 80190a4:	4283      	cmp	r3, r0
 80190a6:	d004      	beq.n	80190b2 <__swbuf_r+0x62>
 80190a8:	89a3      	ldrh	r3, [r4, #12]
 80190aa:	07db      	lsls	r3, r3, #31
 80190ac:	d506      	bpl.n	80190bc <__swbuf_r+0x6c>
 80190ae:	2e0a      	cmp	r6, #10
 80190b0:	d104      	bne.n	80190bc <__swbuf_r+0x6c>
 80190b2:	4621      	mov	r1, r4
 80190b4:	4628      	mov	r0, r5
 80190b6:	f000 f911 	bl	80192dc <_fflush_r>
 80190ba:	b988      	cbnz	r0, 80190e0 <__swbuf_r+0x90>
 80190bc:	4638      	mov	r0, r7
 80190be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190c0:	4b0a      	ldr	r3, [pc, #40]	; (80190ec <__swbuf_r+0x9c>)
 80190c2:	429c      	cmp	r4, r3
 80190c4:	d101      	bne.n	80190ca <__swbuf_r+0x7a>
 80190c6:	68ac      	ldr	r4, [r5, #8]
 80190c8:	e7cf      	b.n	801906a <__swbuf_r+0x1a>
 80190ca:	4b09      	ldr	r3, [pc, #36]	; (80190f0 <__swbuf_r+0xa0>)
 80190cc:	429c      	cmp	r4, r3
 80190ce:	bf08      	it	eq
 80190d0:	68ec      	ldreq	r4, [r5, #12]
 80190d2:	e7ca      	b.n	801906a <__swbuf_r+0x1a>
 80190d4:	4621      	mov	r1, r4
 80190d6:	4628      	mov	r0, r5
 80190d8:	f000 f80c 	bl	80190f4 <__swsetup_r>
 80190dc:	2800      	cmp	r0, #0
 80190de:	d0cb      	beq.n	8019078 <__swbuf_r+0x28>
 80190e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80190e4:	e7ea      	b.n	80190bc <__swbuf_r+0x6c>
 80190e6:	bf00      	nop
 80190e8:	08034214 	.word	0x08034214
 80190ec:	08034234 	.word	0x08034234
 80190f0:	080341f4 	.word	0x080341f4

080190f4 <__swsetup_r>:
 80190f4:	4b32      	ldr	r3, [pc, #200]	; (80191c0 <__swsetup_r+0xcc>)
 80190f6:	b570      	push	{r4, r5, r6, lr}
 80190f8:	681d      	ldr	r5, [r3, #0]
 80190fa:	4606      	mov	r6, r0
 80190fc:	460c      	mov	r4, r1
 80190fe:	b125      	cbz	r5, 801910a <__swsetup_r+0x16>
 8019100:	69ab      	ldr	r3, [r5, #24]
 8019102:	b913      	cbnz	r3, 801910a <__swsetup_r+0x16>
 8019104:	4628      	mov	r0, r5
 8019106:	f000 f97d 	bl	8019404 <__sinit>
 801910a:	4b2e      	ldr	r3, [pc, #184]	; (80191c4 <__swsetup_r+0xd0>)
 801910c:	429c      	cmp	r4, r3
 801910e:	d10f      	bne.n	8019130 <__swsetup_r+0x3c>
 8019110:	686c      	ldr	r4, [r5, #4]
 8019112:	89a3      	ldrh	r3, [r4, #12]
 8019114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019118:	0719      	lsls	r1, r3, #28
 801911a:	d42c      	bmi.n	8019176 <__swsetup_r+0x82>
 801911c:	06dd      	lsls	r5, r3, #27
 801911e:	d411      	bmi.n	8019144 <__swsetup_r+0x50>
 8019120:	2309      	movs	r3, #9
 8019122:	6033      	str	r3, [r6, #0]
 8019124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019128:	81a3      	strh	r3, [r4, #12]
 801912a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801912e:	e03e      	b.n	80191ae <__swsetup_r+0xba>
 8019130:	4b25      	ldr	r3, [pc, #148]	; (80191c8 <__swsetup_r+0xd4>)
 8019132:	429c      	cmp	r4, r3
 8019134:	d101      	bne.n	801913a <__swsetup_r+0x46>
 8019136:	68ac      	ldr	r4, [r5, #8]
 8019138:	e7eb      	b.n	8019112 <__swsetup_r+0x1e>
 801913a:	4b24      	ldr	r3, [pc, #144]	; (80191cc <__swsetup_r+0xd8>)
 801913c:	429c      	cmp	r4, r3
 801913e:	bf08      	it	eq
 8019140:	68ec      	ldreq	r4, [r5, #12]
 8019142:	e7e6      	b.n	8019112 <__swsetup_r+0x1e>
 8019144:	0758      	lsls	r0, r3, #29
 8019146:	d512      	bpl.n	801916e <__swsetup_r+0x7a>
 8019148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801914a:	b141      	cbz	r1, 801915e <__swsetup_r+0x6a>
 801914c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019150:	4299      	cmp	r1, r3
 8019152:	d002      	beq.n	801915a <__swsetup_r+0x66>
 8019154:	4630      	mov	r0, r6
 8019156:	f7ff fb59 	bl	801880c <_free_r>
 801915a:	2300      	movs	r3, #0
 801915c:	6363      	str	r3, [r4, #52]	; 0x34
 801915e:	89a3      	ldrh	r3, [r4, #12]
 8019160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019164:	81a3      	strh	r3, [r4, #12]
 8019166:	2300      	movs	r3, #0
 8019168:	6063      	str	r3, [r4, #4]
 801916a:	6923      	ldr	r3, [r4, #16]
 801916c:	6023      	str	r3, [r4, #0]
 801916e:	89a3      	ldrh	r3, [r4, #12]
 8019170:	f043 0308 	orr.w	r3, r3, #8
 8019174:	81a3      	strh	r3, [r4, #12]
 8019176:	6923      	ldr	r3, [r4, #16]
 8019178:	b94b      	cbnz	r3, 801918e <__swsetup_r+0x9a>
 801917a:	89a3      	ldrh	r3, [r4, #12]
 801917c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019184:	d003      	beq.n	801918e <__swsetup_r+0x9a>
 8019186:	4621      	mov	r1, r4
 8019188:	4630      	mov	r0, r6
 801918a:	f000 fa01 	bl	8019590 <__smakebuf_r>
 801918e:	89a0      	ldrh	r0, [r4, #12]
 8019190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019194:	f010 0301 	ands.w	r3, r0, #1
 8019198:	d00a      	beq.n	80191b0 <__swsetup_r+0xbc>
 801919a:	2300      	movs	r3, #0
 801919c:	60a3      	str	r3, [r4, #8]
 801919e:	6963      	ldr	r3, [r4, #20]
 80191a0:	425b      	negs	r3, r3
 80191a2:	61a3      	str	r3, [r4, #24]
 80191a4:	6923      	ldr	r3, [r4, #16]
 80191a6:	b943      	cbnz	r3, 80191ba <__swsetup_r+0xc6>
 80191a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80191ac:	d1ba      	bne.n	8019124 <__swsetup_r+0x30>
 80191ae:	bd70      	pop	{r4, r5, r6, pc}
 80191b0:	0781      	lsls	r1, r0, #30
 80191b2:	bf58      	it	pl
 80191b4:	6963      	ldrpl	r3, [r4, #20]
 80191b6:	60a3      	str	r3, [r4, #8]
 80191b8:	e7f4      	b.n	80191a4 <__swsetup_r+0xb0>
 80191ba:	2000      	movs	r0, #0
 80191bc:	e7f7      	b.n	80191ae <__swsetup_r+0xba>
 80191be:	bf00      	nop
 80191c0:	24000184 	.word	0x24000184
 80191c4:	08034214 	.word	0x08034214
 80191c8:	08034234 	.word	0x08034234
 80191cc:	080341f4 	.word	0x080341f4

080191d0 <__sflush_r>:
 80191d0:	898a      	ldrh	r2, [r1, #12]
 80191d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191d6:	4605      	mov	r5, r0
 80191d8:	0710      	lsls	r0, r2, #28
 80191da:	460c      	mov	r4, r1
 80191dc:	d458      	bmi.n	8019290 <__sflush_r+0xc0>
 80191de:	684b      	ldr	r3, [r1, #4]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	dc05      	bgt.n	80191f0 <__sflush_r+0x20>
 80191e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	dc02      	bgt.n	80191f0 <__sflush_r+0x20>
 80191ea:	2000      	movs	r0, #0
 80191ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191f2:	2e00      	cmp	r6, #0
 80191f4:	d0f9      	beq.n	80191ea <__sflush_r+0x1a>
 80191f6:	2300      	movs	r3, #0
 80191f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80191fc:	682f      	ldr	r7, [r5, #0]
 80191fe:	602b      	str	r3, [r5, #0]
 8019200:	d032      	beq.n	8019268 <__sflush_r+0x98>
 8019202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019204:	89a3      	ldrh	r3, [r4, #12]
 8019206:	075a      	lsls	r2, r3, #29
 8019208:	d505      	bpl.n	8019216 <__sflush_r+0x46>
 801920a:	6863      	ldr	r3, [r4, #4]
 801920c:	1ac0      	subs	r0, r0, r3
 801920e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019210:	b10b      	cbz	r3, 8019216 <__sflush_r+0x46>
 8019212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019214:	1ac0      	subs	r0, r0, r3
 8019216:	2300      	movs	r3, #0
 8019218:	4602      	mov	r2, r0
 801921a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801921c:	6a21      	ldr	r1, [r4, #32]
 801921e:	4628      	mov	r0, r5
 8019220:	47b0      	blx	r6
 8019222:	1c43      	adds	r3, r0, #1
 8019224:	89a3      	ldrh	r3, [r4, #12]
 8019226:	d106      	bne.n	8019236 <__sflush_r+0x66>
 8019228:	6829      	ldr	r1, [r5, #0]
 801922a:	291d      	cmp	r1, #29
 801922c:	d82c      	bhi.n	8019288 <__sflush_r+0xb8>
 801922e:	4a2a      	ldr	r2, [pc, #168]	; (80192d8 <__sflush_r+0x108>)
 8019230:	40ca      	lsrs	r2, r1
 8019232:	07d6      	lsls	r6, r2, #31
 8019234:	d528      	bpl.n	8019288 <__sflush_r+0xb8>
 8019236:	2200      	movs	r2, #0
 8019238:	6062      	str	r2, [r4, #4]
 801923a:	04d9      	lsls	r1, r3, #19
 801923c:	6922      	ldr	r2, [r4, #16]
 801923e:	6022      	str	r2, [r4, #0]
 8019240:	d504      	bpl.n	801924c <__sflush_r+0x7c>
 8019242:	1c42      	adds	r2, r0, #1
 8019244:	d101      	bne.n	801924a <__sflush_r+0x7a>
 8019246:	682b      	ldr	r3, [r5, #0]
 8019248:	b903      	cbnz	r3, 801924c <__sflush_r+0x7c>
 801924a:	6560      	str	r0, [r4, #84]	; 0x54
 801924c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801924e:	602f      	str	r7, [r5, #0]
 8019250:	2900      	cmp	r1, #0
 8019252:	d0ca      	beq.n	80191ea <__sflush_r+0x1a>
 8019254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019258:	4299      	cmp	r1, r3
 801925a:	d002      	beq.n	8019262 <__sflush_r+0x92>
 801925c:	4628      	mov	r0, r5
 801925e:	f7ff fad5 	bl	801880c <_free_r>
 8019262:	2000      	movs	r0, #0
 8019264:	6360      	str	r0, [r4, #52]	; 0x34
 8019266:	e7c1      	b.n	80191ec <__sflush_r+0x1c>
 8019268:	6a21      	ldr	r1, [r4, #32]
 801926a:	2301      	movs	r3, #1
 801926c:	4628      	mov	r0, r5
 801926e:	47b0      	blx	r6
 8019270:	1c41      	adds	r1, r0, #1
 8019272:	d1c7      	bne.n	8019204 <__sflush_r+0x34>
 8019274:	682b      	ldr	r3, [r5, #0]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d0c4      	beq.n	8019204 <__sflush_r+0x34>
 801927a:	2b1d      	cmp	r3, #29
 801927c:	d001      	beq.n	8019282 <__sflush_r+0xb2>
 801927e:	2b16      	cmp	r3, #22
 8019280:	d101      	bne.n	8019286 <__sflush_r+0xb6>
 8019282:	602f      	str	r7, [r5, #0]
 8019284:	e7b1      	b.n	80191ea <__sflush_r+0x1a>
 8019286:	89a3      	ldrh	r3, [r4, #12]
 8019288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801928c:	81a3      	strh	r3, [r4, #12]
 801928e:	e7ad      	b.n	80191ec <__sflush_r+0x1c>
 8019290:	690f      	ldr	r7, [r1, #16]
 8019292:	2f00      	cmp	r7, #0
 8019294:	d0a9      	beq.n	80191ea <__sflush_r+0x1a>
 8019296:	0793      	lsls	r3, r2, #30
 8019298:	680e      	ldr	r6, [r1, #0]
 801929a:	bf08      	it	eq
 801929c:	694b      	ldreq	r3, [r1, #20]
 801929e:	600f      	str	r7, [r1, #0]
 80192a0:	bf18      	it	ne
 80192a2:	2300      	movne	r3, #0
 80192a4:	eba6 0807 	sub.w	r8, r6, r7
 80192a8:	608b      	str	r3, [r1, #8]
 80192aa:	f1b8 0f00 	cmp.w	r8, #0
 80192ae:	dd9c      	ble.n	80191ea <__sflush_r+0x1a>
 80192b0:	6a21      	ldr	r1, [r4, #32]
 80192b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80192b4:	4643      	mov	r3, r8
 80192b6:	463a      	mov	r2, r7
 80192b8:	4628      	mov	r0, r5
 80192ba:	47b0      	blx	r6
 80192bc:	2800      	cmp	r0, #0
 80192be:	dc06      	bgt.n	80192ce <__sflush_r+0xfe>
 80192c0:	89a3      	ldrh	r3, [r4, #12]
 80192c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192c6:	81a3      	strh	r3, [r4, #12]
 80192c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192cc:	e78e      	b.n	80191ec <__sflush_r+0x1c>
 80192ce:	4407      	add	r7, r0
 80192d0:	eba8 0800 	sub.w	r8, r8, r0
 80192d4:	e7e9      	b.n	80192aa <__sflush_r+0xda>
 80192d6:	bf00      	nop
 80192d8:	20400001 	.word	0x20400001

080192dc <_fflush_r>:
 80192dc:	b538      	push	{r3, r4, r5, lr}
 80192de:	690b      	ldr	r3, [r1, #16]
 80192e0:	4605      	mov	r5, r0
 80192e2:	460c      	mov	r4, r1
 80192e4:	b913      	cbnz	r3, 80192ec <_fflush_r+0x10>
 80192e6:	2500      	movs	r5, #0
 80192e8:	4628      	mov	r0, r5
 80192ea:	bd38      	pop	{r3, r4, r5, pc}
 80192ec:	b118      	cbz	r0, 80192f6 <_fflush_r+0x1a>
 80192ee:	6983      	ldr	r3, [r0, #24]
 80192f0:	b90b      	cbnz	r3, 80192f6 <_fflush_r+0x1a>
 80192f2:	f000 f887 	bl	8019404 <__sinit>
 80192f6:	4b14      	ldr	r3, [pc, #80]	; (8019348 <_fflush_r+0x6c>)
 80192f8:	429c      	cmp	r4, r3
 80192fa:	d11b      	bne.n	8019334 <_fflush_r+0x58>
 80192fc:	686c      	ldr	r4, [r5, #4]
 80192fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d0ef      	beq.n	80192e6 <_fflush_r+0xa>
 8019306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019308:	07d0      	lsls	r0, r2, #31
 801930a:	d404      	bmi.n	8019316 <_fflush_r+0x3a>
 801930c:	0599      	lsls	r1, r3, #22
 801930e:	d402      	bmi.n	8019316 <_fflush_r+0x3a>
 8019310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019312:	f000 f915 	bl	8019540 <__retarget_lock_acquire_recursive>
 8019316:	4628      	mov	r0, r5
 8019318:	4621      	mov	r1, r4
 801931a:	f7ff ff59 	bl	80191d0 <__sflush_r>
 801931e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019320:	07da      	lsls	r2, r3, #31
 8019322:	4605      	mov	r5, r0
 8019324:	d4e0      	bmi.n	80192e8 <_fflush_r+0xc>
 8019326:	89a3      	ldrh	r3, [r4, #12]
 8019328:	059b      	lsls	r3, r3, #22
 801932a:	d4dd      	bmi.n	80192e8 <_fflush_r+0xc>
 801932c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801932e:	f000 f908 	bl	8019542 <__retarget_lock_release_recursive>
 8019332:	e7d9      	b.n	80192e8 <_fflush_r+0xc>
 8019334:	4b05      	ldr	r3, [pc, #20]	; (801934c <_fflush_r+0x70>)
 8019336:	429c      	cmp	r4, r3
 8019338:	d101      	bne.n	801933e <_fflush_r+0x62>
 801933a:	68ac      	ldr	r4, [r5, #8]
 801933c:	e7df      	b.n	80192fe <_fflush_r+0x22>
 801933e:	4b04      	ldr	r3, [pc, #16]	; (8019350 <_fflush_r+0x74>)
 8019340:	429c      	cmp	r4, r3
 8019342:	bf08      	it	eq
 8019344:	68ec      	ldreq	r4, [r5, #12]
 8019346:	e7da      	b.n	80192fe <_fflush_r+0x22>
 8019348:	08034214 	.word	0x08034214
 801934c:	08034234 	.word	0x08034234
 8019350:	080341f4 	.word	0x080341f4

08019354 <std>:
 8019354:	2300      	movs	r3, #0
 8019356:	b510      	push	{r4, lr}
 8019358:	4604      	mov	r4, r0
 801935a:	e9c0 3300 	strd	r3, r3, [r0]
 801935e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019362:	6083      	str	r3, [r0, #8]
 8019364:	8181      	strh	r1, [r0, #12]
 8019366:	6643      	str	r3, [r0, #100]	; 0x64
 8019368:	81c2      	strh	r2, [r0, #14]
 801936a:	6183      	str	r3, [r0, #24]
 801936c:	4619      	mov	r1, r3
 801936e:	2208      	movs	r2, #8
 8019370:	305c      	adds	r0, #92	; 0x5c
 8019372:	f7ff fa43 	bl	80187fc <memset>
 8019376:	4b05      	ldr	r3, [pc, #20]	; (801938c <std+0x38>)
 8019378:	6263      	str	r3, [r4, #36]	; 0x24
 801937a:	4b05      	ldr	r3, [pc, #20]	; (8019390 <std+0x3c>)
 801937c:	62a3      	str	r3, [r4, #40]	; 0x28
 801937e:	4b05      	ldr	r3, [pc, #20]	; (8019394 <std+0x40>)
 8019380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019382:	4b05      	ldr	r3, [pc, #20]	; (8019398 <std+0x44>)
 8019384:	6224      	str	r4, [r4, #32]
 8019386:	6323      	str	r3, [r4, #48]	; 0x30
 8019388:	bd10      	pop	{r4, pc}
 801938a:	bf00      	nop
 801938c:	08019629 	.word	0x08019629
 8019390:	0801964b 	.word	0x0801964b
 8019394:	08019683 	.word	0x08019683
 8019398:	080196a7 	.word	0x080196a7

0801939c <_cleanup_r>:
 801939c:	4901      	ldr	r1, [pc, #4]	; (80193a4 <_cleanup_r+0x8>)
 801939e:	f000 b8af 	b.w	8019500 <_fwalk_reent>
 80193a2:	bf00      	nop
 80193a4:	080192dd 	.word	0x080192dd

080193a8 <__sfmoreglue>:
 80193a8:	b570      	push	{r4, r5, r6, lr}
 80193aa:	2268      	movs	r2, #104	; 0x68
 80193ac:	1e4d      	subs	r5, r1, #1
 80193ae:	4355      	muls	r5, r2
 80193b0:	460e      	mov	r6, r1
 80193b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80193b6:	f7ff fa95 	bl	80188e4 <_malloc_r>
 80193ba:	4604      	mov	r4, r0
 80193bc:	b140      	cbz	r0, 80193d0 <__sfmoreglue+0x28>
 80193be:	2100      	movs	r1, #0
 80193c0:	e9c0 1600 	strd	r1, r6, [r0]
 80193c4:	300c      	adds	r0, #12
 80193c6:	60a0      	str	r0, [r4, #8]
 80193c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80193cc:	f7ff fa16 	bl	80187fc <memset>
 80193d0:	4620      	mov	r0, r4
 80193d2:	bd70      	pop	{r4, r5, r6, pc}

080193d4 <__sfp_lock_acquire>:
 80193d4:	4801      	ldr	r0, [pc, #4]	; (80193dc <__sfp_lock_acquire+0x8>)
 80193d6:	f000 b8b3 	b.w	8019540 <__retarget_lock_acquire_recursive>
 80193da:	bf00      	nop
 80193dc:	24003661 	.word	0x24003661

080193e0 <__sfp_lock_release>:
 80193e0:	4801      	ldr	r0, [pc, #4]	; (80193e8 <__sfp_lock_release+0x8>)
 80193e2:	f000 b8ae 	b.w	8019542 <__retarget_lock_release_recursive>
 80193e6:	bf00      	nop
 80193e8:	24003661 	.word	0x24003661

080193ec <__sinit_lock_acquire>:
 80193ec:	4801      	ldr	r0, [pc, #4]	; (80193f4 <__sinit_lock_acquire+0x8>)
 80193ee:	f000 b8a7 	b.w	8019540 <__retarget_lock_acquire_recursive>
 80193f2:	bf00      	nop
 80193f4:	24003662 	.word	0x24003662

080193f8 <__sinit_lock_release>:
 80193f8:	4801      	ldr	r0, [pc, #4]	; (8019400 <__sinit_lock_release+0x8>)
 80193fa:	f000 b8a2 	b.w	8019542 <__retarget_lock_release_recursive>
 80193fe:	bf00      	nop
 8019400:	24003662 	.word	0x24003662

08019404 <__sinit>:
 8019404:	b510      	push	{r4, lr}
 8019406:	4604      	mov	r4, r0
 8019408:	f7ff fff0 	bl	80193ec <__sinit_lock_acquire>
 801940c:	69a3      	ldr	r3, [r4, #24]
 801940e:	b11b      	cbz	r3, 8019418 <__sinit+0x14>
 8019410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019414:	f7ff bff0 	b.w	80193f8 <__sinit_lock_release>
 8019418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801941c:	6523      	str	r3, [r4, #80]	; 0x50
 801941e:	4b13      	ldr	r3, [pc, #76]	; (801946c <__sinit+0x68>)
 8019420:	4a13      	ldr	r2, [pc, #76]	; (8019470 <__sinit+0x6c>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	62a2      	str	r2, [r4, #40]	; 0x28
 8019426:	42a3      	cmp	r3, r4
 8019428:	bf04      	itt	eq
 801942a:	2301      	moveq	r3, #1
 801942c:	61a3      	streq	r3, [r4, #24]
 801942e:	4620      	mov	r0, r4
 8019430:	f000 f820 	bl	8019474 <__sfp>
 8019434:	6060      	str	r0, [r4, #4]
 8019436:	4620      	mov	r0, r4
 8019438:	f000 f81c 	bl	8019474 <__sfp>
 801943c:	60a0      	str	r0, [r4, #8]
 801943e:	4620      	mov	r0, r4
 8019440:	f000 f818 	bl	8019474 <__sfp>
 8019444:	2200      	movs	r2, #0
 8019446:	60e0      	str	r0, [r4, #12]
 8019448:	2104      	movs	r1, #4
 801944a:	6860      	ldr	r0, [r4, #4]
 801944c:	f7ff ff82 	bl	8019354 <std>
 8019450:	68a0      	ldr	r0, [r4, #8]
 8019452:	2201      	movs	r2, #1
 8019454:	2109      	movs	r1, #9
 8019456:	f7ff ff7d 	bl	8019354 <std>
 801945a:	68e0      	ldr	r0, [r4, #12]
 801945c:	2202      	movs	r2, #2
 801945e:	2112      	movs	r1, #18
 8019460:	f7ff ff78 	bl	8019354 <std>
 8019464:	2301      	movs	r3, #1
 8019466:	61a3      	str	r3, [r4, #24]
 8019468:	e7d2      	b.n	8019410 <__sinit+0xc>
 801946a:	bf00      	nop
 801946c:	080341bc 	.word	0x080341bc
 8019470:	0801939d 	.word	0x0801939d

08019474 <__sfp>:
 8019474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019476:	4607      	mov	r7, r0
 8019478:	f7ff ffac 	bl	80193d4 <__sfp_lock_acquire>
 801947c:	4b1e      	ldr	r3, [pc, #120]	; (80194f8 <__sfp+0x84>)
 801947e:	681e      	ldr	r6, [r3, #0]
 8019480:	69b3      	ldr	r3, [r6, #24]
 8019482:	b913      	cbnz	r3, 801948a <__sfp+0x16>
 8019484:	4630      	mov	r0, r6
 8019486:	f7ff ffbd 	bl	8019404 <__sinit>
 801948a:	3648      	adds	r6, #72	; 0x48
 801948c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019490:	3b01      	subs	r3, #1
 8019492:	d503      	bpl.n	801949c <__sfp+0x28>
 8019494:	6833      	ldr	r3, [r6, #0]
 8019496:	b30b      	cbz	r3, 80194dc <__sfp+0x68>
 8019498:	6836      	ldr	r6, [r6, #0]
 801949a:	e7f7      	b.n	801948c <__sfp+0x18>
 801949c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80194a0:	b9d5      	cbnz	r5, 80194d8 <__sfp+0x64>
 80194a2:	4b16      	ldr	r3, [pc, #88]	; (80194fc <__sfp+0x88>)
 80194a4:	60e3      	str	r3, [r4, #12]
 80194a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80194aa:	6665      	str	r5, [r4, #100]	; 0x64
 80194ac:	f000 f847 	bl	801953e <__retarget_lock_init_recursive>
 80194b0:	f7ff ff96 	bl	80193e0 <__sfp_lock_release>
 80194b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80194b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80194bc:	6025      	str	r5, [r4, #0]
 80194be:	61a5      	str	r5, [r4, #24]
 80194c0:	2208      	movs	r2, #8
 80194c2:	4629      	mov	r1, r5
 80194c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80194c8:	f7ff f998 	bl	80187fc <memset>
 80194cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80194d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80194d4:	4620      	mov	r0, r4
 80194d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194d8:	3468      	adds	r4, #104	; 0x68
 80194da:	e7d9      	b.n	8019490 <__sfp+0x1c>
 80194dc:	2104      	movs	r1, #4
 80194de:	4638      	mov	r0, r7
 80194e0:	f7ff ff62 	bl	80193a8 <__sfmoreglue>
 80194e4:	4604      	mov	r4, r0
 80194e6:	6030      	str	r0, [r6, #0]
 80194e8:	2800      	cmp	r0, #0
 80194ea:	d1d5      	bne.n	8019498 <__sfp+0x24>
 80194ec:	f7ff ff78 	bl	80193e0 <__sfp_lock_release>
 80194f0:	230c      	movs	r3, #12
 80194f2:	603b      	str	r3, [r7, #0]
 80194f4:	e7ee      	b.n	80194d4 <__sfp+0x60>
 80194f6:	bf00      	nop
 80194f8:	080341bc 	.word	0x080341bc
 80194fc:	ffff0001 	.word	0xffff0001

08019500 <_fwalk_reent>:
 8019500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019504:	4606      	mov	r6, r0
 8019506:	4688      	mov	r8, r1
 8019508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801950c:	2700      	movs	r7, #0
 801950e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019512:	f1b9 0901 	subs.w	r9, r9, #1
 8019516:	d505      	bpl.n	8019524 <_fwalk_reent+0x24>
 8019518:	6824      	ldr	r4, [r4, #0]
 801951a:	2c00      	cmp	r4, #0
 801951c:	d1f7      	bne.n	801950e <_fwalk_reent+0xe>
 801951e:	4638      	mov	r0, r7
 8019520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019524:	89ab      	ldrh	r3, [r5, #12]
 8019526:	2b01      	cmp	r3, #1
 8019528:	d907      	bls.n	801953a <_fwalk_reent+0x3a>
 801952a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801952e:	3301      	adds	r3, #1
 8019530:	d003      	beq.n	801953a <_fwalk_reent+0x3a>
 8019532:	4629      	mov	r1, r5
 8019534:	4630      	mov	r0, r6
 8019536:	47c0      	blx	r8
 8019538:	4307      	orrs	r7, r0
 801953a:	3568      	adds	r5, #104	; 0x68
 801953c:	e7e9      	b.n	8019512 <_fwalk_reent+0x12>

0801953e <__retarget_lock_init_recursive>:
 801953e:	4770      	bx	lr

08019540 <__retarget_lock_acquire_recursive>:
 8019540:	4770      	bx	lr

08019542 <__retarget_lock_release_recursive>:
 8019542:	4770      	bx	lr

08019544 <__swhatbuf_r>:
 8019544:	b570      	push	{r4, r5, r6, lr}
 8019546:	460e      	mov	r6, r1
 8019548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801954c:	2900      	cmp	r1, #0
 801954e:	b096      	sub	sp, #88	; 0x58
 8019550:	4614      	mov	r4, r2
 8019552:	461d      	mov	r5, r3
 8019554:	da08      	bge.n	8019568 <__swhatbuf_r+0x24>
 8019556:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801955a:	2200      	movs	r2, #0
 801955c:	602a      	str	r2, [r5, #0]
 801955e:	061a      	lsls	r2, r3, #24
 8019560:	d410      	bmi.n	8019584 <__swhatbuf_r+0x40>
 8019562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019566:	e00e      	b.n	8019586 <__swhatbuf_r+0x42>
 8019568:	466a      	mov	r2, sp
 801956a:	f000 f8c3 	bl	80196f4 <_fstat_r>
 801956e:	2800      	cmp	r0, #0
 8019570:	dbf1      	blt.n	8019556 <__swhatbuf_r+0x12>
 8019572:	9a01      	ldr	r2, [sp, #4]
 8019574:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019578:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801957c:	425a      	negs	r2, r3
 801957e:	415a      	adcs	r2, r3
 8019580:	602a      	str	r2, [r5, #0]
 8019582:	e7ee      	b.n	8019562 <__swhatbuf_r+0x1e>
 8019584:	2340      	movs	r3, #64	; 0x40
 8019586:	2000      	movs	r0, #0
 8019588:	6023      	str	r3, [r4, #0]
 801958a:	b016      	add	sp, #88	; 0x58
 801958c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019590 <__smakebuf_r>:
 8019590:	898b      	ldrh	r3, [r1, #12]
 8019592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019594:	079d      	lsls	r5, r3, #30
 8019596:	4606      	mov	r6, r0
 8019598:	460c      	mov	r4, r1
 801959a:	d507      	bpl.n	80195ac <__smakebuf_r+0x1c>
 801959c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80195a0:	6023      	str	r3, [r4, #0]
 80195a2:	6123      	str	r3, [r4, #16]
 80195a4:	2301      	movs	r3, #1
 80195a6:	6163      	str	r3, [r4, #20]
 80195a8:	b002      	add	sp, #8
 80195aa:	bd70      	pop	{r4, r5, r6, pc}
 80195ac:	ab01      	add	r3, sp, #4
 80195ae:	466a      	mov	r2, sp
 80195b0:	f7ff ffc8 	bl	8019544 <__swhatbuf_r>
 80195b4:	9900      	ldr	r1, [sp, #0]
 80195b6:	4605      	mov	r5, r0
 80195b8:	4630      	mov	r0, r6
 80195ba:	f7ff f993 	bl	80188e4 <_malloc_r>
 80195be:	b948      	cbnz	r0, 80195d4 <__smakebuf_r+0x44>
 80195c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195c4:	059a      	lsls	r2, r3, #22
 80195c6:	d4ef      	bmi.n	80195a8 <__smakebuf_r+0x18>
 80195c8:	f023 0303 	bic.w	r3, r3, #3
 80195cc:	f043 0302 	orr.w	r3, r3, #2
 80195d0:	81a3      	strh	r3, [r4, #12]
 80195d2:	e7e3      	b.n	801959c <__smakebuf_r+0xc>
 80195d4:	4b0d      	ldr	r3, [pc, #52]	; (801960c <__smakebuf_r+0x7c>)
 80195d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80195d8:	89a3      	ldrh	r3, [r4, #12]
 80195da:	6020      	str	r0, [r4, #0]
 80195dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80195e0:	81a3      	strh	r3, [r4, #12]
 80195e2:	9b00      	ldr	r3, [sp, #0]
 80195e4:	6163      	str	r3, [r4, #20]
 80195e6:	9b01      	ldr	r3, [sp, #4]
 80195e8:	6120      	str	r0, [r4, #16]
 80195ea:	b15b      	cbz	r3, 8019604 <__smakebuf_r+0x74>
 80195ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195f0:	4630      	mov	r0, r6
 80195f2:	f000 f891 	bl	8019718 <_isatty_r>
 80195f6:	b128      	cbz	r0, 8019604 <__smakebuf_r+0x74>
 80195f8:	89a3      	ldrh	r3, [r4, #12]
 80195fa:	f023 0303 	bic.w	r3, r3, #3
 80195fe:	f043 0301 	orr.w	r3, r3, #1
 8019602:	81a3      	strh	r3, [r4, #12]
 8019604:	89a0      	ldrh	r0, [r4, #12]
 8019606:	4305      	orrs	r5, r0
 8019608:	81a5      	strh	r5, [r4, #12]
 801960a:	e7cd      	b.n	80195a8 <__smakebuf_r+0x18>
 801960c:	0801939d 	.word	0x0801939d

08019610 <__malloc_lock>:
 8019610:	4801      	ldr	r0, [pc, #4]	; (8019618 <__malloc_lock+0x8>)
 8019612:	f7ff bf95 	b.w	8019540 <__retarget_lock_acquire_recursive>
 8019616:	bf00      	nop
 8019618:	24003660 	.word	0x24003660

0801961c <__malloc_unlock>:
 801961c:	4801      	ldr	r0, [pc, #4]	; (8019624 <__malloc_unlock+0x8>)
 801961e:	f7ff bf90 	b.w	8019542 <__retarget_lock_release_recursive>
 8019622:	bf00      	nop
 8019624:	24003660 	.word	0x24003660

08019628 <__sread>:
 8019628:	b510      	push	{r4, lr}
 801962a:	460c      	mov	r4, r1
 801962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019630:	f000 f894 	bl	801975c <_read_r>
 8019634:	2800      	cmp	r0, #0
 8019636:	bfab      	itete	ge
 8019638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801963a:	89a3      	ldrhlt	r3, [r4, #12]
 801963c:	181b      	addge	r3, r3, r0
 801963e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019642:	bfac      	ite	ge
 8019644:	6563      	strge	r3, [r4, #84]	; 0x54
 8019646:	81a3      	strhlt	r3, [r4, #12]
 8019648:	bd10      	pop	{r4, pc}

0801964a <__swrite>:
 801964a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801964e:	461f      	mov	r7, r3
 8019650:	898b      	ldrh	r3, [r1, #12]
 8019652:	05db      	lsls	r3, r3, #23
 8019654:	4605      	mov	r5, r0
 8019656:	460c      	mov	r4, r1
 8019658:	4616      	mov	r6, r2
 801965a:	d505      	bpl.n	8019668 <__swrite+0x1e>
 801965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019660:	2302      	movs	r3, #2
 8019662:	2200      	movs	r2, #0
 8019664:	f000 f868 	bl	8019738 <_lseek_r>
 8019668:	89a3      	ldrh	r3, [r4, #12]
 801966a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801966e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019672:	81a3      	strh	r3, [r4, #12]
 8019674:	4632      	mov	r2, r6
 8019676:	463b      	mov	r3, r7
 8019678:	4628      	mov	r0, r5
 801967a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801967e:	f000 b817 	b.w	80196b0 <_write_r>

08019682 <__sseek>:
 8019682:	b510      	push	{r4, lr}
 8019684:	460c      	mov	r4, r1
 8019686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801968a:	f000 f855 	bl	8019738 <_lseek_r>
 801968e:	1c43      	adds	r3, r0, #1
 8019690:	89a3      	ldrh	r3, [r4, #12]
 8019692:	bf15      	itete	ne
 8019694:	6560      	strne	r0, [r4, #84]	; 0x54
 8019696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801969a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801969e:	81a3      	strheq	r3, [r4, #12]
 80196a0:	bf18      	it	ne
 80196a2:	81a3      	strhne	r3, [r4, #12]
 80196a4:	bd10      	pop	{r4, pc}

080196a6 <__sclose>:
 80196a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196aa:	f000 b813 	b.w	80196d4 <_close_r>
	...

080196b0 <_write_r>:
 80196b0:	b538      	push	{r3, r4, r5, lr}
 80196b2:	4d07      	ldr	r5, [pc, #28]	; (80196d0 <_write_r+0x20>)
 80196b4:	4604      	mov	r4, r0
 80196b6:	4608      	mov	r0, r1
 80196b8:	4611      	mov	r1, r2
 80196ba:	2200      	movs	r2, #0
 80196bc:	602a      	str	r2, [r5, #0]
 80196be:	461a      	mov	r2, r3
 80196c0:	f7ee fc17 	bl	8007ef2 <_write>
 80196c4:	1c43      	adds	r3, r0, #1
 80196c6:	d102      	bne.n	80196ce <_write_r+0x1e>
 80196c8:	682b      	ldr	r3, [r5, #0]
 80196ca:	b103      	cbz	r3, 80196ce <_write_r+0x1e>
 80196cc:	6023      	str	r3, [r4, #0]
 80196ce:	bd38      	pop	{r3, r4, r5, pc}
 80196d0:	24003664 	.word	0x24003664

080196d4 <_close_r>:
 80196d4:	b538      	push	{r3, r4, r5, lr}
 80196d6:	4d06      	ldr	r5, [pc, #24]	; (80196f0 <_close_r+0x1c>)
 80196d8:	2300      	movs	r3, #0
 80196da:	4604      	mov	r4, r0
 80196dc:	4608      	mov	r0, r1
 80196de:	602b      	str	r3, [r5, #0]
 80196e0:	f7ee fc23 	bl	8007f2a <_close>
 80196e4:	1c43      	adds	r3, r0, #1
 80196e6:	d102      	bne.n	80196ee <_close_r+0x1a>
 80196e8:	682b      	ldr	r3, [r5, #0]
 80196ea:	b103      	cbz	r3, 80196ee <_close_r+0x1a>
 80196ec:	6023      	str	r3, [r4, #0]
 80196ee:	bd38      	pop	{r3, r4, r5, pc}
 80196f0:	24003664 	.word	0x24003664

080196f4 <_fstat_r>:
 80196f4:	b538      	push	{r3, r4, r5, lr}
 80196f6:	4d07      	ldr	r5, [pc, #28]	; (8019714 <_fstat_r+0x20>)
 80196f8:	2300      	movs	r3, #0
 80196fa:	4604      	mov	r4, r0
 80196fc:	4608      	mov	r0, r1
 80196fe:	4611      	mov	r1, r2
 8019700:	602b      	str	r3, [r5, #0]
 8019702:	f7ee fc1e 	bl	8007f42 <_fstat>
 8019706:	1c43      	adds	r3, r0, #1
 8019708:	d102      	bne.n	8019710 <_fstat_r+0x1c>
 801970a:	682b      	ldr	r3, [r5, #0]
 801970c:	b103      	cbz	r3, 8019710 <_fstat_r+0x1c>
 801970e:	6023      	str	r3, [r4, #0]
 8019710:	bd38      	pop	{r3, r4, r5, pc}
 8019712:	bf00      	nop
 8019714:	24003664 	.word	0x24003664

08019718 <_isatty_r>:
 8019718:	b538      	push	{r3, r4, r5, lr}
 801971a:	4d06      	ldr	r5, [pc, #24]	; (8019734 <_isatty_r+0x1c>)
 801971c:	2300      	movs	r3, #0
 801971e:	4604      	mov	r4, r0
 8019720:	4608      	mov	r0, r1
 8019722:	602b      	str	r3, [r5, #0]
 8019724:	f7ee fc1d 	bl	8007f62 <_isatty>
 8019728:	1c43      	adds	r3, r0, #1
 801972a:	d102      	bne.n	8019732 <_isatty_r+0x1a>
 801972c:	682b      	ldr	r3, [r5, #0]
 801972e:	b103      	cbz	r3, 8019732 <_isatty_r+0x1a>
 8019730:	6023      	str	r3, [r4, #0]
 8019732:	bd38      	pop	{r3, r4, r5, pc}
 8019734:	24003664 	.word	0x24003664

08019738 <_lseek_r>:
 8019738:	b538      	push	{r3, r4, r5, lr}
 801973a:	4d07      	ldr	r5, [pc, #28]	; (8019758 <_lseek_r+0x20>)
 801973c:	4604      	mov	r4, r0
 801973e:	4608      	mov	r0, r1
 8019740:	4611      	mov	r1, r2
 8019742:	2200      	movs	r2, #0
 8019744:	602a      	str	r2, [r5, #0]
 8019746:	461a      	mov	r2, r3
 8019748:	f7ee fc16 	bl	8007f78 <_lseek>
 801974c:	1c43      	adds	r3, r0, #1
 801974e:	d102      	bne.n	8019756 <_lseek_r+0x1e>
 8019750:	682b      	ldr	r3, [r5, #0]
 8019752:	b103      	cbz	r3, 8019756 <_lseek_r+0x1e>
 8019754:	6023      	str	r3, [r4, #0]
 8019756:	bd38      	pop	{r3, r4, r5, pc}
 8019758:	24003664 	.word	0x24003664

0801975c <_read_r>:
 801975c:	b538      	push	{r3, r4, r5, lr}
 801975e:	4d07      	ldr	r5, [pc, #28]	; (801977c <_read_r+0x20>)
 8019760:	4604      	mov	r4, r0
 8019762:	4608      	mov	r0, r1
 8019764:	4611      	mov	r1, r2
 8019766:	2200      	movs	r2, #0
 8019768:	602a      	str	r2, [r5, #0]
 801976a:	461a      	mov	r2, r3
 801976c:	f7ee fba4 	bl	8007eb8 <_read>
 8019770:	1c43      	adds	r3, r0, #1
 8019772:	d102      	bne.n	801977a <_read_r+0x1e>
 8019774:	682b      	ldr	r3, [r5, #0]
 8019776:	b103      	cbz	r3, 801977a <_read_r+0x1e>
 8019778:	6023      	str	r3, [r4, #0]
 801977a:	bd38      	pop	{r3, r4, r5, pc}
 801977c:	24003664 	.word	0x24003664

08019780 <_init>:
 8019780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019782:	bf00      	nop
 8019784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019786:	bc08      	pop	{r3}
 8019788:	469e      	mov	lr, r3
 801978a:	4770      	bx	lr

0801978c <_fini>:
 801978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801978e:	bf00      	nop
 8019790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019792:	bc08      	pop	{r3}
 8019794:	469e      	mov	lr, r3
 8019796:	4770      	bx	lr
